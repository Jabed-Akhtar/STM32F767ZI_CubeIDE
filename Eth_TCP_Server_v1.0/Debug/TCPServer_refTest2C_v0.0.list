
TCPServer_refTest2C_v0.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018118  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000036b4  08018318  08018318  00028318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b9cc  0801b9cc  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  0801b9cc  0801b9cc  0002b9cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b9d4  0801b9d4  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b9d4  0801b9d4  0002b9d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b9d8  0801b9d8  0002b9d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0801b9dc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d1e4  2000007c  0801ba58  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000d260  0801ba58  0003d260  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004583a  00000000  00000000  000300aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007b40  00000000  00000000  000758e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002458  00000000  00000000  0007d428  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002330  00000000  00000000  0007f880  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003990d  00000000  00000000  00081bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002e049  00000000  00000000  000bb4bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001223c6  00000000  00000000  000e9506  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0020b8cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009d5c  00000000  00000000  0020b948  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000007c 	.word	0x2000007c
 800021c:	00000000 	.word	0x00000000
 8000220:	08018300 	.word	0x08018300

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000080 	.word	0x20000080
 800023c:	08018300 	.word	0x08018300

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b972 	b.w	800060c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	4688      	mov	r8, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14b      	bne.n	80003e6 <__udivmoddi4+0xa6>
 800034e:	428a      	cmp	r2, r1
 8000350:	4615      	mov	r5, r2
 8000352:	d967      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0720 	rsb	r7, r2, #32
 800035e:	fa01 f302 	lsl.w	r3, r1, r2
 8000362:	fa20 f707 	lsr.w	r7, r0, r7
 8000366:	4095      	lsls	r5, r2
 8000368:	ea47 0803 	orr.w	r8, r7, r3
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbb8 f7fe 	udiv	r7, r8, lr
 8000378:	fa1f fc85 	uxth.w	ip, r5
 800037c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000384:	fb07 f10c 	mul.w	r1, r7, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000392:	f080 811b 	bcs.w	80005cc <__udivmoddi4+0x28c>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8118 	bls.w	80005cc <__udivmoddi4+0x28c>
 800039c:	3f02      	subs	r7, #2
 800039e:	442b      	add	r3, r5
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	192c      	adds	r4, r5, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x290>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x290>
 80003c8:	3802      	subs	r0, #2
 80003ca:	442c      	add	r4, r5
 80003cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003d0:	eba4 040c 	sub.w	r4, r4, ip
 80003d4:	2700      	movs	r7, #0
 80003d6:	b11e      	cbz	r6, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c6 4300 	strd	r4, r3, [r6]
 80003e0:	4639      	mov	r1, r7
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xbe>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80eb 	beq.w	80005c6 <__udivmoddi4+0x286>
 80003f0:	2700      	movs	r7, #0
 80003f2:	e9c6 0100 	strd	r0, r1, [r6]
 80003f6:	4638      	mov	r0, r7
 80003f8:	4639      	mov	r1, r7
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f783 	clz	r7, r3
 8000402:	2f00      	cmp	r7, #0
 8000404:	d147      	bne.n	8000496 <__udivmoddi4+0x156>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd0>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80fa 	bhi.w	8000604 <__udivmoddi4+0x2c4>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	4698      	mov	r8, r3
 800041a:	2e00      	cmp	r6, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800041e:	e9c6 4800 	strd	r4, r8, [r6]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xe8>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 808f 	bne.w	8000550 <__udivmoddi4+0x210>
 8000432:	1b49      	subs	r1, r1, r5
 8000434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000438:	fa1f f885 	uxth.w	r8, r5
 800043c:	2701      	movs	r7, #1
 800043e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000442:	0c23      	lsrs	r3, r4, #16
 8000444:	fb0e 111c 	mls	r1, lr, ip, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb08 f10c 	mul.w	r1, r8, ip
 8000450:	4299      	cmp	r1, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x124>
 8000454:	18eb      	adds	r3, r5, r3
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4299      	cmp	r1, r3
 800045e:	f200 80cd 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 8000462:	4684      	mov	ip, r0
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x14c>
 800047c:	192c      	adds	r4, r5, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x14a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80b6 	bhi.w	80005f6 <__udivmoddi4+0x2b6>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e79f      	b.n	80003d6 <__udivmoddi4+0x96>
 8000496:	f1c7 0c20 	rsb	ip, r7, #32
 800049a:	40bb      	lsls	r3, r7
 800049c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004a4:	fa01 f407 	lsl.w	r4, r1, r7
 80004a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80004b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004b4:	4325      	orrs	r5, r4
 80004b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ba:	0c2c      	lsrs	r4, r5, #16
 80004bc:	fb08 3319 	mls	r3, r8, r9, r3
 80004c0:	fa1f fa8e 	uxth.w	sl, lr
 80004c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004c8:	fb09 f40a 	mul.w	r4, r9, sl
 80004cc:	429c      	cmp	r4, r3
 80004ce:	fa02 f207 	lsl.w	r2, r2, r7
 80004d2:	fa00 f107 	lsl.w	r1, r0, r7
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1e 0303 	adds.w	r3, lr, r3
 80004dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e0:	f080 8087 	bcs.w	80005f2 <__udivmoddi4+0x2b2>
 80004e4:	429c      	cmp	r4, r3
 80004e6:	f240 8084 	bls.w	80005f2 <__udivmoddi4+0x2b2>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4473      	add	r3, lr
 80004f0:	1b1b      	subs	r3, r3, r4
 80004f2:	b2ad      	uxth	r5, r5
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3310 	mls	r3, r8, r0, r3
 80004fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000500:	fb00 fa0a 	mul.w	sl, r0, sl
 8000504:	45a2      	cmp	sl, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1e 0404 	adds.w	r4, lr, r4
 800050c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000510:	d26b      	bcs.n	80005ea <__udivmoddi4+0x2aa>
 8000512:	45a2      	cmp	sl, r4
 8000514:	d969      	bls.n	80005ea <__udivmoddi4+0x2aa>
 8000516:	3802      	subs	r0, #2
 8000518:	4474      	add	r4, lr
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	fba0 8902 	umull	r8, r9, r0, r2
 8000522:	eba4 040a 	sub.w	r4, r4, sl
 8000526:	454c      	cmp	r4, r9
 8000528:	46c2      	mov	sl, r8
 800052a:	464b      	mov	r3, r9
 800052c:	d354      	bcc.n	80005d8 <__udivmoddi4+0x298>
 800052e:	d051      	beq.n	80005d4 <__udivmoddi4+0x294>
 8000530:	2e00      	cmp	r6, #0
 8000532:	d069      	beq.n	8000608 <__udivmoddi4+0x2c8>
 8000534:	ebb1 050a 	subs.w	r5, r1, sl
 8000538:	eb64 0403 	sbc.w	r4, r4, r3
 800053c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000540:	40fd      	lsrs	r5, r7
 8000542:	40fc      	lsrs	r4, r7
 8000544:	ea4c 0505 	orr.w	r5, ip, r5
 8000548:	e9c6 5400 	strd	r5, r4, [r6]
 800054c:	2700      	movs	r7, #0
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000550:	f1c2 0320 	rsb	r3, r2, #32
 8000554:	fa20 f703 	lsr.w	r7, r0, r3
 8000558:	4095      	lsls	r5, r2
 800055a:	fa01 f002 	lsl.w	r0, r1, r2
 800055e:	fa21 f303 	lsr.w	r3, r1, r3
 8000562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000566:	4338      	orrs	r0, r7
 8000568:	0c01      	lsrs	r1, r0, #16
 800056a:	fbb3 f7fe 	udiv	r7, r3, lr
 800056e:	fa1f f885 	uxth.w	r8, r5
 8000572:	fb0e 3317 	mls	r3, lr, r7, r3
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb07 f308 	mul.w	r3, r7, r8
 800057e:	428b      	cmp	r3, r1
 8000580:	fa04 f402 	lsl.w	r4, r4, r2
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x256>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f107 3cff 	add.w	ip, r7, #4294967295
 800058c:	d22f      	bcs.n	80005ee <__udivmoddi4+0x2ae>
 800058e:	428b      	cmp	r3, r1
 8000590:	d92d      	bls.n	80005ee <__udivmoddi4+0x2ae>
 8000592:	3f02      	subs	r7, #2
 8000594:	4429      	add	r1, r5
 8000596:	1acb      	subs	r3, r1, r3
 8000598:	b281      	uxth	r1, r0
 800059a:	fbb3 f0fe 	udiv	r0, r3, lr
 800059e:	fb0e 3310 	mls	r3, lr, r0, r3
 80005a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a6:	fb00 f308 	mul.w	r3, r0, r8
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d907      	bls.n	80005be <__udivmoddi4+0x27e>
 80005ae:	1869      	adds	r1, r5, r1
 80005b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005b4:	d217      	bcs.n	80005e6 <__udivmoddi4+0x2a6>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d915      	bls.n	80005e6 <__udivmoddi4+0x2a6>
 80005ba:	3802      	subs	r0, #2
 80005bc:	4429      	add	r1, r5
 80005be:	1ac9      	subs	r1, r1, r3
 80005c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005c4:	e73b      	b.n	800043e <__udivmoddi4+0xfe>
 80005c6:	4637      	mov	r7, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e709      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005cc:	4607      	mov	r7, r0
 80005ce:	e6e7      	b.n	80003a0 <__udivmoddi4+0x60>
 80005d0:	4618      	mov	r0, r3
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d4:	4541      	cmp	r1, r8
 80005d6:	d2ab      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005dc:	eb69 020e 	sbc.w	r2, r9, lr
 80005e0:	3801      	subs	r0, #1
 80005e2:	4613      	mov	r3, r2
 80005e4:	e7a4      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e6:	4660      	mov	r0, ip
 80005e8:	e7e9      	b.n	80005be <__udivmoddi4+0x27e>
 80005ea:	4618      	mov	r0, r3
 80005ec:	e795      	b.n	800051a <__udivmoddi4+0x1da>
 80005ee:	4667      	mov	r7, ip
 80005f0:	e7d1      	b.n	8000596 <__udivmoddi4+0x256>
 80005f2:	4681      	mov	r9, r0
 80005f4:	e77c      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	442c      	add	r4, r5
 80005fa:	e747      	b.n	800048c <__udivmoddi4+0x14c>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	442b      	add	r3, r5
 8000602:	e72f      	b.n	8000464 <__udivmoddi4+0x124>
 8000604:	4638      	mov	r0, r7
 8000606:	e708      	b.n	800041a <__udivmoddi4+0xda>
 8000608:	4637      	mov	r7, r6
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0xa0>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
	...

08000620 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	4a07      	ldr	r2, [pc, #28]	; (800064c <vApplicationGetIdleTaskMemory+0x2c>)
 8000630:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	4a06      	ldr	r2, [pc, #24]	; (8000650 <vApplicationGetIdleTaskMemory+0x30>)
 8000636:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2280      	movs	r2, #128	; 0x80
 800063c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800063e:	bf00      	nop
 8000640:	3714      	adds	r7, #20
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20000098 	.word	0x20000098
 8000650:	200000fc 	.word	0x200000fc

08000654 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000654:	b480      	push	{r7}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
 800065a:	60f8      	str	r0, [r7, #12]
 800065c:	60b9      	str	r1, [r7, #8]
 800065e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	4a07      	ldr	r2, [pc, #28]	; (8000680 <vApplicationGetTimerTaskMemory+0x2c>)
 8000664:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	4a06      	ldr	r2, [pc, #24]	; (8000684 <vApplicationGetTimerTaskMemory+0x30>)
 800066a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000672:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000674:	bf00      	nop
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	200002fc 	.word	0x200002fc
 8000684:	20000360 	.word	0x20000360

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b5b0      	push	{r4, r5, r7, lr}
 800068a:	b090      	sub	sp, #64	; 0x40
 800068c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068e:	f000 fd8c 	bl	80011aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000692:	f000 f86b 	bl	800076c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000696:	f000 f929 	bl	80008ec <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800069a:	f000 f8f7 	bl	800088c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  MX_LWIP_Init();
 800069e:	f004 fb0b 	bl	8004cb8 <MX_LWIP_Init>

  char stri[] = "\n---------- Programm started!!! ----------\n\n\r";
 80006a2:	4b29      	ldr	r3, [pc, #164]	; (8000748 <main+0xc0>)
 80006a4:	463c      	mov	r4, r7
 80006a6:	461d      	mov	r5, r3
 80006a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006b4:	c407      	stmia	r4!, {r0, r1, r2}
 80006b6:	8023      	strh	r3, [r4, #0]
  HAL_UART_Transmit(&huart3, (uint8_t*)stri, strlen(stri), HAL_MAX_DELAY);
 80006b8:	463b      	mov	r3, r7
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff fdca 	bl	8000254 <strlen>
 80006c0:	4603      	mov	r3, r0
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	4639      	mov	r1, r7
 80006c6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ca:	4820      	ldr	r0, [pc, #128]	; (800074c <main+0xc4>)
 80006cc:	f003 fe98 	bl	8004400 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  queue_RxMsg = xQueueCreate(5, sizeof(struct queue_struct));
 80006d0:	2200      	movs	r2, #0
 80006d2:	2130      	movs	r1, #48	; 0x30
 80006d4:	2005      	movs	r0, #5
 80006d6:	f005 fd12 	bl	80060fe <xQueueGenericCreate>
 80006da:	4602      	mov	r2, r0
 80006dc:	4b1c      	ldr	r3, [pc, #112]	; (8000750 <main+0xc8>)
 80006de:	601a      	str	r2, [r3, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  HeartBeat_Timer = xTimerCreate("LEDToggle", pdMS_TO_TICKS(HEART_BEAT_RATE), pdTRUE, 0, callback_LEDToggle);
 80006e0:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <main+0xcc>)
 80006e2:	9300      	str	r3, [sp, #0]
 80006e4:	2300      	movs	r3, #0
 80006e6:	2201      	movs	r2, #1
 80006e8:	21fa      	movs	r1, #250	; 0xfa
 80006ea:	481b      	ldr	r0, [pc, #108]	; (8000758 <main+0xd0>)
 80006ec:	f007 fd1c 	bl	8008128 <xTimerCreate>
 80006f0:	6378      	str	r0, [r7, #52]	; 0x34
//  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
//  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(task_Ethernet,"task_EthTCP", configMINIMAL_STACK_SIZE*4, NULL, 2, NULL);			// Stacksize 4*128kB
 80006f2:	2300      	movs	r3, #0
 80006f4:	9301      	str	r3, [sp, #4]
 80006f6:	2302      	movs	r3, #2
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	2300      	movs	r3, #0
 80006fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000700:	4916      	ldr	r1, [pc, #88]	; (800075c <main+0xd4>)
 8000702:	4817      	ldr	r0, [pc, #92]	; (8000760 <main+0xd8>)
 8000704:	f006 fcbe 	bl	8007084 <xTaskCreate>
  xTaskCreate(task_Gatekeeper,"task_Gatekeeper", configMINIMAL_STACK_SIZE*4, NULL, 3, NULL);	// Stacksize 4*128kB
 8000708:	2300      	movs	r3, #0
 800070a:	9301      	str	r3, [sp, #4]
 800070c:	2303      	movs	r3, #3
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	2300      	movs	r3, #0
 8000712:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000716:	4913      	ldr	r1, [pc, #76]	; (8000764 <main+0xdc>)
 8000718:	4813      	ldr	r0, [pc, #76]	; (8000768 <main+0xe0>)
 800071a:	f006 fcb3 	bl	8007084 <xTaskCreate>

  if(HeartBeat_Timer != NULL){
 800071e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000720:	2b00      	cmp	r3, #0
 8000722:	d00f      	beq.n	8000744 <main+0xbc>
	  Timer_State = xTimerStart(HeartBeat_Timer,0);
 8000724:	f006 ff30 	bl	8007588 <xTaskGetTickCount>
 8000728:	4602      	mov	r2, r0
 800072a:	2300      	movs	r3, #0
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	2300      	movs	r3, #0
 8000730:	2101      	movs	r1, #1
 8000732:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000734:	f007 fd56 	bl	80081e4 <xTimerGenericCommand>
 8000738:	6338      	str	r0, [r7, #48]	; 0x30
	  if(Timer_State == pdPASS){
 800073a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800073c:	2b01      	cmp	r3, #1
 800073e:	d101      	bne.n	8000744 <main+0xbc>
		  vTaskStartScheduler();
 8000740:	f006 fe0e 	bl	8007360 <vTaskStartScheduler>
//  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000744:	e7fe      	b.n	8000744 <main+0xbc>
 8000746:	bf00      	nop
 8000748:	08018340 	.word	0x08018340
 800074c:	20004790 	.word	0x20004790
 8000750:	20004814 	.word	0x20004814
 8000754:	08000a01 	.word	0x08000a01
 8000758:	08018318 	.word	0x08018318
 800075c:	08018324 	.word	0x08018324
 8000760:	08000a95 	.word	0x08000a95
 8000764:	08018330 	.word	0x08018330
 8000768:	08000d35 	.word	0x08000d35

0800076c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b0b8      	sub	sp, #224	; 0xe0
 8000770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000776:	2234      	movs	r2, #52	; 0x34
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f016 fcdd 	bl	801713a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000790:	f107 0308 	add.w	r3, r7, #8
 8000794:	2290      	movs	r2, #144	; 0x90
 8000796:	2100      	movs	r1, #0
 8000798:	4618      	mov	r0, r3
 800079a:	f016 fcce 	bl	801713a <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800079e:	4b39      	ldr	r3, [pc, #228]	; (8000884 <SystemClock_Config+0x118>)
 80007a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a2:	4a38      	ldr	r2, [pc, #224]	; (8000884 <SystemClock_Config+0x118>)
 80007a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a8:	6413      	str	r3, [r2, #64]	; 0x40
 80007aa:	4b36      	ldr	r3, [pc, #216]	; (8000884 <SystemClock_Config+0x118>)
 80007ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b6:	4b34      	ldr	r3, [pc, #208]	; (8000888 <SystemClock_Config+0x11c>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4a33      	ldr	r2, [pc, #204]	; (8000888 <SystemClock_Config+0x11c>)
 80007bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007c0:	6013      	str	r3, [r2, #0]
 80007c2:	4b31      	ldr	r3, [pc, #196]	; (8000888 <SystemClock_Config+0x11c>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007ce:	2301      	movs	r3, #1
 80007d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007dc:	2302      	movs	r3, #2
 80007de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007ea:	2304      	movs	r3, #4
 80007ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 80007f0:	23d8      	movs	r3, #216	; 0xd8
 80007f2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f6:	2302      	movs	r3, #2
 80007f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007fc:	2302      	movs	r3, #2
 80007fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000802:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000806:	4618      	mov	r0, r3
 8000808:	f002 f9cc 	bl	8002ba4 <HAL_RCC_OscConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000812:	f000 fac5 	bl	8000da0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000816:	f002 f975 	bl	8002b04 <HAL_PWREx_EnableOverDrive>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000820:	f000 fabe 	bl	8000da0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000824:	230f      	movs	r3, #15
 8000826:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082a:	2302      	movs	r3, #2
 800082c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000836:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800083a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800083e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000842:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000846:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800084a:	2107      	movs	r1, #7
 800084c:	4618      	mov	r0, r3
 800084e:	f002 fc57 	bl	8003100 <HAL_RCC_ClockConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000858:	f000 faa2 	bl	8000da0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800085c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000860:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000862:	2300      	movs	r3, #0
 8000864:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000866:	f107 0308 	add.w	r3, r7, #8
 800086a:	4618      	mov	r0, r3
 800086c:	f002 fe72 	bl	8003554 <HAL_RCCEx_PeriphCLKConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0x10e>
  {
    Error_Handler();
 8000876:	f000 fa93 	bl	8000da0 <Error_Handler>
  }
}
 800087a:	bf00      	nop
 800087c:	37e0      	adds	r7, #224	; 0xe0
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40023800 	.word	0x40023800
 8000888:	40007000 	.word	0x40007000

0800088c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_USART3_UART_Init+0x58>)
 8000892:	4a15      	ldr	r2, [pc, #84]	; (80008e8 <MX_USART3_UART_Init+0x5c>)
 8000894:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000896:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <MX_USART3_UART_Init+0x58>)
 8000898:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800089c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_USART3_UART_Init+0x58>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_USART3_UART_Init+0x58>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_USART3_UART_Init+0x58>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_USART3_UART_Init+0x58>)
 80008b2:	220c      	movs	r2, #12
 80008b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <MX_USART3_UART_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_USART3_UART_Init+0x58>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <MX_USART3_UART_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_USART3_UART_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_USART3_UART_Init+0x58>)
 80008d0:	f003 fd48 	bl	8004364 <HAL_UART_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008da:	f000 fa61 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20004790 	.word	0x20004790
 80008e8:	40004800 	.word	0x40004800

080008ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08c      	sub	sp, #48	; 0x30
 80008f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000902:	4b3b      	ldr	r3, [pc, #236]	; (80009f0 <MX_GPIO_Init+0x104>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a3a      	ldr	r2, [pc, #232]	; (80009f0 <MX_GPIO_Init+0x104>)
 8000908:	f043 0304 	orr.w	r3, r3, #4
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b38      	ldr	r3, [pc, #224]	; (80009f0 <MX_GPIO_Init+0x104>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0304 	and.w	r3, r3, #4
 8000916:	61bb      	str	r3, [r7, #24]
 8000918:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091a:	4b35      	ldr	r3, [pc, #212]	; (80009f0 <MX_GPIO_Init+0x104>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a34      	ldr	r2, [pc, #208]	; (80009f0 <MX_GPIO_Init+0x104>)
 8000920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b32      	ldr	r3, [pc, #200]	; (80009f0 <MX_GPIO_Init+0x104>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800092e:	617b      	str	r3, [r7, #20]
 8000930:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	4b2f      	ldr	r3, [pc, #188]	; (80009f0 <MX_GPIO_Init+0x104>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a2e      	ldr	r2, [pc, #184]	; (80009f0 <MX_GPIO_Init+0x104>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b2c      	ldr	r3, [pc, #176]	; (80009f0 <MX_GPIO_Init+0x104>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	4b29      	ldr	r3, [pc, #164]	; (80009f0 <MX_GPIO_Init+0x104>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a28      	ldr	r2, [pc, #160]	; (80009f0 <MX_GPIO_Init+0x104>)
 8000950:	f043 0302 	orr.w	r3, r3, #2
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b26      	ldr	r3, [pc, #152]	; (80009f0 <MX_GPIO_Init+0x104>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0302 	and.w	r3, r3, #2
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000962:	4b23      	ldr	r3, [pc, #140]	; (80009f0 <MX_GPIO_Init+0x104>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a22      	ldr	r2, [pc, #136]	; (80009f0 <MX_GPIO_Init+0x104>)
 8000968:	f043 0308 	orr.w	r3, r3, #8
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b20      	ldr	r3, [pc, #128]	; (80009f0 <MX_GPIO_Init+0x104>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0308 	and.w	r3, r3, #8
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800097a:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <MX_GPIO_Init+0x104>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a1c      	ldr	r2, [pc, #112]	; (80009f0 <MX_GPIO_Init+0x104>)
 8000980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <MX_GPIO_Init+0x104>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	f244 0181 	movw	r1, #16513	; 0x4081
 8000998:	4816      	ldr	r0, [pc, #88]	; (80009f4 <MX_GPIO_Init+0x108>)
 800099a:	f002 f867 	bl	8002a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800099e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MX_GPIO_Init+0x10c>)
 80009a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	4812      	ldr	r0, [pc, #72]	; (80009fc <MX_GPIO_Init+0x110>)
 80009b4:	f001 feb0 	bl	8002718 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 80009b8:	f244 0381 	movw	r3, #16513	; 0x4081
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009be:	2301      	movs	r3, #1
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	4808      	ldr	r0, [pc, #32]	; (80009f4 <MX_GPIO_Init+0x108>)
 80009d2:	f001 fea1 	bl	8002718 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2100      	movs	r1, #0
 80009da:	2028      	movs	r0, #40	; 0x28
 80009dc:	f000 fcec 	bl	80013b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009e0:	2028      	movs	r0, #40	; 0x28
 80009e2:	f000 fd05 	bl	80013f0 <HAL_NVIC_EnableIRQ>

}
 80009e6:	bf00      	nop
 80009e8:	3730      	adds	r7, #48	; 0x30
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40020400 	.word	0x40020400
 80009f8:	10110000 	.word	0x10110000
 80009fc:	40020800 	.word	0x40020800

08000a00 <callback_LEDToggle>:
void vAplicationIdleHook(void){
	__WFI();
}

/* Timer callback function */
void callback_LEDToggle(TimerHandle_t xTimer){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); // Green LED
 8000a08:	2101      	movs	r1, #1
 8000a0a:	4803      	ldr	r0, [pc, #12]	; (8000a18 <callback_LEDToggle+0x18>)
 8000a0c:	f002 f847 	bl	8002a9e <HAL_GPIO_TogglePin>
}
 8000a10:	bf00      	nop
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40020400 	.word	0x40020400

08000a1c <HAL_GPIO_EXTI_Callback>:
/*
 * - Interrupt 'HAL_GPIO_EXTI_Callback' not working for Queue
 * - Intension/aim is to send value to Queue on pressing button, which will then be send from Queue from 'task_Gatekeeper'
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b098      	sub	sp, #96	; 0x60
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	80fb      	strh	r3, [r7, #6]
//	UBaseType_t varCri;
//	varCri = taskENTER_CRITICAL_FROM_ISR();

	if (GPIO_Pin == GPIO_PIN_13)
 8000a26:	88fb      	ldrh	r3, [r7, #6]
 8000a28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a2c:	d126      	bne.n	8000a7c <HAL_GPIO_EXTI_Callback+0x60>
	{
		BaseType_t xHigherPrioritTaskWoken;
		xHigherPrioritTaskWoken = pdFALSE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	65fb      	str	r3, [r7, #92]	; 0x5c
//		BaseType_t hptw = pdFALSE;
		char buff_EXTI[MAX];
		memset(&buff_EXTI,0,strlen(buff_EXTI)); // clear the character buffer
 8000a32:	f107 030c 	add.w	r3, r7, #12
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff fc0c 	bl	8000254 <strlen>
 8000a3c:	4602      	mov	r2, r0
 8000a3e:	f107 030c 	add.w	r3, r7, #12
 8000a42:	2100      	movs	r1, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f016 fb78 	bl	801713a <memset>
//		buff_EXTI = "Hilalalala";
//		memcpy(buff_EXTI, (char *)&n_ESVmS, sizeof(n_ESVmS));
		sprintf(buff_EXTI, "%d", n_ESVmS);
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <HAL_GPIO_EXTI_Callback+0x68>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	f107 030c 	add.w	r3, r7, #12
 8000a54:	490c      	ldr	r1, [pc, #48]	; (8000a88 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000a56:	4618      	mov	r0, r3
 8000a58:	f016 fbc4 	bl	80171e4 <siprintf>
//		xQueueSendToBackFromISR(queue_RxMsg, &buff_EXTI, &xHigherPrioritTaskWoken);
//		if( xHigherPrioritTaskWoken )
//		{
//			portYIELD_FROM_ISR(xHigherPrioritTaskWoken);
//		}
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); // Red LED
 8000a5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a60:	480a      	ldr	r0, [pc, #40]	; (8000a8c <HAL_GPIO_EXTI_Callback+0x70>)
 8000a62:	f002 f81c 	bl	8002a9e <HAL_GPIO_TogglePin>

//		portYIELD_FROM_ISR(xHigherPrioritTaskWoken);
		portEND_SWITCHING_ISR(xHigherPrioritTaskWoken); // {}-> needed to write this in every ISR function
 8000a66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d007      	beq.n	8000a7c <HAL_GPIO_EXTI_Callback+0x60>
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <HAL_GPIO_EXTI_Callback+0x74>)
 8000a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	f3bf 8f4f 	dsb	sy
 8000a78:	f3bf 8f6f 	isb	sy
	}

//	taskEXIT_CRITICAL_FROM_ISR(varCri);
}
 8000a7c:	bf00      	nop
 8000a7e:	3760      	adds	r7, #96	; 0x60
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000760 	.word	0x20000760
 8000a88:	08018370 	.word	0x08018370
 8000a8c:	40020400 	.word	0x40020400
 8000a90:	e000ed04 	.word	0xe000ed04

08000a94 <task_Ethernet>:
/*
 * - for creating port and to wait for connection from cleint
 * - When message is to be send to Client -> message to be send is put into Queue, which will then be send from Queue from 'task_Gatekeeper'
 */
void task_Ethernet(void *pvParameters)
{
 8000a94:	b5b0      	push	{r4, r5, r7, lr}
 8000a96:	b0be      	sub	sp, #248	; 0xf8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	char stri1[] = "{task_Ethernet} [info]	Entered task_ethernet.\n\r";
 8000a9c:	4b98      	ldr	r3, [pc, #608]	; (8000d00 <task_Ethernet+0x26c>)
 8000a9e:	f107 04b8 	add.w	r4, r7, #184	; 0xb8
 8000aa2:	461d      	mov	r5, r3
 8000aa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ab0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_UART_Transmit(&huart3, (uint8_t*)stri1, strlen(stri1), HAL_MAX_DELAY);
 8000ab4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff fbcb 	bl	8000254 <strlen>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8000ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aca:	488e      	ldr	r0, [pc, #568]	; (8000d04 <task_Ethernet+0x270>)
 8000acc:	f003 fc98 	bl	8004400 <HAL_UART_Transmit>

	bool echo_status = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
	char str_echo_on_test[] = "ECHO_ON";
 8000ad6:	4a8c      	ldr	r2, [pc, #560]	; (8000d08 <task_Ethernet+0x274>)
 8000ad8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000adc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ae0:	e883 0003 	stmia.w	r3, {r0, r1}
	char str_echo_off_test[] = "ECHO_OFF";
 8000ae4:	4a89      	ldr	r2, [pc, #548]	; (8000d0c <task_Ethernet+0x278>)
 8000ae6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000aea:	ca07      	ldmia	r2, {r0, r1, r2}
 8000aec:	c303      	stmia	r3!, {r0, r1}
 8000aee:	701a      	strb	r2, [r3, #0]
	char str_ESVmS[] = "ESVmS";
 8000af0:	4a87      	ldr	r2, [pc, #540]	; (8000d10 <task_Ethernet+0x27c>)
 8000af2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000af6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000afa:	6018      	str	r0, [r3, #0]
 8000afc:	3304      	adds	r3, #4
 8000afe:	8019      	strh	r1, [r3, #0]
	uint32_t bytesReceived;
	int sockfd, len;
	struct sockaddr_in servaddr, cli;

	/***** 1. Create TCP Socket *****/
	sockfd = socket(AF_INET, SOCK_STREAM, 0);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2101      	movs	r1, #1
 8000b04:	2002      	movs	r0, #2
 8000b06:	f00b fa1d 	bl	800bf44 <lwip_socket>
 8000b0a:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
	if(sockfd == -1)
 8000b0e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b16:	d102      	bne.n	8000b1e <task_Ethernet+0x8a>
	{
		exit(0);
 8000b18:	2000      	movs	r0, #0
 8000b1a:	f016 faa3 	bl	8017064 <exit>
	}
	memset(&servaddr, 0, BUFFER_LENGTH);
 8000b1e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b22:	2228      	movs	r2, #40	; 0x28
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f016 fb07 	bl	801713a <memset>

	// Assign IP, Port
	servaddr.sin_family = AF_INET;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
 8000b32:	2000      	movs	r0, #0
 8000b34:	f00b fdab 	bl	800c68e <lwip_htonl>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
	servaddr.sin_port = htons(SERVER_PORT);
 8000b3c:	f44f 50d1 	mov.w	r0, #6688	; 0x1a20
 8000b40:	f00b fd90 	bl	800c664 <lwip_htons>
 8000b44:	4603      	mov	r3, r0
 8000b46:	877b      	strh	r3, [r7, #58]	; 0x3a

	/***** 2. Bind the Socket to server address *****/
	if ((bind(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr))) != 0)
 8000b48:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b4c:	2210      	movs	r2, #16
 8000b4e:	4619      	mov	r1, r3
 8000b50:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8000b54:	f00a fd4c 	bl	800b5f0 <lwip_bind>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d002      	beq.n	8000b64 <task_Ethernet+0xd0>
	{
		exit(0);
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f016 fa80 	bl	8017064 <exit>
	}
//	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);

	/***** 3. Listen to Clients *****/
	if ((listen(sockfd, 5)) != 0)
 8000b64:	2105      	movs	r1, #5
 8000b66:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8000b6a:	f00a fe05 	bl	800b778 <lwip_listen>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d002      	beq.n	8000b7a <task_Ethernet+0xe6>
	{
		exit(0);
 8000b74:	2000      	movs	r0, #0
 8000b76:	f016 fa75 	bl	8017064 <exit>
	}
	len = sizeof(cli);
 8000b7a:	2310      	movs	r3, #16
 8000b7c:	64bb      	str	r3, [r7, #72]	; 0x48

	/***** 4. Accept connections from the Clients *****/
	sockCli = accept(sockfd, (struct sockaddr *)&cli, &len);
 8000b7e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000b82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b86:	4619      	mov	r1, r3
 8000b88:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8000b8c:	f00a fc12 	bl	800b3b4 <lwip_accept>
 8000b90:	4602      	mov	r2, r0
 8000b92:	4b60      	ldr	r3, [pc, #384]	; (8000d14 <task_Ethernet+0x280>)
 8000b94:	601a      	str	r2, [r3, #0]
	if(sockCli < 0)
 8000b96:	4b5f      	ldr	r3, [pc, #380]	; (8000d14 <task_Ethernet+0x280>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	da02      	bge.n	8000ba4 <task_Ethernet+0x110>
	{
		exit(0);
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f016 fa60 	bl	8017064 <exit>
	}

	// Sending message at the beginning to the Client
	char *msgBeg = "Hello message from Server.\n";
 8000ba4:	4b5c      	ldr	r3, [pc, #368]	; (8000d18 <task_Ethernet+0x284>)
 8000ba6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	char buffer_msgBeg[30];
	strcpy(buffer_msgBeg, msgBeg);
 8000baa:	f107 0308 	add.w	r3, r7, #8
 8000bae:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f016 fb36 	bl	8017224 <strcpy>
	send(sockCli, buffer_msgBeg, strlen(buffer_msgBeg), 0);
 8000bb8:	4b56      	ldr	r3, [pc, #344]	; (8000d14 <task_Ethernet+0x280>)
 8000bba:	681c      	ldr	r4, [r3, #0]
 8000bbc:	f107 0308 	add.w	r3, r7, #8
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fb47 	bl	8000254 <strlen>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	f107 0108 	add.w	r1, r7, #8
 8000bcc:	2300      	movs	r3, #0
 8000bce:	4620      	mov	r0, r4
 8000bd0:	f00b f954 	bl	800be7c <lwip_send>

	/***** Endlos loop *****/
	while(1)
	{
		memset(buff, 0, sizeof(buff));
 8000bd4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000bd8:	2250      	movs	r2, #80	; 0x50
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f016 faac 	bl	801713a <memset>

		/***** REad message from Client *****/
//		read(connfd, buff, sizeof(buff));
		bytesReceived = recv(sockCli, buff, sizeof(buff), 0); // recv(s,mem,len,flags)
 8000be2:	4b4c      	ldr	r3, [pc, #304]	; (8000d14 <task_Ethernet+0x280>)
 8000be4:	6818      	ldr	r0, [r3, #0]
 8000be6:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8000bea:	2300      	movs	r3, #0
 8000bec:	2250      	movs	r2, #80	; 0x50
 8000bee:	f00b f92f 	bl	800be50 <lwip_recv>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		if(bytesReceived<=0)
 8000bf8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d104      	bne.n	8000c0a <task_Ethernet+0x176>
		{
			close(sockCli);
 8000c00:	4b44      	ldr	r3, [pc, #272]	; (8000d14 <task_Ethernet+0x280>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f00a fd61 	bl	800b6cc <lwip_close>
		}

		// Checking for ECHO_ON or ECHO_OFF in received message from Client
		if(strcmp(str_echo_on_test, buff) == 0)
 8000c0a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000c0e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000c12:	4611      	mov	r1, r2
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fb13 	bl	8000240 <strcmp>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d103      	bne.n	8000c28 <task_Ethernet+0x194>
		{
			echo_status = 1;
 8000c20:	2301      	movs	r3, #1
 8000c22:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 8000c26:	e024      	b.n	8000c72 <task_Ethernet+0x1de>
		}
		else if (strcmp(str_echo_off_test, buff) == 0)
 8000c28:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000c2c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c30:	4611      	mov	r1, r2
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff fb04 	bl	8000240 <strcmp>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d108      	bne.n	8000c50 <task_Ethernet+0x1bc>
		{
			echo_status = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2180      	movs	r1, #128	; 0x80
 8000c48:	4834      	ldr	r0, [pc, #208]	; (8000d1c <task_Ethernet+0x288>)
 8000c4a:	f001 ff0f 	bl	8002a6c <HAL_GPIO_WritePin>
 8000c4e:	e010      	b.n	8000c72 <task_Ethernet+0x1de>
		}
		else if(strcmp(str_ESVmS, buff) == 0)
 8000c50:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000c54:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c58:	4611      	mov	r1, r2
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff faf0 	bl	8000240 <strcmp>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d105      	bne.n	8000c72 <task_Ethernet+0x1de>
		{
			n_ESVmS++;
 8000c66:	4b2e      	ldr	r3, [pc, #184]	; (8000d20 <task_Ethernet+0x28c>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4b2c      	ldr	r3, [pc, #176]	; (8000d20 <task_Ethernet+0x28c>)
 8000c70:	701a      	strb	r2, [r3, #0]
		}
		// if msg contains 'exit', 'Exit' or 'EXIT', then server exit/close
		if (strncmp("exit", buff, 4)==0 || strncmp("Exit", buff, 4)==0 || strncmp("EXIT", buff, 4)==0)
 8000c72:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c76:	2204      	movs	r2, #4
 8000c78:	4619      	mov	r1, r3
 8000c7a:	482a      	ldr	r0, [pc, #168]	; (8000d24 <task_Ethernet+0x290>)
 8000c7c:	f016 fada 	bl	8017234 <strncmp>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d013      	beq.n	8000cae <task_Ethernet+0x21a>
 8000c86:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c8a:	2204      	movs	r2, #4
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4826      	ldr	r0, [pc, #152]	; (8000d28 <task_Ethernet+0x294>)
 8000c90:	f016 fad0 	bl	8017234 <strncmp>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d009      	beq.n	8000cae <task_Ethernet+0x21a>
 8000c9a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c9e:	2204      	movs	r2, #4
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4822      	ldr	r0, [pc, #136]	; (8000d2c <task_Ethernet+0x298>)
 8000ca4:	f016 fac6 	bl	8017234 <strncmp>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d105      	bne.n	8000cba <task_Ethernet+0x226>
		{
//			printf("Server Exit...\n");
			close(sockCli);
 8000cae:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <task_Ethernet+0x280>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f00a fd0a 	bl	800b6cc <lwip_close>
			break;
 8000cb8:	e01e      	b.n	8000cf8 <task_Ethernet+0x264>
		}

		// Adding Rx-Messages to queue when echo_status=1 and Rx-Msg is not 'ECHO_ON'
		if(echo_status==1 && strcmp(str_echo_on_test, buff)!=0)
 8000cba:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d088      	beq.n	8000bd4 <task_Ethernet+0x140>
 8000cc2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000cc6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000cca:	4611      	mov	r1, r2
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff fab7 	bl	8000240 <strcmp>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	f43f af7d 	beq.w	8000bd4 <task_Ethernet+0x140>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000cda:	2201      	movs	r2, #1
 8000cdc:	2180      	movs	r1, #128	; 0x80
 8000cde:	480f      	ldr	r0, [pc, #60]	; (8000d1c <task_Ethernet+0x288>)
 8000ce0:	f001 fec4 	bl	8002a6c <HAL_GPIO_WritePin>
			// Send data to Queue -> to Gatekeeper-Task
			xQueueSend(queue_RxMsg, &buff, portMAX_DELAY);
 8000ce4:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <task_Ethernet+0x29c>)
 8000ce6:	6818      	ldr	r0, [r3, #0]
 8000ce8:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8000cec:	2300      	movs	r3, #0
 8000cee:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf2:	f005 fab1 	bl	8006258 <xQueueGenericSend>
		memset(buff, 0, sizeof(buff));
 8000cf6:	e76d      	b.n	8000bd4 <task_Ethernet+0x140>
		}

		// Copy server message in the buffer
//		while((buff[n++] = getchar()) != '\n');
	}
}
 8000cf8:	bf00      	nop
 8000cfa:	37f8      	adds	r7, #248	; 0xf8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bdb0      	pop	{r4, r5, r7, pc}
 8000d00:	080183a8 	.word	0x080183a8
 8000d04:	20004790 	.word	0x20004790
 8000d08:	080183d8 	.word	0x080183d8
 8000d0c:	080183e0 	.word	0x080183e0
 8000d10:	080183ec 	.word	0x080183ec
 8000d14:	2000481c 	.word	0x2000481c
 8000d18:	08018374 	.word	0x08018374
 8000d1c:	40020400 	.word	0x40020400
 8000d20:	20000760 	.word	0x20000760
 8000d24:	08018390 	.word	0x08018390
 8000d28:	08018398 	.word	0x08018398
 8000d2c:	080183a0 	.word	0x080183a0
 8000d30:	20004814 	.word	0x20004814

08000d34 <task_Gatekeeper>:
/*
 * - this task wait for value in Queue
 * - once when there is sth in Queue, it is send out to Client
 */
void task_Gatekeeper(void *pvParameters)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b096      	sub	sp, #88	; 0x58
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	char buff[MAX];
//	xQueuemessage Message_can;

	while(1){
		memset(&buff,0,sizeof(buff)); // reset the struct variable
 8000d3c:	f107 0308 	add.w	r3, r7, #8
 8000d40:	2250      	movs	r2, #80	; 0x50
 8000d42:	2100      	movs	r1, #0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f016 f9f8 	bl	801713a <memset>
		if(xQueueReceive(queue_RxMsg, &buff, portMAX_DELAY)==pdTRUE) // receive message
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <task_Gatekeeper+0x40>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f107 0108 	add.w	r1, r7, #8
 8000d52:	f04f 32ff 	mov.w	r2, #4294967295
 8000d56:	4618      	mov	r0, r3
 8000d58:	f005 fcae 	bl	80066b8 <xQueueReceive>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d1ec      	bne.n	8000d3c <task_Gatekeeper+0x8>
		{
//			char stri1[] = "{task_Gatekeeper} [info]	Entered task_Gatekeeper>afterXQueueReceive.\n\r";
//			HAL_UART_Transmit(&huart3, (uint8_t*)stri1, strlen(stri1), HAL_MAX_DELAY);

			send(sockCli, buff, sizeof(buff)+1, 0);
 8000d62:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <task_Gatekeeper+0x44>)
 8000d64:	6818      	ldr	r0, [r3, #0]
 8000d66:	f107 0108 	add.w	r1, r7, #8
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	2251      	movs	r2, #81	; 0x51
 8000d6e:	f00b f885 	bl	800be7c <lwip_send>
		memset(&buff,0,sizeof(buff)); // reset the struct variable
 8000d72:	e7e3      	b.n	8000d3c <task_Gatekeeper+0x8>
 8000d74:	20004814 	.word	0x20004814
 8000d78:	2000481c 	.word	0x2000481c

08000d7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d101      	bne.n	8000d92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d8e:	f000 fa19 	bl	80011c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40014400 	.word	0x40014400

08000da0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
	...

08000db0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <HAL_MspInit+0x44>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	4a0e      	ldr	r2, [pc, #56]	; (8000df4 <HAL_MspInit+0x44>)
 8000dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <HAL_MspInit+0x44>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dce:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <HAL_MspInit+0x44>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd2:	4a08      	ldr	r2, [pc, #32]	; (8000df4 <HAL_MspInit+0x44>)
 8000dd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_MspInit+0x44>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de2:	603b      	str	r3, [r7, #0]
 8000de4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	40023800 	.word	0x40023800

08000df8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	; 0x28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a17      	ldr	r2, [pc, #92]	; (8000e74 <HAL_UART_MspInit+0x7c>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d128      	bne.n	8000e6c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e1a:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <HAL_UART_MspInit+0x80>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	4a16      	ldr	r2, [pc, #88]	; (8000e78 <HAL_UART_MspInit+0x80>)
 8000e20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e24:	6413      	str	r3, [r2, #64]	; 0x40
 8000e26:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <HAL_UART_MspInit+0x80>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <HAL_UART_MspInit+0x80>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a10      	ldr	r2, [pc, #64]	; (8000e78 <HAL_UART_MspInit+0x80>)
 8000e38:	f043 0308 	orr.w	r3, r3, #8
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <HAL_UART_MspInit+0x80>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0308 	and.w	r3, r3, #8
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e5c:	2307      	movs	r3, #7
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	4619      	mov	r1, r3
 8000e66:	4805      	ldr	r0, [pc, #20]	; (8000e7c <HAL_UART_MspInit+0x84>)
 8000e68:	f001 fc56 	bl	8002718 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e6c:	bf00      	nop
 8000e6e:	3728      	adds	r7, #40	; 0x28
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40004800 	.word	0x40004800
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40020c00 	.word	0x40020c00

08000e80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08c      	sub	sp, #48	; 0x30
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000e90:	2200      	movs	r2, #0
 8000e92:	6879      	ldr	r1, [r7, #4]
 8000e94:	2019      	movs	r0, #25
 8000e96:	f000 fa8f 	bl	80013b8 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e9a:	2019      	movs	r0, #25
 8000e9c:	f000 faa8 	bl	80013f0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000ea0:	4b1f      	ldr	r3, [pc, #124]	; (8000f20 <HAL_InitTick+0xa0>)
 8000ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea4:	4a1e      	ldr	r2, [pc, #120]	; (8000f20 <HAL_InitTick+0xa0>)
 8000ea6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eaa:	6453      	str	r3, [r2, #68]	; 0x44
 8000eac:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <HAL_InitTick+0xa0>)
 8000eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000eb8:	f107 0210 	add.w	r2, r7, #16
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	4611      	mov	r1, r2
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f002 fb14 	bl	80034f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000ec8:	f002 fafe 	bl	80034c8 <HAL_RCC_GetPCLK2Freq>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ed4:	4a13      	ldr	r2, [pc, #76]	; (8000f24 <HAL_InitTick+0xa4>)
 8000ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eda:	0c9b      	lsrs	r3, r3, #18
 8000edc:	3b01      	subs	r3, #1
 8000ede:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <HAL_InitTick+0xa8>)
 8000ee2:	4a12      	ldr	r2, [pc, #72]	; (8000f2c <HAL_InitTick+0xac>)
 8000ee4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000 / 1000) - 1;
 8000ee6:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <HAL_InitTick+0xa8>)
 8000ee8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000eec:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000eee:	4a0e      	ldr	r2, [pc, #56]	; (8000f28 <HAL_InitTick+0xa8>)
 8000ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ef2:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <HAL_InitTick+0xa8>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <HAL_InitTick+0xa8>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8000f00:	4809      	ldr	r0, [pc, #36]	; (8000f28 <HAL_InitTick+0xa8>)
 8000f02:	f002 ff4f 	bl	8003da4 <HAL_TIM_Base_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d104      	bne.n	8000f16 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8000f0c:	4806      	ldr	r0, [pc, #24]	; (8000f28 <HAL_InitTick+0xa8>)
 8000f0e:	f002 ffab 	bl	8003e68 <HAL_TIM_Base_Start_IT>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e000      	b.n	8000f18 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3730      	adds	r7, #48	; 0x30
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40023800 	.word	0x40023800
 8000f24:	431bde83 	.word	0x431bde83
 8000f28:	20004820 	.word	0x20004820
 8000f2c:	40014400 	.word	0x40014400

08000f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f42:	e7fe      	b.n	8000f42 <HardFault_Handler+0x4>

08000f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <MemManage_Handler+0x4>

08000f4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <BusFault_Handler+0x4>

08000f50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <UsageFault_Handler+0x4>

08000f56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000f68:	4802      	ldr	r0, [pc, #8]	; (8000f74 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f6a:	f002 fff5 	bl	8003f58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20004820 	.word	0x20004820

08000f78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000f7c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f80:	f001 fda8 	bl	8002ad4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000f8c:	4802      	ldr	r0, [pc, #8]	; (8000f98 <ETH_IRQHandler+0x10>)
 8000f8e:	f000 fe21 	bl	8001bd4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20006194 	.word	0x20006194

08000f9c <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000fa0:	4802      	ldr	r0, [pc, #8]	; (8000fac <ETH_WKUP_IRQHandler+0x10>)
 8000fa2:	f000 fe17 	bl	8001bd4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20006194 	.word	0x20006194

08000fb0 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000fba:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <_kill+0x20>)
 8000fbc:	2216      	movs	r2, #22
 8000fbe:	601a      	str	r2, [r3, #0]
	return -1;
 8000fc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	2000d258 	.word	0x2000d258

08000fd4 <_exit>:

void _exit (int status)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ffe5 	bl	8000fb0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000fe6:	e7fe      	b.n	8000fe6 <_exit+0x12>

08000fe8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	e00a      	b.n	8001010 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ffa:	f3af 8000 	nop.w
 8000ffe:	4601      	mov	r1, r0
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	1c5a      	adds	r2, r3, #1
 8001004:	60ba      	str	r2, [r7, #8]
 8001006:	b2ca      	uxtb	r2, r1
 8001008:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	3301      	adds	r3, #1
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	697a      	ldr	r2, [r7, #20]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	429a      	cmp	r2, r3
 8001016:	dbf0      	blt.n	8000ffa <_read+0x12>
	}

return len;
 8001018:	687b      	ldr	r3, [r7, #4]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b086      	sub	sp, #24
 8001026:	af00      	add	r7, sp, #0
 8001028:	60f8      	str	r0, [r7, #12]
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
 8001032:	e009      	b.n	8001048 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	1c5a      	adds	r2, r3, #1
 8001038:	60ba      	str	r2, [r7, #8]
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	4618      	mov	r0, r3
 800103e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	3301      	adds	r3, #1
 8001046:	617b      	str	r3, [r7, #20]
 8001048:	697a      	ldr	r2, [r7, #20]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	429a      	cmp	r2, r3
 800104e:	dbf1      	blt.n	8001034 <_write+0x12>
	}
	return len;
 8001050:	687b      	ldr	r3, [r7, #4]
}
 8001052:	4618      	mov	r0, r3
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <_close>:

int _close(int file)
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
	return -1;
 8001062:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001066:	4618      	mov	r0, r3
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001082:	605a      	str	r2, [r3, #4]
	return 0;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <_isatty>:

int _isatty(int file)
{
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
	return 1;
 800109a:	2301      	movs	r3, #1
}
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
	return 0;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3714      	adds	r7, #20
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
	...

080010c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010cc:	4a14      	ldr	r2, [pc, #80]	; (8001120 <_sbrk+0x5c>)
 80010ce:	4b15      	ldr	r3, [pc, #84]	; (8001124 <_sbrk+0x60>)
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010d8:	4b13      	ldr	r3, [pc, #76]	; (8001128 <_sbrk+0x64>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d102      	bne.n	80010e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e0:	4b11      	ldr	r3, [pc, #68]	; (8001128 <_sbrk+0x64>)
 80010e2:	4a12      	ldr	r2, [pc, #72]	; (800112c <_sbrk+0x68>)
 80010e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010e6:	4b10      	ldr	r3, [pc, #64]	; (8001128 <_sbrk+0x64>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4413      	add	r3, r2
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d205      	bcs.n	8001100 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80010f4:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <_sbrk+0x6c>)
 80010f6:	220c      	movs	r2, #12
 80010f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
 80010fe:	e009      	b.n	8001114 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001100:	4b09      	ldr	r3, [pc, #36]	; (8001128 <_sbrk+0x64>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001106:	4b08      	ldr	r3, [pc, #32]	; (8001128 <_sbrk+0x64>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	4a06      	ldr	r2, [pc, #24]	; (8001128 <_sbrk+0x64>)
 8001110:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001112:	68fb      	ldr	r3, [r7, #12]
}
 8001114:	4618      	mov	r0, r3
 8001116:	371c      	adds	r7, #28
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	20080000 	.word	0x20080000
 8001124:	00000400 	.word	0x00000400
 8001128:	20000764 	.word	0x20000764
 800112c:	2000d260 	.word	0x2000d260
 8001130:	2000d258 	.word	0x2000d258

08001134 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <SystemInit+0x20>)
 800113a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800113e:	4a05      	ldr	r2, [pc, #20]	; (8001154 <SystemInit+0x20>)
 8001140:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001144:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <Reset_Handler>:
 8001158:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001190 <LoopFillZerobss+0x12>
 800115c:	480d      	ldr	r0, [pc, #52]	; (8001194 <LoopFillZerobss+0x16>)
 800115e:	490e      	ldr	r1, [pc, #56]	; (8001198 <LoopFillZerobss+0x1a>)
 8001160:	4a0e      	ldr	r2, [pc, #56]	; (800119c <LoopFillZerobss+0x1e>)
 8001162:	2300      	movs	r3, #0
 8001164:	e002      	b.n	800116c <LoopCopyDataInit>

08001166 <CopyDataInit>:
 8001166:	58d4      	ldr	r4, [r2, r3]
 8001168:	50c4      	str	r4, [r0, r3]
 800116a:	3304      	adds	r3, #4

0800116c <LoopCopyDataInit>:
 800116c:	18c4      	adds	r4, r0, r3
 800116e:	428c      	cmp	r4, r1
 8001170:	d3f9      	bcc.n	8001166 <CopyDataInit>
 8001172:	4a0b      	ldr	r2, [pc, #44]	; (80011a0 <LoopFillZerobss+0x22>)
 8001174:	4c0b      	ldr	r4, [pc, #44]	; (80011a4 <LoopFillZerobss+0x26>)
 8001176:	2300      	movs	r3, #0
 8001178:	e001      	b.n	800117e <LoopFillZerobss>

0800117a <FillZerobss>:
 800117a:	6013      	str	r3, [r2, #0]
 800117c:	3204      	adds	r2, #4

0800117e <LoopFillZerobss>:
 800117e:	42a2      	cmp	r2, r4
 8001180:	d3fb      	bcc.n	800117a <FillZerobss>
 8001182:	f7ff ffd7 	bl	8001134 <SystemInit>
 8001186:	f015 ff81 	bl	801708c <__libc_init_array>
 800118a:	f7ff fa7d 	bl	8000688 <main>
 800118e:	4770      	bx	lr
 8001190:	20080000 	.word	0x20080000
 8001194:	20000000 	.word	0x20000000
 8001198:	2000007c 	.word	0x2000007c
 800119c:	0801b9dc 	.word	0x0801b9dc
 80011a0:	2000007c 	.word	0x2000007c
 80011a4:	2000d260 	.word	0x2000d260

080011a8 <ADC_IRQHandler>:
 80011a8:	e7fe      	b.n	80011a8 <ADC_IRQHandler>

080011aa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ae:	2003      	movs	r0, #3
 80011b0:	f000 f8f7 	bl	80013a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011b4:	2000      	movs	r0, #0
 80011b6:	f7ff fe63 	bl	8000e80 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80011ba:	f7ff fdf9 	bl	8000db0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_IncTick+0x20>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_IncTick+0x24>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4413      	add	r3, r2
 80011d4:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <HAL_IncTick+0x24>)
 80011d6:	6013      	str	r3, [r2, #0]
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000008 	.word	0x20000008
 80011e8:	2000486c 	.word	0x2000486c

080011ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return uwTick;
 80011f0:	4b03      	ldr	r3, [pc, #12]	; (8001200 <HAL_GetTick+0x14>)
 80011f2:	681b      	ldr	r3, [r3, #0]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	2000486c 	.word	0x2000486c

08001204 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800120c:	f7ff ffee 	bl	80011ec <HAL_GetTick>
 8001210:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800121c:	d005      	beq.n	800122a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <HAL_Delay+0x40>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4413      	add	r3, r2
 8001228:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800122a:	bf00      	nop
 800122c:	f7ff ffde 	bl	80011ec <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	429a      	cmp	r2, r3
 800123a:	d8f7      	bhi.n	800122c <HAL_Delay+0x28>
  {
  }
}
 800123c:	bf00      	nop
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000008 	.word	0x20000008

08001248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001258:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <__NVIC_SetPriorityGrouping+0x40>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800125e:	68ba      	ldr	r2, [r7, #8]
 8001260:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001264:	4013      	ands	r3, r2
 8001266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <__NVIC_SetPriorityGrouping+0x44>)
 8001272:	4313      	orrs	r3, r2
 8001274:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001276:	4a04      	ldr	r2, [pc, #16]	; (8001288 <__NVIC_SetPriorityGrouping+0x40>)
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	60d3      	str	r3, [r2, #12]
}
 800127c:	bf00      	nop
 800127e:	3714      	adds	r7, #20
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	e000ed00 	.word	0xe000ed00
 800128c:	05fa0000 	.word	0x05fa0000

08001290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001294:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	0a1b      	lsrs	r3, r3, #8
 800129a:	f003 0307 	and.w	r3, r3, #7
}
 800129e:	4618      	mov	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	db0b      	blt.n	80012d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	f003 021f 	and.w	r2, r3, #31
 80012c4:	4907      	ldr	r1, [pc, #28]	; (80012e4 <__NVIC_EnableIRQ+0x38>)
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	095b      	lsrs	r3, r3, #5
 80012cc:	2001      	movs	r0, #1
 80012ce:	fa00 f202 	lsl.w	r2, r0, r2
 80012d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000e100 	.word	0xe000e100

080012e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	6039      	str	r1, [r7, #0]
 80012f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	db0a      	blt.n	8001312 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	490c      	ldr	r1, [pc, #48]	; (8001334 <__NVIC_SetPriority+0x4c>)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	0112      	lsls	r2, r2, #4
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	440b      	add	r3, r1
 800130c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001310:	e00a      	b.n	8001328 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	b2da      	uxtb	r2, r3
 8001316:	4908      	ldr	r1, [pc, #32]	; (8001338 <__NVIC_SetPriority+0x50>)
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	f003 030f 	and.w	r3, r3, #15
 800131e:	3b04      	subs	r3, #4
 8001320:	0112      	lsls	r2, r2, #4
 8001322:	b2d2      	uxtb	r2, r2
 8001324:	440b      	add	r3, r1
 8001326:	761a      	strb	r2, [r3, #24]
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000e100 	.word	0xe000e100
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800133c:	b480      	push	{r7}
 800133e:	b089      	sub	sp, #36	; 0x24
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	f1c3 0307 	rsb	r3, r3, #7
 8001356:	2b04      	cmp	r3, #4
 8001358:	bf28      	it	cs
 800135a:	2304      	movcs	r3, #4
 800135c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	3304      	adds	r3, #4
 8001362:	2b06      	cmp	r3, #6
 8001364:	d902      	bls.n	800136c <NVIC_EncodePriority+0x30>
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3b03      	subs	r3, #3
 800136a:	e000      	b.n	800136e <NVIC_EncodePriority+0x32>
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001370:	f04f 32ff 	mov.w	r2, #4294967295
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43da      	mvns	r2, r3
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	401a      	ands	r2, r3
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001384:	f04f 31ff 	mov.w	r1, #4294967295
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	fa01 f303 	lsl.w	r3, r1, r3
 800138e:	43d9      	mvns	r1, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001394:	4313      	orrs	r3, r2
         );
}
 8001396:	4618      	mov	r0, r3
 8001398:	3724      	adds	r7, #36	; 0x24
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff ff4c 	bl	8001248 <__NVIC_SetPriorityGrouping>
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
 80013c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013ca:	f7ff ff61 	bl	8001290 <__NVIC_GetPriorityGrouping>
 80013ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	68b9      	ldr	r1, [r7, #8]
 80013d4:	6978      	ldr	r0, [r7, #20]
 80013d6:	f7ff ffb1 	bl	800133c <NVIC_EncodePriority>
 80013da:	4602      	mov	r2, r0
 80013dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e0:	4611      	mov	r1, r2
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff ff80 	bl	80012e8 <__NVIC_SetPriority>
}
 80013e8:	bf00      	nop
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff ff54 	bl	80012ac <__NVIC_EnableIRQ>
}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	61fb      	str	r3, [r7, #28]
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 800141c:	4ba9      	ldr	r3, [pc, #676]	; (80016c4 <HAL_ETH_Init+0x2b8>)
 800141e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001424:	2300      	movs	r3, #0
 8001426:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e183      	b.n	800173a <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d106      	bne.n	800144c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f003 fd94 	bl	8004f74 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144c:	4b9e      	ldr	r3, [pc, #632]	; (80016c8 <HAL_ETH_Init+0x2bc>)
 800144e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001450:	4a9d      	ldr	r2, [pc, #628]	; (80016c8 <HAL_ETH_Init+0x2bc>)
 8001452:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001456:	6453      	str	r3, [r2, #68]	; 0x44
 8001458:	4b9b      	ldr	r3, [pc, #620]	; (80016c8 <HAL_ETH_Init+0x2bc>)
 800145a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001464:	4b99      	ldr	r3, [pc, #612]	; (80016cc <HAL_ETH_Init+0x2c0>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	4a98      	ldr	r2, [pc, #608]	; (80016cc <HAL_ETH_Init+0x2c0>)
 800146a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800146e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001470:	4b96      	ldr	r3, [pc, #600]	; (80016cc <HAL_ETH_Init+0x2c0>)
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	4994      	ldr	r1, [pc, #592]	; (80016cc <HAL_ETH_Init+0x2c0>)
 800147a:	4313      	orrs	r3, r2
 800147c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f042 0201 	orr.w	r2, r2, #1
 8001490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001494:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001496:	f7ff fea9 	bl	80011ec <HAL_GetTick>
 800149a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800149c:	e011      	b.n	80014c2 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800149e:	f7ff fea5 	bl	80011ec <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014ac:	d909      	bls.n	80014c2 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2203      	movs	r2, #3
 80014b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e13b      	b.n	800173a <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0301 	and.w	r3, r3, #1
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1e4      	bne.n	800149e <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f023 031c 	bic.w	r3, r3, #28
 80014e2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80014e4:	f001 ffd0 	bl	8003488 <HAL_RCC_GetHCLKFreq>
 80014e8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	4a78      	ldr	r2, [pc, #480]	; (80016d0 <HAL_ETH_Init+0x2c4>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d908      	bls.n	8001504 <HAL_ETH_Init+0xf8>
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	4a77      	ldr	r2, [pc, #476]	; (80016d4 <HAL_ETH_Init+0x2c8>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d804      	bhi.n	8001504 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	f043 0308 	orr.w	r3, r3, #8
 8001500:	61fb      	str	r3, [r7, #28]
 8001502:	e027      	b.n	8001554 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	4a73      	ldr	r2, [pc, #460]	; (80016d4 <HAL_ETH_Init+0x2c8>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d908      	bls.n	800151e <HAL_ETH_Init+0x112>
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	4a72      	ldr	r2, [pc, #456]	; (80016d8 <HAL_ETH_Init+0x2cc>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d804      	bhi.n	800151e <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f043 030c 	orr.w	r3, r3, #12
 800151a:	61fb      	str	r3, [r7, #28]
 800151c:	e01a      	b.n	8001554 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	4a6d      	ldr	r2, [pc, #436]	; (80016d8 <HAL_ETH_Init+0x2cc>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d903      	bls.n	800152e <HAL_ETH_Init+0x122>
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	4a6c      	ldr	r2, [pc, #432]	; (80016dc <HAL_ETH_Init+0x2d0>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d911      	bls.n	8001552 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	4a6a      	ldr	r2, [pc, #424]	; (80016dc <HAL_ETH_Init+0x2d0>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d908      	bls.n	8001548 <HAL_ETH_Init+0x13c>
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	4a69      	ldr	r2, [pc, #420]	; (80016e0 <HAL_ETH_Init+0x2d4>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d804      	bhi.n	8001548 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	f043 0304 	orr.w	r3, r3, #4
 8001544:	61fb      	str	r3, [r7, #28]
 8001546:	e005      	b.n	8001554 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	f043 0310 	orr.w	r3, r3, #16
 800154e:	61fb      	str	r3, [r7, #28]
 8001550:	e000      	b.n	8001554 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001552:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	69fa      	ldr	r2, [r7, #28]
 800155a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800155c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001560:	2100      	movs	r1, #0
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f000 fc19 	bl	8001d9a <HAL_ETH_WritePHYRegister>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00b      	beq.n	8001586 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001572:	6939      	ldr	r1, [r7, #16]
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f000 fdcf 	bl	8002118 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2201      	movs	r2, #1
 800157e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e0d9      	b.n	800173a <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001586:	20ff      	movs	r0, #255	; 0xff
 8001588:	f7ff fe3c 	bl	8001204 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	f000 80a7 	beq.w	80016e4 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001596:	f7ff fe29 	bl	80011ec <HAL_GetTick>
 800159a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800159c:	f107 030c 	add.w	r3, r7, #12
 80015a0:	461a      	mov	r2, r3
 80015a2:	2101      	movs	r1, #1
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f000 fb90 	bl	8001cca <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80015aa:	f7ff fe1f 	bl	80011ec <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d90f      	bls.n	80015dc <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80015c0:	6939      	ldr	r1, [r7, #16]
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f000 fda8 	bl	8002118 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e0ae      	b.n	800173a <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f003 0304 	and.w	r3, r3, #4
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d0da      	beq.n	800159c <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80015e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015ea:	2100      	movs	r1, #0
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f000 fbd4 	bl	8001d9a <HAL_ETH_WritePHYRegister>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d00b      	beq.n	8001610 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80015fc:	6939      	ldr	r1, [r7, #16]
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f000 fd8a 	bl	8002118 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800160c:	2301      	movs	r3, #1
 800160e:	e094      	b.n	800173a <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001610:	f7ff fdec 	bl	80011ec <HAL_GetTick>
 8001614:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001616:	f107 030c 	add.w	r3, r7, #12
 800161a:	461a      	mov	r2, r3
 800161c:	2101      	movs	r1, #1
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f000 fb53 	bl	8001cca <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001624:	f7ff fde2 	bl	80011ec <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001632:	4293      	cmp	r3, r2
 8001634:	d90f      	bls.n	8001656 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800163a:	6939      	ldr	r1, [r7, #16]
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 fd6b 	bl	8002118 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2201      	movs	r2, #1
 8001646:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e071      	b.n	800173a <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f003 0320 	and.w	r3, r3, #32
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0da      	beq.n	8001616 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001660:	f107 030c 	add.w	r3, r7, #12
 8001664:	461a      	mov	r2, r3
 8001666:	211f      	movs	r1, #31
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 fb2e 	bl	8001cca <HAL_ETH_ReadPHYRegister>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d00b      	beq.n	800168c <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001678:	6939      	ldr	r1, [r7, #16]
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 fd4c 	bl	8002118 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001688:	2301      	movs	r3, #1
 800168a:	e056      	b.n	800173a <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f003 0310 	and.w	r3, r3, #16
 8001692:	2b00      	cmp	r3, #0
 8001694:	d004      	beq.n	80016a0 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	e002      	b.n	80016a6 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d003      	beq.n	80016b8 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	e037      	b.n	8001728 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	e032      	b.n	8001728 <HAL_ETH_Init+0x31c>
 80016c2:	bf00      	nop
 80016c4:	03938700 	.word	0x03938700
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40013800 	.word	0x40013800
 80016d0:	01312cff 	.word	0x01312cff
 80016d4:	02160ebf 	.word	0x02160ebf
 80016d8:	039386ff 	.word	0x039386ff
 80016dc:	05f5e0ff 	.word	0x05f5e0ff
 80016e0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	08db      	lsrs	r3, r3, #3
 80016ea:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	085b      	lsrs	r3, r3, #1
 80016f2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80016f4:	4313      	orrs	r3, r2
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	461a      	mov	r2, r3
 80016fa:	2100      	movs	r1, #0
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f000 fb4c 	bl	8001d9a <HAL_ETH_WritePHYRegister>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d00b      	beq.n	8001720 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800170c:	6939      	ldr	r1, [r7, #16]
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 fd02 	bl	8002118 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2201      	movs	r2, #1
 8001718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e00c      	b.n	800173a <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001720:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001724:	f7ff fd6e 	bl	8001204 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001728:	6939      	ldr	r1, [r7, #16]
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 fcf4 	bl	8002118 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2201      	movs	r2, #1
 8001734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3720      	adds	r7, #32
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop

08001744 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001744:	b480      	push	{r7}
 8001746:	b087      	sub	sp, #28
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
 8001750:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800175c:	2b01      	cmp	r3, #1
 800175e:	d101      	bne.n	8001764 <HAL_ETH_DMATxDescListInit+0x20>
 8001760:	2302      	movs	r3, #2
 8001762:	e052      	b.n	800180a <HAL_ETH_DMATxDescListInit+0xc6>
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2202      	movs	r2, #2
 8001770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
 800177e:	e030      	b.n	80017e2 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	015b      	lsls	r3, r3, #5
 8001784:	68ba      	ldr	r2, [r7, #8]
 8001786:	4413      	add	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001790:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001798:	fb02 f303 	mul.w	r3, r2, r3
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	4413      	add	r3, r2
 80017a0:	461a      	mov	r2, r3
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d105      	bne.n	80017ba <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	3b01      	subs	r3, #1
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d208      	bcs.n	80017d6 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	3301      	adds	r3, #1
 80017c8:	015b      	lsls	r3, r3, #5
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	4413      	add	r3, r2
 80017ce:	461a      	mov	r2, r3
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	60da      	str	r2, [r3, #12]
 80017d4:	e002      	b.n	80017dc <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80017d6:	68ba      	ldr	r2, [r7, #8]
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	3301      	adds	r3, #1
 80017e0:	617b      	str	r3, [r7, #20]
 80017e2:	697a      	ldr	r2, [r7, #20]
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d3ca      	bcc.n	8001780 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6819      	ldr	r1, [r3, #0]
 80017ee:	68ba      	ldr	r2, [r7, #8]
 80017f0:	f241 0310 	movw	r3, #4112	; 0x1010
 80017f4:	440b      	add	r3, r1
 80017f6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2201      	movs	r2, #1
 80017fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	371c      	adds	r7, #28
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001816:	b480      	push	{r7}
 8001818:	b087      	sub	sp, #28
 800181a:	af00      	add	r7, sp, #0
 800181c:	60f8      	str	r0, [r7, #12]
 800181e:	60b9      	str	r1, [r7, #8]
 8001820:	607a      	str	r2, [r7, #4]
 8001822:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800182e:	2b01      	cmp	r3, #1
 8001830:	d101      	bne.n	8001836 <HAL_ETH_DMARxDescListInit+0x20>
 8001832:	2302      	movs	r3, #2
 8001834:	e056      	b.n	80018e4 <HAL_ETH_DMARxDescListInit+0xce>
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2201      	movs	r2, #1
 800183a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2202      	movs	r2, #2
 8001842:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	68ba      	ldr	r2, [r7, #8]
 800184a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	e034      	b.n	80018bc <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	015b      	lsls	r3, r3, #5
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	4413      	add	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001862:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800186a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001872:	fb02 f303 	mul.w	r3, r2, r3
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	461a      	mov	r2, r3
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d105      	bne.n	8001894 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	3b01      	subs	r3, #1
 8001898:	697a      	ldr	r2, [r7, #20]
 800189a:	429a      	cmp	r2, r3
 800189c:	d208      	bcs.n	80018b0 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	3301      	adds	r3, #1
 80018a2:	015b      	lsls	r3, r3, #5
 80018a4:	68ba      	ldr	r2, [r7, #8]
 80018a6:	4413      	add	r3, r2
 80018a8:	461a      	mov	r2, r3
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	e002      	b.n	80018b6 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80018b0:	68ba      	ldr	r2, [r7, #8]
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	3301      	adds	r3, #1
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d3c6      	bcc.n	8001852 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6819      	ldr	r1, [r3, #0]
 80018c8:	68ba      	ldr	r2, [r7, #8]
 80018ca:	f241 030c 	movw	r3, #4108	; 0x100c
 80018ce:	440b      	add	r3, r1
 80018d0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2201      	movs	r2, #1
 80018d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	371c      	adds	r7, #28
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b087      	sub	sp, #28
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	2300      	movs	r3, #0
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800190c:	2b01      	cmp	r3, #1
 800190e:	d101      	bne.n	8001914 <HAL_ETH_TransmitFrame+0x24>
 8001910:	2302      	movs	r3, #2
 8001912:	e0cd      	b.n	8001ab0 <HAL_ETH_TransmitFrame+0x1c0>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2202      	movs	r2, #2
 8001920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d109      	bne.n	800193e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2201      	movs	r2, #1
 800192e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800193a:	2301      	movs	r3, #1
 800193c:	e0b8      	b.n	8001ab0 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	da09      	bge.n	800195c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2212      	movs	r2, #18
 800194c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e0a9      	b.n	8001ab0 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001962:	4293      	cmp	r3, r2
 8001964:	d915      	bls.n	8001992 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	4a54      	ldr	r2, [pc, #336]	; (8001abc <HAL_ETH_TransmitFrame+0x1cc>)
 800196a:	fba2 2303 	umull	r2, r3, r2, r3
 800196e:	0a9b      	lsrs	r3, r3, #10
 8001970:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	4b51      	ldr	r3, [pc, #324]	; (8001abc <HAL_ETH_TransmitFrame+0x1cc>)
 8001976:	fba3 1302 	umull	r1, r3, r3, r2
 800197a:	0a9b      	lsrs	r3, r3, #10
 800197c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001980:	fb01 f303 	mul.w	r3, r1, r3
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d005      	beq.n	8001996 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	3301      	adds	r3, #1
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	e001      	b.n	8001996 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8001992:	2301      	movs	r3, #1
 8001994:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d11c      	bne.n	80019d6 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80019aa:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80019b6:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019c6:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	461a      	mov	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80019d4:	e04b      	b.n	8001a6e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	e044      	b.n	8001a66 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019ea:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d107      	bne.n	8001a02 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a00:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a06:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001a0a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d116      	bne.n	8001a44 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a20:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001a24:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	4a25      	ldr	r2, [pc, #148]	; (8001ac0 <HAL_ETH_TransmitFrame+0x1d0>)
 8001a2a:	fb02 f203 	mul.w	r2, r2, r3
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	4413      	add	r3, r2
 8001a32:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001a36:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001a42:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a52:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	3301      	adds	r3, #1
 8001a64:	613b      	str	r3, [r7, #16]
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d3b6      	bcc.n	80019dc <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	f241 0314 	movw	r3, #4116	; 0x1014
 8001a76:	4413      	add	r3, r2
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0304 	and.w	r3, r3, #4
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d00d      	beq.n	8001a9e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	f241 0314 	movw	r3, #4116	; 0x1014
 8001a8a:	4413      	add	r3, r2
 8001a8c:	2204      	movs	r2, #4
 8001a8e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	f241 0304 	movw	r3, #4100	; 0x1004
 8001a98:	4413      	add	r3, r2
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	371c      	adds	r7, #28
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	ac02b00b 	.word	0xac02b00b
 8001ac0:	fffffa0c 	.word	0xfffffa0c

08001ac4 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d101      	bne.n	8001ade <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001ada:	2302      	movs	r3, #2
 8001adc:	e074      	b.n	8001bc8 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2202      	movs	r2, #2
 8001aea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001aee:	e05a      	b.n	8001ba6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	3301      	adds	r3, #1
 8001af4:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b04:	d10d      	bne.n	8001b22 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	629a      	str	r2, [r3, #40]	; 0x28
 8001b20:	e041      	b.n	8001ba6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d10b      	bne.n	8001b48 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b34:	1c5a      	adds	r2, r3, #1
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	461a      	mov	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	629a      	str	r2, [r3, #40]	; 0x28
 8001b46:	e02e      	b.n	8001ba6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b54:	1c5a      	adds	r2, r3, #1
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d103      	bne.n	8001b6a <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	0c1b      	lsrs	r3, r3, #16
 8001b72:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001b76:	1f1a      	subs	r2, r3, #4
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b80:	689a      	ldr	r2, [r3, #8]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	e010      	b.n	8001bc8 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	db02      	blt.n	8001bb6 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2b03      	cmp	r3, #3
 8001bb4:	d99c      	bls.n	8001af0 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	f241 0314 	movw	r3, #4116	; 0x1014
 8001be4:	4413      	add	r3, r2
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bec:	2b40      	cmp	r3, #64	; 0x40
 8001bee:	d112      	bne.n	8001c16 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f003 fa87 	bl	8005104 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	f241 0314 	movw	r3, #4116	; 0x1014
 8001bfe:	4413      	add	r3, r2
 8001c00:	2240      	movs	r2, #64	; 0x40
 8001c02:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c14:	e01b      	b.n	8001c4e <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	f241 0314 	movw	r3, #4116	; 0x1014
 8001c1e:	4413      	add	r3, r2
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d111      	bne.n	8001c4e <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f839 	bl	8001ca2 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	f241 0314 	movw	r3, #4116	; 0x1014
 8001c38:	4413      	add	r3, r2
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	f241 0314 	movw	r3, #4116	; 0x1014
 8001c56:	4413      	add	r3, r2
 8001c58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c5c:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	f241 0314 	movw	r3, #4116	; 0x1014
 8001c66:	4413      	add	r3, r2
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c72:	d112      	bne.n	8001c9a <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 f81e 	bl	8001cb6 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001c82:	4413      	add	r3, r2
 8001c84:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c88:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b086      	sub	sp, #24
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	60f8      	str	r0, [r7, #12]
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	607a      	str	r2, [r7, #4]
 8001cd6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b82      	cmp	r3, #130	; 0x82
 8001cea:	d101      	bne.n	8001cf0 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001cec:	2302      	movs	r3, #2
 8001cee:	e050      	b.n	8001d92 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2282      	movs	r2, #130	; 0x82
 8001cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f003 031c 	and.w	r3, r3, #28
 8001d06:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	8a1b      	ldrh	r3, [r3, #16]
 8001d0c:	02db      	lsls	r3, r3, #11
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001d16:	897b      	ldrh	r3, [r7, #10]
 8001d18:	019b      	lsls	r3, r3, #6
 8001d1a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	f023 0302 	bic.w	r3, r3, #2
 8001d2a:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d3c:	f7ff fa56 	bl	80011ec <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d42:	e015      	b.n	8001d70 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001d44:	f7ff fa52 	bl	80011ec <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d52:	d309      	bcc.n	8001d68 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e014      	b.n	8001d92 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1e4      	bne.n	8001d44 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	695b      	ldr	r3, [r3, #20]
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	461a      	mov	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b086      	sub	sp, #24
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	60f8      	str	r0, [r7, #12]
 8001da2:	460b      	mov	r3, r1
 8001da4:	607a      	str	r2, [r7, #4]
 8001da6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001dac:	2300      	movs	r3, #0
 8001dae:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b42      	cmp	r3, #66	; 0x42
 8001dba:	d101      	bne.n	8001dc0 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	e04e      	b.n	8001e5e <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2242      	movs	r2, #66	; 0x42
 8001dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	f003 031c 	and.w	r3, r3, #28
 8001dd6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8a1b      	ldrh	r3, [r3, #16]
 8001ddc:	02db      	lsls	r3, r3, #11
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001de6:	897b      	ldrh	r3, [r7, #10]
 8001de8:	019b      	lsls	r3, r3, #6
 8001dea:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	f043 0302 	orr.w	r3, r3, #2
 8001dfa:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	f043 0301 	orr.w	r3, r3, #1
 8001e02:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001e16:	f7ff f9e9 	bl	80011ec <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e1c:	e015      	b.n	8001e4a <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001e1e:	f7ff f9e5 	bl	80011ec <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e2c:	d309      	bcc.n	8001e42 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e00d      	b.n	8001e5e <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1e4      	bne.n	8001e1e <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d101      	bne.n	8001e7c <HAL_ETH_Start+0x16>
 8001e78:	2302      	movs	r3, #2
 8001e7a:	e01f      	b.n	8001ebc <HAL_ETH_Start+0x56>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2202      	movs	r2, #2
 8001e88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 fb45 	bl	800251c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 fb7c 	bl	8002590 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 fc13 	bl	80026c4 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 fbb0 	bl	8002604 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 fbdd 	bl	8002664 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d101      	bne.n	8001eda <HAL_ETH_Stop+0x16>
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	e01f      	b.n	8001f1a <HAL_ETH_Stop+0x56>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 fba2 	bl	8002634 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 fbcf 	bl	8002694 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 fb67 	bl	80025ca <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 fbe1 	bl	80026c4 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 fb27 	bl	8002556 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d101      	bne.n	8001f40 <HAL_ETH_ConfigMAC+0x1c>
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	e0e4      	b.n	800210a <HAL_ETH_ConfigMAC+0x1e6>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f000 80b1 	beq.w	80020ba <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	4b6c      	ldr	r3, [pc, #432]	; (8002114 <HAL_ETH_ConfigMAC+0x1f0>)
 8001f64:	4013      	ands	r3, r2
 8001f66:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001f70:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001f76:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001f7c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001f82:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001f88:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001f8e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001f94:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001f9a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001fa0:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001fa6:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001fac:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001fb2:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fca:	2001      	movs	r0, #1
 8001fcc:	f7ff f91a 	bl	8001204 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001fe0:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001fe6:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001fec:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001ff2:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001ff8:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001ffe:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800200a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800200c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002016:	2001      	movs	r0, #1
 8002018:	f7ff f8f4 	bl	8001204 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800202c:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002036:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002046:	4013      	ands	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002054:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800205a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002060:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8002066:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 800206c:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	4313      	orrs	r3, r2
 8002072:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002084:	2001      	movs	r0, #1
 8002086:	f7ff f8bd 	bl	8001204 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	430a      	orrs	r2, r1
 80020a0:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80020aa:	2001      	movs	r0, #1
 80020ac:	f7ff f8aa 	bl	8001204 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	61da      	str	r2, [r3, #28]
 80020b8:	e01e      	b.n	80020f8 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80020c8:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689a      	ldr	r2, [r3, #8]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80020ea:	2001      	movs	r0, #1
 80020ec:	f7ff f88a 	bl	8001204 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	ff20810f 	.word	0xff20810f

08002118 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b0b0      	sub	sp, #192	; 0xc0
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002122:	2300      	movs	r3, #0
 8002124:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d007      	beq.n	800213e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002134:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800213c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800213e:	2300      	movs	r3, #0
 8002140:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002142:	2300      	movs	r3, #0
 8002144:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002146:	2300      	movs	r3, #0
 8002148:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800214a:	2300      	movs	r3, #0
 800214c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800214e:	2300      	movs	r3, #0
 8002150:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002152:	2300      	movs	r3, #0
 8002154:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d103      	bne.n	8002166 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800215e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002162:	663b      	str	r3, [r7, #96]	; 0x60
 8002164:	e001      	b.n	800216a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002166:	2300      	movs	r3, #0
 8002168:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800216a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800216e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002170:	2300      	movs	r3, #0
 8002172:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002174:	2300      	movs	r3, #0
 8002176:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002178:	2300      	movs	r3, #0
 800217a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800217c:	2300      	movs	r3, #0
 800217e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002180:	2300      	movs	r3, #0
 8002182:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002184:	2340      	movs	r3, #64	; 0x40
 8002186:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002188:	2300      	movs	r3, #0
 800218a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800218e:	2300      	movs	r3, #0
 8002190:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002194:	2300      	movs	r3, #0
 8002196:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800219a:	2300      	movs	r3, #0
 800219c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80021a0:	2300      	movs	r3, #0
 80021a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80021a6:	2300      	movs	r3, #0
 80021a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80021b2:	2300      	movs	r3, #0
 80021b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80021b8:	2380      	movs	r3, #128	; 0x80
 80021ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80021be:	2300      	movs	r3, #0
 80021c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80021c4:	2300      	movs	r3, #0
 80021c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80021ca:	2300      	movs	r3, #0
 80021cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80021d0:	2300      	movs	r3, #0
 80021d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80021d6:	2300      	movs	r3, #0
 80021d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80021dc:	2300      	movs	r3, #0
 80021de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80021ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021f0:	4bab      	ldr	r3, [pc, #684]	; (80024a0 <ETH_MACDMAConfig+0x388>)
 80021f2:	4013      	ands	r3, r2
 80021f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80021f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80021fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80021fc:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80021fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002200:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002202:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002204:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800220a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800220c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800220e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002210:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002212:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002218:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800221a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800221c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800221e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002220:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002222:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002224:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002228:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800222a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800222c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800222e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002232:	4313      	orrs	r3, r2
 8002234:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002240:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800224c:	2001      	movs	r0, #1
 800224e:	f7fe ffd9 	bl	8001204 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800225a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800225c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800225e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002260:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002262:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002264:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002266:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800226a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800226c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002270:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002272:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002276:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002278:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800227c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002280:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002288:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800228a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002296:	2001      	movs	r0, #1
 8002298:	f7fe ffb4 	bl	8001204 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022a4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80022ae:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80022b8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80022c4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022c8:	f64f 7341 	movw	r3, #65345	; 0xff41
 80022cc:	4013      	ands	r3, r2
 80022ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80022d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022d6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80022d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80022dc:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80022de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80022e2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80022e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80022e8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80022ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80022ee:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80022f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80022f4:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80022f6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022fa:	4313      	orrs	r3, r2
 80022fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002308:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002314:	2001      	movs	r0, #1
 8002316:	f7fe ff75 	bl	8001204 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002322:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002324:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002328:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800233e:	2001      	movs	r0, #1
 8002340:	f7fe ff60 	bl	8001204 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800234c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800234e:	2300      	movs	r3, #0
 8002350:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002352:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002356:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002358:	2300      	movs	r3, #0
 800235a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800235c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002360:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002362:	2300      	movs	r3, #0
 8002364:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800236a:	2300      	movs	r3, #0
 800236c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800236e:	2300      	movs	r3, #0
 8002370:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002372:	2304      	movs	r3, #4
 8002374:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002376:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800237a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800237c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002380:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002382:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002386:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002388:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800238c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800238e:	2380      	movs	r3, #128	; 0x80
 8002390:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002392:	2300      	movs	r3, #0
 8002394:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002396:	2300      	movs	r3, #0
 8002398:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	f241 0318 	movw	r3, #4120	; 0x1018
 80023a2:	4413      	add	r3, r2
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80023aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023ae:	4b3d      	ldr	r3, [pc, #244]	; (80024a4 <ETH_MACDMAConfig+0x38c>)
 80023b0:	4013      	ands	r3, r2
 80023b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80023b6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80023b8:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80023ba:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80023bc:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80023be:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80023c0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80023c2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80023c4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80023c6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80023c8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80023ca:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80023cc:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80023ce:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80023d2:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80023d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80023d6:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80023d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023dc:	4313      	orrs	r3, r2
 80023de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	f241 0318 	movw	r3, #4120	; 0x1018
 80023ea:	4413      	add	r3, r2
 80023ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023f0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	f241 0318 	movw	r3, #4120	; 0x1018
 80023fa:	4413      	add	r3, r2
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002402:	2001      	movs	r0, #1
 8002404:	f7fe fefe 	bl	8001204 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002410:	4413      	add	r3, r2
 8002412:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002416:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002418:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800241a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800241c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800241e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002420:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002424:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002428:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800242a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800242c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800242e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002432:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800243c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002440:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002450:	2001      	movs	r0, #1
 8002452:	f7fe fed7 	bl	8001204 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800245e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002462:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d10d      	bne.n	8002488 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	f241 031c 	movw	r3, #4124	; 0x101c
 8002474:	4413      	add	r3, r2
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	6811      	ldr	r1, [r2, #0]
 800247c:	4a0a      	ldr	r2, [pc, #40]	; (80024a8 <ETH_MACDMAConfig+0x390>)
 800247e:	431a      	orrs	r2, r3
 8002480:	f241 031c 	movw	r3, #4124	; 0x101c
 8002484:	440b      	add	r3, r1
 8002486:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	461a      	mov	r2, r3
 800248e:	2100      	movs	r1, #0
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 f80b 	bl	80024ac <ETH_MACAddressConfig>
}
 8002496:	bf00      	nop
 8002498:	37c0      	adds	r7, #192	; 0xc0
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	ff20810f 	.word	0xff20810f
 80024a4:	f8de3f23 	.word	0xf8de3f23
 80024a8:	00010040 	.word	0x00010040

080024ac <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b087      	sub	sp, #28
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3305      	adds	r3, #5
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	021b      	lsls	r3, r3, #8
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	3204      	adds	r2, #4
 80024c4:	7812      	ldrb	r2, [r2, #0]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80024ca:	68ba      	ldr	r2, [r7, #8]
 80024cc:	4b11      	ldr	r3, [pc, #68]	; (8002514 <ETH_MACAddressConfig+0x68>)
 80024ce:	4413      	add	r3, r2
 80024d0:	461a      	mov	r2, r3
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	3303      	adds	r3, #3
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	061a      	lsls	r2, r3, #24
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3302      	adds	r3, #2
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	041b      	lsls	r3, r3, #16
 80024e6:	431a      	orrs	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3301      	adds	r3, #1
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	021b      	lsls	r3, r3, #8
 80024f0:	4313      	orrs	r3, r2
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	7812      	ldrb	r2, [r2, #0]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	4b06      	ldr	r3, [pc, #24]	; (8002518 <ETH_MACAddressConfig+0x6c>)
 80024fe:	4413      	add	r3, r2
 8002500:	461a      	mov	r2, r3
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	6013      	str	r3, [r2, #0]
}
 8002506:	bf00      	nop
 8002508:	371c      	adds	r7, #28
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	40028040 	.word	0x40028040
 8002518:	40028044 	.word	0x40028044

0800251c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002524:	2300      	movs	r3, #0
 8002526:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f042 0208 	orr.w	r2, r2, #8
 8002536:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002540:	2001      	movs	r0, #1
 8002542:	f7fe fe5f 	bl	8001204 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	601a      	str	r2, [r3, #0]
}
 800254e:	bf00      	nop
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002556:	b580      	push	{r7, lr}
 8002558:	b084      	sub	sp, #16
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800255e:	2300      	movs	r3, #0
 8002560:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 0208 	bic.w	r2, r2, #8
 8002570:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800257a:	2001      	movs	r0, #1
 800257c:	f7fe fe42 	bl	8001204 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	601a      	str	r2, [r3, #0]
}
 8002588:	bf00      	nop
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002598:	2300      	movs	r3, #0
 800259a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0204 	orr.w	r2, r2, #4
 80025aa:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025b4:	2001      	movs	r0, #1
 80025b6:	f7fe fe25 	bl	8001204 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	601a      	str	r2, [r3, #0]
}
 80025c2:	bf00      	nop
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b084      	sub	sp, #16
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80025d2:	2300      	movs	r3, #0
 80025d4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 0204 	bic.w	r2, r2, #4
 80025e4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025ee:	2001      	movs	r0, #1
 80025f0:	f7fe fe08 	bl	8001204 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	601a      	str	r2, [r3, #0]
}
 80025fc:	bf00      	nop
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	f241 0318 	movw	r3, #4120	; 0x1018
 8002614:	4413      	add	r3, r2
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6811      	ldr	r1, [r2, #0]
 800261c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002620:	f241 0318 	movw	r3, #4120	; 0x1018
 8002624:	440b      	add	r3, r1
 8002626:	601a      	str	r2, [r3, #0]
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	f241 0318 	movw	r3, #4120	; 0x1018
 8002644:	4413      	add	r3, r2
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6811      	ldr	r1, [r2, #0]
 800264c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002650:	f241 0318 	movw	r3, #4120	; 0x1018
 8002654:	440b      	add	r3, r1
 8002656:	601a      	str	r2, [r3, #0]
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	f241 0318 	movw	r3, #4120	; 0x1018
 8002674:	4413      	add	r3, r2
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6811      	ldr	r1, [r2, #0]
 800267c:	f043 0202 	orr.w	r2, r3, #2
 8002680:	f241 0318 	movw	r3, #4120	; 0x1018
 8002684:	440b      	add	r3, r1
 8002686:	601a      	str	r2, [r3, #0]
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	f241 0318 	movw	r3, #4120	; 0x1018
 80026a4:	4413      	add	r3, r2
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6811      	ldr	r1, [r2, #0]
 80026ac:	f023 0202 	bic.w	r2, r3, #2
 80026b0:	f241 0318 	movw	r3, #4120	; 0x1018
 80026b4:	440b      	add	r3, r1
 80026b6:	601a      	str	r2, [r3, #0]
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	f241 0318 	movw	r3, #4120	; 0x1018
 80026d8:	4413      	add	r3, r2
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6811      	ldr	r1, [r2, #0]
 80026e0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80026e4:	f241 0318 	movw	r3, #4120	; 0x1018
 80026e8:	440b      	add	r3, r1
 80026ea:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	f241 0318 	movw	r3, #4120	; 0x1018
 80026f4:	4413      	add	r3, r2
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026fa:	2001      	movs	r0, #1
 80026fc:	f7fe fd82 	bl	8001204 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6819      	ldr	r1, [r3, #0]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	f241 0318 	movw	r3, #4120	; 0x1018
 800270a:	440b      	add	r3, r1
 800270c:	601a      	str	r2, [r3, #0]
}
 800270e:	bf00      	nop
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
	...

08002718 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002718:	b480      	push	{r7}
 800271a:	b089      	sub	sp, #36	; 0x24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002722:	2300      	movs	r3, #0
 8002724:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800272a:	2300      	movs	r3, #0
 800272c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800272e:	2300      	movs	r3, #0
 8002730:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002732:	2300      	movs	r3, #0
 8002734:	61fb      	str	r3, [r7, #28]
 8002736:	e175      	b.n	8002a24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002738:	2201      	movs	r2, #1
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	4013      	ands	r3, r2
 800274a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	429a      	cmp	r2, r3
 8002752:	f040 8164 	bne.w	8002a1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d00b      	beq.n	8002776 <HAL_GPIO_Init+0x5e>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d007      	beq.n	8002776 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800276a:	2b11      	cmp	r3, #17
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b12      	cmp	r3, #18
 8002774:	d130      	bne.n	80027d8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	2203      	movs	r2, #3
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43db      	mvns	r3, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4013      	ands	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027ac:	2201      	movs	r2, #1
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	091b      	lsrs	r3, r3, #4
 80027c2:	f003 0201 	and.w	r2, r3, #1
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	2203      	movs	r2, #3
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4013      	ands	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	2b02      	cmp	r3, #2
 800280e:	d003      	beq.n	8002818 <HAL_GPIO_Init+0x100>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b12      	cmp	r3, #18
 8002816:	d123      	bne.n	8002860 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	08da      	lsrs	r2, r3, #3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3208      	adds	r2, #8
 8002820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002824:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	220f      	movs	r2, #15
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	43db      	mvns	r3, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4013      	ands	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	691a      	ldr	r2, [r3, #16]
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4313      	orrs	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	08da      	lsrs	r2, r3, #3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	3208      	adds	r2, #8
 800285a:	69b9      	ldr	r1, [r7, #24]
 800285c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	2203      	movs	r2, #3
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 0203 	and.w	r2, r3, #3
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4313      	orrs	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 80be 	beq.w	8002a1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028a2:	4b65      	ldr	r3, [pc, #404]	; (8002a38 <HAL_GPIO_Init+0x320>)
 80028a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a6:	4a64      	ldr	r2, [pc, #400]	; (8002a38 <HAL_GPIO_Init+0x320>)
 80028a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028ac:	6453      	str	r3, [r2, #68]	; 0x44
 80028ae:	4b62      	ldr	r3, [pc, #392]	; (8002a38 <HAL_GPIO_Init+0x320>)
 80028b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80028ba:	4a60      	ldr	r2, [pc, #384]	; (8002a3c <HAL_GPIO_Init+0x324>)
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	089b      	lsrs	r3, r3, #2
 80028c0:	3302      	adds	r3, #2
 80028c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	f003 0303 	and.w	r3, r3, #3
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	220f      	movs	r2, #15
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43db      	mvns	r3, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4013      	ands	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a57      	ldr	r2, [pc, #348]	; (8002a40 <HAL_GPIO_Init+0x328>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d037      	beq.n	8002956 <HAL_GPIO_Init+0x23e>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a56      	ldr	r2, [pc, #344]	; (8002a44 <HAL_GPIO_Init+0x32c>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d031      	beq.n	8002952 <HAL_GPIO_Init+0x23a>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a55      	ldr	r2, [pc, #340]	; (8002a48 <HAL_GPIO_Init+0x330>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d02b      	beq.n	800294e <HAL_GPIO_Init+0x236>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a54      	ldr	r2, [pc, #336]	; (8002a4c <HAL_GPIO_Init+0x334>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d025      	beq.n	800294a <HAL_GPIO_Init+0x232>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a53      	ldr	r2, [pc, #332]	; (8002a50 <HAL_GPIO_Init+0x338>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d01f      	beq.n	8002946 <HAL_GPIO_Init+0x22e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a52      	ldr	r2, [pc, #328]	; (8002a54 <HAL_GPIO_Init+0x33c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d019      	beq.n	8002942 <HAL_GPIO_Init+0x22a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a51      	ldr	r2, [pc, #324]	; (8002a58 <HAL_GPIO_Init+0x340>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d013      	beq.n	800293e <HAL_GPIO_Init+0x226>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a50      	ldr	r2, [pc, #320]	; (8002a5c <HAL_GPIO_Init+0x344>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d00d      	beq.n	800293a <HAL_GPIO_Init+0x222>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a4f      	ldr	r2, [pc, #316]	; (8002a60 <HAL_GPIO_Init+0x348>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d007      	beq.n	8002936 <HAL_GPIO_Init+0x21e>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a4e      	ldr	r2, [pc, #312]	; (8002a64 <HAL_GPIO_Init+0x34c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d101      	bne.n	8002932 <HAL_GPIO_Init+0x21a>
 800292e:	2309      	movs	r3, #9
 8002930:	e012      	b.n	8002958 <HAL_GPIO_Init+0x240>
 8002932:	230a      	movs	r3, #10
 8002934:	e010      	b.n	8002958 <HAL_GPIO_Init+0x240>
 8002936:	2308      	movs	r3, #8
 8002938:	e00e      	b.n	8002958 <HAL_GPIO_Init+0x240>
 800293a:	2307      	movs	r3, #7
 800293c:	e00c      	b.n	8002958 <HAL_GPIO_Init+0x240>
 800293e:	2306      	movs	r3, #6
 8002940:	e00a      	b.n	8002958 <HAL_GPIO_Init+0x240>
 8002942:	2305      	movs	r3, #5
 8002944:	e008      	b.n	8002958 <HAL_GPIO_Init+0x240>
 8002946:	2304      	movs	r3, #4
 8002948:	e006      	b.n	8002958 <HAL_GPIO_Init+0x240>
 800294a:	2303      	movs	r3, #3
 800294c:	e004      	b.n	8002958 <HAL_GPIO_Init+0x240>
 800294e:	2302      	movs	r3, #2
 8002950:	e002      	b.n	8002958 <HAL_GPIO_Init+0x240>
 8002952:	2301      	movs	r3, #1
 8002954:	e000      	b.n	8002958 <HAL_GPIO_Init+0x240>
 8002956:	2300      	movs	r3, #0
 8002958:	69fa      	ldr	r2, [r7, #28]
 800295a:	f002 0203 	and.w	r2, r2, #3
 800295e:	0092      	lsls	r2, r2, #2
 8002960:	4093      	lsls	r3, r2
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4313      	orrs	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002968:	4934      	ldr	r1, [pc, #208]	; (8002a3c <HAL_GPIO_Init+0x324>)
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	089b      	lsrs	r3, r3, #2
 800296e:	3302      	adds	r3, #2
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002976:	4b3c      	ldr	r3, [pc, #240]	; (8002a68 <HAL_GPIO_Init+0x350>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	43db      	mvns	r3, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4013      	ands	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800299a:	4a33      	ldr	r2, [pc, #204]	; (8002a68 <HAL_GPIO_Init+0x350>)
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029a0:	4b31      	ldr	r3, [pc, #196]	; (8002a68 <HAL_GPIO_Init+0x350>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	43db      	mvns	r3, r3
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4013      	ands	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029c4:	4a28      	ldr	r2, [pc, #160]	; (8002a68 <HAL_GPIO_Init+0x350>)
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ca:	4b27      	ldr	r3, [pc, #156]	; (8002a68 <HAL_GPIO_Init+0x350>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	43db      	mvns	r3, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4013      	ands	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029ee:	4a1e      	ldr	r2, [pc, #120]	; (8002a68 <HAL_GPIO_Init+0x350>)
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029f4:	4b1c      	ldr	r3, [pc, #112]	; (8002a68 <HAL_GPIO_Init+0x350>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	43db      	mvns	r3, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4013      	ands	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a18:	4a13      	ldr	r2, [pc, #76]	; (8002a68 <HAL_GPIO_Init+0x350>)
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	3301      	adds	r3, #1
 8002a22:	61fb      	str	r3, [r7, #28]
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	2b0f      	cmp	r3, #15
 8002a28:	f67f ae86 	bls.w	8002738 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a2c:	bf00      	nop
 8002a2e:	3724      	adds	r7, #36	; 0x24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	40013800 	.word	0x40013800
 8002a40:	40020000 	.word	0x40020000
 8002a44:	40020400 	.word	0x40020400
 8002a48:	40020800 	.word	0x40020800
 8002a4c:	40020c00 	.word	0x40020c00
 8002a50:	40021000 	.word	0x40021000
 8002a54:	40021400 	.word	0x40021400
 8002a58:	40021800 	.word	0x40021800
 8002a5c:	40021c00 	.word	0x40021c00
 8002a60:	40022000 	.word	0x40022000
 8002a64:	40022400 	.word	0x40022400
 8002a68:	40013c00 	.word	0x40013c00

08002a6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	460b      	mov	r3, r1
 8002a76:	807b      	strh	r3, [r7, #2]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a7c:	787b      	ldrb	r3, [r7, #1]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a82:	887a      	ldrh	r2, [r7, #2]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002a88:	e003      	b.n	8002a92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002a8a:	887b      	ldrh	r3, [r7, #2]
 8002a8c:	041a      	lsls	r2, r3, #16
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	619a      	str	r2, [r3, #24]
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b085      	sub	sp, #20
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ab0:	887a      	ldrh	r2, [r7, #2]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	041a      	lsls	r2, r3, #16
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	43d9      	mvns	r1, r3
 8002abc:	887b      	ldrh	r3, [r7, #2]
 8002abe:	400b      	ands	r3, r1
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	619a      	str	r2, [r3, #24]
}
 8002ac6:	bf00      	nop
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
	...

08002ad4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ade:	4b08      	ldr	r3, [pc, #32]	; (8002b00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ae0:	695a      	ldr	r2, [r3, #20]
 8002ae2:	88fb      	ldrh	r3, [r7, #6]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d006      	beq.n	8002af8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002aea:	4a05      	ldr	r2, [pc, #20]	; (8002b00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002aec:	88fb      	ldrh	r3, [r7, #6]
 8002aee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002af0:	88fb      	ldrh	r3, [r7, #6]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7fd ff92 	bl	8000a1c <HAL_GPIO_EXTI_Callback>
  }
}
 8002af8:	bf00      	nop
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40013c00 	.word	0x40013c00

08002b04 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b0e:	4b23      	ldr	r3, [pc, #140]	; (8002b9c <HAL_PWREx_EnableOverDrive+0x98>)
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	4a22      	ldr	r2, [pc, #136]	; (8002b9c <HAL_PWREx_EnableOverDrive+0x98>)
 8002b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b18:	6413      	str	r3, [r2, #64]	; 0x40
 8002b1a:	4b20      	ldr	r3, [pc, #128]	; (8002b9c <HAL_PWREx_EnableOverDrive+0x98>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b22:	603b      	str	r3, [r7, #0]
 8002b24:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b26:	4b1e      	ldr	r3, [pc, #120]	; (8002ba0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a1d      	ldr	r2, [pc, #116]	; (8002ba0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b30:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b32:	f7fe fb5b 	bl	80011ec <HAL_GetTick>
 8002b36:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b38:	e009      	b.n	8002b4e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b3a:	f7fe fb57 	bl	80011ec <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b48:	d901      	bls.n	8002b4e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e022      	b.n	8002b94 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b4e:	4b14      	ldr	r3, [pc, #80]	; (8002ba0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b5a:	d1ee      	bne.n	8002b3a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b5c:	4b10      	ldr	r3, [pc, #64]	; (8002ba0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a0f      	ldr	r2, [pc, #60]	; (8002ba0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b66:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b68:	f7fe fb40 	bl	80011ec <HAL_GetTick>
 8002b6c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b6e:	e009      	b.n	8002b84 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b70:	f7fe fb3c 	bl	80011ec <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b7e:	d901      	bls.n	8002b84 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e007      	b.n	8002b94 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b84:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b90:	d1ee      	bne.n	8002b70 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	40007000 	.word	0x40007000

08002ba4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002bac:	2300      	movs	r3, #0
 8002bae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e29b      	b.n	80030f2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 8087 	beq.w	8002cd6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bc8:	4b96      	ldr	r3, [pc, #600]	; (8002e24 <HAL_RCC_OscConfig+0x280>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 030c 	and.w	r3, r3, #12
 8002bd0:	2b04      	cmp	r3, #4
 8002bd2:	d00c      	beq.n	8002bee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bd4:	4b93      	ldr	r3, [pc, #588]	; (8002e24 <HAL_RCC_OscConfig+0x280>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 030c 	and.w	r3, r3, #12
 8002bdc:	2b08      	cmp	r3, #8
 8002bde:	d112      	bne.n	8002c06 <HAL_RCC_OscConfig+0x62>
 8002be0:	4b90      	ldr	r3, [pc, #576]	; (8002e24 <HAL_RCC_OscConfig+0x280>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002be8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bec:	d10b      	bne.n	8002c06 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bee:	4b8d      	ldr	r3, [pc, #564]	; (8002e24 <HAL_RCC_OscConfig+0x280>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d06c      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x130>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d168      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e275      	b.n	80030f2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c0e:	d106      	bne.n	8002c1e <HAL_RCC_OscConfig+0x7a>
 8002c10:	4b84      	ldr	r3, [pc, #528]	; (8002e24 <HAL_RCC_OscConfig+0x280>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a83      	ldr	r2, [pc, #524]	; (8002e24 <HAL_RCC_OscConfig+0x280>)
 8002c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c1a:	6013      	str	r3, [r2, #0]
 8002c1c:	e02e      	b.n	8002c7c <HAL_RCC_OscConfig+0xd8>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10c      	bne.n	8002c40 <HAL_RCC_OscConfig+0x9c>
 8002c26:	4b7f      	ldr	r3, [pc, #508]	; (8002e24 <HAL_RCC_OscConfig+0x280>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a7e      	ldr	r2, [pc, #504]	; (8002e24 <HAL_RCC_OscConfig+0x280>)
 8002c2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	4b7c      	ldr	r3, [pc, #496]	; (8002e24 <HAL_RCC_OscConfig+0x280>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a7b      	ldr	r2, [pc, #492]	; (8002e24 <HAL_RCC_OscConfig+0x280>)
 8002c38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	e01d      	b.n	8002c7c <HAL_RCC_OscConfig+0xd8>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c48:	d10c      	bne.n	8002c64 <HAL_RCC_OscConfig+0xc0>
 8002c4a:	4b76      	ldr	r3, [pc, #472]	; (8002e24 <HAL_RCC_OscConfig+0x280>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a75      	ldr	r2, [pc, #468]	; (8002e24 <HAL_RCC_OscConfig+0x280>)
 8002c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c54:	6013      	str	r3, [r2, #0]
 8002c56:	4b73      	ldr	r3, [pc, #460]	; (8002e24 <HAL_RCC_OscConfig+0x280>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a72      	ldr	r2, [pc, #456]	; (8002e24 <HAL_RCC_OscConfig+0x280>)
 8002c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	e00b      	b.n	8002c7c <HAL_RCC_OscConfig+0xd8>
 8002c64:	4b6f      	ldr	r3, [pc, #444]	; (8002e24 <HAL_RCC_OscConfig+0x280>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a6e      	ldr	r2, [pc, #440]	; (8002e24 <HAL_RCC_OscConfig+0x280>)
 8002c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c6e:	6013      	str	r3, [r2, #0]
 8002c70:	4b6c      	ldr	r3, [pc, #432]	; (8002e24 <HAL_RCC_OscConfig+0x280>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a6b      	ldr	r2, [pc, #428]	; (8002e24 <HAL_RCC_OscConfig+0x280>)
 8002c76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d013      	beq.n	8002cac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c84:	f7fe fab2 	bl	80011ec <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c8c:	f7fe faae 	bl	80011ec <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b64      	cmp	r3, #100	; 0x64
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e229      	b.n	80030f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9e:	4b61      	ldr	r3, [pc, #388]	; (8002e24 <HAL_RCC_OscConfig+0x280>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0f0      	beq.n	8002c8c <HAL_RCC_OscConfig+0xe8>
 8002caa:	e014      	b.n	8002cd6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cac:	f7fe fa9e 	bl	80011ec <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb4:	f7fe fa9a 	bl	80011ec <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b64      	cmp	r3, #100	; 0x64
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e215      	b.n	80030f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc6:	4b57      	ldr	r3, [pc, #348]	; (8002e24 <HAL_RCC_OscConfig+0x280>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1f0      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x110>
 8002cd2:	e000      	b.n	8002cd6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d069      	beq.n	8002db6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ce2:	4b50      	ldr	r3, [pc, #320]	; (8002e24 <HAL_RCC_OscConfig+0x280>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 030c 	and.w	r3, r3, #12
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00b      	beq.n	8002d06 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cee:	4b4d      	ldr	r3, [pc, #308]	; (8002e24 <HAL_RCC_OscConfig+0x280>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 030c 	and.w	r3, r3, #12
 8002cf6:	2b08      	cmp	r3, #8
 8002cf8:	d11c      	bne.n	8002d34 <HAL_RCC_OscConfig+0x190>
 8002cfa:	4b4a      	ldr	r3, [pc, #296]	; (8002e24 <HAL_RCC_OscConfig+0x280>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d116      	bne.n	8002d34 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d06:	4b47      	ldr	r3, [pc, #284]	; (8002e24 <HAL_RCC_OscConfig+0x280>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d005      	beq.n	8002d1e <HAL_RCC_OscConfig+0x17a>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d001      	beq.n	8002d1e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e1e9      	b.n	80030f2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d1e:	4b41      	ldr	r3, [pc, #260]	; (8002e24 <HAL_RCC_OscConfig+0x280>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	493d      	ldr	r1, [pc, #244]	; (8002e24 <HAL_RCC_OscConfig+0x280>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d32:	e040      	b.n	8002db6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d023      	beq.n	8002d84 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d3c:	4b39      	ldr	r3, [pc, #228]	; (8002e24 <HAL_RCC_OscConfig+0x280>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a38      	ldr	r2, [pc, #224]	; (8002e24 <HAL_RCC_OscConfig+0x280>)
 8002d42:	f043 0301 	orr.w	r3, r3, #1
 8002d46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d48:	f7fe fa50 	bl	80011ec <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d50:	f7fe fa4c 	bl	80011ec <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e1c7      	b.n	80030f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d62:	4b30      	ldr	r3, [pc, #192]	; (8002e24 <HAL_RCC_OscConfig+0x280>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0f0      	beq.n	8002d50 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d6e:	4b2d      	ldr	r3, [pc, #180]	; (8002e24 <HAL_RCC_OscConfig+0x280>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	4929      	ldr	r1, [pc, #164]	; (8002e24 <HAL_RCC_OscConfig+0x280>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	600b      	str	r3, [r1, #0]
 8002d82:	e018      	b.n	8002db6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d84:	4b27      	ldr	r3, [pc, #156]	; (8002e24 <HAL_RCC_OscConfig+0x280>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a26      	ldr	r2, [pc, #152]	; (8002e24 <HAL_RCC_OscConfig+0x280>)
 8002d8a:	f023 0301 	bic.w	r3, r3, #1
 8002d8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d90:	f7fe fa2c 	bl	80011ec <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d98:	f7fe fa28 	bl	80011ec <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e1a3      	b.n	80030f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002daa:	4b1e      	ldr	r3, [pc, #120]	; (8002e24 <HAL_RCC_OscConfig+0x280>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1f0      	bne.n	8002d98 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0308 	and.w	r3, r3, #8
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d038      	beq.n	8002e34 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d019      	beq.n	8002dfe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dca:	4b16      	ldr	r3, [pc, #88]	; (8002e24 <HAL_RCC_OscConfig+0x280>)
 8002dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dce:	4a15      	ldr	r2, [pc, #84]	; (8002e24 <HAL_RCC_OscConfig+0x280>)
 8002dd0:	f043 0301 	orr.w	r3, r3, #1
 8002dd4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd6:	f7fe fa09 	bl	80011ec <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dde:	f7fe fa05 	bl	80011ec <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e180      	b.n	80030f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df0:	4b0c      	ldr	r3, [pc, #48]	; (8002e24 <HAL_RCC_OscConfig+0x280>)
 8002df2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0f0      	beq.n	8002dde <HAL_RCC_OscConfig+0x23a>
 8002dfc:	e01a      	b.n	8002e34 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dfe:	4b09      	ldr	r3, [pc, #36]	; (8002e24 <HAL_RCC_OscConfig+0x280>)
 8002e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e02:	4a08      	ldr	r2, [pc, #32]	; (8002e24 <HAL_RCC_OscConfig+0x280>)
 8002e04:	f023 0301 	bic.w	r3, r3, #1
 8002e08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0a:	f7fe f9ef 	bl	80011ec <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e10:	e00a      	b.n	8002e28 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e12:	f7fe f9eb 	bl	80011ec <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d903      	bls.n	8002e28 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e166      	b.n	80030f2 <HAL_RCC_OscConfig+0x54e>
 8002e24:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e28:	4b92      	ldr	r3, [pc, #584]	; (8003074 <HAL_RCC_OscConfig+0x4d0>)
 8002e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1ee      	bne.n	8002e12 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0304 	and.w	r3, r3, #4
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f000 80a4 	beq.w	8002f8a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e42:	4b8c      	ldr	r3, [pc, #560]	; (8003074 <HAL_RCC_OscConfig+0x4d0>)
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10d      	bne.n	8002e6a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e4e:	4b89      	ldr	r3, [pc, #548]	; (8003074 <HAL_RCC_OscConfig+0x4d0>)
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	4a88      	ldr	r2, [pc, #544]	; (8003074 <HAL_RCC_OscConfig+0x4d0>)
 8002e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e58:	6413      	str	r3, [r2, #64]	; 0x40
 8002e5a:	4b86      	ldr	r3, [pc, #536]	; (8003074 <HAL_RCC_OscConfig+0x4d0>)
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e62:	60bb      	str	r3, [r7, #8]
 8002e64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e66:	2301      	movs	r3, #1
 8002e68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e6a:	4b83      	ldr	r3, [pc, #524]	; (8003078 <HAL_RCC_OscConfig+0x4d4>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d118      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e76:	4b80      	ldr	r3, [pc, #512]	; (8003078 <HAL_RCC_OscConfig+0x4d4>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a7f      	ldr	r2, [pc, #508]	; (8003078 <HAL_RCC_OscConfig+0x4d4>)
 8002e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e82:	f7fe f9b3 	bl	80011ec <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e8a:	f7fe f9af 	bl	80011ec <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b64      	cmp	r3, #100	; 0x64
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e12a      	b.n	80030f2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e9c:	4b76      	ldr	r3, [pc, #472]	; (8003078 <HAL_RCC_OscConfig+0x4d4>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0f0      	beq.n	8002e8a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d106      	bne.n	8002ebe <HAL_RCC_OscConfig+0x31a>
 8002eb0:	4b70      	ldr	r3, [pc, #448]	; (8003074 <HAL_RCC_OscConfig+0x4d0>)
 8002eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb4:	4a6f      	ldr	r2, [pc, #444]	; (8003074 <HAL_RCC_OscConfig+0x4d0>)
 8002eb6:	f043 0301 	orr.w	r3, r3, #1
 8002eba:	6713      	str	r3, [r2, #112]	; 0x70
 8002ebc:	e02d      	b.n	8002f1a <HAL_RCC_OscConfig+0x376>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10c      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x33c>
 8002ec6:	4b6b      	ldr	r3, [pc, #428]	; (8003074 <HAL_RCC_OscConfig+0x4d0>)
 8002ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eca:	4a6a      	ldr	r2, [pc, #424]	; (8003074 <HAL_RCC_OscConfig+0x4d0>)
 8002ecc:	f023 0301 	bic.w	r3, r3, #1
 8002ed0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed2:	4b68      	ldr	r3, [pc, #416]	; (8003074 <HAL_RCC_OscConfig+0x4d0>)
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed6:	4a67      	ldr	r2, [pc, #412]	; (8003074 <HAL_RCC_OscConfig+0x4d0>)
 8002ed8:	f023 0304 	bic.w	r3, r3, #4
 8002edc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ede:	e01c      	b.n	8002f1a <HAL_RCC_OscConfig+0x376>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	2b05      	cmp	r3, #5
 8002ee6:	d10c      	bne.n	8002f02 <HAL_RCC_OscConfig+0x35e>
 8002ee8:	4b62      	ldr	r3, [pc, #392]	; (8003074 <HAL_RCC_OscConfig+0x4d0>)
 8002eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eec:	4a61      	ldr	r2, [pc, #388]	; (8003074 <HAL_RCC_OscConfig+0x4d0>)
 8002eee:	f043 0304 	orr.w	r3, r3, #4
 8002ef2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef4:	4b5f      	ldr	r3, [pc, #380]	; (8003074 <HAL_RCC_OscConfig+0x4d0>)
 8002ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef8:	4a5e      	ldr	r2, [pc, #376]	; (8003074 <HAL_RCC_OscConfig+0x4d0>)
 8002efa:	f043 0301 	orr.w	r3, r3, #1
 8002efe:	6713      	str	r3, [r2, #112]	; 0x70
 8002f00:	e00b      	b.n	8002f1a <HAL_RCC_OscConfig+0x376>
 8002f02:	4b5c      	ldr	r3, [pc, #368]	; (8003074 <HAL_RCC_OscConfig+0x4d0>)
 8002f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f06:	4a5b      	ldr	r2, [pc, #364]	; (8003074 <HAL_RCC_OscConfig+0x4d0>)
 8002f08:	f023 0301 	bic.w	r3, r3, #1
 8002f0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f0e:	4b59      	ldr	r3, [pc, #356]	; (8003074 <HAL_RCC_OscConfig+0x4d0>)
 8002f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f12:	4a58      	ldr	r2, [pc, #352]	; (8003074 <HAL_RCC_OscConfig+0x4d0>)
 8002f14:	f023 0304 	bic.w	r3, r3, #4
 8002f18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d015      	beq.n	8002f4e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f22:	f7fe f963 	bl	80011ec <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f28:	e00a      	b.n	8002f40 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f2a:	f7fe f95f 	bl	80011ec <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e0d8      	b.n	80030f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f40:	4b4c      	ldr	r3, [pc, #304]	; (8003074 <HAL_RCC_OscConfig+0x4d0>)
 8002f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0ee      	beq.n	8002f2a <HAL_RCC_OscConfig+0x386>
 8002f4c:	e014      	b.n	8002f78 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4e:	f7fe f94d 	bl	80011ec <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f54:	e00a      	b.n	8002f6c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f56:	f7fe f949 	bl	80011ec <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e0c2      	b.n	80030f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f6c:	4b41      	ldr	r3, [pc, #260]	; (8003074 <HAL_RCC_OscConfig+0x4d0>)
 8002f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1ee      	bne.n	8002f56 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f78:	7dfb      	ldrb	r3, [r7, #23]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d105      	bne.n	8002f8a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f7e:	4b3d      	ldr	r3, [pc, #244]	; (8003074 <HAL_RCC_OscConfig+0x4d0>)
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	4a3c      	ldr	r2, [pc, #240]	; (8003074 <HAL_RCC_OscConfig+0x4d0>)
 8002f84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 80ae 	beq.w	80030f0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f94:	4b37      	ldr	r3, [pc, #220]	; (8003074 <HAL_RCC_OscConfig+0x4d0>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 030c 	and.w	r3, r3, #12
 8002f9c:	2b08      	cmp	r3, #8
 8002f9e:	d06d      	beq.n	800307c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d14b      	bne.n	8003040 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa8:	4b32      	ldr	r3, [pc, #200]	; (8003074 <HAL_RCC_OscConfig+0x4d0>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a31      	ldr	r2, [pc, #196]	; (8003074 <HAL_RCC_OscConfig+0x4d0>)
 8002fae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb4:	f7fe f91a 	bl	80011ec <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fbc:	f7fe f916 	bl	80011ec <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e091      	b.n	80030f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fce:	4b29      	ldr	r3, [pc, #164]	; (8003074 <HAL_RCC_OscConfig+0x4d0>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1f0      	bne.n	8002fbc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69da      	ldr	r2, [r3, #28]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	019b      	lsls	r3, r3, #6
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff0:	085b      	lsrs	r3, r3, #1
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	041b      	lsls	r3, r3, #16
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffc:	061b      	lsls	r3, r3, #24
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003004:	071b      	lsls	r3, r3, #28
 8003006:	491b      	ldr	r1, [pc, #108]	; (8003074 <HAL_RCC_OscConfig+0x4d0>)
 8003008:	4313      	orrs	r3, r2
 800300a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800300c:	4b19      	ldr	r3, [pc, #100]	; (8003074 <HAL_RCC_OscConfig+0x4d0>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a18      	ldr	r2, [pc, #96]	; (8003074 <HAL_RCC_OscConfig+0x4d0>)
 8003012:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003016:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003018:	f7fe f8e8 	bl	80011ec <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003020:	f7fe f8e4 	bl	80011ec <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e05f      	b.n	80030f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003032:	4b10      	ldr	r3, [pc, #64]	; (8003074 <HAL_RCC_OscConfig+0x4d0>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0f0      	beq.n	8003020 <HAL_RCC_OscConfig+0x47c>
 800303e:	e057      	b.n	80030f0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003040:	4b0c      	ldr	r3, [pc, #48]	; (8003074 <HAL_RCC_OscConfig+0x4d0>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a0b      	ldr	r2, [pc, #44]	; (8003074 <HAL_RCC_OscConfig+0x4d0>)
 8003046:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800304a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304c:	f7fe f8ce 	bl	80011ec <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003054:	f7fe f8ca 	bl	80011ec <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e045      	b.n	80030f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003066:	4b03      	ldr	r3, [pc, #12]	; (8003074 <HAL_RCC_OscConfig+0x4d0>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1f0      	bne.n	8003054 <HAL_RCC_OscConfig+0x4b0>
 8003072:	e03d      	b.n	80030f0 <HAL_RCC_OscConfig+0x54c>
 8003074:	40023800 	.word	0x40023800
 8003078:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800307c:	4b1f      	ldr	r3, [pc, #124]	; (80030fc <HAL_RCC_OscConfig+0x558>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d030      	beq.n	80030ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003094:	429a      	cmp	r2, r3
 8003096:	d129      	bne.n	80030ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d122      	bne.n	80030ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030ac:	4013      	ands	r3, r2
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030b2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d119      	bne.n	80030ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c2:	085b      	lsrs	r3, r3, #1
 80030c4:	3b01      	subs	r3, #1
 80030c6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d10f      	bne.n	80030ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030d8:	429a      	cmp	r2, r3
 80030da:	d107      	bne.n	80030ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d001      	beq.n	80030f0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e000      	b.n	80030f2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3718      	adds	r7, #24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40023800 	.word	0x40023800

08003100 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800310a:	2300      	movs	r3, #0
 800310c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e0d0      	b.n	80032ba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003118:	4b6a      	ldr	r3, [pc, #424]	; (80032c4 <HAL_RCC_ClockConfig+0x1c4>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 030f 	and.w	r3, r3, #15
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d910      	bls.n	8003148 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003126:	4b67      	ldr	r3, [pc, #412]	; (80032c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f023 020f 	bic.w	r2, r3, #15
 800312e:	4965      	ldr	r1, [pc, #404]	; (80032c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	4313      	orrs	r3, r2
 8003134:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003136:	4b63      	ldr	r3, [pc, #396]	; (80032c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d001      	beq.n	8003148 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e0b8      	b.n	80032ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d020      	beq.n	8003196 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	2b00      	cmp	r3, #0
 800315e:	d005      	beq.n	800316c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003160:	4b59      	ldr	r3, [pc, #356]	; (80032c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	4a58      	ldr	r2, [pc, #352]	; (80032c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003166:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800316a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0308 	and.w	r3, r3, #8
 8003174:	2b00      	cmp	r3, #0
 8003176:	d005      	beq.n	8003184 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003178:	4b53      	ldr	r3, [pc, #332]	; (80032c8 <HAL_RCC_ClockConfig+0x1c8>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	4a52      	ldr	r2, [pc, #328]	; (80032c8 <HAL_RCC_ClockConfig+0x1c8>)
 800317e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003182:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003184:	4b50      	ldr	r3, [pc, #320]	; (80032c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	494d      	ldr	r1, [pc, #308]	; (80032c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003192:	4313      	orrs	r3, r2
 8003194:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d040      	beq.n	8003224 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d107      	bne.n	80031ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031aa:	4b47      	ldr	r3, [pc, #284]	; (80032c8 <HAL_RCC_ClockConfig+0x1c8>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d115      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e07f      	b.n	80032ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d107      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c2:	4b41      	ldr	r3, [pc, #260]	; (80032c8 <HAL_RCC_ClockConfig+0x1c8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d109      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e073      	b.n	80032ba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d2:	4b3d      	ldr	r3, [pc, #244]	; (80032c8 <HAL_RCC_ClockConfig+0x1c8>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e06b      	b.n	80032ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031e2:	4b39      	ldr	r3, [pc, #228]	; (80032c8 <HAL_RCC_ClockConfig+0x1c8>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f023 0203 	bic.w	r2, r3, #3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	4936      	ldr	r1, [pc, #216]	; (80032c8 <HAL_RCC_ClockConfig+0x1c8>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031f4:	f7fd fffa 	bl	80011ec <HAL_GetTick>
 80031f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fa:	e00a      	b.n	8003212 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031fc:	f7fd fff6 	bl	80011ec <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	f241 3288 	movw	r2, #5000	; 0x1388
 800320a:	4293      	cmp	r3, r2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e053      	b.n	80032ba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003212:	4b2d      	ldr	r3, [pc, #180]	; (80032c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 020c 	and.w	r2, r3, #12
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	429a      	cmp	r2, r3
 8003222:	d1eb      	bne.n	80031fc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003224:	4b27      	ldr	r3, [pc, #156]	; (80032c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 030f 	and.w	r3, r3, #15
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	429a      	cmp	r2, r3
 8003230:	d210      	bcs.n	8003254 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003232:	4b24      	ldr	r3, [pc, #144]	; (80032c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f023 020f 	bic.w	r2, r3, #15
 800323a:	4922      	ldr	r1, [pc, #136]	; (80032c4 <HAL_RCC_ClockConfig+0x1c4>)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	4313      	orrs	r3, r2
 8003240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003242:	4b20      	ldr	r3, [pc, #128]	; (80032c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 030f 	and.w	r3, r3, #15
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	429a      	cmp	r2, r3
 800324e:	d001      	beq.n	8003254 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e032      	b.n	80032ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b00      	cmp	r3, #0
 800325e:	d008      	beq.n	8003272 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003260:	4b19      	ldr	r3, [pc, #100]	; (80032c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	4916      	ldr	r1, [pc, #88]	; (80032c8 <HAL_RCC_ClockConfig+0x1c8>)
 800326e:	4313      	orrs	r3, r2
 8003270:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0308 	and.w	r3, r3, #8
 800327a:	2b00      	cmp	r3, #0
 800327c:	d009      	beq.n	8003292 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800327e:	4b12      	ldr	r3, [pc, #72]	; (80032c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	490e      	ldr	r1, [pc, #56]	; (80032c8 <HAL_RCC_ClockConfig+0x1c8>)
 800328e:	4313      	orrs	r3, r2
 8003290:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003292:	f000 f821 	bl	80032d8 <HAL_RCC_GetSysClockFreq>
 8003296:	4601      	mov	r1, r0
 8003298:	4b0b      	ldr	r3, [pc, #44]	; (80032c8 <HAL_RCC_ClockConfig+0x1c8>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	091b      	lsrs	r3, r3, #4
 800329e:	f003 030f 	and.w	r3, r3, #15
 80032a2:	4a0a      	ldr	r2, [pc, #40]	; (80032cc <HAL_RCC_ClockConfig+0x1cc>)
 80032a4:	5cd3      	ldrb	r3, [r2, r3]
 80032a6:	fa21 f303 	lsr.w	r3, r1, r3
 80032aa:	4a09      	ldr	r2, [pc, #36]	; (80032d0 <HAL_RCC_ClockConfig+0x1d0>)
 80032ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032ae:	4b09      	ldr	r3, [pc, #36]	; (80032d4 <HAL_RCC_ClockConfig+0x1d4>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fd fde4 	bl	8000e80 <HAL_InitTick>

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	40023c00 	.word	0x40023c00
 80032c8:	40023800 	.word	0x40023800
 80032cc:	0801b7b8 	.word	0x0801b7b8
 80032d0:	20000000 	.word	0x20000000
 80032d4:	20000004 	.word	0x20000004

080032d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80032de:	2300      	movs	r3, #0
 80032e0:	607b      	str	r3, [r7, #4]
 80032e2:	2300      	movs	r3, #0
 80032e4:	60fb      	str	r3, [r7, #12]
 80032e6:	2300      	movs	r3, #0
 80032e8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80032ea:	2300      	movs	r3, #0
 80032ec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032ee:	4b63      	ldr	r3, [pc, #396]	; (800347c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 030c 	and.w	r3, r3, #12
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d007      	beq.n	800330a <HAL_RCC_GetSysClockFreq+0x32>
 80032fa:	2b08      	cmp	r3, #8
 80032fc:	d008      	beq.n	8003310 <HAL_RCC_GetSysClockFreq+0x38>
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f040 80b4 	bne.w	800346c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003304:	4b5e      	ldr	r3, [pc, #376]	; (8003480 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003306:	60bb      	str	r3, [r7, #8]
      break;
 8003308:	e0b3      	b.n	8003472 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800330a:	4b5e      	ldr	r3, [pc, #376]	; (8003484 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800330c:	60bb      	str	r3, [r7, #8]
      break;
 800330e:	e0b0      	b.n	8003472 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003310:	4b5a      	ldr	r3, [pc, #360]	; (800347c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003318:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800331a:	4b58      	ldr	r3, [pc, #352]	; (800347c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d04a      	beq.n	80033bc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003326:	4b55      	ldr	r3, [pc, #340]	; (800347c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	099b      	lsrs	r3, r3, #6
 800332c:	f04f 0400 	mov.w	r4, #0
 8003330:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	ea03 0501 	and.w	r5, r3, r1
 800333c:	ea04 0602 	and.w	r6, r4, r2
 8003340:	4629      	mov	r1, r5
 8003342:	4632      	mov	r2, r6
 8003344:	f04f 0300 	mov.w	r3, #0
 8003348:	f04f 0400 	mov.w	r4, #0
 800334c:	0154      	lsls	r4, r2, #5
 800334e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003352:	014b      	lsls	r3, r1, #5
 8003354:	4619      	mov	r1, r3
 8003356:	4622      	mov	r2, r4
 8003358:	1b49      	subs	r1, r1, r5
 800335a:	eb62 0206 	sbc.w	r2, r2, r6
 800335e:	f04f 0300 	mov.w	r3, #0
 8003362:	f04f 0400 	mov.w	r4, #0
 8003366:	0194      	lsls	r4, r2, #6
 8003368:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800336c:	018b      	lsls	r3, r1, #6
 800336e:	1a5b      	subs	r3, r3, r1
 8003370:	eb64 0402 	sbc.w	r4, r4, r2
 8003374:	f04f 0100 	mov.w	r1, #0
 8003378:	f04f 0200 	mov.w	r2, #0
 800337c:	00e2      	lsls	r2, r4, #3
 800337e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003382:	00d9      	lsls	r1, r3, #3
 8003384:	460b      	mov	r3, r1
 8003386:	4614      	mov	r4, r2
 8003388:	195b      	adds	r3, r3, r5
 800338a:	eb44 0406 	adc.w	r4, r4, r6
 800338e:	f04f 0100 	mov.w	r1, #0
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	0262      	lsls	r2, r4, #9
 8003398:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800339c:	0259      	lsls	r1, r3, #9
 800339e:	460b      	mov	r3, r1
 80033a0:	4614      	mov	r4, r2
 80033a2:	4618      	mov	r0, r3
 80033a4:	4621      	mov	r1, r4
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f04f 0400 	mov.w	r4, #0
 80033ac:	461a      	mov	r2, r3
 80033ae:	4623      	mov	r3, r4
 80033b0:	f7fc ffae 	bl	8000310 <__aeabi_uldivmod>
 80033b4:	4603      	mov	r3, r0
 80033b6:	460c      	mov	r4, r1
 80033b8:	60fb      	str	r3, [r7, #12]
 80033ba:	e049      	b.n	8003450 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033bc:	4b2f      	ldr	r3, [pc, #188]	; (800347c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	099b      	lsrs	r3, r3, #6
 80033c2:	f04f 0400 	mov.w	r4, #0
 80033c6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80033ca:	f04f 0200 	mov.w	r2, #0
 80033ce:	ea03 0501 	and.w	r5, r3, r1
 80033d2:	ea04 0602 	and.w	r6, r4, r2
 80033d6:	4629      	mov	r1, r5
 80033d8:	4632      	mov	r2, r6
 80033da:	f04f 0300 	mov.w	r3, #0
 80033de:	f04f 0400 	mov.w	r4, #0
 80033e2:	0154      	lsls	r4, r2, #5
 80033e4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80033e8:	014b      	lsls	r3, r1, #5
 80033ea:	4619      	mov	r1, r3
 80033ec:	4622      	mov	r2, r4
 80033ee:	1b49      	subs	r1, r1, r5
 80033f0:	eb62 0206 	sbc.w	r2, r2, r6
 80033f4:	f04f 0300 	mov.w	r3, #0
 80033f8:	f04f 0400 	mov.w	r4, #0
 80033fc:	0194      	lsls	r4, r2, #6
 80033fe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003402:	018b      	lsls	r3, r1, #6
 8003404:	1a5b      	subs	r3, r3, r1
 8003406:	eb64 0402 	sbc.w	r4, r4, r2
 800340a:	f04f 0100 	mov.w	r1, #0
 800340e:	f04f 0200 	mov.w	r2, #0
 8003412:	00e2      	lsls	r2, r4, #3
 8003414:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003418:	00d9      	lsls	r1, r3, #3
 800341a:	460b      	mov	r3, r1
 800341c:	4614      	mov	r4, r2
 800341e:	195b      	adds	r3, r3, r5
 8003420:	eb44 0406 	adc.w	r4, r4, r6
 8003424:	f04f 0100 	mov.w	r1, #0
 8003428:	f04f 0200 	mov.w	r2, #0
 800342c:	02a2      	lsls	r2, r4, #10
 800342e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003432:	0299      	lsls	r1, r3, #10
 8003434:	460b      	mov	r3, r1
 8003436:	4614      	mov	r4, r2
 8003438:	4618      	mov	r0, r3
 800343a:	4621      	mov	r1, r4
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f04f 0400 	mov.w	r4, #0
 8003442:	461a      	mov	r2, r3
 8003444:	4623      	mov	r3, r4
 8003446:	f7fc ff63 	bl	8000310 <__aeabi_uldivmod>
 800344a:	4603      	mov	r3, r0
 800344c:	460c      	mov	r4, r1
 800344e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003450:	4b0a      	ldr	r3, [pc, #40]	; (800347c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	0c1b      	lsrs	r3, r3, #16
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	3301      	adds	r3, #1
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	fbb2 f3f3 	udiv	r3, r2, r3
 8003468:	60bb      	str	r3, [r7, #8]
      break;
 800346a:	e002      	b.n	8003472 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800346c:	4b04      	ldr	r3, [pc, #16]	; (8003480 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800346e:	60bb      	str	r3, [r7, #8]
      break;
 8003470:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003472:	68bb      	ldr	r3, [r7, #8]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3714      	adds	r7, #20
 8003478:	46bd      	mov	sp, r7
 800347a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800347c:	40023800 	.word	0x40023800
 8003480:	00f42400 	.word	0x00f42400
 8003484:	007a1200 	.word	0x007a1200

08003488 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800348c:	4b03      	ldr	r3, [pc, #12]	; (800349c <HAL_RCC_GetHCLKFreq+0x14>)
 800348e:	681b      	ldr	r3, [r3, #0]
}
 8003490:	4618      	mov	r0, r3
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	20000000 	.word	0x20000000

080034a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034a4:	f7ff fff0 	bl	8003488 <HAL_RCC_GetHCLKFreq>
 80034a8:	4601      	mov	r1, r0
 80034aa:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	0a9b      	lsrs	r3, r3, #10
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	4a03      	ldr	r2, [pc, #12]	; (80034c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034b6:	5cd3      	ldrb	r3, [r2, r3]
 80034b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034bc:	4618      	mov	r0, r3
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	40023800 	.word	0x40023800
 80034c4:	0801b7c8 	.word	0x0801b7c8

080034c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034cc:	f7ff ffdc 	bl	8003488 <HAL_RCC_GetHCLKFreq>
 80034d0:	4601      	mov	r1, r0
 80034d2:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	0b5b      	lsrs	r3, r3, #13
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	4a03      	ldr	r2, [pc, #12]	; (80034ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80034de:	5cd3      	ldrb	r3, [r2, r3]
 80034e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40023800 	.word	0x40023800
 80034ec:	0801b7c8 	.word	0x0801b7c8

080034f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	220f      	movs	r2, #15
 80034fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003500:	4b12      	ldr	r3, [pc, #72]	; (800354c <HAL_RCC_GetClockConfig+0x5c>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f003 0203 	and.w	r2, r3, #3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800350c:	4b0f      	ldr	r3, [pc, #60]	; (800354c <HAL_RCC_GetClockConfig+0x5c>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003518:	4b0c      	ldr	r3, [pc, #48]	; (800354c <HAL_RCC_GetClockConfig+0x5c>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003524:	4b09      	ldr	r3, [pc, #36]	; (800354c <HAL_RCC_GetClockConfig+0x5c>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	08db      	lsrs	r3, r3, #3
 800352a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003532:	4b07      	ldr	r3, [pc, #28]	; (8003550 <HAL_RCC_GetClockConfig+0x60>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 020f 	and.w	r2, r3, #15
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	601a      	str	r2, [r3, #0]
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	40023800 	.word	0x40023800
 8003550:	40023c00 	.word	0x40023c00

08003554 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b088      	sub	sp, #32
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800355c:	2300      	movs	r3, #0
 800355e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003560:	2300      	movs	r3, #0
 8003562:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003564:	2300      	movs	r3, #0
 8003566:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003568:	2300      	movs	r3, #0
 800356a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800356c:	2300      	movs	r3, #0
 800356e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b00      	cmp	r3, #0
 800357a:	d012      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800357c:	4b69      	ldr	r3, [pc, #420]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	4a68      	ldr	r2, [pc, #416]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003582:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003586:	6093      	str	r3, [r2, #8]
 8003588:	4b66      	ldr	r3, [pc, #408]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800358a:	689a      	ldr	r2, [r3, #8]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003590:	4964      	ldr	r1, [pc, #400]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003592:	4313      	orrs	r3, r2
 8003594:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800359e:	2301      	movs	r3, #1
 80035a0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d017      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035ae:	4b5d      	ldr	r3, [pc, #372]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035bc:	4959      	ldr	r1, [pc, #356]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035cc:	d101      	bne.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80035ce:	2301      	movs	r3, #1
 80035d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80035da:	2301      	movs	r3, #1
 80035dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d017      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035ea:	4b4e      	ldr	r3, [pc, #312]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f8:	494a      	ldr	r1, [pc, #296]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003604:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003608:	d101      	bne.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800360a:	2301      	movs	r3, #1
 800360c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003616:	2301      	movs	r3, #1
 8003618:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003626:	2301      	movs	r3, #1
 8003628:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0320 	and.w	r3, r3, #32
 8003632:	2b00      	cmp	r3, #0
 8003634:	f000 808b 	beq.w	800374e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003638:	4b3a      	ldr	r3, [pc, #232]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800363a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363c:	4a39      	ldr	r2, [pc, #228]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800363e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003642:	6413      	str	r3, [r2, #64]	; 0x40
 8003644:	4b37      	ldr	r3, [pc, #220]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800364c:	60bb      	str	r3, [r7, #8]
 800364e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003650:	4b35      	ldr	r3, [pc, #212]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a34      	ldr	r2, [pc, #208]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800365a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800365c:	f7fd fdc6 	bl	80011ec <HAL_GetTick>
 8003660:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003662:	e008      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003664:	f7fd fdc2 	bl	80011ec <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b64      	cmp	r3, #100	; 0x64
 8003670:	d901      	bls.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e38f      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003676:	4b2c      	ldr	r3, [pc, #176]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0f0      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003682:	4b28      	ldr	r3, [pc, #160]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800368a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d035      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	429a      	cmp	r2, r3
 800369e:	d02e      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036a0:	4b20      	ldr	r3, [pc, #128]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036aa:	4b1e      	ldr	r3, [pc, #120]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ae:	4a1d      	ldr	r2, [pc, #116]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036b6:	4b1b      	ldr	r3, [pc, #108]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ba:	4a1a      	ldr	r2, [pc, #104]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80036c2:	4a18      	ldr	r2, [pc, #96]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80036c8:	4b16      	ldr	r3, [pc, #88]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d114      	bne.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d4:	f7fd fd8a 	bl	80011ec <HAL_GetTick>
 80036d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036da:	e00a      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036dc:	f7fd fd86 	bl	80011ec <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e351      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f2:	4b0c      	ldr	r3, [pc, #48]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d0ee      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003706:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800370a:	d111      	bne.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800370c:	4b05      	ldr	r3, [pc, #20]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003718:	4b04      	ldr	r3, [pc, #16]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800371a:	400b      	ands	r3, r1
 800371c:	4901      	ldr	r1, [pc, #4]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800371e:	4313      	orrs	r3, r2
 8003720:	608b      	str	r3, [r1, #8]
 8003722:	e00b      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003724:	40023800 	.word	0x40023800
 8003728:	40007000 	.word	0x40007000
 800372c:	0ffffcff 	.word	0x0ffffcff
 8003730:	4bb3      	ldr	r3, [pc, #716]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	4ab2      	ldr	r2, [pc, #712]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003736:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800373a:	6093      	str	r3, [r2, #8]
 800373c:	4bb0      	ldr	r3, [pc, #704]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800373e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003744:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003748:	49ad      	ldr	r1, [pc, #692]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800374a:	4313      	orrs	r3, r2
 800374c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0310 	and.w	r3, r3, #16
 8003756:	2b00      	cmp	r3, #0
 8003758:	d010      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800375a:	4ba9      	ldr	r3, [pc, #676]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800375c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003760:	4aa7      	ldr	r2, [pc, #668]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003762:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003766:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800376a:	4ba5      	ldr	r3, [pc, #660]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800376c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003774:	49a2      	ldr	r1, [pc, #648]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003776:	4313      	orrs	r3, r2
 8003778:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00a      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003788:	4b9d      	ldr	r3, [pc, #628]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800378a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003796:	499a      	ldr	r1, [pc, #616]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003798:	4313      	orrs	r3, r2
 800379a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00a      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037aa:	4b95      	ldr	r3, [pc, #596]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037b8:	4991      	ldr	r1, [pc, #580]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00a      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037cc:	4b8c      	ldr	r3, [pc, #560]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037da:	4989      	ldr	r1, [pc, #548]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00a      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80037ee:	4b84      	ldr	r3, [pc, #528]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fc:	4980      	ldr	r1, [pc, #512]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00a      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003810:	4b7b      	ldr	r3, [pc, #492]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003816:	f023 0203 	bic.w	r2, r3, #3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381e:	4978      	ldr	r1, [pc, #480]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003820:	4313      	orrs	r3, r2
 8003822:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00a      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003832:	4b73      	ldr	r3, [pc, #460]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003838:	f023 020c 	bic.w	r2, r3, #12
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003840:	496f      	ldr	r1, [pc, #444]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003842:	4313      	orrs	r3, r2
 8003844:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00a      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003854:	4b6a      	ldr	r3, [pc, #424]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003862:	4967      	ldr	r1, [pc, #412]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003864:	4313      	orrs	r3, r2
 8003866:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003876:	4b62      	ldr	r3, [pc, #392]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800387c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003884:	495e      	ldr	r1, [pc, #376]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003886:	4313      	orrs	r3, r2
 8003888:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00a      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003898:	4b59      	ldr	r3, [pc, #356]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800389a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a6:	4956      	ldr	r1, [pc, #344]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00a      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80038ba:	4b51      	ldr	r3, [pc, #324]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c8:	494d      	ldr	r1, [pc, #308]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00a      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80038dc:	4b48      	ldr	r3, [pc, #288]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ea:	4945      	ldr	r1, [pc, #276]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80038fe:	4b40      	ldr	r3, [pc, #256]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003904:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800390c:	493c      	ldr	r1, [pc, #240]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800390e:	4313      	orrs	r3, r2
 8003910:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00a      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003920:	4b37      	ldr	r3, [pc, #220]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003926:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800392e:	4934      	ldr	r1, [pc, #208]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003930:	4313      	orrs	r3, r2
 8003932:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d011      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003942:	4b2f      	ldr	r3, [pc, #188]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003948:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003950:	492b      	ldr	r1, [pc, #172]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800395c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003960:	d101      	bne.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003962:	2301      	movs	r3, #1
 8003964:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003972:	2301      	movs	r3, #1
 8003974:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00a      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003982:	4b1f      	ldr	r3, [pc, #124]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003988:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003990:	491b      	ldr	r1, [pc, #108]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003992:	4313      	orrs	r3, r2
 8003994:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00b      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80039a4:	4b16      	ldr	r3, [pc, #88]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039b4:	4912      	ldr	r1, [pc, #72]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00b      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80039c8:	4b0d      	ldr	r3, [pc, #52]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ce:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039d8:	4909      	ldr	r1, [pc, #36]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00f      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039ec:	4b04      	ldr	r3, [pc, #16]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fc:	e002      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80039fe:	bf00      	nop
 8003a00:	40023800 	.word	0x40023800
 8003a04:	4986      	ldr	r1, [pc, #536]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00b      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003a18:	4b81      	ldr	r3, [pc, #516]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a1e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a28:	497d      	ldr	r1, [pc, #500]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d006      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 80d6 	beq.w	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a44:	4b76      	ldr	r3, [pc, #472]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a75      	ldr	r2, [pc, #468]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a50:	f7fd fbcc 	bl	80011ec <HAL_GetTick>
 8003a54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a56:	e008      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a58:	f7fd fbc8 	bl	80011ec <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b64      	cmp	r3, #100	; 0x64
 8003a64:	d901      	bls.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e195      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a6a:	4b6d      	ldr	r3, [pc, #436]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1f0      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d021      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d11d      	bne.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a8a:	4b65      	ldr	r3, [pc, #404]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a90:	0c1b      	lsrs	r3, r3, #16
 8003a92:	f003 0303 	and.w	r3, r3, #3
 8003a96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a98:	4b61      	ldr	r3, [pc, #388]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a9e:	0e1b      	lsrs	r3, r3, #24
 8003aa0:	f003 030f 	and.w	r3, r3, #15
 8003aa4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	019a      	lsls	r2, r3, #6
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	041b      	lsls	r3, r3, #16
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	061b      	lsls	r3, r3, #24
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	071b      	lsls	r3, r3, #28
 8003abe:	4958      	ldr	r1, [pc, #352]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d004      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ada:	d00a      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d02e      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003af0:	d129      	bne.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003af2:	4b4b      	ldr	r3, [pc, #300]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003af8:	0c1b      	lsrs	r3, r3, #16
 8003afa:	f003 0303 	and.w	r3, r3, #3
 8003afe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b00:	4b47      	ldr	r3, [pc, #284]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b06:	0f1b      	lsrs	r3, r3, #28
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	019a      	lsls	r2, r3, #6
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	041b      	lsls	r3, r3, #16
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	061b      	lsls	r3, r3, #24
 8003b20:	431a      	orrs	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	071b      	lsls	r3, r3, #28
 8003b26:	493e      	ldr	r1, [pc, #248]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003b2e:	4b3c      	ldr	r3, [pc, #240]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b34:	f023 021f 	bic.w	r2, r3, #31
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	4938      	ldr	r1, [pc, #224]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d01d      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b52:	4b33      	ldr	r3, [pc, #204]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b58:	0e1b      	lsrs	r3, r3, #24
 8003b5a:	f003 030f 	and.w	r3, r3, #15
 8003b5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b60:	4b2f      	ldr	r3, [pc, #188]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b66:	0f1b      	lsrs	r3, r3, #28
 8003b68:	f003 0307 	and.w	r3, r3, #7
 8003b6c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	019a      	lsls	r2, r3, #6
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	041b      	lsls	r3, r3, #16
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	061b      	lsls	r3, r3, #24
 8003b80:	431a      	orrs	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	071b      	lsls	r3, r3, #28
 8003b86:	4926      	ldr	r1, [pc, #152]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d011      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	019a      	lsls	r2, r3, #6
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	041b      	lsls	r3, r3, #16
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	061b      	lsls	r3, r3, #24
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	071b      	lsls	r3, r3, #28
 8003bb6:	491a      	ldr	r1, [pc, #104]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003bbe:	4b18      	ldr	r3, [pc, #96]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a17      	ldr	r2, [pc, #92]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bc4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bca:	f7fd fb0f 	bl	80011ec <HAL_GetTick>
 8003bce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bd0:	e008      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003bd2:	f7fd fb0b 	bl	80011ec <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b64      	cmp	r3, #100	; 0x64
 8003bde:	d901      	bls.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e0d8      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003be4:	4b0e      	ldr	r3, [pc, #56]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d0f0      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	f040 80ce 	bne.w	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003bf8:	4b09      	ldr	r3, [pc, #36]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a08      	ldr	r2, [pc, #32]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c04:	f7fd faf2 	bl	80011ec <HAL_GetTick>
 8003c08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c0a:	e00b      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c0c:	f7fd faee 	bl	80011ec <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b64      	cmp	r3, #100	; 0x64
 8003c18:	d904      	bls.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e0bb      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003c1e:	bf00      	nop
 8003c20:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c24:	4b5e      	ldr	r3, [pc, #376]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c30:	d0ec      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d009      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d02e      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d12a      	bne.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c5a:	4b51      	ldr	r3, [pc, #324]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c60:	0c1b      	lsrs	r3, r3, #16
 8003c62:	f003 0303 	and.w	r3, r3, #3
 8003c66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c68:	4b4d      	ldr	r3, [pc, #308]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6e:	0f1b      	lsrs	r3, r3, #28
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	019a      	lsls	r2, r3, #6
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	041b      	lsls	r3, r3, #16
 8003c80:	431a      	orrs	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	061b      	lsls	r3, r3, #24
 8003c88:	431a      	orrs	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	071b      	lsls	r3, r3, #28
 8003c8e:	4944      	ldr	r1, [pc, #272]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c96:	4b42      	ldr	r3, [pc, #264]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c9c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	021b      	lsls	r3, r3, #8
 8003ca8:	493d      	ldr	r1, [pc, #244]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d022      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cc4:	d11d      	bne.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003cc6:	4b36      	ldr	r3, [pc, #216]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ccc:	0e1b      	lsrs	r3, r3, #24
 8003cce:	f003 030f 	and.w	r3, r3, #15
 8003cd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003cd4:	4b32      	ldr	r3, [pc, #200]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cda:	0f1b      	lsrs	r3, r3, #28
 8003cdc:	f003 0307 	and.w	r3, r3, #7
 8003ce0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	019a      	lsls	r2, r3, #6
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	041b      	lsls	r3, r3, #16
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	061b      	lsls	r3, r3, #24
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	071b      	lsls	r3, r3, #28
 8003cfa:	4929      	ldr	r1, [pc, #164]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d028      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d0e:	4b24      	ldr	r3, [pc, #144]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d14:	0e1b      	lsrs	r3, r3, #24
 8003d16:	f003 030f 	and.w	r3, r3, #15
 8003d1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d1c:	4b20      	ldr	r3, [pc, #128]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d22:	0c1b      	lsrs	r3, r3, #16
 8003d24:	f003 0303 	and.w	r3, r3, #3
 8003d28:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	019a      	lsls	r2, r3, #6
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	041b      	lsls	r3, r3, #16
 8003d34:	431a      	orrs	r2, r3
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	061b      	lsls	r3, r3, #24
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	071b      	lsls	r3, r3, #28
 8003d42:	4917      	ldr	r1, [pc, #92]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003d4a:	4b15      	ldr	r3, [pc, #84]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d58:	4911      	ldr	r1, [pc, #68]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d60:	4b0f      	ldr	r3, [pc, #60]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a0e      	ldr	r2, [pc, #56]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d6c:	f7fd fa3e 	bl	80011ec <HAL_GetTick>
 8003d70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d72:	e008      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d74:	f7fd fa3a 	bl	80011ec <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b64      	cmp	r3, #100	; 0x64
 8003d80:	d901      	bls.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e007      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d86:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d92:	d1ef      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3720      	adds	r7, #32
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	40023800 	.word	0x40023800

08003da4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e049      	b.n	8003e4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d106      	bne.n	8003dd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f841 	bl	8003e52 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3304      	adds	r3, #4
 8003de0:	4619      	mov	r1, r3
 8003de2:	4610      	mov	r0, r2
 8003de4:	f000 fa00 	bl	80041e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b083      	sub	sp, #12
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e5a:	bf00      	nop
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
	...

08003e68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d001      	beq.n	8003e80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e054      	b.n	8003f2a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2202      	movs	r2, #2
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68da      	ldr	r2, [r3, #12]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0201 	orr.w	r2, r2, #1
 8003e96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a26      	ldr	r2, [pc, #152]	; (8003f38 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d022      	beq.n	8003ee8 <HAL_TIM_Base_Start_IT+0x80>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eaa:	d01d      	beq.n	8003ee8 <HAL_TIM_Base_Start_IT+0x80>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a22      	ldr	r2, [pc, #136]	; (8003f3c <HAL_TIM_Base_Start_IT+0xd4>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d018      	beq.n	8003ee8 <HAL_TIM_Base_Start_IT+0x80>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a21      	ldr	r2, [pc, #132]	; (8003f40 <HAL_TIM_Base_Start_IT+0xd8>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d013      	beq.n	8003ee8 <HAL_TIM_Base_Start_IT+0x80>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a1f      	ldr	r2, [pc, #124]	; (8003f44 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d00e      	beq.n	8003ee8 <HAL_TIM_Base_Start_IT+0x80>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a1e      	ldr	r2, [pc, #120]	; (8003f48 <HAL_TIM_Base_Start_IT+0xe0>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d009      	beq.n	8003ee8 <HAL_TIM_Base_Start_IT+0x80>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a1c      	ldr	r2, [pc, #112]	; (8003f4c <HAL_TIM_Base_Start_IT+0xe4>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d004      	beq.n	8003ee8 <HAL_TIM_Base_Start_IT+0x80>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a1b      	ldr	r2, [pc, #108]	; (8003f50 <HAL_TIM_Base_Start_IT+0xe8>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d115      	bne.n	8003f14 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689a      	ldr	r2, [r3, #8]
 8003eee:	4b19      	ldr	r3, [pc, #100]	; (8003f54 <HAL_TIM_Base_Start_IT+0xec>)
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2b06      	cmp	r3, #6
 8003ef8:	d015      	beq.n	8003f26 <HAL_TIM_Base_Start_IT+0xbe>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f00:	d011      	beq.n	8003f26 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f042 0201 	orr.w	r2, r2, #1
 8003f10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f12:	e008      	b.n	8003f26 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f042 0201 	orr.w	r2, r2, #1
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	e000      	b.n	8003f28 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3714      	adds	r7, #20
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	40010000 	.word	0x40010000
 8003f3c:	40000400 	.word	0x40000400
 8003f40:	40000800 	.word	0x40000800
 8003f44:	40000c00 	.word	0x40000c00
 8003f48:	40010400 	.word	0x40010400
 8003f4c:	40014000 	.word	0x40014000
 8003f50:	40001800 	.word	0x40001800
 8003f54:	00010007 	.word	0x00010007

08003f58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d122      	bne.n	8003fb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d11b      	bne.n	8003fb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f06f 0202 	mvn.w	r2, #2
 8003f84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	f003 0303 	and.w	r3, r3, #3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d003      	beq.n	8003fa2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f905 	bl	80041aa <HAL_TIM_IC_CaptureCallback>
 8003fa0:	e005      	b.n	8003fae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f8f7 	bl	8004196 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 f908 	bl	80041be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	f003 0304 	and.w	r3, r3, #4
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	d122      	bne.n	8004008 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	d11b      	bne.n	8004008 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f06f 0204 	mvn.w	r2, #4
 8003fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2202      	movs	r2, #2
 8003fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f8db 	bl	80041aa <HAL_TIM_IC_CaptureCallback>
 8003ff4:	e005      	b.n	8004002 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f8cd 	bl	8004196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 f8de 	bl	80041be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	2b08      	cmp	r3, #8
 8004014:	d122      	bne.n	800405c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f003 0308 	and.w	r3, r3, #8
 8004020:	2b08      	cmp	r3, #8
 8004022:	d11b      	bne.n	800405c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f06f 0208 	mvn.w	r2, #8
 800402c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2204      	movs	r2, #4
 8004032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	f003 0303 	and.w	r3, r3, #3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f8b1 	bl	80041aa <HAL_TIM_IC_CaptureCallback>
 8004048:	e005      	b.n	8004056 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f8a3 	bl	8004196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f8b4 	bl	80041be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	f003 0310 	and.w	r3, r3, #16
 8004066:	2b10      	cmp	r3, #16
 8004068:	d122      	bne.n	80040b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	f003 0310 	and.w	r3, r3, #16
 8004074:	2b10      	cmp	r3, #16
 8004076:	d11b      	bne.n	80040b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f06f 0210 	mvn.w	r2, #16
 8004080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2208      	movs	r2, #8
 8004086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	69db      	ldr	r3, [r3, #28]
 800408e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f887 	bl	80041aa <HAL_TIM_IC_CaptureCallback>
 800409c:	e005      	b.n	80040aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f879 	bl	8004196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 f88a 	bl	80041be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d10e      	bne.n	80040dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d107      	bne.n	80040dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f06f 0201 	mvn.w	r2, #1
 80040d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7fc fe50 	bl	8000d7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e6:	2b80      	cmp	r3, #128	; 0x80
 80040e8:	d10e      	bne.n	8004108 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f4:	2b80      	cmp	r3, #128	; 0x80
 80040f6:	d107      	bne.n	8004108 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f91a 	bl	800433c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004116:	d10e      	bne.n	8004136 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004122:	2b80      	cmp	r3, #128	; 0x80
 8004124:	d107      	bne.n	8004136 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800412e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 f90d 	bl	8004350 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004140:	2b40      	cmp	r3, #64	; 0x40
 8004142:	d10e      	bne.n	8004162 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800414e:	2b40      	cmp	r3, #64	; 0x40
 8004150:	d107      	bne.n	8004162 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800415a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f838 	bl	80041d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	f003 0320 	and.w	r3, r3, #32
 800416c:	2b20      	cmp	r3, #32
 800416e:	d10e      	bne.n	800418e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	f003 0320 	and.w	r3, r3, #32
 800417a:	2b20      	cmp	r3, #32
 800417c:	d107      	bne.n	800418e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f06f 0220 	mvn.w	r2, #32
 8004186:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 f8cd 	bl	8004328 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800418e:	bf00      	nop
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004196:	b480      	push	{r7}
 8004198:	b083      	sub	sp, #12
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800419e:	bf00      	nop
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b083      	sub	sp, #12
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041b2:	bf00      	nop
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr

080041be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041be:	b480      	push	{r7}
 80041c0:	b083      	sub	sp, #12
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b083      	sub	sp, #12
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
	...

080041e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a40      	ldr	r2, [pc, #256]	; (80042fc <TIM_Base_SetConfig+0x114>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d013      	beq.n	8004228 <TIM_Base_SetConfig+0x40>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004206:	d00f      	beq.n	8004228 <TIM_Base_SetConfig+0x40>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a3d      	ldr	r2, [pc, #244]	; (8004300 <TIM_Base_SetConfig+0x118>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d00b      	beq.n	8004228 <TIM_Base_SetConfig+0x40>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a3c      	ldr	r2, [pc, #240]	; (8004304 <TIM_Base_SetConfig+0x11c>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d007      	beq.n	8004228 <TIM_Base_SetConfig+0x40>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a3b      	ldr	r2, [pc, #236]	; (8004308 <TIM_Base_SetConfig+0x120>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d003      	beq.n	8004228 <TIM_Base_SetConfig+0x40>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a3a      	ldr	r2, [pc, #232]	; (800430c <TIM_Base_SetConfig+0x124>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d108      	bne.n	800423a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800422e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	4313      	orrs	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a2f      	ldr	r2, [pc, #188]	; (80042fc <TIM_Base_SetConfig+0x114>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d02b      	beq.n	800429a <TIM_Base_SetConfig+0xb2>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004248:	d027      	beq.n	800429a <TIM_Base_SetConfig+0xb2>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a2c      	ldr	r2, [pc, #176]	; (8004300 <TIM_Base_SetConfig+0x118>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d023      	beq.n	800429a <TIM_Base_SetConfig+0xb2>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a2b      	ldr	r2, [pc, #172]	; (8004304 <TIM_Base_SetConfig+0x11c>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d01f      	beq.n	800429a <TIM_Base_SetConfig+0xb2>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a2a      	ldr	r2, [pc, #168]	; (8004308 <TIM_Base_SetConfig+0x120>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d01b      	beq.n	800429a <TIM_Base_SetConfig+0xb2>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a29      	ldr	r2, [pc, #164]	; (800430c <TIM_Base_SetConfig+0x124>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d017      	beq.n	800429a <TIM_Base_SetConfig+0xb2>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a28      	ldr	r2, [pc, #160]	; (8004310 <TIM_Base_SetConfig+0x128>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d013      	beq.n	800429a <TIM_Base_SetConfig+0xb2>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a27      	ldr	r2, [pc, #156]	; (8004314 <TIM_Base_SetConfig+0x12c>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d00f      	beq.n	800429a <TIM_Base_SetConfig+0xb2>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a26      	ldr	r2, [pc, #152]	; (8004318 <TIM_Base_SetConfig+0x130>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d00b      	beq.n	800429a <TIM_Base_SetConfig+0xb2>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a25      	ldr	r2, [pc, #148]	; (800431c <TIM_Base_SetConfig+0x134>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d007      	beq.n	800429a <TIM_Base_SetConfig+0xb2>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a24      	ldr	r2, [pc, #144]	; (8004320 <TIM_Base_SetConfig+0x138>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d003      	beq.n	800429a <TIM_Base_SetConfig+0xb2>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a23      	ldr	r2, [pc, #140]	; (8004324 <TIM_Base_SetConfig+0x13c>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d108      	bne.n	80042ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a0a      	ldr	r2, [pc, #40]	; (80042fc <TIM_Base_SetConfig+0x114>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d003      	beq.n	80042e0 <TIM_Base_SetConfig+0xf8>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a0c      	ldr	r2, [pc, #48]	; (800430c <TIM_Base_SetConfig+0x124>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d103      	bne.n	80042e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	691a      	ldr	r2, [r3, #16]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	615a      	str	r2, [r3, #20]
}
 80042ee:	bf00      	nop
 80042f0:	3714      	adds	r7, #20
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	40010000 	.word	0x40010000
 8004300:	40000400 	.word	0x40000400
 8004304:	40000800 	.word	0x40000800
 8004308:	40000c00 	.word	0x40000c00
 800430c:	40010400 	.word	0x40010400
 8004310:	40014000 	.word	0x40014000
 8004314:	40014400 	.word	0x40014400
 8004318:	40014800 	.word	0x40014800
 800431c:	40001800 	.word	0x40001800
 8004320:	40001c00 	.word	0x40001c00
 8004324:	40002000 	.word	0x40002000

08004328 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e040      	b.n	80043f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800437a:	2b00      	cmp	r3, #0
 800437c:	d106      	bne.n	800438c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7fc fd36 	bl	8000df8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2224      	movs	r2, #36	; 0x24
 8004390:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 0201 	bic.w	r2, r2, #1
 80043a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f8c0 	bl	8004528 <UART_SetConfig>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d101      	bne.n	80043b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e022      	b.n	80043f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d002      	beq.n	80043c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 fb14 	bl	80049e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689a      	ldr	r2, [r3, #8]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f042 0201 	orr.w	r2, r2, #1
 80043ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 fb9b 	bl	8004b2c <UART_CheckIdleState>
 80043f6:	4603      	mov	r3, r0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3708      	adds	r7, #8
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b08a      	sub	sp, #40	; 0x28
 8004404:	af02      	add	r7, sp, #8
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	603b      	str	r3, [r7, #0]
 800440c:	4613      	mov	r3, r2
 800440e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004414:	2b20      	cmp	r3, #32
 8004416:	f040 8081 	bne.w	800451c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d002      	beq.n	8004426 <HAL_UART_Transmit+0x26>
 8004420:	88fb      	ldrh	r3, [r7, #6]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e079      	b.n	800451e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004430:	2b01      	cmp	r3, #1
 8004432:	d101      	bne.n	8004438 <HAL_UART_Transmit+0x38>
 8004434:	2302      	movs	r3, #2
 8004436:	e072      	b.n	800451e <HAL_UART_Transmit+0x11e>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2221      	movs	r2, #33	; 0x21
 800444c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800444e:	f7fc fecd 	bl	80011ec <HAL_GetTick>
 8004452:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	88fa      	ldrh	r2, [r7, #6]
 8004458:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	88fa      	ldrh	r2, [r7, #6]
 8004460:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800446c:	d108      	bne.n	8004480 <HAL_UART_Transmit+0x80>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d104      	bne.n	8004480 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004476:	2300      	movs	r3, #0
 8004478:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	61bb      	str	r3, [r7, #24]
 800447e:	e003      	b.n	8004488 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004484:	2300      	movs	r3, #0
 8004486:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004490:	e02c      	b.n	80044ec <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2200      	movs	r2, #0
 800449a:	2180      	movs	r1, #128	; 0x80
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f000 fb8e 	bl	8004bbe <UART_WaitOnFlagUntilTimeout>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d001      	beq.n	80044ac <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e038      	b.n	800451e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10b      	bne.n	80044ca <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	881b      	ldrh	r3, [r3, #0]
 80044b6:	461a      	mov	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044c0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	3302      	adds	r3, #2
 80044c6:	61bb      	str	r3, [r7, #24]
 80044c8:	e007      	b.n	80044da <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	781a      	ldrb	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	3301      	adds	r3, #1
 80044d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	3b01      	subs	r3, #1
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1cc      	bne.n	8004492 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	2200      	movs	r2, #0
 8004500:	2140      	movs	r1, #64	; 0x40
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f000 fb5b 	bl	8004bbe <UART_WaitOnFlagUntilTimeout>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e005      	b.n	800451e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2220      	movs	r2, #32
 8004516:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004518:	2300      	movs	r3, #0
 800451a:	e000      	b.n	800451e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800451c:	2302      	movs	r3, #2
  }
}
 800451e:	4618      	mov	r0, r3
 8004520:	3720      	adds	r7, #32
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
	...

08004528 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b088      	sub	sp, #32
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004530:	2300      	movs	r3, #0
 8004532:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689a      	ldr	r2, [r3, #8]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	431a      	orrs	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	431a      	orrs	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	69db      	ldr	r3, [r3, #28]
 8004548:	4313      	orrs	r3, r2
 800454a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	4bb1      	ldr	r3, [pc, #708]	; (8004818 <UART_SetConfig+0x2f0>)
 8004554:	4013      	ands	r3, r2
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	6812      	ldr	r2, [r2, #0]
 800455a:	6979      	ldr	r1, [r7, #20]
 800455c:	430b      	orrs	r3, r1
 800455e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68da      	ldr	r2, [r3, #12]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	430a      	orrs	r2, r1
 8004574:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	4313      	orrs	r3, r2
 8004584:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	430a      	orrs	r2, r1
 8004598:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a9f      	ldr	r2, [pc, #636]	; (800481c <UART_SetConfig+0x2f4>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d121      	bne.n	80045e8 <UART_SetConfig+0xc0>
 80045a4:	4b9e      	ldr	r3, [pc, #632]	; (8004820 <UART_SetConfig+0x2f8>)
 80045a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045aa:	f003 0303 	and.w	r3, r3, #3
 80045ae:	2b03      	cmp	r3, #3
 80045b0:	d816      	bhi.n	80045e0 <UART_SetConfig+0xb8>
 80045b2:	a201      	add	r2, pc, #4	; (adr r2, 80045b8 <UART_SetConfig+0x90>)
 80045b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b8:	080045c9 	.word	0x080045c9
 80045bc:	080045d5 	.word	0x080045d5
 80045c0:	080045cf 	.word	0x080045cf
 80045c4:	080045db 	.word	0x080045db
 80045c8:	2301      	movs	r3, #1
 80045ca:	77fb      	strb	r3, [r7, #31]
 80045cc:	e151      	b.n	8004872 <UART_SetConfig+0x34a>
 80045ce:	2302      	movs	r3, #2
 80045d0:	77fb      	strb	r3, [r7, #31]
 80045d2:	e14e      	b.n	8004872 <UART_SetConfig+0x34a>
 80045d4:	2304      	movs	r3, #4
 80045d6:	77fb      	strb	r3, [r7, #31]
 80045d8:	e14b      	b.n	8004872 <UART_SetConfig+0x34a>
 80045da:	2308      	movs	r3, #8
 80045dc:	77fb      	strb	r3, [r7, #31]
 80045de:	e148      	b.n	8004872 <UART_SetConfig+0x34a>
 80045e0:	2310      	movs	r3, #16
 80045e2:	77fb      	strb	r3, [r7, #31]
 80045e4:	bf00      	nop
 80045e6:	e144      	b.n	8004872 <UART_SetConfig+0x34a>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a8d      	ldr	r2, [pc, #564]	; (8004824 <UART_SetConfig+0x2fc>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d134      	bne.n	800465c <UART_SetConfig+0x134>
 80045f2:	4b8b      	ldr	r3, [pc, #556]	; (8004820 <UART_SetConfig+0x2f8>)
 80045f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f8:	f003 030c 	and.w	r3, r3, #12
 80045fc:	2b0c      	cmp	r3, #12
 80045fe:	d829      	bhi.n	8004654 <UART_SetConfig+0x12c>
 8004600:	a201      	add	r2, pc, #4	; (adr r2, 8004608 <UART_SetConfig+0xe0>)
 8004602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004606:	bf00      	nop
 8004608:	0800463d 	.word	0x0800463d
 800460c:	08004655 	.word	0x08004655
 8004610:	08004655 	.word	0x08004655
 8004614:	08004655 	.word	0x08004655
 8004618:	08004649 	.word	0x08004649
 800461c:	08004655 	.word	0x08004655
 8004620:	08004655 	.word	0x08004655
 8004624:	08004655 	.word	0x08004655
 8004628:	08004643 	.word	0x08004643
 800462c:	08004655 	.word	0x08004655
 8004630:	08004655 	.word	0x08004655
 8004634:	08004655 	.word	0x08004655
 8004638:	0800464f 	.word	0x0800464f
 800463c:	2300      	movs	r3, #0
 800463e:	77fb      	strb	r3, [r7, #31]
 8004640:	e117      	b.n	8004872 <UART_SetConfig+0x34a>
 8004642:	2302      	movs	r3, #2
 8004644:	77fb      	strb	r3, [r7, #31]
 8004646:	e114      	b.n	8004872 <UART_SetConfig+0x34a>
 8004648:	2304      	movs	r3, #4
 800464a:	77fb      	strb	r3, [r7, #31]
 800464c:	e111      	b.n	8004872 <UART_SetConfig+0x34a>
 800464e:	2308      	movs	r3, #8
 8004650:	77fb      	strb	r3, [r7, #31]
 8004652:	e10e      	b.n	8004872 <UART_SetConfig+0x34a>
 8004654:	2310      	movs	r3, #16
 8004656:	77fb      	strb	r3, [r7, #31]
 8004658:	bf00      	nop
 800465a:	e10a      	b.n	8004872 <UART_SetConfig+0x34a>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a71      	ldr	r2, [pc, #452]	; (8004828 <UART_SetConfig+0x300>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d120      	bne.n	80046a8 <UART_SetConfig+0x180>
 8004666:	4b6e      	ldr	r3, [pc, #440]	; (8004820 <UART_SetConfig+0x2f8>)
 8004668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800466c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004670:	2b10      	cmp	r3, #16
 8004672:	d00f      	beq.n	8004694 <UART_SetConfig+0x16c>
 8004674:	2b10      	cmp	r3, #16
 8004676:	d802      	bhi.n	800467e <UART_SetConfig+0x156>
 8004678:	2b00      	cmp	r3, #0
 800467a:	d005      	beq.n	8004688 <UART_SetConfig+0x160>
 800467c:	e010      	b.n	80046a0 <UART_SetConfig+0x178>
 800467e:	2b20      	cmp	r3, #32
 8004680:	d005      	beq.n	800468e <UART_SetConfig+0x166>
 8004682:	2b30      	cmp	r3, #48	; 0x30
 8004684:	d009      	beq.n	800469a <UART_SetConfig+0x172>
 8004686:	e00b      	b.n	80046a0 <UART_SetConfig+0x178>
 8004688:	2300      	movs	r3, #0
 800468a:	77fb      	strb	r3, [r7, #31]
 800468c:	e0f1      	b.n	8004872 <UART_SetConfig+0x34a>
 800468e:	2302      	movs	r3, #2
 8004690:	77fb      	strb	r3, [r7, #31]
 8004692:	e0ee      	b.n	8004872 <UART_SetConfig+0x34a>
 8004694:	2304      	movs	r3, #4
 8004696:	77fb      	strb	r3, [r7, #31]
 8004698:	e0eb      	b.n	8004872 <UART_SetConfig+0x34a>
 800469a:	2308      	movs	r3, #8
 800469c:	77fb      	strb	r3, [r7, #31]
 800469e:	e0e8      	b.n	8004872 <UART_SetConfig+0x34a>
 80046a0:	2310      	movs	r3, #16
 80046a2:	77fb      	strb	r3, [r7, #31]
 80046a4:	bf00      	nop
 80046a6:	e0e4      	b.n	8004872 <UART_SetConfig+0x34a>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a5f      	ldr	r2, [pc, #380]	; (800482c <UART_SetConfig+0x304>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d120      	bne.n	80046f4 <UART_SetConfig+0x1cc>
 80046b2:	4b5b      	ldr	r3, [pc, #364]	; (8004820 <UART_SetConfig+0x2f8>)
 80046b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80046bc:	2b40      	cmp	r3, #64	; 0x40
 80046be:	d00f      	beq.n	80046e0 <UART_SetConfig+0x1b8>
 80046c0:	2b40      	cmp	r3, #64	; 0x40
 80046c2:	d802      	bhi.n	80046ca <UART_SetConfig+0x1a2>
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d005      	beq.n	80046d4 <UART_SetConfig+0x1ac>
 80046c8:	e010      	b.n	80046ec <UART_SetConfig+0x1c4>
 80046ca:	2b80      	cmp	r3, #128	; 0x80
 80046cc:	d005      	beq.n	80046da <UART_SetConfig+0x1b2>
 80046ce:	2bc0      	cmp	r3, #192	; 0xc0
 80046d0:	d009      	beq.n	80046e6 <UART_SetConfig+0x1be>
 80046d2:	e00b      	b.n	80046ec <UART_SetConfig+0x1c4>
 80046d4:	2300      	movs	r3, #0
 80046d6:	77fb      	strb	r3, [r7, #31]
 80046d8:	e0cb      	b.n	8004872 <UART_SetConfig+0x34a>
 80046da:	2302      	movs	r3, #2
 80046dc:	77fb      	strb	r3, [r7, #31]
 80046de:	e0c8      	b.n	8004872 <UART_SetConfig+0x34a>
 80046e0:	2304      	movs	r3, #4
 80046e2:	77fb      	strb	r3, [r7, #31]
 80046e4:	e0c5      	b.n	8004872 <UART_SetConfig+0x34a>
 80046e6:	2308      	movs	r3, #8
 80046e8:	77fb      	strb	r3, [r7, #31]
 80046ea:	e0c2      	b.n	8004872 <UART_SetConfig+0x34a>
 80046ec:	2310      	movs	r3, #16
 80046ee:	77fb      	strb	r3, [r7, #31]
 80046f0:	bf00      	nop
 80046f2:	e0be      	b.n	8004872 <UART_SetConfig+0x34a>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a4d      	ldr	r2, [pc, #308]	; (8004830 <UART_SetConfig+0x308>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d124      	bne.n	8004748 <UART_SetConfig+0x220>
 80046fe:	4b48      	ldr	r3, [pc, #288]	; (8004820 <UART_SetConfig+0x2f8>)
 8004700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004704:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800470c:	d012      	beq.n	8004734 <UART_SetConfig+0x20c>
 800470e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004712:	d802      	bhi.n	800471a <UART_SetConfig+0x1f2>
 8004714:	2b00      	cmp	r3, #0
 8004716:	d007      	beq.n	8004728 <UART_SetConfig+0x200>
 8004718:	e012      	b.n	8004740 <UART_SetConfig+0x218>
 800471a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800471e:	d006      	beq.n	800472e <UART_SetConfig+0x206>
 8004720:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004724:	d009      	beq.n	800473a <UART_SetConfig+0x212>
 8004726:	e00b      	b.n	8004740 <UART_SetConfig+0x218>
 8004728:	2300      	movs	r3, #0
 800472a:	77fb      	strb	r3, [r7, #31]
 800472c:	e0a1      	b.n	8004872 <UART_SetConfig+0x34a>
 800472e:	2302      	movs	r3, #2
 8004730:	77fb      	strb	r3, [r7, #31]
 8004732:	e09e      	b.n	8004872 <UART_SetConfig+0x34a>
 8004734:	2304      	movs	r3, #4
 8004736:	77fb      	strb	r3, [r7, #31]
 8004738:	e09b      	b.n	8004872 <UART_SetConfig+0x34a>
 800473a:	2308      	movs	r3, #8
 800473c:	77fb      	strb	r3, [r7, #31]
 800473e:	e098      	b.n	8004872 <UART_SetConfig+0x34a>
 8004740:	2310      	movs	r3, #16
 8004742:	77fb      	strb	r3, [r7, #31]
 8004744:	bf00      	nop
 8004746:	e094      	b.n	8004872 <UART_SetConfig+0x34a>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a39      	ldr	r2, [pc, #228]	; (8004834 <UART_SetConfig+0x30c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d124      	bne.n	800479c <UART_SetConfig+0x274>
 8004752:	4b33      	ldr	r3, [pc, #204]	; (8004820 <UART_SetConfig+0x2f8>)
 8004754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004758:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800475c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004760:	d012      	beq.n	8004788 <UART_SetConfig+0x260>
 8004762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004766:	d802      	bhi.n	800476e <UART_SetConfig+0x246>
 8004768:	2b00      	cmp	r3, #0
 800476a:	d007      	beq.n	800477c <UART_SetConfig+0x254>
 800476c:	e012      	b.n	8004794 <UART_SetConfig+0x26c>
 800476e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004772:	d006      	beq.n	8004782 <UART_SetConfig+0x25a>
 8004774:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004778:	d009      	beq.n	800478e <UART_SetConfig+0x266>
 800477a:	e00b      	b.n	8004794 <UART_SetConfig+0x26c>
 800477c:	2301      	movs	r3, #1
 800477e:	77fb      	strb	r3, [r7, #31]
 8004780:	e077      	b.n	8004872 <UART_SetConfig+0x34a>
 8004782:	2302      	movs	r3, #2
 8004784:	77fb      	strb	r3, [r7, #31]
 8004786:	e074      	b.n	8004872 <UART_SetConfig+0x34a>
 8004788:	2304      	movs	r3, #4
 800478a:	77fb      	strb	r3, [r7, #31]
 800478c:	e071      	b.n	8004872 <UART_SetConfig+0x34a>
 800478e:	2308      	movs	r3, #8
 8004790:	77fb      	strb	r3, [r7, #31]
 8004792:	e06e      	b.n	8004872 <UART_SetConfig+0x34a>
 8004794:	2310      	movs	r3, #16
 8004796:	77fb      	strb	r3, [r7, #31]
 8004798:	bf00      	nop
 800479a:	e06a      	b.n	8004872 <UART_SetConfig+0x34a>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a25      	ldr	r2, [pc, #148]	; (8004838 <UART_SetConfig+0x310>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d124      	bne.n	80047f0 <UART_SetConfig+0x2c8>
 80047a6:	4b1e      	ldr	r3, [pc, #120]	; (8004820 <UART_SetConfig+0x2f8>)
 80047a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ac:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80047b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047b4:	d012      	beq.n	80047dc <UART_SetConfig+0x2b4>
 80047b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ba:	d802      	bhi.n	80047c2 <UART_SetConfig+0x29a>
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d007      	beq.n	80047d0 <UART_SetConfig+0x2a8>
 80047c0:	e012      	b.n	80047e8 <UART_SetConfig+0x2c0>
 80047c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047c6:	d006      	beq.n	80047d6 <UART_SetConfig+0x2ae>
 80047c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80047cc:	d009      	beq.n	80047e2 <UART_SetConfig+0x2ba>
 80047ce:	e00b      	b.n	80047e8 <UART_SetConfig+0x2c0>
 80047d0:	2300      	movs	r3, #0
 80047d2:	77fb      	strb	r3, [r7, #31]
 80047d4:	e04d      	b.n	8004872 <UART_SetConfig+0x34a>
 80047d6:	2302      	movs	r3, #2
 80047d8:	77fb      	strb	r3, [r7, #31]
 80047da:	e04a      	b.n	8004872 <UART_SetConfig+0x34a>
 80047dc:	2304      	movs	r3, #4
 80047de:	77fb      	strb	r3, [r7, #31]
 80047e0:	e047      	b.n	8004872 <UART_SetConfig+0x34a>
 80047e2:	2308      	movs	r3, #8
 80047e4:	77fb      	strb	r3, [r7, #31]
 80047e6:	e044      	b.n	8004872 <UART_SetConfig+0x34a>
 80047e8:	2310      	movs	r3, #16
 80047ea:	77fb      	strb	r3, [r7, #31]
 80047ec:	bf00      	nop
 80047ee:	e040      	b.n	8004872 <UART_SetConfig+0x34a>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a11      	ldr	r2, [pc, #68]	; (800483c <UART_SetConfig+0x314>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d139      	bne.n	800486e <UART_SetConfig+0x346>
 80047fa:	4b09      	ldr	r3, [pc, #36]	; (8004820 <UART_SetConfig+0x2f8>)
 80047fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004800:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004804:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004808:	d027      	beq.n	800485a <UART_SetConfig+0x332>
 800480a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800480e:	d817      	bhi.n	8004840 <UART_SetConfig+0x318>
 8004810:	2b00      	cmp	r3, #0
 8004812:	d01c      	beq.n	800484e <UART_SetConfig+0x326>
 8004814:	e027      	b.n	8004866 <UART_SetConfig+0x33e>
 8004816:	bf00      	nop
 8004818:	efff69f3 	.word	0xefff69f3
 800481c:	40011000 	.word	0x40011000
 8004820:	40023800 	.word	0x40023800
 8004824:	40004400 	.word	0x40004400
 8004828:	40004800 	.word	0x40004800
 800482c:	40004c00 	.word	0x40004c00
 8004830:	40005000 	.word	0x40005000
 8004834:	40011400 	.word	0x40011400
 8004838:	40007800 	.word	0x40007800
 800483c:	40007c00 	.word	0x40007c00
 8004840:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004844:	d006      	beq.n	8004854 <UART_SetConfig+0x32c>
 8004846:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800484a:	d009      	beq.n	8004860 <UART_SetConfig+0x338>
 800484c:	e00b      	b.n	8004866 <UART_SetConfig+0x33e>
 800484e:	2300      	movs	r3, #0
 8004850:	77fb      	strb	r3, [r7, #31]
 8004852:	e00e      	b.n	8004872 <UART_SetConfig+0x34a>
 8004854:	2302      	movs	r3, #2
 8004856:	77fb      	strb	r3, [r7, #31]
 8004858:	e00b      	b.n	8004872 <UART_SetConfig+0x34a>
 800485a:	2304      	movs	r3, #4
 800485c:	77fb      	strb	r3, [r7, #31]
 800485e:	e008      	b.n	8004872 <UART_SetConfig+0x34a>
 8004860:	2308      	movs	r3, #8
 8004862:	77fb      	strb	r3, [r7, #31]
 8004864:	e005      	b.n	8004872 <UART_SetConfig+0x34a>
 8004866:	2310      	movs	r3, #16
 8004868:	77fb      	strb	r3, [r7, #31]
 800486a:	bf00      	nop
 800486c:	e001      	b.n	8004872 <UART_SetConfig+0x34a>
 800486e:	2310      	movs	r3, #16
 8004870:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800487a:	d15b      	bne.n	8004934 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 800487c:	7ffb      	ldrb	r3, [r7, #31]
 800487e:	2b08      	cmp	r3, #8
 8004880:	d827      	bhi.n	80048d2 <UART_SetConfig+0x3aa>
 8004882:	a201      	add	r2, pc, #4	; (adr r2, 8004888 <UART_SetConfig+0x360>)
 8004884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004888:	080048ad 	.word	0x080048ad
 800488c:	080048b5 	.word	0x080048b5
 8004890:	080048bd 	.word	0x080048bd
 8004894:	080048d3 	.word	0x080048d3
 8004898:	080048c3 	.word	0x080048c3
 800489c:	080048d3 	.word	0x080048d3
 80048a0:	080048d3 	.word	0x080048d3
 80048a4:	080048d3 	.word	0x080048d3
 80048a8:	080048cb 	.word	0x080048cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048ac:	f7fe fdf8 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 80048b0:	61b8      	str	r0, [r7, #24]
        break;
 80048b2:	e013      	b.n	80048dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048b4:	f7fe fe08 	bl	80034c8 <HAL_RCC_GetPCLK2Freq>
 80048b8:	61b8      	str	r0, [r7, #24]
        break;
 80048ba:	e00f      	b.n	80048dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048bc:	4b49      	ldr	r3, [pc, #292]	; (80049e4 <UART_SetConfig+0x4bc>)
 80048be:	61bb      	str	r3, [r7, #24]
        break;
 80048c0:	e00c      	b.n	80048dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048c2:	f7fe fd09 	bl	80032d8 <HAL_RCC_GetSysClockFreq>
 80048c6:	61b8      	str	r0, [r7, #24]
        break;
 80048c8:	e008      	b.n	80048dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ce:	61bb      	str	r3, [r7, #24]
        break;
 80048d0:	e004      	b.n	80048dc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80048d2:	2300      	movs	r3, #0
 80048d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	77bb      	strb	r3, [r7, #30]
        break;
 80048da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d074      	beq.n	80049cc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	005a      	lsls	r2, r3, #1
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	085b      	lsrs	r3, r3, #1
 80048ec:	441a      	add	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	2b0f      	cmp	r3, #15
 80048fe:	d916      	bls.n	800492e <UART_SetConfig+0x406>
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004906:	d212      	bcs.n	800492e <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	b29b      	uxth	r3, r3
 800490c:	f023 030f 	bic.w	r3, r3, #15
 8004910:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	085b      	lsrs	r3, r3, #1
 8004916:	b29b      	uxth	r3, r3
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	b29a      	uxth	r2, r3
 800491e:	89fb      	ldrh	r3, [r7, #14]
 8004920:	4313      	orrs	r3, r2
 8004922:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	89fa      	ldrh	r2, [r7, #14]
 800492a:	60da      	str	r2, [r3, #12]
 800492c:	e04e      	b.n	80049cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	77bb      	strb	r3, [r7, #30]
 8004932:	e04b      	b.n	80049cc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004934:	7ffb      	ldrb	r3, [r7, #31]
 8004936:	2b08      	cmp	r3, #8
 8004938:	d827      	bhi.n	800498a <UART_SetConfig+0x462>
 800493a:	a201      	add	r2, pc, #4	; (adr r2, 8004940 <UART_SetConfig+0x418>)
 800493c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004940:	08004965 	.word	0x08004965
 8004944:	0800496d 	.word	0x0800496d
 8004948:	08004975 	.word	0x08004975
 800494c:	0800498b 	.word	0x0800498b
 8004950:	0800497b 	.word	0x0800497b
 8004954:	0800498b 	.word	0x0800498b
 8004958:	0800498b 	.word	0x0800498b
 800495c:	0800498b 	.word	0x0800498b
 8004960:	08004983 	.word	0x08004983
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004964:	f7fe fd9c 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 8004968:	61b8      	str	r0, [r7, #24]
        break;
 800496a:	e013      	b.n	8004994 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800496c:	f7fe fdac 	bl	80034c8 <HAL_RCC_GetPCLK2Freq>
 8004970:	61b8      	str	r0, [r7, #24]
        break;
 8004972:	e00f      	b.n	8004994 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004974:	4b1b      	ldr	r3, [pc, #108]	; (80049e4 <UART_SetConfig+0x4bc>)
 8004976:	61bb      	str	r3, [r7, #24]
        break;
 8004978:	e00c      	b.n	8004994 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800497a:	f7fe fcad 	bl	80032d8 <HAL_RCC_GetSysClockFreq>
 800497e:	61b8      	str	r0, [r7, #24]
        break;
 8004980:	e008      	b.n	8004994 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004986:	61bb      	str	r3, [r7, #24]
        break;
 8004988:	e004      	b.n	8004994 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800498a:	2300      	movs	r3, #0
 800498c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	77bb      	strb	r3, [r7, #30]
        break;
 8004992:	bf00      	nop
    }

    if (pclk != 0U)
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d018      	beq.n	80049cc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	085a      	lsrs	r2, r3, #1
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	441a      	add	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	2b0f      	cmp	r3, #15
 80049b4:	d908      	bls.n	80049c8 <UART_SetConfig+0x4a0>
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049bc:	d204      	bcs.n	80049c8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	60da      	str	r2, [r3, #12]
 80049c6:	e001      	b.n	80049cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80049d8:	7fbb      	ldrb	r3, [r7, #30]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3720      	adds	r7, #32
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	00f42400 	.word	0x00f42400

080049e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00a      	beq.n	8004a12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00a      	beq.n	8004a34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a38:	f003 0304 	and.w	r3, r3, #4
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00a      	beq.n	8004a56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	430a      	orrs	r2, r1
 8004a54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	f003 0308 	and.w	r3, r3, #8
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00a      	beq.n	8004a78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	430a      	orrs	r2, r1
 8004a76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7c:	f003 0310 	and.w	r3, r3, #16
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00a      	beq.n	8004a9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	f003 0320 	and.w	r3, r3, #32
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00a      	beq.n	8004abc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d01a      	beq.n	8004afe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ae6:	d10a      	bne.n	8004afe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00a      	beq.n	8004b20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	605a      	str	r2, [r3, #4]
  }
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af02      	add	r7, sp, #8
 8004b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b3c:	f7fc fb56 	bl	80011ec <HAL_GetTick>
 8004b40:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0308 	and.w	r3, r3, #8
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	d10e      	bne.n	8004b6e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b54:	9300      	str	r3, [sp, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f82d 	bl	8004bbe <UART_WaitOnFlagUntilTimeout>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e023      	b.n	8004bb6 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0304 	and.w	r3, r3, #4
 8004b78:	2b04      	cmp	r3, #4
 8004b7a:	d10e      	bne.n	8004b9a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f817 	bl	8004bbe <UART_WaitOnFlagUntilTimeout>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e00d      	b.n	8004bb6 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b084      	sub	sp, #16
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	60f8      	str	r0, [r7, #12]
 8004bc6:	60b9      	str	r1, [r7, #8]
 8004bc8:	603b      	str	r3, [r7, #0]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bce:	e05e      	b.n	8004c8e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd6:	d05a      	beq.n	8004c8e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bd8:	f7fc fb08 	bl	80011ec <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	69ba      	ldr	r2, [r7, #24]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d302      	bcc.n	8004bee <UART_WaitOnFlagUntilTimeout+0x30>
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d11b      	bne.n	8004c26 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004bfc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689a      	ldr	r2, [r3, #8]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 0201 	bic.w	r2, r2, #1
 8004c0c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2220      	movs	r2, #32
 8004c12:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2220      	movs	r2, #32
 8004c18:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e043      	b.n	8004cae <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0304 	and.w	r3, r3, #4
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d02c      	beq.n	8004c8e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c42:	d124      	bne.n	8004c8e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c4c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c5c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	689a      	ldr	r2, [r3, #8]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f022 0201 	bic.w	r2, r2, #1
 8004c6c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2220      	movs	r2, #32
 8004c72:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2220      	movs	r2, #32
 8004c78:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2220      	movs	r2, #32
 8004c7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e00f      	b.n	8004cae <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	69da      	ldr	r2, [r3, #28]
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	4013      	ands	r3, r2
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	bf0c      	ite	eq
 8004c9e:	2301      	moveq	r3, #1
 8004ca0:	2300      	movne	r3, #0
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	79fb      	ldrb	r3, [r7, #7]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d091      	beq.n	8004bd0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
	...

08004cb8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004cb8:	b5b0      	push	{r4, r5, r7, lr}
 8004cba:	b08e      	sub	sp, #56	; 0x38
 8004cbc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004cbe:	4ba0      	ldr	r3, [pc, #640]	; (8004f40 <MX_LWIP_Init+0x288>)
 8004cc0:	22c0      	movs	r2, #192	; 0xc0
 8004cc2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004cc4:	4b9e      	ldr	r3, [pc, #632]	; (8004f40 <MX_LWIP_Init+0x288>)
 8004cc6:	22a8      	movs	r2, #168	; 0xa8
 8004cc8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 178;
 8004cca:	4b9d      	ldr	r3, [pc, #628]	; (8004f40 <MX_LWIP_Init+0x288>)
 8004ccc:	22b2      	movs	r2, #178	; 0xb2
 8004cce:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 104;
 8004cd0:	4b9b      	ldr	r3, [pc, #620]	; (8004f40 <MX_LWIP_Init+0x288>)
 8004cd2:	2268      	movs	r2, #104	; 0x68
 8004cd4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004cd6:	4b9b      	ldr	r3, [pc, #620]	; (8004f44 <MX_LWIP_Init+0x28c>)
 8004cd8:	22ff      	movs	r2, #255	; 0xff
 8004cda:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004cdc:	4b99      	ldr	r3, [pc, #612]	; (8004f44 <MX_LWIP_Init+0x28c>)
 8004cde:	22ff      	movs	r2, #255	; 0xff
 8004ce0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004ce2:	4b98      	ldr	r3, [pc, #608]	; (8004f44 <MX_LWIP_Init+0x28c>)
 8004ce4:	22ff      	movs	r2, #255	; 0xff
 8004ce6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004ce8:	4b96      	ldr	r3, [pc, #600]	; (8004f44 <MX_LWIP_Init+0x28c>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004cee:	4b96      	ldr	r3, [pc, #600]	; (8004f48 <MX_LWIP_Init+0x290>)
 8004cf0:	22c0      	movs	r2, #192	; 0xc0
 8004cf2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004cf4:	4b94      	ldr	r3, [pc, #592]	; (8004f48 <MX_LWIP_Init+0x290>)
 8004cf6:	22a8      	movs	r2, #168	; 0xa8
 8004cf8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 178;
 8004cfa:	4b93      	ldr	r3, [pc, #588]	; (8004f48 <MX_LWIP_Init+0x290>)
 8004cfc:	22b2      	movs	r2, #178	; 0xb2
 8004cfe:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004d00:	4b91      	ldr	r3, [pc, #580]	; (8004f48 <MX_LWIP_Init+0x290>)
 8004d02:	2201      	movs	r2, #1
 8004d04:	70da      	strb	r2, [r3, #3]

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004d06:	2100      	movs	r1, #0
 8004d08:	2000      	movs	r0, #0
 8004d0a:	f007 fc61 	bl	800c5d0 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004d0e:	4b8c      	ldr	r3, [pc, #560]	; (8004f40 <MX_LWIP_Init+0x288>)
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	061a      	lsls	r2, r3, #24
 8004d14:	4b8a      	ldr	r3, [pc, #552]	; (8004f40 <MX_LWIP_Init+0x288>)
 8004d16:	785b      	ldrb	r3, [r3, #1]
 8004d18:	041b      	lsls	r3, r3, #16
 8004d1a:	431a      	orrs	r2, r3
 8004d1c:	4b88      	ldr	r3, [pc, #544]	; (8004f40 <MX_LWIP_Init+0x288>)
 8004d1e:	789b      	ldrb	r3, [r3, #2]
 8004d20:	021b      	lsls	r3, r3, #8
 8004d22:	4313      	orrs	r3, r2
 8004d24:	4a86      	ldr	r2, [pc, #536]	; (8004f40 <MX_LWIP_Init+0x288>)
 8004d26:	78d2      	ldrb	r2, [r2, #3]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	061a      	lsls	r2, r3, #24
 8004d2c:	4b84      	ldr	r3, [pc, #528]	; (8004f40 <MX_LWIP_Init+0x288>)
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	0619      	lsls	r1, r3, #24
 8004d32:	4b83      	ldr	r3, [pc, #524]	; (8004f40 <MX_LWIP_Init+0x288>)
 8004d34:	785b      	ldrb	r3, [r3, #1]
 8004d36:	041b      	lsls	r3, r3, #16
 8004d38:	4319      	orrs	r1, r3
 8004d3a:	4b81      	ldr	r3, [pc, #516]	; (8004f40 <MX_LWIP_Init+0x288>)
 8004d3c:	789b      	ldrb	r3, [r3, #2]
 8004d3e:	021b      	lsls	r3, r3, #8
 8004d40:	430b      	orrs	r3, r1
 8004d42:	497f      	ldr	r1, [pc, #508]	; (8004f40 <MX_LWIP_Init+0x288>)
 8004d44:	78c9      	ldrb	r1, [r1, #3]
 8004d46:	430b      	orrs	r3, r1
 8004d48:	021b      	lsls	r3, r3, #8
 8004d4a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d4e:	431a      	orrs	r2, r3
 8004d50:	4b7b      	ldr	r3, [pc, #492]	; (8004f40 <MX_LWIP_Init+0x288>)
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	0619      	lsls	r1, r3, #24
 8004d56:	4b7a      	ldr	r3, [pc, #488]	; (8004f40 <MX_LWIP_Init+0x288>)
 8004d58:	785b      	ldrb	r3, [r3, #1]
 8004d5a:	041b      	lsls	r3, r3, #16
 8004d5c:	4319      	orrs	r1, r3
 8004d5e:	4b78      	ldr	r3, [pc, #480]	; (8004f40 <MX_LWIP_Init+0x288>)
 8004d60:	789b      	ldrb	r3, [r3, #2]
 8004d62:	021b      	lsls	r3, r3, #8
 8004d64:	430b      	orrs	r3, r1
 8004d66:	4976      	ldr	r1, [pc, #472]	; (8004f40 <MX_LWIP_Init+0x288>)
 8004d68:	78c9      	ldrb	r1, [r1, #3]
 8004d6a:	430b      	orrs	r3, r1
 8004d6c:	0a1b      	lsrs	r3, r3, #8
 8004d6e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004d72:	431a      	orrs	r2, r3
 8004d74:	4b72      	ldr	r3, [pc, #456]	; (8004f40 <MX_LWIP_Init+0x288>)
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	0619      	lsls	r1, r3, #24
 8004d7a:	4b71      	ldr	r3, [pc, #452]	; (8004f40 <MX_LWIP_Init+0x288>)
 8004d7c:	785b      	ldrb	r3, [r3, #1]
 8004d7e:	041b      	lsls	r3, r3, #16
 8004d80:	4319      	orrs	r1, r3
 8004d82:	4b6f      	ldr	r3, [pc, #444]	; (8004f40 <MX_LWIP_Init+0x288>)
 8004d84:	789b      	ldrb	r3, [r3, #2]
 8004d86:	021b      	lsls	r3, r3, #8
 8004d88:	430b      	orrs	r3, r1
 8004d8a:	496d      	ldr	r1, [pc, #436]	; (8004f40 <MX_LWIP_Init+0x288>)
 8004d8c:	78c9      	ldrb	r1, [r1, #3]
 8004d8e:	430b      	orrs	r3, r1
 8004d90:	0e1b      	lsrs	r3, r3, #24
 8004d92:	4313      	orrs	r3, r2
 8004d94:	4a6d      	ldr	r2, [pc, #436]	; (8004f4c <MX_LWIP_Init+0x294>)
 8004d96:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004d98:	4b6a      	ldr	r3, [pc, #424]	; (8004f44 <MX_LWIP_Init+0x28c>)
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	061a      	lsls	r2, r3, #24
 8004d9e:	4b69      	ldr	r3, [pc, #420]	; (8004f44 <MX_LWIP_Init+0x28c>)
 8004da0:	785b      	ldrb	r3, [r3, #1]
 8004da2:	041b      	lsls	r3, r3, #16
 8004da4:	431a      	orrs	r2, r3
 8004da6:	4b67      	ldr	r3, [pc, #412]	; (8004f44 <MX_LWIP_Init+0x28c>)
 8004da8:	789b      	ldrb	r3, [r3, #2]
 8004daa:	021b      	lsls	r3, r3, #8
 8004dac:	4313      	orrs	r3, r2
 8004dae:	4a65      	ldr	r2, [pc, #404]	; (8004f44 <MX_LWIP_Init+0x28c>)
 8004db0:	78d2      	ldrb	r2, [r2, #3]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	061a      	lsls	r2, r3, #24
 8004db6:	4b63      	ldr	r3, [pc, #396]	; (8004f44 <MX_LWIP_Init+0x28c>)
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	0619      	lsls	r1, r3, #24
 8004dbc:	4b61      	ldr	r3, [pc, #388]	; (8004f44 <MX_LWIP_Init+0x28c>)
 8004dbe:	785b      	ldrb	r3, [r3, #1]
 8004dc0:	041b      	lsls	r3, r3, #16
 8004dc2:	4319      	orrs	r1, r3
 8004dc4:	4b5f      	ldr	r3, [pc, #380]	; (8004f44 <MX_LWIP_Init+0x28c>)
 8004dc6:	789b      	ldrb	r3, [r3, #2]
 8004dc8:	021b      	lsls	r3, r3, #8
 8004dca:	430b      	orrs	r3, r1
 8004dcc:	495d      	ldr	r1, [pc, #372]	; (8004f44 <MX_LWIP_Init+0x28c>)
 8004dce:	78c9      	ldrb	r1, [r1, #3]
 8004dd0:	430b      	orrs	r3, r1
 8004dd2:	021b      	lsls	r3, r3, #8
 8004dd4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	4b5a      	ldr	r3, [pc, #360]	; (8004f44 <MX_LWIP_Init+0x28c>)
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	0619      	lsls	r1, r3, #24
 8004de0:	4b58      	ldr	r3, [pc, #352]	; (8004f44 <MX_LWIP_Init+0x28c>)
 8004de2:	785b      	ldrb	r3, [r3, #1]
 8004de4:	041b      	lsls	r3, r3, #16
 8004de6:	4319      	orrs	r1, r3
 8004de8:	4b56      	ldr	r3, [pc, #344]	; (8004f44 <MX_LWIP_Init+0x28c>)
 8004dea:	789b      	ldrb	r3, [r3, #2]
 8004dec:	021b      	lsls	r3, r3, #8
 8004dee:	430b      	orrs	r3, r1
 8004df0:	4954      	ldr	r1, [pc, #336]	; (8004f44 <MX_LWIP_Init+0x28c>)
 8004df2:	78c9      	ldrb	r1, [r1, #3]
 8004df4:	430b      	orrs	r3, r1
 8004df6:	0a1b      	lsrs	r3, r3, #8
 8004df8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004dfc:	431a      	orrs	r2, r3
 8004dfe:	4b51      	ldr	r3, [pc, #324]	; (8004f44 <MX_LWIP_Init+0x28c>)
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	0619      	lsls	r1, r3, #24
 8004e04:	4b4f      	ldr	r3, [pc, #316]	; (8004f44 <MX_LWIP_Init+0x28c>)
 8004e06:	785b      	ldrb	r3, [r3, #1]
 8004e08:	041b      	lsls	r3, r3, #16
 8004e0a:	4319      	orrs	r1, r3
 8004e0c:	4b4d      	ldr	r3, [pc, #308]	; (8004f44 <MX_LWIP_Init+0x28c>)
 8004e0e:	789b      	ldrb	r3, [r3, #2]
 8004e10:	021b      	lsls	r3, r3, #8
 8004e12:	430b      	orrs	r3, r1
 8004e14:	494b      	ldr	r1, [pc, #300]	; (8004f44 <MX_LWIP_Init+0x28c>)
 8004e16:	78c9      	ldrb	r1, [r1, #3]
 8004e18:	430b      	orrs	r3, r1
 8004e1a:	0e1b      	lsrs	r3, r3, #24
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	4a4c      	ldr	r2, [pc, #304]	; (8004f50 <MX_LWIP_Init+0x298>)
 8004e20:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004e22:	4b49      	ldr	r3, [pc, #292]	; (8004f48 <MX_LWIP_Init+0x290>)
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	061a      	lsls	r2, r3, #24
 8004e28:	4b47      	ldr	r3, [pc, #284]	; (8004f48 <MX_LWIP_Init+0x290>)
 8004e2a:	785b      	ldrb	r3, [r3, #1]
 8004e2c:	041b      	lsls	r3, r3, #16
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	4b45      	ldr	r3, [pc, #276]	; (8004f48 <MX_LWIP_Init+0x290>)
 8004e32:	789b      	ldrb	r3, [r3, #2]
 8004e34:	021b      	lsls	r3, r3, #8
 8004e36:	4313      	orrs	r3, r2
 8004e38:	4a43      	ldr	r2, [pc, #268]	; (8004f48 <MX_LWIP_Init+0x290>)
 8004e3a:	78d2      	ldrb	r2, [r2, #3]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	061a      	lsls	r2, r3, #24
 8004e40:	4b41      	ldr	r3, [pc, #260]	; (8004f48 <MX_LWIP_Init+0x290>)
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	0619      	lsls	r1, r3, #24
 8004e46:	4b40      	ldr	r3, [pc, #256]	; (8004f48 <MX_LWIP_Init+0x290>)
 8004e48:	785b      	ldrb	r3, [r3, #1]
 8004e4a:	041b      	lsls	r3, r3, #16
 8004e4c:	4319      	orrs	r1, r3
 8004e4e:	4b3e      	ldr	r3, [pc, #248]	; (8004f48 <MX_LWIP_Init+0x290>)
 8004e50:	789b      	ldrb	r3, [r3, #2]
 8004e52:	021b      	lsls	r3, r3, #8
 8004e54:	430b      	orrs	r3, r1
 8004e56:	493c      	ldr	r1, [pc, #240]	; (8004f48 <MX_LWIP_Init+0x290>)
 8004e58:	78c9      	ldrb	r1, [r1, #3]
 8004e5a:	430b      	orrs	r3, r1
 8004e5c:	021b      	lsls	r3, r3, #8
 8004e5e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e62:	431a      	orrs	r2, r3
 8004e64:	4b38      	ldr	r3, [pc, #224]	; (8004f48 <MX_LWIP_Init+0x290>)
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	0619      	lsls	r1, r3, #24
 8004e6a:	4b37      	ldr	r3, [pc, #220]	; (8004f48 <MX_LWIP_Init+0x290>)
 8004e6c:	785b      	ldrb	r3, [r3, #1]
 8004e6e:	041b      	lsls	r3, r3, #16
 8004e70:	4319      	orrs	r1, r3
 8004e72:	4b35      	ldr	r3, [pc, #212]	; (8004f48 <MX_LWIP_Init+0x290>)
 8004e74:	789b      	ldrb	r3, [r3, #2]
 8004e76:	021b      	lsls	r3, r3, #8
 8004e78:	430b      	orrs	r3, r1
 8004e7a:	4933      	ldr	r1, [pc, #204]	; (8004f48 <MX_LWIP_Init+0x290>)
 8004e7c:	78c9      	ldrb	r1, [r1, #3]
 8004e7e:	430b      	orrs	r3, r1
 8004e80:	0a1b      	lsrs	r3, r3, #8
 8004e82:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004e86:	431a      	orrs	r2, r3
 8004e88:	4b2f      	ldr	r3, [pc, #188]	; (8004f48 <MX_LWIP_Init+0x290>)
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	0619      	lsls	r1, r3, #24
 8004e8e:	4b2e      	ldr	r3, [pc, #184]	; (8004f48 <MX_LWIP_Init+0x290>)
 8004e90:	785b      	ldrb	r3, [r3, #1]
 8004e92:	041b      	lsls	r3, r3, #16
 8004e94:	4319      	orrs	r1, r3
 8004e96:	4b2c      	ldr	r3, [pc, #176]	; (8004f48 <MX_LWIP_Init+0x290>)
 8004e98:	789b      	ldrb	r3, [r3, #2]
 8004e9a:	021b      	lsls	r3, r3, #8
 8004e9c:	430b      	orrs	r3, r1
 8004e9e:	492a      	ldr	r1, [pc, #168]	; (8004f48 <MX_LWIP_Init+0x290>)
 8004ea0:	78c9      	ldrb	r1, [r1, #3]
 8004ea2:	430b      	orrs	r3, r1
 8004ea4:	0e1b      	lsrs	r3, r3, #24
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	4a2a      	ldr	r2, [pc, #168]	; (8004f54 <MX_LWIP_Init+0x29c>)
 8004eaa:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004eac:	4b2a      	ldr	r3, [pc, #168]	; (8004f58 <MX_LWIP_Init+0x2a0>)
 8004eae:	9302      	str	r3, [sp, #8]
 8004eb0:	4b2a      	ldr	r3, [pc, #168]	; (8004f5c <MX_LWIP_Init+0x2a4>)
 8004eb2:	9301      	str	r3, [sp, #4]
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	9300      	str	r3, [sp, #0]
 8004eb8:	4b26      	ldr	r3, [pc, #152]	; (8004f54 <MX_LWIP_Init+0x29c>)
 8004eba:	4a25      	ldr	r2, [pc, #148]	; (8004f50 <MX_LWIP_Init+0x298>)
 8004ebc:	4923      	ldr	r1, [pc, #140]	; (8004f4c <MX_LWIP_Init+0x294>)
 8004ebe:	4828      	ldr	r0, [pc, #160]	; (8004f60 <MX_LWIP_Init+0x2a8>)
 8004ec0:	f008 f908 	bl	800d0d4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004ec4:	4826      	ldr	r0, [pc, #152]	; (8004f60 <MX_LWIP_Init+0x2a8>)
 8004ec6:	f008 fab3 	bl	800d430 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004eca:	4b25      	ldr	r3, [pc, #148]	; (8004f60 <MX_LWIP_Init+0x2a8>)
 8004ecc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004ed0:	089b      	lsrs	r3, r3, #2
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d003      	beq.n	8004ee4 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004edc:	4820      	ldr	r0, [pc, #128]	; (8004f60 <MX_LWIP_Init+0x2a8>)
 8004ede:	f008 fab7 	bl	800d450 <netif_set_up>
 8004ee2:	e002      	b.n	8004eea <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004ee4:	481e      	ldr	r0, [pc, #120]	; (8004f60 <MX_LWIP_Init+0x2a8>)
 8004ee6:	f008 fb1f 	bl	800d528 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8004eea:	491e      	ldr	r1, [pc, #120]	; (8004f64 <MX_LWIP_Init+0x2ac>)
 8004eec:	481c      	ldr	r0, [pc, #112]	; (8004f60 <MX_LWIP_Init+0x2a8>)
 8004eee:	f008 fbb1 	bl	800d654 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	623b      	str	r3, [r7, #32]
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8004efa:	f107 0320 	add.w	r3, r7, #32
 8004efe:	2101      	movs	r1, #1
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 fd8f 	bl	8005a24 <osSemaphoreCreate>
 8004f06:	4602      	mov	r2, r0
 8004f08:	4b17      	ldr	r3, [pc, #92]	; (8004f68 <MX_LWIP_Init+0x2b0>)
 8004f0a:	601a      	str	r2, [r3, #0]

  link_arg.netif = &gnetif;
 8004f0c:	4b17      	ldr	r3, [pc, #92]	; (8004f6c <MX_LWIP_Init+0x2b4>)
 8004f0e:	4a14      	ldr	r2, [pc, #80]	; (8004f60 <MX_LWIP_Init+0x2a8>)
 8004f10:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8004f12:	4b15      	ldr	r3, [pc, #84]	; (8004f68 <MX_LWIP_Init+0x2b0>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a15      	ldr	r2, [pc, #84]	; (8004f6c <MX_LWIP_Init+0x2b4>)
 8004f18:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8004f1a:	4b15      	ldr	r3, [pc, #84]	; (8004f70 <MX_LWIP_Init+0x2b8>)
 8004f1c:	1d3c      	adds	r4, r7, #4
 8004f1e:	461d      	mov	r5, r3
 8004f20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004f28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8004f2c:	1d3b      	adds	r3, r7, #4
 8004f2e:	490f      	ldr	r1, [pc, #60]	; (8004f6c <MX_LWIP_Init+0x2b4>)
 8004f30:	4618      	mov	r0, r3
 8004f32:	f000 fc7b 	bl	800582c <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004f36:	bf00      	nop
 8004f38:	3728      	adds	r7, #40	; 0x28
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bdb0      	pop	{r4, r5, r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	200048b8 	.word	0x200048b8
 8004f44:	200048b4 	.word	0x200048b4
 8004f48:	20004878 	.word	0x20004878
 8004f4c:	200048b0 	.word	0x200048b0
 8004f50:	200048bc 	.word	0x200048bc
 8004f54:	200048c0 	.word	0x200048c0
 8004f58:	0800c4e1 	.word	0x0800c4e1
 8004f5c:	080055c9 	.word	0x080055c9
 8004f60:	2000487c 	.word	0x2000487c
 8004f64:	080056ad 	.word	0x080056ad
 8004f68:	20000768 	.word	0x20000768
 8004f6c:	20004870 	.word	0x20004870
 8004f70:	080183fc 	.word	0x080183fc

08004f74 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b08e      	sub	sp, #56	; 0x38
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f80:	2200      	movs	r2, #0
 8004f82:	601a      	str	r2, [r3, #0]
 8004f84:	605a      	str	r2, [r3, #4]
 8004f86:	609a      	str	r2, [r3, #8]
 8004f88:	60da      	str	r2, [r3, #12]
 8004f8a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a56      	ldr	r2, [pc, #344]	; (80050ec <HAL_ETH_MspInit+0x178>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	f040 80a6 	bne.w	80050e4 <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004f98:	4b55      	ldr	r3, [pc, #340]	; (80050f0 <HAL_ETH_MspInit+0x17c>)
 8004f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9c:	4a54      	ldr	r2, [pc, #336]	; (80050f0 <HAL_ETH_MspInit+0x17c>)
 8004f9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004fa2:	6313      	str	r3, [r2, #48]	; 0x30
 8004fa4:	4b52      	ldr	r3, [pc, #328]	; (80050f0 <HAL_ETH_MspInit+0x17c>)
 8004fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fac:	623b      	str	r3, [r7, #32]
 8004fae:	6a3b      	ldr	r3, [r7, #32]
 8004fb0:	4b4f      	ldr	r3, [pc, #316]	; (80050f0 <HAL_ETH_MspInit+0x17c>)
 8004fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb4:	4a4e      	ldr	r2, [pc, #312]	; (80050f0 <HAL_ETH_MspInit+0x17c>)
 8004fb6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004fba:	6313      	str	r3, [r2, #48]	; 0x30
 8004fbc:	4b4c      	ldr	r3, [pc, #304]	; (80050f0 <HAL_ETH_MspInit+0x17c>)
 8004fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fc4:	61fb      	str	r3, [r7, #28]
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	4b49      	ldr	r3, [pc, #292]	; (80050f0 <HAL_ETH_MspInit+0x17c>)
 8004fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fcc:	4a48      	ldr	r2, [pc, #288]	; (80050f0 <HAL_ETH_MspInit+0x17c>)
 8004fce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004fd2:	6313      	str	r3, [r2, #48]	; 0x30
 8004fd4:	4b46      	ldr	r3, [pc, #280]	; (80050f0 <HAL_ETH_MspInit+0x17c>)
 8004fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fdc:	61bb      	str	r3, [r7, #24]
 8004fde:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fe0:	4b43      	ldr	r3, [pc, #268]	; (80050f0 <HAL_ETH_MspInit+0x17c>)
 8004fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe4:	4a42      	ldr	r2, [pc, #264]	; (80050f0 <HAL_ETH_MspInit+0x17c>)
 8004fe6:	f043 0304 	orr.w	r3, r3, #4
 8004fea:	6313      	str	r3, [r2, #48]	; 0x30
 8004fec:	4b40      	ldr	r3, [pc, #256]	; (80050f0 <HAL_ETH_MspInit+0x17c>)
 8004fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff0:	f003 0304 	and.w	r3, r3, #4
 8004ff4:	617b      	str	r3, [r7, #20]
 8004ff6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ff8:	4b3d      	ldr	r3, [pc, #244]	; (80050f0 <HAL_ETH_MspInit+0x17c>)
 8004ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffc:	4a3c      	ldr	r2, [pc, #240]	; (80050f0 <HAL_ETH_MspInit+0x17c>)
 8004ffe:	f043 0301 	orr.w	r3, r3, #1
 8005002:	6313      	str	r3, [r2, #48]	; 0x30
 8005004:	4b3a      	ldr	r3, [pc, #232]	; (80050f0 <HAL_ETH_MspInit+0x17c>)
 8005006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005008:	f003 0301 	and.w	r3, r3, #1
 800500c:	613b      	str	r3, [r7, #16]
 800500e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005010:	4b37      	ldr	r3, [pc, #220]	; (80050f0 <HAL_ETH_MspInit+0x17c>)
 8005012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005014:	4a36      	ldr	r2, [pc, #216]	; (80050f0 <HAL_ETH_MspInit+0x17c>)
 8005016:	f043 0302 	orr.w	r3, r3, #2
 800501a:	6313      	str	r3, [r2, #48]	; 0x30
 800501c:	4b34      	ldr	r3, [pc, #208]	; (80050f0 <HAL_ETH_MspInit+0x17c>)
 800501e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005020:	f003 0302 	and.w	r3, r3, #2
 8005024:	60fb      	str	r3, [r7, #12]
 8005026:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005028:	4b31      	ldr	r3, [pc, #196]	; (80050f0 <HAL_ETH_MspInit+0x17c>)
 800502a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502c:	4a30      	ldr	r2, [pc, #192]	; (80050f0 <HAL_ETH_MspInit+0x17c>)
 800502e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005032:	6313      	str	r3, [r2, #48]	; 0x30
 8005034:	4b2e      	ldr	r3, [pc, #184]	; (80050f0 <HAL_ETH_MspInit+0x17c>)
 8005036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503c:	60bb      	str	r3, [r7, #8]
 800503e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005040:	2332      	movs	r3, #50	; 0x32
 8005042:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005044:	2302      	movs	r3, #2
 8005046:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005048:	2300      	movs	r3, #0
 800504a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800504c:	2303      	movs	r3, #3
 800504e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005050:	230b      	movs	r3, #11
 8005052:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005054:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005058:	4619      	mov	r1, r3
 800505a:	4826      	ldr	r0, [pc, #152]	; (80050f4 <HAL_ETH_MspInit+0x180>)
 800505c:	f7fd fb5c 	bl	8002718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005060:	2386      	movs	r3, #134	; 0x86
 8005062:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005064:	2302      	movs	r3, #2
 8005066:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005068:	2300      	movs	r3, #0
 800506a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800506c:	2303      	movs	r3, #3
 800506e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005070:	230b      	movs	r3, #11
 8005072:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005074:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005078:	4619      	mov	r1, r3
 800507a:	481f      	ldr	r0, [pc, #124]	; (80050f8 <HAL_ETH_MspInit+0x184>)
 800507c:	f7fd fb4c 	bl	8002718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005080:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005084:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005086:	2302      	movs	r3, #2
 8005088:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800508a:	2300      	movs	r3, #0
 800508c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800508e:	2303      	movs	r3, #3
 8005090:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005092:	230b      	movs	r3, #11
 8005094:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005096:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800509a:	4619      	mov	r1, r3
 800509c:	4817      	ldr	r0, [pc, #92]	; (80050fc <HAL_ETH_MspInit+0x188>)
 800509e:	f7fd fb3b 	bl	8002718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80050a2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80050a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050a8:	2302      	movs	r3, #2
 80050aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ac:	2300      	movs	r3, #0
 80050ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050b0:	2303      	movs	r3, #3
 80050b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80050b4:	230b      	movs	r3, #11
 80050b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80050b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050bc:	4619      	mov	r1, r3
 80050be:	4810      	ldr	r0, [pc, #64]	; (8005100 <HAL_ETH_MspInit+0x18c>)
 80050c0:	f7fd fb2a 	bl	8002718 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80050c4:	2200      	movs	r2, #0
 80050c6:	2105      	movs	r1, #5
 80050c8:	203d      	movs	r0, #61	; 0x3d
 80050ca:	f7fc f975 	bl	80013b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80050ce:	203d      	movs	r0, #61	; 0x3d
 80050d0:	f7fc f98e 	bl	80013f0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 80050d4:	2200      	movs	r2, #0
 80050d6:	2105      	movs	r1, #5
 80050d8:	203e      	movs	r0, #62	; 0x3e
 80050da:	f7fc f96d 	bl	80013b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 80050de:	203e      	movs	r0, #62	; 0x3e
 80050e0:	f7fc f986 	bl	80013f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80050e4:	bf00      	nop
 80050e6:	3738      	adds	r7, #56	; 0x38
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	40028000 	.word	0x40028000
 80050f0:	40023800 	.word	0x40023800
 80050f4:	40020800 	.word	0x40020800
 80050f8:	40020000 	.word	0x40020000
 80050fc:	40020400 	.word	0x40020400
 8005100:	40021800 	.word	0x40021800

08005104 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 800510c:	4b04      	ldr	r3, [pc, #16]	; (8005120 <HAL_ETH_RxCpltCallback+0x1c>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4618      	mov	r0, r3
 8005112:	f000 fd09 	bl	8005b28 <osSemaphoreRelease>
}
 8005116:	bf00      	nop
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	2000076c 	.word	0x2000076c

08005124 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005124:	b5b0      	push	{r4, r5, r7, lr}
 8005126:	b090      	sub	sp, #64	; 0x40
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800512c:	2300      	movs	r3, #0
 800512e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005130:	4b5c      	ldr	r3, [pc, #368]	; (80052a4 <low_level_init+0x180>)
 8005132:	4a5d      	ldr	r2, [pc, #372]	; (80052a8 <low_level_init+0x184>)
 8005134:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8005136:	4b5b      	ldr	r3, [pc, #364]	; (80052a4 <low_level_init+0x180>)
 8005138:	2201      	movs	r2, #1
 800513a:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800513c:	4b59      	ldr	r3, [pc, #356]	; (80052a4 <low_level_init+0x180>)
 800513e:	2200      	movs	r2, #0
 8005140:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8005142:	2300      	movs	r3, #0
 8005144:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8005148:	2380      	movs	r3, #128	; 0x80
 800514a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800514e:	23e1      	movs	r3, #225	; 0xe1
 8005150:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8005154:	2300      	movs	r3, #0
 8005156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800515a:	2300      	movs	r3, #0
 800515c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x01;
 8005160:	2301      	movs	r3, #1
 8005162:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8005166:	4a4f      	ldr	r2, [pc, #316]	; (80052a4 <low_level_init+0x180>)
 8005168:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800516c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800516e:	4b4d      	ldr	r3, [pc, #308]	; (80052a4 <low_level_init+0x180>)
 8005170:	2201      	movs	r2, #1
 8005172:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8005174:	4b4b      	ldr	r3, [pc, #300]	; (80052a4 <low_level_init+0x180>)
 8005176:	2200      	movs	r2, #0
 8005178:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800517a:	4b4a      	ldr	r3, [pc, #296]	; (80052a4 <low_level_init+0x180>)
 800517c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005180:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005182:	4848      	ldr	r0, [pc, #288]	; (80052a4 <low_level_init+0x180>)
 8005184:	f7fc f942 	bl	800140c <HAL_ETH_Init>
 8005188:	4603      	mov	r3, r0
 800518a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800518e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005192:	2b00      	cmp	r3, #0
 8005194:	d108      	bne.n	80051a8 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800519c:	f043 0304 	orr.w	r3, r3, #4
 80051a0:	b2da      	uxtb	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80051a8:	2304      	movs	r3, #4
 80051aa:	4a40      	ldr	r2, [pc, #256]	; (80052ac <low_level_init+0x188>)
 80051ac:	4940      	ldr	r1, [pc, #256]	; (80052b0 <low_level_init+0x18c>)
 80051ae:	483d      	ldr	r0, [pc, #244]	; (80052a4 <low_level_init+0x180>)
 80051b0:	f7fc fac8 	bl	8001744 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80051b4:	2304      	movs	r3, #4
 80051b6:	4a3f      	ldr	r2, [pc, #252]	; (80052b4 <low_level_init+0x190>)
 80051b8:	493f      	ldr	r1, [pc, #252]	; (80052b8 <low_level_init+0x194>)
 80051ba:	483a      	ldr	r0, [pc, #232]	; (80052a4 <low_level_init+0x180>)
 80051bc:	f7fc fb2b 	bl	8001816 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2206      	movs	r2, #6
 80051c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80051c8:	4b36      	ldr	r3, [pc, #216]	; (80052a4 <low_level_init+0x180>)
 80051ca:	695b      	ldr	r3, [r3, #20]
 80051cc:	781a      	ldrb	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80051d4:	4b33      	ldr	r3, [pc, #204]	; (80052a4 <low_level_init+0x180>)
 80051d6:	695b      	ldr	r3, [r3, #20]
 80051d8:	785a      	ldrb	r2, [r3, #1]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80051e0:	4b30      	ldr	r3, [pc, #192]	; (80052a4 <low_level_init+0x180>)
 80051e2:	695b      	ldr	r3, [r3, #20]
 80051e4:	789a      	ldrb	r2, [r3, #2]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80051ec:	4b2d      	ldr	r3, [pc, #180]	; (80052a4 <low_level_init+0x180>)
 80051ee:	695b      	ldr	r3, [r3, #20]
 80051f0:	78da      	ldrb	r2, [r3, #3]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80051f8:	4b2a      	ldr	r3, [pc, #168]	; (80052a4 <low_level_init+0x180>)
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	791a      	ldrb	r2, [r3, #4]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005204:	4b27      	ldr	r3, [pc, #156]	; (80052a4 <low_level_init+0x180>)
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	795a      	ldrb	r2, [r3, #5]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005216:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800521e:	f043 030a 	orr.w	r3, r3, #10
 8005222:	b2da      	uxtb	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800522a:	2300      	movs	r3, #0
 800522c:	62bb      	str	r3, [r7, #40]	; 0x28
 800522e:	2300      	movs	r3, #0
 8005230:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8005232:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005236:	2101      	movs	r1, #1
 8005238:	4618      	mov	r0, r3
 800523a:	f000 fbf3 	bl	8005a24 <osSemaphoreCreate>
 800523e:	4602      	mov	r2, r0
 8005240:	4b1e      	ldr	r3, [pc, #120]	; (80052bc <low_level_init+0x198>)
 8005242:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8005244:	4b1e      	ldr	r3, [pc, #120]	; (80052c0 <low_level_init+0x19c>)
 8005246:	f107 040c 	add.w	r4, r7, #12
 800524a:	461d      	mov	r5, r3
 800524c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800524e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005250:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005254:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8005258:	f107 030c 	add.w	r3, r7, #12
 800525c:	6879      	ldr	r1, [r7, #4]
 800525e:	4618      	mov	r0, r3
 8005260:	f000 fae4 	bl	800582c <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8005264:	480f      	ldr	r0, [pc, #60]	; (80052a4 <low_level_init+0x180>)
 8005266:	f7fc fdfe 	bl	8001e66 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800526a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800526e:	461a      	mov	r2, r3
 8005270:	211d      	movs	r1, #29
 8005272:	480c      	ldr	r0, [pc, #48]	; (80052a4 <low_level_init+0x180>)
 8005274:	f7fc fd29 	bl	8001cca <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8005278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800527a:	f043 030b 	orr.w	r3, r3, #11
 800527e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8005280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005282:	461a      	mov	r2, r3
 8005284:	211d      	movs	r1, #29
 8005286:	4807      	ldr	r0, [pc, #28]	; (80052a4 <low_level_init+0x180>)
 8005288:	f7fc fd87 	bl	8001d9a <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800528c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005290:	461a      	mov	r2, r3
 8005292:	211d      	movs	r1, #29
 8005294:	4803      	ldr	r0, [pc, #12]	; (80052a4 <low_level_init+0x180>)
 8005296:	f7fc fd18 	bl	8001cca <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800529a:	bf00      	nop
 800529c:	3740      	adds	r7, #64	; 0x40
 800529e:	46bd      	mov	sp, r7
 80052a0:	bdb0      	pop	{r4, r5, r7, pc}
 80052a2:	bf00      	nop
 80052a4:	20006194 	.word	0x20006194
 80052a8:	40028000 	.word	0x40028000
 80052ac:	200061dc 	.word	0x200061dc
 80052b0:	200048c4 	.word	0x200048c4
 80052b4:	20004944 	.word	0x20004944
 80052b8:	20006114 	.word	0x20006114
 80052bc:	2000076c 	.word	0x2000076c
 80052c0:	08018420 	.word	0x08018420

080052c4 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b08a      	sub	sp, #40	; 0x28
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80052ce:	4b4b      	ldr	r3, [pc, #300]	; (80053fc <low_level_output+0x138>)
 80052d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80052d6:	2300      	movs	r3, #0
 80052d8:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80052da:	2300      	movs	r3, #0
 80052dc:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80052de:	2300      	movs	r3, #0
 80052e0:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80052e2:	2300      	movs	r3, #0
 80052e4:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80052e6:	4b45      	ldr	r3, [pc, #276]	; (80053fc <low_level_output+0x138>)
 80052e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ea:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80052ec:	2300      	movs	r3, #0
 80052ee:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	623b      	str	r3, [r7, #32]
 80052f4:	e05a      	b.n	80053ac <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	da03      	bge.n	8005306 <low_level_output+0x42>
      {
        errval = ERR_USE;
 80052fe:	23f8      	movs	r3, #248	; 0xf8
 8005300:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8005304:	e05c      	b.n	80053c0 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	895b      	ldrh	r3, [r3, #10]
 800530a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800530c:	2300      	movs	r3, #0
 800530e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005310:	e02f      	b.n	8005372 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8005312:	69fa      	ldr	r2, [r7, #28]
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	18d0      	adds	r0, r2, r3
 8005318:	6a3b      	ldr	r3, [r7, #32]
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	18d1      	adds	r1, r2, r3
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8005326:	1a9b      	subs	r3, r3, r2
 8005328:	461a      	mov	r2, r3
 800532a:	f011 fee2 	bl	80170f2 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	da03      	bge.n	8005344 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800533c:	23f8      	movs	r3, #248	; 0xf8
 800533e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8005342:	e03d      	b.n	80053c0 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4413      	add	r3, r2
 8005350:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005354:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005360:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800536c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800536e:	2300      	movs	r3, #0
 8005370:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	4413      	add	r3, r2
 8005378:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800537c:	4293      	cmp	r3, r2
 800537e:	d8c8      	bhi.n	8005312 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005380:	69fa      	ldr	r2, [r7, #28]
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	18d0      	adds	r0, r2, r3
 8005386:	6a3b      	ldr	r3, [r7, #32]
 8005388:	685a      	ldr	r2, [r3, #4]
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	4413      	add	r3, r2
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	4619      	mov	r1, r3
 8005392:	f011 feae 	bl	80170f2 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	4413      	add	r3, r2
 800539c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	4413      	add	r3, r2
 80053a4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	623b      	str	r3, [r7, #32]
 80053ac:	6a3b      	ldr	r3, [r7, #32]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1a1      	bne.n	80052f6 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80053b2:	6979      	ldr	r1, [r7, #20]
 80053b4:	4811      	ldr	r0, [pc, #68]	; (80053fc <low_level_output+0x138>)
 80053b6:	f7fc fa9b 	bl	80018f0 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80053ba:	2300      	movs	r3, #0
 80053bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80053c0:	4b0e      	ldr	r3, [pc, #56]	; (80053fc <low_level_output+0x138>)
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	f241 0314 	movw	r3, #4116	; 0x1014
 80053c8:	4413      	add	r3, r2
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0320 	and.w	r3, r3, #32
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00d      	beq.n	80053f0 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80053d4:	4b09      	ldr	r3, [pc, #36]	; (80053fc <low_level_output+0x138>)
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	f241 0314 	movw	r3, #4116	; 0x1014
 80053dc:	4413      	add	r3, r2
 80053de:	2220      	movs	r2, #32
 80053e0:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80053e2:	4b06      	ldr	r3, [pc, #24]	; (80053fc <low_level_output+0x138>)
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	f241 0304 	movw	r3, #4100	; 0x1004
 80053ea:	4413      	add	r3, r2
 80053ec:	2200      	movs	r2, #0
 80053ee:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80053f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3728      	adds	r7, #40	; 0x28
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	20006194 	.word	0x20006194

08005400 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b08c      	sub	sp, #48	; 0x30
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005408:	2300      	movs	r3, #0
 800540a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800540c:	2300      	movs	r3, #0
 800540e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8005410:	2300      	movs	r3, #0
 8005412:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8005414:	2300      	movs	r3, #0
 8005416:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8005418:	2300      	movs	r3, #0
 800541a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800541c:	2300      	movs	r3, #0
 800541e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8005420:	2300      	movs	r3, #0
 8005422:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8005424:	484f      	ldr	r0, [pc, #316]	; (8005564 <low_level_input+0x164>)
 8005426:	f7fc fb4d 	bl	8001ac4 <HAL_ETH_GetReceivedFrame_IT>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d001      	beq.n	8005434 <low_level_input+0x34>

    return NULL;
 8005430:	2300      	movs	r3, #0
 8005432:	e092      	b.n	800555a <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8005434:	4b4b      	ldr	r3, [pc, #300]	; (8005564 <low_level_input+0x164>)
 8005436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005438:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800543a:	4b4a      	ldr	r3, [pc, #296]	; (8005564 <low_level_input+0x164>)
 800543c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8005440:	89fb      	ldrh	r3, [r7, #14]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d007      	beq.n	8005456 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8005446:	89fb      	ldrh	r3, [r7, #14]
 8005448:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800544c:	4619      	mov	r1, r3
 800544e:	2000      	movs	r0, #0
 8005450:	f008 f9ca 	bl	800d7e8 <pbuf_alloc>
 8005454:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8005456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005458:	2b00      	cmp	r3, #0
 800545a:	d04b      	beq.n	80054f4 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800545c:	4b41      	ldr	r3, [pc, #260]	; (8005564 <low_level_input+0x164>)
 800545e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005460:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8005462:	2300      	movs	r3, #0
 8005464:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005468:	62bb      	str	r3, [r7, #40]	; 0x28
 800546a:	e040      	b.n	80054ee <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800546c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546e:	895b      	ldrh	r3, [r3, #10]
 8005470:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8005472:	2300      	movs	r3, #0
 8005474:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005476:	e021      	b.n	80054bc <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8005478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547a:	685a      	ldr	r2, [r3, #4]
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	18d0      	adds	r0, r2, r3
 8005480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	18d1      	adds	r1, r2, r3
 8005486:	69fa      	ldr	r2, [r7, #28]
 8005488:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800548c:	1a9b      	subs	r3, r3, r2
 800548e:	461a      	mov	r2, r3
 8005490:	f011 fe2f 	bl	80170f2 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005494:	6a3b      	ldr	r3, [r7, #32]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800549a:	6a3b      	ldr	r3, [r7, #32]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80054a0:	69fa      	ldr	r2, [r7, #28]
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	4413      	add	r3, r2
 80054a6:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80054aa:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80054ac:	69ba      	ldr	r2, [r7, #24]
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80054b6:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80054b8:	2300      	movs	r3, #0
 80054ba:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80054bc:	697a      	ldr	r2, [r7, #20]
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	4413      	add	r3, r2
 80054c2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d8d6      	bhi.n	8005478 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80054ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	18d0      	adds	r0, r2, r3
 80054d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	4413      	add	r3, r2
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	4619      	mov	r1, r3
 80054dc:	f011 fe09 	bl	80170f2 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80054e0:	69fa      	ldr	r2, [r7, #28]
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	4413      	add	r3, r2
 80054e6:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80054e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80054ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1bb      	bne.n	800546c <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80054f4:	4b1b      	ldr	r3, [pc, #108]	; (8005564 <low_level_input+0x164>)
 80054f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f8:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80054fa:	2300      	movs	r3, #0
 80054fc:	613b      	str	r3, [r7, #16]
 80054fe:	e00b      	b.n	8005518 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8005500:	6a3b      	ldr	r3, [r7, #32]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005508:	6a3b      	ldr	r3, [r7, #32]
 800550a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	3301      	adds	r3, #1
 8005516:	613b      	str	r3, [r7, #16]
 8005518:	4b12      	ldr	r3, [pc, #72]	; (8005564 <low_level_input+0x164>)
 800551a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	429a      	cmp	r2, r3
 8005520:	d3ee      	bcc.n	8005500 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8005522:	4b10      	ldr	r3, [pc, #64]	; (8005564 <low_level_input+0x164>)
 8005524:	2200      	movs	r2, #0
 8005526:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8005528:	4b0e      	ldr	r3, [pc, #56]	; (8005564 <low_level_input+0x164>)
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	f241 0314 	movw	r3, #4116	; 0x1014
 8005530:	4413      	add	r3, r2
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00d      	beq.n	8005558 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800553c:	4b09      	ldr	r3, [pc, #36]	; (8005564 <low_level_input+0x164>)
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	f241 0314 	movw	r3, #4116	; 0x1014
 8005544:	4413      	add	r3, r2
 8005546:	2280      	movs	r2, #128	; 0x80
 8005548:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800554a:	4b06      	ldr	r3, [pc, #24]	; (8005564 <low_level_input+0x164>)
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	f241 0308 	movw	r3, #4104	; 0x1008
 8005552:	4413      	add	r3, r2
 8005554:	2200      	movs	r2, #0
 8005556:	601a      	str	r2, [r3, #0]
  }
  return p;
 8005558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800555a:	4618      	mov	r0, r3
 800555c:	3730      	adds	r7, #48	; 0x30
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	20006194 	.word	0x20006194

08005568 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005574:	4b12      	ldr	r3, [pc, #72]	; (80055c0 <ethernetif_input+0x58>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f04f 31ff 	mov.w	r1, #4294967295
 800557c:	4618      	mov	r0, r3
 800557e:	f000 fa85 	bl	8005a8c <osSemaphoreWait>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1f5      	bne.n	8005574 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8005588:	480e      	ldr	r0, [pc, #56]	; (80055c4 <ethernetif_input+0x5c>)
 800558a:	f011 fd0b 	bl	8016fa4 <sys_mutex_lock>
        p = low_level_input( netif );
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f7ff ff36 	bl	8005400 <low_level_input>
 8005594:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00a      	beq.n	80055b2 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	68f9      	ldr	r1, [r7, #12]
 80055a2:	68b8      	ldr	r0, [r7, #8]
 80055a4:	4798      	blx	r3
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d002      	beq.n	80055b2 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 80055ac:	68b8      	ldr	r0, [r7, #8]
 80055ae:	f008 fc2d 	bl	800de0c <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 80055b2:	4804      	ldr	r0, [pc, #16]	; (80055c4 <ethernetif_input+0x5c>)
 80055b4:	f011 fd05 	bl	8016fc2 <sys_mutex_unlock>
      } while(p!=NULL);
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1e4      	bne.n	8005588 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80055be:	e7d9      	b.n	8005574 <ethernetif_input+0xc>
 80055c0:	2000076c 	.word	0x2000076c
 80055c4:	200079ec 	.word	0x200079ec

080055c8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d106      	bne.n	80055e4 <ethernetif_init+0x1c>
 80055d6:	4b0e      	ldr	r3, [pc, #56]	; (8005610 <ethernetif_init+0x48>)
 80055d8:	f240 2237 	movw	r2, #567	; 0x237
 80055dc:	490d      	ldr	r1, [pc, #52]	; (8005614 <ethernetif_init+0x4c>)
 80055de:	480e      	ldr	r0, [pc, #56]	; (8005618 <ethernetif_init+0x50>)
 80055e0:	f011 fdb4 	bl	801714c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2273      	movs	r2, #115	; 0x73
 80055e8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2274      	movs	r2, #116	; 0x74
 80055f0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a09      	ldr	r2, [pc, #36]	; (800561c <ethernetif_init+0x54>)
 80055f8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a08      	ldr	r2, [pc, #32]	; (8005620 <ethernetif_init+0x58>)
 80055fe:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f7ff fd8f 	bl	8005124 <low_level_init>

  return ERR_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3708      	adds	r7, #8
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	0801843c 	.word	0x0801843c
 8005614:	08018458 	.word	0x08018458
 8005618:	08018468 	.word	0x08018468
 800561c:	08014fd5 	.word	0x08014fd5
 8005620:	080052c5 	.word	0x080052c5

08005624 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005628:	f7fb fde0 	bl	80011ec <HAL_GetTick>
 800562c:	4603      	mov	r3, r0
}
 800562e:	4618      	mov	r0, r3
 8005630:	bd80      	pop	{r7, pc}
	...

08005634 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800563c:	2300      	movs	r3, #0
 800563e:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005644:	f107 0308 	add.w	r3, r7, #8
 8005648:	461a      	mov	r2, r3
 800564a:	2101      	movs	r1, #1
 800564c:	4816      	ldr	r0, [pc, #88]	; (80056a8 <ethernetif_set_link+0x74>)
 800564e:	f7fc fb3c 	bl	8001cca <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	f003 0304 	and.w	r3, r3, #4
 8005658:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005662:	f003 0304 	and.w	r3, r3, #4
 8005666:	2b00      	cmp	r3, #0
 8005668:	d108      	bne.n	800567c <ethernetif_set_link+0x48>
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d005      	beq.n	800567c <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4618      	mov	r0, r3
 8005676:	f007 ff89 	bl	800d58c <netif_set_link_up>
 800567a:	e011      	b.n	80056a0 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005684:	089b      	lsrs	r3, r3, #2
 8005686:	f003 0301 	and.w	r3, r3, #1
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b00      	cmp	r3, #0
 800568e:	d007      	beq.n	80056a0 <ethernetif_set_link+0x6c>
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d104      	bne.n	80056a0 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4618      	mov	r0, r3
 800569c:	f007 ffaa 	bl	800d5f4 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 80056a0:	20c8      	movs	r0, #200	; 0xc8
 80056a2:	f000 f90f 	bl	80058c4 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80056a6:	e7cd      	b.n	8005644 <ethernetif_set_link+0x10>
 80056a8:	20006194 	.word	0x20006194

080056ac <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80056b4:	2300      	movs	r3, #0
 80056b6:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80056b8:	2300      	movs	r3, #0
 80056ba:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80056c2:	089b      	lsrs	r3, r3, #2
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d05d      	beq.n	800578a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80056ce:	4b34      	ldr	r3, [pc, #208]	; (80057a0 <ethernetif_update_config+0xf4>)
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d03f      	beq.n	8005756 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80056d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80056da:	2100      	movs	r1, #0
 80056dc:	4830      	ldr	r0, [pc, #192]	; (80057a0 <ethernetif_update_config+0xf4>)
 80056de:	f7fc fb5c 	bl	8001d9a <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80056e2:	f7fb fd83 	bl	80011ec <HAL_GetTick>
 80056e6:	4603      	mov	r3, r0
 80056e8:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80056ea:	f107 0308 	add.w	r3, r7, #8
 80056ee:	461a      	mov	r2, r3
 80056f0:	2101      	movs	r1, #1
 80056f2:	482b      	ldr	r0, [pc, #172]	; (80057a0 <ethernetif_update_config+0xf4>)
 80056f4:	f7fc fae9 	bl	8001cca <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80056f8:	f7fb fd78 	bl	80011ec <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005706:	d828      	bhi.n	800575a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	f003 0320 	and.w	r3, r3, #32
 800570e:	2b00      	cmp	r3, #0
 8005710:	d0eb      	beq.n	80056ea <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8005712:	f107 0308 	add.w	r3, r7, #8
 8005716:	461a      	mov	r2, r3
 8005718:	211f      	movs	r1, #31
 800571a:	4821      	ldr	r0, [pc, #132]	; (80057a0 <ethernetif_update_config+0xf4>)
 800571c:	f7fc fad5 	bl	8001cca <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	f003 0310 	and.w	r3, r3, #16
 8005726:	2b00      	cmp	r3, #0
 8005728:	d004      	beq.n	8005734 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800572a:	4b1d      	ldr	r3, [pc, #116]	; (80057a0 <ethernetif_update_config+0xf4>)
 800572c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005730:	60da      	str	r2, [r3, #12]
 8005732:	e002      	b.n	800573a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8005734:	4b1a      	ldr	r3, [pc, #104]	; (80057a0 <ethernetif_update_config+0xf4>)
 8005736:	2200      	movs	r2, #0
 8005738:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	f003 0304 	and.w	r3, r3, #4
 8005740:	2b00      	cmp	r3, #0
 8005742:	d003      	beq.n	800574c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8005744:	4b16      	ldr	r3, [pc, #88]	; (80057a0 <ethernetif_update_config+0xf4>)
 8005746:	2200      	movs	r2, #0
 8005748:	609a      	str	r2, [r3, #8]
 800574a:	e016      	b.n	800577a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800574c:	4b14      	ldr	r3, [pc, #80]	; (80057a0 <ethernetif_update_config+0xf4>)
 800574e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005752:	609a      	str	r2, [r3, #8]
 8005754:	e011      	b.n	800577a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8005756:	bf00      	nop
 8005758:	e000      	b.n	800575c <ethernetif_update_config+0xb0>
          goto error;
 800575a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800575c:	4b10      	ldr	r3, [pc, #64]	; (80057a0 <ethernetif_update_config+0xf4>)
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	08db      	lsrs	r3, r3, #3
 8005762:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8005764:	4b0e      	ldr	r3, [pc, #56]	; (80057a0 <ethernetif_update_config+0xf4>)
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	085b      	lsrs	r3, r3, #1
 800576a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800576c:	4313      	orrs	r3, r2
 800576e:	b29b      	uxth	r3, r3
 8005770:	461a      	mov	r2, r3
 8005772:	2100      	movs	r1, #0
 8005774:	480a      	ldr	r0, [pc, #40]	; (80057a0 <ethernetif_update_config+0xf4>)
 8005776:	f7fc fb10 	bl	8001d9a <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800577a:	2100      	movs	r1, #0
 800577c:	4808      	ldr	r0, [pc, #32]	; (80057a0 <ethernetif_update_config+0xf4>)
 800577e:	f7fc fbd1 	bl	8001f24 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8005782:	4807      	ldr	r0, [pc, #28]	; (80057a0 <ethernetif_update_config+0xf4>)
 8005784:	f7fc fb6f 	bl	8001e66 <HAL_ETH_Start>
 8005788:	e002      	b.n	8005790 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800578a:	4805      	ldr	r0, [pc, #20]	; (80057a0 <ethernetif_update_config+0xf4>)
 800578c:	f7fc fb9a 	bl	8001ec4 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 f807 	bl	80057a4 <ethernetif_notify_conn_changed>
}
 8005796:	bf00      	nop
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	20006194 	.word	0x20006194

080057a4 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	4603      	mov	r3, r0
 80057c0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80057c2:	2300      	movs	r3, #0
 80057c4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80057c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057ca:	2b84      	cmp	r3, #132	; 0x84
 80057cc:	d005      	beq.n	80057da <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80057ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	4413      	add	r3, r2
 80057d6:	3303      	adds	r3, #3
 80057d8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80057da:	68fb      	ldr	r3, [r7, #12]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3714      	adds	r7, #20
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057ee:	f3ef 8305 	mrs	r3, IPSR
 80057f2:	607b      	str	r3, [r7, #4]
  return(result);
 80057f4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	bf14      	ite	ne
 80057fa:	2301      	movne	r3, #1
 80057fc:	2300      	moveq	r3, #0
 80057fe:	b2db      	uxtb	r3, r3
}
 8005800:	4618      	mov	r0, r3
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8005810:	f7ff ffea 	bl	80057e8 <inHandlerMode>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d003      	beq.n	8005822 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800581a:	f001 fec5 	bl	80075a8 <xTaskGetTickCountFromISR>
 800581e:	4603      	mov	r3, r0
 8005820:	e002      	b.n	8005828 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8005822:	f001 feb1 	bl	8007588 <xTaskGetTickCount>
 8005826:	4603      	mov	r3, r0
  }
}
 8005828:	4618      	mov	r0, r3
 800582a:	bd80      	pop	{r7, pc}

0800582c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800582c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800582e:	b089      	sub	sp, #36	; 0x24
 8005830:	af04      	add	r7, sp, #16
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d020      	beq.n	8005880 <osThreadCreate+0x54>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d01c      	beq.n	8005880 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685c      	ldr	r4, [r3, #4]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681d      	ldr	r5, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	691e      	ldr	r6, [r3, #16]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005858:	4618      	mov	r0, r3
 800585a:	f7ff ffad 	bl	80057b8 <makeFreeRtosPriority>
 800585e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005868:	9202      	str	r2, [sp, #8]
 800586a:	9301      	str	r3, [sp, #4]
 800586c:	9100      	str	r1, [sp, #0]
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	4632      	mov	r2, r6
 8005872:	4629      	mov	r1, r5
 8005874:	4620      	mov	r0, r4
 8005876:	f001 fba5 	bl	8006fc4 <xTaskCreateStatic>
 800587a:	4603      	mov	r3, r0
 800587c:	60fb      	str	r3, [r7, #12]
 800587e:	e01c      	b.n	80058ba <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685c      	ldr	r4, [r3, #4]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800588c:	b29e      	uxth	r6, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005894:	4618      	mov	r0, r3
 8005896:	f7ff ff8f 	bl	80057b8 <makeFreeRtosPriority>
 800589a:	4602      	mov	r2, r0
 800589c:	f107 030c 	add.w	r3, r7, #12
 80058a0:	9301      	str	r3, [sp, #4]
 80058a2:	9200      	str	r2, [sp, #0]
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	4632      	mov	r2, r6
 80058a8:	4629      	mov	r1, r5
 80058aa:	4620      	mov	r0, r4
 80058ac:	f001 fbea 	bl	8007084 <xTaskCreate>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d001      	beq.n	80058ba <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80058b6:	2300      	movs	r3, #0
 80058b8:	e000      	b.n	80058bc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80058ba:	68fb      	ldr	r3, [r7, #12]
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3714      	adds	r7, #20
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080058c4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <osDelay+0x16>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	e000      	b.n	80058dc <osDelay+0x18>
 80058da:	2301      	movs	r3, #1
 80058dc:	4618      	mov	r0, r3
 80058de:	f001 fd09 	bl	80072f4 <vTaskDelay>
  
  return osOK;
 80058e2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3710      	adds	r7, #16
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d007      	beq.n	800590c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	4619      	mov	r1, r3
 8005902:	2001      	movs	r0, #1
 8005904:	f000 fc8d 	bl	8006222 <xQueueCreateMutexStatic>
 8005908:	4603      	mov	r3, r0
 800590a:	e003      	b.n	8005914 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800590c:	2001      	movs	r0, #1
 800590e:	f000 fc70 	bl	80061f2 <xQueueCreateMutex>
 8005912:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005914:	4618      	mov	r0, r3
 8005916:	3708      	adds	r7, #8
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005926:	2300      	movs	r3, #0
 8005928:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d101      	bne.n	8005934 <osMutexWait+0x18>
    return osErrorParameter;
 8005930:	2380      	movs	r3, #128	; 0x80
 8005932:	e03a      	b.n	80059aa <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005934:	2300      	movs	r3, #0
 8005936:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800593e:	d103      	bne.n	8005948 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005940:	f04f 33ff 	mov.w	r3, #4294967295
 8005944:	60fb      	str	r3, [r7, #12]
 8005946:	e009      	b.n	800595c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d006      	beq.n	800595c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d101      	bne.n	800595c <osMutexWait+0x40>
      ticks = 1;
 8005958:	2301      	movs	r3, #1
 800595a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800595c:	f7ff ff44 	bl	80057e8 <inHandlerMode>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d017      	beq.n	8005996 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005966:	f107 0308 	add.w	r3, r7, #8
 800596a:	461a      	mov	r2, r3
 800596c:	2100      	movs	r1, #0
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f001 f894 	bl	8006a9c <xQueueReceiveFromISR>
 8005974:	4603      	mov	r3, r0
 8005976:	2b01      	cmp	r3, #1
 8005978:	d001      	beq.n	800597e <osMutexWait+0x62>
      return osErrorOS;
 800597a:	23ff      	movs	r3, #255	; 0xff
 800597c:	e015      	b.n	80059aa <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d011      	beq.n	80059a8 <osMutexWait+0x8c>
 8005984:	4b0b      	ldr	r3, [pc, #44]	; (80059b4 <osMutexWait+0x98>)
 8005986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800598a:	601a      	str	r2, [r3, #0]
 800598c:	f3bf 8f4f 	dsb	sy
 8005990:	f3bf 8f6f 	isb	sy
 8005994:	e008      	b.n	80059a8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005996:	68f9      	ldr	r1, [r7, #12]
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 ff6f 	bl	800687c <xQueueSemaphoreTake>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d001      	beq.n	80059a8 <osMutexWait+0x8c>
    return osErrorOS;
 80059a4:	23ff      	movs	r3, #255	; 0xff
 80059a6:	e000      	b.n	80059aa <osMutexWait+0x8e>
  }
  
  return osOK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	e000ed04 	.word	0xe000ed04

080059b8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80059c0:	2300      	movs	r3, #0
 80059c2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80059c4:	2300      	movs	r3, #0
 80059c6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80059c8:	f7ff ff0e 	bl	80057e8 <inHandlerMode>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d016      	beq.n	8005a00 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80059d2:	f107 0308 	add.w	r3, r7, #8
 80059d6:	4619      	mov	r1, r3
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 fddb 	bl	8006594 <xQueueGiveFromISR>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d001      	beq.n	80059e8 <osMutexRelease+0x30>
      return osErrorOS;
 80059e4:	23ff      	movs	r3, #255	; 0xff
 80059e6:	e017      	b.n	8005a18 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d013      	beq.n	8005a16 <osMutexRelease+0x5e>
 80059ee:	4b0c      	ldr	r3, [pc, #48]	; (8005a20 <osMutexRelease+0x68>)
 80059f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059f4:	601a      	str	r2, [r3, #0]
 80059f6:	f3bf 8f4f 	dsb	sy
 80059fa:	f3bf 8f6f 	isb	sy
 80059fe:	e00a      	b.n	8005a16 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005a00:	2300      	movs	r3, #0
 8005a02:	2200      	movs	r2, #0
 8005a04:	2100      	movs	r1, #0
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 fc26 	bl	8006258 <xQueueGenericSend>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d001      	beq.n	8005a16 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005a12:	23ff      	movs	r3, #255	; 0xff
 8005a14:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005a16:	68fb      	ldr	r3, [r7, #12]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	e000ed04 	.word	0xe000ed04

08005a24 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af02      	add	r7, sp, #8
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d010      	beq.n	8005a58 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d10b      	bne.n	8005a54 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685a      	ldr	r2, [r3, #4]
 8005a40:	2303      	movs	r3, #3
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	4613      	mov	r3, r2
 8005a46:	2200      	movs	r2, #0
 8005a48:	2100      	movs	r1, #0
 8005a4a:	2001      	movs	r0, #1
 8005a4c:	f000 fada 	bl	8006004 <xQueueGenericCreateStatic>
 8005a50:	4603      	mov	r3, r0
 8005a52:	e016      	b.n	8005a82 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005a54:	2300      	movs	r3, #0
 8005a56:	e014      	b.n	8005a82 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d110      	bne.n	8005a80 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8005a5e:	2203      	movs	r2, #3
 8005a60:	2100      	movs	r1, #0
 8005a62:	2001      	movs	r0, #1
 8005a64:	f000 fb4b 	bl	80060fe <xQueueGenericCreate>
 8005a68:	60f8      	str	r0, [r7, #12]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d005      	beq.n	8005a7c <osSemaphoreCreate+0x58>
 8005a70:	2300      	movs	r3, #0
 8005a72:	2200      	movs	r2, #0
 8005a74:	2100      	movs	r1, #0
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f000 fbee 	bl	8006258 <xQueueGenericSend>
      return sema;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	e000      	b.n	8005a82 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005a80:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
	...

08005a8c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005a96:	2300      	movs	r3, #0
 8005a98:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d101      	bne.n	8005aa4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005aa0:	2380      	movs	r3, #128	; 0x80
 8005aa2:	e03a      	b.n	8005b1a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aae:	d103      	bne.n	8005ab8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ab4:	60fb      	str	r3, [r7, #12]
 8005ab6:	e009      	b.n	8005acc <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d006      	beq.n	8005acc <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d101      	bne.n	8005acc <osSemaphoreWait+0x40>
      ticks = 1;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005acc:	f7ff fe8c 	bl	80057e8 <inHandlerMode>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d017      	beq.n	8005b06 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005ad6:	f107 0308 	add.w	r3, r7, #8
 8005ada:	461a      	mov	r2, r3
 8005adc:	2100      	movs	r1, #0
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 ffdc 	bl	8006a9c <xQueueReceiveFromISR>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d001      	beq.n	8005aee <osSemaphoreWait+0x62>
      return osErrorOS;
 8005aea:	23ff      	movs	r3, #255	; 0xff
 8005aec:	e015      	b.n	8005b1a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d011      	beq.n	8005b18 <osSemaphoreWait+0x8c>
 8005af4:	4b0b      	ldr	r3, [pc, #44]	; (8005b24 <osSemaphoreWait+0x98>)
 8005af6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005afa:	601a      	str	r2, [r3, #0]
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	f3bf 8f6f 	isb	sy
 8005b04:	e008      	b.n	8005b18 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005b06:	68f9      	ldr	r1, [r7, #12]
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 feb7 	bl	800687c <xQueueSemaphoreTake>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d001      	beq.n	8005b18 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005b14:	23ff      	movs	r3, #255	; 0xff
 8005b16:	e000      	b.n	8005b1a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	e000ed04 	.word	0xe000ed04

08005b28 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005b30:	2300      	movs	r3, #0
 8005b32:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005b34:	2300      	movs	r3, #0
 8005b36:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005b38:	f7ff fe56 	bl	80057e8 <inHandlerMode>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d016      	beq.n	8005b70 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005b42:	f107 0308 	add.w	r3, r7, #8
 8005b46:	4619      	mov	r1, r3
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 fd23 	bl	8006594 <xQueueGiveFromISR>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d001      	beq.n	8005b58 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005b54:	23ff      	movs	r3, #255	; 0xff
 8005b56:	e017      	b.n	8005b88 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d013      	beq.n	8005b86 <osSemaphoreRelease+0x5e>
 8005b5e:	4b0c      	ldr	r3, [pc, #48]	; (8005b90 <osSemaphoreRelease+0x68>)
 8005b60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b64:	601a      	str	r2, [r3, #0]
 8005b66:	f3bf 8f4f 	dsb	sy
 8005b6a:	f3bf 8f6f 	isb	sy
 8005b6e:	e00a      	b.n	8005b86 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005b70:	2300      	movs	r3, #0
 8005b72:	2200      	movs	r2, #0
 8005b74:	2100      	movs	r1, #0
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 fb6e 	bl	8006258 <xQueueGenericSend>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d001      	beq.n	8005b86 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8005b82:	23ff      	movs	r3, #255	; 0xff
 8005b84:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8005b86:	68fb      	ldr	r3, [r7, #12]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	e000ed04 	.word	0xe000ed04

08005b94 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005b9c:	f7ff fe24 	bl	80057e8 <inHandlerMode>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d001      	beq.n	8005baa <osSemaphoreDelete+0x16>
    return osErrorISR;
 8005ba6:	2382      	movs	r3, #130	; 0x82
 8005ba8:	e003      	b.n	8005bb2 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f001 f837 	bl	8006c1e <vQueueDelete>

  return osOK; 
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3708      	adds	r7, #8
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005bba:	b590      	push	{r4, r7, lr}
 8005bbc:	b085      	sub	sp, #20
 8005bbe:	af02      	add	r7, sp, #8
 8005bc0:	6078      	str	r0, [r7, #4]
 8005bc2:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d012      	beq.n	8005bf2 <osMessageCreate+0x38>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00e      	beq.n	8005bf2 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6818      	ldr	r0, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6859      	ldr	r1, [r3, #4]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689a      	ldr	r2, [r3, #8]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	68dc      	ldr	r4, [r3, #12]
 8005be4:	2300      	movs	r3, #0
 8005be6:	9300      	str	r3, [sp, #0]
 8005be8:	4623      	mov	r3, r4
 8005bea:	f000 fa0b 	bl	8006004 <xQueueGenericCreateStatic>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	e008      	b.n	8005c04 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6818      	ldr	r0, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	f000 fa7e 	bl	80060fe <xQueueGenericCreate>
 8005c02:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd90      	pop	{r4, r7, pc}

08005c0c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d101      	bne.n	8005c2a <osMessagePut+0x1e>
    ticks = 1;
 8005c26:	2301      	movs	r3, #1
 8005c28:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8005c2a:	f7ff fddd 	bl	80057e8 <inHandlerMode>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d018      	beq.n	8005c66 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005c34:	f107 0210 	add.w	r2, r7, #16
 8005c38:	f107 0108 	add.w	r1, r7, #8
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f000 fc0c 	bl	800645c <xQueueGenericSendFromISR>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d001      	beq.n	8005c4e <osMessagePut+0x42>
      return osErrorOS;
 8005c4a:	23ff      	movs	r3, #255	; 0xff
 8005c4c:	e018      	b.n	8005c80 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d014      	beq.n	8005c7e <osMessagePut+0x72>
 8005c54:	4b0c      	ldr	r3, [pc, #48]	; (8005c88 <osMessagePut+0x7c>)
 8005c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c5a:	601a      	str	r2, [r3, #0]
 8005c5c:	f3bf 8f4f 	dsb	sy
 8005c60:	f3bf 8f6f 	isb	sy
 8005c64:	e00b      	b.n	8005c7e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005c66:	f107 0108 	add.w	r1, r7, #8
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f000 faf2 	bl	8006258 <xQueueGenericSend>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d001      	beq.n	8005c7e <osMessagePut+0x72>
      return osErrorOS;
 8005c7a:	23ff      	movs	r3, #255	; 0xff
 8005c7c:	e000      	b.n	8005c80 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3718      	adds	r7, #24
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	e000ed04 	.word	0xe000ed04

08005c8c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005c8c:	b590      	push	{r4, r7, lr}
 8005c8e:	b08b      	sub	sp, #44	; 0x2c
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10a      	bne.n	8005cbc <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005ca6:	2380      	movs	r3, #128	; 0x80
 8005ca8:	617b      	str	r3, [r7, #20]
    return event;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	461c      	mov	r4, r3
 8005cae:	f107 0314 	add.w	r3, r7, #20
 8005cb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005cb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005cba:	e054      	b.n	8005d66 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cca:	d103      	bne.n	8005cd4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8005cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8005cd2:	e009      	b.n	8005ce8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d006      	beq.n	8005ce8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d101      	bne.n	8005ce8 <osMessageGet+0x5c>
      ticks = 1;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005ce8:	f7ff fd7e 	bl	80057e8 <inHandlerMode>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d01c      	beq.n	8005d2c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005cf2:	f107 0220 	add.w	r2, r7, #32
 8005cf6:	f107 0314 	add.w	r3, r7, #20
 8005cfa:	3304      	adds	r3, #4
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	68b8      	ldr	r0, [r7, #8]
 8005d00:	f000 fecc 	bl	8006a9c <xQueueReceiveFromISR>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d102      	bne.n	8005d10 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005d0a:	2310      	movs	r3, #16
 8005d0c:	617b      	str	r3, [r7, #20]
 8005d0e:	e001      	b.n	8005d14 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005d10:	2300      	movs	r3, #0
 8005d12:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005d14:	6a3b      	ldr	r3, [r7, #32]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d01d      	beq.n	8005d56 <osMessageGet+0xca>
 8005d1a:	4b15      	ldr	r3, [pc, #84]	; (8005d70 <osMessageGet+0xe4>)
 8005d1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d20:	601a      	str	r2, [r3, #0]
 8005d22:	f3bf 8f4f 	dsb	sy
 8005d26:	f3bf 8f6f 	isb	sy
 8005d2a:	e014      	b.n	8005d56 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005d2c:	f107 0314 	add.w	r3, r7, #20
 8005d30:	3304      	adds	r3, #4
 8005d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d34:	4619      	mov	r1, r3
 8005d36:	68b8      	ldr	r0, [r7, #8]
 8005d38:	f000 fcbe 	bl	80066b8 <xQueueReceive>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d102      	bne.n	8005d48 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005d42:	2310      	movs	r3, #16
 8005d44:	617b      	str	r3, [r7, #20]
 8005d46:	e006      	b.n	8005d56 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d101      	bne.n	8005d52 <osMessageGet+0xc6>
 8005d4e:	2300      	movs	r3, #0
 8005d50:	e000      	b.n	8005d54 <osMessageGet+0xc8>
 8005d52:	2340      	movs	r3, #64	; 0x40
 8005d54:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	461c      	mov	r4, r3
 8005d5a:	f107 0314 	add.w	r3, r7, #20
 8005d5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005d62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	372c      	adds	r7, #44	; 0x2c
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd90      	pop	{r4, r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	e000ed04 	.word	0xe000ed04

08005d74 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005d7c:	f7ff fd34 	bl	80057e8 <inHandlerMode>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d004      	beq.n	8005d90 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 ff2a 	bl	8006be0 <uxQueueMessagesWaitingFromISR>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	e003      	b.n	8005d98 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 ff06 	bl	8006ba2 <uxQueueMessagesWaiting>
 8005d96:	4603      	mov	r3, r0
  }
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3708      	adds	r7, #8
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005da8:	f7ff fd1e 	bl	80057e8 <inHandlerMode>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d001      	beq.n	8005db6 <osMessageDelete+0x16>
    return osErrorISR;
 8005db2:	2382      	movs	r3, #130	; 0x82
 8005db4:	e003      	b.n	8005dbe <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 ff31 	bl	8006c1e <vQueueDelete>

  return osOK; 
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3708      	adds	r7, #8
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b083      	sub	sp, #12
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f103 0208 	add.w	r2, r3, #8
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f04f 32ff 	mov.w	r2, #4294967295
 8005dde:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f103 0208 	add.w	r2, r3, #8
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f103 0208 	add.w	r2, r3, #8
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005dfa:	bf00      	nop
 8005dfc:	370c      	adds	r7, #12
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005e06:	b480      	push	{r7}
 8005e08:	b083      	sub	sp, #12
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	689a      	ldr	r2, [r3, #8]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	683a      	ldr	r2, [r7, #0]
 8005e44:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	683a      	ldr	r2, [r7, #0]
 8005e4a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	1c5a      	adds	r2, r3, #1
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	601a      	str	r2, [r3, #0]
}
 8005e5c:	bf00      	nop
 8005e5e:	3714      	adds	r7, #20
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e7e:	d103      	bne.n	8005e88 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	60fb      	str	r3, [r7, #12]
 8005e86:	e00c      	b.n	8005ea2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	3308      	adds	r3, #8
 8005e8c:	60fb      	str	r3, [r7, #12]
 8005e8e:	e002      	b.n	8005e96 <vListInsert+0x2e>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	60fb      	str	r3, [r7, #12]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d2f6      	bcs.n	8005e90 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	685a      	ldr	r2, [r3, #4]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	683a      	ldr	r2, [r7, #0]
 8005eb0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	683a      	ldr	r2, [r7, #0]
 8005ebc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	1c5a      	adds	r2, r3, #1
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	601a      	str	r2, [r3, #0]
}
 8005ece:	bf00      	nop
 8005ed0:	3714      	adds	r7, #20
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005eda:	b480      	push	{r7}
 8005edc:	b085      	sub	sp, #20
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	6892      	ldr	r2, [r2, #8]
 8005ef0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	6852      	ldr	r2, [r2, #4]
 8005efa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d103      	bne.n	8005f0e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	689a      	ldr	r2, [r3, #8]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	1e5a      	subs	r2, r3, #1
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3714      	adds	r7, #20
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
	...

08005f30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10b      	bne.n	8005f5c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f48:	b672      	cpsid	i
 8005f4a:	f383 8811 	msr	BASEPRI, r3
 8005f4e:	f3bf 8f6f 	isb	sy
 8005f52:	f3bf 8f4f 	dsb	sy
 8005f56:	b662      	cpsie	i
 8005f58:	60bb      	str	r3, [r7, #8]
 8005f5a:	e7fe      	b.n	8005f5a <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8005f5c:	f002 fd3c 	bl	80089d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f68:	68f9      	ldr	r1, [r7, #12]
 8005f6a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f6c:	fb01 f303 	mul.w	r3, r1, r3
 8005f70:	441a      	add	r2, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	68f9      	ldr	r1, [r7, #12]
 8005f90:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f92:	fb01 f303 	mul.w	r3, r1, r3
 8005f96:	441a      	add	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	22ff      	movs	r2, #255	; 0xff
 8005fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	22ff      	movs	r2, #255	; 0xff
 8005fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d114      	bne.n	8005fdc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d01a      	beq.n	8005ff0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	3310      	adds	r3, #16
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f001 fc6c 	bl	800789c <xTaskRemoveFromEventList>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d012      	beq.n	8005ff0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005fca:	4b0d      	ldr	r3, [pc, #52]	; (8006000 <xQueueGenericReset+0xd0>)
 8005fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fd0:	601a      	str	r2, [r3, #0]
 8005fd2:	f3bf 8f4f 	dsb	sy
 8005fd6:	f3bf 8f6f 	isb	sy
 8005fda:	e009      	b.n	8005ff0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	3310      	adds	r3, #16
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7ff fef0 	bl	8005dc6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	3324      	adds	r3, #36	; 0x24
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7ff feeb 	bl	8005dc6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005ff0:	f002 fd24 	bl	8008a3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005ff4:	2301      	movs	r3, #1
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	e000ed04 	.word	0xe000ed04

08006004 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006004:	b580      	push	{r7, lr}
 8006006:	b08e      	sub	sp, #56	; 0x38
 8006008:	af02      	add	r7, sp, #8
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
 8006010:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10b      	bne.n	8006030 <xQueueGenericCreateStatic+0x2c>
 8006018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601c:	b672      	cpsid	i
 800601e:	f383 8811 	msr	BASEPRI, r3
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	b662      	cpsie	i
 800602c:	62bb      	str	r3, [r7, #40]	; 0x28
 800602e:	e7fe      	b.n	800602e <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10b      	bne.n	800604e <xQueueGenericCreateStatic+0x4a>
 8006036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800603a:	b672      	cpsid	i
 800603c:	f383 8811 	msr	BASEPRI, r3
 8006040:	f3bf 8f6f 	isb	sy
 8006044:	f3bf 8f4f 	dsb	sy
 8006048:	b662      	cpsie	i
 800604a:	627b      	str	r3, [r7, #36]	; 0x24
 800604c:	e7fe      	b.n	800604c <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d002      	beq.n	800605a <xQueueGenericCreateStatic+0x56>
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d001      	beq.n	800605e <xQueueGenericCreateStatic+0x5a>
 800605a:	2301      	movs	r3, #1
 800605c:	e000      	b.n	8006060 <xQueueGenericCreateStatic+0x5c>
 800605e:	2300      	movs	r3, #0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d10b      	bne.n	800607c <xQueueGenericCreateStatic+0x78>
 8006064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006068:	b672      	cpsid	i
 800606a:	f383 8811 	msr	BASEPRI, r3
 800606e:	f3bf 8f6f 	isb	sy
 8006072:	f3bf 8f4f 	dsb	sy
 8006076:	b662      	cpsie	i
 8006078:	623b      	str	r3, [r7, #32]
 800607a:	e7fe      	b.n	800607a <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d102      	bne.n	8006088 <xQueueGenericCreateStatic+0x84>
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d101      	bne.n	800608c <xQueueGenericCreateStatic+0x88>
 8006088:	2301      	movs	r3, #1
 800608a:	e000      	b.n	800608e <xQueueGenericCreateStatic+0x8a>
 800608c:	2300      	movs	r3, #0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10b      	bne.n	80060aa <xQueueGenericCreateStatic+0xa6>
 8006092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006096:	b672      	cpsid	i
 8006098:	f383 8811 	msr	BASEPRI, r3
 800609c:	f3bf 8f6f 	isb	sy
 80060a0:	f3bf 8f4f 	dsb	sy
 80060a4:	b662      	cpsie	i
 80060a6:	61fb      	str	r3, [r7, #28]
 80060a8:	e7fe      	b.n	80060a8 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80060aa:	2348      	movs	r3, #72	; 0x48
 80060ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	2b48      	cmp	r3, #72	; 0x48
 80060b2:	d00b      	beq.n	80060cc <xQueueGenericCreateStatic+0xc8>
 80060b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b8:	b672      	cpsid	i
 80060ba:	f383 8811 	msr	BASEPRI, r3
 80060be:	f3bf 8f6f 	isb	sy
 80060c2:	f3bf 8f4f 	dsb	sy
 80060c6:	b662      	cpsie	i
 80060c8:	61bb      	str	r3, [r7, #24]
 80060ca:	e7fe      	b.n	80060ca <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80060cc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80060d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00d      	beq.n	80060f4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80060d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80060e0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80060e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e6:	9300      	str	r3, [sp, #0]
 80060e8:	4613      	mov	r3, r2
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	68b9      	ldr	r1, [r7, #8]
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f000 f846 	bl	8006180 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80060f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3730      	adds	r7, #48	; 0x30
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80060fe:	b580      	push	{r7, lr}
 8006100:	b08a      	sub	sp, #40	; 0x28
 8006102:	af02      	add	r7, sp, #8
 8006104:	60f8      	str	r0, [r7, #12]
 8006106:	60b9      	str	r1, [r7, #8]
 8006108:	4613      	mov	r3, r2
 800610a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d10b      	bne.n	800612a <xQueueGenericCreate+0x2c>
 8006112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006116:	b672      	cpsid	i
 8006118:	f383 8811 	msr	BASEPRI, r3
 800611c:	f3bf 8f6f 	isb	sy
 8006120:	f3bf 8f4f 	dsb	sy
 8006124:	b662      	cpsie	i
 8006126:	613b      	str	r3, [r7, #16]
 8006128:	e7fe      	b.n	8006128 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d102      	bne.n	8006136 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006130:	2300      	movs	r3, #0
 8006132:	61fb      	str	r3, [r7, #28]
 8006134:	e004      	b.n	8006140 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	fb02 f303 	mul.w	r3, r2, r3
 800613e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	3348      	adds	r3, #72	; 0x48
 8006144:	4618      	mov	r0, r3
 8006146:	f002 fd69 	bl	8008c1c <pvPortMalloc>
 800614a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d011      	beq.n	8006176 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	3348      	adds	r3, #72	; 0x48
 800615a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006164:	79fa      	ldrb	r2, [r7, #7]
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	4613      	mov	r3, r2
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	68b9      	ldr	r1, [r7, #8]
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f000 f805 	bl	8006180 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006176:	69bb      	ldr	r3, [r7, #24]
	}
 8006178:	4618      	mov	r0, r3
 800617a:	3720      	adds	r7, #32
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
 800618c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d103      	bne.n	800619c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	69ba      	ldr	r2, [r7, #24]
 8006198:	601a      	str	r2, [r3, #0]
 800619a:	e002      	b.n	80061a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80061ae:	2101      	movs	r1, #1
 80061b0:	69b8      	ldr	r0, [r7, #24]
 80061b2:	f7ff febd 	bl	8005f30 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80061b6:	bf00      	nop
 80061b8:	3710      	adds	r7, #16
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}

080061be <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80061be:	b580      	push	{r7, lr}
 80061c0:	b082      	sub	sp, #8
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00e      	beq.n	80061ea <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80061de:	2300      	movs	r3, #0
 80061e0:	2200      	movs	r2, #0
 80061e2:	2100      	movs	r1, #0
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 f837 	bl	8006258 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80061ea:	bf00      	nop
 80061ec:	3708      	adds	r7, #8
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b086      	sub	sp, #24
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	4603      	mov	r3, r0
 80061fa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80061fc:	2301      	movs	r3, #1
 80061fe:	617b      	str	r3, [r7, #20]
 8006200:	2300      	movs	r3, #0
 8006202:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006204:	79fb      	ldrb	r3, [r7, #7]
 8006206:	461a      	mov	r2, r3
 8006208:	6939      	ldr	r1, [r7, #16]
 800620a:	6978      	ldr	r0, [r7, #20]
 800620c:	f7ff ff77 	bl	80060fe <xQueueGenericCreate>
 8006210:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f7ff ffd3 	bl	80061be <prvInitialiseMutex>

		return xNewQueue;
 8006218:	68fb      	ldr	r3, [r7, #12]
	}
 800621a:	4618      	mov	r0, r3
 800621c:	3718      	adds	r7, #24
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006222:	b580      	push	{r7, lr}
 8006224:	b088      	sub	sp, #32
 8006226:	af02      	add	r7, sp, #8
 8006228:	4603      	mov	r3, r0
 800622a:	6039      	str	r1, [r7, #0]
 800622c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800622e:	2301      	movs	r3, #1
 8006230:	617b      	str	r3, [r7, #20]
 8006232:	2300      	movs	r3, #0
 8006234:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006236:	79fb      	ldrb	r3, [r7, #7]
 8006238:	9300      	str	r3, [sp, #0]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	2200      	movs	r2, #0
 800623e:	6939      	ldr	r1, [r7, #16]
 8006240:	6978      	ldr	r0, [r7, #20]
 8006242:	f7ff fedf 	bl	8006004 <xQueueGenericCreateStatic>
 8006246:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f7ff ffb8 	bl	80061be <prvInitialiseMutex>

		return xNewQueue;
 800624e:	68fb      	ldr	r3, [r7, #12]
	}
 8006250:	4618      	mov	r0, r3
 8006252:	3718      	adds	r7, #24
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b08e      	sub	sp, #56	; 0x38
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
 8006264:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006266:	2300      	movs	r3, #0
 8006268:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800626e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006270:	2b00      	cmp	r3, #0
 8006272:	d10b      	bne.n	800628c <xQueueGenericSend+0x34>
 8006274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006278:	b672      	cpsid	i
 800627a:	f383 8811 	msr	BASEPRI, r3
 800627e:	f3bf 8f6f 	isb	sy
 8006282:	f3bf 8f4f 	dsb	sy
 8006286:	b662      	cpsie	i
 8006288:	62bb      	str	r3, [r7, #40]	; 0x28
 800628a:	e7fe      	b.n	800628a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d103      	bne.n	800629a <xQueueGenericSend+0x42>
 8006292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006296:	2b00      	cmp	r3, #0
 8006298:	d101      	bne.n	800629e <xQueueGenericSend+0x46>
 800629a:	2301      	movs	r3, #1
 800629c:	e000      	b.n	80062a0 <xQueueGenericSend+0x48>
 800629e:	2300      	movs	r3, #0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d10b      	bne.n	80062bc <xQueueGenericSend+0x64>
 80062a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a8:	b672      	cpsid	i
 80062aa:	f383 8811 	msr	BASEPRI, r3
 80062ae:	f3bf 8f6f 	isb	sy
 80062b2:	f3bf 8f4f 	dsb	sy
 80062b6:	b662      	cpsie	i
 80062b8:	627b      	str	r3, [r7, #36]	; 0x24
 80062ba:	e7fe      	b.n	80062ba <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d103      	bne.n	80062ca <xQueueGenericSend+0x72>
 80062c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d101      	bne.n	80062ce <xQueueGenericSend+0x76>
 80062ca:	2301      	movs	r3, #1
 80062cc:	e000      	b.n	80062d0 <xQueueGenericSend+0x78>
 80062ce:	2300      	movs	r3, #0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d10b      	bne.n	80062ec <xQueueGenericSend+0x94>
 80062d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d8:	b672      	cpsid	i
 80062da:	f383 8811 	msr	BASEPRI, r3
 80062de:	f3bf 8f6f 	isb	sy
 80062e2:	f3bf 8f4f 	dsb	sy
 80062e6:	b662      	cpsie	i
 80062e8:	623b      	str	r3, [r7, #32]
 80062ea:	e7fe      	b.n	80062ea <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062ec:	f001 fc96 	bl	8007c1c <xTaskGetSchedulerState>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d102      	bne.n	80062fc <xQueueGenericSend+0xa4>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d101      	bne.n	8006300 <xQueueGenericSend+0xa8>
 80062fc:	2301      	movs	r3, #1
 80062fe:	e000      	b.n	8006302 <xQueueGenericSend+0xaa>
 8006300:	2300      	movs	r3, #0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10b      	bne.n	800631e <xQueueGenericSend+0xc6>
 8006306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630a:	b672      	cpsid	i
 800630c:	f383 8811 	msr	BASEPRI, r3
 8006310:	f3bf 8f6f 	isb	sy
 8006314:	f3bf 8f4f 	dsb	sy
 8006318:	b662      	cpsie	i
 800631a:	61fb      	str	r3, [r7, #28]
 800631c:	e7fe      	b.n	800631c <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800631e:	f002 fb5b 	bl	80089d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006324:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800632a:	429a      	cmp	r2, r3
 800632c:	d302      	bcc.n	8006334 <xQueueGenericSend+0xdc>
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	2b02      	cmp	r3, #2
 8006332:	d129      	bne.n	8006388 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006334:	683a      	ldr	r2, [r7, #0]
 8006336:	68b9      	ldr	r1, [r7, #8]
 8006338:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800633a:	f000 fcac 	bl	8006c96 <prvCopyDataToQueue>
 800633e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006344:	2b00      	cmp	r3, #0
 8006346:	d010      	beq.n	800636a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634a:	3324      	adds	r3, #36	; 0x24
 800634c:	4618      	mov	r0, r3
 800634e:	f001 faa5 	bl	800789c <xTaskRemoveFromEventList>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d013      	beq.n	8006380 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006358:	4b3f      	ldr	r3, [pc, #252]	; (8006458 <xQueueGenericSend+0x200>)
 800635a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800635e:	601a      	str	r2, [r3, #0]
 8006360:	f3bf 8f4f 	dsb	sy
 8006364:	f3bf 8f6f 	isb	sy
 8006368:	e00a      	b.n	8006380 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800636a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800636c:	2b00      	cmp	r3, #0
 800636e:	d007      	beq.n	8006380 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006370:	4b39      	ldr	r3, [pc, #228]	; (8006458 <xQueueGenericSend+0x200>)
 8006372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006376:	601a      	str	r2, [r3, #0]
 8006378:	f3bf 8f4f 	dsb	sy
 800637c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006380:	f002 fb5c 	bl	8008a3c <vPortExitCritical>
				return pdPASS;
 8006384:	2301      	movs	r3, #1
 8006386:	e063      	b.n	8006450 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d103      	bne.n	8006396 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800638e:	f002 fb55 	bl	8008a3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006392:	2300      	movs	r3, #0
 8006394:	e05c      	b.n	8006450 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006398:	2b00      	cmp	r3, #0
 800639a:	d106      	bne.n	80063aa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800639c:	f107 0314 	add.w	r3, r7, #20
 80063a0:	4618      	mov	r0, r3
 80063a2:	f001 fadf 	bl	8007964 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80063a6:	2301      	movs	r3, #1
 80063a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80063aa:	f002 fb47 	bl	8008a3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80063ae:	f001 f83f 	bl	8007430 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80063b2:	f002 fb11 	bl	80089d8 <vPortEnterCritical>
 80063b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063bc:	b25b      	sxtb	r3, r3
 80063be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c2:	d103      	bne.n	80063cc <xQueueGenericSend+0x174>
 80063c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063d2:	b25b      	sxtb	r3, r3
 80063d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d8:	d103      	bne.n	80063e2 <xQueueGenericSend+0x18a>
 80063da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063e2:	f002 fb2b 	bl	8008a3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80063e6:	1d3a      	adds	r2, r7, #4
 80063e8:	f107 0314 	add.w	r3, r7, #20
 80063ec:	4611      	mov	r1, r2
 80063ee:	4618      	mov	r0, r3
 80063f0:	f001 face 	bl	8007990 <xTaskCheckForTimeOut>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d124      	bne.n	8006444 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80063fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063fc:	f000 fd43 	bl	8006e86 <prvIsQueueFull>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d018      	beq.n	8006438 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006408:	3310      	adds	r3, #16
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	4611      	mov	r1, r2
 800640e:	4618      	mov	r0, r3
 8006410:	f001 f9f2 	bl	80077f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006414:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006416:	f000 fcce 	bl	8006db6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800641a:	f001 f817 	bl	800744c <xTaskResumeAll>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	f47f af7c 	bne.w	800631e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006426:	4b0c      	ldr	r3, [pc, #48]	; (8006458 <xQueueGenericSend+0x200>)
 8006428:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800642c:	601a      	str	r2, [r3, #0]
 800642e:	f3bf 8f4f 	dsb	sy
 8006432:	f3bf 8f6f 	isb	sy
 8006436:	e772      	b.n	800631e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006438:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800643a:	f000 fcbc 	bl	8006db6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800643e:	f001 f805 	bl	800744c <xTaskResumeAll>
 8006442:	e76c      	b.n	800631e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006444:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006446:	f000 fcb6 	bl	8006db6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800644a:	f000 ffff 	bl	800744c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800644e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006450:	4618      	mov	r0, r3
 8006452:	3738      	adds	r7, #56	; 0x38
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}
 8006458:	e000ed04 	.word	0xe000ed04

0800645c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b08e      	sub	sp, #56	; 0x38
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
 8006468:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800646e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006470:	2b00      	cmp	r3, #0
 8006472:	d10b      	bne.n	800648c <xQueueGenericSendFromISR+0x30>
 8006474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006478:	b672      	cpsid	i
 800647a:	f383 8811 	msr	BASEPRI, r3
 800647e:	f3bf 8f6f 	isb	sy
 8006482:	f3bf 8f4f 	dsb	sy
 8006486:	b662      	cpsie	i
 8006488:	627b      	str	r3, [r7, #36]	; 0x24
 800648a:	e7fe      	b.n	800648a <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d103      	bne.n	800649a <xQueueGenericSendFromISR+0x3e>
 8006492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006496:	2b00      	cmp	r3, #0
 8006498:	d101      	bne.n	800649e <xQueueGenericSendFromISR+0x42>
 800649a:	2301      	movs	r3, #1
 800649c:	e000      	b.n	80064a0 <xQueueGenericSendFromISR+0x44>
 800649e:	2300      	movs	r3, #0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d10b      	bne.n	80064bc <xQueueGenericSendFromISR+0x60>
 80064a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a8:	b672      	cpsid	i
 80064aa:	f383 8811 	msr	BASEPRI, r3
 80064ae:	f3bf 8f6f 	isb	sy
 80064b2:	f3bf 8f4f 	dsb	sy
 80064b6:	b662      	cpsie	i
 80064b8:	623b      	str	r3, [r7, #32]
 80064ba:	e7fe      	b.n	80064ba <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d103      	bne.n	80064ca <xQueueGenericSendFromISR+0x6e>
 80064c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d101      	bne.n	80064ce <xQueueGenericSendFromISR+0x72>
 80064ca:	2301      	movs	r3, #1
 80064cc:	e000      	b.n	80064d0 <xQueueGenericSendFromISR+0x74>
 80064ce:	2300      	movs	r3, #0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10b      	bne.n	80064ec <xQueueGenericSendFromISR+0x90>
 80064d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d8:	b672      	cpsid	i
 80064da:	f383 8811 	msr	BASEPRI, r3
 80064de:	f3bf 8f6f 	isb	sy
 80064e2:	f3bf 8f4f 	dsb	sy
 80064e6:	b662      	cpsie	i
 80064e8:	61fb      	str	r3, [r7, #28]
 80064ea:	e7fe      	b.n	80064ea <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064ec:	f002 fb54 	bl	8008b98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80064f0:	f3ef 8211 	mrs	r2, BASEPRI
 80064f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f8:	b672      	cpsid	i
 80064fa:	f383 8811 	msr	BASEPRI, r3
 80064fe:	f3bf 8f6f 	isb	sy
 8006502:	f3bf 8f4f 	dsb	sy
 8006506:	b662      	cpsie	i
 8006508:	61ba      	str	r2, [r7, #24]
 800650a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800650c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800650e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006512:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006518:	429a      	cmp	r2, r3
 800651a:	d302      	bcc.n	8006522 <xQueueGenericSendFromISR+0xc6>
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	2b02      	cmp	r3, #2
 8006520:	d12c      	bne.n	800657c <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006524:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006528:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800652c:	683a      	ldr	r2, [r7, #0]
 800652e:	68b9      	ldr	r1, [r7, #8]
 8006530:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006532:	f000 fbb0 	bl	8006c96 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006536:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800653a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800653e:	d112      	bne.n	8006566 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006544:	2b00      	cmp	r3, #0
 8006546:	d016      	beq.n	8006576 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654a:	3324      	adds	r3, #36	; 0x24
 800654c:	4618      	mov	r0, r3
 800654e:	f001 f9a5 	bl	800789c <xTaskRemoveFromEventList>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00e      	beq.n	8006576 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00b      	beq.n	8006576 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2201      	movs	r2, #1
 8006562:	601a      	str	r2, [r3, #0]
 8006564:	e007      	b.n	8006576 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006566:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800656a:	3301      	adds	r3, #1
 800656c:	b2db      	uxtb	r3, r3
 800656e:	b25a      	sxtb	r2, r3
 8006570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006572:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006576:	2301      	movs	r3, #1
 8006578:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800657a:	e001      	b.n	8006580 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800657c:	2300      	movs	r3, #0
 800657e:	637b      	str	r3, [r7, #52]	; 0x34
 8006580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006582:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800658a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800658c:	4618      	mov	r0, r3
 800658e:	3738      	adds	r7, #56	; 0x38
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b08e      	sub	sp, #56	; 0x38
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80065a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d10b      	bne.n	80065c0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80065a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ac:	b672      	cpsid	i
 80065ae:	f383 8811 	msr	BASEPRI, r3
 80065b2:	f3bf 8f6f 	isb	sy
 80065b6:	f3bf 8f4f 	dsb	sy
 80065ba:	b662      	cpsie	i
 80065bc:	623b      	str	r3, [r7, #32]
 80065be:	e7fe      	b.n	80065be <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80065c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00b      	beq.n	80065e0 <xQueueGiveFromISR+0x4c>
 80065c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065cc:	b672      	cpsid	i
 80065ce:	f383 8811 	msr	BASEPRI, r3
 80065d2:	f3bf 8f6f 	isb	sy
 80065d6:	f3bf 8f4f 	dsb	sy
 80065da:	b662      	cpsie	i
 80065dc:	61fb      	str	r3, [r7, #28]
 80065de:	e7fe      	b.n	80065de <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80065e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d103      	bne.n	80065f0 <xQueueGiveFromISR+0x5c>
 80065e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d101      	bne.n	80065f4 <xQueueGiveFromISR+0x60>
 80065f0:	2301      	movs	r3, #1
 80065f2:	e000      	b.n	80065f6 <xQueueGiveFromISR+0x62>
 80065f4:	2300      	movs	r3, #0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10b      	bne.n	8006612 <xQueueGiveFromISR+0x7e>
 80065fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fe:	b672      	cpsid	i
 8006600:	f383 8811 	msr	BASEPRI, r3
 8006604:	f3bf 8f6f 	isb	sy
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	b662      	cpsie	i
 800660e:	61bb      	str	r3, [r7, #24]
 8006610:	e7fe      	b.n	8006610 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006612:	f002 fac1 	bl	8008b98 <vPortValidateInterruptPriority>
	__asm volatile
 8006616:	f3ef 8211 	mrs	r2, BASEPRI
 800661a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661e:	b672      	cpsid	i
 8006620:	f383 8811 	msr	BASEPRI, r3
 8006624:	f3bf 8f6f 	isb	sy
 8006628:	f3bf 8f4f 	dsb	sy
 800662c:	b662      	cpsie	i
 800662e:	617a      	str	r2, [r7, #20]
 8006630:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006632:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006634:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800663c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006640:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006642:	429a      	cmp	r2, r3
 8006644:	d22b      	bcs.n	800669e <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006648:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800664c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006652:	1c5a      	adds	r2, r3, #1
 8006654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006656:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006658:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800665c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006660:	d112      	bne.n	8006688 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006666:	2b00      	cmp	r3, #0
 8006668:	d016      	beq.n	8006698 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800666a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666c:	3324      	adds	r3, #36	; 0x24
 800666e:	4618      	mov	r0, r3
 8006670:	f001 f914 	bl	800789c <xTaskRemoveFromEventList>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00e      	beq.n	8006698 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00b      	beq.n	8006698 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	2201      	movs	r2, #1
 8006684:	601a      	str	r2, [r3, #0]
 8006686:	e007      	b.n	8006698 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006688:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800668c:	3301      	adds	r3, #1
 800668e:	b2db      	uxtb	r3, r3
 8006690:	b25a      	sxtb	r2, r3
 8006692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006698:	2301      	movs	r3, #1
 800669a:	637b      	str	r3, [r7, #52]	; 0x34
 800669c:	e001      	b.n	80066a2 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800669e:	2300      	movs	r3, #0
 80066a0:	637b      	str	r3, [r7, #52]	; 0x34
 80066a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80066ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3738      	adds	r7, #56	; 0x38
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
	...

080066b8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b08c      	sub	sp, #48	; 0x30
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80066c4:	2300      	movs	r3, #0
 80066c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80066cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d10b      	bne.n	80066ea <xQueueReceive+0x32>
	__asm volatile
 80066d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d6:	b672      	cpsid	i
 80066d8:	f383 8811 	msr	BASEPRI, r3
 80066dc:	f3bf 8f6f 	isb	sy
 80066e0:	f3bf 8f4f 	dsb	sy
 80066e4:	b662      	cpsie	i
 80066e6:	623b      	str	r3, [r7, #32]
 80066e8:	e7fe      	b.n	80066e8 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d103      	bne.n	80066f8 <xQueueReceive+0x40>
 80066f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d101      	bne.n	80066fc <xQueueReceive+0x44>
 80066f8:	2301      	movs	r3, #1
 80066fa:	e000      	b.n	80066fe <xQueueReceive+0x46>
 80066fc:	2300      	movs	r3, #0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d10b      	bne.n	800671a <xQueueReceive+0x62>
 8006702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006706:	b672      	cpsid	i
 8006708:	f383 8811 	msr	BASEPRI, r3
 800670c:	f3bf 8f6f 	isb	sy
 8006710:	f3bf 8f4f 	dsb	sy
 8006714:	b662      	cpsie	i
 8006716:	61fb      	str	r3, [r7, #28]
 8006718:	e7fe      	b.n	8006718 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800671a:	f001 fa7f 	bl	8007c1c <xTaskGetSchedulerState>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d102      	bne.n	800672a <xQueueReceive+0x72>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d101      	bne.n	800672e <xQueueReceive+0x76>
 800672a:	2301      	movs	r3, #1
 800672c:	e000      	b.n	8006730 <xQueueReceive+0x78>
 800672e:	2300      	movs	r3, #0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10b      	bne.n	800674c <xQueueReceive+0x94>
 8006734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006738:	b672      	cpsid	i
 800673a:	f383 8811 	msr	BASEPRI, r3
 800673e:	f3bf 8f6f 	isb	sy
 8006742:	f3bf 8f4f 	dsb	sy
 8006746:	b662      	cpsie	i
 8006748:	61bb      	str	r3, [r7, #24]
 800674a:	e7fe      	b.n	800674a <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800674c:	f002 f944 	bl	80089d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006754:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006758:	2b00      	cmp	r3, #0
 800675a:	d01f      	beq.n	800679c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800675c:	68b9      	ldr	r1, [r7, #8]
 800675e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006760:	f000 fb03 	bl	8006d6a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006766:	1e5a      	subs	r2, r3, #1
 8006768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800676c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00f      	beq.n	8006794 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006776:	3310      	adds	r3, #16
 8006778:	4618      	mov	r0, r3
 800677a:	f001 f88f 	bl	800789c <xTaskRemoveFromEventList>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d007      	beq.n	8006794 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006784:	4b3c      	ldr	r3, [pc, #240]	; (8006878 <xQueueReceive+0x1c0>)
 8006786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800678a:	601a      	str	r2, [r3, #0]
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006794:	f002 f952 	bl	8008a3c <vPortExitCritical>
				return pdPASS;
 8006798:	2301      	movs	r3, #1
 800679a:	e069      	b.n	8006870 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d103      	bne.n	80067aa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80067a2:	f002 f94b 	bl	8008a3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80067a6:	2300      	movs	r3, #0
 80067a8:	e062      	b.n	8006870 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80067aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d106      	bne.n	80067be <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80067b0:	f107 0310 	add.w	r3, r7, #16
 80067b4:	4618      	mov	r0, r3
 80067b6:	f001 f8d5 	bl	8007964 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067ba:	2301      	movs	r3, #1
 80067bc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067be:	f002 f93d 	bl	8008a3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067c2:	f000 fe35 	bl	8007430 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067c6:	f002 f907 	bl	80089d8 <vPortEnterCritical>
 80067ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067d0:	b25b      	sxtb	r3, r3
 80067d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d6:	d103      	bne.n	80067e0 <xQueueReceive+0x128>
 80067d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067e6:	b25b      	sxtb	r3, r3
 80067e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ec:	d103      	bne.n	80067f6 <xQueueReceive+0x13e>
 80067ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067f6:	f002 f921 	bl	8008a3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067fa:	1d3a      	adds	r2, r7, #4
 80067fc:	f107 0310 	add.w	r3, r7, #16
 8006800:	4611      	mov	r1, r2
 8006802:	4618      	mov	r0, r3
 8006804:	f001 f8c4 	bl	8007990 <xTaskCheckForTimeOut>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d123      	bne.n	8006856 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800680e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006810:	f000 fb23 	bl	8006e5a <prvIsQueueEmpty>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d017      	beq.n	800684a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800681a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681c:	3324      	adds	r3, #36	; 0x24
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	4611      	mov	r1, r2
 8006822:	4618      	mov	r0, r3
 8006824:	f000 ffe8 	bl	80077f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006828:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800682a:	f000 fac4 	bl	8006db6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800682e:	f000 fe0d 	bl	800744c <xTaskResumeAll>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d189      	bne.n	800674c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006838:	4b0f      	ldr	r3, [pc, #60]	; (8006878 <xQueueReceive+0x1c0>)
 800683a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800683e:	601a      	str	r2, [r3, #0]
 8006840:	f3bf 8f4f 	dsb	sy
 8006844:	f3bf 8f6f 	isb	sy
 8006848:	e780      	b.n	800674c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800684a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800684c:	f000 fab3 	bl	8006db6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006850:	f000 fdfc 	bl	800744c <xTaskResumeAll>
 8006854:	e77a      	b.n	800674c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006856:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006858:	f000 faad 	bl	8006db6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800685c:	f000 fdf6 	bl	800744c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006860:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006862:	f000 fafa 	bl	8006e5a <prvIsQueueEmpty>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	f43f af6f 	beq.w	800674c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800686e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006870:	4618      	mov	r0, r3
 8006872:	3730      	adds	r7, #48	; 0x30
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}
 8006878:	e000ed04 	.word	0xe000ed04

0800687c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b08e      	sub	sp, #56	; 0x38
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006886:	2300      	movs	r3, #0
 8006888:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800688e:	2300      	movs	r3, #0
 8006890:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006894:	2b00      	cmp	r3, #0
 8006896:	d10b      	bne.n	80068b0 <xQueueSemaphoreTake+0x34>
 8006898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689c:	b672      	cpsid	i
 800689e:	f383 8811 	msr	BASEPRI, r3
 80068a2:	f3bf 8f6f 	isb	sy
 80068a6:	f3bf 8f4f 	dsb	sy
 80068aa:	b662      	cpsie	i
 80068ac:	623b      	str	r3, [r7, #32]
 80068ae:	e7fe      	b.n	80068ae <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80068b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00b      	beq.n	80068d0 <xQueueSemaphoreTake+0x54>
 80068b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068bc:	b672      	cpsid	i
 80068be:	f383 8811 	msr	BASEPRI, r3
 80068c2:	f3bf 8f6f 	isb	sy
 80068c6:	f3bf 8f4f 	dsb	sy
 80068ca:	b662      	cpsie	i
 80068cc:	61fb      	str	r3, [r7, #28]
 80068ce:	e7fe      	b.n	80068ce <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068d0:	f001 f9a4 	bl	8007c1c <xTaskGetSchedulerState>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d102      	bne.n	80068e0 <xQueueSemaphoreTake+0x64>
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d101      	bne.n	80068e4 <xQueueSemaphoreTake+0x68>
 80068e0:	2301      	movs	r3, #1
 80068e2:	e000      	b.n	80068e6 <xQueueSemaphoreTake+0x6a>
 80068e4:	2300      	movs	r3, #0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d10b      	bne.n	8006902 <xQueueSemaphoreTake+0x86>
 80068ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ee:	b672      	cpsid	i
 80068f0:	f383 8811 	msr	BASEPRI, r3
 80068f4:	f3bf 8f6f 	isb	sy
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	b662      	cpsie	i
 80068fe:	61bb      	str	r3, [r7, #24]
 8006900:	e7fe      	b.n	8006900 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006902:	f002 f869 	bl	80089d8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800690c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690e:	2b00      	cmp	r3, #0
 8006910:	d024      	beq.n	800695c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006914:	1e5a      	subs	r2, r3, #1
 8006916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006918:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800691a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d104      	bne.n	800692c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006922:	f001 fb3d 	bl	8007fa0 <pvTaskIncrementMutexHeldCount>
 8006926:	4602      	mov	r2, r0
 8006928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800692c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d00f      	beq.n	8006954 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006936:	3310      	adds	r3, #16
 8006938:	4618      	mov	r0, r3
 800693a:	f000 ffaf 	bl	800789c <xTaskRemoveFromEventList>
 800693e:	4603      	mov	r3, r0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d007      	beq.n	8006954 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006944:	4b54      	ldr	r3, [pc, #336]	; (8006a98 <xQueueSemaphoreTake+0x21c>)
 8006946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800694a:	601a      	str	r2, [r3, #0]
 800694c:	f3bf 8f4f 	dsb	sy
 8006950:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006954:	f002 f872 	bl	8008a3c <vPortExitCritical>
				return pdPASS;
 8006958:	2301      	movs	r3, #1
 800695a:	e098      	b.n	8006a8e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d112      	bne.n	8006988 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00b      	beq.n	8006980 <xQueueSemaphoreTake+0x104>
 8006968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696c:	b672      	cpsid	i
 800696e:	f383 8811 	msr	BASEPRI, r3
 8006972:	f3bf 8f6f 	isb	sy
 8006976:	f3bf 8f4f 	dsb	sy
 800697a:	b662      	cpsie	i
 800697c:	617b      	str	r3, [r7, #20]
 800697e:	e7fe      	b.n	800697e <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006980:	f002 f85c 	bl	8008a3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006984:	2300      	movs	r3, #0
 8006986:	e082      	b.n	8006a8e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800698a:	2b00      	cmp	r3, #0
 800698c:	d106      	bne.n	800699c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800698e:	f107 030c 	add.w	r3, r7, #12
 8006992:	4618      	mov	r0, r3
 8006994:	f000 ffe6 	bl	8007964 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006998:	2301      	movs	r3, #1
 800699a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800699c:	f002 f84e 	bl	8008a3c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80069a0:	f000 fd46 	bl	8007430 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80069a4:	f002 f818 	bl	80089d8 <vPortEnterCritical>
 80069a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069ae:	b25b      	sxtb	r3, r3
 80069b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b4:	d103      	bne.n	80069be <xQueueSemaphoreTake+0x142>
 80069b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069c4:	b25b      	sxtb	r3, r3
 80069c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ca:	d103      	bne.n	80069d4 <xQueueSemaphoreTake+0x158>
 80069cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069d4:	f002 f832 	bl	8008a3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80069d8:	463a      	mov	r2, r7
 80069da:	f107 030c 	add.w	r3, r7, #12
 80069de:	4611      	mov	r1, r2
 80069e0:	4618      	mov	r0, r3
 80069e2:	f000 ffd5 	bl	8007990 <xTaskCheckForTimeOut>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d132      	bne.n	8006a52 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069ee:	f000 fa34 	bl	8006e5a <prvIsQueueEmpty>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d026      	beq.n	8006a46 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80069f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d109      	bne.n	8006a14 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006a00:	f001 ffea 	bl	80089d8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f001 f925 	bl	8007c58 <xTaskPriorityInherit>
 8006a0e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006a10:	f002 f814 	bl	8008a3c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a16:	3324      	adds	r3, #36	; 0x24
 8006a18:	683a      	ldr	r2, [r7, #0]
 8006a1a:	4611      	mov	r1, r2
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f000 feeb 	bl	80077f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006a22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a24:	f000 f9c7 	bl	8006db6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006a28:	f000 fd10 	bl	800744c <xTaskResumeAll>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	f47f af67 	bne.w	8006902 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006a34:	4b18      	ldr	r3, [pc, #96]	; (8006a98 <xQueueSemaphoreTake+0x21c>)
 8006a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a3a:	601a      	str	r2, [r3, #0]
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	f3bf 8f6f 	isb	sy
 8006a44:	e75d      	b.n	8006902 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006a46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a48:	f000 f9b5 	bl	8006db6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a4c:	f000 fcfe 	bl	800744c <xTaskResumeAll>
 8006a50:	e757      	b.n	8006902 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006a52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a54:	f000 f9af 	bl	8006db6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a58:	f000 fcf8 	bl	800744c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a5e:	f000 f9fc 	bl	8006e5a <prvIsQueueEmpty>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f43f af4c 	beq.w	8006902 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00d      	beq.n	8006a8c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006a70:	f001 ffb2 	bl	80089d8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006a74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a76:	f000 f8f6 	bl	8006c66 <prvGetDisinheritPriorityAfterTimeout>
 8006a7a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a82:	4618      	mov	r0, r3
 8006a84:	f001 f9f0 	bl	8007e68 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006a88:	f001 ffd8 	bl	8008a3c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006a8c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3738      	adds	r7, #56	; 0x38
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	e000ed04 	.word	0xe000ed04

08006a9c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b08e      	sub	sp, #56	; 0x38
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d10b      	bne.n	8006aca <xQueueReceiveFromISR+0x2e>
 8006ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab6:	b672      	cpsid	i
 8006ab8:	f383 8811 	msr	BASEPRI, r3
 8006abc:	f3bf 8f6f 	isb	sy
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	b662      	cpsie	i
 8006ac6:	623b      	str	r3, [r7, #32]
 8006ac8:	e7fe      	b.n	8006ac8 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d103      	bne.n	8006ad8 <xQueueReceiveFromISR+0x3c>
 8006ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d101      	bne.n	8006adc <xQueueReceiveFromISR+0x40>
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e000      	b.n	8006ade <xQueueReceiveFromISR+0x42>
 8006adc:	2300      	movs	r3, #0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10b      	bne.n	8006afa <xQueueReceiveFromISR+0x5e>
 8006ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae6:	b672      	cpsid	i
 8006ae8:	f383 8811 	msr	BASEPRI, r3
 8006aec:	f3bf 8f6f 	isb	sy
 8006af0:	f3bf 8f4f 	dsb	sy
 8006af4:	b662      	cpsie	i
 8006af6:	61fb      	str	r3, [r7, #28]
 8006af8:	e7fe      	b.n	8006af8 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006afa:	f002 f84d 	bl	8008b98 <vPortValidateInterruptPriority>
	__asm volatile
 8006afe:	f3ef 8211 	mrs	r2, BASEPRI
 8006b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b06:	b672      	cpsid	i
 8006b08:	f383 8811 	msr	BASEPRI, r3
 8006b0c:	f3bf 8f6f 	isb	sy
 8006b10:	f3bf 8f4f 	dsb	sy
 8006b14:	b662      	cpsie	i
 8006b16:	61ba      	str	r2, [r7, #24]
 8006b18:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006b1a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b22:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d02f      	beq.n	8006b8a <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006b34:	68b9      	ldr	r1, [r7, #8]
 8006b36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b38:	f000 f917 	bl	8006d6a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3e:	1e5a      	subs	r2, r3, #1
 8006b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b42:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006b44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b4c:	d112      	bne.n	8006b74 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d016      	beq.n	8006b84 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b58:	3310      	adds	r3, #16
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f000 fe9e 	bl	800789c <xTaskRemoveFromEventList>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00e      	beq.n	8006b84 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00b      	beq.n	8006b84 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	601a      	str	r2, [r3, #0]
 8006b72:	e007      	b.n	8006b84 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006b74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b78:	3301      	adds	r3, #1
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	b25a      	sxtb	r2, r3
 8006b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006b84:	2301      	movs	r3, #1
 8006b86:	637b      	str	r3, [r7, #52]	; 0x34
 8006b88:	e001      	b.n	8006b8e <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	637b      	str	r3, [r7, #52]	; 0x34
 8006b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b90:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3738      	adds	r7, #56	; 0x38
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b084      	sub	sp, #16
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d10b      	bne.n	8006bc8 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8006bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb4:	b672      	cpsid	i
 8006bb6:	f383 8811 	msr	BASEPRI, r3
 8006bba:	f3bf 8f6f 	isb	sy
 8006bbe:	f3bf 8f4f 	dsb	sy
 8006bc2:	b662      	cpsie	i
 8006bc4:	60bb      	str	r3, [r7, #8]
 8006bc6:	e7fe      	b.n	8006bc6 <uxQueueMessagesWaiting+0x24>

	taskENTER_CRITICAL();
 8006bc8:	f001 ff06 	bl	80089d8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006bd2:	f001 ff33 	bl	8008a3c <vPortExitCritical>

	return uxReturn;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006be0:	b480      	push	{r7}
 8006be2:	b087      	sub	sp, #28
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10b      	bne.n	8006c0a <uxQueueMessagesWaitingFromISR+0x2a>
 8006bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf6:	b672      	cpsid	i
 8006bf8:	f383 8811 	msr	BASEPRI, r3
 8006bfc:	f3bf 8f6f 	isb	sy
 8006c00:	f3bf 8f4f 	dsb	sy
 8006c04:	b662      	cpsie	i
 8006c06:	60fb      	str	r3, [r7, #12]
 8006c08:	e7fe      	b.n	8006c08 <uxQueueMessagesWaitingFromISR+0x28>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0e:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8006c10:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006c12:	4618      	mov	r0, r3
 8006c14:	371c      	adds	r7, #28
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr

08006c1e <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b084      	sub	sp, #16
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d10b      	bne.n	8006c48 <vQueueDelete+0x2a>
 8006c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c34:	b672      	cpsid	i
 8006c36:	f383 8811 	msr	BASEPRI, r3
 8006c3a:	f3bf 8f6f 	isb	sy
 8006c3e:	f3bf 8f4f 	dsb	sy
 8006c42:	b662      	cpsie	i
 8006c44:	60bb      	str	r3, [r7, #8]
 8006c46:	e7fe      	b.n	8006c46 <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	f000 f95d 	bl	8006f08 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d102      	bne.n	8006c5e <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8006c58:	68f8      	ldr	r0, [r7, #12]
 8006c5a:	f002 f8a7 	bl	8008dac <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006c5e:	bf00      	nop
 8006c60:	3710      	adds	r7, #16
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006c66:	b480      	push	{r7}
 8006c68:	b085      	sub	sp, #20
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d006      	beq.n	8006c84 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f1c3 0307 	rsb	r3, r3, #7
 8006c80:	60fb      	str	r3, [r7, #12]
 8006c82:	e001      	b.n	8006c88 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006c84:	2300      	movs	r3, #0
 8006c86:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006c88:	68fb      	ldr	r3, [r7, #12]
	}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3714      	adds	r7, #20
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr

08006c96 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b086      	sub	sp, #24
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	60f8      	str	r0, [r7, #12]
 8006c9e:	60b9      	str	r1, [r7, #8]
 8006ca0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006caa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d10d      	bne.n	8006cd0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d14d      	bne.n	8006d58 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f001 f849 	bl	8007d58 <xTaskPriorityDisinherit>
 8006cc6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	609a      	str	r2, [r3, #8]
 8006cce:	e043      	b.n	8006d58 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d119      	bne.n	8006d0a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6858      	ldr	r0, [r3, #4]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cde:	461a      	mov	r2, r3
 8006ce0:	68b9      	ldr	r1, [r7, #8]
 8006ce2:	f010 fa06 	bl	80170f2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	685a      	ldr	r2, [r3, #4]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cee:	441a      	add	r2, r3
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	685a      	ldr	r2, [r3, #4]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d32b      	bcc.n	8006d58 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	605a      	str	r2, [r3, #4]
 8006d08:	e026      	b.n	8006d58 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	68d8      	ldr	r0, [r3, #12]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d12:	461a      	mov	r2, r3
 8006d14:	68b9      	ldr	r1, [r7, #8]
 8006d16:	f010 f9ec 	bl	80170f2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	68da      	ldr	r2, [r3, #12]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d22:	425b      	negs	r3, r3
 8006d24:	441a      	add	r2, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	68da      	ldr	r2, [r3, #12]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d207      	bcs.n	8006d46 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	689a      	ldr	r2, [r3, #8]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3e:	425b      	negs	r3, r3
 8006d40:	441a      	add	r2, r3
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	d105      	bne.n	8006d58 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d002      	beq.n	8006d58 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	3b01      	subs	r3, #1
 8006d56:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	1c5a      	adds	r2, r3, #1
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006d60:	697b      	ldr	r3, [r7, #20]
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3718      	adds	r7, #24
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b082      	sub	sp, #8
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
 8006d72:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d018      	beq.n	8006dae <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	68da      	ldr	r2, [r3, #12]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d84:	441a      	add	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	68da      	ldr	r2, [r3, #12]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d303      	bcc.n	8006d9e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	68d9      	ldr	r1, [r3, #12]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da6:	461a      	mov	r2, r3
 8006da8:	6838      	ldr	r0, [r7, #0]
 8006daa:	f010 f9a2 	bl	80170f2 <memcpy>
	}
}
 8006dae:	bf00      	nop
 8006db0:	3708      	adds	r7, #8
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b084      	sub	sp, #16
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006dbe:	f001 fe0b 	bl	80089d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006dc8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006dca:	e011      	b.n	8006df0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d012      	beq.n	8006dfa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	3324      	adds	r3, #36	; 0x24
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f000 fd5f 	bl	800789c <xTaskRemoveFromEventList>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d001      	beq.n	8006de8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006de4:	f000 fe38 	bl	8007a58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006de8:	7bfb      	ldrb	r3, [r7, #15]
 8006dea:	3b01      	subs	r3, #1
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006df0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	dce9      	bgt.n	8006dcc <prvUnlockQueue+0x16>
 8006df8:	e000      	b.n	8006dfc <prvUnlockQueue+0x46>
					break;
 8006dfa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	22ff      	movs	r2, #255	; 0xff
 8006e00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006e04:	f001 fe1a 	bl	8008a3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006e08:	f001 fde6 	bl	80089d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e12:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e14:	e011      	b.n	8006e3a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d012      	beq.n	8006e44 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	3310      	adds	r3, #16
 8006e22:	4618      	mov	r0, r3
 8006e24:	f000 fd3a 	bl	800789c <xTaskRemoveFromEventList>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d001      	beq.n	8006e32 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006e2e:	f000 fe13 	bl	8007a58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006e32:	7bbb      	ldrb	r3, [r7, #14]
 8006e34:	3b01      	subs	r3, #1
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	dce9      	bgt.n	8006e16 <prvUnlockQueue+0x60>
 8006e42:	e000      	b.n	8006e46 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006e44:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	22ff      	movs	r2, #255	; 0xff
 8006e4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006e4e:	f001 fdf5 	bl	8008a3c <vPortExitCritical>
}
 8006e52:	bf00      	nop
 8006e54:	3710      	adds	r7, #16
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}

08006e5a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b084      	sub	sp, #16
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e62:	f001 fdb9 	bl	80089d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d102      	bne.n	8006e74 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	60fb      	str	r3, [r7, #12]
 8006e72:	e001      	b.n	8006e78 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006e74:	2300      	movs	r3, #0
 8006e76:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e78:	f001 fde0 	bl	8008a3c <vPortExitCritical>

	return xReturn;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b084      	sub	sp, #16
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e8e:	f001 fda3 	bl	80089d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d102      	bne.n	8006ea4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	60fb      	str	r3, [r7, #12]
 8006ea2:	e001      	b.n	8006ea8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ea8:	f001 fdc8 	bl	8008a3c <vPortExitCritical>

	return xReturn;
 8006eac:	68fb      	ldr	r3, [r7, #12]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
	...

08006eb8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006eb8:	b480      	push	{r7}
 8006eba:	b085      	sub	sp, #20
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	60fb      	str	r3, [r7, #12]
 8006ec6:	e014      	b.n	8006ef2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006ec8:	4a0e      	ldr	r2, [pc, #56]	; (8006f04 <vQueueAddToRegistry+0x4c>)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d10b      	bne.n	8006eec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006ed4:	490b      	ldr	r1, [pc, #44]	; (8006f04 <vQueueAddToRegistry+0x4c>)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	683a      	ldr	r2, [r7, #0]
 8006eda:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006ede:	4a09      	ldr	r2, [pc, #36]	; (8006f04 <vQueueAddToRegistry+0x4c>)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	00db      	lsls	r3, r3, #3
 8006ee4:	4413      	add	r3, r2
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006eea:	e005      	b.n	8006ef8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	3301      	adds	r3, #1
 8006ef0:	60fb      	str	r3, [r7, #12]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2b07      	cmp	r3, #7
 8006ef6:	d9e7      	bls.n	8006ec8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006ef8:	bf00      	nop
 8006efa:	3714      	adds	r7, #20
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr
 8006f04:	200079ac 	.word	0x200079ac

08006f08 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006f08:	b480      	push	{r7}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f10:	2300      	movs	r3, #0
 8006f12:	60fb      	str	r3, [r7, #12]
 8006f14:	e016      	b.n	8006f44 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006f16:	4a10      	ldr	r2, [pc, #64]	; (8006f58 <vQueueUnregisterQueue+0x50>)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	00db      	lsls	r3, r3, #3
 8006f1c:	4413      	add	r3, r2
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d10b      	bne.n	8006f3e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006f26:	4a0c      	ldr	r2, [pc, #48]	; (8006f58 <vQueueUnregisterQueue+0x50>)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2100      	movs	r1, #0
 8006f2c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006f30:	4a09      	ldr	r2, [pc, #36]	; (8006f58 <vQueueUnregisterQueue+0x50>)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	00db      	lsls	r3, r3, #3
 8006f36:	4413      	add	r3, r2
 8006f38:	2200      	movs	r2, #0
 8006f3a:	605a      	str	r2, [r3, #4]
				break;
 8006f3c:	e005      	b.n	8006f4a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	3301      	adds	r3, #1
 8006f42:	60fb      	str	r3, [r7, #12]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2b07      	cmp	r3, #7
 8006f48:	d9e5      	bls.n	8006f16 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006f4a:	bf00      	nop
 8006f4c:	3714      	adds	r7, #20
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	200079ac 	.word	0x200079ac

08006f5c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b086      	sub	sp, #24
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006f6c:	f001 fd34 	bl	80089d8 <vPortEnterCritical>
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f76:	b25b      	sxtb	r3, r3
 8006f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f7c:	d103      	bne.n	8006f86 <vQueueWaitForMessageRestricted+0x2a>
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f8c:	b25b      	sxtb	r3, r3
 8006f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f92:	d103      	bne.n	8006f9c <vQueueWaitForMessageRestricted+0x40>
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f9c:	f001 fd4e 	bl	8008a3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d106      	bne.n	8006fb6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	3324      	adds	r3, #36	; 0x24
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	68b9      	ldr	r1, [r7, #8]
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f000 fc47 	bl	8007844 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006fb6:	6978      	ldr	r0, [r7, #20]
 8006fb8:	f7ff fefd 	bl	8006db6 <prvUnlockQueue>
	}
 8006fbc:	bf00      	nop
 8006fbe:	3718      	adds	r7, #24
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b08e      	sub	sp, #56	; 0x38
 8006fc8:	af04      	add	r7, sp, #16
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	607a      	str	r2, [r7, #4]
 8006fd0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d10b      	bne.n	8006ff0 <xTaskCreateStatic+0x2c>
 8006fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fdc:	b672      	cpsid	i
 8006fde:	f383 8811 	msr	BASEPRI, r3
 8006fe2:	f3bf 8f6f 	isb	sy
 8006fe6:	f3bf 8f4f 	dsb	sy
 8006fea:	b662      	cpsie	i
 8006fec:	623b      	str	r3, [r7, #32]
 8006fee:	e7fe      	b.n	8006fee <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8006ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10b      	bne.n	800700e <xTaskCreateStatic+0x4a>
 8006ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffa:	b672      	cpsid	i
 8006ffc:	f383 8811 	msr	BASEPRI, r3
 8007000:	f3bf 8f6f 	isb	sy
 8007004:	f3bf 8f4f 	dsb	sy
 8007008:	b662      	cpsie	i
 800700a:	61fb      	str	r3, [r7, #28]
 800700c:	e7fe      	b.n	800700c <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800700e:	2364      	movs	r3, #100	; 0x64
 8007010:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	2b64      	cmp	r3, #100	; 0x64
 8007016:	d00b      	beq.n	8007030 <xTaskCreateStatic+0x6c>
 8007018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701c:	b672      	cpsid	i
 800701e:	f383 8811 	msr	BASEPRI, r3
 8007022:	f3bf 8f6f 	isb	sy
 8007026:	f3bf 8f4f 	dsb	sy
 800702a:	b662      	cpsie	i
 800702c:	61bb      	str	r3, [r7, #24]
 800702e:	e7fe      	b.n	800702e <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007030:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007034:	2b00      	cmp	r3, #0
 8007036:	d01e      	beq.n	8007076 <xTaskCreateStatic+0xb2>
 8007038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800703a:	2b00      	cmp	r3, #0
 800703c:	d01b      	beq.n	8007076 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800703e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007040:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007044:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007046:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704a:	2202      	movs	r2, #2
 800704c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007050:	2300      	movs	r3, #0
 8007052:	9303      	str	r3, [sp, #12]
 8007054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007056:	9302      	str	r3, [sp, #8]
 8007058:	f107 0314 	add.w	r3, r7, #20
 800705c:	9301      	str	r3, [sp, #4]
 800705e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007060:	9300      	str	r3, [sp, #0]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	68b9      	ldr	r1, [r7, #8]
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	f000 f850 	bl	800710e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800706e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007070:	f000 f8d6 	bl	8007220 <prvAddNewTaskToReadyList>
 8007074:	e001      	b.n	800707a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007076:	2300      	movs	r3, #0
 8007078:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800707a:	697b      	ldr	r3, [r7, #20]
	}
 800707c:	4618      	mov	r0, r3
 800707e:	3728      	adds	r7, #40	; 0x28
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007084:	b580      	push	{r7, lr}
 8007086:	b08c      	sub	sp, #48	; 0x30
 8007088:	af04      	add	r7, sp, #16
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	603b      	str	r3, [r7, #0]
 8007090:	4613      	mov	r3, r2
 8007092:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007094:	88fb      	ldrh	r3, [r7, #6]
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	4618      	mov	r0, r3
 800709a:	f001 fdbf 	bl	8008c1c <pvPortMalloc>
 800709e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00e      	beq.n	80070c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80070a6:	2064      	movs	r0, #100	; 0x64
 80070a8:	f001 fdb8 	bl	8008c1c <pvPortMalloc>
 80070ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d003      	beq.n	80070bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	697a      	ldr	r2, [r7, #20]
 80070b8:	631a      	str	r2, [r3, #48]	; 0x30
 80070ba:	e005      	b.n	80070c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80070bc:	6978      	ldr	r0, [r7, #20]
 80070be:	f001 fe75 	bl	8008dac <vPortFree>
 80070c2:	e001      	b.n	80070c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80070c4:	2300      	movs	r3, #0
 80070c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d017      	beq.n	80070fe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80070d6:	88fa      	ldrh	r2, [r7, #6]
 80070d8:	2300      	movs	r3, #0
 80070da:	9303      	str	r3, [sp, #12]
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	9302      	str	r3, [sp, #8]
 80070e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e2:	9301      	str	r3, [sp, #4]
 80070e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e6:	9300      	str	r3, [sp, #0]
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	68b9      	ldr	r1, [r7, #8]
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 f80e 	bl	800710e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80070f2:	69f8      	ldr	r0, [r7, #28]
 80070f4:	f000 f894 	bl	8007220 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80070f8:	2301      	movs	r3, #1
 80070fa:	61bb      	str	r3, [r7, #24]
 80070fc:	e002      	b.n	8007104 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80070fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007102:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007104:	69bb      	ldr	r3, [r7, #24]
	}
 8007106:	4618      	mov	r0, r3
 8007108:	3720      	adds	r7, #32
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800710e:	b580      	push	{r7, lr}
 8007110:	b088      	sub	sp, #32
 8007112:	af00      	add	r7, sp, #0
 8007114:	60f8      	str	r0, [r7, #12]
 8007116:	60b9      	str	r1, [r7, #8]
 8007118:	607a      	str	r2, [r7, #4]
 800711a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800711c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007120:	6879      	ldr	r1, [r7, #4]
 8007122:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007126:	440b      	add	r3, r1
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	4413      	add	r3, r2
 800712c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	f023 0307 	bic.w	r3, r3, #7
 8007134:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	f003 0307 	and.w	r3, r3, #7
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00b      	beq.n	8007158 <prvInitialiseNewTask+0x4a>
 8007140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007144:	b672      	cpsid	i
 8007146:	f383 8811 	msr	BASEPRI, r3
 800714a:	f3bf 8f6f 	isb	sy
 800714e:	f3bf 8f4f 	dsb	sy
 8007152:	b662      	cpsie	i
 8007154:	617b      	str	r3, [r7, #20]
 8007156:	e7fe      	b.n	8007156 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d01f      	beq.n	800719e <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800715e:	2300      	movs	r3, #0
 8007160:	61fb      	str	r3, [r7, #28]
 8007162:	e012      	b.n	800718a <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007164:	68ba      	ldr	r2, [r7, #8]
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	4413      	add	r3, r2
 800716a:	7819      	ldrb	r1, [r3, #0]
 800716c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	4413      	add	r3, r2
 8007172:	3334      	adds	r3, #52	; 0x34
 8007174:	460a      	mov	r2, r1
 8007176:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007178:	68ba      	ldr	r2, [r7, #8]
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	4413      	add	r3, r2
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d006      	beq.n	8007192 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	3301      	adds	r3, #1
 8007188:	61fb      	str	r3, [r7, #28]
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	2b1e      	cmp	r3, #30
 800718e:	d9e9      	bls.n	8007164 <prvInitialiseNewTask+0x56>
 8007190:	e000      	b.n	8007194 <prvInitialiseNewTask+0x86>
			{
				break;
 8007192:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007196:	2200      	movs	r2, #0
 8007198:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 800719c:	e003      	b.n	80071a6 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800719e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80071a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a8:	2b06      	cmp	r3, #6
 80071aa:	d901      	bls.n	80071b0 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80071ac:	2306      	movs	r3, #6
 80071ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80071b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80071b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071ba:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 80071bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071be:	2200      	movs	r2, #0
 80071c0:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80071c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c4:	3304      	adds	r3, #4
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7fe fe1d 	bl	8005e06 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80071cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ce:	3318      	adds	r3, #24
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7fe fe18 	bl	8005e06 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80071d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071de:	f1c3 0207 	rsb	r2, r3, #7
 80071e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80071e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80071ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ee:	2200      	movs	r2, #0
 80071f0:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80071f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80071fa:	683a      	ldr	r2, [r7, #0]
 80071fc:	68f9      	ldr	r1, [r7, #12]
 80071fe:	69b8      	ldr	r0, [r7, #24]
 8007200:	f001 fae0 	bl	80087c4 <pxPortInitialiseStack>
 8007204:	4602      	mov	r2, r0
 8007206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007208:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800720a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800720c:	2b00      	cmp	r3, #0
 800720e:	d002      	beq.n	8007216 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007212:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007214:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007216:	bf00      	nop
 8007218:	3720      	adds	r7, #32
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
	...

08007220 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007228:	f001 fbd6 	bl	80089d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800722c:	4b2a      	ldr	r3, [pc, #168]	; (80072d8 <prvAddNewTaskToReadyList+0xb8>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	3301      	adds	r3, #1
 8007232:	4a29      	ldr	r2, [pc, #164]	; (80072d8 <prvAddNewTaskToReadyList+0xb8>)
 8007234:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007236:	4b29      	ldr	r3, [pc, #164]	; (80072dc <prvAddNewTaskToReadyList+0xbc>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d109      	bne.n	8007252 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800723e:	4a27      	ldr	r2, [pc, #156]	; (80072dc <prvAddNewTaskToReadyList+0xbc>)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007244:	4b24      	ldr	r3, [pc, #144]	; (80072d8 <prvAddNewTaskToReadyList+0xb8>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2b01      	cmp	r3, #1
 800724a:	d110      	bne.n	800726e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800724c:	f000 fc2a 	bl	8007aa4 <prvInitialiseTaskLists>
 8007250:	e00d      	b.n	800726e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007252:	4b23      	ldr	r3, [pc, #140]	; (80072e0 <prvAddNewTaskToReadyList+0xc0>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d109      	bne.n	800726e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800725a:	4b20      	ldr	r3, [pc, #128]	; (80072dc <prvAddNewTaskToReadyList+0xbc>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007264:	429a      	cmp	r2, r3
 8007266:	d802      	bhi.n	800726e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007268:	4a1c      	ldr	r2, [pc, #112]	; (80072dc <prvAddNewTaskToReadyList+0xbc>)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800726e:	4b1d      	ldr	r3, [pc, #116]	; (80072e4 <prvAddNewTaskToReadyList+0xc4>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	3301      	adds	r3, #1
 8007274:	4a1b      	ldr	r2, [pc, #108]	; (80072e4 <prvAddNewTaskToReadyList+0xc4>)
 8007276:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727c:	2201      	movs	r2, #1
 800727e:	409a      	lsls	r2, r3
 8007280:	4b19      	ldr	r3, [pc, #100]	; (80072e8 <prvAddNewTaskToReadyList+0xc8>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4313      	orrs	r3, r2
 8007286:	4a18      	ldr	r2, [pc, #96]	; (80072e8 <prvAddNewTaskToReadyList+0xc8>)
 8007288:	6013      	str	r3, [r2, #0]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800728e:	4613      	mov	r3, r2
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	4413      	add	r3, r2
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	4a15      	ldr	r2, [pc, #84]	; (80072ec <prvAddNewTaskToReadyList+0xcc>)
 8007298:	441a      	add	r2, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	3304      	adds	r3, #4
 800729e:	4619      	mov	r1, r3
 80072a0:	4610      	mov	r0, r2
 80072a2:	f7fe fdbd 	bl	8005e20 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80072a6:	f001 fbc9 	bl	8008a3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80072aa:	4b0d      	ldr	r3, [pc, #52]	; (80072e0 <prvAddNewTaskToReadyList+0xc0>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00e      	beq.n	80072d0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80072b2:	4b0a      	ldr	r3, [pc, #40]	; (80072dc <prvAddNewTaskToReadyList+0xbc>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072bc:	429a      	cmp	r2, r3
 80072be:	d207      	bcs.n	80072d0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80072c0:	4b0b      	ldr	r3, [pc, #44]	; (80072f0 <prvAddNewTaskToReadyList+0xd0>)
 80072c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072c6:	601a      	str	r2, [r3, #0]
 80072c8:	f3bf 8f4f 	dsb	sy
 80072cc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072d0:	bf00      	nop
 80072d2:	3708      	adds	r7, #8
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	20000870 	.word	0x20000870
 80072dc:	20000770 	.word	0x20000770
 80072e0:	2000087c 	.word	0x2000087c
 80072e4:	2000088c 	.word	0x2000088c
 80072e8:	20000878 	.word	0x20000878
 80072ec:	20000774 	.word	0x20000774
 80072f0:	e000ed04 	.word	0xe000ed04

080072f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80072fc:	2300      	movs	r3, #0
 80072fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d018      	beq.n	8007338 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007306:	4b14      	ldr	r3, [pc, #80]	; (8007358 <vTaskDelay+0x64>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00b      	beq.n	8007326 <vTaskDelay+0x32>
 800730e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007312:	b672      	cpsid	i
 8007314:	f383 8811 	msr	BASEPRI, r3
 8007318:	f3bf 8f6f 	isb	sy
 800731c:	f3bf 8f4f 	dsb	sy
 8007320:	b662      	cpsie	i
 8007322:	60bb      	str	r3, [r7, #8]
 8007324:	e7fe      	b.n	8007324 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8007326:	f000 f883 	bl	8007430 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800732a:	2100      	movs	r1, #0
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 fe4b 	bl	8007fc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007332:	f000 f88b 	bl	800744c <xTaskResumeAll>
 8007336:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d107      	bne.n	800734e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800733e:	4b07      	ldr	r3, [pc, #28]	; (800735c <vTaskDelay+0x68>)
 8007340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007344:	601a      	str	r2, [r3, #0]
 8007346:	f3bf 8f4f 	dsb	sy
 800734a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800734e:	bf00      	nop
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	20000898 	.word	0x20000898
 800735c:	e000ed04 	.word	0xe000ed04

08007360 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b08a      	sub	sp, #40	; 0x28
 8007364:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007366:	2300      	movs	r3, #0
 8007368:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800736a:	2300      	movs	r3, #0
 800736c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800736e:	463a      	mov	r2, r7
 8007370:	1d39      	adds	r1, r7, #4
 8007372:	f107 0308 	add.w	r3, r7, #8
 8007376:	4618      	mov	r0, r3
 8007378:	f7f9 f952 	bl	8000620 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800737c:	6839      	ldr	r1, [r7, #0]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	68ba      	ldr	r2, [r7, #8]
 8007382:	9202      	str	r2, [sp, #8]
 8007384:	9301      	str	r3, [sp, #4]
 8007386:	2300      	movs	r3, #0
 8007388:	9300      	str	r3, [sp, #0]
 800738a:	2300      	movs	r3, #0
 800738c:	460a      	mov	r2, r1
 800738e:	4922      	ldr	r1, [pc, #136]	; (8007418 <vTaskStartScheduler+0xb8>)
 8007390:	4822      	ldr	r0, [pc, #136]	; (800741c <vTaskStartScheduler+0xbc>)
 8007392:	f7ff fe17 	bl	8006fc4 <xTaskCreateStatic>
 8007396:	4602      	mov	r2, r0
 8007398:	4b21      	ldr	r3, [pc, #132]	; (8007420 <vTaskStartScheduler+0xc0>)
 800739a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800739c:	4b20      	ldr	r3, [pc, #128]	; (8007420 <vTaskStartScheduler+0xc0>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d002      	beq.n	80073aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80073a4:	2301      	movs	r3, #1
 80073a6:	617b      	str	r3, [r7, #20]
 80073a8:	e001      	b.n	80073ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80073aa:	2300      	movs	r3, #0
 80073ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d102      	bne.n	80073ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80073b4:	f000 fe6e 	bl	8008094 <xTimerCreateTimerTask>
 80073b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d117      	bne.n	80073f0 <vTaskStartScheduler+0x90>
 80073c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c4:	b672      	cpsid	i
 80073c6:	f383 8811 	msr	BASEPRI, r3
 80073ca:	f3bf 8f6f 	isb	sy
 80073ce:	f3bf 8f4f 	dsb	sy
 80073d2:	b662      	cpsie	i
 80073d4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80073d6:	4b13      	ldr	r3, [pc, #76]	; (8007424 <vTaskStartScheduler+0xc4>)
 80073d8:	f04f 32ff 	mov.w	r2, #4294967295
 80073dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80073de:	4b12      	ldr	r3, [pc, #72]	; (8007428 <vTaskStartScheduler+0xc8>)
 80073e0:	2201      	movs	r2, #1
 80073e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80073e4:	4b11      	ldr	r3, [pc, #68]	; (800742c <vTaskStartScheduler+0xcc>)
 80073e6:	2200      	movs	r2, #0
 80073e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80073ea:	f001 fa79 	bl	80088e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80073ee:	e00f      	b.n	8007410 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073f6:	d10b      	bne.n	8007410 <vTaskStartScheduler+0xb0>
 80073f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fc:	b672      	cpsid	i
 80073fe:	f383 8811 	msr	BASEPRI, r3
 8007402:	f3bf 8f6f 	isb	sy
 8007406:	f3bf 8f4f 	dsb	sy
 800740a:	b662      	cpsie	i
 800740c:	60fb      	str	r3, [r7, #12]
 800740e:	e7fe      	b.n	800740e <vTaskStartScheduler+0xae>
}
 8007410:	bf00      	nop
 8007412:	3718      	adds	r7, #24
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	08018490 	.word	0x08018490
 800741c:	08007a71 	.word	0x08007a71
 8007420:	20000894 	.word	0x20000894
 8007424:	20000890 	.word	0x20000890
 8007428:	2000087c 	.word	0x2000087c
 800742c:	20000874 	.word	0x20000874

08007430 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007430:	b480      	push	{r7}
 8007432:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007434:	4b04      	ldr	r3, [pc, #16]	; (8007448 <vTaskSuspendAll+0x18>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	3301      	adds	r3, #1
 800743a:	4a03      	ldr	r2, [pc, #12]	; (8007448 <vTaskSuspendAll+0x18>)
 800743c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800743e:	bf00      	nop
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr
 8007448:	20000898 	.word	0x20000898

0800744c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007452:	2300      	movs	r3, #0
 8007454:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007456:	2300      	movs	r3, #0
 8007458:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800745a:	4b42      	ldr	r3, [pc, #264]	; (8007564 <xTaskResumeAll+0x118>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10b      	bne.n	800747a <xTaskResumeAll+0x2e>
 8007462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007466:	b672      	cpsid	i
 8007468:	f383 8811 	msr	BASEPRI, r3
 800746c:	f3bf 8f6f 	isb	sy
 8007470:	f3bf 8f4f 	dsb	sy
 8007474:	b662      	cpsie	i
 8007476:	603b      	str	r3, [r7, #0]
 8007478:	e7fe      	b.n	8007478 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800747a:	f001 faad 	bl	80089d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800747e:	4b39      	ldr	r3, [pc, #228]	; (8007564 <xTaskResumeAll+0x118>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	3b01      	subs	r3, #1
 8007484:	4a37      	ldr	r2, [pc, #220]	; (8007564 <xTaskResumeAll+0x118>)
 8007486:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007488:	4b36      	ldr	r3, [pc, #216]	; (8007564 <xTaskResumeAll+0x118>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d161      	bne.n	8007554 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007490:	4b35      	ldr	r3, [pc, #212]	; (8007568 <xTaskResumeAll+0x11c>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d05d      	beq.n	8007554 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007498:	e02e      	b.n	80074f8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800749a:	4b34      	ldr	r3, [pc, #208]	; (800756c <xTaskResumeAll+0x120>)
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	3318      	adds	r3, #24
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7fe fd17 	bl	8005eda <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	3304      	adds	r3, #4
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7fe fd12 	bl	8005eda <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ba:	2201      	movs	r2, #1
 80074bc:	409a      	lsls	r2, r3
 80074be:	4b2c      	ldr	r3, [pc, #176]	; (8007570 <xTaskResumeAll+0x124>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	4a2a      	ldr	r2, [pc, #168]	; (8007570 <xTaskResumeAll+0x124>)
 80074c6:	6013      	str	r3, [r2, #0]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074cc:	4613      	mov	r3, r2
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	4413      	add	r3, r2
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	4a27      	ldr	r2, [pc, #156]	; (8007574 <xTaskResumeAll+0x128>)
 80074d6:	441a      	add	r2, r3
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	3304      	adds	r3, #4
 80074dc:	4619      	mov	r1, r3
 80074de:	4610      	mov	r0, r2
 80074e0:	f7fe fc9e 	bl	8005e20 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074e8:	4b23      	ldr	r3, [pc, #140]	; (8007578 <xTaskResumeAll+0x12c>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d302      	bcc.n	80074f8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80074f2:	4b22      	ldr	r3, [pc, #136]	; (800757c <xTaskResumeAll+0x130>)
 80074f4:	2201      	movs	r2, #1
 80074f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074f8:	4b1c      	ldr	r3, [pc, #112]	; (800756c <xTaskResumeAll+0x120>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d1cc      	bne.n	800749a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d001      	beq.n	800750a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007506:	f000 fb69 	bl	8007bdc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800750a:	4b1d      	ldr	r3, [pc, #116]	; (8007580 <xTaskResumeAll+0x134>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d010      	beq.n	8007538 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007516:	f000 f859 	bl	80075cc <xTaskIncrementTick>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d002      	beq.n	8007526 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007520:	4b16      	ldr	r3, [pc, #88]	; (800757c <xTaskResumeAll+0x130>)
 8007522:	2201      	movs	r2, #1
 8007524:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	3b01      	subs	r3, #1
 800752a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1f1      	bne.n	8007516 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8007532:	4b13      	ldr	r3, [pc, #76]	; (8007580 <xTaskResumeAll+0x134>)
 8007534:	2200      	movs	r2, #0
 8007536:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007538:	4b10      	ldr	r3, [pc, #64]	; (800757c <xTaskResumeAll+0x130>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d009      	beq.n	8007554 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007540:	2301      	movs	r3, #1
 8007542:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007544:	4b0f      	ldr	r3, [pc, #60]	; (8007584 <xTaskResumeAll+0x138>)
 8007546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800754a:	601a      	str	r2, [r3, #0]
 800754c:	f3bf 8f4f 	dsb	sy
 8007550:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007554:	f001 fa72 	bl	8008a3c <vPortExitCritical>

	return xAlreadyYielded;
 8007558:	68bb      	ldr	r3, [r7, #8]
}
 800755a:	4618      	mov	r0, r3
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	20000898 	.word	0x20000898
 8007568:	20000870 	.word	0x20000870
 800756c:	20000830 	.word	0x20000830
 8007570:	20000878 	.word	0x20000878
 8007574:	20000774 	.word	0x20000774
 8007578:	20000770 	.word	0x20000770
 800757c:	20000884 	.word	0x20000884
 8007580:	20000880 	.word	0x20000880
 8007584:	e000ed04 	.word	0xe000ed04

08007588 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800758e:	4b05      	ldr	r3, [pc, #20]	; (80075a4 <xTaskGetTickCount+0x1c>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007594:	687b      	ldr	r3, [r7, #4]
}
 8007596:	4618      	mov	r0, r3
 8007598:	370c      	adds	r7, #12
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	20000874 	.word	0x20000874

080075a8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80075ae:	f001 faf3 	bl	8008b98 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80075b2:	2300      	movs	r3, #0
 80075b4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80075b6:	4b04      	ldr	r3, [pc, #16]	; (80075c8 <xTaskGetTickCountFromISR+0x20>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80075bc:	683b      	ldr	r3, [r7, #0]
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	20000874 	.word	0x20000874

080075cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b086      	sub	sp, #24
 80075d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80075d2:	2300      	movs	r3, #0
 80075d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075d6:	4b4f      	ldr	r3, [pc, #316]	; (8007714 <xTaskIncrementTick+0x148>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	f040 8089 	bne.w	80076f2 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80075e0:	4b4d      	ldr	r3, [pc, #308]	; (8007718 <xTaskIncrementTick+0x14c>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	3301      	adds	r3, #1
 80075e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80075e8:	4a4b      	ldr	r2, [pc, #300]	; (8007718 <xTaskIncrementTick+0x14c>)
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d121      	bne.n	8007638 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80075f4:	4b49      	ldr	r3, [pc, #292]	; (800771c <xTaskIncrementTick+0x150>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00b      	beq.n	8007616 <xTaskIncrementTick+0x4a>
 80075fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007602:	b672      	cpsid	i
 8007604:	f383 8811 	msr	BASEPRI, r3
 8007608:	f3bf 8f6f 	isb	sy
 800760c:	f3bf 8f4f 	dsb	sy
 8007610:	b662      	cpsie	i
 8007612:	603b      	str	r3, [r7, #0]
 8007614:	e7fe      	b.n	8007614 <xTaskIncrementTick+0x48>
 8007616:	4b41      	ldr	r3, [pc, #260]	; (800771c <xTaskIncrementTick+0x150>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	60fb      	str	r3, [r7, #12]
 800761c:	4b40      	ldr	r3, [pc, #256]	; (8007720 <xTaskIncrementTick+0x154>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a3e      	ldr	r2, [pc, #248]	; (800771c <xTaskIncrementTick+0x150>)
 8007622:	6013      	str	r3, [r2, #0]
 8007624:	4a3e      	ldr	r2, [pc, #248]	; (8007720 <xTaskIncrementTick+0x154>)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6013      	str	r3, [r2, #0]
 800762a:	4b3e      	ldr	r3, [pc, #248]	; (8007724 <xTaskIncrementTick+0x158>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	3301      	adds	r3, #1
 8007630:	4a3c      	ldr	r2, [pc, #240]	; (8007724 <xTaskIncrementTick+0x158>)
 8007632:	6013      	str	r3, [r2, #0]
 8007634:	f000 fad2 	bl	8007bdc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007638:	4b3b      	ldr	r3, [pc, #236]	; (8007728 <xTaskIncrementTick+0x15c>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	693a      	ldr	r2, [r7, #16]
 800763e:	429a      	cmp	r2, r3
 8007640:	d348      	bcc.n	80076d4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007642:	4b36      	ldr	r3, [pc, #216]	; (800771c <xTaskIncrementTick+0x150>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d104      	bne.n	8007656 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800764c:	4b36      	ldr	r3, [pc, #216]	; (8007728 <xTaskIncrementTick+0x15c>)
 800764e:	f04f 32ff 	mov.w	r2, #4294967295
 8007652:	601a      	str	r2, [r3, #0]
					break;
 8007654:	e03e      	b.n	80076d4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007656:	4b31      	ldr	r3, [pc, #196]	; (800771c <xTaskIncrementTick+0x150>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007666:	693a      	ldr	r2, [r7, #16]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	429a      	cmp	r2, r3
 800766c:	d203      	bcs.n	8007676 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800766e:	4a2e      	ldr	r2, [pc, #184]	; (8007728 <xTaskIncrementTick+0x15c>)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007674:	e02e      	b.n	80076d4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	3304      	adds	r3, #4
 800767a:	4618      	mov	r0, r3
 800767c:	f7fe fc2d 	bl	8005eda <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007684:	2b00      	cmp	r3, #0
 8007686:	d004      	beq.n	8007692 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	3318      	adds	r3, #24
 800768c:	4618      	mov	r0, r3
 800768e:	f7fe fc24 	bl	8005eda <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007696:	2201      	movs	r2, #1
 8007698:	409a      	lsls	r2, r3
 800769a:	4b24      	ldr	r3, [pc, #144]	; (800772c <xTaskIncrementTick+0x160>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4313      	orrs	r3, r2
 80076a0:	4a22      	ldr	r2, [pc, #136]	; (800772c <xTaskIncrementTick+0x160>)
 80076a2:	6013      	str	r3, [r2, #0]
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076a8:	4613      	mov	r3, r2
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	4413      	add	r3, r2
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	4a1f      	ldr	r2, [pc, #124]	; (8007730 <xTaskIncrementTick+0x164>)
 80076b2:	441a      	add	r2, r3
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	3304      	adds	r3, #4
 80076b8:	4619      	mov	r1, r3
 80076ba:	4610      	mov	r0, r2
 80076bc:	f7fe fbb0 	bl	8005e20 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076c4:	4b1b      	ldr	r3, [pc, #108]	; (8007734 <xTaskIncrementTick+0x168>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d3b9      	bcc.n	8007642 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80076ce:	2301      	movs	r3, #1
 80076d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076d2:	e7b6      	b.n	8007642 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80076d4:	4b17      	ldr	r3, [pc, #92]	; (8007734 <xTaskIncrementTick+0x168>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076da:	4915      	ldr	r1, [pc, #84]	; (8007730 <xTaskIncrementTick+0x164>)
 80076dc:	4613      	mov	r3, r2
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	4413      	add	r3, r2
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	440b      	add	r3, r1
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d907      	bls.n	80076fc <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 80076ec:	2301      	movs	r3, #1
 80076ee:	617b      	str	r3, [r7, #20]
 80076f0:	e004      	b.n	80076fc <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80076f2:	4b11      	ldr	r3, [pc, #68]	; (8007738 <xTaskIncrementTick+0x16c>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	3301      	adds	r3, #1
 80076f8:	4a0f      	ldr	r2, [pc, #60]	; (8007738 <xTaskIncrementTick+0x16c>)
 80076fa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80076fc:	4b0f      	ldr	r3, [pc, #60]	; (800773c <xTaskIncrementTick+0x170>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d001      	beq.n	8007708 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8007704:	2301      	movs	r3, #1
 8007706:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007708:	697b      	ldr	r3, [r7, #20]
}
 800770a:	4618      	mov	r0, r3
 800770c:	3718      	adds	r7, #24
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	20000898 	.word	0x20000898
 8007718:	20000874 	.word	0x20000874
 800771c:	20000828 	.word	0x20000828
 8007720:	2000082c 	.word	0x2000082c
 8007724:	20000888 	.word	0x20000888
 8007728:	20000890 	.word	0x20000890
 800772c:	20000878 	.word	0x20000878
 8007730:	20000774 	.word	0x20000774
 8007734:	20000770 	.word	0x20000770
 8007738:	20000880 	.word	0x20000880
 800773c:	20000884 	.word	0x20000884

08007740 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007740:	b480      	push	{r7}
 8007742:	b087      	sub	sp, #28
 8007744:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007746:	4b27      	ldr	r3, [pc, #156]	; (80077e4 <vTaskSwitchContext+0xa4>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d003      	beq.n	8007756 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800774e:	4b26      	ldr	r3, [pc, #152]	; (80077e8 <vTaskSwitchContext+0xa8>)
 8007750:	2201      	movs	r2, #1
 8007752:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007754:	e040      	b.n	80077d8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007756:	4b24      	ldr	r3, [pc, #144]	; (80077e8 <vTaskSwitchContext+0xa8>)
 8007758:	2200      	movs	r2, #0
 800775a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800775c:	4b23      	ldr	r3, [pc, #140]	; (80077ec <vTaskSwitchContext+0xac>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	fab3 f383 	clz	r3, r3
 8007768:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800776a:	7afb      	ldrb	r3, [r7, #11]
 800776c:	f1c3 031f 	rsb	r3, r3, #31
 8007770:	617b      	str	r3, [r7, #20]
 8007772:	491f      	ldr	r1, [pc, #124]	; (80077f0 <vTaskSwitchContext+0xb0>)
 8007774:	697a      	ldr	r2, [r7, #20]
 8007776:	4613      	mov	r3, r2
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	4413      	add	r3, r2
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	440b      	add	r3, r1
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d10b      	bne.n	800779e <vTaskSwitchContext+0x5e>
	__asm volatile
 8007786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778a:	b672      	cpsid	i
 800778c:	f383 8811 	msr	BASEPRI, r3
 8007790:	f3bf 8f6f 	isb	sy
 8007794:	f3bf 8f4f 	dsb	sy
 8007798:	b662      	cpsie	i
 800779a:	607b      	str	r3, [r7, #4]
 800779c:	e7fe      	b.n	800779c <vTaskSwitchContext+0x5c>
 800779e:	697a      	ldr	r2, [r7, #20]
 80077a0:	4613      	mov	r3, r2
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	4413      	add	r3, r2
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	4a11      	ldr	r2, [pc, #68]	; (80077f0 <vTaskSwitchContext+0xb0>)
 80077aa:	4413      	add	r3, r2
 80077ac:	613b      	str	r3, [r7, #16]
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	685a      	ldr	r2, [r3, #4]
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	605a      	str	r2, [r3, #4]
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	685a      	ldr	r2, [r3, #4]
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	3308      	adds	r3, #8
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d104      	bne.n	80077ce <vTaskSwitchContext+0x8e>
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	685a      	ldr	r2, [r3, #4]
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	605a      	str	r2, [r3, #4]
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	4a07      	ldr	r2, [pc, #28]	; (80077f4 <vTaskSwitchContext+0xb4>)
 80077d6:	6013      	str	r3, [r2, #0]
}
 80077d8:	bf00      	nop
 80077da:	371c      	adds	r7, #28
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr
 80077e4:	20000898 	.word	0x20000898
 80077e8:	20000884 	.word	0x20000884
 80077ec:	20000878 	.word	0x20000878
 80077f0:	20000774 	.word	0x20000774
 80077f4:	20000770 	.word	0x20000770

080077f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d10b      	bne.n	8007820 <vTaskPlaceOnEventList+0x28>
 8007808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780c:	b672      	cpsid	i
 800780e:	f383 8811 	msr	BASEPRI, r3
 8007812:	f3bf 8f6f 	isb	sy
 8007816:	f3bf 8f4f 	dsb	sy
 800781a:	b662      	cpsie	i
 800781c:	60fb      	str	r3, [r7, #12]
 800781e:	e7fe      	b.n	800781e <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007820:	4b07      	ldr	r3, [pc, #28]	; (8007840 <vTaskPlaceOnEventList+0x48>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	3318      	adds	r3, #24
 8007826:	4619      	mov	r1, r3
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f7fe fb1d 	bl	8005e68 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800782e:	2101      	movs	r1, #1
 8007830:	6838      	ldr	r0, [r7, #0]
 8007832:	f000 fbc9 	bl	8007fc8 <prvAddCurrentTaskToDelayedList>
}
 8007836:	bf00      	nop
 8007838:	3710      	adds	r7, #16
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	20000770 	.word	0x20000770

08007844 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007844:	b580      	push	{r7, lr}
 8007846:	b086      	sub	sp, #24
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	60b9      	str	r1, [r7, #8]
 800784e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d10b      	bne.n	800786e <vTaskPlaceOnEventListRestricted+0x2a>
 8007856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800785a:	b672      	cpsid	i
 800785c:	f383 8811 	msr	BASEPRI, r3
 8007860:	f3bf 8f6f 	isb	sy
 8007864:	f3bf 8f4f 	dsb	sy
 8007868:	b662      	cpsie	i
 800786a:	617b      	str	r3, [r7, #20]
 800786c:	e7fe      	b.n	800786c <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800786e:	4b0a      	ldr	r3, [pc, #40]	; (8007898 <vTaskPlaceOnEventListRestricted+0x54>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	3318      	adds	r3, #24
 8007874:	4619      	mov	r1, r3
 8007876:	68f8      	ldr	r0, [r7, #12]
 8007878:	f7fe fad2 	bl	8005e20 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d002      	beq.n	8007888 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007882:	f04f 33ff 	mov.w	r3, #4294967295
 8007886:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007888:	6879      	ldr	r1, [r7, #4]
 800788a:	68b8      	ldr	r0, [r7, #8]
 800788c:	f000 fb9c 	bl	8007fc8 <prvAddCurrentTaskToDelayedList>
	}
 8007890:	bf00      	nop
 8007892:	3718      	adds	r7, #24
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}
 8007898:	20000770 	.word	0x20000770

0800789c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b086      	sub	sp, #24
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d10b      	bne.n	80078ca <xTaskRemoveFromEventList+0x2e>
 80078b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b6:	b672      	cpsid	i
 80078b8:	f383 8811 	msr	BASEPRI, r3
 80078bc:	f3bf 8f6f 	isb	sy
 80078c0:	f3bf 8f4f 	dsb	sy
 80078c4:	b662      	cpsie	i
 80078c6:	60fb      	str	r3, [r7, #12]
 80078c8:	e7fe      	b.n	80078c8 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	3318      	adds	r3, #24
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7fe fb03 	bl	8005eda <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078d4:	4b1d      	ldr	r3, [pc, #116]	; (800794c <xTaskRemoveFromEventList+0xb0>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d11c      	bne.n	8007916 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	3304      	adds	r3, #4
 80078e0:	4618      	mov	r0, r3
 80078e2:	f7fe fafa 	bl	8005eda <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ea:	2201      	movs	r2, #1
 80078ec:	409a      	lsls	r2, r3
 80078ee:	4b18      	ldr	r3, [pc, #96]	; (8007950 <xTaskRemoveFromEventList+0xb4>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	4a16      	ldr	r2, [pc, #88]	; (8007950 <xTaskRemoveFromEventList+0xb4>)
 80078f6:	6013      	str	r3, [r2, #0]
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078fc:	4613      	mov	r3, r2
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	4413      	add	r3, r2
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	4a13      	ldr	r2, [pc, #76]	; (8007954 <xTaskRemoveFromEventList+0xb8>)
 8007906:	441a      	add	r2, r3
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	3304      	adds	r3, #4
 800790c:	4619      	mov	r1, r3
 800790e:	4610      	mov	r0, r2
 8007910:	f7fe fa86 	bl	8005e20 <vListInsertEnd>
 8007914:	e005      	b.n	8007922 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	3318      	adds	r3, #24
 800791a:	4619      	mov	r1, r3
 800791c:	480e      	ldr	r0, [pc, #56]	; (8007958 <xTaskRemoveFromEventList+0xbc>)
 800791e:	f7fe fa7f 	bl	8005e20 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007926:	4b0d      	ldr	r3, [pc, #52]	; (800795c <xTaskRemoveFromEventList+0xc0>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800792c:	429a      	cmp	r2, r3
 800792e:	d905      	bls.n	800793c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007930:	2301      	movs	r3, #1
 8007932:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007934:	4b0a      	ldr	r3, [pc, #40]	; (8007960 <xTaskRemoveFromEventList+0xc4>)
 8007936:	2201      	movs	r2, #1
 8007938:	601a      	str	r2, [r3, #0]
 800793a:	e001      	b.n	8007940 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800793c:	2300      	movs	r3, #0
 800793e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007940:	697b      	ldr	r3, [r7, #20]
}
 8007942:	4618      	mov	r0, r3
 8007944:	3718      	adds	r7, #24
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	20000898 	.word	0x20000898
 8007950:	20000878 	.word	0x20000878
 8007954:	20000774 	.word	0x20000774
 8007958:	20000830 	.word	0x20000830
 800795c:	20000770 	.word	0x20000770
 8007960:	20000884 	.word	0x20000884

08007964 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800796c:	4b06      	ldr	r3, [pc, #24]	; (8007988 <vTaskInternalSetTimeOutState+0x24>)
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007974:	4b05      	ldr	r3, [pc, #20]	; (800798c <vTaskInternalSetTimeOutState+0x28>)
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	605a      	str	r2, [r3, #4]
}
 800797c:	bf00      	nop
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr
 8007988:	20000888 	.word	0x20000888
 800798c:	20000874 	.word	0x20000874

08007990 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b088      	sub	sp, #32
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d10b      	bne.n	80079b8 <xTaskCheckForTimeOut+0x28>
 80079a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a4:	b672      	cpsid	i
 80079a6:	f383 8811 	msr	BASEPRI, r3
 80079aa:	f3bf 8f6f 	isb	sy
 80079ae:	f3bf 8f4f 	dsb	sy
 80079b2:	b662      	cpsie	i
 80079b4:	613b      	str	r3, [r7, #16]
 80079b6:	e7fe      	b.n	80079b6 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d10b      	bne.n	80079d6 <xTaskCheckForTimeOut+0x46>
 80079be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c2:	b672      	cpsid	i
 80079c4:	f383 8811 	msr	BASEPRI, r3
 80079c8:	f3bf 8f6f 	isb	sy
 80079cc:	f3bf 8f4f 	dsb	sy
 80079d0:	b662      	cpsie	i
 80079d2:	60fb      	str	r3, [r7, #12]
 80079d4:	e7fe      	b.n	80079d4 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 80079d6:	f000 ffff 	bl	80089d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80079da:	4b1d      	ldr	r3, [pc, #116]	; (8007a50 <xTaskCheckForTimeOut+0xc0>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	69ba      	ldr	r2, [r7, #24]
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079f2:	d102      	bne.n	80079fa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80079f4:	2300      	movs	r3, #0
 80079f6:	61fb      	str	r3, [r7, #28]
 80079f8:	e023      	b.n	8007a42 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	4b15      	ldr	r3, [pc, #84]	; (8007a54 <xTaskCheckForTimeOut+0xc4>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d007      	beq.n	8007a16 <xTaskCheckForTimeOut+0x86>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	69ba      	ldr	r2, [r7, #24]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d302      	bcc.n	8007a16 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007a10:	2301      	movs	r3, #1
 8007a12:	61fb      	str	r3, [r7, #28]
 8007a14:	e015      	b.n	8007a42 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	697a      	ldr	r2, [r7, #20]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d20b      	bcs.n	8007a38 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	1ad2      	subs	r2, r2, r3
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f7ff ff99 	bl	8007964 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a32:	2300      	movs	r3, #0
 8007a34:	61fb      	str	r3, [r7, #28]
 8007a36:	e004      	b.n	8007a42 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007a42:	f000 fffb 	bl	8008a3c <vPortExitCritical>

	return xReturn;
 8007a46:	69fb      	ldr	r3, [r7, #28]
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3720      	adds	r7, #32
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	20000874 	.word	0x20000874
 8007a54:	20000888 	.word	0x20000888

08007a58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007a58:	b480      	push	{r7}
 8007a5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a5c:	4b03      	ldr	r3, [pc, #12]	; (8007a6c <vTaskMissedYield+0x14>)
 8007a5e:	2201      	movs	r2, #1
 8007a60:	601a      	str	r2, [r3, #0]
}
 8007a62:	bf00      	nop
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr
 8007a6c:	20000884 	.word	0x20000884

08007a70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a78:	f000 f854 	bl	8007b24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a7c:	4b07      	ldr	r3, [pc, #28]	; (8007a9c <prvIdleTask+0x2c>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d907      	bls.n	8007a94 <prvIdleTask+0x24>
			{
				taskYIELD();
 8007a84:	4b06      	ldr	r3, [pc, #24]	; (8007aa0 <prvIdleTask+0x30>)
 8007a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a8a:	601a      	str	r2, [r3, #0]
 8007a8c:	f3bf 8f4f 	dsb	sy
 8007a90:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8007a94:	f7f8 fdbc 	bl	8000610 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8007a98:	e7ee      	b.n	8007a78 <prvIdleTask+0x8>
 8007a9a:	bf00      	nop
 8007a9c:	20000774 	.word	0x20000774
 8007aa0:	e000ed04 	.word	0xe000ed04

08007aa4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007aaa:	2300      	movs	r3, #0
 8007aac:	607b      	str	r3, [r7, #4]
 8007aae:	e00c      	b.n	8007aca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	4613      	mov	r3, r2
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	4413      	add	r3, r2
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	4a12      	ldr	r2, [pc, #72]	; (8007b04 <prvInitialiseTaskLists+0x60>)
 8007abc:	4413      	add	r3, r2
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7fe f981 	bl	8005dc6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	607b      	str	r3, [r7, #4]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2b06      	cmp	r3, #6
 8007ace:	d9ef      	bls.n	8007ab0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ad0:	480d      	ldr	r0, [pc, #52]	; (8007b08 <prvInitialiseTaskLists+0x64>)
 8007ad2:	f7fe f978 	bl	8005dc6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007ad6:	480d      	ldr	r0, [pc, #52]	; (8007b0c <prvInitialiseTaskLists+0x68>)
 8007ad8:	f7fe f975 	bl	8005dc6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007adc:	480c      	ldr	r0, [pc, #48]	; (8007b10 <prvInitialiseTaskLists+0x6c>)
 8007ade:	f7fe f972 	bl	8005dc6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007ae2:	480c      	ldr	r0, [pc, #48]	; (8007b14 <prvInitialiseTaskLists+0x70>)
 8007ae4:	f7fe f96f 	bl	8005dc6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ae8:	480b      	ldr	r0, [pc, #44]	; (8007b18 <prvInitialiseTaskLists+0x74>)
 8007aea:	f7fe f96c 	bl	8005dc6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007aee:	4b0b      	ldr	r3, [pc, #44]	; (8007b1c <prvInitialiseTaskLists+0x78>)
 8007af0:	4a05      	ldr	r2, [pc, #20]	; (8007b08 <prvInitialiseTaskLists+0x64>)
 8007af2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007af4:	4b0a      	ldr	r3, [pc, #40]	; (8007b20 <prvInitialiseTaskLists+0x7c>)
 8007af6:	4a05      	ldr	r2, [pc, #20]	; (8007b0c <prvInitialiseTaskLists+0x68>)
 8007af8:	601a      	str	r2, [r3, #0]
}
 8007afa:	bf00      	nop
 8007afc:	3708      	adds	r7, #8
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	20000774 	.word	0x20000774
 8007b08:	20000800 	.word	0x20000800
 8007b0c:	20000814 	.word	0x20000814
 8007b10:	20000830 	.word	0x20000830
 8007b14:	20000844 	.word	0x20000844
 8007b18:	2000085c 	.word	0x2000085c
 8007b1c:	20000828 	.word	0x20000828
 8007b20:	2000082c 	.word	0x2000082c

08007b24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b2a:	e019      	b.n	8007b60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b2c:	f000 ff54 	bl	80089d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b30:	4b0f      	ldr	r3, [pc, #60]	; (8007b70 <prvCheckTasksWaitingTermination+0x4c>)
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	3304      	adds	r3, #4
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7fe f9cc 	bl	8005eda <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b42:	4b0c      	ldr	r3, [pc, #48]	; (8007b74 <prvCheckTasksWaitingTermination+0x50>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	3b01      	subs	r3, #1
 8007b48:	4a0a      	ldr	r2, [pc, #40]	; (8007b74 <prvCheckTasksWaitingTermination+0x50>)
 8007b4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b4c:	4b0a      	ldr	r3, [pc, #40]	; (8007b78 <prvCheckTasksWaitingTermination+0x54>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	3b01      	subs	r3, #1
 8007b52:	4a09      	ldr	r2, [pc, #36]	; (8007b78 <prvCheckTasksWaitingTermination+0x54>)
 8007b54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007b56:	f000 ff71 	bl	8008a3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f80e 	bl	8007b7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b60:	4b05      	ldr	r3, [pc, #20]	; (8007b78 <prvCheckTasksWaitingTermination+0x54>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d1e1      	bne.n	8007b2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b68:	bf00      	nop
 8007b6a:	3708      	adds	r7, #8
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	20000844 	.word	0x20000844
 8007b74:	20000870 	.word	0x20000870
 8007b78:	20000858 	.word	0x20000858

08007b7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d108      	bne.n	8007ba0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b92:	4618      	mov	r0, r3
 8007b94:	f001 f90a 	bl	8008dac <vPortFree>
				vPortFree( pxTCB );
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f001 f907 	bl	8008dac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007b9e:	e019      	b.n	8007bd4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d103      	bne.n	8007bb2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f001 f8fe 	bl	8008dac <vPortFree>
	}
 8007bb0:	e010      	b.n	8007bd4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007bb8:	2b02      	cmp	r3, #2
 8007bba:	d00b      	beq.n	8007bd4 <prvDeleteTCB+0x58>
 8007bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc0:	b672      	cpsid	i
 8007bc2:	f383 8811 	msr	BASEPRI, r3
 8007bc6:	f3bf 8f6f 	isb	sy
 8007bca:	f3bf 8f4f 	dsb	sy
 8007bce:	b662      	cpsie	i
 8007bd0:	60fb      	str	r3, [r7, #12]
 8007bd2:	e7fe      	b.n	8007bd2 <prvDeleteTCB+0x56>
	}
 8007bd4:	bf00      	nop
 8007bd6:	3710      	adds	r7, #16
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007be2:	4b0c      	ldr	r3, [pc, #48]	; (8007c14 <prvResetNextTaskUnblockTime+0x38>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d104      	bne.n	8007bf6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007bec:	4b0a      	ldr	r3, [pc, #40]	; (8007c18 <prvResetNextTaskUnblockTime+0x3c>)
 8007bee:	f04f 32ff 	mov.w	r2, #4294967295
 8007bf2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007bf4:	e008      	b.n	8007c08 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bf6:	4b07      	ldr	r3, [pc, #28]	; (8007c14 <prvResetNextTaskUnblockTime+0x38>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	4a04      	ldr	r2, [pc, #16]	; (8007c18 <prvResetNextTaskUnblockTime+0x3c>)
 8007c06:	6013      	str	r3, [r2, #0]
}
 8007c08:	bf00      	nop
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr
 8007c14:	20000828 	.word	0x20000828
 8007c18:	20000890 	.word	0x20000890

08007c1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007c22:	4b0b      	ldr	r3, [pc, #44]	; (8007c50 <xTaskGetSchedulerState+0x34>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d102      	bne.n	8007c30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	607b      	str	r3, [r7, #4]
 8007c2e:	e008      	b.n	8007c42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c30:	4b08      	ldr	r3, [pc, #32]	; (8007c54 <xTaskGetSchedulerState+0x38>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d102      	bne.n	8007c3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c38:	2302      	movs	r3, #2
 8007c3a:	607b      	str	r3, [r7, #4]
 8007c3c:	e001      	b.n	8007c42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c42:	687b      	ldr	r3, [r7, #4]
	}
 8007c44:	4618      	mov	r0, r3
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr
 8007c50:	2000087c 	.word	0x2000087c
 8007c54:	20000898 	.word	0x20000898

08007c58 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007c64:	2300      	movs	r3, #0
 8007c66:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d069      	beq.n	8007d42 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c72:	4b36      	ldr	r3, [pc, #216]	; (8007d4c <xTaskPriorityInherit+0xf4>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d259      	bcs.n	8007d30 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	699b      	ldr	r3, [r3, #24]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	db06      	blt.n	8007c92 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c84:	4b31      	ldr	r3, [pc, #196]	; (8007d4c <xTaskPriorityInherit+0xf4>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c8a:	f1c3 0207 	rsb	r2, r3, #7
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	6959      	ldr	r1, [r3, #20]
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	4413      	add	r3, r2
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	4a2b      	ldr	r2, [pc, #172]	; (8007d50 <xTaskPriorityInherit+0xf8>)
 8007ca4:	4413      	add	r3, r2
 8007ca6:	4299      	cmp	r1, r3
 8007ca8:	d13a      	bne.n	8007d20 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	3304      	adds	r3, #4
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7fe f913 	bl	8005eda <uxListRemove>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d115      	bne.n	8007ce6 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cbe:	4924      	ldr	r1, [pc, #144]	; (8007d50 <xTaskPriorityInherit+0xf8>)
 8007cc0:	4613      	mov	r3, r2
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	4413      	add	r3, r2
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	440b      	add	r3, r1
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d10a      	bne.n	8007ce6 <xTaskPriorityInherit+0x8e>
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cda:	43da      	mvns	r2, r3
 8007cdc:	4b1d      	ldr	r3, [pc, #116]	; (8007d54 <xTaskPriorityInherit+0xfc>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4013      	ands	r3, r2
 8007ce2:	4a1c      	ldr	r2, [pc, #112]	; (8007d54 <xTaskPriorityInherit+0xfc>)
 8007ce4:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007ce6:	4b19      	ldr	r3, [pc, #100]	; (8007d4c <xTaskPriorityInherit+0xf4>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	409a      	lsls	r2, r3
 8007cf8:	4b16      	ldr	r3, [pc, #88]	; (8007d54 <xTaskPriorityInherit+0xfc>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	4a15      	ldr	r2, [pc, #84]	; (8007d54 <xTaskPriorityInherit+0xfc>)
 8007d00:	6013      	str	r3, [r2, #0]
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d06:	4613      	mov	r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	4413      	add	r3, r2
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	4a10      	ldr	r2, [pc, #64]	; (8007d50 <xTaskPriorityInherit+0xf8>)
 8007d10:	441a      	add	r2, r3
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	3304      	adds	r3, #4
 8007d16:	4619      	mov	r1, r3
 8007d18:	4610      	mov	r0, r2
 8007d1a:	f7fe f881 	bl	8005e20 <vListInsertEnd>
 8007d1e:	e004      	b.n	8007d2a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007d20:	4b0a      	ldr	r3, [pc, #40]	; (8007d4c <xTaskPriorityInherit+0xf4>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	60fb      	str	r3, [r7, #12]
 8007d2e:	e008      	b.n	8007d42 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d34:	4b05      	ldr	r3, [pc, #20]	; (8007d4c <xTaskPriorityInherit+0xf4>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d201      	bcs.n	8007d42 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d42:	68fb      	ldr	r3, [r7, #12]
	}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3710      	adds	r7, #16
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	20000770 	.word	0x20000770
 8007d50:	20000774 	.word	0x20000774
 8007d54:	20000878 	.word	0x20000878

08007d58 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b086      	sub	sp, #24
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007d64:	2300      	movs	r3, #0
 8007d66:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d070      	beq.n	8007e50 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007d6e:	4b3b      	ldr	r3, [pc, #236]	; (8007e5c <xTaskPriorityDisinherit+0x104>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	693a      	ldr	r2, [r7, #16]
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d00b      	beq.n	8007d90 <xTaskPriorityDisinherit+0x38>
 8007d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d7c:	b672      	cpsid	i
 8007d7e:	f383 8811 	msr	BASEPRI, r3
 8007d82:	f3bf 8f6f 	isb	sy
 8007d86:	f3bf 8f4f 	dsb	sy
 8007d8a:	b662      	cpsie	i
 8007d8c:	60fb      	str	r3, [r7, #12]
 8007d8e:	e7fe      	b.n	8007d8e <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d10b      	bne.n	8007db0 <xTaskPriorityDisinherit+0x58>
 8007d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9c:	b672      	cpsid	i
 8007d9e:	f383 8811 	msr	BASEPRI, r3
 8007da2:	f3bf 8f6f 	isb	sy
 8007da6:	f3bf 8f4f 	dsb	sy
 8007daa:	b662      	cpsie	i
 8007dac:	60bb      	str	r3, [r7, #8]
 8007dae:	e7fe      	b.n	8007dae <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007db4:	1e5a      	subs	r2, r3, #1
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	659a      	str	r2, [r3, #88]	; 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d044      	beq.n	8007e50 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d140      	bne.n	8007e50 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	3304      	adds	r3, #4
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7fe f881 	bl	8005eda <uxListRemove>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d115      	bne.n	8007e0a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de2:	491f      	ldr	r1, [pc, #124]	; (8007e60 <xTaskPriorityDisinherit+0x108>)
 8007de4:	4613      	mov	r3, r2
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	4413      	add	r3, r2
 8007dea:	009b      	lsls	r3, r3, #2
 8007dec:	440b      	add	r3, r1
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d10a      	bne.n	8007e0a <xTaskPriorityDisinherit+0xb2>
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df8:	2201      	movs	r2, #1
 8007dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8007dfe:	43da      	mvns	r2, r3
 8007e00:	4b18      	ldr	r3, [pc, #96]	; (8007e64 <xTaskPriorityDisinherit+0x10c>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4013      	ands	r3, r2
 8007e06:	4a17      	ldr	r2, [pc, #92]	; (8007e64 <xTaskPriorityDisinherit+0x10c>)
 8007e08:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e16:	f1c3 0207 	rsb	r2, r3, #7
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e22:	2201      	movs	r2, #1
 8007e24:	409a      	lsls	r2, r3
 8007e26:	4b0f      	ldr	r3, [pc, #60]	; (8007e64 <xTaskPriorityDisinherit+0x10c>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	4a0d      	ldr	r2, [pc, #52]	; (8007e64 <xTaskPriorityDisinherit+0x10c>)
 8007e2e:	6013      	str	r3, [r2, #0]
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e34:	4613      	mov	r3, r2
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	4413      	add	r3, r2
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	4a08      	ldr	r2, [pc, #32]	; (8007e60 <xTaskPriorityDisinherit+0x108>)
 8007e3e:	441a      	add	r2, r3
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	3304      	adds	r3, #4
 8007e44:	4619      	mov	r1, r3
 8007e46:	4610      	mov	r0, r2
 8007e48:	f7fd ffea 	bl	8005e20 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e50:	697b      	ldr	r3, [r7, #20]
	}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3718      	adds	r7, #24
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	20000770 	.word	0x20000770
 8007e60:	20000774 	.word	0x20000774
 8007e64:	20000878 	.word	0x20000878

08007e68 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b088      	sub	sp, #32
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007e76:	2301      	movs	r3, #1
 8007e78:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	f000 8085 	beq.w	8007f8c <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007e82:	69bb      	ldr	r3, [r7, #24]
 8007e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d10b      	bne.n	8007ea2 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 8007e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8e:	b672      	cpsid	i
 8007e90:	f383 8811 	msr	BASEPRI, r3
 8007e94:	f3bf 8f6f 	isb	sy
 8007e98:	f3bf 8f4f 	dsb	sy
 8007e9c:	b662      	cpsie	i
 8007e9e:	60fb      	str	r3, [r7, #12]
 8007ea0:	e7fe      	b.n	8007ea0 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007ea2:	69bb      	ldr	r3, [r7, #24]
 8007ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ea6:	683a      	ldr	r2, [r7, #0]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d902      	bls.n	8007eb2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	61fb      	str	r3, [r7, #28]
 8007eb0:	e002      	b.n	8007eb8 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eb6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ebc:	69fa      	ldr	r2, [r7, #28]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d064      	beq.n	8007f8c <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ec6:	697a      	ldr	r2, [r7, #20]
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d15f      	bne.n	8007f8c <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007ecc:	4b31      	ldr	r3, [pc, #196]	; (8007f94 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	69ba      	ldr	r2, [r7, #24]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d10b      	bne.n	8007eee <vTaskPriorityDisinheritAfterTimeout+0x86>
 8007ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eda:	b672      	cpsid	i
 8007edc:	f383 8811 	msr	BASEPRI, r3
 8007ee0:	f3bf 8f6f 	isb	sy
 8007ee4:	f3bf 8f4f 	dsb	sy
 8007ee8:	b662      	cpsie	i
 8007eea:	60bb      	str	r3, [r7, #8]
 8007eec:	e7fe      	b.n	8007eec <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	69fa      	ldr	r2, [r7, #28]
 8007ef8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	699b      	ldr	r3, [r3, #24]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	db04      	blt.n	8007f0c <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	f1c3 0207 	rsb	r2, r3, #7
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007f0c:	69bb      	ldr	r3, [r7, #24]
 8007f0e:	6959      	ldr	r1, [r3, #20]
 8007f10:	693a      	ldr	r2, [r7, #16]
 8007f12:	4613      	mov	r3, r2
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4413      	add	r3, r2
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	4a1f      	ldr	r2, [pc, #124]	; (8007f98 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8007f1c:	4413      	add	r3, r2
 8007f1e:	4299      	cmp	r1, r3
 8007f20:	d134      	bne.n	8007f8c <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	3304      	adds	r3, #4
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7fd ffd7 	bl	8005eda <uxListRemove>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d115      	bne.n	8007f5e <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f36:	4918      	ldr	r1, [pc, #96]	; (8007f98 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8007f38:	4613      	mov	r3, r2
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	4413      	add	r3, r2
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	440b      	add	r3, r1
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d10a      	bne.n	8007f5e <vTaskPriorityDisinheritAfterTimeout+0xf6>
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f52:	43da      	mvns	r2, r3
 8007f54:	4b11      	ldr	r3, [pc, #68]	; (8007f9c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4013      	ands	r3, r2
 8007f5a:	4a10      	ldr	r2, [pc, #64]	; (8007f9c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007f5c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f62:	2201      	movs	r2, #1
 8007f64:	409a      	lsls	r2, r3
 8007f66:	4b0d      	ldr	r3, [pc, #52]	; (8007f9c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	4a0b      	ldr	r2, [pc, #44]	; (8007f9c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007f6e:	6013      	str	r3, [r2, #0]
 8007f70:	69bb      	ldr	r3, [r7, #24]
 8007f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f74:	4613      	mov	r3, r2
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	4413      	add	r3, r2
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	4a06      	ldr	r2, [pc, #24]	; (8007f98 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8007f7e:	441a      	add	r2, r3
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	3304      	adds	r3, #4
 8007f84:	4619      	mov	r1, r3
 8007f86:	4610      	mov	r0, r2
 8007f88:	f7fd ff4a 	bl	8005e20 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f8c:	bf00      	nop
 8007f8e:	3720      	adds	r7, #32
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	20000770 	.word	0x20000770
 8007f98:	20000774 	.word	0x20000774
 8007f9c:	20000878 	.word	0x20000878

08007fa0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007fa0:	b480      	push	{r7}
 8007fa2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007fa4:	4b07      	ldr	r3, [pc, #28]	; (8007fc4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d004      	beq.n	8007fb6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007fac:	4b05      	ldr	r3, [pc, #20]	; (8007fc4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007fb2:	3201      	adds	r2, #1
 8007fb4:	659a      	str	r2, [r3, #88]	; 0x58
		}

		return pxCurrentTCB;
 8007fb6:	4b03      	ldr	r3, [pc, #12]	; (8007fc4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
	}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr
 8007fc4:	20000770 	.word	0x20000770

08007fc8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007fd2:	4b29      	ldr	r3, [pc, #164]	; (8008078 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fd8:	4b28      	ldr	r3, [pc, #160]	; (800807c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	3304      	adds	r3, #4
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7fd ff7b 	bl	8005eda <uxListRemove>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d10b      	bne.n	8008002 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007fea:	4b24      	ldr	r3, [pc, #144]	; (800807c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff6:	43da      	mvns	r2, r3
 8007ff8:	4b21      	ldr	r3, [pc, #132]	; (8008080 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4013      	ands	r3, r2
 8007ffe:	4a20      	ldr	r2, [pc, #128]	; (8008080 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008000:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008008:	d10a      	bne.n	8008020 <prvAddCurrentTaskToDelayedList+0x58>
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d007      	beq.n	8008020 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008010:	4b1a      	ldr	r3, [pc, #104]	; (800807c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	3304      	adds	r3, #4
 8008016:	4619      	mov	r1, r3
 8008018:	481a      	ldr	r0, [pc, #104]	; (8008084 <prvAddCurrentTaskToDelayedList+0xbc>)
 800801a:	f7fd ff01 	bl	8005e20 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800801e:	e026      	b.n	800806e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008020:	68fa      	ldr	r2, [r7, #12]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	4413      	add	r3, r2
 8008026:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008028:	4b14      	ldr	r3, [pc, #80]	; (800807c <prvAddCurrentTaskToDelayedList+0xb4>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	68ba      	ldr	r2, [r7, #8]
 800802e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008030:	68ba      	ldr	r2, [r7, #8]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	429a      	cmp	r2, r3
 8008036:	d209      	bcs.n	800804c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008038:	4b13      	ldr	r3, [pc, #76]	; (8008088 <prvAddCurrentTaskToDelayedList+0xc0>)
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	4b0f      	ldr	r3, [pc, #60]	; (800807c <prvAddCurrentTaskToDelayedList+0xb4>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	3304      	adds	r3, #4
 8008042:	4619      	mov	r1, r3
 8008044:	4610      	mov	r0, r2
 8008046:	f7fd ff0f 	bl	8005e68 <vListInsert>
}
 800804a:	e010      	b.n	800806e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800804c:	4b0f      	ldr	r3, [pc, #60]	; (800808c <prvAddCurrentTaskToDelayedList+0xc4>)
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	4b0a      	ldr	r3, [pc, #40]	; (800807c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	3304      	adds	r3, #4
 8008056:	4619      	mov	r1, r3
 8008058:	4610      	mov	r0, r2
 800805a:	f7fd ff05 	bl	8005e68 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800805e:	4b0c      	ldr	r3, [pc, #48]	; (8008090 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	68ba      	ldr	r2, [r7, #8]
 8008064:	429a      	cmp	r2, r3
 8008066:	d202      	bcs.n	800806e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008068:	4a09      	ldr	r2, [pc, #36]	; (8008090 <prvAddCurrentTaskToDelayedList+0xc8>)
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	6013      	str	r3, [r2, #0]
}
 800806e:	bf00      	nop
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	20000874 	.word	0x20000874
 800807c:	20000770 	.word	0x20000770
 8008080:	20000878 	.word	0x20000878
 8008084:	2000085c 	.word	0x2000085c
 8008088:	2000082c 	.word	0x2000082c
 800808c:	20000828 	.word	0x20000828
 8008090:	20000890 	.word	0x20000890

08008094 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b08a      	sub	sp, #40	; 0x28
 8008098:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800809a:	2300      	movs	r3, #0
 800809c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800809e:	f000 fb51 	bl	8008744 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80080a2:	4b1d      	ldr	r3, [pc, #116]	; (8008118 <xTimerCreateTimerTask+0x84>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d021      	beq.n	80080ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80080aa:	2300      	movs	r3, #0
 80080ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80080ae:	2300      	movs	r3, #0
 80080b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80080b2:	1d3a      	adds	r2, r7, #4
 80080b4:	f107 0108 	add.w	r1, r7, #8
 80080b8:	f107 030c 	add.w	r3, r7, #12
 80080bc:	4618      	mov	r0, r3
 80080be:	f7f8 fac9 	bl	8000654 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80080c2:	6879      	ldr	r1, [r7, #4]
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	9202      	str	r2, [sp, #8]
 80080ca:	9301      	str	r3, [sp, #4]
 80080cc:	2302      	movs	r3, #2
 80080ce:	9300      	str	r3, [sp, #0]
 80080d0:	2300      	movs	r3, #0
 80080d2:	460a      	mov	r2, r1
 80080d4:	4911      	ldr	r1, [pc, #68]	; (800811c <xTimerCreateTimerTask+0x88>)
 80080d6:	4812      	ldr	r0, [pc, #72]	; (8008120 <xTimerCreateTimerTask+0x8c>)
 80080d8:	f7fe ff74 	bl	8006fc4 <xTaskCreateStatic>
 80080dc:	4602      	mov	r2, r0
 80080de:	4b11      	ldr	r3, [pc, #68]	; (8008124 <xTimerCreateTimerTask+0x90>)
 80080e0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80080e2:	4b10      	ldr	r3, [pc, #64]	; (8008124 <xTimerCreateTimerTask+0x90>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d001      	beq.n	80080ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80080ea:	2301      	movs	r3, #1
 80080ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d10b      	bne.n	800810c <xTimerCreateTimerTask+0x78>
 80080f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f8:	b672      	cpsid	i
 80080fa:	f383 8811 	msr	BASEPRI, r3
 80080fe:	f3bf 8f6f 	isb	sy
 8008102:	f3bf 8f4f 	dsb	sy
 8008106:	b662      	cpsie	i
 8008108:	613b      	str	r3, [r7, #16]
 800810a:	e7fe      	b.n	800810a <xTimerCreateTimerTask+0x76>
	return xReturn;
 800810c:	697b      	ldr	r3, [r7, #20]
}
 800810e:	4618      	mov	r0, r3
 8008110:	3718      	adds	r7, #24
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	200008cc 	.word	0x200008cc
 800811c:	08018498 	.word	0x08018498
 8008120:	0800831d 	.word	0x0800831d
 8008124:	200008d0 	.word	0x200008d0

08008128 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8008128:	b580      	push	{r7, lr}
 800812a:	b088      	sub	sp, #32
 800812c:	af02      	add	r7, sp, #8
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	607a      	str	r2, [r7, #4]
 8008134:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8008136:	2028      	movs	r0, #40	; 0x28
 8008138:	f000 fd70 	bl	8008c1c <pvPortMalloc>
 800813c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00d      	beq.n	8008160 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	2200      	movs	r2, #0
 8008148:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	9301      	str	r3, [sp, #4]
 8008150:	6a3b      	ldr	r3, [r7, #32]
 8008152:	9300      	str	r3, [sp, #0]
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	68b9      	ldr	r1, [r7, #8]
 800815a:	68f8      	ldr	r0, [r7, #12]
 800815c:	f000 f805 	bl	800816a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8008160:	697b      	ldr	r3, [r7, #20]
	}
 8008162:	4618      	mov	r0, r3
 8008164:	3718      	adds	r7, #24
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b086      	sub	sp, #24
 800816e:	af00      	add	r7, sp, #0
 8008170:	60f8      	str	r0, [r7, #12]
 8008172:	60b9      	str	r1, [r7, #8]
 8008174:	607a      	str	r2, [r7, #4]
 8008176:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d10b      	bne.n	8008196 <prvInitialiseNewTimer+0x2c>
 800817e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008182:	b672      	cpsid	i
 8008184:	f383 8811 	msr	BASEPRI, r3
 8008188:	f3bf 8f6f 	isb	sy
 800818c:	f3bf 8f4f 	dsb	sy
 8008190:	b662      	cpsie	i
 8008192:	617b      	str	r3, [r7, #20]
 8008194:	e7fe      	b.n	8008194 <prvInitialiseNewTimer+0x2a>

	if( pxNewTimer != NULL )
 8008196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008198:	2b00      	cmp	r3, #0
 800819a:	d01e      	beq.n	80081da <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800819c:	f000 fad2 	bl	8008744 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80081a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80081a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a8:	68ba      	ldr	r2, [r7, #8]
 80081aa:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80081ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ae:	683a      	ldr	r2, [r7, #0]
 80081b0:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80081b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b4:	6a3a      	ldr	r2, [r7, #32]
 80081b6:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80081b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ba:	3304      	adds	r3, #4
 80081bc:	4618      	mov	r0, r3
 80081be:	f7fd fe22 	bl	8005e06 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d008      	beq.n	80081da <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80081c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80081ce:	f043 0304 	orr.w	r3, r3, #4
 80081d2:	b2da      	uxtb	r2, r3
 80081d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80081da:	bf00      	nop
 80081dc:	3718      	adds	r7, #24
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
	...

080081e4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b08a      	sub	sp, #40	; 0x28
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	607a      	str	r2, [r7, #4]
 80081f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80081f2:	2300      	movs	r3, #0
 80081f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d10b      	bne.n	8008214 <xTimerGenericCommand+0x30>
 80081fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008200:	b672      	cpsid	i
 8008202:	f383 8811 	msr	BASEPRI, r3
 8008206:	f3bf 8f6f 	isb	sy
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	b662      	cpsie	i
 8008210:	623b      	str	r3, [r7, #32]
 8008212:	e7fe      	b.n	8008212 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008214:	4b19      	ldr	r3, [pc, #100]	; (800827c <xTimerGenericCommand+0x98>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d02a      	beq.n	8008272 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	2b05      	cmp	r3, #5
 800822c:	dc18      	bgt.n	8008260 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800822e:	f7ff fcf5 	bl	8007c1c <xTaskGetSchedulerState>
 8008232:	4603      	mov	r3, r0
 8008234:	2b02      	cmp	r3, #2
 8008236:	d109      	bne.n	800824c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008238:	4b10      	ldr	r3, [pc, #64]	; (800827c <xTimerGenericCommand+0x98>)
 800823a:	6818      	ldr	r0, [r3, #0]
 800823c:	f107 0114 	add.w	r1, r7, #20
 8008240:	2300      	movs	r3, #0
 8008242:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008244:	f7fe f808 	bl	8006258 <xQueueGenericSend>
 8008248:	6278      	str	r0, [r7, #36]	; 0x24
 800824a:	e012      	b.n	8008272 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800824c:	4b0b      	ldr	r3, [pc, #44]	; (800827c <xTimerGenericCommand+0x98>)
 800824e:	6818      	ldr	r0, [r3, #0]
 8008250:	f107 0114 	add.w	r1, r7, #20
 8008254:	2300      	movs	r3, #0
 8008256:	2200      	movs	r2, #0
 8008258:	f7fd fffe 	bl	8006258 <xQueueGenericSend>
 800825c:	6278      	str	r0, [r7, #36]	; 0x24
 800825e:	e008      	b.n	8008272 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008260:	4b06      	ldr	r3, [pc, #24]	; (800827c <xTimerGenericCommand+0x98>)
 8008262:	6818      	ldr	r0, [r3, #0]
 8008264:	f107 0114 	add.w	r1, r7, #20
 8008268:	2300      	movs	r3, #0
 800826a:	683a      	ldr	r2, [r7, #0]
 800826c:	f7fe f8f6 	bl	800645c <xQueueGenericSendFromISR>
 8008270:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008274:	4618      	mov	r0, r3
 8008276:	3728      	adds	r7, #40	; 0x28
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}
 800827c:	200008cc 	.word	0x200008cc

08008280 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b088      	sub	sp, #32
 8008284:	af02      	add	r7, sp, #8
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800828a:	4b23      	ldr	r3, [pc, #140]	; (8008318 <prvProcessExpiredTimer+0x98>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	3304      	adds	r3, #4
 8008298:	4618      	mov	r0, r3
 800829a:	f7fd fe1e 	bl	8005eda <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80082a4:	f003 0304 	and.w	r3, r3, #4
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d023      	beq.n	80082f4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	699a      	ldr	r2, [r3, #24]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	18d1      	adds	r1, r2, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	683a      	ldr	r2, [r7, #0]
 80082b8:	6978      	ldr	r0, [r7, #20]
 80082ba:	f000 f8d3 	bl	8008464 <prvInsertTimerInActiveList>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d020      	beq.n	8008306 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80082c4:	2300      	movs	r3, #0
 80082c6:	9300      	str	r3, [sp, #0]
 80082c8:	2300      	movs	r3, #0
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	2100      	movs	r1, #0
 80082ce:	6978      	ldr	r0, [r7, #20]
 80082d0:	f7ff ff88 	bl	80081e4 <xTimerGenericCommand>
 80082d4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d114      	bne.n	8008306 <prvProcessExpiredTimer+0x86>
 80082dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e0:	b672      	cpsid	i
 80082e2:	f383 8811 	msr	BASEPRI, r3
 80082e6:	f3bf 8f6f 	isb	sy
 80082ea:	f3bf 8f4f 	dsb	sy
 80082ee:	b662      	cpsie	i
 80082f0:	60fb      	str	r3, [r7, #12]
 80082f2:	e7fe      	b.n	80082f2 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80082fa:	f023 0301 	bic.w	r3, r3, #1
 80082fe:	b2da      	uxtb	r2, r3
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	6a1b      	ldr	r3, [r3, #32]
 800830a:	6978      	ldr	r0, [r7, #20]
 800830c:	4798      	blx	r3
}
 800830e:	bf00      	nop
 8008310:	3718      	adds	r7, #24
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	200008c4 	.word	0x200008c4

0800831c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008324:	f107 0308 	add.w	r3, r7, #8
 8008328:	4618      	mov	r0, r3
 800832a:	f000 f857 	bl	80083dc <prvGetNextExpireTime>
 800832e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	4619      	mov	r1, r3
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	f000 f803 	bl	8008340 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800833a:	f000 f8d5 	bl	80084e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800833e:	e7f1      	b.n	8008324 <prvTimerTask+0x8>

08008340 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800834a:	f7ff f871 	bl	8007430 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800834e:	f107 0308 	add.w	r3, r7, #8
 8008352:	4618      	mov	r0, r3
 8008354:	f000 f866 	bl	8008424 <prvSampleTimeNow>
 8008358:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d130      	bne.n	80083c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d10a      	bne.n	800837c <prvProcessTimerOrBlockTask+0x3c>
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	429a      	cmp	r2, r3
 800836c:	d806      	bhi.n	800837c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800836e:	f7ff f86d 	bl	800744c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008372:	68f9      	ldr	r1, [r7, #12]
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f7ff ff83 	bl	8008280 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800837a:	e024      	b.n	80083c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d008      	beq.n	8008394 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008382:	4b13      	ldr	r3, [pc, #76]	; (80083d0 <prvProcessTimerOrBlockTask+0x90>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d101      	bne.n	8008390 <prvProcessTimerOrBlockTask+0x50>
 800838c:	2301      	movs	r3, #1
 800838e:	e000      	b.n	8008392 <prvProcessTimerOrBlockTask+0x52>
 8008390:	2300      	movs	r3, #0
 8008392:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008394:	4b0f      	ldr	r3, [pc, #60]	; (80083d4 <prvProcessTimerOrBlockTask+0x94>)
 8008396:	6818      	ldr	r0, [r3, #0]
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	1ad3      	subs	r3, r2, r3
 800839e:	683a      	ldr	r2, [r7, #0]
 80083a0:	4619      	mov	r1, r3
 80083a2:	f7fe fddb 	bl	8006f5c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80083a6:	f7ff f851 	bl	800744c <xTaskResumeAll>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d10a      	bne.n	80083c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80083b0:	4b09      	ldr	r3, [pc, #36]	; (80083d8 <prvProcessTimerOrBlockTask+0x98>)
 80083b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083b6:	601a      	str	r2, [r3, #0]
 80083b8:	f3bf 8f4f 	dsb	sy
 80083bc:	f3bf 8f6f 	isb	sy
}
 80083c0:	e001      	b.n	80083c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80083c2:	f7ff f843 	bl	800744c <xTaskResumeAll>
}
 80083c6:	bf00      	nop
 80083c8:	3710      	adds	r7, #16
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	200008c8 	.word	0x200008c8
 80083d4:	200008cc 	.word	0x200008cc
 80083d8:	e000ed04 	.word	0xe000ed04

080083dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80083dc:	b480      	push	{r7}
 80083de:	b085      	sub	sp, #20
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80083e4:	4b0e      	ldr	r3, [pc, #56]	; (8008420 <prvGetNextExpireTime+0x44>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d101      	bne.n	80083f2 <prvGetNextExpireTime+0x16>
 80083ee:	2201      	movs	r2, #1
 80083f0:	e000      	b.n	80083f4 <prvGetNextExpireTime+0x18>
 80083f2:	2200      	movs	r2, #0
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d105      	bne.n	800840c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008400:	4b07      	ldr	r3, [pc, #28]	; (8008420 <prvGetNextExpireTime+0x44>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	60fb      	str	r3, [r7, #12]
 800840a:	e001      	b.n	8008410 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800840c:	2300      	movs	r3, #0
 800840e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008410:	68fb      	ldr	r3, [r7, #12]
}
 8008412:	4618      	mov	r0, r3
 8008414:	3714      	adds	r7, #20
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr
 800841e:	bf00      	nop
 8008420:	200008c4 	.word	0x200008c4

08008424 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800842c:	f7ff f8ac 	bl	8007588 <xTaskGetTickCount>
 8008430:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008432:	4b0b      	ldr	r3, [pc, #44]	; (8008460 <prvSampleTimeNow+0x3c>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	429a      	cmp	r2, r3
 800843a:	d205      	bcs.n	8008448 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800843c:	f000 f91c 	bl	8008678 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	601a      	str	r2, [r3, #0]
 8008446:	e002      	b.n	800844e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800844e:	4a04      	ldr	r2, [pc, #16]	; (8008460 <prvSampleTimeNow+0x3c>)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008454:	68fb      	ldr	r3, [r7, #12]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	200008d4 	.word	0x200008d4

08008464 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b086      	sub	sp, #24
 8008468:	af00      	add	r7, sp, #0
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	60b9      	str	r1, [r7, #8]
 800846e:	607a      	str	r2, [r7, #4]
 8008470:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008472:	2300      	movs	r3, #0
 8008474:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	68ba      	ldr	r2, [r7, #8]
 800847a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	68fa      	ldr	r2, [r7, #12]
 8008480:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008482:	68ba      	ldr	r2, [r7, #8]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	429a      	cmp	r2, r3
 8008488:	d812      	bhi.n	80084b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	1ad2      	subs	r2, r2, r3
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	699b      	ldr	r3, [r3, #24]
 8008494:	429a      	cmp	r2, r3
 8008496:	d302      	bcc.n	800849e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008498:	2301      	movs	r3, #1
 800849a:	617b      	str	r3, [r7, #20]
 800849c:	e01b      	b.n	80084d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800849e:	4b10      	ldr	r3, [pc, #64]	; (80084e0 <prvInsertTimerInActiveList+0x7c>)
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	3304      	adds	r3, #4
 80084a6:	4619      	mov	r1, r3
 80084a8:	4610      	mov	r0, r2
 80084aa:	f7fd fcdd 	bl	8005e68 <vListInsert>
 80084ae:	e012      	b.n	80084d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d206      	bcs.n	80084c6 <prvInsertTimerInActiveList+0x62>
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d302      	bcc.n	80084c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80084c0:	2301      	movs	r3, #1
 80084c2:	617b      	str	r3, [r7, #20]
 80084c4:	e007      	b.n	80084d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80084c6:	4b07      	ldr	r3, [pc, #28]	; (80084e4 <prvInsertTimerInActiveList+0x80>)
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	3304      	adds	r3, #4
 80084ce:	4619      	mov	r1, r3
 80084d0:	4610      	mov	r0, r2
 80084d2:	f7fd fcc9 	bl	8005e68 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80084d6:	697b      	ldr	r3, [r7, #20]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3718      	adds	r7, #24
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	200008c8 	.word	0x200008c8
 80084e4:	200008c4 	.word	0x200008c4

080084e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b08c      	sub	sp, #48	; 0x30
 80084ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80084ee:	e0b0      	b.n	8008652 <prvProcessReceivedCommands+0x16a>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	f2c0 80ac 	blt.w	8008650 <prvProcessReceivedCommands+0x168>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80084fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fe:	695b      	ldr	r3, [r3, #20]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d004      	beq.n	800850e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008506:	3304      	adds	r3, #4
 8008508:	4618      	mov	r0, r3
 800850a:	f7fd fce6 	bl	8005eda <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800850e:	1d3b      	adds	r3, r7, #4
 8008510:	4618      	mov	r0, r3
 8008512:	f7ff ff87 	bl	8008424 <prvSampleTimeNow>
 8008516:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	2b09      	cmp	r3, #9
 800851c:	f200 8099 	bhi.w	8008652 <prvProcessReceivedCommands+0x16a>
 8008520:	a201      	add	r2, pc, #4	; (adr r2, 8008528 <prvProcessReceivedCommands+0x40>)
 8008522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008526:	bf00      	nop
 8008528:	08008551 	.word	0x08008551
 800852c:	08008551 	.word	0x08008551
 8008530:	08008551 	.word	0x08008551
 8008534:	080085c7 	.word	0x080085c7
 8008538:	080085db 	.word	0x080085db
 800853c:	08008627 	.word	0x08008627
 8008540:	08008551 	.word	0x08008551
 8008544:	08008551 	.word	0x08008551
 8008548:	080085c7 	.word	0x080085c7
 800854c:	080085db 	.word	0x080085db
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008552:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008556:	f043 0301 	orr.w	r3, r3, #1
 800855a:	b2da      	uxtb	r2, r3
 800855c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008562:	68fa      	ldr	r2, [r7, #12]
 8008564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008566:	699b      	ldr	r3, [r3, #24]
 8008568:	18d1      	adds	r1, r2, r3
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	6a3a      	ldr	r2, [r7, #32]
 800856e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008570:	f7ff ff78 	bl	8008464 <prvInsertTimerInActiveList>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d06b      	beq.n	8008652 <prvProcessReceivedCommands+0x16a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800857a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857c:	6a1b      	ldr	r3, [r3, #32]
 800857e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008580:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008584:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008588:	f003 0304 	and.w	r3, r3, #4
 800858c:	2b00      	cmp	r3, #0
 800858e:	d060      	beq.n	8008652 <prvProcessReceivedCommands+0x16a>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008590:	68fa      	ldr	r2, [r7, #12]
 8008592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008594:	699b      	ldr	r3, [r3, #24]
 8008596:	441a      	add	r2, r3
 8008598:	2300      	movs	r3, #0
 800859a:	9300      	str	r3, [sp, #0]
 800859c:	2300      	movs	r3, #0
 800859e:	2100      	movs	r1, #0
 80085a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80085a2:	f7ff fe1f 	bl	80081e4 <xTimerGenericCommand>
 80085a6:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d151      	bne.n	8008652 <prvProcessReceivedCommands+0x16a>
 80085ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b2:	b672      	cpsid	i
 80085b4:	f383 8811 	msr	BASEPRI, r3
 80085b8:	f3bf 8f6f 	isb	sy
 80085bc:	f3bf 8f4f 	dsb	sy
 80085c0:	b662      	cpsie	i
 80085c2:	61bb      	str	r3, [r7, #24]
 80085c4:	e7fe      	b.n	80085c4 <prvProcessReceivedCommands+0xdc>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80085c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80085cc:	f023 0301 	bic.w	r3, r3, #1
 80085d0:	b2da      	uxtb	r2, r3
 80085d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 80085d8:	e03b      	b.n	8008652 <prvProcessReceivedCommands+0x16a>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80085da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80085e0:	f043 0301 	orr.w	r3, r3, #1
 80085e4:	b2da      	uxtb	r2, r3
 80085e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80085ec:	68fa      	ldr	r2, [r7, #12]
 80085ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80085f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f4:	699b      	ldr	r3, [r3, #24]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d10b      	bne.n	8008612 <prvProcessReceivedCommands+0x12a>
 80085fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085fe:	b672      	cpsid	i
 8008600:	f383 8811 	msr	BASEPRI, r3
 8008604:	f3bf 8f6f 	isb	sy
 8008608:	f3bf 8f4f 	dsb	sy
 800860c:	b662      	cpsie	i
 800860e:	617b      	str	r3, [r7, #20]
 8008610:	e7fe      	b.n	8008610 <prvProcessReceivedCommands+0x128>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008614:	699a      	ldr	r2, [r3, #24]
 8008616:	6a3b      	ldr	r3, [r7, #32]
 8008618:	18d1      	adds	r1, r2, r3
 800861a:	6a3b      	ldr	r3, [r7, #32]
 800861c:	6a3a      	ldr	r2, [r7, #32]
 800861e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008620:	f7ff ff20 	bl	8008464 <prvInsertTimerInActiveList>
					break;
 8008624:	e015      	b.n	8008652 <prvProcessReceivedCommands+0x16a>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008628:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800862c:	f003 0302 	and.w	r3, r3, #2
 8008630:	2b00      	cmp	r3, #0
 8008632:	d103      	bne.n	800863c <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8008634:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008636:	f000 fbb9 	bl	8008dac <vPortFree>
 800863a:	e00a      	b.n	8008652 <prvProcessReceivedCommands+0x16a>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800863c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008642:	f023 0301 	bic.w	r3, r3, #1
 8008646:	b2da      	uxtb	r2, r3
 8008648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800864e:	e000      	b.n	8008652 <prvProcessReceivedCommands+0x16a>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008650:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008652:	4b08      	ldr	r3, [pc, #32]	; (8008674 <prvProcessReceivedCommands+0x18c>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f107 0108 	add.w	r1, r7, #8
 800865a:	2200      	movs	r2, #0
 800865c:	4618      	mov	r0, r3
 800865e:	f7fe f82b 	bl	80066b8 <xQueueReceive>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	f47f af43 	bne.w	80084f0 <prvProcessReceivedCommands+0x8>
	}
}
 800866a:	bf00      	nop
 800866c:	3728      	adds	r7, #40	; 0x28
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	200008cc 	.word	0x200008cc

08008678 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b088      	sub	sp, #32
 800867c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800867e:	e049      	b.n	8008714 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008680:	4b2e      	ldr	r3, [pc, #184]	; (800873c <prvSwitchTimerLists+0xc4>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	68db      	ldr	r3, [r3, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800868a:	4b2c      	ldr	r3, [pc, #176]	; (800873c <prvSwitchTimerLists+0xc4>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	68db      	ldr	r3, [r3, #12]
 8008692:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	3304      	adds	r3, #4
 8008698:	4618      	mov	r0, r3
 800869a:	f7fd fc1e 	bl	8005eda <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	6a1b      	ldr	r3, [r3, #32]
 80086a2:	68f8      	ldr	r0, [r7, #12]
 80086a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80086ac:	f003 0304 	and.w	r3, r3, #4
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d02f      	beq.n	8008714 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	699b      	ldr	r3, [r3, #24]
 80086b8:	693a      	ldr	r2, [r7, #16]
 80086ba:	4413      	add	r3, r2
 80086bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80086be:	68ba      	ldr	r2, [r7, #8]
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d90e      	bls.n	80086e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	68ba      	ldr	r2, [r7, #8]
 80086ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	68fa      	ldr	r2, [r7, #12]
 80086d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80086d2:	4b1a      	ldr	r3, [pc, #104]	; (800873c <prvSwitchTimerLists+0xc4>)
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	3304      	adds	r3, #4
 80086da:	4619      	mov	r1, r3
 80086dc:	4610      	mov	r0, r2
 80086de:	f7fd fbc3 	bl	8005e68 <vListInsert>
 80086e2:	e017      	b.n	8008714 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80086e4:	2300      	movs	r3, #0
 80086e6:	9300      	str	r3, [sp, #0]
 80086e8:	2300      	movs	r3, #0
 80086ea:	693a      	ldr	r2, [r7, #16]
 80086ec:	2100      	movs	r1, #0
 80086ee:	68f8      	ldr	r0, [r7, #12]
 80086f0:	f7ff fd78 	bl	80081e4 <xTimerGenericCommand>
 80086f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d10b      	bne.n	8008714 <prvSwitchTimerLists+0x9c>
 80086fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008700:	b672      	cpsid	i
 8008702:	f383 8811 	msr	BASEPRI, r3
 8008706:	f3bf 8f6f 	isb	sy
 800870a:	f3bf 8f4f 	dsb	sy
 800870e:	b662      	cpsie	i
 8008710:	603b      	str	r3, [r7, #0]
 8008712:	e7fe      	b.n	8008712 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008714:	4b09      	ldr	r3, [pc, #36]	; (800873c <prvSwitchTimerLists+0xc4>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d1b0      	bne.n	8008680 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800871e:	4b07      	ldr	r3, [pc, #28]	; (800873c <prvSwitchTimerLists+0xc4>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008724:	4b06      	ldr	r3, [pc, #24]	; (8008740 <prvSwitchTimerLists+0xc8>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a04      	ldr	r2, [pc, #16]	; (800873c <prvSwitchTimerLists+0xc4>)
 800872a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800872c:	4a04      	ldr	r2, [pc, #16]	; (8008740 <prvSwitchTimerLists+0xc8>)
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	6013      	str	r3, [r2, #0]
}
 8008732:	bf00      	nop
 8008734:	3718      	adds	r7, #24
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	200008c4 	.word	0x200008c4
 8008740:	200008c8 	.word	0x200008c8

08008744 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800874a:	f000 f945 	bl	80089d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800874e:	4b15      	ldr	r3, [pc, #84]	; (80087a4 <prvCheckForValidListAndQueue+0x60>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d120      	bne.n	8008798 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008756:	4814      	ldr	r0, [pc, #80]	; (80087a8 <prvCheckForValidListAndQueue+0x64>)
 8008758:	f7fd fb35 	bl	8005dc6 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800875c:	4813      	ldr	r0, [pc, #76]	; (80087ac <prvCheckForValidListAndQueue+0x68>)
 800875e:	f7fd fb32 	bl	8005dc6 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008762:	4b13      	ldr	r3, [pc, #76]	; (80087b0 <prvCheckForValidListAndQueue+0x6c>)
 8008764:	4a10      	ldr	r2, [pc, #64]	; (80087a8 <prvCheckForValidListAndQueue+0x64>)
 8008766:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008768:	4b12      	ldr	r3, [pc, #72]	; (80087b4 <prvCheckForValidListAndQueue+0x70>)
 800876a:	4a10      	ldr	r2, [pc, #64]	; (80087ac <prvCheckForValidListAndQueue+0x68>)
 800876c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800876e:	2300      	movs	r3, #0
 8008770:	9300      	str	r3, [sp, #0]
 8008772:	4b11      	ldr	r3, [pc, #68]	; (80087b8 <prvCheckForValidListAndQueue+0x74>)
 8008774:	4a11      	ldr	r2, [pc, #68]	; (80087bc <prvCheckForValidListAndQueue+0x78>)
 8008776:	210c      	movs	r1, #12
 8008778:	200a      	movs	r0, #10
 800877a:	f7fd fc43 	bl	8006004 <xQueueGenericCreateStatic>
 800877e:	4602      	mov	r2, r0
 8008780:	4b08      	ldr	r3, [pc, #32]	; (80087a4 <prvCheckForValidListAndQueue+0x60>)
 8008782:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008784:	4b07      	ldr	r3, [pc, #28]	; (80087a4 <prvCheckForValidListAndQueue+0x60>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d005      	beq.n	8008798 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800878c:	4b05      	ldr	r3, [pc, #20]	; (80087a4 <prvCheckForValidListAndQueue+0x60>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	490b      	ldr	r1, [pc, #44]	; (80087c0 <prvCheckForValidListAndQueue+0x7c>)
 8008792:	4618      	mov	r0, r3
 8008794:	f7fe fb90 	bl	8006eb8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008798:	f000 f950 	bl	8008a3c <vPortExitCritical>
}
 800879c:	bf00      	nop
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	200008cc 	.word	0x200008cc
 80087a8:	2000089c 	.word	0x2000089c
 80087ac:	200008b0 	.word	0x200008b0
 80087b0:	200008c4 	.word	0x200008c4
 80087b4:	200008c8 	.word	0x200008c8
 80087b8:	20000950 	.word	0x20000950
 80087bc:	200008d8 	.word	0x200008d8
 80087c0:	080184a0 	.word	0x080184a0

080087c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	3b04      	subs	r3, #4
 80087d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80087dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	3b04      	subs	r3, #4
 80087e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	f023 0201 	bic.w	r2, r3, #1
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	3b04      	subs	r3, #4
 80087f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80087f4:	4a0c      	ldr	r2, [pc, #48]	; (8008828 <pxPortInitialiseStack+0x64>)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	3b14      	subs	r3, #20
 80087fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	3b04      	subs	r3, #4
 800880a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f06f 0202 	mvn.w	r2, #2
 8008812:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	3b20      	subs	r3, #32
 8008818:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800881a:	68fb      	ldr	r3, [r7, #12]
}
 800881c:	4618      	mov	r0, r3
 800881e:	3714      	adds	r7, #20
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr
 8008828:	0800882d 	.word	0x0800882d

0800882c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800882c:	b480      	push	{r7}
 800882e:	b085      	sub	sp, #20
 8008830:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008832:	2300      	movs	r3, #0
 8008834:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008836:	4b13      	ldr	r3, [pc, #76]	; (8008884 <prvTaskExitError+0x58>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800883e:	d00b      	beq.n	8008858 <prvTaskExitError+0x2c>
 8008840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008844:	b672      	cpsid	i
 8008846:	f383 8811 	msr	BASEPRI, r3
 800884a:	f3bf 8f6f 	isb	sy
 800884e:	f3bf 8f4f 	dsb	sy
 8008852:	b662      	cpsie	i
 8008854:	60fb      	str	r3, [r7, #12]
 8008856:	e7fe      	b.n	8008856 <prvTaskExitError+0x2a>
 8008858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800885c:	b672      	cpsid	i
 800885e:	f383 8811 	msr	BASEPRI, r3
 8008862:	f3bf 8f6f 	isb	sy
 8008866:	f3bf 8f4f 	dsb	sy
 800886a:	b662      	cpsie	i
 800886c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800886e:	bf00      	nop
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d0fc      	beq.n	8008870 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008876:	bf00      	nop
 8008878:	3714      	adds	r7, #20
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr
 8008882:	bf00      	nop
 8008884:	2000000c 	.word	0x2000000c
	...

08008890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008890:	4b07      	ldr	r3, [pc, #28]	; (80088b0 <pxCurrentTCBConst2>)
 8008892:	6819      	ldr	r1, [r3, #0]
 8008894:	6808      	ldr	r0, [r1, #0]
 8008896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800889a:	f380 8809 	msr	PSP, r0
 800889e:	f3bf 8f6f 	isb	sy
 80088a2:	f04f 0000 	mov.w	r0, #0
 80088a6:	f380 8811 	msr	BASEPRI, r0
 80088aa:	4770      	bx	lr
 80088ac:	f3af 8000 	nop.w

080088b0 <pxCurrentTCBConst2>:
 80088b0:	20000770 	.word	0x20000770
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80088b4:	bf00      	nop
 80088b6:	bf00      	nop

080088b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80088b8:	4808      	ldr	r0, [pc, #32]	; (80088dc <prvPortStartFirstTask+0x24>)
 80088ba:	6800      	ldr	r0, [r0, #0]
 80088bc:	6800      	ldr	r0, [r0, #0]
 80088be:	f380 8808 	msr	MSP, r0
 80088c2:	f04f 0000 	mov.w	r0, #0
 80088c6:	f380 8814 	msr	CONTROL, r0
 80088ca:	b662      	cpsie	i
 80088cc:	b661      	cpsie	f
 80088ce:	f3bf 8f4f 	dsb	sy
 80088d2:	f3bf 8f6f 	isb	sy
 80088d6:	df00      	svc	0
 80088d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80088da:	bf00      	nop
 80088dc:	e000ed08 	.word	0xe000ed08

080088e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80088e6:	4b36      	ldr	r3, [pc, #216]	; (80089c0 <xPortStartScheduler+0xe0>)
 80088e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	22ff      	movs	r2, #255	; 0xff
 80088f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008900:	78fb      	ldrb	r3, [r7, #3]
 8008902:	b2db      	uxtb	r3, r3
 8008904:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008908:	b2da      	uxtb	r2, r3
 800890a:	4b2e      	ldr	r3, [pc, #184]	; (80089c4 <xPortStartScheduler+0xe4>)
 800890c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800890e:	4b2e      	ldr	r3, [pc, #184]	; (80089c8 <xPortStartScheduler+0xe8>)
 8008910:	2207      	movs	r2, #7
 8008912:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008914:	e009      	b.n	800892a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008916:	4b2c      	ldr	r3, [pc, #176]	; (80089c8 <xPortStartScheduler+0xe8>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	3b01      	subs	r3, #1
 800891c:	4a2a      	ldr	r2, [pc, #168]	; (80089c8 <xPortStartScheduler+0xe8>)
 800891e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008920:	78fb      	ldrb	r3, [r7, #3]
 8008922:	b2db      	uxtb	r3, r3
 8008924:	005b      	lsls	r3, r3, #1
 8008926:	b2db      	uxtb	r3, r3
 8008928:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800892a:	78fb      	ldrb	r3, [r7, #3]
 800892c:	b2db      	uxtb	r3, r3
 800892e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008932:	2b80      	cmp	r3, #128	; 0x80
 8008934:	d0ef      	beq.n	8008916 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008936:	4b24      	ldr	r3, [pc, #144]	; (80089c8 <xPortStartScheduler+0xe8>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f1c3 0307 	rsb	r3, r3, #7
 800893e:	2b04      	cmp	r3, #4
 8008940:	d00b      	beq.n	800895a <xPortStartScheduler+0x7a>
 8008942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008946:	b672      	cpsid	i
 8008948:	f383 8811 	msr	BASEPRI, r3
 800894c:	f3bf 8f6f 	isb	sy
 8008950:	f3bf 8f4f 	dsb	sy
 8008954:	b662      	cpsie	i
 8008956:	60bb      	str	r3, [r7, #8]
 8008958:	e7fe      	b.n	8008958 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800895a:	4b1b      	ldr	r3, [pc, #108]	; (80089c8 <xPortStartScheduler+0xe8>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	021b      	lsls	r3, r3, #8
 8008960:	4a19      	ldr	r2, [pc, #100]	; (80089c8 <xPortStartScheduler+0xe8>)
 8008962:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008964:	4b18      	ldr	r3, [pc, #96]	; (80089c8 <xPortStartScheduler+0xe8>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800896c:	4a16      	ldr	r2, [pc, #88]	; (80089c8 <xPortStartScheduler+0xe8>)
 800896e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	b2da      	uxtb	r2, r3
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008978:	4b14      	ldr	r3, [pc, #80]	; (80089cc <xPortStartScheduler+0xec>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a13      	ldr	r2, [pc, #76]	; (80089cc <xPortStartScheduler+0xec>)
 800897e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008982:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008984:	4b11      	ldr	r3, [pc, #68]	; (80089cc <xPortStartScheduler+0xec>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a10      	ldr	r2, [pc, #64]	; (80089cc <xPortStartScheduler+0xec>)
 800898a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800898e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008990:	f000 f8d4 	bl	8008b3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008994:	4b0e      	ldr	r3, [pc, #56]	; (80089d0 <xPortStartScheduler+0xf0>)
 8008996:	2200      	movs	r2, #0
 8008998:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800899a:	f000 f8f3 	bl	8008b84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800899e:	4b0d      	ldr	r3, [pc, #52]	; (80089d4 <xPortStartScheduler+0xf4>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a0c      	ldr	r2, [pc, #48]	; (80089d4 <xPortStartScheduler+0xf4>)
 80089a4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80089a8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80089aa:	f7ff ff85 	bl	80088b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80089ae:	f7fe fec7 	bl	8007740 <vTaskSwitchContext>
	prvTaskExitError();
 80089b2:	f7ff ff3b 	bl	800882c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80089b6:	2300      	movs	r3, #0
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3710      	adds	r7, #16
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	e000e400 	.word	0xe000e400
 80089c4:	20000998 	.word	0x20000998
 80089c8:	2000099c 	.word	0x2000099c
 80089cc:	e000ed20 	.word	0xe000ed20
 80089d0:	2000000c 	.word	0x2000000c
 80089d4:	e000ef34 	.word	0xe000ef34

080089d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80089d8:	b480      	push	{r7}
 80089da:	b083      	sub	sp, #12
 80089dc:	af00      	add	r7, sp, #0
 80089de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e2:	b672      	cpsid	i
 80089e4:	f383 8811 	msr	BASEPRI, r3
 80089e8:	f3bf 8f6f 	isb	sy
 80089ec:	f3bf 8f4f 	dsb	sy
 80089f0:	b662      	cpsie	i
 80089f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80089f4:	4b0f      	ldr	r3, [pc, #60]	; (8008a34 <vPortEnterCritical+0x5c>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	3301      	adds	r3, #1
 80089fa:	4a0e      	ldr	r2, [pc, #56]	; (8008a34 <vPortEnterCritical+0x5c>)
 80089fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80089fe:	4b0d      	ldr	r3, [pc, #52]	; (8008a34 <vPortEnterCritical+0x5c>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d110      	bne.n	8008a28 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008a06:	4b0c      	ldr	r3, [pc, #48]	; (8008a38 <vPortEnterCritical+0x60>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00b      	beq.n	8008a28 <vPortEnterCritical+0x50>
 8008a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a14:	b672      	cpsid	i
 8008a16:	f383 8811 	msr	BASEPRI, r3
 8008a1a:	f3bf 8f6f 	isb	sy
 8008a1e:	f3bf 8f4f 	dsb	sy
 8008a22:	b662      	cpsie	i
 8008a24:	603b      	str	r3, [r7, #0]
 8008a26:	e7fe      	b.n	8008a26 <vPortEnterCritical+0x4e>
	}
}
 8008a28:	bf00      	nop
 8008a2a:	370c      	adds	r7, #12
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr
 8008a34:	2000000c 	.word	0x2000000c
 8008a38:	e000ed04 	.word	0xe000ed04

08008a3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008a42:	4b12      	ldr	r3, [pc, #72]	; (8008a8c <vPortExitCritical+0x50>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d10b      	bne.n	8008a62 <vPortExitCritical+0x26>
 8008a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4e:	b672      	cpsid	i
 8008a50:	f383 8811 	msr	BASEPRI, r3
 8008a54:	f3bf 8f6f 	isb	sy
 8008a58:	f3bf 8f4f 	dsb	sy
 8008a5c:	b662      	cpsie	i
 8008a5e:	607b      	str	r3, [r7, #4]
 8008a60:	e7fe      	b.n	8008a60 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8008a62:	4b0a      	ldr	r3, [pc, #40]	; (8008a8c <vPortExitCritical+0x50>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	3b01      	subs	r3, #1
 8008a68:	4a08      	ldr	r2, [pc, #32]	; (8008a8c <vPortExitCritical+0x50>)
 8008a6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008a6c:	4b07      	ldr	r3, [pc, #28]	; (8008a8c <vPortExitCritical+0x50>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d104      	bne.n	8008a7e <vPortExitCritical+0x42>
 8008a74:	2300      	movs	r3, #0
 8008a76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008a7e:	bf00      	nop
 8008a80:	370c      	adds	r7, #12
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr
 8008a8a:	bf00      	nop
 8008a8c:	2000000c 	.word	0x2000000c

08008a90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008a90:	f3ef 8009 	mrs	r0, PSP
 8008a94:	f3bf 8f6f 	isb	sy
 8008a98:	4b15      	ldr	r3, [pc, #84]	; (8008af0 <pxCurrentTCBConst>)
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	f01e 0f10 	tst.w	lr, #16
 8008aa0:	bf08      	it	eq
 8008aa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008aa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aaa:	6010      	str	r0, [r2, #0]
 8008aac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008ab0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008ab4:	b672      	cpsid	i
 8008ab6:	f380 8811 	msr	BASEPRI, r0
 8008aba:	f3bf 8f4f 	dsb	sy
 8008abe:	f3bf 8f6f 	isb	sy
 8008ac2:	b662      	cpsie	i
 8008ac4:	f7fe fe3c 	bl	8007740 <vTaskSwitchContext>
 8008ac8:	f04f 0000 	mov.w	r0, #0
 8008acc:	f380 8811 	msr	BASEPRI, r0
 8008ad0:	bc09      	pop	{r0, r3}
 8008ad2:	6819      	ldr	r1, [r3, #0]
 8008ad4:	6808      	ldr	r0, [r1, #0]
 8008ad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ada:	f01e 0f10 	tst.w	lr, #16
 8008ade:	bf08      	it	eq
 8008ae0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008ae4:	f380 8809 	msr	PSP, r0
 8008ae8:	f3bf 8f6f 	isb	sy
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop

08008af0 <pxCurrentTCBConst>:
 8008af0:	20000770 	.word	0x20000770
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008af4:	bf00      	nop
 8008af6:	bf00      	nop

08008af8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
	__asm volatile
 8008afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b02:	b672      	cpsid	i
 8008b04:	f383 8811 	msr	BASEPRI, r3
 8008b08:	f3bf 8f6f 	isb	sy
 8008b0c:	f3bf 8f4f 	dsb	sy
 8008b10:	b662      	cpsie	i
 8008b12:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008b14:	f7fe fd5a 	bl	80075cc <xTaskIncrementTick>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d003      	beq.n	8008b26 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008b1e:	4b06      	ldr	r3, [pc, #24]	; (8008b38 <SysTick_Handler+0x40>)
 8008b20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b24:	601a      	str	r2, [r3, #0]
 8008b26:	2300      	movs	r3, #0
 8008b28:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008b30:	bf00      	nop
 8008b32:	3708      	adds	r7, #8
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}
 8008b38:	e000ed04 	.word	0xe000ed04

08008b3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008b40:	4b0b      	ldr	r3, [pc, #44]	; (8008b70 <vPortSetupTimerInterrupt+0x34>)
 8008b42:	2200      	movs	r2, #0
 8008b44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008b46:	4b0b      	ldr	r3, [pc, #44]	; (8008b74 <vPortSetupTimerInterrupt+0x38>)
 8008b48:	2200      	movs	r2, #0
 8008b4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008b4c:	4b0a      	ldr	r3, [pc, #40]	; (8008b78 <vPortSetupTimerInterrupt+0x3c>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a0a      	ldr	r2, [pc, #40]	; (8008b7c <vPortSetupTimerInterrupt+0x40>)
 8008b52:	fba2 2303 	umull	r2, r3, r2, r3
 8008b56:	099b      	lsrs	r3, r3, #6
 8008b58:	4a09      	ldr	r2, [pc, #36]	; (8008b80 <vPortSetupTimerInterrupt+0x44>)
 8008b5a:	3b01      	subs	r3, #1
 8008b5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008b5e:	4b04      	ldr	r3, [pc, #16]	; (8008b70 <vPortSetupTimerInterrupt+0x34>)
 8008b60:	2207      	movs	r2, #7
 8008b62:	601a      	str	r2, [r3, #0]
}
 8008b64:	bf00      	nop
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr
 8008b6e:	bf00      	nop
 8008b70:	e000e010 	.word	0xe000e010
 8008b74:	e000e018 	.word	0xe000e018
 8008b78:	20000000 	.word	0x20000000
 8008b7c:	10624dd3 	.word	0x10624dd3
 8008b80:	e000e014 	.word	0xe000e014

08008b84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008b84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008b94 <vPortEnableVFP+0x10>
 8008b88:	6801      	ldr	r1, [r0, #0]
 8008b8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008b8e:	6001      	str	r1, [r0, #0]
 8008b90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008b92:	bf00      	nop
 8008b94:	e000ed88 	.word	0xe000ed88

08008b98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008b98:	b480      	push	{r7}
 8008b9a:	b085      	sub	sp, #20
 8008b9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008b9e:	f3ef 8305 	mrs	r3, IPSR
 8008ba2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2b0f      	cmp	r3, #15
 8008ba8:	d915      	bls.n	8008bd6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008baa:	4a18      	ldr	r2, [pc, #96]	; (8008c0c <vPortValidateInterruptPriority+0x74>)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	4413      	add	r3, r2
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008bb4:	4b16      	ldr	r3, [pc, #88]	; (8008c10 <vPortValidateInterruptPriority+0x78>)
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	7afa      	ldrb	r2, [r7, #11]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d20b      	bcs.n	8008bd6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc2:	b672      	cpsid	i
 8008bc4:	f383 8811 	msr	BASEPRI, r3
 8008bc8:	f3bf 8f6f 	isb	sy
 8008bcc:	f3bf 8f4f 	dsb	sy
 8008bd0:	b662      	cpsie	i
 8008bd2:	607b      	str	r3, [r7, #4]
 8008bd4:	e7fe      	b.n	8008bd4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008bd6:	4b0f      	ldr	r3, [pc, #60]	; (8008c14 <vPortValidateInterruptPriority+0x7c>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008bde:	4b0e      	ldr	r3, [pc, #56]	; (8008c18 <vPortValidateInterruptPriority+0x80>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d90b      	bls.n	8008bfe <vPortValidateInterruptPriority+0x66>
 8008be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bea:	b672      	cpsid	i
 8008bec:	f383 8811 	msr	BASEPRI, r3
 8008bf0:	f3bf 8f6f 	isb	sy
 8008bf4:	f3bf 8f4f 	dsb	sy
 8008bf8:	b662      	cpsie	i
 8008bfa:	603b      	str	r3, [r7, #0]
 8008bfc:	e7fe      	b.n	8008bfc <vPortValidateInterruptPriority+0x64>
	}
 8008bfe:	bf00      	nop
 8008c00:	3714      	adds	r7, #20
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr
 8008c0a:	bf00      	nop
 8008c0c:	e000e3f0 	.word	0xe000e3f0
 8008c10:	20000998 	.word	0x20000998
 8008c14:	e000ed0c 	.word	0xe000ed0c
 8008c18:	2000099c 	.word	0x2000099c

08008c1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b08a      	sub	sp, #40	; 0x28
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008c24:	2300      	movs	r3, #0
 8008c26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008c28:	f7fe fc02 	bl	8007430 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008c2c:	4b5a      	ldr	r3, [pc, #360]	; (8008d98 <pvPortMalloc+0x17c>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d101      	bne.n	8008c38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008c34:	f000 f916 	bl	8008e64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008c38:	4b58      	ldr	r3, [pc, #352]	; (8008d9c <pvPortMalloc+0x180>)
 8008c3a:	681a      	ldr	r2, [r3, #0]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	4013      	ands	r3, r2
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	f040 8090 	bne.w	8008d66 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d01e      	beq.n	8008c8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008c4c:	2208      	movs	r2, #8
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4413      	add	r3, r2
 8008c52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f003 0307 	and.w	r3, r3, #7
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d015      	beq.n	8008c8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f023 0307 	bic.w	r3, r3, #7
 8008c64:	3308      	adds	r3, #8
 8008c66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f003 0307 	and.w	r3, r3, #7
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d00b      	beq.n	8008c8a <pvPortMalloc+0x6e>
 8008c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c76:	b672      	cpsid	i
 8008c78:	f383 8811 	msr	BASEPRI, r3
 8008c7c:	f3bf 8f6f 	isb	sy
 8008c80:	f3bf 8f4f 	dsb	sy
 8008c84:	b662      	cpsie	i
 8008c86:	617b      	str	r3, [r7, #20]
 8008c88:	e7fe      	b.n	8008c88 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d06a      	beq.n	8008d66 <pvPortMalloc+0x14a>
 8008c90:	4b43      	ldr	r3, [pc, #268]	; (8008da0 <pvPortMalloc+0x184>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d865      	bhi.n	8008d66 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008c9a:	4b42      	ldr	r3, [pc, #264]	; (8008da4 <pvPortMalloc+0x188>)
 8008c9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008c9e:	4b41      	ldr	r3, [pc, #260]	; (8008da4 <pvPortMalloc+0x188>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ca4:	e004      	b.n	8008cb0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d903      	bls.n	8008cc2 <pvPortMalloc+0xa6>
 8008cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d1f1      	bne.n	8008ca6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008cc2:	4b35      	ldr	r3, [pc, #212]	; (8008d98 <pvPortMalloc+0x17c>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d04c      	beq.n	8008d66 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ccc:	6a3b      	ldr	r3, [r7, #32]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2208      	movs	r2, #8
 8008cd2:	4413      	add	r3, r2
 8008cd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	6a3b      	ldr	r3, [r7, #32]
 8008cdc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce0:	685a      	ldr	r2, [r3, #4]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	1ad2      	subs	r2, r2, r3
 8008ce6:	2308      	movs	r3, #8
 8008ce8:	005b      	lsls	r3, r3, #1
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d920      	bls.n	8008d30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4413      	add	r3, r2
 8008cf4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008cf6:	69bb      	ldr	r3, [r7, #24]
 8008cf8:	f003 0307 	and.w	r3, r3, #7
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d00b      	beq.n	8008d18 <pvPortMalloc+0xfc>
 8008d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d04:	b672      	cpsid	i
 8008d06:	f383 8811 	msr	BASEPRI, r3
 8008d0a:	f3bf 8f6f 	isb	sy
 8008d0e:	f3bf 8f4f 	dsb	sy
 8008d12:	b662      	cpsie	i
 8008d14:	613b      	str	r3, [r7, #16]
 8008d16:	e7fe      	b.n	8008d16 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1a:	685a      	ldr	r2, [r3, #4]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	1ad2      	subs	r2, r2, r3
 8008d20:	69bb      	ldr	r3, [r7, #24]
 8008d22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008d2a:	69b8      	ldr	r0, [r7, #24]
 8008d2c:	f000 f8fc 	bl	8008f28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008d30:	4b1b      	ldr	r3, [pc, #108]	; (8008da0 <pvPortMalloc+0x184>)
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	1ad3      	subs	r3, r2, r3
 8008d3a:	4a19      	ldr	r2, [pc, #100]	; (8008da0 <pvPortMalloc+0x184>)
 8008d3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008d3e:	4b18      	ldr	r3, [pc, #96]	; (8008da0 <pvPortMalloc+0x184>)
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	4b19      	ldr	r3, [pc, #100]	; (8008da8 <pvPortMalloc+0x18c>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d203      	bcs.n	8008d52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008d4a:	4b15      	ldr	r3, [pc, #84]	; (8008da0 <pvPortMalloc+0x184>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a16      	ldr	r2, [pc, #88]	; (8008da8 <pvPortMalloc+0x18c>)
 8008d50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d54:	685a      	ldr	r2, [r3, #4]
 8008d56:	4b11      	ldr	r3, [pc, #68]	; (8008d9c <pvPortMalloc+0x180>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	431a      	orrs	r2, r3
 8008d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d62:	2200      	movs	r2, #0
 8008d64:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008d66:	f7fe fb71 	bl	800744c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	f003 0307 	and.w	r3, r3, #7
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d00b      	beq.n	8008d8c <pvPortMalloc+0x170>
 8008d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d78:	b672      	cpsid	i
 8008d7a:	f383 8811 	msr	BASEPRI, r3
 8008d7e:	f3bf 8f6f 	isb	sy
 8008d82:	f3bf 8f4f 	dsb	sy
 8008d86:	b662      	cpsie	i
 8008d88:	60fb      	str	r3, [r7, #12]
 8008d8a:	e7fe      	b.n	8008d8a <pvPortMalloc+0x16e>
	return pvReturn;
 8008d8c:	69fb      	ldr	r3, [r7, #28]
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3728      	adds	r7, #40	; 0x28
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	200045a8 	.word	0x200045a8
 8008d9c:	200045b4 	.word	0x200045b4
 8008da0:	200045ac 	.word	0x200045ac
 8008da4:	200045a0 	.word	0x200045a0
 8008da8:	200045b0 	.word	0x200045b0

08008dac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b086      	sub	sp, #24
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d04a      	beq.n	8008e54 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008dbe:	2308      	movs	r3, #8
 8008dc0:	425b      	negs	r3, r3
 8008dc2:	697a      	ldr	r2, [r7, #20]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	685a      	ldr	r2, [r3, #4]
 8008dd0:	4b22      	ldr	r3, [pc, #136]	; (8008e5c <vPortFree+0xb0>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4013      	ands	r3, r2
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d10b      	bne.n	8008df2 <vPortFree+0x46>
 8008dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dde:	b672      	cpsid	i
 8008de0:	f383 8811 	msr	BASEPRI, r3
 8008de4:	f3bf 8f6f 	isb	sy
 8008de8:	f3bf 8f4f 	dsb	sy
 8008dec:	b662      	cpsie	i
 8008dee:	60fb      	str	r3, [r7, #12]
 8008df0:	e7fe      	b.n	8008df0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d00b      	beq.n	8008e12 <vPortFree+0x66>
 8008dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfe:	b672      	cpsid	i
 8008e00:	f383 8811 	msr	BASEPRI, r3
 8008e04:	f3bf 8f6f 	isb	sy
 8008e08:	f3bf 8f4f 	dsb	sy
 8008e0c:	b662      	cpsie	i
 8008e0e:	60bb      	str	r3, [r7, #8]
 8008e10:	e7fe      	b.n	8008e10 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	685a      	ldr	r2, [r3, #4]
 8008e16:	4b11      	ldr	r3, [pc, #68]	; (8008e5c <vPortFree+0xb0>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4013      	ands	r3, r2
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d019      	beq.n	8008e54 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d115      	bne.n	8008e54 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	685a      	ldr	r2, [r3, #4]
 8008e2c:	4b0b      	ldr	r3, [pc, #44]	; (8008e5c <vPortFree+0xb0>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	43db      	mvns	r3, r3
 8008e32:	401a      	ands	r2, r3
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008e38:	f7fe fafa 	bl	8007430 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	685a      	ldr	r2, [r3, #4]
 8008e40:	4b07      	ldr	r3, [pc, #28]	; (8008e60 <vPortFree+0xb4>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4413      	add	r3, r2
 8008e46:	4a06      	ldr	r2, [pc, #24]	; (8008e60 <vPortFree+0xb4>)
 8008e48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008e4a:	6938      	ldr	r0, [r7, #16]
 8008e4c:	f000 f86c 	bl	8008f28 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008e50:	f7fe fafc 	bl	800744c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008e54:	bf00      	nop
 8008e56:	3718      	adds	r7, #24
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}
 8008e5c:	200045b4 	.word	0x200045b4
 8008e60:	200045ac 	.word	0x200045ac

08008e64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008e64:	b480      	push	{r7}
 8008e66:	b085      	sub	sp, #20
 8008e68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008e6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008e6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008e70:	4b27      	ldr	r3, [pc, #156]	; (8008f10 <prvHeapInit+0xac>)
 8008e72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f003 0307 	and.w	r3, r3, #7
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00c      	beq.n	8008e98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	3307      	adds	r3, #7
 8008e82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f023 0307 	bic.w	r3, r3, #7
 8008e8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008e8c:	68ba      	ldr	r2, [r7, #8]
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	1ad3      	subs	r3, r2, r3
 8008e92:	4a1f      	ldr	r2, [pc, #124]	; (8008f10 <prvHeapInit+0xac>)
 8008e94:	4413      	add	r3, r2
 8008e96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008e9c:	4a1d      	ldr	r2, [pc, #116]	; (8008f14 <prvHeapInit+0xb0>)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008ea2:	4b1c      	ldr	r3, [pc, #112]	; (8008f14 <prvHeapInit+0xb0>)
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	68ba      	ldr	r2, [r7, #8]
 8008eac:	4413      	add	r3, r2
 8008eae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008eb0:	2208      	movs	r2, #8
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	1a9b      	subs	r3, r3, r2
 8008eb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f023 0307 	bic.w	r3, r3, #7
 8008ebe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	4a15      	ldr	r2, [pc, #84]	; (8008f18 <prvHeapInit+0xb4>)
 8008ec4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008ec6:	4b14      	ldr	r3, [pc, #80]	; (8008f18 <prvHeapInit+0xb4>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008ece:	4b12      	ldr	r3, [pc, #72]	; (8008f18 <prvHeapInit+0xb4>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	1ad2      	subs	r2, r2, r3
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008ee4:	4b0c      	ldr	r3, [pc, #48]	; (8008f18 <prvHeapInit+0xb4>)
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	4a0a      	ldr	r2, [pc, #40]	; (8008f1c <prvHeapInit+0xb8>)
 8008ef2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	4a09      	ldr	r2, [pc, #36]	; (8008f20 <prvHeapInit+0xbc>)
 8008efa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008efc:	4b09      	ldr	r3, [pc, #36]	; (8008f24 <prvHeapInit+0xc0>)
 8008efe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008f02:	601a      	str	r2, [r3, #0]
}
 8008f04:	bf00      	nop
 8008f06:	3714      	adds	r7, #20
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr
 8008f10:	200009a0 	.word	0x200009a0
 8008f14:	200045a0 	.word	0x200045a0
 8008f18:	200045a8 	.word	0x200045a8
 8008f1c:	200045b0 	.word	0x200045b0
 8008f20:	200045ac 	.word	0x200045ac
 8008f24:	200045b4 	.word	0x200045b4

08008f28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b085      	sub	sp, #20
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008f30:	4b28      	ldr	r3, [pc, #160]	; (8008fd4 <prvInsertBlockIntoFreeList+0xac>)
 8008f32:	60fb      	str	r3, [r7, #12]
 8008f34:	e002      	b.n	8008f3c <prvInsertBlockIntoFreeList+0x14>
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	60fb      	str	r3, [r7, #12]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d8f7      	bhi.n	8008f36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	68ba      	ldr	r2, [r7, #8]
 8008f50:	4413      	add	r3, r2
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d108      	bne.n	8008f6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	685a      	ldr	r2, [r3, #4]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	441a      	add	r2, r3
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	68ba      	ldr	r2, [r7, #8]
 8008f74:	441a      	add	r2, r3
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d118      	bne.n	8008fb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	4b15      	ldr	r3, [pc, #84]	; (8008fd8 <prvInsertBlockIntoFreeList+0xb0>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d00d      	beq.n	8008fa6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	685a      	ldr	r2, [r3, #4]
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	441a      	add	r2, r3
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	601a      	str	r2, [r3, #0]
 8008fa4:	e008      	b.n	8008fb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008fa6:	4b0c      	ldr	r3, [pc, #48]	; (8008fd8 <prvInsertBlockIntoFreeList+0xb0>)
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	601a      	str	r2, [r3, #0]
 8008fae:	e003      	b.n	8008fb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008fb8:	68fa      	ldr	r2, [r7, #12]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d002      	beq.n	8008fc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008fc6:	bf00      	nop
 8008fc8:	3714      	adds	r7, #20
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr
 8008fd2:	bf00      	nop
 8008fd4:	200045a0 	.word	0x200045a0
 8008fd8:	200045a8 	.word	0x200045a8

08008fdc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	330c      	adds	r3, #12
 8008fec:	461a      	mov	r2, r3
 8008fee:	6839      	ldr	r1, [r7, #0]
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f003 fad7 	bl	800c5a4 <tcpip_send_msg_wait_sem>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8008ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d103      	bne.n	800900a <netconn_apimsg+0x2e>
    return apimsg->err;
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8009008:	e001      	b.n	800900e <netconn_apimsg+0x32>
  }
  return err;
 800900a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800900e:	4618      	mov	r0, r3
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
	...

08009018 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b08c      	sub	sp, #48	; 0x30
 800901c:	af00      	add	r7, sp, #0
 800901e:	4603      	mov	r3, r0
 8009020:	603a      	str	r2, [r7, #0]
 8009022:	71fb      	strb	r3, [r7, #7]
 8009024:	460b      	mov	r3, r1
 8009026:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8009028:	79fb      	ldrb	r3, [r7, #7]
 800902a:	6839      	ldr	r1, [r7, #0]
 800902c:	4618      	mov	r0, r3
 800902e:	f001 f8b3 	bl	800a198 <netconn_alloc>
 8009032:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8009034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009036:	2b00      	cmp	r3, #0
 8009038:	d054      	beq.n	80090e4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800903a:	79bb      	ldrb	r3, [r7, #6]
 800903c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800903e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009040:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8009042:	f107 0308 	add.w	r3, r7, #8
 8009046:	4619      	mov	r1, r3
 8009048:	4829      	ldr	r0, [pc, #164]	; (80090f0 <netconn_new_with_proto_and_callback+0xd8>)
 800904a:	f7ff ffc7 	bl	8008fdc <netconn_apimsg>
 800904e:	4603      	mov	r3, r0
 8009050:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8009054:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009058:	2b00      	cmp	r3, #0
 800905a:	d043      	beq.n	80090e4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800905c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d005      	beq.n	8009070 <netconn_new_with_proto_and_callback+0x58>
 8009064:	4b23      	ldr	r3, [pc, #140]	; (80090f4 <netconn_new_with_proto_and_callback+0xdc>)
 8009066:	22a3      	movs	r2, #163	; 0xa3
 8009068:	4923      	ldr	r1, [pc, #140]	; (80090f8 <netconn_new_with_proto_and_callback+0xe0>)
 800906a:	4824      	ldr	r0, [pc, #144]	; (80090fc <netconn_new_with_proto_and_callback+0xe4>)
 800906c:	f00e f86e 	bl	801714c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8009070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009072:	3310      	adds	r3, #16
 8009074:	4618      	mov	r0, r3
 8009076:	f00d febc 	bl	8016df2 <sys_mbox_valid>
 800907a:	4603      	mov	r3, r0
 800907c:	2b00      	cmp	r3, #0
 800907e:	d105      	bne.n	800908c <netconn_new_with_proto_and_callback+0x74>
 8009080:	4b1c      	ldr	r3, [pc, #112]	; (80090f4 <netconn_new_with_proto_and_callback+0xdc>)
 8009082:	22a4      	movs	r2, #164	; 0xa4
 8009084:	491e      	ldr	r1, [pc, #120]	; (8009100 <netconn_new_with_proto_and_callback+0xe8>)
 8009086:	481d      	ldr	r0, [pc, #116]	; (80090fc <netconn_new_with_proto_and_callback+0xe4>)
 8009088:	f00e f860 	bl	801714c <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800908c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800908e:	3314      	adds	r3, #20
 8009090:	4618      	mov	r0, r3
 8009092:	f00d feae 	bl	8016df2 <sys_mbox_valid>
 8009096:	4603      	mov	r3, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	d005      	beq.n	80090a8 <netconn_new_with_proto_and_callback+0x90>
 800909c:	4b15      	ldr	r3, [pc, #84]	; (80090f4 <netconn_new_with_proto_and_callback+0xdc>)
 800909e:	22a6      	movs	r2, #166	; 0xa6
 80090a0:	4918      	ldr	r1, [pc, #96]	; (8009104 <netconn_new_with_proto_and_callback+0xec>)
 80090a2:	4816      	ldr	r0, [pc, #88]	; (80090fc <netconn_new_with_proto_and_callback+0xe4>)
 80090a4:	f00e f852 	bl	801714c <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80090a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090aa:	330c      	adds	r3, #12
 80090ac:	4618      	mov	r0, r3
 80090ae:	f00d ff31 	bl	8016f14 <sys_sem_valid>
 80090b2:	4603      	mov	r3, r0
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d105      	bne.n	80090c4 <netconn_new_with_proto_and_callback+0xac>
 80090b8:	4b0e      	ldr	r3, [pc, #56]	; (80090f4 <netconn_new_with_proto_and_callback+0xdc>)
 80090ba:	22a9      	movs	r2, #169	; 0xa9
 80090bc:	4912      	ldr	r1, [pc, #72]	; (8009108 <netconn_new_with_proto_and_callback+0xf0>)
 80090be:	480f      	ldr	r0, [pc, #60]	; (80090fc <netconn_new_with_proto_and_callback+0xe4>)
 80090c0:	f00e f844 	bl	801714c <iprintf>
      sys_sem_free(&conn->op_completed);
 80090c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c6:	330c      	adds	r3, #12
 80090c8:	4618      	mov	r0, r3
 80090ca:	f00d ff16 	bl	8016efa <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80090ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d0:	3310      	adds	r3, #16
 80090d2:	4618      	mov	r0, r3
 80090d4:	f00d fe06 	bl	8016ce4 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80090d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80090da:	2006      	movs	r0, #6
 80090dc:	f003 ffc8 	bl	800d070 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 80090e0:	2300      	movs	r3, #0
 80090e2:	e000      	b.n	80090e6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 80090e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3730      	adds	r7, #48	; 0x30
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	0800a16d 	.word	0x0800a16d
 80090f4:	080184a8 	.word	0x080184a8
 80090f8:	080184dc 	.word	0x080184dc
 80090fc:	08018500 	.word	0x08018500
 8009100:	08018528 	.word	0x08018528
 8009104:	08018540 	.word	0x08018540
 8009108:	08018564 	.word	0x08018564

0800910c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b08c      	sub	sp, #48	; 0x30
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d101      	bne.n	800911e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800911a:	2300      	movs	r3, #0
 800911c:	e014      	b.n	8009148 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009122:	2329      	movs	r3, #41	; 0x29
 8009124:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8009126:	f107 030c 	add.w	r3, r7, #12
 800912a:	4619      	mov	r1, r3
 800912c:	4808      	ldr	r0, [pc, #32]	; (8009150 <netconn_prepare_delete+0x44>)
 800912e:	f7ff ff55 	bl	8008fdc <netconn_apimsg>
 8009132:	4603      	mov	r3, r0
 8009134:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8009138:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800913c:	2b00      	cmp	r3, #0
 800913e:	d002      	beq.n	8009146 <netconn_prepare_delete+0x3a>
    return err;
 8009140:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009144:	e000      	b.n	8009148 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8009146:	2300      	movs	r3, #0
}
 8009148:	4618      	mov	r0, r3
 800914a:	3730      	adds	r7, #48	; 0x30
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}
 8009150:	0800a6c9 	.word	0x0800a6c9

08009154 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d101      	bne.n	8009166 <netconn_delete+0x12>
    return ERR_OK;
 8009162:	2300      	movs	r3, #0
 8009164:	e00d      	b.n	8009182 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f7ff ffd0 	bl	800910c <netconn_prepare_delete>
 800916c:	4603      	mov	r3, r0
 800916e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8009170:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d102      	bne.n	800917e <netconn_delete+0x2a>
    netconn_free(conn);
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f001 f877 	bl	800a26c <netconn_free>
  }
  return err;
 800917e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009182:	4618      	mov	r0, r3
 8009184:	3710      	adds	r7, #16
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
	...

0800918c <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b08e      	sub	sp, #56	; 0x38
 8009190:	af00      	add	r7, sp, #0
 8009192:	60f8      	str	r0, [r7, #12]
 8009194:	60b9      	str	r1, [r7, #8]
 8009196:	607a      	str	r2, [r7, #4]
 8009198:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d109      	bne.n	80091b4 <netconn_getaddr+0x28>
 80091a0:	4b1d      	ldr	r3, [pc, #116]	; (8009218 <netconn_getaddr+0x8c>)
 80091a2:	f44f 7289 	mov.w	r2, #274	; 0x112
 80091a6:	491d      	ldr	r1, [pc, #116]	; (800921c <netconn_getaddr+0x90>)
 80091a8:	481d      	ldr	r0, [pc, #116]	; (8009220 <netconn_getaddr+0x94>)
 80091aa:	f00d ffcf 	bl	801714c <iprintf>
 80091ae:	f06f 030f 	mvn.w	r3, #15
 80091b2:	e02d      	b.n	8009210 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d109      	bne.n	80091ce <netconn_getaddr+0x42>
 80091ba:	4b17      	ldr	r3, [pc, #92]	; (8009218 <netconn_getaddr+0x8c>)
 80091bc:	f240 1213 	movw	r2, #275	; 0x113
 80091c0:	4918      	ldr	r1, [pc, #96]	; (8009224 <netconn_getaddr+0x98>)
 80091c2:	4817      	ldr	r0, [pc, #92]	; (8009220 <netconn_getaddr+0x94>)
 80091c4:	f00d ffc2 	bl	801714c <iprintf>
 80091c8:	f06f 030f 	mvn.w	r3, #15
 80091cc:	e020      	b.n	8009210 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d109      	bne.n	80091e8 <netconn_getaddr+0x5c>
 80091d4:	4b10      	ldr	r3, [pc, #64]	; (8009218 <netconn_getaddr+0x8c>)
 80091d6:	f44f 728a 	mov.w	r2, #276	; 0x114
 80091da:	4913      	ldr	r1, [pc, #76]	; (8009228 <netconn_getaddr+0x9c>)
 80091dc:	4810      	ldr	r0, [pc, #64]	; (8009220 <netconn_getaddr+0x94>)
 80091de:	f00d ffb5 	bl	801714c <iprintf>
 80091e2:	f06f 030f 	mvn.w	r3, #15
 80091e6:	e013      	b.n	8009210 <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 80091ec:	78fb      	ldrb	r3, [r7, #3]
 80091ee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 80091fa:	f107 0314 	add.w	r3, r7, #20
 80091fe:	4619      	mov	r1, r3
 8009200:	480a      	ldr	r0, [pc, #40]	; (800922c <netconn_getaddr+0xa0>)
 8009202:	f7ff feeb 	bl	8008fdc <netconn_apimsg>
 8009206:	4603      	mov	r3, r0
 8009208:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 800920c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009210:	4618      	mov	r0, r3
 8009212:	3738      	adds	r7, #56	; 0x38
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}
 8009218:	080184a8 	.word	0x080184a8
 800921c:	08018580 	.word	0x08018580
 8009220:	08018500 	.word	0x08018500
 8009224:	080185a0 	.word	0x080185a0
 8009228:	080185c0 	.word	0x080185c0
 800922c:	0800af15 	.word	0x0800af15

08009230 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b08e      	sub	sp, #56	; 0x38
 8009234:	af00      	add	r7, sp, #0
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	4613      	mov	r3, r2
 800923c:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d109      	bne.n	8009258 <netconn_bind+0x28>
 8009244:	4b11      	ldr	r3, [pc, #68]	; (800928c <netconn_bind+0x5c>)
 8009246:	f44f 729c 	mov.w	r2, #312	; 0x138
 800924a:	4911      	ldr	r1, [pc, #68]	; (8009290 <netconn_bind+0x60>)
 800924c:	4811      	ldr	r0, [pc, #68]	; (8009294 <netconn_bind+0x64>)
 800924e:	f00d ff7d 	bl	801714c <iprintf>
 8009252:	f06f 030f 	mvn.w	r3, #15
 8009256:	e015      	b.n	8009284 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d101      	bne.n	8009262 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800925e:	4b0e      	ldr	r3, [pc, #56]	; (8009298 <netconn_bind+0x68>)
 8009260:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800926a:	88fb      	ldrh	r3, [r7, #6]
 800926c:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800926e:	f107 0314 	add.w	r3, r7, #20
 8009272:	4619      	mov	r1, r3
 8009274:	4809      	ldr	r0, [pc, #36]	; (800929c <netconn_bind+0x6c>)
 8009276:	f7ff feb1 	bl	8008fdc <netconn_apimsg>
 800927a:	4603      	mov	r3, r0
 800927c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8009280:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009284:	4618      	mov	r0, r3
 8009286:	3738      	adds	r7, #56	; 0x38
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}
 800928c:	080184a8 	.word	0x080184a8
 8009290:	080185e0 	.word	0x080185e0
 8009294:	08018500 	.word	0x08018500
 8009298:	0801b918 	.word	0x0801b918
 800929c:	0800a875 	.word	0x0800a875

080092a0 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b08c      	sub	sp, #48	; 0x30
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	460b      	mov	r3, r1
 80092aa:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d109      	bne.n	80092c6 <netconn_listen_with_backlog+0x26>
 80092b2:	4b0d      	ldr	r3, [pc, #52]	; (80092e8 <netconn_listen_with_backlog+0x48>)
 80092b4:	f240 12bb 	movw	r2, #443	; 0x1bb
 80092b8:	490c      	ldr	r1, [pc, #48]	; (80092ec <netconn_listen_with_backlog+0x4c>)
 80092ba:	480d      	ldr	r0, [pc, #52]	; (80092f0 <netconn_listen_with_backlog+0x50>)
 80092bc:	f00d ff46 	bl	801714c <iprintf>
 80092c0:	f06f 030f 	mvn.w	r3, #15
 80092c4:	e00c      	b.n	80092e0 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 80092ca:	f107 030c 	add.w	r3, r7, #12
 80092ce:	4619      	mov	r1, r3
 80092d0:	4808      	ldr	r0, [pc, #32]	; (80092f4 <netconn_listen_with_backlog+0x54>)
 80092d2:	f7ff fe83 	bl	8008fdc <netconn_apimsg>
 80092d6:	4603      	mov	r3, r0
 80092d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80092dc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3730      	adds	r7, #48	; 0x30
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	080184a8 	.word	0x080184a8
 80092ec:	08018660 	.word	0x08018660
 80092f0:	08018500 	.word	0x08018500
 80092f4:	0800a8cd 	.word	0x0800a8cd

080092f8 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b086      	sub	sp, #24
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d109      	bne.n	800931c <netconn_accept+0x24>
 8009308:	4b3d      	ldr	r3, [pc, #244]	; (8009400 <netconn_accept+0x108>)
 800930a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800930e:	493d      	ldr	r1, [pc, #244]	; (8009404 <netconn_accept+0x10c>)
 8009310:	483d      	ldr	r0, [pc, #244]	; (8009408 <netconn_accept+0x110>)
 8009312:	f00d ff1b 	bl	801714c <iprintf>
 8009316:	f06f 030f 	mvn.w	r3, #15
 800931a:	e06c      	b.n	80093f6 <netconn_accept+0xfe>
  *new_conn = NULL;
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	2200      	movs	r2, #0
 8009320:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d109      	bne.n	800933c <netconn_accept+0x44>
 8009328:	4b35      	ldr	r3, [pc, #212]	; (8009400 <netconn_accept+0x108>)
 800932a:	f240 12e3 	movw	r2, #483	; 0x1e3
 800932e:	4937      	ldr	r1, [pc, #220]	; (800940c <netconn_accept+0x114>)
 8009330:	4835      	ldr	r0, [pc, #212]	; (8009408 <netconn_accept+0x110>)
 8009332:	f00d ff0b 	bl	801714c <iprintf>
 8009336:	f06f 030f 	mvn.w	r3, #15
 800933a:	e05c      	b.n	80093f6 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 fb53 	bl	80099e8 <netconn_err>
 8009342:	4603      	mov	r3, r0
 8009344:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8009346:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d002      	beq.n	8009354 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800934e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009352:	e050      	b.n	80093f6 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	3314      	adds	r3, #20
 8009358:	4618      	mov	r0, r3
 800935a:	f00d fd4a 	bl	8016df2 <sys_mbox_valid>
 800935e:	4603      	mov	r3, r0
 8009360:	2b00      	cmp	r3, #0
 8009362:	d005      	beq.n	8009370 <netconn_accept+0x78>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	7f1b      	ldrb	r3, [r3, #28]
 8009368:	f003 0301 	and.w	r3, r3, #1
 800936c:	2b00      	cmp	r3, #0
 800936e:	d002      	beq.n	8009376 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8009370:	f06f 030e 	mvn.w	r3, #14
 8009374:	e03f      	b.n	80093f6 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	7f1b      	ldrb	r3, [r3, #28]
 800937a:	f003 0302 	and.w	r3, r3, #2
 800937e:	2b00      	cmp	r3, #0
 8009380:	d00e      	beq.n	80093a0 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	3314      	adds	r3, #20
 8009386:	f107 020c 	add.w	r2, r7, #12
 800938a:	4611      	mov	r1, r2
 800938c:	4618      	mov	r0, r3
 800938e:	f00d fd14 	bl	8016dba <sys_arch_mbox_tryfetch>
 8009392:	4603      	mov	r3, r0
 8009394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009398:	d10a      	bne.n	80093b0 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800939a:	f06f 0306 	mvn.w	r3, #6
 800939e:	e02a      	b.n	80093f6 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	3314      	adds	r3, #20
 80093a4:	f107 010c 	add.w	r1, r7, #12
 80093a8:	2200      	movs	r2, #0
 80093aa:	4618      	mov	r0, r3
 80093ac:	f00d fcc6 	bl	8016d3c <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d005      	beq.n	80093c4 <netconn_accept+0xcc>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093bc:	2200      	movs	r2, #0
 80093be:	2101      	movs	r1, #1
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f107 0213 	add.w	r2, r7, #19
 80093ca:	4611      	mov	r1, r2
 80093cc:	4618      	mov	r0, r3
 80093ce:	f000 fb59 	bl	8009a84 <lwip_netconn_is_err_msg>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d002      	beq.n	80093de <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 80093d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80093dc:	e00b      	b.n	80093f6 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d102      	bne.n	80093ea <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 80093e4:	f06f 030e 	mvn.w	r3, #14
 80093e8:	e005      	b.n	80093f6 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	697a      	ldr	r2, [r7, #20]
 80093f2:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80093f4:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3718      	adds	r7, #24
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	bf00      	nop
 8009400:	080184a8 	.word	0x080184a8
 8009404:	08018680 	.word	0x08018680
 8009408:	08018500 	.word	0x08018500
 800940c:	080186a0 	.word	0x080186a0

08009410 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b088      	sub	sp, #32
 8009414:	af00      	add	r7, sp, #0
 8009416:	60f8      	str	r0, [r7, #12]
 8009418:	60b9      	str	r1, [r7, #8]
 800941a:	4613      	mov	r3, r2
 800941c:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800941e:	2300      	movs	r3, #0
 8009420:	617b      	str	r3, [r7, #20]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d109      	bne.n	800943c <netconn_recv_data+0x2c>
 8009428:	4b4d      	ldr	r3, [pc, #308]	; (8009560 <netconn_recv_data+0x150>)
 800942a:	f44f 7212 	mov.w	r2, #584	; 0x248
 800942e:	494d      	ldr	r1, [pc, #308]	; (8009564 <netconn_recv_data+0x154>)
 8009430:	484d      	ldr	r0, [pc, #308]	; (8009568 <netconn_recv_data+0x158>)
 8009432:	f00d fe8b 	bl	801714c <iprintf>
 8009436:	f06f 030f 	mvn.w	r3, #15
 800943a:	e08d      	b.n	8009558 <netconn_recv_data+0x148>
  *new_buf = NULL;
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	2200      	movs	r2, #0
 8009440:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d109      	bne.n	800945c <netconn_recv_data+0x4c>
 8009448:	4b45      	ldr	r3, [pc, #276]	; (8009560 <netconn_recv_data+0x150>)
 800944a:	f240 224a 	movw	r2, #586	; 0x24a
 800944e:	4947      	ldr	r1, [pc, #284]	; (800956c <netconn_recv_data+0x15c>)
 8009450:	4845      	ldr	r0, [pc, #276]	; (8009568 <netconn_recv_data+0x158>)
 8009452:	f00d fe7b 	bl	801714c <iprintf>
 8009456:	f06f 030f 	mvn.w	r3, #15
 800945a:	e07d      	b.n	8009558 <netconn_recv_data+0x148>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	3310      	adds	r3, #16
 8009460:	4618      	mov	r0, r3
 8009462:	f00d fcc6 	bl	8016df2 <sys_mbox_valid>
 8009466:	4603      	mov	r3, r0
 8009468:	2b00      	cmp	r3, #0
 800946a:	d10e      	bne.n	800948a <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800946c:	68f8      	ldr	r0, [r7, #12]
 800946e:	f000 fabb 	bl	80099e8 <netconn_err>
 8009472:	4603      	mov	r3, r0
 8009474:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8009476:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d002      	beq.n	8009484 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800947e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009482:	e069      	b.n	8009558 <netconn_recv_data+0x148>
    }
    return ERR_CONN;
 8009484:	f06f 030a 	mvn.w	r3, #10
 8009488:	e066      	b.n	8009558 <netconn_recv_data+0x148>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	7f1b      	ldrb	r3, [r3, #28]
 800948e:	f003 0302 	and.w	r3, r3, #2
 8009492:	2b00      	cmp	r3, #0
 8009494:	d10f      	bne.n	80094b6 <netconn_recv_data+0xa6>
 8009496:	79fb      	ldrb	r3, [r7, #7]
 8009498:	f003 0304 	and.w	r3, r3, #4
 800949c:	2b00      	cmp	r3, #0
 800949e:	d10a      	bne.n	80094b6 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	7f1b      	ldrb	r3, [r3, #28]
 80094a4:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d104      	bne.n	80094b6 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d023      	beq.n	80094fe <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	3310      	adds	r3, #16
 80094ba:	f107 0214 	add.w	r2, r7, #20
 80094be:	4611      	mov	r1, r2
 80094c0:	4618      	mov	r0, r3
 80094c2:	f00d fc7a 	bl	8016dba <sys_arch_mbox_tryfetch>
 80094c6:	4603      	mov	r3, r0
 80094c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094cc:	d11f      	bne.n	800950e <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 80094ce:	68f8      	ldr	r0, [r7, #12]
 80094d0:	f000 fa8a 	bl	80099e8 <netconn_err>
 80094d4:	4603      	mov	r3, r0
 80094d6:	77fb      	strb	r3, [r7, #31]
      if (err != ERR_OK) {
 80094d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d002      	beq.n	80094e6 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 80094e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80094e4:	e038      	b.n	8009558 <netconn_recv_data+0x148>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	7f1b      	ldrb	r3, [r3, #28]
 80094ea:	f003 0301 	and.w	r3, r3, #1
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d002      	beq.n	80094f8 <netconn_recv_data+0xe8>
        return ERR_CONN;
 80094f2:	f06f 030a 	mvn.w	r3, #10
 80094f6:	e02f      	b.n	8009558 <netconn_recv_data+0x148>
      }
      return ERR_WOULDBLOCK;
 80094f8:	f06f 0306 	mvn.w	r3, #6
 80094fc:	e02c      	b.n	8009558 <netconn_recv_data+0x148>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	3310      	adds	r3, #16
 8009502:	f107 0114 	add.w	r1, r7, #20
 8009506:	2200      	movs	r2, #0
 8009508:	4618      	mov	r0, r3
 800950a:	f00d fc17 	bl	8016d3c <sys_arch_mbox_fetch>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	f107 0213 	add.w	r2, r7, #19
 8009514:	4611      	mov	r1, r2
 8009516:	4618      	mov	r0, r3
 8009518:	f000 fab4 	bl	8009a84 <lwip_netconn_is_err_msg>
 800951c:	4603      	mov	r3, r0
 800951e:	2b00      	cmp	r3, #0
 8009520:	d009      	beq.n	8009536 <netconn_recv_data+0x126>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8009522:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009526:	f113 0f0f 	cmn.w	r3, #15
 800952a:	d101      	bne.n	8009530 <netconn_recv_data+0x120>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800952c:	2300      	movs	r3, #0
 800952e:	e013      	b.n	8009558 <netconn_recv_data+0x148>
      }
      return err;
 8009530:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009534:	e010      	b.n	8009558 <netconn_recv_data+0x148>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	891b      	ldrh	r3, [r3, #8]
 800953a:	83bb      	strh	r3, [r7, #28]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009540:	2b00      	cmp	r3, #0
 8009542:	d005      	beq.n	8009550 <netconn_recv_data+0x140>
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009548:	8bba      	ldrh	r2, [r7, #28]
 800954a:	2101      	movs	r1, #1
 800954c:	68f8      	ldr	r0, [r7, #12]
 800954e:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8009550:	697a      	ldr	r2, [r7, #20]
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8009556:	2300      	movs	r3, #0
}
 8009558:	4618      	mov	r0, r3
 800955a:	3720      	adds	r7, #32
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}
 8009560:	080184a8 	.word	0x080184a8
 8009564:	080186c0 	.word	0x080186c0
 8009568:	08018500 	.word	0x08018500
 800956c:	080186e0 	.word	0x080186e0

08009570 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b084      	sub	sp, #16
 8009574:	af00      	add	r7, sp, #0
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	60b9      	str	r1, [r7, #8]
 800957a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d005      	beq.n	800958e <netconn_tcp_recvd_msg+0x1e>
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800958a:	2b10      	cmp	r3, #16
 800958c:	d009      	beq.n	80095a2 <netconn_tcp_recvd_msg+0x32>
 800958e:	4b0c      	ldr	r3, [pc, #48]	; (80095c0 <netconn_tcp_recvd_msg+0x50>)
 8009590:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8009594:	490b      	ldr	r1, [pc, #44]	; (80095c4 <netconn_tcp_recvd_msg+0x54>)
 8009596:	480c      	ldr	r0, [pc, #48]	; (80095c8 <netconn_tcp_recvd_msg+0x58>)
 8009598:	f00d fdd8 	bl	801714c <iprintf>
 800959c:	f06f 030f 	mvn.w	r3, #15
 80095a0:	e00a      	b.n	80095b8 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	68fa      	ldr	r2, [r7, #12]
 80095a6:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	68ba      	ldr	r2, [r7, #8]
 80095ac:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80095ae:	6879      	ldr	r1, [r7, #4]
 80095b0:	4806      	ldr	r0, [pc, #24]	; (80095cc <netconn_tcp_recvd_msg+0x5c>)
 80095b2:	f7ff fd13 	bl	8008fdc <netconn_apimsg>
 80095b6:	4603      	mov	r3, r0
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3710      	adds	r7, #16
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}
 80095c0:	080184a8 	.word	0x080184a8
 80095c4:	080186fc 	.word	0x080186fc
 80095c8:	08018500 	.word	0x08018500
 80095cc:	0800a9fd 	.word	0x0800a9fd

080095d0 <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b08c      	sub	sp, #48	; 0x30
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d005      	beq.n	80095ec <netconn_tcp_recvd+0x1c>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80095e8:	2b10      	cmp	r3, #16
 80095ea:	d009      	beq.n	8009600 <netconn_tcp_recvd+0x30>
 80095ec:	4b0c      	ldr	r3, [pc, #48]	; (8009620 <netconn_tcp_recvd+0x50>)
 80095ee:	f240 22b6 	movw	r2, #694	; 0x2b6
 80095f2:	490c      	ldr	r1, [pc, #48]	; (8009624 <netconn_tcp_recvd+0x54>)
 80095f4:	480c      	ldr	r0, [pc, #48]	; (8009628 <netconn_tcp_recvd+0x58>)
 80095f6:	f00d fda9 	bl	801714c <iprintf>
 80095fa:	f06f 030f 	mvn.w	r3, #15
 80095fe:	e00b      	b.n	8009618 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 8009600:	f107 030c 	add.w	r3, r7, #12
 8009604:	461a      	mov	r2, r3
 8009606:	6839      	ldr	r1, [r7, #0]
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f7ff ffb1 	bl	8009570 <netconn_tcp_recvd_msg>
 800960e:	4603      	mov	r3, r0
 8009610:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 8009614:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009618:	4618      	mov	r0, r3
 800961a:	3730      	adds	r7, #48	; 0x30
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}
 8009620:	080184a8 	.word	0x080184a8
 8009624:	080186fc 	.word	0x080186fc
 8009628:	08018500 	.word	0x08018500

0800962c <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b090      	sub	sp, #64	; 0x40
 8009630:	af00      	add	r7, sp, #0
 8009632:	60f8      	str	r0, [r7, #12]
 8009634:	60b9      	str	r1, [r7, #8]
 8009636:	4613      	mov	r3, r2
 8009638:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	3310      	adds	r3, #16
 800963e:	4618      	mov	r0, r3
 8009640:	f00d fbd7 	bl	8016df2 <sys_mbox_valid>
 8009644:	4603      	mov	r3, r0
 8009646:	2b00      	cmp	r3, #0
 8009648:	d102      	bne.n	8009650 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800964a:	f06f 030a 	mvn.w	r3, #10
 800964e:	e06d      	b.n	800972c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	7f1b      	ldrb	r3, [r3, #28]
 8009654:	b25b      	sxtb	r3, r3
 8009656:	2b00      	cmp	r3, #0
 8009658:	da07      	bge.n	800966a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	7f1b      	ldrb	r3, [r3, #28]
 800965e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009662:	b2da      	uxtb	r2, r3
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8009668:	e039      	b.n	80096de <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800966a:	79fb      	ldrb	r3, [r7, #7]
 800966c:	461a      	mov	r2, r3
 800966e:	68b9      	ldr	r1, [r7, #8]
 8009670:	68f8      	ldr	r0, [r7, #12]
 8009672:	f7ff fecd 	bl	8009410 <netconn_recv_data>
 8009676:	4603      	mov	r3, r0
 8009678:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800967c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009680:	2b00      	cmp	r3, #0
 8009682:	d002      	beq.n	800968a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8009684:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009688:	e050      	b.n	800972c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8009690:	79fb      	ldrb	r3, [r7, #7]
 8009692:	f003 0308 	and.w	r3, r3, #8
 8009696:	2b00      	cmp	r3, #0
 8009698:	d10e      	bne.n	80096b8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800969a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800969c:	2b00      	cmp	r3, #0
 800969e:	d002      	beq.n	80096a6 <netconn_recv_data_tcp+0x7a>
 80096a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a2:	891b      	ldrh	r3, [r3, #8]
 80096a4:	e000      	b.n	80096a8 <netconn_recv_data_tcp+0x7c>
 80096a6:	2301      	movs	r3, #1
 80096a8:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 80096aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80096ac:	f107 0214 	add.w	r2, r7, #20
 80096b0:	4619      	mov	r1, r3
 80096b2:	68f8      	ldr	r0, [r7, #12]
 80096b4:	f7ff ff5c 	bl	8009570 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 80096b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d134      	bne.n	8009728 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 80096be:	79fb      	ldrb	r3, [r7, #7]
 80096c0:	f003 0310 	and.w	r3, r3, #16
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d009      	beq.n	80096dc <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	7f1b      	ldrb	r3, [r3, #28]
 80096cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80096d0:	b2da      	uxtb	r2, r3
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 80096d6:	f06f 0306 	mvn.w	r3, #6
 80096da:	e027      	b.n	800972c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 80096dc:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d005      	beq.n	80096f2 <netconn_recv_data_tcp+0xc6>
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ea:	2200      	movs	r2, #0
 80096ec:	2101      	movs	r1, #1
 80096ee:	68f8      	ldr	r0, [r7, #12]
 80096f0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d10f      	bne.n	800971a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 80096fa:	68f8      	ldr	r0, [r7, #12]
 80096fc:	f000 f974 	bl	80099e8 <netconn_err>
 8009700:	4603      	mov	r3, r0
 8009702:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8009706:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800970a:	2b00      	cmp	r3, #0
 800970c:	d002      	beq.n	8009714 <netconn_recv_data_tcp+0xe8>
          return err;
 800970e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009712:	e00b      	b.n	800972c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8009714:	f06f 030d 	mvn.w	r3, #13
 8009718:	e008      	b.n	800972c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800971a:	2101      	movs	r1, #1
 800971c:	68f8      	ldr	r0, [r7, #12]
 800971e:	f000 f933 	bl	8009988 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8009722:	f06f 030e 	mvn.w	r3, #14
 8009726:	e001      	b.n	800972c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8009728:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800972c:	4618      	mov	r0, r3
 800972e:	3740      	adds	r7, #64	; 0x40
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	60b9      	str	r1, [r7, #8]
 800973e:	4613      	mov	r3, r2
 8009740:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d005      	beq.n	8009754 <netconn_recv_tcp_pbuf_flags+0x20>
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009750:	2b10      	cmp	r3, #16
 8009752:	d009      	beq.n	8009768 <netconn_recv_tcp_pbuf_flags+0x34>
 8009754:	4b0a      	ldr	r3, [pc, #40]	; (8009780 <netconn_recv_tcp_pbuf_flags+0x4c>)
 8009756:	f240 3226 	movw	r2, #806	; 0x326
 800975a:	490a      	ldr	r1, [pc, #40]	; (8009784 <netconn_recv_tcp_pbuf_flags+0x50>)
 800975c:	480a      	ldr	r0, [pc, #40]	; (8009788 <netconn_recv_tcp_pbuf_flags+0x54>)
 800975e:	f00d fcf5 	bl	801714c <iprintf>
 8009762:	f06f 030f 	mvn.w	r3, #15
 8009766:	e006      	b.n	8009776 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 8009768:	79fb      	ldrb	r3, [r7, #7]
 800976a:	461a      	mov	r2, r3
 800976c:	68b9      	ldr	r1, [r7, #8]
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	f7ff ff5c 	bl	800962c <netconn_recv_data_tcp>
 8009774:	4603      	mov	r3, r0
}
 8009776:	4618      	mov	r0, r3
 8009778:	3710      	adds	r7, #16
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	080184a8 	.word	0x080184a8
 8009784:	080186fc 	.word	0x080186fc
 8009788:	08018500 	.word	0x08018500

0800978c <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af00      	add	r7, sp, #0
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	60b9      	str	r1, [r7, #8]
 8009796:	4613      	mov	r3, r2
 8009798:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d005      	beq.n	80097ac <netconn_recv_udp_raw_netbuf_flags+0x20>
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80097a8:	2b10      	cmp	r3, #16
 80097aa:	d109      	bne.n	80097c0 <netconn_recv_udp_raw_netbuf_flags+0x34>
 80097ac:	4b0a      	ldr	r3, [pc, #40]	; (80097d8 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 80097ae:	f240 324d 	movw	r2, #845	; 0x34d
 80097b2:	490a      	ldr	r1, [pc, #40]	; (80097dc <netconn_recv_udp_raw_netbuf_flags+0x50>)
 80097b4:	480a      	ldr	r0, [pc, #40]	; (80097e0 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 80097b6:	f00d fcc9 	bl	801714c <iprintf>
 80097ba:	f06f 030f 	mvn.w	r3, #15
 80097be:	e006      	b.n	80097ce <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 80097c0:	79fb      	ldrb	r3, [r7, #7]
 80097c2:	461a      	mov	r2, r3
 80097c4:	68b9      	ldr	r1, [r7, #8]
 80097c6:	68f8      	ldr	r0, [r7, #12]
 80097c8:	f7ff fe22 	bl	8009410 <netconn_recv_data>
 80097cc:	4603      	mov	r3, r0
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3710      	adds	r7, #16
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	bf00      	nop
 80097d8:	080184a8 	.word	0x080184a8
 80097dc:	08018720 	.word	0x08018720
 80097e0:	08018500 	.word	0x08018500

080097e4 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b088      	sub	sp, #32
 80097e8:	af02      	add	r7, sp, #8
 80097ea:	60f8      	str	r0, [r7, #12]
 80097ec:	60b9      	str	r1, [r7, #8]
 80097ee:	607a      	str	r2, [r7, #4]
 80097f0:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	613b      	str	r3, [r7, #16]
  vector.len = size;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 80097fa:	78fa      	ldrb	r2, [r7, #3]
 80097fc:	f107 0110 	add.w	r1, r7, #16
 8009800:	6a3b      	ldr	r3, [r7, #32]
 8009802:	9300      	str	r3, [sp, #0]
 8009804:	4613      	mov	r3, r2
 8009806:	2201      	movs	r2, #1
 8009808:	68f8      	ldr	r0, [r7, #12]
 800980a:	f000 f805 	bl	8009818 <netconn_write_vectors_partly>
 800980e:	4603      	mov	r3, r0
}
 8009810:	4618      	mov	r0, r3
 8009812:	3718      	adds	r7, #24
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b092      	sub	sp, #72	; 0x48
 800981c:	af00      	add	r7, sp, #0
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	60b9      	str	r1, [r7, #8]
 8009822:	4611      	mov	r1, r2
 8009824:	461a      	mov	r2, r3
 8009826:	460b      	mov	r3, r1
 8009828:	80fb      	strh	r3, [r7, #6]
 800982a:	4613      	mov	r3, r2
 800982c:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d109      	bne.n	8009848 <netconn_write_vectors_partly+0x30>
 8009834:	4b4e      	ldr	r3, [pc, #312]	; (8009970 <netconn_write_vectors_partly+0x158>)
 8009836:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800983a:	494e      	ldr	r1, [pc, #312]	; (8009974 <netconn_write_vectors_partly+0x15c>)
 800983c:	484e      	ldr	r0, [pc, #312]	; (8009978 <netconn_write_vectors_partly+0x160>)
 800983e:	f00d fc85 	bl	801714c <iprintf>
 8009842:	f06f 030f 	mvn.w	r3, #15
 8009846:	e08e      	b.n	8009966 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009850:	2b10      	cmp	r3, #16
 8009852:	d009      	beq.n	8009868 <netconn_write_vectors_partly+0x50>
 8009854:	4b46      	ldr	r3, [pc, #280]	; (8009970 <netconn_write_vectors_partly+0x158>)
 8009856:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800985a:	4948      	ldr	r1, [pc, #288]	; (800997c <netconn_write_vectors_partly+0x164>)
 800985c:	4846      	ldr	r0, [pc, #280]	; (8009978 <netconn_write_vectors_partly+0x160>)
 800985e:	f00d fc75 	bl	801714c <iprintf>
 8009862:	f06f 0305 	mvn.w	r3, #5
 8009866:	e07e      	b.n	8009966 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	7f1b      	ldrb	r3, [r3, #28]
 800986c:	f003 0302 	and.w	r3, r3, #2
 8009870:	2b00      	cmp	r3, #0
 8009872:	d104      	bne.n	800987e <netconn_write_vectors_partly+0x66>
 8009874:	797b      	ldrb	r3, [r7, #5]
 8009876:	f003 0304 	and.w	r3, r3, #4
 800987a:	2b00      	cmp	r3, #0
 800987c:	d001      	beq.n	8009882 <netconn_write_vectors_partly+0x6a>
 800987e:	2301      	movs	r3, #1
 8009880:	e000      	b.n	8009884 <netconn_write_vectors_partly+0x6c>
 8009882:	2300      	movs	r3, #0
 8009884:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8009888:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800988c:	2b00      	cmp	r3, #0
 800988e:	d005      	beq.n	800989c <netconn_write_vectors_partly+0x84>
 8009890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009892:	2b00      	cmp	r3, #0
 8009894:	d102      	bne.n	800989c <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8009896:	f06f 0305 	mvn.w	r3, #5
 800989a:	e064      	b.n	8009966 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800989c:	2300      	movs	r3, #0
 800989e:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 80098a0:	2300      	movs	r3, #0
 80098a2:	643b      	str	r3, [r7, #64]	; 0x40
 80098a4:	e015      	b.n	80098d2 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 80098a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098a8:	00db      	lsls	r3, r3, #3
 80098aa:	68ba      	ldr	r2, [r7, #8]
 80098ac:	4413      	add	r3, r2
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098b2:	4413      	add	r3, r2
 80098b4:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 80098b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098b8:	00db      	lsls	r3, r3, #3
 80098ba:	68ba      	ldr	r2, [r7, #8]
 80098bc:	4413      	add	r3, r2
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d202      	bcs.n	80098cc <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 80098c6:	f06f 0305 	mvn.w	r3, #5
 80098ca:	e04c      	b.n	8009966 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 80098cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098ce:	3301      	adds	r3, #1
 80098d0:	643b      	str	r3, [r7, #64]	; 0x40
 80098d2:	88fb      	ldrh	r3, [r7, #6]
 80098d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80098d6:	429a      	cmp	r2, r3
 80098d8:	dbe5      	blt.n	80098a6 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 80098da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d101      	bne.n	80098e4 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 80098e0:	2300      	movs	r3, #0
 80098e2:	e040      	b.n	8009966 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 80098e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	da0a      	bge.n	8009900 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 80098ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d102      	bne.n	80098f6 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 80098f0:	f06f 0305 	mvn.w	r3, #5
 80098f4:	e037      	b.n	8009966 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 80098f6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80098fa:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 80098fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098fe:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8009908:	88fb      	ldrh	r3, [r7, #6]
 800990a:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800990c:	2300      	movs	r3, #0
 800990e:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8009910:	797b      	ldrb	r3, [r7, #5]
 8009912:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8009916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009918:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800991a:	2300      	movs	r3, #0
 800991c:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800991e:	f107 0314 	add.w	r3, r7, #20
 8009922:	4619      	mov	r1, r3
 8009924:	4816      	ldr	r0, [pc, #88]	; (8009980 <netconn_write_vectors_partly+0x168>)
 8009926:	f7ff fb59 	bl	8008fdc <netconn_apimsg>
 800992a:	4603      	mov	r3, r0
 800992c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8009930:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009934:	2b00      	cmp	r3, #0
 8009936:	d114      	bne.n	8009962 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8009938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800993a:	2b00      	cmp	r3, #0
 800993c:	d002      	beq.n	8009944 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800993e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009942:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8009944:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009948:	2b00      	cmp	r3, #0
 800994a:	d10a      	bne.n	8009962 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800994c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800994e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009950:	429a      	cmp	r2, r3
 8009952:	d006      	beq.n	8009962 <netconn_write_vectors_partly+0x14a>
 8009954:	4b06      	ldr	r3, [pc, #24]	; (8009970 <netconn_write_vectors_partly+0x158>)
 8009956:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800995a:	490a      	ldr	r1, [pc, #40]	; (8009984 <netconn_write_vectors_partly+0x16c>)
 800995c:	4806      	ldr	r0, [pc, #24]	; (8009978 <netconn_write_vectors_partly+0x160>)
 800995e:	f00d fbf5 	bl	801714c <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8009962:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009966:	4618      	mov	r0, r3
 8009968:	3748      	adds	r7, #72	; 0x48
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
 800996e:	bf00      	nop
 8009970:	080184a8 	.word	0x080184a8
 8009974:	08018774 	.word	0x08018774
 8009978:	08018500 	.word	0x08018500
 800997c:	08018790 	.word	0x08018790
 8009980:	0800ae01 	.word	0x0800ae01
 8009984:	080187b4 	.word	0x080187b4

08009988 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b08c      	sub	sp, #48	; 0x30
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	460b      	mov	r3, r1
 8009992:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d109      	bne.n	80099ae <netconn_close_shutdown+0x26>
 800999a:	4b0f      	ldr	r3, [pc, #60]	; (80099d8 <netconn_close_shutdown+0x50>)
 800999c:	f240 4247 	movw	r2, #1095	; 0x447
 80099a0:	490e      	ldr	r1, [pc, #56]	; (80099dc <netconn_close_shutdown+0x54>)
 80099a2:	480f      	ldr	r0, [pc, #60]	; (80099e0 <netconn_close_shutdown+0x58>)
 80099a4:	f00d fbd2 	bl	801714c <iprintf>
 80099a8:	f06f 030f 	mvn.w	r3, #15
 80099ac:	e010      	b.n	80099d0 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80099b2:	78fb      	ldrb	r3, [r7, #3]
 80099b4:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80099b6:	2329      	movs	r3, #41	; 0x29
 80099b8:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80099ba:	f107 030c 	add.w	r3, r7, #12
 80099be:	4619      	mov	r1, r3
 80099c0:	4808      	ldr	r0, [pc, #32]	; (80099e4 <netconn_close_shutdown+0x5c>)
 80099c2:	f7ff fb0b 	bl	8008fdc <netconn_apimsg>
 80099c6:	4603      	mov	r3, r0
 80099c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80099cc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3730      	adds	r7, #48	; 0x30
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}
 80099d8:	080184a8 	.word	0x080184a8
 80099dc:	080187d8 	.word	0x080187d8
 80099e0:	08018500 	.word	0x08018500
 80099e4:	0800afdd 	.word	0x0800afdd

080099e8 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d101      	bne.n	80099fa <netconn_err+0x12>
    return ERR_OK;
 80099f6:	2300      	movs	r3, #0
 80099f8:	e00d      	b.n	8009a16 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 80099fa:	f00d fb15 	bl	8017028 <sys_arch_protect>
 80099fe:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	7a1b      	ldrb	r3, [r3, #8]
 8009a04:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8009a0c:	68f8      	ldr	r0, [r7, #12]
 8009a0e:	f00d fb19 	bl	8017044 <sys_arch_unprotect>
  return err;
 8009a12:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3710      	adds	r7, #16
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
	...

08009a20 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b082      	sub	sp, #8
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	4603      	mov	r3, r0
 8009a28:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8009a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a2e:	f113 0f0e 	cmn.w	r3, #14
 8009a32:	d008      	beq.n	8009a46 <lwip_netconn_err_to_msg+0x26>
 8009a34:	f113 0f0d 	cmn.w	r3, #13
 8009a38:	d003      	beq.n	8009a42 <lwip_netconn_err_to_msg+0x22>
 8009a3a:	f113 0f0f 	cmn.w	r3, #15
 8009a3e:	d004      	beq.n	8009a4a <lwip_netconn_err_to_msg+0x2a>
 8009a40:	e005      	b.n	8009a4e <lwip_netconn_err_to_msg+0x2e>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8009a42:	4b0a      	ldr	r3, [pc, #40]	; (8009a6c <lwip_netconn_err_to_msg+0x4c>)
 8009a44:	e00e      	b.n	8009a64 <lwip_netconn_err_to_msg+0x44>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8009a46:	4b0a      	ldr	r3, [pc, #40]	; (8009a70 <lwip_netconn_err_to_msg+0x50>)
 8009a48:	e00c      	b.n	8009a64 <lwip_netconn_err_to_msg+0x44>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8009a4a:	4b0a      	ldr	r3, [pc, #40]	; (8009a74 <lwip_netconn_err_to_msg+0x54>)
 8009a4c:	e00a      	b.n	8009a64 <lwip_netconn_err_to_msg+0x44>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8009a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d005      	beq.n	8009a62 <lwip_netconn_err_to_msg+0x42>
 8009a56:	4b08      	ldr	r3, [pc, #32]	; (8009a78 <lwip_netconn_err_to_msg+0x58>)
 8009a58:	227d      	movs	r2, #125	; 0x7d
 8009a5a:	4908      	ldr	r1, [pc, #32]	; (8009a7c <lwip_netconn_err_to_msg+0x5c>)
 8009a5c:	4808      	ldr	r0, [pc, #32]	; (8009a80 <lwip_netconn_err_to_msg+0x60>)
 8009a5e:	f00d fb75 	bl	801714c <iprintf>
      return NULL;
 8009a62:	2300      	movs	r3, #0
  }
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3708      	adds	r7, #8
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}
 8009a6c:	0801b7d0 	.word	0x0801b7d0
 8009a70:	0801b7d1 	.word	0x0801b7d1
 8009a74:	0801b7d2 	.word	0x0801b7d2
 8009a78:	080187f4 	.word	0x080187f4
 8009a7c:	08018828 	.word	0x08018828
 8009a80:	08018838 	.word	0x08018838

08009a84 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d105      	bne.n	8009aa0 <lwip_netconn_is_err_msg+0x1c>
 8009a94:	4b12      	ldr	r3, [pc, #72]	; (8009ae0 <lwip_netconn_is_err_msg+0x5c>)
 8009a96:	2285      	movs	r2, #133	; 0x85
 8009a98:	4912      	ldr	r1, [pc, #72]	; (8009ae4 <lwip_netconn_is_err_msg+0x60>)
 8009a9a:	4813      	ldr	r0, [pc, #76]	; (8009ae8 <lwip_netconn_is_err_msg+0x64>)
 8009a9c:	f00d fb56 	bl	801714c <iprintf>

  if (msg == &netconn_aborted) {
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	4a12      	ldr	r2, [pc, #72]	; (8009aec <lwip_netconn_is_err_msg+0x68>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d104      	bne.n	8009ab2 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	22f3      	movs	r2, #243	; 0xf3
 8009aac:	701a      	strb	r2, [r3, #0]
    return 1;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e012      	b.n	8009ad8 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	4a0e      	ldr	r2, [pc, #56]	; (8009af0 <lwip_netconn_is_err_msg+0x6c>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d104      	bne.n	8009ac4 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	22f2      	movs	r2, #242	; 0xf2
 8009abe:	701a      	strb	r2, [r3, #0]
    return 1;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	e009      	b.n	8009ad8 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	4a0b      	ldr	r2, [pc, #44]	; (8009af4 <lwip_netconn_is_err_msg+0x70>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d104      	bne.n	8009ad6 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	22f1      	movs	r2, #241	; 0xf1
 8009ad0:	701a      	strb	r2, [r3, #0]
    return 1;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	e000      	b.n	8009ad8 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8009ad6:	2300      	movs	r3, #0
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3708      	adds	r7, #8
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}
 8009ae0:	080187f4 	.word	0x080187f4
 8009ae4:	08018860 	.word	0x08018860
 8009ae8:	08018838 	.word	0x08018838
 8009aec:	0801b7d0 	.word	0x0801b7d0
 8009af0:	0801b7d1 	.word	0x0801b7d1
 8009af4:	0801b7d2 	.word	0x0801b7d2

08009af8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b088      	sub	sp, #32
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	60f8      	str	r0, [r7, #12]
 8009b00:	60b9      	str	r1, [r7, #8]
 8009b02:	607a      	str	r2, [r7, #4]
 8009b04:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d106      	bne.n	8009b1a <recv_tcp+0x22>
 8009b0c:	4b36      	ldr	r3, [pc, #216]	; (8009be8 <recv_tcp+0xf0>)
 8009b0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009b12:	4936      	ldr	r1, [pc, #216]	; (8009bec <recv_tcp+0xf4>)
 8009b14:	4836      	ldr	r0, [pc, #216]	; (8009bf0 <recv_tcp+0xf8>)
 8009b16:	f00d fb19 	bl	801714c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d106      	bne.n	8009b2e <recv_tcp+0x36>
 8009b20:	4b31      	ldr	r3, [pc, #196]	; (8009be8 <recv_tcp+0xf0>)
 8009b22:	f240 122d 	movw	r2, #301	; 0x12d
 8009b26:	4933      	ldr	r1, [pc, #204]	; (8009bf4 <recv_tcp+0xfc>)
 8009b28:	4831      	ldr	r0, [pc, #196]	; (8009bf0 <recv_tcp+0xf8>)
 8009b2a:	f00d fb0f 	bl	801714c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8009b2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d006      	beq.n	8009b44 <recv_tcp+0x4c>
 8009b36:	4b2c      	ldr	r3, [pc, #176]	; (8009be8 <recv_tcp+0xf0>)
 8009b38:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8009b3c:	492e      	ldr	r1, [pc, #184]	; (8009bf8 <recv_tcp+0x100>)
 8009b3e:	482c      	ldr	r0, [pc, #176]	; (8009bf0 <recv_tcp+0xf8>)
 8009b40:	f00d fb04 	bl	801714c <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d102      	bne.n	8009b54 <recv_tcp+0x5c>
    return ERR_VAL;
 8009b4e:	f06f 0305 	mvn.w	r3, #5
 8009b52:	e045      	b.n	8009be0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	68ba      	ldr	r2, [r7, #8]
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d006      	beq.n	8009b6c <recv_tcp+0x74>
 8009b5e:	4b22      	ldr	r3, [pc, #136]	; (8009be8 <recv_tcp+0xf0>)
 8009b60:	f240 1235 	movw	r2, #309	; 0x135
 8009b64:	4925      	ldr	r1, [pc, #148]	; (8009bfc <recv_tcp+0x104>)
 8009b66:	4822      	ldr	r0, [pc, #136]	; (8009bf0 <recv_tcp+0xf8>)
 8009b68:	f00d faf0 	bl	801714c <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	3310      	adds	r3, #16
 8009b70:	4618      	mov	r0, r3
 8009b72:	f00d f93e 	bl	8016df2 <sys_mbox_valid>
 8009b76:	4603      	mov	r3, r0
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d10d      	bne.n	8009b98 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d008      	beq.n	8009b94 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	891b      	ldrh	r3, [r3, #8]
 8009b86:	4619      	mov	r1, r3
 8009b88:	68b8      	ldr	r0, [r7, #8]
 8009b8a:	f005 f8ed 	bl	800ed68 <tcp_recved>
      pbuf_free(p);
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f004 f93c 	bl	800de0c <pbuf_free>
    }
    return ERR_OK;
 8009b94:	2300      	movs	r3, #0
 8009b96:	e023      	b.n	8009be0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d005      	beq.n	8009baa <recv_tcp+0xb2>
    msg = p;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	891b      	ldrh	r3, [r3, #8]
 8009ba6:	83fb      	strh	r3, [r7, #30]
 8009ba8:	e003      	b.n	8009bb2 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8009baa:	4b15      	ldr	r3, [pc, #84]	; (8009c00 <recv_tcp+0x108>)
 8009bac:	61bb      	str	r3, [r7, #24]
    len = 0;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	3310      	adds	r3, #16
 8009bb6:	69b9      	ldr	r1, [r7, #24]
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f00d f8a5 	bl	8016d08 <sys_mbox_trypost>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d002      	beq.n	8009bca <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8009bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8009bc8:	e00a      	b.n	8009be0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d005      	beq.n	8009bde <recv_tcp+0xe6>
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd6:	8bfa      	ldrh	r2, [r7, #30]
 8009bd8:	2100      	movs	r1, #0
 8009bda:	6978      	ldr	r0, [r7, #20]
 8009bdc:	4798      	blx	r3
  }

  return ERR_OK;
 8009bde:	2300      	movs	r3, #0
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3720      	adds	r7, #32
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}
 8009be8:	080187f4 	.word	0x080187f4
 8009bec:	0801886c 	.word	0x0801886c
 8009bf0:	08018838 	.word	0x08018838
 8009bf4:	08018890 	.word	0x08018890
 8009bf8:	080188b0 	.word	0x080188b0
 8009bfc:	080188c8 	.word	0x080188c8
 8009c00:	0801b7d2 	.word	0x0801b7d2

08009c04 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d106      	bne.n	8009c26 <poll_tcp+0x22>
 8009c18:	4b29      	ldr	r3, [pc, #164]	; (8009cc0 <poll_tcp+0xbc>)
 8009c1a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8009c1e:	4929      	ldr	r1, [pc, #164]	; (8009cc4 <poll_tcp+0xc0>)
 8009c20:	4829      	ldr	r0, [pc, #164]	; (8009cc8 <poll_tcp+0xc4>)
 8009c22:	f00d fa93 	bl	801714c <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	785b      	ldrb	r3, [r3, #1]
 8009c2a:	2b01      	cmp	r3, #1
 8009c2c:	d104      	bne.n	8009c38 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009c2e:	2101      	movs	r1, #1
 8009c30:	68f8      	ldr	r0, [r7, #12]
 8009c32:	f000 ff19 	bl	800aa68 <lwip_netconn_do_writemore>
 8009c36:	e016      	b.n	8009c66 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	785b      	ldrb	r3, [r3, #1]
 8009c3c:	2b04      	cmp	r3, #4
 8009c3e:	d112      	bne.n	8009c66 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	6a1b      	ldr	r3, [r3, #32]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d00a      	beq.n	8009c5e <poll_tcp+0x5a>
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	6a1b      	ldr	r3, [r3, #32]
 8009c4c:	7a5b      	ldrb	r3, [r3, #9]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d005      	beq.n	8009c5e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	6a1b      	ldr	r3, [r3, #32]
 8009c56:	7a5a      	ldrb	r2, [r3, #9]
 8009c58:	3a01      	subs	r2, #1
 8009c5a:	b2d2      	uxtb	r2, r2
 8009c5c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009c5e:	2101      	movs	r1, #1
 8009c60:	68f8      	ldr	r0, [r7, #12]
 8009c62:	f000 fbcb 	bl	800a3fc <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	7f1b      	ldrb	r3, [r3, #28]
 8009c6a:	f003 0310 	and.w	r3, r3, #16
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d021      	beq.n	8009cb6 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d01d      	beq.n	8009cb6 <poll_tcp+0xb2>
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009c82:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009c86:	d316      	bcc.n	8009cb6 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009c90:	2b04      	cmp	r3, #4
 8009c92:	d810      	bhi.n	8009cb6 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	7f1b      	ldrb	r3, [r3, #28]
 8009c98:	f023 0310 	bic.w	r3, r3, #16
 8009c9c:	b2da      	uxtb	r2, r3
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d005      	beq.n	8009cb6 <poll_tcp+0xb2>
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cae:	2200      	movs	r2, #0
 8009cb0:	2102      	movs	r1, #2
 8009cb2:	68f8      	ldr	r0, [r7, #12]
 8009cb4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009cb6:	2300      	movs	r3, #0
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3710      	adds	r7, #16
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}
 8009cc0:	080187f4 	.word	0x080187f4
 8009cc4:	080188e8 	.word	0x080188e8
 8009cc8:	08018838 	.word	0x08018838

08009ccc <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b086      	sub	sp, #24
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	60f8      	str	r0, [r7, #12]
 8009cd4:	60b9      	str	r1, [r7, #8]
 8009cd6:	4613      	mov	r3, r2
 8009cd8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d106      	bne.n	8009cf2 <sent_tcp+0x26>
 8009ce4:	4b20      	ldr	r3, [pc, #128]	; (8009d68 <sent_tcp+0x9c>)
 8009ce6:	f240 1293 	movw	r2, #403	; 0x193
 8009cea:	4920      	ldr	r1, [pc, #128]	; (8009d6c <sent_tcp+0xa0>)
 8009cec:	4820      	ldr	r0, [pc, #128]	; (8009d70 <sent_tcp+0xa4>)
 8009cee:	f00d fa2d 	bl	801714c <iprintf>

  if (conn) {
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d032      	beq.n	8009d5e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	785b      	ldrb	r3, [r3, #1]
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d104      	bne.n	8009d0a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009d00:	2101      	movs	r1, #1
 8009d02:	6978      	ldr	r0, [r7, #20]
 8009d04:	f000 feb0 	bl	800aa68 <lwip_netconn_do_writemore>
 8009d08:	e007      	b.n	8009d1a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	785b      	ldrb	r3, [r3, #1]
 8009d0e:	2b04      	cmp	r3, #4
 8009d10:	d103      	bne.n	8009d1a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009d12:	2101      	movs	r1, #1
 8009d14:	6978      	ldr	r0, [r7, #20]
 8009d16:	f000 fb71 	bl	800a3fc <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d01d      	beq.n	8009d5e <sent_tcp+0x92>
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009d2a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009d2e:	d316      	bcc.n	8009d5e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009d38:	2b04      	cmp	r3, #4
 8009d3a:	d810      	bhi.n	8009d5e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	7f1b      	ldrb	r3, [r3, #28]
 8009d40:	f023 0310 	bic.w	r3, r3, #16
 8009d44:	b2da      	uxtb	r2, r3
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d005      	beq.n	8009d5e <sent_tcp+0x92>
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d56:	88fa      	ldrh	r2, [r7, #6]
 8009d58:	2102      	movs	r1, #2
 8009d5a:	6978      	ldr	r0, [r7, #20]
 8009d5c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009d5e:	2300      	movs	r3, #0
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3718      	adds	r7, #24
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}
 8009d68:	080187f4 	.word	0x080187f4
 8009d6c:	080188e8 	.word	0x080188e8
 8009d70:	08018838 	.word	0x08018838

08009d74 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b088      	sub	sp, #32
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009d84:	69fb      	ldr	r3, [r7, #28]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d106      	bne.n	8009d98 <err_tcp+0x24>
 8009d8a:	4b5f      	ldr	r3, [pc, #380]	; (8009f08 <err_tcp+0x194>)
 8009d8c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8009d90:	495e      	ldr	r1, [pc, #376]	; (8009f0c <err_tcp+0x198>)
 8009d92:	485f      	ldr	r0, [pc, #380]	; (8009f10 <err_tcp+0x19c>)
 8009d94:	f00d f9da 	bl	801714c <iprintf>

  SYS_ARCH_PROTECT(lev);
 8009d98:	f00d f946 	bl	8017028 <sys_arch_protect>
 8009d9c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8009d9e:	69fb      	ldr	r3, [r7, #28]
 8009da0:	2200      	movs	r2, #0
 8009da2:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8009da4:	69fb      	ldr	r3, [r7, #28]
 8009da6:	78fa      	ldrb	r2, [r7, #3]
 8009da8:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8009daa:	69fb      	ldr	r3, [r7, #28]
 8009dac:	7f1b      	ldrb	r3, [r3, #28]
 8009dae:	f043 0301 	orr.w	r3, r3, #1
 8009db2:	b2da      	uxtb	r2, r3
 8009db4:	69fb      	ldr	r3, [r7, #28]
 8009db6:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8009db8:	69fb      	ldr	r3, [r7, #28]
 8009dba:	785b      	ldrb	r3, [r3, #1]
 8009dbc:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8009dbe:	69fb      	ldr	r3, [r7, #28]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8009dc4:	69b8      	ldr	r0, [r7, #24]
 8009dc6:	f00d f93d 	bl	8017044 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009dca:	69fb      	ldr	r3, [r7, #28]
 8009dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d005      	beq.n	8009dde <err_tcp+0x6a>
 8009dd2:	69fb      	ldr	r3, [r7, #28]
 8009dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	2104      	movs	r1, #4
 8009dda:	69f8      	ldr	r0, [r7, #28]
 8009ddc:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009dde:	69fb      	ldr	r3, [r7, #28]
 8009de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d005      	beq.n	8009df2 <err_tcp+0x7e>
 8009de6:	69fb      	ldr	r3, [r7, #28]
 8009de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dea:	2200      	movs	r2, #0
 8009dec:	2100      	movs	r1, #0
 8009dee:	69f8      	ldr	r0, [r7, #28]
 8009df0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009df2:	69fb      	ldr	r3, [r7, #28]
 8009df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d005      	beq.n	8009e06 <err_tcp+0x92>
 8009dfa:	69fb      	ldr	r3, [r7, #28]
 8009dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfe:	2200      	movs	r2, #0
 8009e00:	2102      	movs	r1, #2
 8009e02:	69f8      	ldr	r0, [r7, #28]
 8009e04:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8009e06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7ff fe08 	bl	8009a20 <lwip_netconn_err_to_msg>
 8009e10:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009e12:	69fb      	ldr	r3, [r7, #28]
 8009e14:	3310      	adds	r3, #16
 8009e16:	4618      	mov	r0, r3
 8009e18:	f00c ffeb 	bl	8016df2 <sys_mbox_valid>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d005      	beq.n	8009e2e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8009e22:	69fb      	ldr	r3, [r7, #28]
 8009e24:	3310      	adds	r3, #16
 8009e26:	6939      	ldr	r1, [r7, #16]
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f00c ff6d 	bl	8016d08 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8009e2e:	69fb      	ldr	r3, [r7, #28]
 8009e30:	3314      	adds	r3, #20
 8009e32:	4618      	mov	r0, r3
 8009e34:	f00c ffdd 	bl	8016df2 <sys_mbox_valid>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d005      	beq.n	8009e4a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8009e3e:	69fb      	ldr	r3, [r7, #28]
 8009e40:	3314      	adds	r3, #20
 8009e42:	6939      	ldr	r1, [r7, #16]
 8009e44:	4618      	mov	r0, r3
 8009e46:	f00c ff5f 	bl	8016d08 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8009e4a:	7dfb      	ldrb	r3, [r7, #23]
 8009e4c:	2b01      	cmp	r3, #1
 8009e4e:	d005      	beq.n	8009e5c <err_tcp+0xe8>
 8009e50:	7dfb      	ldrb	r3, [r7, #23]
 8009e52:	2b04      	cmp	r3, #4
 8009e54:	d002      	beq.n	8009e5c <err_tcp+0xe8>
 8009e56:	7dfb      	ldrb	r3, [r7, #23]
 8009e58:	2b03      	cmp	r3, #3
 8009e5a:	d143      	bne.n	8009ee4 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8009e5c:	69fb      	ldr	r3, [r7, #28]
 8009e5e:	7f1b      	ldrb	r3, [r3, #28]
 8009e60:	f003 0304 	and.w	r3, r3, #4
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	bf14      	ite	ne
 8009e68:	2301      	movne	r3, #1
 8009e6a:	2300      	moveq	r3, #0
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8009e70:	69fb      	ldr	r3, [r7, #28]
 8009e72:	7f1b      	ldrb	r3, [r3, #28]
 8009e74:	f023 0304 	bic.w	r3, r3, #4
 8009e78:	b2da      	uxtb	r2, r3
 8009e7a:	69fb      	ldr	r3, [r7, #28]
 8009e7c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d13b      	bne.n	8009efc <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009e84:	69fb      	ldr	r3, [r7, #28]
 8009e86:	6a1b      	ldr	r3, [r3, #32]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d106      	bne.n	8009e9a <err_tcp+0x126>
 8009e8c:	4b1e      	ldr	r3, [pc, #120]	; (8009f08 <err_tcp+0x194>)
 8009e8e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009e92:	4920      	ldr	r1, [pc, #128]	; (8009f14 <err_tcp+0x1a0>)
 8009e94:	481e      	ldr	r0, [pc, #120]	; (8009f10 <err_tcp+0x19c>)
 8009e96:	f00d f959 	bl	801714c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8009e9a:	7dfb      	ldrb	r3, [r7, #23]
 8009e9c:	2b04      	cmp	r3, #4
 8009e9e:	d104      	bne.n	8009eaa <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8009ea0:	69fb      	ldr	r3, [r7, #28]
 8009ea2:	6a1b      	ldr	r3, [r3, #32]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	711a      	strb	r2, [r3, #4]
 8009ea8:	e003      	b.n	8009eb2 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	6a1b      	ldr	r3, [r3, #32]
 8009eae:	78fa      	ldrb	r2, [r7, #3]
 8009eb0:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009eb2:	69fb      	ldr	r3, [r7, #28]
 8009eb4:	6a1b      	ldr	r3, [r3, #32]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	330c      	adds	r3, #12
 8009eba:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8009ebc:	68b8      	ldr	r0, [r7, #8]
 8009ebe:	f00d f829 	bl	8016f14 <sys_sem_valid>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d106      	bne.n	8009ed6 <err_tcp+0x162>
 8009ec8:	4b0f      	ldr	r3, [pc, #60]	; (8009f08 <err_tcp+0x194>)
 8009eca:	f240 12ef 	movw	r2, #495	; 0x1ef
 8009ece:	4912      	ldr	r1, [pc, #72]	; (8009f18 <err_tcp+0x1a4>)
 8009ed0:	480f      	ldr	r0, [pc, #60]	; (8009f10 <err_tcp+0x19c>)
 8009ed2:	f00d f93b 	bl	801714c <iprintf>
      conn->current_msg = NULL;
 8009ed6:	69fb      	ldr	r3, [r7, #28]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8009edc:	68b8      	ldr	r0, [r7, #8]
 8009ede:	f00c ffff 	bl	8016ee0 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8009ee2:	e00b      	b.n	8009efc <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8009ee4:	69fb      	ldr	r3, [r7, #28]
 8009ee6:	6a1b      	ldr	r3, [r3, #32]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d008      	beq.n	8009efe <err_tcp+0x18a>
 8009eec:	4b06      	ldr	r3, [pc, #24]	; (8009f08 <err_tcp+0x194>)
 8009eee:	f240 12f7 	movw	r2, #503	; 0x1f7
 8009ef2:	490a      	ldr	r1, [pc, #40]	; (8009f1c <err_tcp+0x1a8>)
 8009ef4:	4806      	ldr	r0, [pc, #24]	; (8009f10 <err_tcp+0x19c>)
 8009ef6:	f00d f929 	bl	801714c <iprintf>
  }
}
 8009efa:	e000      	b.n	8009efe <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8009efc:	bf00      	nop
}
 8009efe:	bf00      	nop
 8009f00:	3720      	adds	r7, #32
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
 8009f06:	bf00      	nop
 8009f08:	080187f4 	.word	0x080187f4
 8009f0c:	080188e8 	.word	0x080188e8
 8009f10:	08018838 	.word	0x08018838
 8009f14:	080188f8 	.word	0x080188f8
 8009f18:	08018914 	.word	0x08018914
 8009f1c:	08018930 	.word	0x08018930

08009f20 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8009f2e:	6879      	ldr	r1, [r7, #4]
 8009f30:	68f8      	ldr	r0, [r7, #12]
 8009f32:	f005 fddb 	bl	800faec <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8009f36:	490a      	ldr	r1, [pc, #40]	; (8009f60 <setup_tcp+0x40>)
 8009f38:	68f8      	ldr	r0, [r7, #12]
 8009f3a:	f005 fde9 	bl	800fb10 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8009f3e:	4909      	ldr	r1, [pc, #36]	; (8009f64 <setup_tcp+0x44>)
 8009f40:	68f8      	ldr	r0, [r7, #12]
 8009f42:	f005 fe07 	bl	800fb54 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8009f46:	2202      	movs	r2, #2
 8009f48:	4907      	ldr	r1, [pc, #28]	; (8009f68 <setup_tcp+0x48>)
 8009f4a:	68f8      	ldr	r0, [r7, #12]
 8009f4c:	f005 fe5e 	bl	800fc0c <tcp_poll>
  tcp_err(pcb, err_tcp);
 8009f50:	4906      	ldr	r1, [pc, #24]	; (8009f6c <setup_tcp+0x4c>)
 8009f52:	68f8      	ldr	r0, [r7, #12]
 8009f54:	f005 fe20 	bl	800fb98 <tcp_err>
}
 8009f58:	bf00      	nop
 8009f5a:	3710      	adds	r7, #16
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}
 8009f60:	08009af9 	.word	0x08009af9
 8009f64:	08009ccd 	.word	0x08009ccd
 8009f68:	08009c05 	.word	0x08009c05
 8009f6c:	08009d75 	.word	0x08009d75

08009f70 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8009f70:	b590      	push	{r4, r7, lr}
 8009f72:	b089      	sub	sp, #36	; 0x24
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	60b9      	str	r1, [r7, #8]
 8009f7a:	4613      	mov	r3, r2
 8009f7c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009f82:	69fb      	ldr	r3, [r7, #28]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d102      	bne.n	8009f8e <accept_function+0x1e>
    return ERR_VAL;
 8009f88:	f06f 0305 	mvn.w	r3, #5
 8009f8c:	e0a1      	b.n	800a0d2 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8009f8e:	69fb      	ldr	r3, [r7, #28]
 8009f90:	3314      	adds	r3, #20
 8009f92:	4618      	mov	r0, r3
 8009f94:	f00c ff2d 	bl	8016df2 <sys_mbox_valid>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d102      	bne.n	8009fa4 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8009f9e:	f06f 0305 	mvn.w	r3, #5
 8009fa2:	e096      	b.n	800a0d2 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d11b      	bne.n	8009fe2 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8009faa:	69fb      	ldr	r3, [r7, #28]
 8009fac:	f103 0414 	add.w	r4, r3, #20
 8009fb0:	f06f 000c 	mvn.w	r0, #12
 8009fb4:	f7ff fd34 	bl	8009a20 <lwip_netconn_err_to_msg>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	4619      	mov	r1, r3
 8009fbc:	4620      	mov	r0, r4
 8009fbe:	f00c fea3 	bl	8016d08 <sys_mbox_trypost>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d109      	bne.n	8009fdc <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009fc8:	69fb      	ldr	r3, [r7, #28]
 8009fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d005      	beq.n	8009fdc <accept_function+0x6c>
 8009fd0:	69fb      	ldr	r3, [r7, #28]
 8009fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	2100      	movs	r1, #0
 8009fd8:	69f8      	ldr	r0, [r7, #28]
 8009fda:	4798      	blx	r3
    }
    return ERR_VAL;
 8009fdc:	f06f 0305 	mvn.w	r3, #5
 8009fe0:	e077      	b.n	800a0d2 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8009fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d006      	beq.n	8009ff8 <accept_function+0x88>
 8009fea:	4b3c      	ldr	r3, [pc, #240]	; (800a0dc <accept_function+0x16c>)
 8009fec:	f240 222a 	movw	r2, #554	; 0x22a
 8009ff0:	493b      	ldr	r1, [pc, #236]	; (800a0e0 <accept_function+0x170>)
 8009ff2:	483c      	ldr	r0, [pc, #240]	; (800a0e4 <accept_function+0x174>)
 8009ff4:	f00d f8aa 	bl	801714c <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8009ff8:	69fb      	ldr	r3, [r7, #28]
 8009ffa:	781a      	ldrb	r2, [r3, #0]
 8009ffc:	69fb      	ldr	r3, [r7, #28]
 8009ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a000:	4619      	mov	r1, r3
 800a002:	4610      	mov	r0, r2
 800a004:	f000 f8c8 	bl	800a198 <netconn_alloc>
 800a008:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800a00a:	69bb      	ldr	r3, [r7, #24]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d11b      	bne.n	800a048 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800a010:	69fb      	ldr	r3, [r7, #28]
 800a012:	f103 0414 	add.w	r4, r3, #20
 800a016:	f06f 000c 	mvn.w	r0, #12
 800a01a:	f7ff fd01 	bl	8009a20 <lwip_netconn_err_to_msg>
 800a01e:	4603      	mov	r3, r0
 800a020:	4619      	mov	r1, r3
 800a022:	4620      	mov	r0, r4
 800a024:	f00c fe70 	bl	8016d08 <sys_mbox_trypost>
 800a028:	4603      	mov	r3, r0
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d109      	bne.n	800a042 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a02e:	69fb      	ldr	r3, [r7, #28]
 800a030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a032:	2b00      	cmp	r3, #0
 800a034:	d005      	beq.n	800a042 <accept_function+0xd2>
 800a036:	69fb      	ldr	r3, [r7, #28]
 800a038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a03a:	2200      	movs	r2, #0
 800a03c:	2100      	movs	r1, #0
 800a03e:	69f8      	ldr	r0, [r7, #28]
 800a040:	4798      	blx	r3
    }
    return ERR_MEM;
 800a042:	f04f 33ff 	mov.w	r3, #4294967295
 800a046:	e044      	b.n	800a0d2 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800a048:	69bb      	ldr	r3, [r7, #24]
 800a04a:	68ba      	ldr	r2, [r7, #8]
 800a04c:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800a04e:	69b8      	ldr	r0, [r7, #24]
 800a050:	f7ff ff66 	bl	8009f20 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800a054:	69fb      	ldr	r3, [r7, #28]
 800a056:	3314      	adds	r3, #20
 800a058:	69b9      	ldr	r1, [r7, #24]
 800a05a:	4618      	mov	r0, r3
 800a05c:	f00c fe54 	bl	8016d08 <sys_mbox_trypost>
 800a060:	4603      	mov	r3, r0
 800a062:	2b00      	cmp	r3, #0
 800a064:	d02a      	beq.n	800a0bc <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800a06c:	2100      	movs	r1, #0
 800a06e:	6978      	ldr	r0, [r7, #20]
 800a070:	f005 fd3c 	bl	800faec <tcp_arg>
    tcp_recv(pcb, NULL);
 800a074:	2100      	movs	r1, #0
 800a076:	6978      	ldr	r0, [r7, #20]
 800a078:	f005 fd4a 	bl	800fb10 <tcp_recv>
    tcp_sent(pcb, NULL);
 800a07c:	2100      	movs	r1, #0
 800a07e:	6978      	ldr	r0, [r7, #20]
 800a080:	f005 fd68 	bl	800fb54 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800a084:	2200      	movs	r2, #0
 800a086:	2100      	movs	r1, #0
 800a088:	6978      	ldr	r0, [r7, #20]
 800a08a:	f005 fdbf 	bl	800fc0c <tcp_poll>
    tcp_err(pcb, NULL);
 800a08e:	2100      	movs	r1, #0
 800a090:	6978      	ldr	r0, [r7, #20]
 800a092:	f005 fd81 	bl	800fb98 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800a096:	69bb      	ldr	r3, [r7, #24]
 800a098:	2200      	movs	r2, #0
 800a09a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800a09c:	69bb      	ldr	r3, [r7, #24]
 800a09e:	3310      	adds	r3, #16
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f00c fe1f 	bl	8016ce4 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800a0a6:	69bb      	ldr	r3, [r7, #24]
 800a0a8:	3310      	adds	r3, #16
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f00c feb2 	bl	8016e14 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800a0b0:	69b8      	ldr	r0, [r7, #24]
 800a0b2:	f000 f8db 	bl	800a26c <netconn_free>
    return ERR_MEM;
 800a0b6:	f04f 33ff 	mov.w	r3, #4294967295
 800a0ba:	e00a      	b.n	800a0d2 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a0bc:	69fb      	ldr	r3, [r7, #28]
 800a0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d005      	beq.n	800a0d0 <accept_function+0x160>
 800a0c4:	69fb      	ldr	r3, [r7, #28]
 800a0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	2100      	movs	r1, #0
 800a0cc:	69f8      	ldr	r0, [r7, #28]
 800a0ce:	4798      	blx	r3
  }

  return ERR_OK;
 800a0d0:	2300      	movs	r3, #0
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3724      	adds	r7, #36	; 0x24
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd90      	pop	{r4, r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	080187f4 	.word	0x080187f4
 800a0e0:	0801894c 	.word	0x0801894c
 800a0e4:	08018838 	.word	0x08018838

0800a0e8 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800a0e8:	b590      	push	{r4, r7, lr}
 800a0ea:	b085      	sub	sp, #20
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d006      	beq.n	800a10c <pcb_new+0x24>
 800a0fe:	4b18      	ldr	r3, [pc, #96]	; (800a160 <pcb_new+0x78>)
 800a100:	f240 2265 	movw	r2, #613	; 0x265
 800a104:	4917      	ldr	r1, [pc, #92]	; (800a164 <pcb_new+0x7c>)
 800a106:	4818      	ldr	r0, [pc, #96]	; (800a168 <pcb_new+0x80>)
 800a108:	f00d f820 	bl	801714c <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a116:	2b10      	cmp	r3, #16
 800a118:	d112      	bne.n	800a140 <pcb_new+0x58>
      }
      break;
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681c      	ldr	r4, [r3, #0]
 800a11e:	7bfb      	ldrb	r3, [r7, #15]
 800a120:	4618      	mov	r0, r3
 800a122:	f005 fcd5 	bl	800fad0 <tcp_new_ip_type>
 800a126:	4603      	mov	r3, r0
 800a128:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d009      	beq.n	800a148 <pcb_new+0x60>
        setup_tcp(msg->conn);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	4618      	mov	r0, r3
 800a13a:	f7ff fef1 	bl	8009f20 <setup_tcp>
      }
      break;
 800a13e:	e003      	b.n	800a148 <pcb_new+0x60>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	22fa      	movs	r2, #250	; 0xfa
 800a144:	711a      	strb	r2, [r3, #4]
      return;
 800a146:	e008      	b.n	800a15a <pcb_new+0x72>
      break;
 800a148:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d102      	bne.n	800a15a <pcb_new+0x72>
    msg->err = ERR_MEM;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	22ff      	movs	r2, #255	; 0xff
 800a158:	711a      	strb	r2, [r3, #4]
  }
}
 800a15a:	3714      	adds	r7, #20
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd90      	pop	{r4, r7, pc}
 800a160:	080187f4 	.word	0x080187f4
 800a164:	08018974 	.word	0x08018974
 800a168:	08018838 	.word	0x08018838

0800a16c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2200      	movs	r2, #0
 800a17c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d102      	bne.n	800a18e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800a188:	68f8      	ldr	r0, [r7, #12]
 800a18a:	f7ff ffad 	bl	800a0e8 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800a18e:	bf00      	nop
 800a190:	3710      	adds	r7, #16
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
	...

0800a198 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b086      	sub	sp, #24
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	4603      	mov	r3, r0
 800a1a0:	6039      	str	r1, [r7, #0]
 800a1a2:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	75fb      	strb	r3, [r7, #23]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800a1a8:	2006      	movs	r0, #6
 800a1aa:	f002 ff0f 	bl	800cfcc <memp_malloc>
 800a1ae:	6138      	str	r0, [r7, #16]
  if (conn == NULL) {
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d101      	bne.n	800a1ba <netconn_alloc+0x22>
    return NULL;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	e04d      	b.n	800a256 <netconn_alloc+0xbe>
  }

  conn->pending_err = ERR_OK;
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	79fa      	ldrb	r2, [r7, #7]
 800a1c4:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800a1cc:	79fb      	ldrb	r3, [r7, #7]
 800a1ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a1d2:	2b10      	cmp	r3, #16
 800a1d4:	d10c      	bne.n	800a1f0 <netconn_alloc+0x58>
#endif /* LWIP_NETBUF_RECVINFO */
      break;
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800a1d6:	2306      	movs	r3, #6
 800a1d8:	60fb      	str	r3, [r7, #12]
      break;
 800a1da:	bf00      	nop
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
      goto free_and_return;
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	3310      	adds	r3, #16
 800a1e0:	68f9      	ldr	r1, [r7, #12]
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f00c fd5c 	bl	8016ca0 <sys_mbox_new>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d008      	beq.n	800a200 <netconn_alloc+0x68>
    goto free_and_return;
 800a1ee:	e02d      	b.n	800a24c <netconn_alloc+0xb4>
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800a1f0:	4b1b      	ldr	r3, [pc, #108]	; (800a260 <netconn_alloc+0xc8>)
 800a1f2:	f240 22e5 	movw	r2, #741	; 0x2e5
 800a1f6:	491b      	ldr	r1, [pc, #108]	; (800a264 <netconn_alloc+0xcc>)
 800a1f8:	481b      	ldr	r0, [pc, #108]	; (800a268 <netconn_alloc+0xd0>)
 800a1fa:	f00c ffa7 	bl	801714c <iprintf>
      goto free_and_return;
 800a1fe:	e025      	b.n	800a24c <netconn_alloc+0xb4>
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	330c      	adds	r3, #12
 800a204:	2100      	movs	r1, #0
 800a206:	4618      	mov	r0, r3
 800a208:	f00c fe11 	bl	8016e2e <sys_sem_new>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d005      	beq.n	800a21e <netconn_alloc+0x86>
    sys_mbox_free(&conn->recvmbox);
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	3310      	adds	r3, #16
 800a216:	4618      	mov	r0, r3
 800a218:	f00c fd64 	bl	8016ce4 <sys_mbox_free>
    goto free_and_return;
 800a21c:	e016      	b.n	800a24c <netconn_alloc+0xb4>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	3314      	adds	r3, #20
 800a222:	4618      	mov	r0, r3
 800a224:	f00c fdf6 	bl	8016e14 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	2200      	movs	r2, #0
 800a22c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	f04f 32ff 	mov.w	r2, #4294967295
 800a234:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	683a      	ldr	r2, [r7, #0]
 800a23a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	2200      	movs	r2, #0
 800a240:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	7dfa      	ldrb	r2, [r7, #23]
 800a246:	771a      	strb	r2, [r3, #28]
  return conn;
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	e004      	b.n	800a256 <netconn_alloc+0xbe>
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800a24c:	6939      	ldr	r1, [r7, #16]
 800a24e:	2006      	movs	r0, #6
 800a250:	f002 ff0e 	bl	800d070 <memp_free>
  return NULL;
 800a254:	2300      	movs	r3, #0
}
 800a256:	4618      	mov	r0, r3
 800a258:	3718      	adds	r7, #24
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}
 800a25e:	bf00      	nop
 800a260:	080187f4 	.word	0x080187f4
 800a264:	08018994 	.word	0x08018994
 800a268:	08018838 	.word	0x08018838

0800a26c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	685b      	ldr	r3, [r3, #4]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d006      	beq.n	800a28a <netconn_free+0x1e>
 800a27c:	4b1b      	ldr	r3, [pc, #108]	; (800a2ec <netconn_free+0x80>)
 800a27e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a282:	491b      	ldr	r1, [pc, #108]	; (800a2f0 <netconn_free+0x84>)
 800a284:	481b      	ldr	r0, [pc, #108]	; (800a2f4 <netconn_free+0x88>)
 800a286:	f00c ff61 	bl	801714c <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	3310      	adds	r3, #16
 800a28e:	4618      	mov	r0, r3
 800a290:	f00c fdaf 	bl	8016df2 <sys_mbox_valid>
 800a294:	4603      	mov	r3, r0
 800a296:	2b00      	cmp	r3, #0
 800a298:	d006      	beq.n	800a2a8 <netconn_free+0x3c>
 800a29a:	4b14      	ldr	r3, [pc, #80]	; (800a2ec <netconn_free+0x80>)
 800a29c:	f44f 7249 	mov.w	r2, #804	; 0x324
 800a2a0:	4915      	ldr	r1, [pc, #84]	; (800a2f8 <netconn_free+0x8c>)
 800a2a2:	4814      	ldr	r0, [pc, #80]	; (800a2f4 <netconn_free+0x88>)
 800a2a4:	f00c ff52 	bl	801714c <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	3314      	adds	r3, #20
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f00c fda0 	bl	8016df2 <sys_mbox_valid>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d006      	beq.n	800a2c6 <netconn_free+0x5a>
 800a2b8:	4b0c      	ldr	r3, [pc, #48]	; (800a2ec <netconn_free+0x80>)
 800a2ba:	f240 3227 	movw	r2, #807	; 0x327
 800a2be:	490f      	ldr	r1, [pc, #60]	; (800a2fc <netconn_free+0x90>)
 800a2c0:	480c      	ldr	r0, [pc, #48]	; (800a2f4 <netconn_free+0x88>)
 800a2c2:	f00c ff43 	bl	801714c <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	330c      	adds	r3, #12
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f00c fe15 	bl	8016efa <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	330c      	adds	r3, #12
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f00c fe2e 	bl	8016f36 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800a2da:	6879      	ldr	r1, [r7, #4]
 800a2dc:	2006      	movs	r0, #6
 800a2de:	f002 fec7 	bl	800d070 <memp_free>
}
 800a2e2:	bf00      	nop
 800a2e4:	3708      	adds	r7, #8
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
 800a2ea:	bf00      	nop
 800a2ec:	080187f4 	.word	0x080187f4
 800a2f0:	080189bc 	.word	0x080189bc
 800a2f4:	08018838 	.word	0x08018838
 800a2f8:	080189ec 	.word	0x080189ec
 800a2fc:	08018a28 	.word	0x08018a28

0800a300 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b086      	sub	sp, #24
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	3310      	adds	r3, #16
 800a30c:	4618      	mov	r0, r3
 800a30e:	f00c fd70 	bl	8016df2 <sys_mbox_valid>
 800a312:	4603      	mov	r3, r0
 800a314:	2b00      	cmp	r3, #0
 800a316:	d02f      	beq.n	800a378 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a318:	e018      	b.n	800a34c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a322:	2b10      	cmp	r3, #16
 800a324:	d10e      	bne.n	800a344 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	f107 020f 	add.w	r2, r7, #15
 800a32c:	4611      	mov	r1, r2
 800a32e:	4618      	mov	r0, r3
 800a330:	f7ff fba8 	bl	8009a84 <lwip_netconn_is_err_msg>
 800a334:	4603      	mov	r3, r0
 800a336:	2b00      	cmp	r3, #0
 800a338:	d108      	bne.n	800a34c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	4618      	mov	r0, r3
 800a33e:	f003 fd65 	bl	800de0c <pbuf_free>
 800a342:	e003      	b.n	800a34c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	4618      	mov	r0, r3
 800a348:	f000 fef2 	bl	800b130 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	3310      	adds	r3, #16
 800a350:	f107 0210 	add.w	r2, r7, #16
 800a354:	4611      	mov	r1, r2
 800a356:	4618      	mov	r0, r3
 800a358:	f00c fd2f 	bl	8016dba <sys_arch_mbox_tryfetch>
 800a35c:	4603      	mov	r3, r0
 800a35e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a362:	d1da      	bne.n	800a31a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	3310      	adds	r3, #16
 800a368:	4618      	mov	r0, r3
 800a36a:	f00c fcbb 	bl	8016ce4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	3310      	adds	r3, #16
 800a372:	4618      	mov	r0, r3
 800a374:	f00c fd4e 	bl	8016e14 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	3314      	adds	r3, #20
 800a37c:	4618      	mov	r0, r3
 800a37e:	f00c fd38 	bl	8016df2 <sys_mbox_valid>
 800a382:	4603      	mov	r3, r0
 800a384:	2b00      	cmp	r3, #0
 800a386:	d034      	beq.n	800a3f2 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a388:	e01d      	b.n	800a3c6 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	f107 020e 	add.w	r2, r7, #14
 800a390:	4611      	mov	r1, r2
 800a392:	4618      	mov	r0, r3
 800a394:	f7ff fb76 	bl	8009a84 <lwip_netconn_is_err_msg>
 800a398:	4603      	mov	r3, r0
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d113      	bne.n	800a3c6 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800a3a2:	6978      	ldr	r0, [r7, #20]
 800a3a4:	f7ff ffac 	bl	800a300 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d007      	beq.n	800a3c0 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f004 fb0f 	bl	800e9d8 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800a3c0:	6978      	ldr	r0, [r7, #20]
 800a3c2:	f7ff ff53 	bl	800a26c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	3314      	adds	r3, #20
 800a3ca:	f107 0210 	add.w	r2, r7, #16
 800a3ce:	4611      	mov	r1, r2
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f00c fcf2 	bl	8016dba <sys_arch_mbox_tryfetch>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3dc:	d1d5      	bne.n	800a38a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	3314      	adds	r3, #20
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f00c fc7e 	bl	8016ce4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	3314      	adds	r3, #20
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f00c fd11 	bl	8016e14 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800a3f2:	bf00      	nop
 800a3f4:	3718      	adds	r7, #24
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
	...

0800a3fc <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b086      	sub	sp, #24
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	460b      	mov	r3, r1
 800a406:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800a408:	2300      	movs	r3, #0
 800a40a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d106      	bne.n	800a420 <lwip_netconn_do_close_internal+0x24>
 800a412:	4ba1      	ldr	r3, [pc, #644]	; (800a698 <lwip_netconn_do_close_internal+0x29c>)
 800a414:	f240 32a2 	movw	r2, #930	; 0x3a2
 800a418:	49a0      	ldr	r1, [pc, #640]	; (800a69c <lwip_netconn_do_close_internal+0x2a0>)
 800a41a:	48a1      	ldr	r0, [pc, #644]	; (800a6a0 <lwip_netconn_do_close_internal+0x2a4>)
 800a41c:	f00c fe96 	bl	801714c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	781b      	ldrb	r3, [r3, #0]
 800a424:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a428:	2b10      	cmp	r3, #16
 800a42a:	d006      	beq.n	800a43a <lwip_netconn_do_close_internal+0x3e>
 800a42c:	4b9a      	ldr	r3, [pc, #616]	; (800a698 <lwip_netconn_do_close_internal+0x29c>)
 800a42e:	f240 32a3 	movw	r2, #931	; 0x3a3
 800a432:	499c      	ldr	r1, [pc, #624]	; (800a6a4 <lwip_netconn_do_close_internal+0x2a8>)
 800a434:	489a      	ldr	r0, [pc, #616]	; (800a6a0 <lwip_netconn_do_close_internal+0x2a4>)
 800a436:	f00c fe89 	bl	801714c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	785b      	ldrb	r3, [r3, #1]
 800a43e:	2b04      	cmp	r3, #4
 800a440:	d006      	beq.n	800a450 <lwip_netconn_do_close_internal+0x54>
 800a442:	4b95      	ldr	r3, [pc, #596]	; (800a698 <lwip_netconn_do_close_internal+0x29c>)
 800a444:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800a448:	4997      	ldr	r1, [pc, #604]	; (800a6a8 <lwip_netconn_do_close_internal+0x2ac>)
 800a44a:	4895      	ldr	r0, [pc, #596]	; (800a6a0 <lwip_netconn_do_close_internal+0x2a4>)
 800a44c:	f00c fe7e 	bl	801714c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d106      	bne.n	800a466 <lwip_netconn_do_close_internal+0x6a>
 800a458:	4b8f      	ldr	r3, [pc, #572]	; (800a698 <lwip_netconn_do_close_internal+0x29c>)
 800a45a:	f240 32a5 	movw	r2, #933	; 0x3a5
 800a45e:	4993      	ldr	r1, [pc, #588]	; (800a6ac <lwip_netconn_do_close_internal+0x2b0>)
 800a460:	488f      	ldr	r0, [pc, #572]	; (800a6a0 <lwip_netconn_do_close_internal+0x2a4>)
 800a462:	f00c fe73 	bl	801714c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6a1b      	ldr	r3, [r3, #32]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d106      	bne.n	800a47c <lwip_netconn_do_close_internal+0x80>
 800a46e:	4b8a      	ldr	r3, [pc, #552]	; (800a698 <lwip_netconn_do_close_internal+0x29c>)
 800a470:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a474:	498e      	ldr	r1, [pc, #568]	; (800a6b0 <lwip_netconn_do_close_internal+0x2b4>)
 800a476:	488a      	ldr	r0, [pc, #552]	; (800a6a0 <lwip_netconn_do_close_internal+0x2a4>)
 800a478:	f00c fe68 	bl	801714c <iprintf>

  tpcb = conn->pcb.tcp;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6a1b      	ldr	r3, [r3, #32]
 800a486:	7a1b      	ldrb	r3, [r3, #8]
 800a488:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800a48a:	7bfb      	ldrb	r3, [r7, #15]
 800a48c:	f003 0301 	and.w	r3, r3, #1
 800a490:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800a492:	7bfb      	ldrb	r3, [r7, #15]
 800a494:	f003 0302 	and.w	r3, r3, #2
 800a498:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800a49a:	7bfb      	ldrb	r3, [r7, #15]
 800a49c:	2b03      	cmp	r3, #3
 800a49e:	d102      	bne.n	800a4a6 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	75bb      	strb	r3, [r7, #22]
 800a4a4:	e01f      	b.n	800a4e6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800a4a6:	7bbb      	ldrb	r3, [r7, #14]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d00e      	beq.n	800a4ca <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800a4b0:	2b05      	cmp	r3, #5
 800a4b2:	d007      	beq.n	800a4c4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800a4b8:	2b06      	cmp	r3, #6
 800a4ba:	d003      	beq.n	800a4c4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800a4c0:	2b08      	cmp	r3, #8
 800a4c2:	d102      	bne.n	800a4ca <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	75bb      	strb	r3, [r7, #22]
 800a4c8:	e00d      	b.n	800a4e6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800a4ca:	7b7b      	ldrb	r3, [r7, #13]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d008      	beq.n	800a4e2 <lwip_netconn_do_close_internal+0xe6>
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	8b5b      	ldrh	r3, [r3, #26]
 800a4d4:	f003 0310 	and.w	r3, r3, #16
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d002      	beq.n	800a4e2 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800a4dc:	2301      	movs	r3, #1
 800a4de:	75bb      	strb	r3, [r7, #22]
 800a4e0:	e001      	b.n	800a4e6 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800a4e6:	7dbb      	ldrb	r3, [r7, #22]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d003      	beq.n	800a4f4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800a4ec:	2100      	movs	r1, #0
 800a4ee:	6938      	ldr	r0, [r7, #16]
 800a4f0:	f005 fafc 	bl	800faec <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	7d1b      	ldrb	r3, [r3, #20]
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	d104      	bne.n	800a506 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800a4fc:	2100      	movs	r1, #0
 800a4fe:	6938      	ldr	r0, [r7, #16]
 800a500:	f005 fb6c 	bl	800fbdc <tcp_accept>
 800a504:	e01d      	b.n	800a542 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800a506:	7bbb      	ldrb	r3, [r7, #14]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d007      	beq.n	800a51c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800a50c:	2100      	movs	r1, #0
 800a50e:	6938      	ldr	r0, [r7, #16]
 800a510:	f005 fafe 	bl	800fb10 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800a514:	2100      	movs	r1, #0
 800a516:	6938      	ldr	r0, [r7, #16]
 800a518:	f005 fb60 	bl	800fbdc <tcp_accept>
    }
    if (shut_tx) {
 800a51c:	7b7b      	ldrb	r3, [r7, #13]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d003      	beq.n	800a52a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800a522:	2100      	movs	r1, #0
 800a524:	6938      	ldr	r0, [r7, #16]
 800a526:	f005 fb15 	bl	800fb54 <tcp_sent>
    }
    if (shut_close) {
 800a52a:	7dbb      	ldrb	r3, [r7, #22]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d008      	beq.n	800a542 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800a530:	2200      	movs	r2, #0
 800a532:	2100      	movs	r1, #0
 800a534:	6938      	ldr	r0, [r7, #16]
 800a536:	f005 fb69 	bl	800fc0c <tcp_poll>
      tcp_err(tpcb, NULL);
 800a53a:	2100      	movs	r1, #0
 800a53c:	6938      	ldr	r0, [r7, #16]
 800a53e:	f005 fb2b 	bl	800fb98 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800a542:	7dbb      	ldrb	r3, [r7, #22]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d005      	beq.n	800a554 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800a548:	6938      	ldr	r0, [r7, #16]
 800a54a:	f004 f901 	bl	800e750 <tcp_close>
 800a54e:	4603      	mov	r3, r0
 800a550:	75fb      	strb	r3, [r7, #23]
 800a552:	e007      	b.n	800a564 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800a554:	7bbb      	ldrb	r3, [r7, #14]
 800a556:	7b7a      	ldrb	r2, [r7, #13]
 800a558:	4619      	mov	r1, r3
 800a55a:	6938      	ldr	r0, [r7, #16]
 800a55c:	f004 f924 	bl	800e7a8 <tcp_shutdown>
 800a560:	4603      	mov	r3, r0
 800a562:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800a564:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d102      	bne.n	800a572 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800a56c:	2301      	movs	r3, #1
 800a56e:	757b      	strb	r3, [r7, #21]
 800a570:	e016      	b.n	800a5a0 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800a572:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a57a:	d10f      	bne.n	800a59c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6a1b      	ldr	r3, [r3, #32]
 800a580:	7a5b      	ldrb	r3, [r3, #9]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d10c      	bne.n	800a5a0 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800a586:	2301      	movs	r3, #1
 800a588:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800a58a:	7dbb      	ldrb	r3, [r7, #22]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d007      	beq.n	800a5a0 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800a590:	6938      	ldr	r0, [r7, #16]
 800a592:	f004 fa21 	bl	800e9d8 <tcp_abort>
          err = ERR_OK;
 800a596:	2300      	movs	r3, #0
 800a598:	75fb      	strb	r3, [r7, #23]
 800a59a:	e001      	b.n	800a5a0 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800a59c:	2301      	movs	r3, #1
 800a59e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800a5a0:	7d7b      	ldrb	r3, [r7, #21]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d044      	beq.n	800a630 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6a1b      	ldr	r3, [r3, #32]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	330c      	adds	r3, #12
 800a5ae:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6a1b      	ldr	r3, [r3, #32]
 800a5b4:	7dfa      	ldrb	r2, [r7, #23]
 800a5b6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800a5c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d129      	bne.n	800a620 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800a5cc:	7dbb      	ldrb	r3, [r7, #22]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d00c      	beq.n	800a5ec <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d005      	beq.n	800a5ec <lwip_netconn_do_close_internal+0x1f0>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	2104      	movs	r1, #4
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	4798      	blx	r3
      }
      if (shut_rx) {
 800a5ec:	7bbb      	ldrb	r3, [r7, #14]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d009      	beq.n	800a606 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d005      	beq.n	800a606 <lwip_netconn_do_close_internal+0x20a>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5fe:	2200      	movs	r2, #0
 800a600:	2100      	movs	r1, #0
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	4798      	blx	r3
      }
      if (shut_tx) {
 800a606:	7b7b      	ldrb	r3, [r7, #13]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d009      	beq.n	800a620 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a610:	2b00      	cmp	r3, #0
 800a612:	d005      	beq.n	800a620 <lwip_netconn_do_close_internal+0x224>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a618:	2200      	movs	r2, #0
 800a61a:	2102      	movs	r1, #2
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a620:	78fb      	ldrb	r3, [r7, #3]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d002      	beq.n	800a62c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800a626:	68b8      	ldr	r0, [r7, #8]
 800a628:	f00c fc5a 	bl	8016ee0 <sys_sem_signal>
    }
    return ERR_OK;
 800a62c:	2300      	movs	r3, #0
 800a62e:	e02e      	b.n	800a68e <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800a630:	7d7b      	ldrb	r3, [r7, #21]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d11e      	bne.n	800a674 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	7d1b      	ldrb	r3, [r3, #20]
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d106      	bne.n	800a64c <lwip_netconn_do_close_internal+0x250>
 800a63e:	4b16      	ldr	r3, [pc, #88]	; (800a698 <lwip_netconn_do_close_internal+0x29c>)
 800a640:	f240 4241 	movw	r2, #1089	; 0x441
 800a644:	491b      	ldr	r1, [pc, #108]	; (800a6b4 <lwip_netconn_do_close_internal+0x2b8>)
 800a646:	4816      	ldr	r0, [pc, #88]	; (800a6a0 <lwip_netconn_do_close_internal+0x2a4>)
 800a648:	f00c fd80 	bl	801714c <iprintf>
    if (shut_tx) {
 800a64c:	7b7b      	ldrb	r3, [r7, #13]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d003      	beq.n	800a65a <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800a652:	4919      	ldr	r1, [pc, #100]	; (800a6b8 <lwip_netconn_do_close_internal+0x2bc>)
 800a654:	6938      	ldr	r0, [r7, #16]
 800a656:	f005 fa7d 	bl	800fb54 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800a65a:	2201      	movs	r2, #1
 800a65c:	4917      	ldr	r1, [pc, #92]	; (800a6bc <lwip_netconn_do_close_internal+0x2c0>)
 800a65e:	6938      	ldr	r0, [r7, #16]
 800a660:	f005 fad4 	bl	800fc0c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800a664:	4916      	ldr	r1, [pc, #88]	; (800a6c0 <lwip_netconn_do_close_internal+0x2c4>)
 800a666:	6938      	ldr	r0, [r7, #16]
 800a668:	f005 fa96 	bl	800fb98 <tcp_err>
    tcp_arg(tpcb, conn);
 800a66c:	6879      	ldr	r1, [r7, #4]
 800a66e:	6938      	ldr	r0, [r7, #16]
 800a670:	f005 fa3c 	bl	800faec <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800a674:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d106      	bne.n	800a68a <lwip_netconn_do_close_internal+0x28e>
 800a67c:	4b06      	ldr	r3, [pc, #24]	; (800a698 <lwip_netconn_do_close_internal+0x29c>)
 800a67e:	f240 424d 	movw	r2, #1101	; 0x44d
 800a682:	4910      	ldr	r1, [pc, #64]	; (800a6c4 <lwip_netconn_do_close_internal+0x2c8>)
 800a684:	4806      	ldr	r0, [pc, #24]	; (800a6a0 <lwip_netconn_do_close_internal+0x2a4>)
 800a686:	f00c fd61 	bl	801714c <iprintf>
  return err;
 800a68a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3718      	adds	r7, #24
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
 800a696:	bf00      	nop
 800a698:	080187f4 	.word	0x080187f4
 800a69c:	08018a64 	.word	0x08018a64
 800a6a0:	08018838 	.word	0x08018838
 800a6a4:	08018a74 	.word	0x08018a74
 800a6a8:	08018a94 	.word	0x08018a94
 800a6ac:	08018ab8 	.word	0x08018ab8
 800a6b0:	080188f8 	.word	0x080188f8
 800a6b4:	08018acc 	.word	0x08018acc
 800a6b8:	08009ccd 	.word	0x08009ccd
 800a6bc:	08009c05 	.word	0x08009c05
 800a6c0:	08009d75 	.word	0x08009d75
 800a6c4:	08018af0 	.word	0x08018af0

0800a6c8 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	785b      	ldrb	r3, [r3, #1]
 800a6da:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800a6dc:	7afb      	ldrb	r3, [r7, #11]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d00d      	beq.n	800a6fe <lwip_netconn_do_delconn+0x36>
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a6ec:	2b10      	cmp	r3, #16
 800a6ee:	d006      	beq.n	800a6fe <lwip_netconn_do_delconn+0x36>
 800a6f0:	4b59      	ldr	r3, [pc, #356]	; (800a858 <lwip_netconn_do_delconn+0x190>)
 800a6f2:	f240 425f 	movw	r2, #1119	; 0x45f
 800a6f6:	4959      	ldr	r1, [pc, #356]	; (800a85c <lwip_netconn_do_delconn+0x194>)
 800a6f8:	4859      	ldr	r0, [pc, #356]	; (800a860 <lwip_netconn_do_delconn+0x198>)
 800a6fa:	f00c fd27 	bl	801714c <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800a6fe:	7afb      	ldrb	r3, [r7, #11]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d005      	beq.n	800a710 <lwip_netconn_do_delconn+0x48>
 800a704:	7afb      	ldrb	r3, [r7, #11]
 800a706:	2b02      	cmp	r3, #2
 800a708:	d002      	beq.n	800a710 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800a70a:	7afb      	ldrb	r3, [r7, #11]
 800a70c:	2b03      	cmp	r3, #3
 800a70e:	d109      	bne.n	800a724 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800a710:	7afb      	ldrb	r3, [r7, #11]
 800a712:	2b03      	cmp	r3, #3
 800a714:	d10a      	bne.n	800a72c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	7f1b      	ldrb	r3, [r3, #28]
 800a71c:	f003 0304 	and.w	r3, r3, #4
 800a720:	2b00      	cmp	r3, #0
 800a722:	d103      	bne.n	800a72c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	22fb      	movs	r2, #251	; 0xfb
 800a728:	711a      	strb	r2, [r3, #4]
 800a72a:	e08a      	b.n	800a842 <lwip_netconn_do_delconn+0x17a>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800a72c:	7afb      	ldrb	r3, [r7, #11]
 800a72e:	2b03      	cmp	r3, #3
 800a730:	d10d      	bne.n	800a74e <lwip_netconn_do_delconn+0x86>
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	7f1b      	ldrb	r3, [r3, #28]
 800a738:	f003 0304 	and.w	r3, r3, #4
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d106      	bne.n	800a74e <lwip_netconn_do_delconn+0x86>
 800a740:	4b45      	ldr	r3, [pc, #276]	; (800a858 <lwip_netconn_do_delconn+0x190>)
 800a742:	f240 427b 	movw	r2, #1147	; 0x47b
 800a746:	4947      	ldr	r1, [pc, #284]	; (800a864 <lwip_netconn_do_delconn+0x19c>)
 800a748:	4845      	ldr	r0, [pc, #276]	; (800a860 <lwip_netconn_do_delconn+0x198>)
 800a74a:	f00c fcff 	bl	801714c <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2200      	movs	r2, #0
 800a752:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4618      	mov	r0, r3
 800a75a:	f7ff fdd1 	bl	800a300 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d052      	beq.n	800a80e <lwip_netconn_do_delconn+0x146>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	781b      	ldrb	r3, [r3, #0]
 800a76e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a772:	2b10      	cmp	r3, #16
 800a774:	d005      	beq.n	800a782 <lwip_netconn_do_delconn+0xba>
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
#endif /* LWIP_TCP */
        default:
          break;
 800a776:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	2200      	movs	r2, #0
 800a77e:	605a      	str	r2, [r3, #4]
 800a780:	e045      	b.n	800a80e <lwip_netconn_do_delconn+0x146>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	6a1b      	ldr	r3, [r3, #32]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d006      	beq.n	800a79a <lwip_netconn_do_delconn+0xd2>
 800a78c:	4b32      	ldr	r3, [pc, #200]	; (800a858 <lwip_netconn_do_delconn+0x190>)
 800a78e:	f240 4294 	movw	r2, #1172	; 0x494
 800a792:	4935      	ldr	r1, [pc, #212]	; (800a868 <lwip_netconn_do_delconn+0x1a0>)
 800a794:	4832      	ldr	r0, [pc, #200]	; (800a860 <lwip_netconn_do_delconn+0x198>)
 800a796:	f00c fcd9 	bl	801714c <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	2204      	movs	r2, #4
 800a7a0:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	2203      	movs	r2, #3
 800a7a6:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	68fa      	ldr	r2, [r7, #12]
 800a7ae:	621a      	str	r2, [r3, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	2100      	movs	r1, #0
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f7ff fe20 	bl	800a3fc <lwip_netconn_do_close_internal>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d046      	beq.n	800a850 <lwip_netconn_do_delconn+0x188>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	785b      	ldrb	r3, [r3, #1]
 800a7c8:	2b04      	cmp	r3, #4
 800a7ca:	d006      	beq.n	800a7da <lwip_netconn_do_delconn+0x112>
 800a7cc:	4b22      	ldr	r3, [pc, #136]	; (800a858 <lwip_netconn_do_delconn+0x190>)
 800a7ce:	f240 429a 	movw	r2, #1178	; 0x49a
 800a7d2:	4926      	ldr	r1, [pc, #152]	; (800a86c <lwip_netconn_do_delconn+0x1a4>)
 800a7d4:	4822      	ldr	r0, [pc, #136]	; (800a860 <lwip_netconn_do_delconn+0x198>)
 800a7d6:	f00c fcb9 	bl	801714c <iprintf>
            UNLOCK_TCPIP_CORE();
 800a7da:	4825      	ldr	r0, [pc, #148]	; (800a870 <lwip_netconn_do_delconn+0x1a8>)
 800a7dc:	f00c fbf1 	bl	8016fc2 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	330c      	adds	r3, #12
 800a7e6:	2100      	movs	r1, #0
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f00c fb48 	bl	8016e7e <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800a7ee:	4820      	ldr	r0, [pc, #128]	; (800a870 <lwip_netconn_do_delconn+0x1a8>)
 800a7f0:	f00c fbd8 	bl	8016fa4 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	785b      	ldrb	r3, [r3, #1]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d028      	beq.n	800a850 <lwip_netconn_do_delconn+0x188>
 800a7fe:	4b16      	ldr	r3, [pc, #88]	; (800a858 <lwip_netconn_do_delconn+0x190>)
 800a800:	f240 429e 	movw	r2, #1182	; 0x49e
 800a804:	4919      	ldr	r1, [pc, #100]	; (800a86c <lwip_netconn_do_delconn+0x1a4>)
 800a806:	4816      	ldr	r0, [pc, #88]	; (800a860 <lwip_netconn_do_delconn+0x198>)
 800a808:	f00c fca0 	bl	801714c <iprintf>
          return;
 800a80c:	e020      	b.n	800a850 <lwip_netconn_do_delconn+0x188>
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a814:	2b00      	cmp	r3, #0
 800a816:	d007      	beq.n	800a828 <lwip_netconn_do_delconn+0x160>
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a81e:	68fa      	ldr	r2, [r7, #12]
 800a820:	6810      	ldr	r0, [r2, #0]
 800a822:	2200      	movs	r2, #0
 800a824:	2100      	movs	r1, #0
 800a826:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d007      	beq.n	800a842 <lwip_netconn_do_delconn+0x17a>
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a838:	68fa      	ldr	r2, [r7, #12]
 800a83a:	6810      	ldr	r0, [r2, #0]
 800a83c:	2200      	movs	r2, #0
 800a83e:	2102      	movs	r1, #2
 800a840:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	330c      	adds	r3, #12
 800a848:	4618      	mov	r0, r3
 800a84a:	f00c fb63 	bl	8016f14 <sys_sem_valid>
 800a84e:	e000      	b.n	800a852 <lwip_netconn_do_delconn+0x18a>
          return;
 800a850:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800a852:	3710      	adds	r7, #16
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}
 800a858:	080187f4 	.word	0x080187f4
 800a85c:	08018b00 	.word	0x08018b00
 800a860:	08018838 	.word	0x08018838
 800a864:	08018b14 	.word	0x08018b14
 800a868:	08018b34 	.word	0x08018b34
 800a86c:	08018b50 	.word	0x08018b50
 800a870:	200079ec 	.word	0x200079ec

0800a874 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b084      	sub	sp, #16
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	685b      	ldr	r3, [r3, #4]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d017      	beq.n	800a8ba <lwip_netconn_do_bind+0x46>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a894:	2b10      	cmp	r3, #16
 800a896:	d10c      	bne.n	800a8b2 <lwip_netconn_do_bind+0x3e>
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	6858      	ldr	r0, [r3, #4]
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	6899      	ldr	r1, [r3, #8]
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	899b      	ldrh	r3, [r3, #12]
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	f004 f8a2 	bl	800e9f0 <tcp_bind>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	73fb      	strb	r3, [r7, #15]
        break;
 800a8b0:	e005      	b.n	800a8be <lwip_netconn_do_bind+0x4a>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800a8b2:	23fa      	movs	r3, #250	; 0xfa
 800a8b4:	73fb      	strb	r3, [r7, #15]
        break;
 800a8b6:	bf00      	nop
 800a8b8:	e001      	b.n	800a8be <lwip_netconn_do_bind+0x4a>
    }
  } else {
    err = ERR_VAL;
 800a8ba:	23fa      	movs	r3, #250	; 0xfa
 800a8bc:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	7bfa      	ldrb	r2, [r7, #15]
 800a8c2:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800a8c4:	bf00      	nop
 800a8c6:	3710      	adds	r7, #16
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}

0800a8cc <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b086      	sub	sp, #24
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	685b      	ldr	r3, [r3, #4]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d07f      	beq.n	800a9e2 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	781b      	ldrb	r3, [r3, #0]
 800a8e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a8ec:	2b10      	cmp	r3, #16
 800a8ee:	d175      	bne.n	800a9dc <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	785b      	ldrb	r3, [r3, #1]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d165      	bne.n	800a9c6 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	7d1b      	ldrb	r3, [r3, #20]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d002      	beq.n	800a90c <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800a906:	23fa      	movs	r3, #250	; 0xfa
 800a908:	72fb      	strb	r3, [r7, #11]
 800a90a:	e06c      	b.n	800a9e6 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800a90c:	23ff      	movs	r3, #255	; 0xff
 800a90e:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	685b      	ldr	r3, [r3, #4]
 800a916:	f107 020b 	add.w	r2, r7, #11
 800a91a:	7cf9      	ldrb	r1, [r7, #19]
 800a91c:	4618      	mov	r0, r3
 800a91e:	f004 f91f 	bl	800eb60 <tcp_listen_with_backlog_and_err>
 800a922:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d05d      	beq.n	800a9e6 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	3310      	adds	r3, #16
 800a930:	4618      	mov	r0, r3
 800a932:	f00c fa5e 	bl	8016df2 <sys_mbox_valid>
 800a936:	4603      	mov	r3, r0
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d00b      	beq.n	800a954 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	3310      	adds	r3, #16
 800a942:	4618      	mov	r0, r3
 800a944:	f00c f9ce 	bl	8016ce4 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	3310      	adds	r3, #16
 800a94e:	4618      	mov	r0, r3
 800a950:	f00c fa60 	bl	8016e14 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800a954:	2300      	movs	r3, #0
 800a956:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800a958:	697b      	ldr	r3, [r7, #20]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	3314      	adds	r3, #20
 800a95e:	4618      	mov	r0, r3
 800a960:	f00c fa47 	bl	8016df2 <sys_mbox_valid>
 800a964:	4603      	mov	r3, r0
 800a966:	2b00      	cmp	r3, #0
 800a968:	d108      	bne.n	800a97c <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	3314      	adds	r3, #20
 800a970:	2106      	movs	r1, #6
 800a972:	4618      	mov	r0, r3
 800a974:	f00c f994 	bl	8016ca0 <sys_mbox_new>
 800a978:	4603      	mov	r3, r0
 800a97a:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800a97c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d118      	bne.n	800a9b6 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	2202      	movs	r2, #2
 800a98a:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	68fa      	ldr	r2, [r7, #12]
 800a992:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	685a      	ldr	r2, [r3, #4]
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	4619      	mov	r1, r3
 800a9a0:	4610      	mov	r0, r2
 800a9a2:	f005 f8a3 	bl	800faec <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	4912      	ldr	r1, [pc, #72]	; (800a9f8 <lwip_netconn_do_listen+0x12c>)
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f005 f914 	bl	800fbdc <tcp_accept>
 800a9b4:	e017      	b.n	800a9e6 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800a9b6:	68f8      	ldr	r0, [r7, #12]
 800a9b8:	f003 feca 	bl	800e750 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	605a      	str	r2, [r3, #4]
 800a9c4:	e00f      	b.n	800a9e6 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	785b      	ldrb	r3, [r3, #1]
 800a9cc:	2b02      	cmp	r3, #2
 800a9ce:	d102      	bne.n	800a9d6 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	72fb      	strb	r3, [r7, #11]
 800a9d4:	e007      	b.n	800a9e6 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800a9d6:	23f5      	movs	r3, #245	; 0xf5
 800a9d8:	72fb      	strb	r3, [r7, #11]
 800a9da:	e004      	b.n	800a9e6 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800a9dc:	23f0      	movs	r3, #240	; 0xf0
 800a9de:	72fb      	strb	r3, [r7, #11]
 800a9e0:	e001      	b.n	800a9e6 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800a9e2:	23f5      	movs	r3, #245	; 0xf5
 800a9e4:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800a9e6:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800a9ee:	bf00      	nop
 800a9f0:	3718      	adds	r7, #24
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
 800a9f6:	bf00      	nop
 800a9f8:	08009f71 	.word	0x08009f71

0800a9fc <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b086      	sub	sp, #24
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	685b      	ldr	r3, [r3, #4]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d022      	beq.n	800aa5e <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	781b      	ldrb	r3, [r3, #0]
 800aa1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa22:	2b10      	cmp	r3, #16
 800aa24:	d11b      	bne.n	800aa5e <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	689b      	ldr	r3, [r3, #8]
 800aa2a:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa32:	d202      	bcs.n	800aa3a <lwip_netconn_do_recv+0x3e>
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	e001      	b.n	800aa3e <lwip_netconn_do_recv+0x42>
 800aa3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aa3e:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	89fa      	ldrh	r2, [r7, #14]
 800aa48:	4611      	mov	r1, r2
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f004 f98c 	bl	800ed68 <tcp_recved>
        remaining -= recved;
 800aa50:	89fb      	ldrh	r3, [r7, #14]
 800aa52:	697a      	ldr	r2, [r7, #20]
 800aa54:	1ad3      	subs	r3, r2, r3
 800aa56:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d1e6      	bne.n	800aa2c <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800aa5e:	bf00      	nop
 800aa60:	3718      	adds	r7, #24
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}
	...

0800aa68 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b088      	sub	sp, #32
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	460b      	mov	r3, r1
 800aa72:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800aa74:	2300      	movs	r3, #0
 800aa76:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d106      	bne.n	800aa8c <lwip_netconn_do_writemore+0x24>
 800aa7e:	4b96      	ldr	r3, [pc, #600]	; (800acd8 <lwip_netconn_do_writemore+0x270>)
 800aa80:	f240 6273 	movw	r2, #1651	; 0x673
 800aa84:	4995      	ldr	r1, [pc, #596]	; (800acdc <lwip_netconn_do_writemore+0x274>)
 800aa86:	4896      	ldr	r0, [pc, #600]	; (800ace0 <lwip_netconn_do_writemore+0x278>)
 800aa88:	f00c fb60 	bl	801714c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	785b      	ldrb	r3, [r3, #1]
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d006      	beq.n	800aaa2 <lwip_netconn_do_writemore+0x3a>
 800aa94:	4b90      	ldr	r3, [pc, #576]	; (800acd8 <lwip_netconn_do_writemore+0x270>)
 800aa96:	f240 6274 	movw	r2, #1652	; 0x674
 800aa9a:	4992      	ldr	r1, [pc, #584]	; (800ace4 <lwip_netconn_do_writemore+0x27c>)
 800aa9c:	4890      	ldr	r0, [pc, #576]	; (800ace0 <lwip_netconn_do_writemore+0x278>)
 800aa9e:	f00c fb55 	bl	801714c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6a1b      	ldr	r3, [r3, #32]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d106      	bne.n	800aab8 <lwip_netconn_do_writemore+0x50>
 800aaaa:	4b8b      	ldr	r3, [pc, #556]	; (800acd8 <lwip_netconn_do_writemore+0x270>)
 800aaac:	f240 6275 	movw	r2, #1653	; 0x675
 800aab0:	498d      	ldr	r1, [pc, #564]	; (800ace8 <lwip_netconn_do_writemore+0x280>)
 800aab2:	488b      	ldr	r0, [pc, #556]	; (800ace0 <lwip_netconn_do_writemore+0x278>)
 800aab4:	f00c fb4a 	bl	801714c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	685b      	ldr	r3, [r3, #4]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d106      	bne.n	800aace <lwip_netconn_do_writemore+0x66>
 800aac0:	4b85      	ldr	r3, [pc, #532]	; (800acd8 <lwip_netconn_do_writemore+0x270>)
 800aac2:	f240 6276 	movw	r2, #1654	; 0x676
 800aac6:	4989      	ldr	r1, [pc, #548]	; (800acec <lwip_netconn_do_writemore+0x284>)
 800aac8:	4885      	ldr	r0, [pc, #532]	; (800ace0 <lwip_netconn_do_writemore+0x278>)
 800aaca:	f00c fb3f 	bl	801714c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6a1b      	ldr	r3, [r3, #32]
 800aad2:	699a      	ldr	r2, [r3, #24]
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6a1b      	ldr	r3, [r3, #32]
 800aad8:	695b      	ldr	r3, [r3, #20]
 800aada:	429a      	cmp	r2, r3
 800aadc:	d306      	bcc.n	800aaec <lwip_netconn_do_writemore+0x84>
 800aade:	4b7e      	ldr	r3, [pc, #504]	; (800acd8 <lwip_netconn_do_writemore+0x270>)
 800aae0:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 800aae4:	4982      	ldr	r1, [pc, #520]	; (800acf0 <lwip_netconn_do_writemore+0x288>)
 800aae6:	487e      	ldr	r0, [pc, #504]	; (800ace0 <lwip_netconn_do_writemore+0x278>)
 800aae8:	f00c fb30 	bl	801714c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6a1b      	ldr	r3, [r3, #32]
 800aaf0:	899b      	ldrh	r3, [r3, #12]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d106      	bne.n	800ab04 <lwip_netconn_do_writemore+0x9c>
 800aaf6:	4b78      	ldr	r3, [pc, #480]	; (800acd8 <lwip_netconn_do_writemore+0x270>)
 800aaf8:	f240 6279 	movw	r2, #1657	; 0x679
 800aafc:	497d      	ldr	r1, [pc, #500]	; (800acf4 <lwip_netconn_do_writemore+0x28c>)
 800aafe:	4878      	ldr	r0, [pc, #480]	; (800ace0 <lwip_netconn_do_writemore+0x278>)
 800ab00:	f00c fb24 	bl	801714c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6a1b      	ldr	r3, [r3, #32]
 800ab08:	7f1b      	ldrb	r3, [r3, #28]
 800ab0a:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	7f1b      	ldrb	r3, [r3, #28]
 800ab10:	f003 0302 	and.w	r3, r3, #2
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d104      	bne.n	800ab22 <lwip_netconn_do_writemore+0xba>
 800ab18:	7ebb      	ldrb	r3, [r7, #26]
 800ab1a:	f003 0304 	and.w	r3, r3, #4
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d001      	beq.n	800ab26 <lwip_netconn_do_writemore+0xbe>
 800ab22:	2301      	movs	r3, #1
 800ab24:	e000      	b.n	800ab28 <lwip_netconn_do_writemore+0xc0>
 800ab26:	2300      	movs	r3, #0
 800ab28:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6a1b      	ldr	r3, [r3, #32]
 800ab2e:	689b      	ldr	r3, [r3, #8]
 800ab30:	681a      	ldr	r2, [r3, #0]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6a1b      	ldr	r3, [r3, #32]
 800ab36:	691b      	ldr	r3, [r3, #16]
 800ab38:	4413      	add	r3, r2
 800ab3a:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6a1b      	ldr	r3, [r3, #32]
 800ab40:	689b      	ldr	r3, [r3, #8]
 800ab42:	685a      	ldr	r2, [r3, #4]
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6a1b      	ldr	r3, [r3, #32]
 800ab48:	691b      	ldr	r3, [r3, #16]
 800ab4a:	1ad3      	subs	r3, r2, r3
 800ab4c:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab54:	d307      	bcc.n	800ab66 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800ab56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ab5a:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800ab5c:	7ebb      	ldrb	r3, [r7, #26]
 800ab5e:	f043 0302 	orr.w	r3, r3, #2
 800ab62:	76bb      	strb	r3, [r7, #26]
 800ab64:	e001      	b.n	800ab6a <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ab72:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800ab74:	89fa      	ldrh	r2, [r7, #14]
 800ab76:	8bbb      	ldrh	r3, [r7, #28]
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	d216      	bcs.n	800abaa <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800ab7c:	89fb      	ldrh	r3, [r7, #14]
 800ab7e:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800ab80:	7e3b      	ldrb	r3, [r7, #24]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d00d      	beq.n	800aba2 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800ab86:	8bbb      	ldrh	r3, [r7, #28]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d10e      	bne.n	800abaa <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6a1b      	ldr	r3, [r3, #32]
 800ab90:	699b      	ldr	r3, [r3, #24]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d102      	bne.n	800ab9c <lwip_netconn_do_writemore+0x134>
 800ab96:	f06f 0306 	mvn.w	r3, #6
 800ab9a:	e000      	b.n	800ab9e <lwip_netconn_do_writemore+0x136>
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800aba0:	e07d      	b.n	800ac9e <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800aba2:	7ebb      	ldrb	r3, [r7, #26]
 800aba4:	f043 0302 	orr.w	r3, r3, #2
 800aba8:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6a1b      	ldr	r3, [r3, #32]
 800abae:	691a      	ldr	r2, [r3, #16]
 800abb0:	8bbb      	ldrh	r3, [r7, #28]
 800abb2:	441a      	add	r2, r3
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6a1b      	ldr	r3, [r3, #32]
 800abb8:	689b      	ldr	r3, [r3, #8]
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	429a      	cmp	r2, r3
 800abbe:	d906      	bls.n	800abce <lwip_netconn_do_writemore+0x166>
 800abc0:	4b45      	ldr	r3, [pc, #276]	; (800acd8 <lwip_netconn_do_writemore+0x270>)
 800abc2:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800abc6:	494c      	ldr	r1, [pc, #304]	; (800acf8 <lwip_netconn_do_writemore+0x290>)
 800abc8:	4845      	ldr	r0, [pc, #276]	; (800ace0 <lwip_netconn_do_writemore+0x278>)
 800abca:	f00c fabf 	bl	801714c <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800abce:	8bbb      	ldrh	r3, [r7, #28]
 800abd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d103      	bne.n	800abe0 <lwip_netconn_do_writemore+0x178>
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abde:	d209      	bcs.n	800abf4 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800abe4:	8bba      	ldrh	r2, [r7, #28]
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d10b      	bne.n	800ac02 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6a1b      	ldr	r3, [r3, #32]
 800abee:	899b      	ldrh	r3, [r3, #12]
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d906      	bls.n	800ac02 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800abf4:	2301      	movs	r3, #1
 800abf6:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800abf8:	7ebb      	ldrb	r3, [r7, #26]
 800abfa:	f043 0302 	orr.w	r3, r3, #2
 800abfe:	76bb      	strb	r3, [r7, #26]
 800ac00:	e001      	b.n	800ac06 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800ac02:	2300      	movs	r3, #0
 800ac04:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6858      	ldr	r0, [r3, #4]
 800ac0a:	7ebb      	ldrb	r3, [r7, #26]
 800ac0c:	8bba      	ldrh	r2, [r7, #28]
 800ac0e:	6979      	ldr	r1, [r7, #20]
 800ac10:	f007 fea8 	bl	8012964 <tcp_write>
 800ac14:	4603      	mov	r3, r0
 800ac16:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800ac18:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d12c      	bne.n	800ac7a <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6a1b      	ldr	r3, [r3, #32]
 800ac24:	6999      	ldr	r1, [r3, #24]
 800ac26:	8bba      	ldrh	r2, [r7, #28]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6a1b      	ldr	r3, [r3, #32]
 800ac2c:	440a      	add	r2, r1
 800ac2e:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6a1b      	ldr	r3, [r3, #32]
 800ac34:	6919      	ldr	r1, [r3, #16]
 800ac36:	8bba      	ldrh	r2, [r7, #28]
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6a1b      	ldr	r3, [r3, #32]
 800ac3c:	440a      	add	r2, r1
 800ac3e:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6a1b      	ldr	r3, [r3, #32]
 800ac44:	691a      	ldr	r2, [r3, #16]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6a1b      	ldr	r3, [r3, #32]
 800ac4a:	689b      	ldr	r3, [r3, #8]
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d113      	bne.n	800ac7a <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6a1b      	ldr	r3, [r3, #32]
 800ac56:	899a      	ldrh	r2, [r3, #12]
 800ac58:	3a01      	subs	r2, #1
 800ac5a:	b292      	uxth	r2, r2
 800ac5c:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6a1b      	ldr	r3, [r3, #32]
 800ac62:	899b      	ldrh	r3, [r3, #12]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d008      	beq.n	800ac7a <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6a1b      	ldr	r3, [r3, #32]
 800ac6c:	689a      	ldr	r2, [r3, #8]
 800ac6e:	3208      	adds	r2, #8
 800ac70:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6a1b      	ldr	r3, [r3, #32]
 800ac76:	2200      	movs	r2, #0
 800ac78:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800ac7a:	7e7b      	ldrb	r3, [r7, #25]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d004      	beq.n	800ac8a <lwip_netconn_do_writemore+0x222>
 800ac80:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	f43f af50 	beq.w	800ab2a <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800ac8a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d004      	beq.n	800ac9c <lwip_netconn_do_writemore+0x234>
 800ac92:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ac96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac9a:	d146      	bne.n	800ad2a <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800ac9c:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800ac9e:	7e3b      	ldrb	r3, [r7, #24]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d02b      	beq.n	800acfc <lwip_netconn_do_writemore+0x294>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6a1b      	ldr	r3, [r3, #32]
 800aca8:	699a      	ldr	r2, [r3, #24]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6a1b      	ldr	r3, [r3, #32]
 800acae:	695b      	ldr	r3, [r3, #20]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d223      	bcs.n	800acfc <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d005      	beq.n	800acc8 <lwip_netconn_do_writemore+0x260>
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc0:	2200      	movs	r2, #0
 800acc2:	2103      	movs	r1, #3
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	7f1b      	ldrb	r3, [r3, #28]
 800accc:	f043 0310 	orr.w	r3, r3, #16
 800acd0:	b2da      	uxtb	r2, r3
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	771a      	strb	r2, [r3, #28]
 800acd6:	e028      	b.n	800ad2a <lwip_netconn_do_writemore+0x2c2>
 800acd8:	080187f4 	.word	0x080187f4
 800acdc:	080188e8 	.word	0x080188e8
 800ace0:	08018838 	.word	0x08018838
 800ace4:	08018bf0 	.word	0x08018bf0
 800ace8:	080188f8 	.word	0x080188f8
 800acec:	08018c10 	.word	0x08018c10
 800acf0:	08018c28 	.word	0x08018c28
 800acf4:	08018c68 	.word	0x08018c68
 800acf8:	08018c90 	.word	0x08018c90
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ad04:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800ad08:	d305      	bcc.n	800ad16 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	685b      	ldr	r3, [r3, #4]
 800ad0e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800ad12:	2b04      	cmp	r3, #4
 800ad14:	d909      	bls.n	800ad2a <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d005      	beq.n	800ad2a <lwip_netconn_do_writemore+0x2c2>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad22:	2200      	movs	r2, #0
 800ad24:	2103      	movs	r1, #3
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800ad2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d11d      	bne.n	800ad6e <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6a1b      	ldr	r3, [r3, #32]
 800ad36:	699a      	ldr	r2, [r3, #24]
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6a1b      	ldr	r3, [r3, #32]
 800ad3c:	695b      	ldr	r3, [r3, #20]
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d002      	beq.n	800ad48 <lwip_netconn_do_writemore+0x2e0>
 800ad42:	7e3b      	ldrb	r3, [r7, #24]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d001      	beq.n	800ad4c <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800ad48:	2301      	movs	r3, #1
 800ad4a:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	685b      	ldr	r3, [r3, #4]
 800ad50:	4618      	mov	r0, r3
 800ad52:	f008 fbf3 	bl	801353c <tcp_output>
 800ad56:	4603      	mov	r3, r0
 800ad58:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800ad5a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800ad5e:	f113 0f04 	cmn.w	r3, #4
 800ad62:	d12c      	bne.n	800adbe <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800ad64:	7b3b      	ldrb	r3, [r7, #12]
 800ad66:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800ad68:	2301      	movs	r3, #1
 800ad6a:	76fb      	strb	r3, [r7, #27]
 800ad6c:	e027      	b.n	800adbe <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800ad6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ad72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad76:	d120      	bne.n	800adba <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f008 fbdd 	bl	801353c <tcp_output>
 800ad82:	4603      	mov	r3, r0
 800ad84:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800ad86:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800ad8a:	f113 0f04 	cmn.w	r3, #4
 800ad8e:	d104      	bne.n	800ad9a <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800ad90:	7b7b      	ldrb	r3, [r7, #13]
 800ad92:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800ad94:	2301      	movs	r3, #1
 800ad96:	76fb      	strb	r3, [r7, #27]
 800ad98:	e011      	b.n	800adbe <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800ad9a:	7e3b      	ldrb	r3, [r7, #24]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d00e      	beq.n	800adbe <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6a1b      	ldr	r3, [r3, #32]
 800ada4:	699b      	ldr	r3, [r3, #24]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d102      	bne.n	800adb0 <lwip_netconn_do_writemore+0x348>
 800adaa:	f06f 0306 	mvn.w	r3, #6
 800adae:	e000      	b.n	800adb2 <lwip_netconn_do_writemore+0x34a>
 800adb0:	2300      	movs	r3, #0
 800adb2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800adb4:	2301      	movs	r3, #1
 800adb6:	76fb      	strb	r3, [r7, #27]
 800adb8:	e001      	b.n	800adbe <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800adba:	2301      	movs	r3, #1
 800adbc:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800adbe:	7efb      	ldrb	r3, [r7, #27]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d015      	beq.n	800adf0 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6a1b      	ldr	r3, [r3, #32]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	330c      	adds	r3, #12
 800adcc:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6a1b      	ldr	r3, [r3, #32]
 800add2:	7ffa      	ldrb	r2, [r7, #31]
 800add4:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2200      	movs	r2, #0
 800adda:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2200      	movs	r2, #0
 800ade0:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800ade2:	78fb      	ldrb	r3, [r7, #3]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d006      	beq.n	800adf6 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800ade8:	68b8      	ldr	r0, [r7, #8]
 800adea:	f00c f879 	bl	8016ee0 <sys_sem_signal>
 800adee:	e002      	b.n	800adf6 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800adf0:	f04f 33ff 	mov.w	r3, #4294967295
 800adf4:	e000      	b.n	800adf8 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800adf6:	2300      	movs	r3, #0
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3720      	adds	r7, #32
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	4618      	mov	r0, r3
 800ae12:	f7fe fde9 	bl	80099e8 <netconn_err>
 800ae16:	4603      	mov	r3, r0
 800ae18:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800ae1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d163      	bne.n	800aeea <lwip_netconn_do_write+0xea>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae2c:	2b10      	cmp	r3, #16
 800ae2e:	d15c      	bne.n	800aeea <lwip_netconn_do_write+0xea>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	785b      	ldrb	r3, [r3, #1]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d002      	beq.n	800ae40 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800ae3a:	23fb      	movs	r3, #251	; 0xfb
 800ae3c:	73fb      	strb	r3, [r7, #15]
 800ae3e:	e054      	b.n	800aeea <lwip_netconn_do_write+0xea>
      } else if (msg->conn->pcb.tcp != NULL) {
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	685b      	ldr	r3, [r3, #4]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d04d      	beq.n	800aee6 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	2201      	movs	r2, #1
 800ae50:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	6a1b      	ldr	r3, [r3, #32]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d006      	beq.n	800ae6a <lwip_netconn_do_write+0x6a>
 800ae5c:	4b27      	ldr	r3, [pc, #156]	; (800aefc <lwip_netconn_do_write+0xfc>)
 800ae5e:	f240 7223 	movw	r2, #1827	; 0x723
 800ae62:	4927      	ldr	r1, [pc, #156]	; (800af00 <lwip_netconn_do_write+0x100>)
 800ae64:	4827      	ldr	r0, [pc, #156]	; (800af04 <lwip_netconn_do_write+0x104>)
 800ae66:	f00c f971 	bl	801714c <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	695b      	ldr	r3, [r3, #20]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d106      	bne.n	800ae80 <lwip_netconn_do_write+0x80>
 800ae72:	4b22      	ldr	r3, [pc, #136]	; (800aefc <lwip_netconn_do_write+0xfc>)
 800ae74:	f240 7224 	movw	r2, #1828	; 0x724
 800ae78:	4923      	ldr	r1, [pc, #140]	; (800af08 <lwip_netconn_do_write+0x108>)
 800ae7a:	4822      	ldr	r0, [pc, #136]	; (800af04 <lwip_netconn_do_write+0x104>)
 800ae7c:	f00c f966 	bl	801714c <iprintf>
        msg->conn->current_msg = msg;
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	68ba      	ldr	r2, [r7, #8]
 800ae86:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	2100      	movs	r1, #0
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f7ff fdea 	bl	800aa68 <lwip_netconn_do_writemore>
 800ae94:	4603      	mov	r3, r0
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d02b      	beq.n	800aef2 <lwip_netconn_do_write+0xf2>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	785b      	ldrb	r3, [r3, #1]
 800aea0:	2b01      	cmp	r3, #1
 800aea2:	d006      	beq.n	800aeb2 <lwip_netconn_do_write+0xb2>
 800aea4:	4b15      	ldr	r3, [pc, #84]	; (800aefc <lwip_netconn_do_write+0xfc>)
 800aea6:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800aeaa:	4918      	ldr	r1, [pc, #96]	; (800af0c <lwip_netconn_do_write+0x10c>)
 800aeac:	4815      	ldr	r0, [pc, #84]	; (800af04 <lwip_netconn_do_write+0x104>)
 800aeae:	f00c f94d 	bl	801714c <iprintf>
          UNLOCK_TCPIP_CORE();
 800aeb2:	4817      	ldr	r0, [pc, #92]	; (800af10 <lwip_netconn_do_write+0x110>)
 800aeb4:	f00c f885 	bl	8016fc2 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	330c      	adds	r3, #12
 800aebe:	2100      	movs	r1, #0
 800aec0:	4618      	mov	r0, r3
 800aec2:	f00b ffdc 	bl	8016e7e <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800aec6:	4812      	ldr	r0, [pc, #72]	; (800af10 <lwip_netconn_do_write+0x110>)
 800aec8:	f00c f86c 	bl	8016fa4 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	785b      	ldrb	r3, [r3, #1]
 800aed2:	2b01      	cmp	r3, #1
 800aed4:	d10d      	bne.n	800aef2 <lwip_netconn_do_write+0xf2>
 800aed6:	4b09      	ldr	r3, [pc, #36]	; (800aefc <lwip_netconn_do_write+0xfc>)
 800aed8:	f240 722c 	movw	r2, #1836	; 0x72c
 800aedc:	490b      	ldr	r1, [pc, #44]	; (800af0c <lwip_netconn_do_write+0x10c>)
 800aede:	4809      	ldr	r0, [pc, #36]	; (800af04 <lwip_netconn_do_write+0x104>)
 800aee0:	f00c f934 	bl	801714c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800aee4:	e005      	b.n	800aef2 <lwip_netconn_do_write+0xf2>
      } else {
        err = ERR_CONN;
 800aee6:	23f5      	movs	r3, #245	; 0xf5
 800aee8:	73fb      	strb	r3, [r7, #15]
    } else {
      err = ERR_VAL;
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	7bfa      	ldrb	r2, [r7, #15]
 800aeee:	711a      	strb	r2, [r3, #4]
 800aef0:	e000      	b.n	800aef4 <lwip_netconn_do_write+0xf4>
        return;
 800aef2:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800aef4:	3710      	adds	r7, #16
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}
 800aefa:	bf00      	nop
 800aefc:	080187f4 	.word	0x080187f4
 800af00:	08018b34 	.word	0x08018b34
 800af04:	08018838 	.word	0x08018838
 800af08:	08018cbc 	.word	0x08018cbc
 800af0c:	08018b50 	.word	0x08018b50
 800af10:	200079ec 	.word	0x200079ec

0800af14 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b084      	sub	sp, #16
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	685b      	ldr	r3, [r3, #4]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d04a      	beq.n	800afc0 <lwip_netconn_do_getaddr+0xac>
    if (msg->msg.ad.local) {
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	7c1b      	ldrb	r3, [r3, #16]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d007      	beq.n	800af42 <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	685a      	ldr	r2, [r3, #4]
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	689b      	ldr	r3, [r3, #8]
 800af3c:	6812      	ldr	r2, [r2, #0]
 800af3e:	601a      	str	r2, [r3, #0]
 800af40:	e006      	b.n	800af50 <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	685a      	ldr	r2, [r3, #4]
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	689b      	ldr	r3, [r3, #8]
 800af4c:	6852      	ldr	r2, [r2, #4]
 800af4e:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	2200      	movs	r2, #0
 800af54:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800af60:	2b10      	cmp	r3, #16
 800af62:	d124      	bne.n	800afae <lwip_netconn_do_getaddr+0x9a>
        }
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	7c1b      	ldrb	r3, [r3, #16]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d10f      	bne.n	800af8c <lwip_netconn_do_getaddr+0x78>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	685b      	ldr	r3, [r3, #4]
 800af72:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 800af74:	2b00      	cmp	r3, #0
 800af76:	d005      	beq.n	800af84 <lwip_netconn_do_getaddr+0x70>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	7d1b      	ldrb	r3, [r3, #20]
 800af80:	2b01      	cmp	r3, #1
 800af82:	d103      	bne.n	800af8c <lwip_netconn_do_getaddr+0x78>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	22f5      	movs	r2, #245	; 0xf5
 800af88:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 800af8a:	e01c      	b.n	800afc6 <lwip_netconn_do_getaddr+0xb2>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	7c1b      	ldrb	r3, [r3, #16]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d004      	beq.n	800af9e <lwip_netconn_do_getaddr+0x8a>
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	685b      	ldr	r3, [r3, #4]
 800af9a:	8adb      	ldrh	r3, [r3, #22]
 800af9c:	e003      	b.n	800afa6 <lwip_netconn_do_getaddr+0x92>
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	8b1b      	ldrh	r3, [r3, #24]
 800afa6:	68fa      	ldr	r2, [r7, #12]
 800afa8:	68d2      	ldr	r2, [r2, #12]
 800afaa:	8013      	strh	r3, [r2, #0]
        break;
 800afac:	e00b      	b.n	800afc6 <lwip_netconn_do_getaddr+0xb2>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 800afae:	4b08      	ldr	r3, [pc, #32]	; (800afd0 <lwip_netconn_do_getaddr+0xbc>)
 800afb0:	f240 727d 	movw	r2, #1917	; 0x77d
 800afb4:	4907      	ldr	r1, [pc, #28]	; (800afd4 <lwip_netconn_do_getaddr+0xc0>)
 800afb6:	4808      	ldr	r0, [pc, #32]	; (800afd8 <lwip_netconn_do_getaddr+0xc4>)
 800afb8:	f00c f8c8 	bl	801714c <iprintf>
        break;
 800afbc:	bf00      	nop
 800afbe:	e002      	b.n	800afc6 <lwip_netconn_do_getaddr+0xb2>
    }
  } else {
    msg->err = ERR_CONN;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	22f5      	movs	r2, #245	; 0xf5
 800afc4:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 800afc6:	bf00      	nop
 800afc8:	3710      	adds	r7, #16
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	bf00      	nop
 800afd0:	080187f4 	.word	0x080187f4
 800afd4:	08018cd0 	.word	0x08018cd0
 800afd8:	08018838 	.word	0x08018838

0800afdc <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	785b      	ldrb	r3, [r3, #1]
 800afee:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d069      	beq.n	800b0ce <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	781b      	ldrb	r3, [r3, #0]
 800b000:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800b004:	2b10      	cmp	r3, #16
 800b006:	d162      	bne.n	800b0ce <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b00c:	2b03      	cmp	r3, #3
 800b00e:	d002      	beq.n	800b016 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b010:	7afb      	ldrb	r3, [r7, #11]
 800b012:	2b02      	cmp	r3, #2
 800b014:	d05b      	beq.n	800b0ce <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800b016:	7afb      	ldrb	r3, [r7, #11]
 800b018:	2b03      	cmp	r3, #3
 800b01a:	d103      	bne.n	800b024 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	22f5      	movs	r2, #245	; 0xf5
 800b020:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b022:	e059      	b.n	800b0d8 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800b024:	7afb      	ldrb	r3, [r7, #11]
 800b026:	2b01      	cmp	r3, #1
 800b028:	d103      	bne.n	800b032 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	22fb      	movs	r2, #251	; 0xfb
 800b02e:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b030:	e052      	b.n	800b0d8 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	7a1b      	ldrb	r3, [r3, #8]
 800b036:	f003 0301 	and.w	r3, r3, #1
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d004      	beq.n	800b048 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	4618      	mov	r0, r3
 800b044:	f7ff f95c 	bl	800a300 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	6a1b      	ldr	r3, [r3, #32]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d006      	beq.n	800b060 <lwip_netconn_do_close+0x84>
 800b052:	4b23      	ldr	r3, [pc, #140]	; (800b0e0 <lwip_netconn_do_close+0x104>)
 800b054:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800b058:	4922      	ldr	r1, [pc, #136]	; (800b0e4 <lwip_netconn_do_close+0x108>)
 800b05a:	4823      	ldr	r0, [pc, #140]	; (800b0e8 <lwip_netconn_do_close+0x10c>)
 800b05c:	f00c f876 	bl	801714c <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	2204      	movs	r2, #4
 800b066:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	68fa      	ldr	r2, [r7, #12]
 800b06e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	2100      	movs	r1, #0
 800b076:	4618      	mov	r0, r3
 800b078:	f7ff f9c0 	bl	800a3fc <lwip_netconn_do_close_internal>
 800b07c:	4603      	mov	r3, r0
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d029      	beq.n	800b0d6 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	785b      	ldrb	r3, [r3, #1]
 800b088:	2b04      	cmp	r3, #4
 800b08a:	d006      	beq.n	800b09a <lwip_netconn_do_close+0xbe>
 800b08c:	4b14      	ldr	r3, [pc, #80]	; (800b0e0 <lwip_netconn_do_close+0x104>)
 800b08e:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800b092:	4916      	ldr	r1, [pc, #88]	; (800b0ec <lwip_netconn_do_close+0x110>)
 800b094:	4814      	ldr	r0, [pc, #80]	; (800b0e8 <lwip_netconn_do_close+0x10c>)
 800b096:	f00c f859 	bl	801714c <iprintf>
        UNLOCK_TCPIP_CORE();
 800b09a:	4815      	ldr	r0, [pc, #84]	; (800b0f0 <lwip_netconn_do_close+0x114>)
 800b09c:	f00b ff91 	bl	8016fc2 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	330c      	adds	r3, #12
 800b0a6:	2100      	movs	r1, #0
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f00b fee8 	bl	8016e7e <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800b0ae:	4810      	ldr	r0, [pc, #64]	; (800b0f0 <lwip_netconn_do_close+0x114>)
 800b0b0:	f00b ff78 	bl	8016fa4 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	785b      	ldrb	r3, [r3, #1]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d00b      	beq.n	800b0d6 <lwip_netconn_do_close+0xfa>
 800b0be:	4b08      	ldr	r3, [pc, #32]	; (800b0e0 <lwip_netconn_do_close+0x104>)
 800b0c0:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800b0c4:	4909      	ldr	r1, [pc, #36]	; (800b0ec <lwip_netconn_do_close+0x110>)
 800b0c6:	4808      	ldr	r0, [pc, #32]	; (800b0e8 <lwip_netconn_do_close+0x10c>)
 800b0c8:	f00c f840 	bl	801714c <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800b0cc:	e003      	b.n	800b0d6 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	22f5      	movs	r2, #245	; 0xf5
 800b0d2:	711a      	strb	r2, [r3, #4]
 800b0d4:	e000      	b.n	800b0d8 <lwip_netconn_do_close+0xfc>
      return;
 800b0d6:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b0d8:	3710      	adds	r7, #16
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}
 800b0de:	bf00      	nop
 800b0e0:	080187f4 	.word	0x080187f4
 800b0e4:	08018b34 	.word	0x08018b34
 800b0e8:	08018838 	.word	0x08018838
 800b0ec:	08018b50 	.word	0x08018b50
 800b0f0:	200079ec 	.word	0x200079ec

0800b0f4 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b083      	sub	sp, #12
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800b0fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b102:	2b00      	cmp	r3, #0
 800b104:	dc04      	bgt.n	800b110 <err_to_errno+0x1c>
 800b106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b10a:	425b      	negs	r3, r3
 800b10c:	2b10      	cmp	r3, #16
 800b10e:	dd01      	ble.n	800b114 <err_to_errno+0x20>
    return EIO;
 800b110:	2305      	movs	r3, #5
 800b112:	e005      	b.n	800b120 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800b114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b118:	425b      	negs	r3, r3
 800b11a:	4a04      	ldr	r2, [pc, #16]	; (800b12c <err_to_errno+0x38>)
 800b11c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800b120:	4618      	mov	r0, r3
 800b122:	370c      	adds	r7, #12
 800b124:	46bd      	mov	sp, r7
 800b126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12a:	4770      	bx	lr
 800b12c:	0801b7d4 	.word	0x0801b7d4

0800b130 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b082      	sub	sp, #8
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d013      	beq.n	800b166 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d00b      	beq.n	800b15e <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4618      	mov	r0, r3
 800b14c:	f002 fe5e 	bl	800de0c <pbuf_free>
      buf->p = buf->ptr = NULL;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2200      	movs	r2, #0
 800b154:	605a      	str	r2, [r3, #4]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	685a      	ldr	r2, [r3, #4]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800b15e:	6879      	ldr	r1, [r7, #4]
 800b160:	2005      	movs	r0, #5
 800b162:	f001 ff85 	bl	800d070 <memp_free>
  }
}
 800b166:	bf00      	nop
 800b168:	3708      	adds	r7, #8
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}
	...

0800b170 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800b170:	b480      	push	{r7}
 800b172:	b085      	sub	sp, #20
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	db02      	blt.n	800b188 <tryget_socket_unconn_nouse+0x18>
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2b03      	cmp	r3, #3
 800b186:	dd01      	ble.n	800b18c <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800b188:	2300      	movs	r3, #0
 800b18a:	e003      	b.n	800b194 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	011b      	lsls	r3, r3, #4
 800b190:	4a03      	ldr	r2, [pc, #12]	; (800b1a0 <tryget_socket_unconn_nouse+0x30>)
 800b192:	4413      	add	r3, r2
}
 800b194:	4618      	mov	r0, r3
 800b196:	3714      	adds	r7, #20
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr
 800b1a0:	200045b8 	.word	0x200045b8

0800b1a4 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b084      	sub	sp, #16
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f7ff ffdf 	bl	800b170 <tryget_socket_unconn_nouse>
 800b1b2:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3710      	adds	r7, #16
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}

0800b1be <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800b1be:	b580      	push	{r7, lr}
 800b1c0:	b084      	sub	sp, #16
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f7ff ffec 	bl	800b1a4 <tryget_socket_unconn>
 800b1cc:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d005      	beq.n	800b1e0 <tryget_socket+0x22>
    if (sock->conn) {
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d001      	beq.n	800b1e0 <tryget_socket+0x22>
      return sock;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	e000      	b.n	800b1e2 <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800b1e0:	2300      	movs	r3, #0
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3710      	adds	r7, #16
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
	...

0800b1ec <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b084      	sub	sp, #16
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f7ff ffe2 	bl	800b1be <tryget_socket>
 800b1fa:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d104      	bne.n	800b20c <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800b202:	4b05      	ldr	r3, [pc, #20]	; (800b218 <get_socket+0x2c>)
 800b204:	2209      	movs	r2, #9
 800b206:	601a      	str	r2, [r3, #0]
    return NULL;
 800b208:	2300      	movs	r3, #0
 800b20a:	e000      	b.n	800b20e <get_socket+0x22>
  }
  return sock;
 800b20c:	68fb      	ldr	r3, [r7, #12]
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3710      	adds	r7, #16
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}
 800b216:	bf00      	nop
 800b218:	2000d258 	.word	0x2000d258

0800b21c <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b084      	sub	sp, #16
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800b226:	2300      	movs	r3, #0
 800b228:	60fb      	str	r3, [r7, #12]
 800b22a:	e052      	b.n	800b2d2 <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800b22c:	f00b fefc 	bl	8017028 <sys_arch_protect>
 800b230:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800b232:	4a2c      	ldr	r2, [pc, #176]	; (800b2e4 <alloc_socket+0xc8>)
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	011b      	lsls	r3, r3, #4
 800b238:	4413      	add	r3, r2
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d142      	bne.n	800b2c6 <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800b240:	4a28      	ldr	r2, [pc, #160]	; (800b2e4 <alloc_socket+0xc8>)
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	011b      	lsls	r3, r3, #4
 800b246:	4413      	add	r3, r2
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800b24c:	68b8      	ldr	r0, [r7, #8]
 800b24e:	f00b fef9 	bl	8017044 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800b252:	4a24      	ldr	r2, [pc, #144]	; (800b2e4 <alloc_socket+0xc8>)
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	011b      	lsls	r3, r3, #4
 800b258:	4413      	add	r3, r2
 800b25a:	3304      	adds	r3, #4
 800b25c:	2200      	movs	r2, #0
 800b25e:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800b260:	4a20      	ldr	r2, [pc, #128]	; (800b2e4 <alloc_socket+0xc8>)
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	011b      	lsls	r3, r3, #4
 800b266:	4413      	add	r3, r2
 800b268:	330e      	adds	r3, #14
 800b26a:	781b      	ldrb	r3, [r3, #0]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d006      	beq.n	800b27e <alloc_socket+0x62>
 800b270:	4b1d      	ldr	r3, [pc, #116]	; (800b2e8 <alloc_socket+0xcc>)
 800b272:	f240 220e 	movw	r2, #526	; 0x20e
 800b276:	491d      	ldr	r1, [pc, #116]	; (800b2ec <alloc_socket+0xd0>)
 800b278:	481d      	ldr	r0, [pc, #116]	; (800b2f0 <alloc_socket+0xd4>)
 800b27a:	f00b ff67 	bl	801714c <iprintf>
      sockets[i].rcvevent   = 0;
 800b27e:	4a19      	ldr	r2, [pc, #100]	; (800b2e4 <alloc_socket+0xc8>)
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	011b      	lsls	r3, r3, #4
 800b284:	4413      	add	r3, r2
 800b286:	3308      	adds	r3, #8
 800b288:	2200      	movs	r2, #0
 800b28a:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	781b      	ldrb	r3, [r3, #0]
 800b290:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b294:	2b10      	cmp	r3, #16
 800b296:	d102      	bne.n	800b29e <alloc_socket+0x82>
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d001      	beq.n	800b2a2 <alloc_socket+0x86>
 800b29e:	2301      	movs	r3, #1
 800b2a0:	e000      	b.n	800b2a4 <alloc_socket+0x88>
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	b299      	uxth	r1, r3
 800b2a6:	4a0f      	ldr	r2, [pc, #60]	; (800b2e4 <alloc_socket+0xc8>)
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	011b      	lsls	r3, r3, #4
 800b2ac:	4413      	add	r3, r2
 800b2ae:	330a      	adds	r3, #10
 800b2b0:	460a      	mov	r2, r1
 800b2b2:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800b2b4:	4a0b      	ldr	r2, [pc, #44]	; (800b2e4 <alloc_socket+0xc8>)
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	011b      	lsls	r3, r3, #4
 800b2ba:	4413      	add	r3, r2
 800b2bc:	330c      	adds	r3, #12
 800b2be:	2200      	movs	r2, #0
 800b2c0:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	e00a      	b.n	800b2dc <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800b2c6:	68b8      	ldr	r0, [r7, #8]
 800b2c8:	f00b febc 	bl	8017044 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	60fb      	str	r3, [r7, #12]
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	2b03      	cmp	r3, #3
 800b2d6:	dda9      	ble.n	800b22c <alloc_socket+0x10>
  }
  return -1;
 800b2d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3710      	adds	r7, #16
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}
 800b2e4:	200045b8 	.word	0x200045b8
 800b2e8:	08018ce8 	.word	0x08018ce8
 800b2ec:	08018d1c 	.word	0x08018d1c
 800b2f0:	08018d3c 	.word	0x08018d3c

0800b2f4 <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b085      	sub	sp, #20
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	60f8      	str	r0, [r7, #12]
 800b2fc:	60b9      	str	r1, [r7, #8]
 800b2fe:	607a      	str	r2, [r7, #4]
 800b300:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	68fa      	ldr	r2, [r7, #12]
 800b306:	6852      	ldr	r2, [r2, #4]
 800b308:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	2200      	movs	r2, #0
 800b30e:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681a      	ldr	r2, [r3, #0]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	2200      	movs	r2, #0
 800b31c:	601a      	str	r2, [r3, #0]
  return 1;
 800b31e:	2301      	movs	r3, #1
}
 800b320:	4618      	mov	r0, r3
 800b322:	3714      	adds	r7, #20
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr

0800b32c <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b084      	sub	sp, #16
 800b330:	af00      	add	r7, sp, #0
 800b332:	60f8      	str	r0, [r7, #12]
 800b334:	60b9      	str	r1, [r7, #8]
 800b336:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d00d      	beq.n	800b35c <free_socket_free_elements+0x30>
    if (is_tcp) {
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d005      	beq.n	800b352 <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	4618      	mov	r0, r3
 800b34c:	f002 fd5e 	bl	800de0c <pbuf_free>
 800b350:	e004      	b.n	800b35c <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	4618      	mov	r0, r3
 800b358:	f7ff feea 	bl	800b130 <netbuf_delete>
    }
  }
  if (conn != NULL) {
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d002      	beq.n	800b368 <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 800b362:	68b8      	ldr	r0, [r7, #8]
 800b364:	f7fd fef6 	bl	8009154 <netconn_delete>
  }
}
 800b368:	bf00      	nop
 800b36a:	3710      	adds	r7, #16
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}

0800b370 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b086      	sub	sp, #24
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 800b37a:	f00b fe55 	bl	8017028 <sys_arch_protect>
 800b37e:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 800b380:	f107 0308 	add.w	r3, r7, #8
 800b384:	f107 020c 	add.w	r2, r7, #12
 800b388:	6839      	ldr	r1, [r7, #0]
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f7ff ffb2 	bl	800b2f4 <free_socket_locked>
 800b390:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 800b392:	6978      	ldr	r0, [r7, #20]
 800b394:	f00b fe56 	bl	8017044 <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d006      	beq.n	800b3ac <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	f107 0208 	add.w	r2, r7, #8
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	6838      	ldr	r0, [r7, #0]
 800b3a8:	f7ff ffc0 	bl	800b32c <free_socket_free_elements>
  }
}
 800b3ac:	bf00      	nop
 800b3ae:	3718      	adds	r7, #24
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
 800b3b4:	b590      	push	{r4, r7, lr}
 800b3b6:	b099      	sub	sp, #100	; 0x64
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	60f8      	str	r0, [r7, #12]
 800b3bc:	60b9      	str	r1, [r7, #8]
 800b3be:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock, *nsock;
  struct netconn *newconn;
  ip_addr_t naddr;
  u16_t port = 0;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	84fb      	strh	r3, [r7, #38]	; 0x26
  err_t err;
  int recvevent;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
 800b3c4:	68f8      	ldr	r0, [r7, #12]
 800b3c6:	f7ff ff11 	bl	800b1ec <get_socket>
 800b3ca:	65b8      	str	r0, [r7, #88]	; 0x58
  if (!sock) {
 800b3cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d102      	bne.n	800b3d8 <lwip_accept+0x24>
    return -1;
 800b3d2:	f04f 33ff 	mov.w	r3, #4294967295
 800b3d6:	e0f8      	b.n	800b5ca <lwip_accept+0x216>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
 800b3d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800b3e0:	4611      	mov	r1, r2
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f7fd ff88 	bl	80092f8 <netconn_accept>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (err != ERR_OK) {
 800b3ee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d02c      	beq.n	800b450 <lwip_accept+0x9c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800b3f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b400:	2b10      	cmp	r3, #16
 800b402:	d008      	beq.n	800b416 <lwip_accept+0x62>
      sock_set_errno(sock, EOPNOTSUPP);
 800b404:	235f      	movs	r3, #95	; 0x5f
 800b406:	633b      	str	r3, [r7, #48]	; 0x30
 800b408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d01d      	beq.n	800b44a <lwip_accept+0x96>
 800b40e:	4a71      	ldr	r2, [pc, #452]	; (800b5d4 <lwip_accept+0x220>)
 800b410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b412:	6013      	str	r3, [r2, #0]
 800b414:	e019      	b.n	800b44a <lwip_accept+0x96>
    } else if (err == ERR_CLSD) {
 800b416:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b41a:	f113 0f0f 	cmn.w	r3, #15
 800b41e:	d108      	bne.n	800b432 <lwip_accept+0x7e>
      sock_set_errno(sock, EINVAL);
 800b420:	2316      	movs	r3, #22
 800b422:	637b      	str	r3, [r7, #52]	; 0x34
 800b424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b426:	2b00      	cmp	r3, #0
 800b428:	d00f      	beq.n	800b44a <lwip_accept+0x96>
 800b42a:	4a6a      	ldr	r2, [pc, #424]	; (800b5d4 <lwip_accept+0x220>)
 800b42c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b42e:	6013      	str	r3, [r2, #0]
 800b430:	e00b      	b.n	800b44a <lwip_accept+0x96>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 800b432:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b436:	4618      	mov	r0, r3
 800b438:	f7ff fe5c 	bl	800b0f4 <err_to_errno>
 800b43c:	63b8      	str	r0, [r7, #56]	; 0x38
 800b43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b440:	2b00      	cmp	r3, #0
 800b442:	d002      	beq.n	800b44a <lwip_accept+0x96>
 800b444:	4a63      	ldr	r2, [pc, #396]	; (800b5d4 <lwip_accept+0x220>)
 800b446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b448:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 800b44a:	f04f 33ff 	mov.w	r3, #4294967295
 800b44e:	e0bc      	b.n	800b5ca <lwip_accept+0x216>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 800b450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b452:	2b00      	cmp	r3, #0
 800b454:	d106      	bne.n	800b464 <lwip_accept+0xb0>
 800b456:	4b60      	ldr	r3, [pc, #384]	; (800b5d8 <lwip_accept+0x224>)
 800b458:	f240 228b 	movw	r2, #651	; 0x28b
 800b45c:	495f      	ldr	r1, [pc, #380]	; (800b5dc <lwip_accept+0x228>)
 800b45e:	4860      	ldr	r0, [pc, #384]	; (800b5e0 <lwip_accept+0x22c>)
 800b460:	f00b fe74 	bl	801714c <iprintf>

  newsock = alloc_socket(newconn, 1);
 800b464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b466:	2101      	movs	r1, #1
 800b468:	4618      	mov	r0, r3
 800b46a:	f7ff fed7 	bl	800b21c <alloc_socket>
 800b46e:	6538      	str	r0, [r7, #80]	; 0x50
  if (newsock == -1) {
 800b470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b472:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b476:	d10e      	bne.n	800b496 <lwip_accept+0xe2>
    netconn_delete(newconn);
 800b478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b47a:	4618      	mov	r0, r3
 800b47c:	f7fd fe6a 	bl	8009154 <netconn_delete>
    sock_set_errno(sock, ENFILE);
 800b480:	2317      	movs	r3, #23
 800b482:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b486:	2b00      	cmp	r3, #0
 800b488:	d002      	beq.n	800b490 <lwip_accept+0xdc>
 800b48a:	4a52      	ldr	r2, [pc, #328]	; (800b5d4 <lwip_accept+0x220>)
 800b48c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b48e:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800b490:	f04f 33ff 	mov.w	r3, #4294967295
 800b494:	e099      	b.n	800b5ca <lwip_accept+0x216>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 800b496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b498:	2b00      	cmp	r3, #0
 800b49a:	db02      	blt.n	800b4a2 <lwip_accept+0xee>
 800b49c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b49e:	2b03      	cmp	r3, #3
 800b4a0:	dd06      	ble.n	800b4b0 <lwip_accept+0xfc>
 800b4a2:	4b4d      	ldr	r3, [pc, #308]	; (800b5d8 <lwip_accept+0x224>)
 800b4a4:	f44f 7225 	mov.w	r2, #660	; 0x294
 800b4a8:	494e      	ldr	r1, [pc, #312]	; (800b5e4 <lwip_accept+0x230>)
 800b4aa:	484d      	ldr	r0, [pc, #308]	; (800b5e0 <lwip_accept+0x22c>)
 800b4ac:	f00b fe4e 	bl	801714c <iprintf>
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
 800b4b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4b2:	011b      	lsls	r3, r3, #4
 800b4b4:	4a4c      	ldr	r2, [pc, #304]	; (800b5e8 <lwip_accept+0x234>)
 800b4b6:	4413      	add	r3, r2
 800b4b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
 800b4ba:	f00b fdb5 	bl	8017028 <sys_arch_protect>
 800b4be:	64b8      	str	r0, [r7, #72]	; 0x48
  recvevent = (s16_t)(-1 - newconn->socket);
 800b4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c2:	699b      	ldr	r3, [r3, #24]
 800b4c4:	b21b      	sxth	r3, r3
 800b4c6:	43db      	mvns	r3, r3
 800b4c8:	b21b      	sxth	r3, r3
 800b4ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  newconn->socket = newsock;
 800b4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b4d0:	619a      	str	r2, [r3, #24]
  SYS_ARCH_UNPROTECT(lev);
 800b4d2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b4d4:	f00b fdb6 	bl	8017044 <sys_arch_unprotect>

  if (newconn->callback) {
 800b4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d012      	beq.n	800b506 <lwip_accept+0x152>
    LOCK_TCPIP_CORE();
 800b4e0:	4842      	ldr	r0, [pc, #264]	; (800b5ec <lwip_accept+0x238>)
 800b4e2:	f00b fd5f 	bl	8016fa4 <sys_mutex_lock>
    while (recvevent > 0) {
 800b4e6:	e008      	b.n	800b4fa <lwip_accept+0x146>
      recvevent--;
 800b4e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4ea:	3b01      	subs	r3, #1
 800b4ec:	65fb      	str	r3, [r7, #92]	; 0x5c
      newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
 800b4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	2100      	movs	r1, #0
 800b4f8:	4798      	blx	r3
    while (recvevent > 0) {
 800b4fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	dcf3      	bgt.n	800b4e8 <lwip_accept+0x134>
    }
    UNLOCK_TCPIP_CORE();
 800b500:	483a      	ldr	r0, [pc, #232]	; (800b5ec <lwip_accept+0x238>)
 800b502:	f00b fd5e 	bl	8016fc2 <sys_mutex_unlock>
  }

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if ((addr != NULL) && (addrlen != NULL)) {
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d055      	beq.n	800b5b8 <lwip_accept+0x204>
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d052      	beq.n	800b5b8 <lwip_accept+0x204>
    union sockaddr_aligned tempaddr;
    /* get the IP address and port of the remote host */
    err = netconn_peer(newconn, &naddr, &port);
 800b512:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b514:	f107 0226 	add.w	r2, r7, #38	; 0x26
 800b518:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b51c:	2300      	movs	r3, #0
 800b51e:	f7fd fe35 	bl	800918c <netconn_getaddr>
 800b522:	4603      	mov	r3, r0
 800b524:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if (err != ERR_OK) {
 800b528:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d016      	beq.n	800b55e <lwip_accept+0x1aa>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
      netconn_delete(newconn);
 800b530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b532:	4618      	mov	r0, r3
 800b534:	f7fd fe0e 	bl	8009154 <netconn_delete>
      free_socket(nsock, 1);
 800b538:	2101      	movs	r1, #1
 800b53a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b53c:	f7ff ff18 	bl	800b370 <free_socket>
      sock_set_errno(sock, err_to_errno(err));
 800b540:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b544:	4618      	mov	r0, r3
 800b546:	f7ff fdd5 	bl	800b0f4 <err_to_errno>
 800b54a:	6478      	str	r0, [r7, #68]	; 0x44
 800b54c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d002      	beq.n	800b558 <lwip_accept+0x1a4>
 800b552:	4a20      	ldr	r2, [pc, #128]	; (800b5d4 <lwip_accept+0x220>)
 800b554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b556:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800b558:	f04f 33ff 	mov.w	r3, #4294967295
 800b55c:	e035      	b.n	800b5ca <lwip_accept+0x216>
    }

    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 800b55e:	f107 0314 	add.w	r3, r7, #20
 800b562:	2210      	movs	r2, #16
 800b564:	701a      	strb	r2, [r3, #0]
 800b566:	f107 0314 	add.w	r3, r7, #20
 800b56a:	2202      	movs	r2, #2
 800b56c:	705a      	strb	r2, [r3, #1]
 800b56e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b570:	f107 0414 	add.w	r4, r7, #20
 800b574:	4618      	mov	r0, r3
 800b576:	f001 f875 	bl	800c664 <lwip_htons>
 800b57a:	4603      	mov	r3, r0
 800b57c:	8063      	strh	r3, [r4, #2]
 800b57e:	f107 0314 	add.w	r3, r7, #20
 800b582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b584:	605a      	str	r2, [r3, #4]
 800b586:	f107 0314 	add.w	r3, r7, #20
 800b58a:	3308      	adds	r3, #8
 800b58c:	2208      	movs	r2, #8
 800b58e:	2100      	movs	r1, #0
 800b590:	4618      	mov	r0, r3
 800b592:	f00b fdd2 	bl	801713a <memset>
    if (*addrlen > tempaddr.sa.sa_len) {
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	7d3a      	ldrb	r2, [r7, #20]
 800b59c:	4293      	cmp	r3, r2
 800b59e:	d903      	bls.n	800b5a8 <lwip_accept+0x1f4>
      *addrlen = tempaddr.sa.sa_len;
 800b5a0:	7d3b      	ldrb	r3, [r7, #20]
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	601a      	str	r2, [r3, #0]
    }
    MEMCPY(addr, &tempaddr, *addrlen);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681a      	ldr	r2, [r3, #0]
 800b5ac:	f107 0314 	add.w	r3, r7, #20
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	68b8      	ldr	r0, [r7, #8]
 800b5b4:	f00b fd9d 	bl	80170f2 <memcpy>
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
  } else {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d", s, newsock));
  }

  sock_set_errno(sock, 0);
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	643b      	str	r3, [r7, #64]	; 0x40
 800b5bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d002      	beq.n	800b5c8 <lwip_accept+0x214>
 800b5c2:	4a04      	ldr	r2, [pc, #16]	; (800b5d4 <lwip_accept+0x220>)
 800b5c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5c6:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  done_socket(nsock);
  return newsock;
 800b5c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3764      	adds	r7, #100	; 0x64
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd90      	pop	{r4, r7, pc}
 800b5d2:	bf00      	nop
 800b5d4:	2000d258 	.word	0x2000d258
 800b5d8:	08018ce8 	.word	0x08018ce8
 800b5dc:	08018d64 	.word	0x08018d64
 800b5e0:	08018d3c 	.word	0x08018d3c
 800b5e4:	08018d74 	.word	0x08018d74
 800b5e8:	200045b8 	.word	0x200045b8
 800b5ec:	200079ec 	.word	0x200079ec

0800b5f0 <lwip_bind>:

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b08a      	sub	sp, #40	; 0x28
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	60f8      	str	r0, [r7, #12]
 800b5f8:	60b9      	str	r1, [r7, #8]
 800b5fa:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 800b5fc:	68f8      	ldr	r0, [r7, #12]
 800b5fe:	f7ff fdf5 	bl	800b1ec <get_socket>
 800b602:	6278      	str	r0, [r7, #36]	; 0x24
  if (!sock) {
 800b604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b606:	2b00      	cmp	r3, #0
 800b608:	d102      	bne.n	800b610 <lwip_bind+0x20>
    return -1;
 800b60a:	f04f 33ff 	mov.w	r3, #4294967295
 800b60e:	e051      	b.n	800b6b4 <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2b10      	cmp	r3, #16
 800b614:	d108      	bne.n	800b628 <lwip_bind+0x38>
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	785b      	ldrb	r3, [r3, #1]
 800b61a:	2b02      	cmp	r3, #2
 800b61c:	d104      	bne.n	800b628 <lwip_bind+0x38>
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	f003 0303 	and.w	r3, r3, #3
 800b624:	2b00      	cmp	r3, #0
 800b626:	d014      	beq.n	800b652 <lwip_bind+0x62>
 800b628:	4b24      	ldr	r3, [pc, #144]	; (800b6bc <lwip_bind+0xcc>)
 800b62a:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800b62e:	4924      	ldr	r1, [pc, #144]	; (800b6c0 <lwip_bind+0xd0>)
 800b630:	4824      	ldr	r0, [pc, #144]	; (800b6c4 <lwip_bind+0xd4>)
 800b632:	f00b fd8b 	bl	801714c <iprintf>
 800b636:	f06f 000f 	mvn.w	r0, #15
 800b63a:	f7ff fd5b 	bl	800b0f4 <err_to_errno>
 800b63e:	6178      	str	r0, [r7, #20]
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d002      	beq.n	800b64c <lwip_bind+0x5c>
 800b646:	4a20      	ldr	r2, [pc, #128]	; (800b6c8 <lwip_bind+0xd8>)
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	6013      	str	r3, [r2, #0]
 800b64c:	f04f 33ff 	mov.w	r3, #4294967295
 800b650:	e030      	b.n	800b6b4 <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	613b      	str	r3, [r7, #16]
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	885b      	ldrh	r3, [r3, #2]
 800b65c:	4618      	mov	r0, r3
 800b65e:	f001 f801 	bl	800c664 <lwip_htons>
 800b662:	4603      	mov	r3, r0
 800b664:	847b      	strh	r3, [r7, #34]	; 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 800b666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b66c:	f107 0110 	add.w	r1, r7, #16
 800b670:	4618      	mov	r0, r3
 800b672:	f7fd fddd 	bl	8009230 <netconn_bind>
 800b676:	4603      	mov	r3, r0
 800b678:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  if (err != ERR_OK) {
 800b67c:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800b680:	2b00      	cmp	r3, #0
 800b682:	d00e      	beq.n	800b6a2 <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800b684:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800b688:	4618      	mov	r0, r3
 800b68a:	f7ff fd33 	bl	800b0f4 <err_to_errno>
 800b68e:	61b8      	str	r0, [r7, #24]
 800b690:	69bb      	ldr	r3, [r7, #24]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d002      	beq.n	800b69c <lwip_bind+0xac>
 800b696:	4a0c      	ldr	r2, [pc, #48]	; (800b6c8 <lwip_bind+0xd8>)
 800b698:	69bb      	ldr	r3, [r7, #24]
 800b69a:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800b69c:	f04f 33ff 	mov.w	r3, #4294967295
 800b6a0:	e008      	b.n	800b6b4 <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	61fb      	str	r3, [r7, #28]
 800b6a6:	69fb      	ldr	r3, [r7, #28]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d002      	beq.n	800b6b2 <lwip_bind+0xc2>
 800b6ac:	4a06      	ldr	r2, [pc, #24]	; (800b6c8 <lwip_bind+0xd8>)
 800b6ae:	69fb      	ldr	r3, [r7, #28]
 800b6b0:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800b6b2:	2300      	movs	r3, #0
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3728      	adds	r7, #40	; 0x28
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}
 800b6bc:	08018ce8 	.word	0x08018ce8
 800b6c0:	08018d8c 	.word	0x08018d8c
 800b6c4:	08018d3c 	.word	0x08018d3c
 800b6c8:	2000d258 	.word	0x2000d258

0800b6cc <lwip_close>:

int
lwip_close(int s)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b086      	sub	sp, #24
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f7ff fd87 	bl	800b1ec <get_socket>
 800b6de:	6138      	str	r0, [r7, #16]
  if (!sock) {
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d102      	bne.n	800b6ec <lwip_close+0x20>
    return -1;
 800b6e6:	f04f 33ff 	mov.w	r3, #4294967295
 800b6ea:	e039      	b.n	800b760 <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d00b      	beq.n	800b70c <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	781b      	ldrb	r3, [r3, #0]
 800b6fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b6fe:	2b10      	cmp	r3, #16
 800b700:	bf0c      	ite	eq
 800b702:	2301      	moveq	r3, #1
 800b704:	2300      	movne	r3, #0
 800b706:	b2db      	uxtb	r3, r3
 800b708:	617b      	str	r3, [r7, #20]
 800b70a:	e00a      	b.n	800b722 <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d006      	beq.n	800b722 <lwip_close+0x56>
 800b714:	4b14      	ldr	r3, [pc, #80]	; (800b768 <lwip_close+0x9c>)
 800b716:	f44f 7245 	mov.w	r2, #788	; 0x314
 800b71a:	4914      	ldr	r1, [pc, #80]	; (800b76c <lwip_close+0xa0>)
 800b71c:	4814      	ldr	r0, [pc, #80]	; (800b770 <lwip_close+0xa4>)
 800b71e:	f00b fd15 	bl	801714c <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	4618      	mov	r0, r3
 800b728:	f7fd fcf0 	bl	800910c <netconn_prepare_delete>
 800b72c:	4603      	mov	r3, r0
 800b72e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b730:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d00e      	beq.n	800b756 <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 800b738:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b73c:	4618      	mov	r0, r3
 800b73e:	f7ff fcd9 	bl	800b0f4 <err_to_errno>
 800b742:	60b8      	str	r0, [r7, #8]
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d002      	beq.n	800b750 <lwip_close+0x84>
 800b74a:	4a0a      	ldr	r2, [pc, #40]	; (800b774 <lwip_close+0xa8>)
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800b750:	f04f 33ff 	mov.w	r3, #4294967295
 800b754:	e004      	b.n	800b760 <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 800b756:	6979      	ldr	r1, [r7, #20]
 800b758:	6938      	ldr	r0, [r7, #16]
 800b75a:	f7ff fe09 	bl	800b370 <free_socket>
  set_errno(0);
  return 0;
 800b75e:	2300      	movs	r3, #0
}
 800b760:	4618      	mov	r0, r3
 800b762:	3718      	adds	r7, #24
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}
 800b768:	08018ce8 	.word	0x08018ce8
 800b76c:	08018da8 	.word	0x08018da8
 800b770:	08018d3c 	.word	0x08018d3c
 800b774:	2000d258 	.word	0x2000d258

0800b778 <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b088      	sub	sp, #32
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
 800b780:	6039      	str	r1, [r7, #0]
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f7ff fd32 	bl	800b1ec <get_socket>
 800b788:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800b78a:	69fb      	ldr	r3, [r7, #28]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d102      	bne.n	800b796 <lwip_listen+0x1e>
    return -1;
 800b790:	f04f 33ff 	mov.w	r3, #4294967295
 800b794:	e03e      	b.n	800b814 <lwip_listen+0x9c>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	2bfe      	cmp	r3, #254	; 0xfe
 800b79a:	dc03      	bgt.n	800b7a4 <lwip_listen+0x2c>
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b7a2:	e000      	b.n	800b7a6 <lwip_listen+0x2e>
 800b7a4:	23ff      	movs	r3, #255	; 0xff
 800b7a6:	603b      	str	r3, [r7, #0]

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
 800b7a8:	69fb      	ldr	r3, [r7, #28]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	683a      	ldr	r2, [r7, #0]
 800b7ae:	b2d2      	uxtb	r2, r2
 800b7b0:	4611      	mov	r1, r2
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f7fd fd74 	bl	80092a0 <netconn_listen_with_backlog>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	76fb      	strb	r3, [r7, #27]

  if (err != ERR_OK) {
 800b7bc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d01e      	beq.n	800b802 <lwip_listen+0x8a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800b7c4:	69fb      	ldr	r3, [r7, #28]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	781b      	ldrb	r3, [r3, #0]
 800b7ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b7ce:	2b10      	cmp	r3, #16
 800b7d0:	d008      	beq.n	800b7e4 <lwip_listen+0x6c>
      sock_set_errno(sock, EOPNOTSUPP);
 800b7d2:	235f      	movs	r3, #95	; 0x5f
 800b7d4:	60fb      	str	r3, [r7, #12]
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d00f      	beq.n	800b7fc <lwip_listen+0x84>
 800b7dc:	4a0f      	ldr	r2, [pc, #60]	; (800b81c <lwip_listen+0xa4>)
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	6013      	str	r3, [r2, #0]
 800b7e2:	e00b      	b.n	800b7fc <lwip_listen+0x84>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 800b7e4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f7ff fc83 	bl	800b0f4 <err_to_errno>
 800b7ee:	6138      	str	r0, [r7, #16]
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d002      	beq.n	800b7fc <lwip_listen+0x84>
 800b7f6:	4a09      	ldr	r2, [pc, #36]	; (800b81c <lwip_listen+0xa4>)
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 800b7fc:	f04f 33ff 	mov.w	r3, #4294967295
 800b800:	e008      	b.n	800b814 <lwip_listen+0x9c>
  }

  sock_set_errno(sock, 0);
 800b802:	2300      	movs	r3, #0
 800b804:	617b      	str	r3, [r7, #20]
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d002      	beq.n	800b812 <lwip_listen+0x9a>
 800b80c:	4a03      	ldr	r2, [pc, #12]	; (800b81c <lwip_listen+0xa4>)
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800b812:	2300      	movs	r3, #0
}
 800b814:	4618      	mov	r0, r3
 800b816:	3720      	adds	r7, #32
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}
 800b81c:	2000d258 	.word	0x2000d258

0800b820 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b08c      	sub	sp, #48	; 0x30
 800b824:	af00      	add	r7, sp, #0
 800b826:	60f8      	str	r0, [r7, #12]
 800b828:	60b9      	str	r1, [r7, #8]
 800b82a:	607a      	str	r2, [r7, #4]
 800b82c:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 800b82e:	2308      	movs	r3, #8
 800b830:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  ssize_t recvd = 0;
 800b834:	2300      	movs	r3, #0
 800b836:	62bb      	str	r3, [r7, #40]	; 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	db01      	blt.n	800b842 <lwip_recv_tcp+0x22>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	e001      	b.n	800b846 <lwip_recv_tcp+0x26>
 800b842:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b846:	627b      	str	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d106      	bne.n	800b85c <lwip_recv_tcp+0x3c>
 800b84e:	4b74      	ldr	r3, [pc, #464]	; (800ba20 <lwip_recv_tcp+0x200>)
 800b850:	f240 329e 	movw	r2, #926	; 0x39e
 800b854:	4973      	ldr	r1, [pc, #460]	; (800ba24 <lwip_recv_tcp+0x204>)
 800b856:	4874      	ldr	r0, [pc, #464]	; (800ba28 <lwip_recv_tcp+0x208>)
 800b858:	f00b fc78 	bl	801714c <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	781b      	ldrb	r3, [r3, #0]
 800b862:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b866:	2b10      	cmp	r3, #16
 800b868:	d006      	beq.n	800b878 <lwip_recv_tcp+0x58>
 800b86a:	4b6d      	ldr	r3, [pc, #436]	; (800ba20 <lwip_recv_tcp+0x200>)
 800b86c:	f240 329f 	movw	r2, #927	; 0x39f
 800b870:	496e      	ldr	r1, [pc, #440]	; (800ba2c <lwip_recv_tcp+0x20c>)
 800b872:	486d      	ldr	r0, [pc, #436]	; (800ba28 <lwip_recv_tcp+0x208>)
 800b874:	f00b fc6a 	bl	801714c <iprintf>

  if (flags & MSG_DONTWAIT) {
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	f003 0308 	and.w	r3, r3, #8
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d005      	beq.n	800b88e <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 800b882:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b886:	f043 0304 	orr.w	r3, r3, #4
 800b88a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	685b      	ldr	r3, [r3, #4]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d003      	beq.n	800b89e <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	685b      	ldr	r3, [r3, #4]
 800b89a:	617b      	str	r3, [r7, #20]
 800b89c:	e036      	b.n	800b90c <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b8a6:	f107 0114 	add.w	r1, r7, #20
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f7fd ff42 	bl	8009734 <netconn_recv_tcp_pbuf_flags>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 800b8b6:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d019      	beq.n	800b8f2 <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 800b8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	f300 808d 	bgt.w	800b9e0 <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 800b8c6:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f7ff fc12 	bl	800b0f4 <err_to_errno>
 800b8d0:	61f8      	str	r0, [r7, #28]
 800b8d2:	69fb      	ldr	r3, [r7, #28]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d002      	beq.n	800b8de <lwip_recv_tcp+0xbe>
 800b8d8:	4a55      	ldr	r2, [pc, #340]	; (800ba30 <lwip_recv_tcp+0x210>)
 800b8da:	69fb      	ldr	r3, [r7, #28]
 800b8dc:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 800b8de:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800b8e2:	f113 0f0f 	cmn.w	r3, #15
 800b8e6:	d101      	bne.n	800b8ec <lwip_recv_tcp+0xcc>
          return 0;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	e094      	b.n	800ba16 <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 800b8ec:	f04f 33ff 	mov.w	r3, #4294967295
 800b8f0:	e091      	b.n	800ba16 <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d106      	bne.n	800b906 <lwip_recv_tcp+0xe6>
 800b8f8:	4b49      	ldr	r3, [pc, #292]	; (800ba20 <lwip_recv_tcp+0x200>)
 800b8fa:	f240 32c5 	movw	r2, #965	; 0x3c5
 800b8fe:	494d      	ldr	r1, [pc, #308]	; (800ba34 <lwip_recv_tcp+0x214>)
 800b900:	4849      	ldr	r0, [pc, #292]	; (800ba28 <lwip_recv_tcp+0x208>)
 800b902:	f00b fc23 	bl	801714c <iprintf>
      sock->lastdata.pbuf = p;
 800b906:	697a      	ldr	r2, [r7, #20]
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	891b      	ldrh	r3, [r3, #8]
 800b910:	461a      	mov	r2, r3
 800b912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b914:	4293      	cmp	r3, r2
 800b916:	dd03      	ble.n	800b920 <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	891b      	ldrh	r3, [r3, #8]
 800b91c:	847b      	strh	r3, [r7, #34]	; 0x22
 800b91e:	e001      	b.n	800b924 <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 800b920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b922:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    if (recvd + copylen < recvd) {
 800b924:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b928:	4413      	add	r3, r2
 800b92a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b92c:	429a      	cmp	r2, r3
 800b92e:	dd03      	ble.n	800b938 <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 800b930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b932:	b29b      	uxth	r3, r3
 800b934:	43db      	mvns	r3, r3
 800b936:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 800b938:	6978      	ldr	r0, [r7, #20]
 800b93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b93c:	68ba      	ldr	r2, [r7, #8]
 800b93e:	18d1      	adds	r1, r2, r3
 800b940:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b942:	2300      	movs	r3, #0
 800b944:	f002 fc58 	bl	800e1f8 <pbuf_copy_partial>

    recvd += copylen;
 800b948:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b94a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b94c:	4413      	add	r3, r2
 800b94e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 800b950:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b954:	429a      	cmp	r2, r3
 800b956:	da06      	bge.n	800b966 <lwip_recv_tcp+0x146>
 800b958:	4b31      	ldr	r3, [pc, #196]	; (800ba20 <lwip_recv_tcp+0x200>)
 800b95a:	f240 32dd 	movw	r2, #989	; 0x3dd
 800b95e:	4936      	ldr	r1, [pc, #216]	; (800ba38 <lwip_recv_tcp+0x218>)
 800b960:	4831      	ldr	r0, [pc, #196]	; (800ba28 <lwip_recv_tcp+0x208>)
 800b962:	f00b fbf3 	bl	801714c <iprintf>
    recv_left -= copylen;
 800b966:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b96a:	1ad3      	subs	r3, r2, r3
 800b96c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	f003 0301 	and.w	r3, r3, #1
 800b974:	2b00      	cmp	r3, #0
 800b976:	d123      	bne.n	800b9c0 <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	891b      	ldrh	r3, [r3, #8]
 800b97c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b97e:	429a      	cmp	r2, r3
 800b980:	d906      	bls.n	800b990 <lwip_recv_tcp+0x170>
 800b982:	4b27      	ldr	r3, [pc, #156]	; (800ba20 <lwip_recv_tcp+0x200>)
 800b984:	f240 32e3 	movw	r2, #995	; 0x3e3
 800b988:	492c      	ldr	r1, [pc, #176]	; (800ba3c <lwip_recv_tcp+0x21c>)
 800b98a:	4827      	ldr	r0, [pc, #156]	; (800ba28 <lwip_recv_tcp+0x208>)
 800b98c:	f00b fbde 	bl	801714c <iprintf>
      if (p->tot_len - copylen > 0) {
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	891b      	ldrh	r3, [r3, #8]
 800b994:	461a      	mov	r2, r3
 800b996:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b998:	1ad3      	subs	r3, r2, r3
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	dd09      	ble.n	800b9b2 <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b9a2:	4611      	mov	r1, r2
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f002 f9fe 	bl	800dda6 <pbuf_free_header>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	605a      	str	r2, [r3, #4]
 800b9b0:	e006      	b.n	800b9c0 <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f002 fa26 	bl	800de0c <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 800b9c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b9c4:	f043 0314 	orr.w	r3, r3, #20
 800b9c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 800b9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	dd08      	ble.n	800b9e4 <lwip_recv_tcp+0x1c4>
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	f003 0301 	and.w	r3, r3, #1
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	f43f af58 	beq.w	800b88e <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 800b9de:	e001      	b.n	800b9e4 <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 800b9e0:	bf00      	nop
 800b9e2:	e000      	b.n	800b9e6 <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 800b9e4:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 800b9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	dd0b      	ble.n	800ba04 <lwip_recv_tcp+0x1e4>
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	f003 0301 	and.w	r3, r3, #1
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d106      	bne.n	800ba04 <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9fc:	4611      	mov	r1, r2
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f7fd fde6 	bl	80095d0 <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 800ba04:	2300      	movs	r3, #0
 800ba06:	61bb      	str	r3, [r7, #24]
 800ba08:	69bb      	ldr	r3, [r7, #24]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d002      	beq.n	800ba14 <lwip_recv_tcp+0x1f4>
 800ba0e:	4a08      	ldr	r2, [pc, #32]	; (800ba30 <lwip_recv_tcp+0x210>)
 800ba10:	69bb      	ldr	r3, [r7, #24]
 800ba12:	6013      	str	r3, [r2, #0]
  return recvd;
 800ba14:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3730      	adds	r7, #48	; 0x30
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}
 800ba1e:	bf00      	nop
 800ba20:	08018ce8 	.word	0x08018ce8
 800ba24:	08018de0 	.word	0x08018de0
 800ba28:	08018d3c 	.word	0x08018d3c
 800ba2c:	08018df0 	.word	0x08018df0
 800ba30:	2000d258 	.word	0x2000d258
 800ba34:	08018e14 	.word	0x08018e14
 800ba38:	08018e20 	.word	0x08018e20
 800ba3c:	08018e48 	.word	0x08018e48

0800ba40 <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 800ba40:	b590      	push	{r4, r7, lr}
 800ba42:	b08b      	sub	sp, #44	; 0x2c
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	60f8      	str	r0, [r7, #12]
 800ba48:	60b9      	str	r1, [r7, #8]
 800ba4a:	603b      	str	r3, [r7, #0]
 800ba4c:	4613      	mov	r3, r2
 800ba4e:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 800ba50:	2300      	movs	r3, #0
 800ba52:	627b      	str	r3, [r7, #36]	; 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d106      	bne.n	800ba68 <lwip_sock_make_addr+0x28>
 800ba5a:	4b2b      	ldr	r3, [pc, #172]	; (800bb08 <lwip_sock_make_addr+0xc8>)
 800ba5c:	f240 4207 	movw	r2, #1031	; 0x407
 800ba60:	492a      	ldr	r1, [pc, #168]	; (800bb0c <lwip_sock_make_addr+0xcc>)
 800ba62:	482b      	ldr	r0, [pc, #172]	; (800bb10 <lwip_sock_make_addr+0xd0>)
 800ba64:	f00b fb72 	bl	801714c <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d106      	bne.n	800ba7c <lwip_sock_make_addr+0x3c>
 800ba6e:	4b26      	ldr	r3, [pc, #152]	; (800bb08 <lwip_sock_make_addr+0xc8>)
 800ba70:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800ba74:	4927      	ldr	r1, [pc, #156]	; (800bb14 <lwip_sock_make_addr+0xd4>)
 800ba76:	4826      	ldr	r0, [pc, #152]	; (800bb10 <lwip_sock_make_addr+0xd0>)
 800ba78:	f00b fb68 	bl	801714c <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 800ba7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d106      	bne.n	800ba90 <lwip_sock_make_addr+0x50>
 800ba82:	4b21      	ldr	r3, [pc, #132]	; (800bb08 <lwip_sock_make_addr+0xc8>)
 800ba84:	f240 4209 	movw	r2, #1033	; 0x409
 800ba88:	4923      	ldr	r1, [pc, #140]	; (800bb18 <lwip_sock_make_addr+0xd8>)
 800ba8a:	4821      	ldr	r0, [pc, #132]	; (800bb10 <lwip_sock_make_addr+0xd0>)
 800ba8c:	f00b fb5e 	bl	801714c <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800ba90:	f107 0314 	add.w	r3, r7, #20
 800ba94:	2210      	movs	r2, #16
 800ba96:	701a      	strb	r2, [r3, #0]
 800ba98:	f107 0314 	add.w	r3, r7, #20
 800ba9c:	2202      	movs	r2, #2
 800ba9e:	705a      	strb	r2, [r3, #1]
 800baa0:	f107 0414 	add.w	r4, r7, #20
 800baa4:	88fb      	ldrh	r3, [r7, #6]
 800baa6:	4618      	mov	r0, r3
 800baa8:	f000 fddc 	bl	800c664 <lwip_htons>
 800baac:	4603      	mov	r3, r0
 800baae:	8063      	strh	r3, [r4, #2]
 800bab0:	f107 0314 	add.w	r3, r7, #20
 800bab4:	68ba      	ldr	r2, [r7, #8]
 800bab6:	6812      	ldr	r2, [r2, #0]
 800bab8:	605a      	str	r2, [r3, #4]
 800baba:	f107 0314 	add.w	r3, r7, #20
 800babe:	3308      	adds	r3, #8
 800bac0:	2208      	movs	r2, #8
 800bac2:	2100      	movs	r1, #0
 800bac4:	4618      	mov	r0, r3
 800bac6:	f00b fb38 	bl	801713a <memset>
  if (*fromlen < saddr.sa.sa_len) {
 800baca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	7d3a      	ldrb	r2, [r7, #20]
 800bad0:	4293      	cmp	r3, r2
 800bad2:	d202      	bcs.n	800bada <lwip_sock_make_addr+0x9a>
    truncated = 1;
 800bad4:	2301      	movs	r3, #1
 800bad6:	627b      	str	r3, [r7, #36]	; 0x24
 800bad8:	e008      	b.n	800baec <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 800bada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	7d3a      	ldrb	r2, [r7, #20]
 800bae0:	4293      	cmp	r3, r2
 800bae2:	d903      	bls.n	800baec <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 800bae4:	7d3b      	ldrb	r3, [r7, #20]
 800bae6:	461a      	mov	r2, r3
 800bae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baea:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 800baec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baee:	681a      	ldr	r2, [r3, #0]
 800baf0:	f107 0314 	add.w	r3, r7, #20
 800baf4:	4619      	mov	r1, r3
 800baf6:	6838      	ldr	r0, [r7, #0]
 800baf8:	f00b fafb 	bl	80170f2 <memcpy>
  return truncated;
 800bafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	372c      	adds	r7, #44	; 0x2c
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd90      	pop	{r4, r7, pc}
 800bb06:	bf00      	nop
 800bb08:	08018ce8 	.word	0x08018ce8
 800bb0c:	08018e58 	.word	0x08018e58
 800bb10:	08018d3c 	.word	0x08018d3c
 800bb14:	08018e6c 	.word	0x08018e6c
 800bb18:	08018e7c 	.word	0x08018e7c

0800bb1c <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b088      	sub	sp, #32
 800bb20:	af02      	add	r7, sp, #8
 800bb22:	60f8      	str	r0, [r7, #12]
 800bb24:	60b9      	str	r1, [r7, #8]
 800bb26:	607a      	str	r2, [r7, #4]
 800bb28:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d101      	bne.n	800bb34 <lwip_recv_tcp_from+0x18>
    return 0;
 800bb30:	2300      	movs	r3, #0
 800bb32:	e021      	b.n	800bb78 <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d01d      	beq.n	800bb76 <lwip_recv_tcp_from+0x5a>
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d01a      	beq.n	800bb76 <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	6818      	ldr	r0, [r3, #0]
 800bb44:	f107 0216 	add.w	r2, r7, #22
 800bb48:	f107 0110 	add.w	r1, r7, #16
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	f7fd fb1d 	bl	800918c <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d00e      	beq.n	800bb76 <lwip_recv_tcp_from+0x5a>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d00b      	beq.n	800bb76 <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	6818      	ldr	r0, [r3, #0]
 800bb62:	8afa      	ldrh	r2, [r7, #22]
 800bb64:	f107 0110 	add.w	r1, r7, #16
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	9300      	str	r3, [sp, #0]
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	f7ff ff67 	bl	800ba40 <lwip_sock_make_addr>
 800bb72:	4603      	mov	r3, r0
 800bb74:	e000      	b.n	800bb78 <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 800bb76:	2300      	movs	r3, #0
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3718      	adds	r7, #24
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}

0800bb80 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 800bb80:	b590      	push	{r4, r7, lr}
 800bb82:	b08d      	sub	sp, #52	; 0x34
 800bb84:	af02      	add	r7, sp, #8
 800bb86:	60f8      	str	r0, [r7, #12]
 800bb88:	60b9      	str	r1, [r7, #8]
 800bb8a:	607a      	str	r2, [r7, #4]
 800bb8c:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	689b      	ldr	r3, [r3, #8]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d10d      	bne.n	800bbb2 <lwip_recvfrom_udp_raw+0x32>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	68db      	ldr	r3, [r3, #12]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	dd09      	ble.n	800bbb2 <lwip_recvfrom_udp_raw+0x32>
 800bb9e:	4b5e      	ldr	r3, [pc, #376]	; (800bd18 <lwip_recvfrom_udp_raw+0x198>)
 800bba0:	f240 4249 	movw	r2, #1097	; 0x449
 800bba4:	495d      	ldr	r1, [pc, #372]	; (800bd1c <lwip_recvfrom_udp_raw+0x19c>)
 800bba6:	485e      	ldr	r0, [pc, #376]	; (800bd20 <lwip_recvfrom_udp_raw+0x1a0>)
 800bba8:	f00b fad0 	bl	801714c <iprintf>
 800bbac:	f06f 030f 	mvn.w	r3, #15
 800bbb0:	e0ad      	b.n	800bd0e <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	f003 0308 	and.w	r3, r3, #8
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d003      	beq.n	800bbc4 <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 800bbbc:	2304      	movs	r3, #4
 800bbbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bbc2:	e002      	b.n	800bbca <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	685b      	ldr	r3, [r3, #4]
 800bbce:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d11e      	bne.n	800bc14 <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bbde:	f107 0110 	add.w	r1, r7, #16
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f7fd fdd2 	bl	800978c <netconn_recv_udp_raw_netbuf_flags>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 800bbec:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d002      	beq.n	800bbfa <lwip_recvfrom_udp_raw+0x7a>
      return err;
 800bbf4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bbf8:	e089      	b.n	800bd0e <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d106      	bne.n	800bc0e <lwip_recvfrom_udp_raw+0x8e>
 800bc00:	4b45      	ldr	r3, [pc, #276]	; (800bd18 <lwip_recvfrom_udp_raw+0x198>)
 800bc02:	f240 425e 	movw	r2, #1118	; 0x45e
 800bc06:	4947      	ldr	r1, [pc, #284]	; (800bd24 <lwip_recvfrom_udp_raw+0x1a4>)
 800bc08:	4845      	ldr	r0, [pc, #276]	; (800bd20 <lwip_recvfrom_udp_raw+0x1a0>)
 800bc0a:	f00b fa9f 	bl	801714c <iprintf>
    sock->lastdata.netbuf = buf;
 800bc0e:	693a      	ldr	r2, [r7, #16]
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	891b      	ldrh	r3, [r3, #8]
 800bc1a:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	847b      	strh	r3, [r7, #34]	; 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800bc20:	2300      	movs	r3, #0
 800bc22:	61fb      	str	r3, [r7, #28]
 800bc24:	e029      	b.n	800bc7a <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 800bc26:	8b3a      	ldrh	r2, [r7, #24]
 800bc28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bc2a:	1ad3      	subs	r3, r2, r3
 800bc2c:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	689a      	ldr	r2, [r3, #8]
 800bc32:	69fb      	ldr	r3, [r7, #28]
 800bc34:	00db      	lsls	r3, r3, #3
 800bc36:	4413      	add	r3, r2
 800bc38:	685a      	ldr	r2, [r3, #4]
 800bc3a:	8afb      	ldrh	r3, [r7, #22]
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d902      	bls.n	800bc46 <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 800bc40:	8afb      	ldrh	r3, [r7, #22]
 800bc42:	84bb      	strh	r3, [r7, #36]	; 0x24
 800bc44:	e006      	b.n	800bc54 <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	689a      	ldr	r2, [r3, #8]
 800bc4a:	69fb      	ldr	r3, [r7, #28]
 800bc4c:	00db      	lsls	r3, r3, #3
 800bc4e:	4413      	add	r3, r2
 800bc50:	685b      	ldr	r3, [r3, #4]
 800bc52:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	6818      	ldr	r0, [r3, #0]
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	689a      	ldr	r2, [r3, #8]
 800bc5c:	69fb      	ldr	r3, [r7, #28]
 800bc5e:	00db      	lsls	r3, r3, #3
 800bc60:	4413      	add	r3, r2
 800bc62:	6819      	ldr	r1, [r3, #0]
 800bc64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bc66:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bc68:	f002 fac6 	bl	800e1f8 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 800bc6c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bc6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bc70:	4413      	add	r3, r2
 800bc72:	847b      	strh	r3, [r7, #34]	; 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800bc74:	69fb      	ldr	r3, [r7, #28]
 800bc76:	3301      	adds	r3, #1
 800bc78:	61fb      	str	r3, [r7, #28]
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	68db      	ldr	r3, [r3, #12]
 800bc7e:	69fa      	ldr	r2, [r7, #28]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	da03      	bge.n	800bc8c <lwip_recvfrom_udp_raw+0x10c>
 800bc84:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bc86:	8b3b      	ldrh	r3, [r7, #24]
 800bc88:	429a      	cmp	r2, r3
 800bc8a:	d3cc      	bcc.n	800bc26 <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d01a      	beq.n	800bcca <lwip_recvfrom_udp_raw+0x14a>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	685b      	ldr	r3, [r3, #4]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d016      	beq.n	800bcca <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d012      	beq.n	800bcca <lwip_recvfrom_udp_raw+0x14a>
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	685b      	ldr	r3, [r3, #4]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d00e      	beq.n	800bcca <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	6818      	ldr	r0, [r3, #0]
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	f103 0108 	add.w	r1, r3, #8
 800bcb6:	693b      	ldr	r3, [r7, #16]
 800bcb8:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	3304      	adds	r3, #4
 800bcc2:	9300      	str	r3, [sp, #0]
 800bcc4:	4623      	mov	r3, r4
 800bcc6:	f7ff febb 	bl	800ba40 <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2200      	movs	r2, #0
 800bcce:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	691b      	ldr	r3, [r3, #16]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d007      	beq.n	800bce8 <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 800bcdc:	7d7b      	ldrb	r3, [r7, #21]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d102      	bne.n	800bce8 <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2200      	movs	r2, #0
 800bce6:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	f003 0301 	and.w	r3, r3, #1
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d106      	bne.n	800bd00 <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f7ff fa18 	bl	800b130 <netbuf_delete>
  }
  if (datagram_len) {
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d002      	beq.n	800bd0c <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	8b3a      	ldrh	r2, [r7, #24]
 800bd0a:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 800bd0c:	2300      	movs	r3, #0
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	372c      	adds	r7, #44	; 0x2c
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd90      	pop	{r4, r7, pc}
 800bd16:	bf00      	nop
 800bd18:	08018ce8 	.word	0x08018ce8
 800bd1c:	08018e8c 	.word	0x08018e8c
 800bd20:	08018d3c 	.word	0x08018d3c
 800bd24:	08018eb8 	.word	0x08018eb8

0800bd28 <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b096      	sub	sp, #88	; 0x58
 800bd2c:	af02      	add	r7, sp, #8
 800bd2e:	60f8      	str	r0, [r7, #12]
 800bd30:	60b9      	str	r1, [r7, #8]
 800bd32:	607a      	str	r2, [r7, #4]
 800bd34:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 800bd36:	68f8      	ldr	r0, [r7, #12]
 800bd38:	f7ff fa58 	bl	800b1ec <get_socket>
 800bd3c:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (!sock) {
 800bd3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d102      	bne.n	800bd4a <lwip_recvfrom+0x22>
    return -1;
 800bd44:	f04f 33ff 	mov.w	r3, #4294967295
 800bd48:	e077      	b.n	800be3a <lwip_recvfrom+0x112>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800bd4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	781b      	ldrb	r3, [r3, #0]
 800bd50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bd54:	2b10      	cmp	r3, #16
 800bd56:	d112      	bne.n	800bd7e <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	687a      	ldr	r2, [r7, #4]
 800bd5c:	68b9      	ldr	r1, [r7, #8]
 800bd5e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800bd60:	f7ff fd5e 	bl	800b820 <lwip_recv_tcp>
 800bd64:	6478      	str	r0, [r7, #68]	; 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 800bd66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd68:	9301      	str	r3, [sp, #4]
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	9300      	str	r3, [sp, #0]
 800bd6e:	4b35      	ldr	r3, [pc, #212]	; (800be44 <lwip_recvfrom+0x11c>)
 800bd70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bd72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bd74:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800bd76:	f7ff fed1 	bl	800bb1c <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 800bd7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd7c:	e05d      	b.n	800be3a <lwip_recvfrom+0x112>
  } else
#endif
  {
    u16_t datagram_len = 0;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	877b      	strh	r3, [r7, #58]	; 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	633b      	str	r3, [r7, #48]	; 0x30
    vec.iov_len = len;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	637b      	str	r3, [r7, #52]	; 0x34
    msg.msg_control = NULL;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	627b      	str	r3, [r7, #36]	; 0x24
    msg.msg_controllen = 0;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	62bb      	str	r3, [r7, #40]	; 0x28
    msg.msg_flags = 0;
 800bd92:	2300      	movs	r3, #0
 800bd94:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg.msg_iov = &vec;
 800bd96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bd9a:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 800bda0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bda2:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800bda4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d002      	beq.n	800bdb0 <lwip_recvfrom+0x88>
 800bdaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	e000      	b.n	800bdb2 <lwip_recvfrom+0x8a>
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800bdb4:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 800bdb8:	f107 0214 	add.w	r2, r7, #20
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	9300      	str	r3, [sp, #0]
 800bdc0:	460b      	mov	r3, r1
 800bdc2:	6839      	ldr	r1, [r7, #0]
 800bdc4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800bdc6:	f7ff fedb 	bl	800bb80 <lwip_recvfrom_udp_raw>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (err != ERR_OK) {
 800bdd0:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d00e      	beq.n	800bdf6 <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 800bdd8:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800bddc:	4618      	mov	r0, r3
 800bdde:	f7ff f989 	bl	800b0f4 <err_to_errno>
 800bde2:	63f8      	str	r0, [r7, #60]	; 0x3c
 800bde4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d002      	beq.n	800bdf0 <lwip_recvfrom+0xc8>
 800bdea:	4a17      	ldr	r2, [pc, #92]	; (800be48 <lwip_recvfrom+0x120>)
 800bdec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdee:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800bdf0:	f04f 33ff 	mov.w	r3, #4294967295
 800bdf4:	e021      	b.n	800be3a <lwip_recvfrom+0x112>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800bdf6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bdf8:	461a      	mov	r2, r3
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	bf28      	it	cs
 800be00:	4613      	movcs	r3, r2
 800be02:	4a12      	ldr	r2, [pc, #72]	; (800be4c <lwip_recvfrom+0x124>)
 800be04:	4293      	cmp	r3, r2
 800be06:	d806      	bhi.n	800be16 <lwip_recvfrom+0xee>
 800be08:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800be0a:	461a      	mov	r2, r3
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	4293      	cmp	r3, r2
 800be10:	bf28      	it	cs
 800be12:	4613      	movcs	r3, r2
 800be14:	e001      	b.n	800be1a <lwip_recvfrom+0xf2>
 800be16:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800be1a:	647b      	str	r3, [r7, #68]	; 0x44
    if (fromlen) {
 800be1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d002      	beq.n	800be28 <lwip_recvfrom+0x100>
      *fromlen = msg.msg_namelen;
 800be22:	69ba      	ldr	r2, [r7, #24]
 800be24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be26:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 800be28:	2300      	movs	r3, #0
 800be2a:	643b      	str	r3, [r7, #64]	; 0x40
 800be2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d002      	beq.n	800be38 <lwip_recvfrom+0x110>
 800be32:	4a05      	ldr	r2, [pc, #20]	; (800be48 <lwip_recvfrom+0x120>)
 800be34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be36:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 800be38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3750      	adds	r7, #80	; 0x50
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}
 800be42:	bf00      	nop
 800be44:	08018ec4 	.word	0x08018ec4
 800be48:	2000d258 	.word	0x2000d258
 800be4c:	7ffffffe 	.word	0x7ffffffe

0800be50 <lwip_recv>:
  return lwip_recvmsg(s, &msg, 0);
}

ssize_t
lwip_recv(int s, void *mem, size_t len, int flags)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b086      	sub	sp, #24
 800be54:	af02      	add	r7, sp, #8
 800be56:	60f8      	str	r0, [r7, #12]
 800be58:	60b9      	str	r1, [r7, #8]
 800be5a:	607a      	str	r2, [r7, #4]
 800be5c:	603b      	str	r3, [r7, #0]
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 800be5e:	2300      	movs	r3, #0
 800be60:	9301      	str	r3, [sp, #4]
 800be62:	2300      	movs	r3, #0
 800be64:	9300      	str	r3, [sp, #0]
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	687a      	ldr	r2, [r7, #4]
 800be6a:	68b9      	ldr	r1, [r7, #8]
 800be6c:	68f8      	ldr	r0, [r7, #12]
 800be6e:	f7ff ff5b 	bl	800bd28 <lwip_recvfrom>
 800be72:	4603      	mov	r3, r0
}
 800be74:	4618      	mov	r0, r3
 800be76:	3710      	adds	r7, #16
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}

0800be7c <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b08c      	sub	sp, #48	; 0x30
 800be80:	af02      	add	r7, sp, #8
 800be82:	60f8      	str	r0, [r7, #12]
 800be84:	60b9      	str	r1, [r7, #8]
 800be86:	607a      	str	r2, [r7, #4]
 800be88:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 800be8a:	68f8      	ldr	r0, [r7, #12]
 800be8c:	f7ff f9ae 	bl	800b1ec <get_socket>
 800be90:	6278      	str	r0, [r7, #36]	; 0x24
  if (!sock) {
 800be92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be94:	2b00      	cmp	r3, #0
 800be96:	d102      	bne.n	800be9e <lwip_send+0x22>
    return -1;
 800be98:	f04f 33ff 	mov.w	r3, #4294967295
 800be9c:	e04b      	b.n	800bf36 <lwip_send+0xba>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800be9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	781b      	ldrb	r3, [r3, #0]
 800bea4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bea8:	2b10      	cmp	r3, #16
 800beaa:	d00d      	beq.n	800bec8 <lwip_send+0x4c>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
#else /* (LWIP_UDP || LWIP_RAW) */
    sock_set_errno(sock, err_to_errno(ERR_ARG));
 800beac:	f06f 000f 	mvn.w	r0, #15
 800beb0:	f7ff f920 	bl	800b0f4 <err_to_errno>
 800beb4:	61b8      	str	r0, [r7, #24]
 800beb6:	69bb      	ldr	r3, [r7, #24]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d002      	beq.n	800bec2 <lwip_send+0x46>
 800bebc:	4a20      	ldr	r2, [pc, #128]	; (800bf40 <lwip_send+0xc4>)
 800bebe:	69bb      	ldr	r3, [r7, #24]
 800bec0:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800bec2:	f04f 33ff 	mov.w	r3, #4294967295
 800bec6:	e036      	b.n	800bf36 <lwip_send+0xba>
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d001      	beq.n	800bed6 <lwip_send+0x5a>
 800bed2:	2203      	movs	r2, #3
 800bed4:	e000      	b.n	800bed8 <lwip_send+0x5c>
 800bed6:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	105b      	asrs	r3, r3, #1
 800bedc:	b25b      	sxtb	r3, r3
 800bede:	f003 0304 	and.w	r3, r3, #4
 800bee2:	b25b      	sxtb	r3, r3
 800bee4:	4313      	orrs	r3, r2
 800bee6:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 800bee8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 800beec:	2300      	movs	r3, #0
 800beee:	617b      	str	r3, [r7, #20]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800bef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef2:	6818      	ldr	r0, [r3, #0]
 800bef4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800bef8:	f107 0314 	add.w	r3, r7, #20
 800befc:	9300      	str	r3, [sp, #0]
 800befe:	4613      	mov	r3, r2
 800bf00:	687a      	ldr	r2, [r7, #4]
 800bf02:	68b9      	ldr	r1, [r7, #8]
 800bf04:	f7fd fc6e 	bl	80097e4 <netconn_write_partly>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800bf0e:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800bf12:	4618      	mov	r0, r3
 800bf14:	f7ff f8ee 	bl	800b0f4 <err_to_errno>
 800bf18:	61f8      	str	r0, [r7, #28]
 800bf1a:	69fb      	ldr	r3, [r7, #28]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d002      	beq.n	800bf26 <lwip_send+0xaa>
 800bf20:	4a07      	ldr	r2, [pc, #28]	; (800bf40 <lwip_send+0xc4>)
 800bf22:	69fb      	ldr	r3, [r7, #28]
 800bf24:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 800bf26:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d101      	bne.n	800bf32 <lwip_send+0xb6>
 800bf2e:	697b      	ldr	r3, [r7, #20]
 800bf30:	e001      	b.n	800bf36 <lwip_send+0xba>
 800bf32:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3728      	adds	r7, #40	; 0x28
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}
 800bf3e:	bf00      	nop
 800bf40:	2000d258 	.word	0x2000d258

0800bf44 <lwip_socket>:
  return (err == ERR_OK ? short_size : -1);
}

int
lwip_socket(int domain, int type, int protocol)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b086      	sub	sp, #24
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	60f8      	str	r0, [r7, #12]
 800bf4c:	60b9      	str	r1, [r7, #8]
 800bf4e:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	2b02      	cmp	r3, #2
 800bf54:	d00d      	beq.n	800bf72 <lwip_socket+0x2e>
 800bf56:	2b03      	cmp	r3, #3
 800bf58:	d002      	beq.n	800bf60 <lwip_socket+0x1c>
 800bf5a:	2b01      	cmp	r3, #1
 800bf5c:	d016      	beq.n	800bf8c <lwip_socket+0x48>
 800bf5e:	e01c      	b.n	800bf9a <lwip_socket+0x56>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	b2db      	uxtb	r3, r3
 800bf64:	4a21      	ldr	r2, [pc, #132]	; (800bfec <lwip_socket+0xa8>)
 800bf66:	4619      	mov	r1, r3
 800bf68:	2040      	movs	r0, #64	; 0x40
 800bf6a:	f7fd f855 	bl	8009018 <netconn_new_with_proto_and_callback>
 800bf6e:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800bf70:	e019      	b.n	800bfa6 <lwip_socket+0x62>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2b88      	cmp	r3, #136	; 0x88
 800bf76:	d101      	bne.n	800bf7c <lwip_socket+0x38>
 800bf78:	2321      	movs	r3, #33	; 0x21
 800bf7a:	e000      	b.n	800bf7e <lwip_socket+0x3a>
 800bf7c:	2320      	movs	r3, #32
 800bf7e:	4a1b      	ldr	r2, [pc, #108]	; (800bfec <lwip_socket+0xa8>)
 800bf80:	2100      	movs	r1, #0
 800bf82:	4618      	mov	r0, r3
 800bf84:	f7fd f848 	bl	8009018 <netconn_new_with_proto_and_callback>
 800bf88:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800bf8a:	e00c      	b.n	800bfa6 <lwip_socket+0x62>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800bf8c:	4a17      	ldr	r2, [pc, #92]	; (800bfec <lwip_socket+0xa8>)
 800bf8e:	2100      	movs	r1, #0
 800bf90:	2010      	movs	r0, #16
 800bf92:	f7fd f841 	bl	8009018 <netconn_new_with_proto_and_callback>
 800bf96:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800bf98:	e005      	b.n	800bfa6 <lwip_socket+0x62>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800bf9a:	4b15      	ldr	r3, [pc, #84]	; (800bff0 <lwip_socket+0xac>)
 800bf9c:	2216      	movs	r2, #22
 800bf9e:	601a      	str	r2, [r3, #0]
      return -1;
 800bfa0:	f04f 33ff 	mov.w	r3, #4294967295
 800bfa4:	e01e      	b.n	800bfe4 <lwip_socket+0xa0>
  }

  if (!conn) {
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d105      	bne.n	800bfb8 <lwip_socket+0x74>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800bfac:	4b10      	ldr	r3, [pc, #64]	; (800bff0 <lwip_socket+0xac>)
 800bfae:	2269      	movs	r2, #105	; 0x69
 800bfb0:	601a      	str	r2, [r3, #0]
    return -1;
 800bfb2:	f04f 33ff 	mov.w	r3, #4294967295
 800bfb6:	e015      	b.n	800bfe4 <lwip_socket+0xa0>
  }

  i = alloc_socket(conn, 0);
 800bfb8:	2100      	movs	r1, #0
 800bfba:	6978      	ldr	r0, [r7, #20]
 800bfbc:	f7ff f92e 	bl	800b21c <alloc_socket>
 800bfc0:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfc8:	d108      	bne.n	800bfdc <lwip_socket+0x98>
    netconn_delete(conn);
 800bfca:	6978      	ldr	r0, [r7, #20]
 800bfcc:	f7fd f8c2 	bl	8009154 <netconn_delete>
    set_errno(ENFILE);
 800bfd0:	4b07      	ldr	r3, [pc, #28]	; (800bff0 <lwip_socket+0xac>)
 800bfd2:	2217      	movs	r2, #23
 800bfd4:	601a      	str	r2, [r3, #0]
    return -1;
 800bfd6:	f04f 33ff 	mov.w	r3, #4294967295
 800bfda:	e003      	b.n	800bfe4 <lwip_socket+0xa0>
  }
  conn->socket = i;
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	693a      	ldr	r2, [r7, #16]
 800bfe0:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800bfe2:	693b      	ldr	r3, [r7, #16]
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	3718      	adds	r7, #24
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}
 800bfec:	0800c07d 	.word	0x0800c07d
 800bff0:	2000d258 	.word	0x2000d258

0800bff4 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800bff4:	b480      	push	{r7}
 800bff6:	b087      	sub	sp, #28
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	60f8      	str	r0, [r7, #12]
 800bffc:	60b9      	str	r1, [r7, #8]
 800bffe:	607a      	str	r2, [r7, #4]
 800c000:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800c002:	2300      	movs	r3, #0
 800c004:	617b      	str	r3, [r7, #20]
 800c006:	e02c      	b.n	800c062 <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	695a      	ldr	r2, [r3, #20]
 800c00c:	697b      	ldr	r3, [r7, #20]
 800c00e:	00db      	lsls	r3, r3, #3
 800c010:	4413      	add	r3, r2
 800c012:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	68ba      	ldr	r2, [r7, #8]
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d11e      	bne.n	800c05c <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d009      	beq.n	800c038 <lwip_poll_should_wake+0x44>
 800c024:	693b      	ldr	r3, [r7, #16]
 800c026:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c02a:	b29b      	uxth	r3, r3
 800c02c:	f003 0301 	and.w	r3, r3, #1
 800c030:	2b00      	cmp	r3, #0
 800c032:	d001      	beq.n	800c038 <lwip_poll_should_wake+0x44>
        return 1;
 800c034:	2301      	movs	r3, #1
 800c036:	e01a      	b.n	800c06e <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d009      	beq.n	800c052 <lwip_poll_should_wake+0x5e>
 800c03e:	693b      	ldr	r3, [r7, #16]
 800c040:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c044:	b29b      	uxth	r3, r3
 800c046:	f003 0302 	and.w	r3, r3, #2
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d001      	beq.n	800c052 <lwip_poll_should_wake+0x5e>
        return 1;
 800c04e:	2301      	movs	r3, #1
 800c050:	e00d      	b.n	800c06e <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800c052:	6a3b      	ldr	r3, [r7, #32]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d001      	beq.n	800c05c <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800c058:	2301      	movs	r3, #1
 800c05a:	e008      	b.n	800c06e <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	3301      	adds	r3, #1
 800c060:	617b      	str	r3, [r7, #20]
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	699b      	ldr	r3, [r3, #24]
 800c066:	697a      	ldr	r2, [r7, #20]
 800c068:	429a      	cmp	r2, r3
 800c06a:	d3cd      	bcc.n	800c008 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800c06c:	2300      	movs	r3, #0
}
 800c06e:	4618      	mov	r0, r3
 800c070:	371c      	adds	r7, #28
 800c072:	46bd      	mov	sp, r7
 800c074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c078:	4770      	bx	lr
	...

0800c07c <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b08a      	sub	sp, #40	; 0x28
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
 800c084:	460b      	mov	r3, r1
 800c086:	70fb      	strb	r3, [r7, #3]
 800c088:	4613      	mov	r3, r2
 800c08a:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	f000 80a4 	beq.w	800c1dc <event_callback+0x160>
    s = conn->socket;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	699b      	ldr	r3, [r3, #24]
 800c098:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 800c09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	da18      	bge.n	800c0d2 <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800c0a0:	f00a ffc2 	bl	8017028 <sys_arch_protect>
 800c0a4:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	699b      	ldr	r3, [r3, #24]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	da0b      	bge.n	800c0c6 <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800c0ae:	78fb      	ldrb	r3, [r7, #3]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d104      	bne.n	800c0be <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	699b      	ldr	r3, [r3, #24]
 800c0b8:	1e5a      	subs	r2, r3, #1
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800c0be:	69f8      	ldr	r0, [r7, #28]
 800c0c0:	f00a ffc0 	bl	8017044 <sys_arch_unprotect>
        return;
 800c0c4:	e08d      	b.n	800c1e2 <event_callback+0x166>
      }
      s = conn->socket;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	699b      	ldr	r3, [r3, #24]
 800c0ca:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 800c0cc:	69f8      	ldr	r0, [r7, #28]
 800c0ce:	f00a ffb9 	bl	8017044 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800c0d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c0d4:	f7ff f88a 	bl	800b1ec <get_socket>
 800c0d8:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800c0da:	69bb      	ldr	r3, [r7, #24]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d07f      	beq.n	800c1e0 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800c0e4:	f00a ffa0 	bl	8017028 <sys_arch_protect>
 800c0e8:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800c0ea:	78fb      	ldrb	r3, [r7, #3]
 800c0ec:	2b04      	cmp	r3, #4
 800c0ee:	d83e      	bhi.n	800c16e <event_callback+0xf2>
 800c0f0:	a201      	add	r2, pc, #4	; (adr r2, 800c0f8 <event_callback+0x7c>)
 800c0f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0f6:	bf00      	nop
 800c0f8:	0800c10d 	.word	0x0800c10d
 800c0fc:	0800c12f 	.word	0x0800c12f
 800c100:	0800c147 	.word	0x0800c147
 800c104:	0800c15b 	.word	0x0800c15b
 800c108:	0800c167 	.word	0x0800c167
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800c10c:	69bb      	ldr	r3, [r7, #24]
 800c10e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c112:	b29b      	uxth	r3, r3
 800c114:	3301      	adds	r3, #1
 800c116:	b29b      	uxth	r3, r3
 800c118:	b21a      	sxth	r2, r3
 800c11a:	69bb      	ldr	r3, [r7, #24]
 800c11c:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800c11e:	69bb      	ldr	r3, [r7, #24]
 800c120:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c124:	2b01      	cmp	r3, #1
 800c126:	dd2a      	ble.n	800c17e <event_callback+0x102>
        check_waiters = 0;
 800c128:	2300      	movs	r3, #0
 800c12a:	623b      	str	r3, [r7, #32]
      }
      break;
 800c12c:	e027      	b.n	800c17e <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800c12e:	69bb      	ldr	r3, [r7, #24]
 800c130:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c134:	b29b      	uxth	r3, r3
 800c136:	3b01      	subs	r3, #1
 800c138:	b29b      	uxth	r3, r3
 800c13a:	b21a      	sxth	r2, r3
 800c13c:	69bb      	ldr	r3, [r7, #24]
 800c13e:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800c140:	2300      	movs	r3, #0
 800c142:	623b      	str	r3, [r7, #32]
      break;
 800c144:	e01c      	b.n	800c180 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800c146:	69bb      	ldr	r3, [r7, #24]
 800c148:	895b      	ldrh	r3, [r3, #10]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d001      	beq.n	800c152 <event_callback+0xd6>
        check_waiters = 0;
 800c14e:	2300      	movs	r3, #0
 800c150:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800c152:	69bb      	ldr	r3, [r7, #24]
 800c154:	2201      	movs	r2, #1
 800c156:	815a      	strh	r2, [r3, #10]
      break;
 800c158:	e012      	b.n	800c180 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800c15a:	69bb      	ldr	r3, [r7, #24]
 800c15c:	2200      	movs	r2, #0
 800c15e:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800c160:	2300      	movs	r3, #0
 800c162:	623b      	str	r3, [r7, #32]
      break;
 800c164:	e00c      	b.n	800c180 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800c166:	69bb      	ldr	r3, [r7, #24]
 800c168:	2201      	movs	r2, #1
 800c16a:	819a      	strh	r2, [r3, #12]
      break;
 800c16c:	e008      	b.n	800c180 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800c16e:	4b1e      	ldr	r3, [pc, #120]	; (800c1e8 <event_callback+0x16c>)
 800c170:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 800c174:	491d      	ldr	r1, [pc, #116]	; (800c1ec <event_callback+0x170>)
 800c176:	481e      	ldr	r0, [pc, #120]	; (800c1f0 <event_callback+0x174>)
 800c178:	f00a ffe8 	bl	801714c <iprintf>
      break;
 800c17c:	e000      	b.n	800c180 <event_callback+0x104>
      break;
 800c17e:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800c180:	69bb      	ldr	r3, [r7, #24]
 800c182:	7b9b      	ldrb	r3, [r3, #14]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d025      	beq.n	800c1d4 <event_callback+0x158>
 800c188:	6a3b      	ldr	r3, [r7, #32]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d022      	beq.n	800c1d4 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800c18e:	69bb      	ldr	r3, [r7, #24]
 800c190:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c194:	2b00      	cmp	r3, #0
 800c196:	bfcc      	ite	gt
 800c198:	2301      	movgt	r3, #1
 800c19a:	2300      	movle	r3, #0
 800c19c:	b2db      	uxtb	r3, r3
 800c19e:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800c1a0:	69bb      	ldr	r3, [r7, #24]
 800c1a2:	895b      	ldrh	r3, [r3, #10]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	bf14      	ite	ne
 800c1a8:	2301      	movne	r3, #1
 800c1aa:	2300      	moveq	r3, #0
 800c1ac:	b2db      	uxtb	r3, r3
 800c1ae:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800c1b0:	69bb      	ldr	r3, [r7, #24]
 800c1b2:	899b      	ldrh	r3, [r3, #12]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	bf14      	ite	ne
 800c1b8:	2301      	movne	r3, #1
 800c1ba:	2300      	moveq	r3, #0
 800c1bc:	b2db      	uxtb	r3, r3
 800c1be:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800c1c0:	69f8      	ldr	r0, [r7, #28]
 800c1c2:	f00a ff3f 	bl	8017044 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	693a      	ldr	r2, [r7, #16]
 800c1ca:	6979      	ldr	r1, [r7, #20]
 800c1cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c1ce:	f000 f811 	bl	800c1f4 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800c1d2:	e006      	b.n	800c1e2 <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800c1d4:	69f8      	ldr	r0, [r7, #28]
 800c1d6:	f00a ff35 	bl	8017044 <sys_arch_unprotect>
 800c1da:	e002      	b.n	800c1e2 <event_callback+0x166>
    return;
 800c1dc:	bf00      	nop
 800c1de:	e000      	b.n	800c1e2 <event_callback+0x166>
      return;
 800c1e0:	bf00      	nop
  }
  done_socket(sock);
}
 800c1e2:	3728      	adds	r7, #40	; 0x28
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}
 800c1e8:	08018ce8 	.word	0x08018ce8
 800c1ec:	08019040 	.word	0x08019040
 800c1f0:	08018d3c 	.word	0x08018d3c

0800c1f4 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b088      	sub	sp, #32
 800c1f8:	af02      	add	r7, sp, #8
 800c1fa:	60f8      	str	r0, [r7, #12]
 800c1fc:	60b9      	str	r1, [r7, #8]
 800c1fe:	607a      	str	r2, [r7, #4]
 800c200:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800c202:	4b3d      	ldr	r3, [pc, #244]	; (800c2f8 <select_check_waiters+0x104>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	617b      	str	r3, [r7, #20]
 800c208:	e06f      	b.n	800c2ea <select_check_waiters+0xf6>
    if (scb->sem_signalled == 0) {
 800c20a:	697b      	ldr	r3, [r7, #20]
 800c20c:	69db      	ldr	r3, [r3, #28]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d168      	bne.n	800c2e4 <select_check_waiters+0xf0>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800c212:	2300      	movs	r3, #0
 800c214:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	695b      	ldr	r3, [r3, #20]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d009      	beq.n	800c232 <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	9300      	str	r3, [sp, #0]
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	68ba      	ldr	r2, [r7, #8]
 800c226:	68f9      	ldr	r1, [r7, #12]
 800c228:	6978      	ldr	r0, [r7, #20]
 800c22a:	f7ff fee3 	bl	800bff4 <lwip_poll_should_wake>
 800c22e:	6138      	str	r0, [r7, #16]
 800c230:	e04d      	b.n	800c2ce <select_check_waiters+0xda>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d014      	beq.n	800c262 <select_check_waiters+0x6e>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	689b      	ldr	r3, [r3, #8]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d010      	beq.n	800c262 <select_check_waiters+0x6e>
 800c240:	697b      	ldr	r3, [r7, #20]
 800c242:	689b      	ldr	r3, [r3, #8]
 800c244:	68fa      	ldr	r2, [r7, #12]
 800c246:	0952      	lsrs	r2, r2, #5
 800c248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c24c:	68fa      	ldr	r2, [r7, #12]
 800c24e:	f002 021f 	and.w	r2, r2, #31
 800c252:	2101      	movs	r1, #1
 800c254:	fa01 f202 	lsl.w	r2, r1, r2
 800c258:	4013      	ands	r3, r2
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d001      	beq.n	800c262 <select_check_waiters+0x6e>
            do_signal = 1;
 800c25e:	2301      	movs	r3, #1
 800c260:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d017      	beq.n	800c298 <select_check_waiters+0xa4>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d114      	bne.n	800c298 <select_check_waiters+0xa4>
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	68db      	ldr	r3, [r3, #12]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d010      	beq.n	800c298 <select_check_waiters+0xa4>
 800c276:	697b      	ldr	r3, [r7, #20]
 800c278:	68db      	ldr	r3, [r3, #12]
 800c27a:	68fa      	ldr	r2, [r7, #12]
 800c27c:	0952      	lsrs	r2, r2, #5
 800c27e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c282:	68fa      	ldr	r2, [r7, #12]
 800c284:	f002 021f 	and.w	r2, r2, #31
 800c288:	2101      	movs	r1, #1
 800c28a:	fa01 f202 	lsl.w	r2, r1, r2
 800c28e:	4013      	ands	r3, r2
 800c290:	2b00      	cmp	r3, #0
 800c292:	d001      	beq.n	800c298 <select_check_waiters+0xa4>
            do_signal = 1;
 800c294:	2301      	movs	r3, #1
 800c296:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d017      	beq.n	800c2ce <select_check_waiters+0xda>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800c29e:	693b      	ldr	r3, [r7, #16]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d114      	bne.n	800c2ce <select_check_waiters+0xda>
 800c2a4:	697b      	ldr	r3, [r7, #20]
 800c2a6:	691b      	ldr	r3, [r3, #16]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d010      	beq.n	800c2ce <select_check_waiters+0xda>
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	691b      	ldr	r3, [r3, #16]
 800c2b0:	68fa      	ldr	r2, [r7, #12]
 800c2b2:	0952      	lsrs	r2, r2, #5
 800c2b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2b8:	68fa      	ldr	r2, [r7, #12]
 800c2ba:	f002 021f 	and.w	r2, r2, #31
 800c2be:	2101      	movs	r1, #1
 800c2c0:	fa01 f202 	lsl.w	r2, r1, r2
 800c2c4:	4013      	ands	r3, r2
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d001      	beq.n	800c2ce <select_check_waiters+0xda>
            do_signal = 1;
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d007      	beq.n	800c2e4 <select_check_waiters+0xf0>
        scb->sem_signalled = 1;
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	2201      	movs	r2, #1
 800c2d8:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800c2da:	697b      	ldr	r3, [r7, #20]
 800c2dc:	3320      	adds	r3, #32
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f00a fdfe 	bl	8016ee0 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	617b      	str	r3, [r7, #20]
 800c2ea:	697b      	ldr	r3, [r7, #20]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d18c      	bne.n	800c20a <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800c2f0:	bf00      	nop
 800c2f2:	3718      	adds	r7, #24
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}
 800c2f8:	200045f8 	.word	0x200045f8

0800c2fc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b084      	sub	sp, #16
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
 800c304:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800c306:	f008 f9e1 	bl	80146cc <sys_timeouts_sleeptime>
 800c30a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c312:	d10b      	bne.n	800c32c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800c314:	4813      	ldr	r0, [pc, #76]	; (800c364 <tcpip_timeouts_mbox_fetch+0x68>)
 800c316:	f00a fe54 	bl	8016fc2 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800c31a:	2200      	movs	r2, #0
 800c31c:	6839      	ldr	r1, [r7, #0]
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f00a fd0c 	bl	8016d3c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800c324:	480f      	ldr	r0, [pc, #60]	; (800c364 <tcpip_timeouts_mbox_fetch+0x68>)
 800c326:	f00a fe3d 	bl	8016fa4 <sys_mutex_lock>
    return;
 800c32a:	e018      	b.n	800c35e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d102      	bne.n	800c338 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800c332:	f008 f991 	bl	8014658 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c336:	e7e6      	b.n	800c306 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800c338:	480a      	ldr	r0, [pc, #40]	; (800c364 <tcpip_timeouts_mbox_fetch+0x68>)
 800c33a:	f00a fe42 	bl	8016fc2 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800c33e:	68fa      	ldr	r2, [r7, #12]
 800c340:	6839      	ldr	r1, [r7, #0]
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f00a fcfa 	bl	8016d3c <sys_arch_mbox_fetch>
 800c348:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800c34a:	4806      	ldr	r0, [pc, #24]	; (800c364 <tcpip_timeouts_mbox_fetch+0x68>)
 800c34c:	f00a fe2a 	bl	8016fa4 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c356:	d102      	bne.n	800c35e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800c358:	f008 f97e 	bl	8014658 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c35c:	e7d3      	b.n	800c306 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800c35e:	3710      	adds	r7, #16
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}
 800c364:	200079ec 	.word	0x200079ec

0800c368 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b084      	sub	sp, #16
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800c370:	4810      	ldr	r0, [pc, #64]	; (800c3b4 <tcpip_thread+0x4c>)
 800c372:	f00a fe17 	bl	8016fa4 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800c376:	4b10      	ldr	r3, [pc, #64]	; (800c3b8 <tcpip_thread+0x50>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d005      	beq.n	800c38a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800c37e:	4b0e      	ldr	r3, [pc, #56]	; (800c3b8 <tcpip_thread+0x50>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	4a0e      	ldr	r2, [pc, #56]	; (800c3bc <tcpip_thread+0x54>)
 800c384:	6812      	ldr	r2, [r2, #0]
 800c386:	4610      	mov	r0, r2
 800c388:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c38a:	f107 030c 	add.w	r3, r7, #12
 800c38e:	4619      	mov	r1, r3
 800c390:	480b      	ldr	r0, [pc, #44]	; (800c3c0 <tcpip_thread+0x58>)
 800c392:	f7ff ffb3 	bl	800c2fc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d106      	bne.n	800c3aa <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c39c:	4b09      	ldr	r3, [pc, #36]	; (800c3c4 <tcpip_thread+0x5c>)
 800c39e:	2291      	movs	r2, #145	; 0x91
 800c3a0:	4909      	ldr	r1, [pc, #36]	; (800c3c8 <tcpip_thread+0x60>)
 800c3a2:	480a      	ldr	r0, [pc, #40]	; (800c3cc <tcpip_thread+0x64>)
 800c3a4:	f00a fed2 	bl	801714c <iprintf>
      continue;
 800c3a8:	e003      	b.n	800c3b2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f000 f80f 	bl	800c3d0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c3b2:	e7ea      	b.n	800c38a <tcpip_thread+0x22>
 800c3b4:	200079ec 	.word	0x200079ec
 800c3b8:	200045fc 	.word	0x200045fc
 800c3bc:	20004600 	.word	0x20004600
 800c3c0:	20004604 	.word	0x20004604
 800c3c4:	08019094 	.word	0x08019094
 800c3c8:	080190c4 	.word	0x080190c4
 800c3cc:	080190e4 	.word	0x080190e4

0800c3d0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b082      	sub	sp, #8
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	781b      	ldrb	r3, [r3, #0]
 800c3dc:	2b01      	cmp	r3, #1
 800c3de:	d018      	beq.n	800c412 <tcpip_thread_handle_msg+0x42>
 800c3e0:	2b02      	cmp	r3, #2
 800c3e2:	d021      	beq.n	800c428 <tcpip_thread_handle_msg+0x58>
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d126      	bne.n	800c436 <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	68db      	ldr	r3, [r3, #12]
 800c3ec:	687a      	ldr	r2, [r7, #4]
 800c3ee:	6850      	ldr	r0, [r2, #4]
 800c3f0:	687a      	ldr	r2, [r7, #4]
 800c3f2:	6892      	ldr	r2, [r2, #8]
 800c3f4:	4611      	mov	r1, r2
 800c3f6:	4798      	blx	r3
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d004      	beq.n	800c408 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	685b      	ldr	r3, [r3, #4]
 800c402:	4618      	mov	r0, r3
 800c404:	f001 fd02 	bl	800de0c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c408:	6879      	ldr	r1, [r7, #4]
 800c40a:	2008      	movs	r0, #8
 800c40c:	f000 fe30 	bl	800d070 <memp_free>
      break;
 800c410:	e018      	b.n	800c444 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	685b      	ldr	r3, [r3, #4]
 800c416:	687a      	ldr	r2, [r7, #4]
 800c418:	6892      	ldr	r2, [r2, #8]
 800c41a:	4610      	mov	r0, r2
 800c41c:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800c41e:	6879      	ldr	r1, [r7, #4]
 800c420:	2007      	movs	r0, #7
 800c422:	f000 fe25 	bl	800d070 <memp_free>
      break;
 800c426:	e00d      	b.n	800c444 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	685b      	ldr	r3, [r3, #4]
 800c42c:	687a      	ldr	r2, [r7, #4]
 800c42e:	6892      	ldr	r2, [r2, #8]
 800c430:	4610      	mov	r0, r2
 800c432:	4798      	blx	r3
      break;
 800c434:	e006      	b.n	800c444 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c436:	4b05      	ldr	r3, [pc, #20]	; (800c44c <tcpip_thread_handle_msg+0x7c>)
 800c438:	22cf      	movs	r2, #207	; 0xcf
 800c43a:	4905      	ldr	r1, [pc, #20]	; (800c450 <tcpip_thread_handle_msg+0x80>)
 800c43c:	4805      	ldr	r0, [pc, #20]	; (800c454 <tcpip_thread_handle_msg+0x84>)
 800c43e:	f00a fe85 	bl	801714c <iprintf>
      break;
 800c442:	bf00      	nop
  }
}
 800c444:	bf00      	nop
 800c446:	3708      	adds	r7, #8
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}
 800c44c:	08019094 	.word	0x08019094
 800c450:	080190c4 	.word	0x080190c4
 800c454:	080190e4 	.word	0x080190e4

0800c458 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b086      	sub	sp, #24
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	60f8      	str	r0, [r7, #12]
 800c460:	60b9      	str	r1, [r7, #8]
 800c462:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c464:	481a      	ldr	r0, [pc, #104]	; (800c4d0 <tcpip_inpkt+0x78>)
 800c466:	f00a fcc4 	bl	8016df2 <sys_mbox_valid>
 800c46a:	4603      	mov	r3, r0
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d105      	bne.n	800c47c <tcpip_inpkt+0x24>
 800c470:	4b18      	ldr	r3, [pc, #96]	; (800c4d4 <tcpip_inpkt+0x7c>)
 800c472:	22fc      	movs	r2, #252	; 0xfc
 800c474:	4918      	ldr	r1, [pc, #96]	; (800c4d8 <tcpip_inpkt+0x80>)
 800c476:	4819      	ldr	r0, [pc, #100]	; (800c4dc <tcpip_inpkt+0x84>)
 800c478:	f00a fe68 	bl	801714c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800c47c:	2008      	movs	r0, #8
 800c47e:	f000 fda5 	bl	800cfcc <memp_malloc>
 800c482:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d102      	bne.n	800c490 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800c48a:	f04f 33ff 	mov.w	r3, #4294967295
 800c48e:	e01a      	b.n	800c4c6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800c490:	697b      	ldr	r3, [r7, #20]
 800c492:	2200      	movs	r2, #0
 800c494:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	68fa      	ldr	r2, [r7, #12]
 800c49a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	68ba      	ldr	r2, [r7, #8]
 800c4a0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800c4a2:	697b      	ldr	r3, [r7, #20]
 800c4a4:	687a      	ldr	r2, [r7, #4]
 800c4a6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c4a8:	6979      	ldr	r1, [r7, #20]
 800c4aa:	4809      	ldr	r0, [pc, #36]	; (800c4d0 <tcpip_inpkt+0x78>)
 800c4ac:	f00a fc2c 	bl	8016d08 <sys_mbox_trypost>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d006      	beq.n	800c4c4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c4b6:	6979      	ldr	r1, [r7, #20]
 800c4b8:	2008      	movs	r0, #8
 800c4ba:	f000 fdd9 	bl	800d070 <memp_free>
    return ERR_MEM;
 800c4be:	f04f 33ff 	mov.w	r3, #4294967295
 800c4c2:	e000      	b.n	800c4c6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800c4c4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3718      	adds	r7, #24
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}
 800c4ce:	bf00      	nop
 800c4d0:	20004604 	.word	0x20004604
 800c4d4:	08019094 	.word	0x08019094
 800c4d8:	0801910c 	.word	0x0801910c
 800c4dc:	080190e4 	.word	0x080190e4

0800c4e0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b082      	sub	sp, #8
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c4f0:	f003 0318 	and.w	r3, r3, #24
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d006      	beq.n	800c506 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800c4f8:	4a08      	ldr	r2, [pc, #32]	; (800c51c <tcpip_input+0x3c>)
 800c4fa:	6839      	ldr	r1, [r7, #0]
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	f7ff ffab 	bl	800c458 <tcpip_inpkt>
 800c502:	4603      	mov	r3, r0
 800c504:	e005      	b.n	800c512 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800c506:	4a06      	ldr	r2, [pc, #24]	; (800c520 <tcpip_input+0x40>)
 800c508:	6839      	ldr	r1, [r7, #0]
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f7ff ffa4 	bl	800c458 <tcpip_inpkt>
 800c510:	4603      	mov	r3, r0
}
 800c512:	4618      	mov	r0, r3
 800c514:	3708      	adds	r7, #8
 800c516:	46bd      	mov	sp, r7
 800c518:	bd80      	pop	{r7, pc}
 800c51a:	bf00      	nop
 800c51c:	08016af5 	.word	0x08016af5
 800c520:	08015a25 	.word	0x08015a25

0800c524 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b084      	sub	sp, #16
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
 800c52c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c52e:	4819      	ldr	r0, [pc, #100]	; (800c594 <tcpip_try_callback+0x70>)
 800c530:	f00a fc5f 	bl	8016df2 <sys_mbox_valid>
 800c534:	4603      	mov	r3, r0
 800c536:	2b00      	cmp	r3, #0
 800c538:	d106      	bne.n	800c548 <tcpip_try_callback+0x24>
 800c53a:	4b17      	ldr	r3, [pc, #92]	; (800c598 <tcpip_try_callback+0x74>)
 800c53c:	f240 125d 	movw	r2, #349	; 0x15d
 800c540:	4916      	ldr	r1, [pc, #88]	; (800c59c <tcpip_try_callback+0x78>)
 800c542:	4817      	ldr	r0, [pc, #92]	; (800c5a0 <tcpip_try_callback+0x7c>)
 800c544:	f00a fe02 	bl	801714c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800c548:	2007      	movs	r0, #7
 800c54a:	f000 fd3f 	bl	800cfcc <memp_malloc>
 800c54e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d102      	bne.n	800c55c <tcpip_try_callback+0x38>
    return ERR_MEM;
 800c556:	f04f 33ff 	mov.w	r3, #4294967295
 800c55a:	e017      	b.n	800c58c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	2201      	movs	r2, #1
 800c560:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	687a      	ldr	r2, [r7, #4]
 800c566:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	683a      	ldr	r2, [r7, #0]
 800c56c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c56e:	68f9      	ldr	r1, [r7, #12]
 800c570:	4808      	ldr	r0, [pc, #32]	; (800c594 <tcpip_try_callback+0x70>)
 800c572:	f00a fbc9 	bl	8016d08 <sys_mbox_trypost>
 800c576:	4603      	mov	r3, r0
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d006      	beq.n	800c58a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800c57c:	68f9      	ldr	r1, [r7, #12]
 800c57e:	2007      	movs	r0, #7
 800c580:	f000 fd76 	bl	800d070 <memp_free>
    return ERR_MEM;
 800c584:	f04f 33ff 	mov.w	r3, #4294967295
 800c588:	e000      	b.n	800c58c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800c58a:	2300      	movs	r3, #0
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3710      	adds	r7, #16
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}
 800c594:	20004604 	.word	0x20004604
 800c598:	08019094 	.word	0x08019094
 800c59c:	0801910c 	.word	0x0801910c
 800c5a0:	080190e4 	.word	0x080190e4

0800c5a4 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b084      	sub	sp, #16
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	60f8      	str	r0, [r7, #12]
 800c5ac:	60b9      	str	r1, [r7, #8]
 800c5ae:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800c5b0:	4806      	ldr	r0, [pc, #24]	; (800c5cc <tcpip_send_msg_wait_sem+0x28>)
 800c5b2:	f00a fcf7 	bl	8016fa4 <sys_mutex_lock>
  fn(apimsg);
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	68b8      	ldr	r0, [r7, #8]
 800c5ba:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800c5bc:	4803      	ldr	r0, [pc, #12]	; (800c5cc <tcpip_send_msg_wait_sem+0x28>)
 800c5be:	f00a fd00 	bl	8016fc2 <sys_mutex_unlock>
  return ERR_OK;
 800c5c2:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3710      	adds	r7, #16
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}
 800c5cc:	200079ec 	.word	0x200079ec

0800c5d0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b084      	sub	sp, #16
 800c5d4:	af02      	add	r7, sp, #8
 800c5d6:	6078      	str	r0, [r7, #4]
 800c5d8:	6039      	str	r1, [r7, #0]
  lwip_init();
 800c5da:	f000 f871 	bl	800c6c0 <lwip_init>

  tcpip_init_done = initfunc;
 800c5de:	4a17      	ldr	r2, [pc, #92]	; (800c63c <tcpip_init+0x6c>)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800c5e4:	4a16      	ldr	r2, [pc, #88]	; (800c640 <tcpip_init+0x70>)
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800c5ea:	2106      	movs	r1, #6
 800c5ec:	4815      	ldr	r0, [pc, #84]	; (800c644 <tcpip_init+0x74>)
 800c5ee:	f00a fb57 	bl	8016ca0 <sys_mbox_new>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d006      	beq.n	800c606 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800c5f8:	4b13      	ldr	r3, [pc, #76]	; (800c648 <tcpip_init+0x78>)
 800c5fa:	f240 2261 	movw	r2, #609	; 0x261
 800c5fe:	4913      	ldr	r1, [pc, #76]	; (800c64c <tcpip_init+0x7c>)
 800c600:	4813      	ldr	r0, [pc, #76]	; (800c650 <tcpip_init+0x80>)
 800c602:	f00a fda3 	bl	801714c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800c606:	4813      	ldr	r0, [pc, #76]	; (800c654 <tcpip_init+0x84>)
 800c608:	f00a fcb0 	bl	8016f6c <sys_mutex_new>
 800c60c:	4603      	mov	r3, r0
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d006      	beq.n	800c620 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800c612:	4b0d      	ldr	r3, [pc, #52]	; (800c648 <tcpip_init+0x78>)
 800c614:	f240 2265 	movw	r2, #613	; 0x265
 800c618:	490f      	ldr	r1, [pc, #60]	; (800c658 <tcpip_init+0x88>)
 800c61a:	480d      	ldr	r0, [pc, #52]	; (800c650 <tcpip_init+0x80>)
 800c61c:	f00a fd96 	bl	801714c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800c620:	2300      	movs	r3, #0
 800c622:	9300      	str	r3, [sp, #0]
 800c624:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c628:	2200      	movs	r2, #0
 800c62a:	490c      	ldr	r1, [pc, #48]	; (800c65c <tcpip_init+0x8c>)
 800c62c:	480c      	ldr	r0, [pc, #48]	; (800c660 <tcpip_init+0x90>)
 800c62e:	f00a fcd5 	bl	8016fdc <sys_thread_new>
}
 800c632:	bf00      	nop
 800c634:	3708      	adds	r7, #8
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}
 800c63a:	bf00      	nop
 800c63c:	200045fc 	.word	0x200045fc
 800c640:	20004600 	.word	0x20004600
 800c644:	20004604 	.word	0x20004604
 800c648:	08019094 	.word	0x08019094
 800c64c:	0801911c 	.word	0x0801911c
 800c650:	080190e4 	.word	0x080190e4
 800c654:	200079ec 	.word	0x200079ec
 800c658:	08019140 	.word	0x08019140
 800c65c:	0800c369 	.word	0x0800c369
 800c660:	08019164 	.word	0x08019164

0800c664 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c664:	b480      	push	{r7}
 800c666:	b083      	sub	sp, #12
 800c668:	af00      	add	r7, sp, #0
 800c66a:	4603      	mov	r3, r0
 800c66c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c66e:	88fb      	ldrh	r3, [r7, #6]
 800c670:	021b      	lsls	r3, r3, #8
 800c672:	b21a      	sxth	r2, r3
 800c674:	88fb      	ldrh	r3, [r7, #6]
 800c676:	0a1b      	lsrs	r3, r3, #8
 800c678:	b29b      	uxth	r3, r3
 800c67a:	b21b      	sxth	r3, r3
 800c67c:	4313      	orrs	r3, r2
 800c67e:	b21b      	sxth	r3, r3
 800c680:	b29b      	uxth	r3, r3
}
 800c682:	4618      	mov	r0, r3
 800c684:	370c      	adds	r7, #12
 800c686:	46bd      	mov	sp, r7
 800c688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68c:	4770      	bx	lr

0800c68e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c68e:	b480      	push	{r7}
 800c690:	b083      	sub	sp, #12
 800c692:	af00      	add	r7, sp, #0
 800c694:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	061a      	lsls	r2, r3, #24
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	021b      	lsls	r3, r3, #8
 800c69e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c6a2:	431a      	orrs	r2, r3
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	0a1b      	lsrs	r3, r3, #8
 800c6a8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c6ac:	431a      	orrs	r2, r3
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	0e1b      	lsrs	r3, r3, #24
 800c6b2:	4313      	orrs	r3, r2
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	370c      	adds	r7, #12
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6be:	4770      	bx	lr

0800c6c0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b082      	sub	sp, #8
 800c6c4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800c6ca:	f00a fc41 	bl	8016f50 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800c6ce:	f000 f8d3 	bl	800c878 <mem_init>
  memp_init();
 800c6d2:	f000 fc2f 	bl	800cf34 <memp_init>
  pbuf_init();
  netif_init();
 800c6d6:	f000 fcf5 	bl	800d0c4 <netif_init>
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c6da:	f001 fe31 	bl	800e340 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c6de:	f007 ff75 	bl	80145cc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c6e2:	bf00      	nop
 800c6e4:	3708      	adds	r7, #8
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}
	...

0800c6ec <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b083      	sub	sp, #12
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c6f6:	4b05      	ldr	r3, [pc, #20]	; (800c70c <ptr_to_mem+0x20>)
 800c6f8:	681a      	ldr	r2, [r3, #0]
 800c6fa:	88fb      	ldrh	r3, [r7, #6]
 800c6fc:	4413      	add	r3, r2
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	370c      	adds	r7, #12
 800c702:	46bd      	mov	sp, r7
 800c704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c708:	4770      	bx	lr
 800c70a:	bf00      	nop
 800c70c:	20004608 	.word	0x20004608

0800c710 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c710:	b480      	push	{r7}
 800c712:	b083      	sub	sp, #12
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	4a05      	ldr	r2, [pc, #20]	; (800c730 <mem_to_ptr+0x20>)
 800c71c:	6812      	ldr	r2, [r2, #0]
 800c71e:	1a9b      	subs	r3, r3, r2
 800c720:	b29b      	uxth	r3, r3
}
 800c722:	4618      	mov	r0, r3
 800c724:	370c      	adds	r7, #12
 800c726:	46bd      	mov	sp, r7
 800c728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72c:	4770      	bx	lr
 800c72e:	bf00      	nop
 800c730:	20004608 	.word	0x20004608

0800c734 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c734:	b590      	push	{r4, r7, lr}
 800c736:	b085      	sub	sp, #20
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c73c:	4b45      	ldr	r3, [pc, #276]	; (800c854 <plug_holes+0x120>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	687a      	ldr	r2, [r7, #4]
 800c742:	429a      	cmp	r2, r3
 800c744:	d206      	bcs.n	800c754 <plug_holes+0x20>
 800c746:	4b44      	ldr	r3, [pc, #272]	; (800c858 <plug_holes+0x124>)
 800c748:	f240 12df 	movw	r2, #479	; 0x1df
 800c74c:	4943      	ldr	r1, [pc, #268]	; (800c85c <plug_holes+0x128>)
 800c74e:	4844      	ldr	r0, [pc, #272]	; (800c860 <plug_holes+0x12c>)
 800c750:	f00a fcfc 	bl	801714c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c754:	4b43      	ldr	r3, [pc, #268]	; (800c864 <plug_holes+0x130>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	687a      	ldr	r2, [r7, #4]
 800c75a:	429a      	cmp	r2, r3
 800c75c:	d306      	bcc.n	800c76c <plug_holes+0x38>
 800c75e:	4b3e      	ldr	r3, [pc, #248]	; (800c858 <plug_holes+0x124>)
 800c760:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c764:	4940      	ldr	r1, [pc, #256]	; (800c868 <plug_holes+0x134>)
 800c766:	483e      	ldr	r0, [pc, #248]	; (800c860 <plug_holes+0x12c>)
 800c768:	f00a fcf0 	bl	801714c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	791b      	ldrb	r3, [r3, #4]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d006      	beq.n	800c782 <plug_holes+0x4e>
 800c774:	4b38      	ldr	r3, [pc, #224]	; (800c858 <plug_holes+0x124>)
 800c776:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c77a:	493c      	ldr	r1, [pc, #240]	; (800c86c <plug_holes+0x138>)
 800c77c:	4838      	ldr	r0, [pc, #224]	; (800c860 <plug_holes+0x12c>)
 800c77e:	f00a fce5 	bl	801714c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	881b      	ldrh	r3, [r3, #0]
 800c786:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c78a:	d906      	bls.n	800c79a <plug_holes+0x66>
 800c78c:	4b32      	ldr	r3, [pc, #200]	; (800c858 <plug_holes+0x124>)
 800c78e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800c792:	4937      	ldr	r1, [pc, #220]	; (800c870 <plug_holes+0x13c>)
 800c794:	4832      	ldr	r0, [pc, #200]	; (800c860 <plug_holes+0x12c>)
 800c796:	f00a fcd9 	bl	801714c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	881b      	ldrh	r3, [r3, #0]
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f7ff ffa4 	bl	800c6ec <ptr_to_mem>
 800c7a4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c7a6:	687a      	ldr	r2, [r7, #4]
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	429a      	cmp	r2, r3
 800c7ac:	d024      	beq.n	800c7f8 <plug_holes+0xc4>
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	791b      	ldrb	r3, [r3, #4]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d120      	bne.n	800c7f8 <plug_holes+0xc4>
 800c7b6:	4b2b      	ldr	r3, [pc, #172]	; (800c864 <plug_holes+0x130>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	68fa      	ldr	r2, [r7, #12]
 800c7bc:	429a      	cmp	r2, r3
 800c7be:	d01b      	beq.n	800c7f8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c7c0:	4b2c      	ldr	r3, [pc, #176]	; (800c874 <plug_holes+0x140>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	68fa      	ldr	r2, [r7, #12]
 800c7c6:	429a      	cmp	r2, r3
 800c7c8:	d102      	bne.n	800c7d0 <plug_holes+0x9c>
      lfree = mem;
 800c7ca:	4a2a      	ldr	r2, [pc, #168]	; (800c874 <plug_holes+0x140>)
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	881a      	ldrh	r2, [r3, #0]
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	881b      	ldrh	r3, [r3, #0]
 800c7dc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c7e0:	d00a      	beq.n	800c7f8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	881b      	ldrh	r3, [r3, #0]
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f7ff ff80 	bl	800c6ec <ptr_to_mem>
 800c7ec:	4604      	mov	r4, r0
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f7ff ff8e 	bl	800c710 <mem_to_ptr>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	885b      	ldrh	r3, [r3, #2]
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f7ff ff75 	bl	800c6ec <ptr_to_mem>
 800c802:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c804:	68ba      	ldr	r2, [r7, #8]
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	429a      	cmp	r2, r3
 800c80a:	d01f      	beq.n	800c84c <plug_holes+0x118>
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	791b      	ldrb	r3, [r3, #4]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d11b      	bne.n	800c84c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c814:	4b17      	ldr	r3, [pc, #92]	; (800c874 <plug_holes+0x140>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	687a      	ldr	r2, [r7, #4]
 800c81a:	429a      	cmp	r2, r3
 800c81c:	d102      	bne.n	800c824 <plug_holes+0xf0>
      lfree = pmem;
 800c81e:	4a15      	ldr	r2, [pc, #84]	; (800c874 <plug_holes+0x140>)
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	881a      	ldrh	r2, [r3, #0]
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	881b      	ldrh	r3, [r3, #0]
 800c830:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c834:	d00a      	beq.n	800c84c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	881b      	ldrh	r3, [r3, #0]
 800c83a:	4618      	mov	r0, r3
 800c83c:	f7ff ff56 	bl	800c6ec <ptr_to_mem>
 800c840:	4604      	mov	r4, r0
 800c842:	68b8      	ldr	r0, [r7, #8]
 800c844:	f7ff ff64 	bl	800c710 <mem_to_ptr>
 800c848:	4603      	mov	r3, r0
 800c84a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c84c:	bf00      	nop
 800c84e:	3714      	adds	r7, #20
 800c850:	46bd      	mov	sp, r7
 800c852:	bd90      	pop	{r4, r7, pc}
 800c854:	20004608 	.word	0x20004608
 800c858:	08019174 	.word	0x08019174
 800c85c:	080191a4 	.word	0x080191a4
 800c860:	080191bc 	.word	0x080191bc
 800c864:	2000460c 	.word	0x2000460c
 800c868:	080191e4 	.word	0x080191e4
 800c86c:	08019200 	.word	0x08019200
 800c870:	0801921c 	.word	0x0801921c
 800c874:	20004614 	.word	0x20004614

0800c878 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b082      	sub	sp, #8
 800c87c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c87e:	4b1f      	ldr	r3, [pc, #124]	; (800c8fc <mem_init+0x84>)
 800c880:	3303      	adds	r3, #3
 800c882:	f023 0303 	bic.w	r3, r3, #3
 800c886:	461a      	mov	r2, r3
 800c888:	4b1d      	ldr	r3, [pc, #116]	; (800c900 <mem_init+0x88>)
 800c88a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c88c:	4b1c      	ldr	r3, [pc, #112]	; (800c900 <mem_init+0x88>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c898:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2200      	movs	r2, #0
 800c89e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c8a6:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800c8aa:	f7ff ff1f 	bl	800c6ec <ptr_to_mem>
 800c8ae:	4602      	mov	r2, r0
 800c8b0:	4b14      	ldr	r3, [pc, #80]	; (800c904 <mem_init+0x8c>)
 800c8b2:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800c8b4:	4b13      	ldr	r3, [pc, #76]	; (800c904 <mem_init+0x8c>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	2201      	movs	r2, #1
 800c8ba:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c8bc:	4b11      	ldr	r3, [pc, #68]	; (800c904 <mem_init+0x8c>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c8c4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c8c6:	4b0f      	ldr	r3, [pc, #60]	; (800c904 <mem_init+0x8c>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c8ce:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c8d0:	4b0b      	ldr	r3, [pc, #44]	; (800c900 <mem_init+0x88>)
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	4a0c      	ldr	r2, [pc, #48]	; (800c908 <mem_init+0x90>)
 800c8d6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800c8d8:	480c      	ldr	r0, [pc, #48]	; (800c90c <mem_init+0x94>)
 800c8da:	f00a fb47 	bl	8016f6c <sys_mutex_new>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d006      	beq.n	800c8f2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800c8e4:	4b0a      	ldr	r3, [pc, #40]	; (800c910 <mem_init+0x98>)
 800c8e6:	f240 221f 	movw	r2, #543	; 0x21f
 800c8ea:	490a      	ldr	r1, [pc, #40]	; (800c914 <mem_init+0x9c>)
 800c8ec:	480a      	ldr	r0, [pc, #40]	; (800c918 <mem_init+0xa0>)
 800c8ee:	f00a fc2d 	bl	801714c <iprintf>
  }
}
 800c8f2:	bf00      	nop
 800c8f4:	3708      	adds	r7, #8
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}
 800c8fa:	bf00      	nop
 800c8fc:	20007a08 	.word	0x20007a08
 800c900:	20004608 	.word	0x20004608
 800c904:	2000460c 	.word	0x2000460c
 800c908:	20004614 	.word	0x20004614
 800c90c:	20004610 	.word	0x20004610
 800c910:	08019174 	.word	0x08019174
 800c914:	08019248 	.word	0x08019248
 800c918:	080191bc 	.word	0x080191bc

0800c91c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b086      	sub	sp, #24
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f7ff fef3 	bl	800c710 <mem_to_ptr>
 800c92a:	4603      	mov	r3, r0
 800c92c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	881b      	ldrh	r3, [r3, #0]
 800c932:	4618      	mov	r0, r3
 800c934:	f7ff feda 	bl	800c6ec <ptr_to_mem>
 800c938:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	885b      	ldrh	r3, [r3, #2]
 800c93e:	4618      	mov	r0, r3
 800c940:	f7ff fed4 	bl	800c6ec <ptr_to_mem>
 800c944:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	881b      	ldrh	r3, [r3, #0]
 800c94a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c94e:	d818      	bhi.n	800c982 <mem_link_valid+0x66>
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	885b      	ldrh	r3, [r3, #2]
 800c954:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c958:	d813      	bhi.n	800c982 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c95e:	8afa      	ldrh	r2, [r7, #22]
 800c960:	429a      	cmp	r2, r3
 800c962:	d004      	beq.n	800c96e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	881b      	ldrh	r3, [r3, #0]
 800c968:	8afa      	ldrh	r2, [r7, #22]
 800c96a:	429a      	cmp	r2, r3
 800c96c:	d109      	bne.n	800c982 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c96e:	4b08      	ldr	r3, [pc, #32]	; (800c990 <mem_link_valid+0x74>)
 800c970:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c972:	693a      	ldr	r2, [r7, #16]
 800c974:	429a      	cmp	r2, r3
 800c976:	d006      	beq.n	800c986 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c978:	693b      	ldr	r3, [r7, #16]
 800c97a:	885b      	ldrh	r3, [r3, #2]
 800c97c:	8afa      	ldrh	r2, [r7, #22]
 800c97e:	429a      	cmp	r2, r3
 800c980:	d001      	beq.n	800c986 <mem_link_valid+0x6a>
    return 0;
 800c982:	2300      	movs	r3, #0
 800c984:	e000      	b.n	800c988 <mem_link_valid+0x6c>
  }
  return 1;
 800c986:	2301      	movs	r3, #1
}
 800c988:	4618      	mov	r0, r3
 800c98a:	3718      	adds	r7, #24
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd80      	pop	{r7, pc}
 800c990:	2000460c 	.word	0x2000460c

0800c994 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b088      	sub	sp, #32
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d070      	beq.n	800ca84 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f003 0303 	and.w	r3, r3, #3
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d00d      	beq.n	800c9c8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c9ac:	4b37      	ldr	r3, [pc, #220]	; (800ca8c <mem_free+0xf8>)
 800c9ae:	f240 2273 	movw	r2, #627	; 0x273
 800c9b2:	4937      	ldr	r1, [pc, #220]	; (800ca90 <mem_free+0xfc>)
 800c9b4:	4837      	ldr	r0, [pc, #220]	; (800ca94 <mem_free+0x100>)
 800c9b6:	f00a fbc9 	bl	801714c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c9ba:	f00a fb35 	bl	8017028 <sys_arch_protect>
 800c9be:	60f8      	str	r0, [r7, #12]
 800c9c0:	68f8      	ldr	r0, [r7, #12]
 800c9c2:	f00a fb3f 	bl	8017044 <sys_arch_unprotect>
    return;
 800c9c6:	e05e      	b.n	800ca86 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	3b08      	subs	r3, #8
 800c9cc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c9ce:	4b32      	ldr	r3, [pc, #200]	; (800ca98 <mem_free+0x104>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	69fa      	ldr	r2, [r7, #28]
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	d306      	bcc.n	800c9e6 <mem_free+0x52>
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f103 020c 	add.w	r2, r3, #12
 800c9de:	4b2f      	ldr	r3, [pc, #188]	; (800ca9c <mem_free+0x108>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	429a      	cmp	r2, r3
 800c9e4:	d90d      	bls.n	800ca02 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c9e6:	4b29      	ldr	r3, [pc, #164]	; (800ca8c <mem_free+0xf8>)
 800c9e8:	f240 227f 	movw	r2, #639	; 0x27f
 800c9ec:	492c      	ldr	r1, [pc, #176]	; (800caa0 <mem_free+0x10c>)
 800c9ee:	4829      	ldr	r0, [pc, #164]	; (800ca94 <mem_free+0x100>)
 800c9f0:	f00a fbac 	bl	801714c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c9f4:	f00a fb18 	bl	8017028 <sys_arch_protect>
 800c9f8:	6138      	str	r0, [r7, #16]
 800c9fa:	6938      	ldr	r0, [r7, #16]
 800c9fc:	f00a fb22 	bl	8017044 <sys_arch_unprotect>
    return;
 800ca00:	e041      	b.n	800ca86 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ca02:	4828      	ldr	r0, [pc, #160]	; (800caa4 <mem_free+0x110>)
 800ca04:	f00a face 	bl	8016fa4 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800ca08:	69fb      	ldr	r3, [r7, #28]
 800ca0a:	791b      	ldrb	r3, [r3, #4]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d110      	bne.n	800ca32 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800ca10:	4b1e      	ldr	r3, [pc, #120]	; (800ca8c <mem_free+0xf8>)
 800ca12:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800ca16:	4924      	ldr	r1, [pc, #144]	; (800caa8 <mem_free+0x114>)
 800ca18:	481e      	ldr	r0, [pc, #120]	; (800ca94 <mem_free+0x100>)
 800ca1a:	f00a fb97 	bl	801714c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ca1e:	4821      	ldr	r0, [pc, #132]	; (800caa4 <mem_free+0x110>)
 800ca20:	f00a facf 	bl	8016fc2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ca24:	f00a fb00 	bl	8017028 <sys_arch_protect>
 800ca28:	6178      	str	r0, [r7, #20]
 800ca2a:	6978      	ldr	r0, [r7, #20]
 800ca2c:	f00a fb0a 	bl	8017044 <sys_arch_unprotect>
    return;
 800ca30:	e029      	b.n	800ca86 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800ca32:	69f8      	ldr	r0, [r7, #28]
 800ca34:	f7ff ff72 	bl	800c91c <mem_link_valid>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d110      	bne.n	800ca60 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800ca3e:	4b13      	ldr	r3, [pc, #76]	; (800ca8c <mem_free+0xf8>)
 800ca40:	f240 2295 	movw	r2, #661	; 0x295
 800ca44:	4919      	ldr	r1, [pc, #100]	; (800caac <mem_free+0x118>)
 800ca46:	4813      	ldr	r0, [pc, #76]	; (800ca94 <mem_free+0x100>)
 800ca48:	f00a fb80 	bl	801714c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ca4c:	4815      	ldr	r0, [pc, #84]	; (800caa4 <mem_free+0x110>)
 800ca4e:	f00a fab8 	bl	8016fc2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ca52:	f00a fae9 	bl	8017028 <sys_arch_protect>
 800ca56:	61b8      	str	r0, [r7, #24]
 800ca58:	69b8      	ldr	r0, [r7, #24]
 800ca5a:	f00a faf3 	bl	8017044 <sys_arch_unprotect>
    return;
 800ca5e:	e012      	b.n	800ca86 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800ca60:	69fb      	ldr	r3, [r7, #28]
 800ca62:	2200      	movs	r2, #0
 800ca64:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800ca66:	4b12      	ldr	r3, [pc, #72]	; (800cab0 <mem_free+0x11c>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	69fa      	ldr	r2, [r7, #28]
 800ca6c:	429a      	cmp	r2, r3
 800ca6e:	d202      	bcs.n	800ca76 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800ca70:	4a0f      	ldr	r2, [pc, #60]	; (800cab0 <mem_free+0x11c>)
 800ca72:	69fb      	ldr	r3, [r7, #28]
 800ca74:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800ca76:	69f8      	ldr	r0, [r7, #28]
 800ca78:	f7ff fe5c 	bl	800c734 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ca7c:	4809      	ldr	r0, [pc, #36]	; (800caa4 <mem_free+0x110>)
 800ca7e:	f00a faa0 	bl	8016fc2 <sys_mutex_unlock>
 800ca82:	e000      	b.n	800ca86 <mem_free+0xf2>
    return;
 800ca84:	bf00      	nop
}
 800ca86:	3720      	adds	r7, #32
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd80      	pop	{r7, pc}
 800ca8c:	08019174 	.word	0x08019174
 800ca90:	08019264 	.word	0x08019264
 800ca94:	080191bc 	.word	0x080191bc
 800ca98:	20004608 	.word	0x20004608
 800ca9c:	2000460c 	.word	0x2000460c
 800caa0:	08019288 	.word	0x08019288
 800caa4:	20004610 	.word	0x20004610
 800caa8:	080192a4 	.word	0x080192a4
 800caac:	080192cc 	.word	0x080192cc
 800cab0:	20004614 	.word	0x20004614

0800cab4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b088      	sub	sp, #32
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
 800cabc:	460b      	mov	r3, r1
 800cabe:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800cac0:	887b      	ldrh	r3, [r7, #2]
 800cac2:	3303      	adds	r3, #3
 800cac4:	b29b      	uxth	r3, r3
 800cac6:	f023 0303 	bic.w	r3, r3, #3
 800caca:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800cacc:	8bfb      	ldrh	r3, [r7, #30]
 800cace:	2b0b      	cmp	r3, #11
 800cad0:	d801      	bhi.n	800cad6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800cad2:	230c      	movs	r3, #12
 800cad4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800cad6:	8bfb      	ldrh	r3, [r7, #30]
 800cad8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cadc:	d803      	bhi.n	800cae6 <mem_trim+0x32>
 800cade:	8bfa      	ldrh	r2, [r7, #30]
 800cae0:	887b      	ldrh	r3, [r7, #2]
 800cae2:	429a      	cmp	r2, r3
 800cae4:	d201      	bcs.n	800caea <mem_trim+0x36>
    return NULL;
 800cae6:	2300      	movs	r3, #0
 800cae8:	e0d8      	b.n	800cc9c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800caea:	4b6e      	ldr	r3, [pc, #440]	; (800cca4 <mem_trim+0x1f0>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	687a      	ldr	r2, [r7, #4]
 800caf0:	429a      	cmp	r2, r3
 800caf2:	d304      	bcc.n	800cafe <mem_trim+0x4a>
 800caf4:	4b6c      	ldr	r3, [pc, #432]	; (800cca8 <mem_trim+0x1f4>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	687a      	ldr	r2, [r7, #4]
 800cafa:	429a      	cmp	r2, r3
 800cafc:	d306      	bcc.n	800cb0c <mem_trim+0x58>
 800cafe:	4b6b      	ldr	r3, [pc, #428]	; (800ccac <mem_trim+0x1f8>)
 800cb00:	f240 22d2 	movw	r2, #722	; 0x2d2
 800cb04:	496a      	ldr	r1, [pc, #424]	; (800ccb0 <mem_trim+0x1fc>)
 800cb06:	486b      	ldr	r0, [pc, #428]	; (800ccb4 <mem_trim+0x200>)
 800cb08:	f00a fb20 	bl	801714c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800cb0c:	4b65      	ldr	r3, [pc, #404]	; (800cca4 <mem_trim+0x1f0>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	687a      	ldr	r2, [r7, #4]
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d304      	bcc.n	800cb20 <mem_trim+0x6c>
 800cb16:	4b64      	ldr	r3, [pc, #400]	; (800cca8 <mem_trim+0x1f4>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	687a      	ldr	r2, [r7, #4]
 800cb1c:	429a      	cmp	r2, r3
 800cb1e:	d307      	bcc.n	800cb30 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cb20:	f00a fa82 	bl	8017028 <sys_arch_protect>
 800cb24:	60b8      	str	r0, [r7, #8]
 800cb26:	68b8      	ldr	r0, [r7, #8]
 800cb28:	f00a fa8c 	bl	8017044 <sys_arch_unprotect>
    return rmem;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	e0b5      	b.n	800cc9c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	3b08      	subs	r3, #8
 800cb34:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800cb36:	69b8      	ldr	r0, [r7, #24]
 800cb38:	f7ff fdea 	bl	800c710 <mem_to_ptr>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800cb40:	69bb      	ldr	r3, [r7, #24]
 800cb42:	881a      	ldrh	r2, [r3, #0]
 800cb44:	8afb      	ldrh	r3, [r7, #22]
 800cb46:	1ad3      	subs	r3, r2, r3
 800cb48:	b29b      	uxth	r3, r3
 800cb4a:	3b08      	subs	r3, #8
 800cb4c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800cb4e:	8bfa      	ldrh	r2, [r7, #30]
 800cb50:	8abb      	ldrh	r3, [r7, #20]
 800cb52:	429a      	cmp	r2, r3
 800cb54:	d906      	bls.n	800cb64 <mem_trim+0xb0>
 800cb56:	4b55      	ldr	r3, [pc, #340]	; (800ccac <mem_trim+0x1f8>)
 800cb58:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800cb5c:	4956      	ldr	r1, [pc, #344]	; (800ccb8 <mem_trim+0x204>)
 800cb5e:	4855      	ldr	r0, [pc, #340]	; (800ccb4 <mem_trim+0x200>)
 800cb60:	f00a faf4 	bl	801714c <iprintf>
  if (newsize > size) {
 800cb64:	8bfa      	ldrh	r2, [r7, #30]
 800cb66:	8abb      	ldrh	r3, [r7, #20]
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d901      	bls.n	800cb70 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	e095      	b.n	800cc9c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800cb70:	8bfa      	ldrh	r2, [r7, #30]
 800cb72:	8abb      	ldrh	r3, [r7, #20]
 800cb74:	429a      	cmp	r2, r3
 800cb76:	d101      	bne.n	800cb7c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	e08f      	b.n	800cc9c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800cb7c:	484f      	ldr	r0, [pc, #316]	; (800ccbc <mem_trim+0x208>)
 800cb7e:	f00a fa11 	bl	8016fa4 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800cb82:	69bb      	ldr	r3, [r7, #24]
 800cb84:	881b      	ldrh	r3, [r3, #0]
 800cb86:	4618      	mov	r0, r3
 800cb88:	f7ff fdb0 	bl	800c6ec <ptr_to_mem>
 800cb8c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800cb8e:	693b      	ldr	r3, [r7, #16]
 800cb90:	791b      	ldrb	r3, [r3, #4]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d13f      	bne.n	800cc16 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cb96:	69bb      	ldr	r3, [r7, #24]
 800cb98:	881b      	ldrh	r3, [r3, #0]
 800cb9a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cb9e:	d106      	bne.n	800cbae <mem_trim+0xfa>
 800cba0:	4b42      	ldr	r3, [pc, #264]	; (800ccac <mem_trim+0x1f8>)
 800cba2:	f240 22f5 	movw	r2, #757	; 0x2f5
 800cba6:	4946      	ldr	r1, [pc, #280]	; (800ccc0 <mem_trim+0x20c>)
 800cba8:	4842      	ldr	r0, [pc, #264]	; (800ccb4 <mem_trim+0x200>)
 800cbaa:	f00a facf 	bl	801714c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	881b      	ldrh	r3, [r3, #0]
 800cbb2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cbb4:	8afa      	ldrh	r2, [r7, #22]
 800cbb6:	8bfb      	ldrh	r3, [r7, #30]
 800cbb8:	4413      	add	r3, r2
 800cbba:	b29b      	uxth	r3, r3
 800cbbc:	3308      	adds	r3, #8
 800cbbe:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800cbc0:	4b40      	ldr	r3, [pc, #256]	; (800ccc4 <mem_trim+0x210>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	693a      	ldr	r2, [r7, #16]
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	d106      	bne.n	800cbd8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800cbca:	89fb      	ldrh	r3, [r7, #14]
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f7ff fd8d 	bl	800c6ec <ptr_to_mem>
 800cbd2:	4602      	mov	r2, r0
 800cbd4:	4b3b      	ldr	r3, [pc, #236]	; (800ccc4 <mem_trim+0x210>)
 800cbd6:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800cbd8:	89fb      	ldrh	r3, [r7, #14]
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f7ff fd86 	bl	800c6ec <ptr_to_mem>
 800cbe0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800cbe8:	693b      	ldr	r3, [r7, #16]
 800cbea:	89ba      	ldrh	r2, [r7, #12]
 800cbec:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800cbee:	693b      	ldr	r3, [r7, #16]
 800cbf0:	8afa      	ldrh	r2, [r7, #22]
 800cbf2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800cbf4:	69bb      	ldr	r3, [r7, #24]
 800cbf6:	89fa      	ldrh	r2, [r7, #14]
 800cbf8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cbfa:	693b      	ldr	r3, [r7, #16]
 800cbfc:	881b      	ldrh	r3, [r3, #0]
 800cbfe:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cc02:	d047      	beq.n	800cc94 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cc04:	693b      	ldr	r3, [r7, #16]
 800cc06:	881b      	ldrh	r3, [r3, #0]
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f7ff fd6f 	bl	800c6ec <ptr_to_mem>
 800cc0e:	4602      	mov	r2, r0
 800cc10:	89fb      	ldrh	r3, [r7, #14]
 800cc12:	8053      	strh	r3, [r2, #2]
 800cc14:	e03e      	b.n	800cc94 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800cc16:	8bfb      	ldrh	r3, [r7, #30]
 800cc18:	f103 0214 	add.w	r2, r3, #20
 800cc1c:	8abb      	ldrh	r3, [r7, #20]
 800cc1e:	429a      	cmp	r2, r3
 800cc20:	d838      	bhi.n	800cc94 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cc22:	8afa      	ldrh	r2, [r7, #22]
 800cc24:	8bfb      	ldrh	r3, [r7, #30]
 800cc26:	4413      	add	r3, r2
 800cc28:	b29b      	uxth	r3, r3
 800cc2a:	3308      	adds	r3, #8
 800cc2c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cc2e:	69bb      	ldr	r3, [r7, #24]
 800cc30:	881b      	ldrh	r3, [r3, #0]
 800cc32:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cc36:	d106      	bne.n	800cc46 <mem_trim+0x192>
 800cc38:	4b1c      	ldr	r3, [pc, #112]	; (800ccac <mem_trim+0x1f8>)
 800cc3a:	f240 3216 	movw	r2, #790	; 0x316
 800cc3e:	4920      	ldr	r1, [pc, #128]	; (800ccc0 <mem_trim+0x20c>)
 800cc40:	481c      	ldr	r0, [pc, #112]	; (800ccb4 <mem_trim+0x200>)
 800cc42:	f00a fa83 	bl	801714c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800cc46:	89fb      	ldrh	r3, [r7, #14]
 800cc48:	4618      	mov	r0, r3
 800cc4a:	f7ff fd4f 	bl	800c6ec <ptr_to_mem>
 800cc4e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800cc50:	4b1c      	ldr	r3, [pc, #112]	; (800ccc4 <mem_trim+0x210>)
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	693a      	ldr	r2, [r7, #16]
 800cc56:	429a      	cmp	r2, r3
 800cc58:	d202      	bcs.n	800cc60 <mem_trim+0x1ac>
      lfree = mem2;
 800cc5a:	4a1a      	ldr	r2, [pc, #104]	; (800ccc4 <mem_trim+0x210>)
 800cc5c:	693b      	ldr	r3, [r7, #16]
 800cc5e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800cc60:	693b      	ldr	r3, [r7, #16]
 800cc62:	2200      	movs	r2, #0
 800cc64:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800cc66:	69bb      	ldr	r3, [r7, #24]
 800cc68:	881a      	ldrh	r2, [r3, #0]
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800cc6e:	693b      	ldr	r3, [r7, #16]
 800cc70:	8afa      	ldrh	r2, [r7, #22]
 800cc72:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800cc74:	69bb      	ldr	r3, [r7, #24]
 800cc76:	89fa      	ldrh	r2, [r7, #14]
 800cc78:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cc7a:	693b      	ldr	r3, [r7, #16]
 800cc7c:	881b      	ldrh	r3, [r3, #0]
 800cc7e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cc82:	d007      	beq.n	800cc94 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cc84:	693b      	ldr	r3, [r7, #16]
 800cc86:	881b      	ldrh	r3, [r3, #0]
 800cc88:	4618      	mov	r0, r3
 800cc8a:	f7ff fd2f 	bl	800c6ec <ptr_to_mem>
 800cc8e:	4602      	mov	r2, r0
 800cc90:	89fb      	ldrh	r3, [r7, #14]
 800cc92:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800cc94:	4809      	ldr	r0, [pc, #36]	; (800ccbc <mem_trim+0x208>)
 800cc96:	f00a f994 	bl	8016fc2 <sys_mutex_unlock>
  return rmem;
 800cc9a:	687b      	ldr	r3, [r7, #4]
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3720      	adds	r7, #32
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}
 800cca4:	20004608 	.word	0x20004608
 800cca8:	2000460c 	.word	0x2000460c
 800ccac:	08019174 	.word	0x08019174
 800ccb0:	08019300 	.word	0x08019300
 800ccb4:	080191bc 	.word	0x080191bc
 800ccb8:	08019318 	.word	0x08019318
 800ccbc:	20004610 	.word	0x20004610
 800ccc0:	08019338 	.word	0x08019338
 800ccc4:	20004614 	.word	0x20004614

0800ccc8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b088      	sub	sp, #32
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	4603      	mov	r3, r0
 800ccd0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800ccd2:	88fb      	ldrh	r3, [r7, #6]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d101      	bne.n	800ccdc <mem_malloc+0x14>
    return NULL;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	e0e2      	b.n	800cea2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800ccdc:	88fb      	ldrh	r3, [r7, #6]
 800ccde:	3303      	adds	r3, #3
 800cce0:	b29b      	uxth	r3, r3
 800cce2:	f023 0303 	bic.w	r3, r3, #3
 800cce6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800cce8:	8bbb      	ldrh	r3, [r7, #28]
 800ccea:	2b0b      	cmp	r3, #11
 800ccec:	d801      	bhi.n	800ccf2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800ccee:	230c      	movs	r3, #12
 800ccf0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800ccf2:	8bbb      	ldrh	r3, [r7, #28]
 800ccf4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ccf8:	d803      	bhi.n	800cd02 <mem_malloc+0x3a>
 800ccfa:	8bba      	ldrh	r2, [r7, #28]
 800ccfc:	88fb      	ldrh	r3, [r7, #6]
 800ccfe:	429a      	cmp	r2, r3
 800cd00:	d201      	bcs.n	800cd06 <mem_malloc+0x3e>
    return NULL;
 800cd02:	2300      	movs	r3, #0
 800cd04:	e0cd      	b.n	800cea2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800cd06:	4869      	ldr	r0, [pc, #420]	; (800ceac <mem_malloc+0x1e4>)
 800cd08:	f00a f94c 	bl	8016fa4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cd0c:	4b68      	ldr	r3, [pc, #416]	; (800ceb0 <mem_malloc+0x1e8>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	4618      	mov	r0, r3
 800cd12:	f7ff fcfd 	bl	800c710 <mem_to_ptr>
 800cd16:	4603      	mov	r3, r0
 800cd18:	83fb      	strh	r3, [r7, #30]
 800cd1a:	e0b7      	b.n	800ce8c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800cd1c:	8bfb      	ldrh	r3, [r7, #30]
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f7ff fce4 	bl	800c6ec <ptr_to_mem>
 800cd24:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	791b      	ldrb	r3, [r3, #4]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	f040 80a7 	bne.w	800ce7e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	881b      	ldrh	r3, [r3, #0]
 800cd34:	461a      	mov	r2, r3
 800cd36:	8bfb      	ldrh	r3, [r7, #30]
 800cd38:	1ad3      	subs	r3, r2, r3
 800cd3a:	f1a3 0208 	sub.w	r2, r3, #8
 800cd3e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800cd40:	429a      	cmp	r2, r3
 800cd42:	f0c0 809c 	bcc.w	800ce7e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	881b      	ldrh	r3, [r3, #0]
 800cd4a:	461a      	mov	r2, r3
 800cd4c:	8bfb      	ldrh	r3, [r7, #30]
 800cd4e:	1ad3      	subs	r3, r2, r3
 800cd50:	f1a3 0208 	sub.w	r2, r3, #8
 800cd54:	8bbb      	ldrh	r3, [r7, #28]
 800cd56:	3314      	adds	r3, #20
 800cd58:	429a      	cmp	r2, r3
 800cd5a:	d333      	bcc.n	800cdc4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800cd5c:	8bfa      	ldrh	r2, [r7, #30]
 800cd5e:	8bbb      	ldrh	r3, [r7, #28]
 800cd60:	4413      	add	r3, r2
 800cd62:	b29b      	uxth	r3, r3
 800cd64:	3308      	adds	r3, #8
 800cd66:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800cd68:	8a7b      	ldrh	r3, [r7, #18]
 800cd6a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cd6e:	d106      	bne.n	800cd7e <mem_malloc+0xb6>
 800cd70:	4b50      	ldr	r3, [pc, #320]	; (800ceb4 <mem_malloc+0x1ec>)
 800cd72:	f240 3287 	movw	r2, #903	; 0x387
 800cd76:	4950      	ldr	r1, [pc, #320]	; (800ceb8 <mem_malloc+0x1f0>)
 800cd78:	4850      	ldr	r0, [pc, #320]	; (800cebc <mem_malloc+0x1f4>)
 800cd7a:	f00a f9e7 	bl	801714c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800cd7e:	8a7b      	ldrh	r3, [r7, #18]
 800cd80:	4618      	mov	r0, r3
 800cd82:	f7ff fcb3 	bl	800c6ec <ptr_to_mem>
 800cd86:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800cd8e:	697b      	ldr	r3, [r7, #20]
 800cd90:	881a      	ldrh	r2, [r3, #0]
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	8bfa      	ldrh	r2, [r7, #30]
 800cd9a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	8a7a      	ldrh	r2, [r7, #18]
 800cda0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	2201      	movs	r2, #1
 800cda6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	881b      	ldrh	r3, [r3, #0]
 800cdac:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cdb0:	d00b      	beq.n	800cdca <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	881b      	ldrh	r3, [r3, #0]
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f7ff fc98 	bl	800c6ec <ptr_to_mem>
 800cdbc:	4602      	mov	r2, r0
 800cdbe:	8a7b      	ldrh	r3, [r7, #18]
 800cdc0:	8053      	strh	r3, [r2, #2]
 800cdc2:	e002      	b.n	800cdca <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	2201      	movs	r2, #1
 800cdc8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800cdca:	4b39      	ldr	r3, [pc, #228]	; (800ceb0 <mem_malloc+0x1e8>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	697a      	ldr	r2, [r7, #20]
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	d127      	bne.n	800ce24 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800cdd4:	4b36      	ldr	r3, [pc, #216]	; (800ceb0 <mem_malloc+0x1e8>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800cdda:	e005      	b.n	800cde8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800cddc:	69bb      	ldr	r3, [r7, #24]
 800cdde:	881b      	ldrh	r3, [r3, #0]
 800cde0:	4618      	mov	r0, r3
 800cde2:	f7ff fc83 	bl	800c6ec <ptr_to_mem>
 800cde6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800cde8:	69bb      	ldr	r3, [r7, #24]
 800cdea:	791b      	ldrb	r3, [r3, #4]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d004      	beq.n	800cdfa <mem_malloc+0x132>
 800cdf0:	4b33      	ldr	r3, [pc, #204]	; (800cec0 <mem_malloc+0x1f8>)
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	69ba      	ldr	r2, [r7, #24]
 800cdf6:	429a      	cmp	r2, r3
 800cdf8:	d1f0      	bne.n	800cddc <mem_malloc+0x114>
          }
          lfree = cur;
 800cdfa:	4a2d      	ldr	r2, [pc, #180]	; (800ceb0 <mem_malloc+0x1e8>)
 800cdfc:	69bb      	ldr	r3, [r7, #24]
 800cdfe:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800ce00:	4b2b      	ldr	r3, [pc, #172]	; (800ceb0 <mem_malloc+0x1e8>)
 800ce02:	681a      	ldr	r2, [r3, #0]
 800ce04:	4b2e      	ldr	r3, [pc, #184]	; (800cec0 <mem_malloc+0x1f8>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d00b      	beq.n	800ce24 <mem_malloc+0x15c>
 800ce0c:	4b28      	ldr	r3, [pc, #160]	; (800ceb0 <mem_malloc+0x1e8>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	791b      	ldrb	r3, [r3, #4]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d006      	beq.n	800ce24 <mem_malloc+0x15c>
 800ce16:	4b27      	ldr	r3, [pc, #156]	; (800ceb4 <mem_malloc+0x1ec>)
 800ce18:	f240 32b5 	movw	r2, #949	; 0x3b5
 800ce1c:	4929      	ldr	r1, [pc, #164]	; (800cec4 <mem_malloc+0x1fc>)
 800ce1e:	4827      	ldr	r0, [pc, #156]	; (800cebc <mem_malloc+0x1f4>)
 800ce20:	f00a f994 	bl	801714c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800ce24:	4821      	ldr	r0, [pc, #132]	; (800ceac <mem_malloc+0x1e4>)
 800ce26:	f00a f8cc 	bl	8016fc2 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800ce2a:	8bba      	ldrh	r2, [r7, #28]
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	4413      	add	r3, r2
 800ce30:	3308      	adds	r3, #8
 800ce32:	4a23      	ldr	r2, [pc, #140]	; (800cec0 <mem_malloc+0x1f8>)
 800ce34:	6812      	ldr	r2, [r2, #0]
 800ce36:	4293      	cmp	r3, r2
 800ce38:	d906      	bls.n	800ce48 <mem_malloc+0x180>
 800ce3a:	4b1e      	ldr	r3, [pc, #120]	; (800ceb4 <mem_malloc+0x1ec>)
 800ce3c:	f240 32ba 	movw	r2, #954	; 0x3ba
 800ce40:	4921      	ldr	r1, [pc, #132]	; (800cec8 <mem_malloc+0x200>)
 800ce42:	481e      	ldr	r0, [pc, #120]	; (800cebc <mem_malloc+0x1f4>)
 800ce44:	f00a f982 	bl	801714c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	f003 0303 	and.w	r3, r3, #3
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d006      	beq.n	800ce60 <mem_malloc+0x198>
 800ce52:	4b18      	ldr	r3, [pc, #96]	; (800ceb4 <mem_malloc+0x1ec>)
 800ce54:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800ce58:	491c      	ldr	r1, [pc, #112]	; (800cecc <mem_malloc+0x204>)
 800ce5a:	4818      	ldr	r0, [pc, #96]	; (800cebc <mem_malloc+0x1f4>)
 800ce5c:	f00a f976 	bl	801714c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	f003 0303 	and.w	r3, r3, #3
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d006      	beq.n	800ce78 <mem_malloc+0x1b0>
 800ce6a:	4b12      	ldr	r3, [pc, #72]	; (800ceb4 <mem_malloc+0x1ec>)
 800ce6c:	f240 32be 	movw	r2, #958	; 0x3be
 800ce70:	4917      	ldr	r1, [pc, #92]	; (800ced0 <mem_malloc+0x208>)
 800ce72:	4812      	ldr	r0, [pc, #72]	; (800cebc <mem_malloc+0x1f4>)
 800ce74:	f00a f96a 	bl	801714c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800ce78:	697b      	ldr	r3, [r7, #20]
 800ce7a:	3308      	adds	r3, #8
 800ce7c:	e011      	b.n	800cea2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800ce7e:	8bfb      	ldrh	r3, [r7, #30]
 800ce80:	4618      	mov	r0, r3
 800ce82:	f7ff fc33 	bl	800c6ec <ptr_to_mem>
 800ce86:	4603      	mov	r3, r0
 800ce88:	881b      	ldrh	r3, [r3, #0]
 800ce8a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ce8c:	8bfa      	ldrh	r2, [r7, #30]
 800ce8e:	8bbb      	ldrh	r3, [r7, #28]
 800ce90:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 800ce94:	429a      	cmp	r2, r3
 800ce96:	f4ff af41 	bcc.w	800cd1c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800ce9a:	4804      	ldr	r0, [pc, #16]	; (800ceac <mem_malloc+0x1e4>)
 800ce9c:	f00a f891 	bl	8016fc2 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800cea0:	2300      	movs	r3, #0
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	3720      	adds	r7, #32
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}
 800ceaa:	bf00      	nop
 800ceac:	20004610 	.word	0x20004610
 800ceb0:	20004614 	.word	0x20004614
 800ceb4:	08019174 	.word	0x08019174
 800ceb8:	08019338 	.word	0x08019338
 800cebc:	080191bc 	.word	0x080191bc
 800cec0:	2000460c 	.word	0x2000460c
 800cec4:	0801934c 	.word	0x0801934c
 800cec8:	08019368 	.word	0x08019368
 800cecc:	08019398 	.word	0x08019398
 800ced0:	080193c8 	.word	0x080193c8

0800ced4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800ced4:	b480      	push	{r7}
 800ced6:	b085      	sub	sp, #20
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	689b      	ldr	r3, [r3, #8]
 800cee0:	2200      	movs	r2, #0
 800cee2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	685b      	ldr	r3, [r3, #4]
 800cee8:	3303      	adds	r3, #3
 800ceea:	f023 0303 	bic.w	r3, r3, #3
 800ceee:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800cef0:	2300      	movs	r3, #0
 800cef2:	60fb      	str	r3, [r7, #12]
 800cef4:	e011      	b.n	800cf1a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	689b      	ldr	r3, [r3, #8]
 800cefa:	681a      	ldr	r2, [r3, #0]
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	689b      	ldr	r3, [r3, #8]
 800cf04:	68ba      	ldr	r2, [r7, #8]
 800cf06:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	881b      	ldrh	r3, [r3, #0]
 800cf0c:	461a      	mov	r2, r3
 800cf0e:	68bb      	ldr	r3, [r7, #8]
 800cf10:	4413      	add	r3, r2
 800cf12:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	3301      	adds	r3, #1
 800cf18:	60fb      	str	r3, [r7, #12]
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	885b      	ldrh	r3, [r3, #2]
 800cf1e:	461a      	mov	r2, r3
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	4293      	cmp	r3, r2
 800cf24:	dbe7      	blt.n	800cef6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800cf26:	bf00      	nop
 800cf28:	3714      	adds	r7, #20
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf30:	4770      	bx	lr
	...

0800cf34 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b082      	sub	sp, #8
 800cf38:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	80fb      	strh	r3, [r7, #6]
 800cf3e:	e009      	b.n	800cf54 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800cf40:	88fb      	ldrh	r3, [r7, #6]
 800cf42:	4a08      	ldr	r2, [pc, #32]	; (800cf64 <memp_init+0x30>)
 800cf44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f7ff ffc3 	bl	800ced4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cf4e:	88fb      	ldrh	r3, [r7, #6]
 800cf50:	3301      	adds	r3, #1
 800cf52:	80fb      	strh	r3, [r7, #6]
 800cf54:	88fb      	ldrh	r3, [r7, #6]
 800cf56:	2b0b      	cmp	r3, #11
 800cf58:	d9f2      	bls.n	800cf40 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800cf5a:	bf00      	nop
 800cf5c:	3708      	adds	r7, #8
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}
 800cf62:	bf00      	nop
 800cf64:	0801b8a8 	.word	0x0801b8a8

0800cf68 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b084      	sub	sp, #16
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800cf70:	f00a f85a 	bl	8017028 <sys_arch_protect>
 800cf74:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	689b      	ldr	r3, [r3, #8]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800cf7e:	68bb      	ldr	r3, [r7, #8]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d015      	beq.n	800cfb0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	689b      	ldr	r3, [r3, #8]
 800cf88:	68ba      	ldr	r2, [r7, #8]
 800cf8a:	6812      	ldr	r2, [r2, #0]
 800cf8c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	f003 0303 	and.w	r3, r3, #3
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d006      	beq.n	800cfa6 <do_memp_malloc_pool+0x3e>
 800cf98:	4b09      	ldr	r3, [pc, #36]	; (800cfc0 <do_memp_malloc_pool+0x58>)
 800cf9a:	f240 1219 	movw	r2, #281	; 0x119
 800cf9e:	4909      	ldr	r1, [pc, #36]	; (800cfc4 <do_memp_malloc_pool+0x5c>)
 800cfa0:	4809      	ldr	r0, [pc, #36]	; (800cfc8 <do_memp_malloc_pool+0x60>)
 800cfa2:	f00a f8d3 	bl	801714c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800cfa6:	68f8      	ldr	r0, [r7, #12]
 800cfa8:	f00a f84c 	bl	8017044 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	e003      	b.n	800cfb8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800cfb0:	68f8      	ldr	r0, [r7, #12]
 800cfb2:	f00a f847 	bl	8017044 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800cfb6:	2300      	movs	r3, #0
}
 800cfb8:	4618      	mov	r0, r3
 800cfba:	3710      	adds	r7, #16
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}
 800cfc0:	080193ec 	.word	0x080193ec
 800cfc4:	0801941c 	.word	0x0801941c
 800cfc8:	08019440 	.word	0x08019440

0800cfcc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b084      	sub	sp, #16
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800cfd6:	79fb      	ldrb	r3, [r7, #7]
 800cfd8:	2b0b      	cmp	r3, #11
 800cfda:	d908      	bls.n	800cfee <memp_malloc+0x22>
 800cfdc:	4b0a      	ldr	r3, [pc, #40]	; (800d008 <memp_malloc+0x3c>)
 800cfde:	f240 1257 	movw	r2, #343	; 0x157
 800cfe2:	490a      	ldr	r1, [pc, #40]	; (800d00c <memp_malloc+0x40>)
 800cfe4:	480a      	ldr	r0, [pc, #40]	; (800d010 <memp_malloc+0x44>)
 800cfe6:	f00a f8b1 	bl	801714c <iprintf>
 800cfea:	2300      	movs	r3, #0
 800cfec:	e008      	b.n	800d000 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800cfee:	79fb      	ldrb	r3, [r7, #7]
 800cff0:	4a08      	ldr	r2, [pc, #32]	; (800d014 <memp_malloc+0x48>)
 800cff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cff6:	4618      	mov	r0, r3
 800cff8:	f7ff ffb6 	bl	800cf68 <do_memp_malloc_pool>
 800cffc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800cffe:	68fb      	ldr	r3, [r7, #12]
}
 800d000:	4618      	mov	r0, r3
 800d002:	3710      	adds	r7, #16
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}
 800d008:	080193ec 	.word	0x080193ec
 800d00c:	0801947c 	.word	0x0801947c
 800d010:	08019440 	.word	0x08019440
 800d014:	0801b8a8 	.word	0x0801b8a8

0800d018 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b084      	sub	sp, #16
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
 800d020:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	f003 0303 	and.w	r3, r3, #3
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d006      	beq.n	800d03a <do_memp_free_pool+0x22>
 800d02c:	4b0d      	ldr	r3, [pc, #52]	; (800d064 <do_memp_free_pool+0x4c>)
 800d02e:	f240 126d 	movw	r2, #365	; 0x16d
 800d032:	490d      	ldr	r1, [pc, #52]	; (800d068 <do_memp_free_pool+0x50>)
 800d034:	480d      	ldr	r0, [pc, #52]	; (800d06c <do_memp_free_pool+0x54>)
 800d036:	f00a f889 	bl	801714c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800d03e:	f009 fff3 	bl	8017028 <sys_arch_protect>
 800d042:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	689b      	ldr	r3, [r3, #8]
 800d048:	681a      	ldr	r2, [r3, #0]
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	689b      	ldr	r3, [r3, #8]
 800d052:	68fa      	ldr	r2, [r7, #12]
 800d054:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800d056:	68b8      	ldr	r0, [r7, #8]
 800d058:	f009 fff4 	bl	8017044 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800d05c:	bf00      	nop
 800d05e:	3710      	adds	r7, #16
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}
 800d064:	080193ec 	.word	0x080193ec
 800d068:	0801949c 	.word	0x0801949c
 800d06c:	08019440 	.word	0x08019440

0800d070 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b082      	sub	sp, #8
 800d074:	af00      	add	r7, sp, #0
 800d076:	4603      	mov	r3, r0
 800d078:	6039      	str	r1, [r7, #0]
 800d07a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d07c:	79fb      	ldrb	r3, [r7, #7]
 800d07e:	2b0b      	cmp	r3, #11
 800d080:	d907      	bls.n	800d092 <memp_free+0x22>
 800d082:	4b0c      	ldr	r3, [pc, #48]	; (800d0b4 <memp_free+0x44>)
 800d084:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800d088:	490b      	ldr	r1, [pc, #44]	; (800d0b8 <memp_free+0x48>)
 800d08a:	480c      	ldr	r0, [pc, #48]	; (800d0bc <memp_free+0x4c>)
 800d08c:	f00a f85e 	bl	801714c <iprintf>
 800d090:	e00c      	b.n	800d0ac <memp_free+0x3c>

  if (mem == NULL) {
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d008      	beq.n	800d0aa <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d098:	79fb      	ldrb	r3, [r7, #7]
 800d09a:	4a09      	ldr	r2, [pc, #36]	; (800d0c0 <memp_free+0x50>)
 800d09c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0a0:	6839      	ldr	r1, [r7, #0]
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f7ff ffb8 	bl	800d018 <do_memp_free_pool>
 800d0a8:	e000      	b.n	800d0ac <memp_free+0x3c>
    return;
 800d0aa:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d0ac:	3708      	adds	r7, #8
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}
 800d0b2:	bf00      	nop
 800d0b4:	080193ec 	.word	0x080193ec
 800d0b8:	080194bc 	.word	0x080194bc
 800d0bc:	08019440 	.word	0x08019440
 800d0c0:	0801b8a8 	.word	0x0801b8a8

0800d0c4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d0c4:	b480      	push	{r7}
 800d0c6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d0c8:	bf00      	nop
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d0:	4770      	bx	lr
	...

0800d0d4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b086      	sub	sp, #24
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	60f8      	str	r0, [r7, #12]
 800d0dc:	60b9      	str	r1, [r7, #8]
 800d0de:	607a      	str	r2, [r7, #4]
 800d0e0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d108      	bne.n	800d0fa <netif_add+0x26>
 800d0e8:	4b57      	ldr	r3, [pc, #348]	; (800d248 <netif_add+0x174>)
 800d0ea:	f240 1227 	movw	r2, #295	; 0x127
 800d0ee:	4957      	ldr	r1, [pc, #348]	; (800d24c <netif_add+0x178>)
 800d0f0:	4857      	ldr	r0, [pc, #348]	; (800d250 <netif_add+0x17c>)
 800d0f2:	f00a f82b 	bl	801714c <iprintf>
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	e0a2      	b.n	800d240 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d108      	bne.n	800d112 <netif_add+0x3e>
 800d100:	4b51      	ldr	r3, [pc, #324]	; (800d248 <netif_add+0x174>)
 800d102:	f44f 7294 	mov.w	r2, #296	; 0x128
 800d106:	4953      	ldr	r1, [pc, #332]	; (800d254 <netif_add+0x180>)
 800d108:	4851      	ldr	r0, [pc, #324]	; (800d250 <netif_add+0x17c>)
 800d10a:	f00a f81f 	bl	801714c <iprintf>
 800d10e:	2300      	movs	r3, #0
 800d110:	e096      	b.n	800d240 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d112:	68bb      	ldr	r3, [r7, #8]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d101      	bne.n	800d11c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d118:	4b4f      	ldr	r3, [pc, #316]	; (800d258 <netif_add+0x184>)
 800d11a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d101      	bne.n	800d126 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d122:	4b4d      	ldr	r3, [pc, #308]	; (800d258 <netif_add+0x184>)
 800d124:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d101      	bne.n	800d130 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d12c:	4b4a      	ldr	r3, [pc, #296]	; (800d258 <netif_add+0x184>)
 800d12e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	2200      	movs	r2, #0
 800d134:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	2200      	movs	r2, #0
 800d13a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	2200      	movs	r2, #0
 800d140:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	4a45      	ldr	r2, [pc, #276]	; (800d25c <netif_add+0x188>)
 800d146:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	2200      	movs	r2, #0
 800d14c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	2200      	movs	r2, #0
 800d152:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	2200      	movs	r2, #0
 800d15a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	6a3a      	ldr	r2, [r7, #32]
 800d160:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d162:	4b3f      	ldr	r3, [pc, #252]	; (800d260 <netif_add+0x18c>)
 800d164:	781a      	ldrb	r2, [r3, #0]
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d170:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	687a      	ldr	r2, [r7, #4]
 800d176:	68b9      	ldr	r1, [r7, #8]
 800d178:	68f8      	ldr	r0, [r7, #12]
 800d17a:	f000 f90f 	bl	800d39c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d180:	68f8      	ldr	r0, [r7, #12]
 800d182:	4798      	blx	r3
 800d184:	4603      	mov	r3, r0
 800d186:	2b00      	cmp	r3, #0
 800d188:	d001      	beq.n	800d18e <netif_add+0xba>
    return NULL;
 800d18a:	2300      	movs	r3, #0
 800d18c:	e058      	b.n	800d240 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d194:	2bff      	cmp	r3, #255	; 0xff
 800d196:	d103      	bne.n	800d1a0 <netif_add+0xcc>
        netif->num = 0;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	2200      	movs	r2, #0
 800d19c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d1a4:	4b2f      	ldr	r3, [pc, #188]	; (800d264 <netif_add+0x190>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	617b      	str	r3, [r7, #20]
 800d1aa:	e02b      	b.n	800d204 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d1ac:	697a      	ldr	r2, [r7, #20]
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	d106      	bne.n	800d1c2 <netif_add+0xee>
 800d1b4:	4b24      	ldr	r3, [pc, #144]	; (800d248 <netif_add+0x174>)
 800d1b6:	f240 128b 	movw	r2, #395	; 0x18b
 800d1ba:	492b      	ldr	r1, [pc, #172]	; (800d268 <netif_add+0x194>)
 800d1bc:	4824      	ldr	r0, [pc, #144]	; (800d250 <netif_add+0x17c>)
 800d1be:	f009 ffc5 	bl	801714c <iprintf>
        num_netifs++;
 800d1c2:	693b      	ldr	r3, [r7, #16]
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d1c8:	693b      	ldr	r3, [r7, #16]
 800d1ca:	2bff      	cmp	r3, #255	; 0xff
 800d1cc:	dd06      	ble.n	800d1dc <netif_add+0x108>
 800d1ce:	4b1e      	ldr	r3, [pc, #120]	; (800d248 <netif_add+0x174>)
 800d1d0:	f240 128d 	movw	r2, #397	; 0x18d
 800d1d4:	4925      	ldr	r1, [pc, #148]	; (800d26c <netif_add+0x198>)
 800d1d6:	481e      	ldr	r0, [pc, #120]	; (800d250 <netif_add+0x17c>)
 800d1d8:	f009 ffb8 	bl	801714c <iprintf>
        if (netif2->num == netif->num) {
 800d1dc:	697b      	ldr	r3, [r7, #20]
 800d1de:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d1e8:	429a      	cmp	r2, r3
 800d1ea:	d108      	bne.n	800d1fe <netif_add+0x12a>
          netif->num++;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d1f2:	3301      	adds	r3, #1
 800d1f4:	b2da      	uxtb	r2, r3
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800d1fc:	e005      	b.n	800d20a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d1fe:	697b      	ldr	r3, [r7, #20]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	617b      	str	r3, [r7, #20]
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d1d0      	bne.n	800d1ac <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d1be      	bne.n	800d18e <netif_add+0xba>
  }
  if (netif->num == 254) {
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d216:	2bfe      	cmp	r3, #254	; 0xfe
 800d218:	d103      	bne.n	800d222 <netif_add+0x14e>
    netif_num = 0;
 800d21a:	4b11      	ldr	r3, [pc, #68]	; (800d260 <netif_add+0x18c>)
 800d21c:	2200      	movs	r2, #0
 800d21e:	701a      	strb	r2, [r3, #0]
 800d220:	e006      	b.n	800d230 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d228:	3301      	adds	r3, #1
 800d22a:	b2da      	uxtb	r2, r3
 800d22c:	4b0c      	ldr	r3, [pc, #48]	; (800d260 <netif_add+0x18c>)
 800d22e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d230:	4b0c      	ldr	r3, [pc, #48]	; (800d264 <netif_add+0x190>)
 800d232:	681a      	ldr	r2, [r3, #0]
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d238:	4a0a      	ldr	r2, [pc, #40]	; (800d264 <netif_add+0x190>)
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d23e:	68fb      	ldr	r3, [r7, #12]
}
 800d240:	4618      	mov	r0, r3
 800d242:	3718      	adds	r7, #24
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}
 800d248:	080194d8 	.word	0x080194d8
 800d24c:	0801956c 	.word	0x0801956c
 800d250:	08019528 	.word	0x08019528
 800d254:	08019588 	.word	0x08019588
 800d258:	0801b918 	.word	0x0801b918
 800d25c:	0800d677 	.word	0x0800d677
 800d260:	20004648 	.word	0x20004648
 800d264:	2000d230 	.word	0x2000d230
 800d268:	080195ac 	.word	0x080195ac
 800d26c:	080195c0 	.word	0x080195c0

0800d270 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b082      	sub	sp, #8
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
 800d278:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d27a:	6839      	ldr	r1, [r7, #0]
 800d27c:	6878      	ldr	r0, [r7, #4]
 800d27e:	f002 fe6b 	bl	800ff58 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d282:	bf00      	nop
 800d284:	3708      	adds	r7, #8
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}
	...

0800d28c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b086      	sub	sp, #24
 800d290:	af00      	add	r7, sp, #0
 800d292:	60f8      	str	r0, [r7, #12]
 800d294:	60b9      	str	r1, [r7, #8]
 800d296:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d298:	68bb      	ldr	r3, [r7, #8]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d106      	bne.n	800d2ac <netif_do_set_ipaddr+0x20>
 800d29e:	4b1d      	ldr	r3, [pc, #116]	; (800d314 <netif_do_set_ipaddr+0x88>)
 800d2a0:	f240 12cb 	movw	r2, #459	; 0x1cb
 800d2a4:	491c      	ldr	r1, [pc, #112]	; (800d318 <netif_do_set_ipaddr+0x8c>)
 800d2a6:	481d      	ldr	r0, [pc, #116]	; (800d31c <netif_do_set_ipaddr+0x90>)
 800d2a8:	f009 ff50 	bl	801714c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d106      	bne.n	800d2c0 <netif_do_set_ipaddr+0x34>
 800d2b2:	4b18      	ldr	r3, [pc, #96]	; (800d314 <netif_do_set_ipaddr+0x88>)
 800d2b4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800d2b8:	4917      	ldr	r1, [pc, #92]	; (800d318 <netif_do_set_ipaddr+0x8c>)
 800d2ba:	4818      	ldr	r0, [pc, #96]	; (800d31c <netif_do_set_ipaddr+0x90>)
 800d2bc:	f009 ff46 	bl	801714c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d2c0:	68bb      	ldr	r3, [r7, #8]
 800d2c2:	681a      	ldr	r2, [r3, #0]
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	3304      	adds	r3, #4
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	429a      	cmp	r2, r3
 800d2cc:	d01c      	beq.n	800d308 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	3304      	adds	r3, #4
 800d2d8:	681a      	ldr	r2, [r3, #0]
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d2de:	f107 0314 	add.w	r3, r7, #20
 800d2e2:	4619      	mov	r1, r3
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f7ff ffc3 	bl	800d270 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d2ea:	68bb      	ldr	r3, [r7, #8]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d002      	beq.n	800d2f6 <netif_do_set_ipaddr+0x6a>
 800d2f0:	68bb      	ldr	r3, [r7, #8]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	e000      	b.n	800d2f8 <netif_do_set_ipaddr+0x6c>
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	68fa      	ldr	r2, [r7, #12]
 800d2fa:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d2fc:	2101      	movs	r1, #1
 800d2fe:	68f8      	ldr	r0, [r7, #12]
 800d300:	f000 f8d2 	bl	800d4a8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d304:	2301      	movs	r3, #1
 800d306:	e000      	b.n	800d30a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800d308:	2300      	movs	r3, #0
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	3718      	adds	r7, #24
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}
 800d312:	bf00      	nop
 800d314:	080194d8 	.word	0x080194d8
 800d318:	080195f0 	.word	0x080195f0
 800d31c:	08019528 	.word	0x08019528

0800d320 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d320:	b480      	push	{r7}
 800d322:	b085      	sub	sp, #20
 800d324:	af00      	add	r7, sp, #0
 800d326:	60f8      	str	r0, [r7, #12]
 800d328:	60b9      	str	r1, [r7, #8]
 800d32a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d32c:	68bb      	ldr	r3, [r7, #8]
 800d32e:	681a      	ldr	r2, [r3, #0]
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	3308      	adds	r3, #8
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	429a      	cmp	r2, r3
 800d338:	d00a      	beq.n	800d350 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d002      	beq.n	800d346 <netif_do_set_netmask+0x26>
 800d340:	68bb      	ldr	r3, [r7, #8]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	e000      	b.n	800d348 <netif_do_set_netmask+0x28>
 800d346:	2300      	movs	r3, #0
 800d348:	68fa      	ldr	r2, [r7, #12]
 800d34a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d34c:	2301      	movs	r3, #1
 800d34e:	e000      	b.n	800d352 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d350:	2300      	movs	r3, #0
}
 800d352:	4618      	mov	r0, r3
 800d354:	3714      	adds	r7, #20
 800d356:	46bd      	mov	sp, r7
 800d358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35c:	4770      	bx	lr

0800d35e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d35e:	b480      	push	{r7}
 800d360:	b085      	sub	sp, #20
 800d362:	af00      	add	r7, sp, #0
 800d364:	60f8      	str	r0, [r7, #12]
 800d366:	60b9      	str	r1, [r7, #8]
 800d368:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	681a      	ldr	r2, [r3, #0]
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	330c      	adds	r3, #12
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	429a      	cmp	r2, r3
 800d376:	d00a      	beq.n	800d38e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d002      	beq.n	800d384 <netif_do_set_gw+0x26>
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	e000      	b.n	800d386 <netif_do_set_gw+0x28>
 800d384:	2300      	movs	r3, #0
 800d386:	68fa      	ldr	r2, [r7, #12]
 800d388:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d38a:	2301      	movs	r3, #1
 800d38c:	e000      	b.n	800d390 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d38e:	2300      	movs	r3, #0
}
 800d390:	4618      	mov	r0, r3
 800d392:	3714      	adds	r7, #20
 800d394:	46bd      	mov	sp, r7
 800d396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39a:	4770      	bx	lr

0800d39c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b088      	sub	sp, #32
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	60f8      	str	r0, [r7, #12]
 800d3a4:	60b9      	str	r1, [r7, #8]
 800d3a6:	607a      	str	r2, [r7, #4]
 800d3a8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d101      	bne.n	800d3bc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800d3b8:	4b1c      	ldr	r3, [pc, #112]	; (800d42c <netif_set_addr+0x90>)
 800d3ba:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d101      	bne.n	800d3c6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800d3c2:	4b1a      	ldr	r3, [pc, #104]	; (800d42c <netif_set_addr+0x90>)
 800d3c4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d101      	bne.n	800d3d0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800d3cc:	4b17      	ldr	r3, [pc, #92]	; (800d42c <netif_set_addr+0x90>)
 800d3ce:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d003      	beq.n	800d3de <netif_set_addr+0x42>
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d101      	bne.n	800d3e2 <netif_set_addr+0x46>
 800d3de:	2301      	movs	r3, #1
 800d3e0:	e000      	b.n	800d3e4 <netif_set_addr+0x48>
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d3e6:	697b      	ldr	r3, [r7, #20]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d006      	beq.n	800d3fa <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d3ec:	f107 0310 	add.w	r3, r7, #16
 800d3f0:	461a      	mov	r2, r3
 800d3f2:	68b9      	ldr	r1, [r7, #8]
 800d3f4:	68f8      	ldr	r0, [r7, #12]
 800d3f6:	f7ff ff49 	bl	800d28c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d3fa:	69fa      	ldr	r2, [r7, #28]
 800d3fc:	6879      	ldr	r1, [r7, #4]
 800d3fe:	68f8      	ldr	r0, [r7, #12]
 800d400:	f7ff ff8e 	bl	800d320 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d404:	69ba      	ldr	r2, [r7, #24]
 800d406:	6839      	ldr	r1, [r7, #0]
 800d408:	68f8      	ldr	r0, [r7, #12]
 800d40a:	f7ff ffa8 	bl	800d35e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d40e:	697b      	ldr	r3, [r7, #20]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d106      	bne.n	800d422 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d414:	f107 0310 	add.w	r3, r7, #16
 800d418:	461a      	mov	r2, r3
 800d41a:	68b9      	ldr	r1, [r7, #8]
 800d41c:	68f8      	ldr	r0, [r7, #12]
 800d41e:	f7ff ff35 	bl	800d28c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d422:	bf00      	nop
 800d424:	3720      	adds	r7, #32
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}
 800d42a:	bf00      	nop
 800d42c:	0801b918 	.word	0x0801b918

0800d430 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d430:	b480      	push	{r7}
 800d432:	b083      	sub	sp, #12
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d438:	4a04      	ldr	r2, [pc, #16]	; (800d44c <netif_set_default+0x1c>)
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d43e:	bf00      	nop
 800d440:	370c      	adds	r7, #12
 800d442:	46bd      	mov	sp, r7
 800d444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d448:	4770      	bx	lr
 800d44a:	bf00      	nop
 800d44c:	2000d234 	.word	0x2000d234

0800d450 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b082      	sub	sp, #8
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d107      	bne.n	800d46e <netif_set_up+0x1e>
 800d45e:	4b0f      	ldr	r3, [pc, #60]	; (800d49c <netif_set_up+0x4c>)
 800d460:	f44f 7254 	mov.w	r2, #848	; 0x350
 800d464:	490e      	ldr	r1, [pc, #56]	; (800d4a0 <netif_set_up+0x50>)
 800d466:	480f      	ldr	r0, [pc, #60]	; (800d4a4 <netif_set_up+0x54>)
 800d468:	f009 fe70 	bl	801714c <iprintf>
 800d46c:	e013      	b.n	800d496 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d474:	f003 0301 	and.w	r3, r3, #1
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d10c      	bne.n	800d496 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d482:	f043 0301 	orr.w	r3, r3, #1
 800d486:	b2da      	uxtb	r2, r3
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d48e:	2103      	movs	r1, #3
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	f000 f809 	bl	800d4a8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d496:	3708      	adds	r7, #8
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}
 800d49c:	080194d8 	.word	0x080194d8
 800d4a0:	08019660 	.word	0x08019660
 800d4a4:	08019528 	.word	0x08019528

0800d4a8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b082      	sub	sp, #8
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
 800d4b0:	460b      	mov	r3, r1
 800d4b2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d106      	bne.n	800d4c8 <netif_issue_reports+0x20>
 800d4ba:	4b18      	ldr	r3, [pc, #96]	; (800d51c <netif_issue_reports+0x74>)
 800d4bc:	f240 326d 	movw	r2, #877	; 0x36d
 800d4c0:	4917      	ldr	r1, [pc, #92]	; (800d520 <netif_issue_reports+0x78>)
 800d4c2:	4818      	ldr	r0, [pc, #96]	; (800d524 <netif_issue_reports+0x7c>)
 800d4c4:	f009 fe42 	bl	801714c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d4ce:	f003 0304 	and.w	r3, r3, #4
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d01e      	beq.n	800d514 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d4dc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d017      	beq.n	800d514 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d4e4:	78fb      	ldrb	r3, [r7, #3]
 800d4e6:	f003 0301 	and.w	r3, r3, #1
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d013      	beq.n	800d516 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	3304      	adds	r3, #4
 800d4f2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d00e      	beq.n	800d516 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d4fe:	f003 0308 	and.w	r3, r3, #8
 800d502:	2b00      	cmp	r3, #0
 800d504:	d007      	beq.n	800d516 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	3304      	adds	r3, #4
 800d50a:	4619      	mov	r1, r3
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f008 f84f 	bl	80155b0 <etharp_request>
 800d512:	e000      	b.n	800d516 <netif_issue_reports+0x6e>
    return;
 800d514:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d516:	3708      	adds	r7, #8
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}
 800d51c:	080194d8 	.word	0x080194d8
 800d520:	0801967c 	.word	0x0801967c
 800d524:	08019528 	.word	0x08019528

0800d528 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b082      	sub	sp, #8
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d107      	bne.n	800d546 <netif_set_down+0x1e>
 800d536:	4b12      	ldr	r3, [pc, #72]	; (800d580 <netif_set_down+0x58>)
 800d538:	f240 329b 	movw	r2, #923	; 0x39b
 800d53c:	4911      	ldr	r1, [pc, #68]	; (800d584 <netif_set_down+0x5c>)
 800d53e:	4812      	ldr	r0, [pc, #72]	; (800d588 <netif_set_down+0x60>)
 800d540:	f009 fe04 	bl	801714c <iprintf>
 800d544:	e019      	b.n	800d57a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d54c:	f003 0301 	and.w	r3, r3, #1
 800d550:	2b00      	cmp	r3, #0
 800d552:	d012      	beq.n	800d57a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d55a:	f023 0301 	bic.w	r3, r3, #1
 800d55e:	b2da      	uxtb	r2, r3
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d56c:	f003 0308 	and.w	r3, r3, #8
 800d570:	2b00      	cmp	r3, #0
 800d572:	d002      	beq.n	800d57a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f007 fbd9 	bl	8014d2c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d57a:	3708      	adds	r7, #8
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}
 800d580:	080194d8 	.word	0x080194d8
 800d584:	080196a0 	.word	0x080196a0
 800d588:	08019528 	.word	0x08019528

0800d58c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b082      	sub	sp, #8
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d107      	bne.n	800d5aa <netif_set_link_up+0x1e>
 800d59a:	4b13      	ldr	r3, [pc, #76]	; (800d5e8 <netif_set_link_up+0x5c>)
 800d59c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800d5a0:	4912      	ldr	r1, [pc, #72]	; (800d5ec <netif_set_link_up+0x60>)
 800d5a2:	4813      	ldr	r0, [pc, #76]	; (800d5f0 <netif_set_link_up+0x64>)
 800d5a4:	f009 fdd2 	bl	801714c <iprintf>
 800d5a8:	e01b      	b.n	800d5e2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d5b0:	f003 0304 	and.w	r3, r3, #4
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d114      	bne.n	800d5e2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d5be:	f043 0304 	orr.w	r3, r3, #4
 800d5c2:	b2da      	uxtb	r2, r3
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d5ca:	2103      	movs	r1, #3
 800d5cc:	6878      	ldr	r0, [r7, #4]
 800d5ce:	f7ff ff6b 	bl	800d4a8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	69db      	ldr	r3, [r3, #28]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d003      	beq.n	800d5e2 <netif_set_link_up+0x56>
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	69db      	ldr	r3, [r3, #28]
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d5e2:	3708      	adds	r7, #8
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}
 800d5e8:	080194d8 	.word	0x080194d8
 800d5ec:	080196c0 	.word	0x080196c0
 800d5f0:	08019528 	.word	0x08019528

0800d5f4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b082      	sub	sp, #8
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d107      	bne.n	800d612 <netif_set_link_down+0x1e>
 800d602:	4b11      	ldr	r3, [pc, #68]	; (800d648 <netif_set_link_down+0x54>)
 800d604:	f240 4206 	movw	r2, #1030	; 0x406
 800d608:	4910      	ldr	r1, [pc, #64]	; (800d64c <netif_set_link_down+0x58>)
 800d60a:	4811      	ldr	r0, [pc, #68]	; (800d650 <netif_set_link_down+0x5c>)
 800d60c:	f009 fd9e 	bl	801714c <iprintf>
 800d610:	e017      	b.n	800d642 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d618:	f003 0304 	and.w	r3, r3, #4
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d010      	beq.n	800d642 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d626:	f023 0304 	bic.w	r3, r3, #4
 800d62a:	b2da      	uxtb	r2, r3
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	69db      	ldr	r3, [r3, #28]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d003      	beq.n	800d642 <netif_set_link_down+0x4e>
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	69db      	ldr	r3, [r3, #28]
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d642:	3708      	adds	r7, #8
 800d644:	46bd      	mov	sp, r7
 800d646:	bd80      	pop	{r7, pc}
 800d648:	080194d8 	.word	0x080194d8
 800d64c:	080196e4 	.word	0x080196e4
 800d650:	08019528 	.word	0x08019528

0800d654 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d654:	b480      	push	{r7}
 800d656:	b083      	sub	sp, #12
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
 800d65c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d002      	beq.n	800d66a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	683a      	ldr	r2, [r7, #0]
 800d668:	61da      	str	r2, [r3, #28]
  }
}
 800d66a:	bf00      	nop
 800d66c:	370c      	adds	r7, #12
 800d66e:	46bd      	mov	sp, r7
 800d670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d674:	4770      	bx	lr

0800d676 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d676:	b480      	push	{r7}
 800d678:	b085      	sub	sp, #20
 800d67a:	af00      	add	r7, sp, #0
 800d67c:	60f8      	str	r0, [r7, #12]
 800d67e:	60b9      	str	r1, [r7, #8]
 800d680:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d682:	f06f 030b 	mvn.w	r3, #11
}
 800d686:	4618      	mov	r0, r3
 800d688:	3714      	adds	r7, #20
 800d68a:	46bd      	mov	sp, r7
 800d68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d690:	4770      	bx	lr
	...

0800d694 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d694:	b480      	push	{r7}
 800d696:	b085      	sub	sp, #20
 800d698:	af00      	add	r7, sp, #0
 800d69a:	4603      	mov	r3, r0
 800d69c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d69e:	79fb      	ldrb	r3, [r7, #7]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d013      	beq.n	800d6cc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d6a4:	4b0d      	ldr	r3, [pc, #52]	; (800d6dc <netif_get_by_index+0x48>)
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	60fb      	str	r3, [r7, #12]
 800d6aa:	e00c      	b.n	800d6c6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d6b2:	3301      	adds	r3, #1
 800d6b4:	b2db      	uxtb	r3, r3
 800d6b6:	79fa      	ldrb	r2, [r7, #7]
 800d6b8:	429a      	cmp	r2, r3
 800d6ba:	d101      	bne.n	800d6c0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	e006      	b.n	800d6ce <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	60fb      	str	r3, [r7, #12]
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d1ef      	bne.n	800d6ac <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d6cc:	2300      	movs	r3, #0
}
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	3714      	adds	r7, #20
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d8:	4770      	bx	lr
 800d6da:	bf00      	nop
 800d6dc:	2000d230 	.word	0x2000d230

0800d6e0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b082      	sub	sp, #8
 800d6e4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d6e6:	f009 fc9f 	bl	8017028 <sys_arch_protect>
 800d6ea:	6038      	str	r0, [r7, #0]
 800d6ec:	4b0d      	ldr	r3, [pc, #52]	; (800d724 <pbuf_free_ooseq+0x44>)
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	701a      	strb	r2, [r3, #0]
 800d6f2:	6838      	ldr	r0, [r7, #0]
 800d6f4:	f009 fca6 	bl	8017044 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d6f8:	4b0b      	ldr	r3, [pc, #44]	; (800d728 <pbuf_free_ooseq+0x48>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	607b      	str	r3, [r7, #4]
 800d6fe:	e00a      	b.n	800d716 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d704:	2b00      	cmp	r3, #0
 800d706:	d003      	beq.n	800d710 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f002 fc63 	bl	800ffd4 <tcp_free_ooseq>
      return;
 800d70e:	e005      	b.n	800d71c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	68db      	ldr	r3, [r3, #12]
 800d714:	607b      	str	r3, [r7, #4]
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d1f1      	bne.n	800d700 <pbuf_free_ooseq+0x20>
    }
  }
}
 800d71c:	3708      	adds	r7, #8
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}
 800d722:	bf00      	nop
 800d724:	2000d238 	.word	0x2000d238
 800d728:	2000d240 	.word	0x2000d240

0800d72c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b082      	sub	sp, #8
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800d734:	f7ff ffd4 	bl	800d6e0 <pbuf_free_ooseq>
}
 800d738:	bf00      	nop
 800d73a:	3708      	adds	r7, #8
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}

0800d740 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b082      	sub	sp, #8
 800d744:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800d746:	f009 fc6f 	bl	8017028 <sys_arch_protect>
 800d74a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800d74c:	4b0f      	ldr	r3, [pc, #60]	; (800d78c <pbuf_pool_is_empty+0x4c>)
 800d74e:	781b      	ldrb	r3, [r3, #0]
 800d750:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800d752:	4b0e      	ldr	r3, [pc, #56]	; (800d78c <pbuf_pool_is_empty+0x4c>)
 800d754:	2201      	movs	r2, #1
 800d756:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800d758:	6878      	ldr	r0, [r7, #4]
 800d75a:	f009 fc73 	bl	8017044 <sys_arch_unprotect>

  if (!queued) {
 800d75e:	78fb      	ldrb	r3, [r7, #3]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d10f      	bne.n	800d784 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800d764:	2100      	movs	r1, #0
 800d766:	480a      	ldr	r0, [pc, #40]	; (800d790 <pbuf_pool_is_empty+0x50>)
 800d768:	f7fe fedc 	bl	800c524 <tcpip_try_callback>
 800d76c:	4603      	mov	r3, r0
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d008      	beq.n	800d784 <pbuf_pool_is_empty+0x44>
 800d772:	f009 fc59 	bl	8017028 <sys_arch_protect>
 800d776:	6078      	str	r0, [r7, #4]
 800d778:	4b04      	ldr	r3, [pc, #16]	; (800d78c <pbuf_pool_is_empty+0x4c>)
 800d77a:	2200      	movs	r2, #0
 800d77c:	701a      	strb	r2, [r3, #0]
 800d77e:	6878      	ldr	r0, [r7, #4]
 800d780:	f009 fc60 	bl	8017044 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d784:	bf00      	nop
 800d786:	3708      	adds	r7, #8
 800d788:	46bd      	mov	sp, r7
 800d78a:	bd80      	pop	{r7, pc}
 800d78c:	2000d238 	.word	0x2000d238
 800d790:	0800d72d 	.word	0x0800d72d

0800d794 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d794:	b480      	push	{r7}
 800d796:	b085      	sub	sp, #20
 800d798:	af00      	add	r7, sp, #0
 800d79a:	60f8      	str	r0, [r7, #12]
 800d79c:	60b9      	str	r1, [r7, #8]
 800d79e:	4611      	mov	r1, r2
 800d7a0:	461a      	mov	r2, r3
 800d7a2:	460b      	mov	r3, r1
 800d7a4:	80fb      	strh	r3, [r7, #6]
 800d7a6:	4613      	mov	r3, r2
 800d7a8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	68ba      	ldr	r2, [r7, #8]
 800d7b4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	88fa      	ldrh	r2, [r7, #6]
 800d7ba:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	88ba      	ldrh	r2, [r7, #4]
 800d7c0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d7c2:	8b3b      	ldrh	r3, [r7, #24]
 800d7c4:	b2da      	uxtb	r2, r3
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	7f3a      	ldrb	r2, [r7, #28]
 800d7ce:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	2201      	movs	r2, #1
 800d7d4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	2200      	movs	r2, #0
 800d7da:	73da      	strb	r2, [r3, #15]
}
 800d7dc:	bf00      	nop
 800d7de:	3714      	adds	r7, #20
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e6:	4770      	bx	lr

0800d7e8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b08c      	sub	sp, #48	; 0x30
 800d7ec:	af02      	add	r7, sp, #8
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	71fb      	strb	r3, [r7, #7]
 800d7f2:	460b      	mov	r3, r1
 800d7f4:	80bb      	strh	r3, [r7, #4]
 800d7f6:	4613      	mov	r3, r2
 800d7f8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d7fa:	79fb      	ldrb	r3, [r7, #7]
 800d7fc:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d7fe:	887b      	ldrh	r3, [r7, #2]
 800d800:	2b41      	cmp	r3, #65	; 0x41
 800d802:	d00b      	beq.n	800d81c <pbuf_alloc+0x34>
 800d804:	2b41      	cmp	r3, #65	; 0x41
 800d806:	dc02      	bgt.n	800d80e <pbuf_alloc+0x26>
 800d808:	2b01      	cmp	r3, #1
 800d80a:	d007      	beq.n	800d81c <pbuf_alloc+0x34>
 800d80c:	e0c2      	b.n	800d994 <pbuf_alloc+0x1ac>
 800d80e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d812:	d00b      	beq.n	800d82c <pbuf_alloc+0x44>
 800d814:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d818:	d070      	beq.n	800d8fc <pbuf_alloc+0x114>
 800d81a:	e0bb      	b.n	800d994 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d81c:	887a      	ldrh	r2, [r7, #2]
 800d81e:	88bb      	ldrh	r3, [r7, #4]
 800d820:	4619      	mov	r1, r3
 800d822:	2000      	movs	r0, #0
 800d824:	f000 f8d2 	bl	800d9cc <pbuf_alloc_reference>
 800d828:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800d82a:	e0bd      	b.n	800d9a8 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d82c:	2300      	movs	r3, #0
 800d82e:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800d830:	2300      	movs	r3, #0
 800d832:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d834:	88bb      	ldrh	r3, [r7, #4]
 800d836:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d838:	200b      	movs	r0, #11
 800d83a:	f7ff fbc7 	bl	800cfcc <memp_malloc>
 800d83e:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d840:	693b      	ldr	r3, [r7, #16]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d109      	bne.n	800d85a <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800d846:	f7ff ff7b 	bl	800d740 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d002      	beq.n	800d856 <pbuf_alloc+0x6e>
            pbuf_free(p);
 800d850:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d852:	f000 fadb 	bl	800de0c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d856:	2300      	movs	r3, #0
 800d858:	e0a7      	b.n	800d9aa <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d85a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d85c:	3303      	adds	r3, #3
 800d85e:	b29b      	uxth	r3, r3
 800d860:	f023 0303 	bic.w	r3, r3, #3
 800d864:	b29b      	uxth	r3, r3
 800d866:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800d86a:	b29b      	uxth	r3, r3
 800d86c:	8b7a      	ldrh	r2, [r7, #26]
 800d86e:	4293      	cmp	r3, r2
 800d870:	bf28      	it	cs
 800d872:	4613      	movcs	r3, r2
 800d874:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d876:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d878:	3310      	adds	r3, #16
 800d87a:	693a      	ldr	r2, [r7, #16]
 800d87c:	4413      	add	r3, r2
 800d87e:	3303      	adds	r3, #3
 800d880:	f023 0303 	bic.w	r3, r3, #3
 800d884:	4618      	mov	r0, r3
 800d886:	89f9      	ldrh	r1, [r7, #14]
 800d888:	8b7a      	ldrh	r2, [r7, #26]
 800d88a:	2300      	movs	r3, #0
 800d88c:	9301      	str	r3, [sp, #4]
 800d88e:	887b      	ldrh	r3, [r7, #2]
 800d890:	9300      	str	r3, [sp, #0]
 800d892:	460b      	mov	r3, r1
 800d894:	4601      	mov	r1, r0
 800d896:	6938      	ldr	r0, [r7, #16]
 800d898:	f7ff ff7c 	bl	800d794 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d89c:	693b      	ldr	r3, [r7, #16]
 800d89e:	685b      	ldr	r3, [r3, #4]
 800d8a0:	f003 0303 	and.w	r3, r3, #3
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d006      	beq.n	800d8b6 <pbuf_alloc+0xce>
 800d8a8:	4b42      	ldr	r3, [pc, #264]	; (800d9b4 <pbuf_alloc+0x1cc>)
 800d8aa:	f240 1201 	movw	r2, #257	; 0x101
 800d8ae:	4942      	ldr	r1, [pc, #264]	; (800d9b8 <pbuf_alloc+0x1d0>)
 800d8b0:	4842      	ldr	r0, [pc, #264]	; (800d9bc <pbuf_alloc+0x1d4>)
 800d8b2:	f009 fc4b 	bl	801714c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d8b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d8b8:	3303      	adds	r3, #3
 800d8ba:	f023 0303 	bic.w	r3, r3, #3
 800d8be:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800d8c2:	d106      	bne.n	800d8d2 <pbuf_alloc+0xea>
 800d8c4:	4b3b      	ldr	r3, [pc, #236]	; (800d9b4 <pbuf_alloc+0x1cc>)
 800d8c6:	f240 1203 	movw	r2, #259	; 0x103
 800d8ca:	493d      	ldr	r1, [pc, #244]	; (800d9c0 <pbuf_alloc+0x1d8>)
 800d8cc:	483b      	ldr	r0, [pc, #236]	; (800d9bc <pbuf_alloc+0x1d4>)
 800d8ce:	f009 fc3d 	bl	801714c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d102      	bne.n	800d8de <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d8d8:	693b      	ldr	r3, [r7, #16]
 800d8da:	627b      	str	r3, [r7, #36]	; 0x24
 800d8dc:	e002      	b.n	800d8e4 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d8de:	69fb      	ldr	r3, [r7, #28]
 800d8e0:	693a      	ldr	r2, [r7, #16]
 800d8e2:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d8e4:	693b      	ldr	r3, [r7, #16]
 800d8e6:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d8e8:	8b7a      	ldrh	r2, [r7, #26]
 800d8ea:	89fb      	ldrh	r3, [r7, #14]
 800d8ec:	1ad3      	subs	r3, r2, r3
 800d8ee:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800d8f4:	8b7b      	ldrh	r3, [r7, #26]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d19e      	bne.n	800d838 <pbuf_alloc+0x50>
      break;
 800d8fa:	e055      	b.n	800d9a8 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d8fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d8fe:	3303      	adds	r3, #3
 800d900:	b29b      	uxth	r3, r3
 800d902:	f023 0303 	bic.w	r3, r3, #3
 800d906:	b29a      	uxth	r2, r3
 800d908:	88bb      	ldrh	r3, [r7, #4]
 800d90a:	3303      	adds	r3, #3
 800d90c:	b29b      	uxth	r3, r3
 800d90e:	f023 0303 	bic.w	r3, r3, #3
 800d912:	b29b      	uxth	r3, r3
 800d914:	4413      	add	r3, r2
 800d916:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d918:	8b3b      	ldrh	r3, [r7, #24]
 800d91a:	3310      	adds	r3, #16
 800d91c:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d91e:	8b3a      	ldrh	r2, [r7, #24]
 800d920:	88bb      	ldrh	r3, [r7, #4]
 800d922:	3303      	adds	r3, #3
 800d924:	f023 0303 	bic.w	r3, r3, #3
 800d928:	429a      	cmp	r2, r3
 800d92a:	d306      	bcc.n	800d93a <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d92c:	8afa      	ldrh	r2, [r7, #22]
 800d92e:	88bb      	ldrh	r3, [r7, #4]
 800d930:	3303      	adds	r3, #3
 800d932:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d936:	429a      	cmp	r2, r3
 800d938:	d201      	bcs.n	800d93e <pbuf_alloc+0x156>
        return NULL;
 800d93a:	2300      	movs	r3, #0
 800d93c:	e035      	b.n	800d9aa <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d93e:	8afb      	ldrh	r3, [r7, #22]
 800d940:	4618      	mov	r0, r3
 800d942:	f7ff f9c1 	bl	800ccc8 <mem_malloc>
 800d946:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800d948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d101      	bne.n	800d952 <pbuf_alloc+0x16a>
        return NULL;
 800d94e:	2300      	movs	r3, #0
 800d950:	e02b      	b.n	800d9aa <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d952:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d954:	3310      	adds	r3, #16
 800d956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d958:	4413      	add	r3, r2
 800d95a:	3303      	adds	r3, #3
 800d95c:	f023 0303 	bic.w	r3, r3, #3
 800d960:	4618      	mov	r0, r3
 800d962:	88b9      	ldrh	r1, [r7, #4]
 800d964:	88ba      	ldrh	r2, [r7, #4]
 800d966:	2300      	movs	r3, #0
 800d968:	9301      	str	r3, [sp, #4]
 800d96a:	887b      	ldrh	r3, [r7, #2]
 800d96c:	9300      	str	r3, [sp, #0]
 800d96e:	460b      	mov	r3, r1
 800d970:	4601      	mov	r1, r0
 800d972:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d974:	f7ff ff0e 	bl	800d794 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d97a:	685b      	ldr	r3, [r3, #4]
 800d97c:	f003 0303 	and.w	r3, r3, #3
 800d980:	2b00      	cmp	r3, #0
 800d982:	d010      	beq.n	800d9a6 <pbuf_alloc+0x1be>
 800d984:	4b0b      	ldr	r3, [pc, #44]	; (800d9b4 <pbuf_alloc+0x1cc>)
 800d986:	f240 1223 	movw	r2, #291	; 0x123
 800d98a:	490e      	ldr	r1, [pc, #56]	; (800d9c4 <pbuf_alloc+0x1dc>)
 800d98c:	480b      	ldr	r0, [pc, #44]	; (800d9bc <pbuf_alloc+0x1d4>)
 800d98e:	f009 fbdd 	bl	801714c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d992:	e008      	b.n	800d9a6 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d994:	4b07      	ldr	r3, [pc, #28]	; (800d9b4 <pbuf_alloc+0x1cc>)
 800d996:	f240 1227 	movw	r2, #295	; 0x127
 800d99a:	490b      	ldr	r1, [pc, #44]	; (800d9c8 <pbuf_alloc+0x1e0>)
 800d99c:	4807      	ldr	r0, [pc, #28]	; (800d9bc <pbuf_alloc+0x1d4>)
 800d99e:	f009 fbd5 	bl	801714c <iprintf>
      return NULL;
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	e001      	b.n	800d9aa <pbuf_alloc+0x1c2>
      break;
 800d9a6:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	3728      	adds	r7, #40	; 0x28
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd80      	pop	{r7, pc}
 800d9b2:	bf00      	nop
 800d9b4:	08019708 	.word	0x08019708
 800d9b8:	08019738 	.word	0x08019738
 800d9bc:	08019768 	.word	0x08019768
 800d9c0:	08019790 	.word	0x08019790
 800d9c4:	080197c4 	.word	0x080197c4
 800d9c8:	080197f0 	.word	0x080197f0

0800d9cc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b086      	sub	sp, #24
 800d9d0:	af02      	add	r7, sp, #8
 800d9d2:	6078      	str	r0, [r7, #4]
 800d9d4:	460b      	mov	r3, r1
 800d9d6:	807b      	strh	r3, [r7, #2]
 800d9d8:	4613      	mov	r3, r2
 800d9da:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d9dc:	883b      	ldrh	r3, [r7, #0]
 800d9de:	2b41      	cmp	r3, #65	; 0x41
 800d9e0:	d009      	beq.n	800d9f6 <pbuf_alloc_reference+0x2a>
 800d9e2:	883b      	ldrh	r3, [r7, #0]
 800d9e4:	2b01      	cmp	r3, #1
 800d9e6:	d006      	beq.n	800d9f6 <pbuf_alloc_reference+0x2a>
 800d9e8:	4b0f      	ldr	r3, [pc, #60]	; (800da28 <pbuf_alloc_reference+0x5c>)
 800d9ea:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800d9ee:	490f      	ldr	r1, [pc, #60]	; (800da2c <pbuf_alloc_reference+0x60>)
 800d9f0:	480f      	ldr	r0, [pc, #60]	; (800da30 <pbuf_alloc_reference+0x64>)
 800d9f2:	f009 fbab 	bl	801714c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d9f6:	200a      	movs	r0, #10
 800d9f8:	f7ff fae8 	bl	800cfcc <memp_malloc>
 800d9fc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d101      	bne.n	800da08 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800da04:	2300      	movs	r3, #0
 800da06:	e00b      	b.n	800da20 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800da08:	8879      	ldrh	r1, [r7, #2]
 800da0a:	887a      	ldrh	r2, [r7, #2]
 800da0c:	2300      	movs	r3, #0
 800da0e:	9301      	str	r3, [sp, #4]
 800da10:	883b      	ldrh	r3, [r7, #0]
 800da12:	9300      	str	r3, [sp, #0]
 800da14:	460b      	mov	r3, r1
 800da16:	6879      	ldr	r1, [r7, #4]
 800da18:	68f8      	ldr	r0, [r7, #12]
 800da1a:	f7ff febb 	bl	800d794 <pbuf_init_alloced_pbuf>
  return p;
 800da1e:	68fb      	ldr	r3, [r7, #12]
}
 800da20:	4618      	mov	r0, r3
 800da22:	3710      	adds	r7, #16
 800da24:	46bd      	mov	sp, r7
 800da26:	bd80      	pop	{r7, pc}
 800da28:	08019708 	.word	0x08019708
 800da2c:	0801980c 	.word	0x0801980c
 800da30:	08019768 	.word	0x08019768

0800da34 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b088      	sub	sp, #32
 800da38:	af02      	add	r7, sp, #8
 800da3a:	607b      	str	r3, [r7, #4]
 800da3c:	4603      	mov	r3, r0
 800da3e:	73fb      	strb	r3, [r7, #15]
 800da40:	460b      	mov	r3, r1
 800da42:	81bb      	strh	r3, [r7, #12]
 800da44:	4613      	mov	r3, r2
 800da46:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800da48:	7bfb      	ldrb	r3, [r7, #15]
 800da4a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800da4c:	8a7b      	ldrh	r3, [r7, #18]
 800da4e:	3303      	adds	r3, #3
 800da50:	f023 0203 	bic.w	r2, r3, #3
 800da54:	89bb      	ldrh	r3, [r7, #12]
 800da56:	441a      	add	r2, r3
 800da58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da5a:	429a      	cmp	r2, r3
 800da5c:	d901      	bls.n	800da62 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800da5e:	2300      	movs	r3, #0
 800da60:	e018      	b.n	800da94 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800da62:	6a3b      	ldr	r3, [r7, #32]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d007      	beq.n	800da78 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800da68:	8a7b      	ldrh	r3, [r7, #18]
 800da6a:	3303      	adds	r3, #3
 800da6c:	f023 0303 	bic.w	r3, r3, #3
 800da70:	6a3a      	ldr	r2, [r7, #32]
 800da72:	4413      	add	r3, r2
 800da74:	617b      	str	r3, [r7, #20]
 800da76:	e001      	b.n	800da7c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800da78:	2300      	movs	r3, #0
 800da7a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800da7c:	6878      	ldr	r0, [r7, #4]
 800da7e:	89b9      	ldrh	r1, [r7, #12]
 800da80:	89ba      	ldrh	r2, [r7, #12]
 800da82:	2302      	movs	r3, #2
 800da84:	9301      	str	r3, [sp, #4]
 800da86:	897b      	ldrh	r3, [r7, #10]
 800da88:	9300      	str	r3, [sp, #0]
 800da8a:	460b      	mov	r3, r1
 800da8c:	6979      	ldr	r1, [r7, #20]
 800da8e:	f7ff fe81 	bl	800d794 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800da92:	687b      	ldr	r3, [r7, #4]
}
 800da94:	4618      	mov	r0, r3
 800da96:	3718      	adds	r7, #24
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}

0800da9c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b084      	sub	sp, #16
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
 800daa4:	460b      	mov	r3, r1
 800daa6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d106      	bne.n	800dabc <pbuf_realloc+0x20>
 800daae:	4b3a      	ldr	r3, [pc, #232]	; (800db98 <pbuf_realloc+0xfc>)
 800dab0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800dab4:	4939      	ldr	r1, [pc, #228]	; (800db9c <pbuf_realloc+0x100>)
 800dab6:	483a      	ldr	r0, [pc, #232]	; (800dba0 <pbuf_realloc+0x104>)
 800dab8:	f009 fb48 	bl	801714c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	891b      	ldrh	r3, [r3, #8]
 800dac0:	887a      	ldrh	r2, [r7, #2]
 800dac2:	429a      	cmp	r2, r3
 800dac4:	d264      	bcs.n	800db90 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	891a      	ldrh	r2, [r3, #8]
 800daca:	887b      	ldrh	r3, [r7, #2]
 800dacc:	1ad3      	subs	r3, r2, r3
 800dace:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800dad0:	887b      	ldrh	r3, [r7, #2]
 800dad2:	817b      	strh	r3, [r7, #10]
  q = p;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800dad8:	e018      	b.n	800db0c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	895b      	ldrh	r3, [r3, #10]
 800dade:	897a      	ldrh	r2, [r7, #10]
 800dae0:	1ad3      	subs	r3, r2, r3
 800dae2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	891a      	ldrh	r2, [r3, #8]
 800dae8:	893b      	ldrh	r3, [r7, #8]
 800daea:	1ad3      	subs	r3, r2, r3
 800daec:	b29a      	uxth	r2, r3
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d106      	bne.n	800db0c <pbuf_realloc+0x70>
 800dafe:	4b26      	ldr	r3, [pc, #152]	; (800db98 <pbuf_realloc+0xfc>)
 800db00:	f240 12af 	movw	r2, #431	; 0x1af
 800db04:	4927      	ldr	r1, [pc, #156]	; (800dba4 <pbuf_realloc+0x108>)
 800db06:	4826      	ldr	r0, [pc, #152]	; (800dba0 <pbuf_realloc+0x104>)
 800db08:	f009 fb20 	bl	801714c <iprintf>
  while (rem_len > q->len) {
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	895b      	ldrh	r3, [r3, #10]
 800db10:	897a      	ldrh	r2, [r7, #10]
 800db12:	429a      	cmp	r2, r3
 800db14:	d8e1      	bhi.n	800dada <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	7b1b      	ldrb	r3, [r3, #12]
 800db1a:	f003 030f 	and.w	r3, r3, #15
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d122      	bne.n	800db68 <pbuf_realloc+0xcc>
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	895b      	ldrh	r3, [r3, #10]
 800db26:	897a      	ldrh	r2, [r7, #10]
 800db28:	429a      	cmp	r2, r3
 800db2a:	d01d      	beq.n	800db68 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	7b5b      	ldrb	r3, [r3, #13]
 800db30:	f003 0302 	and.w	r3, r3, #2
 800db34:	2b00      	cmp	r3, #0
 800db36:	d117      	bne.n	800db68 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	685b      	ldr	r3, [r3, #4]
 800db3c:	461a      	mov	r2, r3
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	1ad3      	subs	r3, r2, r3
 800db42:	b29a      	uxth	r2, r3
 800db44:	897b      	ldrh	r3, [r7, #10]
 800db46:	4413      	add	r3, r2
 800db48:	b29b      	uxth	r3, r3
 800db4a:	4619      	mov	r1, r3
 800db4c:	68f8      	ldr	r0, [r7, #12]
 800db4e:	f7fe ffb1 	bl	800cab4 <mem_trim>
 800db52:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d106      	bne.n	800db68 <pbuf_realloc+0xcc>
 800db5a:	4b0f      	ldr	r3, [pc, #60]	; (800db98 <pbuf_realloc+0xfc>)
 800db5c:	f240 12bd 	movw	r2, #445	; 0x1bd
 800db60:	4911      	ldr	r1, [pc, #68]	; (800dba8 <pbuf_realloc+0x10c>)
 800db62:	480f      	ldr	r0, [pc, #60]	; (800dba0 <pbuf_realloc+0x104>)
 800db64:	f009 faf2 	bl	801714c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	897a      	ldrh	r2, [r7, #10]
 800db6c:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	895a      	ldrh	r2, [r3, #10]
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d004      	beq.n	800db88 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	4618      	mov	r0, r3
 800db84:	f000 f942 	bl	800de0c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	2200      	movs	r2, #0
 800db8c:	601a      	str	r2, [r3, #0]
 800db8e:	e000      	b.n	800db92 <pbuf_realloc+0xf6>
    return;
 800db90:	bf00      	nop

}
 800db92:	3710      	adds	r7, #16
 800db94:	46bd      	mov	sp, r7
 800db96:	bd80      	pop	{r7, pc}
 800db98:	08019708 	.word	0x08019708
 800db9c:	08019820 	.word	0x08019820
 800dba0:	08019768 	.word	0x08019768
 800dba4:	08019838 	.word	0x08019838
 800dba8:	08019850 	.word	0x08019850

0800dbac <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b086      	sub	sp, #24
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	60f8      	str	r0, [r7, #12]
 800dbb4:	60b9      	str	r1, [r7, #8]
 800dbb6:	4613      	mov	r3, r2
 800dbb8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d106      	bne.n	800dbce <pbuf_add_header_impl+0x22>
 800dbc0:	4b2b      	ldr	r3, [pc, #172]	; (800dc70 <pbuf_add_header_impl+0xc4>)
 800dbc2:	f240 12df 	movw	r2, #479	; 0x1df
 800dbc6:	492b      	ldr	r1, [pc, #172]	; (800dc74 <pbuf_add_header_impl+0xc8>)
 800dbc8:	482b      	ldr	r0, [pc, #172]	; (800dc78 <pbuf_add_header_impl+0xcc>)
 800dbca:	f009 fabf 	bl	801714c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d003      	beq.n	800dbdc <pbuf_add_header_impl+0x30>
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dbda:	d301      	bcc.n	800dbe0 <pbuf_add_header_impl+0x34>
    return 1;
 800dbdc:	2301      	movs	r3, #1
 800dbde:	e043      	b.n	800dc68 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d101      	bne.n	800dbea <pbuf_add_header_impl+0x3e>
    return 0;
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	e03e      	b.n	800dc68 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	891a      	ldrh	r2, [r3, #8]
 800dbf2:	8a7b      	ldrh	r3, [r7, #18]
 800dbf4:	4413      	add	r3, r2
 800dbf6:	b29b      	uxth	r3, r3
 800dbf8:	8a7a      	ldrh	r2, [r7, #18]
 800dbfa:	429a      	cmp	r2, r3
 800dbfc:	d901      	bls.n	800dc02 <pbuf_add_header_impl+0x56>
    return 1;
 800dbfe:	2301      	movs	r3, #1
 800dc00:	e032      	b.n	800dc68 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	7b1b      	ldrb	r3, [r3, #12]
 800dc06:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800dc08:	8a3b      	ldrh	r3, [r7, #16]
 800dc0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d00c      	beq.n	800dc2c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	685a      	ldr	r2, [r3, #4]
 800dc16:	68bb      	ldr	r3, [r7, #8]
 800dc18:	425b      	negs	r3, r3
 800dc1a:	4413      	add	r3, r2
 800dc1c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	3310      	adds	r3, #16
 800dc22:	697a      	ldr	r2, [r7, #20]
 800dc24:	429a      	cmp	r2, r3
 800dc26:	d20d      	bcs.n	800dc44 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800dc28:	2301      	movs	r3, #1
 800dc2a:	e01d      	b.n	800dc68 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800dc2c:	79fb      	ldrb	r3, [r7, #7]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d006      	beq.n	800dc40 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	685a      	ldr	r2, [r3, #4]
 800dc36:	68bb      	ldr	r3, [r7, #8]
 800dc38:	425b      	negs	r3, r3
 800dc3a:	4413      	add	r3, r2
 800dc3c:	617b      	str	r3, [r7, #20]
 800dc3e:	e001      	b.n	800dc44 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800dc40:	2301      	movs	r3, #1
 800dc42:	e011      	b.n	800dc68 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	697a      	ldr	r2, [r7, #20]
 800dc48:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	895a      	ldrh	r2, [r3, #10]
 800dc4e:	8a7b      	ldrh	r3, [r7, #18]
 800dc50:	4413      	add	r3, r2
 800dc52:	b29a      	uxth	r2, r3
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	891a      	ldrh	r2, [r3, #8]
 800dc5c:	8a7b      	ldrh	r3, [r7, #18]
 800dc5e:	4413      	add	r3, r2
 800dc60:	b29a      	uxth	r2, r3
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	811a      	strh	r2, [r3, #8]


  return 0;
 800dc66:	2300      	movs	r3, #0
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3718      	adds	r7, #24
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}
 800dc70:	08019708 	.word	0x08019708
 800dc74:	0801986c 	.word	0x0801986c
 800dc78:	08019768 	.word	0x08019768

0800dc7c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b082      	sub	sp, #8
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
 800dc84:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800dc86:	2200      	movs	r2, #0
 800dc88:	6839      	ldr	r1, [r7, #0]
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	f7ff ff8e 	bl	800dbac <pbuf_add_header_impl>
 800dc90:	4603      	mov	r3, r0
}
 800dc92:	4618      	mov	r0, r3
 800dc94:	3708      	adds	r7, #8
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bd80      	pop	{r7, pc}
	...

0800dc9c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b084      	sub	sp, #16
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
 800dca4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d106      	bne.n	800dcba <pbuf_remove_header+0x1e>
 800dcac:	4b20      	ldr	r3, [pc, #128]	; (800dd30 <pbuf_remove_header+0x94>)
 800dcae:	f240 224b 	movw	r2, #587	; 0x24b
 800dcb2:	4920      	ldr	r1, [pc, #128]	; (800dd34 <pbuf_remove_header+0x98>)
 800dcb4:	4820      	ldr	r0, [pc, #128]	; (800dd38 <pbuf_remove_header+0x9c>)
 800dcb6:	f009 fa49 	bl	801714c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d003      	beq.n	800dcc8 <pbuf_remove_header+0x2c>
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dcc6:	d301      	bcc.n	800dccc <pbuf_remove_header+0x30>
    return 1;
 800dcc8:	2301      	movs	r3, #1
 800dcca:	e02c      	b.n	800dd26 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d101      	bne.n	800dcd6 <pbuf_remove_header+0x3a>
    return 0;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	e027      	b.n	800dd26 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800dcd6:	683b      	ldr	r3, [r7, #0]
 800dcd8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	895b      	ldrh	r3, [r3, #10]
 800dcde:	89fa      	ldrh	r2, [r7, #14]
 800dce0:	429a      	cmp	r2, r3
 800dce2:	d908      	bls.n	800dcf6 <pbuf_remove_header+0x5a>
 800dce4:	4b12      	ldr	r3, [pc, #72]	; (800dd30 <pbuf_remove_header+0x94>)
 800dce6:	f240 2255 	movw	r2, #597	; 0x255
 800dcea:	4914      	ldr	r1, [pc, #80]	; (800dd3c <pbuf_remove_header+0xa0>)
 800dcec:	4812      	ldr	r0, [pc, #72]	; (800dd38 <pbuf_remove_header+0x9c>)
 800dcee:	f009 fa2d 	bl	801714c <iprintf>
 800dcf2:	2301      	movs	r3, #1
 800dcf4:	e017      	b.n	800dd26 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	685b      	ldr	r3, [r3, #4]
 800dcfa:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	685a      	ldr	r2, [r3, #4]
 800dd00:	683b      	ldr	r3, [r7, #0]
 800dd02:	441a      	add	r2, r3
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	895a      	ldrh	r2, [r3, #10]
 800dd0c:	89fb      	ldrh	r3, [r7, #14]
 800dd0e:	1ad3      	subs	r3, r2, r3
 800dd10:	b29a      	uxth	r2, r3
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	891a      	ldrh	r2, [r3, #8]
 800dd1a:	89fb      	ldrh	r3, [r7, #14]
 800dd1c:	1ad3      	subs	r3, r2, r3
 800dd1e:	b29a      	uxth	r2, r3
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800dd24:	2300      	movs	r3, #0
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	3710      	adds	r7, #16
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}
 800dd2e:	bf00      	nop
 800dd30:	08019708 	.word	0x08019708
 800dd34:	0801986c 	.word	0x0801986c
 800dd38:	08019768 	.word	0x08019768
 800dd3c:	08019878 	.word	0x08019878

0800dd40 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b082      	sub	sp, #8
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
 800dd48:	460b      	mov	r3, r1
 800dd4a:	807b      	strh	r3, [r7, #2]
 800dd4c:	4613      	mov	r3, r2
 800dd4e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800dd50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	da08      	bge.n	800dd6a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800dd58:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dd5c:	425b      	negs	r3, r3
 800dd5e:	4619      	mov	r1, r3
 800dd60:	6878      	ldr	r0, [r7, #4]
 800dd62:	f7ff ff9b 	bl	800dc9c <pbuf_remove_header>
 800dd66:	4603      	mov	r3, r0
 800dd68:	e007      	b.n	800dd7a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800dd6a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dd6e:	787a      	ldrb	r2, [r7, #1]
 800dd70:	4619      	mov	r1, r3
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f7ff ff1a 	bl	800dbac <pbuf_add_header_impl>
 800dd78:	4603      	mov	r3, r0
  }
}
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	3708      	adds	r7, #8
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}

0800dd82 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800dd82:	b580      	push	{r7, lr}
 800dd84:	b082      	sub	sp, #8
 800dd86:	af00      	add	r7, sp, #0
 800dd88:	6078      	str	r0, [r7, #4]
 800dd8a:	460b      	mov	r3, r1
 800dd8c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800dd8e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dd92:	2201      	movs	r2, #1
 800dd94:	4619      	mov	r1, r3
 800dd96:	6878      	ldr	r0, [r7, #4]
 800dd98:	f7ff ffd2 	bl	800dd40 <pbuf_header_impl>
 800dd9c:	4603      	mov	r3, r0
}
 800dd9e:	4618      	mov	r0, r3
 800dda0:	3708      	adds	r7, #8
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}

0800dda6 <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 800dda6:	b580      	push	{r7, lr}
 800dda8:	b086      	sub	sp, #24
 800ddaa:	af00      	add	r7, sp, #0
 800ddac:	6078      	str	r0, [r7, #4]
 800ddae:	460b      	mov	r3, r1
 800ddb0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 800ddb6:	887b      	ldrh	r3, [r7, #2]
 800ddb8:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800ddba:	e01c      	b.n	800ddf6 <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	895b      	ldrh	r3, [r3, #10]
 800ddc0:	8a7a      	ldrh	r2, [r7, #18]
 800ddc2:	429a      	cmp	r2, r3
 800ddc4:	d310      	bcc.n	800dde8 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 800ddc6:	697b      	ldr	r3, [r7, #20]
 800ddc8:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 800ddca:	697b      	ldr	r3, [r7, #20]
 800ddcc:	895b      	ldrh	r3, [r3, #10]
 800ddce:	8a7a      	ldrh	r2, [r7, #18]
 800ddd0:	1ad3      	subs	r3, r2, r3
 800ddd2:	827b      	strh	r3, [r7, #18]
      p = p->next;
 800ddd4:	697b      	ldr	r3, [r7, #20]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	617b      	str	r3, [r7, #20]
      f->next = 0;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	2200      	movs	r2, #0
 800ddde:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 800dde0:	68f8      	ldr	r0, [r7, #12]
 800dde2:	f000 f813 	bl	800de0c <pbuf_free>
 800dde6:	e006      	b.n	800ddf6 <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 800dde8:	8a7b      	ldrh	r3, [r7, #18]
 800ddea:	4619      	mov	r1, r3
 800ddec:	6978      	ldr	r0, [r7, #20]
 800ddee:	f7ff ff55 	bl	800dc9c <pbuf_remove_header>
      free_left = 0;
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800ddf6:	8a7b      	ldrh	r3, [r7, #18]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d002      	beq.n	800de02 <pbuf_free_header+0x5c>
 800ddfc:	697b      	ldr	r3, [r7, #20]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d1dc      	bne.n	800ddbc <pbuf_free_header+0x16>
    }
  }
  return p;
 800de02:	697b      	ldr	r3, [r7, #20]
}
 800de04:	4618      	mov	r0, r3
 800de06:	3718      	adds	r7, #24
 800de08:	46bd      	mov	sp, r7
 800de0a:	bd80      	pop	{r7, pc}

0800de0c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b088      	sub	sp, #32
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d10b      	bne.n	800de32 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d106      	bne.n	800de2e <pbuf_free+0x22>
 800de20:	4b3b      	ldr	r3, [pc, #236]	; (800df10 <pbuf_free+0x104>)
 800de22:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800de26:	493b      	ldr	r1, [pc, #236]	; (800df14 <pbuf_free+0x108>)
 800de28:	483b      	ldr	r0, [pc, #236]	; (800df18 <pbuf_free+0x10c>)
 800de2a:	f009 f98f 	bl	801714c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800de2e:	2300      	movs	r3, #0
 800de30:	e069      	b.n	800df06 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800de32:	2300      	movs	r3, #0
 800de34:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800de36:	e062      	b.n	800defe <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800de38:	f009 f8f6 	bl	8017028 <sys_arch_protect>
 800de3c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	7b9b      	ldrb	r3, [r3, #14]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d106      	bne.n	800de54 <pbuf_free+0x48>
 800de46:	4b32      	ldr	r3, [pc, #200]	; (800df10 <pbuf_free+0x104>)
 800de48:	f240 22f1 	movw	r2, #753	; 0x2f1
 800de4c:	4933      	ldr	r1, [pc, #204]	; (800df1c <pbuf_free+0x110>)
 800de4e:	4832      	ldr	r0, [pc, #200]	; (800df18 <pbuf_free+0x10c>)
 800de50:	f009 f97c 	bl	801714c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	7b9b      	ldrb	r3, [r3, #14]
 800de58:	3b01      	subs	r3, #1
 800de5a:	b2da      	uxtb	r2, r3
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	739a      	strb	r2, [r3, #14]
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	7b9b      	ldrb	r3, [r3, #14]
 800de64:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800de66:	69b8      	ldr	r0, [r7, #24]
 800de68:	f009 f8ec 	bl	8017044 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800de6c:	7dfb      	ldrb	r3, [r7, #23]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d143      	bne.n	800defa <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	7b1b      	ldrb	r3, [r3, #12]
 800de7c:	f003 030f 	and.w	r3, r3, #15
 800de80:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	7b5b      	ldrb	r3, [r3, #13]
 800de86:	f003 0302 	and.w	r3, r3, #2
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d011      	beq.n	800deb2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800de92:	68bb      	ldr	r3, [r7, #8]
 800de94:	691b      	ldr	r3, [r3, #16]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d106      	bne.n	800dea8 <pbuf_free+0x9c>
 800de9a:	4b1d      	ldr	r3, [pc, #116]	; (800df10 <pbuf_free+0x104>)
 800de9c:	f240 22ff 	movw	r2, #767	; 0x2ff
 800dea0:	491f      	ldr	r1, [pc, #124]	; (800df20 <pbuf_free+0x114>)
 800dea2:	481d      	ldr	r0, [pc, #116]	; (800df18 <pbuf_free+0x10c>)
 800dea4:	f009 f952 	bl	801714c <iprintf>
        pc->custom_free_function(p);
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	691b      	ldr	r3, [r3, #16]
 800deac:	6878      	ldr	r0, [r7, #4]
 800deae:	4798      	blx	r3
 800deb0:	e01d      	b.n	800deee <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800deb2:	7bfb      	ldrb	r3, [r7, #15]
 800deb4:	2b02      	cmp	r3, #2
 800deb6:	d104      	bne.n	800dec2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800deb8:	6879      	ldr	r1, [r7, #4]
 800deba:	200b      	movs	r0, #11
 800debc:	f7ff f8d8 	bl	800d070 <memp_free>
 800dec0:	e015      	b.n	800deee <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800dec2:	7bfb      	ldrb	r3, [r7, #15]
 800dec4:	2b01      	cmp	r3, #1
 800dec6:	d104      	bne.n	800ded2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800dec8:	6879      	ldr	r1, [r7, #4]
 800deca:	200a      	movs	r0, #10
 800decc:	f7ff f8d0 	bl	800d070 <memp_free>
 800ded0:	e00d      	b.n	800deee <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800ded2:	7bfb      	ldrb	r3, [r7, #15]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d103      	bne.n	800dee0 <pbuf_free+0xd4>
          mem_free(p);
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f7fe fd5b 	bl	800c994 <mem_free>
 800dede:	e006      	b.n	800deee <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800dee0:	4b0b      	ldr	r3, [pc, #44]	; (800df10 <pbuf_free+0x104>)
 800dee2:	f240 320f 	movw	r2, #783	; 0x30f
 800dee6:	490f      	ldr	r1, [pc, #60]	; (800df24 <pbuf_free+0x118>)
 800dee8:	480b      	ldr	r0, [pc, #44]	; (800df18 <pbuf_free+0x10c>)
 800deea:	f009 f92f 	bl	801714c <iprintf>
        }
      }
      count++;
 800deee:	7ffb      	ldrb	r3, [r7, #31]
 800def0:	3301      	adds	r3, #1
 800def2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800def4:	693b      	ldr	r3, [r7, #16]
 800def6:	607b      	str	r3, [r7, #4]
 800def8:	e001      	b.n	800defe <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800defa:	2300      	movs	r3, #0
 800defc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d199      	bne.n	800de38 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800df04:	7ffb      	ldrb	r3, [r7, #31]
}
 800df06:	4618      	mov	r0, r3
 800df08:	3720      	adds	r7, #32
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}
 800df0e:	bf00      	nop
 800df10:	08019708 	.word	0x08019708
 800df14:	0801986c 	.word	0x0801986c
 800df18:	08019768 	.word	0x08019768
 800df1c:	08019898 	.word	0x08019898
 800df20:	080198b0 	.word	0x080198b0
 800df24:	080198d4 	.word	0x080198d4

0800df28 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800df28:	b480      	push	{r7}
 800df2a:	b085      	sub	sp, #20
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800df30:	2300      	movs	r3, #0
 800df32:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800df34:	e005      	b.n	800df42 <pbuf_clen+0x1a>
    ++len;
 800df36:	89fb      	ldrh	r3, [r7, #14]
 800df38:	3301      	adds	r3, #1
 800df3a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d1f6      	bne.n	800df36 <pbuf_clen+0xe>
  }
  return len;
 800df48:	89fb      	ldrh	r3, [r7, #14]
}
 800df4a:	4618      	mov	r0, r3
 800df4c:	3714      	adds	r7, #20
 800df4e:	46bd      	mov	sp, r7
 800df50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df54:	4770      	bx	lr
	...

0800df58 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b084      	sub	sp, #16
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d016      	beq.n	800df94 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800df66:	f009 f85f 	bl	8017028 <sys_arch_protect>
 800df6a:	60f8      	str	r0, [r7, #12]
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	7b9b      	ldrb	r3, [r3, #14]
 800df70:	3301      	adds	r3, #1
 800df72:	b2da      	uxtb	r2, r3
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	739a      	strb	r2, [r3, #14]
 800df78:	68f8      	ldr	r0, [r7, #12]
 800df7a:	f009 f863 	bl	8017044 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	7b9b      	ldrb	r3, [r3, #14]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d106      	bne.n	800df94 <pbuf_ref+0x3c>
 800df86:	4b05      	ldr	r3, [pc, #20]	; (800df9c <pbuf_ref+0x44>)
 800df88:	f240 3242 	movw	r2, #834	; 0x342
 800df8c:	4904      	ldr	r1, [pc, #16]	; (800dfa0 <pbuf_ref+0x48>)
 800df8e:	4805      	ldr	r0, [pc, #20]	; (800dfa4 <pbuf_ref+0x4c>)
 800df90:	f009 f8dc 	bl	801714c <iprintf>
  }
}
 800df94:	bf00      	nop
 800df96:	3710      	adds	r7, #16
 800df98:	46bd      	mov	sp, r7
 800df9a:	bd80      	pop	{r7, pc}
 800df9c:	08019708 	.word	0x08019708
 800dfa0:	080198e8 	.word	0x080198e8
 800dfa4:	08019768 	.word	0x08019768

0800dfa8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b084      	sub	sp, #16
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
 800dfb0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d002      	beq.n	800dfbe <pbuf_cat+0x16>
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d107      	bne.n	800dfce <pbuf_cat+0x26>
 800dfbe:	4b20      	ldr	r3, [pc, #128]	; (800e040 <pbuf_cat+0x98>)
 800dfc0:	f240 325a 	movw	r2, #858	; 0x35a
 800dfc4:	491f      	ldr	r1, [pc, #124]	; (800e044 <pbuf_cat+0x9c>)
 800dfc6:	4820      	ldr	r0, [pc, #128]	; (800e048 <pbuf_cat+0xa0>)
 800dfc8:	f009 f8c0 	bl	801714c <iprintf>
 800dfcc:	e034      	b.n	800e038 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	60fb      	str	r3, [r7, #12]
 800dfd2:	e00a      	b.n	800dfea <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	891a      	ldrh	r2, [r3, #8]
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	891b      	ldrh	r3, [r3, #8]
 800dfdc:	4413      	add	r3, r2
 800dfde:	b29a      	uxth	r2, r3
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	60fb      	str	r3, [r7, #12]
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d1f0      	bne.n	800dfd4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	891a      	ldrh	r2, [r3, #8]
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	895b      	ldrh	r3, [r3, #10]
 800dffa:	429a      	cmp	r2, r3
 800dffc:	d006      	beq.n	800e00c <pbuf_cat+0x64>
 800dffe:	4b10      	ldr	r3, [pc, #64]	; (800e040 <pbuf_cat+0x98>)
 800e000:	f240 3262 	movw	r2, #866	; 0x362
 800e004:	4911      	ldr	r1, [pc, #68]	; (800e04c <pbuf_cat+0xa4>)
 800e006:	4810      	ldr	r0, [pc, #64]	; (800e048 <pbuf_cat+0xa0>)
 800e008:	f009 f8a0 	bl	801714c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d006      	beq.n	800e022 <pbuf_cat+0x7a>
 800e014:	4b0a      	ldr	r3, [pc, #40]	; (800e040 <pbuf_cat+0x98>)
 800e016:	f240 3263 	movw	r2, #867	; 0x363
 800e01a:	490d      	ldr	r1, [pc, #52]	; (800e050 <pbuf_cat+0xa8>)
 800e01c:	480a      	ldr	r0, [pc, #40]	; (800e048 <pbuf_cat+0xa0>)
 800e01e:	f009 f895 	bl	801714c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	891a      	ldrh	r2, [r3, #8]
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	891b      	ldrh	r3, [r3, #8]
 800e02a:	4413      	add	r3, r2
 800e02c:	b29a      	uxth	r2, r3
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	683a      	ldr	r2, [r7, #0]
 800e036:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e038:	3710      	adds	r7, #16
 800e03a:	46bd      	mov	sp, r7
 800e03c:	bd80      	pop	{r7, pc}
 800e03e:	bf00      	nop
 800e040:	08019708 	.word	0x08019708
 800e044:	080198fc 	.word	0x080198fc
 800e048:	08019768 	.word	0x08019768
 800e04c:	08019934 	.word	0x08019934
 800e050:	08019964 	.word	0x08019964

0800e054 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b086      	sub	sp, #24
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
 800e05c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e05e:	2300      	movs	r3, #0
 800e060:	617b      	str	r3, [r7, #20]
 800e062:	2300      	movs	r3, #0
 800e064:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d008      	beq.n	800e07e <pbuf_copy+0x2a>
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d005      	beq.n	800e07e <pbuf_copy+0x2a>
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	891a      	ldrh	r2, [r3, #8]
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	891b      	ldrh	r3, [r3, #8]
 800e07a:	429a      	cmp	r2, r3
 800e07c:	d209      	bcs.n	800e092 <pbuf_copy+0x3e>
 800e07e:	4b57      	ldr	r3, [pc, #348]	; (800e1dc <pbuf_copy+0x188>)
 800e080:	f240 32ca 	movw	r2, #970	; 0x3ca
 800e084:	4956      	ldr	r1, [pc, #344]	; (800e1e0 <pbuf_copy+0x18c>)
 800e086:	4857      	ldr	r0, [pc, #348]	; (800e1e4 <pbuf_copy+0x190>)
 800e088:	f009 f860 	bl	801714c <iprintf>
 800e08c:	f06f 030f 	mvn.w	r3, #15
 800e090:	e09f      	b.n	800e1d2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	895b      	ldrh	r3, [r3, #10]
 800e096:	461a      	mov	r2, r3
 800e098:	697b      	ldr	r3, [r7, #20]
 800e09a:	1ad2      	subs	r2, r2, r3
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	895b      	ldrh	r3, [r3, #10]
 800e0a0:	4619      	mov	r1, r3
 800e0a2:	693b      	ldr	r3, [r7, #16]
 800e0a4:	1acb      	subs	r3, r1, r3
 800e0a6:	429a      	cmp	r2, r3
 800e0a8:	d306      	bcc.n	800e0b8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e0aa:	683b      	ldr	r3, [r7, #0]
 800e0ac:	895b      	ldrh	r3, [r3, #10]
 800e0ae:	461a      	mov	r2, r3
 800e0b0:	693b      	ldr	r3, [r7, #16]
 800e0b2:	1ad3      	subs	r3, r2, r3
 800e0b4:	60fb      	str	r3, [r7, #12]
 800e0b6:	e005      	b.n	800e0c4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	895b      	ldrh	r3, [r3, #10]
 800e0bc:	461a      	mov	r2, r3
 800e0be:	697b      	ldr	r3, [r7, #20]
 800e0c0:	1ad3      	subs	r3, r2, r3
 800e0c2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	685a      	ldr	r2, [r3, #4]
 800e0c8:	697b      	ldr	r3, [r7, #20]
 800e0ca:	18d0      	adds	r0, r2, r3
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	685a      	ldr	r2, [r3, #4]
 800e0d0:	693b      	ldr	r3, [r7, #16]
 800e0d2:	4413      	add	r3, r2
 800e0d4:	68fa      	ldr	r2, [r7, #12]
 800e0d6:	4619      	mov	r1, r3
 800e0d8:	f009 f80b 	bl	80170f2 <memcpy>
    offset_to += len;
 800e0dc:	697a      	ldr	r2, [r7, #20]
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	4413      	add	r3, r2
 800e0e2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e0e4:	693a      	ldr	r2, [r7, #16]
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	4413      	add	r3, r2
 800e0ea:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	895b      	ldrh	r3, [r3, #10]
 800e0f0:	461a      	mov	r2, r3
 800e0f2:	697b      	ldr	r3, [r7, #20]
 800e0f4:	4293      	cmp	r3, r2
 800e0f6:	d906      	bls.n	800e106 <pbuf_copy+0xb2>
 800e0f8:	4b38      	ldr	r3, [pc, #224]	; (800e1dc <pbuf_copy+0x188>)
 800e0fa:	f240 32d9 	movw	r2, #985	; 0x3d9
 800e0fe:	493a      	ldr	r1, [pc, #232]	; (800e1e8 <pbuf_copy+0x194>)
 800e100:	4838      	ldr	r0, [pc, #224]	; (800e1e4 <pbuf_copy+0x190>)
 800e102:	f009 f823 	bl	801714c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	895b      	ldrh	r3, [r3, #10]
 800e10a:	461a      	mov	r2, r3
 800e10c:	693b      	ldr	r3, [r7, #16]
 800e10e:	4293      	cmp	r3, r2
 800e110:	d906      	bls.n	800e120 <pbuf_copy+0xcc>
 800e112:	4b32      	ldr	r3, [pc, #200]	; (800e1dc <pbuf_copy+0x188>)
 800e114:	f240 32da 	movw	r2, #986	; 0x3da
 800e118:	4934      	ldr	r1, [pc, #208]	; (800e1ec <pbuf_copy+0x198>)
 800e11a:	4832      	ldr	r0, [pc, #200]	; (800e1e4 <pbuf_copy+0x190>)
 800e11c:	f009 f816 	bl	801714c <iprintf>
    if (offset_from >= p_from->len) {
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	895b      	ldrh	r3, [r3, #10]
 800e124:	461a      	mov	r2, r3
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	4293      	cmp	r3, r2
 800e12a:	d304      	bcc.n	800e136 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e12c:	2300      	movs	r3, #0
 800e12e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	895b      	ldrh	r3, [r3, #10]
 800e13a:	461a      	mov	r2, r3
 800e13c:	697b      	ldr	r3, [r7, #20]
 800e13e:	4293      	cmp	r3, r2
 800e140:	d114      	bne.n	800e16c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e142:	2300      	movs	r3, #0
 800e144:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d10c      	bne.n	800e16c <pbuf_copy+0x118>
 800e152:	683b      	ldr	r3, [r7, #0]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d009      	beq.n	800e16c <pbuf_copy+0x118>
 800e158:	4b20      	ldr	r3, [pc, #128]	; (800e1dc <pbuf_copy+0x188>)
 800e15a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800e15e:	4924      	ldr	r1, [pc, #144]	; (800e1f0 <pbuf_copy+0x19c>)
 800e160:	4820      	ldr	r0, [pc, #128]	; (800e1e4 <pbuf_copy+0x190>)
 800e162:	f008 fff3 	bl	801714c <iprintf>
 800e166:	f06f 030f 	mvn.w	r3, #15
 800e16a:	e032      	b.n	800e1d2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d013      	beq.n	800e19a <pbuf_copy+0x146>
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	895a      	ldrh	r2, [r3, #10]
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	891b      	ldrh	r3, [r3, #8]
 800e17a:	429a      	cmp	r2, r3
 800e17c:	d10d      	bne.n	800e19a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d009      	beq.n	800e19a <pbuf_copy+0x146>
 800e186:	4b15      	ldr	r3, [pc, #84]	; (800e1dc <pbuf_copy+0x188>)
 800e188:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800e18c:	4919      	ldr	r1, [pc, #100]	; (800e1f4 <pbuf_copy+0x1a0>)
 800e18e:	4815      	ldr	r0, [pc, #84]	; (800e1e4 <pbuf_copy+0x190>)
 800e190:	f008 ffdc 	bl	801714c <iprintf>
 800e194:	f06f 0305 	mvn.w	r3, #5
 800e198:	e01b      	b.n	800e1d2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d013      	beq.n	800e1c8 <pbuf_copy+0x174>
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	895a      	ldrh	r2, [r3, #10]
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	891b      	ldrh	r3, [r3, #8]
 800e1a8:	429a      	cmp	r2, r3
 800e1aa:	d10d      	bne.n	800e1c8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d009      	beq.n	800e1c8 <pbuf_copy+0x174>
 800e1b4:	4b09      	ldr	r3, [pc, #36]	; (800e1dc <pbuf_copy+0x188>)
 800e1b6:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800e1ba:	490e      	ldr	r1, [pc, #56]	; (800e1f4 <pbuf_copy+0x1a0>)
 800e1bc:	4809      	ldr	r0, [pc, #36]	; (800e1e4 <pbuf_copy+0x190>)
 800e1be:	f008 ffc5 	bl	801714c <iprintf>
 800e1c2:	f06f 0305 	mvn.w	r3, #5
 800e1c6:	e004      	b.n	800e1d2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	f47f af61 	bne.w	800e092 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e1d0:	2300      	movs	r3, #0
}
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	3718      	adds	r7, #24
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	bd80      	pop	{r7, pc}
 800e1da:	bf00      	nop
 800e1dc:	08019708 	.word	0x08019708
 800e1e0:	080199b0 	.word	0x080199b0
 800e1e4:	08019768 	.word	0x08019768
 800e1e8:	080199e0 	.word	0x080199e0
 800e1ec:	080199f8 	.word	0x080199f8
 800e1f0:	08019a14 	.word	0x08019a14
 800e1f4:	08019a24 	.word	0x08019a24

0800e1f8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b088      	sub	sp, #32
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	60f8      	str	r0, [r7, #12]
 800e200:	60b9      	str	r1, [r7, #8]
 800e202:	4611      	mov	r1, r2
 800e204:	461a      	mov	r2, r3
 800e206:	460b      	mov	r3, r1
 800e208:	80fb      	strh	r3, [r7, #6]
 800e20a:	4613      	mov	r3, r2
 800e20c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e20e:	2300      	movs	r3, #0
 800e210:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e212:	2300      	movs	r3, #0
 800e214:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d108      	bne.n	800e22e <pbuf_copy_partial+0x36>
 800e21c:	4b2b      	ldr	r3, [pc, #172]	; (800e2cc <pbuf_copy_partial+0xd4>)
 800e21e:	f240 420a 	movw	r2, #1034	; 0x40a
 800e222:	492b      	ldr	r1, [pc, #172]	; (800e2d0 <pbuf_copy_partial+0xd8>)
 800e224:	482b      	ldr	r0, [pc, #172]	; (800e2d4 <pbuf_copy_partial+0xdc>)
 800e226:	f008 ff91 	bl	801714c <iprintf>
 800e22a:	2300      	movs	r3, #0
 800e22c:	e04a      	b.n	800e2c4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e22e:	68bb      	ldr	r3, [r7, #8]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d108      	bne.n	800e246 <pbuf_copy_partial+0x4e>
 800e234:	4b25      	ldr	r3, [pc, #148]	; (800e2cc <pbuf_copy_partial+0xd4>)
 800e236:	f240 420b 	movw	r2, #1035	; 0x40b
 800e23a:	4927      	ldr	r1, [pc, #156]	; (800e2d8 <pbuf_copy_partial+0xe0>)
 800e23c:	4825      	ldr	r0, [pc, #148]	; (800e2d4 <pbuf_copy_partial+0xdc>)
 800e23e:	f008 ff85 	bl	801714c <iprintf>
 800e242:	2300      	movs	r3, #0
 800e244:	e03e      	b.n	800e2c4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	61fb      	str	r3, [r7, #28]
 800e24a:	e034      	b.n	800e2b6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e24c:	88bb      	ldrh	r3, [r7, #4]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d00a      	beq.n	800e268 <pbuf_copy_partial+0x70>
 800e252:	69fb      	ldr	r3, [r7, #28]
 800e254:	895b      	ldrh	r3, [r3, #10]
 800e256:	88ba      	ldrh	r2, [r7, #4]
 800e258:	429a      	cmp	r2, r3
 800e25a:	d305      	bcc.n	800e268 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e25c:	69fb      	ldr	r3, [r7, #28]
 800e25e:	895b      	ldrh	r3, [r3, #10]
 800e260:	88ba      	ldrh	r2, [r7, #4]
 800e262:	1ad3      	subs	r3, r2, r3
 800e264:	80bb      	strh	r3, [r7, #4]
 800e266:	e023      	b.n	800e2b0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e268:	69fb      	ldr	r3, [r7, #28]
 800e26a:	895a      	ldrh	r2, [r3, #10]
 800e26c:	88bb      	ldrh	r3, [r7, #4]
 800e26e:	1ad3      	subs	r3, r2, r3
 800e270:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e272:	8b3a      	ldrh	r2, [r7, #24]
 800e274:	88fb      	ldrh	r3, [r7, #6]
 800e276:	429a      	cmp	r2, r3
 800e278:	d901      	bls.n	800e27e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e27a:	88fb      	ldrh	r3, [r7, #6]
 800e27c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e27e:	8b7b      	ldrh	r3, [r7, #26]
 800e280:	68ba      	ldr	r2, [r7, #8]
 800e282:	18d0      	adds	r0, r2, r3
 800e284:	69fb      	ldr	r3, [r7, #28]
 800e286:	685a      	ldr	r2, [r3, #4]
 800e288:	88bb      	ldrh	r3, [r7, #4]
 800e28a:	4413      	add	r3, r2
 800e28c:	8b3a      	ldrh	r2, [r7, #24]
 800e28e:	4619      	mov	r1, r3
 800e290:	f008 ff2f 	bl	80170f2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e294:	8afa      	ldrh	r2, [r7, #22]
 800e296:	8b3b      	ldrh	r3, [r7, #24]
 800e298:	4413      	add	r3, r2
 800e29a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e29c:	8b7a      	ldrh	r2, [r7, #26]
 800e29e:	8b3b      	ldrh	r3, [r7, #24]
 800e2a0:	4413      	add	r3, r2
 800e2a2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e2a4:	88fa      	ldrh	r2, [r7, #6]
 800e2a6:	8b3b      	ldrh	r3, [r7, #24]
 800e2a8:	1ad3      	subs	r3, r2, r3
 800e2aa:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e2b0:	69fb      	ldr	r3, [r7, #28]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	61fb      	str	r3, [r7, #28]
 800e2b6:	88fb      	ldrh	r3, [r7, #6]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d002      	beq.n	800e2c2 <pbuf_copy_partial+0xca>
 800e2bc:	69fb      	ldr	r3, [r7, #28]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d1c4      	bne.n	800e24c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e2c2:	8afb      	ldrh	r3, [r7, #22]
}
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	3720      	adds	r7, #32
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	bd80      	pop	{r7, pc}
 800e2cc:	08019708 	.word	0x08019708
 800e2d0:	08019a50 	.word	0x08019a50
 800e2d4:	08019768 	.word	0x08019768
 800e2d8:	08019a70 	.word	0x08019a70

0800e2dc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b084      	sub	sp, #16
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	603a      	str	r2, [r7, #0]
 800e2e6:	71fb      	strb	r3, [r7, #7]
 800e2e8:	460b      	mov	r3, r1
 800e2ea:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e2ec:	683b      	ldr	r3, [r7, #0]
 800e2ee:	8919      	ldrh	r1, [r3, #8]
 800e2f0:	88ba      	ldrh	r2, [r7, #4]
 800e2f2:	79fb      	ldrb	r3, [r7, #7]
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f7ff fa77 	bl	800d7e8 <pbuf_alloc>
 800e2fa:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d101      	bne.n	800e306 <pbuf_clone+0x2a>
    return NULL;
 800e302:	2300      	movs	r3, #0
 800e304:	e011      	b.n	800e32a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e306:	6839      	ldr	r1, [r7, #0]
 800e308:	68f8      	ldr	r0, [r7, #12]
 800e30a:	f7ff fea3 	bl	800e054 <pbuf_copy>
 800e30e:	4603      	mov	r3, r0
 800e310:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e312:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d006      	beq.n	800e328 <pbuf_clone+0x4c>
 800e31a:	4b06      	ldr	r3, [pc, #24]	; (800e334 <pbuf_clone+0x58>)
 800e31c:	f240 5224 	movw	r2, #1316	; 0x524
 800e320:	4905      	ldr	r1, [pc, #20]	; (800e338 <pbuf_clone+0x5c>)
 800e322:	4806      	ldr	r0, [pc, #24]	; (800e33c <pbuf_clone+0x60>)
 800e324:	f008 ff12 	bl	801714c <iprintf>
  return q;
 800e328:	68fb      	ldr	r3, [r7, #12]
}
 800e32a:	4618      	mov	r0, r3
 800e32c:	3710      	adds	r7, #16
 800e32e:	46bd      	mov	sp, r7
 800e330:	bd80      	pop	{r7, pc}
 800e332:	bf00      	nop
 800e334:	08019708 	.word	0x08019708
 800e338:	08019b7c 	.word	0x08019b7c
 800e33c:	08019768 	.word	0x08019768

0800e340 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e344:	f008 ff1a 	bl	801717c <rand>
 800e348:	4603      	mov	r3, r0
 800e34a:	b29b      	uxth	r3, r3
 800e34c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e350:	b29b      	uxth	r3, r3
 800e352:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e356:	b29a      	uxth	r2, r3
 800e358:	4b01      	ldr	r3, [pc, #4]	; (800e360 <tcp_init+0x20>)
 800e35a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e35c:	bf00      	nop
 800e35e:	bd80      	pop	{r7, pc}
 800e360:	20000010 	.word	0x20000010

0800e364 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b082      	sub	sp, #8
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	7d1b      	ldrb	r3, [r3, #20]
 800e370:	2b01      	cmp	r3, #1
 800e372:	d105      	bne.n	800e380 <tcp_free+0x1c>
 800e374:	4b06      	ldr	r3, [pc, #24]	; (800e390 <tcp_free+0x2c>)
 800e376:	22d4      	movs	r2, #212	; 0xd4
 800e378:	4906      	ldr	r1, [pc, #24]	; (800e394 <tcp_free+0x30>)
 800e37a:	4807      	ldr	r0, [pc, #28]	; (800e398 <tcp_free+0x34>)
 800e37c:	f008 fee6 	bl	801714c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e380:	6879      	ldr	r1, [r7, #4]
 800e382:	2000      	movs	r0, #0
 800e384:	f7fe fe74 	bl	800d070 <memp_free>
}
 800e388:	bf00      	nop
 800e38a:	3708      	adds	r7, #8
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd80      	pop	{r7, pc}
 800e390:	08019c08 	.word	0x08019c08
 800e394:	08019c38 	.word	0x08019c38
 800e398:	08019c4c 	.word	0x08019c4c

0800e39c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b082      	sub	sp, #8
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	7d1b      	ldrb	r3, [r3, #20]
 800e3a8:	2b01      	cmp	r3, #1
 800e3aa:	d105      	bne.n	800e3b8 <tcp_free_listen+0x1c>
 800e3ac:	4b06      	ldr	r3, [pc, #24]	; (800e3c8 <tcp_free_listen+0x2c>)
 800e3ae:	22df      	movs	r2, #223	; 0xdf
 800e3b0:	4906      	ldr	r1, [pc, #24]	; (800e3cc <tcp_free_listen+0x30>)
 800e3b2:	4807      	ldr	r0, [pc, #28]	; (800e3d0 <tcp_free_listen+0x34>)
 800e3b4:	f008 feca 	bl	801714c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e3b8:	6879      	ldr	r1, [r7, #4]
 800e3ba:	2001      	movs	r0, #1
 800e3bc:	f7fe fe58 	bl	800d070 <memp_free>
}
 800e3c0:	bf00      	nop
 800e3c2:	3708      	adds	r7, #8
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bd80      	pop	{r7, pc}
 800e3c8:	08019c08 	.word	0x08019c08
 800e3cc:	08019c74 	.word	0x08019c74
 800e3d0:	08019c4c 	.word	0x08019c4c

0800e3d4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e3d8:	f001 f89a 	bl	800f510 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e3dc:	4b07      	ldr	r3, [pc, #28]	; (800e3fc <tcp_tmr+0x28>)
 800e3de:	781b      	ldrb	r3, [r3, #0]
 800e3e0:	3301      	adds	r3, #1
 800e3e2:	b2da      	uxtb	r2, r3
 800e3e4:	4b05      	ldr	r3, [pc, #20]	; (800e3fc <tcp_tmr+0x28>)
 800e3e6:	701a      	strb	r2, [r3, #0]
 800e3e8:	4b04      	ldr	r3, [pc, #16]	; (800e3fc <tcp_tmr+0x28>)
 800e3ea:	781b      	ldrb	r3, [r3, #0]
 800e3ec:	f003 0301 	and.w	r3, r3, #1
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d001      	beq.n	800e3f8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e3f4:	f000 fd4e 	bl	800ee94 <tcp_slowtmr>
  }
}
 800e3f8:	bf00      	nop
 800e3fa:	bd80      	pop	{r7, pc}
 800e3fc:	20004649 	.word	0x20004649

0800e400 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b084      	sub	sp, #16
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
 800e408:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d105      	bne.n	800e41c <tcp_remove_listener+0x1c>
 800e410:	4b0d      	ldr	r3, [pc, #52]	; (800e448 <tcp_remove_listener+0x48>)
 800e412:	22ff      	movs	r2, #255	; 0xff
 800e414:	490d      	ldr	r1, [pc, #52]	; (800e44c <tcp_remove_listener+0x4c>)
 800e416:	480e      	ldr	r0, [pc, #56]	; (800e450 <tcp_remove_listener+0x50>)
 800e418:	f008 fe98 	bl	801714c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	60fb      	str	r3, [r7, #12]
 800e420:	e00a      	b.n	800e438 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e426:	683a      	ldr	r2, [r7, #0]
 800e428:	429a      	cmp	r2, r3
 800e42a:	d102      	bne.n	800e432 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	2200      	movs	r2, #0
 800e430:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	68db      	ldr	r3, [r3, #12]
 800e436:	60fb      	str	r3, [r7, #12]
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d1f1      	bne.n	800e422 <tcp_remove_listener+0x22>
    }
  }
}
 800e43e:	bf00      	nop
 800e440:	3710      	adds	r7, #16
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}
 800e446:	bf00      	nop
 800e448:	08019c08 	.word	0x08019c08
 800e44c:	08019c90 	.word	0x08019c90
 800e450:	08019c4c 	.word	0x08019c4c

0800e454 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b084      	sub	sp, #16
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d106      	bne.n	800e470 <tcp_listen_closed+0x1c>
 800e462:	4b14      	ldr	r3, [pc, #80]	; (800e4b4 <tcp_listen_closed+0x60>)
 800e464:	f240 1211 	movw	r2, #273	; 0x111
 800e468:	4913      	ldr	r1, [pc, #76]	; (800e4b8 <tcp_listen_closed+0x64>)
 800e46a:	4814      	ldr	r0, [pc, #80]	; (800e4bc <tcp_listen_closed+0x68>)
 800e46c:	f008 fe6e 	bl	801714c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	7d1b      	ldrb	r3, [r3, #20]
 800e474:	2b01      	cmp	r3, #1
 800e476:	d006      	beq.n	800e486 <tcp_listen_closed+0x32>
 800e478:	4b0e      	ldr	r3, [pc, #56]	; (800e4b4 <tcp_listen_closed+0x60>)
 800e47a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800e47e:	4910      	ldr	r1, [pc, #64]	; (800e4c0 <tcp_listen_closed+0x6c>)
 800e480:	480e      	ldr	r0, [pc, #56]	; (800e4bc <tcp_listen_closed+0x68>)
 800e482:	f008 fe63 	bl	801714c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e486:	2301      	movs	r3, #1
 800e488:	60fb      	str	r3, [r7, #12]
 800e48a:	e00b      	b.n	800e4a4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e48c:	4a0d      	ldr	r2, [pc, #52]	; (800e4c4 <tcp_listen_closed+0x70>)
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	6879      	ldr	r1, [r7, #4]
 800e498:	4618      	mov	r0, r3
 800e49a:	f7ff ffb1 	bl	800e400 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	3301      	adds	r3, #1
 800e4a2:	60fb      	str	r3, [r7, #12]
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	2b03      	cmp	r3, #3
 800e4a8:	d9f0      	bls.n	800e48c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e4aa:	bf00      	nop
 800e4ac:	3710      	adds	r7, #16
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}
 800e4b2:	bf00      	nop
 800e4b4:	08019c08 	.word	0x08019c08
 800e4b8:	08019cb8 	.word	0x08019cb8
 800e4bc:	08019c4c 	.word	0x08019c4c
 800e4c0:	08019cc4 	.word	0x08019cc4
 800e4c4:	0801b8f0 	.word	0x0801b8f0

0800e4c8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e4c8:	b5b0      	push	{r4, r5, r7, lr}
 800e4ca:	b088      	sub	sp, #32
 800e4cc:	af04      	add	r7, sp, #16
 800e4ce:	6078      	str	r0, [r7, #4]
 800e4d0:	460b      	mov	r3, r1
 800e4d2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d106      	bne.n	800e4e8 <tcp_close_shutdown+0x20>
 800e4da:	4b61      	ldr	r3, [pc, #388]	; (800e660 <tcp_close_shutdown+0x198>)
 800e4dc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800e4e0:	4960      	ldr	r1, [pc, #384]	; (800e664 <tcp_close_shutdown+0x19c>)
 800e4e2:	4861      	ldr	r0, [pc, #388]	; (800e668 <tcp_close_shutdown+0x1a0>)
 800e4e4:	f008 fe32 	bl	801714c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e4e8:	78fb      	ldrb	r3, [r7, #3]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d066      	beq.n	800e5bc <tcp_close_shutdown+0xf4>
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	7d1b      	ldrb	r3, [r3, #20]
 800e4f2:	2b04      	cmp	r3, #4
 800e4f4:	d003      	beq.n	800e4fe <tcp_close_shutdown+0x36>
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	7d1b      	ldrb	r3, [r3, #20]
 800e4fa:	2b07      	cmp	r3, #7
 800e4fc:	d15e      	bne.n	800e5bc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e502:	2b00      	cmp	r3, #0
 800e504:	d104      	bne.n	800e510 <tcp_close_shutdown+0x48>
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e50a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e50e:	d055      	beq.n	800e5bc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	8b5b      	ldrh	r3, [r3, #26]
 800e514:	f003 0310 	and.w	r3, r3, #16
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d106      	bne.n	800e52a <tcp_close_shutdown+0x62>
 800e51c:	4b50      	ldr	r3, [pc, #320]	; (800e660 <tcp_close_shutdown+0x198>)
 800e51e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800e522:	4952      	ldr	r1, [pc, #328]	; (800e66c <tcp_close_shutdown+0x1a4>)
 800e524:	4850      	ldr	r0, [pc, #320]	; (800e668 <tcp_close_shutdown+0x1a0>)
 800e526:	f008 fe11 	bl	801714c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e532:	687d      	ldr	r5, [r7, #4]
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	3304      	adds	r3, #4
 800e538:	687a      	ldr	r2, [r7, #4]
 800e53a:	8ad2      	ldrh	r2, [r2, #22]
 800e53c:	6879      	ldr	r1, [r7, #4]
 800e53e:	8b09      	ldrh	r1, [r1, #24]
 800e540:	9102      	str	r1, [sp, #8]
 800e542:	9201      	str	r2, [sp, #4]
 800e544:	9300      	str	r3, [sp, #0]
 800e546:	462b      	mov	r3, r5
 800e548:	4622      	mov	r2, r4
 800e54a:	4601      	mov	r1, r0
 800e54c:	6878      	ldr	r0, [r7, #4]
 800e54e:	f005 fdbb 	bl	80140c8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e552:	6878      	ldr	r0, [r7, #4]
 800e554:	f001 fb8a 	bl	800fc6c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e558:	4b45      	ldr	r3, [pc, #276]	; (800e670 <tcp_close_shutdown+0x1a8>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	687a      	ldr	r2, [r7, #4]
 800e55e:	429a      	cmp	r2, r3
 800e560:	d105      	bne.n	800e56e <tcp_close_shutdown+0xa6>
 800e562:	4b43      	ldr	r3, [pc, #268]	; (800e670 <tcp_close_shutdown+0x1a8>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	68db      	ldr	r3, [r3, #12]
 800e568:	4a41      	ldr	r2, [pc, #260]	; (800e670 <tcp_close_shutdown+0x1a8>)
 800e56a:	6013      	str	r3, [r2, #0]
 800e56c:	e013      	b.n	800e596 <tcp_close_shutdown+0xce>
 800e56e:	4b40      	ldr	r3, [pc, #256]	; (800e670 <tcp_close_shutdown+0x1a8>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	60fb      	str	r3, [r7, #12]
 800e574:	e00c      	b.n	800e590 <tcp_close_shutdown+0xc8>
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	68db      	ldr	r3, [r3, #12]
 800e57a:	687a      	ldr	r2, [r7, #4]
 800e57c:	429a      	cmp	r2, r3
 800e57e:	d104      	bne.n	800e58a <tcp_close_shutdown+0xc2>
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	68da      	ldr	r2, [r3, #12]
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	60da      	str	r2, [r3, #12]
 800e588:	e005      	b.n	800e596 <tcp_close_shutdown+0xce>
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	68db      	ldr	r3, [r3, #12]
 800e58e:	60fb      	str	r3, [r7, #12]
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d1ef      	bne.n	800e576 <tcp_close_shutdown+0xae>
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2200      	movs	r2, #0
 800e59a:	60da      	str	r2, [r3, #12]
 800e59c:	4b35      	ldr	r3, [pc, #212]	; (800e674 <tcp_close_shutdown+0x1ac>)
 800e59e:	2201      	movs	r2, #1
 800e5a0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e5a2:	4b35      	ldr	r3, [pc, #212]	; (800e678 <tcp_close_shutdown+0x1b0>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	687a      	ldr	r2, [r7, #4]
 800e5a8:	429a      	cmp	r2, r3
 800e5aa:	d102      	bne.n	800e5b2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e5ac:	f004 f81c 	bl	80125e8 <tcp_trigger_input_pcb_close>
 800e5b0:	e002      	b.n	800e5b8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f7ff fed6 	bl	800e364 <tcp_free>
      }
      return ERR_OK;
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	e04d      	b.n	800e658 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	7d1b      	ldrb	r3, [r3, #20]
 800e5c0:	2b01      	cmp	r3, #1
 800e5c2:	d02d      	beq.n	800e620 <tcp_close_shutdown+0x158>
 800e5c4:	2b02      	cmp	r3, #2
 800e5c6:	d036      	beq.n	800e636 <tcp_close_shutdown+0x16e>
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d13f      	bne.n	800e64c <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	8adb      	ldrh	r3, [r3, #22]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d021      	beq.n	800e618 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e5d4:	4b29      	ldr	r3, [pc, #164]	; (800e67c <tcp_close_shutdown+0x1b4>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	687a      	ldr	r2, [r7, #4]
 800e5da:	429a      	cmp	r2, r3
 800e5dc:	d105      	bne.n	800e5ea <tcp_close_shutdown+0x122>
 800e5de:	4b27      	ldr	r3, [pc, #156]	; (800e67c <tcp_close_shutdown+0x1b4>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	68db      	ldr	r3, [r3, #12]
 800e5e4:	4a25      	ldr	r2, [pc, #148]	; (800e67c <tcp_close_shutdown+0x1b4>)
 800e5e6:	6013      	str	r3, [r2, #0]
 800e5e8:	e013      	b.n	800e612 <tcp_close_shutdown+0x14a>
 800e5ea:	4b24      	ldr	r3, [pc, #144]	; (800e67c <tcp_close_shutdown+0x1b4>)
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	60bb      	str	r3, [r7, #8]
 800e5f0:	e00c      	b.n	800e60c <tcp_close_shutdown+0x144>
 800e5f2:	68bb      	ldr	r3, [r7, #8]
 800e5f4:	68db      	ldr	r3, [r3, #12]
 800e5f6:	687a      	ldr	r2, [r7, #4]
 800e5f8:	429a      	cmp	r2, r3
 800e5fa:	d104      	bne.n	800e606 <tcp_close_shutdown+0x13e>
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	68da      	ldr	r2, [r3, #12]
 800e600:	68bb      	ldr	r3, [r7, #8]
 800e602:	60da      	str	r2, [r3, #12]
 800e604:	e005      	b.n	800e612 <tcp_close_shutdown+0x14a>
 800e606:	68bb      	ldr	r3, [r7, #8]
 800e608:	68db      	ldr	r3, [r3, #12]
 800e60a:	60bb      	str	r3, [r7, #8]
 800e60c:	68bb      	ldr	r3, [r7, #8]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d1ef      	bne.n	800e5f2 <tcp_close_shutdown+0x12a>
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	2200      	movs	r2, #0
 800e616:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e618:	6878      	ldr	r0, [r7, #4]
 800e61a:	f7ff fea3 	bl	800e364 <tcp_free>
      break;
 800e61e:	e01a      	b.n	800e656 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e620:	6878      	ldr	r0, [r7, #4]
 800e622:	f7ff ff17 	bl	800e454 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e626:	6879      	ldr	r1, [r7, #4]
 800e628:	4815      	ldr	r0, [pc, #84]	; (800e680 <tcp_close_shutdown+0x1b8>)
 800e62a:	f001 fb6f 	bl	800fd0c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e62e:	6878      	ldr	r0, [r7, #4]
 800e630:	f7ff feb4 	bl	800e39c <tcp_free_listen>
      break;
 800e634:	e00f      	b.n	800e656 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e636:	6879      	ldr	r1, [r7, #4]
 800e638:	480d      	ldr	r0, [pc, #52]	; (800e670 <tcp_close_shutdown+0x1a8>)
 800e63a:	f001 fb67 	bl	800fd0c <tcp_pcb_remove>
 800e63e:	4b0d      	ldr	r3, [pc, #52]	; (800e674 <tcp_close_shutdown+0x1ac>)
 800e640:	2201      	movs	r2, #1
 800e642:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e644:	6878      	ldr	r0, [r7, #4]
 800e646:	f7ff fe8d 	bl	800e364 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e64a:	e004      	b.n	800e656 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	f000 f819 	bl	800e684 <tcp_close_shutdown_fin>
 800e652:	4603      	mov	r3, r0
 800e654:	e000      	b.n	800e658 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800e656:	2300      	movs	r3, #0
}
 800e658:	4618      	mov	r0, r3
 800e65a:	3710      	adds	r7, #16
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bdb0      	pop	{r4, r5, r7, pc}
 800e660:	08019c08 	.word	0x08019c08
 800e664:	08019cdc 	.word	0x08019cdc
 800e668:	08019c4c 	.word	0x08019c4c
 800e66c:	08019cfc 	.word	0x08019cfc
 800e670:	2000d240 	.word	0x2000d240
 800e674:	2000d23c 	.word	0x2000d23c
 800e678:	2000d254 	.word	0x2000d254
 800e67c:	2000d24c 	.word	0x2000d24c
 800e680:	2000d248 	.word	0x2000d248

0800e684 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b084      	sub	sp, #16
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d106      	bne.n	800e6a0 <tcp_close_shutdown_fin+0x1c>
 800e692:	4b2c      	ldr	r3, [pc, #176]	; (800e744 <tcp_close_shutdown_fin+0xc0>)
 800e694:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800e698:	492b      	ldr	r1, [pc, #172]	; (800e748 <tcp_close_shutdown_fin+0xc4>)
 800e69a:	482c      	ldr	r0, [pc, #176]	; (800e74c <tcp_close_shutdown_fin+0xc8>)
 800e69c:	f008 fd56 	bl	801714c <iprintf>

  switch (pcb->state) {
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	7d1b      	ldrb	r3, [r3, #20]
 800e6a4:	2b04      	cmp	r3, #4
 800e6a6:	d010      	beq.n	800e6ca <tcp_close_shutdown_fin+0x46>
 800e6a8:	2b07      	cmp	r3, #7
 800e6aa:	d01b      	beq.n	800e6e4 <tcp_close_shutdown_fin+0x60>
 800e6ac:	2b03      	cmp	r3, #3
 800e6ae:	d126      	bne.n	800e6fe <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e6b0:	6878      	ldr	r0, [r7, #4]
 800e6b2:	f004 fe05 	bl	80132c0 <tcp_send_fin>
 800e6b6:	4603      	mov	r3, r0
 800e6b8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e6ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d11f      	bne.n	800e702 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2205      	movs	r2, #5
 800e6c6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e6c8:	e01b      	b.n	800e702 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	f004 fdf8 	bl	80132c0 <tcp_send_fin>
 800e6d0:	4603      	mov	r3, r0
 800e6d2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e6d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d114      	bne.n	800e706 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2205      	movs	r2, #5
 800e6e0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e6e2:	e010      	b.n	800e706 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e6e4:	6878      	ldr	r0, [r7, #4]
 800e6e6:	f004 fdeb 	bl	80132c0 <tcp_send_fin>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e6ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d109      	bne.n	800e70a <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	2209      	movs	r2, #9
 800e6fa:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e6fc:	e005      	b.n	800e70a <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e6fe:	2300      	movs	r3, #0
 800e700:	e01c      	b.n	800e73c <tcp_close_shutdown_fin+0xb8>
      break;
 800e702:	bf00      	nop
 800e704:	e002      	b.n	800e70c <tcp_close_shutdown_fin+0x88>
      break;
 800e706:	bf00      	nop
 800e708:	e000      	b.n	800e70c <tcp_close_shutdown_fin+0x88>
      break;
 800e70a:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e70c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d103      	bne.n	800e71c <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e714:	6878      	ldr	r0, [r7, #4]
 800e716:	f004 ff11 	bl	801353c <tcp_output>
 800e71a:	e00d      	b.n	800e738 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800e71c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e720:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e724:	d108      	bne.n	800e738 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	8b5b      	ldrh	r3, [r3, #26]
 800e72a:	f043 0308 	orr.w	r3, r3, #8
 800e72e:	b29a      	uxth	r2, r3
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e734:	2300      	movs	r3, #0
 800e736:	e001      	b.n	800e73c <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800e738:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e73c:	4618      	mov	r0, r3
 800e73e:	3710      	adds	r7, #16
 800e740:	46bd      	mov	sp, r7
 800e742:	bd80      	pop	{r7, pc}
 800e744:	08019c08 	.word	0x08019c08
 800e748:	08019cb8 	.word	0x08019cb8
 800e74c:	08019c4c 	.word	0x08019c4c

0800e750 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b082      	sub	sp, #8
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d109      	bne.n	800e772 <tcp_close+0x22>
 800e75e:	4b0f      	ldr	r3, [pc, #60]	; (800e79c <tcp_close+0x4c>)
 800e760:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e764:	490e      	ldr	r1, [pc, #56]	; (800e7a0 <tcp_close+0x50>)
 800e766:	480f      	ldr	r0, [pc, #60]	; (800e7a4 <tcp_close+0x54>)
 800e768:	f008 fcf0 	bl	801714c <iprintf>
 800e76c:	f06f 030f 	mvn.w	r3, #15
 800e770:	e00f      	b.n	800e792 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	7d1b      	ldrb	r3, [r3, #20]
 800e776:	2b01      	cmp	r3, #1
 800e778:	d006      	beq.n	800e788 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	8b5b      	ldrh	r3, [r3, #26]
 800e77e:	f043 0310 	orr.w	r3, r3, #16
 800e782:	b29a      	uxth	r2, r3
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e788:	2101      	movs	r1, #1
 800e78a:	6878      	ldr	r0, [r7, #4]
 800e78c:	f7ff fe9c 	bl	800e4c8 <tcp_close_shutdown>
 800e790:	4603      	mov	r3, r0
}
 800e792:	4618      	mov	r0, r3
 800e794:	3708      	adds	r7, #8
 800e796:	46bd      	mov	sp, r7
 800e798:	bd80      	pop	{r7, pc}
 800e79a:	bf00      	nop
 800e79c:	08019c08 	.word	0x08019c08
 800e7a0:	08019d18 	.word	0x08019d18
 800e7a4:	08019c4c 	.word	0x08019c4c

0800e7a8 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b084      	sub	sp, #16
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	60f8      	str	r0, [r7, #12]
 800e7b0:	60b9      	str	r1, [r7, #8]
 800e7b2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d109      	bne.n	800e7ce <tcp_shutdown+0x26>
 800e7ba:	4b25      	ldr	r3, [pc, #148]	; (800e850 <tcp_shutdown+0xa8>)
 800e7bc:	f240 2207 	movw	r2, #519	; 0x207
 800e7c0:	4924      	ldr	r1, [pc, #144]	; (800e854 <tcp_shutdown+0xac>)
 800e7c2:	4825      	ldr	r0, [pc, #148]	; (800e858 <tcp_shutdown+0xb0>)
 800e7c4:	f008 fcc2 	bl	801714c <iprintf>
 800e7c8:	f06f 030f 	mvn.w	r3, #15
 800e7cc:	e03c      	b.n	800e848 <tcp_shutdown+0xa0>

  if (pcb->state == LISTEN) {
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	7d1b      	ldrb	r3, [r3, #20]
 800e7d2:	2b01      	cmp	r3, #1
 800e7d4:	d102      	bne.n	800e7dc <tcp_shutdown+0x34>
    return ERR_CONN;
 800e7d6:	f06f 030a 	mvn.w	r3, #10
 800e7da:	e035      	b.n	800e848 <tcp_shutdown+0xa0>
  }
  if (shut_rx) {
 800e7dc:	68bb      	ldr	r3, [r7, #8]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d01b      	beq.n	800e81a <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	8b5b      	ldrh	r3, [r3, #26]
 800e7e6:	f043 0310 	orr.w	r3, r3, #16
 800e7ea:	b29a      	uxth	r2, r3
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d005      	beq.n	800e802 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800e7f6:	2101      	movs	r1, #1
 800e7f8:	68f8      	ldr	r0, [r7, #12]
 800e7fa:	f7ff fe65 	bl	800e4c8 <tcp_close_shutdown>
 800e7fe:	4603      	mov	r3, r0
 800e800:	e022      	b.n	800e848 <tcp_shutdown+0xa0>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e806:	2b00      	cmp	r3, #0
 800e808:	d007      	beq.n	800e81a <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e80e:	4618      	mov	r0, r3
 800e810:	f7ff fafc 	bl	800de0c <pbuf_free>
      pcb->refused_data = NULL;
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	2200      	movs	r2, #0
 800e818:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d012      	beq.n	800e846 <tcp_shutdown+0x9e>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	7d1b      	ldrb	r3, [r3, #20]
 800e824:	2b03      	cmp	r3, #3
 800e826:	db0b      	blt.n	800e840 <tcp_shutdown+0x98>
 800e828:	2b04      	cmp	r3, #4
 800e82a:	dd01      	ble.n	800e830 <tcp_shutdown+0x88>
 800e82c:	2b07      	cmp	r3, #7
 800e82e:	d107      	bne.n	800e840 <tcp_shutdown+0x98>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	b2db      	uxtb	r3, r3
 800e834:	4619      	mov	r1, r3
 800e836:	68f8      	ldr	r0, [r7, #12]
 800e838:	f7ff fe46 	bl	800e4c8 <tcp_close_shutdown>
 800e83c:	4603      	mov	r3, r0
 800e83e:	e003      	b.n	800e848 <tcp_shutdown+0xa0>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800e840:	f06f 030a 	mvn.w	r3, #10
 800e844:	e000      	b.n	800e848 <tcp_shutdown+0xa0>
    }
  }
  return ERR_OK;
 800e846:	2300      	movs	r3, #0
}
 800e848:	4618      	mov	r0, r3
 800e84a:	3710      	adds	r7, #16
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}
 800e850:	08019c08 	.word	0x08019c08
 800e854:	08019d30 	.word	0x08019d30
 800e858:	08019c4c 	.word	0x08019c4c

0800e85c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b08e      	sub	sp, #56	; 0x38
 800e860:	af04      	add	r7, sp, #16
 800e862:	6078      	str	r0, [r7, #4]
 800e864:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d107      	bne.n	800e87c <tcp_abandon+0x20>
 800e86c:	4b52      	ldr	r3, [pc, #328]	; (800e9b8 <tcp_abandon+0x15c>)
 800e86e:	f240 223d 	movw	r2, #573	; 0x23d
 800e872:	4952      	ldr	r1, [pc, #328]	; (800e9bc <tcp_abandon+0x160>)
 800e874:	4852      	ldr	r0, [pc, #328]	; (800e9c0 <tcp_abandon+0x164>)
 800e876:	f008 fc69 	bl	801714c <iprintf>
 800e87a:	e099      	b.n	800e9b0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	7d1b      	ldrb	r3, [r3, #20]
 800e880:	2b01      	cmp	r3, #1
 800e882:	d106      	bne.n	800e892 <tcp_abandon+0x36>
 800e884:	4b4c      	ldr	r3, [pc, #304]	; (800e9b8 <tcp_abandon+0x15c>)
 800e886:	f240 2241 	movw	r2, #577	; 0x241
 800e88a:	494e      	ldr	r1, [pc, #312]	; (800e9c4 <tcp_abandon+0x168>)
 800e88c:	484c      	ldr	r0, [pc, #304]	; (800e9c0 <tcp_abandon+0x164>)
 800e88e:	f008 fc5d 	bl	801714c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	7d1b      	ldrb	r3, [r3, #20]
 800e896:	2b0a      	cmp	r3, #10
 800e898:	d107      	bne.n	800e8aa <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e89a:	6879      	ldr	r1, [r7, #4]
 800e89c:	484a      	ldr	r0, [pc, #296]	; (800e9c8 <tcp_abandon+0x16c>)
 800e89e:	f001 fa35 	bl	800fd0c <tcp_pcb_remove>
    tcp_free(pcb);
 800e8a2:	6878      	ldr	r0, [r7, #4]
 800e8a4:	f7ff fd5e 	bl	800e364 <tcp_free>
 800e8a8:	e082      	b.n	800e9b0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e8b6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8bc:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e8c4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	691b      	ldr	r3, [r3, #16]
 800e8ca:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	7d1b      	ldrb	r3, [r3, #20]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d126      	bne.n	800e922 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	8adb      	ldrh	r3, [r3, #22]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d02e      	beq.n	800e93a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e8dc:	4b3b      	ldr	r3, [pc, #236]	; (800e9cc <tcp_abandon+0x170>)
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	687a      	ldr	r2, [r7, #4]
 800e8e2:	429a      	cmp	r2, r3
 800e8e4:	d105      	bne.n	800e8f2 <tcp_abandon+0x96>
 800e8e6:	4b39      	ldr	r3, [pc, #228]	; (800e9cc <tcp_abandon+0x170>)
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	68db      	ldr	r3, [r3, #12]
 800e8ec:	4a37      	ldr	r2, [pc, #220]	; (800e9cc <tcp_abandon+0x170>)
 800e8ee:	6013      	str	r3, [r2, #0]
 800e8f0:	e013      	b.n	800e91a <tcp_abandon+0xbe>
 800e8f2:	4b36      	ldr	r3, [pc, #216]	; (800e9cc <tcp_abandon+0x170>)
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	61fb      	str	r3, [r7, #28]
 800e8f8:	e00c      	b.n	800e914 <tcp_abandon+0xb8>
 800e8fa:	69fb      	ldr	r3, [r7, #28]
 800e8fc:	68db      	ldr	r3, [r3, #12]
 800e8fe:	687a      	ldr	r2, [r7, #4]
 800e900:	429a      	cmp	r2, r3
 800e902:	d104      	bne.n	800e90e <tcp_abandon+0xb2>
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	68da      	ldr	r2, [r3, #12]
 800e908:	69fb      	ldr	r3, [r7, #28]
 800e90a:	60da      	str	r2, [r3, #12]
 800e90c:	e005      	b.n	800e91a <tcp_abandon+0xbe>
 800e90e:	69fb      	ldr	r3, [r7, #28]
 800e910:	68db      	ldr	r3, [r3, #12]
 800e912:	61fb      	str	r3, [r7, #28]
 800e914:	69fb      	ldr	r3, [r7, #28]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d1ef      	bne.n	800e8fa <tcp_abandon+0x9e>
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	2200      	movs	r2, #0
 800e91e:	60da      	str	r2, [r3, #12]
 800e920:	e00b      	b.n	800e93a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	8adb      	ldrh	r3, [r3, #22]
 800e92a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e92c:	6879      	ldr	r1, [r7, #4]
 800e92e:	4828      	ldr	r0, [pc, #160]	; (800e9d0 <tcp_abandon+0x174>)
 800e930:	f001 f9ec 	bl	800fd0c <tcp_pcb_remove>
 800e934:	4b27      	ldr	r3, [pc, #156]	; (800e9d4 <tcp_abandon+0x178>)
 800e936:	2201      	movs	r2, #1
 800e938:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d004      	beq.n	800e94c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e946:	4618      	mov	r0, r3
 800e948:	f000 fec2 	bl	800f6d0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e950:	2b00      	cmp	r3, #0
 800e952:	d004      	beq.n	800e95e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e958:	4618      	mov	r0, r3
 800e95a:	f000 feb9 	bl	800f6d0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e962:	2b00      	cmp	r3, #0
 800e964:	d004      	beq.n	800e970 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e96a:	4618      	mov	r0, r3
 800e96c:	f000 feb0 	bl	800f6d0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e972:	2b00      	cmp	r3, #0
 800e974:	d00e      	beq.n	800e994 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e976:	6879      	ldr	r1, [r7, #4]
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	3304      	adds	r3, #4
 800e97c:	687a      	ldr	r2, [r7, #4]
 800e97e:	8b12      	ldrh	r2, [r2, #24]
 800e980:	9202      	str	r2, [sp, #8]
 800e982:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e984:	9201      	str	r2, [sp, #4]
 800e986:	9300      	str	r3, [sp, #0]
 800e988:	460b      	mov	r3, r1
 800e98a:	697a      	ldr	r2, [r7, #20]
 800e98c:	69b9      	ldr	r1, [r7, #24]
 800e98e:	6878      	ldr	r0, [r7, #4]
 800e990:	f005 fb9a 	bl	80140c8 <tcp_rst>
    }
    last_state = pcb->state;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	7d1b      	ldrb	r3, [r3, #20]
 800e998:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e99a:	6878      	ldr	r0, [r7, #4]
 800e99c:	f7ff fce2 	bl	800e364 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e9a0:	693b      	ldr	r3, [r7, #16]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d004      	beq.n	800e9b0 <tcp_abandon+0x154>
 800e9a6:	693b      	ldr	r3, [r7, #16]
 800e9a8:	f06f 010c 	mvn.w	r1, #12
 800e9ac:	68f8      	ldr	r0, [r7, #12]
 800e9ae:	4798      	blx	r3
  }
}
 800e9b0:	3728      	adds	r7, #40	; 0x28
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	bd80      	pop	{r7, pc}
 800e9b6:	bf00      	nop
 800e9b8:	08019c08 	.word	0x08019c08
 800e9bc:	08019d4c 	.word	0x08019d4c
 800e9c0:	08019c4c 	.word	0x08019c4c
 800e9c4:	08019d68 	.word	0x08019d68
 800e9c8:	2000d250 	.word	0x2000d250
 800e9cc:	2000d24c 	.word	0x2000d24c
 800e9d0:	2000d240 	.word	0x2000d240
 800e9d4:	2000d23c 	.word	0x2000d23c

0800e9d8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b082      	sub	sp, #8
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e9e0:	2101      	movs	r1, #1
 800e9e2:	6878      	ldr	r0, [r7, #4]
 800e9e4:	f7ff ff3a 	bl	800e85c <tcp_abandon>
}
 800e9e8:	bf00      	nop
 800e9ea:	3708      	adds	r7, #8
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	bd80      	pop	{r7, pc}

0800e9f0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b088      	sub	sp, #32
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	60f8      	str	r0, [r7, #12]
 800e9f8:	60b9      	str	r1, [r7, #8]
 800e9fa:	4613      	mov	r3, r2
 800e9fc:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800e9fe:	2304      	movs	r3, #4
 800ea00:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ea02:	68bb      	ldr	r3, [r7, #8]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d101      	bne.n	800ea0c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800ea08:	4b3e      	ldr	r3, [pc, #248]	; (800eb04 <tcp_bind+0x114>)
 800ea0a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d109      	bne.n	800ea26 <tcp_bind+0x36>
 800ea12:	4b3d      	ldr	r3, [pc, #244]	; (800eb08 <tcp_bind+0x118>)
 800ea14:	f240 22a9 	movw	r2, #681	; 0x2a9
 800ea18:	493c      	ldr	r1, [pc, #240]	; (800eb0c <tcp_bind+0x11c>)
 800ea1a:	483d      	ldr	r0, [pc, #244]	; (800eb10 <tcp_bind+0x120>)
 800ea1c:	f008 fb96 	bl	801714c <iprintf>
 800ea20:	f06f 030f 	mvn.w	r3, #15
 800ea24:	e06a      	b.n	800eafc <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	7d1b      	ldrb	r3, [r3, #20]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d009      	beq.n	800ea42 <tcp_bind+0x52>
 800ea2e:	4b36      	ldr	r3, [pc, #216]	; (800eb08 <tcp_bind+0x118>)
 800ea30:	f240 22ab 	movw	r2, #683	; 0x2ab
 800ea34:	4937      	ldr	r1, [pc, #220]	; (800eb14 <tcp_bind+0x124>)
 800ea36:	4836      	ldr	r0, [pc, #216]	; (800eb10 <tcp_bind+0x120>)
 800ea38:	f008 fb88 	bl	801714c <iprintf>
 800ea3c:	f06f 0305 	mvn.w	r3, #5
 800ea40:	e05c      	b.n	800eafc <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800ea42:	88fb      	ldrh	r3, [r7, #6]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d109      	bne.n	800ea5c <tcp_bind+0x6c>
    port = tcp_new_port();
 800ea48:	f000 f9de 	bl	800ee08 <tcp_new_port>
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800ea50:	88fb      	ldrh	r3, [r7, #6]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d135      	bne.n	800eac2 <tcp_bind+0xd2>
      return ERR_BUF;
 800ea56:	f06f 0301 	mvn.w	r3, #1
 800ea5a:	e04f      	b.n	800eafc <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	61fb      	str	r3, [r7, #28]
 800ea60:	e02b      	b.n	800eaba <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ea62:	4a2d      	ldr	r2, [pc, #180]	; (800eb18 <tcp_bind+0x128>)
 800ea64:	69fb      	ldr	r3, [r7, #28]
 800ea66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	61bb      	str	r3, [r7, #24]
 800ea6e:	e01e      	b.n	800eaae <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800ea70:	69bb      	ldr	r3, [r7, #24]
 800ea72:	8adb      	ldrh	r3, [r3, #22]
 800ea74:	88fa      	ldrh	r2, [r7, #6]
 800ea76:	429a      	cmp	r2, r3
 800ea78:	d116      	bne.n	800eaa8 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800ea7a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d010      	beq.n	800eaa2 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800ea80:	69bb      	ldr	r3, [r7, #24]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d00c      	beq.n	800eaa2 <tcp_bind+0xb2>
 800ea88:	68bb      	ldr	r3, [r7, #8]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d009      	beq.n	800eaa2 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800ea8e:	68bb      	ldr	r3, [r7, #8]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d005      	beq.n	800eaa2 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800ea96:	69bb      	ldr	r3, [r7, #24]
 800ea98:	681a      	ldr	r2, [r3, #0]
 800ea9a:	68bb      	ldr	r3, [r7, #8]
 800ea9c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ea9e:	429a      	cmp	r2, r3
 800eaa0:	d102      	bne.n	800eaa8 <tcp_bind+0xb8>
              return ERR_USE;
 800eaa2:	f06f 0307 	mvn.w	r3, #7
 800eaa6:	e029      	b.n	800eafc <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800eaa8:	69bb      	ldr	r3, [r7, #24]
 800eaaa:	68db      	ldr	r3, [r3, #12]
 800eaac:	61bb      	str	r3, [r7, #24]
 800eaae:	69bb      	ldr	r3, [r7, #24]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d1dd      	bne.n	800ea70 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800eab4:	69fb      	ldr	r3, [r7, #28]
 800eab6:	3301      	adds	r3, #1
 800eab8:	61fb      	str	r3, [r7, #28]
 800eaba:	69fa      	ldr	r2, [r7, #28]
 800eabc:	697b      	ldr	r3, [r7, #20]
 800eabe:	429a      	cmp	r2, r3
 800eac0:	dbcf      	blt.n	800ea62 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800eac2:	68bb      	ldr	r3, [r7, #8]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d00c      	beq.n	800eae2 <tcp_bind+0xf2>
 800eac8:	68bb      	ldr	r3, [r7, #8]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d008      	beq.n	800eae2 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800ead0:	68bb      	ldr	r3, [r7, #8]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d002      	beq.n	800eadc <tcp_bind+0xec>
 800ead6:	68bb      	ldr	r3, [r7, #8]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	e000      	b.n	800eade <tcp_bind+0xee>
 800eadc:	2300      	movs	r3, #0
 800eade:	68fa      	ldr	r2, [r7, #12]
 800eae0:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	88fa      	ldrh	r2, [r7, #6]
 800eae6:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800eae8:	4b0c      	ldr	r3, [pc, #48]	; (800eb1c <tcp_bind+0x12c>)
 800eaea:	681a      	ldr	r2, [r3, #0]
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	60da      	str	r2, [r3, #12]
 800eaf0:	4a0a      	ldr	r2, [pc, #40]	; (800eb1c <tcp_bind+0x12c>)
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	6013      	str	r3, [r2, #0]
 800eaf6:	f005 fca9 	bl	801444c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800eafa:	2300      	movs	r3, #0
}
 800eafc:	4618      	mov	r0, r3
 800eafe:	3720      	adds	r7, #32
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}
 800eb04:	0801b918 	.word	0x0801b918
 800eb08:	08019c08 	.word	0x08019c08
 800eb0c:	08019d9c 	.word	0x08019d9c
 800eb10:	08019c4c 	.word	0x08019c4c
 800eb14:	08019db4 	.word	0x08019db4
 800eb18:	0801b8f0 	.word	0x0801b8f0
 800eb1c:	2000d24c 	.word	0x2000d24c

0800eb20 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b084      	sub	sp, #16
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	60f8      	str	r0, [r7, #12]
 800eb28:	60b9      	str	r1, [r7, #8]
 800eb2a:	4613      	mov	r3, r2
 800eb2c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800eb2e:	68bb      	ldr	r3, [r7, #8]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d106      	bne.n	800eb42 <tcp_accept_null+0x22>
 800eb34:	4b07      	ldr	r3, [pc, #28]	; (800eb54 <tcp_accept_null+0x34>)
 800eb36:	f240 320f 	movw	r2, #783	; 0x30f
 800eb3a:	4907      	ldr	r1, [pc, #28]	; (800eb58 <tcp_accept_null+0x38>)
 800eb3c:	4807      	ldr	r0, [pc, #28]	; (800eb5c <tcp_accept_null+0x3c>)
 800eb3e:	f008 fb05 	bl	801714c <iprintf>

  tcp_abort(pcb);
 800eb42:	68b8      	ldr	r0, [r7, #8]
 800eb44:	f7ff ff48 	bl	800e9d8 <tcp_abort>

  return ERR_ABRT;
 800eb48:	f06f 030c 	mvn.w	r3, #12
}
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	3710      	adds	r7, #16
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bd80      	pop	{r7, pc}
 800eb54:	08019c08 	.word	0x08019c08
 800eb58:	08019ddc 	.word	0x08019ddc
 800eb5c:	08019c4c 	.word	0x08019c4c

0800eb60 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b088      	sub	sp, #32
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	60f8      	str	r0, [r7, #12]
 800eb68:	460b      	mov	r3, r1
 800eb6a:	607a      	str	r2, [r7, #4]
 800eb6c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800eb6e:	2300      	movs	r3, #0
 800eb70:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d109      	bne.n	800eb8c <tcp_listen_with_backlog_and_err+0x2c>
 800eb78:	4b47      	ldr	r3, [pc, #284]	; (800ec98 <tcp_listen_with_backlog_and_err+0x138>)
 800eb7a:	f240 3259 	movw	r2, #857	; 0x359
 800eb7e:	4947      	ldr	r1, [pc, #284]	; (800ec9c <tcp_listen_with_backlog_and_err+0x13c>)
 800eb80:	4847      	ldr	r0, [pc, #284]	; (800eca0 <tcp_listen_with_backlog_and_err+0x140>)
 800eb82:	f008 fae3 	bl	801714c <iprintf>
 800eb86:	23f0      	movs	r3, #240	; 0xf0
 800eb88:	76fb      	strb	r3, [r7, #27]
 800eb8a:	e079      	b.n	800ec80 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	7d1b      	ldrb	r3, [r3, #20]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d009      	beq.n	800eba8 <tcp_listen_with_backlog_and_err+0x48>
 800eb94:	4b40      	ldr	r3, [pc, #256]	; (800ec98 <tcp_listen_with_backlog_and_err+0x138>)
 800eb96:	f240 325a 	movw	r2, #858	; 0x35a
 800eb9a:	4942      	ldr	r1, [pc, #264]	; (800eca4 <tcp_listen_with_backlog_and_err+0x144>)
 800eb9c:	4840      	ldr	r0, [pc, #256]	; (800eca0 <tcp_listen_with_backlog_and_err+0x140>)
 800eb9e:	f008 fad5 	bl	801714c <iprintf>
 800eba2:	23f1      	movs	r3, #241	; 0xf1
 800eba4:	76fb      	strb	r3, [r7, #27]
 800eba6:	e06b      	b.n	800ec80 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	7d1b      	ldrb	r3, [r3, #20]
 800ebac:	2b01      	cmp	r3, #1
 800ebae:	d104      	bne.n	800ebba <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800ebb4:	23f7      	movs	r3, #247	; 0xf7
 800ebb6:	76fb      	strb	r3, [r7, #27]
    goto done;
 800ebb8:	e062      	b.n	800ec80 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800ebba:	2001      	movs	r0, #1
 800ebbc:	f7fe fa06 	bl	800cfcc <memp_malloc>
 800ebc0:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800ebc2:	69fb      	ldr	r3, [r7, #28]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d102      	bne.n	800ebce <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800ebc8:	23ff      	movs	r3, #255	; 0xff
 800ebca:	76fb      	strb	r3, [r7, #27]
    goto done;
 800ebcc:	e058      	b.n	800ec80 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	691a      	ldr	r2, [r3, #16]
 800ebd2:	69fb      	ldr	r3, [r7, #28]
 800ebd4:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	8ada      	ldrh	r2, [r3, #22]
 800ebda:	69fb      	ldr	r3, [r7, #28]
 800ebdc:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800ebde:	69fb      	ldr	r3, [r7, #28]
 800ebe0:	2201      	movs	r2, #1
 800ebe2:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	7d5a      	ldrb	r2, [r3, #21]
 800ebe8:	69fb      	ldr	r3, [r7, #28]
 800ebea:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	7a5a      	ldrb	r2, [r3, #9]
 800ebf0:	69fb      	ldr	r3, [r7, #28]
 800ebf2:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800ebf4:	69fb      	ldr	r3, [r7, #28]
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	7ada      	ldrb	r2, [r3, #11]
 800ebfe:	69fb      	ldr	r3, [r7, #28]
 800ec00:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	7a9a      	ldrb	r2, [r3, #10]
 800ec06:	69fb      	ldr	r3, [r7, #28]
 800ec08:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	681a      	ldr	r2, [r3, #0]
 800ec0e:	69fb      	ldr	r3, [r7, #28]
 800ec10:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	8adb      	ldrh	r3, [r3, #22]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d021      	beq.n	800ec5e <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800ec1a:	4b23      	ldr	r3, [pc, #140]	; (800eca8 <tcp_listen_with_backlog_and_err+0x148>)
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	68fa      	ldr	r2, [r7, #12]
 800ec20:	429a      	cmp	r2, r3
 800ec22:	d105      	bne.n	800ec30 <tcp_listen_with_backlog_and_err+0xd0>
 800ec24:	4b20      	ldr	r3, [pc, #128]	; (800eca8 <tcp_listen_with_backlog_and_err+0x148>)
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	68db      	ldr	r3, [r3, #12]
 800ec2a:	4a1f      	ldr	r2, [pc, #124]	; (800eca8 <tcp_listen_with_backlog_and_err+0x148>)
 800ec2c:	6013      	str	r3, [r2, #0]
 800ec2e:	e013      	b.n	800ec58 <tcp_listen_with_backlog_and_err+0xf8>
 800ec30:	4b1d      	ldr	r3, [pc, #116]	; (800eca8 <tcp_listen_with_backlog_and_err+0x148>)
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	617b      	str	r3, [r7, #20]
 800ec36:	e00c      	b.n	800ec52 <tcp_listen_with_backlog_and_err+0xf2>
 800ec38:	697b      	ldr	r3, [r7, #20]
 800ec3a:	68db      	ldr	r3, [r3, #12]
 800ec3c:	68fa      	ldr	r2, [r7, #12]
 800ec3e:	429a      	cmp	r2, r3
 800ec40:	d104      	bne.n	800ec4c <tcp_listen_with_backlog_and_err+0xec>
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	68da      	ldr	r2, [r3, #12]
 800ec46:	697b      	ldr	r3, [r7, #20]
 800ec48:	60da      	str	r2, [r3, #12]
 800ec4a:	e005      	b.n	800ec58 <tcp_listen_with_backlog_and_err+0xf8>
 800ec4c:	697b      	ldr	r3, [r7, #20]
 800ec4e:	68db      	ldr	r3, [r3, #12]
 800ec50:	617b      	str	r3, [r7, #20]
 800ec52:	697b      	ldr	r3, [r7, #20]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d1ef      	bne.n	800ec38 <tcp_listen_with_backlog_and_err+0xd8>
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800ec5e:	68f8      	ldr	r0, [r7, #12]
 800ec60:	f7ff fb80 	bl	800e364 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800ec64:	69fb      	ldr	r3, [r7, #28]
 800ec66:	4a11      	ldr	r2, [pc, #68]	; (800ecac <tcp_listen_with_backlog_and_err+0x14c>)
 800ec68:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800ec6a:	4b11      	ldr	r3, [pc, #68]	; (800ecb0 <tcp_listen_with_backlog_and_err+0x150>)
 800ec6c:	681a      	ldr	r2, [r3, #0]
 800ec6e:	69fb      	ldr	r3, [r7, #28]
 800ec70:	60da      	str	r2, [r3, #12]
 800ec72:	4a0f      	ldr	r2, [pc, #60]	; (800ecb0 <tcp_listen_with_backlog_and_err+0x150>)
 800ec74:	69fb      	ldr	r3, [r7, #28]
 800ec76:	6013      	str	r3, [r2, #0]
 800ec78:	f005 fbe8 	bl	801444c <tcp_timer_needed>
  res = ERR_OK;
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d002      	beq.n	800ec8c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	7efa      	ldrb	r2, [r7, #27]
 800ec8a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800ec8c:	69fb      	ldr	r3, [r7, #28]
}
 800ec8e:	4618      	mov	r0, r3
 800ec90:	3720      	adds	r7, #32
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}
 800ec96:	bf00      	nop
 800ec98:	08019c08 	.word	0x08019c08
 800ec9c:	08019dfc 	.word	0x08019dfc
 800eca0:	08019c4c 	.word	0x08019c4c
 800eca4:	08019e2c 	.word	0x08019e2c
 800eca8:	2000d24c 	.word	0x2000d24c
 800ecac:	0800eb21 	.word	0x0800eb21
 800ecb0:	2000d248 	.word	0x2000d248

0800ecb4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b084      	sub	sp, #16
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d106      	bne.n	800ecd0 <tcp_update_rcv_ann_wnd+0x1c>
 800ecc2:	4b25      	ldr	r3, [pc, #148]	; (800ed58 <tcp_update_rcv_ann_wnd+0xa4>)
 800ecc4:	f240 32a6 	movw	r2, #934	; 0x3a6
 800ecc8:	4924      	ldr	r1, [pc, #144]	; (800ed5c <tcp_update_rcv_ann_wnd+0xa8>)
 800ecca:	4825      	ldr	r0, [pc, #148]	; (800ed60 <tcp_update_rcv_ann_wnd+0xac>)
 800eccc:	f008 fa3e 	bl	801714c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecd4:	687a      	ldr	r2, [r7, #4]
 800ecd6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800ecd8:	4413      	add	r3, r2
 800ecda:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ece0:	687a      	ldr	r2, [r7, #4]
 800ece2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800ece4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800ece8:	bf28      	it	cs
 800ecea:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800ecee:	b292      	uxth	r2, r2
 800ecf0:	4413      	add	r3, r2
 800ecf2:	68fa      	ldr	r2, [r7, #12]
 800ecf4:	1ad3      	subs	r3, r2, r3
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	db08      	blt.n	800ed0c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed06:	68fa      	ldr	r2, [r7, #12]
 800ed08:	1ad3      	subs	r3, r2, r3
 800ed0a:	e020      	b.n	800ed4e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed14:	1ad3      	subs	r3, r2, r3
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	dd03      	ble.n	800ed22 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ed20:	e014      	b.n	800ed4c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed2a:	1ad3      	subs	r3, r2, r3
 800ed2c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ed2e:	68bb      	ldr	r3, [r7, #8]
 800ed30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed34:	d306      	bcc.n	800ed44 <tcp_update_rcv_ann_wnd+0x90>
 800ed36:	4b08      	ldr	r3, [pc, #32]	; (800ed58 <tcp_update_rcv_ann_wnd+0xa4>)
 800ed38:	f240 32b6 	movw	r2, #950	; 0x3b6
 800ed3c:	4909      	ldr	r1, [pc, #36]	; (800ed64 <tcp_update_rcv_ann_wnd+0xb0>)
 800ed3e:	4808      	ldr	r0, [pc, #32]	; (800ed60 <tcp_update_rcv_ann_wnd+0xac>)
 800ed40:	f008 fa04 	bl	801714c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ed44:	68bb      	ldr	r3, [r7, #8]
 800ed46:	b29a      	uxth	r2, r3
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800ed4c:	2300      	movs	r3, #0
  }
}
 800ed4e:	4618      	mov	r0, r3
 800ed50:	3710      	adds	r7, #16
 800ed52:	46bd      	mov	sp, r7
 800ed54:	bd80      	pop	{r7, pc}
 800ed56:	bf00      	nop
 800ed58:	08019c08 	.word	0x08019c08
 800ed5c:	08019e64 	.word	0x08019e64
 800ed60:	08019c4c 	.word	0x08019c4c
 800ed64:	08019e88 	.word	0x08019e88

0800ed68 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b084      	sub	sp, #16
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
 800ed70:	460b      	mov	r3, r1
 800ed72:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d107      	bne.n	800ed8a <tcp_recved+0x22>
 800ed7a:	4b1f      	ldr	r3, [pc, #124]	; (800edf8 <tcp_recved+0x90>)
 800ed7c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800ed80:	491e      	ldr	r1, [pc, #120]	; (800edfc <tcp_recved+0x94>)
 800ed82:	481f      	ldr	r0, [pc, #124]	; (800ee00 <tcp_recved+0x98>)
 800ed84:	f008 f9e2 	bl	801714c <iprintf>
 800ed88:	e032      	b.n	800edf0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	7d1b      	ldrb	r3, [r3, #20]
 800ed8e:	2b01      	cmp	r3, #1
 800ed90:	d106      	bne.n	800eda0 <tcp_recved+0x38>
 800ed92:	4b19      	ldr	r3, [pc, #100]	; (800edf8 <tcp_recved+0x90>)
 800ed94:	f240 32d3 	movw	r2, #979	; 0x3d3
 800ed98:	491a      	ldr	r1, [pc, #104]	; (800ee04 <tcp_recved+0x9c>)
 800ed9a:	4819      	ldr	r0, [pc, #100]	; (800ee00 <tcp_recved+0x98>)
 800ed9c:	f008 f9d6 	bl	801714c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800eda4:	887b      	ldrh	r3, [r7, #2]
 800eda6:	4413      	add	r3, r2
 800eda8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800edaa:	89fb      	ldrh	r3, [r7, #14]
 800edac:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800edb0:	d804      	bhi.n	800edbc <tcp_recved+0x54>
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800edb6:	89fa      	ldrh	r2, [r7, #14]
 800edb8:	429a      	cmp	r2, r3
 800edba:	d204      	bcs.n	800edc6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800edc2:	851a      	strh	r2, [r3, #40]	; 0x28
 800edc4:	e002      	b.n	800edcc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	89fa      	ldrh	r2, [r7, #14]
 800edca:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	f7ff ff71 	bl	800ecb4 <tcp_update_rcv_ann_wnd>
 800edd2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800edd4:	68bb      	ldr	r3, [r7, #8]
 800edd6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800edda:	d309      	bcc.n	800edf0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	8b5b      	ldrh	r3, [r3, #26]
 800ede0:	f043 0302 	orr.w	r3, r3, #2
 800ede4:	b29a      	uxth	r2, r3
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800edea:	6878      	ldr	r0, [r7, #4]
 800edec:	f004 fba6 	bl	801353c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800edf0:	3710      	adds	r7, #16
 800edf2:	46bd      	mov	sp, r7
 800edf4:	bd80      	pop	{r7, pc}
 800edf6:	bf00      	nop
 800edf8:	08019c08 	.word	0x08019c08
 800edfc:	08019ea4 	.word	0x08019ea4
 800ee00:	08019c4c 	.word	0x08019c4c
 800ee04:	08019ebc 	.word	0x08019ebc

0800ee08 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800ee08:	b480      	push	{r7}
 800ee0a:	b083      	sub	sp, #12
 800ee0c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800ee12:	4b1e      	ldr	r3, [pc, #120]	; (800ee8c <tcp_new_port+0x84>)
 800ee14:	881b      	ldrh	r3, [r3, #0]
 800ee16:	3301      	adds	r3, #1
 800ee18:	b29a      	uxth	r2, r3
 800ee1a:	4b1c      	ldr	r3, [pc, #112]	; (800ee8c <tcp_new_port+0x84>)
 800ee1c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800ee1e:	4b1b      	ldr	r3, [pc, #108]	; (800ee8c <tcp_new_port+0x84>)
 800ee20:	881b      	ldrh	r3, [r3, #0]
 800ee22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee26:	4293      	cmp	r3, r2
 800ee28:	d103      	bne.n	800ee32 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800ee2a:	4b18      	ldr	r3, [pc, #96]	; (800ee8c <tcp_new_port+0x84>)
 800ee2c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800ee30:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ee32:	2300      	movs	r3, #0
 800ee34:	71fb      	strb	r3, [r7, #7]
 800ee36:	e01e      	b.n	800ee76 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ee38:	79fb      	ldrb	r3, [r7, #7]
 800ee3a:	4a15      	ldr	r2, [pc, #84]	; (800ee90 <tcp_new_port+0x88>)
 800ee3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	603b      	str	r3, [r7, #0]
 800ee44:	e011      	b.n	800ee6a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800ee46:	683b      	ldr	r3, [r7, #0]
 800ee48:	8ada      	ldrh	r2, [r3, #22]
 800ee4a:	4b10      	ldr	r3, [pc, #64]	; (800ee8c <tcp_new_port+0x84>)
 800ee4c:	881b      	ldrh	r3, [r3, #0]
 800ee4e:	429a      	cmp	r2, r3
 800ee50:	d108      	bne.n	800ee64 <tcp_new_port+0x5c>
        n++;
 800ee52:	88bb      	ldrh	r3, [r7, #4]
 800ee54:	3301      	adds	r3, #1
 800ee56:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800ee58:	88bb      	ldrh	r3, [r7, #4]
 800ee5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ee5e:	d3d8      	bcc.n	800ee12 <tcp_new_port+0xa>
          return 0;
 800ee60:	2300      	movs	r3, #0
 800ee62:	e00d      	b.n	800ee80 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ee64:	683b      	ldr	r3, [r7, #0]
 800ee66:	68db      	ldr	r3, [r3, #12]
 800ee68:	603b      	str	r3, [r7, #0]
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d1ea      	bne.n	800ee46 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ee70:	79fb      	ldrb	r3, [r7, #7]
 800ee72:	3301      	adds	r3, #1
 800ee74:	71fb      	strb	r3, [r7, #7]
 800ee76:	79fb      	ldrb	r3, [r7, #7]
 800ee78:	2b03      	cmp	r3, #3
 800ee7a:	d9dd      	bls.n	800ee38 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800ee7c:	4b03      	ldr	r3, [pc, #12]	; (800ee8c <tcp_new_port+0x84>)
 800ee7e:	881b      	ldrh	r3, [r3, #0]
}
 800ee80:	4618      	mov	r0, r3
 800ee82:	370c      	adds	r7, #12
 800ee84:	46bd      	mov	sp, r7
 800ee86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8a:	4770      	bx	lr
 800ee8c:	20000010 	.word	0x20000010
 800ee90:	0801b8f0 	.word	0x0801b8f0

0800ee94 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ee94:	b5b0      	push	{r4, r5, r7, lr}
 800ee96:	b090      	sub	sp, #64	; 0x40
 800ee98:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800eea0:	4b94      	ldr	r3, [pc, #592]	; (800f0f4 <tcp_slowtmr+0x260>)
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	3301      	adds	r3, #1
 800eea6:	4a93      	ldr	r2, [pc, #588]	; (800f0f4 <tcp_slowtmr+0x260>)
 800eea8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800eeaa:	4b93      	ldr	r3, [pc, #588]	; (800f0f8 <tcp_slowtmr+0x264>)
 800eeac:	781b      	ldrb	r3, [r3, #0]
 800eeae:	3301      	adds	r3, #1
 800eeb0:	b2da      	uxtb	r2, r3
 800eeb2:	4b91      	ldr	r3, [pc, #580]	; (800f0f8 <tcp_slowtmr+0x264>)
 800eeb4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800eeba:	4b90      	ldr	r3, [pc, #576]	; (800f0fc <tcp_slowtmr+0x268>)
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800eec0:	e29d      	b.n	800f3fe <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800eec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eec4:	7d1b      	ldrb	r3, [r3, #20]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d106      	bne.n	800eed8 <tcp_slowtmr+0x44>
 800eeca:	4b8d      	ldr	r3, [pc, #564]	; (800f100 <tcp_slowtmr+0x26c>)
 800eecc:	f240 42be 	movw	r2, #1214	; 0x4be
 800eed0:	498c      	ldr	r1, [pc, #560]	; (800f104 <tcp_slowtmr+0x270>)
 800eed2:	488d      	ldr	r0, [pc, #564]	; (800f108 <tcp_slowtmr+0x274>)
 800eed4:	f008 f93a 	bl	801714c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800eed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeda:	7d1b      	ldrb	r3, [r3, #20]
 800eedc:	2b01      	cmp	r3, #1
 800eede:	d106      	bne.n	800eeee <tcp_slowtmr+0x5a>
 800eee0:	4b87      	ldr	r3, [pc, #540]	; (800f100 <tcp_slowtmr+0x26c>)
 800eee2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800eee6:	4989      	ldr	r1, [pc, #548]	; (800f10c <tcp_slowtmr+0x278>)
 800eee8:	4887      	ldr	r0, [pc, #540]	; (800f108 <tcp_slowtmr+0x274>)
 800eeea:	f008 f92f 	bl	801714c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800eeee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eef0:	7d1b      	ldrb	r3, [r3, #20]
 800eef2:	2b0a      	cmp	r3, #10
 800eef4:	d106      	bne.n	800ef04 <tcp_slowtmr+0x70>
 800eef6:	4b82      	ldr	r3, [pc, #520]	; (800f100 <tcp_slowtmr+0x26c>)
 800eef8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800eefc:	4984      	ldr	r1, [pc, #528]	; (800f110 <tcp_slowtmr+0x27c>)
 800eefe:	4882      	ldr	r0, [pc, #520]	; (800f108 <tcp_slowtmr+0x274>)
 800ef00:	f008 f924 	bl	801714c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ef04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef06:	7f9a      	ldrb	r2, [r3, #30]
 800ef08:	4b7b      	ldr	r3, [pc, #492]	; (800f0f8 <tcp_slowtmr+0x264>)
 800ef0a:	781b      	ldrb	r3, [r3, #0]
 800ef0c:	429a      	cmp	r2, r3
 800ef0e:	d105      	bne.n	800ef1c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800ef10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef12:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ef14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef16:	68db      	ldr	r3, [r3, #12]
 800ef18:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800ef1a:	e270      	b.n	800f3fe <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800ef1c:	4b76      	ldr	r3, [pc, #472]	; (800f0f8 <tcp_slowtmr+0x264>)
 800ef1e:	781a      	ldrb	r2, [r3, #0]
 800ef20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef22:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800ef24:	2300      	movs	r3, #0
 800ef26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ef30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef32:	7d1b      	ldrb	r3, [r3, #20]
 800ef34:	2b02      	cmp	r3, #2
 800ef36:	d10a      	bne.n	800ef4e <tcp_slowtmr+0xba>
 800ef38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ef3e:	2b05      	cmp	r3, #5
 800ef40:	d905      	bls.n	800ef4e <tcp_slowtmr+0xba>
      ++pcb_remove;
 800ef42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef46:	3301      	adds	r3, #1
 800ef48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ef4c:	e11e      	b.n	800f18c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ef4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ef54:	2b0b      	cmp	r3, #11
 800ef56:	d905      	bls.n	800ef64 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800ef58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef5c:	3301      	adds	r3, #1
 800ef5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ef62:	e113      	b.n	800f18c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800ef64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef66:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d075      	beq.n	800f05a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800ef6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d006      	beq.n	800ef84 <tcp_slowtmr+0xf0>
 800ef76:	4b62      	ldr	r3, [pc, #392]	; (800f100 <tcp_slowtmr+0x26c>)
 800ef78:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800ef7c:	4965      	ldr	r1, [pc, #404]	; (800f114 <tcp_slowtmr+0x280>)
 800ef7e:	4862      	ldr	r0, [pc, #392]	; (800f108 <tcp_slowtmr+0x274>)
 800ef80:	f008 f8e4 	bl	801714c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800ef84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d106      	bne.n	800ef9a <tcp_slowtmr+0x106>
 800ef8c:	4b5c      	ldr	r3, [pc, #368]	; (800f100 <tcp_slowtmr+0x26c>)
 800ef8e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800ef92:	4961      	ldr	r1, [pc, #388]	; (800f118 <tcp_slowtmr+0x284>)
 800ef94:	485c      	ldr	r0, [pc, #368]	; (800f108 <tcp_slowtmr+0x274>)
 800ef96:	f008 f8d9 	bl	801714c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800ef9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef9c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800efa0:	2b0b      	cmp	r3, #11
 800efa2:	d905      	bls.n	800efb0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800efa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efa8:	3301      	adds	r3, #1
 800efaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800efae:	e0ed      	b.n	800f18c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800efb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efb2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800efb6:	3b01      	subs	r3, #1
 800efb8:	4a58      	ldr	r2, [pc, #352]	; (800f11c <tcp_slowtmr+0x288>)
 800efba:	5cd3      	ldrb	r3, [r2, r3]
 800efbc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800efbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efc0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800efc4:	7c7a      	ldrb	r2, [r7, #17]
 800efc6:	429a      	cmp	r2, r3
 800efc8:	d907      	bls.n	800efda <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800efca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efcc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800efd0:	3301      	adds	r3, #1
 800efd2:	b2da      	uxtb	r2, r3
 800efd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efd6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800efda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efdc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800efe0:	7c7a      	ldrb	r2, [r7, #17]
 800efe2:	429a      	cmp	r2, r3
 800efe4:	f200 80d2 	bhi.w	800f18c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800efe8:	2301      	movs	r3, #1
 800efea:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800efec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d108      	bne.n	800f008 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800eff6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eff8:	f005 f95a 	bl	80142b0 <tcp_zero_window_probe>
 800effc:	4603      	mov	r3, r0
 800effe:	2b00      	cmp	r3, #0
 800f000:	d014      	beq.n	800f02c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800f002:	2300      	movs	r3, #0
 800f004:	623b      	str	r3, [r7, #32]
 800f006:	e011      	b.n	800f02c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f00a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f00e:	4619      	mov	r1, r3
 800f010:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f012:	f004 f80d 	bl	8013030 <tcp_split_unsent_seg>
 800f016:	4603      	mov	r3, r0
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d107      	bne.n	800f02c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800f01c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f01e:	f004 fa8d 	bl	801353c <tcp_output>
 800f022:	4603      	mov	r3, r0
 800f024:	2b00      	cmp	r3, #0
 800f026:	d101      	bne.n	800f02c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800f028:	2300      	movs	r3, #0
 800f02a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800f02c:	6a3b      	ldr	r3, [r7, #32]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	f000 80ac 	beq.w	800f18c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800f034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f036:	2200      	movs	r2, #0
 800f038:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800f03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f03e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f042:	2b06      	cmp	r3, #6
 800f044:	f200 80a2 	bhi.w	800f18c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800f048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f04a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f04e:	3301      	adds	r3, #1
 800f050:	b2da      	uxtb	r2, r3
 800f052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f054:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800f058:	e098      	b.n	800f18c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f05c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f060:	2b00      	cmp	r3, #0
 800f062:	db0f      	blt.n	800f084 <tcp_slowtmr+0x1f0>
 800f064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f066:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f06a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f06e:	4293      	cmp	r3, r2
 800f070:	d008      	beq.n	800f084 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800f072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f074:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f078:	b29b      	uxth	r3, r3
 800f07a:	3301      	adds	r3, #1
 800f07c:	b29b      	uxth	r3, r3
 800f07e:	b21a      	sxth	r2, r3
 800f080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f082:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800f084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f086:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800f08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f08c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f090:	429a      	cmp	r2, r3
 800f092:	db7b      	blt.n	800f18c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f094:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f096:	f004 fd49 	bl	8013b2c <tcp_rexmit_rto_prepare>
 800f09a:	4603      	mov	r3, r0
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d007      	beq.n	800f0b0 <tcp_slowtmr+0x21c>
 800f0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d171      	bne.n	800f18c <tcp_slowtmr+0x2f8>
 800f0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d06d      	beq.n	800f18c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800f0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0b2:	7d1b      	ldrb	r3, [r3, #20]
 800f0b4:	2b02      	cmp	r3, #2
 800f0b6:	d03a      	beq.n	800f12e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f0be:	2b0c      	cmp	r3, #12
 800f0c0:	bf28      	it	cs
 800f0c2:	230c      	movcs	r3, #12
 800f0c4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f0cc:	10db      	asrs	r3, r3, #3
 800f0ce:	b21b      	sxth	r3, r3
 800f0d0:	461a      	mov	r2, r3
 800f0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0d4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f0d8:	4413      	add	r3, r2
 800f0da:	7efa      	ldrb	r2, [r7, #27]
 800f0dc:	4910      	ldr	r1, [pc, #64]	; (800f120 <tcp_slowtmr+0x28c>)
 800f0de:	5c8a      	ldrb	r2, [r1, r2]
 800f0e0:	4093      	lsls	r3, r2
 800f0e2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f0e4:	697b      	ldr	r3, [r7, #20]
 800f0e6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800f0ea:	4293      	cmp	r3, r2
 800f0ec:	dc1a      	bgt.n	800f124 <tcp_slowtmr+0x290>
 800f0ee:	697b      	ldr	r3, [r7, #20]
 800f0f0:	b21a      	sxth	r2, r3
 800f0f2:	e019      	b.n	800f128 <tcp_slowtmr+0x294>
 800f0f4:	2000d244 	.word	0x2000d244
 800f0f8:	2000464a 	.word	0x2000464a
 800f0fc:	2000d240 	.word	0x2000d240
 800f100:	08019c08 	.word	0x08019c08
 800f104:	08019f4c 	.word	0x08019f4c
 800f108:	08019c4c 	.word	0x08019c4c
 800f10c:	08019f78 	.word	0x08019f78
 800f110:	08019fa4 	.word	0x08019fa4
 800f114:	08019fd4 	.word	0x08019fd4
 800f118:	0801a008 	.word	0x0801a008
 800f11c:	0801b8e8 	.word	0x0801b8e8
 800f120:	0801b8d8 	.word	0x0801b8d8
 800f124:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f12a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800f12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f130:	2200      	movs	r2, #0
 800f132:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f136:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f13c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f140:	4293      	cmp	r3, r2
 800f142:	bf28      	it	cs
 800f144:	4613      	movcs	r3, r2
 800f146:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f148:	8a7b      	ldrh	r3, [r7, #18]
 800f14a:	085b      	lsrs	r3, r3, #1
 800f14c:	b29a      	uxth	r2, r3
 800f14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f150:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f156:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f15c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f15e:	005b      	lsls	r3, r3, #1
 800f160:	b29b      	uxth	r3, r3
 800f162:	429a      	cmp	r2, r3
 800f164:	d206      	bcs.n	800f174 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f168:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f16a:	005b      	lsls	r3, r3, #1
 800f16c:	b29a      	uxth	r2, r3
 800f16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f170:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800f174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f176:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f17a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800f17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f180:	2200      	movs	r2, #0
 800f182:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800f186:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f188:	f004 fd40 	bl	8013c0c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800f18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f18e:	7d1b      	ldrb	r3, [r3, #20]
 800f190:	2b06      	cmp	r3, #6
 800f192:	d111      	bne.n	800f1b8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800f194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f196:	8b5b      	ldrh	r3, [r3, #26]
 800f198:	f003 0310 	and.w	r3, r3, #16
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d00b      	beq.n	800f1b8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f1a0:	4b9c      	ldr	r3, [pc, #624]	; (800f414 <tcp_slowtmr+0x580>)
 800f1a2:	681a      	ldr	r2, [r3, #0]
 800f1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1a6:	6a1b      	ldr	r3, [r3, #32]
 800f1a8:	1ad3      	subs	r3, r2, r3
 800f1aa:	2b28      	cmp	r3, #40	; 0x28
 800f1ac:	d904      	bls.n	800f1b8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800f1ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1b2:	3301      	adds	r3, #1
 800f1b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ba:	7a5b      	ldrb	r3, [r3, #9]
 800f1bc:	f003 0308 	and.w	r3, r3, #8
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d04a      	beq.n	800f25a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800f1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1c6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f1c8:	2b04      	cmp	r3, #4
 800f1ca:	d003      	beq.n	800f1d4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800f1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ce:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f1d0:	2b07      	cmp	r3, #7
 800f1d2:	d142      	bne.n	800f25a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f1d4:	4b8f      	ldr	r3, [pc, #572]	; (800f414 <tcp_slowtmr+0x580>)
 800f1d6:	681a      	ldr	r2, [r3, #0]
 800f1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1da:	6a1b      	ldr	r3, [r3, #32]
 800f1dc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1e0:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f1e4:	4b8c      	ldr	r3, [pc, #560]	; (800f418 <tcp_slowtmr+0x584>)
 800f1e6:	440b      	add	r3, r1
 800f1e8:	498c      	ldr	r1, [pc, #560]	; (800f41c <tcp_slowtmr+0x588>)
 800f1ea:	fba1 1303 	umull	r1, r3, r1, r3
 800f1ee:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f1f0:	429a      	cmp	r2, r3
 800f1f2:	d90a      	bls.n	800f20a <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800f1f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1f8:	3301      	adds	r3, #1
 800f1fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800f1fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f202:	3301      	adds	r3, #1
 800f204:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f208:	e027      	b.n	800f25a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f20a:	4b82      	ldr	r3, [pc, #520]	; (800f414 <tcp_slowtmr+0x580>)
 800f20c:	681a      	ldr	r2, [r3, #0]
 800f20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f210:	6a1b      	ldr	r3, [r3, #32]
 800f212:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f216:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f21c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f220:	4618      	mov	r0, r3
 800f222:	4b7f      	ldr	r3, [pc, #508]	; (800f420 <tcp_slowtmr+0x58c>)
 800f224:	fb03 f300 	mul.w	r3, r3, r0
 800f228:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f22a:	497c      	ldr	r1, [pc, #496]	; (800f41c <tcp_slowtmr+0x588>)
 800f22c:	fba1 1303 	umull	r1, r3, r1, r3
 800f230:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f232:	429a      	cmp	r2, r3
 800f234:	d911      	bls.n	800f25a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800f236:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f238:	f004 fffa 	bl	8014230 <tcp_keepalive>
 800f23c:	4603      	mov	r3, r0
 800f23e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800f242:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f246:	2b00      	cmp	r3, #0
 800f248:	d107      	bne.n	800f25a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800f24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f24c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f250:	3301      	adds	r3, #1
 800f252:	b2da      	uxtb	r2, r3
 800f254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f256:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800f25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f25c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d011      	beq.n	800f286 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800f262:	4b6c      	ldr	r3, [pc, #432]	; (800f414 <tcp_slowtmr+0x580>)
 800f264:	681a      	ldr	r2, [r3, #0]
 800f266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f268:	6a1b      	ldr	r3, [r3, #32]
 800f26a:	1ad2      	subs	r2, r2, r3
 800f26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f26e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f272:	4619      	mov	r1, r3
 800f274:	460b      	mov	r3, r1
 800f276:	005b      	lsls	r3, r3, #1
 800f278:	440b      	add	r3, r1
 800f27a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800f27c:	429a      	cmp	r2, r3
 800f27e:	d302      	bcc.n	800f286 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800f280:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f282:	f000 fea7 	bl	800ffd4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800f286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f288:	7d1b      	ldrb	r3, [r3, #20]
 800f28a:	2b03      	cmp	r3, #3
 800f28c:	d10b      	bne.n	800f2a6 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f28e:	4b61      	ldr	r3, [pc, #388]	; (800f414 <tcp_slowtmr+0x580>)
 800f290:	681a      	ldr	r2, [r3, #0]
 800f292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f294:	6a1b      	ldr	r3, [r3, #32]
 800f296:	1ad3      	subs	r3, r2, r3
 800f298:	2b28      	cmp	r3, #40	; 0x28
 800f29a:	d904      	bls.n	800f2a6 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800f29c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2a0:	3301      	adds	r3, #1
 800f2a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800f2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2a8:	7d1b      	ldrb	r3, [r3, #20]
 800f2aa:	2b09      	cmp	r3, #9
 800f2ac:	d10b      	bne.n	800f2c6 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f2ae:	4b59      	ldr	r3, [pc, #356]	; (800f414 <tcp_slowtmr+0x580>)
 800f2b0:	681a      	ldr	r2, [r3, #0]
 800f2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2b4:	6a1b      	ldr	r3, [r3, #32]
 800f2b6:	1ad3      	subs	r3, r2, r3
 800f2b8:	2bf0      	cmp	r3, #240	; 0xf0
 800f2ba:	d904      	bls.n	800f2c6 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800f2bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2c0:	3301      	adds	r3, #1
 800f2c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f2c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d060      	beq.n	800f390 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800f2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f2d4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800f2d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f2d8:	f000 fcc8 	bl	800fc6c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800f2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d010      	beq.n	800f304 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800f2e2:	4b50      	ldr	r3, [pc, #320]	; (800f424 <tcp_slowtmr+0x590>)
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2e8:	429a      	cmp	r2, r3
 800f2ea:	d106      	bne.n	800f2fa <tcp_slowtmr+0x466>
 800f2ec:	4b4e      	ldr	r3, [pc, #312]	; (800f428 <tcp_slowtmr+0x594>)
 800f2ee:	f240 526d 	movw	r2, #1389	; 0x56d
 800f2f2:	494e      	ldr	r1, [pc, #312]	; (800f42c <tcp_slowtmr+0x598>)
 800f2f4:	484e      	ldr	r0, [pc, #312]	; (800f430 <tcp_slowtmr+0x59c>)
 800f2f6:	f007 ff29 	bl	801714c <iprintf>
        prev->next = pcb->next;
 800f2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2fc:	68da      	ldr	r2, [r3, #12]
 800f2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f300:	60da      	str	r2, [r3, #12]
 800f302:	e00f      	b.n	800f324 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800f304:	4b47      	ldr	r3, [pc, #284]	; (800f424 <tcp_slowtmr+0x590>)
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f30a:	429a      	cmp	r2, r3
 800f30c:	d006      	beq.n	800f31c <tcp_slowtmr+0x488>
 800f30e:	4b46      	ldr	r3, [pc, #280]	; (800f428 <tcp_slowtmr+0x594>)
 800f310:	f240 5271 	movw	r2, #1393	; 0x571
 800f314:	4947      	ldr	r1, [pc, #284]	; (800f434 <tcp_slowtmr+0x5a0>)
 800f316:	4846      	ldr	r0, [pc, #280]	; (800f430 <tcp_slowtmr+0x59c>)
 800f318:	f007 ff18 	bl	801714c <iprintf>
        tcp_active_pcbs = pcb->next;
 800f31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f31e:	68db      	ldr	r3, [r3, #12]
 800f320:	4a40      	ldr	r2, [pc, #256]	; (800f424 <tcp_slowtmr+0x590>)
 800f322:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800f324:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d013      	beq.n	800f354 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f32e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f332:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f334:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800f336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f338:	3304      	adds	r3, #4
 800f33a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f33c:	8ad2      	ldrh	r2, [r2, #22]
 800f33e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f340:	8b09      	ldrh	r1, [r1, #24]
 800f342:	9102      	str	r1, [sp, #8]
 800f344:	9201      	str	r2, [sp, #4]
 800f346:	9300      	str	r3, [sp, #0]
 800f348:	462b      	mov	r3, r5
 800f34a:	4622      	mov	r2, r4
 800f34c:	4601      	mov	r1, r0
 800f34e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f350:	f004 feba 	bl	80140c8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800f354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f356:	691b      	ldr	r3, [r3, #16]
 800f358:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800f35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f35c:	7d1b      	ldrb	r3, [r3, #20]
 800f35e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800f360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f362:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800f364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f366:	68db      	ldr	r3, [r3, #12]
 800f368:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f36a:	6838      	ldr	r0, [r7, #0]
 800f36c:	f7fe fffa 	bl	800e364 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800f370:	4b31      	ldr	r3, [pc, #196]	; (800f438 <tcp_slowtmr+0x5a4>)
 800f372:	2200      	movs	r2, #0
 800f374:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d004      	beq.n	800f386 <tcp_slowtmr+0x4f2>
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	f06f 010c 	mvn.w	r1, #12
 800f382:	68b8      	ldr	r0, [r7, #8]
 800f384:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800f386:	4b2c      	ldr	r3, [pc, #176]	; (800f438 <tcp_slowtmr+0x5a4>)
 800f388:	781b      	ldrb	r3, [r3, #0]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d037      	beq.n	800f3fe <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800f38e:	e592      	b.n	800eeb6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800f390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f392:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f396:	68db      	ldr	r3, [r3, #12]
 800f398:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800f39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f39c:	7f1b      	ldrb	r3, [r3, #28]
 800f39e:	3301      	adds	r3, #1
 800f3a0:	b2da      	uxtb	r2, r3
 800f3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800f3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a8:	7f1a      	ldrb	r2, [r3, #28]
 800f3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ac:	7f5b      	ldrb	r3, [r3, #29]
 800f3ae:	429a      	cmp	r2, r3
 800f3b0:	d325      	bcc.n	800f3fe <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800f3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b4:	2200      	movs	r2, #0
 800f3b6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800f3b8:	4b1f      	ldr	r3, [pc, #124]	; (800f438 <tcp_slowtmr+0x5a4>)
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800f3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d00b      	beq.n	800f3e0 <tcp_slowtmr+0x54c>
 800f3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f3ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f3d0:	6912      	ldr	r2, [r2, #16]
 800f3d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f3d4:	4610      	mov	r0, r2
 800f3d6:	4798      	blx	r3
 800f3d8:	4603      	mov	r3, r0
 800f3da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800f3de:	e002      	b.n	800f3e6 <tcp_slowtmr+0x552>
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800f3e6:	4b14      	ldr	r3, [pc, #80]	; (800f438 <tcp_slowtmr+0x5a4>)
 800f3e8:	781b      	ldrb	r3, [r3, #0]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d000      	beq.n	800f3f0 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800f3ee:	e562      	b.n	800eeb6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f3f0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d102      	bne.n	800f3fe <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800f3f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3fa:	f004 f89f 	bl	801353c <tcp_output>
  while (pcb != NULL) {
 800f3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f400:	2b00      	cmp	r3, #0
 800f402:	f47f ad5e 	bne.w	800eec2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f406:	2300      	movs	r3, #0
 800f408:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800f40a:	4b0c      	ldr	r3, [pc, #48]	; (800f43c <tcp_slowtmr+0x5a8>)
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f410:	e069      	b.n	800f4e6 <tcp_slowtmr+0x652>
 800f412:	bf00      	nop
 800f414:	2000d244 	.word	0x2000d244
 800f418:	000a4cb8 	.word	0x000a4cb8
 800f41c:	10624dd3 	.word	0x10624dd3
 800f420:	000124f8 	.word	0x000124f8
 800f424:	2000d240 	.word	0x2000d240
 800f428:	08019c08 	.word	0x08019c08
 800f42c:	0801a040 	.word	0x0801a040
 800f430:	08019c4c 	.word	0x08019c4c
 800f434:	0801a06c 	.word	0x0801a06c
 800f438:	2000d23c 	.word	0x2000d23c
 800f43c:	2000d250 	.word	0x2000d250
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f442:	7d1b      	ldrb	r3, [r3, #20]
 800f444:	2b0a      	cmp	r3, #10
 800f446:	d006      	beq.n	800f456 <tcp_slowtmr+0x5c2>
 800f448:	4b2a      	ldr	r3, [pc, #168]	; (800f4f4 <tcp_slowtmr+0x660>)
 800f44a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800f44e:	492a      	ldr	r1, [pc, #168]	; (800f4f8 <tcp_slowtmr+0x664>)
 800f450:	482a      	ldr	r0, [pc, #168]	; (800f4fc <tcp_slowtmr+0x668>)
 800f452:	f007 fe7b 	bl	801714c <iprintf>
    pcb_remove = 0;
 800f456:	2300      	movs	r3, #0
 800f458:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f45c:	4b28      	ldr	r3, [pc, #160]	; (800f500 <tcp_slowtmr+0x66c>)
 800f45e:	681a      	ldr	r2, [r3, #0]
 800f460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f462:	6a1b      	ldr	r3, [r3, #32]
 800f464:	1ad3      	subs	r3, r2, r3
 800f466:	2bf0      	cmp	r3, #240	; 0xf0
 800f468:	d904      	bls.n	800f474 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800f46a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f46e:	3301      	adds	r3, #1
 800f470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f474:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d02f      	beq.n	800f4dc <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f47c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f47e:	f000 fbf5 	bl	800fc6c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f484:	2b00      	cmp	r3, #0
 800f486:	d010      	beq.n	800f4aa <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f488:	4b1e      	ldr	r3, [pc, #120]	; (800f504 <tcp_slowtmr+0x670>)
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f48e:	429a      	cmp	r2, r3
 800f490:	d106      	bne.n	800f4a0 <tcp_slowtmr+0x60c>
 800f492:	4b18      	ldr	r3, [pc, #96]	; (800f4f4 <tcp_slowtmr+0x660>)
 800f494:	f240 52af 	movw	r2, #1455	; 0x5af
 800f498:	491b      	ldr	r1, [pc, #108]	; (800f508 <tcp_slowtmr+0x674>)
 800f49a:	4818      	ldr	r0, [pc, #96]	; (800f4fc <tcp_slowtmr+0x668>)
 800f49c:	f007 fe56 	bl	801714c <iprintf>
        prev->next = pcb->next;
 800f4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4a2:	68da      	ldr	r2, [r3, #12]
 800f4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4a6:	60da      	str	r2, [r3, #12]
 800f4a8:	e00f      	b.n	800f4ca <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f4aa:	4b16      	ldr	r3, [pc, #88]	; (800f504 <tcp_slowtmr+0x670>)
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f4b0:	429a      	cmp	r2, r3
 800f4b2:	d006      	beq.n	800f4c2 <tcp_slowtmr+0x62e>
 800f4b4:	4b0f      	ldr	r3, [pc, #60]	; (800f4f4 <tcp_slowtmr+0x660>)
 800f4b6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800f4ba:	4914      	ldr	r1, [pc, #80]	; (800f50c <tcp_slowtmr+0x678>)
 800f4bc:	480f      	ldr	r0, [pc, #60]	; (800f4fc <tcp_slowtmr+0x668>)
 800f4be:	f007 fe45 	bl	801714c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4c4:	68db      	ldr	r3, [r3, #12]
 800f4c6:	4a0f      	ldr	r2, [pc, #60]	; (800f504 <tcp_slowtmr+0x670>)
 800f4c8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4cc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4d0:	68db      	ldr	r3, [r3, #12]
 800f4d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f4d4:	69f8      	ldr	r0, [r7, #28]
 800f4d6:	f7fe ff45 	bl	800e364 <tcp_free>
 800f4da:	e004      	b.n	800f4e6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800f4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4de:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4e2:	68db      	ldr	r3, [r3, #12]
 800f4e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d1a9      	bne.n	800f440 <tcp_slowtmr+0x5ac>
    }
  }
}
 800f4ec:	bf00      	nop
 800f4ee:	3730      	adds	r7, #48	; 0x30
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bdb0      	pop	{r4, r5, r7, pc}
 800f4f4:	08019c08 	.word	0x08019c08
 800f4f8:	0801a098 	.word	0x0801a098
 800f4fc:	08019c4c 	.word	0x08019c4c
 800f500:	2000d244 	.word	0x2000d244
 800f504:	2000d250 	.word	0x2000d250
 800f508:	0801a0c8 	.word	0x0801a0c8
 800f50c:	0801a0f0 	.word	0x0801a0f0

0800f510 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b082      	sub	sp, #8
 800f514:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f516:	4b2d      	ldr	r3, [pc, #180]	; (800f5cc <tcp_fasttmr+0xbc>)
 800f518:	781b      	ldrb	r3, [r3, #0]
 800f51a:	3301      	adds	r3, #1
 800f51c:	b2da      	uxtb	r2, r3
 800f51e:	4b2b      	ldr	r3, [pc, #172]	; (800f5cc <tcp_fasttmr+0xbc>)
 800f520:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f522:	4b2b      	ldr	r3, [pc, #172]	; (800f5d0 <tcp_fasttmr+0xc0>)
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f528:	e048      	b.n	800f5bc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	7f9a      	ldrb	r2, [r3, #30]
 800f52e:	4b27      	ldr	r3, [pc, #156]	; (800f5cc <tcp_fasttmr+0xbc>)
 800f530:	781b      	ldrb	r3, [r3, #0]
 800f532:	429a      	cmp	r2, r3
 800f534:	d03f      	beq.n	800f5b6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f536:	4b25      	ldr	r3, [pc, #148]	; (800f5cc <tcp_fasttmr+0xbc>)
 800f538:	781a      	ldrb	r2, [r3, #0]
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	8b5b      	ldrh	r3, [r3, #26]
 800f542:	f003 0301 	and.w	r3, r3, #1
 800f546:	2b00      	cmp	r3, #0
 800f548:	d010      	beq.n	800f56c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	8b5b      	ldrh	r3, [r3, #26]
 800f54e:	f043 0302 	orr.w	r3, r3, #2
 800f552:	b29a      	uxth	r2, r3
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f558:	6878      	ldr	r0, [r7, #4]
 800f55a:	f003 ffef 	bl	801353c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	8b5b      	ldrh	r3, [r3, #26]
 800f562:	f023 0303 	bic.w	r3, r3, #3
 800f566:	b29a      	uxth	r2, r3
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	8b5b      	ldrh	r3, [r3, #26]
 800f570:	f003 0308 	and.w	r3, r3, #8
 800f574:	2b00      	cmp	r3, #0
 800f576:	d009      	beq.n	800f58c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	8b5b      	ldrh	r3, [r3, #26]
 800f57c:	f023 0308 	bic.w	r3, r3, #8
 800f580:	b29a      	uxth	r2, r3
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f586:	6878      	ldr	r0, [r7, #4]
 800f588:	f7ff f87c 	bl	800e684 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	68db      	ldr	r3, [r3, #12]
 800f590:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f596:	2b00      	cmp	r3, #0
 800f598:	d00a      	beq.n	800f5b0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f59a:	4b0e      	ldr	r3, [pc, #56]	; (800f5d4 <tcp_fasttmr+0xc4>)
 800f59c:	2200      	movs	r2, #0
 800f59e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f5a0:	6878      	ldr	r0, [r7, #4]
 800f5a2:	f000 f819 	bl	800f5d8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f5a6:	4b0b      	ldr	r3, [pc, #44]	; (800f5d4 <tcp_fasttmr+0xc4>)
 800f5a8:	781b      	ldrb	r3, [r3, #0]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d000      	beq.n	800f5b0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f5ae:	e7b8      	b.n	800f522 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	607b      	str	r3, [r7, #4]
 800f5b4:	e002      	b.n	800f5bc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	68db      	ldr	r3, [r3, #12]
 800f5ba:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d1b3      	bne.n	800f52a <tcp_fasttmr+0x1a>
    }
  }
}
 800f5c2:	bf00      	nop
 800f5c4:	3708      	adds	r7, #8
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	bd80      	pop	{r7, pc}
 800f5ca:	bf00      	nop
 800f5cc:	2000464a 	.word	0x2000464a
 800f5d0:	2000d240 	.word	0x2000d240
 800f5d4:	2000d23c 	.word	0x2000d23c

0800f5d8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f5d8:	b590      	push	{r4, r7, lr}
 800f5da:	b085      	sub	sp, #20
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d109      	bne.n	800f5fa <tcp_process_refused_data+0x22>
 800f5e6:	4b37      	ldr	r3, [pc, #220]	; (800f6c4 <tcp_process_refused_data+0xec>)
 800f5e8:	f240 6209 	movw	r2, #1545	; 0x609
 800f5ec:	4936      	ldr	r1, [pc, #216]	; (800f6c8 <tcp_process_refused_data+0xf0>)
 800f5ee:	4837      	ldr	r0, [pc, #220]	; (800f6cc <tcp_process_refused_data+0xf4>)
 800f5f0:	f007 fdac 	bl	801714c <iprintf>
 800f5f4:	f06f 030f 	mvn.w	r3, #15
 800f5f8:	e060      	b.n	800f6bc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f5fe:	7b5b      	ldrb	r3, [r3, #13]
 800f600:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f606:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	2200      	movs	r2, #0
 800f60c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f614:	2b00      	cmp	r3, #0
 800f616:	d00b      	beq.n	800f630 <tcp_process_refused_data+0x58>
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	6918      	ldr	r0, [r3, #16]
 800f622:	2300      	movs	r3, #0
 800f624:	68ba      	ldr	r2, [r7, #8]
 800f626:	6879      	ldr	r1, [r7, #4]
 800f628:	47a0      	blx	r4
 800f62a:	4603      	mov	r3, r0
 800f62c:	73fb      	strb	r3, [r7, #15]
 800f62e:	e007      	b.n	800f640 <tcp_process_refused_data+0x68>
 800f630:	2300      	movs	r3, #0
 800f632:	68ba      	ldr	r2, [r7, #8]
 800f634:	6879      	ldr	r1, [r7, #4]
 800f636:	2000      	movs	r0, #0
 800f638:	f000 f8a2 	bl	800f780 <tcp_recv_null>
 800f63c:	4603      	mov	r3, r0
 800f63e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f640:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d12a      	bne.n	800f69e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f648:	7bbb      	ldrb	r3, [r7, #14]
 800f64a:	f003 0320 	and.w	r3, r3, #32
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d033      	beq.n	800f6ba <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f656:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f65a:	d005      	beq.n	800f668 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f660:	3301      	adds	r3, #1
 800f662:	b29a      	uxth	r2, r3
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d00b      	beq.n	800f68a <tcp_process_refused_data+0xb2>
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	6918      	ldr	r0, [r3, #16]
 800f67c:	2300      	movs	r3, #0
 800f67e:	2200      	movs	r2, #0
 800f680:	6879      	ldr	r1, [r7, #4]
 800f682:	47a0      	blx	r4
 800f684:	4603      	mov	r3, r0
 800f686:	73fb      	strb	r3, [r7, #15]
 800f688:	e001      	b.n	800f68e <tcp_process_refused_data+0xb6>
 800f68a:	2300      	movs	r3, #0
 800f68c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f68e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f692:	f113 0f0d 	cmn.w	r3, #13
 800f696:	d110      	bne.n	800f6ba <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f698:	f06f 030c 	mvn.w	r3, #12
 800f69c:	e00e      	b.n	800f6bc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800f69e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f6a2:	f113 0f0d 	cmn.w	r3, #13
 800f6a6:	d102      	bne.n	800f6ae <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f6a8:	f06f 030c 	mvn.w	r3, #12
 800f6ac:	e006      	b.n	800f6bc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	68ba      	ldr	r2, [r7, #8]
 800f6b2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800f6b4:	f06f 0304 	mvn.w	r3, #4
 800f6b8:	e000      	b.n	800f6bc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f6ba:	2300      	movs	r3, #0
}
 800f6bc:	4618      	mov	r0, r3
 800f6be:	3714      	adds	r7, #20
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	bd90      	pop	{r4, r7, pc}
 800f6c4:	08019c08 	.word	0x08019c08
 800f6c8:	0801a118 	.word	0x0801a118
 800f6cc:	08019c4c 	.word	0x08019c4c

0800f6d0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b084      	sub	sp, #16
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f6d8:	e007      	b.n	800f6ea <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f6e0:	6878      	ldr	r0, [r7, #4]
 800f6e2:	f000 f809 	bl	800f6f8 <tcp_seg_free>
    seg = next;
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d1f4      	bne.n	800f6da <tcp_segs_free+0xa>
  }
}
 800f6f0:	bf00      	nop
 800f6f2:	3710      	adds	r7, #16
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	bd80      	pop	{r7, pc}

0800f6f8 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b082      	sub	sp, #8
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d00c      	beq.n	800f720 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	685b      	ldr	r3, [r3, #4]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d004      	beq.n	800f718 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	685b      	ldr	r3, [r3, #4]
 800f712:	4618      	mov	r0, r3
 800f714:	f7fe fb7a 	bl	800de0c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f718:	6879      	ldr	r1, [r7, #4]
 800f71a:	2002      	movs	r0, #2
 800f71c:	f7fd fca8 	bl	800d070 <memp_free>
  }
}
 800f720:	bf00      	nop
 800f722:	3708      	adds	r7, #8
 800f724:	46bd      	mov	sp, r7
 800f726:	bd80      	pop	{r7, pc}

0800f728 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f728:	b580      	push	{r7, lr}
 800f72a:	b084      	sub	sp, #16
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d106      	bne.n	800f744 <tcp_seg_copy+0x1c>
 800f736:	4b0f      	ldr	r3, [pc, #60]	; (800f774 <tcp_seg_copy+0x4c>)
 800f738:	f240 6282 	movw	r2, #1666	; 0x682
 800f73c:	490e      	ldr	r1, [pc, #56]	; (800f778 <tcp_seg_copy+0x50>)
 800f73e:	480f      	ldr	r0, [pc, #60]	; (800f77c <tcp_seg_copy+0x54>)
 800f740:	f007 fd04 	bl	801714c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f744:	2002      	movs	r0, #2
 800f746:	f7fd fc41 	bl	800cfcc <memp_malloc>
 800f74a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d101      	bne.n	800f756 <tcp_seg_copy+0x2e>
    return NULL;
 800f752:	2300      	movs	r3, #0
 800f754:	e00a      	b.n	800f76c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f756:	2210      	movs	r2, #16
 800f758:	6879      	ldr	r1, [r7, #4]
 800f75a:	68f8      	ldr	r0, [r7, #12]
 800f75c:	f007 fcc9 	bl	80170f2 <memcpy>
  pbuf_ref(cseg->p);
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	685b      	ldr	r3, [r3, #4]
 800f764:	4618      	mov	r0, r3
 800f766:	f7fe fbf7 	bl	800df58 <pbuf_ref>
  return cseg;
 800f76a:	68fb      	ldr	r3, [r7, #12]
}
 800f76c:	4618      	mov	r0, r3
 800f76e:	3710      	adds	r7, #16
 800f770:	46bd      	mov	sp, r7
 800f772:	bd80      	pop	{r7, pc}
 800f774:	08019c08 	.word	0x08019c08
 800f778:	0801a15c 	.word	0x0801a15c
 800f77c:	08019c4c 	.word	0x08019c4c

0800f780 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b084      	sub	sp, #16
 800f784:	af00      	add	r7, sp, #0
 800f786:	60f8      	str	r0, [r7, #12]
 800f788:	60b9      	str	r1, [r7, #8]
 800f78a:	607a      	str	r2, [r7, #4]
 800f78c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f78e:	68bb      	ldr	r3, [r7, #8]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d109      	bne.n	800f7a8 <tcp_recv_null+0x28>
 800f794:	4b12      	ldr	r3, [pc, #72]	; (800f7e0 <tcp_recv_null+0x60>)
 800f796:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f79a:	4912      	ldr	r1, [pc, #72]	; (800f7e4 <tcp_recv_null+0x64>)
 800f79c:	4812      	ldr	r0, [pc, #72]	; (800f7e8 <tcp_recv_null+0x68>)
 800f79e:	f007 fcd5 	bl	801714c <iprintf>
 800f7a2:	f06f 030f 	mvn.w	r3, #15
 800f7a6:	e016      	b.n	800f7d6 <tcp_recv_null+0x56>

  if (p != NULL) {
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d009      	beq.n	800f7c2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	891b      	ldrh	r3, [r3, #8]
 800f7b2:	4619      	mov	r1, r3
 800f7b4:	68b8      	ldr	r0, [r7, #8]
 800f7b6:	f7ff fad7 	bl	800ed68 <tcp_recved>
    pbuf_free(p);
 800f7ba:	6878      	ldr	r0, [r7, #4]
 800f7bc:	f7fe fb26 	bl	800de0c <pbuf_free>
 800f7c0:	e008      	b.n	800f7d4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f7c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d104      	bne.n	800f7d4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f7ca:	68b8      	ldr	r0, [r7, #8]
 800f7cc:	f7fe ffc0 	bl	800e750 <tcp_close>
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	e000      	b.n	800f7d6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f7d4:	2300      	movs	r3, #0
}
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	3710      	adds	r7, #16
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	bd80      	pop	{r7, pc}
 800f7de:	bf00      	nop
 800f7e0:	08019c08 	.word	0x08019c08
 800f7e4:	0801a178 	.word	0x0801a178
 800f7e8:	08019c4c 	.word	0x08019c4c

0800f7ec <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b086      	sub	sp, #24
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	4603      	mov	r3, r0
 800f7f4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f7f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	db01      	blt.n	800f802 <tcp_kill_prio+0x16>
 800f7fe:	79fb      	ldrb	r3, [r7, #7]
 800f800:	e000      	b.n	800f804 <tcp_kill_prio+0x18>
 800f802:	237f      	movs	r3, #127	; 0x7f
 800f804:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f806:	7afb      	ldrb	r3, [r7, #11]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d034      	beq.n	800f876 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f80c:	7afb      	ldrb	r3, [r7, #11]
 800f80e:	3b01      	subs	r3, #1
 800f810:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f812:	2300      	movs	r3, #0
 800f814:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f816:	2300      	movs	r3, #0
 800f818:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f81a:	4b19      	ldr	r3, [pc, #100]	; (800f880 <tcp_kill_prio+0x94>)
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	617b      	str	r3, [r7, #20]
 800f820:	e01f      	b.n	800f862 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f822:	697b      	ldr	r3, [r7, #20]
 800f824:	7d5b      	ldrb	r3, [r3, #21]
 800f826:	7afa      	ldrb	r2, [r7, #11]
 800f828:	429a      	cmp	r2, r3
 800f82a:	d80c      	bhi.n	800f846 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f82c:	697b      	ldr	r3, [r7, #20]
 800f82e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f830:	7afa      	ldrb	r2, [r7, #11]
 800f832:	429a      	cmp	r2, r3
 800f834:	d112      	bne.n	800f85c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f836:	4b13      	ldr	r3, [pc, #76]	; (800f884 <tcp_kill_prio+0x98>)
 800f838:	681a      	ldr	r2, [r3, #0]
 800f83a:	697b      	ldr	r3, [r7, #20]
 800f83c:	6a1b      	ldr	r3, [r3, #32]
 800f83e:	1ad3      	subs	r3, r2, r3
 800f840:	68fa      	ldr	r2, [r7, #12]
 800f842:	429a      	cmp	r2, r3
 800f844:	d80a      	bhi.n	800f85c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f846:	4b0f      	ldr	r3, [pc, #60]	; (800f884 <tcp_kill_prio+0x98>)
 800f848:	681a      	ldr	r2, [r3, #0]
 800f84a:	697b      	ldr	r3, [r7, #20]
 800f84c:	6a1b      	ldr	r3, [r3, #32]
 800f84e:	1ad3      	subs	r3, r2, r3
 800f850:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f852:	697b      	ldr	r3, [r7, #20]
 800f854:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f856:	697b      	ldr	r3, [r7, #20]
 800f858:	7d5b      	ldrb	r3, [r3, #21]
 800f85a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f85c:	697b      	ldr	r3, [r7, #20]
 800f85e:	68db      	ldr	r3, [r3, #12]
 800f860:	617b      	str	r3, [r7, #20]
 800f862:	697b      	ldr	r3, [r7, #20]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d1dc      	bne.n	800f822 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f868:	693b      	ldr	r3, [r7, #16]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d004      	beq.n	800f878 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f86e:	6938      	ldr	r0, [r7, #16]
 800f870:	f7ff f8b2 	bl	800e9d8 <tcp_abort>
 800f874:	e000      	b.n	800f878 <tcp_kill_prio+0x8c>
    return;
 800f876:	bf00      	nop
  }
}
 800f878:	3718      	adds	r7, #24
 800f87a:	46bd      	mov	sp, r7
 800f87c:	bd80      	pop	{r7, pc}
 800f87e:	bf00      	nop
 800f880:	2000d240 	.word	0x2000d240
 800f884:	2000d244 	.word	0x2000d244

0800f888 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b086      	sub	sp, #24
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	4603      	mov	r3, r0
 800f890:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f892:	79fb      	ldrb	r3, [r7, #7]
 800f894:	2b08      	cmp	r3, #8
 800f896:	d009      	beq.n	800f8ac <tcp_kill_state+0x24>
 800f898:	79fb      	ldrb	r3, [r7, #7]
 800f89a:	2b09      	cmp	r3, #9
 800f89c:	d006      	beq.n	800f8ac <tcp_kill_state+0x24>
 800f89e:	4b1a      	ldr	r3, [pc, #104]	; (800f908 <tcp_kill_state+0x80>)
 800f8a0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800f8a4:	4919      	ldr	r1, [pc, #100]	; (800f90c <tcp_kill_state+0x84>)
 800f8a6:	481a      	ldr	r0, [pc, #104]	; (800f910 <tcp_kill_state+0x88>)
 800f8a8:	f007 fc50 	bl	801714c <iprintf>

  inactivity = 0;
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f8b4:	4b17      	ldr	r3, [pc, #92]	; (800f914 <tcp_kill_state+0x8c>)
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	617b      	str	r3, [r7, #20]
 800f8ba:	e017      	b.n	800f8ec <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f8bc:	697b      	ldr	r3, [r7, #20]
 800f8be:	7d1b      	ldrb	r3, [r3, #20]
 800f8c0:	79fa      	ldrb	r2, [r7, #7]
 800f8c2:	429a      	cmp	r2, r3
 800f8c4:	d10f      	bne.n	800f8e6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f8c6:	4b14      	ldr	r3, [pc, #80]	; (800f918 <tcp_kill_state+0x90>)
 800f8c8:	681a      	ldr	r2, [r3, #0]
 800f8ca:	697b      	ldr	r3, [r7, #20]
 800f8cc:	6a1b      	ldr	r3, [r3, #32]
 800f8ce:	1ad3      	subs	r3, r2, r3
 800f8d0:	68fa      	ldr	r2, [r7, #12]
 800f8d2:	429a      	cmp	r2, r3
 800f8d4:	d807      	bhi.n	800f8e6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f8d6:	4b10      	ldr	r3, [pc, #64]	; (800f918 <tcp_kill_state+0x90>)
 800f8d8:	681a      	ldr	r2, [r3, #0]
 800f8da:	697b      	ldr	r3, [r7, #20]
 800f8dc:	6a1b      	ldr	r3, [r3, #32]
 800f8de:	1ad3      	subs	r3, r2, r3
 800f8e0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f8e2:	697b      	ldr	r3, [r7, #20]
 800f8e4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f8e6:	697b      	ldr	r3, [r7, #20]
 800f8e8:	68db      	ldr	r3, [r3, #12]
 800f8ea:	617b      	str	r3, [r7, #20]
 800f8ec:	697b      	ldr	r3, [r7, #20]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d1e4      	bne.n	800f8bc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f8f2:	693b      	ldr	r3, [r7, #16]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d003      	beq.n	800f900 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f8f8:	2100      	movs	r1, #0
 800f8fa:	6938      	ldr	r0, [r7, #16]
 800f8fc:	f7fe ffae 	bl	800e85c <tcp_abandon>
  }
}
 800f900:	bf00      	nop
 800f902:	3718      	adds	r7, #24
 800f904:	46bd      	mov	sp, r7
 800f906:	bd80      	pop	{r7, pc}
 800f908:	08019c08 	.word	0x08019c08
 800f90c:	0801a194 	.word	0x0801a194
 800f910:	08019c4c 	.word	0x08019c4c
 800f914:	2000d240 	.word	0x2000d240
 800f918:	2000d244 	.word	0x2000d244

0800f91c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b084      	sub	sp, #16
 800f920:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f922:	2300      	movs	r3, #0
 800f924:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f926:	2300      	movs	r3, #0
 800f928:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f92a:	4b12      	ldr	r3, [pc, #72]	; (800f974 <tcp_kill_timewait+0x58>)
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	60fb      	str	r3, [r7, #12]
 800f930:	e012      	b.n	800f958 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f932:	4b11      	ldr	r3, [pc, #68]	; (800f978 <tcp_kill_timewait+0x5c>)
 800f934:	681a      	ldr	r2, [r3, #0]
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	6a1b      	ldr	r3, [r3, #32]
 800f93a:	1ad3      	subs	r3, r2, r3
 800f93c:	687a      	ldr	r2, [r7, #4]
 800f93e:	429a      	cmp	r2, r3
 800f940:	d807      	bhi.n	800f952 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f942:	4b0d      	ldr	r3, [pc, #52]	; (800f978 <tcp_kill_timewait+0x5c>)
 800f944:	681a      	ldr	r2, [r3, #0]
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	6a1b      	ldr	r3, [r3, #32]
 800f94a:	1ad3      	subs	r3, r2, r3
 800f94c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	68db      	ldr	r3, [r3, #12]
 800f956:	60fb      	str	r3, [r7, #12]
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d1e9      	bne.n	800f932 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f95e:	68bb      	ldr	r3, [r7, #8]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d002      	beq.n	800f96a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f964:	68b8      	ldr	r0, [r7, #8]
 800f966:	f7ff f837 	bl	800e9d8 <tcp_abort>
  }
}
 800f96a:	bf00      	nop
 800f96c:	3710      	adds	r7, #16
 800f96e:	46bd      	mov	sp, r7
 800f970:	bd80      	pop	{r7, pc}
 800f972:	bf00      	nop
 800f974:	2000d250 	.word	0x2000d250
 800f978:	2000d244 	.word	0x2000d244

0800f97c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b082      	sub	sp, #8
 800f980:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f982:	4b10      	ldr	r3, [pc, #64]	; (800f9c4 <tcp_handle_closepend+0x48>)
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f988:	e014      	b.n	800f9b4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	68db      	ldr	r3, [r3, #12]
 800f98e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	8b5b      	ldrh	r3, [r3, #26]
 800f994:	f003 0308 	and.w	r3, r3, #8
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d009      	beq.n	800f9b0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	8b5b      	ldrh	r3, [r3, #26]
 800f9a0:	f023 0308 	bic.w	r3, r3, #8
 800f9a4:	b29a      	uxth	r2, r3
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f9aa:	6878      	ldr	r0, [r7, #4]
 800f9ac:	f7fe fe6a 	bl	800e684 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f9b0:	683b      	ldr	r3, [r7, #0]
 800f9b2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d1e7      	bne.n	800f98a <tcp_handle_closepend+0xe>
  }
}
 800f9ba:	bf00      	nop
 800f9bc:	3708      	adds	r7, #8
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	bd80      	pop	{r7, pc}
 800f9c2:	bf00      	nop
 800f9c4:	2000d240 	.word	0x2000d240

0800f9c8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b084      	sub	sp, #16
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f9d2:	2000      	movs	r0, #0
 800f9d4:	f7fd fafa 	bl	800cfcc <memp_malloc>
 800f9d8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d126      	bne.n	800fa2e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f9e0:	f7ff ffcc 	bl	800f97c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f9e4:	f7ff ff9a 	bl	800f91c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f9e8:	2000      	movs	r0, #0
 800f9ea:	f7fd faef 	bl	800cfcc <memp_malloc>
 800f9ee:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d11b      	bne.n	800fa2e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f9f6:	2009      	movs	r0, #9
 800f9f8:	f7ff ff46 	bl	800f888 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f9fc:	2000      	movs	r0, #0
 800f9fe:	f7fd fae5 	bl	800cfcc <memp_malloc>
 800fa02:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d111      	bne.n	800fa2e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800fa0a:	2008      	movs	r0, #8
 800fa0c:	f7ff ff3c 	bl	800f888 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fa10:	2000      	movs	r0, #0
 800fa12:	f7fd fadb 	bl	800cfcc <memp_malloc>
 800fa16:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d107      	bne.n	800fa2e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800fa1e:	79fb      	ldrb	r3, [r7, #7]
 800fa20:	4618      	mov	r0, r3
 800fa22:	f7ff fee3 	bl	800f7ec <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fa26:	2000      	movs	r0, #0
 800fa28:	f7fd fad0 	bl	800cfcc <memp_malloc>
 800fa2c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d03f      	beq.n	800fab4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800fa34:	229c      	movs	r2, #156	; 0x9c
 800fa36:	2100      	movs	r1, #0
 800fa38:	68f8      	ldr	r0, [r7, #12]
 800fa3a:	f007 fb7e 	bl	801713a <memset>
    pcb->prio = prio;
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	79fa      	ldrb	r2, [r7, #7]
 800fa42:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800fa4a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800fa54:	855a      	strh	r2, [r3, #42]	; 0x2a
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	22ff      	movs	r2, #255	; 0xff
 800fa62:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	f44f 7206 	mov.w	r2, #536	; 0x218
 800fa6a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	2206      	movs	r2, #6
 800fa70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	2206      	movs	r2, #6
 800fa78:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fa80:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	2201      	movs	r2, #1
 800fa86:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800fa8a:	4b0d      	ldr	r3, [pc, #52]	; (800fac0 <tcp_alloc+0xf8>)
 800fa8c:	681a      	ldr	r2, [r3, #0]
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800fa92:	4b0c      	ldr	r3, [pc, #48]	; (800fac4 <tcp_alloc+0xfc>)
 800fa94:	781a      	ldrb	r2, [r3, #0]
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800faa0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	4a08      	ldr	r2, [pc, #32]	; (800fac8 <tcp_alloc+0x100>)
 800faa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	4a07      	ldr	r2, [pc, #28]	; (800facc <tcp_alloc+0x104>)
 800fab0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800fab4:	68fb      	ldr	r3, [r7, #12]
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	3710      	adds	r7, #16
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}
 800fabe:	bf00      	nop
 800fac0:	2000d244 	.word	0x2000d244
 800fac4:	2000464a 	.word	0x2000464a
 800fac8:	0800f781 	.word	0x0800f781
 800facc:	006ddd00 	.word	0x006ddd00

0800fad0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b084      	sub	sp, #16
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	4603      	mov	r3, r0
 800fad8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800fada:	2040      	movs	r0, #64	; 0x40
 800fadc:	f7ff ff74 	bl	800f9c8 <tcp_alloc>
 800fae0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800fae2:	68fb      	ldr	r3, [r7, #12]
}
 800fae4:	4618      	mov	r0, r3
 800fae6:	3710      	adds	r7, #16
 800fae8:	46bd      	mov	sp, r7
 800faea:	bd80      	pop	{r7, pc}

0800faec <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800faec:	b480      	push	{r7}
 800faee:	b083      	sub	sp, #12
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
 800faf4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d002      	beq.n	800fb02 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	683a      	ldr	r2, [r7, #0]
 800fb00:	611a      	str	r2, [r3, #16]
  }
}
 800fb02:	bf00      	nop
 800fb04:	370c      	adds	r7, #12
 800fb06:	46bd      	mov	sp, r7
 800fb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0c:	4770      	bx	lr
	...

0800fb10 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b082      	sub	sp, #8
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
 800fb18:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d00e      	beq.n	800fb3e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	7d1b      	ldrb	r3, [r3, #20]
 800fb24:	2b01      	cmp	r3, #1
 800fb26:	d106      	bne.n	800fb36 <tcp_recv+0x26>
 800fb28:	4b07      	ldr	r3, [pc, #28]	; (800fb48 <tcp_recv+0x38>)
 800fb2a:	f240 72df 	movw	r2, #2015	; 0x7df
 800fb2e:	4907      	ldr	r1, [pc, #28]	; (800fb4c <tcp_recv+0x3c>)
 800fb30:	4807      	ldr	r0, [pc, #28]	; (800fb50 <tcp_recv+0x40>)
 800fb32:	f007 fb0b 	bl	801714c <iprintf>
    pcb->recv = recv;
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	683a      	ldr	r2, [r7, #0]
 800fb3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800fb3e:	bf00      	nop
 800fb40:	3708      	adds	r7, #8
 800fb42:	46bd      	mov	sp, r7
 800fb44:	bd80      	pop	{r7, pc}
 800fb46:	bf00      	nop
 800fb48:	08019c08 	.word	0x08019c08
 800fb4c:	0801a1a4 	.word	0x0801a1a4
 800fb50:	08019c4c 	.word	0x08019c4c

0800fb54 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b082      	sub	sp, #8
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
 800fb5c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d00e      	beq.n	800fb82 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	7d1b      	ldrb	r3, [r3, #20]
 800fb68:	2b01      	cmp	r3, #1
 800fb6a:	d106      	bne.n	800fb7a <tcp_sent+0x26>
 800fb6c:	4b07      	ldr	r3, [pc, #28]	; (800fb8c <tcp_sent+0x38>)
 800fb6e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800fb72:	4907      	ldr	r1, [pc, #28]	; (800fb90 <tcp_sent+0x3c>)
 800fb74:	4807      	ldr	r0, [pc, #28]	; (800fb94 <tcp_sent+0x40>)
 800fb76:	f007 fae9 	bl	801714c <iprintf>
    pcb->sent = sent;
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	683a      	ldr	r2, [r7, #0]
 800fb7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800fb82:	bf00      	nop
 800fb84:	3708      	adds	r7, #8
 800fb86:	46bd      	mov	sp, r7
 800fb88:	bd80      	pop	{r7, pc}
 800fb8a:	bf00      	nop
 800fb8c:	08019c08 	.word	0x08019c08
 800fb90:	0801a1cc 	.word	0x0801a1cc
 800fb94:	08019c4c 	.word	0x08019c4c

0800fb98 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b082      	sub	sp, #8
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
 800fba0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d00e      	beq.n	800fbc6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	7d1b      	ldrb	r3, [r3, #20]
 800fbac:	2b01      	cmp	r3, #1
 800fbae:	d106      	bne.n	800fbbe <tcp_err+0x26>
 800fbb0:	4b07      	ldr	r3, [pc, #28]	; (800fbd0 <tcp_err+0x38>)
 800fbb2:	f640 020d 	movw	r2, #2061	; 0x80d
 800fbb6:	4907      	ldr	r1, [pc, #28]	; (800fbd4 <tcp_err+0x3c>)
 800fbb8:	4807      	ldr	r0, [pc, #28]	; (800fbd8 <tcp_err+0x40>)
 800fbba:	f007 fac7 	bl	801714c <iprintf>
    pcb->errf = err;
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	683a      	ldr	r2, [r7, #0]
 800fbc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800fbc6:	bf00      	nop
 800fbc8:	3708      	adds	r7, #8
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	bd80      	pop	{r7, pc}
 800fbce:	bf00      	nop
 800fbd0:	08019c08 	.word	0x08019c08
 800fbd4:	0801a1f4 	.word	0x0801a1f4
 800fbd8:	08019c4c 	.word	0x08019c4c

0800fbdc <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800fbdc:	b480      	push	{r7}
 800fbde:	b085      	sub	sp, #20
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
 800fbe4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d008      	beq.n	800fbfe <tcp_accept+0x22>
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	7d1b      	ldrb	r3, [r3, #20]
 800fbf0:	2b01      	cmp	r3, #1
 800fbf2:	d104      	bne.n	800fbfe <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	683a      	ldr	r2, [r7, #0]
 800fbfc:	619a      	str	r2, [r3, #24]
  }
}
 800fbfe:	bf00      	nop
 800fc00:	3714      	adds	r7, #20
 800fc02:	46bd      	mov	sp, r7
 800fc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc08:	4770      	bx	lr
	...

0800fc0c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b084      	sub	sp, #16
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	60f8      	str	r0, [r7, #12]
 800fc14:	60b9      	str	r1, [r7, #8]
 800fc16:	4613      	mov	r3, r2
 800fc18:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d107      	bne.n	800fc30 <tcp_poll+0x24>
 800fc20:	4b0e      	ldr	r3, [pc, #56]	; (800fc5c <tcp_poll+0x50>)
 800fc22:	f640 023d 	movw	r2, #2109	; 0x83d
 800fc26:	490e      	ldr	r1, [pc, #56]	; (800fc60 <tcp_poll+0x54>)
 800fc28:	480e      	ldr	r0, [pc, #56]	; (800fc64 <tcp_poll+0x58>)
 800fc2a:	f007 fa8f 	bl	801714c <iprintf>
 800fc2e:	e011      	b.n	800fc54 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	7d1b      	ldrb	r3, [r3, #20]
 800fc34:	2b01      	cmp	r3, #1
 800fc36:	d106      	bne.n	800fc46 <tcp_poll+0x3a>
 800fc38:	4b08      	ldr	r3, [pc, #32]	; (800fc5c <tcp_poll+0x50>)
 800fc3a:	f640 023e 	movw	r2, #2110	; 0x83e
 800fc3e:	490a      	ldr	r1, [pc, #40]	; (800fc68 <tcp_poll+0x5c>)
 800fc40:	4808      	ldr	r0, [pc, #32]	; (800fc64 <tcp_poll+0x58>)
 800fc42:	f007 fa83 	bl	801714c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	68ba      	ldr	r2, [r7, #8]
 800fc4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	79fa      	ldrb	r2, [r7, #7]
 800fc52:	775a      	strb	r2, [r3, #29]
}
 800fc54:	3710      	adds	r7, #16
 800fc56:	46bd      	mov	sp, r7
 800fc58:	bd80      	pop	{r7, pc}
 800fc5a:	bf00      	nop
 800fc5c:	08019c08 	.word	0x08019c08
 800fc60:	0801a21c 	.word	0x0801a21c
 800fc64:	08019c4c 	.word	0x08019c4c
 800fc68:	0801a234 	.word	0x0801a234

0800fc6c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b082      	sub	sp, #8
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d107      	bne.n	800fc8a <tcp_pcb_purge+0x1e>
 800fc7a:	4b21      	ldr	r3, [pc, #132]	; (800fd00 <tcp_pcb_purge+0x94>)
 800fc7c:	f640 0251 	movw	r2, #2129	; 0x851
 800fc80:	4920      	ldr	r1, [pc, #128]	; (800fd04 <tcp_pcb_purge+0x98>)
 800fc82:	4821      	ldr	r0, [pc, #132]	; (800fd08 <tcp_pcb_purge+0x9c>)
 800fc84:	f007 fa62 	bl	801714c <iprintf>
 800fc88:	e037      	b.n	800fcfa <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	7d1b      	ldrb	r3, [r3, #20]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d033      	beq.n	800fcfa <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800fc96:	2b0a      	cmp	r3, #10
 800fc98:	d02f      	beq.n	800fcfa <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800fc9e:	2b01      	cmp	r3, #1
 800fca0:	d02b      	beq.n	800fcfa <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d007      	beq.n	800fcba <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fcae:	4618      	mov	r0, r3
 800fcb0:	f7fe f8ac 	bl	800de0c <pbuf_free>
      pcb->refused_data = NULL;
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	2200      	movs	r2, #0
 800fcb8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d002      	beq.n	800fcc8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800fcc2:	6878      	ldr	r0, [r7, #4]
 800fcc4:	f000 f986 	bl	800ffd4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fcce:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	f7ff fcfb 	bl	800f6d0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fcde:	4618      	mov	r0, r3
 800fce0:	f7ff fcf6 	bl	800f6d0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	2200      	movs	r2, #0
 800fce8:	66da      	str	r2, [r3, #108]	; 0x6c
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800fcfa:	3708      	adds	r7, #8
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	bd80      	pop	{r7, pc}
 800fd00:	08019c08 	.word	0x08019c08
 800fd04:	0801a254 	.word	0x0801a254
 800fd08:	08019c4c 	.word	0x08019c4c

0800fd0c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b084      	sub	sp, #16
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
 800fd14:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800fd16:	683b      	ldr	r3, [r7, #0]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d106      	bne.n	800fd2a <tcp_pcb_remove+0x1e>
 800fd1c:	4b3e      	ldr	r3, [pc, #248]	; (800fe18 <tcp_pcb_remove+0x10c>)
 800fd1e:	f640 0283 	movw	r2, #2179	; 0x883
 800fd22:	493e      	ldr	r1, [pc, #248]	; (800fe1c <tcp_pcb_remove+0x110>)
 800fd24:	483e      	ldr	r0, [pc, #248]	; (800fe20 <tcp_pcb_remove+0x114>)
 800fd26:	f007 fa11 	bl	801714c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d106      	bne.n	800fd3e <tcp_pcb_remove+0x32>
 800fd30:	4b39      	ldr	r3, [pc, #228]	; (800fe18 <tcp_pcb_remove+0x10c>)
 800fd32:	f640 0284 	movw	r2, #2180	; 0x884
 800fd36:	493b      	ldr	r1, [pc, #236]	; (800fe24 <tcp_pcb_remove+0x118>)
 800fd38:	4839      	ldr	r0, [pc, #228]	; (800fe20 <tcp_pcb_remove+0x114>)
 800fd3a:	f007 fa07 	bl	801714c <iprintf>

  TCP_RMV(pcblist, pcb);
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	683a      	ldr	r2, [r7, #0]
 800fd44:	429a      	cmp	r2, r3
 800fd46:	d105      	bne.n	800fd54 <tcp_pcb_remove+0x48>
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	68da      	ldr	r2, [r3, #12]
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	601a      	str	r2, [r3, #0]
 800fd52:	e013      	b.n	800fd7c <tcp_pcb_remove+0x70>
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	60fb      	str	r3, [r7, #12]
 800fd5a:	e00c      	b.n	800fd76 <tcp_pcb_remove+0x6a>
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	68db      	ldr	r3, [r3, #12]
 800fd60:	683a      	ldr	r2, [r7, #0]
 800fd62:	429a      	cmp	r2, r3
 800fd64:	d104      	bne.n	800fd70 <tcp_pcb_remove+0x64>
 800fd66:	683b      	ldr	r3, [r7, #0]
 800fd68:	68da      	ldr	r2, [r3, #12]
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	60da      	str	r2, [r3, #12]
 800fd6e:	e005      	b.n	800fd7c <tcp_pcb_remove+0x70>
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	68db      	ldr	r3, [r3, #12]
 800fd74:	60fb      	str	r3, [r7, #12]
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d1ef      	bne.n	800fd5c <tcp_pcb_remove+0x50>
 800fd7c:	683b      	ldr	r3, [r7, #0]
 800fd7e:	2200      	movs	r2, #0
 800fd80:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800fd82:	6838      	ldr	r0, [r7, #0]
 800fd84:	f7ff ff72 	bl	800fc6c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	7d1b      	ldrb	r3, [r3, #20]
 800fd8c:	2b0a      	cmp	r3, #10
 800fd8e:	d013      	beq.n	800fdb8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800fd90:	683b      	ldr	r3, [r7, #0]
 800fd92:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800fd94:	2b01      	cmp	r3, #1
 800fd96:	d00f      	beq.n	800fdb8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800fd98:	683b      	ldr	r3, [r7, #0]
 800fd9a:	8b5b      	ldrh	r3, [r3, #26]
 800fd9c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d009      	beq.n	800fdb8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800fda4:	683b      	ldr	r3, [r7, #0]
 800fda6:	8b5b      	ldrh	r3, [r3, #26]
 800fda8:	f043 0302 	orr.w	r3, r3, #2
 800fdac:	b29a      	uxth	r2, r3
 800fdae:	683b      	ldr	r3, [r7, #0]
 800fdb0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fdb2:	6838      	ldr	r0, [r7, #0]
 800fdb4:	f003 fbc2 	bl	801353c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800fdb8:	683b      	ldr	r3, [r7, #0]
 800fdba:	7d1b      	ldrb	r3, [r3, #20]
 800fdbc:	2b01      	cmp	r3, #1
 800fdbe:	d020      	beq.n	800fe02 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800fdc0:	683b      	ldr	r3, [r7, #0]
 800fdc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d006      	beq.n	800fdd6 <tcp_pcb_remove+0xca>
 800fdc8:	4b13      	ldr	r3, [pc, #76]	; (800fe18 <tcp_pcb_remove+0x10c>)
 800fdca:	f640 0293 	movw	r2, #2195	; 0x893
 800fdce:	4916      	ldr	r1, [pc, #88]	; (800fe28 <tcp_pcb_remove+0x11c>)
 800fdd0:	4813      	ldr	r0, [pc, #76]	; (800fe20 <tcp_pcb_remove+0x114>)
 800fdd2:	f007 f9bb 	bl	801714c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800fdd6:	683b      	ldr	r3, [r7, #0]
 800fdd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d006      	beq.n	800fdec <tcp_pcb_remove+0xe0>
 800fdde:	4b0e      	ldr	r3, [pc, #56]	; (800fe18 <tcp_pcb_remove+0x10c>)
 800fde0:	f640 0294 	movw	r2, #2196	; 0x894
 800fde4:	4911      	ldr	r1, [pc, #68]	; (800fe2c <tcp_pcb_remove+0x120>)
 800fde6:	480e      	ldr	r0, [pc, #56]	; (800fe20 <tcp_pcb_remove+0x114>)
 800fde8:	f007 f9b0 	bl	801714c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800fdec:	683b      	ldr	r3, [r7, #0]
 800fdee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d006      	beq.n	800fe02 <tcp_pcb_remove+0xf6>
 800fdf4:	4b08      	ldr	r3, [pc, #32]	; (800fe18 <tcp_pcb_remove+0x10c>)
 800fdf6:	f640 0296 	movw	r2, #2198	; 0x896
 800fdfa:	490d      	ldr	r1, [pc, #52]	; (800fe30 <tcp_pcb_remove+0x124>)
 800fdfc:	4808      	ldr	r0, [pc, #32]	; (800fe20 <tcp_pcb_remove+0x114>)
 800fdfe:	f007 f9a5 	bl	801714c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800fe02:	683b      	ldr	r3, [r7, #0]
 800fe04:	2200      	movs	r2, #0
 800fe06:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800fe08:	683b      	ldr	r3, [r7, #0]
 800fe0a:	2200      	movs	r2, #0
 800fe0c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800fe0e:	bf00      	nop
 800fe10:	3710      	adds	r7, #16
 800fe12:	46bd      	mov	sp, r7
 800fe14:	bd80      	pop	{r7, pc}
 800fe16:	bf00      	nop
 800fe18:	08019c08 	.word	0x08019c08
 800fe1c:	0801a270 	.word	0x0801a270
 800fe20:	08019c4c 	.word	0x08019c4c
 800fe24:	0801a28c 	.word	0x0801a28c
 800fe28:	0801a2ac 	.word	0x0801a2ac
 800fe2c:	0801a2c4 	.word	0x0801a2c4
 800fe30:	0801a2e0 	.word	0x0801a2e0

0800fe34 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b082      	sub	sp, #8
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d106      	bne.n	800fe50 <tcp_next_iss+0x1c>
 800fe42:	4b0a      	ldr	r3, [pc, #40]	; (800fe6c <tcp_next_iss+0x38>)
 800fe44:	f640 02af 	movw	r2, #2223	; 0x8af
 800fe48:	4909      	ldr	r1, [pc, #36]	; (800fe70 <tcp_next_iss+0x3c>)
 800fe4a:	480a      	ldr	r0, [pc, #40]	; (800fe74 <tcp_next_iss+0x40>)
 800fe4c:	f007 f97e 	bl	801714c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800fe50:	4b09      	ldr	r3, [pc, #36]	; (800fe78 <tcp_next_iss+0x44>)
 800fe52:	681a      	ldr	r2, [r3, #0]
 800fe54:	4b09      	ldr	r3, [pc, #36]	; (800fe7c <tcp_next_iss+0x48>)
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	4413      	add	r3, r2
 800fe5a:	4a07      	ldr	r2, [pc, #28]	; (800fe78 <tcp_next_iss+0x44>)
 800fe5c:	6013      	str	r3, [r2, #0]
  return iss;
 800fe5e:	4b06      	ldr	r3, [pc, #24]	; (800fe78 <tcp_next_iss+0x44>)
 800fe60:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800fe62:	4618      	mov	r0, r3
 800fe64:	3708      	adds	r7, #8
 800fe66:	46bd      	mov	sp, r7
 800fe68:	bd80      	pop	{r7, pc}
 800fe6a:	bf00      	nop
 800fe6c:	08019c08 	.word	0x08019c08
 800fe70:	0801a2f8 	.word	0x0801a2f8
 800fe74:	08019c4c 	.word	0x08019c4c
 800fe78:	20000014 	.word	0x20000014
 800fe7c:	2000d244 	.word	0x2000d244

0800fe80 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b086      	sub	sp, #24
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	4603      	mov	r3, r0
 800fe88:	60b9      	str	r1, [r7, #8]
 800fe8a:	607a      	str	r2, [r7, #4]
 800fe8c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d106      	bne.n	800fea2 <tcp_eff_send_mss_netif+0x22>
 800fe94:	4b14      	ldr	r3, [pc, #80]	; (800fee8 <tcp_eff_send_mss_netif+0x68>)
 800fe96:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800fe9a:	4914      	ldr	r1, [pc, #80]	; (800feec <tcp_eff_send_mss_netif+0x6c>)
 800fe9c:	4814      	ldr	r0, [pc, #80]	; (800fef0 <tcp_eff_send_mss_netif+0x70>)
 800fe9e:	f007 f955 	bl	801714c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800fea2:	68bb      	ldr	r3, [r7, #8]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d101      	bne.n	800feac <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800fea8:	89fb      	ldrh	r3, [r7, #14]
 800feaa:	e019      	b.n	800fee0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800feac:	68bb      	ldr	r3, [r7, #8]
 800feae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800feb0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800feb2:	8afb      	ldrh	r3, [r7, #22]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d012      	beq.n	800fede <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800feb8:	2328      	movs	r3, #40	; 0x28
 800feba:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800febc:	8afa      	ldrh	r2, [r7, #22]
 800febe:	8abb      	ldrh	r3, [r7, #20]
 800fec0:	429a      	cmp	r2, r3
 800fec2:	d904      	bls.n	800fece <tcp_eff_send_mss_netif+0x4e>
 800fec4:	8afa      	ldrh	r2, [r7, #22]
 800fec6:	8abb      	ldrh	r3, [r7, #20]
 800fec8:	1ad3      	subs	r3, r2, r3
 800feca:	b29b      	uxth	r3, r3
 800fecc:	e000      	b.n	800fed0 <tcp_eff_send_mss_netif+0x50>
 800fece:	2300      	movs	r3, #0
 800fed0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800fed2:	8a7a      	ldrh	r2, [r7, #18]
 800fed4:	89fb      	ldrh	r3, [r7, #14]
 800fed6:	4293      	cmp	r3, r2
 800fed8:	bf28      	it	cs
 800feda:	4613      	movcs	r3, r2
 800fedc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800fede:	89fb      	ldrh	r3, [r7, #14]
}
 800fee0:	4618      	mov	r0, r3
 800fee2:	3718      	adds	r7, #24
 800fee4:	46bd      	mov	sp, r7
 800fee6:	bd80      	pop	{r7, pc}
 800fee8:	08019c08 	.word	0x08019c08
 800feec:	0801a314 	.word	0x0801a314
 800fef0:	08019c4c 	.word	0x08019c4c

0800fef4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b084      	sub	sp, #16
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
 800fefc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800fefe:	683b      	ldr	r3, [r7, #0]
 800ff00:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d119      	bne.n	800ff3c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800ff08:	4b10      	ldr	r3, [pc, #64]	; (800ff4c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800ff0a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800ff0e:	4910      	ldr	r1, [pc, #64]	; (800ff50 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800ff10:	4810      	ldr	r0, [pc, #64]	; (800ff54 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800ff12:	f007 f91b 	bl	801714c <iprintf>

  while (pcb != NULL) {
 800ff16:	e011      	b.n	800ff3c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	681a      	ldr	r2, [r3, #0]
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	429a      	cmp	r2, r3
 800ff22:	d108      	bne.n	800ff36 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	68db      	ldr	r3, [r3, #12]
 800ff28:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800ff2a:	68f8      	ldr	r0, [r7, #12]
 800ff2c:	f7fe fd54 	bl	800e9d8 <tcp_abort>
      pcb = next;
 800ff30:	68bb      	ldr	r3, [r7, #8]
 800ff32:	60fb      	str	r3, [r7, #12]
 800ff34:	e002      	b.n	800ff3c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	68db      	ldr	r3, [r3, #12]
 800ff3a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d1ea      	bne.n	800ff18 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800ff42:	bf00      	nop
 800ff44:	3710      	adds	r7, #16
 800ff46:	46bd      	mov	sp, r7
 800ff48:	bd80      	pop	{r7, pc}
 800ff4a:	bf00      	nop
 800ff4c:	08019c08 	.word	0x08019c08
 800ff50:	0801a33c 	.word	0x0801a33c
 800ff54:	08019c4c 	.word	0x08019c4c

0800ff58 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b084      	sub	sp, #16
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
 800ff60:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d02a      	beq.n	800ffbe <tcp_netif_ip_addr_changed+0x66>
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d026      	beq.n	800ffbe <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ff70:	4b15      	ldr	r3, [pc, #84]	; (800ffc8 <tcp_netif_ip_addr_changed+0x70>)
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	4619      	mov	r1, r3
 800ff76:	6878      	ldr	r0, [r7, #4]
 800ff78:	f7ff ffbc 	bl	800fef4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ff7c:	4b13      	ldr	r3, [pc, #76]	; (800ffcc <tcp_netif_ip_addr_changed+0x74>)
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	4619      	mov	r1, r3
 800ff82:	6878      	ldr	r0, [r7, #4]
 800ff84:	f7ff ffb6 	bl	800fef4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ff88:	683b      	ldr	r3, [r7, #0]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d017      	beq.n	800ffbe <tcp_netif_ip_addr_changed+0x66>
 800ff8e:	683b      	ldr	r3, [r7, #0]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d013      	beq.n	800ffbe <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ff96:	4b0e      	ldr	r3, [pc, #56]	; (800ffd0 <tcp_netif_ip_addr_changed+0x78>)
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	60fb      	str	r3, [r7, #12]
 800ff9c:	e00c      	b.n	800ffb8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	681a      	ldr	r2, [r3, #0]
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	429a      	cmp	r2, r3
 800ffa8:	d103      	bne.n	800ffb2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ffaa:	683b      	ldr	r3, [r7, #0]
 800ffac:	681a      	ldr	r2, [r3, #0]
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	68db      	ldr	r3, [r3, #12]
 800ffb6:	60fb      	str	r3, [r7, #12]
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d1ef      	bne.n	800ff9e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800ffbe:	bf00      	nop
 800ffc0:	3710      	adds	r7, #16
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	bd80      	pop	{r7, pc}
 800ffc6:	bf00      	nop
 800ffc8:	2000d240 	.word	0x2000d240
 800ffcc:	2000d24c 	.word	0x2000d24c
 800ffd0:	2000d248 	.word	0x2000d248

0800ffd4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b082      	sub	sp, #8
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d007      	beq.n	800fff4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ffe8:	4618      	mov	r0, r3
 800ffea:	f7ff fb71 	bl	800f6d0 <tcp_segs_free>
    pcb->ooseq = NULL;
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	2200      	movs	r2, #0
 800fff2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800fff4:	bf00      	nop
 800fff6:	3708      	adds	r7, #8
 800fff8:	46bd      	mov	sp, r7
 800fffa:	bd80      	pop	{r7, pc}

0800fffc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800fffc:	b590      	push	{r4, r7, lr}
 800fffe:	b08d      	sub	sp, #52	; 0x34
 8010000:	af04      	add	r7, sp, #16
 8010002:	6078      	str	r0, [r7, #4]
 8010004:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	2b00      	cmp	r3, #0
 801000a:	d105      	bne.n	8010018 <tcp_input+0x1c>
 801000c:	4b9b      	ldr	r3, [pc, #620]	; (801027c <tcp_input+0x280>)
 801000e:	2283      	movs	r2, #131	; 0x83
 8010010:	499b      	ldr	r1, [pc, #620]	; (8010280 <tcp_input+0x284>)
 8010012:	489c      	ldr	r0, [pc, #624]	; (8010284 <tcp_input+0x288>)
 8010014:	f007 f89a 	bl	801714c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	685b      	ldr	r3, [r3, #4]
 801001c:	4a9a      	ldr	r2, [pc, #616]	; (8010288 <tcp_input+0x28c>)
 801001e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	895b      	ldrh	r3, [r3, #10]
 8010024:	2b13      	cmp	r3, #19
 8010026:	f240 83c4 	bls.w	80107b2 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801002a:	4b98      	ldr	r3, [pc, #608]	; (801028c <tcp_input+0x290>)
 801002c:	695a      	ldr	r2, [r3, #20]
 801002e:	4b97      	ldr	r3, [pc, #604]	; (801028c <tcp_input+0x290>)
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	4619      	mov	r1, r3
 8010034:	4610      	mov	r0, r2
 8010036:	f005 fee7 	bl	8015e08 <ip4_addr_isbroadcast_u32>
 801003a:	4603      	mov	r3, r0
 801003c:	2b00      	cmp	r3, #0
 801003e:	f040 83ba 	bne.w	80107b6 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8010042:	4b92      	ldr	r3, [pc, #584]	; (801028c <tcp_input+0x290>)
 8010044:	695b      	ldr	r3, [r3, #20]
 8010046:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801004a:	2be0      	cmp	r3, #224	; 0xe0
 801004c:	f000 83b3 	beq.w	80107b6 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010050:	4b8d      	ldr	r3, [pc, #564]	; (8010288 <tcp_input+0x28c>)
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	899b      	ldrh	r3, [r3, #12]
 8010056:	b29b      	uxth	r3, r3
 8010058:	4618      	mov	r0, r3
 801005a:	f7fc fb03 	bl	800c664 <lwip_htons>
 801005e:	4603      	mov	r3, r0
 8010060:	0b1b      	lsrs	r3, r3, #12
 8010062:	b29b      	uxth	r3, r3
 8010064:	b2db      	uxtb	r3, r3
 8010066:	009b      	lsls	r3, r3, #2
 8010068:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801006a:	7cbb      	ldrb	r3, [r7, #18]
 801006c:	2b13      	cmp	r3, #19
 801006e:	f240 83a2 	bls.w	80107b6 <tcp_input+0x7ba>
 8010072:	7cbb      	ldrb	r3, [r7, #18]
 8010074:	b29a      	uxth	r2, r3
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	891b      	ldrh	r3, [r3, #8]
 801007a:	429a      	cmp	r2, r3
 801007c:	f200 839b 	bhi.w	80107b6 <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010080:	7cbb      	ldrb	r3, [r7, #18]
 8010082:	b29b      	uxth	r3, r3
 8010084:	3b14      	subs	r3, #20
 8010086:	b29a      	uxth	r2, r3
 8010088:	4b81      	ldr	r3, [pc, #516]	; (8010290 <tcp_input+0x294>)
 801008a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801008c:	4b81      	ldr	r3, [pc, #516]	; (8010294 <tcp_input+0x298>)
 801008e:	2200      	movs	r2, #0
 8010090:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	895a      	ldrh	r2, [r3, #10]
 8010096:	7cbb      	ldrb	r3, [r7, #18]
 8010098:	b29b      	uxth	r3, r3
 801009a:	429a      	cmp	r2, r3
 801009c:	d309      	bcc.n	80100b2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801009e:	4b7c      	ldr	r3, [pc, #496]	; (8010290 <tcp_input+0x294>)
 80100a0:	881a      	ldrh	r2, [r3, #0]
 80100a2:	4b7d      	ldr	r3, [pc, #500]	; (8010298 <tcp_input+0x29c>)
 80100a4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80100a6:	7cbb      	ldrb	r3, [r7, #18]
 80100a8:	4619      	mov	r1, r3
 80100aa:	6878      	ldr	r0, [r7, #4]
 80100ac:	f7fd fdf6 	bl	800dc9c <pbuf_remove_header>
 80100b0:	e04e      	b.n	8010150 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d105      	bne.n	80100c6 <tcp_input+0xca>
 80100ba:	4b70      	ldr	r3, [pc, #448]	; (801027c <tcp_input+0x280>)
 80100bc:	22c2      	movs	r2, #194	; 0xc2
 80100be:	4977      	ldr	r1, [pc, #476]	; (801029c <tcp_input+0x2a0>)
 80100c0:	4870      	ldr	r0, [pc, #448]	; (8010284 <tcp_input+0x288>)
 80100c2:	f007 f843 	bl	801714c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80100c6:	2114      	movs	r1, #20
 80100c8:	6878      	ldr	r0, [r7, #4]
 80100ca:	f7fd fde7 	bl	800dc9c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	895a      	ldrh	r2, [r3, #10]
 80100d2:	4b71      	ldr	r3, [pc, #452]	; (8010298 <tcp_input+0x29c>)
 80100d4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80100d6:	4b6e      	ldr	r3, [pc, #440]	; (8010290 <tcp_input+0x294>)
 80100d8:	881a      	ldrh	r2, [r3, #0]
 80100da:	4b6f      	ldr	r3, [pc, #444]	; (8010298 <tcp_input+0x29c>)
 80100dc:	881b      	ldrh	r3, [r3, #0]
 80100de:	1ad3      	subs	r3, r2, r3
 80100e0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80100e2:	4b6d      	ldr	r3, [pc, #436]	; (8010298 <tcp_input+0x29c>)
 80100e4:	881b      	ldrh	r3, [r3, #0]
 80100e6:	4619      	mov	r1, r3
 80100e8:	6878      	ldr	r0, [r7, #4]
 80100ea:	f7fd fdd7 	bl	800dc9c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	895b      	ldrh	r3, [r3, #10]
 80100f4:	8a3a      	ldrh	r2, [r7, #16]
 80100f6:	429a      	cmp	r2, r3
 80100f8:	f200 835f 	bhi.w	80107ba <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	685b      	ldr	r3, [r3, #4]
 8010102:	4a64      	ldr	r2, [pc, #400]	; (8010294 <tcp_input+0x298>)
 8010104:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	8a3a      	ldrh	r2, [r7, #16]
 801010c:	4611      	mov	r1, r2
 801010e:	4618      	mov	r0, r3
 8010110:	f7fd fdc4 	bl	800dc9c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	891a      	ldrh	r2, [r3, #8]
 8010118:	8a3b      	ldrh	r3, [r7, #16]
 801011a:	1ad3      	subs	r3, r2, r3
 801011c:	b29a      	uxth	r2, r3
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	895b      	ldrh	r3, [r3, #10]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d005      	beq.n	8010136 <tcp_input+0x13a>
 801012a:	4b54      	ldr	r3, [pc, #336]	; (801027c <tcp_input+0x280>)
 801012c:	22df      	movs	r2, #223	; 0xdf
 801012e:	495c      	ldr	r1, [pc, #368]	; (80102a0 <tcp_input+0x2a4>)
 8010130:	4854      	ldr	r0, [pc, #336]	; (8010284 <tcp_input+0x288>)
 8010132:	f007 f80b 	bl	801714c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	891a      	ldrh	r2, [r3, #8]
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	891b      	ldrh	r3, [r3, #8]
 8010140:	429a      	cmp	r2, r3
 8010142:	d005      	beq.n	8010150 <tcp_input+0x154>
 8010144:	4b4d      	ldr	r3, [pc, #308]	; (801027c <tcp_input+0x280>)
 8010146:	22e0      	movs	r2, #224	; 0xe0
 8010148:	4956      	ldr	r1, [pc, #344]	; (80102a4 <tcp_input+0x2a8>)
 801014a:	484e      	ldr	r0, [pc, #312]	; (8010284 <tcp_input+0x288>)
 801014c:	f006 fffe 	bl	801714c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010150:	4b4d      	ldr	r3, [pc, #308]	; (8010288 <tcp_input+0x28c>)
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	881b      	ldrh	r3, [r3, #0]
 8010156:	b29a      	uxth	r2, r3
 8010158:	4b4b      	ldr	r3, [pc, #300]	; (8010288 <tcp_input+0x28c>)
 801015a:	681c      	ldr	r4, [r3, #0]
 801015c:	4610      	mov	r0, r2
 801015e:	f7fc fa81 	bl	800c664 <lwip_htons>
 8010162:	4603      	mov	r3, r0
 8010164:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010166:	4b48      	ldr	r3, [pc, #288]	; (8010288 <tcp_input+0x28c>)
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	885b      	ldrh	r3, [r3, #2]
 801016c:	b29a      	uxth	r2, r3
 801016e:	4b46      	ldr	r3, [pc, #280]	; (8010288 <tcp_input+0x28c>)
 8010170:	681c      	ldr	r4, [r3, #0]
 8010172:	4610      	mov	r0, r2
 8010174:	f7fc fa76 	bl	800c664 <lwip_htons>
 8010178:	4603      	mov	r3, r0
 801017a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801017c:	4b42      	ldr	r3, [pc, #264]	; (8010288 <tcp_input+0x28c>)
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	685a      	ldr	r2, [r3, #4]
 8010182:	4b41      	ldr	r3, [pc, #260]	; (8010288 <tcp_input+0x28c>)
 8010184:	681c      	ldr	r4, [r3, #0]
 8010186:	4610      	mov	r0, r2
 8010188:	f7fc fa81 	bl	800c68e <lwip_htonl>
 801018c:	4603      	mov	r3, r0
 801018e:	6063      	str	r3, [r4, #4]
 8010190:	6863      	ldr	r3, [r4, #4]
 8010192:	4a45      	ldr	r2, [pc, #276]	; (80102a8 <tcp_input+0x2ac>)
 8010194:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010196:	4b3c      	ldr	r3, [pc, #240]	; (8010288 <tcp_input+0x28c>)
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	689a      	ldr	r2, [r3, #8]
 801019c:	4b3a      	ldr	r3, [pc, #232]	; (8010288 <tcp_input+0x28c>)
 801019e:	681c      	ldr	r4, [r3, #0]
 80101a0:	4610      	mov	r0, r2
 80101a2:	f7fc fa74 	bl	800c68e <lwip_htonl>
 80101a6:	4603      	mov	r3, r0
 80101a8:	60a3      	str	r3, [r4, #8]
 80101aa:	68a3      	ldr	r3, [r4, #8]
 80101ac:	4a3f      	ldr	r2, [pc, #252]	; (80102ac <tcp_input+0x2b0>)
 80101ae:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80101b0:	4b35      	ldr	r3, [pc, #212]	; (8010288 <tcp_input+0x28c>)
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	89db      	ldrh	r3, [r3, #14]
 80101b6:	b29a      	uxth	r2, r3
 80101b8:	4b33      	ldr	r3, [pc, #204]	; (8010288 <tcp_input+0x28c>)
 80101ba:	681c      	ldr	r4, [r3, #0]
 80101bc:	4610      	mov	r0, r2
 80101be:	f7fc fa51 	bl	800c664 <lwip_htons>
 80101c2:	4603      	mov	r3, r0
 80101c4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80101c6:	4b30      	ldr	r3, [pc, #192]	; (8010288 <tcp_input+0x28c>)
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	899b      	ldrh	r3, [r3, #12]
 80101cc:	b29b      	uxth	r3, r3
 80101ce:	4618      	mov	r0, r3
 80101d0:	f7fc fa48 	bl	800c664 <lwip_htons>
 80101d4:	4603      	mov	r3, r0
 80101d6:	b2db      	uxtb	r3, r3
 80101d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80101dc:	b2da      	uxtb	r2, r3
 80101de:	4b34      	ldr	r3, [pc, #208]	; (80102b0 <tcp_input+0x2b4>)
 80101e0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	891a      	ldrh	r2, [r3, #8]
 80101e6:	4b33      	ldr	r3, [pc, #204]	; (80102b4 <tcp_input+0x2b8>)
 80101e8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80101ea:	4b31      	ldr	r3, [pc, #196]	; (80102b0 <tcp_input+0x2b4>)
 80101ec:	781b      	ldrb	r3, [r3, #0]
 80101ee:	f003 0303 	and.w	r3, r3, #3
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d00c      	beq.n	8010210 <tcp_input+0x214>
    tcplen++;
 80101f6:	4b2f      	ldr	r3, [pc, #188]	; (80102b4 <tcp_input+0x2b8>)
 80101f8:	881b      	ldrh	r3, [r3, #0]
 80101fa:	3301      	adds	r3, #1
 80101fc:	b29a      	uxth	r2, r3
 80101fe:	4b2d      	ldr	r3, [pc, #180]	; (80102b4 <tcp_input+0x2b8>)
 8010200:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	891a      	ldrh	r2, [r3, #8]
 8010206:	4b2b      	ldr	r3, [pc, #172]	; (80102b4 <tcp_input+0x2b8>)
 8010208:	881b      	ldrh	r3, [r3, #0]
 801020a:	429a      	cmp	r2, r3
 801020c:	f200 82d7 	bhi.w	80107be <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010210:	2300      	movs	r3, #0
 8010212:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010214:	4b28      	ldr	r3, [pc, #160]	; (80102b8 <tcp_input+0x2bc>)
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	61fb      	str	r3, [r7, #28]
 801021a:	e09d      	b.n	8010358 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801021c:	69fb      	ldr	r3, [r7, #28]
 801021e:	7d1b      	ldrb	r3, [r3, #20]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d105      	bne.n	8010230 <tcp_input+0x234>
 8010224:	4b15      	ldr	r3, [pc, #84]	; (801027c <tcp_input+0x280>)
 8010226:	22fb      	movs	r2, #251	; 0xfb
 8010228:	4924      	ldr	r1, [pc, #144]	; (80102bc <tcp_input+0x2c0>)
 801022a:	4816      	ldr	r0, [pc, #88]	; (8010284 <tcp_input+0x288>)
 801022c:	f006 ff8e 	bl	801714c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010230:	69fb      	ldr	r3, [r7, #28]
 8010232:	7d1b      	ldrb	r3, [r3, #20]
 8010234:	2b0a      	cmp	r3, #10
 8010236:	d105      	bne.n	8010244 <tcp_input+0x248>
 8010238:	4b10      	ldr	r3, [pc, #64]	; (801027c <tcp_input+0x280>)
 801023a:	22fc      	movs	r2, #252	; 0xfc
 801023c:	4920      	ldr	r1, [pc, #128]	; (80102c0 <tcp_input+0x2c4>)
 801023e:	4811      	ldr	r0, [pc, #68]	; (8010284 <tcp_input+0x288>)
 8010240:	f006 ff84 	bl	801714c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010244:	69fb      	ldr	r3, [r7, #28]
 8010246:	7d1b      	ldrb	r3, [r3, #20]
 8010248:	2b01      	cmp	r3, #1
 801024a:	d105      	bne.n	8010258 <tcp_input+0x25c>
 801024c:	4b0b      	ldr	r3, [pc, #44]	; (801027c <tcp_input+0x280>)
 801024e:	22fd      	movs	r2, #253	; 0xfd
 8010250:	491c      	ldr	r1, [pc, #112]	; (80102c4 <tcp_input+0x2c8>)
 8010252:	480c      	ldr	r0, [pc, #48]	; (8010284 <tcp_input+0x288>)
 8010254:	f006 ff7a 	bl	801714c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010258:	69fb      	ldr	r3, [r7, #28]
 801025a:	7a1b      	ldrb	r3, [r3, #8]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d033      	beq.n	80102c8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010260:	69fb      	ldr	r3, [r7, #28]
 8010262:	7a1a      	ldrb	r2, [r3, #8]
 8010264:	4b09      	ldr	r3, [pc, #36]	; (801028c <tcp_input+0x290>)
 8010266:	685b      	ldr	r3, [r3, #4]
 8010268:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801026c:	3301      	adds	r3, #1
 801026e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010270:	429a      	cmp	r2, r3
 8010272:	d029      	beq.n	80102c8 <tcp_input+0x2cc>
      prev = pcb;
 8010274:	69fb      	ldr	r3, [r7, #28]
 8010276:	61bb      	str	r3, [r7, #24]
      continue;
 8010278:	e06b      	b.n	8010352 <tcp_input+0x356>
 801027a:	bf00      	nop
 801027c:	0801a370 	.word	0x0801a370
 8010280:	0801a3a4 	.word	0x0801a3a4
 8010284:	0801a3bc 	.word	0x0801a3bc
 8010288:	2000465c 	.word	0x2000465c
 801028c:	200079f0 	.word	0x200079f0
 8010290:	20004660 	.word	0x20004660
 8010294:	20004664 	.word	0x20004664
 8010298:	20004662 	.word	0x20004662
 801029c:	0801a3e4 	.word	0x0801a3e4
 80102a0:	0801a3f4 	.word	0x0801a3f4
 80102a4:	0801a400 	.word	0x0801a400
 80102a8:	2000466c 	.word	0x2000466c
 80102ac:	20004670 	.word	0x20004670
 80102b0:	20004678 	.word	0x20004678
 80102b4:	20004676 	.word	0x20004676
 80102b8:	2000d240 	.word	0x2000d240
 80102bc:	0801a420 	.word	0x0801a420
 80102c0:	0801a448 	.word	0x0801a448
 80102c4:	0801a474 	.word	0x0801a474
    }

    if (pcb->remote_port == tcphdr->src &&
 80102c8:	69fb      	ldr	r3, [r7, #28]
 80102ca:	8b1a      	ldrh	r2, [r3, #24]
 80102cc:	4b94      	ldr	r3, [pc, #592]	; (8010520 <tcp_input+0x524>)
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	881b      	ldrh	r3, [r3, #0]
 80102d2:	b29b      	uxth	r3, r3
 80102d4:	429a      	cmp	r2, r3
 80102d6:	d13a      	bne.n	801034e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80102d8:	69fb      	ldr	r3, [r7, #28]
 80102da:	8ada      	ldrh	r2, [r3, #22]
 80102dc:	4b90      	ldr	r3, [pc, #576]	; (8010520 <tcp_input+0x524>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	885b      	ldrh	r3, [r3, #2]
 80102e2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80102e4:	429a      	cmp	r2, r3
 80102e6:	d132      	bne.n	801034e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80102e8:	69fb      	ldr	r3, [r7, #28]
 80102ea:	685a      	ldr	r2, [r3, #4]
 80102ec:	4b8d      	ldr	r3, [pc, #564]	; (8010524 <tcp_input+0x528>)
 80102ee:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80102f0:	429a      	cmp	r2, r3
 80102f2:	d12c      	bne.n	801034e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80102f4:	69fb      	ldr	r3, [r7, #28]
 80102f6:	681a      	ldr	r2, [r3, #0]
 80102f8:	4b8a      	ldr	r3, [pc, #552]	; (8010524 <tcp_input+0x528>)
 80102fa:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80102fc:	429a      	cmp	r2, r3
 80102fe:	d126      	bne.n	801034e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010300:	69fb      	ldr	r3, [r7, #28]
 8010302:	68db      	ldr	r3, [r3, #12]
 8010304:	69fa      	ldr	r2, [r7, #28]
 8010306:	429a      	cmp	r2, r3
 8010308:	d106      	bne.n	8010318 <tcp_input+0x31c>
 801030a:	4b87      	ldr	r3, [pc, #540]	; (8010528 <tcp_input+0x52c>)
 801030c:	f240 120d 	movw	r2, #269	; 0x10d
 8010310:	4986      	ldr	r1, [pc, #536]	; (801052c <tcp_input+0x530>)
 8010312:	4887      	ldr	r0, [pc, #540]	; (8010530 <tcp_input+0x534>)
 8010314:	f006 ff1a 	bl	801714c <iprintf>
      if (prev != NULL) {
 8010318:	69bb      	ldr	r3, [r7, #24]
 801031a:	2b00      	cmp	r3, #0
 801031c:	d00a      	beq.n	8010334 <tcp_input+0x338>
        prev->next = pcb->next;
 801031e:	69fb      	ldr	r3, [r7, #28]
 8010320:	68da      	ldr	r2, [r3, #12]
 8010322:	69bb      	ldr	r3, [r7, #24]
 8010324:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010326:	4b83      	ldr	r3, [pc, #524]	; (8010534 <tcp_input+0x538>)
 8010328:	681a      	ldr	r2, [r3, #0]
 801032a:	69fb      	ldr	r3, [r7, #28]
 801032c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801032e:	4a81      	ldr	r2, [pc, #516]	; (8010534 <tcp_input+0x538>)
 8010330:	69fb      	ldr	r3, [r7, #28]
 8010332:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010334:	69fb      	ldr	r3, [r7, #28]
 8010336:	68db      	ldr	r3, [r3, #12]
 8010338:	69fa      	ldr	r2, [r7, #28]
 801033a:	429a      	cmp	r2, r3
 801033c:	d111      	bne.n	8010362 <tcp_input+0x366>
 801033e:	4b7a      	ldr	r3, [pc, #488]	; (8010528 <tcp_input+0x52c>)
 8010340:	f240 1215 	movw	r2, #277	; 0x115
 8010344:	497c      	ldr	r1, [pc, #496]	; (8010538 <tcp_input+0x53c>)
 8010346:	487a      	ldr	r0, [pc, #488]	; (8010530 <tcp_input+0x534>)
 8010348:	f006 ff00 	bl	801714c <iprintf>
      break;
 801034c:	e009      	b.n	8010362 <tcp_input+0x366>
    }
    prev = pcb;
 801034e:	69fb      	ldr	r3, [r7, #28]
 8010350:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010352:	69fb      	ldr	r3, [r7, #28]
 8010354:	68db      	ldr	r3, [r3, #12]
 8010356:	61fb      	str	r3, [r7, #28]
 8010358:	69fb      	ldr	r3, [r7, #28]
 801035a:	2b00      	cmp	r3, #0
 801035c:	f47f af5e 	bne.w	801021c <tcp_input+0x220>
 8010360:	e000      	b.n	8010364 <tcp_input+0x368>
      break;
 8010362:	bf00      	nop
  }

  if (pcb == NULL) {
 8010364:	69fb      	ldr	r3, [r7, #28]
 8010366:	2b00      	cmp	r3, #0
 8010368:	f040 8095 	bne.w	8010496 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801036c:	4b73      	ldr	r3, [pc, #460]	; (801053c <tcp_input+0x540>)
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	61fb      	str	r3, [r7, #28]
 8010372:	e03f      	b.n	80103f4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010374:	69fb      	ldr	r3, [r7, #28]
 8010376:	7d1b      	ldrb	r3, [r3, #20]
 8010378:	2b0a      	cmp	r3, #10
 801037a:	d006      	beq.n	801038a <tcp_input+0x38e>
 801037c:	4b6a      	ldr	r3, [pc, #424]	; (8010528 <tcp_input+0x52c>)
 801037e:	f240 121f 	movw	r2, #287	; 0x11f
 8010382:	496f      	ldr	r1, [pc, #444]	; (8010540 <tcp_input+0x544>)
 8010384:	486a      	ldr	r0, [pc, #424]	; (8010530 <tcp_input+0x534>)
 8010386:	f006 fee1 	bl	801714c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801038a:	69fb      	ldr	r3, [r7, #28]
 801038c:	7a1b      	ldrb	r3, [r3, #8]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d009      	beq.n	80103a6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010392:	69fb      	ldr	r3, [r7, #28]
 8010394:	7a1a      	ldrb	r2, [r3, #8]
 8010396:	4b63      	ldr	r3, [pc, #396]	; (8010524 <tcp_input+0x528>)
 8010398:	685b      	ldr	r3, [r3, #4]
 801039a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801039e:	3301      	adds	r3, #1
 80103a0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80103a2:	429a      	cmp	r2, r3
 80103a4:	d122      	bne.n	80103ec <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80103a6:	69fb      	ldr	r3, [r7, #28]
 80103a8:	8b1a      	ldrh	r2, [r3, #24]
 80103aa:	4b5d      	ldr	r3, [pc, #372]	; (8010520 <tcp_input+0x524>)
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	881b      	ldrh	r3, [r3, #0]
 80103b0:	b29b      	uxth	r3, r3
 80103b2:	429a      	cmp	r2, r3
 80103b4:	d11b      	bne.n	80103ee <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80103b6:	69fb      	ldr	r3, [r7, #28]
 80103b8:	8ada      	ldrh	r2, [r3, #22]
 80103ba:	4b59      	ldr	r3, [pc, #356]	; (8010520 <tcp_input+0x524>)
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	885b      	ldrh	r3, [r3, #2]
 80103c0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80103c2:	429a      	cmp	r2, r3
 80103c4:	d113      	bne.n	80103ee <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80103c6:	69fb      	ldr	r3, [r7, #28]
 80103c8:	685a      	ldr	r2, [r3, #4]
 80103ca:	4b56      	ldr	r3, [pc, #344]	; (8010524 <tcp_input+0x528>)
 80103cc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80103ce:	429a      	cmp	r2, r3
 80103d0:	d10d      	bne.n	80103ee <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80103d2:	69fb      	ldr	r3, [r7, #28]
 80103d4:	681a      	ldr	r2, [r3, #0]
 80103d6:	4b53      	ldr	r3, [pc, #332]	; (8010524 <tcp_input+0x528>)
 80103d8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80103da:	429a      	cmp	r2, r3
 80103dc:	d107      	bne.n	80103ee <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80103de:	69f8      	ldr	r0, [r7, #28]
 80103e0:	f000 fb52 	bl	8010a88 <tcp_timewait_input>
        }
        pbuf_free(p);
 80103e4:	6878      	ldr	r0, [r7, #4]
 80103e6:	f7fd fd11 	bl	800de0c <pbuf_free>
        return;
 80103ea:	e1ee      	b.n	80107ca <tcp_input+0x7ce>
        continue;
 80103ec:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80103ee:	69fb      	ldr	r3, [r7, #28]
 80103f0:	68db      	ldr	r3, [r3, #12]
 80103f2:	61fb      	str	r3, [r7, #28]
 80103f4:	69fb      	ldr	r3, [r7, #28]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d1bc      	bne.n	8010374 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80103fa:	2300      	movs	r3, #0
 80103fc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80103fe:	4b51      	ldr	r3, [pc, #324]	; (8010544 <tcp_input+0x548>)
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	617b      	str	r3, [r7, #20]
 8010404:	e02a      	b.n	801045c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010406:	697b      	ldr	r3, [r7, #20]
 8010408:	7a1b      	ldrb	r3, [r3, #8]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d00c      	beq.n	8010428 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801040e:	697b      	ldr	r3, [r7, #20]
 8010410:	7a1a      	ldrb	r2, [r3, #8]
 8010412:	4b44      	ldr	r3, [pc, #272]	; (8010524 <tcp_input+0x528>)
 8010414:	685b      	ldr	r3, [r3, #4]
 8010416:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801041a:	3301      	adds	r3, #1
 801041c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801041e:	429a      	cmp	r2, r3
 8010420:	d002      	beq.n	8010428 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8010422:	697b      	ldr	r3, [r7, #20]
 8010424:	61bb      	str	r3, [r7, #24]
        continue;
 8010426:	e016      	b.n	8010456 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010428:	697b      	ldr	r3, [r7, #20]
 801042a:	8ada      	ldrh	r2, [r3, #22]
 801042c:	4b3c      	ldr	r3, [pc, #240]	; (8010520 <tcp_input+0x524>)
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	885b      	ldrh	r3, [r3, #2]
 8010432:	b29b      	uxth	r3, r3
 8010434:	429a      	cmp	r2, r3
 8010436:	d10c      	bne.n	8010452 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010438:	697b      	ldr	r3, [r7, #20]
 801043a:	681a      	ldr	r2, [r3, #0]
 801043c:	4b39      	ldr	r3, [pc, #228]	; (8010524 <tcp_input+0x528>)
 801043e:	695b      	ldr	r3, [r3, #20]
 8010440:	429a      	cmp	r2, r3
 8010442:	d00f      	beq.n	8010464 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010444:	697b      	ldr	r3, [r7, #20]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d00d      	beq.n	8010466 <tcp_input+0x46a>
 801044a:	697b      	ldr	r3, [r7, #20]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d009      	beq.n	8010466 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010452:	697b      	ldr	r3, [r7, #20]
 8010454:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010456:	697b      	ldr	r3, [r7, #20]
 8010458:	68db      	ldr	r3, [r3, #12]
 801045a:	617b      	str	r3, [r7, #20]
 801045c:	697b      	ldr	r3, [r7, #20]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d1d1      	bne.n	8010406 <tcp_input+0x40a>
 8010462:	e000      	b.n	8010466 <tcp_input+0x46a>
            break;
 8010464:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010466:	697b      	ldr	r3, [r7, #20]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d014      	beq.n	8010496 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801046c:	69bb      	ldr	r3, [r7, #24]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d00a      	beq.n	8010488 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010472:	697b      	ldr	r3, [r7, #20]
 8010474:	68da      	ldr	r2, [r3, #12]
 8010476:	69bb      	ldr	r3, [r7, #24]
 8010478:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801047a:	4b32      	ldr	r3, [pc, #200]	; (8010544 <tcp_input+0x548>)
 801047c:	681a      	ldr	r2, [r3, #0]
 801047e:	697b      	ldr	r3, [r7, #20]
 8010480:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010482:	4a30      	ldr	r2, [pc, #192]	; (8010544 <tcp_input+0x548>)
 8010484:	697b      	ldr	r3, [r7, #20]
 8010486:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010488:	6978      	ldr	r0, [r7, #20]
 801048a:	f000 f9ff 	bl	801088c <tcp_listen_input>
      }
      pbuf_free(p);
 801048e:	6878      	ldr	r0, [r7, #4]
 8010490:	f7fd fcbc 	bl	800de0c <pbuf_free>
      return;
 8010494:	e199      	b.n	80107ca <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8010496:	69fb      	ldr	r3, [r7, #28]
 8010498:	2b00      	cmp	r3, #0
 801049a:	f000 8160 	beq.w	801075e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801049e:	4b2a      	ldr	r3, [pc, #168]	; (8010548 <tcp_input+0x54c>)
 80104a0:	2200      	movs	r2, #0
 80104a2:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	891a      	ldrh	r2, [r3, #8]
 80104a8:	4b27      	ldr	r3, [pc, #156]	; (8010548 <tcp_input+0x54c>)
 80104aa:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80104ac:	4a26      	ldr	r2, [pc, #152]	; (8010548 <tcp_input+0x54c>)
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80104b2:	4b1b      	ldr	r3, [pc, #108]	; (8010520 <tcp_input+0x524>)
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	4a24      	ldr	r2, [pc, #144]	; (8010548 <tcp_input+0x54c>)
 80104b8:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80104ba:	4b24      	ldr	r3, [pc, #144]	; (801054c <tcp_input+0x550>)
 80104bc:	2200      	movs	r2, #0
 80104be:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80104c0:	4b23      	ldr	r3, [pc, #140]	; (8010550 <tcp_input+0x554>)
 80104c2:	2200      	movs	r2, #0
 80104c4:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80104c6:	4b23      	ldr	r3, [pc, #140]	; (8010554 <tcp_input+0x558>)
 80104c8:	2200      	movs	r2, #0
 80104ca:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80104cc:	4b22      	ldr	r3, [pc, #136]	; (8010558 <tcp_input+0x55c>)
 80104ce:	781b      	ldrb	r3, [r3, #0]
 80104d0:	f003 0308 	and.w	r3, r3, #8
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d006      	beq.n	80104e6 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	7b5b      	ldrb	r3, [r3, #13]
 80104dc:	f043 0301 	orr.w	r3, r3, #1
 80104e0:	b2da      	uxtb	r2, r3
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80104e6:	69fb      	ldr	r3, [r7, #28]
 80104e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d038      	beq.n	8010560 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80104ee:	69f8      	ldr	r0, [r7, #28]
 80104f0:	f7ff f872 	bl	800f5d8 <tcp_process_refused_data>
 80104f4:	4603      	mov	r3, r0
 80104f6:	f113 0f0d 	cmn.w	r3, #13
 80104fa:	d007      	beq.n	801050c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80104fc:	69fb      	ldr	r3, [r7, #28]
 80104fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010500:	2b00      	cmp	r3, #0
 8010502:	d02d      	beq.n	8010560 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010504:	4b15      	ldr	r3, [pc, #84]	; (801055c <tcp_input+0x560>)
 8010506:	881b      	ldrh	r3, [r3, #0]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d029      	beq.n	8010560 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801050c:	69fb      	ldr	r3, [r7, #28]
 801050e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010510:	2b00      	cmp	r3, #0
 8010512:	f040 8104 	bne.w	801071e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8010516:	69f8      	ldr	r0, [r7, #28]
 8010518:	f003 fe28 	bl	801416c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801051c:	e0ff      	b.n	801071e <tcp_input+0x722>
 801051e:	bf00      	nop
 8010520:	2000465c 	.word	0x2000465c
 8010524:	200079f0 	.word	0x200079f0
 8010528:	0801a370 	.word	0x0801a370
 801052c:	0801a49c 	.word	0x0801a49c
 8010530:	0801a3bc 	.word	0x0801a3bc
 8010534:	2000d240 	.word	0x2000d240
 8010538:	0801a4c8 	.word	0x0801a4c8
 801053c:	2000d250 	.word	0x2000d250
 8010540:	0801a4f4 	.word	0x0801a4f4
 8010544:	2000d248 	.word	0x2000d248
 8010548:	2000464c 	.word	0x2000464c
 801054c:	2000467c 	.word	0x2000467c
 8010550:	20004679 	.word	0x20004679
 8010554:	20004674 	.word	0x20004674
 8010558:	20004678 	.word	0x20004678
 801055c:	20004676 	.word	0x20004676
      }
    }
    tcp_input_pcb = pcb;
 8010560:	4a9b      	ldr	r2, [pc, #620]	; (80107d0 <tcp_input+0x7d4>)
 8010562:	69fb      	ldr	r3, [r7, #28]
 8010564:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8010566:	69f8      	ldr	r0, [r7, #28]
 8010568:	f000 fb0a 	bl	8010b80 <tcp_process>
 801056c:	4603      	mov	r3, r0
 801056e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010570:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010574:	f113 0f0d 	cmn.w	r3, #13
 8010578:	f000 80d3 	beq.w	8010722 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 801057c:	4b95      	ldr	r3, [pc, #596]	; (80107d4 <tcp_input+0x7d8>)
 801057e:	781b      	ldrb	r3, [r3, #0]
 8010580:	f003 0308 	and.w	r3, r3, #8
 8010584:	2b00      	cmp	r3, #0
 8010586:	d015      	beq.n	80105b4 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8010588:	69fb      	ldr	r3, [r7, #28]
 801058a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801058e:	2b00      	cmp	r3, #0
 8010590:	d008      	beq.n	80105a4 <tcp_input+0x5a8>
 8010592:	69fb      	ldr	r3, [r7, #28]
 8010594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010598:	69fa      	ldr	r2, [r7, #28]
 801059a:	6912      	ldr	r2, [r2, #16]
 801059c:	f06f 010d 	mvn.w	r1, #13
 80105a0:	4610      	mov	r0, r2
 80105a2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80105a4:	69f9      	ldr	r1, [r7, #28]
 80105a6:	488c      	ldr	r0, [pc, #560]	; (80107d8 <tcp_input+0x7dc>)
 80105a8:	f7ff fbb0 	bl	800fd0c <tcp_pcb_remove>
        tcp_free(pcb);
 80105ac:	69f8      	ldr	r0, [r7, #28]
 80105ae:	f7fd fed9 	bl	800e364 <tcp_free>
 80105b2:	e0c1      	b.n	8010738 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 80105b4:	2300      	movs	r3, #0
 80105b6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80105b8:	4b88      	ldr	r3, [pc, #544]	; (80107dc <tcp_input+0x7e0>)
 80105ba:	881b      	ldrh	r3, [r3, #0]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d01d      	beq.n	80105fc <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80105c0:	4b86      	ldr	r3, [pc, #536]	; (80107dc <tcp_input+0x7e0>)
 80105c2:	881b      	ldrh	r3, [r3, #0]
 80105c4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80105c6:	69fb      	ldr	r3, [r7, #28]
 80105c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d00a      	beq.n	80105e6 <tcp_input+0x5ea>
 80105d0:	69fb      	ldr	r3, [r7, #28]
 80105d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80105d6:	69fa      	ldr	r2, [r7, #28]
 80105d8:	6910      	ldr	r0, [r2, #16]
 80105da:	89fa      	ldrh	r2, [r7, #14]
 80105dc:	69f9      	ldr	r1, [r7, #28]
 80105de:	4798      	blx	r3
 80105e0:	4603      	mov	r3, r0
 80105e2:	74fb      	strb	r3, [r7, #19]
 80105e4:	e001      	b.n	80105ea <tcp_input+0x5ee>
 80105e6:	2300      	movs	r3, #0
 80105e8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80105ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80105ee:	f113 0f0d 	cmn.w	r3, #13
 80105f2:	f000 8098 	beq.w	8010726 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 80105f6:	4b79      	ldr	r3, [pc, #484]	; (80107dc <tcp_input+0x7e0>)
 80105f8:	2200      	movs	r2, #0
 80105fa:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80105fc:	69f8      	ldr	r0, [r7, #28]
 80105fe:	f000 f905 	bl	801080c <tcp_input_delayed_close>
 8010602:	4603      	mov	r3, r0
 8010604:	2b00      	cmp	r3, #0
 8010606:	f040 8090 	bne.w	801072a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801060a:	4b75      	ldr	r3, [pc, #468]	; (80107e0 <tcp_input+0x7e4>)
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d041      	beq.n	8010696 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010612:	69fb      	ldr	r3, [r7, #28]
 8010614:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010616:	2b00      	cmp	r3, #0
 8010618:	d006      	beq.n	8010628 <tcp_input+0x62c>
 801061a:	4b72      	ldr	r3, [pc, #456]	; (80107e4 <tcp_input+0x7e8>)
 801061c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010620:	4971      	ldr	r1, [pc, #452]	; (80107e8 <tcp_input+0x7ec>)
 8010622:	4872      	ldr	r0, [pc, #456]	; (80107ec <tcp_input+0x7f0>)
 8010624:	f006 fd92 	bl	801714c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8010628:	69fb      	ldr	r3, [r7, #28]
 801062a:	8b5b      	ldrh	r3, [r3, #26]
 801062c:	f003 0310 	and.w	r3, r3, #16
 8010630:	2b00      	cmp	r3, #0
 8010632:	d008      	beq.n	8010646 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010634:	4b6a      	ldr	r3, [pc, #424]	; (80107e0 <tcp_input+0x7e4>)
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	4618      	mov	r0, r3
 801063a:	f7fd fbe7 	bl	800de0c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801063e:	69f8      	ldr	r0, [r7, #28]
 8010640:	f7fe f9ca 	bl	800e9d8 <tcp_abort>
            goto aborted;
 8010644:	e078      	b.n	8010738 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8010646:	69fb      	ldr	r3, [r7, #28]
 8010648:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801064c:	2b00      	cmp	r3, #0
 801064e:	d00c      	beq.n	801066a <tcp_input+0x66e>
 8010650:	69fb      	ldr	r3, [r7, #28]
 8010652:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010656:	69fb      	ldr	r3, [r7, #28]
 8010658:	6918      	ldr	r0, [r3, #16]
 801065a:	4b61      	ldr	r3, [pc, #388]	; (80107e0 <tcp_input+0x7e4>)
 801065c:	681a      	ldr	r2, [r3, #0]
 801065e:	2300      	movs	r3, #0
 8010660:	69f9      	ldr	r1, [r7, #28]
 8010662:	47a0      	blx	r4
 8010664:	4603      	mov	r3, r0
 8010666:	74fb      	strb	r3, [r7, #19]
 8010668:	e008      	b.n	801067c <tcp_input+0x680>
 801066a:	4b5d      	ldr	r3, [pc, #372]	; (80107e0 <tcp_input+0x7e4>)
 801066c:	681a      	ldr	r2, [r3, #0]
 801066e:	2300      	movs	r3, #0
 8010670:	69f9      	ldr	r1, [r7, #28]
 8010672:	2000      	movs	r0, #0
 8010674:	f7ff f884 	bl	800f780 <tcp_recv_null>
 8010678:	4603      	mov	r3, r0
 801067a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801067c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010680:	f113 0f0d 	cmn.w	r3, #13
 8010684:	d053      	beq.n	801072e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8010686:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d003      	beq.n	8010696 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801068e:	4b54      	ldr	r3, [pc, #336]	; (80107e0 <tcp_input+0x7e4>)
 8010690:	681a      	ldr	r2, [r3, #0]
 8010692:	69fb      	ldr	r3, [r7, #28]
 8010694:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8010696:	4b4f      	ldr	r3, [pc, #316]	; (80107d4 <tcp_input+0x7d8>)
 8010698:	781b      	ldrb	r3, [r3, #0]
 801069a:	f003 0320 	and.w	r3, r3, #32
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d030      	beq.n	8010704 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80106a2:	69fb      	ldr	r3, [r7, #28]
 80106a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d009      	beq.n	80106be <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80106aa:	69fb      	ldr	r3, [r7, #28]
 80106ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80106ae:	7b5a      	ldrb	r2, [r3, #13]
 80106b0:	69fb      	ldr	r3, [r7, #28]
 80106b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80106b4:	f042 0220 	orr.w	r2, r2, #32
 80106b8:	b2d2      	uxtb	r2, r2
 80106ba:	735a      	strb	r2, [r3, #13]
 80106bc:	e022      	b.n	8010704 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80106be:	69fb      	ldr	r3, [r7, #28]
 80106c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80106c2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80106c6:	d005      	beq.n	80106d4 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 80106c8:	69fb      	ldr	r3, [r7, #28]
 80106ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80106cc:	3301      	adds	r3, #1
 80106ce:	b29a      	uxth	r2, r3
 80106d0:	69fb      	ldr	r3, [r7, #28]
 80106d2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80106d4:	69fb      	ldr	r3, [r7, #28]
 80106d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d00b      	beq.n	80106f6 <tcp_input+0x6fa>
 80106de:	69fb      	ldr	r3, [r7, #28]
 80106e0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80106e4:	69fb      	ldr	r3, [r7, #28]
 80106e6:	6918      	ldr	r0, [r3, #16]
 80106e8:	2300      	movs	r3, #0
 80106ea:	2200      	movs	r2, #0
 80106ec:	69f9      	ldr	r1, [r7, #28]
 80106ee:	47a0      	blx	r4
 80106f0:	4603      	mov	r3, r0
 80106f2:	74fb      	strb	r3, [r7, #19]
 80106f4:	e001      	b.n	80106fa <tcp_input+0x6fe>
 80106f6:	2300      	movs	r3, #0
 80106f8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80106fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80106fe:	f113 0f0d 	cmn.w	r3, #13
 8010702:	d016      	beq.n	8010732 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010704:	4b32      	ldr	r3, [pc, #200]	; (80107d0 <tcp_input+0x7d4>)
 8010706:	2200      	movs	r2, #0
 8010708:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801070a:	69f8      	ldr	r0, [r7, #28]
 801070c:	f000 f87e 	bl	801080c <tcp_input_delayed_close>
 8010710:	4603      	mov	r3, r0
 8010712:	2b00      	cmp	r3, #0
 8010714:	d10f      	bne.n	8010736 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8010716:	69f8      	ldr	r0, [r7, #28]
 8010718:	f002 ff10 	bl	801353c <tcp_output>
 801071c:	e00c      	b.n	8010738 <tcp_input+0x73c>
        goto aborted;
 801071e:	bf00      	nop
 8010720:	e00a      	b.n	8010738 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8010722:	bf00      	nop
 8010724:	e008      	b.n	8010738 <tcp_input+0x73c>
              goto aborted;
 8010726:	bf00      	nop
 8010728:	e006      	b.n	8010738 <tcp_input+0x73c>
          goto aborted;
 801072a:	bf00      	nop
 801072c:	e004      	b.n	8010738 <tcp_input+0x73c>
            goto aborted;
 801072e:	bf00      	nop
 8010730:	e002      	b.n	8010738 <tcp_input+0x73c>
              goto aborted;
 8010732:	bf00      	nop
 8010734:	e000      	b.n	8010738 <tcp_input+0x73c>
          goto aborted;
 8010736:	bf00      	nop
    tcp_input_pcb = NULL;
 8010738:	4b25      	ldr	r3, [pc, #148]	; (80107d0 <tcp_input+0x7d4>)
 801073a:	2200      	movs	r2, #0
 801073c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801073e:	4b28      	ldr	r3, [pc, #160]	; (80107e0 <tcp_input+0x7e4>)
 8010740:	2200      	movs	r2, #0
 8010742:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8010744:	4b2a      	ldr	r3, [pc, #168]	; (80107f0 <tcp_input+0x7f4>)
 8010746:	685b      	ldr	r3, [r3, #4]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d03d      	beq.n	80107c8 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 801074c:	4b28      	ldr	r3, [pc, #160]	; (80107f0 <tcp_input+0x7f4>)
 801074e:	685b      	ldr	r3, [r3, #4]
 8010750:	4618      	mov	r0, r3
 8010752:	f7fd fb5b 	bl	800de0c <pbuf_free>
      inseg.p = NULL;
 8010756:	4b26      	ldr	r3, [pc, #152]	; (80107f0 <tcp_input+0x7f4>)
 8010758:	2200      	movs	r2, #0
 801075a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801075c:	e034      	b.n	80107c8 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801075e:	4b25      	ldr	r3, [pc, #148]	; (80107f4 <tcp_input+0x7f8>)
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	899b      	ldrh	r3, [r3, #12]
 8010764:	b29b      	uxth	r3, r3
 8010766:	4618      	mov	r0, r3
 8010768:	f7fb ff7c 	bl	800c664 <lwip_htons>
 801076c:	4603      	mov	r3, r0
 801076e:	b2db      	uxtb	r3, r3
 8010770:	f003 0304 	and.w	r3, r3, #4
 8010774:	2b00      	cmp	r3, #0
 8010776:	d118      	bne.n	80107aa <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010778:	4b1f      	ldr	r3, [pc, #124]	; (80107f8 <tcp_input+0x7fc>)
 801077a:	6819      	ldr	r1, [r3, #0]
 801077c:	4b1f      	ldr	r3, [pc, #124]	; (80107fc <tcp_input+0x800>)
 801077e:	881b      	ldrh	r3, [r3, #0]
 8010780:	461a      	mov	r2, r3
 8010782:	4b1f      	ldr	r3, [pc, #124]	; (8010800 <tcp_input+0x804>)
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010788:	4b1a      	ldr	r3, [pc, #104]	; (80107f4 <tcp_input+0x7f8>)
 801078a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801078c:	885b      	ldrh	r3, [r3, #2]
 801078e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010790:	4a18      	ldr	r2, [pc, #96]	; (80107f4 <tcp_input+0x7f8>)
 8010792:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010794:	8812      	ldrh	r2, [r2, #0]
 8010796:	b292      	uxth	r2, r2
 8010798:	9202      	str	r2, [sp, #8]
 801079a:	9301      	str	r3, [sp, #4]
 801079c:	4b19      	ldr	r3, [pc, #100]	; (8010804 <tcp_input+0x808>)
 801079e:	9300      	str	r3, [sp, #0]
 80107a0:	4b19      	ldr	r3, [pc, #100]	; (8010808 <tcp_input+0x80c>)
 80107a2:	4602      	mov	r2, r0
 80107a4:	2000      	movs	r0, #0
 80107a6:	f003 fc8f 	bl	80140c8 <tcp_rst>
    pbuf_free(p);
 80107aa:	6878      	ldr	r0, [r7, #4]
 80107ac:	f7fd fb2e 	bl	800de0c <pbuf_free>
  return;
 80107b0:	e00a      	b.n	80107c8 <tcp_input+0x7cc>
    goto dropped;
 80107b2:	bf00      	nop
 80107b4:	e004      	b.n	80107c0 <tcp_input+0x7c4>
dropped:
 80107b6:	bf00      	nop
 80107b8:	e002      	b.n	80107c0 <tcp_input+0x7c4>
      goto dropped;
 80107ba:	bf00      	nop
 80107bc:	e000      	b.n	80107c0 <tcp_input+0x7c4>
      goto dropped;
 80107be:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80107c0:	6878      	ldr	r0, [r7, #4]
 80107c2:	f7fd fb23 	bl	800de0c <pbuf_free>
 80107c6:	e000      	b.n	80107ca <tcp_input+0x7ce>
  return;
 80107c8:	bf00      	nop
}
 80107ca:	3724      	adds	r7, #36	; 0x24
 80107cc:	46bd      	mov	sp, r7
 80107ce:	bd90      	pop	{r4, r7, pc}
 80107d0:	2000d254 	.word	0x2000d254
 80107d4:	20004679 	.word	0x20004679
 80107d8:	2000d240 	.word	0x2000d240
 80107dc:	20004674 	.word	0x20004674
 80107e0:	2000467c 	.word	0x2000467c
 80107e4:	0801a370 	.word	0x0801a370
 80107e8:	0801a524 	.word	0x0801a524
 80107ec:	0801a3bc 	.word	0x0801a3bc
 80107f0:	2000464c 	.word	0x2000464c
 80107f4:	2000465c 	.word	0x2000465c
 80107f8:	20004670 	.word	0x20004670
 80107fc:	20004676 	.word	0x20004676
 8010800:	2000466c 	.word	0x2000466c
 8010804:	20007a00 	.word	0x20007a00
 8010808:	20007a04 	.word	0x20007a04

0801080c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801080c:	b580      	push	{r7, lr}
 801080e:	b082      	sub	sp, #8
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d106      	bne.n	8010828 <tcp_input_delayed_close+0x1c>
 801081a:	4b17      	ldr	r3, [pc, #92]	; (8010878 <tcp_input_delayed_close+0x6c>)
 801081c:	f240 225a 	movw	r2, #602	; 0x25a
 8010820:	4916      	ldr	r1, [pc, #88]	; (801087c <tcp_input_delayed_close+0x70>)
 8010822:	4817      	ldr	r0, [pc, #92]	; (8010880 <tcp_input_delayed_close+0x74>)
 8010824:	f006 fc92 	bl	801714c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8010828:	4b16      	ldr	r3, [pc, #88]	; (8010884 <tcp_input_delayed_close+0x78>)
 801082a:	781b      	ldrb	r3, [r3, #0]
 801082c:	f003 0310 	and.w	r3, r3, #16
 8010830:	2b00      	cmp	r3, #0
 8010832:	d01c      	beq.n	801086e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	8b5b      	ldrh	r3, [r3, #26]
 8010838:	f003 0310 	and.w	r3, r3, #16
 801083c:	2b00      	cmp	r3, #0
 801083e:	d10d      	bne.n	801085c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010846:	2b00      	cmp	r3, #0
 8010848:	d008      	beq.n	801085c <tcp_input_delayed_close+0x50>
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010850:	687a      	ldr	r2, [r7, #4]
 8010852:	6912      	ldr	r2, [r2, #16]
 8010854:	f06f 010e 	mvn.w	r1, #14
 8010858:	4610      	mov	r0, r2
 801085a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801085c:	6879      	ldr	r1, [r7, #4]
 801085e:	480a      	ldr	r0, [pc, #40]	; (8010888 <tcp_input_delayed_close+0x7c>)
 8010860:	f7ff fa54 	bl	800fd0c <tcp_pcb_remove>
    tcp_free(pcb);
 8010864:	6878      	ldr	r0, [r7, #4]
 8010866:	f7fd fd7d 	bl	800e364 <tcp_free>
    return 1;
 801086a:	2301      	movs	r3, #1
 801086c:	e000      	b.n	8010870 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801086e:	2300      	movs	r3, #0
}
 8010870:	4618      	mov	r0, r3
 8010872:	3708      	adds	r7, #8
 8010874:	46bd      	mov	sp, r7
 8010876:	bd80      	pop	{r7, pc}
 8010878:	0801a370 	.word	0x0801a370
 801087c:	0801a540 	.word	0x0801a540
 8010880:	0801a3bc 	.word	0x0801a3bc
 8010884:	20004679 	.word	0x20004679
 8010888:	2000d240 	.word	0x2000d240

0801088c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801088c:	b590      	push	{r4, r7, lr}
 801088e:	b08b      	sub	sp, #44	; 0x2c
 8010890:	af04      	add	r7, sp, #16
 8010892:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8010894:	4b6f      	ldr	r3, [pc, #444]	; (8010a54 <tcp_listen_input+0x1c8>)
 8010896:	781b      	ldrb	r3, [r3, #0]
 8010898:	f003 0304 	and.w	r3, r3, #4
 801089c:	2b00      	cmp	r3, #0
 801089e:	f040 80d3 	bne.w	8010a48 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d106      	bne.n	80108b6 <tcp_listen_input+0x2a>
 80108a8:	4b6b      	ldr	r3, [pc, #428]	; (8010a58 <tcp_listen_input+0x1cc>)
 80108aa:	f240 2281 	movw	r2, #641	; 0x281
 80108ae:	496b      	ldr	r1, [pc, #428]	; (8010a5c <tcp_listen_input+0x1d0>)
 80108b0:	486b      	ldr	r0, [pc, #428]	; (8010a60 <tcp_listen_input+0x1d4>)
 80108b2:	f006 fc4b 	bl	801714c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80108b6:	4b67      	ldr	r3, [pc, #412]	; (8010a54 <tcp_listen_input+0x1c8>)
 80108b8:	781b      	ldrb	r3, [r3, #0]
 80108ba:	f003 0310 	and.w	r3, r3, #16
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d019      	beq.n	80108f6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80108c2:	4b68      	ldr	r3, [pc, #416]	; (8010a64 <tcp_listen_input+0x1d8>)
 80108c4:	6819      	ldr	r1, [r3, #0]
 80108c6:	4b68      	ldr	r3, [pc, #416]	; (8010a68 <tcp_listen_input+0x1dc>)
 80108c8:	881b      	ldrh	r3, [r3, #0]
 80108ca:	461a      	mov	r2, r3
 80108cc:	4b67      	ldr	r3, [pc, #412]	; (8010a6c <tcp_listen_input+0x1e0>)
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80108d2:	4b67      	ldr	r3, [pc, #412]	; (8010a70 <tcp_listen_input+0x1e4>)
 80108d4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80108d6:	885b      	ldrh	r3, [r3, #2]
 80108d8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80108da:	4a65      	ldr	r2, [pc, #404]	; (8010a70 <tcp_listen_input+0x1e4>)
 80108dc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80108de:	8812      	ldrh	r2, [r2, #0]
 80108e0:	b292      	uxth	r2, r2
 80108e2:	9202      	str	r2, [sp, #8]
 80108e4:	9301      	str	r3, [sp, #4]
 80108e6:	4b63      	ldr	r3, [pc, #396]	; (8010a74 <tcp_listen_input+0x1e8>)
 80108e8:	9300      	str	r3, [sp, #0]
 80108ea:	4b63      	ldr	r3, [pc, #396]	; (8010a78 <tcp_listen_input+0x1ec>)
 80108ec:	4602      	mov	r2, r0
 80108ee:	6878      	ldr	r0, [r7, #4]
 80108f0:	f003 fbea 	bl	80140c8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80108f4:	e0aa      	b.n	8010a4c <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 80108f6:	4b57      	ldr	r3, [pc, #348]	; (8010a54 <tcp_listen_input+0x1c8>)
 80108f8:	781b      	ldrb	r3, [r3, #0]
 80108fa:	f003 0302 	and.w	r3, r3, #2
 80108fe:	2b00      	cmp	r3, #0
 8010900:	f000 80a4 	beq.w	8010a4c <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	7d5b      	ldrb	r3, [r3, #21]
 8010908:	4618      	mov	r0, r3
 801090a:	f7ff f85d 	bl	800f9c8 <tcp_alloc>
 801090e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010910:	697b      	ldr	r3, [r7, #20]
 8010912:	2b00      	cmp	r3, #0
 8010914:	d111      	bne.n	801093a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	699b      	ldr	r3, [r3, #24]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d00a      	beq.n	8010934 <tcp_listen_input+0xa8>
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	699b      	ldr	r3, [r3, #24]
 8010922:	687a      	ldr	r2, [r7, #4]
 8010924:	6910      	ldr	r0, [r2, #16]
 8010926:	f04f 32ff 	mov.w	r2, #4294967295
 801092a:	2100      	movs	r1, #0
 801092c:	4798      	blx	r3
 801092e:	4603      	mov	r3, r0
 8010930:	73bb      	strb	r3, [r7, #14]
      return;
 8010932:	e08c      	b.n	8010a4e <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010934:	23f0      	movs	r3, #240	; 0xf0
 8010936:	73bb      	strb	r3, [r7, #14]
      return;
 8010938:	e089      	b.n	8010a4e <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801093a:	4b50      	ldr	r3, [pc, #320]	; (8010a7c <tcp_listen_input+0x1f0>)
 801093c:	695a      	ldr	r2, [r3, #20]
 801093e:	697b      	ldr	r3, [r7, #20]
 8010940:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8010942:	4b4e      	ldr	r3, [pc, #312]	; (8010a7c <tcp_listen_input+0x1f0>)
 8010944:	691a      	ldr	r2, [r3, #16]
 8010946:	697b      	ldr	r3, [r7, #20]
 8010948:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	8ada      	ldrh	r2, [r3, #22]
 801094e:	697b      	ldr	r3, [r7, #20]
 8010950:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8010952:	4b47      	ldr	r3, [pc, #284]	; (8010a70 <tcp_listen_input+0x1e4>)
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	881b      	ldrh	r3, [r3, #0]
 8010958:	b29a      	uxth	r2, r3
 801095a:	697b      	ldr	r3, [r7, #20]
 801095c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801095e:	697b      	ldr	r3, [r7, #20]
 8010960:	2203      	movs	r2, #3
 8010962:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8010964:	4b41      	ldr	r3, [pc, #260]	; (8010a6c <tcp_listen_input+0x1e0>)
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	1c5a      	adds	r2, r3, #1
 801096a:	697b      	ldr	r3, [r7, #20]
 801096c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801096e:	697b      	ldr	r3, [r7, #20]
 8010970:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010972:	697b      	ldr	r3, [r7, #20]
 8010974:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8010976:	6978      	ldr	r0, [r7, #20]
 8010978:	f7ff fa5c 	bl	800fe34 <tcp_next_iss>
 801097c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801097e:	697b      	ldr	r3, [r7, #20]
 8010980:	693a      	ldr	r2, [r7, #16]
 8010982:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8010984:	697b      	ldr	r3, [r7, #20]
 8010986:	693a      	ldr	r2, [r7, #16]
 8010988:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801098a:	697b      	ldr	r3, [r7, #20]
 801098c:	693a      	ldr	r2, [r7, #16]
 801098e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8010990:	697b      	ldr	r3, [r7, #20]
 8010992:	693a      	ldr	r2, [r7, #16]
 8010994:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8010996:	4b35      	ldr	r3, [pc, #212]	; (8010a6c <tcp_listen_input+0x1e0>)
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	1e5a      	subs	r2, r3, #1
 801099c:	697b      	ldr	r3, [r7, #20]
 801099e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	691a      	ldr	r2, [r3, #16]
 80109a4:	697b      	ldr	r3, [r7, #20]
 80109a6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80109a8:	697b      	ldr	r3, [r7, #20]
 80109aa:	687a      	ldr	r2, [r7, #4]
 80109ac:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	7a5b      	ldrb	r3, [r3, #9]
 80109b2:	f003 030c 	and.w	r3, r3, #12
 80109b6:	b2da      	uxtb	r2, r3
 80109b8:	697b      	ldr	r3, [r7, #20]
 80109ba:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	7a1a      	ldrb	r2, [r3, #8]
 80109c0:	697b      	ldr	r3, [r7, #20]
 80109c2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80109c4:	4b2e      	ldr	r3, [pc, #184]	; (8010a80 <tcp_listen_input+0x1f4>)
 80109c6:	681a      	ldr	r2, [r3, #0]
 80109c8:	697b      	ldr	r3, [r7, #20]
 80109ca:	60da      	str	r2, [r3, #12]
 80109cc:	4a2c      	ldr	r2, [pc, #176]	; (8010a80 <tcp_listen_input+0x1f4>)
 80109ce:	697b      	ldr	r3, [r7, #20]
 80109d0:	6013      	str	r3, [r2, #0]
 80109d2:	f003 fd3b 	bl	801444c <tcp_timer_needed>
 80109d6:	4b2b      	ldr	r3, [pc, #172]	; (8010a84 <tcp_listen_input+0x1f8>)
 80109d8:	2201      	movs	r2, #1
 80109da:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80109dc:	6978      	ldr	r0, [r7, #20]
 80109de:	f001 fd8f 	bl	8012500 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80109e2:	4b23      	ldr	r3, [pc, #140]	; (8010a70 <tcp_listen_input+0x1e4>)
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	89db      	ldrh	r3, [r3, #14]
 80109e8:	b29a      	uxth	r2, r3
 80109ea:	697b      	ldr	r3, [r7, #20]
 80109ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80109f0:	697b      	ldr	r3, [r7, #20]
 80109f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80109f6:	697b      	ldr	r3, [r7, #20]
 80109f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80109fc:	697b      	ldr	r3, [r7, #20]
 80109fe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010a00:	697b      	ldr	r3, [r7, #20]
 8010a02:	3304      	adds	r3, #4
 8010a04:	4618      	mov	r0, r3
 8010a06:	f004 ff73 	bl	80158f0 <ip4_route>
 8010a0a:	4601      	mov	r1, r0
 8010a0c:	697b      	ldr	r3, [r7, #20]
 8010a0e:	3304      	adds	r3, #4
 8010a10:	461a      	mov	r2, r3
 8010a12:	4620      	mov	r0, r4
 8010a14:	f7ff fa34 	bl	800fe80 <tcp_eff_send_mss_netif>
 8010a18:	4603      	mov	r3, r0
 8010a1a:	461a      	mov	r2, r3
 8010a1c:	697b      	ldr	r3, [r7, #20]
 8010a1e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010a20:	2112      	movs	r1, #18
 8010a22:	6978      	ldr	r0, [r7, #20]
 8010a24:	f002 fc9c 	bl	8013360 <tcp_enqueue_flags>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8010a2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d004      	beq.n	8010a3e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8010a34:	2100      	movs	r1, #0
 8010a36:	6978      	ldr	r0, [r7, #20]
 8010a38:	f7fd ff10 	bl	800e85c <tcp_abandon>
      return;
 8010a3c:	e007      	b.n	8010a4e <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 8010a3e:	6978      	ldr	r0, [r7, #20]
 8010a40:	f002 fd7c 	bl	801353c <tcp_output>
  return;
 8010a44:	bf00      	nop
 8010a46:	e001      	b.n	8010a4c <tcp_listen_input+0x1c0>
    return;
 8010a48:	bf00      	nop
 8010a4a:	e000      	b.n	8010a4e <tcp_listen_input+0x1c2>
  return;
 8010a4c:	bf00      	nop
}
 8010a4e:	371c      	adds	r7, #28
 8010a50:	46bd      	mov	sp, r7
 8010a52:	bd90      	pop	{r4, r7, pc}
 8010a54:	20004678 	.word	0x20004678
 8010a58:	0801a370 	.word	0x0801a370
 8010a5c:	0801a568 	.word	0x0801a568
 8010a60:	0801a3bc 	.word	0x0801a3bc
 8010a64:	20004670 	.word	0x20004670
 8010a68:	20004676 	.word	0x20004676
 8010a6c:	2000466c 	.word	0x2000466c
 8010a70:	2000465c 	.word	0x2000465c
 8010a74:	20007a00 	.word	0x20007a00
 8010a78:	20007a04 	.word	0x20007a04
 8010a7c:	200079f0 	.word	0x200079f0
 8010a80:	2000d240 	.word	0x2000d240
 8010a84:	2000d23c 	.word	0x2000d23c

08010a88 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8010a88:	b580      	push	{r7, lr}
 8010a8a:	b086      	sub	sp, #24
 8010a8c:	af04      	add	r7, sp, #16
 8010a8e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010a90:	4b30      	ldr	r3, [pc, #192]	; (8010b54 <tcp_timewait_input+0xcc>)
 8010a92:	781b      	ldrb	r3, [r3, #0]
 8010a94:	f003 0304 	and.w	r3, r3, #4
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d154      	bne.n	8010b46 <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d106      	bne.n	8010ab0 <tcp_timewait_input+0x28>
 8010aa2:	4b2d      	ldr	r3, [pc, #180]	; (8010b58 <tcp_timewait_input+0xd0>)
 8010aa4:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010aa8:	492c      	ldr	r1, [pc, #176]	; (8010b5c <tcp_timewait_input+0xd4>)
 8010aaa:	482d      	ldr	r0, [pc, #180]	; (8010b60 <tcp_timewait_input+0xd8>)
 8010aac:	f006 fb4e 	bl	801714c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010ab0:	4b28      	ldr	r3, [pc, #160]	; (8010b54 <tcp_timewait_input+0xcc>)
 8010ab2:	781b      	ldrb	r3, [r3, #0]
 8010ab4:	f003 0302 	and.w	r3, r3, #2
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d02a      	beq.n	8010b12 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010abc:	4b29      	ldr	r3, [pc, #164]	; (8010b64 <tcp_timewait_input+0xdc>)
 8010abe:	681a      	ldr	r2, [r3, #0]
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ac4:	1ad3      	subs	r3, r2, r3
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	db2d      	blt.n	8010b26 <tcp_timewait_input+0x9e>
 8010aca:	4b26      	ldr	r3, [pc, #152]	; (8010b64 <tcp_timewait_input+0xdc>)
 8010acc:	681a      	ldr	r2, [r3, #0]
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ad2:	6879      	ldr	r1, [r7, #4]
 8010ad4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010ad6:	440b      	add	r3, r1
 8010ad8:	1ad3      	subs	r3, r2, r3
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	dc23      	bgt.n	8010b26 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ade:	4b22      	ldr	r3, [pc, #136]	; (8010b68 <tcp_timewait_input+0xe0>)
 8010ae0:	6819      	ldr	r1, [r3, #0]
 8010ae2:	4b22      	ldr	r3, [pc, #136]	; (8010b6c <tcp_timewait_input+0xe4>)
 8010ae4:	881b      	ldrh	r3, [r3, #0]
 8010ae6:	461a      	mov	r2, r3
 8010ae8:	4b1e      	ldr	r3, [pc, #120]	; (8010b64 <tcp_timewait_input+0xdc>)
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010aee:	4b20      	ldr	r3, [pc, #128]	; (8010b70 <tcp_timewait_input+0xe8>)
 8010af0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010af2:	885b      	ldrh	r3, [r3, #2]
 8010af4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010af6:	4a1e      	ldr	r2, [pc, #120]	; (8010b70 <tcp_timewait_input+0xe8>)
 8010af8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010afa:	8812      	ldrh	r2, [r2, #0]
 8010afc:	b292      	uxth	r2, r2
 8010afe:	9202      	str	r2, [sp, #8]
 8010b00:	9301      	str	r3, [sp, #4]
 8010b02:	4b1c      	ldr	r3, [pc, #112]	; (8010b74 <tcp_timewait_input+0xec>)
 8010b04:	9300      	str	r3, [sp, #0]
 8010b06:	4b1c      	ldr	r3, [pc, #112]	; (8010b78 <tcp_timewait_input+0xf0>)
 8010b08:	4602      	mov	r2, r0
 8010b0a:	6878      	ldr	r0, [r7, #4]
 8010b0c:	f003 fadc 	bl	80140c8 <tcp_rst>
      return;
 8010b10:	e01c      	b.n	8010b4c <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 8010b12:	4b10      	ldr	r3, [pc, #64]	; (8010b54 <tcp_timewait_input+0xcc>)
 8010b14:	781b      	ldrb	r3, [r3, #0]
 8010b16:	f003 0301 	and.w	r3, r3, #1
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d003      	beq.n	8010b26 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010b1e:	4b17      	ldr	r3, [pc, #92]	; (8010b7c <tcp_timewait_input+0xf4>)
 8010b20:	681a      	ldr	r2, [r3, #0]
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8010b26:	4b11      	ldr	r3, [pc, #68]	; (8010b6c <tcp_timewait_input+0xe4>)
 8010b28:	881b      	ldrh	r3, [r3, #0]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d00d      	beq.n	8010b4a <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	8b5b      	ldrh	r3, [r3, #26]
 8010b32:	f043 0302 	orr.w	r3, r3, #2
 8010b36:	b29a      	uxth	r2, r3
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010b3c:	6878      	ldr	r0, [r7, #4]
 8010b3e:	f002 fcfd 	bl	801353c <tcp_output>
  }
  return;
 8010b42:	bf00      	nop
 8010b44:	e001      	b.n	8010b4a <tcp_timewait_input+0xc2>
    return;
 8010b46:	bf00      	nop
 8010b48:	e000      	b.n	8010b4c <tcp_timewait_input+0xc4>
  return;
 8010b4a:	bf00      	nop
}
 8010b4c:	3708      	adds	r7, #8
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	bd80      	pop	{r7, pc}
 8010b52:	bf00      	nop
 8010b54:	20004678 	.word	0x20004678
 8010b58:	0801a370 	.word	0x0801a370
 8010b5c:	0801a588 	.word	0x0801a588
 8010b60:	0801a3bc 	.word	0x0801a3bc
 8010b64:	2000466c 	.word	0x2000466c
 8010b68:	20004670 	.word	0x20004670
 8010b6c:	20004676 	.word	0x20004676
 8010b70:	2000465c 	.word	0x2000465c
 8010b74:	20007a00 	.word	0x20007a00
 8010b78:	20007a04 	.word	0x20007a04
 8010b7c:	2000d244 	.word	0x2000d244

08010b80 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010b80:	b590      	push	{r4, r7, lr}
 8010b82:	b08d      	sub	sp, #52	; 0x34
 8010b84:	af04      	add	r7, sp, #16
 8010b86:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010b88:	2300      	movs	r3, #0
 8010b8a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d106      	bne.n	8010ba4 <tcp_process+0x24>
 8010b96:	4ba5      	ldr	r3, [pc, #660]	; (8010e2c <tcp_process+0x2ac>)
 8010b98:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010b9c:	49a4      	ldr	r1, [pc, #656]	; (8010e30 <tcp_process+0x2b0>)
 8010b9e:	48a5      	ldr	r0, [pc, #660]	; (8010e34 <tcp_process+0x2b4>)
 8010ba0:	f006 fad4 	bl	801714c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010ba4:	4ba4      	ldr	r3, [pc, #656]	; (8010e38 <tcp_process+0x2b8>)
 8010ba6:	781b      	ldrb	r3, [r3, #0]
 8010ba8:	f003 0304 	and.w	r3, r3, #4
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d04e      	beq.n	8010c4e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	7d1b      	ldrb	r3, [r3, #20]
 8010bb4:	2b02      	cmp	r3, #2
 8010bb6:	d108      	bne.n	8010bca <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010bbc:	4b9f      	ldr	r3, [pc, #636]	; (8010e3c <tcp_process+0x2bc>)
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	429a      	cmp	r2, r3
 8010bc2:	d123      	bne.n	8010c0c <tcp_process+0x8c>
        acceptable = 1;
 8010bc4:	2301      	movs	r3, #1
 8010bc6:	76fb      	strb	r3, [r7, #27]
 8010bc8:	e020      	b.n	8010c0c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010bce:	4b9c      	ldr	r3, [pc, #624]	; (8010e40 <tcp_process+0x2c0>)
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	429a      	cmp	r2, r3
 8010bd4:	d102      	bne.n	8010bdc <tcp_process+0x5c>
        acceptable = 1;
 8010bd6:	2301      	movs	r3, #1
 8010bd8:	76fb      	strb	r3, [r7, #27]
 8010bda:	e017      	b.n	8010c0c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010bdc:	4b98      	ldr	r3, [pc, #608]	; (8010e40 <tcp_process+0x2c0>)
 8010bde:	681a      	ldr	r2, [r3, #0]
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010be4:	1ad3      	subs	r3, r2, r3
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	db10      	blt.n	8010c0c <tcp_process+0x8c>
 8010bea:	4b95      	ldr	r3, [pc, #596]	; (8010e40 <tcp_process+0x2c0>)
 8010bec:	681a      	ldr	r2, [r3, #0]
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bf2:	6879      	ldr	r1, [r7, #4]
 8010bf4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010bf6:	440b      	add	r3, r1
 8010bf8:	1ad3      	subs	r3, r2, r3
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	dc06      	bgt.n	8010c0c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	8b5b      	ldrh	r3, [r3, #26]
 8010c02:	f043 0302 	orr.w	r3, r3, #2
 8010c06:	b29a      	uxth	r2, r3
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010c0c:	7efb      	ldrb	r3, [r7, #27]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d01b      	beq.n	8010c4a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	7d1b      	ldrb	r3, [r3, #20]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d106      	bne.n	8010c28 <tcp_process+0xa8>
 8010c1a:	4b84      	ldr	r3, [pc, #528]	; (8010e2c <tcp_process+0x2ac>)
 8010c1c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010c20:	4988      	ldr	r1, [pc, #544]	; (8010e44 <tcp_process+0x2c4>)
 8010c22:	4884      	ldr	r0, [pc, #528]	; (8010e34 <tcp_process+0x2b4>)
 8010c24:	f006 fa92 	bl	801714c <iprintf>
      recv_flags |= TF_RESET;
 8010c28:	4b87      	ldr	r3, [pc, #540]	; (8010e48 <tcp_process+0x2c8>)
 8010c2a:	781b      	ldrb	r3, [r3, #0]
 8010c2c:	f043 0308 	orr.w	r3, r3, #8
 8010c30:	b2da      	uxtb	r2, r3
 8010c32:	4b85      	ldr	r3, [pc, #532]	; (8010e48 <tcp_process+0x2c8>)
 8010c34:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	8b5b      	ldrh	r3, [r3, #26]
 8010c3a:	f023 0301 	bic.w	r3, r3, #1
 8010c3e:	b29a      	uxth	r2, r3
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010c44:	f06f 030d 	mvn.w	r3, #13
 8010c48:	e37a      	b.n	8011340 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	e378      	b.n	8011340 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010c4e:	4b7a      	ldr	r3, [pc, #488]	; (8010e38 <tcp_process+0x2b8>)
 8010c50:	781b      	ldrb	r3, [r3, #0]
 8010c52:	f003 0302 	and.w	r3, r3, #2
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d010      	beq.n	8010c7c <tcp_process+0xfc>
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	7d1b      	ldrb	r3, [r3, #20]
 8010c5e:	2b02      	cmp	r3, #2
 8010c60:	d00c      	beq.n	8010c7c <tcp_process+0xfc>
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	7d1b      	ldrb	r3, [r3, #20]
 8010c66:	2b03      	cmp	r3, #3
 8010c68:	d008      	beq.n	8010c7c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	8b5b      	ldrh	r3, [r3, #26]
 8010c6e:	f043 0302 	orr.w	r3, r3, #2
 8010c72:	b29a      	uxth	r2, r3
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010c78:	2300      	movs	r3, #0
 8010c7a:	e361      	b.n	8011340 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	8b5b      	ldrh	r3, [r3, #26]
 8010c80:	f003 0310 	and.w	r3, r3, #16
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d103      	bne.n	8010c90 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010c88:	4b70      	ldr	r3, [pc, #448]	; (8010e4c <tcp_process+0x2cc>)
 8010c8a:	681a      	ldr	r2, [r3, #0]
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	2200      	movs	r2, #0
 8010c94:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	2200      	movs	r2, #0
 8010c9c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8010ca0:	6878      	ldr	r0, [r7, #4]
 8010ca2:	f001 fc2d 	bl	8012500 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	7d1b      	ldrb	r3, [r3, #20]
 8010caa:	3b02      	subs	r3, #2
 8010cac:	2b07      	cmp	r3, #7
 8010cae:	f200 8337 	bhi.w	8011320 <tcp_process+0x7a0>
 8010cb2:	a201      	add	r2, pc, #4	; (adr r2, 8010cb8 <tcp_process+0x138>)
 8010cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cb8:	08010cd9 	.word	0x08010cd9
 8010cbc:	08010f09 	.word	0x08010f09
 8010cc0:	08011081 	.word	0x08011081
 8010cc4:	080110ab 	.word	0x080110ab
 8010cc8:	080111cf 	.word	0x080111cf
 8010ccc:	08011081 	.word	0x08011081
 8010cd0:	0801125b 	.word	0x0801125b
 8010cd4:	080112eb 	.word	0x080112eb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010cd8:	4b57      	ldr	r3, [pc, #348]	; (8010e38 <tcp_process+0x2b8>)
 8010cda:	781b      	ldrb	r3, [r3, #0]
 8010cdc:	f003 0310 	and.w	r3, r3, #16
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	f000 80e4 	beq.w	8010eae <tcp_process+0x32e>
 8010ce6:	4b54      	ldr	r3, [pc, #336]	; (8010e38 <tcp_process+0x2b8>)
 8010ce8:	781b      	ldrb	r3, [r3, #0]
 8010cea:	f003 0302 	and.w	r3, r3, #2
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	f000 80dd 	beq.w	8010eae <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010cf8:	1c5a      	adds	r2, r3, #1
 8010cfa:	4b50      	ldr	r3, [pc, #320]	; (8010e3c <tcp_process+0x2bc>)
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	429a      	cmp	r2, r3
 8010d00:	f040 80d5 	bne.w	8010eae <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010d04:	4b4e      	ldr	r3, [pc, #312]	; (8010e40 <tcp_process+0x2c0>)
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	1c5a      	adds	r2, r3, #1
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8010d16:	4b49      	ldr	r3, [pc, #292]	; (8010e3c <tcp_process+0x2bc>)
 8010d18:	681a      	ldr	r2, [r3, #0]
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010d1e:	4b4c      	ldr	r3, [pc, #304]	; (8010e50 <tcp_process+0x2d0>)
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	89db      	ldrh	r3, [r3, #14]
 8010d24:	b29a      	uxth	r2, r3
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010d38:	4b41      	ldr	r3, [pc, #260]	; (8010e40 <tcp_process+0x2c0>)
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	1e5a      	subs	r2, r3, #1
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	2204      	movs	r2, #4
 8010d46:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	3304      	adds	r3, #4
 8010d50:	4618      	mov	r0, r3
 8010d52:	f004 fdcd 	bl	80158f0 <ip4_route>
 8010d56:	4601      	mov	r1, r0
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	3304      	adds	r3, #4
 8010d5c:	461a      	mov	r2, r3
 8010d5e:	4620      	mov	r0, r4
 8010d60:	f7ff f88e 	bl	800fe80 <tcp_eff_send_mss_netif>
 8010d64:	4603      	mov	r3, r0
 8010d66:	461a      	mov	r2, r3
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d70:	009a      	lsls	r2, r3, #2
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d76:	005b      	lsls	r3, r3, #1
 8010d78:	f241 111c 	movw	r1, #4380	; 0x111c
 8010d7c:	428b      	cmp	r3, r1
 8010d7e:	bf38      	it	cc
 8010d80:	460b      	movcc	r3, r1
 8010d82:	429a      	cmp	r2, r3
 8010d84:	d204      	bcs.n	8010d90 <tcp_process+0x210>
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d8a:	009b      	lsls	r3, r3, #2
 8010d8c:	b29b      	uxth	r3, r3
 8010d8e:	e00d      	b.n	8010dac <tcp_process+0x22c>
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d94:	005b      	lsls	r3, r3, #1
 8010d96:	f241 121c 	movw	r2, #4380	; 0x111c
 8010d9a:	4293      	cmp	r3, r2
 8010d9c:	d904      	bls.n	8010da8 <tcp_process+0x228>
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010da2:	005b      	lsls	r3, r3, #1
 8010da4:	b29b      	uxth	r3, r3
 8010da6:	e001      	b.n	8010dac <tcp_process+0x22c>
 8010da8:	f241 131c 	movw	r3, #4380	; 0x111c
 8010dac:	687a      	ldr	r2, [r7, #4]
 8010dae:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d106      	bne.n	8010dca <tcp_process+0x24a>
 8010dbc:	4b1b      	ldr	r3, [pc, #108]	; (8010e2c <tcp_process+0x2ac>)
 8010dbe:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8010dc2:	4924      	ldr	r1, [pc, #144]	; (8010e54 <tcp_process+0x2d4>)
 8010dc4:	481b      	ldr	r0, [pc, #108]	; (8010e34 <tcp_process+0x2b4>)
 8010dc6:	f006 f9c1 	bl	801714c <iprintf>
        --pcb->snd_queuelen;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010dd0:	3b01      	subs	r3, #1
 8010dd2:	b29a      	uxth	r2, r3
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010dde:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010de0:	69fb      	ldr	r3, [r7, #28]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d111      	bne.n	8010e0a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010dea:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010dec:	69fb      	ldr	r3, [r7, #28]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d106      	bne.n	8010e00 <tcp_process+0x280>
 8010df2:	4b0e      	ldr	r3, [pc, #56]	; (8010e2c <tcp_process+0x2ac>)
 8010df4:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010df8:	4917      	ldr	r1, [pc, #92]	; (8010e58 <tcp_process+0x2d8>)
 8010dfa:	480e      	ldr	r0, [pc, #56]	; (8010e34 <tcp_process+0x2b4>)
 8010dfc:	f006 f9a6 	bl	801714c <iprintf>
          pcb->unsent = rseg->next;
 8010e00:	69fb      	ldr	r3, [r7, #28]
 8010e02:	681a      	ldr	r2, [r3, #0]
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	66da      	str	r2, [r3, #108]	; 0x6c
 8010e08:	e003      	b.n	8010e12 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8010e0a:	69fb      	ldr	r3, [r7, #28]
 8010e0c:	681a      	ldr	r2, [r3, #0]
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010e12:	69f8      	ldr	r0, [r7, #28]
 8010e14:	f7fe fc70 	bl	800f6f8 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d11d      	bne.n	8010e5c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e26:	861a      	strh	r2, [r3, #48]	; 0x30
 8010e28:	e01f      	b.n	8010e6a <tcp_process+0x2ea>
 8010e2a:	bf00      	nop
 8010e2c:	0801a370 	.word	0x0801a370
 8010e30:	0801a5a8 	.word	0x0801a5a8
 8010e34:	0801a3bc 	.word	0x0801a3bc
 8010e38:	20004678 	.word	0x20004678
 8010e3c:	20004670 	.word	0x20004670
 8010e40:	2000466c 	.word	0x2000466c
 8010e44:	0801a5c4 	.word	0x0801a5c4
 8010e48:	20004679 	.word	0x20004679
 8010e4c:	2000d244 	.word	0x2000d244
 8010e50:	2000465c 	.word	0x2000465c
 8010e54:	0801a5e4 	.word	0x0801a5e4
 8010e58:	0801a5fc 	.word	0x0801a5fc
        } else {
          pcb->rtime = 0;
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	2200      	movs	r2, #0
 8010e60:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	2200      	movs	r2, #0
 8010e66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d00a      	beq.n	8010e8a <tcp_process+0x30a>
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010e7a:	687a      	ldr	r2, [r7, #4]
 8010e7c:	6910      	ldr	r0, [r2, #16]
 8010e7e:	2200      	movs	r2, #0
 8010e80:	6879      	ldr	r1, [r7, #4]
 8010e82:	4798      	blx	r3
 8010e84:	4603      	mov	r3, r0
 8010e86:	76bb      	strb	r3, [r7, #26]
 8010e88:	e001      	b.n	8010e8e <tcp_process+0x30e>
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010e8e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010e92:	f113 0f0d 	cmn.w	r3, #13
 8010e96:	d102      	bne.n	8010e9e <tcp_process+0x31e>
          return ERR_ABRT;
 8010e98:	f06f 030c 	mvn.w	r3, #12
 8010e9c:	e250      	b.n	8011340 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	8b5b      	ldrh	r3, [r3, #26]
 8010ea2:	f043 0302 	orr.w	r3, r3, #2
 8010ea6:	b29a      	uxth	r2, r3
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010eac:	e23a      	b.n	8011324 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010eae:	4b9d      	ldr	r3, [pc, #628]	; (8011124 <tcp_process+0x5a4>)
 8010eb0:	781b      	ldrb	r3, [r3, #0]
 8010eb2:	f003 0310 	and.w	r3, r3, #16
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	f000 8234 	beq.w	8011324 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ebc:	4b9a      	ldr	r3, [pc, #616]	; (8011128 <tcp_process+0x5a8>)
 8010ebe:	6819      	ldr	r1, [r3, #0]
 8010ec0:	4b9a      	ldr	r3, [pc, #616]	; (801112c <tcp_process+0x5ac>)
 8010ec2:	881b      	ldrh	r3, [r3, #0]
 8010ec4:	461a      	mov	r2, r3
 8010ec6:	4b9a      	ldr	r3, [pc, #616]	; (8011130 <tcp_process+0x5b0>)
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010ecc:	4b99      	ldr	r3, [pc, #612]	; (8011134 <tcp_process+0x5b4>)
 8010ece:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ed0:	885b      	ldrh	r3, [r3, #2]
 8010ed2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010ed4:	4a97      	ldr	r2, [pc, #604]	; (8011134 <tcp_process+0x5b4>)
 8010ed6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ed8:	8812      	ldrh	r2, [r2, #0]
 8010eda:	b292      	uxth	r2, r2
 8010edc:	9202      	str	r2, [sp, #8]
 8010ede:	9301      	str	r3, [sp, #4]
 8010ee0:	4b95      	ldr	r3, [pc, #596]	; (8011138 <tcp_process+0x5b8>)
 8010ee2:	9300      	str	r3, [sp, #0]
 8010ee4:	4b95      	ldr	r3, [pc, #596]	; (801113c <tcp_process+0x5bc>)
 8010ee6:	4602      	mov	r2, r0
 8010ee8:	6878      	ldr	r0, [r7, #4]
 8010eea:	f003 f8ed 	bl	80140c8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010ef4:	2b05      	cmp	r3, #5
 8010ef6:	f200 8215 	bhi.w	8011324 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	2200      	movs	r2, #0
 8010efe:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010f00:	6878      	ldr	r0, [r7, #4]
 8010f02:	f002 feab 	bl	8013c5c <tcp_rexmit_rto>
      break;
 8010f06:	e20d      	b.n	8011324 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010f08:	4b86      	ldr	r3, [pc, #536]	; (8011124 <tcp_process+0x5a4>)
 8010f0a:	781b      	ldrb	r3, [r3, #0]
 8010f0c:	f003 0310 	and.w	r3, r3, #16
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	f000 80a1 	beq.w	8011058 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010f16:	4b84      	ldr	r3, [pc, #528]	; (8011128 <tcp_process+0x5a8>)
 8010f18:	681a      	ldr	r2, [r3, #0]
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f1e:	1ad3      	subs	r3, r2, r3
 8010f20:	3b01      	subs	r3, #1
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	db7e      	blt.n	8011024 <tcp_process+0x4a4>
 8010f26:	4b80      	ldr	r3, [pc, #512]	; (8011128 <tcp_process+0x5a8>)
 8010f28:	681a      	ldr	r2, [r3, #0]
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010f2e:	1ad3      	subs	r3, r2, r3
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	dc77      	bgt.n	8011024 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	2204      	movs	r2, #4
 8010f38:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d102      	bne.n	8010f48 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010f42:	23fa      	movs	r3, #250	; 0xfa
 8010f44:	76bb      	strb	r3, [r7, #26]
 8010f46:	e01d      	b.n	8010f84 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010f4c:	699b      	ldr	r3, [r3, #24]
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d106      	bne.n	8010f60 <tcp_process+0x3e0>
 8010f52:	4b7b      	ldr	r3, [pc, #492]	; (8011140 <tcp_process+0x5c0>)
 8010f54:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8010f58:	497a      	ldr	r1, [pc, #488]	; (8011144 <tcp_process+0x5c4>)
 8010f5a:	487b      	ldr	r0, [pc, #492]	; (8011148 <tcp_process+0x5c8>)
 8010f5c:	f006 f8f6 	bl	801714c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010f64:	699b      	ldr	r3, [r3, #24]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d00a      	beq.n	8010f80 <tcp_process+0x400>
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010f6e:	699b      	ldr	r3, [r3, #24]
 8010f70:	687a      	ldr	r2, [r7, #4]
 8010f72:	6910      	ldr	r0, [r2, #16]
 8010f74:	2200      	movs	r2, #0
 8010f76:	6879      	ldr	r1, [r7, #4]
 8010f78:	4798      	blx	r3
 8010f7a:	4603      	mov	r3, r0
 8010f7c:	76bb      	strb	r3, [r7, #26]
 8010f7e:	e001      	b.n	8010f84 <tcp_process+0x404>
 8010f80:	23f0      	movs	r3, #240	; 0xf0
 8010f82:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010f84:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d00a      	beq.n	8010fa2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010f8c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010f90:	f113 0f0d 	cmn.w	r3, #13
 8010f94:	d002      	beq.n	8010f9c <tcp_process+0x41c>
              tcp_abort(pcb);
 8010f96:	6878      	ldr	r0, [r7, #4]
 8010f98:	f7fd fd1e 	bl	800e9d8 <tcp_abort>
            }
            return ERR_ABRT;
 8010f9c:	f06f 030c 	mvn.w	r3, #12
 8010fa0:	e1ce      	b.n	8011340 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8010fa2:	6878      	ldr	r0, [r7, #4]
 8010fa4:	f000 fae0 	bl	8011568 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010fa8:	4b68      	ldr	r3, [pc, #416]	; (801114c <tcp_process+0x5cc>)
 8010faa:	881b      	ldrh	r3, [r3, #0]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d005      	beq.n	8010fbc <tcp_process+0x43c>
            recv_acked--;
 8010fb0:	4b66      	ldr	r3, [pc, #408]	; (801114c <tcp_process+0x5cc>)
 8010fb2:	881b      	ldrh	r3, [r3, #0]
 8010fb4:	3b01      	subs	r3, #1
 8010fb6:	b29a      	uxth	r2, r3
 8010fb8:	4b64      	ldr	r3, [pc, #400]	; (801114c <tcp_process+0x5cc>)
 8010fba:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010fc0:	009a      	lsls	r2, r3, #2
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010fc6:	005b      	lsls	r3, r3, #1
 8010fc8:	f241 111c 	movw	r1, #4380	; 0x111c
 8010fcc:	428b      	cmp	r3, r1
 8010fce:	bf38      	it	cc
 8010fd0:	460b      	movcc	r3, r1
 8010fd2:	429a      	cmp	r2, r3
 8010fd4:	d204      	bcs.n	8010fe0 <tcp_process+0x460>
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010fda:	009b      	lsls	r3, r3, #2
 8010fdc:	b29b      	uxth	r3, r3
 8010fde:	e00d      	b.n	8010ffc <tcp_process+0x47c>
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010fe4:	005b      	lsls	r3, r3, #1
 8010fe6:	f241 121c 	movw	r2, #4380	; 0x111c
 8010fea:	4293      	cmp	r3, r2
 8010fec:	d904      	bls.n	8010ff8 <tcp_process+0x478>
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ff2:	005b      	lsls	r3, r3, #1
 8010ff4:	b29b      	uxth	r3, r3
 8010ff6:	e001      	b.n	8010ffc <tcp_process+0x47c>
 8010ff8:	f241 131c 	movw	r3, #4380	; 0x111c
 8010ffc:	687a      	ldr	r2, [r7, #4]
 8010ffe:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8011002:	4b53      	ldr	r3, [pc, #332]	; (8011150 <tcp_process+0x5d0>)
 8011004:	781b      	ldrb	r3, [r3, #0]
 8011006:	f003 0320 	and.w	r3, r3, #32
 801100a:	2b00      	cmp	r3, #0
 801100c:	d037      	beq.n	801107e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	8b5b      	ldrh	r3, [r3, #26]
 8011012:	f043 0302 	orr.w	r3, r3, #2
 8011016:	b29a      	uxth	r2, r3
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	2207      	movs	r2, #7
 8011020:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8011022:	e02c      	b.n	801107e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011024:	4b40      	ldr	r3, [pc, #256]	; (8011128 <tcp_process+0x5a8>)
 8011026:	6819      	ldr	r1, [r3, #0]
 8011028:	4b40      	ldr	r3, [pc, #256]	; (801112c <tcp_process+0x5ac>)
 801102a:	881b      	ldrh	r3, [r3, #0]
 801102c:	461a      	mov	r2, r3
 801102e:	4b40      	ldr	r3, [pc, #256]	; (8011130 <tcp_process+0x5b0>)
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011034:	4b3f      	ldr	r3, [pc, #252]	; (8011134 <tcp_process+0x5b4>)
 8011036:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011038:	885b      	ldrh	r3, [r3, #2]
 801103a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801103c:	4a3d      	ldr	r2, [pc, #244]	; (8011134 <tcp_process+0x5b4>)
 801103e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011040:	8812      	ldrh	r2, [r2, #0]
 8011042:	b292      	uxth	r2, r2
 8011044:	9202      	str	r2, [sp, #8]
 8011046:	9301      	str	r3, [sp, #4]
 8011048:	4b3b      	ldr	r3, [pc, #236]	; (8011138 <tcp_process+0x5b8>)
 801104a:	9300      	str	r3, [sp, #0]
 801104c:	4b3b      	ldr	r3, [pc, #236]	; (801113c <tcp_process+0x5bc>)
 801104e:	4602      	mov	r2, r0
 8011050:	6878      	ldr	r0, [r7, #4]
 8011052:	f003 f839 	bl	80140c8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011056:	e167      	b.n	8011328 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011058:	4b32      	ldr	r3, [pc, #200]	; (8011124 <tcp_process+0x5a4>)
 801105a:	781b      	ldrb	r3, [r3, #0]
 801105c:	f003 0302 	and.w	r3, r3, #2
 8011060:	2b00      	cmp	r3, #0
 8011062:	f000 8161 	beq.w	8011328 <tcp_process+0x7a8>
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801106a:	1e5a      	subs	r2, r3, #1
 801106c:	4b30      	ldr	r3, [pc, #192]	; (8011130 <tcp_process+0x5b0>)
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	429a      	cmp	r2, r3
 8011072:	f040 8159 	bne.w	8011328 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8011076:	6878      	ldr	r0, [r7, #4]
 8011078:	f002 fe12 	bl	8013ca0 <tcp_rexmit>
      break;
 801107c:	e154      	b.n	8011328 <tcp_process+0x7a8>
 801107e:	e153      	b.n	8011328 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011080:	6878      	ldr	r0, [r7, #4]
 8011082:	f000 fa71 	bl	8011568 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011086:	4b32      	ldr	r3, [pc, #200]	; (8011150 <tcp_process+0x5d0>)
 8011088:	781b      	ldrb	r3, [r3, #0]
 801108a:	f003 0320 	and.w	r3, r3, #32
 801108e:	2b00      	cmp	r3, #0
 8011090:	f000 814c 	beq.w	801132c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	8b5b      	ldrh	r3, [r3, #26]
 8011098:	f043 0302 	orr.w	r3, r3, #2
 801109c:	b29a      	uxth	r2, r3
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	2207      	movs	r2, #7
 80110a6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80110a8:	e140      	b.n	801132c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80110aa:	6878      	ldr	r0, [r7, #4]
 80110ac:	f000 fa5c 	bl	8011568 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80110b0:	4b27      	ldr	r3, [pc, #156]	; (8011150 <tcp_process+0x5d0>)
 80110b2:	781b      	ldrb	r3, [r3, #0]
 80110b4:	f003 0320 	and.w	r3, r3, #32
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d071      	beq.n	80111a0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80110bc:	4b19      	ldr	r3, [pc, #100]	; (8011124 <tcp_process+0x5a4>)
 80110be:	781b      	ldrb	r3, [r3, #0]
 80110c0:	f003 0310 	and.w	r3, r3, #16
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d060      	beq.n	801118a <tcp_process+0x60a>
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80110cc:	4b16      	ldr	r3, [pc, #88]	; (8011128 <tcp_process+0x5a8>)
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	429a      	cmp	r2, r3
 80110d2:	d15a      	bne.n	801118a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d156      	bne.n	801118a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	8b5b      	ldrh	r3, [r3, #26]
 80110e0:	f043 0302 	orr.w	r3, r3, #2
 80110e4:	b29a      	uxth	r2, r3
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80110ea:	6878      	ldr	r0, [r7, #4]
 80110ec:	f7fe fdbe 	bl	800fc6c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80110f0:	4b18      	ldr	r3, [pc, #96]	; (8011154 <tcp_process+0x5d4>)
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	687a      	ldr	r2, [r7, #4]
 80110f6:	429a      	cmp	r2, r3
 80110f8:	d105      	bne.n	8011106 <tcp_process+0x586>
 80110fa:	4b16      	ldr	r3, [pc, #88]	; (8011154 <tcp_process+0x5d4>)
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	68db      	ldr	r3, [r3, #12]
 8011100:	4a14      	ldr	r2, [pc, #80]	; (8011154 <tcp_process+0x5d4>)
 8011102:	6013      	str	r3, [r2, #0]
 8011104:	e02e      	b.n	8011164 <tcp_process+0x5e4>
 8011106:	4b13      	ldr	r3, [pc, #76]	; (8011154 <tcp_process+0x5d4>)
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	617b      	str	r3, [r7, #20]
 801110c:	e027      	b.n	801115e <tcp_process+0x5de>
 801110e:	697b      	ldr	r3, [r7, #20]
 8011110:	68db      	ldr	r3, [r3, #12]
 8011112:	687a      	ldr	r2, [r7, #4]
 8011114:	429a      	cmp	r2, r3
 8011116:	d11f      	bne.n	8011158 <tcp_process+0x5d8>
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	68da      	ldr	r2, [r3, #12]
 801111c:	697b      	ldr	r3, [r7, #20]
 801111e:	60da      	str	r2, [r3, #12]
 8011120:	e020      	b.n	8011164 <tcp_process+0x5e4>
 8011122:	bf00      	nop
 8011124:	20004678 	.word	0x20004678
 8011128:	20004670 	.word	0x20004670
 801112c:	20004676 	.word	0x20004676
 8011130:	2000466c 	.word	0x2000466c
 8011134:	2000465c 	.word	0x2000465c
 8011138:	20007a00 	.word	0x20007a00
 801113c:	20007a04 	.word	0x20007a04
 8011140:	0801a370 	.word	0x0801a370
 8011144:	0801a610 	.word	0x0801a610
 8011148:	0801a3bc 	.word	0x0801a3bc
 801114c:	20004674 	.word	0x20004674
 8011150:	20004679 	.word	0x20004679
 8011154:	2000d240 	.word	0x2000d240
 8011158:	697b      	ldr	r3, [r7, #20]
 801115a:	68db      	ldr	r3, [r3, #12]
 801115c:	617b      	str	r3, [r7, #20]
 801115e:	697b      	ldr	r3, [r7, #20]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d1d4      	bne.n	801110e <tcp_process+0x58e>
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	2200      	movs	r2, #0
 8011168:	60da      	str	r2, [r3, #12]
 801116a:	4b77      	ldr	r3, [pc, #476]	; (8011348 <tcp_process+0x7c8>)
 801116c:	2201      	movs	r2, #1
 801116e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	220a      	movs	r2, #10
 8011174:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011176:	4b75      	ldr	r3, [pc, #468]	; (801134c <tcp_process+0x7cc>)
 8011178:	681a      	ldr	r2, [r3, #0]
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	60da      	str	r2, [r3, #12]
 801117e:	4a73      	ldr	r2, [pc, #460]	; (801134c <tcp_process+0x7cc>)
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	6013      	str	r3, [r2, #0]
 8011184:	f003 f962 	bl	801444c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011188:	e0d2      	b.n	8011330 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	8b5b      	ldrh	r3, [r3, #26]
 801118e:	f043 0302 	orr.w	r3, r3, #2
 8011192:	b29a      	uxth	r2, r3
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	2208      	movs	r2, #8
 801119c:	751a      	strb	r2, [r3, #20]
      break;
 801119e:	e0c7      	b.n	8011330 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80111a0:	4b6b      	ldr	r3, [pc, #428]	; (8011350 <tcp_process+0x7d0>)
 80111a2:	781b      	ldrb	r3, [r3, #0]
 80111a4:	f003 0310 	and.w	r3, r3, #16
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	f000 80c1 	beq.w	8011330 <tcp_process+0x7b0>
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80111b2:	4b68      	ldr	r3, [pc, #416]	; (8011354 <tcp_process+0x7d4>)
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	429a      	cmp	r2, r3
 80111b8:	f040 80ba 	bne.w	8011330 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	f040 80b5 	bne.w	8011330 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	2206      	movs	r2, #6
 80111ca:	751a      	strb	r2, [r3, #20]
      break;
 80111cc:	e0b0      	b.n	8011330 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80111ce:	6878      	ldr	r0, [r7, #4]
 80111d0:	f000 f9ca 	bl	8011568 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80111d4:	4b60      	ldr	r3, [pc, #384]	; (8011358 <tcp_process+0x7d8>)
 80111d6:	781b      	ldrb	r3, [r3, #0]
 80111d8:	f003 0320 	and.w	r3, r3, #32
 80111dc:	2b00      	cmp	r3, #0
 80111de:	f000 80a9 	beq.w	8011334 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	8b5b      	ldrh	r3, [r3, #26]
 80111e6:	f043 0302 	orr.w	r3, r3, #2
 80111ea:	b29a      	uxth	r2, r3
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80111f0:	6878      	ldr	r0, [r7, #4]
 80111f2:	f7fe fd3b 	bl	800fc6c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80111f6:	4b59      	ldr	r3, [pc, #356]	; (801135c <tcp_process+0x7dc>)
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	687a      	ldr	r2, [r7, #4]
 80111fc:	429a      	cmp	r2, r3
 80111fe:	d105      	bne.n	801120c <tcp_process+0x68c>
 8011200:	4b56      	ldr	r3, [pc, #344]	; (801135c <tcp_process+0x7dc>)
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	68db      	ldr	r3, [r3, #12]
 8011206:	4a55      	ldr	r2, [pc, #340]	; (801135c <tcp_process+0x7dc>)
 8011208:	6013      	str	r3, [r2, #0]
 801120a:	e013      	b.n	8011234 <tcp_process+0x6b4>
 801120c:	4b53      	ldr	r3, [pc, #332]	; (801135c <tcp_process+0x7dc>)
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	613b      	str	r3, [r7, #16]
 8011212:	e00c      	b.n	801122e <tcp_process+0x6ae>
 8011214:	693b      	ldr	r3, [r7, #16]
 8011216:	68db      	ldr	r3, [r3, #12]
 8011218:	687a      	ldr	r2, [r7, #4]
 801121a:	429a      	cmp	r2, r3
 801121c:	d104      	bne.n	8011228 <tcp_process+0x6a8>
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	68da      	ldr	r2, [r3, #12]
 8011222:	693b      	ldr	r3, [r7, #16]
 8011224:	60da      	str	r2, [r3, #12]
 8011226:	e005      	b.n	8011234 <tcp_process+0x6b4>
 8011228:	693b      	ldr	r3, [r7, #16]
 801122a:	68db      	ldr	r3, [r3, #12]
 801122c:	613b      	str	r3, [r7, #16]
 801122e:	693b      	ldr	r3, [r7, #16]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d1ef      	bne.n	8011214 <tcp_process+0x694>
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	2200      	movs	r2, #0
 8011238:	60da      	str	r2, [r3, #12]
 801123a:	4b43      	ldr	r3, [pc, #268]	; (8011348 <tcp_process+0x7c8>)
 801123c:	2201      	movs	r2, #1
 801123e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	220a      	movs	r2, #10
 8011244:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011246:	4b41      	ldr	r3, [pc, #260]	; (801134c <tcp_process+0x7cc>)
 8011248:	681a      	ldr	r2, [r3, #0]
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	60da      	str	r2, [r3, #12]
 801124e:	4a3f      	ldr	r2, [pc, #252]	; (801134c <tcp_process+0x7cc>)
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	6013      	str	r3, [r2, #0]
 8011254:	f003 f8fa 	bl	801444c <tcp_timer_needed>
      }
      break;
 8011258:	e06c      	b.n	8011334 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801125a:	6878      	ldr	r0, [r7, #4]
 801125c:	f000 f984 	bl	8011568 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011260:	4b3b      	ldr	r3, [pc, #236]	; (8011350 <tcp_process+0x7d0>)
 8011262:	781b      	ldrb	r3, [r3, #0]
 8011264:	f003 0310 	and.w	r3, r3, #16
 8011268:	2b00      	cmp	r3, #0
 801126a:	d065      	beq.n	8011338 <tcp_process+0x7b8>
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011270:	4b38      	ldr	r3, [pc, #224]	; (8011354 <tcp_process+0x7d4>)
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	429a      	cmp	r2, r3
 8011276:	d15f      	bne.n	8011338 <tcp_process+0x7b8>
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801127c:	2b00      	cmp	r3, #0
 801127e:	d15b      	bne.n	8011338 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011280:	6878      	ldr	r0, [r7, #4]
 8011282:	f7fe fcf3 	bl	800fc6c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011286:	4b35      	ldr	r3, [pc, #212]	; (801135c <tcp_process+0x7dc>)
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	687a      	ldr	r2, [r7, #4]
 801128c:	429a      	cmp	r2, r3
 801128e:	d105      	bne.n	801129c <tcp_process+0x71c>
 8011290:	4b32      	ldr	r3, [pc, #200]	; (801135c <tcp_process+0x7dc>)
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	68db      	ldr	r3, [r3, #12]
 8011296:	4a31      	ldr	r2, [pc, #196]	; (801135c <tcp_process+0x7dc>)
 8011298:	6013      	str	r3, [r2, #0]
 801129a:	e013      	b.n	80112c4 <tcp_process+0x744>
 801129c:	4b2f      	ldr	r3, [pc, #188]	; (801135c <tcp_process+0x7dc>)
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	60fb      	str	r3, [r7, #12]
 80112a2:	e00c      	b.n	80112be <tcp_process+0x73e>
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	68db      	ldr	r3, [r3, #12]
 80112a8:	687a      	ldr	r2, [r7, #4]
 80112aa:	429a      	cmp	r2, r3
 80112ac:	d104      	bne.n	80112b8 <tcp_process+0x738>
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	68da      	ldr	r2, [r3, #12]
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	60da      	str	r2, [r3, #12]
 80112b6:	e005      	b.n	80112c4 <tcp_process+0x744>
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	68db      	ldr	r3, [r3, #12]
 80112bc:	60fb      	str	r3, [r7, #12]
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d1ef      	bne.n	80112a4 <tcp_process+0x724>
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	2200      	movs	r2, #0
 80112c8:	60da      	str	r2, [r3, #12]
 80112ca:	4b1f      	ldr	r3, [pc, #124]	; (8011348 <tcp_process+0x7c8>)
 80112cc:	2201      	movs	r2, #1
 80112ce:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	220a      	movs	r2, #10
 80112d4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80112d6:	4b1d      	ldr	r3, [pc, #116]	; (801134c <tcp_process+0x7cc>)
 80112d8:	681a      	ldr	r2, [r3, #0]
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	60da      	str	r2, [r3, #12]
 80112de:	4a1b      	ldr	r2, [pc, #108]	; (801134c <tcp_process+0x7cc>)
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	6013      	str	r3, [r2, #0]
 80112e4:	f003 f8b2 	bl	801444c <tcp_timer_needed>
      }
      break;
 80112e8:	e026      	b.n	8011338 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80112ea:	6878      	ldr	r0, [r7, #4]
 80112ec:	f000 f93c 	bl	8011568 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80112f0:	4b17      	ldr	r3, [pc, #92]	; (8011350 <tcp_process+0x7d0>)
 80112f2:	781b      	ldrb	r3, [r3, #0]
 80112f4:	f003 0310 	and.w	r3, r3, #16
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d01f      	beq.n	801133c <tcp_process+0x7bc>
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011300:	4b14      	ldr	r3, [pc, #80]	; (8011354 <tcp_process+0x7d4>)
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	429a      	cmp	r2, r3
 8011306:	d119      	bne.n	801133c <tcp_process+0x7bc>
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801130c:	2b00      	cmp	r3, #0
 801130e:	d115      	bne.n	801133c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011310:	4b11      	ldr	r3, [pc, #68]	; (8011358 <tcp_process+0x7d8>)
 8011312:	781b      	ldrb	r3, [r3, #0]
 8011314:	f043 0310 	orr.w	r3, r3, #16
 8011318:	b2da      	uxtb	r2, r3
 801131a:	4b0f      	ldr	r3, [pc, #60]	; (8011358 <tcp_process+0x7d8>)
 801131c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801131e:	e00d      	b.n	801133c <tcp_process+0x7bc>
    default:
      break;
 8011320:	bf00      	nop
 8011322:	e00c      	b.n	801133e <tcp_process+0x7be>
      break;
 8011324:	bf00      	nop
 8011326:	e00a      	b.n	801133e <tcp_process+0x7be>
      break;
 8011328:	bf00      	nop
 801132a:	e008      	b.n	801133e <tcp_process+0x7be>
      break;
 801132c:	bf00      	nop
 801132e:	e006      	b.n	801133e <tcp_process+0x7be>
      break;
 8011330:	bf00      	nop
 8011332:	e004      	b.n	801133e <tcp_process+0x7be>
      break;
 8011334:	bf00      	nop
 8011336:	e002      	b.n	801133e <tcp_process+0x7be>
      break;
 8011338:	bf00      	nop
 801133a:	e000      	b.n	801133e <tcp_process+0x7be>
      break;
 801133c:	bf00      	nop
  }
  return ERR_OK;
 801133e:	2300      	movs	r3, #0
}
 8011340:	4618      	mov	r0, r3
 8011342:	3724      	adds	r7, #36	; 0x24
 8011344:	46bd      	mov	sp, r7
 8011346:	bd90      	pop	{r4, r7, pc}
 8011348:	2000d23c 	.word	0x2000d23c
 801134c:	2000d250 	.word	0x2000d250
 8011350:	20004678 	.word	0x20004678
 8011354:	20004670 	.word	0x20004670
 8011358:	20004679 	.word	0x20004679
 801135c:	2000d240 	.word	0x2000d240

08011360 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011360:	b590      	push	{r4, r7, lr}
 8011362:	b085      	sub	sp, #20
 8011364:	af00      	add	r7, sp, #0
 8011366:	6078      	str	r0, [r7, #4]
 8011368:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	2b00      	cmp	r3, #0
 801136e:	d106      	bne.n	801137e <tcp_oos_insert_segment+0x1e>
 8011370:	4b3b      	ldr	r3, [pc, #236]	; (8011460 <tcp_oos_insert_segment+0x100>)
 8011372:	f240 421f 	movw	r2, #1055	; 0x41f
 8011376:	493b      	ldr	r1, [pc, #236]	; (8011464 <tcp_oos_insert_segment+0x104>)
 8011378:	483b      	ldr	r0, [pc, #236]	; (8011468 <tcp_oos_insert_segment+0x108>)
 801137a:	f005 fee7 	bl	801714c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	68db      	ldr	r3, [r3, #12]
 8011382:	899b      	ldrh	r3, [r3, #12]
 8011384:	b29b      	uxth	r3, r3
 8011386:	4618      	mov	r0, r3
 8011388:	f7fb f96c 	bl	800c664 <lwip_htons>
 801138c:	4603      	mov	r3, r0
 801138e:	b2db      	uxtb	r3, r3
 8011390:	f003 0301 	and.w	r3, r3, #1
 8011394:	2b00      	cmp	r3, #0
 8011396:	d028      	beq.n	80113ea <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011398:	6838      	ldr	r0, [r7, #0]
 801139a:	f7fe f999 	bl	800f6d0 <tcp_segs_free>
    next = NULL;
 801139e:	2300      	movs	r3, #0
 80113a0:	603b      	str	r3, [r7, #0]
 80113a2:	e056      	b.n	8011452 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80113a4:	683b      	ldr	r3, [r7, #0]
 80113a6:	68db      	ldr	r3, [r3, #12]
 80113a8:	899b      	ldrh	r3, [r3, #12]
 80113aa:	b29b      	uxth	r3, r3
 80113ac:	4618      	mov	r0, r3
 80113ae:	f7fb f959 	bl	800c664 <lwip_htons>
 80113b2:	4603      	mov	r3, r0
 80113b4:	b2db      	uxtb	r3, r3
 80113b6:	f003 0301 	and.w	r3, r3, #1
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d00d      	beq.n	80113da <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	68db      	ldr	r3, [r3, #12]
 80113c2:	899b      	ldrh	r3, [r3, #12]
 80113c4:	b29c      	uxth	r4, r3
 80113c6:	2001      	movs	r0, #1
 80113c8:	f7fb f94c 	bl	800c664 <lwip_htons>
 80113cc:	4603      	mov	r3, r0
 80113ce:	461a      	mov	r2, r3
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	68db      	ldr	r3, [r3, #12]
 80113d4:	4322      	orrs	r2, r4
 80113d6:	b292      	uxth	r2, r2
 80113d8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80113da:	683b      	ldr	r3, [r7, #0]
 80113dc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80113de:	683b      	ldr	r3, [r7, #0]
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80113e4:	68f8      	ldr	r0, [r7, #12]
 80113e6:	f7fe f987 	bl	800f6f8 <tcp_seg_free>
    while (next &&
 80113ea:	683b      	ldr	r3, [r7, #0]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d00e      	beq.n	801140e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	891b      	ldrh	r3, [r3, #8]
 80113f4:	461a      	mov	r2, r3
 80113f6:	4b1d      	ldr	r3, [pc, #116]	; (801146c <tcp_oos_insert_segment+0x10c>)
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	441a      	add	r2, r3
 80113fc:	683b      	ldr	r3, [r7, #0]
 80113fe:	68db      	ldr	r3, [r3, #12]
 8011400:	685b      	ldr	r3, [r3, #4]
 8011402:	6839      	ldr	r1, [r7, #0]
 8011404:	8909      	ldrh	r1, [r1, #8]
 8011406:	440b      	add	r3, r1
 8011408:	1ad3      	subs	r3, r2, r3
    while (next &&
 801140a:	2b00      	cmp	r3, #0
 801140c:	daca      	bge.n	80113a4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801140e:	683b      	ldr	r3, [r7, #0]
 8011410:	2b00      	cmp	r3, #0
 8011412:	d01e      	beq.n	8011452 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	891b      	ldrh	r3, [r3, #8]
 8011418:	461a      	mov	r2, r3
 801141a:	4b14      	ldr	r3, [pc, #80]	; (801146c <tcp_oos_insert_segment+0x10c>)
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	441a      	add	r2, r3
 8011420:	683b      	ldr	r3, [r7, #0]
 8011422:	68db      	ldr	r3, [r3, #12]
 8011424:	685b      	ldr	r3, [r3, #4]
 8011426:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011428:	2b00      	cmp	r3, #0
 801142a:	dd12      	ble.n	8011452 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801142c:	683b      	ldr	r3, [r7, #0]
 801142e:	68db      	ldr	r3, [r3, #12]
 8011430:	685b      	ldr	r3, [r3, #4]
 8011432:	b29a      	uxth	r2, r3
 8011434:	4b0d      	ldr	r3, [pc, #52]	; (801146c <tcp_oos_insert_segment+0x10c>)
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	b29b      	uxth	r3, r3
 801143a:	1ad3      	subs	r3, r2, r3
 801143c:	b29a      	uxth	r2, r3
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	685a      	ldr	r2, [r3, #4]
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	891b      	ldrh	r3, [r3, #8]
 801144a:	4619      	mov	r1, r3
 801144c:	4610      	mov	r0, r2
 801144e:	f7fc fb25 	bl	800da9c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	683a      	ldr	r2, [r7, #0]
 8011456:	601a      	str	r2, [r3, #0]
}
 8011458:	bf00      	nop
 801145a:	3714      	adds	r7, #20
 801145c:	46bd      	mov	sp, r7
 801145e:	bd90      	pop	{r4, r7, pc}
 8011460:	0801a370 	.word	0x0801a370
 8011464:	0801a630 	.word	0x0801a630
 8011468:	0801a3bc 	.word	0x0801a3bc
 801146c:	2000466c 	.word	0x2000466c

08011470 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011470:	b5b0      	push	{r4, r5, r7, lr}
 8011472:	b086      	sub	sp, #24
 8011474:	af00      	add	r7, sp, #0
 8011476:	60f8      	str	r0, [r7, #12]
 8011478:	60b9      	str	r1, [r7, #8]
 801147a:	607a      	str	r2, [r7, #4]
 801147c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801147e:	e03e      	b.n	80114fe <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011480:	68bb      	ldr	r3, [r7, #8]
 8011482:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011484:	68bb      	ldr	r3, [r7, #8]
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801148a:	697b      	ldr	r3, [r7, #20]
 801148c:	685b      	ldr	r3, [r3, #4]
 801148e:	4618      	mov	r0, r3
 8011490:	f7fc fd4a 	bl	800df28 <pbuf_clen>
 8011494:	4603      	mov	r3, r0
 8011496:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801149e:	8a7a      	ldrh	r2, [r7, #18]
 80114a0:	429a      	cmp	r2, r3
 80114a2:	d906      	bls.n	80114b2 <tcp_free_acked_segments+0x42>
 80114a4:	4b2a      	ldr	r3, [pc, #168]	; (8011550 <tcp_free_acked_segments+0xe0>)
 80114a6:	f240 4257 	movw	r2, #1111	; 0x457
 80114aa:	492a      	ldr	r1, [pc, #168]	; (8011554 <tcp_free_acked_segments+0xe4>)
 80114ac:	482a      	ldr	r0, [pc, #168]	; (8011558 <tcp_free_acked_segments+0xe8>)
 80114ae:	f005 fe4d 	bl	801714c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80114b8:	8a7b      	ldrh	r3, [r7, #18]
 80114ba:	1ad3      	subs	r3, r2, r3
 80114bc:	b29a      	uxth	r2, r3
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80114c4:	697b      	ldr	r3, [r7, #20]
 80114c6:	891a      	ldrh	r2, [r3, #8]
 80114c8:	4b24      	ldr	r3, [pc, #144]	; (801155c <tcp_free_acked_segments+0xec>)
 80114ca:	881b      	ldrh	r3, [r3, #0]
 80114cc:	4413      	add	r3, r2
 80114ce:	b29a      	uxth	r2, r3
 80114d0:	4b22      	ldr	r3, [pc, #136]	; (801155c <tcp_free_acked_segments+0xec>)
 80114d2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80114d4:	6978      	ldr	r0, [r7, #20]
 80114d6:	f7fe f90f 	bl	800f6f8 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d00c      	beq.n	80114fe <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80114e4:	68bb      	ldr	r3, [r7, #8]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d109      	bne.n	80114fe <tcp_free_acked_segments+0x8e>
 80114ea:	683b      	ldr	r3, [r7, #0]
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d106      	bne.n	80114fe <tcp_free_acked_segments+0x8e>
 80114f0:	4b17      	ldr	r3, [pc, #92]	; (8011550 <tcp_free_acked_segments+0xe0>)
 80114f2:	f240 4262 	movw	r2, #1122	; 0x462
 80114f6:	491a      	ldr	r1, [pc, #104]	; (8011560 <tcp_free_acked_segments+0xf0>)
 80114f8:	4817      	ldr	r0, [pc, #92]	; (8011558 <tcp_free_acked_segments+0xe8>)
 80114fa:	f005 fe27 	bl	801714c <iprintf>
  while (seg_list != NULL &&
 80114fe:	68bb      	ldr	r3, [r7, #8]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d020      	beq.n	8011546 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011504:	68bb      	ldr	r3, [r7, #8]
 8011506:	68db      	ldr	r3, [r3, #12]
 8011508:	685b      	ldr	r3, [r3, #4]
 801150a:	4618      	mov	r0, r3
 801150c:	f7fb f8bf 	bl	800c68e <lwip_htonl>
 8011510:	4604      	mov	r4, r0
 8011512:	68bb      	ldr	r3, [r7, #8]
 8011514:	891b      	ldrh	r3, [r3, #8]
 8011516:	461d      	mov	r5, r3
 8011518:	68bb      	ldr	r3, [r7, #8]
 801151a:	68db      	ldr	r3, [r3, #12]
 801151c:	899b      	ldrh	r3, [r3, #12]
 801151e:	b29b      	uxth	r3, r3
 8011520:	4618      	mov	r0, r3
 8011522:	f7fb f89f 	bl	800c664 <lwip_htons>
 8011526:	4603      	mov	r3, r0
 8011528:	b2db      	uxtb	r3, r3
 801152a:	f003 0303 	and.w	r3, r3, #3
 801152e:	2b00      	cmp	r3, #0
 8011530:	d001      	beq.n	8011536 <tcp_free_acked_segments+0xc6>
 8011532:	2301      	movs	r3, #1
 8011534:	e000      	b.n	8011538 <tcp_free_acked_segments+0xc8>
 8011536:	2300      	movs	r3, #0
 8011538:	442b      	add	r3, r5
 801153a:	18e2      	adds	r2, r4, r3
 801153c:	4b09      	ldr	r3, [pc, #36]	; (8011564 <tcp_free_acked_segments+0xf4>)
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8011542:	2b00      	cmp	r3, #0
 8011544:	dd9c      	ble.n	8011480 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8011546:	68bb      	ldr	r3, [r7, #8]
}
 8011548:	4618      	mov	r0, r3
 801154a:	3718      	adds	r7, #24
 801154c:	46bd      	mov	sp, r7
 801154e:	bdb0      	pop	{r4, r5, r7, pc}
 8011550:	0801a370 	.word	0x0801a370
 8011554:	0801a658 	.word	0x0801a658
 8011558:	0801a3bc 	.word	0x0801a3bc
 801155c:	20004674 	.word	0x20004674
 8011560:	0801a680 	.word	0x0801a680
 8011564:	20004670 	.word	0x20004670

08011568 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011568:	b5b0      	push	{r4, r5, r7, lr}
 801156a:	b094      	sub	sp, #80	; 0x50
 801156c:	af00      	add	r7, sp, #0
 801156e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011570:	2300      	movs	r3, #0
 8011572:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	2b00      	cmp	r3, #0
 8011578:	d106      	bne.n	8011588 <tcp_receive+0x20>
 801157a:	4ba6      	ldr	r3, [pc, #664]	; (8011814 <tcp_receive+0x2ac>)
 801157c:	f240 427b 	movw	r2, #1147	; 0x47b
 8011580:	49a5      	ldr	r1, [pc, #660]	; (8011818 <tcp_receive+0x2b0>)
 8011582:	48a6      	ldr	r0, [pc, #664]	; (801181c <tcp_receive+0x2b4>)
 8011584:	f005 fde2 	bl	801714c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	7d1b      	ldrb	r3, [r3, #20]
 801158c:	2b03      	cmp	r3, #3
 801158e:	d806      	bhi.n	801159e <tcp_receive+0x36>
 8011590:	4ba0      	ldr	r3, [pc, #640]	; (8011814 <tcp_receive+0x2ac>)
 8011592:	f240 427c 	movw	r2, #1148	; 0x47c
 8011596:	49a2      	ldr	r1, [pc, #648]	; (8011820 <tcp_receive+0x2b8>)
 8011598:	48a0      	ldr	r0, [pc, #640]	; (801181c <tcp_receive+0x2b4>)
 801159a:	f005 fdd7 	bl	801714c <iprintf>

  if (flags & TCP_ACK) {
 801159e:	4ba1      	ldr	r3, [pc, #644]	; (8011824 <tcp_receive+0x2bc>)
 80115a0:	781b      	ldrb	r3, [r3, #0]
 80115a2:	f003 0310 	and.w	r3, r3, #16
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	f000 8263 	beq.w	8011a72 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80115b2:	461a      	mov	r2, r3
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80115b8:	4413      	add	r3, r2
 80115ba:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80115c0:	4b99      	ldr	r3, [pc, #612]	; (8011828 <tcp_receive+0x2c0>)
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	1ad3      	subs	r3, r2, r3
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	db1b      	blt.n	8011602 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80115ce:	4b96      	ldr	r3, [pc, #600]	; (8011828 <tcp_receive+0x2c0>)
 80115d0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80115d2:	429a      	cmp	r2, r3
 80115d4:	d106      	bne.n	80115e4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80115da:	4b94      	ldr	r3, [pc, #592]	; (801182c <tcp_receive+0x2c4>)
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	1ad3      	subs	r3, r2, r3
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	db0e      	blt.n	8011602 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80115e8:	4b90      	ldr	r3, [pc, #576]	; (801182c <tcp_receive+0x2c4>)
 80115ea:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80115ec:	429a      	cmp	r2, r3
 80115ee:	d125      	bne.n	801163c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80115f0:	4b8f      	ldr	r3, [pc, #572]	; (8011830 <tcp_receive+0x2c8>)
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	89db      	ldrh	r3, [r3, #14]
 80115f6:	b29a      	uxth	r2, r3
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80115fe:	429a      	cmp	r2, r3
 8011600:	d91c      	bls.n	801163c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8011602:	4b8b      	ldr	r3, [pc, #556]	; (8011830 <tcp_receive+0x2c8>)
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	89db      	ldrh	r3, [r3, #14]
 8011608:	b29a      	uxth	r2, r3
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801161c:	429a      	cmp	r2, r3
 801161e:	d205      	bcs.n	801162c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801162c:	4b7e      	ldr	r3, [pc, #504]	; (8011828 <tcp_receive+0x2c0>)
 801162e:	681a      	ldr	r2, [r3, #0]
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8011634:	4b7d      	ldr	r3, [pc, #500]	; (801182c <tcp_receive+0x2c4>)
 8011636:	681a      	ldr	r2, [r3, #0]
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801163c:	4b7b      	ldr	r3, [pc, #492]	; (801182c <tcp_receive+0x2c4>)
 801163e:	681a      	ldr	r2, [r3, #0]
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011644:	1ad3      	subs	r3, r2, r3
 8011646:	2b00      	cmp	r3, #0
 8011648:	dc58      	bgt.n	80116fc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801164a:	4b7a      	ldr	r3, [pc, #488]	; (8011834 <tcp_receive+0x2cc>)
 801164c:	881b      	ldrh	r3, [r3, #0]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d14b      	bne.n	80116ea <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011656:	687a      	ldr	r2, [r7, #4]
 8011658:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801165c:	4413      	add	r3, r2
 801165e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011660:	429a      	cmp	r2, r3
 8011662:	d142      	bne.n	80116ea <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801166a:	2b00      	cmp	r3, #0
 801166c:	db3d      	blt.n	80116ea <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011672:	4b6e      	ldr	r3, [pc, #440]	; (801182c <tcp_receive+0x2c4>)
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	429a      	cmp	r2, r3
 8011678:	d137      	bne.n	80116ea <tcp_receive+0x182>
              found_dupack = 1;
 801167a:	2301      	movs	r3, #1
 801167c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011684:	2bff      	cmp	r3, #255	; 0xff
 8011686:	d007      	beq.n	8011698 <tcp_receive+0x130>
                ++pcb->dupacks;
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801168e:	3301      	adds	r3, #1
 8011690:	b2da      	uxtb	r2, r3
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801169e:	2b03      	cmp	r3, #3
 80116a0:	d91b      	bls.n	80116da <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80116ac:	4413      	add	r3, r2
 80116ae:	b29a      	uxth	r2, r3
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80116b6:	429a      	cmp	r2, r3
 80116b8:	d30a      	bcc.n	80116d0 <tcp_receive+0x168>
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80116c4:	4413      	add	r3, r2
 80116c6:	b29a      	uxth	r2, r3
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80116ce:	e004      	b.n	80116da <tcp_receive+0x172>
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80116d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80116e0:	2b02      	cmp	r3, #2
 80116e2:	d902      	bls.n	80116ea <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80116e4:	6878      	ldr	r0, [r7, #4]
 80116e6:	f002 fb47 	bl	8013d78 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80116ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	f040 8160 	bne.w	80119b2 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	2200      	movs	r2, #0
 80116f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80116fa:	e15a      	b.n	80119b2 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80116fc:	4b4b      	ldr	r3, [pc, #300]	; (801182c <tcp_receive+0x2c4>)
 80116fe:	681a      	ldr	r2, [r3, #0]
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011704:	1ad3      	subs	r3, r2, r3
 8011706:	3b01      	subs	r3, #1
 8011708:	2b00      	cmp	r3, #0
 801170a:	f2c0 814d 	blt.w	80119a8 <tcp_receive+0x440>
 801170e:	4b47      	ldr	r3, [pc, #284]	; (801182c <tcp_receive+0x2c4>)
 8011710:	681a      	ldr	r2, [r3, #0]
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011716:	1ad3      	subs	r3, r2, r3
 8011718:	2b00      	cmp	r3, #0
 801171a:	f300 8145 	bgt.w	80119a8 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	8b5b      	ldrh	r3, [r3, #26]
 8011722:	f003 0304 	and.w	r3, r3, #4
 8011726:	2b00      	cmp	r3, #0
 8011728:	d010      	beq.n	801174c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	8b5b      	ldrh	r3, [r3, #26]
 801172e:	f023 0304 	bic.w	r3, r3, #4
 8011732:	b29a      	uxth	r2, r3
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	2200      	movs	r2, #0
 8011748:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	2200      	movs	r2, #0
 8011750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801175a:	10db      	asrs	r3, r3, #3
 801175c:	b21b      	sxth	r3, r3
 801175e:	b29a      	uxth	r2, r3
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011766:	b29b      	uxth	r3, r3
 8011768:	4413      	add	r3, r2
 801176a:	b29b      	uxth	r3, r3
 801176c:	b21a      	sxth	r2, r3
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011774:	4b2d      	ldr	r3, [pc, #180]	; (801182c <tcp_receive+0x2c4>)
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	b29a      	uxth	r2, r3
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801177e:	b29b      	uxth	r3, r3
 8011780:	1ad3      	subs	r3, r2, r3
 8011782:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	2200      	movs	r2, #0
 8011788:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801178c:	4b27      	ldr	r3, [pc, #156]	; (801182c <tcp_receive+0x2c4>)
 801178e:	681a      	ldr	r2, [r3, #0]
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	7d1b      	ldrb	r3, [r3, #20]
 8011798:	2b03      	cmp	r3, #3
 801179a:	f240 8096 	bls.w	80118ca <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80117aa:	429a      	cmp	r2, r3
 80117ac:	d244      	bcs.n	8011838 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	8b5b      	ldrh	r3, [r3, #26]
 80117b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d001      	beq.n	80117be <tcp_receive+0x256>
 80117ba:	2301      	movs	r3, #1
 80117bc:	e000      	b.n	80117c0 <tcp_receive+0x258>
 80117be:	2302      	movs	r3, #2
 80117c0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80117c4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80117c8:	b29a      	uxth	r2, r3
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80117ce:	fb12 f303 	smulbb	r3, r2, r3
 80117d2:	b29b      	uxth	r3, r3
 80117d4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80117d6:	4293      	cmp	r3, r2
 80117d8:	bf28      	it	cs
 80117da:	4613      	movcs	r3, r2
 80117dc:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80117e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80117e6:	4413      	add	r3, r2
 80117e8:	b29a      	uxth	r2, r3
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80117f0:	429a      	cmp	r2, r3
 80117f2:	d309      	bcc.n	8011808 <tcp_receive+0x2a0>
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80117fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80117fc:	4413      	add	r3, r2
 80117fe:	b29a      	uxth	r2, r3
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011806:	e060      	b.n	80118ca <tcp_receive+0x362>
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801180e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011812:	e05a      	b.n	80118ca <tcp_receive+0x362>
 8011814:	0801a370 	.word	0x0801a370
 8011818:	0801a6a0 	.word	0x0801a6a0
 801181c:	0801a3bc 	.word	0x0801a3bc
 8011820:	0801a6bc 	.word	0x0801a6bc
 8011824:	20004678 	.word	0x20004678
 8011828:	2000466c 	.word	0x2000466c
 801182c:	20004670 	.word	0x20004670
 8011830:	2000465c 	.word	0x2000465c
 8011834:	20004676 	.word	0x20004676
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801183e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011840:	4413      	add	r3, r2
 8011842:	b29a      	uxth	r2, r3
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801184a:	429a      	cmp	r2, r3
 801184c:	d309      	bcc.n	8011862 <tcp_receive+0x2fa>
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011854:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011856:	4413      	add	r3, r2
 8011858:	b29a      	uxth	r2, r3
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011860:	e004      	b.n	801186c <tcp_receive+0x304>
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011868:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011878:	429a      	cmp	r2, r3
 801187a:	d326      	bcc.n	80118ca <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011888:	1ad3      	subs	r3, r2, r3
 801188a:	b29a      	uxth	r2, r3
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801189c:	4413      	add	r3, r2
 801189e:	b29a      	uxth	r2, r3
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80118a6:	429a      	cmp	r2, r3
 80118a8:	d30a      	bcc.n	80118c0 <tcp_receive+0x358>
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118b4:	4413      	add	r3, r2
 80118b6:	b29a      	uxth	r2, r3
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80118be:	e004      	b.n	80118ca <tcp_receive+0x362>
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80118c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118d2:	4a98      	ldr	r2, [pc, #608]	; (8011b34 <tcp_receive+0x5cc>)
 80118d4:	6878      	ldr	r0, [r7, #4]
 80118d6:	f7ff fdcb 	bl	8011470 <tcp_free_acked_segments>
 80118da:	4602      	mov	r2, r0
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118e8:	4a93      	ldr	r2, [pc, #588]	; (8011b38 <tcp_receive+0x5d0>)
 80118ea:	6878      	ldr	r0, [r7, #4]
 80118ec:	f7ff fdc0 	bl	8011470 <tcp_free_acked_segments>
 80118f0:	4602      	mov	r2, r0
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d104      	bne.n	8011908 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011904:	861a      	strh	r2, [r3, #48]	; 0x30
 8011906:	e002      	b.n	801190e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	2200      	movs	r2, #0
 801190c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	2200      	movs	r2, #0
 8011912:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011918:	2b00      	cmp	r3, #0
 801191a:	d103      	bne.n	8011924 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	2200      	movs	r2, #0
 8011920:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801192a:	4b84      	ldr	r3, [pc, #528]	; (8011b3c <tcp_receive+0x5d4>)
 801192c:	881b      	ldrh	r3, [r3, #0]
 801192e:	4413      	add	r3, r2
 8011930:	b29a      	uxth	r2, r3
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	8b5b      	ldrh	r3, [r3, #26]
 801193c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011940:	2b00      	cmp	r3, #0
 8011942:	d035      	beq.n	80119b0 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011948:	2b00      	cmp	r3, #0
 801194a:	d118      	bne.n	801197e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011950:	2b00      	cmp	r3, #0
 8011952:	d00c      	beq.n	801196e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801195c:	68db      	ldr	r3, [r3, #12]
 801195e:	685b      	ldr	r3, [r3, #4]
 8011960:	4618      	mov	r0, r3
 8011962:	f7fa fe94 	bl	800c68e <lwip_htonl>
 8011966:	4603      	mov	r3, r0
 8011968:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801196a:	2b00      	cmp	r3, #0
 801196c:	dc20      	bgt.n	80119b0 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	8b5b      	ldrh	r3, [r3, #26]
 8011972:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011976:	b29a      	uxth	r2, r3
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801197c:	e018      	b.n	80119b0 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011986:	68db      	ldr	r3, [r3, #12]
 8011988:	685b      	ldr	r3, [r3, #4]
 801198a:	4618      	mov	r0, r3
 801198c:	f7fa fe7f 	bl	800c68e <lwip_htonl>
 8011990:	4603      	mov	r3, r0
 8011992:	1ae3      	subs	r3, r4, r3
 8011994:	2b00      	cmp	r3, #0
 8011996:	dc0b      	bgt.n	80119b0 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	8b5b      	ldrh	r3, [r3, #26]
 801199c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80119a0:	b29a      	uxth	r2, r3
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80119a6:	e003      	b.n	80119b0 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80119a8:	6878      	ldr	r0, [r7, #4]
 80119aa:	f002 fbdf 	bl	801416c <tcp_send_empty_ack>
 80119ae:	e000      	b.n	80119b2 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80119b0:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d05b      	beq.n	8011a72 <tcp_receive+0x50a>
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80119be:	4b60      	ldr	r3, [pc, #384]	; (8011b40 <tcp_receive+0x5d8>)
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	1ad3      	subs	r3, r2, r3
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	da54      	bge.n	8011a72 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80119c8:	4b5e      	ldr	r3, [pc, #376]	; (8011b44 <tcp_receive+0x5dc>)
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	b29a      	uxth	r2, r3
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119d2:	b29b      	uxth	r3, r3
 80119d4:	1ad3      	subs	r3, r2, r3
 80119d6:	b29b      	uxth	r3, r3
 80119d8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80119dc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80119e6:	10db      	asrs	r3, r3, #3
 80119e8:	b21b      	sxth	r3, r3
 80119ea:	b29b      	uxth	r3, r3
 80119ec:	1ad3      	subs	r3, r2, r3
 80119ee:	b29b      	uxth	r3, r3
 80119f0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80119fa:	b29a      	uxth	r2, r3
 80119fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011a00:	4413      	add	r3, r2
 8011a02:	b29b      	uxth	r3, r3
 8011a04:	b21a      	sxth	r2, r3
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8011a0a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	da05      	bge.n	8011a1e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8011a12:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011a16:	425b      	negs	r3, r3
 8011a18:	b29b      	uxth	r3, r3
 8011a1a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011a1e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011a28:	109b      	asrs	r3, r3, #2
 8011a2a:	b21b      	sxth	r3, r3
 8011a2c:	b29b      	uxth	r3, r3
 8011a2e:	1ad3      	subs	r3, r2, r3
 8011a30:	b29b      	uxth	r3, r3
 8011a32:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011a3c:	b29a      	uxth	r2, r3
 8011a3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011a42:	4413      	add	r3, r2
 8011a44:	b29b      	uxth	r3, r3
 8011a46:	b21a      	sxth	r2, r3
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011a52:	10db      	asrs	r3, r3, #3
 8011a54:	b21b      	sxth	r3, r3
 8011a56:	b29a      	uxth	r2, r3
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011a5e:	b29b      	uxth	r3, r3
 8011a60:	4413      	add	r3, r2
 8011a62:	b29b      	uxth	r3, r3
 8011a64:	b21a      	sxth	r2, r3
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	2200      	movs	r2, #0
 8011a70:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011a72:	4b35      	ldr	r3, [pc, #212]	; (8011b48 <tcp_receive+0x5e0>)
 8011a74:	881b      	ldrh	r3, [r3, #0]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	f000 84e1 	beq.w	801243e <tcp_receive+0xed6>
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	7d1b      	ldrb	r3, [r3, #20]
 8011a80:	2b06      	cmp	r3, #6
 8011a82:	f200 84dc 	bhi.w	801243e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011a8a:	4b30      	ldr	r3, [pc, #192]	; (8011b4c <tcp_receive+0x5e4>)
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	1ad3      	subs	r3, r2, r3
 8011a90:	3b01      	subs	r3, #1
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	f2c0 808e 	blt.w	8011bb4 <tcp_receive+0x64c>
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011a9c:	4b2a      	ldr	r3, [pc, #168]	; (8011b48 <tcp_receive+0x5e0>)
 8011a9e:	881b      	ldrh	r3, [r3, #0]
 8011aa0:	4619      	mov	r1, r3
 8011aa2:	4b2a      	ldr	r3, [pc, #168]	; (8011b4c <tcp_receive+0x5e4>)
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	440b      	add	r3, r1
 8011aa8:	1ad3      	subs	r3, r2, r3
 8011aaa:	3301      	adds	r3, #1
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	f300 8081 	bgt.w	8011bb4 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011ab2:	4b27      	ldr	r3, [pc, #156]	; (8011b50 <tcp_receive+0x5e8>)
 8011ab4:	685b      	ldr	r3, [r3, #4]
 8011ab6:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011abc:	4b23      	ldr	r3, [pc, #140]	; (8011b4c <tcp_receive+0x5e4>)
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	1ad3      	subs	r3, r2, r3
 8011ac2:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011ac4:	4b22      	ldr	r3, [pc, #136]	; (8011b50 <tcp_receive+0x5e8>)
 8011ac6:	685b      	ldr	r3, [r3, #4]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d106      	bne.n	8011ada <tcp_receive+0x572>
 8011acc:	4b21      	ldr	r3, [pc, #132]	; (8011b54 <tcp_receive+0x5ec>)
 8011ace:	f240 5294 	movw	r2, #1428	; 0x594
 8011ad2:	4921      	ldr	r1, [pc, #132]	; (8011b58 <tcp_receive+0x5f0>)
 8011ad4:	4821      	ldr	r0, [pc, #132]	; (8011b5c <tcp_receive+0x5f4>)
 8011ad6:	f005 fb39 	bl	801714c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011adc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011ae0:	4293      	cmp	r3, r2
 8011ae2:	d906      	bls.n	8011af2 <tcp_receive+0x58a>
 8011ae4:	4b1b      	ldr	r3, [pc, #108]	; (8011b54 <tcp_receive+0x5ec>)
 8011ae6:	f240 5295 	movw	r2, #1429	; 0x595
 8011aea:	491d      	ldr	r1, [pc, #116]	; (8011b60 <tcp_receive+0x5f8>)
 8011aec:	481b      	ldr	r0, [pc, #108]	; (8011b5c <tcp_receive+0x5f4>)
 8011aee:	f005 fb2d 	bl	801714c <iprintf>
      off = (u16_t)off32;
 8011af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011af4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011af8:	4b15      	ldr	r3, [pc, #84]	; (8011b50 <tcp_receive+0x5e8>)
 8011afa:	685b      	ldr	r3, [r3, #4]
 8011afc:	891b      	ldrh	r3, [r3, #8]
 8011afe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011b02:	429a      	cmp	r2, r3
 8011b04:	d906      	bls.n	8011b14 <tcp_receive+0x5ac>
 8011b06:	4b13      	ldr	r3, [pc, #76]	; (8011b54 <tcp_receive+0x5ec>)
 8011b08:	f240 5297 	movw	r2, #1431	; 0x597
 8011b0c:	4915      	ldr	r1, [pc, #84]	; (8011b64 <tcp_receive+0x5fc>)
 8011b0e:	4813      	ldr	r0, [pc, #76]	; (8011b5c <tcp_receive+0x5f4>)
 8011b10:	f005 fb1c 	bl	801714c <iprintf>
      inseg.len -= off;
 8011b14:	4b0e      	ldr	r3, [pc, #56]	; (8011b50 <tcp_receive+0x5e8>)
 8011b16:	891a      	ldrh	r2, [r3, #8]
 8011b18:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011b1c:	1ad3      	subs	r3, r2, r3
 8011b1e:	b29a      	uxth	r2, r3
 8011b20:	4b0b      	ldr	r3, [pc, #44]	; (8011b50 <tcp_receive+0x5e8>)
 8011b22:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011b24:	4b0a      	ldr	r3, [pc, #40]	; (8011b50 <tcp_receive+0x5e8>)
 8011b26:	685b      	ldr	r3, [r3, #4]
 8011b28:	891a      	ldrh	r2, [r3, #8]
 8011b2a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011b2e:	1ad3      	subs	r3, r2, r3
 8011b30:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011b32:	e029      	b.n	8011b88 <tcp_receive+0x620>
 8011b34:	0801a6d8 	.word	0x0801a6d8
 8011b38:	0801a6e0 	.word	0x0801a6e0
 8011b3c:	20004674 	.word	0x20004674
 8011b40:	20004670 	.word	0x20004670
 8011b44:	2000d244 	.word	0x2000d244
 8011b48:	20004676 	.word	0x20004676
 8011b4c:	2000466c 	.word	0x2000466c
 8011b50:	2000464c 	.word	0x2000464c
 8011b54:	0801a370 	.word	0x0801a370
 8011b58:	0801a6e8 	.word	0x0801a6e8
 8011b5c:	0801a3bc 	.word	0x0801a3bc
 8011b60:	0801a6f8 	.word	0x0801a6f8
 8011b64:	0801a708 	.word	0x0801a708
        off -= p->len;
 8011b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b6a:	895b      	ldrh	r3, [r3, #10]
 8011b6c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011b70:	1ad3      	subs	r3, r2, r3
 8011b72:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8011b76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b78:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011b7a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b7e:	2200      	movs	r2, #0
 8011b80:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011b82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8011b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b8a:	895b      	ldrh	r3, [r3, #10]
 8011b8c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011b90:	429a      	cmp	r2, r3
 8011b92:	d8e9      	bhi.n	8011b68 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011b94:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011b98:	4619      	mov	r1, r3
 8011b9a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011b9c:	f7fc f87e 	bl	800dc9c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ba4:	4a91      	ldr	r2, [pc, #580]	; (8011dec <tcp_receive+0x884>)
 8011ba6:	6013      	str	r3, [r2, #0]
 8011ba8:	4b91      	ldr	r3, [pc, #580]	; (8011df0 <tcp_receive+0x888>)
 8011baa:	68db      	ldr	r3, [r3, #12]
 8011bac:	4a8f      	ldr	r2, [pc, #572]	; (8011dec <tcp_receive+0x884>)
 8011bae:	6812      	ldr	r2, [r2, #0]
 8011bb0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011bb2:	e00d      	b.n	8011bd0 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011bb4:	4b8d      	ldr	r3, [pc, #564]	; (8011dec <tcp_receive+0x884>)
 8011bb6:	681a      	ldr	r2, [r3, #0]
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bbc:	1ad3      	subs	r3, r2, r3
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	da06      	bge.n	8011bd0 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	8b5b      	ldrh	r3, [r3, #26]
 8011bc6:	f043 0302 	orr.w	r3, r3, #2
 8011bca:	b29a      	uxth	r2, r3
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011bd0:	4b86      	ldr	r3, [pc, #536]	; (8011dec <tcp_receive+0x884>)
 8011bd2:	681a      	ldr	r2, [r3, #0]
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bd8:	1ad3      	subs	r3, r2, r3
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	f2c0 842a 	blt.w	8012434 <tcp_receive+0xecc>
 8011be0:	4b82      	ldr	r3, [pc, #520]	; (8011dec <tcp_receive+0x884>)
 8011be2:	681a      	ldr	r2, [r3, #0]
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011be8:	6879      	ldr	r1, [r7, #4]
 8011bea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011bec:	440b      	add	r3, r1
 8011bee:	1ad3      	subs	r3, r2, r3
 8011bf0:	3301      	adds	r3, #1
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	f300 841e 	bgt.w	8012434 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011bfc:	4b7b      	ldr	r3, [pc, #492]	; (8011dec <tcp_receive+0x884>)
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	429a      	cmp	r2, r3
 8011c02:	f040 829a 	bne.w	801213a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011c06:	4b7a      	ldr	r3, [pc, #488]	; (8011df0 <tcp_receive+0x888>)
 8011c08:	891c      	ldrh	r4, [r3, #8]
 8011c0a:	4b79      	ldr	r3, [pc, #484]	; (8011df0 <tcp_receive+0x888>)
 8011c0c:	68db      	ldr	r3, [r3, #12]
 8011c0e:	899b      	ldrh	r3, [r3, #12]
 8011c10:	b29b      	uxth	r3, r3
 8011c12:	4618      	mov	r0, r3
 8011c14:	f7fa fd26 	bl	800c664 <lwip_htons>
 8011c18:	4603      	mov	r3, r0
 8011c1a:	b2db      	uxtb	r3, r3
 8011c1c:	f003 0303 	and.w	r3, r3, #3
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d001      	beq.n	8011c28 <tcp_receive+0x6c0>
 8011c24:	2301      	movs	r3, #1
 8011c26:	e000      	b.n	8011c2a <tcp_receive+0x6c2>
 8011c28:	2300      	movs	r3, #0
 8011c2a:	4423      	add	r3, r4
 8011c2c:	b29a      	uxth	r2, r3
 8011c2e:	4b71      	ldr	r3, [pc, #452]	; (8011df4 <tcp_receive+0x88c>)
 8011c30:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011c36:	4b6f      	ldr	r3, [pc, #444]	; (8011df4 <tcp_receive+0x88c>)
 8011c38:	881b      	ldrh	r3, [r3, #0]
 8011c3a:	429a      	cmp	r2, r3
 8011c3c:	d275      	bcs.n	8011d2a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011c3e:	4b6c      	ldr	r3, [pc, #432]	; (8011df0 <tcp_receive+0x888>)
 8011c40:	68db      	ldr	r3, [r3, #12]
 8011c42:	899b      	ldrh	r3, [r3, #12]
 8011c44:	b29b      	uxth	r3, r3
 8011c46:	4618      	mov	r0, r3
 8011c48:	f7fa fd0c 	bl	800c664 <lwip_htons>
 8011c4c:	4603      	mov	r3, r0
 8011c4e:	b2db      	uxtb	r3, r3
 8011c50:	f003 0301 	and.w	r3, r3, #1
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d01f      	beq.n	8011c98 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011c58:	4b65      	ldr	r3, [pc, #404]	; (8011df0 <tcp_receive+0x888>)
 8011c5a:	68db      	ldr	r3, [r3, #12]
 8011c5c:	899b      	ldrh	r3, [r3, #12]
 8011c5e:	b29b      	uxth	r3, r3
 8011c60:	b21b      	sxth	r3, r3
 8011c62:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011c66:	b21c      	sxth	r4, r3
 8011c68:	4b61      	ldr	r3, [pc, #388]	; (8011df0 <tcp_receive+0x888>)
 8011c6a:	68db      	ldr	r3, [r3, #12]
 8011c6c:	899b      	ldrh	r3, [r3, #12]
 8011c6e:	b29b      	uxth	r3, r3
 8011c70:	4618      	mov	r0, r3
 8011c72:	f7fa fcf7 	bl	800c664 <lwip_htons>
 8011c76:	4603      	mov	r3, r0
 8011c78:	b2db      	uxtb	r3, r3
 8011c7a:	b29b      	uxth	r3, r3
 8011c7c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011c80:	b29b      	uxth	r3, r3
 8011c82:	4618      	mov	r0, r3
 8011c84:	f7fa fcee 	bl	800c664 <lwip_htons>
 8011c88:	4603      	mov	r3, r0
 8011c8a:	b21b      	sxth	r3, r3
 8011c8c:	4323      	orrs	r3, r4
 8011c8e:	b21a      	sxth	r2, r3
 8011c90:	4b57      	ldr	r3, [pc, #348]	; (8011df0 <tcp_receive+0x888>)
 8011c92:	68db      	ldr	r3, [r3, #12]
 8011c94:	b292      	uxth	r2, r2
 8011c96:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011c9c:	4b54      	ldr	r3, [pc, #336]	; (8011df0 <tcp_receive+0x888>)
 8011c9e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011ca0:	4b53      	ldr	r3, [pc, #332]	; (8011df0 <tcp_receive+0x888>)
 8011ca2:	68db      	ldr	r3, [r3, #12]
 8011ca4:	899b      	ldrh	r3, [r3, #12]
 8011ca6:	b29b      	uxth	r3, r3
 8011ca8:	4618      	mov	r0, r3
 8011caa:	f7fa fcdb 	bl	800c664 <lwip_htons>
 8011cae:	4603      	mov	r3, r0
 8011cb0:	b2db      	uxtb	r3, r3
 8011cb2:	f003 0302 	and.w	r3, r3, #2
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d005      	beq.n	8011cc6 <tcp_receive+0x75e>
            inseg.len -= 1;
 8011cba:	4b4d      	ldr	r3, [pc, #308]	; (8011df0 <tcp_receive+0x888>)
 8011cbc:	891b      	ldrh	r3, [r3, #8]
 8011cbe:	3b01      	subs	r3, #1
 8011cc0:	b29a      	uxth	r2, r3
 8011cc2:	4b4b      	ldr	r3, [pc, #300]	; (8011df0 <tcp_receive+0x888>)
 8011cc4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011cc6:	4b4a      	ldr	r3, [pc, #296]	; (8011df0 <tcp_receive+0x888>)
 8011cc8:	685a      	ldr	r2, [r3, #4]
 8011cca:	4b49      	ldr	r3, [pc, #292]	; (8011df0 <tcp_receive+0x888>)
 8011ccc:	891b      	ldrh	r3, [r3, #8]
 8011cce:	4619      	mov	r1, r3
 8011cd0:	4610      	mov	r0, r2
 8011cd2:	f7fb fee3 	bl	800da9c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011cd6:	4b46      	ldr	r3, [pc, #280]	; (8011df0 <tcp_receive+0x888>)
 8011cd8:	891c      	ldrh	r4, [r3, #8]
 8011cda:	4b45      	ldr	r3, [pc, #276]	; (8011df0 <tcp_receive+0x888>)
 8011cdc:	68db      	ldr	r3, [r3, #12]
 8011cde:	899b      	ldrh	r3, [r3, #12]
 8011ce0:	b29b      	uxth	r3, r3
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	f7fa fcbe 	bl	800c664 <lwip_htons>
 8011ce8:	4603      	mov	r3, r0
 8011cea:	b2db      	uxtb	r3, r3
 8011cec:	f003 0303 	and.w	r3, r3, #3
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d001      	beq.n	8011cf8 <tcp_receive+0x790>
 8011cf4:	2301      	movs	r3, #1
 8011cf6:	e000      	b.n	8011cfa <tcp_receive+0x792>
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	4423      	add	r3, r4
 8011cfc:	b29a      	uxth	r2, r3
 8011cfe:	4b3d      	ldr	r3, [pc, #244]	; (8011df4 <tcp_receive+0x88c>)
 8011d00:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011d02:	4b3c      	ldr	r3, [pc, #240]	; (8011df4 <tcp_receive+0x88c>)
 8011d04:	881b      	ldrh	r3, [r3, #0]
 8011d06:	461a      	mov	r2, r3
 8011d08:	4b38      	ldr	r3, [pc, #224]	; (8011dec <tcp_receive+0x884>)
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	441a      	add	r2, r3
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d12:	6879      	ldr	r1, [r7, #4]
 8011d14:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011d16:	440b      	add	r3, r1
 8011d18:	429a      	cmp	r2, r3
 8011d1a:	d006      	beq.n	8011d2a <tcp_receive+0x7c2>
 8011d1c:	4b36      	ldr	r3, [pc, #216]	; (8011df8 <tcp_receive+0x890>)
 8011d1e:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8011d22:	4936      	ldr	r1, [pc, #216]	; (8011dfc <tcp_receive+0x894>)
 8011d24:	4836      	ldr	r0, [pc, #216]	; (8011e00 <tcp_receive+0x898>)
 8011d26:	f005 fa11 	bl	801714c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	f000 80e7 	beq.w	8011f02 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011d34:	4b2e      	ldr	r3, [pc, #184]	; (8011df0 <tcp_receive+0x888>)
 8011d36:	68db      	ldr	r3, [r3, #12]
 8011d38:	899b      	ldrh	r3, [r3, #12]
 8011d3a:	b29b      	uxth	r3, r3
 8011d3c:	4618      	mov	r0, r3
 8011d3e:	f7fa fc91 	bl	800c664 <lwip_htons>
 8011d42:	4603      	mov	r3, r0
 8011d44:	b2db      	uxtb	r3, r3
 8011d46:	f003 0301 	and.w	r3, r3, #1
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d010      	beq.n	8011d70 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011d4e:	e00a      	b.n	8011d66 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d54:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d5a:	681a      	ldr	r2, [r3, #0]
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011d60:	68f8      	ldr	r0, [r7, #12]
 8011d62:	f7fd fcc9 	bl	800f6f8 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d1f0      	bne.n	8011d50 <tcp_receive+0x7e8>
 8011d6e:	e0c8      	b.n	8011f02 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d74:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011d76:	e052      	b.n	8011e1e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d7a:	68db      	ldr	r3, [r3, #12]
 8011d7c:	899b      	ldrh	r3, [r3, #12]
 8011d7e:	b29b      	uxth	r3, r3
 8011d80:	4618      	mov	r0, r3
 8011d82:	f7fa fc6f 	bl	800c664 <lwip_htons>
 8011d86:	4603      	mov	r3, r0
 8011d88:	b2db      	uxtb	r3, r3
 8011d8a:	f003 0301 	and.w	r3, r3, #1
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d03d      	beq.n	8011e0e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011d92:	4b17      	ldr	r3, [pc, #92]	; (8011df0 <tcp_receive+0x888>)
 8011d94:	68db      	ldr	r3, [r3, #12]
 8011d96:	899b      	ldrh	r3, [r3, #12]
 8011d98:	b29b      	uxth	r3, r3
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	f7fa fc62 	bl	800c664 <lwip_htons>
 8011da0:	4603      	mov	r3, r0
 8011da2:	b2db      	uxtb	r3, r3
 8011da4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d130      	bne.n	8011e0e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011dac:	4b10      	ldr	r3, [pc, #64]	; (8011df0 <tcp_receive+0x888>)
 8011dae:	68db      	ldr	r3, [r3, #12]
 8011db0:	899b      	ldrh	r3, [r3, #12]
 8011db2:	b29c      	uxth	r4, r3
 8011db4:	2001      	movs	r0, #1
 8011db6:	f7fa fc55 	bl	800c664 <lwip_htons>
 8011dba:	4603      	mov	r3, r0
 8011dbc:	461a      	mov	r2, r3
 8011dbe:	4b0c      	ldr	r3, [pc, #48]	; (8011df0 <tcp_receive+0x888>)
 8011dc0:	68db      	ldr	r3, [r3, #12]
 8011dc2:	4322      	orrs	r2, r4
 8011dc4:	b292      	uxth	r2, r2
 8011dc6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011dc8:	4b09      	ldr	r3, [pc, #36]	; (8011df0 <tcp_receive+0x888>)
 8011dca:	891c      	ldrh	r4, [r3, #8]
 8011dcc:	4b08      	ldr	r3, [pc, #32]	; (8011df0 <tcp_receive+0x888>)
 8011dce:	68db      	ldr	r3, [r3, #12]
 8011dd0:	899b      	ldrh	r3, [r3, #12]
 8011dd2:	b29b      	uxth	r3, r3
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	f7fa fc45 	bl	800c664 <lwip_htons>
 8011dda:	4603      	mov	r3, r0
 8011ddc:	b2db      	uxtb	r3, r3
 8011dde:	f003 0303 	and.w	r3, r3, #3
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d00e      	beq.n	8011e04 <tcp_receive+0x89c>
 8011de6:	2301      	movs	r3, #1
 8011de8:	e00d      	b.n	8011e06 <tcp_receive+0x89e>
 8011dea:	bf00      	nop
 8011dec:	2000466c 	.word	0x2000466c
 8011df0:	2000464c 	.word	0x2000464c
 8011df4:	20004676 	.word	0x20004676
 8011df8:	0801a370 	.word	0x0801a370
 8011dfc:	0801a718 	.word	0x0801a718
 8011e00:	0801a3bc 	.word	0x0801a3bc
 8011e04:	2300      	movs	r3, #0
 8011e06:	4423      	add	r3, r4
 8011e08:	b29a      	uxth	r2, r3
 8011e0a:	4b98      	ldr	r3, [pc, #608]	; (801206c <tcp_receive+0xb04>)
 8011e0c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e10:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011e18:	6938      	ldr	r0, [r7, #16]
 8011e1a:	f7fd fc6d 	bl	800f6f8 <tcp_seg_free>
            while (next &&
 8011e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d00e      	beq.n	8011e42 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011e24:	4b91      	ldr	r3, [pc, #580]	; (801206c <tcp_receive+0xb04>)
 8011e26:	881b      	ldrh	r3, [r3, #0]
 8011e28:	461a      	mov	r2, r3
 8011e2a:	4b91      	ldr	r3, [pc, #580]	; (8012070 <tcp_receive+0xb08>)
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	441a      	add	r2, r3
 8011e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e32:	68db      	ldr	r3, [r3, #12]
 8011e34:	685b      	ldr	r3, [r3, #4]
 8011e36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011e38:	8909      	ldrh	r1, [r1, #8]
 8011e3a:	440b      	add	r3, r1
 8011e3c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	da9a      	bge.n	8011d78 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d059      	beq.n	8011efc <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8011e48:	4b88      	ldr	r3, [pc, #544]	; (801206c <tcp_receive+0xb04>)
 8011e4a:	881b      	ldrh	r3, [r3, #0]
 8011e4c:	461a      	mov	r2, r3
 8011e4e:	4b88      	ldr	r3, [pc, #544]	; (8012070 <tcp_receive+0xb08>)
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	441a      	add	r2, r3
 8011e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e56:	68db      	ldr	r3, [r3, #12]
 8011e58:	685b      	ldr	r3, [r3, #4]
 8011e5a:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	dd4d      	ble.n	8011efc <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e62:	68db      	ldr	r3, [r3, #12]
 8011e64:	685b      	ldr	r3, [r3, #4]
 8011e66:	b29a      	uxth	r2, r3
 8011e68:	4b81      	ldr	r3, [pc, #516]	; (8012070 <tcp_receive+0xb08>)
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	b29b      	uxth	r3, r3
 8011e6e:	1ad3      	subs	r3, r2, r3
 8011e70:	b29a      	uxth	r2, r3
 8011e72:	4b80      	ldr	r3, [pc, #512]	; (8012074 <tcp_receive+0xb0c>)
 8011e74:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011e76:	4b7f      	ldr	r3, [pc, #508]	; (8012074 <tcp_receive+0xb0c>)
 8011e78:	68db      	ldr	r3, [r3, #12]
 8011e7a:	899b      	ldrh	r3, [r3, #12]
 8011e7c:	b29b      	uxth	r3, r3
 8011e7e:	4618      	mov	r0, r3
 8011e80:	f7fa fbf0 	bl	800c664 <lwip_htons>
 8011e84:	4603      	mov	r3, r0
 8011e86:	b2db      	uxtb	r3, r3
 8011e88:	f003 0302 	and.w	r3, r3, #2
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d005      	beq.n	8011e9c <tcp_receive+0x934>
                inseg.len -= 1;
 8011e90:	4b78      	ldr	r3, [pc, #480]	; (8012074 <tcp_receive+0xb0c>)
 8011e92:	891b      	ldrh	r3, [r3, #8]
 8011e94:	3b01      	subs	r3, #1
 8011e96:	b29a      	uxth	r2, r3
 8011e98:	4b76      	ldr	r3, [pc, #472]	; (8012074 <tcp_receive+0xb0c>)
 8011e9a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011e9c:	4b75      	ldr	r3, [pc, #468]	; (8012074 <tcp_receive+0xb0c>)
 8011e9e:	685a      	ldr	r2, [r3, #4]
 8011ea0:	4b74      	ldr	r3, [pc, #464]	; (8012074 <tcp_receive+0xb0c>)
 8011ea2:	891b      	ldrh	r3, [r3, #8]
 8011ea4:	4619      	mov	r1, r3
 8011ea6:	4610      	mov	r0, r2
 8011ea8:	f7fb fdf8 	bl	800da9c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011eac:	4b71      	ldr	r3, [pc, #452]	; (8012074 <tcp_receive+0xb0c>)
 8011eae:	891c      	ldrh	r4, [r3, #8]
 8011eb0:	4b70      	ldr	r3, [pc, #448]	; (8012074 <tcp_receive+0xb0c>)
 8011eb2:	68db      	ldr	r3, [r3, #12]
 8011eb4:	899b      	ldrh	r3, [r3, #12]
 8011eb6:	b29b      	uxth	r3, r3
 8011eb8:	4618      	mov	r0, r3
 8011eba:	f7fa fbd3 	bl	800c664 <lwip_htons>
 8011ebe:	4603      	mov	r3, r0
 8011ec0:	b2db      	uxtb	r3, r3
 8011ec2:	f003 0303 	and.w	r3, r3, #3
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d001      	beq.n	8011ece <tcp_receive+0x966>
 8011eca:	2301      	movs	r3, #1
 8011ecc:	e000      	b.n	8011ed0 <tcp_receive+0x968>
 8011ece:	2300      	movs	r3, #0
 8011ed0:	4423      	add	r3, r4
 8011ed2:	b29a      	uxth	r2, r3
 8011ed4:	4b65      	ldr	r3, [pc, #404]	; (801206c <tcp_receive+0xb04>)
 8011ed6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011ed8:	4b64      	ldr	r3, [pc, #400]	; (801206c <tcp_receive+0xb04>)
 8011eda:	881b      	ldrh	r3, [r3, #0]
 8011edc:	461a      	mov	r2, r3
 8011ede:	4b64      	ldr	r3, [pc, #400]	; (8012070 <tcp_receive+0xb08>)
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	441a      	add	r2, r3
 8011ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ee6:	68db      	ldr	r3, [r3, #12]
 8011ee8:	685b      	ldr	r3, [r3, #4]
 8011eea:	429a      	cmp	r2, r3
 8011eec:	d006      	beq.n	8011efc <tcp_receive+0x994>
 8011eee:	4b62      	ldr	r3, [pc, #392]	; (8012078 <tcp_receive+0xb10>)
 8011ef0:	f240 52fd 	movw	r2, #1533	; 0x5fd
 8011ef4:	4961      	ldr	r1, [pc, #388]	; (801207c <tcp_receive+0xb14>)
 8011ef6:	4862      	ldr	r0, [pc, #392]	; (8012080 <tcp_receive+0xb18>)
 8011ef8:	f005 f928 	bl	801714c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011f00:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011f02:	4b5a      	ldr	r3, [pc, #360]	; (801206c <tcp_receive+0xb04>)
 8011f04:	881b      	ldrh	r3, [r3, #0]
 8011f06:	461a      	mov	r2, r3
 8011f08:	4b59      	ldr	r3, [pc, #356]	; (8012070 <tcp_receive+0xb08>)
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	441a      	add	r2, r3
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011f16:	4b55      	ldr	r3, [pc, #340]	; (801206c <tcp_receive+0xb04>)
 8011f18:	881b      	ldrh	r3, [r3, #0]
 8011f1a:	429a      	cmp	r2, r3
 8011f1c:	d206      	bcs.n	8011f2c <tcp_receive+0x9c4>
 8011f1e:	4b56      	ldr	r3, [pc, #344]	; (8012078 <tcp_receive+0xb10>)
 8011f20:	f240 6207 	movw	r2, #1543	; 0x607
 8011f24:	4957      	ldr	r1, [pc, #348]	; (8012084 <tcp_receive+0xb1c>)
 8011f26:	4856      	ldr	r0, [pc, #344]	; (8012080 <tcp_receive+0xb18>)
 8011f28:	f005 f910 	bl	801714c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011f30:	4b4e      	ldr	r3, [pc, #312]	; (801206c <tcp_receive+0xb04>)
 8011f32:	881b      	ldrh	r3, [r3, #0]
 8011f34:	1ad3      	subs	r3, r2, r3
 8011f36:	b29a      	uxth	r2, r3
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011f3c:	6878      	ldr	r0, [r7, #4]
 8011f3e:	f7fc feb9 	bl	800ecb4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011f42:	4b4c      	ldr	r3, [pc, #304]	; (8012074 <tcp_receive+0xb0c>)
 8011f44:	685b      	ldr	r3, [r3, #4]
 8011f46:	891b      	ldrh	r3, [r3, #8]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d006      	beq.n	8011f5a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8011f4c:	4b49      	ldr	r3, [pc, #292]	; (8012074 <tcp_receive+0xb0c>)
 8011f4e:	685b      	ldr	r3, [r3, #4]
 8011f50:	4a4d      	ldr	r2, [pc, #308]	; (8012088 <tcp_receive+0xb20>)
 8011f52:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011f54:	4b47      	ldr	r3, [pc, #284]	; (8012074 <tcp_receive+0xb0c>)
 8011f56:	2200      	movs	r2, #0
 8011f58:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011f5a:	4b46      	ldr	r3, [pc, #280]	; (8012074 <tcp_receive+0xb0c>)
 8011f5c:	68db      	ldr	r3, [r3, #12]
 8011f5e:	899b      	ldrh	r3, [r3, #12]
 8011f60:	b29b      	uxth	r3, r3
 8011f62:	4618      	mov	r0, r3
 8011f64:	f7fa fb7e 	bl	800c664 <lwip_htons>
 8011f68:	4603      	mov	r3, r0
 8011f6a:	b2db      	uxtb	r3, r3
 8011f6c:	f003 0301 	and.w	r3, r3, #1
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	f000 80b8 	beq.w	80120e6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011f76:	4b45      	ldr	r3, [pc, #276]	; (801208c <tcp_receive+0xb24>)
 8011f78:	781b      	ldrb	r3, [r3, #0]
 8011f7a:	f043 0320 	orr.w	r3, r3, #32
 8011f7e:	b2da      	uxtb	r2, r3
 8011f80:	4b42      	ldr	r3, [pc, #264]	; (801208c <tcp_receive+0xb24>)
 8011f82:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011f84:	e0af      	b.n	80120e6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f8a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f90:	68db      	ldr	r3, [r3, #12]
 8011f92:	685b      	ldr	r3, [r3, #4]
 8011f94:	4a36      	ldr	r2, [pc, #216]	; (8012070 <tcp_receive+0xb08>)
 8011f96:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011f98:	68bb      	ldr	r3, [r7, #8]
 8011f9a:	891b      	ldrh	r3, [r3, #8]
 8011f9c:	461c      	mov	r4, r3
 8011f9e:	68bb      	ldr	r3, [r7, #8]
 8011fa0:	68db      	ldr	r3, [r3, #12]
 8011fa2:	899b      	ldrh	r3, [r3, #12]
 8011fa4:	b29b      	uxth	r3, r3
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	f7fa fb5c 	bl	800c664 <lwip_htons>
 8011fac:	4603      	mov	r3, r0
 8011fae:	b2db      	uxtb	r3, r3
 8011fb0:	f003 0303 	and.w	r3, r3, #3
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d001      	beq.n	8011fbc <tcp_receive+0xa54>
 8011fb8:	2301      	movs	r3, #1
 8011fba:	e000      	b.n	8011fbe <tcp_receive+0xa56>
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	191a      	adds	r2, r3, r4
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fc4:	441a      	add	r2, r3
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011fce:	461c      	mov	r4, r3
 8011fd0:	68bb      	ldr	r3, [r7, #8]
 8011fd2:	891b      	ldrh	r3, [r3, #8]
 8011fd4:	461d      	mov	r5, r3
 8011fd6:	68bb      	ldr	r3, [r7, #8]
 8011fd8:	68db      	ldr	r3, [r3, #12]
 8011fda:	899b      	ldrh	r3, [r3, #12]
 8011fdc:	b29b      	uxth	r3, r3
 8011fde:	4618      	mov	r0, r3
 8011fe0:	f7fa fb40 	bl	800c664 <lwip_htons>
 8011fe4:	4603      	mov	r3, r0
 8011fe6:	b2db      	uxtb	r3, r3
 8011fe8:	f003 0303 	and.w	r3, r3, #3
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d001      	beq.n	8011ff4 <tcp_receive+0xa8c>
 8011ff0:	2301      	movs	r3, #1
 8011ff2:	e000      	b.n	8011ff6 <tcp_receive+0xa8e>
 8011ff4:	2300      	movs	r3, #0
 8011ff6:	442b      	add	r3, r5
 8011ff8:	429c      	cmp	r4, r3
 8011ffa:	d206      	bcs.n	801200a <tcp_receive+0xaa2>
 8011ffc:	4b1e      	ldr	r3, [pc, #120]	; (8012078 <tcp_receive+0xb10>)
 8011ffe:	f240 622c 	movw	r2, #1580	; 0x62c
 8012002:	4923      	ldr	r1, [pc, #140]	; (8012090 <tcp_receive+0xb28>)
 8012004:	481e      	ldr	r0, [pc, #120]	; (8012080 <tcp_receive+0xb18>)
 8012006:	f005 f8a1 	bl	801714c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801200a:	68bb      	ldr	r3, [r7, #8]
 801200c:	891b      	ldrh	r3, [r3, #8]
 801200e:	461c      	mov	r4, r3
 8012010:	68bb      	ldr	r3, [r7, #8]
 8012012:	68db      	ldr	r3, [r3, #12]
 8012014:	899b      	ldrh	r3, [r3, #12]
 8012016:	b29b      	uxth	r3, r3
 8012018:	4618      	mov	r0, r3
 801201a:	f7fa fb23 	bl	800c664 <lwip_htons>
 801201e:	4603      	mov	r3, r0
 8012020:	b2db      	uxtb	r3, r3
 8012022:	f003 0303 	and.w	r3, r3, #3
 8012026:	2b00      	cmp	r3, #0
 8012028:	d001      	beq.n	801202e <tcp_receive+0xac6>
 801202a:	2301      	movs	r3, #1
 801202c:	e000      	b.n	8012030 <tcp_receive+0xac8>
 801202e:	2300      	movs	r3, #0
 8012030:	1919      	adds	r1, r3, r4
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012036:	b28b      	uxth	r3, r1
 8012038:	1ad3      	subs	r3, r2, r3
 801203a:	b29a      	uxth	r2, r3
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012040:	6878      	ldr	r0, [r7, #4]
 8012042:	f7fc fe37 	bl	800ecb4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8012046:	68bb      	ldr	r3, [r7, #8]
 8012048:	685b      	ldr	r3, [r3, #4]
 801204a:	891b      	ldrh	r3, [r3, #8]
 801204c:	2b00      	cmp	r3, #0
 801204e:	d028      	beq.n	80120a2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012050:	4b0d      	ldr	r3, [pc, #52]	; (8012088 <tcp_receive+0xb20>)
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	2b00      	cmp	r3, #0
 8012056:	d01d      	beq.n	8012094 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8012058:	4b0b      	ldr	r3, [pc, #44]	; (8012088 <tcp_receive+0xb20>)
 801205a:	681a      	ldr	r2, [r3, #0]
 801205c:	68bb      	ldr	r3, [r7, #8]
 801205e:	685b      	ldr	r3, [r3, #4]
 8012060:	4619      	mov	r1, r3
 8012062:	4610      	mov	r0, r2
 8012064:	f7fb ffa0 	bl	800dfa8 <pbuf_cat>
 8012068:	e018      	b.n	801209c <tcp_receive+0xb34>
 801206a:	bf00      	nop
 801206c:	20004676 	.word	0x20004676
 8012070:	2000466c 	.word	0x2000466c
 8012074:	2000464c 	.word	0x2000464c
 8012078:	0801a370 	.word	0x0801a370
 801207c:	0801a750 	.word	0x0801a750
 8012080:	0801a3bc 	.word	0x0801a3bc
 8012084:	0801a78c 	.word	0x0801a78c
 8012088:	2000467c 	.word	0x2000467c
 801208c:	20004679 	.word	0x20004679
 8012090:	0801a7ac 	.word	0x0801a7ac
            } else {
              recv_data = cseg->p;
 8012094:	68bb      	ldr	r3, [r7, #8]
 8012096:	685b      	ldr	r3, [r3, #4]
 8012098:	4a70      	ldr	r2, [pc, #448]	; (801225c <tcp_receive+0xcf4>)
 801209a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801209c:	68bb      	ldr	r3, [r7, #8]
 801209e:	2200      	movs	r2, #0
 80120a0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80120a2:	68bb      	ldr	r3, [r7, #8]
 80120a4:	68db      	ldr	r3, [r3, #12]
 80120a6:	899b      	ldrh	r3, [r3, #12]
 80120a8:	b29b      	uxth	r3, r3
 80120aa:	4618      	mov	r0, r3
 80120ac:	f7fa fada 	bl	800c664 <lwip_htons>
 80120b0:	4603      	mov	r3, r0
 80120b2:	b2db      	uxtb	r3, r3
 80120b4:	f003 0301 	and.w	r3, r3, #1
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d00d      	beq.n	80120d8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80120bc:	4b68      	ldr	r3, [pc, #416]	; (8012260 <tcp_receive+0xcf8>)
 80120be:	781b      	ldrb	r3, [r3, #0]
 80120c0:	f043 0320 	orr.w	r3, r3, #32
 80120c4:	b2da      	uxtb	r2, r3
 80120c6:	4b66      	ldr	r3, [pc, #408]	; (8012260 <tcp_receive+0xcf8>)
 80120c8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	7d1b      	ldrb	r3, [r3, #20]
 80120ce:	2b04      	cmp	r3, #4
 80120d0:	d102      	bne.n	80120d8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	2207      	movs	r2, #7
 80120d6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80120d8:	68bb      	ldr	r3, [r7, #8]
 80120da:	681a      	ldr	r2, [r3, #0]
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80120e0:	68b8      	ldr	r0, [r7, #8]
 80120e2:	f7fd fb09 	bl	800f6f8 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d008      	beq.n	8012100 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80120f2:	68db      	ldr	r3, [r3, #12]
 80120f4:	685a      	ldr	r2, [r3, #4]
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80120fa:	429a      	cmp	r2, r3
 80120fc:	f43f af43 	beq.w	8011f86 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	8b5b      	ldrh	r3, [r3, #26]
 8012104:	f003 0301 	and.w	r3, r3, #1
 8012108:	2b00      	cmp	r3, #0
 801210a:	d00e      	beq.n	801212a <tcp_receive+0xbc2>
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	8b5b      	ldrh	r3, [r3, #26]
 8012110:	f023 0301 	bic.w	r3, r3, #1
 8012114:	b29a      	uxth	r2, r3
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	835a      	strh	r2, [r3, #26]
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	8b5b      	ldrh	r3, [r3, #26]
 801211e:	f043 0302 	orr.w	r3, r3, #2
 8012122:	b29a      	uxth	r2, r3
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012128:	e188      	b.n	801243c <tcp_receive+0xed4>
        tcp_ack(pcb);
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	8b5b      	ldrh	r3, [r3, #26]
 801212e:	f043 0301 	orr.w	r3, r3, #1
 8012132:	b29a      	uxth	r2, r3
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012138:	e180      	b.n	801243c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801213e:	2b00      	cmp	r3, #0
 8012140:	d106      	bne.n	8012150 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8012142:	4848      	ldr	r0, [pc, #288]	; (8012264 <tcp_receive+0xcfc>)
 8012144:	f7fd faf0 	bl	800f728 <tcp_seg_copy>
 8012148:	4602      	mov	r2, r0
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	675a      	str	r2, [r3, #116]	; 0x74
 801214e:	e16d      	b.n	801242c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012150:	2300      	movs	r3, #0
 8012152:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012158:	63bb      	str	r3, [r7, #56]	; 0x38
 801215a:	e157      	b.n	801240c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 801215c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801215e:	68db      	ldr	r3, [r3, #12]
 8012160:	685a      	ldr	r2, [r3, #4]
 8012162:	4b41      	ldr	r3, [pc, #260]	; (8012268 <tcp_receive+0xd00>)
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	429a      	cmp	r2, r3
 8012168:	d11d      	bne.n	80121a6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801216a:	4b3e      	ldr	r3, [pc, #248]	; (8012264 <tcp_receive+0xcfc>)
 801216c:	891a      	ldrh	r2, [r3, #8]
 801216e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012170:	891b      	ldrh	r3, [r3, #8]
 8012172:	429a      	cmp	r2, r3
 8012174:	f240 814f 	bls.w	8012416 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012178:	483a      	ldr	r0, [pc, #232]	; (8012264 <tcp_receive+0xcfc>)
 801217a:	f7fd fad5 	bl	800f728 <tcp_seg_copy>
 801217e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012180:	697b      	ldr	r3, [r7, #20]
 8012182:	2b00      	cmp	r3, #0
 8012184:	f000 8149 	beq.w	801241a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8012188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801218a:	2b00      	cmp	r3, #0
 801218c:	d003      	beq.n	8012196 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801218e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012190:	697a      	ldr	r2, [r7, #20]
 8012192:	601a      	str	r2, [r3, #0]
 8012194:	e002      	b.n	801219c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	697a      	ldr	r2, [r7, #20]
 801219a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801219c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801219e:	6978      	ldr	r0, [r7, #20]
 80121a0:	f7ff f8de 	bl	8011360 <tcp_oos_insert_segment>
                }
                break;
 80121a4:	e139      	b.n	801241a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80121a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d117      	bne.n	80121dc <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80121ac:	4b2e      	ldr	r3, [pc, #184]	; (8012268 <tcp_receive+0xd00>)
 80121ae:	681a      	ldr	r2, [r3, #0]
 80121b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121b2:	68db      	ldr	r3, [r3, #12]
 80121b4:	685b      	ldr	r3, [r3, #4]
 80121b6:	1ad3      	subs	r3, r2, r3
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	da57      	bge.n	801226c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80121bc:	4829      	ldr	r0, [pc, #164]	; (8012264 <tcp_receive+0xcfc>)
 80121be:	f7fd fab3 	bl	800f728 <tcp_seg_copy>
 80121c2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80121c4:	69bb      	ldr	r3, [r7, #24]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	f000 8129 	beq.w	801241e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	69ba      	ldr	r2, [r7, #24]
 80121d0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80121d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80121d4:	69b8      	ldr	r0, [r7, #24]
 80121d6:	f7ff f8c3 	bl	8011360 <tcp_oos_insert_segment>
                  }
                  break;
 80121da:	e120      	b.n	801241e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80121dc:	4b22      	ldr	r3, [pc, #136]	; (8012268 <tcp_receive+0xd00>)
 80121de:	681a      	ldr	r2, [r3, #0]
 80121e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121e2:	68db      	ldr	r3, [r3, #12]
 80121e4:	685b      	ldr	r3, [r3, #4]
 80121e6:	1ad3      	subs	r3, r2, r3
 80121e8:	3b01      	subs	r3, #1
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	db3e      	blt.n	801226c <tcp_receive+0xd04>
 80121ee:	4b1e      	ldr	r3, [pc, #120]	; (8012268 <tcp_receive+0xd00>)
 80121f0:	681a      	ldr	r2, [r3, #0]
 80121f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121f4:	68db      	ldr	r3, [r3, #12]
 80121f6:	685b      	ldr	r3, [r3, #4]
 80121f8:	1ad3      	subs	r3, r2, r3
 80121fa:	3301      	adds	r3, #1
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	dc35      	bgt.n	801226c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012200:	4818      	ldr	r0, [pc, #96]	; (8012264 <tcp_receive+0xcfc>)
 8012202:	f7fd fa91 	bl	800f728 <tcp_seg_copy>
 8012206:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012208:	69fb      	ldr	r3, [r7, #28]
 801220a:	2b00      	cmp	r3, #0
 801220c:	f000 8109 	beq.w	8012422 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012212:	68db      	ldr	r3, [r3, #12]
 8012214:	685b      	ldr	r3, [r3, #4]
 8012216:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012218:	8912      	ldrh	r2, [r2, #8]
 801221a:	441a      	add	r2, r3
 801221c:	4b12      	ldr	r3, [pc, #72]	; (8012268 <tcp_receive+0xd00>)
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	1ad3      	subs	r3, r2, r3
 8012222:	2b00      	cmp	r3, #0
 8012224:	dd12      	ble.n	801224c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012226:	4b10      	ldr	r3, [pc, #64]	; (8012268 <tcp_receive+0xd00>)
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	b29a      	uxth	r2, r3
 801222c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801222e:	68db      	ldr	r3, [r3, #12]
 8012230:	685b      	ldr	r3, [r3, #4]
 8012232:	b29b      	uxth	r3, r3
 8012234:	1ad3      	subs	r3, r2, r3
 8012236:	b29a      	uxth	r2, r3
 8012238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801223a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801223c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801223e:	685a      	ldr	r2, [r3, #4]
 8012240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012242:	891b      	ldrh	r3, [r3, #8]
 8012244:	4619      	mov	r1, r3
 8012246:	4610      	mov	r0, r2
 8012248:	f7fb fc28 	bl	800da9c <pbuf_realloc>
                    }
                    prev->next = cseg;
 801224c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801224e:	69fa      	ldr	r2, [r7, #28]
 8012250:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012252:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012254:	69f8      	ldr	r0, [r7, #28]
 8012256:	f7ff f883 	bl	8011360 <tcp_oos_insert_segment>
                  }
                  break;
 801225a:	e0e2      	b.n	8012422 <tcp_receive+0xeba>
 801225c:	2000467c 	.word	0x2000467c
 8012260:	20004679 	.word	0x20004679
 8012264:	2000464c 	.word	0x2000464c
 8012268:	2000466c 	.word	0x2000466c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801226c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801226e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	2b00      	cmp	r3, #0
 8012276:	f040 80c6 	bne.w	8012406 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801227a:	4b80      	ldr	r3, [pc, #512]	; (801247c <tcp_receive+0xf14>)
 801227c:	681a      	ldr	r2, [r3, #0]
 801227e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012280:	68db      	ldr	r3, [r3, #12]
 8012282:	685b      	ldr	r3, [r3, #4]
 8012284:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012286:	2b00      	cmp	r3, #0
 8012288:	f340 80bd 	ble.w	8012406 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801228c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801228e:	68db      	ldr	r3, [r3, #12]
 8012290:	899b      	ldrh	r3, [r3, #12]
 8012292:	b29b      	uxth	r3, r3
 8012294:	4618      	mov	r0, r3
 8012296:	f7fa f9e5 	bl	800c664 <lwip_htons>
 801229a:	4603      	mov	r3, r0
 801229c:	b2db      	uxtb	r3, r3
 801229e:	f003 0301 	and.w	r3, r3, #1
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	f040 80bf 	bne.w	8012426 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80122a8:	4875      	ldr	r0, [pc, #468]	; (8012480 <tcp_receive+0xf18>)
 80122aa:	f7fd fa3d 	bl	800f728 <tcp_seg_copy>
 80122ae:	4602      	mov	r2, r0
 80122b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122b2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80122b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	f000 80b6 	beq.w	801242a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80122be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122c0:	68db      	ldr	r3, [r3, #12]
 80122c2:	685b      	ldr	r3, [r3, #4]
 80122c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80122c6:	8912      	ldrh	r2, [r2, #8]
 80122c8:	441a      	add	r2, r3
 80122ca:	4b6c      	ldr	r3, [pc, #432]	; (801247c <tcp_receive+0xf14>)
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	1ad3      	subs	r3, r2, r3
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	dd12      	ble.n	80122fa <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80122d4:	4b69      	ldr	r3, [pc, #420]	; (801247c <tcp_receive+0xf14>)
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	b29a      	uxth	r2, r3
 80122da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122dc:	68db      	ldr	r3, [r3, #12]
 80122de:	685b      	ldr	r3, [r3, #4]
 80122e0:	b29b      	uxth	r3, r3
 80122e2:	1ad3      	subs	r3, r2, r3
 80122e4:	b29a      	uxth	r2, r3
 80122e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122e8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80122ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122ec:	685a      	ldr	r2, [r3, #4]
 80122ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122f0:	891b      	ldrh	r3, [r3, #8]
 80122f2:	4619      	mov	r1, r3
 80122f4:	4610      	mov	r0, r2
 80122f6:	f7fb fbd1 	bl	800da9c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80122fa:	4b62      	ldr	r3, [pc, #392]	; (8012484 <tcp_receive+0xf1c>)
 80122fc:	881b      	ldrh	r3, [r3, #0]
 80122fe:	461a      	mov	r2, r3
 8012300:	4b5e      	ldr	r3, [pc, #376]	; (801247c <tcp_receive+0xf14>)
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	441a      	add	r2, r3
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801230a:	6879      	ldr	r1, [r7, #4]
 801230c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801230e:	440b      	add	r3, r1
 8012310:	1ad3      	subs	r3, r2, r3
 8012312:	2b00      	cmp	r3, #0
 8012314:	f340 8089 	ble.w	801242a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	68db      	ldr	r3, [r3, #12]
 801231e:	899b      	ldrh	r3, [r3, #12]
 8012320:	b29b      	uxth	r3, r3
 8012322:	4618      	mov	r0, r3
 8012324:	f7fa f99e 	bl	800c664 <lwip_htons>
 8012328:	4603      	mov	r3, r0
 801232a:	b2db      	uxtb	r3, r3
 801232c:	f003 0301 	and.w	r3, r3, #1
 8012330:	2b00      	cmp	r3, #0
 8012332:	d022      	beq.n	801237a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	68db      	ldr	r3, [r3, #12]
 801233a:	899b      	ldrh	r3, [r3, #12]
 801233c:	b29b      	uxth	r3, r3
 801233e:	b21b      	sxth	r3, r3
 8012340:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012344:	b21c      	sxth	r4, r3
 8012346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	68db      	ldr	r3, [r3, #12]
 801234c:	899b      	ldrh	r3, [r3, #12]
 801234e:	b29b      	uxth	r3, r3
 8012350:	4618      	mov	r0, r3
 8012352:	f7fa f987 	bl	800c664 <lwip_htons>
 8012356:	4603      	mov	r3, r0
 8012358:	b2db      	uxtb	r3, r3
 801235a:	b29b      	uxth	r3, r3
 801235c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012360:	b29b      	uxth	r3, r3
 8012362:	4618      	mov	r0, r3
 8012364:	f7fa f97e 	bl	800c664 <lwip_htons>
 8012368:	4603      	mov	r3, r0
 801236a:	b21b      	sxth	r3, r3
 801236c:	4323      	orrs	r3, r4
 801236e:	b21a      	sxth	r2, r3
 8012370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	68db      	ldr	r3, [r3, #12]
 8012376:	b292      	uxth	r2, r2
 8012378:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801237e:	b29a      	uxth	r2, r3
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012384:	4413      	add	r3, r2
 8012386:	b299      	uxth	r1, r3
 8012388:	4b3c      	ldr	r3, [pc, #240]	; (801247c <tcp_receive+0xf14>)
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	b29a      	uxth	r2, r3
 801238e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	1a8a      	subs	r2, r1, r2
 8012394:	b292      	uxth	r2, r2
 8012396:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	685a      	ldr	r2, [r3, #4]
 801239e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	891b      	ldrh	r3, [r3, #8]
 80123a4:	4619      	mov	r1, r3
 80123a6:	4610      	mov	r0, r2
 80123a8:	f7fb fb78 	bl	800da9c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80123ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	891c      	ldrh	r4, [r3, #8]
 80123b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	68db      	ldr	r3, [r3, #12]
 80123b8:	899b      	ldrh	r3, [r3, #12]
 80123ba:	b29b      	uxth	r3, r3
 80123bc:	4618      	mov	r0, r3
 80123be:	f7fa f951 	bl	800c664 <lwip_htons>
 80123c2:	4603      	mov	r3, r0
 80123c4:	b2db      	uxtb	r3, r3
 80123c6:	f003 0303 	and.w	r3, r3, #3
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d001      	beq.n	80123d2 <tcp_receive+0xe6a>
 80123ce:	2301      	movs	r3, #1
 80123d0:	e000      	b.n	80123d4 <tcp_receive+0xe6c>
 80123d2:	2300      	movs	r3, #0
 80123d4:	4423      	add	r3, r4
 80123d6:	b29a      	uxth	r2, r3
 80123d8:	4b2a      	ldr	r3, [pc, #168]	; (8012484 <tcp_receive+0xf1c>)
 80123da:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80123dc:	4b29      	ldr	r3, [pc, #164]	; (8012484 <tcp_receive+0xf1c>)
 80123de:	881b      	ldrh	r3, [r3, #0]
 80123e0:	461a      	mov	r2, r3
 80123e2:	4b26      	ldr	r3, [pc, #152]	; (801247c <tcp_receive+0xf14>)
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	441a      	add	r2, r3
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123ec:	6879      	ldr	r1, [r7, #4]
 80123ee:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80123f0:	440b      	add	r3, r1
 80123f2:	429a      	cmp	r2, r3
 80123f4:	d019      	beq.n	801242a <tcp_receive+0xec2>
 80123f6:	4b24      	ldr	r3, [pc, #144]	; (8012488 <tcp_receive+0xf20>)
 80123f8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80123fc:	4923      	ldr	r1, [pc, #140]	; (801248c <tcp_receive+0xf24>)
 80123fe:	4824      	ldr	r0, [pc, #144]	; (8012490 <tcp_receive+0xf28>)
 8012400:	f004 fea4 	bl	801714c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012404:	e011      	b.n	801242a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	63bb      	str	r3, [r7, #56]	; 0x38
 801240c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801240e:	2b00      	cmp	r3, #0
 8012410:	f47f aea4 	bne.w	801215c <tcp_receive+0xbf4>
 8012414:	e00a      	b.n	801242c <tcp_receive+0xec4>
                break;
 8012416:	bf00      	nop
 8012418:	e008      	b.n	801242c <tcp_receive+0xec4>
                break;
 801241a:	bf00      	nop
 801241c:	e006      	b.n	801242c <tcp_receive+0xec4>
                  break;
 801241e:	bf00      	nop
 8012420:	e004      	b.n	801242c <tcp_receive+0xec4>
                  break;
 8012422:	bf00      	nop
 8012424:	e002      	b.n	801242c <tcp_receive+0xec4>
                  break;
 8012426:	bf00      	nop
 8012428:	e000      	b.n	801242c <tcp_receive+0xec4>
                break;
 801242a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801242c:	6878      	ldr	r0, [r7, #4]
 801242e:	f001 fe9d 	bl	801416c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012432:	e003      	b.n	801243c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012434:	6878      	ldr	r0, [r7, #4]
 8012436:	f001 fe99 	bl	801416c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801243a:	e01a      	b.n	8012472 <tcp_receive+0xf0a>
 801243c:	e019      	b.n	8012472 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801243e:	4b0f      	ldr	r3, [pc, #60]	; (801247c <tcp_receive+0xf14>)
 8012440:	681a      	ldr	r2, [r3, #0]
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012446:	1ad3      	subs	r3, r2, r3
 8012448:	2b00      	cmp	r3, #0
 801244a:	db0a      	blt.n	8012462 <tcp_receive+0xefa>
 801244c:	4b0b      	ldr	r3, [pc, #44]	; (801247c <tcp_receive+0xf14>)
 801244e:	681a      	ldr	r2, [r3, #0]
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012454:	6879      	ldr	r1, [r7, #4]
 8012456:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012458:	440b      	add	r3, r1
 801245a:	1ad3      	subs	r3, r2, r3
 801245c:	3301      	adds	r3, #1
 801245e:	2b00      	cmp	r3, #0
 8012460:	dd07      	ble.n	8012472 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	8b5b      	ldrh	r3, [r3, #26]
 8012466:	f043 0302 	orr.w	r3, r3, #2
 801246a:	b29a      	uxth	r2, r3
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012470:	e7ff      	b.n	8012472 <tcp_receive+0xf0a>
 8012472:	bf00      	nop
 8012474:	3750      	adds	r7, #80	; 0x50
 8012476:	46bd      	mov	sp, r7
 8012478:	bdb0      	pop	{r4, r5, r7, pc}
 801247a:	bf00      	nop
 801247c:	2000466c 	.word	0x2000466c
 8012480:	2000464c 	.word	0x2000464c
 8012484:	20004676 	.word	0x20004676
 8012488:	0801a370 	.word	0x0801a370
 801248c:	0801a718 	.word	0x0801a718
 8012490:	0801a3bc 	.word	0x0801a3bc

08012494 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012494:	b480      	push	{r7}
 8012496:	b083      	sub	sp, #12
 8012498:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801249a:	4b15      	ldr	r3, [pc, #84]	; (80124f0 <tcp_get_next_optbyte+0x5c>)
 801249c:	881b      	ldrh	r3, [r3, #0]
 801249e:	1c5a      	adds	r2, r3, #1
 80124a0:	b291      	uxth	r1, r2
 80124a2:	4a13      	ldr	r2, [pc, #76]	; (80124f0 <tcp_get_next_optbyte+0x5c>)
 80124a4:	8011      	strh	r1, [r2, #0]
 80124a6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80124a8:	4b12      	ldr	r3, [pc, #72]	; (80124f4 <tcp_get_next_optbyte+0x60>)
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d004      	beq.n	80124ba <tcp_get_next_optbyte+0x26>
 80124b0:	4b11      	ldr	r3, [pc, #68]	; (80124f8 <tcp_get_next_optbyte+0x64>)
 80124b2:	881b      	ldrh	r3, [r3, #0]
 80124b4:	88fa      	ldrh	r2, [r7, #6]
 80124b6:	429a      	cmp	r2, r3
 80124b8:	d208      	bcs.n	80124cc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80124ba:	4b10      	ldr	r3, [pc, #64]	; (80124fc <tcp_get_next_optbyte+0x68>)
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	3314      	adds	r3, #20
 80124c0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80124c2:	88fb      	ldrh	r3, [r7, #6]
 80124c4:	683a      	ldr	r2, [r7, #0]
 80124c6:	4413      	add	r3, r2
 80124c8:	781b      	ldrb	r3, [r3, #0]
 80124ca:	e00b      	b.n	80124e4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80124cc:	88fb      	ldrh	r3, [r7, #6]
 80124ce:	b2da      	uxtb	r2, r3
 80124d0:	4b09      	ldr	r3, [pc, #36]	; (80124f8 <tcp_get_next_optbyte+0x64>)
 80124d2:	881b      	ldrh	r3, [r3, #0]
 80124d4:	b2db      	uxtb	r3, r3
 80124d6:	1ad3      	subs	r3, r2, r3
 80124d8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80124da:	4b06      	ldr	r3, [pc, #24]	; (80124f4 <tcp_get_next_optbyte+0x60>)
 80124dc:	681a      	ldr	r2, [r3, #0]
 80124de:	797b      	ldrb	r3, [r7, #5]
 80124e0:	4413      	add	r3, r2
 80124e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80124e4:	4618      	mov	r0, r3
 80124e6:	370c      	adds	r7, #12
 80124e8:	46bd      	mov	sp, r7
 80124ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ee:	4770      	bx	lr
 80124f0:	20004668 	.word	0x20004668
 80124f4:	20004664 	.word	0x20004664
 80124f8:	20004662 	.word	0x20004662
 80124fc:	2000465c 	.word	0x2000465c

08012500 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012500:	b580      	push	{r7, lr}
 8012502:	b084      	sub	sp, #16
 8012504:	af00      	add	r7, sp, #0
 8012506:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d106      	bne.n	801251c <tcp_parseopt+0x1c>
 801250e:	4b31      	ldr	r3, [pc, #196]	; (80125d4 <tcp_parseopt+0xd4>)
 8012510:	f240 727d 	movw	r2, #1917	; 0x77d
 8012514:	4930      	ldr	r1, [pc, #192]	; (80125d8 <tcp_parseopt+0xd8>)
 8012516:	4831      	ldr	r0, [pc, #196]	; (80125dc <tcp_parseopt+0xdc>)
 8012518:	f004 fe18 	bl	801714c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801251c:	4b30      	ldr	r3, [pc, #192]	; (80125e0 <tcp_parseopt+0xe0>)
 801251e:	881b      	ldrh	r3, [r3, #0]
 8012520:	2b00      	cmp	r3, #0
 8012522:	d053      	beq.n	80125cc <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012524:	4b2f      	ldr	r3, [pc, #188]	; (80125e4 <tcp_parseopt+0xe4>)
 8012526:	2200      	movs	r2, #0
 8012528:	801a      	strh	r2, [r3, #0]
 801252a:	e043      	b.n	80125b4 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 801252c:	f7ff ffb2 	bl	8012494 <tcp_get_next_optbyte>
 8012530:	4603      	mov	r3, r0
 8012532:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012534:	7bfb      	ldrb	r3, [r7, #15]
 8012536:	2b01      	cmp	r3, #1
 8012538:	d03c      	beq.n	80125b4 <tcp_parseopt+0xb4>
 801253a:	2b02      	cmp	r3, #2
 801253c:	d002      	beq.n	8012544 <tcp_parseopt+0x44>
 801253e:	2b00      	cmp	r3, #0
 8012540:	d03f      	beq.n	80125c2 <tcp_parseopt+0xc2>
 8012542:	e026      	b.n	8012592 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012544:	f7ff ffa6 	bl	8012494 <tcp_get_next_optbyte>
 8012548:	4603      	mov	r3, r0
 801254a:	2b04      	cmp	r3, #4
 801254c:	d13b      	bne.n	80125c6 <tcp_parseopt+0xc6>
 801254e:	4b25      	ldr	r3, [pc, #148]	; (80125e4 <tcp_parseopt+0xe4>)
 8012550:	881b      	ldrh	r3, [r3, #0]
 8012552:	3302      	adds	r3, #2
 8012554:	4a22      	ldr	r2, [pc, #136]	; (80125e0 <tcp_parseopt+0xe0>)
 8012556:	8812      	ldrh	r2, [r2, #0]
 8012558:	4293      	cmp	r3, r2
 801255a:	dc34      	bgt.n	80125c6 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801255c:	f7ff ff9a 	bl	8012494 <tcp_get_next_optbyte>
 8012560:	4603      	mov	r3, r0
 8012562:	b29b      	uxth	r3, r3
 8012564:	021b      	lsls	r3, r3, #8
 8012566:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8012568:	f7ff ff94 	bl	8012494 <tcp_get_next_optbyte>
 801256c:	4603      	mov	r3, r0
 801256e:	b29a      	uxth	r2, r3
 8012570:	89bb      	ldrh	r3, [r7, #12]
 8012572:	4313      	orrs	r3, r2
 8012574:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8012576:	89bb      	ldrh	r3, [r7, #12]
 8012578:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801257c:	d804      	bhi.n	8012588 <tcp_parseopt+0x88>
 801257e:	89bb      	ldrh	r3, [r7, #12]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d001      	beq.n	8012588 <tcp_parseopt+0x88>
 8012584:	89ba      	ldrh	r2, [r7, #12]
 8012586:	e001      	b.n	801258c <tcp_parseopt+0x8c>
 8012588:	f44f 7206 	mov.w	r2, #536	; 0x218
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8012590:	e010      	b.n	80125b4 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8012592:	f7ff ff7f 	bl	8012494 <tcp_get_next_optbyte>
 8012596:	4603      	mov	r3, r0
 8012598:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801259a:	7afb      	ldrb	r3, [r7, #11]
 801259c:	2b01      	cmp	r3, #1
 801259e:	d914      	bls.n	80125ca <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80125a0:	7afb      	ldrb	r3, [r7, #11]
 80125a2:	b29a      	uxth	r2, r3
 80125a4:	4b0f      	ldr	r3, [pc, #60]	; (80125e4 <tcp_parseopt+0xe4>)
 80125a6:	881b      	ldrh	r3, [r3, #0]
 80125a8:	4413      	add	r3, r2
 80125aa:	b29b      	uxth	r3, r3
 80125ac:	3b02      	subs	r3, #2
 80125ae:	b29a      	uxth	r2, r3
 80125b0:	4b0c      	ldr	r3, [pc, #48]	; (80125e4 <tcp_parseopt+0xe4>)
 80125b2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80125b4:	4b0b      	ldr	r3, [pc, #44]	; (80125e4 <tcp_parseopt+0xe4>)
 80125b6:	881a      	ldrh	r2, [r3, #0]
 80125b8:	4b09      	ldr	r3, [pc, #36]	; (80125e0 <tcp_parseopt+0xe0>)
 80125ba:	881b      	ldrh	r3, [r3, #0]
 80125bc:	429a      	cmp	r2, r3
 80125be:	d3b5      	bcc.n	801252c <tcp_parseopt+0x2c>
 80125c0:	e004      	b.n	80125cc <tcp_parseopt+0xcc>
          return;
 80125c2:	bf00      	nop
 80125c4:	e002      	b.n	80125cc <tcp_parseopt+0xcc>
            return;
 80125c6:	bf00      	nop
 80125c8:	e000      	b.n	80125cc <tcp_parseopt+0xcc>
            return;
 80125ca:	bf00      	nop
      }
    }
  }
}
 80125cc:	3710      	adds	r7, #16
 80125ce:	46bd      	mov	sp, r7
 80125d0:	bd80      	pop	{r7, pc}
 80125d2:	bf00      	nop
 80125d4:	0801a370 	.word	0x0801a370
 80125d8:	0801a7d4 	.word	0x0801a7d4
 80125dc:	0801a3bc 	.word	0x0801a3bc
 80125e0:	20004660 	.word	0x20004660
 80125e4:	20004668 	.word	0x20004668

080125e8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80125e8:	b480      	push	{r7}
 80125ea:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80125ec:	4b05      	ldr	r3, [pc, #20]	; (8012604 <tcp_trigger_input_pcb_close+0x1c>)
 80125ee:	781b      	ldrb	r3, [r3, #0]
 80125f0:	f043 0310 	orr.w	r3, r3, #16
 80125f4:	b2da      	uxtb	r2, r3
 80125f6:	4b03      	ldr	r3, [pc, #12]	; (8012604 <tcp_trigger_input_pcb_close+0x1c>)
 80125f8:	701a      	strb	r2, [r3, #0]
}
 80125fa:	bf00      	nop
 80125fc:	46bd      	mov	sp, r7
 80125fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012602:	4770      	bx	lr
 8012604:	20004679 	.word	0x20004679

08012608 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012608:	b580      	push	{r7, lr}
 801260a:	b084      	sub	sp, #16
 801260c:	af00      	add	r7, sp, #0
 801260e:	60f8      	str	r0, [r7, #12]
 8012610:	60b9      	str	r1, [r7, #8]
 8012612:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	2b00      	cmp	r3, #0
 8012618:	d00a      	beq.n	8012630 <tcp_route+0x28>
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	7a1b      	ldrb	r3, [r3, #8]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d006      	beq.n	8012630 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8012622:	68fb      	ldr	r3, [r7, #12]
 8012624:	7a1b      	ldrb	r3, [r3, #8]
 8012626:	4618      	mov	r0, r3
 8012628:	f7fb f834 	bl	800d694 <netif_get_by_index>
 801262c:	4603      	mov	r3, r0
 801262e:	e003      	b.n	8012638 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012630:	6878      	ldr	r0, [r7, #4]
 8012632:	f003 f95d 	bl	80158f0 <ip4_route>
 8012636:	4603      	mov	r3, r0
  }
}
 8012638:	4618      	mov	r0, r3
 801263a:	3710      	adds	r7, #16
 801263c:	46bd      	mov	sp, r7
 801263e:	bd80      	pop	{r7, pc}

08012640 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8012640:	b590      	push	{r4, r7, lr}
 8012642:	b087      	sub	sp, #28
 8012644:	af00      	add	r7, sp, #0
 8012646:	60f8      	str	r0, [r7, #12]
 8012648:	60b9      	str	r1, [r7, #8]
 801264a:	603b      	str	r3, [r7, #0]
 801264c:	4613      	mov	r3, r2
 801264e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d105      	bne.n	8012662 <tcp_create_segment+0x22>
 8012656:	4b44      	ldr	r3, [pc, #272]	; (8012768 <tcp_create_segment+0x128>)
 8012658:	22a3      	movs	r2, #163	; 0xa3
 801265a:	4944      	ldr	r1, [pc, #272]	; (801276c <tcp_create_segment+0x12c>)
 801265c:	4844      	ldr	r0, [pc, #272]	; (8012770 <tcp_create_segment+0x130>)
 801265e:	f004 fd75 	bl	801714c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8012662:	68bb      	ldr	r3, [r7, #8]
 8012664:	2b00      	cmp	r3, #0
 8012666:	d105      	bne.n	8012674 <tcp_create_segment+0x34>
 8012668:	4b3f      	ldr	r3, [pc, #252]	; (8012768 <tcp_create_segment+0x128>)
 801266a:	22a4      	movs	r2, #164	; 0xa4
 801266c:	4941      	ldr	r1, [pc, #260]	; (8012774 <tcp_create_segment+0x134>)
 801266e:	4840      	ldr	r0, [pc, #256]	; (8012770 <tcp_create_segment+0x130>)
 8012670:	f004 fd6c 	bl	801714c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012674:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012678:	009b      	lsls	r3, r3, #2
 801267a:	b2db      	uxtb	r3, r3
 801267c:	f003 0304 	and.w	r3, r3, #4
 8012680:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012682:	2002      	movs	r0, #2
 8012684:	f7fa fca2 	bl	800cfcc <memp_malloc>
 8012688:	6138      	str	r0, [r7, #16]
 801268a:	693b      	ldr	r3, [r7, #16]
 801268c:	2b00      	cmp	r3, #0
 801268e:	d104      	bne.n	801269a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012690:	68b8      	ldr	r0, [r7, #8]
 8012692:	f7fb fbbb 	bl	800de0c <pbuf_free>
    return NULL;
 8012696:	2300      	movs	r3, #0
 8012698:	e061      	b.n	801275e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801269a:	693b      	ldr	r3, [r7, #16]
 801269c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80126a0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80126a2:	693b      	ldr	r3, [r7, #16]
 80126a4:	2200      	movs	r2, #0
 80126a6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80126a8:	693b      	ldr	r3, [r7, #16]
 80126aa:	68ba      	ldr	r2, [r7, #8]
 80126ac:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80126ae:	68bb      	ldr	r3, [r7, #8]
 80126b0:	891a      	ldrh	r2, [r3, #8]
 80126b2:	7dfb      	ldrb	r3, [r7, #23]
 80126b4:	b29b      	uxth	r3, r3
 80126b6:	429a      	cmp	r2, r3
 80126b8:	d205      	bcs.n	80126c6 <tcp_create_segment+0x86>
 80126ba:	4b2b      	ldr	r3, [pc, #172]	; (8012768 <tcp_create_segment+0x128>)
 80126bc:	22b0      	movs	r2, #176	; 0xb0
 80126be:	492e      	ldr	r1, [pc, #184]	; (8012778 <tcp_create_segment+0x138>)
 80126c0:	482b      	ldr	r0, [pc, #172]	; (8012770 <tcp_create_segment+0x130>)
 80126c2:	f004 fd43 	bl	801714c <iprintf>
  seg->len = p->tot_len - optlen;
 80126c6:	68bb      	ldr	r3, [r7, #8]
 80126c8:	891a      	ldrh	r2, [r3, #8]
 80126ca:	7dfb      	ldrb	r3, [r7, #23]
 80126cc:	b29b      	uxth	r3, r3
 80126ce:	1ad3      	subs	r3, r2, r3
 80126d0:	b29a      	uxth	r2, r3
 80126d2:	693b      	ldr	r3, [r7, #16]
 80126d4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80126d6:	2114      	movs	r1, #20
 80126d8:	68b8      	ldr	r0, [r7, #8]
 80126da:	f7fb facf 	bl	800dc7c <pbuf_add_header>
 80126de:	4603      	mov	r3, r0
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d004      	beq.n	80126ee <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80126e4:	6938      	ldr	r0, [r7, #16]
 80126e6:	f7fd f807 	bl	800f6f8 <tcp_seg_free>
    return NULL;
 80126ea:	2300      	movs	r3, #0
 80126ec:	e037      	b.n	801275e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80126ee:	693b      	ldr	r3, [r7, #16]
 80126f0:	685b      	ldr	r3, [r3, #4]
 80126f2:	685a      	ldr	r2, [r3, #4]
 80126f4:	693b      	ldr	r3, [r7, #16]
 80126f6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	8ada      	ldrh	r2, [r3, #22]
 80126fc:	693b      	ldr	r3, [r7, #16]
 80126fe:	68dc      	ldr	r4, [r3, #12]
 8012700:	4610      	mov	r0, r2
 8012702:	f7f9 ffaf 	bl	800c664 <lwip_htons>
 8012706:	4603      	mov	r3, r0
 8012708:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	8b1a      	ldrh	r2, [r3, #24]
 801270e:	693b      	ldr	r3, [r7, #16]
 8012710:	68dc      	ldr	r4, [r3, #12]
 8012712:	4610      	mov	r0, r2
 8012714:	f7f9 ffa6 	bl	800c664 <lwip_htons>
 8012718:	4603      	mov	r3, r0
 801271a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801271c:	693b      	ldr	r3, [r7, #16]
 801271e:	68dc      	ldr	r4, [r3, #12]
 8012720:	6838      	ldr	r0, [r7, #0]
 8012722:	f7f9 ffb4 	bl	800c68e <lwip_htonl>
 8012726:	4603      	mov	r3, r0
 8012728:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801272a:	7dfb      	ldrb	r3, [r7, #23]
 801272c:	089b      	lsrs	r3, r3, #2
 801272e:	b2db      	uxtb	r3, r3
 8012730:	b29b      	uxth	r3, r3
 8012732:	3305      	adds	r3, #5
 8012734:	b29b      	uxth	r3, r3
 8012736:	031b      	lsls	r3, r3, #12
 8012738:	b29a      	uxth	r2, r3
 801273a:	79fb      	ldrb	r3, [r7, #7]
 801273c:	b29b      	uxth	r3, r3
 801273e:	4313      	orrs	r3, r2
 8012740:	b29a      	uxth	r2, r3
 8012742:	693b      	ldr	r3, [r7, #16]
 8012744:	68dc      	ldr	r4, [r3, #12]
 8012746:	4610      	mov	r0, r2
 8012748:	f7f9 ff8c 	bl	800c664 <lwip_htons>
 801274c:	4603      	mov	r3, r0
 801274e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8012750:	693b      	ldr	r3, [r7, #16]
 8012752:	68db      	ldr	r3, [r3, #12]
 8012754:	2200      	movs	r2, #0
 8012756:	749a      	strb	r2, [r3, #18]
 8012758:	2200      	movs	r2, #0
 801275a:	74da      	strb	r2, [r3, #19]
  return seg;
 801275c:	693b      	ldr	r3, [r7, #16]
}
 801275e:	4618      	mov	r0, r3
 8012760:	371c      	adds	r7, #28
 8012762:	46bd      	mov	sp, r7
 8012764:	bd90      	pop	{r4, r7, pc}
 8012766:	bf00      	nop
 8012768:	0801a7f0 	.word	0x0801a7f0
 801276c:	0801a824 	.word	0x0801a824
 8012770:	0801a844 	.word	0x0801a844
 8012774:	0801a86c 	.word	0x0801a86c
 8012778:	0801a890 	.word	0x0801a890

0801277c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801277c:	b580      	push	{r7, lr}
 801277e:	b086      	sub	sp, #24
 8012780:	af00      	add	r7, sp, #0
 8012782:	607b      	str	r3, [r7, #4]
 8012784:	4603      	mov	r3, r0
 8012786:	73fb      	strb	r3, [r7, #15]
 8012788:	460b      	mov	r3, r1
 801278a:	81bb      	strh	r3, [r7, #12]
 801278c:	4613      	mov	r3, r2
 801278e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8012790:	89bb      	ldrh	r3, [r7, #12]
 8012792:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d105      	bne.n	80127a6 <tcp_pbuf_prealloc+0x2a>
 801279a:	4b30      	ldr	r3, [pc, #192]	; (801285c <tcp_pbuf_prealloc+0xe0>)
 801279c:	22e8      	movs	r2, #232	; 0xe8
 801279e:	4930      	ldr	r1, [pc, #192]	; (8012860 <tcp_pbuf_prealloc+0xe4>)
 80127a0:	4830      	ldr	r0, [pc, #192]	; (8012864 <tcp_pbuf_prealloc+0xe8>)
 80127a2:	f004 fcd3 	bl	801714c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80127a6:	6a3b      	ldr	r3, [r7, #32]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d105      	bne.n	80127b8 <tcp_pbuf_prealloc+0x3c>
 80127ac:	4b2b      	ldr	r3, [pc, #172]	; (801285c <tcp_pbuf_prealloc+0xe0>)
 80127ae:	22e9      	movs	r2, #233	; 0xe9
 80127b0:	492d      	ldr	r1, [pc, #180]	; (8012868 <tcp_pbuf_prealloc+0xec>)
 80127b2:	482c      	ldr	r0, [pc, #176]	; (8012864 <tcp_pbuf_prealloc+0xe8>)
 80127b4:	f004 fcca 	bl	801714c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80127b8:	89ba      	ldrh	r2, [r7, #12]
 80127ba:	897b      	ldrh	r3, [r7, #10]
 80127bc:	429a      	cmp	r2, r3
 80127be:	d221      	bcs.n	8012804 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80127c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80127c4:	f003 0302 	and.w	r3, r3, #2
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d111      	bne.n	80127f0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80127cc:	6a3b      	ldr	r3, [r7, #32]
 80127ce:	8b5b      	ldrh	r3, [r3, #26]
 80127d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d115      	bne.n	8012804 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80127d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d007      	beq.n	80127f0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80127e0:	6a3b      	ldr	r3, [r7, #32]
 80127e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d103      	bne.n	80127f0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80127e8:	6a3b      	ldr	r3, [r7, #32]
 80127ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d009      	beq.n	8012804 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80127f0:	89bb      	ldrh	r3, [r7, #12]
 80127f2:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80127f6:	f023 0203 	bic.w	r2, r3, #3
 80127fa:	897b      	ldrh	r3, [r7, #10]
 80127fc:	4293      	cmp	r3, r2
 80127fe:	bf28      	it	cs
 8012800:	4613      	movcs	r3, r2
 8012802:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8012804:	8af9      	ldrh	r1, [r7, #22]
 8012806:	7bfb      	ldrb	r3, [r7, #15]
 8012808:	f44f 7220 	mov.w	r2, #640	; 0x280
 801280c:	4618      	mov	r0, r3
 801280e:	f7fa ffeb 	bl	800d7e8 <pbuf_alloc>
 8012812:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012814:	693b      	ldr	r3, [r7, #16]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d101      	bne.n	801281e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801281a:	2300      	movs	r3, #0
 801281c:	e019      	b.n	8012852 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801281e:	693b      	ldr	r3, [r7, #16]
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	2b00      	cmp	r3, #0
 8012824:	d006      	beq.n	8012834 <tcp_pbuf_prealloc+0xb8>
 8012826:	4b0d      	ldr	r3, [pc, #52]	; (801285c <tcp_pbuf_prealloc+0xe0>)
 8012828:	f240 120b 	movw	r2, #267	; 0x10b
 801282c:	490f      	ldr	r1, [pc, #60]	; (801286c <tcp_pbuf_prealloc+0xf0>)
 801282e:	480d      	ldr	r0, [pc, #52]	; (8012864 <tcp_pbuf_prealloc+0xe8>)
 8012830:	f004 fc8c 	bl	801714c <iprintf>
  *oversize = p->len - length;
 8012834:	693b      	ldr	r3, [r7, #16]
 8012836:	895a      	ldrh	r2, [r3, #10]
 8012838:	89bb      	ldrh	r3, [r7, #12]
 801283a:	1ad3      	subs	r3, r2, r3
 801283c:	b29a      	uxth	r2, r3
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8012842:	693b      	ldr	r3, [r7, #16]
 8012844:	89ba      	ldrh	r2, [r7, #12]
 8012846:	811a      	strh	r2, [r3, #8]
 8012848:	693b      	ldr	r3, [r7, #16]
 801284a:	891a      	ldrh	r2, [r3, #8]
 801284c:	693b      	ldr	r3, [r7, #16]
 801284e:	815a      	strh	r2, [r3, #10]
  return p;
 8012850:	693b      	ldr	r3, [r7, #16]
}
 8012852:	4618      	mov	r0, r3
 8012854:	3718      	adds	r7, #24
 8012856:	46bd      	mov	sp, r7
 8012858:	bd80      	pop	{r7, pc}
 801285a:	bf00      	nop
 801285c:	0801a7f0 	.word	0x0801a7f0
 8012860:	0801a8a8 	.word	0x0801a8a8
 8012864:	0801a844 	.word	0x0801a844
 8012868:	0801a8cc 	.word	0x0801a8cc
 801286c:	0801a8ec 	.word	0x0801a8ec

08012870 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8012870:	b580      	push	{r7, lr}
 8012872:	b082      	sub	sp, #8
 8012874:	af00      	add	r7, sp, #0
 8012876:	6078      	str	r0, [r7, #4]
 8012878:	460b      	mov	r3, r1
 801287a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	2b00      	cmp	r3, #0
 8012880:	d106      	bne.n	8012890 <tcp_write_checks+0x20>
 8012882:	4b33      	ldr	r3, [pc, #204]	; (8012950 <tcp_write_checks+0xe0>)
 8012884:	f240 1233 	movw	r2, #307	; 0x133
 8012888:	4932      	ldr	r1, [pc, #200]	; (8012954 <tcp_write_checks+0xe4>)
 801288a:	4833      	ldr	r0, [pc, #204]	; (8012958 <tcp_write_checks+0xe8>)
 801288c:	f004 fc5e 	bl	801714c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	7d1b      	ldrb	r3, [r3, #20]
 8012894:	2b04      	cmp	r3, #4
 8012896:	d00e      	beq.n	80128b6 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801289c:	2b07      	cmp	r3, #7
 801289e:	d00a      	beq.n	80128b6 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80128a4:	2b02      	cmp	r3, #2
 80128a6:	d006      	beq.n	80128b6 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80128ac:	2b03      	cmp	r3, #3
 80128ae:	d002      	beq.n	80128b6 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80128b0:	f06f 030a 	mvn.w	r3, #10
 80128b4:	e048      	b.n	8012948 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80128b6:	887b      	ldrh	r3, [r7, #2]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d101      	bne.n	80128c0 <tcp_write_checks+0x50>
    return ERR_OK;
 80128bc:	2300      	movs	r3, #0
 80128be:	e043      	b.n	8012948 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80128c6:	887a      	ldrh	r2, [r7, #2]
 80128c8:	429a      	cmp	r2, r3
 80128ca:	d909      	bls.n	80128e0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	8b5b      	ldrh	r3, [r3, #26]
 80128d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80128d4:	b29a      	uxth	r2, r3
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80128da:	f04f 33ff 	mov.w	r3, #4294967295
 80128de:	e033      	b.n	8012948 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80128e6:	2b08      	cmp	r3, #8
 80128e8:	d909      	bls.n	80128fe <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	8b5b      	ldrh	r3, [r3, #26]
 80128ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80128f2:	b29a      	uxth	r2, r3
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80128f8:	f04f 33ff 	mov.w	r3, #4294967295
 80128fc:	e024      	b.n	8012948 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012904:	2b00      	cmp	r3, #0
 8012906:	d00f      	beq.n	8012928 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801290c:	2b00      	cmp	r3, #0
 801290e:	d11a      	bne.n	8012946 <tcp_write_checks+0xd6>
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012914:	2b00      	cmp	r3, #0
 8012916:	d116      	bne.n	8012946 <tcp_write_checks+0xd6>
 8012918:	4b0d      	ldr	r3, [pc, #52]	; (8012950 <tcp_write_checks+0xe0>)
 801291a:	f44f 72ab 	mov.w	r2, #342	; 0x156
 801291e:	490f      	ldr	r1, [pc, #60]	; (801295c <tcp_write_checks+0xec>)
 8012920:	480d      	ldr	r0, [pc, #52]	; (8012958 <tcp_write_checks+0xe8>)
 8012922:	f004 fc13 	bl	801714c <iprintf>
 8012926:	e00e      	b.n	8012946 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801292c:	2b00      	cmp	r3, #0
 801292e:	d103      	bne.n	8012938 <tcp_write_checks+0xc8>
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012934:	2b00      	cmp	r3, #0
 8012936:	d006      	beq.n	8012946 <tcp_write_checks+0xd6>
 8012938:	4b05      	ldr	r3, [pc, #20]	; (8012950 <tcp_write_checks+0xe0>)
 801293a:	f240 1259 	movw	r2, #345	; 0x159
 801293e:	4908      	ldr	r1, [pc, #32]	; (8012960 <tcp_write_checks+0xf0>)
 8012940:	4805      	ldr	r0, [pc, #20]	; (8012958 <tcp_write_checks+0xe8>)
 8012942:	f004 fc03 	bl	801714c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8012946:	2300      	movs	r3, #0
}
 8012948:	4618      	mov	r0, r3
 801294a:	3708      	adds	r7, #8
 801294c:	46bd      	mov	sp, r7
 801294e:	bd80      	pop	{r7, pc}
 8012950:	0801a7f0 	.word	0x0801a7f0
 8012954:	0801a900 	.word	0x0801a900
 8012958:	0801a844 	.word	0x0801a844
 801295c:	0801a920 	.word	0x0801a920
 8012960:	0801a95c 	.word	0x0801a95c

08012964 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8012964:	b590      	push	{r4, r7, lr}
 8012966:	b09b      	sub	sp, #108	; 0x6c
 8012968:	af04      	add	r7, sp, #16
 801296a:	60f8      	str	r0, [r7, #12]
 801296c:	60b9      	str	r1, [r7, #8]
 801296e:	4611      	mov	r1, r2
 8012970:	461a      	mov	r2, r3
 8012972:	460b      	mov	r3, r1
 8012974:	80fb      	strh	r3, [r7, #6]
 8012976:	4613      	mov	r3, r2
 8012978:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801297a:	2300      	movs	r3, #0
 801297c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801297e:	2300      	movs	r3, #0
 8012980:	653b      	str	r3, [r7, #80]	; 0x50
 8012982:	2300      	movs	r3, #0
 8012984:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012986:	2300      	movs	r3, #0
 8012988:	64bb      	str	r3, [r7, #72]	; 0x48
 801298a:	2300      	movs	r3, #0
 801298c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801298e:	2300      	movs	r3, #0
 8012990:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8012994:	2300      	movs	r3, #0
 8012996:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801299a:	2300      	movs	r3, #0
 801299c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801299e:	2300      	movs	r3, #0
 80129a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80129a2:	2300      	movs	r3, #0
 80129a4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d109      	bne.n	80129c0 <tcp_write+0x5c>
 80129ac:	4ba5      	ldr	r3, [pc, #660]	; (8012c44 <tcp_write+0x2e0>)
 80129ae:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80129b2:	49a5      	ldr	r1, [pc, #660]	; (8012c48 <tcp_write+0x2e4>)
 80129b4:	48a5      	ldr	r0, [pc, #660]	; (8012c4c <tcp_write+0x2e8>)
 80129b6:	f004 fbc9 	bl	801714c <iprintf>
 80129ba:	f06f 030f 	mvn.w	r3, #15
 80129be:	e32c      	b.n	801301a <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80129c6:	085b      	lsrs	r3, r3, #1
 80129c8:	b29a      	uxth	r2, r3
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80129ce:	4293      	cmp	r3, r2
 80129d0:	bf28      	it	cs
 80129d2:	4613      	movcs	r3, r2
 80129d4:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80129d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d102      	bne.n	80129e2 <tcp_write+0x7e>
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80129e0:	e000      	b.n	80129e4 <tcp_write+0x80>
 80129e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80129e4:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80129e6:	68bb      	ldr	r3, [r7, #8]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d109      	bne.n	8012a00 <tcp_write+0x9c>
 80129ec:	4b95      	ldr	r3, [pc, #596]	; (8012c44 <tcp_write+0x2e0>)
 80129ee:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 80129f2:	4997      	ldr	r1, [pc, #604]	; (8012c50 <tcp_write+0x2ec>)
 80129f4:	4895      	ldr	r0, [pc, #596]	; (8012c4c <tcp_write+0x2e8>)
 80129f6:	f004 fba9 	bl	801714c <iprintf>
 80129fa:	f06f 030f 	mvn.w	r3, #15
 80129fe:	e30c      	b.n	801301a <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8012a00:	88fb      	ldrh	r3, [r7, #6]
 8012a02:	4619      	mov	r1, r3
 8012a04:	68f8      	ldr	r0, [r7, #12]
 8012a06:	f7ff ff33 	bl	8012870 <tcp_write_checks>
 8012a0a:	4603      	mov	r3, r0
 8012a0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8012a10:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d002      	beq.n	8012a1e <tcp_write+0xba>
    return err;
 8012a18:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012a1c:	e2fd      	b.n	801301a <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012a24:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012a28:	2300      	movs	r3, #0
 8012a2a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	f000 80f7 	beq.w	8012c26 <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a3c:	653b      	str	r3, [r7, #80]	; 0x50
 8012a3e:	e002      	b.n	8012a46 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8012a40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d1f8      	bne.n	8012a40 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8012a4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a50:	7a9b      	ldrb	r3, [r3, #10]
 8012a52:	009b      	lsls	r3, r3, #2
 8012a54:	b29b      	uxth	r3, r3
 8012a56:	f003 0304 	and.w	r3, r3, #4
 8012a5a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8012a5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a60:	891b      	ldrh	r3, [r3, #8]
 8012a62:	4619      	mov	r1, r3
 8012a64:	8c3b      	ldrh	r3, [r7, #32]
 8012a66:	440b      	add	r3, r1
 8012a68:	429a      	cmp	r2, r3
 8012a6a:	da06      	bge.n	8012a7a <tcp_write+0x116>
 8012a6c:	4b75      	ldr	r3, [pc, #468]	; (8012c44 <tcp_write+0x2e0>)
 8012a6e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012a72:	4978      	ldr	r1, [pc, #480]	; (8012c54 <tcp_write+0x2f0>)
 8012a74:	4875      	ldr	r0, [pc, #468]	; (8012c4c <tcp_write+0x2e8>)
 8012a76:	f004 fb69 	bl	801714c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8012a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a7c:	891a      	ldrh	r2, [r3, #8]
 8012a7e:	8c3b      	ldrh	r3, [r7, #32]
 8012a80:	4413      	add	r3, r2
 8012a82:	b29b      	uxth	r3, r3
 8012a84:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012a86:	1ad3      	subs	r3, r2, r3
 8012a88:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012a90:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8012a92:	8a7b      	ldrh	r3, [r7, #18]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d027      	beq.n	8012ae8 <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8012a98:	8a7b      	ldrh	r3, [r7, #18]
 8012a9a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012a9c:	429a      	cmp	r2, r3
 8012a9e:	d206      	bcs.n	8012aae <tcp_write+0x14a>
 8012aa0:	4b68      	ldr	r3, [pc, #416]	; (8012c44 <tcp_write+0x2e0>)
 8012aa2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8012aa6:	496c      	ldr	r1, [pc, #432]	; (8012c58 <tcp_write+0x2f4>)
 8012aa8:	4868      	ldr	r0, [pc, #416]	; (8012c4c <tcp_write+0x2e8>)
 8012aaa:	f004 fb4f 	bl	801714c <iprintf>
      seg = last_unsent;
 8012aae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8012ab2:	8a7b      	ldrh	r3, [r7, #18]
 8012ab4:	88fa      	ldrh	r2, [r7, #6]
 8012ab6:	429a      	cmp	r2, r3
 8012ab8:	d901      	bls.n	8012abe <tcp_write+0x15a>
 8012aba:	8a7b      	ldrh	r3, [r7, #18]
 8012abc:	e000      	b.n	8012ac0 <tcp_write+0x15c>
 8012abe:	88fb      	ldrh	r3, [r7, #6]
 8012ac0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012ac2:	4293      	cmp	r3, r2
 8012ac4:	bfa8      	it	ge
 8012ac6:	4613      	movge	r3, r2
 8012ac8:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8012aca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012ace:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012ad0:	4413      	add	r3, r2
 8012ad2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8012ad6:	8a7a      	ldrh	r2, [r7, #18]
 8012ad8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012ada:	1ad3      	subs	r3, r2, r3
 8012adc:	b29b      	uxth	r3, r3
 8012ade:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8012ae0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012ae2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012ae4:	1ad3      	subs	r3, r2, r3
 8012ae6:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8012ae8:	8a7b      	ldrh	r3, [r7, #18]
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d00b      	beq.n	8012b06 <tcp_write+0x1a2>
 8012aee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012af2:	88fb      	ldrh	r3, [r7, #6]
 8012af4:	429a      	cmp	r2, r3
 8012af6:	d006      	beq.n	8012b06 <tcp_write+0x1a2>
 8012af8:	4b52      	ldr	r3, [pc, #328]	; (8012c44 <tcp_write+0x2e0>)
 8012afa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012afe:	4957      	ldr	r1, [pc, #348]	; (8012c5c <tcp_write+0x2f8>)
 8012b00:	4852      	ldr	r0, [pc, #328]	; (8012c4c <tcp_write+0x2e8>)
 8012b02:	f004 fb23 	bl	801714c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8012b06:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012b0a:	88fb      	ldrh	r3, [r7, #6]
 8012b0c:	429a      	cmp	r2, r3
 8012b0e:	f080 8168 	bcs.w	8012de2 <tcp_write+0x47e>
 8012b12:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	f000 8164 	beq.w	8012de2 <tcp_write+0x47e>
 8012b1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b1c:	891b      	ldrh	r3, [r3, #8]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	f000 815f 	beq.w	8012de2 <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8012b24:	88fa      	ldrh	r2, [r7, #6]
 8012b26:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012b2a:	1ad2      	subs	r2, r2, r3
 8012b2c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012b2e:	4293      	cmp	r3, r2
 8012b30:	bfa8      	it	ge
 8012b32:	4613      	movge	r3, r2
 8012b34:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8012b36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b38:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012b3a:	797b      	ldrb	r3, [r7, #5]
 8012b3c:	f003 0301 	and.w	r3, r3, #1
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d027      	beq.n	8012b94 <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8012b44:	f107 0012 	add.w	r0, r7, #18
 8012b48:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012b4a:	8bf9      	ldrh	r1, [r7, #30]
 8012b4c:	2301      	movs	r3, #1
 8012b4e:	9302      	str	r3, [sp, #8]
 8012b50:	797b      	ldrb	r3, [r7, #5]
 8012b52:	9301      	str	r3, [sp, #4]
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	9300      	str	r3, [sp, #0]
 8012b58:	4603      	mov	r3, r0
 8012b5a:	2000      	movs	r0, #0
 8012b5c:	f7ff fe0e 	bl	801277c <tcp_pbuf_prealloc>
 8012b60:	6578      	str	r0, [r7, #84]	; 0x54
 8012b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	f000 8226 	beq.w	8012fb6 <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8012b6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012b6c:	6858      	ldr	r0, [r3, #4]
 8012b6e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012b72:	68ba      	ldr	r2, [r7, #8]
 8012b74:	4413      	add	r3, r2
 8012b76:	8bfa      	ldrh	r2, [r7, #30]
 8012b78:	4619      	mov	r1, r3
 8012b7a:	f004 faba 	bl	80170f2 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8012b7e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012b80:	f7fb f9d2 	bl	800df28 <pbuf_clen>
 8012b84:	4603      	mov	r3, r0
 8012b86:	461a      	mov	r2, r3
 8012b88:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012b8c:	4413      	add	r3, r2
 8012b8e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8012b92:	e041      	b.n	8012c18 <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8012b94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b96:	685b      	ldr	r3, [r3, #4]
 8012b98:	637b      	str	r3, [r7, #52]	; 0x34
 8012b9a:	e002      	b.n	8012ba2 <tcp_write+0x23e>
 8012b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	637b      	str	r3, [r7, #52]	; 0x34
 8012ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d1f8      	bne.n	8012b9c <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bac:	7b1b      	ldrb	r3, [r3, #12]
 8012bae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d115      	bne.n	8012be2 <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8012bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bb8:	685b      	ldr	r3, [r3, #4]
 8012bba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012bbc:	8952      	ldrh	r2, [r2, #10]
 8012bbe:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012bc0:	68ba      	ldr	r2, [r7, #8]
 8012bc2:	429a      	cmp	r2, r3
 8012bc4:	d10d      	bne.n	8012be2 <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8012bc6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d006      	beq.n	8012bdc <tcp_write+0x278>
 8012bce:	4b1d      	ldr	r3, [pc, #116]	; (8012c44 <tcp_write+0x2e0>)
 8012bd0:	f240 2231 	movw	r2, #561	; 0x231
 8012bd4:	4922      	ldr	r1, [pc, #136]	; (8012c60 <tcp_write+0x2fc>)
 8012bd6:	481d      	ldr	r0, [pc, #116]	; (8012c4c <tcp_write+0x2e8>)
 8012bd8:	f004 fab8 	bl	801714c <iprintf>
          extendlen = seglen;
 8012bdc:	8bfb      	ldrh	r3, [r7, #30]
 8012bde:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8012be0:	e01a      	b.n	8012c18 <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8012be2:	8bfb      	ldrh	r3, [r7, #30]
 8012be4:	2201      	movs	r2, #1
 8012be6:	4619      	mov	r1, r3
 8012be8:	2000      	movs	r0, #0
 8012bea:	f7fa fdfd 	bl	800d7e8 <pbuf_alloc>
 8012bee:	6578      	str	r0, [r7, #84]	; 0x54
 8012bf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	f000 81e1 	beq.w	8012fba <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8012bf8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012bfc:	68ba      	ldr	r2, [r7, #8]
 8012bfe:	441a      	add	r2, r3
 8012c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012c02:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8012c04:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012c06:	f7fb f98f 	bl	800df28 <pbuf_clen>
 8012c0a:	4603      	mov	r3, r0
 8012c0c:	461a      	mov	r2, r3
 8012c0e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012c12:	4413      	add	r3, r2
 8012c14:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8012c18:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012c1c:	8bfb      	ldrh	r3, [r7, #30]
 8012c1e:	4413      	add	r3, r2
 8012c20:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8012c24:	e0dd      	b.n	8012de2 <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	f000 80d8 	beq.w	8012de2 <tcp_write+0x47e>
 8012c32:	4b04      	ldr	r3, [pc, #16]	; (8012c44 <tcp_write+0x2e0>)
 8012c34:	f240 224b 	movw	r2, #587	; 0x24b
 8012c38:	490a      	ldr	r1, [pc, #40]	; (8012c64 <tcp_write+0x300>)
 8012c3a:	4804      	ldr	r0, [pc, #16]	; (8012c4c <tcp_write+0x2e8>)
 8012c3c:	f004 fa86 	bl	801714c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8012c40:	e0cf      	b.n	8012de2 <tcp_write+0x47e>
 8012c42:	bf00      	nop
 8012c44:	0801a7f0 	.word	0x0801a7f0
 8012c48:	0801a990 	.word	0x0801a990
 8012c4c:	0801a844 	.word	0x0801a844
 8012c50:	0801a9a8 	.word	0x0801a9a8
 8012c54:	0801a9dc 	.word	0x0801a9dc
 8012c58:	0801a9f4 	.word	0x0801a9f4
 8012c5c:	0801aa14 	.word	0x0801aa14
 8012c60:	0801aa34 	.word	0x0801aa34
 8012c64:	0801aa60 	.word	0x0801aa60
    struct pbuf *p;
    u16_t left = len - pos;
 8012c68:	88fa      	ldrh	r2, [r7, #6]
 8012c6a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012c6e:	1ad3      	subs	r3, r2, r3
 8012c70:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8012c72:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012c76:	b29b      	uxth	r3, r3
 8012c78:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012c7a:	1ad3      	subs	r3, r2, r3
 8012c7c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8012c7e:	8b7a      	ldrh	r2, [r7, #26]
 8012c80:	8bbb      	ldrh	r3, [r7, #28]
 8012c82:	4293      	cmp	r3, r2
 8012c84:	bf28      	it	cs
 8012c86:	4613      	movcs	r3, r2
 8012c88:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012c8a:	797b      	ldrb	r3, [r7, #5]
 8012c8c:	f003 0301 	and.w	r3, r3, #1
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d036      	beq.n	8012d02 <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8012c94:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012c98:	b29a      	uxth	r2, r3
 8012c9a:	8b3b      	ldrh	r3, [r7, #24]
 8012c9c:	4413      	add	r3, r2
 8012c9e:	b299      	uxth	r1, r3
 8012ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	bf0c      	ite	eq
 8012ca6:	2301      	moveq	r3, #1
 8012ca8:	2300      	movne	r3, #0
 8012caa:	b2db      	uxtb	r3, r3
 8012cac:	f107 0012 	add.w	r0, r7, #18
 8012cb0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012cb2:	9302      	str	r3, [sp, #8]
 8012cb4:	797b      	ldrb	r3, [r7, #5]
 8012cb6:	9301      	str	r3, [sp, #4]
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	9300      	str	r3, [sp, #0]
 8012cbc:	4603      	mov	r3, r0
 8012cbe:	2036      	movs	r0, #54	; 0x36
 8012cc0:	f7ff fd5c 	bl	801277c <tcp_pbuf_prealloc>
 8012cc4:	6338      	str	r0, [r7, #48]	; 0x30
 8012cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	f000 8178 	beq.w	8012fbe <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8012cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cd0:	895b      	ldrh	r3, [r3, #10]
 8012cd2:	8b3a      	ldrh	r2, [r7, #24]
 8012cd4:	429a      	cmp	r2, r3
 8012cd6:	d906      	bls.n	8012ce6 <tcp_write+0x382>
 8012cd8:	4b8c      	ldr	r3, [pc, #560]	; (8012f0c <tcp_write+0x5a8>)
 8012cda:	f240 2267 	movw	r2, #615	; 0x267
 8012cde:	498c      	ldr	r1, [pc, #560]	; (8012f10 <tcp_write+0x5ac>)
 8012ce0:	488c      	ldr	r0, [pc, #560]	; (8012f14 <tcp_write+0x5b0>)
 8012ce2:	f004 fa33 	bl	801714c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8012ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ce8:	685a      	ldr	r2, [r3, #4]
 8012cea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012cee:	18d0      	adds	r0, r2, r3
 8012cf0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012cf4:	68ba      	ldr	r2, [r7, #8]
 8012cf6:	4413      	add	r3, r2
 8012cf8:	8b3a      	ldrh	r2, [r7, #24]
 8012cfa:	4619      	mov	r1, r3
 8012cfc:	f004 f9f9 	bl	80170f2 <memcpy>
 8012d00:	e02f      	b.n	8012d62 <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8012d02:	8a7b      	ldrh	r3, [r7, #18]
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d006      	beq.n	8012d16 <tcp_write+0x3b2>
 8012d08:	4b80      	ldr	r3, [pc, #512]	; (8012f0c <tcp_write+0x5a8>)
 8012d0a:	f240 2271 	movw	r2, #625	; 0x271
 8012d0e:	4982      	ldr	r1, [pc, #520]	; (8012f18 <tcp_write+0x5b4>)
 8012d10:	4880      	ldr	r0, [pc, #512]	; (8012f14 <tcp_write+0x5b0>)
 8012d12:	f004 fa1b 	bl	801714c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8012d16:	8b3b      	ldrh	r3, [r7, #24]
 8012d18:	2201      	movs	r2, #1
 8012d1a:	4619      	mov	r1, r3
 8012d1c:	2036      	movs	r0, #54	; 0x36
 8012d1e:	f7fa fd63 	bl	800d7e8 <pbuf_alloc>
 8012d22:	6178      	str	r0, [r7, #20]
 8012d24:	697b      	ldr	r3, [r7, #20]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	f000 814b 	beq.w	8012fc2 <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8012d2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012d30:	68ba      	ldr	r2, [r7, #8]
 8012d32:	441a      	add	r2, r3
 8012d34:	697b      	ldr	r3, [r7, #20]
 8012d36:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012d38:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012d3c:	b29b      	uxth	r3, r3
 8012d3e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012d42:	4619      	mov	r1, r3
 8012d44:	2036      	movs	r0, #54	; 0x36
 8012d46:	f7fa fd4f 	bl	800d7e8 <pbuf_alloc>
 8012d4a:	6338      	str	r0, [r7, #48]	; 0x30
 8012d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d103      	bne.n	8012d5a <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8012d52:	6978      	ldr	r0, [r7, #20]
 8012d54:	f7fb f85a 	bl	800de0c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8012d58:	e136      	b.n	8012fc8 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8012d5a:	6979      	ldr	r1, [r7, #20]
 8012d5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d5e:	f7fb f923 	bl	800dfa8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8012d62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d64:	f7fb f8e0 	bl	800df28 <pbuf_clen>
 8012d68:	4603      	mov	r3, r0
 8012d6a:	461a      	mov	r2, r3
 8012d6c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012d70:	4413      	add	r3, r2
 8012d72:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8012d76:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012d7a:	2b09      	cmp	r3, #9
 8012d7c:	d903      	bls.n	8012d86 <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8012d7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d80:	f7fb f844 	bl	800de0c <pbuf_free>
      goto memerr;
 8012d84:	e120      	b.n	8012fc8 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012d8a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012d8e:	441a      	add	r2, r3
 8012d90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d94:	9300      	str	r3, [sp, #0]
 8012d96:	4613      	mov	r3, r2
 8012d98:	2200      	movs	r2, #0
 8012d9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012d9c:	68f8      	ldr	r0, [r7, #12]
 8012d9e:	f7ff fc4f 	bl	8012640 <tcp_create_segment>
 8012da2:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	f000 810d 	beq.w	8012fc6 <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8012dac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d102      	bne.n	8012db8 <tcp_write+0x454>
      queue = seg;
 8012db2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012db4:	647b      	str	r3, [r7, #68]	; 0x44
 8012db6:	e00c      	b.n	8012dd2 <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8012db8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d106      	bne.n	8012dcc <tcp_write+0x468>
 8012dbe:	4b53      	ldr	r3, [pc, #332]	; (8012f0c <tcp_write+0x5a8>)
 8012dc0:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012dc4:	4955      	ldr	r1, [pc, #340]	; (8012f1c <tcp_write+0x5b8>)
 8012dc6:	4853      	ldr	r0, [pc, #332]	; (8012f14 <tcp_write+0x5b0>)
 8012dc8:	f004 f9c0 	bl	801714c <iprintf>
      prev_seg->next = seg;
 8012dcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012dce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012dd0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8012dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012dd4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8012dd6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012dda:	8b3b      	ldrh	r3, [r7, #24]
 8012ddc:	4413      	add	r3, r2
 8012dde:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8012de2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012de6:	88fb      	ldrh	r3, [r7, #6]
 8012de8:	429a      	cmp	r2, r3
 8012dea:	f4ff af3d 	bcc.w	8012c68 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8012dee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d02c      	beq.n	8012e4e <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8012df4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012df6:	685b      	ldr	r3, [r3, #4]
 8012df8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012dfa:	e01e      	b.n	8012e3a <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 8012dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dfe:	891a      	ldrh	r2, [r3, #8]
 8012e00:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012e02:	4413      	add	r3, r2
 8012e04:	b29a      	uxth	r2, r3
 8012e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e08:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8012e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d110      	bne.n	8012e34 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8012e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e14:	685b      	ldr	r3, [r3, #4]
 8012e16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012e18:	8952      	ldrh	r2, [r2, #10]
 8012e1a:	4413      	add	r3, r2
 8012e1c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012e1e:	68b9      	ldr	r1, [r7, #8]
 8012e20:	4618      	mov	r0, r3
 8012e22:	f004 f966 	bl	80170f2 <memcpy>
        p->len += oversize_used;
 8012e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e28:	895a      	ldrh	r2, [r3, #10]
 8012e2a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012e2c:	4413      	add	r3, r2
 8012e2e:	b29a      	uxth	r2, r3
 8012e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e32:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8012e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d1dd      	bne.n	8012dfc <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 8012e40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e42:	891a      	ldrh	r2, [r3, #8]
 8012e44:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012e46:	4413      	add	r3, r2
 8012e48:	b29a      	uxth	r2, r3
 8012e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e4c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8012e4e:	8a7a      	ldrh	r2, [r7, #18]
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8012e56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d018      	beq.n	8012e8e <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8012e5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d106      	bne.n	8012e70 <tcp_write+0x50c>
 8012e62:	4b2a      	ldr	r3, [pc, #168]	; (8012f0c <tcp_write+0x5a8>)
 8012e64:	f240 22e1 	movw	r2, #737	; 0x2e1
 8012e68:	492d      	ldr	r1, [pc, #180]	; (8012f20 <tcp_write+0x5bc>)
 8012e6a:	482a      	ldr	r0, [pc, #168]	; (8012f14 <tcp_write+0x5b0>)
 8012e6c:	f004 f96e 	bl	801714c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012e70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e72:	685b      	ldr	r3, [r3, #4]
 8012e74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012e76:	4618      	mov	r0, r3
 8012e78:	f7fb f896 	bl	800dfa8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8012e7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e7e:	891a      	ldrh	r2, [r3, #8]
 8012e80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012e82:	891b      	ldrh	r3, [r3, #8]
 8012e84:	4413      	add	r3, r2
 8012e86:	b29a      	uxth	r2, r3
 8012e88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e8a:	811a      	strh	r2, [r3, #8]
 8012e8c:	e037      	b.n	8012efe <tcp_write+0x59a>
  } else if (extendlen > 0) {
 8012e8e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d034      	beq.n	8012efe <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012e94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d003      	beq.n	8012ea2 <tcp_write+0x53e>
 8012e9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e9c:	685b      	ldr	r3, [r3, #4]
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d106      	bne.n	8012eb0 <tcp_write+0x54c>
 8012ea2:	4b1a      	ldr	r3, [pc, #104]	; (8012f0c <tcp_write+0x5a8>)
 8012ea4:	f240 22e7 	movw	r2, #743	; 0x2e7
 8012ea8:	491e      	ldr	r1, [pc, #120]	; (8012f24 <tcp_write+0x5c0>)
 8012eaa:	481a      	ldr	r0, [pc, #104]	; (8012f14 <tcp_write+0x5b0>)
 8012eac:	f004 f94e 	bl	801714c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012eb2:	685b      	ldr	r3, [r3, #4]
 8012eb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8012eb6:	e009      	b.n	8012ecc <tcp_write+0x568>
      p->tot_len += extendlen;
 8012eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eba:	891a      	ldrh	r2, [r3, #8]
 8012ebc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012ebe:	4413      	add	r3, r2
 8012ec0:	b29a      	uxth	r2, r3
 8012ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ec4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	62bb      	str	r3, [r7, #40]	; 0x28
 8012ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d1f1      	bne.n	8012eb8 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 8012ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ed6:	891a      	ldrh	r2, [r3, #8]
 8012ed8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012eda:	4413      	add	r3, r2
 8012edc:	b29a      	uxth	r2, r3
 8012ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ee0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8012ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ee4:	895a      	ldrh	r2, [r3, #10]
 8012ee6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012ee8:	4413      	add	r3, r2
 8012eea:	b29a      	uxth	r2, r3
 8012eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eee:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8012ef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ef2:	891a      	ldrh	r2, [r3, #8]
 8012ef4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012ef6:	4413      	add	r3, r2
 8012ef8:	b29a      	uxth	r2, r3
 8012efa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012efc:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8012efe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d111      	bne.n	8012f28 <tcp_write+0x5c4>
    pcb->unsent = queue;
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012f08:	66da      	str	r2, [r3, #108]	; 0x6c
 8012f0a:	e010      	b.n	8012f2e <tcp_write+0x5ca>
 8012f0c:	0801a7f0 	.word	0x0801a7f0
 8012f10:	0801aa90 	.word	0x0801aa90
 8012f14:	0801a844 	.word	0x0801a844
 8012f18:	0801aad0 	.word	0x0801aad0
 8012f1c:	0801aae0 	.word	0x0801aae0
 8012f20:	0801aaf4 	.word	0x0801aaf4
 8012f24:	0801ab2c 	.word	0x0801ab2c
  } else {
    last_unsent->next = queue;
 8012f28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012f2c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012f32:	88fb      	ldrh	r3, [r7, #6]
 8012f34:	441a      	add	r2, r3
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012f40:	88fb      	ldrh	r3, [r7, #6]
 8012f42:	1ad3      	subs	r3, r2, r3
 8012f44:	b29a      	uxth	r2, r3
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012f52:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d00e      	beq.n	8012f7e <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d10a      	bne.n	8012f7e <tcp_write+0x61a>
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d106      	bne.n	8012f7e <tcp_write+0x61a>
 8012f70:	4b2c      	ldr	r3, [pc, #176]	; (8013024 <tcp_write+0x6c0>)
 8012f72:	f240 3213 	movw	r2, #787	; 0x313
 8012f76:	492c      	ldr	r1, [pc, #176]	; (8013028 <tcp_write+0x6c4>)
 8012f78:	482c      	ldr	r0, [pc, #176]	; (801302c <tcp_write+0x6c8>)
 8012f7a:	f004 f8e7 	bl	801714c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8012f7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d016      	beq.n	8012fb2 <tcp_write+0x64e>
 8012f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f86:	68db      	ldr	r3, [r3, #12]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d012      	beq.n	8012fb2 <tcp_write+0x64e>
 8012f8c:	797b      	ldrb	r3, [r7, #5]
 8012f8e:	f003 0302 	and.w	r3, r3, #2
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d10d      	bne.n	8012fb2 <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8012f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f98:	68db      	ldr	r3, [r3, #12]
 8012f9a:	899b      	ldrh	r3, [r3, #12]
 8012f9c:	b29c      	uxth	r4, r3
 8012f9e:	2008      	movs	r0, #8
 8012fa0:	f7f9 fb60 	bl	800c664 <lwip_htons>
 8012fa4:	4603      	mov	r3, r0
 8012fa6:	461a      	mov	r2, r3
 8012fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012faa:	68db      	ldr	r3, [r3, #12]
 8012fac:	4322      	orrs	r2, r4
 8012fae:	b292      	uxth	r2, r2
 8012fb0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	e031      	b.n	801301a <tcp_write+0x6b6>
          goto memerr;
 8012fb6:	bf00      	nop
 8012fb8:	e006      	b.n	8012fc8 <tcp_write+0x664>
            goto memerr;
 8012fba:	bf00      	nop
 8012fbc:	e004      	b.n	8012fc8 <tcp_write+0x664>
        goto memerr;
 8012fbe:	bf00      	nop
 8012fc0:	e002      	b.n	8012fc8 <tcp_write+0x664>
        goto memerr;
 8012fc2:	bf00      	nop
 8012fc4:	e000      	b.n	8012fc8 <tcp_write+0x664>
      goto memerr;
 8012fc6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	8b5b      	ldrh	r3, [r3, #26]
 8012fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012fd0:	b29a      	uxth	r2, r3
 8012fd2:	68fb      	ldr	r3, [r7, #12]
 8012fd4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8012fd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d002      	beq.n	8012fe2 <tcp_write+0x67e>
    pbuf_free(concat_p);
 8012fdc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012fde:	f7fa ff15 	bl	800de0c <pbuf_free>
  }
  if (queue != NULL) {
 8012fe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d002      	beq.n	8012fee <tcp_write+0x68a>
    tcp_segs_free(queue);
 8012fe8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012fea:	f7fc fb71 	bl	800f6d0 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d00e      	beq.n	8013016 <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d10a      	bne.n	8013016 <tcp_write+0x6b2>
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013004:	2b00      	cmp	r3, #0
 8013006:	d106      	bne.n	8013016 <tcp_write+0x6b2>
 8013008:	4b06      	ldr	r3, [pc, #24]	; (8013024 <tcp_write+0x6c0>)
 801300a:	f44f 724a 	mov.w	r2, #808	; 0x328
 801300e:	4906      	ldr	r1, [pc, #24]	; (8013028 <tcp_write+0x6c4>)
 8013010:	4806      	ldr	r0, [pc, #24]	; (801302c <tcp_write+0x6c8>)
 8013012:	f004 f89b 	bl	801714c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8013016:	f04f 33ff 	mov.w	r3, #4294967295
}
 801301a:	4618      	mov	r0, r3
 801301c:	375c      	adds	r7, #92	; 0x5c
 801301e:	46bd      	mov	sp, r7
 8013020:	bd90      	pop	{r4, r7, pc}
 8013022:	bf00      	nop
 8013024:	0801a7f0 	.word	0x0801a7f0
 8013028:	0801ab64 	.word	0x0801ab64
 801302c:	0801a844 	.word	0x0801a844

08013030 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8013030:	b590      	push	{r4, r7, lr}
 8013032:	b08b      	sub	sp, #44	; 0x2c
 8013034:	af02      	add	r7, sp, #8
 8013036:	6078      	str	r0, [r7, #4]
 8013038:	460b      	mov	r3, r1
 801303a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801303c:	2300      	movs	r3, #0
 801303e:	61fb      	str	r3, [r7, #28]
 8013040:	2300      	movs	r3, #0
 8013042:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013044:	2300      	movs	r3, #0
 8013046:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d106      	bne.n	801305c <tcp_split_unsent_seg+0x2c>
 801304e:	4b95      	ldr	r3, [pc, #596]	; (80132a4 <tcp_split_unsent_seg+0x274>)
 8013050:	f240 324b 	movw	r2, #843	; 0x34b
 8013054:	4994      	ldr	r1, [pc, #592]	; (80132a8 <tcp_split_unsent_seg+0x278>)
 8013056:	4895      	ldr	r0, [pc, #596]	; (80132ac <tcp_split_unsent_seg+0x27c>)
 8013058:	f004 f878 	bl	801714c <iprintf>

  useg = pcb->unsent;
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013060:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8013062:	697b      	ldr	r3, [r7, #20]
 8013064:	2b00      	cmp	r3, #0
 8013066:	d102      	bne.n	801306e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013068:	f04f 33ff 	mov.w	r3, #4294967295
 801306c:	e116      	b.n	801329c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801306e:	887b      	ldrh	r3, [r7, #2]
 8013070:	2b00      	cmp	r3, #0
 8013072:	d109      	bne.n	8013088 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013074:	4b8b      	ldr	r3, [pc, #556]	; (80132a4 <tcp_split_unsent_seg+0x274>)
 8013076:	f240 3253 	movw	r2, #851	; 0x353
 801307a:	498d      	ldr	r1, [pc, #564]	; (80132b0 <tcp_split_unsent_seg+0x280>)
 801307c:	488b      	ldr	r0, [pc, #556]	; (80132ac <tcp_split_unsent_seg+0x27c>)
 801307e:	f004 f865 	bl	801714c <iprintf>
    return ERR_VAL;
 8013082:	f06f 0305 	mvn.w	r3, #5
 8013086:	e109      	b.n	801329c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8013088:	697b      	ldr	r3, [r7, #20]
 801308a:	891b      	ldrh	r3, [r3, #8]
 801308c:	887a      	ldrh	r2, [r7, #2]
 801308e:	429a      	cmp	r2, r3
 8013090:	d301      	bcc.n	8013096 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8013092:	2300      	movs	r3, #0
 8013094:	e102      	b.n	801329c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801309a:	887a      	ldrh	r2, [r7, #2]
 801309c:	429a      	cmp	r2, r3
 801309e:	d906      	bls.n	80130ae <tcp_split_unsent_seg+0x7e>
 80130a0:	4b80      	ldr	r3, [pc, #512]	; (80132a4 <tcp_split_unsent_seg+0x274>)
 80130a2:	f240 325b 	movw	r2, #859	; 0x35b
 80130a6:	4983      	ldr	r1, [pc, #524]	; (80132b4 <tcp_split_unsent_seg+0x284>)
 80130a8:	4880      	ldr	r0, [pc, #512]	; (80132ac <tcp_split_unsent_seg+0x27c>)
 80130aa:	f004 f84f 	bl	801714c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80130ae:	697b      	ldr	r3, [r7, #20]
 80130b0:	891b      	ldrh	r3, [r3, #8]
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d106      	bne.n	80130c4 <tcp_split_unsent_seg+0x94>
 80130b6:	4b7b      	ldr	r3, [pc, #492]	; (80132a4 <tcp_split_unsent_seg+0x274>)
 80130b8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80130bc:	497e      	ldr	r1, [pc, #504]	; (80132b8 <tcp_split_unsent_seg+0x288>)
 80130be:	487b      	ldr	r0, [pc, #492]	; (80132ac <tcp_split_unsent_seg+0x27c>)
 80130c0:	f004 f844 	bl	801714c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80130c4:	697b      	ldr	r3, [r7, #20]
 80130c6:	7a9b      	ldrb	r3, [r3, #10]
 80130c8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80130ca:	7bfb      	ldrb	r3, [r7, #15]
 80130cc:	009b      	lsls	r3, r3, #2
 80130ce:	b2db      	uxtb	r3, r3
 80130d0:	f003 0304 	and.w	r3, r3, #4
 80130d4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80130d6:	697b      	ldr	r3, [r7, #20]
 80130d8:	891a      	ldrh	r2, [r3, #8]
 80130da:	887b      	ldrh	r3, [r7, #2]
 80130dc:	1ad3      	subs	r3, r2, r3
 80130de:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80130e0:	7bbb      	ldrb	r3, [r7, #14]
 80130e2:	b29a      	uxth	r2, r3
 80130e4:	89bb      	ldrh	r3, [r7, #12]
 80130e6:	4413      	add	r3, r2
 80130e8:	b29b      	uxth	r3, r3
 80130ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 80130ee:	4619      	mov	r1, r3
 80130f0:	2036      	movs	r0, #54	; 0x36
 80130f2:	f7fa fb79 	bl	800d7e8 <pbuf_alloc>
 80130f6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80130f8:	693b      	ldr	r3, [r7, #16]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	f000 80b7 	beq.w	801326e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8013100:	697b      	ldr	r3, [r7, #20]
 8013102:	685b      	ldr	r3, [r3, #4]
 8013104:	891a      	ldrh	r2, [r3, #8]
 8013106:	697b      	ldr	r3, [r7, #20]
 8013108:	891b      	ldrh	r3, [r3, #8]
 801310a:	1ad3      	subs	r3, r2, r3
 801310c:	b29a      	uxth	r2, r3
 801310e:	887b      	ldrh	r3, [r7, #2]
 8013110:	4413      	add	r3, r2
 8013112:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8013114:	697b      	ldr	r3, [r7, #20]
 8013116:	6858      	ldr	r0, [r3, #4]
 8013118:	693b      	ldr	r3, [r7, #16]
 801311a:	685a      	ldr	r2, [r3, #4]
 801311c:	7bbb      	ldrb	r3, [r7, #14]
 801311e:	18d1      	adds	r1, r2, r3
 8013120:	897b      	ldrh	r3, [r7, #10]
 8013122:	89ba      	ldrh	r2, [r7, #12]
 8013124:	f7fb f868 	bl	800e1f8 <pbuf_copy_partial>
 8013128:	4603      	mov	r3, r0
 801312a:	461a      	mov	r2, r3
 801312c:	89bb      	ldrh	r3, [r7, #12]
 801312e:	4293      	cmp	r3, r2
 8013130:	f040 809f 	bne.w	8013272 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013134:	697b      	ldr	r3, [r7, #20]
 8013136:	68db      	ldr	r3, [r3, #12]
 8013138:	899b      	ldrh	r3, [r3, #12]
 801313a:	b29b      	uxth	r3, r3
 801313c:	4618      	mov	r0, r3
 801313e:	f7f9 fa91 	bl	800c664 <lwip_htons>
 8013142:	4603      	mov	r3, r0
 8013144:	b2db      	uxtb	r3, r3
 8013146:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801314a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801314c:	2300      	movs	r3, #0
 801314e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8013150:	7efb      	ldrb	r3, [r7, #27]
 8013152:	f003 0308 	and.w	r3, r3, #8
 8013156:	2b00      	cmp	r3, #0
 8013158:	d007      	beq.n	801316a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801315a:	7efb      	ldrb	r3, [r7, #27]
 801315c:	f023 0308 	bic.w	r3, r3, #8
 8013160:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8013162:	7ebb      	ldrb	r3, [r7, #26]
 8013164:	f043 0308 	orr.w	r3, r3, #8
 8013168:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801316a:	7efb      	ldrb	r3, [r7, #27]
 801316c:	f003 0301 	and.w	r3, r3, #1
 8013170:	2b00      	cmp	r3, #0
 8013172:	d007      	beq.n	8013184 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013174:	7efb      	ldrb	r3, [r7, #27]
 8013176:	f023 0301 	bic.w	r3, r3, #1
 801317a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801317c:	7ebb      	ldrb	r3, [r7, #26]
 801317e:	f043 0301 	orr.w	r3, r3, #1
 8013182:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013184:	697b      	ldr	r3, [r7, #20]
 8013186:	68db      	ldr	r3, [r3, #12]
 8013188:	685b      	ldr	r3, [r3, #4]
 801318a:	4618      	mov	r0, r3
 801318c:	f7f9 fa7f 	bl	800c68e <lwip_htonl>
 8013190:	4602      	mov	r2, r0
 8013192:	887b      	ldrh	r3, [r7, #2]
 8013194:	18d1      	adds	r1, r2, r3
 8013196:	7eba      	ldrb	r2, [r7, #26]
 8013198:	7bfb      	ldrb	r3, [r7, #15]
 801319a:	9300      	str	r3, [sp, #0]
 801319c:	460b      	mov	r3, r1
 801319e:	6939      	ldr	r1, [r7, #16]
 80131a0:	6878      	ldr	r0, [r7, #4]
 80131a2:	f7ff fa4d 	bl	8012640 <tcp_create_segment>
 80131a6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80131a8:	69fb      	ldr	r3, [r7, #28]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d063      	beq.n	8013276 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80131ae:	697b      	ldr	r3, [r7, #20]
 80131b0:	685b      	ldr	r3, [r3, #4]
 80131b2:	4618      	mov	r0, r3
 80131b4:	f7fa feb8 	bl	800df28 <pbuf_clen>
 80131b8:	4603      	mov	r3, r0
 80131ba:	461a      	mov	r2, r3
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80131c2:	1a9b      	subs	r3, r3, r2
 80131c4:	b29a      	uxth	r2, r3
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80131cc:	697b      	ldr	r3, [r7, #20]
 80131ce:	6858      	ldr	r0, [r3, #4]
 80131d0:	697b      	ldr	r3, [r7, #20]
 80131d2:	685b      	ldr	r3, [r3, #4]
 80131d4:	891a      	ldrh	r2, [r3, #8]
 80131d6:	89bb      	ldrh	r3, [r7, #12]
 80131d8:	1ad3      	subs	r3, r2, r3
 80131da:	b29b      	uxth	r3, r3
 80131dc:	4619      	mov	r1, r3
 80131de:	f7fa fc5d 	bl	800da9c <pbuf_realloc>
  useg->len -= remainder;
 80131e2:	697b      	ldr	r3, [r7, #20]
 80131e4:	891a      	ldrh	r2, [r3, #8]
 80131e6:	89bb      	ldrh	r3, [r7, #12]
 80131e8:	1ad3      	subs	r3, r2, r3
 80131ea:	b29a      	uxth	r2, r3
 80131ec:	697b      	ldr	r3, [r7, #20]
 80131ee:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80131f0:	697b      	ldr	r3, [r7, #20]
 80131f2:	68db      	ldr	r3, [r3, #12]
 80131f4:	899b      	ldrh	r3, [r3, #12]
 80131f6:	b29c      	uxth	r4, r3
 80131f8:	7efb      	ldrb	r3, [r7, #27]
 80131fa:	b29b      	uxth	r3, r3
 80131fc:	4618      	mov	r0, r3
 80131fe:	f7f9 fa31 	bl	800c664 <lwip_htons>
 8013202:	4603      	mov	r3, r0
 8013204:	461a      	mov	r2, r3
 8013206:	697b      	ldr	r3, [r7, #20]
 8013208:	68db      	ldr	r3, [r3, #12]
 801320a:	4322      	orrs	r2, r4
 801320c:	b292      	uxth	r2, r2
 801320e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013210:	697b      	ldr	r3, [r7, #20]
 8013212:	685b      	ldr	r3, [r3, #4]
 8013214:	4618      	mov	r0, r3
 8013216:	f7fa fe87 	bl	800df28 <pbuf_clen>
 801321a:	4603      	mov	r3, r0
 801321c:	461a      	mov	r2, r3
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013224:	4413      	add	r3, r2
 8013226:	b29a      	uxth	r2, r3
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801322e:	69fb      	ldr	r3, [r7, #28]
 8013230:	685b      	ldr	r3, [r3, #4]
 8013232:	4618      	mov	r0, r3
 8013234:	f7fa fe78 	bl	800df28 <pbuf_clen>
 8013238:	4603      	mov	r3, r0
 801323a:	461a      	mov	r2, r3
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013242:	4413      	add	r3, r2
 8013244:	b29a      	uxth	r2, r3
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801324c:	697b      	ldr	r3, [r7, #20]
 801324e:	681a      	ldr	r2, [r3, #0]
 8013250:	69fb      	ldr	r3, [r7, #28]
 8013252:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013254:	697b      	ldr	r3, [r7, #20]
 8013256:	69fa      	ldr	r2, [r7, #28]
 8013258:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801325a:	69fb      	ldr	r3, [r7, #28]
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	2b00      	cmp	r3, #0
 8013260:	d103      	bne.n	801326a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	2200      	movs	r2, #0
 8013266:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801326a:	2300      	movs	r3, #0
 801326c:	e016      	b.n	801329c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801326e:	bf00      	nop
 8013270:	e002      	b.n	8013278 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013272:	bf00      	nop
 8013274:	e000      	b.n	8013278 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013276:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013278:	69fb      	ldr	r3, [r7, #28]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d006      	beq.n	801328c <tcp_split_unsent_seg+0x25c>
 801327e:	4b09      	ldr	r3, [pc, #36]	; (80132a4 <tcp_split_unsent_seg+0x274>)
 8013280:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8013284:	490d      	ldr	r1, [pc, #52]	; (80132bc <tcp_split_unsent_seg+0x28c>)
 8013286:	4809      	ldr	r0, [pc, #36]	; (80132ac <tcp_split_unsent_seg+0x27c>)
 8013288:	f003 ff60 	bl	801714c <iprintf>
  if (p != NULL) {
 801328c:	693b      	ldr	r3, [r7, #16]
 801328e:	2b00      	cmp	r3, #0
 8013290:	d002      	beq.n	8013298 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8013292:	6938      	ldr	r0, [r7, #16]
 8013294:	f7fa fdba 	bl	800de0c <pbuf_free>
  }

  return ERR_MEM;
 8013298:	f04f 33ff 	mov.w	r3, #4294967295
}
 801329c:	4618      	mov	r0, r3
 801329e:	3724      	adds	r7, #36	; 0x24
 80132a0:	46bd      	mov	sp, r7
 80132a2:	bd90      	pop	{r4, r7, pc}
 80132a4:	0801a7f0 	.word	0x0801a7f0
 80132a8:	0801ab84 	.word	0x0801ab84
 80132ac:	0801a844 	.word	0x0801a844
 80132b0:	0801aba8 	.word	0x0801aba8
 80132b4:	0801abcc 	.word	0x0801abcc
 80132b8:	0801abdc 	.word	0x0801abdc
 80132bc:	0801abec 	.word	0x0801abec

080132c0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80132c0:	b590      	push	{r4, r7, lr}
 80132c2:	b085      	sub	sp, #20
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d106      	bne.n	80132dc <tcp_send_fin+0x1c>
 80132ce:	4b21      	ldr	r3, [pc, #132]	; (8013354 <tcp_send_fin+0x94>)
 80132d0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80132d4:	4920      	ldr	r1, [pc, #128]	; (8013358 <tcp_send_fin+0x98>)
 80132d6:	4821      	ldr	r0, [pc, #132]	; (801335c <tcp_send_fin+0x9c>)
 80132d8:	f003 ff38 	bl	801714c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d02e      	beq.n	8013342 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80132e8:	60fb      	str	r3, [r7, #12]
 80132ea:	e002      	b.n	80132f2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d1f8      	bne.n	80132ec <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	68db      	ldr	r3, [r3, #12]
 80132fe:	899b      	ldrh	r3, [r3, #12]
 8013300:	b29b      	uxth	r3, r3
 8013302:	4618      	mov	r0, r3
 8013304:	f7f9 f9ae 	bl	800c664 <lwip_htons>
 8013308:	4603      	mov	r3, r0
 801330a:	b2db      	uxtb	r3, r3
 801330c:	f003 0307 	and.w	r3, r3, #7
 8013310:	2b00      	cmp	r3, #0
 8013312:	d116      	bne.n	8013342 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	68db      	ldr	r3, [r3, #12]
 8013318:	899b      	ldrh	r3, [r3, #12]
 801331a:	b29c      	uxth	r4, r3
 801331c:	2001      	movs	r0, #1
 801331e:	f7f9 f9a1 	bl	800c664 <lwip_htons>
 8013322:	4603      	mov	r3, r0
 8013324:	461a      	mov	r2, r3
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	68db      	ldr	r3, [r3, #12]
 801332a:	4322      	orrs	r2, r4
 801332c:	b292      	uxth	r2, r2
 801332e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	8b5b      	ldrh	r3, [r3, #26]
 8013334:	f043 0320 	orr.w	r3, r3, #32
 8013338:	b29a      	uxth	r2, r3
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801333e:	2300      	movs	r3, #0
 8013340:	e004      	b.n	801334c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013342:	2101      	movs	r1, #1
 8013344:	6878      	ldr	r0, [r7, #4]
 8013346:	f000 f80b 	bl	8013360 <tcp_enqueue_flags>
 801334a:	4603      	mov	r3, r0
}
 801334c:	4618      	mov	r0, r3
 801334e:	3714      	adds	r7, #20
 8013350:	46bd      	mov	sp, r7
 8013352:	bd90      	pop	{r4, r7, pc}
 8013354:	0801a7f0 	.word	0x0801a7f0
 8013358:	0801abf8 	.word	0x0801abf8
 801335c:	0801a844 	.word	0x0801a844

08013360 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013360:	b580      	push	{r7, lr}
 8013362:	b08a      	sub	sp, #40	; 0x28
 8013364:	af02      	add	r7, sp, #8
 8013366:	6078      	str	r0, [r7, #4]
 8013368:	460b      	mov	r3, r1
 801336a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801336c:	2300      	movs	r3, #0
 801336e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013370:	2300      	movs	r3, #0
 8013372:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013374:	78fb      	ldrb	r3, [r7, #3]
 8013376:	f003 0303 	and.w	r3, r3, #3
 801337a:	2b00      	cmp	r3, #0
 801337c:	d106      	bne.n	801338c <tcp_enqueue_flags+0x2c>
 801337e:	4b67      	ldr	r3, [pc, #412]	; (801351c <tcp_enqueue_flags+0x1bc>)
 8013380:	f240 4212 	movw	r2, #1042	; 0x412
 8013384:	4966      	ldr	r1, [pc, #408]	; (8013520 <tcp_enqueue_flags+0x1c0>)
 8013386:	4867      	ldr	r0, [pc, #412]	; (8013524 <tcp_enqueue_flags+0x1c4>)
 8013388:	f003 fee0 	bl	801714c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	2b00      	cmp	r3, #0
 8013390:	d106      	bne.n	80133a0 <tcp_enqueue_flags+0x40>
 8013392:	4b62      	ldr	r3, [pc, #392]	; (801351c <tcp_enqueue_flags+0x1bc>)
 8013394:	f240 4213 	movw	r2, #1043	; 0x413
 8013398:	4963      	ldr	r1, [pc, #396]	; (8013528 <tcp_enqueue_flags+0x1c8>)
 801339a:	4862      	ldr	r0, [pc, #392]	; (8013524 <tcp_enqueue_flags+0x1c4>)
 801339c:	f003 fed6 	bl	801714c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80133a0:	78fb      	ldrb	r3, [r7, #3]
 80133a2:	f003 0302 	and.w	r3, r3, #2
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d001      	beq.n	80133ae <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80133aa:	2301      	movs	r3, #1
 80133ac:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80133ae:	7ffb      	ldrb	r3, [r7, #31]
 80133b0:	009b      	lsls	r3, r3, #2
 80133b2:	b2db      	uxtb	r3, r3
 80133b4:	f003 0304 	and.w	r3, r3, #4
 80133b8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80133ba:	7dfb      	ldrb	r3, [r7, #23]
 80133bc:	b29b      	uxth	r3, r3
 80133be:	f44f 7220 	mov.w	r2, #640	; 0x280
 80133c2:	4619      	mov	r1, r3
 80133c4:	2036      	movs	r0, #54	; 0x36
 80133c6:	f7fa fa0f 	bl	800d7e8 <pbuf_alloc>
 80133ca:	6138      	str	r0, [r7, #16]
 80133cc:	693b      	ldr	r3, [r7, #16]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d109      	bne.n	80133e6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	8b5b      	ldrh	r3, [r3, #26]
 80133d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80133da:	b29a      	uxth	r2, r3
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80133e0:	f04f 33ff 	mov.w	r3, #4294967295
 80133e4:	e095      	b.n	8013512 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80133e6:	693b      	ldr	r3, [r7, #16]
 80133e8:	895a      	ldrh	r2, [r3, #10]
 80133ea:	7dfb      	ldrb	r3, [r7, #23]
 80133ec:	b29b      	uxth	r3, r3
 80133ee:	429a      	cmp	r2, r3
 80133f0:	d206      	bcs.n	8013400 <tcp_enqueue_flags+0xa0>
 80133f2:	4b4a      	ldr	r3, [pc, #296]	; (801351c <tcp_enqueue_flags+0x1bc>)
 80133f4:	f240 423a 	movw	r2, #1082	; 0x43a
 80133f8:	494c      	ldr	r1, [pc, #304]	; (801352c <tcp_enqueue_flags+0x1cc>)
 80133fa:	484a      	ldr	r0, [pc, #296]	; (8013524 <tcp_enqueue_flags+0x1c4>)
 80133fc:	f003 fea6 	bl	801714c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013404:	78fa      	ldrb	r2, [r7, #3]
 8013406:	7ffb      	ldrb	r3, [r7, #31]
 8013408:	9300      	str	r3, [sp, #0]
 801340a:	460b      	mov	r3, r1
 801340c:	6939      	ldr	r1, [r7, #16]
 801340e:	6878      	ldr	r0, [r7, #4]
 8013410:	f7ff f916 	bl	8012640 <tcp_create_segment>
 8013414:	60f8      	str	r0, [r7, #12]
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	2b00      	cmp	r3, #0
 801341a:	d109      	bne.n	8013430 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	8b5b      	ldrh	r3, [r3, #26]
 8013420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013424:	b29a      	uxth	r2, r3
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801342a:	f04f 33ff 	mov.w	r3, #4294967295
 801342e:	e070      	b.n	8013512 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	68db      	ldr	r3, [r3, #12]
 8013434:	f003 0303 	and.w	r3, r3, #3
 8013438:	2b00      	cmp	r3, #0
 801343a:	d006      	beq.n	801344a <tcp_enqueue_flags+0xea>
 801343c:	4b37      	ldr	r3, [pc, #220]	; (801351c <tcp_enqueue_flags+0x1bc>)
 801343e:	f240 4242 	movw	r2, #1090	; 0x442
 8013442:	493b      	ldr	r1, [pc, #236]	; (8013530 <tcp_enqueue_flags+0x1d0>)
 8013444:	4837      	ldr	r0, [pc, #220]	; (8013524 <tcp_enqueue_flags+0x1c4>)
 8013446:	f003 fe81 	bl	801714c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	891b      	ldrh	r3, [r3, #8]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d006      	beq.n	8013460 <tcp_enqueue_flags+0x100>
 8013452:	4b32      	ldr	r3, [pc, #200]	; (801351c <tcp_enqueue_flags+0x1bc>)
 8013454:	f240 4243 	movw	r2, #1091	; 0x443
 8013458:	4936      	ldr	r1, [pc, #216]	; (8013534 <tcp_enqueue_flags+0x1d4>)
 801345a:	4832      	ldr	r0, [pc, #200]	; (8013524 <tcp_enqueue_flags+0x1c4>)
 801345c:	f003 fe76 	bl	801714c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013464:	2b00      	cmp	r3, #0
 8013466:	d103      	bne.n	8013470 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	68fa      	ldr	r2, [r7, #12]
 801346c:	66da      	str	r2, [r3, #108]	; 0x6c
 801346e:	e00d      	b.n	801348c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013474:	61bb      	str	r3, [r7, #24]
 8013476:	e002      	b.n	801347e <tcp_enqueue_flags+0x11e>
 8013478:	69bb      	ldr	r3, [r7, #24]
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	61bb      	str	r3, [r7, #24]
 801347e:	69bb      	ldr	r3, [r7, #24]
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	2b00      	cmp	r3, #0
 8013484:	d1f8      	bne.n	8013478 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013486:	69bb      	ldr	r3, [r7, #24]
 8013488:	68fa      	ldr	r2, [r7, #12]
 801348a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	2200      	movs	r2, #0
 8013490:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013494:	78fb      	ldrb	r3, [r7, #3]
 8013496:	f003 0302 	and.w	r3, r3, #2
 801349a:	2b00      	cmp	r3, #0
 801349c:	d104      	bne.n	80134a8 <tcp_enqueue_flags+0x148>
 801349e:	78fb      	ldrb	r3, [r7, #3]
 80134a0:	f003 0301 	and.w	r3, r3, #1
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d004      	beq.n	80134b2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80134ac:	1c5a      	adds	r2, r3, #1
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80134b2:	78fb      	ldrb	r3, [r7, #3]
 80134b4:	f003 0301 	and.w	r3, r3, #1
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d006      	beq.n	80134ca <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	8b5b      	ldrh	r3, [r3, #26]
 80134c0:	f043 0320 	orr.w	r3, r3, #32
 80134c4:	b29a      	uxth	r2, r3
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80134ca:	68fb      	ldr	r3, [r7, #12]
 80134cc:	685b      	ldr	r3, [r3, #4]
 80134ce:	4618      	mov	r0, r3
 80134d0:	f7fa fd2a 	bl	800df28 <pbuf_clen>
 80134d4:	4603      	mov	r3, r0
 80134d6:	461a      	mov	r2, r3
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80134de:	4413      	add	r3, r2
 80134e0:	b29a      	uxth	r2, r3
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d00e      	beq.n	8013510 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d10a      	bne.n	8013510 <tcp_enqueue_flags+0x1b0>
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d106      	bne.n	8013510 <tcp_enqueue_flags+0x1b0>
 8013502:	4b06      	ldr	r3, [pc, #24]	; (801351c <tcp_enqueue_flags+0x1bc>)
 8013504:	f240 4266 	movw	r2, #1126	; 0x466
 8013508:	490b      	ldr	r1, [pc, #44]	; (8013538 <tcp_enqueue_flags+0x1d8>)
 801350a:	4806      	ldr	r0, [pc, #24]	; (8013524 <tcp_enqueue_flags+0x1c4>)
 801350c:	f003 fe1e 	bl	801714c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013510:	2300      	movs	r3, #0
}
 8013512:	4618      	mov	r0, r3
 8013514:	3720      	adds	r7, #32
 8013516:	46bd      	mov	sp, r7
 8013518:	bd80      	pop	{r7, pc}
 801351a:	bf00      	nop
 801351c:	0801a7f0 	.word	0x0801a7f0
 8013520:	0801ac14 	.word	0x0801ac14
 8013524:	0801a844 	.word	0x0801a844
 8013528:	0801ac6c 	.word	0x0801ac6c
 801352c:	0801ac8c 	.word	0x0801ac8c
 8013530:	0801acc8 	.word	0x0801acc8
 8013534:	0801ace0 	.word	0x0801ace0
 8013538:	0801ad0c 	.word	0x0801ad0c

0801353c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801353c:	b5b0      	push	{r4, r5, r7, lr}
 801353e:	b08a      	sub	sp, #40	; 0x28
 8013540:	af00      	add	r7, sp, #0
 8013542:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	2b00      	cmp	r3, #0
 8013548:	d106      	bne.n	8013558 <tcp_output+0x1c>
 801354a:	4ba0      	ldr	r3, [pc, #640]	; (80137cc <tcp_output+0x290>)
 801354c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8013550:	499f      	ldr	r1, [pc, #636]	; (80137d0 <tcp_output+0x294>)
 8013552:	48a0      	ldr	r0, [pc, #640]	; (80137d4 <tcp_output+0x298>)
 8013554:	f003 fdfa 	bl	801714c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	7d1b      	ldrb	r3, [r3, #20]
 801355c:	2b01      	cmp	r3, #1
 801355e:	d106      	bne.n	801356e <tcp_output+0x32>
 8013560:	4b9a      	ldr	r3, [pc, #616]	; (80137cc <tcp_output+0x290>)
 8013562:	f240 42e4 	movw	r2, #1252	; 0x4e4
 8013566:	499c      	ldr	r1, [pc, #624]	; (80137d8 <tcp_output+0x29c>)
 8013568:	489a      	ldr	r0, [pc, #616]	; (80137d4 <tcp_output+0x298>)
 801356a:	f003 fdef 	bl	801714c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801356e:	4b9b      	ldr	r3, [pc, #620]	; (80137dc <tcp_output+0x2a0>)
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	687a      	ldr	r2, [r7, #4]
 8013574:	429a      	cmp	r2, r3
 8013576:	d101      	bne.n	801357c <tcp_output+0x40>
    return ERR_OK;
 8013578:	2300      	movs	r3, #0
 801357a:	e1d2      	b.n	8013922 <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013588:	429a      	cmp	r2, r3
 801358a:	d203      	bcs.n	8013594 <tcp_output+0x58>
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013592:	e002      	b.n	801359a <tcp_output+0x5e>
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801359a:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80135a0:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80135a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d10b      	bne.n	80135c0 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	8b5b      	ldrh	r3, [r3, #26]
 80135ac:	f003 0302 	and.w	r3, r3, #2
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	f000 81a9 	beq.w	8013908 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 80135b6:	6878      	ldr	r0, [r7, #4]
 80135b8:	f000 fdd8 	bl	801416c <tcp_send_empty_ack>
 80135bc:	4603      	mov	r3, r0
 80135be:	e1b0      	b.n	8013922 <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80135c0:	6879      	ldr	r1, [r7, #4]
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	3304      	adds	r3, #4
 80135c6:	461a      	mov	r2, r3
 80135c8:	6878      	ldr	r0, [r7, #4]
 80135ca:	f7ff f81d 	bl	8012608 <tcp_route>
 80135ce:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80135d0:	697b      	ldr	r3, [r7, #20]
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d102      	bne.n	80135dc <tcp_output+0xa0>
    return ERR_RTE;
 80135d6:	f06f 0303 	mvn.w	r3, #3
 80135da:	e1a2      	b.n	8013922 <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d003      	beq.n	80135ea <tcp_output+0xae>
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d111      	bne.n	801360e <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80135ea:	697b      	ldr	r3, [r7, #20]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d002      	beq.n	80135f6 <tcp_output+0xba>
 80135f0:	697b      	ldr	r3, [r7, #20]
 80135f2:	3304      	adds	r3, #4
 80135f4:	e000      	b.n	80135f8 <tcp_output+0xbc>
 80135f6:	2300      	movs	r3, #0
 80135f8:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80135fa:	693b      	ldr	r3, [r7, #16]
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d102      	bne.n	8013606 <tcp_output+0xca>
      return ERR_RTE;
 8013600:	f06f 0303 	mvn.w	r3, #3
 8013604:	e18d      	b.n	8013922 <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013606:	693b      	ldr	r3, [r7, #16]
 8013608:	681a      	ldr	r2, [r3, #0]
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013610:	68db      	ldr	r3, [r3, #12]
 8013612:	685b      	ldr	r3, [r3, #4]
 8013614:	4618      	mov	r0, r3
 8013616:	f7f9 f83a 	bl	800c68e <lwip_htonl>
 801361a:	4602      	mov	r2, r0
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013620:	1ad3      	subs	r3, r2, r3
 8013622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013624:	8912      	ldrh	r2, [r2, #8]
 8013626:	4413      	add	r3, r2
 8013628:	69ba      	ldr	r2, [r7, #24]
 801362a:	429a      	cmp	r2, r3
 801362c:	d227      	bcs.n	801367e <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013634:	461a      	mov	r2, r3
 8013636:	69bb      	ldr	r3, [r7, #24]
 8013638:	4293      	cmp	r3, r2
 801363a:	d114      	bne.n	8013666 <tcp_output+0x12a>
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013640:	2b00      	cmp	r3, #0
 8013642:	d110      	bne.n	8013666 <tcp_output+0x12a>
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801364a:	2b00      	cmp	r3, #0
 801364c:	d10b      	bne.n	8013666 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	2200      	movs	r2, #0
 8013652:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	2201      	movs	r2, #1
 801365a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	2200      	movs	r2, #0
 8013662:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	8b5b      	ldrh	r3, [r3, #26]
 801366a:	f003 0302 	and.w	r3, r3, #2
 801366e:	2b00      	cmp	r3, #0
 8013670:	f000 814c 	beq.w	801390c <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 8013674:	6878      	ldr	r0, [r7, #4]
 8013676:	f000 fd79 	bl	801416c <tcp_send_empty_ack>
 801367a:	4603      	mov	r3, r0
 801367c:	e151      	b.n	8013922 <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	2200      	movs	r2, #0
 8013682:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801368a:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801368c:	6a3b      	ldr	r3, [r7, #32]
 801368e:	2b00      	cmp	r3, #0
 8013690:	f000 811b 	beq.w	80138ca <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 8013694:	e002      	b.n	801369c <tcp_output+0x160>
 8013696:	6a3b      	ldr	r3, [r7, #32]
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	623b      	str	r3, [r7, #32]
 801369c:	6a3b      	ldr	r3, [r7, #32]
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d1f8      	bne.n	8013696 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80136a4:	e111      	b.n	80138ca <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80136a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136a8:	68db      	ldr	r3, [r3, #12]
 80136aa:	899b      	ldrh	r3, [r3, #12]
 80136ac:	b29b      	uxth	r3, r3
 80136ae:	4618      	mov	r0, r3
 80136b0:	f7f8 ffd8 	bl	800c664 <lwip_htons>
 80136b4:	4603      	mov	r3, r0
 80136b6:	b2db      	uxtb	r3, r3
 80136b8:	f003 0304 	and.w	r3, r3, #4
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d006      	beq.n	80136ce <tcp_output+0x192>
 80136c0:	4b42      	ldr	r3, [pc, #264]	; (80137cc <tcp_output+0x290>)
 80136c2:	f240 5237 	movw	r2, #1335	; 0x537
 80136c6:	4946      	ldr	r1, [pc, #280]	; (80137e0 <tcp_output+0x2a4>)
 80136c8:	4842      	ldr	r0, [pc, #264]	; (80137d4 <tcp_output+0x298>)
 80136ca:	f003 fd3f 	bl	801714c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d01f      	beq.n	8013716 <tcp_output+0x1da>
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	8b5b      	ldrh	r3, [r3, #26]
 80136da:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d119      	bne.n	8013716 <tcp_output+0x1da>
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d00b      	beq.n	8013702 <tcp_output+0x1c6>
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d110      	bne.n	8013716 <tcp_output+0x1da>
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80136f8:	891a      	ldrh	r2, [r3, #8]
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80136fe:	429a      	cmp	r2, r3
 8013700:	d209      	bcs.n	8013716 <tcp_output+0x1da>
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013708:	2b00      	cmp	r3, #0
 801370a:	d004      	beq.n	8013716 <tcp_output+0x1da>
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013712:	2b08      	cmp	r3, #8
 8013714:	d901      	bls.n	801371a <tcp_output+0x1de>
 8013716:	2301      	movs	r3, #1
 8013718:	e000      	b.n	801371c <tcp_output+0x1e0>
 801371a:	2300      	movs	r3, #0
 801371c:	2b00      	cmp	r3, #0
 801371e:	d106      	bne.n	801372e <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	8b5b      	ldrh	r3, [r3, #26]
 8013724:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013728:	2b00      	cmp	r3, #0
 801372a:	f000 80e3 	beq.w	80138f4 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	7d1b      	ldrb	r3, [r3, #20]
 8013732:	2b02      	cmp	r3, #2
 8013734:	d00d      	beq.n	8013752 <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013738:	68db      	ldr	r3, [r3, #12]
 801373a:	899b      	ldrh	r3, [r3, #12]
 801373c:	b29c      	uxth	r4, r3
 801373e:	2010      	movs	r0, #16
 8013740:	f7f8 ff90 	bl	800c664 <lwip_htons>
 8013744:	4603      	mov	r3, r0
 8013746:	461a      	mov	r2, r3
 8013748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801374a:	68db      	ldr	r3, [r3, #12]
 801374c:	4322      	orrs	r2, r4
 801374e:	b292      	uxth	r2, r2
 8013750:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8013752:	697a      	ldr	r2, [r7, #20]
 8013754:	6879      	ldr	r1, [r7, #4]
 8013756:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013758:	f000 f908 	bl	801396c <tcp_output_segment>
 801375c:	4603      	mov	r3, r0
 801375e:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8013760:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013764:	2b00      	cmp	r3, #0
 8013766:	d009      	beq.n	801377c <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	8b5b      	ldrh	r3, [r3, #26]
 801376c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013770:	b29a      	uxth	r2, r3
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	835a      	strh	r2, [r3, #26]
      return err;
 8013776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801377a:	e0d2      	b.n	8013922 <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801377e:	681a      	ldr	r2, [r3, #0]
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	7d1b      	ldrb	r3, [r3, #20]
 8013788:	2b02      	cmp	r3, #2
 801378a:	d006      	beq.n	801379a <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	8b5b      	ldrh	r3, [r3, #26]
 8013790:	f023 0303 	bic.w	r3, r3, #3
 8013794:	b29a      	uxth	r2, r3
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801379c:	68db      	ldr	r3, [r3, #12]
 801379e:	685b      	ldr	r3, [r3, #4]
 80137a0:	4618      	mov	r0, r3
 80137a2:	f7f8 ff74 	bl	800c68e <lwip_htonl>
 80137a6:	4604      	mov	r4, r0
 80137a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137aa:	891b      	ldrh	r3, [r3, #8]
 80137ac:	461d      	mov	r5, r3
 80137ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137b0:	68db      	ldr	r3, [r3, #12]
 80137b2:	899b      	ldrh	r3, [r3, #12]
 80137b4:	b29b      	uxth	r3, r3
 80137b6:	4618      	mov	r0, r3
 80137b8:	f7f8 ff54 	bl	800c664 <lwip_htons>
 80137bc:	4603      	mov	r3, r0
 80137be:	b2db      	uxtb	r3, r3
 80137c0:	f003 0303 	and.w	r3, r3, #3
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d00d      	beq.n	80137e4 <tcp_output+0x2a8>
 80137c8:	2301      	movs	r3, #1
 80137ca:	e00c      	b.n	80137e6 <tcp_output+0x2aa>
 80137cc:	0801a7f0 	.word	0x0801a7f0
 80137d0:	0801ad34 	.word	0x0801ad34
 80137d4:	0801a844 	.word	0x0801a844
 80137d8:	0801ad4c 	.word	0x0801ad4c
 80137dc:	2000d254 	.word	0x2000d254
 80137e0:	0801ad74 	.word	0x0801ad74
 80137e4:	2300      	movs	r3, #0
 80137e6:	442b      	add	r3, r5
 80137e8:	4423      	add	r3, r4
 80137ea:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80137f0:	68bb      	ldr	r3, [r7, #8]
 80137f2:	1ad3      	subs	r3, r2, r3
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	da02      	bge.n	80137fe <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	68ba      	ldr	r2, [r7, #8]
 80137fc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80137fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013800:	891b      	ldrh	r3, [r3, #8]
 8013802:	461c      	mov	r4, r3
 8013804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013806:	68db      	ldr	r3, [r3, #12]
 8013808:	899b      	ldrh	r3, [r3, #12]
 801380a:	b29b      	uxth	r3, r3
 801380c:	4618      	mov	r0, r3
 801380e:	f7f8 ff29 	bl	800c664 <lwip_htons>
 8013812:	4603      	mov	r3, r0
 8013814:	b2db      	uxtb	r3, r3
 8013816:	f003 0303 	and.w	r3, r3, #3
 801381a:	2b00      	cmp	r3, #0
 801381c:	d001      	beq.n	8013822 <tcp_output+0x2e6>
 801381e:	2301      	movs	r3, #1
 8013820:	e000      	b.n	8013824 <tcp_output+0x2e8>
 8013822:	2300      	movs	r3, #0
 8013824:	4423      	add	r3, r4
 8013826:	2b00      	cmp	r3, #0
 8013828:	d049      	beq.n	80138be <tcp_output+0x382>
      seg->next = NULL;
 801382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801382c:	2200      	movs	r2, #0
 801382e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013834:	2b00      	cmp	r3, #0
 8013836:	d105      	bne.n	8013844 <tcp_output+0x308>
        pcb->unacked = seg;
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801383c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801383e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013840:	623b      	str	r3, [r7, #32]
 8013842:	e03f      	b.n	80138c4 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8013844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013846:	68db      	ldr	r3, [r3, #12]
 8013848:	685b      	ldr	r3, [r3, #4]
 801384a:	4618      	mov	r0, r3
 801384c:	f7f8 ff1f 	bl	800c68e <lwip_htonl>
 8013850:	4604      	mov	r4, r0
 8013852:	6a3b      	ldr	r3, [r7, #32]
 8013854:	68db      	ldr	r3, [r3, #12]
 8013856:	685b      	ldr	r3, [r3, #4]
 8013858:	4618      	mov	r0, r3
 801385a:	f7f8 ff18 	bl	800c68e <lwip_htonl>
 801385e:	4603      	mov	r3, r0
 8013860:	1ae3      	subs	r3, r4, r3
 8013862:	2b00      	cmp	r3, #0
 8013864:	da24      	bge.n	80138b0 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	3370      	adds	r3, #112	; 0x70
 801386a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801386c:	e002      	b.n	8013874 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801386e:	69fb      	ldr	r3, [r7, #28]
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013874:	69fb      	ldr	r3, [r7, #28]
 8013876:	681b      	ldr	r3, [r3, #0]
 8013878:	2b00      	cmp	r3, #0
 801387a:	d011      	beq.n	80138a0 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801387c:	69fb      	ldr	r3, [r7, #28]
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	68db      	ldr	r3, [r3, #12]
 8013882:	685b      	ldr	r3, [r3, #4]
 8013884:	4618      	mov	r0, r3
 8013886:	f7f8 ff02 	bl	800c68e <lwip_htonl>
 801388a:	4604      	mov	r4, r0
 801388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801388e:	68db      	ldr	r3, [r3, #12]
 8013890:	685b      	ldr	r3, [r3, #4]
 8013892:	4618      	mov	r0, r3
 8013894:	f7f8 fefb 	bl	800c68e <lwip_htonl>
 8013898:	4603      	mov	r3, r0
 801389a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801389c:	2b00      	cmp	r3, #0
 801389e:	dbe6      	blt.n	801386e <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 80138a0:	69fb      	ldr	r3, [r7, #28]
 80138a2:	681a      	ldr	r2, [r3, #0]
 80138a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138a6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80138a8:	69fb      	ldr	r3, [r7, #28]
 80138aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80138ac:	601a      	str	r2, [r3, #0]
 80138ae:	e009      	b.n	80138c4 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80138b0:	6a3b      	ldr	r3, [r7, #32]
 80138b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80138b4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80138b6:	6a3b      	ldr	r3, [r7, #32]
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	623b      	str	r3, [r7, #32]
 80138bc:	e002      	b.n	80138c4 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80138be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80138c0:	f7fb ff1a 	bl	800f6f8 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80138c8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80138ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d012      	beq.n	80138f6 <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80138d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138d2:	68db      	ldr	r3, [r3, #12]
 80138d4:	685b      	ldr	r3, [r3, #4]
 80138d6:	4618      	mov	r0, r3
 80138d8:	f7f8 fed9 	bl	800c68e <lwip_htonl>
 80138dc:	4602      	mov	r2, r0
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80138e2:	1ad3      	subs	r3, r2, r3
 80138e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80138e6:	8912      	ldrh	r2, [r2, #8]
 80138e8:	4413      	add	r3, r2
  while (seg != NULL &&
 80138ea:	69ba      	ldr	r2, [r7, #24]
 80138ec:	429a      	cmp	r2, r3
 80138ee:	f4bf aeda 	bcs.w	80136a6 <tcp_output+0x16a>
 80138f2:	e000      	b.n	80138f6 <tcp_output+0x3ba>
      break;
 80138f4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d108      	bne.n	8013910 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	2200      	movs	r2, #0
 8013902:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8013906:	e004      	b.n	8013912 <tcp_output+0x3d6>
    goto output_done;
 8013908:	bf00      	nop
 801390a:	e002      	b.n	8013912 <tcp_output+0x3d6>
    goto output_done;
 801390c:	bf00      	nop
 801390e:	e000      	b.n	8013912 <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8013910:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	8b5b      	ldrh	r3, [r3, #26]
 8013916:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801391a:	b29a      	uxth	r2, r3
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8013920:	2300      	movs	r3, #0
}
 8013922:	4618      	mov	r0, r3
 8013924:	3728      	adds	r7, #40	; 0x28
 8013926:	46bd      	mov	sp, r7
 8013928:	bdb0      	pop	{r4, r5, r7, pc}
 801392a:	bf00      	nop

0801392c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801392c:	b580      	push	{r7, lr}
 801392e:	b082      	sub	sp, #8
 8013930:	af00      	add	r7, sp, #0
 8013932:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d106      	bne.n	8013948 <tcp_output_segment_busy+0x1c>
 801393a:	4b09      	ldr	r3, [pc, #36]	; (8013960 <tcp_output_segment_busy+0x34>)
 801393c:	f240 529a 	movw	r2, #1434	; 0x59a
 8013940:	4908      	ldr	r1, [pc, #32]	; (8013964 <tcp_output_segment_busy+0x38>)
 8013942:	4809      	ldr	r0, [pc, #36]	; (8013968 <tcp_output_segment_busy+0x3c>)
 8013944:	f003 fc02 	bl	801714c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	685b      	ldr	r3, [r3, #4]
 801394c:	7b9b      	ldrb	r3, [r3, #14]
 801394e:	2b01      	cmp	r3, #1
 8013950:	d001      	beq.n	8013956 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8013952:	2301      	movs	r3, #1
 8013954:	e000      	b.n	8013958 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8013956:	2300      	movs	r3, #0
}
 8013958:	4618      	mov	r0, r3
 801395a:	3708      	adds	r7, #8
 801395c:	46bd      	mov	sp, r7
 801395e:	bd80      	pop	{r7, pc}
 8013960:	0801a7f0 	.word	0x0801a7f0
 8013964:	0801ad8c 	.word	0x0801ad8c
 8013968:	0801a844 	.word	0x0801a844

0801396c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801396c:	b5b0      	push	{r4, r5, r7, lr}
 801396e:	b08c      	sub	sp, #48	; 0x30
 8013970:	af04      	add	r7, sp, #16
 8013972:	60f8      	str	r0, [r7, #12]
 8013974:	60b9      	str	r1, [r7, #8]
 8013976:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	2b00      	cmp	r3, #0
 801397c:	d106      	bne.n	801398c <tcp_output_segment+0x20>
 801397e:	4b64      	ldr	r3, [pc, #400]	; (8013b10 <tcp_output_segment+0x1a4>)
 8013980:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8013984:	4963      	ldr	r1, [pc, #396]	; (8013b14 <tcp_output_segment+0x1a8>)
 8013986:	4864      	ldr	r0, [pc, #400]	; (8013b18 <tcp_output_segment+0x1ac>)
 8013988:	f003 fbe0 	bl	801714c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801398c:	68bb      	ldr	r3, [r7, #8]
 801398e:	2b00      	cmp	r3, #0
 8013990:	d106      	bne.n	80139a0 <tcp_output_segment+0x34>
 8013992:	4b5f      	ldr	r3, [pc, #380]	; (8013b10 <tcp_output_segment+0x1a4>)
 8013994:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8013998:	4960      	ldr	r1, [pc, #384]	; (8013b1c <tcp_output_segment+0x1b0>)
 801399a:	485f      	ldr	r0, [pc, #380]	; (8013b18 <tcp_output_segment+0x1ac>)
 801399c:	f003 fbd6 	bl	801714c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d106      	bne.n	80139b4 <tcp_output_segment+0x48>
 80139a6:	4b5a      	ldr	r3, [pc, #360]	; (8013b10 <tcp_output_segment+0x1a4>)
 80139a8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80139ac:	495c      	ldr	r1, [pc, #368]	; (8013b20 <tcp_output_segment+0x1b4>)
 80139ae:	485a      	ldr	r0, [pc, #360]	; (8013b18 <tcp_output_segment+0x1ac>)
 80139b0:	f003 fbcc 	bl	801714c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80139b4:	68f8      	ldr	r0, [r7, #12]
 80139b6:	f7ff ffb9 	bl	801392c <tcp_output_segment_busy>
 80139ba:	4603      	mov	r3, r0
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d001      	beq.n	80139c4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80139c0:	2300      	movs	r3, #0
 80139c2:	e0a0      	b.n	8013b06 <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80139c4:	68bb      	ldr	r3, [r7, #8]
 80139c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	68dc      	ldr	r4, [r3, #12]
 80139cc:	4610      	mov	r0, r2
 80139ce:	f7f8 fe5e 	bl	800c68e <lwip_htonl>
 80139d2:	4603      	mov	r3, r0
 80139d4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80139d6:	68bb      	ldr	r3, [r7, #8]
 80139d8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	68dc      	ldr	r4, [r3, #12]
 80139de:	4610      	mov	r0, r2
 80139e0:	f7f8 fe40 	bl	800c664 <lwip_htons>
 80139e4:	4603      	mov	r3, r0
 80139e6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80139e8:	68bb      	ldr	r3, [r7, #8]
 80139ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139ec:	68ba      	ldr	r2, [r7, #8]
 80139ee:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80139f0:	441a      	add	r2, r3
 80139f2:	68bb      	ldr	r3, [r7, #8]
 80139f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	68db      	ldr	r3, [r3, #12]
 80139fa:	3314      	adds	r3, #20
 80139fc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	7a9b      	ldrb	r3, [r3, #10]
 8013a02:	f003 0301 	and.w	r3, r3, #1
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d015      	beq.n	8013a36 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8013a0a:	68bb      	ldr	r3, [r7, #8]
 8013a0c:	3304      	adds	r3, #4
 8013a0e:	461a      	mov	r2, r3
 8013a10:	6879      	ldr	r1, [r7, #4]
 8013a12:	f44f 7006 	mov.w	r0, #536	; 0x218
 8013a16:	f7fc fa33 	bl	800fe80 <tcp_eff_send_mss_netif>
 8013a1a:	4603      	mov	r3, r0
 8013a1c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8013a1e:	8b7b      	ldrh	r3, [r7, #26]
 8013a20:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8013a24:	4618      	mov	r0, r3
 8013a26:	f7f8 fe32 	bl	800c68e <lwip_htonl>
 8013a2a:	4602      	mov	r2, r0
 8013a2c:	69fb      	ldr	r3, [r7, #28]
 8013a2e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013a30:	69fb      	ldr	r3, [r7, #28]
 8013a32:	3304      	adds	r3, #4
 8013a34:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8013a36:	68bb      	ldr	r3, [r7, #8]
 8013a38:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	da02      	bge.n	8013a46 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8013a40:	68bb      	ldr	r3, [r7, #8]
 8013a42:	2200      	movs	r2, #0
 8013a44:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8013a46:	68bb      	ldr	r3, [r7, #8]
 8013a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d10c      	bne.n	8013a68 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8013a4e:	4b35      	ldr	r3, [pc, #212]	; (8013b24 <tcp_output_segment+0x1b8>)
 8013a50:	681a      	ldr	r2, [r3, #0]
 8013a52:	68bb      	ldr	r3, [r7, #8]
 8013a54:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	68db      	ldr	r3, [r3, #12]
 8013a5a:	685b      	ldr	r3, [r3, #4]
 8013a5c:	4618      	mov	r0, r3
 8013a5e:	f7f8 fe16 	bl	800c68e <lwip_htonl>
 8013a62:	4602      	mov	r2, r0
 8013a64:	68bb      	ldr	r3, [r7, #8]
 8013a66:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	68db      	ldr	r3, [r3, #12]
 8013a6c:	461a      	mov	r2, r3
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	685b      	ldr	r3, [r3, #4]
 8013a72:	685b      	ldr	r3, [r3, #4]
 8013a74:	1ad3      	subs	r3, r2, r3
 8013a76:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	685b      	ldr	r3, [r3, #4]
 8013a7c:	8959      	ldrh	r1, [r3, #10]
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	685b      	ldr	r3, [r3, #4]
 8013a82:	8b3a      	ldrh	r2, [r7, #24]
 8013a84:	1a8a      	subs	r2, r1, r2
 8013a86:	b292      	uxth	r2, r2
 8013a88:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	685b      	ldr	r3, [r3, #4]
 8013a8e:	8919      	ldrh	r1, [r3, #8]
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	685b      	ldr	r3, [r3, #4]
 8013a94:	8b3a      	ldrh	r2, [r7, #24]
 8013a96:	1a8a      	subs	r2, r1, r2
 8013a98:	b292      	uxth	r2, r2
 8013a9a:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	685b      	ldr	r3, [r3, #4]
 8013aa0:	68fa      	ldr	r2, [r7, #12]
 8013aa2:	68d2      	ldr	r2, [r2, #12]
 8013aa4:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	68db      	ldr	r3, [r3, #12]
 8013aaa:	2200      	movs	r2, #0
 8013aac:	741a      	strb	r2, [r3, #16]
 8013aae:	2200      	movs	r2, #0
 8013ab0:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	68db      	ldr	r3, [r3, #12]
 8013ab6:	f103 0214 	add.w	r2, r3, #20
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	7a9b      	ldrb	r3, [r3, #10]
 8013abe:	009b      	lsls	r3, r3, #2
 8013ac0:	f003 0304 	and.w	r3, r3, #4
 8013ac4:	4413      	add	r3, r2
 8013ac6:	69fa      	ldr	r2, [r7, #28]
 8013ac8:	429a      	cmp	r2, r3
 8013aca:	d006      	beq.n	8013ada <tcp_output_segment+0x16e>
 8013acc:	4b10      	ldr	r3, [pc, #64]	; (8013b10 <tcp_output_segment+0x1a4>)
 8013ace:	f240 621c 	movw	r2, #1564	; 0x61c
 8013ad2:	4915      	ldr	r1, [pc, #84]	; (8013b28 <tcp_output_segment+0x1bc>)
 8013ad4:	4810      	ldr	r0, [pc, #64]	; (8013b18 <tcp_output_segment+0x1ac>)
 8013ad6:	f003 fb39 	bl	801714c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	6858      	ldr	r0, [r3, #4]
 8013ade:	68b9      	ldr	r1, [r7, #8]
 8013ae0:	68bb      	ldr	r3, [r7, #8]
 8013ae2:	1d1c      	adds	r4, r3, #4
 8013ae4:	68bb      	ldr	r3, [r7, #8]
 8013ae6:	7add      	ldrb	r5, [r3, #11]
 8013ae8:	68bb      	ldr	r3, [r7, #8]
 8013aea:	7a9b      	ldrb	r3, [r3, #10]
 8013aec:	687a      	ldr	r2, [r7, #4]
 8013aee:	9202      	str	r2, [sp, #8]
 8013af0:	2206      	movs	r2, #6
 8013af2:	9201      	str	r2, [sp, #4]
 8013af4:	9300      	str	r3, [sp, #0]
 8013af6:	462b      	mov	r3, r5
 8013af8:	4622      	mov	r2, r4
 8013afa:	f002 f8ad 	bl	8015c58 <ip4_output_if>
 8013afe:	4603      	mov	r3, r0
 8013b00:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013b02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013b06:	4618      	mov	r0, r3
 8013b08:	3720      	adds	r7, #32
 8013b0a:	46bd      	mov	sp, r7
 8013b0c:	bdb0      	pop	{r4, r5, r7, pc}
 8013b0e:	bf00      	nop
 8013b10:	0801a7f0 	.word	0x0801a7f0
 8013b14:	0801adb4 	.word	0x0801adb4
 8013b18:	0801a844 	.word	0x0801a844
 8013b1c:	0801add4 	.word	0x0801add4
 8013b20:	0801adf4 	.word	0x0801adf4
 8013b24:	2000d244 	.word	0x2000d244
 8013b28:	0801ae18 	.word	0x0801ae18

08013b2c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013b2c:	b5b0      	push	{r4, r5, r7, lr}
 8013b2e:	b084      	sub	sp, #16
 8013b30:	af00      	add	r7, sp, #0
 8013b32:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d106      	bne.n	8013b48 <tcp_rexmit_rto_prepare+0x1c>
 8013b3a:	4b31      	ldr	r3, [pc, #196]	; (8013c00 <tcp_rexmit_rto_prepare+0xd4>)
 8013b3c:	f240 6263 	movw	r2, #1635	; 0x663
 8013b40:	4930      	ldr	r1, [pc, #192]	; (8013c04 <tcp_rexmit_rto_prepare+0xd8>)
 8013b42:	4831      	ldr	r0, [pc, #196]	; (8013c08 <tcp_rexmit_rto_prepare+0xdc>)
 8013b44:	f003 fb02 	bl	801714c <iprintf>

  if (pcb->unacked == NULL) {
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d102      	bne.n	8013b56 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013b50:	f06f 0305 	mvn.w	r3, #5
 8013b54:	e050      	b.n	8013bf8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b5a:	60fb      	str	r3, [r7, #12]
 8013b5c:	e00b      	b.n	8013b76 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8013b5e:	68f8      	ldr	r0, [r7, #12]
 8013b60:	f7ff fee4 	bl	801392c <tcp_output_segment_busy>
 8013b64:	4603      	mov	r3, r0
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d002      	beq.n	8013b70 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8013b6a:	f06f 0305 	mvn.w	r3, #5
 8013b6e:	e043      	b.n	8013bf8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	681b      	ldr	r3, [r3, #0]
 8013b74:	60fb      	str	r3, [r7, #12]
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	681b      	ldr	r3, [r3, #0]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d1ef      	bne.n	8013b5e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8013b7e:	68f8      	ldr	r0, [r7, #12]
 8013b80:	f7ff fed4 	bl	801392c <tcp_output_segment_busy>
 8013b84:	4603      	mov	r3, r0
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d002      	beq.n	8013b90 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8013b8a:	f06f 0305 	mvn.w	r3, #5
 8013b8e:	e033      	b.n	8013bf8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	2200      	movs	r2, #0
 8013ba4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	8b5b      	ldrh	r3, [r3, #26]
 8013baa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013bae:	b29a      	uxth	r2, r3
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	68db      	ldr	r3, [r3, #12]
 8013bb8:	685b      	ldr	r3, [r3, #4]
 8013bba:	4618      	mov	r0, r3
 8013bbc:	f7f8 fd67 	bl	800c68e <lwip_htonl>
 8013bc0:	4604      	mov	r4, r0
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	891b      	ldrh	r3, [r3, #8]
 8013bc6:	461d      	mov	r5, r3
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	68db      	ldr	r3, [r3, #12]
 8013bcc:	899b      	ldrh	r3, [r3, #12]
 8013bce:	b29b      	uxth	r3, r3
 8013bd0:	4618      	mov	r0, r3
 8013bd2:	f7f8 fd47 	bl	800c664 <lwip_htons>
 8013bd6:	4603      	mov	r3, r0
 8013bd8:	b2db      	uxtb	r3, r3
 8013bda:	f003 0303 	and.w	r3, r3, #3
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d001      	beq.n	8013be6 <tcp_rexmit_rto_prepare+0xba>
 8013be2:	2301      	movs	r3, #1
 8013be4:	e000      	b.n	8013be8 <tcp_rexmit_rto_prepare+0xbc>
 8013be6:	2300      	movs	r3, #0
 8013be8:	442b      	add	r3, r5
 8013bea:	18e2      	adds	r2, r4, r3
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	2200      	movs	r2, #0
 8013bf4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8013bf6:	2300      	movs	r3, #0
}
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	3710      	adds	r7, #16
 8013bfc:	46bd      	mov	sp, r7
 8013bfe:	bdb0      	pop	{r4, r5, r7, pc}
 8013c00:	0801a7f0 	.word	0x0801a7f0
 8013c04:	0801ae2c 	.word	0x0801ae2c
 8013c08:	0801a844 	.word	0x0801a844

08013c0c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	b082      	sub	sp, #8
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d106      	bne.n	8013c28 <tcp_rexmit_rto_commit+0x1c>
 8013c1a:	4b0d      	ldr	r3, [pc, #52]	; (8013c50 <tcp_rexmit_rto_commit+0x44>)
 8013c1c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013c20:	490c      	ldr	r1, [pc, #48]	; (8013c54 <tcp_rexmit_rto_commit+0x48>)
 8013c22:	480d      	ldr	r0, [pc, #52]	; (8013c58 <tcp_rexmit_rto_commit+0x4c>)
 8013c24:	f003 fa92 	bl	801714c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013c2e:	2bff      	cmp	r3, #255	; 0xff
 8013c30:	d007      	beq.n	8013c42 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013c38:	3301      	adds	r3, #1
 8013c3a:	b2da      	uxtb	r2, r3
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013c42:	6878      	ldr	r0, [r7, #4]
 8013c44:	f7ff fc7a 	bl	801353c <tcp_output>
}
 8013c48:	bf00      	nop
 8013c4a:	3708      	adds	r7, #8
 8013c4c:	46bd      	mov	sp, r7
 8013c4e:	bd80      	pop	{r7, pc}
 8013c50:	0801a7f0 	.word	0x0801a7f0
 8013c54:	0801ae50 	.word	0x0801ae50
 8013c58:	0801a844 	.word	0x0801a844

08013c5c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013c5c:	b580      	push	{r7, lr}
 8013c5e:	b082      	sub	sp, #8
 8013c60:	af00      	add	r7, sp, #0
 8013c62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d106      	bne.n	8013c78 <tcp_rexmit_rto+0x1c>
 8013c6a:	4b0a      	ldr	r3, [pc, #40]	; (8013c94 <tcp_rexmit_rto+0x38>)
 8013c6c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8013c70:	4909      	ldr	r1, [pc, #36]	; (8013c98 <tcp_rexmit_rto+0x3c>)
 8013c72:	480a      	ldr	r0, [pc, #40]	; (8013c9c <tcp_rexmit_rto+0x40>)
 8013c74:	f003 fa6a 	bl	801714c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013c78:	6878      	ldr	r0, [r7, #4]
 8013c7a:	f7ff ff57 	bl	8013b2c <tcp_rexmit_rto_prepare>
 8013c7e:	4603      	mov	r3, r0
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d102      	bne.n	8013c8a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013c84:	6878      	ldr	r0, [r7, #4]
 8013c86:	f7ff ffc1 	bl	8013c0c <tcp_rexmit_rto_commit>
  }
}
 8013c8a:	bf00      	nop
 8013c8c:	3708      	adds	r7, #8
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	bd80      	pop	{r7, pc}
 8013c92:	bf00      	nop
 8013c94:	0801a7f0 	.word	0x0801a7f0
 8013c98:	0801ae74 	.word	0x0801ae74
 8013c9c:	0801a844 	.word	0x0801a844

08013ca0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013ca0:	b590      	push	{r4, r7, lr}
 8013ca2:	b085      	sub	sp, #20
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d106      	bne.n	8013cbc <tcp_rexmit+0x1c>
 8013cae:	4b2f      	ldr	r3, [pc, #188]	; (8013d6c <tcp_rexmit+0xcc>)
 8013cb0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8013cb4:	492e      	ldr	r1, [pc, #184]	; (8013d70 <tcp_rexmit+0xd0>)
 8013cb6:	482f      	ldr	r0, [pc, #188]	; (8013d74 <tcp_rexmit+0xd4>)
 8013cb8:	f003 fa48 	bl	801714c <iprintf>

  if (pcb->unacked == NULL) {
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d102      	bne.n	8013cca <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013cc4:	f06f 0305 	mvn.w	r3, #5
 8013cc8:	e04c      	b.n	8013d64 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013cce:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013cd0:	68b8      	ldr	r0, [r7, #8]
 8013cd2:	f7ff fe2b 	bl	801392c <tcp_output_segment_busy>
 8013cd6:	4603      	mov	r3, r0
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d002      	beq.n	8013ce2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013cdc:	f06f 0305 	mvn.w	r3, #5
 8013ce0:	e040      	b.n	8013d64 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8013ce2:	68bb      	ldr	r3, [r7, #8]
 8013ce4:	681a      	ldr	r2, [r3, #0]
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	336c      	adds	r3, #108	; 0x6c
 8013cee:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013cf0:	e002      	b.n	8013cf8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d011      	beq.n	8013d24 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	68db      	ldr	r3, [r3, #12]
 8013d06:	685b      	ldr	r3, [r3, #4]
 8013d08:	4618      	mov	r0, r3
 8013d0a:	f7f8 fcc0 	bl	800c68e <lwip_htonl>
 8013d0e:	4604      	mov	r4, r0
 8013d10:	68bb      	ldr	r3, [r7, #8]
 8013d12:	68db      	ldr	r3, [r3, #12]
 8013d14:	685b      	ldr	r3, [r3, #4]
 8013d16:	4618      	mov	r0, r3
 8013d18:	f7f8 fcb9 	bl	800c68e <lwip_htonl>
 8013d1c:	4603      	mov	r3, r0
 8013d1e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	dbe6      	blt.n	8013cf2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	681a      	ldr	r2, [r3, #0]
 8013d28:	68bb      	ldr	r3, [r7, #8]
 8013d2a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013d2c:	68fb      	ldr	r3, [r7, #12]
 8013d2e:	68ba      	ldr	r2, [r7, #8]
 8013d30:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013d32:	68bb      	ldr	r3, [r7, #8]
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d103      	bne.n	8013d42 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	2200      	movs	r2, #0
 8013d3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013d48:	2bff      	cmp	r3, #255	; 0xff
 8013d4a:	d007      	beq.n	8013d5c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013d52:	3301      	adds	r3, #1
 8013d54:	b2da      	uxtb	r2, r3
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	2200      	movs	r2, #0
 8013d60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013d62:	2300      	movs	r3, #0
}
 8013d64:	4618      	mov	r0, r3
 8013d66:	3714      	adds	r7, #20
 8013d68:	46bd      	mov	sp, r7
 8013d6a:	bd90      	pop	{r4, r7, pc}
 8013d6c:	0801a7f0 	.word	0x0801a7f0
 8013d70:	0801ae90 	.word	0x0801ae90
 8013d74:	0801a844 	.word	0x0801a844

08013d78 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013d78:	b580      	push	{r7, lr}
 8013d7a:	b082      	sub	sp, #8
 8013d7c:	af00      	add	r7, sp, #0
 8013d7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d106      	bne.n	8013d94 <tcp_rexmit_fast+0x1c>
 8013d86:	4b2f      	ldr	r3, [pc, #188]	; (8013e44 <tcp_rexmit_fast+0xcc>)
 8013d88:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013d8c:	492e      	ldr	r1, [pc, #184]	; (8013e48 <tcp_rexmit_fast+0xd0>)
 8013d8e:	482f      	ldr	r0, [pc, #188]	; (8013e4c <tcp_rexmit_fast+0xd4>)
 8013d90:	f003 f9dc 	bl	801714c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d04f      	beq.n	8013e3c <tcp_rexmit_fast+0xc4>
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	8b5b      	ldrh	r3, [r3, #26]
 8013da0:	f003 0304 	and.w	r3, r3, #4
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d149      	bne.n	8013e3c <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013da8:	6878      	ldr	r0, [r7, #4]
 8013daa:	f7ff ff79 	bl	8013ca0 <tcp_rexmit>
 8013dae:	4603      	mov	r3, r0
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d143      	bne.n	8013e3c <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013dc0:	429a      	cmp	r2, r3
 8013dc2:	d208      	bcs.n	8013dd6 <tcp_rexmit_fast+0x5e>
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	da00      	bge.n	8013dd0 <tcp_rexmit_fast+0x58>
 8013dce:	3301      	adds	r3, #1
 8013dd0:	105b      	asrs	r3, r3, #1
 8013dd2:	b29b      	uxth	r3, r3
 8013dd4:	e007      	b.n	8013de6 <tcp_rexmit_fast+0x6e>
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	da00      	bge.n	8013de2 <tcp_rexmit_fast+0x6a>
 8013de0:	3301      	adds	r3, #1
 8013de2:	105b      	asrs	r3, r3, #1
 8013de4:	b29b      	uxth	r3, r3
 8013de6:	687a      	ldr	r2, [r7, #4]
 8013de8:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013df2:	461a      	mov	r2, r3
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013df8:	005b      	lsls	r3, r3, #1
 8013dfa:	429a      	cmp	r2, r3
 8013dfc:	d206      	bcs.n	8013e0c <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013e02:	005b      	lsls	r3, r3, #1
 8013e04:	b29a      	uxth	r2, r3
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013e16:	4619      	mov	r1, r3
 8013e18:	0049      	lsls	r1, r1, #1
 8013e1a:	440b      	add	r3, r1
 8013e1c:	b29b      	uxth	r3, r3
 8013e1e:	4413      	add	r3, r2
 8013e20:	b29a      	uxth	r2, r3
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	8b5b      	ldrh	r3, [r3, #26]
 8013e2c:	f043 0304 	orr.w	r3, r3, #4
 8013e30:	b29a      	uxth	r2, r3
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	2200      	movs	r2, #0
 8013e3a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8013e3c:	bf00      	nop
 8013e3e:	3708      	adds	r7, #8
 8013e40:	46bd      	mov	sp, r7
 8013e42:	bd80      	pop	{r7, pc}
 8013e44:	0801a7f0 	.word	0x0801a7f0
 8013e48:	0801aea8 	.word	0x0801aea8
 8013e4c:	0801a844 	.word	0x0801a844

08013e50 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013e50:	b580      	push	{r7, lr}
 8013e52:	b086      	sub	sp, #24
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	60f8      	str	r0, [r7, #12]
 8013e58:	607b      	str	r3, [r7, #4]
 8013e5a:	460b      	mov	r3, r1
 8013e5c:	817b      	strh	r3, [r7, #10]
 8013e5e:	4613      	mov	r3, r2
 8013e60:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013e62:	897a      	ldrh	r2, [r7, #10]
 8013e64:	893b      	ldrh	r3, [r7, #8]
 8013e66:	4413      	add	r3, r2
 8013e68:	b29b      	uxth	r3, r3
 8013e6a:	3314      	adds	r3, #20
 8013e6c:	b29b      	uxth	r3, r3
 8013e6e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013e72:	4619      	mov	r1, r3
 8013e74:	2022      	movs	r0, #34	; 0x22
 8013e76:	f7f9 fcb7 	bl	800d7e8 <pbuf_alloc>
 8013e7a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013e7c:	697b      	ldr	r3, [r7, #20]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d04e      	beq.n	8013f20 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013e82:	697b      	ldr	r3, [r7, #20]
 8013e84:	895b      	ldrh	r3, [r3, #10]
 8013e86:	461a      	mov	r2, r3
 8013e88:	897b      	ldrh	r3, [r7, #10]
 8013e8a:	3314      	adds	r3, #20
 8013e8c:	429a      	cmp	r2, r3
 8013e8e:	da06      	bge.n	8013e9e <tcp_output_alloc_header_common+0x4e>
 8013e90:	4b26      	ldr	r3, [pc, #152]	; (8013f2c <tcp_output_alloc_header_common+0xdc>)
 8013e92:	f240 7224 	movw	r2, #1828	; 0x724
 8013e96:	4926      	ldr	r1, [pc, #152]	; (8013f30 <tcp_output_alloc_header_common+0xe0>)
 8013e98:	4826      	ldr	r0, [pc, #152]	; (8013f34 <tcp_output_alloc_header_common+0xe4>)
 8013e9a:	f003 f957 	bl	801714c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013e9e:	697b      	ldr	r3, [r7, #20]
 8013ea0:	685b      	ldr	r3, [r3, #4]
 8013ea2:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013ea4:	8c3b      	ldrh	r3, [r7, #32]
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	f7f8 fbdc 	bl	800c664 <lwip_htons>
 8013eac:	4603      	mov	r3, r0
 8013eae:	461a      	mov	r2, r3
 8013eb0:	693b      	ldr	r3, [r7, #16]
 8013eb2:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013eb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013eb6:	4618      	mov	r0, r3
 8013eb8:	f7f8 fbd4 	bl	800c664 <lwip_htons>
 8013ebc:	4603      	mov	r3, r0
 8013ebe:	461a      	mov	r2, r3
 8013ec0:	693b      	ldr	r3, [r7, #16]
 8013ec2:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013ec4:	693b      	ldr	r3, [r7, #16]
 8013ec6:	687a      	ldr	r2, [r7, #4]
 8013ec8:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013eca:	68f8      	ldr	r0, [r7, #12]
 8013ecc:	f7f8 fbdf 	bl	800c68e <lwip_htonl>
 8013ed0:	4602      	mov	r2, r0
 8013ed2:	693b      	ldr	r3, [r7, #16]
 8013ed4:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013ed6:	897b      	ldrh	r3, [r7, #10]
 8013ed8:	089b      	lsrs	r3, r3, #2
 8013eda:	b29b      	uxth	r3, r3
 8013edc:	3305      	adds	r3, #5
 8013ede:	b29b      	uxth	r3, r3
 8013ee0:	031b      	lsls	r3, r3, #12
 8013ee2:	b29a      	uxth	r2, r3
 8013ee4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013ee8:	b29b      	uxth	r3, r3
 8013eea:	4313      	orrs	r3, r2
 8013eec:	b29b      	uxth	r3, r3
 8013eee:	4618      	mov	r0, r3
 8013ef0:	f7f8 fbb8 	bl	800c664 <lwip_htons>
 8013ef4:	4603      	mov	r3, r0
 8013ef6:	461a      	mov	r2, r3
 8013ef8:	693b      	ldr	r3, [r7, #16]
 8013efa:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013efc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013efe:	4618      	mov	r0, r3
 8013f00:	f7f8 fbb0 	bl	800c664 <lwip_htons>
 8013f04:	4603      	mov	r3, r0
 8013f06:	461a      	mov	r2, r3
 8013f08:	693b      	ldr	r3, [r7, #16]
 8013f0a:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8013f0c:	693b      	ldr	r3, [r7, #16]
 8013f0e:	2200      	movs	r2, #0
 8013f10:	741a      	strb	r2, [r3, #16]
 8013f12:	2200      	movs	r2, #0
 8013f14:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013f16:	693b      	ldr	r3, [r7, #16]
 8013f18:	2200      	movs	r2, #0
 8013f1a:	749a      	strb	r2, [r3, #18]
 8013f1c:	2200      	movs	r2, #0
 8013f1e:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8013f20:	697b      	ldr	r3, [r7, #20]
}
 8013f22:	4618      	mov	r0, r3
 8013f24:	3718      	adds	r7, #24
 8013f26:	46bd      	mov	sp, r7
 8013f28:	bd80      	pop	{r7, pc}
 8013f2a:	bf00      	nop
 8013f2c:	0801a7f0 	.word	0x0801a7f0
 8013f30:	0801aec8 	.word	0x0801aec8
 8013f34:	0801a844 	.word	0x0801a844

08013f38 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013f38:	b5b0      	push	{r4, r5, r7, lr}
 8013f3a:	b08a      	sub	sp, #40	; 0x28
 8013f3c:	af04      	add	r7, sp, #16
 8013f3e:	60f8      	str	r0, [r7, #12]
 8013f40:	607b      	str	r3, [r7, #4]
 8013f42:	460b      	mov	r3, r1
 8013f44:	817b      	strh	r3, [r7, #10]
 8013f46:	4613      	mov	r3, r2
 8013f48:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d106      	bne.n	8013f5e <tcp_output_alloc_header+0x26>
 8013f50:	4b15      	ldr	r3, [pc, #84]	; (8013fa8 <tcp_output_alloc_header+0x70>)
 8013f52:	f240 7242 	movw	r2, #1858	; 0x742
 8013f56:	4915      	ldr	r1, [pc, #84]	; (8013fac <tcp_output_alloc_header+0x74>)
 8013f58:	4815      	ldr	r0, [pc, #84]	; (8013fb0 <tcp_output_alloc_header+0x78>)
 8013f5a:	f003 f8f7 	bl	801714c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	8adb      	ldrh	r3, [r3, #22]
 8013f66:	68fa      	ldr	r2, [r7, #12]
 8013f68:	8b12      	ldrh	r2, [r2, #24]
 8013f6a:	68f9      	ldr	r1, [r7, #12]
 8013f6c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8013f6e:	893d      	ldrh	r5, [r7, #8]
 8013f70:	897c      	ldrh	r4, [r7, #10]
 8013f72:	9103      	str	r1, [sp, #12]
 8013f74:	2110      	movs	r1, #16
 8013f76:	9102      	str	r1, [sp, #8]
 8013f78:	9201      	str	r2, [sp, #4]
 8013f7a:	9300      	str	r3, [sp, #0]
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	462a      	mov	r2, r5
 8013f80:	4621      	mov	r1, r4
 8013f82:	f7ff ff65 	bl	8013e50 <tcp_output_alloc_header_common>
 8013f86:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013f88:	697b      	ldr	r3, [r7, #20]
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d006      	beq.n	8013f9c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f92:	68fa      	ldr	r2, [r7, #12]
 8013f94:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013f96:	441a      	add	r2, r3
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013f9c:	697b      	ldr	r3, [r7, #20]
}
 8013f9e:	4618      	mov	r0, r3
 8013fa0:	3718      	adds	r7, #24
 8013fa2:	46bd      	mov	sp, r7
 8013fa4:	bdb0      	pop	{r4, r5, r7, pc}
 8013fa6:	bf00      	nop
 8013fa8:	0801a7f0 	.word	0x0801a7f0
 8013fac:	0801aef8 	.word	0x0801aef8
 8013fb0:	0801a844 	.word	0x0801a844

08013fb4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013fb4:	b580      	push	{r7, lr}
 8013fb6:	b088      	sub	sp, #32
 8013fb8:	af00      	add	r7, sp, #0
 8013fba:	60f8      	str	r0, [r7, #12]
 8013fbc:	60b9      	str	r1, [r7, #8]
 8013fbe:	4611      	mov	r1, r2
 8013fc0:	461a      	mov	r2, r3
 8013fc2:	460b      	mov	r3, r1
 8013fc4:	71fb      	strb	r3, [r7, #7]
 8013fc6:	4613      	mov	r3, r2
 8013fc8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013fca:	2300      	movs	r3, #0
 8013fcc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8013fce:	68bb      	ldr	r3, [r7, #8]
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d106      	bne.n	8013fe2 <tcp_output_fill_options+0x2e>
 8013fd4:	4b13      	ldr	r3, [pc, #76]	; (8014024 <tcp_output_fill_options+0x70>)
 8013fd6:	f240 7256 	movw	r2, #1878	; 0x756
 8013fda:	4913      	ldr	r1, [pc, #76]	; (8014028 <tcp_output_fill_options+0x74>)
 8013fdc:	4813      	ldr	r0, [pc, #76]	; (801402c <tcp_output_fill_options+0x78>)
 8013fde:	f003 f8b5 	bl	801714c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8013fe2:	68bb      	ldr	r3, [r7, #8]
 8013fe4:	685b      	ldr	r3, [r3, #4]
 8013fe6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013fe8:	69bb      	ldr	r3, [r7, #24]
 8013fea:	3314      	adds	r3, #20
 8013fec:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8013fee:	69bb      	ldr	r3, [r7, #24]
 8013ff0:	f103 0214 	add.w	r2, r3, #20
 8013ff4:	8bfb      	ldrh	r3, [r7, #30]
 8013ff6:	009b      	lsls	r3, r3, #2
 8013ff8:	4619      	mov	r1, r3
 8013ffa:	79fb      	ldrb	r3, [r7, #7]
 8013ffc:	009b      	lsls	r3, r3, #2
 8013ffe:	f003 0304 	and.w	r3, r3, #4
 8014002:	440b      	add	r3, r1
 8014004:	4413      	add	r3, r2
 8014006:	697a      	ldr	r2, [r7, #20]
 8014008:	429a      	cmp	r2, r3
 801400a:	d006      	beq.n	801401a <tcp_output_fill_options+0x66>
 801400c:	4b05      	ldr	r3, [pc, #20]	; (8014024 <tcp_output_fill_options+0x70>)
 801400e:	f240 7275 	movw	r2, #1909	; 0x775
 8014012:	4907      	ldr	r1, [pc, #28]	; (8014030 <tcp_output_fill_options+0x7c>)
 8014014:	4805      	ldr	r0, [pc, #20]	; (801402c <tcp_output_fill_options+0x78>)
 8014016:	f003 f899 	bl	801714c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801401a:	bf00      	nop
 801401c:	3720      	adds	r7, #32
 801401e:	46bd      	mov	sp, r7
 8014020:	bd80      	pop	{r7, pc}
 8014022:	bf00      	nop
 8014024:	0801a7f0 	.word	0x0801a7f0
 8014028:	0801af20 	.word	0x0801af20
 801402c:	0801a844 	.word	0x0801a844
 8014030:	0801ae18 	.word	0x0801ae18

08014034 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8014034:	b580      	push	{r7, lr}
 8014036:	b08a      	sub	sp, #40	; 0x28
 8014038:	af04      	add	r7, sp, #16
 801403a:	60f8      	str	r0, [r7, #12]
 801403c:	60b9      	str	r1, [r7, #8]
 801403e:	607a      	str	r2, [r7, #4]
 8014040:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8014042:	68bb      	ldr	r3, [r7, #8]
 8014044:	2b00      	cmp	r3, #0
 8014046:	d106      	bne.n	8014056 <tcp_output_control_segment+0x22>
 8014048:	4b1c      	ldr	r3, [pc, #112]	; (80140bc <tcp_output_control_segment+0x88>)
 801404a:	f240 7287 	movw	r2, #1927	; 0x787
 801404e:	491c      	ldr	r1, [pc, #112]	; (80140c0 <tcp_output_control_segment+0x8c>)
 8014050:	481c      	ldr	r0, [pc, #112]	; (80140c4 <tcp_output_control_segment+0x90>)
 8014052:	f003 f87b 	bl	801714c <iprintf>

  netif = tcp_route(pcb, src, dst);
 8014056:	683a      	ldr	r2, [r7, #0]
 8014058:	6879      	ldr	r1, [r7, #4]
 801405a:	68f8      	ldr	r0, [r7, #12]
 801405c:	f7fe fad4 	bl	8012608 <tcp_route>
 8014060:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8014062:	693b      	ldr	r3, [r7, #16]
 8014064:	2b00      	cmp	r3, #0
 8014066:	d102      	bne.n	801406e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014068:	23fc      	movs	r3, #252	; 0xfc
 801406a:	75fb      	strb	r3, [r7, #23]
 801406c:	e01c      	b.n	80140a8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	2b00      	cmp	r3, #0
 8014072:	d006      	beq.n	8014082 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	7adb      	ldrb	r3, [r3, #11]
 8014078:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	7a9b      	ldrb	r3, [r3, #10]
 801407e:	757b      	strb	r3, [r7, #21]
 8014080:	e003      	b.n	801408a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8014082:	23ff      	movs	r3, #255	; 0xff
 8014084:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8014086:	2300      	movs	r3, #0
 8014088:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801408a:	7dba      	ldrb	r2, [r7, #22]
 801408c:	693b      	ldr	r3, [r7, #16]
 801408e:	9302      	str	r3, [sp, #8]
 8014090:	2306      	movs	r3, #6
 8014092:	9301      	str	r3, [sp, #4]
 8014094:	7d7b      	ldrb	r3, [r7, #21]
 8014096:	9300      	str	r3, [sp, #0]
 8014098:	4613      	mov	r3, r2
 801409a:	683a      	ldr	r2, [r7, #0]
 801409c:	6879      	ldr	r1, [r7, #4]
 801409e:	68b8      	ldr	r0, [r7, #8]
 80140a0:	f001 fdda 	bl	8015c58 <ip4_output_if>
 80140a4:	4603      	mov	r3, r0
 80140a6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80140a8:	68b8      	ldr	r0, [r7, #8]
 80140aa:	f7f9 feaf 	bl	800de0c <pbuf_free>
  return err;
 80140ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80140b2:	4618      	mov	r0, r3
 80140b4:	3718      	adds	r7, #24
 80140b6:	46bd      	mov	sp, r7
 80140b8:	bd80      	pop	{r7, pc}
 80140ba:	bf00      	nop
 80140bc:	0801a7f0 	.word	0x0801a7f0
 80140c0:	0801af48 	.word	0x0801af48
 80140c4:	0801a844 	.word	0x0801a844

080140c8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80140c8:	b590      	push	{r4, r7, lr}
 80140ca:	b08b      	sub	sp, #44	; 0x2c
 80140cc:	af04      	add	r7, sp, #16
 80140ce:	60f8      	str	r0, [r7, #12]
 80140d0:	60b9      	str	r1, [r7, #8]
 80140d2:	607a      	str	r2, [r7, #4]
 80140d4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80140d6:	683b      	ldr	r3, [r7, #0]
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d106      	bne.n	80140ea <tcp_rst+0x22>
 80140dc:	4b1f      	ldr	r3, [pc, #124]	; (801415c <tcp_rst+0x94>)
 80140de:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80140e2:	491f      	ldr	r1, [pc, #124]	; (8014160 <tcp_rst+0x98>)
 80140e4:	481f      	ldr	r0, [pc, #124]	; (8014164 <tcp_rst+0x9c>)
 80140e6:	f003 f831 	bl	801714c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80140ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d106      	bne.n	80140fe <tcp_rst+0x36>
 80140f0:	4b1a      	ldr	r3, [pc, #104]	; (801415c <tcp_rst+0x94>)
 80140f2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80140f6:	491c      	ldr	r1, [pc, #112]	; (8014168 <tcp_rst+0xa0>)
 80140f8:	481a      	ldr	r0, [pc, #104]	; (8014164 <tcp_rst+0x9c>)
 80140fa:	f003 f827 	bl	801714c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80140fe:	2300      	movs	r3, #0
 8014100:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8014102:	f246 0308 	movw	r3, #24584	; 0x6008
 8014106:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8014108:	7dfb      	ldrb	r3, [r7, #23]
 801410a:	b29c      	uxth	r4, r3
 801410c:	68b8      	ldr	r0, [r7, #8]
 801410e:	f7f8 fabe 	bl	800c68e <lwip_htonl>
 8014112:	4602      	mov	r2, r0
 8014114:	8abb      	ldrh	r3, [r7, #20]
 8014116:	9303      	str	r3, [sp, #12]
 8014118:	2314      	movs	r3, #20
 801411a:	9302      	str	r3, [sp, #8]
 801411c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801411e:	9301      	str	r3, [sp, #4]
 8014120:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014122:	9300      	str	r3, [sp, #0]
 8014124:	4613      	mov	r3, r2
 8014126:	2200      	movs	r2, #0
 8014128:	4621      	mov	r1, r4
 801412a:	6878      	ldr	r0, [r7, #4]
 801412c:	f7ff fe90 	bl	8013e50 <tcp_output_alloc_header_common>
 8014130:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8014132:	693b      	ldr	r3, [r7, #16]
 8014134:	2b00      	cmp	r3, #0
 8014136:	d00c      	beq.n	8014152 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014138:	7dfb      	ldrb	r3, [r7, #23]
 801413a:	2200      	movs	r2, #0
 801413c:	6939      	ldr	r1, [r7, #16]
 801413e:	68f8      	ldr	r0, [r7, #12]
 8014140:	f7ff ff38 	bl	8013fb4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014146:	683a      	ldr	r2, [r7, #0]
 8014148:	6939      	ldr	r1, [r7, #16]
 801414a:	68f8      	ldr	r0, [r7, #12]
 801414c:	f7ff ff72 	bl	8014034 <tcp_output_control_segment>
 8014150:	e000      	b.n	8014154 <tcp_rst+0x8c>
    return;
 8014152:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014154:	371c      	adds	r7, #28
 8014156:	46bd      	mov	sp, r7
 8014158:	bd90      	pop	{r4, r7, pc}
 801415a:	bf00      	nop
 801415c:	0801a7f0 	.word	0x0801a7f0
 8014160:	0801af74 	.word	0x0801af74
 8014164:	0801a844 	.word	0x0801a844
 8014168:	0801af90 	.word	0x0801af90

0801416c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801416c:	b590      	push	{r4, r7, lr}
 801416e:	b087      	sub	sp, #28
 8014170:	af00      	add	r7, sp, #0
 8014172:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014174:	2300      	movs	r3, #0
 8014176:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014178:	2300      	movs	r3, #0
 801417a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	2b00      	cmp	r3, #0
 8014180:	d106      	bne.n	8014190 <tcp_send_empty_ack+0x24>
 8014182:	4b28      	ldr	r3, [pc, #160]	; (8014224 <tcp_send_empty_ack+0xb8>)
 8014184:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8014188:	4927      	ldr	r1, [pc, #156]	; (8014228 <tcp_send_empty_ack+0xbc>)
 801418a:	4828      	ldr	r0, [pc, #160]	; (801422c <tcp_send_empty_ack+0xc0>)
 801418c:	f002 ffde 	bl	801714c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014190:	7dfb      	ldrb	r3, [r7, #23]
 8014192:	009b      	lsls	r3, r3, #2
 8014194:	b2db      	uxtb	r3, r3
 8014196:	f003 0304 	and.w	r3, r3, #4
 801419a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801419c:	7d7b      	ldrb	r3, [r7, #21]
 801419e:	b29c      	uxth	r4, r3
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80141a4:	4618      	mov	r0, r3
 80141a6:	f7f8 fa72 	bl	800c68e <lwip_htonl>
 80141aa:	4603      	mov	r3, r0
 80141ac:	2200      	movs	r2, #0
 80141ae:	4621      	mov	r1, r4
 80141b0:	6878      	ldr	r0, [r7, #4]
 80141b2:	f7ff fec1 	bl	8013f38 <tcp_output_alloc_header>
 80141b6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80141b8:	693b      	ldr	r3, [r7, #16]
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d109      	bne.n	80141d2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	8b5b      	ldrh	r3, [r3, #26]
 80141c2:	f043 0303 	orr.w	r3, r3, #3
 80141c6:	b29a      	uxth	r2, r3
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80141cc:	f06f 0301 	mvn.w	r3, #1
 80141d0:	e023      	b.n	801421a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80141d2:	7dbb      	ldrb	r3, [r7, #22]
 80141d4:	7dfa      	ldrb	r2, [r7, #23]
 80141d6:	6939      	ldr	r1, [r7, #16]
 80141d8:	6878      	ldr	r0, [r7, #4]
 80141da:	f7ff feeb 	bl	8013fb4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80141de:	687a      	ldr	r2, [r7, #4]
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	3304      	adds	r3, #4
 80141e4:	6939      	ldr	r1, [r7, #16]
 80141e6:	6878      	ldr	r0, [r7, #4]
 80141e8:	f7ff ff24 	bl	8014034 <tcp_output_control_segment>
 80141ec:	4603      	mov	r3, r0
 80141ee:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80141f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d007      	beq.n	8014208 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	8b5b      	ldrh	r3, [r3, #26]
 80141fc:	f043 0303 	orr.w	r3, r3, #3
 8014200:	b29a      	uxth	r2, r3
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	835a      	strh	r2, [r3, #26]
 8014206:	e006      	b.n	8014216 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	8b5b      	ldrh	r3, [r3, #26]
 801420c:	f023 0303 	bic.w	r3, r3, #3
 8014210:	b29a      	uxth	r2, r3
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8014216:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801421a:	4618      	mov	r0, r3
 801421c:	371c      	adds	r7, #28
 801421e:	46bd      	mov	sp, r7
 8014220:	bd90      	pop	{r4, r7, pc}
 8014222:	bf00      	nop
 8014224:	0801a7f0 	.word	0x0801a7f0
 8014228:	0801afac 	.word	0x0801afac
 801422c:	0801a844 	.word	0x0801a844

08014230 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014230:	b590      	push	{r4, r7, lr}
 8014232:	b087      	sub	sp, #28
 8014234:	af00      	add	r7, sp, #0
 8014236:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014238:	2300      	movs	r3, #0
 801423a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	2b00      	cmp	r3, #0
 8014240:	d106      	bne.n	8014250 <tcp_keepalive+0x20>
 8014242:	4b18      	ldr	r3, [pc, #96]	; (80142a4 <tcp_keepalive+0x74>)
 8014244:	f640 0224 	movw	r2, #2084	; 0x824
 8014248:	4917      	ldr	r1, [pc, #92]	; (80142a8 <tcp_keepalive+0x78>)
 801424a:	4818      	ldr	r0, [pc, #96]	; (80142ac <tcp_keepalive+0x7c>)
 801424c:	f002 ff7e 	bl	801714c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014250:	7dfb      	ldrb	r3, [r7, #23]
 8014252:	b29c      	uxth	r4, r3
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014258:	3b01      	subs	r3, #1
 801425a:	4618      	mov	r0, r3
 801425c:	f7f8 fa17 	bl	800c68e <lwip_htonl>
 8014260:	4603      	mov	r3, r0
 8014262:	2200      	movs	r2, #0
 8014264:	4621      	mov	r1, r4
 8014266:	6878      	ldr	r0, [r7, #4]
 8014268:	f7ff fe66 	bl	8013f38 <tcp_output_alloc_header>
 801426c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801426e:	693b      	ldr	r3, [r7, #16]
 8014270:	2b00      	cmp	r3, #0
 8014272:	d102      	bne.n	801427a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014274:	f04f 33ff 	mov.w	r3, #4294967295
 8014278:	e010      	b.n	801429c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801427a:	7dfb      	ldrb	r3, [r7, #23]
 801427c:	2200      	movs	r2, #0
 801427e:	6939      	ldr	r1, [r7, #16]
 8014280:	6878      	ldr	r0, [r7, #4]
 8014282:	f7ff fe97 	bl	8013fb4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014286:	687a      	ldr	r2, [r7, #4]
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	3304      	adds	r3, #4
 801428c:	6939      	ldr	r1, [r7, #16]
 801428e:	6878      	ldr	r0, [r7, #4]
 8014290:	f7ff fed0 	bl	8014034 <tcp_output_control_segment>
 8014294:	4603      	mov	r3, r0
 8014296:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014298:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801429c:	4618      	mov	r0, r3
 801429e:	371c      	adds	r7, #28
 80142a0:	46bd      	mov	sp, r7
 80142a2:	bd90      	pop	{r4, r7, pc}
 80142a4:	0801a7f0 	.word	0x0801a7f0
 80142a8:	0801afcc 	.word	0x0801afcc
 80142ac:	0801a844 	.word	0x0801a844

080142b0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80142b0:	b590      	push	{r4, r7, lr}
 80142b2:	b08b      	sub	sp, #44	; 0x2c
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80142b8:	2300      	movs	r3, #0
 80142ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d106      	bne.n	80142d2 <tcp_zero_window_probe+0x22>
 80142c4:	4b4c      	ldr	r3, [pc, #304]	; (80143f8 <tcp_zero_window_probe+0x148>)
 80142c6:	f640 024f 	movw	r2, #2127	; 0x84f
 80142ca:	494c      	ldr	r1, [pc, #304]	; (80143fc <tcp_zero_window_probe+0x14c>)
 80142cc:	484c      	ldr	r0, [pc, #304]	; (8014400 <tcp_zero_window_probe+0x150>)
 80142ce:	f002 ff3d 	bl	801714c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142d6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80142d8:	6a3b      	ldr	r3, [r7, #32]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d101      	bne.n	80142e2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80142de:	2300      	movs	r3, #0
 80142e0:	e086      	b.n	80143f0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80142e8:	2bff      	cmp	r3, #255	; 0xff
 80142ea:	d007      	beq.n	80142fc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80142f2:	3301      	adds	r3, #1
 80142f4:	b2da      	uxtb	r2, r3
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80142fc:	6a3b      	ldr	r3, [r7, #32]
 80142fe:	68db      	ldr	r3, [r3, #12]
 8014300:	899b      	ldrh	r3, [r3, #12]
 8014302:	b29b      	uxth	r3, r3
 8014304:	4618      	mov	r0, r3
 8014306:	f7f8 f9ad 	bl	800c664 <lwip_htons>
 801430a:	4603      	mov	r3, r0
 801430c:	b2db      	uxtb	r3, r3
 801430e:	f003 0301 	and.w	r3, r3, #1
 8014312:	2b00      	cmp	r3, #0
 8014314:	d005      	beq.n	8014322 <tcp_zero_window_probe+0x72>
 8014316:	6a3b      	ldr	r3, [r7, #32]
 8014318:	891b      	ldrh	r3, [r3, #8]
 801431a:	2b00      	cmp	r3, #0
 801431c:	d101      	bne.n	8014322 <tcp_zero_window_probe+0x72>
 801431e:	2301      	movs	r3, #1
 8014320:	e000      	b.n	8014324 <tcp_zero_window_probe+0x74>
 8014322:	2300      	movs	r3, #0
 8014324:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014326:	7ffb      	ldrb	r3, [r7, #31]
 8014328:	2b00      	cmp	r3, #0
 801432a:	bf0c      	ite	eq
 801432c:	2301      	moveq	r3, #1
 801432e:	2300      	movne	r3, #0
 8014330:	b2db      	uxtb	r3, r3
 8014332:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014334:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014338:	b299      	uxth	r1, r3
 801433a:	6a3b      	ldr	r3, [r7, #32]
 801433c:	68db      	ldr	r3, [r3, #12]
 801433e:	685b      	ldr	r3, [r3, #4]
 8014340:	8bba      	ldrh	r2, [r7, #28]
 8014342:	6878      	ldr	r0, [r7, #4]
 8014344:	f7ff fdf8 	bl	8013f38 <tcp_output_alloc_header>
 8014348:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801434a:	69bb      	ldr	r3, [r7, #24]
 801434c:	2b00      	cmp	r3, #0
 801434e:	d102      	bne.n	8014356 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014350:	f04f 33ff 	mov.w	r3, #4294967295
 8014354:	e04c      	b.n	80143f0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014356:	69bb      	ldr	r3, [r7, #24]
 8014358:	685b      	ldr	r3, [r3, #4]
 801435a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801435c:	7ffb      	ldrb	r3, [r7, #31]
 801435e:	2b00      	cmp	r3, #0
 8014360:	d011      	beq.n	8014386 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014362:	697b      	ldr	r3, [r7, #20]
 8014364:	899b      	ldrh	r3, [r3, #12]
 8014366:	b29b      	uxth	r3, r3
 8014368:	b21b      	sxth	r3, r3
 801436a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801436e:	b21c      	sxth	r4, r3
 8014370:	2011      	movs	r0, #17
 8014372:	f7f8 f977 	bl	800c664 <lwip_htons>
 8014376:	4603      	mov	r3, r0
 8014378:	b21b      	sxth	r3, r3
 801437a:	4323      	orrs	r3, r4
 801437c:	b21b      	sxth	r3, r3
 801437e:	b29a      	uxth	r2, r3
 8014380:	697b      	ldr	r3, [r7, #20]
 8014382:	819a      	strh	r2, [r3, #12]
 8014384:	e010      	b.n	80143a8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014386:	69bb      	ldr	r3, [r7, #24]
 8014388:	685b      	ldr	r3, [r3, #4]
 801438a:	3314      	adds	r3, #20
 801438c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801438e:	6a3b      	ldr	r3, [r7, #32]
 8014390:	6858      	ldr	r0, [r3, #4]
 8014392:	6a3b      	ldr	r3, [r7, #32]
 8014394:	685b      	ldr	r3, [r3, #4]
 8014396:	891a      	ldrh	r2, [r3, #8]
 8014398:	6a3b      	ldr	r3, [r7, #32]
 801439a:	891b      	ldrh	r3, [r3, #8]
 801439c:	1ad3      	subs	r3, r2, r3
 801439e:	b29b      	uxth	r3, r3
 80143a0:	2201      	movs	r2, #1
 80143a2:	6939      	ldr	r1, [r7, #16]
 80143a4:	f7f9 ff28 	bl	800e1f8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80143a8:	6a3b      	ldr	r3, [r7, #32]
 80143aa:	68db      	ldr	r3, [r3, #12]
 80143ac:	685b      	ldr	r3, [r3, #4]
 80143ae:	4618      	mov	r0, r3
 80143b0:	f7f8 f96d 	bl	800c68e <lwip_htonl>
 80143b4:	4603      	mov	r3, r0
 80143b6:	3301      	adds	r3, #1
 80143b8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	1ad3      	subs	r3, r2, r3
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	da02      	bge.n	80143cc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	68fa      	ldr	r2, [r7, #12]
 80143ca:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80143cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80143d0:	2200      	movs	r2, #0
 80143d2:	69b9      	ldr	r1, [r7, #24]
 80143d4:	6878      	ldr	r0, [r7, #4]
 80143d6:	f7ff fded 	bl	8013fb4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80143da:	687a      	ldr	r2, [r7, #4]
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	3304      	adds	r3, #4
 80143e0:	69b9      	ldr	r1, [r7, #24]
 80143e2:	6878      	ldr	r0, [r7, #4]
 80143e4:	f7ff fe26 	bl	8014034 <tcp_output_control_segment>
 80143e8:	4603      	mov	r3, r0
 80143ea:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80143ec:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80143f0:	4618      	mov	r0, r3
 80143f2:	372c      	adds	r7, #44	; 0x2c
 80143f4:	46bd      	mov	sp, r7
 80143f6:	bd90      	pop	{r4, r7, pc}
 80143f8:	0801a7f0 	.word	0x0801a7f0
 80143fc:	0801afe8 	.word	0x0801afe8
 8014400:	0801a844 	.word	0x0801a844

08014404 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014404:	b580      	push	{r7, lr}
 8014406:	b082      	sub	sp, #8
 8014408:	af00      	add	r7, sp, #0
 801440a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801440c:	f7f9 ffe2 	bl	800e3d4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014410:	4b0a      	ldr	r3, [pc, #40]	; (801443c <tcpip_tcp_timer+0x38>)
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	2b00      	cmp	r3, #0
 8014416:	d103      	bne.n	8014420 <tcpip_tcp_timer+0x1c>
 8014418:	4b09      	ldr	r3, [pc, #36]	; (8014440 <tcpip_tcp_timer+0x3c>)
 801441a:	681b      	ldr	r3, [r3, #0]
 801441c:	2b00      	cmp	r3, #0
 801441e:	d005      	beq.n	801442c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014420:	2200      	movs	r2, #0
 8014422:	4908      	ldr	r1, [pc, #32]	; (8014444 <tcpip_tcp_timer+0x40>)
 8014424:	20fa      	movs	r0, #250	; 0xfa
 8014426:	f000 f8f1 	bl	801460c <sys_timeout>
 801442a:	e002      	b.n	8014432 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801442c:	4b06      	ldr	r3, [pc, #24]	; (8014448 <tcpip_tcp_timer+0x44>)
 801442e:	2200      	movs	r2, #0
 8014430:	601a      	str	r2, [r3, #0]
  }
}
 8014432:	bf00      	nop
 8014434:	3708      	adds	r7, #8
 8014436:	46bd      	mov	sp, r7
 8014438:	bd80      	pop	{r7, pc}
 801443a:	bf00      	nop
 801443c:	2000d240 	.word	0x2000d240
 8014440:	2000d250 	.word	0x2000d250
 8014444:	08014405 	.word	0x08014405
 8014448:	20004688 	.word	0x20004688

0801444c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801444c:	b580      	push	{r7, lr}
 801444e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014450:	4b0a      	ldr	r3, [pc, #40]	; (801447c <tcp_timer_needed+0x30>)
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	2b00      	cmp	r3, #0
 8014456:	d10f      	bne.n	8014478 <tcp_timer_needed+0x2c>
 8014458:	4b09      	ldr	r3, [pc, #36]	; (8014480 <tcp_timer_needed+0x34>)
 801445a:	681b      	ldr	r3, [r3, #0]
 801445c:	2b00      	cmp	r3, #0
 801445e:	d103      	bne.n	8014468 <tcp_timer_needed+0x1c>
 8014460:	4b08      	ldr	r3, [pc, #32]	; (8014484 <tcp_timer_needed+0x38>)
 8014462:	681b      	ldr	r3, [r3, #0]
 8014464:	2b00      	cmp	r3, #0
 8014466:	d007      	beq.n	8014478 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014468:	4b04      	ldr	r3, [pc, #16]	; (801447c <tcp_timer_needed+0x30>)
 801446a:	2201      	movs	r2, #1
 801446c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801446e:	2200      	movs	r2, #0
 8014470:	4905      	ldr	r1, [pc, #20]	; (8014488 <tcp_timer_needed+0x3c>)
 8014472:	20fa      	movs	r0, #250	; 0xfa
 8014474:	f000 f8ca 	bl	801460c <sys_timeout>
  }
}
 8014478:	bf00      	nop
 801447a:	bd80      	pop	{r7, pc}
 801447c:	20004688 	.word	0x20004688
 8014480:	2000d240 	.word	0x2000d240
 8014484:	2000d250 	.word	0x2000d250
 8014488:	08014405 	.word	0x08014405

0801448c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801448c:	b580      	push	{r7, lr}
 801448e:	b086      	sub	sp, #24
 8014490:	af00      	add	r7, sp, #0
 8014492:	60f8      	str	r0, [r7, #12]
 8014494:	60b9      	str	r1, [r7, #8]
 8014496:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014498:	2009      	movs	r0, #9
 801449a:	f7f8 fd97 	bl	800cfcc <memp_malloc>
 801449e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80144a0:	693b      	ldr	r3, [r7, #16]
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d109      	bne.n	80144ba <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80144a6:	693b      	ldr	r3, [r7, #16]
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d151      	bne.n	8014550 <sys_timeout_abs+0xc4>
 80144ac:	4b2a      	ldr	r3, [pc, #168]	; (8014558 <sys_timeout_abs+0xcc>)
 80144ae:	22be      	movs	r2, #190	; 0xbe
 80144b0:	492a      	ldr	r1, [pc, #168]	; (801455c <sys_timeout_abs+0xd0>)
 80144b2:	482b      	ldr	r0, [pc, #172]	; (8014560 <sys_timeout_abs+0xd4>)
 80144b4:	f002 fe4a 	bl	801714c <iprintf>
    return;
 80144b8:	e04a      	b.n	8014550 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80144ba:	693b      	ldr	r3, [r7, #16]
 80144bc:	2200      	movs	r2, #0
 80144be:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80144c0:	693b      	ldr	r3, [r7, #16]
 80144c2:	68ba      	ldr	r2, [r7, #8]
 80144c4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80144c6:	693b      	ldr	r3, [r7, #16]
 80144c8:	687a      	ldr	r2, [r7, #4]
 80144ca:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80144cc:	693b      	ldr	r3, [r7, #16]
 80144ce:	68fa      	ldr	r2, [r7, #12]
 80144d0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80144d2:	4b24      	ldr	r3, [pc, #144]	; (8014564 <sys_timeout_abs+0xd8>)
 80144d4:	681b      	ldr	r3, [r3, #0]
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d103      	bne.n	80144e2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80144da:	4a22      	ldr	r2, [pc, #136]	; (8014564 <sys_timeout_abs+0xd8>)
 80144dc:	693b      	ldr	r3, [r7, #16]
 80144de:	6013      	str	r3, [r2, #0]
    return;
 80144e0:	e037      	b.n	8014552 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80144e2:	693b      	ldr	r3, [r7, #16]
 80144e4:	685a      	ldr	r2, [r3, #4]
 80144e6:	4b1f      	ldr	r3, [pc, #124]	; (8014564 <sys_timeout_abs+0xd8>)
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	685b      	ldr	r3, [r3, #4]
 80144ec:	1ad3      	subs	r3, r2, r3
 80144ee:	0fdb      	lsrs	r3, r3, #31
 80144f0:	f003 0301 	and.w	r3, r3, #1
 80144f4:	b2db      	uxtb	r3, r3
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d007      	beq.n	801450a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80144fa:	4b1a      	ldr	r3, [pc, #104]	; (8014564 <sys_timeout_abs+0xd8>)
 80144fc:	681a      	ldr	r2, [r3, #0]
 80144fe:	693b      	ldr	r3, [r7, #16]
 8014500:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014502:	4a18      	ldr	r2, [pc, #96]	; (8014564 <sys_timeout_abs+0xd8>)
 8014504:	693b      	ldr	r3, [r7, #16]
 8014506:	6013      	str	r3, [r2, #0]
 8014508:	e023      	b.n	8014552 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801450a:	4b16      	ldr	r3, [pc, #88]	; (8014564 <sys_timeout_abs+0xd8>)
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	617b      	str	r3, [r7, #20]
 8014510:	e01a      	b.n	8014548 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014512:	697b      	ldr	r3, [r7, #20]
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	2b00      	cmp	r3, #0
 8014518:	d00b      	beq.n	8014532 <sys_timeout_abs+0xa6>
 801451a:	693b      	ldr	r3, [r7, #16]
 801451c:	685a      	ldr	r2, [r3, #4]
 801451e:	697b      	ldr	r3, [r7, #20]
 8014520:	681b      	ldr	r3, [r3, #0]
 8014522:	685b      	ldr	r3, [r3, #4]
 8014524:	1ad3      	subs	r3, r2, r3
 8014526:	0fdb      	lsrs	r3, r3, #31
 8014528:	f003 0301 	and.w	r3, r3, #1
 801452c:	b2db      	uxtb	r3, r3
 801452e:	2b00      	cmp	r3, #0
 8014530:	d007      	beq.n	8014542 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014532:	697b      	ldr	r3, [r7, #20]
 8014534:	681a      	ldr	r2, [r3, #0]
 8014536:	693b      	ldr	r3, [r7, #16]
 8014538:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801453a:	697b      	ldr	r3, [r7, #20]
 801453c:	693a      	ldr	r2, [r7, #16]
 801453e:	601a      	str	r2, [r3, #0]
        break;
 8014540:	e007      	b.n	8014552 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014542:	697b      	ldr	r3, [r7, #20]
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	617b      	str	r3, [r7, #20]
 8014548:	697b      	ldr	r3, [r7, #20]
 801454a:	2b00      	cmp	r3, #0
 801454c:	d1e1      	bne.n	8014512 <sys_timeout_abs+0x86>
 801454e:	e000      	b.n	8014552 <sys_timeout_abs+0xc6>
    return;
 8014550:	bf00      	nop
      }
    }
  }
}
 8014552:	3718      	adds	r7, #24
 8014554:	46bd      	mov	sp, r7
 8014556:	bd80      	pop	{r7, pc}
 8014558:	0801b00c 	.word	0x0801b00c
 801455c:	0801b040 	.word	0x0801b040
 8014560:	0801b080 	.word	0x0801b080
 8014564:	20004680 	.word	0x20004680

08014568 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014568:	b580      	push	{r7, lr}
 801456a:	b086      	sub	sp, #24
 801456c:	af00      	add	r7, sp, #0
 801456e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014574:	697b      	ldr	r3, [r7, #20]
 8014576:	685b      	ldr	r3, [r3, #4]
 8014578:	4798      	blx	r3

  now = sys_now();
 801457a:	f7f1 f853 	bl	8005624 <sys_now>
 801457e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014580:	697b      	ldr	r3, [r7, #20]
 8014582:	681a      	ldr	r2, [r3, #0]
 8014584:	4b0f      	ldr	r3, [pc, #60]	; (80145c4 <lwip_cyclic_timer+0x5c>)
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	4413      	add	r3, r2
 801458a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801458c:	68fa      	ldr	r2, [r7, #12]
 801458e:	693b      	ldr	r3, [r7, #16]
 8014590:	1ad3      	subs	r3, r2, r3
 8014592:	0fdb      	lsrs	r3, r3, #31
 8014594:	f003 0301 	and.w	r3, r3, #1
 8014598:	b2db      	uxtb	r3, r3
 801459a:	2b00      	cmp	r3, #0
 801459c:	d009      	beq.n	80145b2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801459e:	697b      	ldr	r3, [r7, #20]
 80145a0:	681a      	ldr	r2, [r3, #0]
 80145a2:	693b      	ldr	r3, [r7, #16]
 80145a4:	4413      	add	r3, r2
 80145a6:	687a      	ldr	r2, [r7, #4]
 80145a8:	4907      	ldr	r1, [pc, #28]	; (80145c8 <lwip_cyclic_timer+0x60>)
 80145aa:	4618      	mov	r0, r3
 80145ac:	f7ff ff6e 	bl	801448c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80145b0:	e004      	b.n	80145bc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80145b2:	687a      	ldr	r2, [r7, #4]
 80145b4:	4904      	ldr	r1, [pc, #16]	; (80145c8 <lwip_cyclic_timer+0x60>)
 80145b6:	68f8      	ldr	r0, [r7, #12]
 80145b8:	f7ff ff68 	bl	801448c <sys_timeout_abs>
}
 80145bc:	bf00      	nop
 80145be:	3718      	adds	r7, #24
 80145c0:	46bd      	mov	sp, r7
 80145c2:	bd80      	pop	{r7, pc}
 80145c4:	20004684 	.word	0x20004684
 80145c8:	08014569 	.word	0x08014569

080145cc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b082      	sub	sp, #8
 80145d0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80145d2:	2301      	movs	r3, #1
 80145d4:	607b      	str	r3, [r7, #4]
 80145d6:	e00e      	b.n	80145f6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80145d8:	4a0a      	ldr	r2, [pc, #40]	; (8014604 <sys_timeouts_init+0x38>)
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	00db      	lsls	r3, r3, #3
 80145e4:	4a07      	ldr	r2, [pc, #28]	; (8014604 <sys_timeouts_init+0x38>)
 80145e6:	4413      	add	r3, r2
 80145e8:	461a      	mov	r2, r3
 80145ea:	4907      	ldr	r1, [pc, #28]	; (8014608 <sys_timeouts_init+0x3c>)
 80145ec:	f000 f80e 	bl	801460c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	3301      	adds	r3, #1
 80145f4:	607b      	str	r3, [r7, #4]
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	2b02      	cmp	r3, #2
 80145fa:	d9ed      	bls.n	80145d8 <sys_timeouts_init+0xc>
  }
}
 80145fc:	bf00      	nop
 80145fe:	3708      	adds	r7, #8
 8014600:	46bd      	mov	sp, r7
 8014602:	bd80      	pop	{r7, pc}
 8014604:	0801b900 	.word	0x0801b900
 8014608:	08014569 	.word	0x08014569

0801460c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801460c:	b580      	push	{r7, lr}
 801460e:	b086      	sub	sp, #24
 8014610:	af00      	add	r7, sp, #0
 8014612:	60f8      	str	r0, [r7, #12]
 8014614:	60b9      	str	r1, [r7, #8]
 8014616:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801461e:	d306      	bcc.n	801462e <sys_timeout+0x22>
 8014620:	4b0a      	ldr	r3, [pc, #40]	; (801464c <sys_timeout+0x40>)
 8014622:	f240 1229 	movw	r2, #297	; 0x129
 8014626:	490a      	ldr	r1, [pc, #40]	; (8014650 <sys_timeout+0x44>)
 8014628:	480a      	ldr	r0, [pc, #40]	; (8014654 <sys_timeout+0x48>)
 801462a:	f002 fd8f 	bl	801714c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801462e:	f7f0 fff9 	bl	8005624 <sys_now>
 8014632:	4602      	mov	r2, r0
 8014634:	68fb      	ldr	r3, [r7, #12]
 8014636:	4413      	add	r3, r2
 8014638:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801463a:	687a      	ldr	r2, [r7, #4]
 801463c:	68b9      	ldr	r1, [r7, #8]
 801463e:	6978      	ldr	r0, [r7, #20]
 8014640:	f7ff ff24 	bl	801448c <sys_timeout_abs>
#endif
}
 8014644:	bf00      	nop
 8014646:	3718      	adds	r7, #24
 8014648:	46bd      	mov	sp, r7
 801464a:	bd80      	pop	{r7, pc}
 801464c:	0801b00c 	.word	0x0801b00c
 8014650:	0801b0a8 	.word	0x0801b0a8
 8014654:	0801b080 	.word	0x0801b080

08014658 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014658:	b580      	push	{r7, lr}
 801465a:	b084      	sub	sp, #16
 801465c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801465e:	f7f0 ffe1 	bl	8005624 <sys_now>
 8014662:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8014664:	4b17      	ldr	r3, [pc, #92]	; (80146c4 <sys_check_timeouts+0x6c>)
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801466a:	68bb      	ldr	r3, [r7, #8]
 801466c:	2b00      	cmp	r3, #0
 801466e:	d022      	beq.n	80146b6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8014670:	68bb      	ldr	r3, [r7, #8]
 8014672:	685b      	ldr	r3, [r3, #4]
 8014674:	68fa      	ldr	r2, [r7, #12]
 8014676:	1ad3      	subs	r3, r2, r3
 8014678:	0fdb      	lsrs	r3, r3, #31
 801467a:	f003 0301 	and.w	r3, r3, #1
 801467e:	b2db      	uxtb	r3, r3
 8014680:	2b00      	cmp	r3, #0
 8014682:	d11a      	bne.n	80146ba <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014684:	68bb      	ldr	r3, [r7, #8]
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	4a0e      	ldr	r2, [pc, #56]	; (80146c4 <sys_check_timeouts+0x6c>)
 801468a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801468c:	68bb      	ldr	r3, [r7, #8]
 801468e:	689b      	ldr	r3, [r3, #8]
 8014690:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014692:	68bb      	ldr	r3, [r7, #8]
 8014694:	68db      	ldr	r3, [r3, #12]
 8014696:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014698:	68bb      	ldr	r3, [r7, #8]
 801469a:	685b      	ldr	r3, [r3, #4]
 801469c:	4a0a      	ldr	r2, [pc, #40]	; (80146c8 <sys_check_timeouts+0x70>)
 801469e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80146a0:	68b9      	ldr	r1, [r7, #8]
 80146a2:	2009      	movs	r0, #9
 80146a4:	f7f8 fce4 	bl	800d070 <memp_free>
    if (handler != NULL) {
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d0da      	beq.n	8014664 <sys_check_timeouts+0xc>
      handler(arg);
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	6838      	ldr	r0, [r7, #0]
 80146b2:	4798      	blx	r3
  do {
 80146b4:	e7d6      	b.n	8014664 <sys_check_timeouts+0xc>
      return;
 80146b6:	bf00      	nop
 80146b8:	e000      	b.n	80146bc <sys_check_timeouts+0x64>
      return;
 80146ba:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80146bc:	3710      	adds	r7, #16
 80146be:	46bd      	mov	sp, r7
 80146c0:	bd80      	pop	{r7, pc}
 80146c2:	bf00      	nop
 80146c4:	20004680 	.word	0x20004680
 80146c8:	20004684 	.word	0x20004684

080146cc <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80146cc:	b580      	push	{r7, lr}
 80146ce:	b082      	sub	sp, #8
 80146d0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80146d2:	4b16      	ldr	r3, [pc, #88]	; (801472c <sys_timeouts_sleeptime+0x60>)
 80146d4:	681b      	ldr	r3, [r3, #0]
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d102      	bne.n	80146e0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80146da:	f04f 33ff 	mov.w	r3, #4294967295
 80146de:	e020      	b.n	8014722 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80146e0:	f7f0 ffa0 	bl	8005624 <sys_now>
 80146e4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80146e6:	4b11      	ldr	r3, [pc, #68]	; (801472c <sys_timeouts_sleeptime+0x60>)
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	685a      	ldr	r2, [r3, #4]
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	1ad3      	subs	r3, r2, r3
 80146f0:	0fdb      	lsrs	r3, r3, #31
 80146f2:	f003 0301 	and.w	r3, r3, #1
 80146f6:	b2db      	uxtb	r3, r3
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d001      	beq.n	8014700 <sys_timeouts_sleeptime+0x34>
    return 0;
 80146fc:	2300      	movs	r3, #0
 80146fe:	e010      	b.n	8014722 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8014700:	4b0a      	ldr	r3, [pc, #40]	; (801472c <sys_timeouts_sleeptime+0x60>)
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	685a      	ldr	r2, [r3, #4]
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	1ad3      	subs	r3, r2, r3
 801470a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801470c:	683b      	ldr	r3, [r7, #0]
 801470e:	2b00      	cmp	r3, #0
 8014710:	da06      	bge.n	8014720 <sys_timeouts_sleeptime+0x54>
 8014712:	4b07      	ldr	r3, [pc, #28]	; (8014730 <sys_timeouts_sleeptime+0x64>)
 8014714:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8014718:	4906      	ldr	r1, [pc, #24]	; (8014734 <sys_timeouts_sleeptime+0x68>)
 801471a:	4807      	ldr	r0, [pc, #28]	; (8014738 <sys_timeouts_sleeptime+0x6c>)
 801471c:	f002 fd16 	bl	801714c <iprintf>
    return ret;
 8014720:	683b      	ldr	r3, [r7, #0]
  }
}
 8014722:	4618      	mov	r0, r3
 8014724:	3708      	adds	r7, #8
 8014726:	46bd      	mov	sp, r7
 8014728:	bd80      	pop	{r7, pc}
 801472a:	bf00      	nop
 801472c:	20004680 	.word	0x20004680
 8014730:	0801b00c 	.word	0x0801b00c
 8014734:	0801b0e0 	.word	0x0801b0e0
 8014738:	0801b080 	.word	0x0801b080

0801473c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801473c:	b580      	push	{r7, lr}
 801473e:	b082      	sub	sp, #8
 8014740:	af00      	add	r7, sp, #0
 8014742:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014744:	4915      	ldr	r1, [pc, #84]	; (801479c <etharp_free_entry+0x60>)
 8014746:	687a      	ldr	r2, [r7, #4]
 8014748:	4613      	mov	r3, r2
 801474a:	005b      	lsls	r3, r3, #1
 801474c:	4413      	add	r3, r2
 801474e:	00db      	lsls	r3, r3, #3
 8014750:	440b      	add	r3, r1
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	2b00      	cmp	r3, #0
 8014756:	d013      	beq.n	8014780 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014758:	4910      	ldr	r1, [pc, #64]	; (801479c <etharp_free_entry+0x60>)
 801475a:	687a      	ldr	r2, [r7, #4]
 801475c:	4613      	mov	r3, r2
 801475e:	005b      	lsls	r3, r3, #1
 8014760:	4413      	add	r3, r2
 8014762:	00db      	lsls	r3, r3, #3
 8014764:	440b      	add	r3, r1
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	4618      	mov	r0, r3
 801476a:	f7f9 fb4f 	bl	800de0c <pbuf_free>
    arp_table[i].q = NULL;
 801476e:	490b      	ldr	r1, [pc, #44]	; (801479c <etharp_free_entry+0x60>)
 8014770:	687a      	ldr	r2, [r7, #4]
 8014772:	4613      	mov	r3, r2
 8014774:	005b      	lsls	r3, r3, #1
 8014776:	4413      	add	r3, r2
 8014778:	00db      	lsls	r3, r3, #3
 801477a:	440b      	add	r3, r1
 801477c:	2200      	movs	r2, #0
 801477e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014780:	4906      	ldr	r1, [pc, #24]	; (801479c <etharp_free_entry+0x60>)
 8014782:	687a      	ldr	r2, [r7, #4]
 8014784:	4613      	mov	r3, r2
 8014786:	005b      	lsls	r3, r3, #1
 8014788:	4413      	add	r3, r2
 801478a:	00db      	lsls	r3, r3, #3
 801478c:	440b      	add	r3, r1
 801478e:	3314      	adds	r3, #20
 8014790:	2200      	movs	r2, #0
 8014792:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014794:	bf00      	nop
 8014796:	3708      	adds	r7, #8
 8014798:	46bd      	mov	sp, r7
 801479a:	bd80      	pop	{r7, pc}
 801479c:	2000468c 	.word	0x2000468c

080147a0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80147a0:	b580      	push	{r7, lr}
 80147a2:	b082      	sub	sp, #8
 80147a4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80147a6:	2300      	movs	r3, #0
 80147a8:	607b      	str	r3, [r7, #4]
 80147aa:	e096      	b.n	80148da <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80147ac:	494f      	ldr	r1, [pc, #316]	; (80148ec <etharp_tmr+0x14c>)
 80147ae:	687a      	ldr	r2, [r7, #4]
 80147b0:	4613      	mov	r3, r2
 80147b2:	005b      	lsls	r3, r3, #1
 80147b4:	4413      	add	r3, r2
 80147b6:	00db      	lsls	r3, r3, #3
 80147b8:	440b      	add	r3, r1
 80147ba:	3314      	adds	r3, #20
 80147bc:	781b      	ldrb	r3, [r3, #0]
 80147be:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80147c0:	78fb      	ldrb	r3, [r7, #3]
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	f000 8086 	beq.w	80148d4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80147c8:	4948      	ldr	r1, [pc, #288]	; (80148ec <etharp_tmr+0x14c>)
 80147ca:	687a      	ldr	r2, [r7, #4]
 80147cc:	4613      	mov	r3, r2
 80147ce:	005b      	lsls	r3, r3, #1
 80147d0:	4413      	add	r3, r2
 80147d2:	00db      	lsls	r3, r3, #3
 80147d4:	440b      	add	r3, r1
 80147d6:	3312      	adds	r3, #18
 80147d8:	881b      	ldrh	r3, [r3, #0]
 80147da:	3301      	adds	r3, #1
 80147dc:	b298      	uxth	r0, r3
 80147de:	4943      	ldr	r1, [pc, #268]	; (80148ec <etharp_tmr+0x14c>)
 80147e0:	687a      	ldr	r2, [r7, #4]
 80147e2:	4613      	mov	r3, r2
 80147e4:	005b      	lsls	r3, r3, #1
 80147e6:	4413      	add	r3, r2
 80147e8:	00db      	lsls	r3, r3, #3
 80147ea:	440b      	add	r3, r1
 80147ec:	3312      	adds	r3, #18
 80147ee:	4602      	mov	r2, r0
 80147f0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80147f2:	493e      	ldr	r1, [pc, #248]	; (80148ec <etharp_tmr+0x14c>)
 80147f4:	687a      	ldr	r2, [r7, #4]
 80147f6:	4613      	mov	r3, r2
 80147f8:	005b      	lsls	r3, r3, #1
 80147fa:	4413      	add	r3, r2
 80147fc:	00db      	lsls	r3, r3, #3
 80147fe:	440b      	add	r3, r1
 8014800:	3312      	adds	r3, #18
 8014802:	881b      	ldrh	r3, [r3, #0]
 8014804:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014808:	d215      	bcs.n	8014836 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801480a:	4938      	ldr	r1, [pc, #224]	; (80148ec <etharp_tmr+0x14c>)
 801480c:	687a      	ldr	r2, [r7, #4]
 801480e:	4613      	mov	r3, r2
 8014810:	005b      	lsls	r3, r3, #1
 8014812:	4413      	add	r3, r2
 8014814:	00db      	lsls	r3, r3, #3
 8014816:	440b      	add	r3, r1
 8014818:	3314      	adds	r3, #20
 801481a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801481c:	2b01      	cmp	r3, #1
 801481e:	d10e      	bne.n	801483e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014820:	4932      	ldr	r1, [pc, #200]	; (80148ec <etharp_tmr+0x14c>)
 8014822:	687a      	ldr	r2, [r7, #4]
 8014824:	4613      	mov	r3, r2
 8014826:	005b      	lsls	r3, r3, #1
 8014828:	4413      	add	r3, r2
 801482a:	00db      	lsls	r3, r3, #3
 801482c:	440b      	add	r3, r1
 801482e:	3312      	adds	r3, #18
 8014830:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014832:	2b04      	cmp	r3, #4
 8014834:	d903      	bls.n	801483e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014836:	6878      	ldr	r0, [r7, #4]
 8014838:	f7ff ff80 	bl	801473c <etharp_free_entry>
 801483c:	e04a      	b.n	80148d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801483e:	492b      	ldr	r1, [pc, #172]	; (80148ec <etharp_tmr+0x14c>)
 8014840:	687a      	ldr	r2, [r7, #4]
 8014842:	4613      	mov	r3, r2
 8014844:	005b      	lsls	r3, r3, #1
 8014846:	4413      	add	r3, r2
 8014848:	00db      	lsls	r3, r3, #3
 801484a:	440b      	add	r3, r1
 801484c:	3314      	adds	r3, #20
 801484e:	781b      	ldrb	r3, [r3, #0]
 8014850:	2b03      	cmp	r3, #3
 8014852:	d10a      	bne.n	801486a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014854:	4925      	ldr	r1, [pc, #148]	; (80148ec <etharp_tmr+0x14c>)
 8014856:	687a      	ldr	r2, [r7, #4]
 8014858:	4613      	mov	r3, r2
 801485a:	005b      	lsls	r3, r3, #1
 801485c:	4413      	add	r3, r2
 801485e:	00db      	lsls	r3, r3, #3
 8014860:	440b      	add	r3, r1
 8014862:	3314      	adds	r3, #20
 8014864:	2204      	movs	r2, #4
 8014866:	701a      	strb	r2, [r3, #0]
 8014868:	e034      	b.n	80148d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801486a:	4920      	ldr	r1, [pc, #128]	; (80148ec <etharp_tmr+0x14c>)
 801486c:	687a      	ldr	r2, [r7, #4]
 801486e:	4613      	mov	r3, r2
 8014870:	005b      	lsls	r3, r3, #1
 8014872:	4413      	add	r3, r2
 8014874:	00db      	lsls	r3, r3, #3
 8014876:	440b      	add	r3, r1
 8014878:	3314      	adds	r3, #20
 801487a:	781b      	ldrb	r3, [r3, #0]
 801487c:	2b04      	cmp	r3, #4
 801487e:	d10a      	bne.n	8014896 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014880:	491a      	ldr	r1, [pc, #104]	; (80148ec <etharp_tmr+0x14c>)
 8014882:	687a      	ldr	r2, [r7, #4]
 8014884:	4613      	mov	r3, r2
 8014886:	005b      	lsls	r3, r3, #1
 8014888:	4413      	add	r3, r2
 801488a:	00db      	lsls	r3, r3, #3
 801488c:	440b      	add	r3, r1
 801488e:	3314      	adds	r3, #20
 8014890:	2202      	movs	r2, #2
 8014892:	701a      	strb	r2, [r3, #0]
 8014894:	e01e      	b.n	80148d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014896:	4915      	ldr	r1, [pc, #84]	; (80148ec <etharp_tmr+0x14c>)
 8014898:	687a      	ldr	r2, [r7, #4]
 801489a:	4613      	mov	r3, r2
 801489c:	005b      	lsls	r3, r3, #1
 801489e:	4413      	add	r3, r2
 80148a0:	00db      	lsls	r3, r3, #3
 80148a2:	440b      	add	r3, r1
 80148a4:	3314      	adds	r3, #20
 80148a6:	781b      	ldrb	r3, [r3, #0]
 80148a8:	2b01      	cmp	r3, #1
 80148aa:	d113      	bne.n	80148d4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80148ac:	490f      	ldr	r1, [pc, #60]	; (80148ec <etharp_tmr+0x14c>)
 80148ae:	687a      	ldr	r2, [r7, #4]
 80148b0:	4613      	mov	r3, r2
 80148b2:	005b      	lsls	r3, r3, #1
 80148b4:	4413      	add	r3, r2
 80148b6:	00db      	lsls	r3, r3, #3
 80148b8:	440b      	add	r3, r1
 80148ba:	3308      	adds	r3, #8
 80148bc:	6818      	ldr	r0, [r3, #0]
 80148be:	687a      	ldr	r2, [r7, #4]
 80148c0:	4613      	mov	r3, r2
 80148c2:	005b      	lsls	r3, r3, #1
 80148c4:	4413      	add	r3, r2
 80148c6:	00db      	lsls	r3, r3, #3
 80148c8:	4a08      	ldr	r2, [pc, #32]	; (80148ec <etharp_tmr+0x14c>)
 80148ca:	4413      	add	r3, r2
 80148cc:	3304      	adds	r3, #4
 80148ce:	4619      	mov	r1, r3
 80148d0:	f000 fe6e 	bl	80155b0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	3301      	adds	r3, #1
 80148d8:	607b      	str	r3, [r7, #4]
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	2b09      	cmp	r3, #9
 80148de:	f77f af65 	ble.w	80147ac <etharp_tmr+0xc>
      }
    }
  }
}
 80148e2:	bf00      	nop
 80148e4:	3708      	adds	r7, #8
 80148e6:	46bd      	mov	sp, r7
 80148e8:	bd80      	pop	{r7, pc}
 80148ea:	bf00      	nop
 80148ec:	2000468c 	.word	0x2000468c

080148f0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80148f0:	b580      	push	{r7, lr}
 80148f2:	b08a      	sub	sp, #40	; 0x28
 80148f4:	af00      	add	r7, sp, #0
 80148f6:	60f8      	str	r0, [r7, #12]
 80148f8:	460b      	mov	r3, r1
 80148fa:	607a      	str	r2, [r7, #4]
 80148fc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80148fe:	230a      	movs	r3, #10
 8014900:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014902:	230a      	movs	r3, #10
 8014904:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8014906:	230a      	movs	r3, #10
 8014908:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801490a:	2300      	movs	r3, #0
 801490c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801490e:	230a      	movs	r3, #10
 8014910:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014912:	2300      	movs	r3, #0
 8014914:	83bb      	strh	r3, [r7, #28]
 8014916:	2300      	movs	r3, #0
 8014918:	837b      	strh	r3, [r7, #26]
 801491a:	2300      	movs	r3, #0
 801491c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801491e:	2300      	movs	r3, #0
 8014920:	843b      	strh	r3, [r7, #32]
 8014922:	e0ae      	b.n	8014a82 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014924:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014928:	49a6      	ldr	r1, [pc, #664]	; (8014bc4 <etharp_find_entry+0x2d4>)
 801492a:	4613      	mov	r3, r2
 801492c:	005b      	lsls	r3, r3, #1
 801492e:	4413      	add	r3, r2
 8014930:	00db      	lsls	r3, r3, #3
 8014932:	440b      	add	r3, r1
 8014934:	3314      	adds	r3, #20
 8014936:	781b      	ldrb	r3, [r3, #0]
 8014938:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801493a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801493e:	2b0a      	cmp	r3, #10
 8014940:	d105      	bne.n	801494e <etharp_find_entry+0x5e>
 8014942:	7dfb      	ldrb	r3, [r7, #23]
 8014944:	2b00      	cmp	r3, #0
 8014946:	d102      	bne.n	801494e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014948:	8c3b      	ldrh	r3, [r7, #32]
 801494a:	847b      	strh	r3, [r7, #34]	; 0x22
 801494c:	e095      	b.n	8014a7a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801494e:	7dfb      	ldrb	r3, [r7, #23]
 8014950:	2b00      	cmp	r3, #0
 8014952:	f000 8092 	beq.w	8014a7a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014956:	7dfb      	ldrb	r3, [r7, #23]
 8014958:	2b01      	cmp	r3, #1
 801495a:	d009      	beq.n	8014970 <etharp_find_entry+0x80>
 801495c:	7dfb      	ldrb	r3, [r7, #23]
 801495e:	2b01      	cmp	r3, #1
 8014960:	d806      	bhi.n	8014970 <etharp_find_entry+0x80>
 8014962:	4b99      	ldr	r3, [pc, #612]	; (8014bc8 <etharp_find_entry+0x2d8>)
 8014964:	f44f 7292 	mov.w	r2, #292	; 0x124
 8014968:	4998      	ldr	r1, [pc, #608]	; (8014bcc <etharp_find_entry+0x2dc>)
 801496a:	4899      	ldr	r0, [pc, #612]	; (8014bd0 <etharp_find_entry+0x2e0>)
 801496c:	f002 fbee 	bl	801714c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	2b00      	cmp	r3, #0
 8014974:	d020      	beq.n	80149b8 <etharp_find_entry+0xc8>
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	6819      	ldr	r1, [r3, #0]
 801497a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801497e:	4891      	ldr	r0, [pc, #580]	; (8014bc4 <etharp_find_entry+0x2d4>)
 8014980:	4613      	mov	r3, r2
 8014982:	005b      	lsls	r3, r3, #1
 8014984:	4413      	add	r3, r2
 8014986:	00db      	lsls	r3, r3, #3
 8014988:	4403      	add	r3, r0
 801498a:	3304      	adds	r3, #4
 801498c:	681b      	ldr	r3, [r3, #0]
 801498e:	4299      	cmp	r1, r3
 8014990:	d112      	bne.n	80149b8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	2b00      	cmp	r3, #0
 8014996:	d00c      	beq.n	80149b2 <etharp_find_entry+0xc2>
 8014998:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801499c:	4989      	ldr	r1, [pc, #548]	; (8014bc4 <etharp_find_entry+0x2d4>)
 801499e:	4613      	mov	r3, r2
 80149a0:	005b      	lsls	r3, r3, #1
 80149a2:	4413      	add	r3, r2
 80149a4:	00db      	lsls	r3, r3, #3
 80149a6:	440b      	add	r3, r1
 80149a8:	3308      	adds	r3, #8
 80149aa:	681b      	ldr	r3, [r3, #0]
 80149ac:	687a      	ldr	r2, [r7, #4]
 80149ae:	429a      	cmp	r2, r3
 80149b0:	d102      	bne.n	80149b8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80149b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80149b6:	e100      	b.n	8014bba <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80149b8:	7dfb      	ldrb	r3, [r7, #23]
 80149ba:	2b01      	cmp	r3, #1
 80149bc:	d140      	bne.n	8014a40 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80149be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80149c2:	4980      	ldr	r1, [pc, #512]	; (8014bc4 <etharp_find_entry+0x2d4>)
 80149c4:	4613      	mov	r3, r2
 80149c6:	005b      	lsls	r3, r3, #1
 80149c8:	4413      	add	r3, r2
 80149ca:	00db      	lsls	r3, r3, #3
 80149cc:	440b      	add	r3, r1
 80149ce:	681b      	ldr	r3, [r3, #0]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d01a      	beq.n	8014a0a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80149d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80149d8:	497a      	ldr	r1, [pc, #488]	; (8014bc4 <etharp_find_entry+0x2d4>)
 80149da:	4613      	mov	r3, r2
 80149dc:	005b      	lsls	r3, r3, #1
 80149de:	4413      	add	r3, r2
 80149e0:	00db      	lsls	r3, r3, #3
 80149e2:	440b      	add	r3, r1
 80149e4:	3312      	adds	r3, #18
 80149e6:	881b      	ldrh	r3, [r3, #0]
 80149e8:	8bba      	ldrh	r2, [r7, #28]
 80149ea:	429a      	cmp	r2, r3
 80149ec:	d845      	bhi.n	8014a7a <etharp_find_entry+0x18a>
            old_queue = i;
 80149ee:	8c3b      	ldrh	r3, [r7, #32]
 80149f0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80149f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80149f6:	4973      	ldr	r1, [pc, #460]	; (8014bc4 <etharp_find_entry+0x2d4>)
 80149f8:	4613      	mov	r3, r2
 80149fa:	005b      	lsls	r3, r3, #1
 80149fc:	4413      	add	r3, r2
 80149fe:	00db      	lsls	r3, r3, #3
 8014a00:	440b      	add	r3, r1
 8014a02:	3312      	adds	r3, #18
 8014a04:	881b      	ldrh	r3, [r3, #0]
 8014a06:	83bb      	strh	r3, [r7, #28]
 8014a08:	e037      	b.n	8014a7a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014a0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a0e:	496d      	ldr	r1, [pc, #436]	; (8014bc4 <etharp_find_entry+0x2d4>)
 8014a10:	4613      	mov	r3, r2
 8014a12:	005b      	lsls	r3, r3, #1
 8014a14:	4413      	add	r3, r2
 8014a16:	00db      	lsls	r3, r3, #3
 8014a18:	440b      	add	r3, r1
 8014a1a:	3312      	adds	r3, #18
 8014a1c:	881b      	ldrh	r3, [r3, #0]
 8014a1e:	8b7a      	ldrh	r2, [r7, #26]
 8014a20:	429a      	cmp	r2, r3
 8014a22:	d82a      	bhi.n	8014a7a <etharp_find_entry+0x18a>
            old_pending = i;
 8014a24:	8c3b      	ldrh	r3, [r7, #32]
 8014a26:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8014a28:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a2c:	4965      	ldr	r1, [pc, #404]	; (8014bc4 <etharp_find_entry+0x2d4>)
 8014a2e:	4613      	mov	r3, r2
 8014a30:	005b      	lsls	r3, r3, #1
 8014a32:	4413      	add	r3, r2
 8014a34:	00db      	lsls	r3, r3, #3
 8014a36:	440b      	add	r3, r1
 8014a38:	3312      	adds	r3, #18
 8014a3a:	881b      	ldrh	r3, [r3, #0]
 8014a3c:	837b      	strh	r3, [r7, #26]
 8014a3e:	e01c      	b.n	8014a7a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014a40:	7dfb      	ldrb	r3, [r7, #23]
 8014a42:	2b01      	cmp	r3, #1
 8014a44:	d919      	bls.n	8014a7a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014a46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a4a:	495e      	ldr	r1, [pc, #376]	; (8014bc4 <etharp_find_entry+0x2d4>)
 8014a4c:	4613      	mov	r3, r2
 8014a4e:	005b      	lsls	r3, r3, #1
 8014a50:	4413      	add	r3, r2
 8014a52:	00db      	lsls	r3, r3, #3
 8014a54:	440b      	add	r3, r1
 8014a56:	3312      	adds	r3, #18
 8014a58:	881b      	ldrh	r3, [r3, #0]
 8014a5a:	8b3a      	ldrh	r2, [r7, #24]
 8014a5c:	429a      	cmp	r2, r3
 8014a5e:	d80c      	bhi.n	8014a7a <etharp_find_entry+0x18a>
            old_stable = i;
 8014a60:	8c3b      	ldrh	r3, [r7, #32]
 8014a62:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8014a64:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a68:	4956      	ldr	r1, [pc, #344]	; (8014bc4 <etharp_find_entry+0x2d4>)
 8014a6a:	4613      	mov	r3, r2
 8014a6c:	005b      	lsls	r3, r3, #1
 8014a6e:	4413      	add	r3, r2
 8014a70:	00db      	lsls	r3, r3, #3
 8014a72:	440b      	add	r3, r1
 8014a74:	3312      	adds	r3, #18
 8014a76:	881b      	ldrh	r3, [r3, #0]
 8014a78:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014a7a:	8c3b      	ldrh	r3, [r7, #32]
 8014a7c:	3301      	adds	r3, #1
 8014a7e:	b29b      	uxth	r3, r3
 8014a80:	843b      	strh	r3, [r7, #32]
 8014a82:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014a86:	2b09      	cmp	r3, #9
 8014a88:	f77f af4c 	ble.w	8014924 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014a8c:	7afb      	ldrb	r3, [r7, #11]
 8014a8e:	f003 0302 	and.w	r3, r3, #2
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d108      	bne.n	8014aa8 <etharp_find_entry+0x1b8>
 8014a96:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014a9a:	2b0a      	cmp	r3, #10
 8014a9c:	d107      	bne.n	8014aae <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8014a9e:	7afb      	ldrb	r3, [r7, #11]
 8014aa0:	f003 0301 	and.w	r3, r3, #1
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d102      	bne.n	8014aae <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8014aac:	e085      	b.n	8014bba <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8014aae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014ab2:	2b09      	cmp	r3, #9
 8014ab4:	dc02      	bgt.n	8014abc <etharp_find_entry+0x1cc>
    i = empty;
 8014ab6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014ab8:	843b      	strh	r3, [r7, #32]
 8014aba:	e039      	b.n	8014b30 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014abc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8014ac0:	2b09      	cmp	r3, #9
 8014ac2:	dc14      	bgt.n	8014aee <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014ac4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014ac6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014ac8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014acc:	493d      	ldr	r1, [pc, #244]	; (8014bc4 <etharp_find_entry+0x2d4>)
 8014ace:	4613      	mov	r3, r2
 8014ad0:	005b      	lsls	r3, r3, #1
 8014ad2:	4413      	add	r3, r2
 8014ad4:	00db      	lsls	r3, r3, #3
 8014ad6:	440b      	add	r3, r1
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d018      	beq.n	8014b10 <etharp_find_entry+0x220>
 8014ade:	4b3a      	ldr	r3, [pc, #232]	; (8014bc8 <etharp_find_entry+0x2d8>)
 8014ae0:	f240 126d 	movw	r2, #365	; 0x16d
 8014ae4:	493b      	ldr	r1, [pc, #236]	; (8014bd4 <etharp_find_entry+0x2e4>)
 8014ae6:	483a      	ldr	r0, [pc, #232]	; (8014bd0 <etharp_find_entry+0x2e0>)
 8014ae8:	f002 fb30 	bl	801714c <iprintf>
 8014aec:	e010      	b.n	8014b10 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014aee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8014af2:	2b09      	cmp	r3, #9
 8014af4:	dc02      	bgt.n	8014afc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8014af6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014af8:	843b      	strh	r3, [r7, #32]
 8014afa:	e009      	b.n	8014b10 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014afc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014b00:	2b09      	cmp	r3, #9
 8014b02:	dc02      	bgt.n	8014b0a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014b04:	8bfb      	ldrh	r3, [r7, #30]
 8014b06:	843b      	strh	r3, [r7, #32]
 8014b08:	e002      	b.n	8014b10 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8014b0e:	e054      	b.n	8014bba <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014b10:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014b14:	2b09      	cmp	r3, #9
 8014b16:	dd06      	ble.n	8014b26 <etharp_find_entry+0x236>
 8014b18:	4b2b      	ldr	r3, [pc, #172]	; (8014bc8 <etharp_find_entry+0x2d8>)
 8014b1a:	f240 127f 	movw	r2, #383	; 0x17f
 8014b1e:	492e      	ldr	r1, [pc, #184]	; (8014bd8 <etharp_find_entry+0x2e8>)
 8014b20:	482b      	ldr	r0, [pc, #172]	; (8014bd0 <etharp_find_entry+0x2e0>)
 8014b22:	f002 fb13 	bl	801714c <iprintf>
    etharp_free_entry(i);
 8014b26:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014b2a:	4618      	mov	r0, r3
 8014b2c:	f7ff fe06 	bl	801473c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014b30:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014b34:	2b09      	cmp	r3, #9
 8014b36:	dd06      	ble.n	8014b46 <etharp_find_entry+0x256>
 8014b38:	4b23      	ldr	r3, [pc, #140]	; (8014bc8 <etharp_find_entry+0x2d8>)
 8014b3a:	f240 1283 	movw	r2, #387	; 0x183
 8014b3e:	4926      	ldr	r1, [pc, #152]	; (8014bd8 <etharp_find_entry+0x2e8>)
 8014b40:	4823      	ldr	r0, [pc, #140]	; (8014bd0 <etharp_find_entry+0x2e0>)
 8014b42:	f002 fb03 	bl	801714c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014b46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014b4a:	491e      	ldr	r1, [pc, #120]	; (8014bc4 <etharp_find_entry+0x2d4>)
 8014b4c:	4613      	mov	r3, r2
 8014b4e:	005b      	lsls	r3, r3, #1
 8014b50:	4413      	add	r3, r2
 8014b52:	00db      	lsls	r3, r3, #3
 8014b54:	440b      	add	r3, r1
 8014b56:	3314      	adds	r3, #20
 8014b58:	781b      	ldrb	r3, [r3, #0]
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d006      	beq.n	8014b6c <etharp_find_entry+0x27c>
 8014b5e:	4b1a      	ldr	r3, [pc, #104]	; (8014bc8 <etharp_find_entry+0x2d8>)
 8014b60:	f240 1285 	movw	r2, #389	; 0x185
 8014b64:	491d      	ldr	r1, [pc, #116]	; (8014bdc <etharp_find_entry+0x2ec>)
 8014b66:	481a      	ldr	r0, [pc, #104]	; (8014bd0 <etharp_find_entry+0x2e0>)
 8014b68:	f002 faf0 	bl	801714c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d00b      	beq.n	8014b8a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8014b72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	6819      	ldr	r1, [r3, #0]
 8014b7a:	4812      	ldr	r0, [pc, #72]	; (8014bc4 <etharp_find_entry+0x2d4>)
 8014b7c:	4613      	mov	r3, r2
 8014b7e:	005b      	lsls	r3, r3, #1
 8014b80:	4413      	add	r3, r2
 8014b82:	00db      	lsls	r3, r3, #3
 8014b84:	4403      	add	r3, r0
 8014b86:	3304      	adds	r3, #4
 8014b88:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014b8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014b8e:	490d      	ldr	r1, [pc, #52]	; (8014bc4 <etharp_find_entry+0x2d4>)
 8014b90:	4613      	mov	r3, r2
 8014b92:	005b      	lsls	r3, r3, #1
 8014b94:	4413      	add	r3, r2
 8014b96:	00db      	lsls	r3, r3, #3
 8014b98:	440b      	add	r3, r1
 8014b9a:	3312      	adds	r3, #18
 8014b9c:	2200      	movs	r2, #0
 8014b9e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014ba0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014ba4:	4907      	ldr	r1, [pc, #28]	; (8014bc4 <etharp_find_entry+0x2d4>)
 8014ba6:	4613      	mov	r3, r2
 8014ba8:	005b      	lsls	r3, r3, #1
 8014baa:	4413      	add	r3, r2
 8014bac:	00db      	lsls	r3, r3, #3
 8014bae:	440b      	add	r3, r1
 8014bb0:	3308      	adds	r3, #8
 8014bb2:	687a      	ldr	r2, [r7, #4]
 8014bb4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8014bb6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8014bba:	4618      	mov	r0, r3
 8014bbc:	3728      	adds	r7, #40	; 0x28
 8014bbe:	46bd      	mov	sp, r7
 8014bc0:	bd80      	pop	{r7, pc}
 8014bc2:	bf00      	nop
 8014bc4:	2000468c 	.word	0x2000468c
 8014bc8:	0801b0f4 	.word	0x0801b0f4
 8014bcc:	0801b12c 	.word	0x0801b12c
 8014bd0:	0801b16c 	.word	0x0801b16c
 8014bd4:	0801b194 	.word	0x0801b194
 8014bd8:	0801b1ac 	.word	0x0801b1ac
 8014bdc:	0801b1c0 	.word	0x0801b1c0

08014be0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014be0:	b580      	push	{r7, lr}
 8014be2:	b088      	sub	sp, #32
 8014be4:	af02      	add	r7, sp, #8
 8014be6:	60f8      	str	r0, [r7, #12]
 8014be8:	60b9      	str	r1, [r7, #8]
 8014bea:	607a      	str	r2, [r7, #4]
 8014bec:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014bf4:	2b06      	cmp	r3, #6
 8014bf6:	d006      	beq.n	8014c06 <etharp_update_arp_entry+0x26>
 8014bf8:	4b48      	ldr	r3, [pc, #288]	; (8014d1c <etharp_update_arp_entry+0x13c>)
 8014bfa:	f240 12a9 	movw	r2, #425	; 0x1a9
 8014bfe:	4948      	ldr	r1, [pc, #288]	; (8014d20 <etharp_update_arp_entry+0x140>)
 8014c00:	4848      	ldr	r0, [pc, #288]	; (8014d24 <etharp_update_arp_entry+0x144>)
 8014c02:	f002 faa3 	bl	801714c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014c06:	68bb      	ldr	r3, [r7, #8]
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d012      	beq.n	8014c32 <etharp_update_arp_entry+0x52>
 8014c0c:	68bb      	ldr	r3, [r7, #8]
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d00e      	beq.n	8014c32 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014c14:	68bb      	ldr	r3, [r7, #8]
 8014c16:	681b      	ldr	r3, [r3, #0]
 8014c18:	68f9      	ldr	r1, [r7, #12]
 8014c1a:	4618      	mov	r0, r3
 8014c1c:	f001 f8f4 	bl	8015e08 <ip4_addr_isbroadcast_u32>
 8014c20:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d105      	bne.n	8014c32 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014c26:	68bb      	ldr	r3, [r7, #8]
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014c2e:	2be0      	cmp	r3, #224	; 0xe0
 8014c30:	d102      	bne.n	8014c38 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014c32:	f06f 030f 	mvn.w	r3, #15
 8014c36:	e06c      	b.n	8014d12 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014c38:	78fb      	ldrb	r3, [r7, #3]
 8014c3a:	68fa      	ldr	r2, [r7, #12]
 8014c3c:	4619      	mov	r1, r3
 8014c3e:	68b8      	ldr	r0, [r7, #8]
 8014c40:	f7ff fe56 	bl	80148f0 <etharp_find_entry>
 8014c44:	4603      	mov	r3, r0
 8014c46:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014c48:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	da02      	bge.n	8014c56 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014c50:	8afb      	ldrh	r3, [r7, #22]
 8014c52:	b25b      	sxtb	r3, r3
 8014c54:	e05d      	b.n	8014d12 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014c56:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014c5a:	4933      	ldr	r1, [pc, #204]	; (8014d28 <etharp_update_arp_entry+0x148>)
 8014c5c:	4613      	mov	r3, r2
 8014c5e:	005b      	lsls	r3, r3, #1
 8014c60:	4413      	add	r3, r2
 8014c62:	00db      	lsls	r3, r3, #3
 8014c64:	440b      	add	r3, r1
 8014c66:	3314      	adds	r3, #20
 8014c68:	2202      	movs	r2, #2
 8014c6a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014c6c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014c70:	492d      	ldr	r1, [pc, #180]	; (8014d28 <etharp_update_arp_entry+0x148>)
 8014c72:	4613      	mov	r3, r2
 8014c74:	005b      	lsls	r3, r3, #1
 8014c76:	4413      	add	r3, r2
 8014c78:	00db      	lsls	r3, r3, #3
 8014c7a:	440b      	add	r3, r1
 8014c7c:	3308      	adds	r3, #8
 8014c7e:	68fa      	ldr	r2, [r7, #12]
 8014c80:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8014c82:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014c86:	4613      	mov	r3, r2
 8014c88:	005b      	lsls	r3, r3, #1
 8014c8a:	4413      	add	r3, r2
 8014c8c:	00db      	lsls	r3, r3, #3
 8014c8e:	3308      	adds	r3, #8
 8014c90:	4a25      	ldr	r2, [pc, #148]	; (8014d28 <etharp_update_arp_entry+0x148>)
 8014c92:	4413      	add	r3, r2
 8014c94:	3304      	adds	r3, #4
 8014c96:	2206      	movs	r2, #6
 8014c98:	6879      	ldr	r1, [r7, #4]
 8014c9a:	4618      	mov	r0, r3
 8014c9c:	f002 fa29 	bl	80170f2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014ca0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014ca4:	4920      	ldr	r1, [pc, #128]	; (8014d28 <etharp_update_arp_entry+0x148>)
 8014ca6:	4613      	mov	r3, r2
 8014ca8:	005b      	lsls	r3, r3, #1
 8014caa:	4413      	add	r3, r2
 8014cac:	00db      	lsls	r3, r3, #3
 8014cae:	440b      	add	r3, r1
 8014cb0:	3312      	adds	r3, #18
 8014cb2:	2200      	movs	r2, #0
 8014cb4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8014cb6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014cba:	491b      	ldr	r1, [pc, #108]	; (8014d28 <etharp_update_arp_entry+0x148>)
 8014cbc:	4613      	mov	r3, r2
 8014cbe:	005b      	lsls	r3, r3, #1
 8014cc0:	4413      	add	r3, r2
 8014cc2:	00db      	lsls	r3, r3, #3
 8014cc4:	440b      	add	r3, r1
 8014cc6:	681b      	ldr	r3, [r3, #0]
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d021      	beq.n	8014d10 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014ccc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014cd0:	4915      	ldr	r1, [pc, #84]	; (8014d28 <etharp_update_arp_entry+0x148>)
 8014cd2:	4613      	mov	r3, r2
 8014cd4:	005b      	lsls	r3, r3, #1
 8014cd6:	4413      	add	r3, r2
 8014cd8:	00db      	lsls	r3, r3, #3
 8014cda:	440b      	add	r3, r1
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014ce0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014ce4:	4910      	ldr	r1, [pc, #64]	; (8014d28 <etharp_update_arp_entry+0x148>)
 8014ce6:	4613      	mov	r3, r2
 8014ce8:	005b      	lsls	r3, r3, #1
 8014cea:	4413      	add	r3, r2
 8014cec:	00db      	lsls	r3, r3, #3
 8014cee:	440b      	add	r3, r1
 8014cf0:	2200      	movs	r2, #0
 8014cf2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014cfa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014cfe:	9300      	str	r3, [sp, #0]
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	6939      	ldr	r1, [r7, #16]
 8014d04:	68f8      	ldr	r0, [r7, #12]
 8014d06:	f001 ff83 	bl	8016c10 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014d0a:	6938      	ldr	r0, [r7, #16]
 8014d0c:	f7f9 f87e 	bl	800de0c <pbuf_free>
  }
  return ERR_OK;
 8014d10:	2300      	movs	r3, #0
}
 8014d12:	4618      	mov	r0, r3
 8014d14:	3718      	adds	r7, #24
 8014d16:	46bd      	mov	sp, r7
 8014d18:	bd80      	pop	{r7, pc}
 8014d1a:	bf00      	nop
 8014d1c:	0801b0f4 	.word	0x0801b0f4
 8014d20:	0801b1ec 	.word	0x0801b1ec
 8014d24:	0801b16c 	.word	0x0801b16c
 8014d28:	2000468c 	.word	0x2000468c

08014d2c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014d2c:	b580      	push	{r7, lr}
 8014d2e:	b084      	sub	sp, #16
 8014d30:	af00      	add	r7, sp, #0
 8014d32:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014d34:	2300      	movs	r3, #0
 8014d36:	60fb      	str	r3, [r7, #12]
 8014d38:	e01e      	b.n	8014d78 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8014d3a:	4913      	ldr	r1, [pc, #76]	; (8014d88 <etharp_cleanup_netif+0x5c>)
 8014d3c:	68fa      	ldr	r2, [r7, #12]
 8014d3e:	4613      	mov	r3, r2
 8014d40:	005b      	lsls	r3, r3, #1
 8014d42:	4413      	add	r3, r2
 8014d44:	00db      	lsls	r3, r3, #3
 8014d46:	440b      	add	r3, r1
 8014d48:	3314      	adds	r3, #20
 8014d4a:	781b      	ldrb	r3, [r3, #0]
 8014d4c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014d4e:	7afb      	ldrb	r3, [r7, #11]
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d00e      	beq.n	8014d72 <etharp_cleanup_netif+0x46>
 8014d54:	490c      	ldr	r1, [pc, #48]	; (8014d88 <etharp_cleanup_netif+0x5c>)
 8014d56:	68fa      	ldr	r2, [r7, #12]
 8014d58:	4613      	mov	r3, r2
 8014d5a:	005b      	lsls	r3, r3, #1
 8014d5c:	4413      	add	r3, r2
 8014d5e:	00db      	lsls	r3, r3, #3
 8014d60:	440b      	add	r3, r1
 8014d62:	3308      	adds	r3, #8
 8014d64:	681b      	ldr	r3, [r3, #0]
 8014d66:	687a      	ldr	r2, [r7, #4]
 8014d68:	429a      	cmp	r2, r3
 8014d6a:	d102      	bne.n	8014d72 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014d6c:	68f8      	ldr	r0, [r7, #12]
 8014d6e:	f7ff fce5 	bl	801473c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	3301      	adds	r3, #1
 8014d76:	60fb      	str	r3, [r7, #12]
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	2b09      	cmp	r3, #9
 8014d7c:	dddd      	ble.n	8014d3a <etharp_cleanup_netif+0xe>
    }
  }
}
 8014d7e:	bf00      	nop
 8014d80:	3710      	adds	r7, #16
 8014d82:	46bd      	mov	sp, r7
 8014d84:	bd80      	pop	{r7, pc}
 8014d86:	bf00      	nop
 8014d88:	2000468c 	.word	0x2000468c

08014d8c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014d8c:	b5b0      	push	{r4, r5, r7, lr}
 8014d8e:	b08a      	sub	sp, #40	; 0x28
 8014d90:	af04      	add	r7, sp, #16
 8014d92:	6078      	str	r0, [r7, #4]
 8014d94:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014d96:	683b      	ldr	r3, [r7, #0]
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d107      	bne.n	8014dac <etharp_input+0x20>
 8014d9c:	4b3d      	ldr	r3, [pc, #244]	; (8014e94 <etharp_input+0x108>)
 8014d9e:	f240 228a 	movw	r2, #650	; 0x28a
 8014da2:	493d      	ldr	r1, [pc, #244]	; (8014e98 <etharp_input+0x10c>)
 8014da4:	483d      	ldr	r0, [pc, #244]	; (8014e9c <etharp_input+0x110>)
 8014da6:	f002 f9d1 	bl	801714c <iprintf>
 8014daa:	e06f      	b.n	8014e8c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	685b      	ldr	r3, [r3, #4]
 8014db0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014db2:	693b      	ldr	r3, [r7, #16]
 8014db4:	881b      	ldrh	r3, [r3, #0]
 8014db6:	b29b      	uxth	r3, r3
 8014db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014dbc:	d10c      	bne.n	8014dd8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014dbe:	693b      	ldr	r3, [r7, #16]
 8014dc0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014dc2:	2b06      	cmp	r3, #6
 8014dc4:	d108      	bne.n	8014dd8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014dc6:	693b      	ldr	r3, [r7, #16]
 8014dc8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014dca:	2b04      	cmp	r3, #4
 8014dcc:	d104      	bne.n	8014dd8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014dce:	693b      	ldr	r3, [r7, #16]
 8014dd0:	885b      	ldrh	r3, [r3, #2]
 8014dd2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014dd4:	2b08      	cmp	r3, #8
 8014dd6:	d003      	beq.n	8014de0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014dd8:	6878      	ldr	r0, [r7, #4]
 8014dda:	f7f9 f817 	bl	800de0c <pbuf_free>
    return;
 8014dde:	e055      	b.n	8014e8c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014de0:	693b      	ldr	r3, [r7, #16]
 8014de2:	330e      	adds	r3, #14
 8014de4:	681b      	ldr	r3, [r3, #0]
 8014de6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014de8:	693b      	ldr	r3, [r7, #16]
 8014dea:	3318      	adds	r3, #24
 8014dec:	681b      	ldr	r3, [r3, #0]
 8014dee:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014df0:	683b      	ldr	r3, [r7, #0]
 8014df2:	3304      	adds	r3, #4
 8014df4:	681b      	ldr	r3, [r3, #0]
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d102      	bne.n	8014e00 <etharp_input+0x74>
    for_us = 0;
 8014dfa:	2300      	movs	r3, #0
 8014dfc:	75fb      	strb	r3, [r7, #23]
 8014dfe:	e009      	b.n	8014e14 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014e00:	68ba      	ldr	r2, [r7, #8]
 8014e02:	683b      	ldr	r3, [r7, #0]
 8014e04:	3304      	adds	r3, #4
 8014e06:	681b      	ldr	r3, [r3, #0]
 8014e08:	429a      	cmp	r2, r3
 8014e0a:	bf0c      	ite	eq
 8014e0c:	2301      	moveq	r3, #1
 8014e0e:	2300      	movne	r3, #0
 8014e10:	b2db      	uxtb	r3, r3
 8014e12:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014e14:	693b      	ldr	r3, [r7, #16]
 8014e16:	f103 0208 	add.w	r2, r3, #8
 8014e1a:	7dfb      	ldrb	r3, [r7, #23]
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d001      	beq.n	8014e24 <etharp_input+0x98>
 8014e20:	2301      	movs	r3, #1
 8014e22:	e000      	b.n	8014e26 <etharp_input+0x9a>
 8014e24:	2302      	movs	r3, #2
 8014e26:	f107 010c 	add.w	r1, r7, #12
 8014e2a:	6838      	ldr	r0, [r7, #0]
 8014e2c:	f7ff fed8 	bl	8014be0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014e30:	693b      	ldr	r3, [r7, #16]
 8014e32:	88db      	ldrh	r3, [r3, #6]
 8014e34:	b29b      	uxth	r3, r3
 8014e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014e3a:	d003      	beq.n	8014e44 <etharp_input+0xb8>
 8014e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014e40:	d01e      	beq.n	8014e80 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014e42:	e020      	b.n	8014e86 <etharp_input+0xfa>
      if (for_us) {
 8014e44:	7dfb      	ldrb	r3, [r7, #23]
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d01c      	beq.n	8014e84 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014e4a:	683b      	ldr	r3, [r7, #0]
 8014e4c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014e50:	693b      	ldr	r3, [r7, #16]
 8014e52:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014e56:	683b      	ldr	r3, [r7, #0]
 8014e58:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8014e5c:	683b      	ldr	r3, [r7, #0]
 8014e5e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014e60:	693a      	ldr	r2, [r7, #16]
 8014e62:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014e64:	2102      	movs	r1, #2
 8014e66:	9103      	str	r1, [sp, #12]
 8014e68:	f107 010c 	add.w	r1, r7, #12
 8014e6c:	9102      	str	r1, [sp, #8]
 8014e6e:	9201      	str	r2, [sp, #4]
 8014e70:	9300      	str	r3, [sp, #0]
 8014e72:	462b      	mov	r3, r5
 8014e74:	4622      	mov	r2, r4
 8014e76:	4601      	mov	r1, r0
 8014e78:	6838      	ldr	r0, [r7, #0]
 8014e7a:	f000 faeb 	bl	8015454 <etharp_raw>
      break;
 8014e7e:	e001      	b.n	8014e84 <etharp_input+0xf8>
      break;
 8014e80:	bf00      	nop
 8014e82:	e000      	b.n	8014e86 <etharp_input+0xfa>
      break;
 8014e84:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014e86:	6878      	ldr	r0, [r7, #4]
 8014e88:	f7f8 ffc0 	bl	800de0c <pbuf_free>
}
 8014e8c:	3718      	adds	r7, #24
 8014e8e:	46bd      	mov	sp, r7
 8014e90:	bdb0      	pop	{r4, r5, r7, pc}
 8014e92:	bf00      	nop
 8014e94:	0801b0f4 	.word	0x0801b0f4
 8014e98:	0801b244 	.word	0x0801b244
 8014e9c:	0801b16c 	.word	0x0801b16c

08014ea0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014ea0:	b580      	push	{r7, lr}
 8014ea2:	b086      	sub	sp, #24
 8014ea4:	af02      	add	r7, sp, #8
 8014ea6:	60f8      	str	r0, [r7, #12]
 8014ea8:	60b9      	str	r1, [r7, #8]
 8014eaa:	4613      	mov	r3, r2
 8014eac:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014eae:	79fa      	ldrb	r2, [r7, #7]
 8014eb0:	4944      	ldr	r1, [pc, #272]	; (8014fc4 <etharp_output_to_arp_index+0x124>)
 8014eb2:	4613      	mov	r3, r2
 8014eb4:	005b      	lsls	r3, r3, #1
 8014eb6:	4413      	add	r3, r2
 8014eb8:	00db      	lsls	r3, r3, #3
 8014eba:	440b      	add	r3, r1
 8014ebc:	3314      	adds	r3, #20
 8014ebe:	781b      	ldrb	r3, [r3, #0]
 8014ec0:	2b01      	cmp	r3, #1
 8014ec2:	d806      	bhi.n	8014ed2 <etharp_output_to_arp_index+0x32>
 8014ec4:	4b40      	ldr	r3, [pc, #256]	; (8014fc8 <etharp_output_to_arp_index+0x128>)
 8014ec6:	f240 22ef 	movw	r2, #751	; 0x2ef
 8014eca:	4940      	ldr	r1, [pc, #256]	; (8014fcc <etharp_output_to_arp_index+0x12c>)
 8014ecc:	4840      	ldr	r0, [pc, #256]	; (8014fd0 <etharp_output_to_arp_index+0x130>)
 8014ece:	f002 f93d 	bl	801714c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014ed2:	79fa      	ldrb	r2, [r7, #7]
 8014ed4:	493b      	ldr	r1, [pc, #236]	; (8014fc4 <etharp_output_to_arp_index+0x124>)
 8014ed6:	4613      	mov	r3, r2
 8014ed8:	005b      	lsls	r3, r3, #1
 8014eda:	4413      	add	r3, r2
 8014edc:	00db      	lsls	r3, r3, #3
 8014ede:	440b      	add	r3, r1
 8014ee0:	3314      	adds	r3, #20
 8014ee2:	781b      	ldrb	r3, [r3, #0]
 8014ee4:	2b02      	cmp	r3, #2
 8014ee6:	d153      	bne.n	8014f90 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014ee8:	79fa      	ldrb	r2, [r7, #7]
 8014eea:	4936      	ldr	r1, [pc, #216]	; (8014fc4 <etharp_output_to_arp_index+0x124>)
 8014eec:	4613      	mov	r3, r2
 8014eee:	005b      	lsls	r3, r3, #1
 8014ef0:	4413      	add	r3, r2
 8014ef2:	00db      	lsls	r3, r3, #3
 8014ef4:	440b      	add	r3, r1
 8014ef6:	3312      	adds	r3, #18
 8014ef8:	881b      	ldrh	r3, [r3, #0]
 8014efa:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8014efe:	d919      	bls.n	8014f34 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014f00:	79fa      	ldrb	r2, [r7, #7]
 8014f02:	4613      	mov	r3, r2
 8014f04:	005b      	lsls	r3, r3, #1
 8014f06:	4413      	add	r3, r2
 8014f08:	00db      	lsls	r3, r3, #3
 8014f0a:	4a2e      	ldr	r2, [pc, #184]	; (8014fc4 <etharp_output_to_arp_index+0x124>)
 8014f0c:	4413      	add	r3, r2
 8014f0e:	3304      	adds	r3, #4
 8014f10:	4619      	mov	r1, r3
 8014f12:	68f8      	ldr	r0, [r7, #12]
 8014f14:	f000 fb4c 	bl	80155b0 <etharp_request>
 8014f18:	4603      	mov	r3, r0
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d138      	bne.n	8014f90 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014f1e:	79fa      	ldrb	r2, [r7, #7]
 8014f20:	4928      	ldr	r1, [pc, #160]	; (8014fc4 <etharp_output_to_arp_index+0x124>)
 8014f22:	4613      	mov	r3, r2
 8014f24:	005b      	lsls	r3, r3, #1
 8014f26:	4413      	add	r3, r2
 8014f28:	00db      	lsls	r3, r3, #3
 8014f2a:	440b      	add	r3, r1
 8014f2c:	3314      	adds	r3, #20
 8014f2e:	2203      	movs	r2, #3
 8014f30:	701a      	strb	r2, [r3, #0]
 8014f32:	e02d      	b.n	8014f90 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014f34:	79fa      	ldrb	r2, [r7, #7]
 8014f36:	4923      	ldr	r1, [pc, #140]	; (8014fc4 <etharp_output_to_arp_index+0x124>)
 8014f38:	4613      	mov	r3, r2
 8014f3a:	005b      	lsls	r3, r3, #1
 8014f3c:	4413      	add	r3, r2
 8014f3e:	00db      	lsls	r3, r3, #3
 8014f40:	440b      	add	r3, r1
 8014f42:	3312      	adds	r3, #18
 8014f44:	881b      	ldrh	r3, [r3, #0]
 8014f46:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8014f4a:	d321      	bcc.n	8014f90 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014f4c:	79fa      	ldrb	r2, [r7, #7]
 8014f4e:	4613      	mov	r3, r2
 8014f50:	005b      	lsls	r3, r3, #1
 8014f52:	4413      	add	r3, r2
 8014f54:	00db      	lsls	r3, r3, #3
 8014f56:	4a1b      	ldr	r2, [pc, #108]	; (8014fc4 <etharp_output_to_arp_index+0x124>)
 8014f58:	4413      	add	r3, r2
 8014f5a:	1d19      	adds	r1, r3, #4
 8014f5c:	79fa      	ldrb	r2, [r7, #7]
 8014f5e:	4613      	mov	r3, r2
 8014f60:	005b      	lsls	r3, r3, #1
 8014f62:	4413      	add	r3, r2
 8014f64:	00db      	lsls	r3, r3, #3
 8014f66:	3308      	adds	r3, #8
 8014f68:	4a16      	ldr	r2, [pc, #88]	; (8014fc4 <etharp_output_to_arp_index+0x124>)
 8014f6a:	4413      	add	r3, r2
 8014f6c:	3304      	adds	r3, #4
 8014f6e:	461a      	mov	r2, r3
 8014f70:	68f8      	ldr	r0, [r7, #12]
 8014f72:	f000 fafb 	bl	801556c <etharp_request_dst>
 8014f76:	4603      	mov	r3, r0
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d109      	bne.n	8014f90 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014f7c:	79fa      	ldrb	r2, [r7, #7]
 8014f7e:	4911      	ldr	r1, [pc, #68]	; (8014fc4 <etharp_output_to_arp_index+0x124>)
 8014f80:	4613      	mov	r3, r2
 8014f82:	005b      	lsls	r3, r3, #1
 8014f84:	4413      	add	r3, r2
 8014f86:	00db      	lsls	r3, r3, #3
 8014f88:	440b      	add	r3, r1
 8014f8a:	3314      	adds	r3, #20
 8014f8c:	2203      	movs	r2, #3
 8014f8e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8014f96:	79fa      	ldrb	r2, [r7, #7]
 8014f98:	4613      	mov	r3, r2
 8014f9a:	005b      	lsls	r3, r3, #1
 8014f9c:	4413      	add	r3, r2
 8014f9e:	00db      	lsls	r3, r3, #3
 8014fa0:	3308      	adds	r3, #8
 8014fa2:	4a08      	ldr	r2, [pc, #32]	; (8014fc4 <etharp_output_to_arp_index+0x124>)
 8014fa4:	4413      	add	r3, r2
 8014fa6:	1d1a      	adds	r2, r3, #4
 8014fa8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014fac:	9300      	str	r3, [sp, #0]
 8014fae:	4613      	mov	r3, r2
 8014fb0:	460a      	mov	r2, r1
 8014fb2:	68b9      	ldr	r1, [r7, #8]
 8014fb4:	68f8      	ldr	r0, [r7, #12]
 8014fb6:	f001 fe2b 	bl	8016c10 <ethernet_output>
 8014fba:	4603      	mov	r3, r0
}
 8014fbc:	4618      	mov	r0, r3
 8014fbe:	3710      	adds	r7, #16
 8014fc0:	46bd      	mov	sp, r7
 8014fc2:	bd80      	pop	{r7, pc}
 8014fc4:	2000468c 	.word	0x2000468c
 8014fc8:	0801b0f4 	.word	0x0801b0f4
 8014fcc:	0801b264 	.word	0x0801b264
 8014fd0:	0801b16c 	.word	0x0801b16c

08014fd4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014fd4:	b580      	push	{r7, lr}
 8014fd6:	b08a      	sub	sp, #40	; 0x28
 8014fd8:	af02      	add	r7, sp, #8
 8014fda:	60f8      	str	r0, [r7, #12]
 8014fdc:	60b9      	str	r1, [r7, #8]
 8014fde:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d106      	bne.n	8014ff8 <etharp_output+0x24>
 8014fea:	4b73      	ldr	r3, [pc, #460]	; (80151b8 <etharp_output+0x1e4>)
 8014fec:	f240 321e 	movw	r2, #798	; 0x31e
 8014ff0:	4972      	ldr	r1, [pc, #456]	; (80151bc <etharp_output+0x1e8>)
 8014ff2:	4873      	ldr	r0, [pc, #460]	; (80151c0 <etharp_output+0x1ec>)
 8014ff4:	f002 f8aa 	bl	801714c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014ff8:	68bb      	ldr	r3, [r7, #8]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d106      	bne.n	801500c <etharp_output+0x38>
 8014ffe:	4b6e      	ldr	r3, [pc, #440]	; (80151b8 <etharp_output+0x1e4>)
 8015000:	f240 321f 	movw	r2, #799	; 0x31f
 8015004:	496f      	ldr	r1, [pc, #444]	; (80151c4 <etharp_output+0x1f0>)
 8015006:	486e      	ldr	r0, [pc, #440]	; (80151c0 <etharp_output+0x1ec>)
 8015008:	f002 f8a0 	bl	801714c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	2b00      	cmp	r3, #0
 8015010:	d106      	bne.n	8015020 <etharp_output+0x4c>
 8015012:	4b69      	ldr	r3, [pc, #420]	; (80151b8 <etharp_output+0x1e4>)
 8015014:	f44f 7248 	mov.w	r2, #800	; 0x320
 8015018:	496b      	ldr	r1, [pc, #428]	; (80151c8 <etharp_output+0x1f4>)
 801501a:	4869      	ldr	r0, [pc, #420]	; (80151c0 <etharp_output+0x1ec>)
 801501c:	f002 f896 	bl	801714c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	68f9      	ldr	r1, [r7, #12]
 8015026:	4618      	mov	r0, r3
 8015028:	f000 feee 	bl	8015e08 <ip4_addr_isbroadcast_u32>
 801502c:	4603      	mov	r3, r0
 801502e:	2b00      	cmp	r3, #0
 8015030:	d002      	beq.n	8015038 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8015032:	4b66      	ldr	r3, [pc, #408]	; (80151cc <etharp_output+0x1f8>)
 8015034:	61fb      	str	r3, [r7, #28]
 8015036:	e0af      	b.n	8015198 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	681b      	ldr	r3, [r3, #0]
 801503c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015040:	2be0      	cmp	r3, #224	; 0xe0
 8015042:	d118      	bne.n	8015076 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015044:	2301      	movs	r3, #1
 8015046:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015048:	2300      	movs	r3, #0
 801504a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801504c:	235e      	movs	r3, #94	; 0x5e
 801504e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	3301      	adds	r3, #1
 8015054:	781b      	ldrb	r3, [r3, #0]
 8015056:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801505a:	b2db      	uxtb	r3, r3
 801505c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	3302      	adds	r3, #2
 8015062:	781b      	ldrb	r3, [r3, #0]
 8015064:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	3303      	adds	r3, #3
 801506a:	781b      	ldrb	r3, [r3, #0]
 801506c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801506e:	f107 0310 	add.w	r3, r7, #16
 8015072:	61fb      	str	r3, [r7, #28]
 8015074:	e090      	b.n	8015198 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	681a      	ldr	r2, [r3, #0]
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	3304      	adds	r3, #4
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	405a      	eors	r2, r3
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	3308      	adds	r3, #8
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	4013      	ands	r3, r2
 801508a:	2b00      	cmp	r3, #0
 801508c:	d012      	beq.n	80150b4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	681b      	ldr	r3, [r3, #0]
 8015092:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015094:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8015098:	4293      	cmp	r3, r2
 801509a:	d00b      	beq.n	80150b4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	330c      	adds	r3, #12
 80150a0:	681b      	ldr	r3, [r3, #0]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d003      	beq.n	80150ae <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	330c      	adds	r3, #12
 80150aa:	61bb      	str	r3, [r7, #24]
 80150ac:	e002      	b.n	80150b4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80150ae:	f06f 0303 	mvn.w	r3, #3
 80150b2:	e07d      	b.n	80151b0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80150b4:	4b46      	ldr	r3, [pc, #280]	; (80151d0 <etharp_output+0x1fc>)
 80150b6:	781b      	ldrb	r3, [r3, #0]
 80150b8:	4619      	mov	r1, r3
 80150ba:	4a46      	ldr	r2, [pc, #280]	; (80151d4 <etharp_output+0x200>)
 80150bc:	460b      	mov	r3, r1
 80150be:	005b      	lsls	r3, r3, #1
 80150c0:	440b      	add	r3, r1
 80150c2:	00db      	lsls	r3, r3, #3
 80150c4:	4413      	add	r3, r2
 80150c6:	3314      	adds	r3, #20
 80150c8:	781b      	ldrb	r3, [r3, #0]
 80150ca:	2b01      	cmp	r3, #1
 80150cc:	d925      	bls.n	801511a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80150ce:	4b40      	ldr	r3, [pc, #256]	; (80151d0 <etharp_output+0x1fc>)
 80150d0:	781b      	ldrb	r3, [r3, #0]
 80150d2:	4619      	mov	r1, r3
 80150d4:	4a3f      	ldr	r2, [pc, #252]	; (80151d4 <etharp_output+0x200>)
 80150d6:	460b      	mov	r3, r1
 80150d8:	005b      	lsls	r3, r3, #1
 80150da:	440b      	add	r3, r1
 80150dc:	00db      	lsls	r3, r3, #3
 80150de:	4413      	add	r3, r2
 80150e0:	3308      	adds	r3, #8
 80150e2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80150e4:	68fa      	ldr	r2, [r7, #12]
 80150e6:	429a      	cmp	r2, r3
 80150e8:	d117      	bne.n	801511a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80150ea:	69bb      	ldr	r3, [r7, #24]
 80150ec:	681a      	ldr	r2, [r3, #0]
 80150ee:	4b38      	ldr	r3, [pc, #224]	; (80151d0 <etharp_output+0x1fc>)
 80150f0:	781b      	ldrb	r3, [r3, #0]
 80150f2:	4618      	mov	r0, r3
 80150f4:	4937      	ldr	r1, [pc, #220]	; (80151d4 <etharp_output+0x200>)
 80150f6:	4603      	mov	r3, r0
 80150f8:	005b      	lsls	r3, r3, #1
 80150fa:	4403      	add	r3, r0
 80150fc:	00db      	lsls	r3, r3, #3
 80150fe:	440b      	add	r3, r1
 8015100:	3304      	adds	r3, #4
 8015102:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015104:	429a      	cmp	r2, r3
 8015106:	d108      	bne.n	801511a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015108:	4b31      	ldr	r3, [pc, #196]	; (80151d0 <etharp_output+0x1fc>)
 801510a:	781b      	ldrb	r3, [r3, #0]
 801510c:	461a      	mov	r2, r3
 801510e:	68b9      	ldr	r1, [r7, #8]
 8015110:	68f8      	ldr	r0, [r7, #12]
 8015112:	f7ff fec5 	bl	8014ea0 <etharp_output_to_arp_index>
 8015116:	4603      	mov	r3, r0
 8015118:	e04a      	b.n	80151b0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801511a:	2300      	movs	r3, #0
 801511c:	75fb      	strb	r3, [r7, #23]
 801511e:	e031      	b.n	8015184 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015120:	7dfa      	ldrb	r2, [r7, #23]
 8015122:	492c      	ldr	r1, [pc, #176]	; (80151d4 <etharp_output+0x200>)
 8015124:	4613      	mov	r3, r2
 8015126:	005b      	lsls	r3, r3, #1
 8015128:	4413      	add	r3, r2
 801512a:	00db      	lsls	r3, r3, #3
 801512c:	440b      	add	r3, r1
 801512e:	3314      	adds	r3, #20
 8015130:	781b      	ldrb	r3, [r3, #0]
 8015132:	2b01      	cmp	r3, #1
 8015134:	d923      	bls.n	801517e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8015136:	7dfa      	ldrb	r2, [r7, #23]
 8015138:	4926      	ldr	r1, [pc, #152]	; (80151d4 <etharp_output+0x200>)
 801513a:	4613      	mov	r3, r2
 801513c:	005b      	lsls	r3, r3, #1
 801513e:	4413      	add	r3, r2
 8015140:	00db      	lsls	r3, r3, #3
 8015142:	440b      	add	r3, r1
 8015144:	3308      	adds	r3, #8
 8015146:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015148:	68fa      	ldr	r2, [r7, #12]
 801514a:	429a      	cmp	r2, r3
 801514c:	d117      	bne.n	801517e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801514e:	69bb      	ldr	r3, [r7, #24]
 8015150:	6819      	ldr	r1, [r3, #0]
 8015152:	7dfa      	ldrb	r2, [r7, #23]
 8015154:	481f      	ldr	r0, [pc, #124]	; (80151d4 <etharp_output+0x200>)
 8015156:	4613      	mov	r3, r2
 8015158:	005b      	lsls	r3, r3, #1
 801515a:	4413      	add	r3, r2
 801515c:	00db      	lsls	r3, r3, #3
 801515e:	4403      	add	r3, r0
 8015160:	3304      	adds	r3, #4
 8015162:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015164:	4299      	cmp	r1, r3
 8015166:	d10a      	bne.n	801517e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8015168:	4a19      	ldr	r2, [pc, #100]	; (80151d0 <etharp_output+0x1fc>)
 801516a:	7dfb      	ldrb	r3, [r7, #23]
 801516c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801516e:	7dfb      	ldrb	r3, [r7, #23]
 8015170:	461a      	mov	r2, r3
 8015172:	68b9      	ldr	r1, [r7, #8]
 8015174:	68f8      	ldr	r0, [r7, #12]
 8015176:	f7ff fe93 	bl	8014ea0 <etharp_output_to_arp_index>
 801517a:	4603      	mov	r3, r0
 801517c:	e018      	b.n	80151b0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801517e:	7dfb      	ldrb	r3, [r7, #23]
 8015180:	3301      	adds	r3, #1
 8015182:	75fb      	strb	r3, [r7, #23]
 8015184:	7dfb      	ldrb	r3, [r7, #23]
 8015186:	2b09      	cmp	r3, #9
 8015188:	d9ca      	bls.n	8015120 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801518a:	68ba      	ldr	r2, [r7, #8]
 801518c:	69b9      	ldr	r1, [r7, #24]
 801518e:	68f8      	ldr	r0, [r7, #12]
 8015190:	f000 f822 	bl	80151d8 <etharp_query>
 8015194:	4603      	mov	r3, r0
 8015196:	e00b      	b.n	80151b0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801519e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80151a2:	9300      	str	r3, [sp, #0]
 80151a4:	69fb      	ldr	r3, [r7, #28]
 80151a6:	68b9      	ldr	r1, [r7, #8]
 80151a8:	68f8      	ldr	r0, [r7, #12]
 80151aa:	f001 fd31 	bl	8016c10 <ethernet_output>
 80151ae:	4603      	mov	r3, r0
}
 80151b0:	4618      	mov	r0, r3
 80151b2:	3720      	adds	r7, #32
 80151b4:	46bd      	mov	sp, r7
 80151b6:	bd80      	pop	{r7, pc}
 80151b8:	0801b0f4 	.word	0x0801b0f4
 80151bc:	0801b244 	.word	0x0801b244
 80151c0:	0801b16c 	.word	0x0801b16c
 80151c4:	0801b294 	.word	0x0801b294
 80151c8:	0801b234 	.word	0x0801b234
 80151cc:	0801b91c 	.word	0x0801b91c
 80151d0:	2000477c 	.word	0x2000477c
 80151d4:	2000468c 	.word	0x2000468c

080151d8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80151d8:	b580      	push	{r7, lr}
 80151da:	b08c      	sub	sp, #48	; 0x30
 80151dc:	af02      	add	r7, sp, #8
 80151de:	60f8      	str	r0, [r7, #12]
 80151e0:	60b9      	str	r1, [r7, #8]
 80151e2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	3326      	adds	r3, #38	; 0x26
 80151e8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80151ea:	23ff      	movs	r3, #255	; 0xff
 80151ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80151f0:	2300      	movs	r3, #0
 80151f2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80151f4:	68bb      	ldr	r3, [r7, #8]
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	68f9      	ldr	r1, [r7, #12]
 80151fa:	4618      	mov	r0, r3
 80151fc:	f000 fe04 	bl	8015e08 <ip4_addr_isbroadcast_u32>
 8015200:	4603      	mov	r3, r0
 8015202:	2b00      	cmp	r3, #0
 8015204:	d10c      	bne.n	8015220 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015206:	68bb      	ldr	r3, [r7, #8]
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801520e:	2be0      	cmp	r3, #224	; 0xe0
 8015210:	d006      	beq.n	8015220 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015212:	68bb      	ldr	r3, [r7, #8]
 8015214:	2b00      	cmp	r3, #0
 8015216:	d003      	beq.n	8015220 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015218:	68bb      	ldr	r3, [r7, #8]
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	2b00      	cmp	r3, #0
 801521e:	d102      	bne.n	8015226 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015220:	f06f 030f 	mvn.w	r3, #15
 8015224:	e102      	b.n	801542c <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015226:	68fa      	ldr	r2, [r7, #12]
 8015228:	2101      	movs	r1, #1
 801522a:	68b8      	ldr	r0, [r7, #8]
 801522c:	f7ff fb60 	bl	80148f0 <etharp_find_entry>
 8015230:	4603      	mov	r3, r0
 8015232:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015234:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015238:	2b00      	cmp	r3, #0
 801523a:	da02      	bge.n	8015242 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801523c:	8a7b      	ldrh	r3, [r7, #18]
 801523e:	b25b      	sxtb	r3, r3
 8015240:	e0f4      	b.n	801542c <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8015242:	8a7b      	ldrh	r3, [r7, #18]
 8015244:	2b7e      	cmp	r3, #126	; 0x7e
 8015246:	d906      	bls.n	8015256 <etharp_query+0x7e>
 8015248:	4b7a      	ldr	r3, [pc, #488]	; (8015434 <etharp_query+0x25c>)
 801524a:	f240 32c1 	movw	r2, #961	; 0x3c1
 801524e:	497a      	ldr	r1, [pc, #488]	; (8015438 <etharp_query+0x260>)
 8015250:	487a      	ldr	r0, [pc, #488]	; (801543c <etharp_query+0x264>)
 8015252:	f001 ff7b 	bl	801714c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8015256:	8a7b      	ldrh	r3, [r7, #18]
 8015258:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801525a:	7c7a      	ldrb	r2, [r7, #17]
 801525c:	4978      	ldr	r1, [pc, #480]	; (8015440 <etharp_query+0x268>)
 801525e:	4613      	mov	r3, r2
 8015260:	005b      	lsls	r3, r3, #1
 8015262:	4413      	add	r3, r2
 8015264:	00db      	lsls	r3, r3, #3
 8015266:	440b      	add	r3, r1
 8015268:	3314      	adds	r3, #20
 801526a:	781b      	ldrb	r3, [r3, #0]
 801526c:	2b00      	cmp	r3, #0
 801526e:	d115      	bne.n	801529c <etharp_query+0xc4>
    is_new_entry = 1;
 8015270:	2301      	movs	r3, #1
 8015272:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015274:	7c7a      	ldrb	r2, [r7, #17]
 8015276:	4972      	ldr	r1, [pc, #456]	; (8015440 <etharp_query+0x268>)
 8015278:	4613      	mov	r3, r2
 801527a:	005b      	lsls	r3, r3, #1
 801527c:	4413      	add	r3, r2
 801527e:	00db      	lsls	r3, r3, #3
 8015280:	440b      	add	r3, r1
 8015282:	3314      	adds	r3, #20
 8015284:	2201      	movs	r2, #1
 8015286:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015288:	7c7a      	ldrb	r2, [r7, #17]
 801528a:	496d      	ldr	r1, [pc, #436]	; (8015440 <etharp_query+0x268>)
 801528c:	4613      	mov	r3, r2
 801528e:	005b      	lsls	r3, r3, #1
 8015290:	4413      	add	r3, r2
 8015292:	00db      	lsls	r3, r3, #3
 8015294:	440b      	add	r3, r1
 8015296:	3308      	adds	r3, #8
 8015298:	68fa      	ldr	r2, [r7, #12]
 801529a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801529c:	7c7a      	ldrb	r2, [r7, #17]
 801529e:	4968      	ldr	r1, [pc, #416]	; (8015440 <etharp_query+0x268>)
 80152a0:	4613      	mov	r3, r2
 80152a2:	005b      	lsls	r3, r3, #1
 80152a4:	4413      	add	r3, r2
 80152a6:	00db      	lsls	r3, r3, #3
 80152a8:	440b      	add	r3, r1
 80152aa:	3314      	adds	r3, #20
 80152ac:	781b      	ldrb	r3, [r3, #0]
 80152ae:	2b01      	cmp	r3, #1
 80152b0:	d011      	beq.n	80152d6 <etharp_query+0xfe>
 80152b2:	7c7a      	ldrb	r2, [r7, #17]
 80152b4:	4962      	ldr	r1, [pc, #392]	; (8015440 <etharp_query+0x268>)
 80152b6:	4613      	mov	r3, r2
 80152b8:	005b      	lsls	r3, r3, #1
 80152ba:	4413      	add	r3, r2
 80152bc:	00db      	lsls	r3, r3, #3
 80152be:	440b      	add	r3, r1
 80152c0:	3314      	adds	r3, #20
 80152c2:	781b      	ldrb	r3, [r3, #0]
 80152c4:	2b01      	cmp	r3, #1
 80152c6:	d806      	bhi.n	80152d6 <etharp_query+0xfe>
 80152c8:	4b5a      	ldr	r3, [pc, #360]	; (8015434 <etharp_query+0x25c>)
 80152ca:	f240 32cf 	movw	r2, #975	; 0x3cf
 80152ce:	495d      	ldr	r1, [pc, #372]	; (8015444 <etharp_query+0x26c>)
 80152d0:	485a      	ldr	r0, [pc, #360]	; (801543c <etharp_query+0x264>)
 80152d2:	f001 ff3b 	bl	801714c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80152d6:	6a3b      	ldr	r3, [r7, #32]
 80152d8:	2b00      	cmp	r3, #0
 80152da:	d102      	bne.n	80152e2 <etharp_query+0x10a>
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d10c      	bne.n	80152fc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80152e2:	68b9      	ldr	r1, [r7, #8]
 80152e4:	68f8      	ldr	r0, [r7, #12]
 80152e6:	f000 f963 	bl	80155b0 <etharp_request>
 80152ea:	4603      	mov	r3, r0
 80152ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d102      	bne.n	80152fc <etharp_query+0x124>
      return result;
 80152f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80152fa:	e097      	b.n	801542c <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d106      	bne.n	8015310 <etharp_query+0x138>
 8015302:	4b4c      	ldr	r3, [pc, #304]	; (8015434 <etharp_query+0x25c>)
 8015304:	f240 32e1 	movw	r2, #993	; 0x3e1
 8015308:	494f      	ldr	r1, [pc, #316]	; (8015448 <etharp_query+0x270>)
 801530a:	484c      	ldr	r0, [pc, #304]	; (801543c <etharp_query+0x264>)
 801530c:	f001 ff1e 	bl	801714c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8015310:	7c7a      	ldrb	r2, [r7, #17]
 8015312:	494b      	ldr	r1, [pc, #300]	; (8015440 <etharp_query+0x268>)
 8015314:	4613      	mov	r3, r2
 8015316:	005b      	lsls	r3, r3, #1
 8015318:	4413      	add	r3, r2
 801531a:	00db      	lsls	r3, r3, #3
 801531c:	440b      	add	r3, r1
 801531e:	3314      	adds	r3, #20
 8015320:	781b      	ldrb	r3, [r3, #0]
 8015322:	2b01      	cmp	r3, #1
 8015324:	d918      	bls.n	8015358 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8015326:	4a49      	ldr	r2, [pc, #292]	; (801544c <etharp_query+0x274>)
 8015328:	7c7b      	ldrb	r3, [r7, #17]
 801532a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801532c:	7c7a      	ldrb	r2, [r7, #17]
 801532e:	4613      	mov	r3, r2
 8015330:	005b      	lsls	r3, r3, #1
 8015332:	4413      	add	r3, r2
 8015334:	00db      	lsls	r3, r3, #3
 8015336:	3308      	adds	r3, #8
 8015338:	4a41      	ldr	r2, [pc, #260]	; (8015440 <etharp_query+0x268>)
 801533a:	4413      	add	r3, r2
 801533c:	1d1a      	adds	r2, r3, #4
 801533e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015342:	9300      	str	r3, [sp, #0]
 8015344:	4613      	mov	r3, r2
 8015346:	697a      	ldr	r2, [r7, #20]
 8015348:	6879      	ldr	r1, [r7, #4]
 801534a:	68f8      	ldr	r0, [r7, #12]
 801534c:	f001 fc60 	bl	8016c10 <ethernet_output>
 8015350:	4603      	mov	r3, r0
 8015352:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015356:	e067      	b.n	8015428 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015358:	7c7a      	ldrb	r2, [r7, #17]
 801535a:	4939      	ldr	r1, [pc, #228]	; (8015440 <etharp_query+0x268>)
 801535c:	4613      	mov	r3, r2
 801535e:	005b      	lsls	r3, r3, #1
 8015360:	4413      	add	r3, r2
 8015362:	00db      	lsls	r3, r3, #3
 8015364:	440b      	add	r3, r1
 8015366:	3314      	adds	r3, #20
 8015368:	781b      	ldrb	r3, [r3, #0]
 801536a:	2b01      	cmp	r3, #1
 801536c:	d15c      	bne.n	8015428 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801536e:	2300      	movs	r3, #0
 8015370:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015376:	e01c      	b.n	80153b2 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015378:	69fb      	ldr	r3, [r7, #28]
 801537a:	895a      	ldrh	r2, [r3, #10]
 801537c:	69fb      	ldr	r3, [r7, #28]
 801537e:	891b      	ldrh	r3, [r3, #8]
 8015380:	429a      	cmp	r2, r3
 8015382:	d10a      	bne.n	801539a <etharp_query+0x1c2>
 8015384:	69fb      	ldr	r3, [r7, #28]
 8015386:	681b      	ldr	r3, [r3, #0]
 8015388:	2b00      	cmp	r3, #0
 801538a:	d006      	beq.n	801539a <etharp_query+0x1c2>
 801538c:	4b29      	ldr	r3, [pc, #164]	; (8015434 <etharp_query+0x25c>)
 801538e:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8015392:	492f      	ldr	r1, [pc, #188]	; (8015450 <etharp_query+0x278>)
 8015394:	4829      	ldr	r0, [pc, #164]	; (801543c <etharp_query+0x264>)
 8015396:	f001 fed9 	bl	801714c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801539a:	69fb      	ldr	r3, [r7, #28]
 801539c:	7b1b      	ldrb	r3, [r3, #12]
 801539e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	d002      	beq.n	80153ac <etharp_query+0x1d4>
        copy_needed = 1;
 80153a6:	2301      	movs	r3, #1
 80153a8:	61bb      	str	r3, [r7, #24]
        break;
 80153aa:	e005      	b.n	80153b8 <etharp_query+0x1e0>
      }
      p = p->next;
 80153ac:	69fb      	ldr	r3, [r7, #28]
 80153ae:	681b      	ldr	r3, [r3, #0]
 80153b0:	61fb      	str	r3, [r7, #28]
    while (p) {
 80153b2:	69fb      	ldr	r3, [r7, #28]
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d1df      	bne.n	8015378 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 80153b8:	69bb      	ldr	r3, [r7, #24]
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	d007      	beq.n	80153ce <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80153be:	687a      	ldr	r2, [r7, #4]
 80153c0:	f44f 7120 	mov.w	r1, #640	; 0x280
 80153c4:	200e      	movs	r0, #14
 80153c6:	f7f8 ff89 	bl	800e2dc <pbuf_clone>
 80153ca:	61f8      	str	r0, [r7, #28]
 80153cc:	e004      	b.n	80153d8 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80153d2:	69f8      	ldr	r0, [r7, #28]
 80153d4:	f7f8 fdc0 	bl	800df58 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80153d8:	69fb      	ldr	r3, [r7, #28]
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d021      	beq.n	8015422 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80153de:	7c7a      	ldrb	r2, [r7, #17]
 80153e0:	4917      	ldr	r1, [pc, #92]	; (8015440 <etharp_query+0x268>)
 80153e2:	4613      	mov	r3, r2
 80153e4:	005b      	lsls	r3, r3, #1
 80153e6:	4413      	add	r3, r2
 80153e8:	00db      	lsls	r3, r3, #3
 80153ea:	440b      	add	r3, r1
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d00a      	beq.n	8015408 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80153f2:	7c7a      	ldrb	r2, [r7, #17]
 80153f4:	4912      	ldr	r1, [pc, #72]	; (8015440 <etharp_query+0x268>)
 80153f6:	4613      	mov	r3, r2
 80153f8:	005b      	lsls	r3, r3, #1
 80153fa:	4413      	add	r3, r2
 80153fc:	00db      	lsls	r3, r3, #3
 80153fe:	440b      	add	r3, r1
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	4618      	mov	r0, r3
 8015404:	f7f8 fd02 	bl	800de0c <pbuf_free>
      }
      arp_table[i].q = p;
 8015408:	7c7a      	ldrb	r2, [r7, #17]
 801540a:	490d      	ldr	r1, [pc, #52]	; (8015440 <etharp_query+0x268>)
 801540c:	4613      	mov	r3, r2
 801540e:	005b      	lsls	r3, r3, #1
 8015410:	4413      	add	r3, r2
 8015412:	00db      	lsls	r3, r3, #3
 8015414:	440b      	add	r3, r1
 8015416:	69fa      	ldr	r2, [r7, #28]
 8015418:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801541a:	2300      	movs	r3, #0
 801541c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015420:	e002      	b.n	8015428 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015422:	23ff      	movs	r3, #255	; 0xff
 8015424:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8015428:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801542c:	4618      	mov	r0, r3
 801542e:	3728      	adds	r7, #40	; 0x28
 8015430:	46bd      	mov	sp, r7
 8015432:	bd80      	pop	{r7, pc}
 8015434:	0801b0f4 	.word	0x0801b0f4
 8015438:	0801b2a0 	.word	0x0801b2a0
 801543c:	0801b16c 	.word	0x0801b16c
 8015440:	2000468c 	.word	0x2000468c
 8015444:	0801b2b0 	.word	0x0801b2b0
 8015448:	0801b294 	.word	0x0801b294
 801544c:	2000477c 	.word	0x2000477c
 8015450:	0801b2d8 	.word	0x0801b2d8

08015454 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015454:	b580      	push	{r7, lr}
 8015456:	b08a      	sub	sp, #40	; 0x28
 8015458:	af02      	add	r7, sp, #8
 801545a:	60f8      	str	r0, [r7, #12]
 801545c:	60b9      	str	r1, [r7, #8]
 801545e:	607a      	str	r2, [r7, #4]
 8015460:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015462:	2300      	movs	r3, #0
 8015464:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	2b00      	cmp	r3, #0
 801546a:	d106      	bne.n	801547a <etharp_raw+0x26>
 801546c:	4b3a      	ldr	r3, [pc, #232]	; (8015558 <etharp_raw+0x104>)
 801546e:	f240 4257 	movw	r2, #1111	; 0x457
 8015472:	493a      	ldr	r1, [pc, #232]	; (801555c <etharp_raw+0x108>)
 8015474:	483a      	ldr	r0, [pc, #232]	; (8015560 <etharp_raw+0x10c>)
 8015476:	f001 fe69 	bl	801714c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801547a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801547e:	211c      	movs	r1, #28
 8015480:	200e      	movs	r0, #14
 8015482:	f7f8 f9b1 	bl	800d7e8 <pbuf_alloc>
 8015486:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015488:	69bb      	ldr	r3, [r7, #24]
 801548a:	2b00      	cmp	r3, #0
 801548c:	d102      	bne.n	8015494 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801548e:	f04f 33ff 	mov.w	r3, #4294967295
 8015492:	e05d      	b.n	8015550 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015494:	69bb      	ldr	r3, [r7, #24]
 8015496:	895b      	ldrh	r3, [r3, #10]
 8015498:	2b1b      	cmp	r3, #27
 801549a:	d806      	bhi.n	80154aa <etharp_raw+0x56>
 801549c:	4b2e      	ldr	r3, [pc, #184]	; (8015558 <etharp_raw+0x104>)
 801549e:	f240 4263 	movw	r2, #1123	; 0x463
 80154a2:	4930      	ldr	r1, [pc, #192]	; (8015564 <etharp_raw+0x110>)
 80154a4:	482e      	ldr	r0, [pc, #184]	; (8015560 <etharp_raw+0x10c>)
 80154a6:	f001 fe51 	bl	801714c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80154aa:	69bb      	ldr	r3, [r7, #24]
 80154ac:	685b      	ldr	r3, [r3, #4]
 80154ae:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80154b0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80154b2:	4618      	mov	r0, r3
 80154b4:	f7f7 f8d6 	bl	800c664 <lwip_htons>
 80154b8:	4603      	mov	r3, r0
 80154ba:	461a      	mov	r2, r3
 80154bc:	697b      	ldr	r3, [r7, #20]
 80154be:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80154c0:	68fb      	ldr	r3, [r7, #12]
 80154c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80154c6:	2b06      	cmp	r3, #6
 80154c8:	d006      	beq.n	80154d8 <etharp_raw+0x84>
 80154ca:	4b23      	ldr	r3, [pc, #140]	; (8015558 <etharp_raw+0x104>)
 80154cc:	f240 426a 	movw	r2, #1130	; 0x46a
 80154d0:	4925      	ldr	r1, [pc, #148]	; (8015568 <etharp_raw+0x114>)
 80154d2:	4823      	ldr	r0, [pc, #140]	; (8015560 <etharp_raw+0x10c>)
 80154d4:	f001 fe3a 	bl	801714c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80154d8:	697b      	ldr	r3, [r7, #20]
 80154da:	3308      	adds	r3, #8
 80154dc:	2206      	movs	r2, #6
 80154de:	6839      	ldr	r1, [r7, #0]
 80154e0:	4618      	mov	r0, r3
 80154e2:	f001 fe06 	bl	80170f2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80154e6:	697b      	ldr	r3, [r7, #20]
 80154e8:	3312      	adds	r3, #18
 80154ea:	2206      	movs	r2, #6
 80154ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80154ee:	4618      	mov	r0, r3
 80154f0:	f001 fdff 	bl	80170f2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80154f4:	697b      	ldr	r3, [r7, #20]
 80154f6:	330e      	adds	r3, #14
 80154f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80154fa:	6812      	ldr	r2, [r2, #0]
 80154fc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80154fe:	697b      	ldr	r3, [r7, #20]
 8015500:	3318      	adds	r3, #24
 8015502:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015504:	6812      	ldr	r2, [r2, #0]
 8015506:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015508:	697b      	ldr	r3, [r7, #20]
 801550a:	2200      	movs	r2, #0
 801550c:	701a      	strb	r2, [r3, #0]
 801550e:	2200      	movs	r2, #0
 8015510:	f042 0201 	orr.w	r2, r2, #1
 8015514:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015516:	697b      	ldr	r3, [r7, #20]
 8015518:	2200      	movs	r2, #0
 801551a:	f042 0208 	orr.w	r2, r2, #8
 801551e:	709a      	strb	r2, [r3, #2]
 8015520:	2200      	movs	r2, #0
 8015522:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015524:	697b      	ldr	r3, [r7, #20]
 8015526:	2206      	movs	r2, #6
 8015528:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801552a:	697b      	ldr	r3, [r7, #20]
 801552c:	2204      	movs	r2, #4
 801552e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015530:	f640 0306 	movw	r3, #2054	; 0x806
 8015534:	9300      	str	r3, [sp, #0]
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	68ba      	ldr	r2, [r7, #8]
 801553a:	69b9      	ldr	r1, [r7, #24]
 801553c:	68f8      	ldr	r0, [r7, #12]
 801553e:	f001 fb67 	bl	8016c10 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015542:	69b8      	ldr	r0, [r7, #24]
 8015544:	f7f8 fc62 	bl	800de0c <pbuf_free>
  p = NULL;
 8015548:	2300      	movs	r3, #0
 801554a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801554c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015550:	4618      	mov	r0, r3
 8015552:	3720      	adds	r7, #32
 8015554:	46bd      	mov	sp, r7
 8015556:	bd80      	pop	{r7, pc}
 8015558:	0801b0f4 	.word	0x0801b0f4
 801555c:	0801b244 	.word	0x0801b244
 8015560:	0801b16c 	.word	0x0801b16c
 8015564:	0801b2f4 	.word	0x0801b2f4
 8015568:	0801b328 	.word	0x0801b328

0801556c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801556c:	b580      	push	{r7, lr}
 801556e:	b088      	sub	sp, #32
 8015570:	af04      	add	r7, sp, #16
 8015572:	60f8      	str	r0, [r7, #12]
 8015574:	60b9      	str	r1, [r7, #8]
 8015576:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015578:	68fb      	ldr	r3, [r7, #12]
 801557a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801557e:	68fb      	ldr	r3, [r7, #12]
 8015580:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015588:	2201      	movs	r2, #1
 801558a:	9203      	str	r2, [sp, #12]
 801558c:	68ba      	ldr	r2, [r7, #8]
 801558e:	9202      	str	r2, [sp, #8]
 8015590:	4a06      	ldr	r2, [pc, #24]	; (80155ac <etharp_request_dst+0x40>)
 8015592:	9201      	str	r2, [sp, #4]
 8015594:	9300      	str	r3, [sp, #0]
 8015596:	4603      	mov	r3, r0
 8015598:	687a      	ldr	r2, [r7, #4]
 801559a:	68f8      	ldr	r0, [r7, #12]
 801559c:	f7ff ff5a 	bl	8015454 <etharp_raw>
 80155a0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80155a2:	4618      	mov	r0, r3
 80155a4:	3710      	adds	r7, #16
 80155a6:	46bd      	mov	sp, r7
 80155a8:	bd80      	pop	{r7, pc}
 80155aa:	bf00      	nop
 80155ac:	0801b924 	.word	0x0801b924

080155b0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80155b0:	b580      	push	{r7, lr}
 80155b2:	b082      	sub	sp, #8
 80155b4:	af00      	add	r7, sp, #0
 80155b6:	6078      	str	r0, [r7, #4]
 80155b8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80155ba:	4a05      	ldr	r2, [pc, #20]	; (80155d0 <etharp_request+0x20>)
 80155bc:	6839      	ldr	r1, [r7, #0]
 80155be:	6878      	ldr	r0, [r7, #4]
 80155c0:	f7ff ffd4 	bl	801556c <etharp_request_dst>
 80155c4:	4603      	mov	r3, r0
}
 80155c6:	4618      	mov	r0, r3
 80155c8:	3708      	adds	r7, #8
 80155ca:	46bd      	mov	sp, r7
 80155cc:	bd80      	pop	{r7, pc}
 80155ce:	bf00      	nop
 80155d0:	0801b91c 	.word	0x0801b91c

080155d4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80155d4:	b580      	push	{r7, lr}
 80155d6:	b08e      	sub	sp, #56	; 0x38
 80155d8:	af04      	add	r7, sp, #16
 80155da:	6078      	str	r0, [r7, #4]
 80155dc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80155de:	4b79      	ldr	r3, [pc, #484]	; (80157c4 <icmp_input+0x1f0>)
 80155e0:	689b      	ldr	r3, [r3, #8]
 80155e2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80155e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155e6:	781b      	ldrb	r3, [r3, #0]
 80155e8:	f003 030f 	and.w	r3, r3, #15
 80155ec:	b2db      	uxtb	r3, r3
 80155ee:	009b      	lsls	r3, r3, #2
 80155f0:	b2db      	uxtb	r3, r3
 80155f2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80155f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80155f6:	2b13      	cmp	r3, #19
 80155f8:	f240 80cd 	bls.w	8015796 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	895b      	ldrh	r3, [r3, #10]
 8015600:	2b03      	cmp	r3, #3
 8015602:	f240 80ca 	bls.w	801579a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	685b      	ldr	r3, [r3, #4]
 801560a:	781b      	ldrb	r3, [r3, #0]
 801560c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8015610:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015614:	2b00      	cmp	r3, #0
 8015616:	f000 80b7 	beq.w	8015788 <icmp_input+0x1b4>
 801561a:	2b08      	cmp	r3, #8
 801561c:	f040 80b7 	bne.w	801578e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8015620:	4b69      	ldr	r3, [pc, #420]	; (80157c8 <icmp_input+0x1f4>)
 8015622:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015624:	4b67      	ldr	r3, [pc, #412]	; (80157c4 <icmp_input+0x1f0>)
 8015626:	695b      	ldr	r3, [r3, #20]
 8015628:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801562c:	2be0      	cmp	r3, #224	; 0xe0
 801562e:	f000 80bb 	beq.w	80157a8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8015632:	4b64      	ldr	r3, [pc, #400]	; (80157c4 <icmp_input+0x1f0>)
 8015634:	695a      	ldr	r2, [r3, #20]
 8015636:	4b63      	ldr	r3, [pc, #396]	; (80157c4 <icmp_input+0x1f0>)
 8015638:	681b      	ldr	r3, [r3, #0]
 801563a:	4619      	mov	r1, r3
 801563c:	4610      	mov	r0, r2
 801563e:	f000 fbe3 	bl	8015e08 <ip4_addr_isbroadcast_u32>
 8015642:	4603      	mov	r3, r0
 8015644:	2b00      	cmp	r3, #0
 8015646:	f040 80b1 	bne.w	80157ac <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	891b      	ldrh	r3, [r3, #8]
 801564e:	2b07      	cmp	r3, #7
 8015650:	f240 80a5 	bls.w	801579e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015654:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015656:	330e      	adds	r3, #14
 8015658:	4619      	mov	r1, r3
 801565a:	6878      	ldr	r0, [r7, #4]
 801565c:	f7f8 fb0e 	bl	800dc7c <pbuf_add_header>
 8015660:	4603      	mov	r3, r0
 8015662:	2b00      	cmp	r3, #0
 8015664:	d04b      	beq.n	80156fe <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	891a      	ldrh	r2, [r3, #8]
 801566a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801566c:	4413      	add	r3, r2
 801566e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	891b      	ldrh	r3, [r3, #8]
 8015674:	8b7a      	ldrh	r2, [r7, #26]
 8015676:	429a      	cmp	r2, r3
 8015678:	f0c0 809a 	bcc.w	80157b0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801567c:	8b7b      	ldrh	r3, [r7, #26]
 801567e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015682:	4619      	mov	r1, r3
 8015684:	200e      	movs	r0, #14
 8015686:	f7f8 f8af 	bl	800d7e8 <pbuf_alloc>
 801568a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801568c:	697b      	ldr	r3, [r7, #20]
 801568e:	2b00      	cmp	r3, #0
 8015690:	f000 8090 	beq.w	80157b4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015694:	697b      	ldr	r3, [r7, #20]
 8015696:	895b      	ldrh	r3, [r3, #10]
 8015698:	461a      	mov	r2, r3
 801569a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801569c:	3308      	adds	r3, #8
 801569e:	429a      	cmp	r2, r3
 80156a0:	d203      	bcs.n	80156aa <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80156a2:	6978      	ldr	r0, [r7, #20]
 80156a4:	f7f8 fbb2 	bl	800de0c <pbuf_free>
          goto icmperr;
 80156a8:	e085      	b.n	80157b6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80156aa:	697b      	ldr	r3, [r7, #20]
 80156ac:	685b      	ldr	r3, [r3, #4]
 80156ae:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80156b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80156b2:	4618      	mov	r0, r3
 80156b4:	f001 fd1d 	bl	80170f2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80156b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80156ba:	4619      	mov	r1, r3
 80156bc:	6978      	ldr	r0, [r7, #20]
 80156be:	f7f8 faed 	bl	800dc9c <pbuf_remove_header>
 80156c2:	4603      	mov	r3, r0
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d009      	beq.n	80156dc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80156c8:	4b40      	ldr	r3, [pc, #256]	; (80157cc <icmp_input+0x1f8>)
 80156ca:	22b6      	movs	r2, #182	; 0xb6
 80156cc:	4940      	ldr	r1, [pc, #256]	; (80157d0 <icmp_input+0x1fc>)
 80156ce:	4841      	ldr	r0, [pc, #260]	; (80157d4 <icmp_input+0x200>)
 80156d0:	f001 fd3c 	bl	801714c <iprintf>
          pbuf_free(r);
 80156d4:	6978      	ldr	r0, [r7, #20]
 80156d6:	f7f8 fb99 	bl	800de0c <pbuf_free>
          goto icmperr;
 80156da:	e06c      	b.n	80157b6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80156dc:	6879      	ldr	r1, [r7, #4]
 80156de:	6978      	ldr	r0, [r7, #20]
 80156e0:	f7f8 fcb8 	bl	800e054 <pbuf_copy>
 80156e4:	4603      	mov	r3, r0
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d003      	beq.n	80156f2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80156ea:	6978      	ldr	r0, [r7, #20]
 80156ec:	f7f8 fb8e 	bl	800de0c <pbuf_free>
          goto icmperr;
 80156f0:	e061      	b.n	80157b6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80156f2:	6878      	ldr	r0, [r7, #4]
 80156f4:	f7f8 fb8a 	bl	800de0c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80156f8:	697b      	ldr	r3, [r7, #20]
 80156fa:	607b      	str	r3, [r7, #4]
 80156fc:	e00f      	b.n	801571e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80156fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015700:	330e      	adds	r3, #14
 8015702:	4619      	mov	r1, r3
 8015704:	6878      	ldr	r0, [r7, #4]
 8015706:	f7f8 fac9 	bl	800dc9c <pbuf_remove_header>
 801570a:	4603      	mov	r3, r0
 801570c:	2b00      	cmp	r3, #0
 801570e:	d006      	beq.n	801571e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015710:	4b2e      	ldr	r3, [pc, #184]	; (80157cc <icmp_input+0x1f8>)
 8015712:	22c7      	movs	r2, #199	; 0xc7
 8015714:	4930      	ldr	r1, [pc, #192]	; (80157d8 <icmp_input+0x204>)
 8015716:	482f      	ldr	r0, [pc, #188]	; (80157d4 <icmp_input+0x200>)
 8015718:	f001 fd18 	bl	801714c <iprintf>
          goto icmperr;
 801571c:	e04b      	b.n	80157b6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	685b      	ldr	r3, [r3, #4]
 8015722:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015724:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015726:	4619      	mov	r1, r3
 8015728:	6878      	ldr	r0, [r7, #4]
 801572a:	f7f8 faa7 	bl	800dc7c <pbuf_add_header>
 801572e:	4603      	mov	r3, r0
 8015730:	2b00      	cmp	r3, #0
 8015732:	d12b      	bne.n	801578c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	685b      	ldr	r3, [r3, #4]
 8015738:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801573a:	69fb      	ldr	r3, [r7, #28]
 801573c:	681a      	ldr	r2, [r3, #0]
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015742:	4b20      	ldr	r3, [pc, #128]	; (80157c4 <icmp_input+0x1f0>)
 8015744:	691a      	ldr	r2, [r3, #16]
 8015746:	68fb      	ldr	r3, [r7, #12]
 8015748:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801574a:	693b      	ldr	r3, [r7, #16]
 801574c:	2200      	movs	r2, #0
 801574e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8015750:	693b      	ldr	r3, [r7, #16]
 8015752:	2200      	movs	r2, #0
 8015754:	709a      	strb	r2, [r3, #2]
 8015756:	2200      	movs	r2, #0
 8015758:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	22ff      	movs	r2, #255	; 0xff
 801575e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	2200      	movs	r2, #0
 8015764:	729a      	strb	r2, [r3, #10]
 8015766:	2200      	movs	r2, #0
 8015768:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801576a:	683b      	ldr	r3, [r7, #0]
 801576c:	9302      	str	r3, [sp, #8]
 801576e:	2301      	movs	r3, #1
 8015770:	9301      	str	r3, [sp, #4]
 8015772:	2300      	movs	r3, #0
 8015774:	9300      	str	r3, [sp, #0]
 8015776:	23ff      	movs	r3, #255	; 0xff
 8015778:	2200      	movs	r2, #0
 801577a:	69f9      	ldr	r1, [r7, #28]
 801577c:	6878      	ldr	r0, [r7, #4]
 801577e:	f000 fa6b 	bl	8015c58 <ip4_output_if>
 8015782:	4603      	mov	r3, r0
 8015784:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8015786:	e001      	b.n	801578c <icmp_input+0x1b8>
      break;
 8015788:	bf00      	nop
 801578a:	e000      	b.n	801578e <icmp_input+0x1ba>
      break;
 801578c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801578e:	6878      	ldr	r0, [r7, #4]
 8015790:	f7f8 fb3c 	bl	800de0c <pbuf_free>
  return;
 8015794:	e013      	b.n	80157be <icmp_input+0x1ea>
    goto lenerr;
 8015796:	bf00      	nop
 8015798:	e002      	b.n	80157a0 <icmp_input+0x1cc>
    goto lenerr;
 801579a:	bf00      	nop
 801579c:	e000      	b.n	80157a0 <icmp_input+0x1cc>
        goto lenerr;
 801579e:	bf00      	nop
lenerr:
  pbuf_free(p);
 80157a0:	6878      	ldr	r0, [r7, #4]
 80157a2:	f7f8 fb33 	bl	800de0c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80157a6:	e00a      	b.n	80157be <icmp_input+0x1ea>
        goto icmperr;
 80157a8:	bf00      	nop
 80157aa:	e004      	b.n	80157b6 <icmp_input+0x1e2>
        goto icmperr;
 80157ac:	bf00      	nop
 80157ae:	e002      	b.n	80157b6 <icmp_input+0x1e2>
          goto icmperr;
 80157b0:	bf00      	nop
 80157b2:	e000      	b.n	80157b6 <icmp_input+0x1e2>
          goto icmperr;
 80157b4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80157b6:	6878      	ldr	r0, [r7, #4]
 80157b8:	f7f8 fb28 	bl	800de0c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80157bc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80157be:	3728      	adds	r7, #40	; 0x28
 80157c0:	46bd      	mov	sp, r7
 80157c2:	bd80      	pop	{r7, pc}
 80157c4:	200079f0 	.word	0x200079f0
 80157c8:	20007a04 	.word	0x20007a04
 80157cc:	0801b36c 	.word	0x0801b36c
 80157d0:	0801b3a4 	.word	0x0801b3a4
 80157d4:	0801b3dc 	.word	0x0801b3dc
 80157d8:	0801b404 	.word	0x0801b404

080157dc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80157dc:	b580      	push	{r7, lr}
 80157de:	b082      	sub	sp, #8
 80157e0:	af00      	add	r7, sp, #0
 80157e2:	6078      	str	r0, [r7, #4]
 80157e4:	460b      	mov	r3, r1
 80157e6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80157e8:	78fb      	ldrb	r3, [r7, #3]
 80157ea:	461a      	mov	r2, r3
 80157ec:	2103      	movs	r1, #3
 80157ee:	6878      	ldr	r0, [r7, #4]
 80157f0:	f000 f814 	bl	801581c <icmp_send_response>
}
 80157f4:	bf00      	nop
 80157f6:	3708      	adds	r7, #8
 80157f8:	46bd      	mov	sp, r7
 80157fa:	bd80      	pop	{r7, pc}

080157fc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80157fc:	b580      	push	{r7, lr}
 80157fe:	b082      	sub	sp, #8
 8015800:	af00      	add	r7, sp, #0
 8015802:	6078      	str	r0, [r7, #4]
 8015804:	460b      	mov	r3, r1
 8015806:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015808:	78fb      	ldrb	r3, [r7, #3]
 801580a:	461a      	mov	r2, r3
 801580c:	210b      	movs	r1, #11
 801580e:	6878      	ldr	r0, [r7, #4]
 8015810:	f000 f804 	bl	801581c <icmp_send_response>
}
 8015814:	bf00      	nop
 8015816:	3708      	adds	r7, #8
 8015818:	46bd      	mov	sp, r7
 801581a:	bd80      	pop	{r7, pc}

0801581c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801581c:	b580      	push	{r7, lr}
 801581e:	b08c      	sub	sp, #48	; 0x30
 8015820:	af04      	add	r7, sp, #16
 8015822:	6078      	str	r0, [r7, #4]
 8015824:	460b      	mov	r3, r1
 8015826:	70fb      	strb	r3, [r7, #3]
 8015828:	4613      	mov	r3, r2
 801582a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801582c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015830:	2124      	movs	r1, #36	; 0x24
 8015832:	2022      	movs	r0, #34	; 0x22
 8015834:	f7f7 ffd8 	bl	800d7e8 <pbuf_alloc>
 8015838:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801583a:	69fb      	ldr	r3, [r7, #28]
 801583c:	2b00      	cmp	r3, #0
 801583e:	d04c      	beq.n	80158da <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015840:	69fb      	ldr	r3, [r7, #28]
 8015842:	895b      	ldrh	r3, [r3, #10]
 8015844:	2b23      	cmp	r3, #35	; 0x23
 8015846:	d806      	bhi.n	8015856 <icmp_send_response+0x3a>
 8015848:	4b26      	ldr	r3, [pc, #152]	; (80158e4 <icmp_send_response+0xc8>)
 801584a:	f240 1269 	movw	r2, #361	; 0x169
 801584e:	4926      	ldr	r1, [pc, #152]	; (80158e8 <icmp_send_response+0xcc>)
 8015850:	4826      	ldr	r0, [pc, #152]	; (80158ec <icmp_send_response+0xd0>)
 8015852:	f001 fc7b 	bl	801714c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	685b      	ldr	r3, [r3, #4]
 801585a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801585c:	69fb      	ldr	r3, [r7, #28]
 801585e:	685b      	ldr	r3, [r3, #4]
 8015860:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015862:	697b      	ldr	r3, [r7, #20]
 8015864:	78fa      	ldrb	r2, [r7, #3]
 8015866:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015868:	697b      	ldr	r3, [r7, #20]
 801586a:	78ba      	ldrb	r2, [r7, #2]
 801586c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801586e:	697b      	ldr	r3, [r7, #20]
 8015870:	2200      	movs	r2, #0
 8015872:	711a      	strb	r2, [r3, #4]
 8015874:	2200      	movs	r2, #0
 8015876:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015878:	697b      	ldr	r3, [r7, #20]
 801587a:	2200      	movs	r2, #0
 801587c:	719a      	strb	r2, [r3, #6]
 801587e:	2200      	movs	r2, #0
 8015880:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015882:	69fb      	ldr	r3, [r7, #28]
 8015884:	685b      	ldr	r3, [r3, #4]
 8015886:	f103 0008 	add.w	r0, r3, #8
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	685b      	ldr	r3, [r3, #4]
 801588e:	221c      	movs	r2, #28
 8015890:	4619      	mov	r1, r3
 8015892:	f001 fc2e 	bl	80170f2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015896:	69bb      	ldr	r3, [r7, #24]
 8015898:	68db      	ldr	r3, [r3, #12]
 801589a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801589c:	f107 030c 	add.w	r3, r7, #12
 80158a0:	4618      	mov	r0, r3
 80158a2:	f000 f825 	bl	80158f0 <ip4_route>
 80158a6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80158a8:	693b      	ldr	r3, [r7, #16]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d011      	beq.n	80158d2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80158ae:	697b      	ldr	r3, [r7, #20]
 80158b0:	2200      	movs	r2, #0
 80158b2:	709a      	strb	r2, [r3, #2]
 80158b4:	2200      	movs	r2, #0
 80158b6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80158b8:	f107 020c 	add.w	r2, r7, #12
 80158bc:	693b      	ldr	r3, [r7, #16]
 80158be:	9302      	str	r3, [sp, #8]
 80158c0:	2301      	movs	r3, #1
 80158c2:	9301      	str	r3, [sp, #4]
 80158c4:	2300      	movs	r3, #0
 80158c6:	9300      	str	r3, [sp, #0]
 80158c8:	23ff      	movs	r3, #255	; 0xff
 80158ca:	2100      	movs	r1, #0
 80158cc:	69f8      	ldr	r0, [r7, #28]
 80158ce:	f000 f9c3 	bl	8015c58 <ip4_output_if>
  }
  pbuf_free(q);
 80158d2:	69f8      	ldr	r0, [r7, #28]
 80158d4:	f7f8 fa9a 	bl	800de0c <pbuf_free>
 80158d8:	e000      	b.n	80158dc <icmp_send_response+0xc0>
    return;
 80158da:	bf00      	nop
}
 80158dc:	3720      	adds	r7, #32
 80158de:	46bd      	mov	sp, r7
 80158e0:	bd80      	pop	{r7, pc}
 80158e2:	bf00      	nop
 80158e4:	0801b36c 	.word	0x0801b36c
 80158e8:	0801b438 	.word	0x0801b438
 80158ec:	0801b3dc 	.word	0x0801b3dc

080158f0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80158f0:	b480      	push	{r7}
 80158f2:	b085      	sub	sp, #20
 80158f4:	af00      	add	r7, sp, #0
 80158f6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80158f8:	4b33      	ldr	r3, [pc, #204]	; (80159c8 <ip4_route+0xd8>)
 80158fa:	681b      	ldr	r3, [r3, #0]
 80158fc:	60fb      	str	r3, [r7, #12]
 80158fe:	e036      	b.n	801596e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015900:	68fb      	ldr	r3, [r7, #12]
 8015902:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015906:	f003 0301 	and.w	r3, r3, #1
 801590a:	b2db      	uxtb	r3, r3
 801590c:	2b00      	cmp	r3, #0
 801590e:	d02b      	beq.n	8015968 <ip4_route+0x78>
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015916:	089b      	lsrs	r3, r3, #2
 8015918:	f003 0301 	and.w	r3, r3, #1
 801591c:	b2db      	uxtb	r3, r3
 801591e:	2b00      	cmp	r3, #0
 8015920:	d022      	beq.n	8015968 <ip4_route+0x78>
 8015922:	68fb      	ldr	r3, [r7, #12]
 8015924:	3304      	adds	r3, #4
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	2b00      	cmp	r3, #0
 801592a:	d01d      	beq.n	8015968 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	681a      	ldr	r2, [r3, #0]
 8015930:	68fb      	ldr	r3, [r7, #12]
 8015932:	3304      	adds	r3, #4
 8015934:	681b      	ldr	r3, [r3, #0]
 8015936:	405a      	eors	r2, r3
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	3308      	adds	r3, #8
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	4013      	ands	r3, r2
 8015940:	2b00      	cmp	r3, #0
 8015942:	d101      	bne.n	8015948 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015944:	68fb      	ldr	r3, [r7, #12]
 8015946:	e038      	b.n	80159ba <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015948:	68fb      	ldr	r3, [r7, #12]
 801594a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801594e:	f003 0302 	and.w	r3, r3, #2
 8015952:	2b00      	cmp	r3, #0
 8015954:	d108      	bne.n	8015968 <ip4_route+0x78>
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	681a      	ldr	r2, [r3, #0]
 801595a:	68fb      	ldr	r3, [r7, #12]
 801595c:	330c      	adds	r3, #12
 801595e:	681b      	ldr	r3, [r3, #0]
 8015960:	429a      	cmp	r2, r3
 8015962:	d101      	bne.n	8015968 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015964:	68fb      	ldr	r3, [r7, #12]
 8015966:	e028      	b.n	80159ba <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015968:	68fb      	ldr	r3, [r7, #12]
 801596a:	681b      	ldr	r3, [r3, #0]
 801596c:	60fb      	str	r3, [r7, #12]
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	2b00      	cmp	r3, #0
 8015972:	d1c5      	bne.n	8015900 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015974:	4b15      	ldr	r3, [pc, #84]	; (80159cc <ip4_route+0xdc>)
 8015976:	681b      	ldr	r3, [r3, #0]
 8015978:	2b00      	cmp	r3, #0
 801597a:	d01a      	beq.n	80159b2 <ip4_route+0xc2>
 801597c:	4b13      	ldr	r3, [pc, #76]	; (80159cc <ip4_route+0xdc>)
 801597e:	681b      	ldr	r3, [r3, #0]
 8015980:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015984:	f003 0301 	and.w	r3, r3, #1
 8015988:	2b00      	cmp	r3, #0
 801598a:	d012      	beq.n	80159b2 <ip4_route+0xc2>
 801598c:	4b0f      	ldr	r3, [pc, #60]	; (80159cc <ip4_route+0xdc>)
 801598e:	681b      	ldr	r3, [r3, #0]
 8015990:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015994:	f003 0304 	and.w	r3, r3, #4
 8015998:	2b00      	cmp	r3, #0
 801599a:	d00a      	beq.n	80159b2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801599c:	4b0b      	ldr	r3, [pc, #44]	; (80159cc <ip4_route+0xdc>)
 801599e:	681b      	ldr	r3, [r3, #0]
 80159a0:	3304      	adds	r3, #4
 80159a2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	d004      	beq.n	80159b2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	b2db      	uxtb	r3, r3
 80159ae:	2b7f      	cmp	r3, #127	; 0x7f
 80159b0:	d101      	bne.n	80159b6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80159b2:	2300      	movs	r3, #0
 80159b4:	e001      	b.n	80159ba <ip4_route+0xca>
  }

  return netif_default;
 80159b6:	4b05      	ldr	r3, [pc, #20]	; (80159cc <ip4_route+0xdc>)
 80159b8:	681b      	ldr	r3, [r3, #0]
}
 80159ba:	4618      	mov	r0, r3
 80159bc:	3714      	adds	r7, #20
 80159be:	46bd      	mov	sp, r7
 80159c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159c4:	4770      	bx	lr
 80159c6:	bf00      	nop
 80159c8:	2000d230 	.word	0x2000d230
 80159cc:	2000d234 	.word	0x2000d234

080159d0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80159d0:	b580      	push	{r7, lr}
 80159d2:	b082      	sub	sp, #8
 80159d4:	af00      	add	r7, sp, #0
 80159d6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80159de:	f003 0301 	and.w	r3, r3, #1
 80159e2:	b2db      	uxtb	r3, r3
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d016      	beq.n	8015a16 <ip4_input_accept+0x46>
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	3304      	adds	r3, #4
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d011      	beq.n	8015a16 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80159f2:	4b0b      	ldr	r3, [pc, #44]	; (8015a20 <ip4_input_accept+0x50>)
 80159f4:	695a      	ldr	r2, [r3, #20]
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	3304      	adds	r3, #4
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	429a      	cmp	r2, r3
 80159fe:	d008      	beq.n	8015a12 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015a00:	4b07      	ldr	r3, [pc, #28]	; (8015a20 <ip4_input_accept+0x50>)
 8015a02:	695b      	ldr	r3, [r3, #20]
 8015a04:	6879      	ldr	r1, [r7, #4]
 8015a06:	4618      	mov	r0, r3
 8015a08:	f000 f9fe 	bl	8015e08 <ip4_addr_isbroadcast_u32>
 8015a0c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d001      	beq.n	8015a16 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015a12:	2301      	movs	r3, #1
 8015a14:	e000      	b.n	8015a18 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015a16:	2300      	movs	r3, #0
}
 8015a18:	4618      	mov	r0, r3
 8015a1a:	3708      	adds	r7, #8
 8015a1c:	46bd      	mov	sp, r7
 8015a1e:	bd80      	pop	{r7, pc}
 8015a20:	200079f0 	.word	0x200079f0

08015a24 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015a24:	b580      	push	{r7, lr}
 8015a26:	b086      	sub	sp, #24
 8015a28:	af00      	add	r7, sp, #0
 8015a2a:	6078      	str	r0, [r7, #4]
 8015a2c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	685b      	ldr	r3, [r3, #4]
 8015a32:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8015a34:	697b      	ldr	r3, [r7, #20]
 8015a36:	781b      	ldrb	r3, [r3, #0]
 8015a38:	091b      	lsrs	r3, r3, #4
 8015a3a:	b2db      	uxtb	r3, r3
 8015a3c:	2b04      	cmp	r3, #4
 8015a3e:	d004      	beq.n	8015a4a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015a40:	6878      	ldr	r0, [r7, #4]
 8015a42:	f7f8 f9e3 	bl	800de0c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015a46:	2300      	movs	r3, #0
 8015a48:	e0fd      	b.n	8015c46 <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015a4a:	697b      	ldr	r3, [r7, #20]
 8015a4c:	781b      	ldrb	r3, [r3, #0]
 8015a4e:	f003 030f 	and.w	r3, r3, #15
 8015a52:	b2db      	uxtb	r3, r3
 8015a54:	009b      	lsls	r3, r3, #2
 8015a56:	b2db      	uxtb	r3, r3
 8015a58:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015a5a:	697b      	ldr	r3, [r7, #20]
 8015a5c:	885b      	ldrh	r3, [r3, #2]
 8015a5e:	b29b      	uxth	r3, r3
 8015a60:	4618      	mov	r0, r3
 8015a62:	f7f6 fdff 	bl	800c664 <lwip_htons>
 8015a66:	4603      	mov	r3, r0
 8015a68:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	891b      	ldrh	r3, [r3, #8]
 8015a6e:	89ba      	ldrh	r2, [r7, #12]
 8015a70:	429a      	cmp	r2, r3
 8015a72:	d204      	bcs.n	8015a7e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8015a74:	89bb      	ldrh	r3, [r7, #12]
 8015a76:	4619      	mov	r1, r3
 8015a78:	6878      	ldr	r0, [r7, #4]
 8015a7a:	f7f8 f80f 	bl	800da9c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	895b      	ldrh	r3, [r3, #10]
 8015a82:	89fa      	ldrh	r2, [r7, #14]
 8015a84:	429a      	cmp	r2, r3
 8015a86:	d807      	bhi.n	8015a98 <ip4_input+0x74>
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	891b      	ldrh	r3, [r3, #8]
 8015a8c:	89ba      	ldrh	r2, [r7, #12]
 8015a8e:	429a      	cmp	r2, r3
 8015a90:	d802      	bhi.n	8015a98 <ip4_input+0x74>
 8015a92:	89fb      	ldrh	r3, [r7, #14]
 8015a94:	2b13      	cmp	r3, #19
 8015a96:	d804      	bhi.n	8015aa2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015a98:	6878      	ldr	r0, [r7, #4]
 8015a9a:	f7f8 f9b7 	bl	800de0c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015a9e:	2300      	movs	r3, #0
 8015aa0:	e0d1      	b.n	8015c46 <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015aa2:	697b      	ldr	r3, [r7, #20]
 8015aa4:	691b      	ldr	r3, [r3, #16]
 8015aa6:	4a6a      	ldr	r2, [pc, #424]	; (8015c50 <ip4_input+0x22c>)
 8015aa8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015aaa:	697b      	ldr	r3, [r7, #20]
 8015aac:	68db      	ldr	r3, [r3, #12]
 8015aae:	4a68      	ldr	r2, [pc, #416]	; (8015c50 <ip4_input+0x22c>)
 8015ab0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015ab2:	4b67      	ldr	r3, [pc, #412]	; (8015c50 <ip4_input+0x22c>)
 8015ab4:	695b      	ldr	r3, [r3, #20]
 8015ab6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015aba:	2be0      	cmp	r3, #224	; 0xe0
 8015abc:	d112      	bne.n	8015ae4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8015abe:	683b      	ldr	r3, [r7, #0]
 8015ac0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015ac4:	f003 0301 	and.w	r3, r3, #1
 8015ac8:	b2db      	uxtb	r3, r3
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d007      	beq.n	8015ade <ip4_input+0xba>
 8015ace:	683b      	ldr	r3, [r7, #0]
 8015ad0:	3304      	adds	r3, #4
 8015ad2:	681b      	ldr	r3, [r3, #0]
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d002      	beq.n	8015ade <ip4_input+0xba>
      netif = inp;
 8015ad8:	683b      	ldr	r3, [r7, #0]
 8015ada:	613b      	str	r3, [r7, #16]
 8015adc:	e02a      	b.n	8015b34 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015ade:	2300      	movs	r3, #0
 8015ae0:	613b      	str	r3, [r7, #16]
 8015ae2:	e027      	b.n	8015b34 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015ae4:	6838      	ldr	r0, [r7, #0]
 8015ae6:	f7ff ff73 	bl	80159d0 <ip4_input_accept>
 8015aea:	4603      	mov	r3, r0
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d002      	beq.n	8015af6 <ip4_input+0xd2>
      netif = inp;
 8015af0:	683b      	ldr	r3, [r7, #0]
 8015af2:	613b      	str	r3, [r7, #16]
 8015af4:	e01e      	b.n	8015b34 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015af6:	2300      	movs	r3, #0
 8015af8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8015afa:	4b55      	ldr	r3, [pc, #340]	; (8015c50 <ip4_input+0x22c>)
 8015afc:	695b      	ldr	r3, [r3, #20]
 8015afe:	b2db      	uxtb	r3, r3
 8015b00:	2b7f      	cmp	r3, #127	; 0x7f
 8015b02:	d017      	beq.n	8015b34 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015b04:	4b53      	ldr	r3, [pc, #332]	; (8015c54 <ip4_input+0x230>)
 8015b06:	681b      	ldr	r3, [r3, #0]
 8015b08:	613b      	str	r3, [r7, #16]
 8015b0a:	e00e      	b.n	8015b2a <ip4_input+0x106>
          if (netif == inp) {
 8015b0c:	693a      	ldr	r2, [r7, #16]
 8015b0e:	683b      	ldr	r3, [r7, #0]
 8015b10:	429a      	cmp	r2, r3
 8015b12:	d006      	beq.n	8015b22 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015b14:	6938      	ldr	r0, [r7, #16]
 8015b16:	f7ff ff5b 	bl	80159d0 <ip4_input_accept>
 8015b1a:	4603      	mov	r3, r0
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d108      	bne.n	8015b32 <ip4_input+0x10e>
 8015b20:	e000      	b.n	8015b24 <ip4_input+0x100>
            continue;
 8015b22:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015b24:	693b      	ldr	r3, [r7, #16]
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	613b      	str	r3, [r7, #16]
 8015b2a:	693b      	ldr	r3, [r7, #16]
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	d1ed      	bne.n	8015b0c <ip4_input+0xe8>
 8015b30:	e000      	b.n	8015b34 <ip4_input+0x110>
            break;
 8015b32:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015b34:	4b46      	ldr	r3, [pc, #280]	; (8015c50 <ip4_input+0x22c>)
 8015b36:	691b      	ldr	r3, [r3, #16]
 8015b38:	6839      	ldr	r1, [r7, #0]
 8015b3a:	4618      	mov	r0, r3
 8015b3c:	f000 f964 	bl	8015e08 <ip4_addr_isbroadcast_u32>
 8015b40:	4603      	mov	r3, r0
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d105      	bne.n	8015b52 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015b46:	4b42      	ldr	r3, [pc, #264]	; (8015c50 <ip4_input+0x22c>)
 8015b48:	691b      	ldr	r3, [r3, #16]
 8015b4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015b4e:	2be0      	cmp	r3, #224	; 0xe0
 8015b50:	d104      	bne.n	8015b5c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015b52:	6878      	ldr	r0, [r7, #4]
 8015b54:	f7f8 f95a 	bl	800de0c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015b58:	2300      	movs	r3, #0
 8015b5a:	e074      	b.n	8015c46 <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015b5c:	693b      	ldr	r3, [r7, #16]
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d104      	bne.n	8015b6c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015b62:	6878      	ldr	r0, [r7, #4]
 8015b64:	f7f8 f952 	bl	800de0c <pbuf_free>
    return ERR_OK;
 8015b68:	2300      	movs	r3, #0
 8015b6a:	e06c      	b.n	8015c46 <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015b6c:	697b      	ldr	r3, [r7, #20]
 8015b6e:	88db      	ldrh	r3, [r3, #6]
 8015b70:	b29b      	uxth	r3, r3
 8015b72:	461a      	mov	r2, r3
 8015b74:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8015b78:	4013      	ands	r3, r2
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d00b      	beq.n	8015b96 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015b7e:	6878      	ldr	r0, [r7, #4]
 8015b80:	f000 fc88 	bl	8016494 <ip4_reass>
 8015b84:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d101      	bne.n	8015b90 <ip4_input+0x16c>
      return ERR_OK;
 8015b8c:	2300      	movs	r3, #0
 8015b8e:	e05a      	b.n	8015c46 <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	685b      	ldr	r3, [r3, #4]
 8015b94:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015b96:	4a2e      	ldr	r2, [pc, #184]	; (8015c50 <ip4_input+0x22c>)
 8015b98:	693b      	ldr	r3, [r7, #16]
 8015b9a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015b9c:	4a2c      	ldr	r2, [pc, #176]	; (8015c50 <ip4_input+0x22c>)
 8015b9e:	683b      	ldr	r3, [r7, #0]
 8015ba0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015ba2:	4a2b      	ldr	r2, [pc, #172]	; (8015c50 <ip4_input+0x22c>)
 8015ba4:	697b      	ldr	r3, [r7, #20]
 8015ba6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015ba8:	697b      	ldr	r3, [r7, #20]
 8015baa:	781b      	ldrb	r3, [r3, #0]
 8015bac:	f003 030f 	and.w	r3, r3, #15
 8015bb0:	b2db      	uxtb	r3, r3
 8015bb2:	009b      	lsls	r3, r3, #2
 8015bb4:	b2db      	uxtb	r3, r3
 8015bb6:	b29a      	uxth	r2, r3
 8015bb8:	4b25      	ldr	r3, [pc, #148]	; (8015c50 <ip4_input+0x22c>)
 8015bba:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015bbc:	89fb      	ldrh	r3, [r7, #14]
 8015bbe:	4619      	mov	r1, r3
 8015bc0:	6878      	ldr	r0, [r7, #4]
 8015bc2:	f7f8 f86b 	bl	800dc9c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015bc6:	697b      	ldr	r3, [r7, #20]
 8015bc8:	7a5b      	ldrb	r3, [r3, #9]
 8015bca:	2b01      	cmp	r3, #1
 8015bcc:	d006      	beq.n	8015bdc <ip4_input+0x1b8>
 8015bce:	2b06      	cmp	r3, #6
 8015bd0:	d109      	bne.n	8015be6 <ip4_input+0x1c2>
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015bd2:	6839      	ldr	r1, [r7, #0]
 8015bd4:	6878      	ldr	r0, [r7, #4]
 8015bd6:	f7fa fa11 	bl	800fffc <tcp_input>
        break;
 8015bda:	e021      	b.n	8015c20 <ip4_input+0x1fc>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015bdc:	6839      	ldr	r1, [r7, #0]
 8015bde:	6878      	ldr	r0, [r7, #4]
 8015be0:	f7ff fcf8 	bl	80155d4 <icmp_input>
        break;
 8015be4:	e01c      	b.n	8015c20 <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015be6:	4b1a      	ldr	r3, [pc, #104]	; (8015c50 <ip4_input+0x22c>)
 8015be8:	695b      	ldr	r3, [r3, #20]
 8015bea:	6939      	ldr	r1, [r7, #16]
 8015bec:	4618      	mov	r0, r3
 8015bee:	f000 f90b 	bl	8015e08 <ip4_addr_isbroadcast_u32>
 8015bf2:	4603      	mov	r3, r0
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d10f      	bne.n	8015c18 <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015bf8:	4b15      	ldr	r3, [pc, #84]	; (8015c50 <ip4_input+0x22c>)
 8015bfa:	695b      	ldr	r3, [r3, #20]
 8015bfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015c00:	2be0      	cmp	r3, #224	; 0xe0
 8015c02:	d009      	beq.n	8015c18 <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015c04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015c08:	4619      	mov	r1, r3
 8015c0a:	6878      	ldr	r0, [r7, #4]
 8015c0c:	f7f8 f8b9 	bl	800dd82 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015c10:	2102      	movs	r1, #2
 8015c12:	6878      	ldr	r0, [r7, #4]
 8015c14:	f7ff fde2 	bl	80157dc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015c18:	6878      	ldr	r0, [r7, #4]
 8015c1a:	f7f8 f8f7 	bl	800de0c <pbuf_free>
        break;
 8015c1e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015c20:	4b0b      	ldr	r3, [pc, #44]	; (8015c50 <ip4_input+0x22c>)
 8015c22:	2200      	movs	r2, #0
 8015c24:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015c26:	4b0a      	ldr	r3, [pc, #40]	; (8015c50 <ip4_input+0x22c>)
 8015c28:	2200      	movs	r2, #0
 8015c2a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015c2c:	4b08      	ldr	r3, [pc, #32]	; (8015c50 <ip4_input+0x22c>)
 8015c2e:	2200      	movs	r2, #0
 8015c30:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015c32:	4b07      	ldr	r3, [pc, #28]	; (8015c50 <ip4_input+0x22c>)
 8015c34:	2200      	movs	r2, #0
 8015c36:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015c38:	4b05      	ldr	r3, [pc, #20]	; (8015c50 <ip4_input+0x22c>)
 8015c3a:	2200      	movs	r2, #0
 8015c3c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015c3e:	4b04      	ldr	r3, [pc, #16]	; (8015c50 <ip4_input+0x22c>)
 8015c40:	2200      	movs	r2, #0
 8015c42:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015c44:	2300      	movs	r3, #0
}
 8015c46:	4618      	mov	r0, r3
 8015c48:	3718      	adds	r7, #24
 8015c4a:	46bd      	mov	sp, r7
 8015c4c:	bd80      	pop	{r7, pc}
 8015c4e:	bf00      	nop
 8015c50:	200079f0 	.word	0x200079f0
 8015c54:	2000d230 	.word	0x2000d230

08015c58 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015c58:	b580      	push	{r7, lr}
 8015c5a:	b08a      	sub	sp, #40	; 0x28
 8015c5c:	af04      	add	r7, sp, #16
 8015c5e:	60f8      	str	r0, [r7, #12]
 8015c60:	60b9      	str	r1, [r7, #8]
 8015c62:	607a      	str	r2, [r7, #4]
 8015c64:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015c66:	68bb      	ldr	r3, [r7, #8]
 8015c68:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d009      	beq.n	8015c84 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015c70:	68bb      	ldr	r3, [r7, #8]
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d003      	beq.n	8015c7e <ip4_output_if+0x26>
 8015c76:	68bb      	ldr	r3, [r7, #8]
 8015c78:	681b      	ldr	r3, [r3, #0]
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d102      	bne.n	8015c84 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c80:	3304      	adds	r3, #4
 8015c82:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015c84:	78fa      	ldrb	r2, [r7, #3]
 8015c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c88:	9302      	str	r3, [sp, #8]
 8015c8a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015c8e:	9301      	str	r3, [sp, #4]
 8015c90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015c94:	9300      	str	r3, [sp, #0]
 8015c96:	4613      	mov	r3, r2
 8015c98:	687a      	ldr	r2, [r7, #4]
 8015c9a:	6979      	ldr	r1, [r7, #20]
 8015c9c:	68f8      	ldr	r0, [r7, #12]
 8015c9e:	f000 f805 	bl	8015cac <ip4_output_if_src>
 8015ca2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015ca4:	4618      	mov	r0, r3
 8015ca6:	3718      	adds	r7, #24
 8015ca8:	46bd      	mov	sp, r7
 8015caa:	bd80      	pop	{r7, pc}

08015cac <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015cac:	b580      	push	{r7, lr}
 8015cae:	b088      	sub	sp, #32
 8015cb0:	af00      	add	r7, sp, #0
 8015cb2:	60f8      	str	r0, [r7, #12]
 8015cb4:	60b9      	str	r1, [r7, #8]
 8015cb6:	607a      	str	r2, [r7, #4]
 8015cb8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8015cba:	68fb      	ldr	r3, [r7, #12]
 8015cbc:	7b9b      	ldrb	r3, [r3, #14]
 8015cbe:	2b01      	cmp	r3, #1
 8015cc0:	d006      	beq.n	8015cd0 <ip4_output_if_src+0x24>
 8015cc2:	4b4b      	ldr	r3, [pc, #300]	; (8015df0 <ip4_output_if_src+0x144>)
 8015cc4:	f44f 7255 	mov.w	r2, #852	; 0x354
 8015cc8:	494a      	ldr	r1, [pc, #296]	; (8015df4 <ip4_output_if_src+0x148>)
 8015cca:	484b      	ldr	r0, [pc, #300]	; (8015df8 <ip4_output_if_src+0x14c>)
 8015ccc:	f001 fa3e 	bl	801714c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d060      	beq.n	8015d98 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015cd6:	2314      	movs	r3, #20
 8015cd8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8015cda:	2114      	movs	r1, #20
 8015cdc:	68f8      	ldr	r0, [r7, #12]
 8015cde:	f7f7 ffcd 	bl	800dc7c <pbuf_add_header>
 8015ce2:	4603      	mov	r3, r0
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d002      	beq.n	8015cee <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015ce8:	f06f 0301 	mvn.w	r3, #1
 8015cec:	e07c      	b.n	8015de8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015cee:	68fb      	ldr	r3, [r7, #12]
 8015cf0:	685b      	ldr	r3, [r3, #4]
 8015cf2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015cf4:	68fb      	ldr	r3, [r7, #12]
 8015cf6:	895b      	ldrh	r3, [r3, #10]
 8015cf8:	2b13      	cmp	r3, #19
 8015cfa:	d806      	bhi.n	8015d0a <ip4_output_if_src+0x5e>
 8015cfc:	4b3c      	ldr	r3, [pc, #240]	; (8015df0 <ip4_output_if_src+0x144>)
 8015cfe:	f240 3289 	movw	r2, #905	; 0x389
 8015d02:	493e      	ldr	r1, [pc, #248]	; (8015dfc <ip4_output_if_src+0x150>)
 8015d04:	483c      	ldr	r0, [pc, #240]	; (8015df8 <ip4_output_if_src+0x14c>)
 8015d06:	f001 fa21 	bl	801714c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015d0a:	69fb      	ldr	r3, [r7, #28]
 8015d0c:	78fa      	ldrb	r2, [r7, #3]
 8015d0e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015d10:	69fb      	ldr	r3, [r7, #28]
 8015d12:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015d16:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	681a      	ldr	r2, [r3, #0]
 8015d1c:	69fb      	ldr	r3, [r7, #28]
 8015d1e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015d20:	8b7b      	ldrh	r3, [r7, #26]
 8015d22:	089b      	lsrs	r3, r3, #2
 8015d24:	b29b      	uxth	r3, r3
 8015d26:	b2db      	uxtb	r3, r3
 8015d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015d2c:	b2da      	uxtb	r2, r3
 8015d2e:	69fb      	ldr	r3, [r7, #28]
 8015d30:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015d32:	69fb      	ldr	r3, [r7, #28]
 8015d34:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015d38:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015d3a:	68fb      	ldr	r3, [r7, #12]
 8015d3c:	891b      	ldrh	r3, [r3, #8]
 8015d3e:	4618      	mov	r0, r3
 8015d40:	f7f6 fc90 	bl	800c664 <lwip_htons>
 8015d44:	4603      	mov	r3, r0
 8015d46:	461a      	mov	r2, r3
 8015d48:	69fb      	ldr	r3, [r7, #28]
 8015d4a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015d4c:	69fb      	ldr	r3, [r7, #28]
 8015d4e:	2200      	movs	r2, #0
 8015d50:	719a      	strb	r2, [r3, #6]
 8015d52:	2200      	movs	r2, #0
 8015d54:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015d56:	4b2a      	ldr	r3, [pc, #168]	; (8015e00 <ip4_output_if_src+0x154>)
 8015d58:	881b      	ldrh	r3, [r3, #0]
 8015d5a:	4618      	mov	r0, r3
 8015d5c:	f7f6 fc82 	bl	800c664 <lwip_htons>
 8015d60:	4603      	mov	r3, r0
 8015d62:	461a      	mov	r2, r3
 8015d64:	69fb      	ldr	r3, [r7, #28]
 8015d66:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015d68:	4b25      	ldr	r3, [pc, #148]	; (8015e00 <ip4_output_if_src+0x154>)
 8015d6a:	881b      	ldrh	r3, [r3, #0]
 8015d6c:	3301      	adds	r3, #1
 8015d6e:	b29a      	uxth	r2, r3
 8015d70:	4b23      	ldr	r3, [pc, #140]	; (8015e00 <ip4_output_if_src+0x154>)
 8015d72:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015d74:	68bb      	ldr	r3, [r7, #8]
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d104      	bne.n	8015d84 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015d7a:	4b22      	ldr	r3, [pc, #136]	; (8015e04 <ip4_output_if_src+0x158>)
 8015d7c:	681a      	ldr	r2, [r3, #0]
 8015d7e:	69fb      	ldr	r3, [r7, #28]
 8015d80:	60da      	str	r2, [r3, #12]
 8015d82:	e003      	b.n	8015d8c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015d84:	68bb      	ldr	r3, [r7, #8]
 8015d86:	681a      	ldr	r2, [r3, #0]
 8015d88:	69fb      	ldr	r3, [r7, #28]
 8015d8a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015d8c:	69fb      	ldr	r3, [r7, #28]
 8015d8e:	2200      	movs	r2, #0
 8015d90:	729a      	strb	r2, [r3, #10]
 8015d92:	2200      	movs	r2, #0
 8015d94:	72da      	strb	r2, [r3, #11]
 8015d96:	e00f      	b.n	8015db8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015d98:	68fb      	ldr	r3, [r7, #12]
 8015d9a:	895b      	ldrh	r3, [r3, #10]
 8015d9c:	2b13      	cmp	r3, #19
 8015d9e:	d802      	bhi.n	8015da6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015da0:	f06f 0301 	mvn.w	r3, #1
 8015da4:	e020      	b.n	8015de8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015da6:	68fb      	ldr	r3, [r7, #12]
 8015da8:	685b      	ldr	r3, [r3, #4]
 8015daa:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015dac:	69fb      	ldr	r3, [r7, #28]
 8015dae:	691b      	ldr	r3, [r3, #16]
 8015db0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015db2:	f107 0314 	add.w	r3, r7, #20
 8015db6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	d00c      	beq.n	8015dda <ip4_output_if_src+0x12e>
 8015dc0:	68fb      	ldr	r3, [r7, #12]
 8015dc2:	891a      	ldrh	r2, [r3, #8]
 8015dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dc6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015dc8:	429a      	cmp	r2, r3
 8015dca:	d906      	bls.n	8015dda <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8015dcc:	687a      	ldr	r2, [r7, #4]
 8015dce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015dd0:	68f8      	ldr	r0, [r7, #12]
 8015dd2:	f000 fd4b 	bl	801686c <ip4_frag>
 8015dd6:	4603      	mov	r3, r0
 8015dd8:	e006      	b.n	8015de8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ddc:	695b      	ldr	r3, [r3, #20]
 8015dde:	687a      	ldr	r2, [r7, #4]
 8015de0:	68f9      	ldr	r1, [r7, #12]
 8015de2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015de4:	4798      	blx	r3
 8015de6:	4603      	mov	r3, r0
}
 8015de8:	4618      	mov	r0, r3
 8015dea:	3720      	adds	r7, #32
 8015dec:	46bd      	mov	sp, r7
 8015dee:	bd80      	pop	{r7, pc}
 8015df0:	0801b464 	.word	0x0801b464
 8015df4:	0801b498 	.word	0x0801b498
 8015df8:	0801b4a4 	.word	0x0801b4a4
 8015dfc:	0801b4cc 	.word	0x0801b4cc
 8015e00:	2000477e 	.word	0x2000477e
 8015e04:	0801b918 	.word	0x0801b918

08015e08 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015e08:	b480      	push	{r7}
 8015e0a:	b085      	sub	sp, #20
 8015e0c:	af00      	add	r7, sp, #0
 8015e0e:	6078      	str	r0, [r7, #4]
 8015e10:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e1c:	d002      	beq.n	8015e24 <ip4_addr_isbroadcast_u32+0x1c>
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d101      	bne.n	8015e28 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015e24:	2301      	movs	r3, #1
 8015e26:	e02a      	b.n	8015e7e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015e28:	683b      	ldr	r3, [r7, #0]
 8015e2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015e2e:	f003 0302 	and.w	r3, r3, #2
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d101      	bne.n	8015e3a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015e36:	2300      	movs	r3, #0
 8015e38:	e021      	b.n	8015e7e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015e3a:	683b      	ldr	r3, [r7, #0]
 8015e3c:	3304      	adds	r3, #4
 8015e3e:	681b      	ldr	r3, [r3, #0]
 8015e40:	687a      	ldr	r2, [r7, #4]
 8015e42:	429a      	cmp	r2, r3
 8015e44:	d101      	bne.n	8015e4a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015e46:	2300      	movs	r3, #0
 8015e48:	e019      	b.n	8015e7e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015e4a:	68fa      	ldr	r2, [r7, #12]
 8015e4c:	683b      	ldr	r3, [r7, #0]
 8015e4e:	3304      	adds	r3, #4
 8015e50:	681b      	ldr	r3, [r3, #0]
 8015e52:	405a      	eors	r2, r3
 8015e54:	683b      	ldr	r3, [r7, #0]
 8015e56:	3308      	adds	r3, #8
 8015e58:	681b      	ldr	r3, [r3, #0]
 8015e5a:	4013      	ands	r3, r2
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d10d      	bne.n	8015e7c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015e60:	683b      	ldr	r3, [r7, #0]
 8015e62:	3308      	adds	r3, #8
 8015e64:	681b      	ldr	r3, [r3, #0]
 8015e66:	43da      	mvns	r2, r3
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015e6c:	683b      	ldr	r3, [r7, #0]
 8015e6e:	3308      	adds	r3, #8
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015e74:	429a      	cmp	r2, r3
 8015e76:	d101      	bne.n	8015e7c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015e78:	2301      	movs	r3, #1
 8015e7a:	e000      	b.n	8015e7e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015e7c:	2300      	movs	r3, #0
  }
}
 8015e7e:	4618      	mov	r0, r3
 8015e80:	3714      	adds	r7, #20
 8015e82:	46bd      	mov	sp, r7
 8015e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e88:	4770      	bx	lr
	...

08015e8c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015e8c:	b580      	push	{r7, lr}
 8015e8e:	b084      	sub	sp, #16
 8015e90:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015e92:	2300      	movs	r3, #0
 8015e94:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015e96:	4b12      	ldr	r3, [pc, #72]	; (8015ee0 <ip_reass_tmr+0x54>)
 8015e98:	681b      	ldr	r3, [r3, #0]
 8015e9a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015e9c:	e018      	b.n	8015ed0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	7fdb      	ldrb	r3, [r3, #31]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d00b      	beq.n	8015ebe <ip_reass_tmr+0x32>
      r->timer--;
 8015ea6:	68fb      	ldr	r3, [r7, #12]
 8015ea8:	7fdb      	ldrb	r3, [r3, #31]
 8015eaa:	3b01      	subs	r3, #1
 8015eac:	b2da      	uxtb	r2, r3
 8015eae:	68fb      	ldr	r3, [r7, #12]
 8015eb0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015eb2:	68fb      	ldr	r3, [r7, #12]
 8015eb4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015eb6:	68fb      	ldr	r3, [r7, #12]
 8015eb8:	681b      	ldr	r3, [r3, #0]
 8015eba:	60fb      	str	r3, [r7, #12]
 8015ebc:	e008      	b.n	8015ed0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015ebe:	68fb      	ldr	r3, [r7, #12]
 8015ec0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015ec2:	68fb      	ldr	r3, [r7, #12]
 8015ec4:	681b      	ldr	r3, [r3, #0]
 8015ec6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015ec8:	68b9      	ldr	r1, [r7, #8]
 8015eca:	6878      	ldr	r0, [r7, #4]
 8015ecc:	f000 f80a 	bl	8015ee4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015ed0:	68fb      	ldr	r3, [r7, #12]
 8015ed2:	2b00      	cmp	r3, #0
 8015ed4:	d1e3      	bne.n	8015e9e <ip_reass_tmr+0x12>
    }
  }
}
 8015ed6:	bf00      	nop
 8015ed8:	3710      	adds	r7, #16
 8015eda:	46bd      	mov	sp, r7
 8015edc:	bd80      	pop	{r7, pc}
 8015ede:	bf00      	nop
 8015ee0:	20004780 	.word	0x20004780

08015ee4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015ee4:	b580      	push	{r7, lr}
 8015ee6:	b088      	sub	sp, #32
 8015ee8:	af00      	add	r7, sp, #0
 8015eea:	6078      	str	r0, [r7, #4]
 8015eec:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015eee:	2300      	movs	r3, #0
 8015ef0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015ef2:	683a      	ldr	r2, [r7, #0]
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	429a      	cmp	r2, r3
 8015ef8:	d105      	bne.n	8015f06 <ip_reass_free_complete_datagram+0x22>
 8015efa:	4b45      	ldr	r3, [pc, #276]	; (8016010 <ip_reass_free_complete_datagram+0x12c>)
 8015efc:	22ab      	movs	r2, #171	; 0xab
 8015efe:	4945      	ldr	r1, [pc, #276]	; (8016014 <ip_reass_free_complete_datagram+0x130>)
 8015f00:	4845      	ldr	r0, [pc, #276]	; (8016018 <ip_reass_free_complete_datagram+0x134>)
 8015f02:	f001 f923 	bl	801714c <iprintf>
  if (prev != NULL) {
 8015f06:	683b      	ldr	r3, [r7, #0]
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d00a      	beq.n	8015f22 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015f0c:	683b      	ldr	r3, [r7, #0]
 8015f0e:	681b      	ldr	r3, [r3, #0]
 8015f10:	687a      	ldr	r2, [r7, #4]
 8015f12:	429a      	cmp	r2, r3
 8015f14:	d005      	beq.n	8015f22 <ip_reass_free_complete_datagram+0x3e>
 8015f16:	4b3e      	ldr	r3, [pc, #248]	; (8016010 <ip_reass_free_complete_datagram+0x12c>)
 8015f18:	22ad      	movs	r2, #173	; 0xad
 8015f1a:	4940      	ldr	r1, [pc, #256]	; (801601c <ip_reass_free_complete_datagram+0x138>)
 8015f1c:	483e      	ldr	r0, [pc, #248]	; (8016018 <ip_reass_free_complete_datagram+0x134>)
 8015f1e:	f001 f915 	bl	801714c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	685b      	ldr	r3, [r3, #4]
 8015f26:	685b      	ldr	r3, [r3, #4]
 8015f28:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015f2a:	697b      	ldr	r3, [r7, #20]
 8015f2c:	889b      	ldrh	r3, [r3, #4]
 8015f2e:	b29b      	uxth	r3, r3
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d12a      	bne.n	8015f8a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	685b      	ldr	r3, [r3, #4]
 8015f38:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015f3a:	697b      	ldr	r3, [r7, #20]
 8015f3c:	681a      	ldr	r2, [r3, #0]
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015f42:	69bb      	ldr	r3, [r7, #24]
 8015f44:	6858      	ldr	r0, [r3, #4]
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	3308      	adds	r3, #8
 8015f4a:	2214      	movs	r2, #20
 8015f4c:	4619      	mov	r1, r3
 8015f4e:	f001 f8d0 	bl	80170f2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015f52:	2101      	movs	r1, #1
 8015f54:	69b8      	ldr	r0, [r7, #24]
 8015f56:	f7ff fc51 	bl	80157fc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015f5a:	69b8      	ldr	r0, [r7, #24]
 8015f5c:	f7f7 ffe4 	bl	800df28 <pbuf_clen>
 8015f60:	4603      	mov	r3, r0
 8015f62:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015f64:	8bfa      	ldrh	r2, [r7, #30]
 8015f66:	8a7b      	ldrh	r3, [r7, #18]
 8015f68:	4413      	add	r3, r2
 8015f6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015f6e:	db05      	blt.n	8015f7c <ip_reass_free_complete_datagram+0x98>
 8015f70:	4b27      	ldr	r3, [pc, #156]	; (8016010 <ip_reass_free_complete_datagram+0x12c>)
 8015f72:	22bc      	movs	r2, #188	; 0xbc
 8015f74:	492a      	ldr	r1, [pc, #168]	; (8016020 <ip_reass_free_complete_datagram+0x13c>)
 8015f76:	4828      	ldr	r0, [pc, #160]	; (8016018 <ip_reass_free_complete_datagram+0x134>)
 8015f78:	f001 f8e8 	bl	801714c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015f7c:	8bfa      	ldrh	r2, [r7, #30]
 8015f7e:	8a7b      	ldrh	r3, [r7, #18]
 8015f80:	4413      	add	r3, r2
 8015f82:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015f84:	69b8      	ldr	r0, [r7, #24]
 8015f86:	f7f7 ff41 	bl	800de0c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	685b      	ldr	r3, [r3, #4]
 8015f8e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015f90:	e01f      	b.n	8015fd2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015f92:	69bb      	ldr	r3, [r7, #24]
 8015f94:	685b      	ldr	r3, [r3, #4]
 8015f96:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015f98:	69bb      	ldr	r3, [r7, #24]
 8015f9a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015f9c:	697b      	ldr	r3, [r7, #20]
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015fa2:	68f8      	ldr	r0, [r7, #12]
 8015fa4:	f7f7 ffc0 	bl	800df28 <pbuf_clen>
 8015fa8:	4603      	mov	r3, r0
 8015faa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015fac:	8bfa      	ldrh	r2, [r7, #30]
 8015fae:	8a7b      	ldrh	r3, [r7, #18]
 8015fb0:	4413      	add	r3, r2
 8015fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015fb6:	db05      	blt.n	8015fc4 <ip_reass_free_complete_datagram+0xe0>
 8015fb8:	4b15      	ldr	r3, [pc, #84]	; (8016010 <ip_reass_free_complete_datagram+0x12c>)
 8015fba:	22cc      	movs	r2, #204	; 0xcc
 8015fbc:	4918      	ldr	r1, [pc, #96]	; (8016020 <ip_reass_free_complete_datagram+0x13c>)
 8015fbe:	4816      	ldr	r0, [pc, #88]	; (8016018 <ip_reass_free_complete_datagram+0x134>)
 8015fc0:	f001 f8c4 	bl	801714c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015fc4:	8bfa      	ldrh	r2, [r7, #30]
 8015fc6:	8a7b      	ldrh	r3, [r7, #18]
 8015fc8:	4413      	add	r3, r2
 8015fca:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015fcc:	68f8      	ldr	r0, [r7, #12]
 8015fce:	f7f7 ff1d 	bl	800de0c <pbuf_free>
  while (p != NULL) {
 8015fd2:	69bb      	ldr	r3, [r7, #24]
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d1dc      	bne.n	8015f92 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015fd8:	6839      	ldr	r1, [r7, #0]
 8015fda:	6878      	ldr	r0, [r7, #4]
 8015fdc:	f000 f8c2 	bl	8016164 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015fe0:	4b10      	ldr	r3, [pc, #64]	; (8016024 <ip_reass_free_complete_datagram+0x140>)
 8015fe2:	881b      	ldrh	r3, [r3, #0]
 8015fe4:	8bfa      	ldrh	r2, [r7, #30]
 8015fe6:	429a      	cmp	r2, r3
 8015fe8:	d905      	bls.n	8015ff6 <ip_reass_free_complete_datagram+0x112>
 8015fea:	4b09      	ldr	r3, [pc, #36]	; (8016010 <ip_reass_free_complete_datagram+0x12c>)
 8015fec:	22d2      	movs	r2, #210	; 0xd2
 8015fee:	490e      	ldr	r1, [pc, #56]	; (8016028 <ip_reass_free_complete_datagram+0x144>)
 8015ff0:	4809      	ldr	r0, [pc, #36]	; (8016018 <ip_reass_free_complete_datagram+0x134>)
 8015ff2:	f001 f8ab 	bl	801714c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015ff6:	4b0b      	ldr	r3, [pc, #44]	; (8016024 <ip_reass_free_complete_datagram+0x140>)
 8015ff8:	881a      	ldrh	r2, [r3, #0]
 8015ffa:	8bfb      	ldrh	r3, [r7, #30]
 8015ffc:	1ad3      	subs	r3, r2, r3
 8015ffe:	b29a      	uxth	r2, r3
 8016000:	4b08      	ldr	r3, [pc, #32]	; (8016024 <ip_reass_free_complete_datagram+0x140>)
 8016002:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8016004:	8bfb      	ldrh	r3, [r7, #30]
}
 8016006:	4618      	mov	r0, r3
 8016008:	3720      	adds	r7, #32
 801600a:	46bd      	mov	sp, r7
 801600c:	bd80      	pop	{r7, pc}
 801600e:	bf00      	nop
 8016010:	0801b4fc 	.word	0x0801b4fc
 8016014:	0801b538 	.word	0x0801b538
 8016018:	0801b544 	.word	0x0801b544
 801601c:	0801b56c 	.word	0x0801b56c
 8016020:	0801b580 	.word	0x0801b580
 8016024:	20004784 	.word	0x20004784
 8016028:	0801b5a0 	.word	0x0801b5a0

0801602c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801602c:	b580      	push	{r7, lr}
 801602e:	b08a      	sub	sp, #40	; 0x28
 8016030:	af00      	add	r7, sp, #0
 8016032:	6078      	str	r0, [r7, #4]
 8016034:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8016036:	2300      	movs	r3, #0
 8016038:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801603a:	2300      	movs	r3, #0
 801603c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801603e:	2300      	movs	r3, #0
 8016040:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8016042:	2300      	movs	r3, #0
 8016044:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8016046:	2300      	movs	r3, #0
 8016048:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801604a:	4b28      	ldr	r3, [pc, #160]	; (80160ec <ip_reass_remove_oldest_datagram+0xc0>)
 801604c:	681b      	ldr	r3, [r3, #0]
 801604e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016050:	e030      	b.n	80160b4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8016052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016054:	695a      	ldr	r2, [r3, #20]
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	68db      	ldr	r3, [r3, #12]
 801605a:	429a      	cmp	r2, r3
 801605c:	d10c      	bne.n	8016078 <ip_reass_remove_oldest_datagram+0x4c>
 801605e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016060:	699a      	ldr	r2, [r3, #24]
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	691b      	ldr	r3, [r3, #16]
 8016066:	429a      	cmp	r2, r3
 8016068:	d106      	bne.n	8016078 <ip_reass_remove_oldest_datagram+0x4c>
 801606a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801606c:	899a      	ldrh	r2, [r3, #12]
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	889b      	ldrh	r3, [r3, #4]
 8016072:	b29b      	uxth	r3, r3
 8016074:	429a      	cmp	r2, r3
 8016076:	d014      	beq.n	80160a2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016078:	693b      	ldr	r3, [r7, #16]
 801607a:	3301      	adds	r3, #1
 801607c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801607e:	6a3b      	ldr	r3, [r7, #32]
 8016080:	2b00      	cmp	r3, #0
 8016082:	d104      	bne.n	801608e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016086:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016088:	69fb      	ldr	r3, [r7, #28]
 801608a:	61bb      	str	r3, [r7, #24]
 801608c:	e009      	b.n	80160a2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801608e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016090:	7fda      	ldrb	r2, [r3, #31]
 8016092:	6a3b      	ldr	r3, [r7, #32]
 8016094:	7fdb      	ldrb	r3, [r3, #31]
 8016096:	429a      	cmp	r2, r3
 8016098:	d803      	bhi.n	80160a2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801609c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801609e:	69fb      	ldr	r3, [r7, #28]
 80160a0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80160a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160a4:	681b      	ldr	r3, [r3, #0]
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d001      	beq.n	80160ae <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80160aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160ac:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80160ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160b0:	681b      	ldr	r3, [r3, #0]
 80160b2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80160b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d1cb      	bne.n	8016052 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80160ba:	6a3b      	ldr	r3, [r7, #32]
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d008      	beq.n	80160d2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80160c0:	69b9      	ldr	r1, [r7, #24]
 80160c2:	6a38      	ldr	r0, [r7, #32]
 80160c4:	f7ff ff0e 	bl	8015ee4 <ip_reass_free_complete_datagram>
 80160c8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80160ca:	697a      	ldr	r2, [r7, #20]
 80160cc:	68fb      	ldr	r3, [r7, #12]
 80160ce:	4413      	add	r3, r2
 80160d0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80160d2:	697a      	ldr	r2, [r7, #20]
 80160d4:	683b      	ldr	r3, [r7, #0]
 80160d6:	429a      	cmp	r2, r3
 80160d8:	da02      	bge.n	80160e0 <ip_reass_remove_oldest_datagram+0xb4>
 80160da:	693b      	ldr	r3, [r7, #16]
 80160dc:	2b01      	cmp	r3, #1
 80160de:	dcac      	bgt.n	801603a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80160e0:	697b      	ldr	r3, [r7, #20]
}
 80160e2:	4618      	mov	r0, r3
 80160e4:	3728      	adds	r7, #40	; 0x28
 80160e6:	46bd      	mov	sp, r7
 80160e8:	bd80      	pop	{r7, pc}
 80160ea:	bf00      	nop
 80160ec:	20004780 	.word	0x20004780

080160f0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80160f0:	b580      	push	{r7, lr}
 80160f2:	b084      	sub	sp, #16
 80160f4:	af00      	add	r7, sp, #0
 80160f6:	6078      	str	r0, [r7, #4]
 80160f8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80160fa:	2003      	movs	r0, #3
 80160fc:	f7f6 ff66 	bl	800cfcc <memp_malloc>
 8016100:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016102:	68fb      	ldr	r3, [r7, #12]
 8016104:	2b00      	cmp	r3, #0
 8016106:	d110      	bne.n	801612a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016108:	6839      	ldr	r1, [r7, #0]
 801610a:	6878      	ldr	r0, [r7, #4]
 801610c:	f7ff ff8e 	bl	801602c <ip_reass_remove_oldest_datagram>
 8016110:	4602      	mov	r2, r0
 8016112:	683b      	ldr	r3, [r7, #0]
 8016114:	4293      	cmp	r3, r2
 8016116:	dc03      	bgt.n	8016120 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016118:	2003      	movs	r0, #3
 801611a:	f7f6 ff57 	bl	800cfcc <memp_malloc>
 801611e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016120:	68fb      	ldr	r3, [r7, #12]
 8016122:	2b00      	cmp	r3, #0
 8016124:	d101      	bne.n	801612a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8016126:	2300      	movs	r3, #0
 8016128:	e016      	b.n	8016158 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801612a:	2220      	movs	r2, #32
 801612c:	2100      	movs	r1, #0
 801612e:	68f8      	ldr	r0, [r7, #12]
 8016130:	f001 f803 	bl	801713a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	220f      	movs	r2, #15
 8016138:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801613a:	4b09      	ldr	r3, [pc, #36]	; (8016160 <ip_reass_enqueue_new_datagram+0x70>)
 801613c:	681a      	ldr	r2, [r3, #0]
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8016142:	4a07      	ldr	r2, [pc, #28]	; (8016160 <ip_reass_enqueue_new_datagram+0x70>)
 8016144:	68fb      	ldr	r3, [r7, #12]
 8016146:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	3308      	adds	r3, #8
 801614c:	2214      	movs	r2, #20
 801614e:	6879      	ldr	r1, [r7, #4]
 8016150:	4618      	mov	r0, r3
 8016152:	f000 ffce 	bl	80170f2 <memcpy>
  return ipr;
 8016156:	68fb      	ldr	r3, [r7, #12]
}
 8016158:	4618      	mov	r0, r3
 801615a:	3710      	adds	r7, #16
 801615c:	46bd      	mov	sp, r7
 801615e:	bd80      	pop	{r7, pc}
 8016160:	20004780 	.word	0x20004780

08016164 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016164:	b580      	push	{r7, lr}
 8016166:	b082      	sub	sp, #8
 8016168:	af00      	add	r7, sp, #0
 801616a:	6078      	str	r0, [r7, #4]
 801616c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801616e:	4b10      	ldr	r3, [pc, #64]	; (80161b0 <ip_reass_dequeue_datagram+0x4c>)
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	687a      	ldr	r2, [r7, #4]
 8016174:	429a      	cmp	r2, r3
 8016176:	d104      	bne.n	8016182 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	681b      	ldr	r3, [r3, #0]
 801617c:	4a0c      	ldr	r2, [pc, #48]	; (80161b0 <ip_reass_dequeue_datagram+0x4c>)
 801617e:	6013      	str	r3, [r2, #0]
 8016180:	e00d      	b.n	801619e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8016182:	683b      	ldr	r3, [r7, #0]
 8016184:	2b00      	cmp	r3, #0
 8016186:	d106      	bne.n	8016196 <ip_reass_dequeue_datagram+0x32>
 8016188:	4b0a      	ldr	r3, [pc, #40]	; (80161b4 <ip_reass_dequeue_datagram+0x50>)
 801618a:	f240 1245 	movw	r2, #325	; 0x145
 801618e:	490a      	ldr	r1, [pc, #40]	; (80161b8 <ip_reass_dequeue_datagram+0x54>)
 8016190:	480a      	ldr	r0, [pc, #40]	; (80161bc <ip_reass_dequeue_datagram+0x58>)
 8016192:	f000 ffdb 	bl	801714c <iprintf>
    prev->next = ipr->next;
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	681a      	ldr	r2, [r3, #0]
 801619a:	683b      	ldr	r3, [r7, #0]
 801619c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801619e:	6879      	ldr	r1, [r7, #4]
 80161a0:	2003      	movs	r0, #3
 80161a2:	f7f6 ff65 	bl	800d070 <memp_free>
}
 80161a6:	bf00      	nop
 80161a8:	3708      	adds	r7, #8
 80161aa:	46bd      	mov	sp, r7
 80161ac:	bd80      	pop	{r7, pc}
 80161ae:	bf00      	nop
 80161b0:	20004780 	.word	0x20004780
 80161b4:	0801b4fc 	.word	0x0801b4fc
 80161b8:	0801b5c4 	.word	0x0801b5c4
 80161bc:	0801b544 	.word	0x0801b544

080161c0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80161c0:	b580      	push	{r7, lr}
 80161c2:	b08c      	sub	sp, #48	; 0x30
 80161c4:	af00      	add	r7, sp, #0
 80161c6:	60f8      	str	r0, [r7, #12]
 80161c8:	60b9      	str	r1, [r7, #8]
 80161ca:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80161cc:	2300      	movs	r3, #0
 80161ce:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80161d0:	2301      	movs	r3, #1
 80161d2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80161d4:	68bb      	ldr	r3, [r7, #8]
 80161d6:	685b      	ldr	r3, [r3, #4]
 80161d8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80161da:	69fb      	ldr	r3, [r7, #28]
 80161dc:	885b      	ldrh	r3, [r3, #2]
 80161de:	b29b      	uxth	r3, r3
 80161e0:	4618      	mov	r0, r3
 80161e2:	f7f6 fa3f 	bl	800c664 <lwip_htons>
 80161e6:	4603      	mov	r3, r0
 80161e8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80161ea:	69fb      	ldr	r3, [r7, #28]
 80161ec:	781b      	ldrb	r3, [r3, #0]
 80161ee:	f003 030f 	and.w	r3, r3, #15
 80161f2:	b2db      	uxtb	r3, r3
 80161f4:	009b      	lsls	r3, r3, #2
 80161f6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80161f8:	7e7b      	ldrb	r3, [r7, #25]
 80161fa:	b29b      	uxth	r3, r3
 80161fc:	8b7a      	ldrh	r2, [r7, #26]
 80161fe:	429a      	cmp	r2, r3
 8016200:	d202      	bcs.n	8016208 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016202:	f04f 33ff 	mov.w	r3, #4294967295
 8016206:	e135      	b.n	8016474 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8016208:	7e7b      	ldrb	r3, [r7, #25]
 801620a:	b29b      	uxth	r3, r3
 801620c:	8b7a      	ldrh	r2, [r7, #26]
 801620e:	1ad3      	subs	r3, r2, r3
 8016210:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8016212:	69fb      	ldr	r3, [r7, #28]
 8016214:	88db      	ldrh	r3, [r3, #6]
 8016216:	b29b      	uxth	r3, r3
 8016218:	4618      	mov	r0, r3
 801621a:	f7f6 fa23 	bl	800c664 <lwip_htons>
 801621e:	4603      	mov	r3, r0
 8016220:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016224:	b29b      	uxth	r3, r3
 8016226:	00db      	lsls	r3, r3, #3
 8016228:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801622a:	68bb      	ldr	r3, [r7, #8]
 801622c:	685b      	ldr	r3, [r3, #4]
 801622e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8016230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016232:	2200      	movs	r2, #0
 8016234:	701a      	strb	r2, [r3, #0]
 8016236:	2200      	movs	r2, #0
 8016238:	705a      	strb	r2, [r3, #1]
 801623a:	2200      	movs	r2, #0
 801623c:	709a      	strb	r2, [r3, #2]
 801623e:	2200      	movs	r2, #0
 8016240:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8016242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016244:	8afa      	ldrh	r2, [r7, #22]
 8016246:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8016248:	8afa      	ldrh	r2, [r7, #22]
 801624a:	8b7b      	ldrh	r3, [r7, #26]
 801624c:	4413      	add	r3, r2
 801624e:	b29a      	uxth	r2, r3
 8016250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016252:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8016254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016256:	88db      	ldrh	r3, [r3, #6]
 8016258:	b29b      	uxth	r3, r3
 801625a:	8afa      	ldrh	r2, [r7, #22]
 801625c:	429a      	cmp	r2, r3
 801625e:	d902      	bls.n	8016266 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016260:	f04f 33ff 	mov.w	r3, #4294967295
 8016264:	e106      	b.n	8016474 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016266:	68fb      	ldr	r3, [r7, #12]
 8016268:	685b      	ldr	r3, [r3, #4]
 801626a:	627b      	str	r3, [r7, #36]	; 0x24
 801626c:	e068      	b.n	8016340 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801626e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016270:	685b      	ldr	r3, [r3, #4]
 8016272:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016276:	889b      	ldrh	r3, [r3, #4]
 8016278:	b29a      	uxth	r2, r3
 801627a:	693b      	ldr	r3, [r7, #16]
 801627c:	889b      	ldrh	r3, [r3, #4]
 801627e:	b29b      	uxth	r3, r3
 8016280:	429a      	cmp	r2, r3
 8016282:	d235      	bcs.n	80162f0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016288:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801628a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801628c:	2b00      	cmp	r3, #0
 801628e:	d020      	beq.n	80162d2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016292:	889b      	ldrh	r3, [r3, #4]
 8016294:	b29a      	uxth	r2, r3
 8016296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016298:	88db      	ldrh	r3, [r3, #6]
 801629a:	b29b      	uxth	r3, r3
 801629c:	429a      	cmp	r2, r3
 801629e:	d307      	bcc.n	80162b0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80162a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162a2:	88db      	ldrh	r3, [r3, #6]
 80162a4:	b29a      	uxth	r2, r3
 80162a6:	693b      	ldr	r3, [r7, #16]
 80162a8:	889b      	ldrh	r3, [r3, #4]
 80162aa:	b29b      	uxth	r3, r3
 80162ac:	429a      	cmp	r2, r3
 80162ae:	d902      	bls.n	80162b6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80162b0:	f04f 33ff 	mov.w	r3, #4294967295
 80162b4:	e0de      	b.n	8016474 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80162b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162b8:	68ba      	ldr	r2, [r7, #8]
 80162ba:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80162bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162be:	88db      	ldrh	r3, [r3, #6]
 80162c0:	b29a      	uxth	r2, r3
 80162c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162c4:	889b      	ldrh	r3, [r3, #4]
 80162c6:	b29b      	uxth	r3, r3
 80162c8:	429a      	cmp	r2, r3
 80162ca:	d03d      	beq.n	8016348 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80162cc:	2300      	movs	r3, #0
 80162ce:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80162d0:	e03a      	b.n	8016348 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80162d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162d4:	88db      	ldrh	r3, [r3, #6]
 80162d6:	b29a      	uxth	r2, r3
 80162d8:	693b      	ldr	r3, [r7, #16]
 80162da:	889b      	ldrh	r3, [r3, #4]
 80162dc:	b29b      	uxth	r3, r3
 80162de:	429a      	cmp	r2, r3
 80162e0:	d902      	bls.n	80162e8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80162e2:	f04f 33ff 	mov.w	r3, #4294967295
 80162e6:	e0c5      	b.n	8016474 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	68ba      	ldr	r2, [r7, #8]
 80162ec:	605a      	str	r2, [r3, #4]
      break;
 80162ee:	e02b      	b.n	8016348 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80162f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162f2:	889b      	ldrh	r3, [r3, #4]
 80162f4:	b29a      	uxth	r2, r3
 80162f6:	693b      	ldr	r3, [r7, #16]
 80162f8:	889b      	ldrh	r3, [r3, #4]
 80162fa:	b29b      	uxth	r3, r3
 80162fc:	429a      	cmp	r2, r3
 80162fe:	d102      	bne.n	8016306 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016300:	f04f 33ff 	mov.w	r3, #4294967295
 8016304:	e0b6      	b.n	8016474 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016308:	889b      	ldrh	r3, [r3, #4]
 801630a:	b29a      	uxth	r2, r3
 801630c:	693b      	ldr	r3, [r7, #16]
 801630e:	88db      	ldrh	r3, [r3, #6]
 8016310:	b29b      	uxth	r3, r3
 8016312:	429a      	cmp	r2, r3
 8016314:	d202      	bcs.n	801631c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016316:	f04f 33ff 	mov.w	r3, #4294967295
 801631a:	e0ab      	b.n	8016474 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801631c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801631e:	2b00      	cmp	r3, #0
 8016320:	d009      	beq.n	8016336 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8016322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016324:	88db      	ldrh	r3, [r3, #6]
 8016326:	b29a      	uxth	r2, r3
 8016328:	693b      	ldr	r3, [r7, #16]
 801632a:	889b      	ldrh	r3, [r3, #4]
 801632c:	b29b      	uxth	r3, r3
 801632e:	429a      	cmp	r2, r3
 8016330:	d001      	beq.n	8016336 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016332:	2300      	movs	r3, #0
 8016334:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016336:	693b      	ldr	r3, [r7, #16]
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801633c:	693b      	ldr	r3, [r7, #16]
 801633e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8016340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016342:	2b00      	cmp	r3, #0
 8016344:	d193      	bne.n	801626e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8016346:	e000      	b.n	801634a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8016348:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801634a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801634c:	2b00      	cmp	r3, #0
 801634e:	d12d      	bne.n	80163ac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016352:	2b00      	cmp	r3, #0
 8016354:	d01c      	beq.n	8016390 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016358:	88db      	ldrh	r3, [r3, #6]
 801635a:	b29a      	uxth	r2, r3
 801635c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801635e:	889b      	ldrh	r3, [r3, #4]
 8016360:	b29b      	uxth	r3, r3
 8016362:	429a      	cmp	r2, r3
 8016364:	d906      	bls.n	8016374 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8016366:	4b45      	ldr	r3, [pc, #276]	; (801647c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016368:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801636c:	4944      	ldr	r1, [pc, #272]	; (8016480 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801636e:	4845      	ldr	r0, [pc, #276]	; (8016484 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016370:	f000 feec 	bl	801714c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016376:	68ba      	ldr	r2, [r7, #8]
 8016378:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801637a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801637c:	88db      	ldrh	r3, [r3, #6]
 801637e:	b29a      	uxth	r2, r3
 8016380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016382:	889b      	ldrh	r3, [r3, #4]
 8016384:	b29b      	uxth	r3, r3
 8016386:	429a      	cmp	r2, r3
 8016388:	d010      	beq.n	80163ac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801638a:	2300      	movs	r3, #0
 801638c:	623b      	str	r3, [r7, #32]
 801638e:	e00d      	b.n	80163ac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016390:	68fb      	ldr	r3, [r7, #12]
 8016392:	685b      	ldr	r3, [r3, #4]
 8016394:	2b00      	cmp	r3, #0
 8016396:	d006      	beq.n	80163a6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016398:	4b38      	ldr	r3, [pc, #224]	; (801647c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801639a:	f240 12bf 	movw	r2, #447	; 0x1bf
 801639e:	493a      	ldr	r1, [pc, #232]	; (8016488 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80163a0:	4838      	ldr	r0, [pc, #224]	; (8016484 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80163a2:	f000 fed3 	bl	801714c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80163a6:	68fb      	ldr	r3, [r7, #12]
 80163a8:	68ba      	ldr	r2, [r7, #8]
 80163aa:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d105      	bne.n	80163be <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80163b2:	68fb      	ldr	r3, [r7, #12]
 80163b4:	7f9b      	ldrb	r3, [r3, #30]
 80163b6:	f003 0301 	and.w	r3, r3, #1
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d059      	beq.n	8016472 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80163be:	6a3b      	ldr	r3, [r7, #32]
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d04f      	beq.n	8016464 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80163c4:	68fb      	ldr	r3, [r7, #12]
 80163c6:	685b      	ldr	r3, [r3, #4]
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d006      	beq.n	80163da <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	685b      	ldr	r3, [r3, #4]
 80163d0:	685b      	ldr	r3, [r3, #4]
 80163d2:	889b      	ldrh	r3, [r3, #4]
 80163d4:	b29b      	uxth	r3, r3
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	d002      	beq.n	80163e0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80163da:	2300      	movs	r3, #0
 80163dc:	623b      	str	r3, [r7, #32]
 80163de:	e041      	b.n	8016464 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80163e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163e2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80163e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163e6:	681b      	ldr	r3, [r3, #0]
 80163e8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80163ea:	e012      	b.n	8016412 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80163ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163ee:	685b      	ldr	r3, [r3, #4]
 80163f0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80163f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163f4:	88db      	ldrh	r3, [r3, #6]
 80163f6:	b29a      	uxth	r2, r3
 80163f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163fa:	889b      	ldrh	r3, [r3, #4]
 80163fc:	b29b      	uxth	r3, r3
 80163fe:	429a      	cmp	r2, r3
 8016400:	d002      	beq.n	8016408 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8016402:	2300      	movs	r3, #0
 8016404:	623b      	str	r3, [r7, #32]
            break;
 8016406:	e007      	b.n	8016418 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8016408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801640a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801640c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801640e:	681b      	ldr	r3, [r3, #0]
 8016410:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016414:	2b00      	cmp	r3, #0
 8016416:	d1e9      	bne.n	80163ec <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016418:	6a3b      	ldr	r3, [r7, #32]
 801641a:	2b00      	cmp	r3, #0
 801641c:	d022      	beq.n	8016464 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801641e:	68fb      	ldr	r3, [r7, #12]
 8016420:	685b      	ldr	r3, [r3, #4]
 8016422:	2b00      	cmp	r3, #0
 8016424:	d106      	bne.n	8016434 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8016426:	4b15      	ldr	r3, [pc, #84]	; (801647c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016428:	f240 12df 	movw	r2, #479	; 0x1df
 801642c:	4917      	ldr	r1, [pc, #92]	; (801648c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801642e:	4815      	ldr	r0, [pc, #84]	; (8016484 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016430:	f000 fe8c 	bl	801714c <iprintf>
          LWIP_ASSERT("sanity check",
 8016434:	68fb      	ldr	r3, [r7, #12]
 8016436:	685b      	ldr	r3, [r3, #4]
 8016438:	685b      	ldr	r3, [r3, #4]
 801643a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801643c:	429a      	cmp	r2, r3
 801643e:	d106      	bne.n	801644e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016440:	4b0e      	ldr	r3, [pc, #56]	; (801647c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016442:	f240 12e1 	movw	r2, #481	; 0x1e1
 8016446:	4911      	ldr	r1, [pc, #68]	; (801648c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016448:	480e      	ldr	r0, [pc, #56]	; (8016484 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801644a:	f000 fe7f 	bl	801714c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801644e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016450:	681b      	ldr	r3, [r3, #0]
 8016452:	2b00      	cmp	r3, #0
 8016454:	d006      	beq.n	8016464 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8016456:	4b09      	ldr	r3, [pc, #36]	; (801647c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016458:	f240 12e3 	movw	r2, #483	; 0x1e3
 801645c:	490c      	ldr	r1, [pc, #48]	; (8016490 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801645e:	4809      	ldr	r0, [pc, #36]	; (8016484 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016460:	f000 fe74 	bl	801714c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016464:	6a3b      	ldr	r3, [r7, #32]
 8016466:	2b00      	cmp	r3, #0
 8016468:	bf14      	ite	ne
 801646a:	2301      	movne	r3, #1
 801646c:	2300      	moveq	r3, #0
 801646e:	b2db      	uxtb	r3, r3
 8016470:	e000      	b.n	8016474 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016472:	2300      	movs	r3, #0
}
 8016474:	4618      	mov	r0, r3
 8016476:	3730      	adds	r7, #48	; 0x30
 8016478:	46bd      	mov	sp, r7
 801647a:	bd80      	pop	{r7, pc}
 801647c:	0801b4fc 	.word	0x0801b4fc
 8016480:	0801b5e0 	.word	0x0801b5e0
 8016484:	0801b544 	.word	0x0801b544
 8016488:	0801b600 	.word	0x0801b600
 801648c:	0801b638 	.word	0x0801b638
 8016490:	0801b648 	.word	0x0801b648

08016494 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016494:	b580      	push	{r7, lr}
 8016496:	b08e      	sub	sp, #56	; 0x38
 8016498:	af00      	add	r7, sp, #0
 801649a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	685b      	ldr	r3, [r3, #4]
 80164a0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80164a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164a4:	781b      	ldrb	r3, [r3, #0]
 80164a6:	f003 030f 	and.w	r3, r3, #15
 80164aa:	b2db      	uxtb	r3, r3
 80164ac:	009b      	lsls	r3, r3, #2
 80164ae:	b2db      	uxtb	r3, r3
 80164b0:	2b14      	cmp	r3, #20
 80164b2:	f040 8167 	bne.w	8016784 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80164b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164b8:	88db      	ldrh	r3, [r3, #6]
 80164ba:	b29b      	uxth	r3, r3
 80164bc:	4618      	mov	r0, r3
 80164be:	f7f6 f8d1 	bl	800c664 <lwip_htons>
 80164c2:	4603      	mov	r3, r0
 80164c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80164c8:	b29b      	uxth	r3, r3
 80164ca:	00db      	lsls	r3, r3, #3
 80164cc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80164ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164d0:	885b      	ldrh	r3, [r3, #2]
 80164d2:	b29b      	uxth	r3, r3
 80164d4:	4618      	mov	r0, r3
 80164d6:	f7f6 f8c5 	bl	800c664 <lwip_htons>
 80164da:	4603      	mov	r3, r0
 80164dc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80164de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164e0:	781b      	ldrb	r3, [r3, #0]
 80164e2:	f003 030f 	and.w	r3, r3, #15
 80164e6:	b2db      	uxtb	r3, r3
 80164e8:	009b      	lsls	r3, r3, #2
 80164ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80164ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80164f2:	b29b      	uxth	r3, r3
 80164f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80164f6:	429a      	cmp	r2, r3
 80164f8:	f0c0 8146 	bcc.w	8016788 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80164fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016500:	b29b      	uxth	r3, r3
 8016502:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016504:	1ad3      	subs	r3, r2, r3
 8016506:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8016508:	6878      	ldr	r0, [r7, #4]
 801650a:	f7f7 fd0d 	bl	800df28 <pbuf_clen>
 801650e:	4603      	mov	r3, r0
 8016510:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016512:	4ba3      	ldr	r3, [pc, #652]	; (80167a0 <ip4_reass+0x30c>)
 8016514:	881b      	ldrh	r3, [r3, #0]
 8016516:	461a      	mov	r2, r3
 8016518:	8c3b      	ldrh	r3, [r7, #32]
 801651a:	4413      	add	r3, r2
 801651c:	2b0a      	cmp	r3, #10
 801651e:	dd10      	ble.n	8016542 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016520:	8c3b      	ldrh	r3, [r7, #32]
 8016522:	4619      	mov	r1, r3
 8016524:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016526:	f7ff fd81 	bl	801602c <ip_reass_remove_oldest_datagram>
 801652a:	4603      	mov	r3, r0
 801652c:	2b00      	cmp	r3, #0
 801652e:	f000 812d 	beq.w	801678c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016532:	4b9b      	ldr	r3, [pc, #620]	; (80167a0 <ip4_reass+0x30c>)
 8016534:	881b      	ldrh	r3, [r3, #0]
 8016536:	461a      	mov	r2, r3
 8016538:	8c3b      	ldrh	r3, [r7, #32]
 801653a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801653c:	2b0a      	cmp	r3, #10
 801653e:	f300 8125 	bgt.w	801678c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016542:	4b98      	ldr	r3, [pc, #608]	; (80167a4 <ip4_reass+0x310>)
 8016544:	681b      	ldr	r3, [r3, #0]
 8016546:	633b      	str	r3, [r7, #48]	; 0x30
 8016548:	e015      	b.n	8016576 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801654a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801654c:	695a      	ldr	r2, [r3, #20]
 801654e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016550:	68db      	ldr	r3, [r3, #12]
 8016552:	429a      	cmp	r2, r3
 8016554:	d10c      	bne.n	8016570 <ip4_reass+0xdc>
 8016556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016558:	699a      	ldr	r2, [r3, #24]
 801655a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801655c:	691b      	ldr	r3, [r3, #16]
 801655e:	429a      	cmp	r2, r3
 8016560:	d106      	bne.n	8016570 <ip4_reass+0xdc>
 8016562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016564:	899a      	ldrh	r2, [r3, #12]
 8016566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016568:	889b      	ldrh	r3, [r3, #4]
 801656a:	b29b      	uxth	r3, r3
 801656c:	429a      	cmp	r2, r3
 801656e:	d006      	beq.n	801657e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016572:	681b      	ldr	r3, [r3, #0]
 8016574:	633b      	str	r3, [r7, #48]	; 0x30
 8016576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016578:	2b00      	cmp	r3, #0
 801657a:	d1e6      	bne.n	801654a <ip4_reass+0xb6>
 801657c:	e000      	b.n	8016580 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801657e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016582:	2b00      	cmp	r3, #0
 8016584:	d109      	bne.n	801659a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016586:	8c3b      	ldrh	r3, [r7, #32]
 8016588:	4619      	mov	r1, r3
 801658a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801658c:	f7ff fdb0 	bl	80160f0 <ip_reass_enqueue_new_datagram>
 8016590:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016594:	2b00      	cmp	r3, #0
 8016596:	d11c      	bne.n	80165d2 <ip4_reass+0x13e>
      goto nullreturn;
 8016598:	e0f9      	b.n	801678e <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801659a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801659c:	88db      	ldrh	r3, [r3, #6]
 801659e:	b29b      	uxth	r3, r3
 80165a0:	4618      	mov	r0, r3
 80165a2:	f7f6 f85f 	bl	800c664 <lwip_htons>
 80165a6:	4603      	mov	r3, r0
 80165a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d110      	bne.n	80165d2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80165b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165b2:	89db      	ldrh	r3, [r3, #14]
 80165b4:	4618      	mov	r0, r3
 80165b6:	f7f6 f855 	bl	800c664 <lwip_htons>
 80165ba:	4603      	mov	r3, r0
 80165bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80165c0:	2b00      	cmp	r3, #0
 80165c2:	d006      	beq.n	80165d2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80165c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165c6:	3308      	adds	r3, #8
 80165c8:	2214      	movs	r2, #20
 80165ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80165cc:	4618      	mov	r0, r3
 80165ce:	f000 fd90 	bl	80170f2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80165d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165d4:	88db      	ldrh	r3, [r3, #6]
 80165d6:	b29b      	uxth	r3, r3
 80165d8:	f003 0320 	and.w	r3, r3, #32
 80165dc:	2b00      	cmp	r3, #0
 80165de:	bf0c      	ite	eq
 80165e0:	2301      	moveq	r3, #1
 80165e2:	2300      	movne	r3, #0
 80165e4:	b2db      	uxtb	r3, r3
 80165e6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80165e8:	69fb      	ldr	r3, [r7, #28]
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d00e      	beq.n	801660c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80165ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80165f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80165f2:	4413      	add	r3, r2
 80165f4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80165f6:	8b7a      	ldrh	r2, [r7, #26]
 80165f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80165fa:	429a      	cmp	r2, r3
 80165fc:	f0c0 80a0 	bcc.w	8016740 <ip4_reass+0x2ac>
 8016600:	8b7b      	ldrh	r3, [r7, #26]
 8016602:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8016606:	4293      	cmp	r3, r2
 8016608:	f200 809a 	bhi.w	8016740 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801660c:	69fa      	ldr	r2, [r7, #28]
 801660e:	6879      	ldr	r1, [r7, #4]
 8016610:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016612:	f7ff fdd5 	bl	80161c0 <ip_reass_chain_frag_into_datagram_and_validate>
 8016616:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016618:	697b      	ldr	r3, [r7, #20]
 801661a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801661e:	f000 8091 	beq.w	8016744 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016622:	4b5f      	ldr	r3, [pc, #380]	; (80167a0 <ip4_reass+0x30c>)
 8016624:	881a      	ldrh	r2, [r3, #0]
 8016626:	8c3b      	ldrh	r3, [r7, #32]
 8016628:	4413      	add	r3, r2
 801662a:	b29a      	uxth	r2, r3
 801662c:	4b5c      	ldr	r3, [pc, #368]	; (80167a0 <ip4_reass+0x30c>)
 801662e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016630:	69fb      	ldr	r3, [r7, #28]
 8016632:	2b00      	cmp	r3, #0
 8016634:	d00d      	beq.n	8016652 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8016636:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016638:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801663a:	4413      	add	r3, r2
 801663c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801663e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016640:	8a7a      	ldrh	r2, [r7, #18]
 8016642:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016646:	7f9b      	ldrb	r3, [r3, #30]
 8016648:	f043 0301 	orr.w	r3, r3, #1
 801664c:	b2da      	uxtb	r2, r3
 801664e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016650:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016652:	697b      	ldr	r3, [r7, #20]
 8016654:	2b01      	cmp	r3, #1
 8016656:	d171      	bne.n	801673c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8016658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801665a:	8b9b      	ldrh	r3, [r3, #28]
 801665c:	3314      	adds	r3, #20
 801665e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016662:	685b      	ldr	r3, [r3, #4]
 8016664:	685b      	ldr	r3, [r3, #4]
 8016666:	681b      	ldr	r3, [r3, #0]
 8016668:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801666a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801666c:	685b      	ldr	r3, [r3, #4]
 801666e:	685b      	ldr	r3, [r3, #4]
 8016670:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8016672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016674:	3308      	adds	r3, #8
 8016676:	2214      	movs	r2, #20
 8016678:	4619      	mov	r1, r3
 801667a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801667c:	f000 fd39 	bl	80170f2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016680:	8a3b      	ldrh	r3, [r7, #16]
 8016682:	4618      	mov	r0, r3
 8016684:	f7f5 ffee 	bl	800c664 <lwip_htons>
 8016688:	4603      	mov	r3, r0
 801668a:	461a      	mov	r2, r3
 801668c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801668e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016692:	2200      	movs	r2, #0
 8016694:	719a      	strb	r2, [r3, #6]
 8016696:	2200      	movs	r2, #0
 8016698:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801669a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801669c:	2200      	movs	r2, #0
 801669e:	729a      	strb	r2, [r3, #10]
 80166a0:	2200      	movs	r2, #0
 80166a2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80166a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166a6:	685b      	ldr	r3, [r3, #4]
 80166a8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80166aa:	e00d      	b.n	80166c8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80166ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80166ae:	685b      	ldr	r3, [r3, #4]
 80166b0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80166b2:	2114      	movs	r1, #20
 80166b4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80166b6:	f7f7 faf1 	bl	800dc9c <pbuf_remove_header>
      pbuf_cat(p, r);
 80166ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80166bc:	6878      	ldr	r0, [r7, #4]
 80166be:	f7f7 fc73 	bl	800dfa8 <pbuf_cat>
      r = iprh->next_pbuf;
 80166c2:	68fb      	ldr	r3, [r7, #12]
 80166c4:	681b      	ldr	r3, [r3, #0]
 80166c6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80166c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d1ee      	bne.n	80166ac <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80166ce:	4b35      	ldr	r3, [pc, #212]	; (80167a4 <ip4_reass+0x310>)
 80166d0:	681b      	ldr	r3, [r3, #0]
 80166d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80166d4:	429a      	cmp	r2, r3
 80166d6:	d102      	bne.n	80166de <ip4_reass+0x24a>
      ipr_prev = NULL;
 80166d8:	2300      	movs	r3, #0
 80166da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80166dc:	e010      	b.n	8016700 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80166de:	4b31      	ldr	r3, [pc, #196]	; (80167a4 <ip4_reass+0x310>)
 80166e0:	681b      	ldr	r3, [r3, #0]
 80166e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80166e4:	e007      	b.n	80166f6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80166e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166e8:	681b      	ldr	r3, [r3, #0]
 80166ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80166ec:	429a      	cmp	r2, r3
 80166ee:	d006      	beq.n	80166fe <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80166f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166f2:	681b      	ldr	r3, [r3, #0]
 80166f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80166f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d1f4      	bne.n	80166e6 <ip4_reass+0x252>
 80166fc:	e000      	b.n	8016700 <ip4_reass+0x26c>
          break;
 80166fe:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016700:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016702:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016704:	f7ff fd2e 	bl	8016164 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016708:	6878      	ldr	r0, [r7, #4]
 801670a:	f7f7 fc0d 	bl	800df28 <pbuf_clen>
 801670e:	4603      	mov	r3, r0
 8016710:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8016712:	4b23      	ldr	r3, [pc, #140]	; (80167a0 <ip4_reass+0x30c>)
 8016714:	881b      	ldrh	r3, [r3, #0]
 8016716:	8c3a      	ldrh	r2, [r7, #32]
 8016718:	429a      	cmp	r2, r3
 801671a:	d906      	bls.n	801672a <ip4_reass+0x296>
 801671c:	4b22      	ldr	r3, [pc, #136]	; (80167a8 <ip4_reass+0x314>)
 801671e:	f240 229b 	movw	r2, #667	; 0x29b
 8016722:	4922      	ldr	r1, [pc, #136]	; (80167ac <ip4_reass+0x318>)
 8016724:	4822      	ldr	r0, [pc, #136]	; (80167b0 <ip4_reass+0x31c>)
 8016726:	f000 fd11 	bl	801714c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801672a:	4b1d      	ldr	r3, [pc, #116]	; (80167a0 <ip4_reass+0x30c>)
 801672c:	881a      	ldrh	r2, [r3, #0]
 801672e:	8c3b      	ldrh	r3, [r7, #32]
 8016730:	1ad3      	subs	r3, r2, r3
 8016732:	b29a      	uxth	r2, r3
 8016734:	4b1a      	ldr	r3, [pc, #104]	; (80167a0 <ip4_reass+0x30c>)
 8016736:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	e02c      	b.n	8016796 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801673c:	2300      	movs	r3, #0
 801673e:	e02a      	b.n	8016796 <ip4_reass+0x302>

nullreturn_ipr:
 8016740:	bf00      	nop
 8016742:	e000      	b.n	8016746 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8016744:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8016746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016748:	2b00      	cmp	r3, #0
 801674a:	d106      	bne.n	801675a <ip4_reass+0x2c6>
 801674c:	4b16      	ldr	r3, [pc, #88]	; (80167a8 <ip4_reass+0x314>)
 801674e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8016752:	4918      	ldr	r1, [pc, #96]	; (80167b4 <ip4_reass+0x320>)
 8016754:	4816      	ldr	r0, [pc, #88]	; (80167b0 <ip4_reass+0x31c>)
 8016756:	f000 fcf9 	bl	801714c <iprintf>
  if (ipr->p == NULL) {
 801675a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801675c:	685b      	ldr	r3, [r3, #4]
 801675e:	2b00      	cmp	r3, #0
 8016760:	d114      	bne.n	801678c <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8016762:	4b10      	ldr	r3, [pc, #64]	; (80167a4 <ip4_reass+0x310>)
 8016764:	681b      	ldr	r3, [r3, #0]
 8016766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016768:	429a      	cmp	r2, r3
 801676a:	d006      	beq.n	801677a <ip4_reass+0x2e6>
 801676c:	4b0e      	ldr	r3, [pc, #56]	; (80167a8 <ip4_reass+0x314>)
 801676e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016772:	4911      	ldr	r1, [pc, #68]	; (80167b8 <ip4_reass+0x324>)
 8016774:	480e      	ldr	r0, [pc, #56]	; (80167b0 <ip4_reass+0x31c>)
 8016776:	f000 fce9 	bl	801714c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801677a:	2100      	movs	r1, #0
 801677c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801677e:	f7ff fcf1 	bl	8016164 <ip_reass_dequeue_datagram>
 8016782:	e004      	b.n	801678e <ip4_reass+0x2fa>
    goto nullreturn;
 8016784:	bf00      	nop
 8016786:	e002      	b.n	801678e <ip4_reass+0x2fa>
    goto nullreturn;
 8016788:	bf00      	nop
 801678a:	e000      	b.n	801678e <ip4_reass+0x2fa>
  }

nullreturn:
 801678c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801678e:	6878      	ldr	r0, [r7, #4]
 8016790:	f7f7 fb3c 	bl	800de0c <pbuf_free>
  return NULL;
 8016794:	2300      	movs	r3, #0
}
 8016796:	4618      	mov	r0, r3
 8016798:	3738      	adds	r7, #56	; 0x38
 801679a:	46bd      	mov	sp, r7
 801679c:	bd80      	pop	{r7, pc}
 801679e:	bf00      	nop
 80167a0:	20004784 	.word	0x20004784
 80167a4:	20004780 	.word	0x20004780
 80167a8:	0801b4fc 	.word	0x0801b4fc
 80167ac:	0801b66c 	.word	0x0801b66c
 80167b0:	0801b544 	.word	0x0801b544
 80167b4:	0801b688 	.word	0x0801b688
 80167b8:	0801b694 	.word	0x0801b694

080167bc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80167bc:	b580      	push	{r7, lr}
 80167be:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80167c0:	2004      	movs	r0, #4
 80167c2:	f7f6 fc03 	bl	800cfcc <memp_malloc>
 80167c6:	4603      	mov	r3, r0
}
 80167c8:	4618      	mov	r0, r3
 80167ca:	bd80      	pop	{r7, pc}

080167cc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80167cc:	b580      	push	{r7, lr}
 80167ce:	b082      	sub	sp, #8
 80167d0:	af00      	add	r7, sp, #0
 80167d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d106      	bne.n	80167e8 <ip_frag_free_pbuf_custom_ref+0x1c>
 80167da:	4b07      	ldr	r3, [pc, #28]	; (80167f8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80167dc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80167e0:	4906      	ldr	r1, [pc, #24]	; (80167fc <ip_frag_free_pbuf_custom_ref+0x30>)
 80167e2:	4807      	ldr	r0, [pc, #28]	; (8016800 <ip_frag_free_pbuf_custom_ref+0x34>)
 80167e4:	f000 fcb2 	bl	801714c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80167e8:	6879      	ldr	r1, [r7, #4]
 80167ea:	2004      	movs	r0, #4
 80167ec:	f7f6 fc40 	bl	800d070 <memp_free>
}
 80167f0:	bf00      	nop
 80167f2:	3708      	adds	r7, #8
 80167f4:	46bd      	mov	sp, r7
 80167f6:	bd80      	pop	{r7, pc}
 80167f8:	0801b4fc 	.word	0x0801b4fc
 80167fc:	0801b6b4 	.word	0x0801b6b4
 8016800:	0801b544 	.word	0x0801b544

08016804 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016804:	b580      	push	{r7, lr}
 8016806:	b084      	sub	sp, #16
 8016808:	af00      	add	r7, sp, #0
 801680a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016810:	68fb      	ldr	r3, [r7, #12]
 8016812:	2b00      	cmp	r3, #0
 8016814:	d106      	bne.n	8016824 <ipfrag_free_pbuf_custom+0x20>
 8016816:	4b11      	ldr	r3, [pc, #68]	; (801685c <ipfrag_free_pbuf_custom+0x58>)
 8016818:	f240 22ce 	movw	r2, #718	; 0x2ce
 801681c:	4910      	ldr	r1, [pc, #64]	; (8016860 <ipfrag_free_pbuf_custom+0x5c>)
 801681e:	4811      	ldr	r0, [pc, #68]	; (8016864 <ipfrag_free_pbuf_custom+0x60>)
 8016820:	f000 fc94 	bl	801714c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016824:	68fa      	ldr	r2, [r7, #12]
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	429a      	cmp	r2, r3
 801682a:	d006      	beq.n	801683a <ipfrag_free_pbuf_custom+0x36>
 801682c:	4b0b      	ldr	r3, [pc, #44]	; (801685c <ipfrag_free_pbuf_custom+0x58>)
 801682e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8016832:	490d      	ldr	r1, [pc, #52]	; (8016868 <ipfrag_free_pbuf_custom+0x64>)
 8016834:	480b      	ldr	r0, [pc, #44]	; (8016864 <ipfrag_free_pbuf_custom+0x60>)
 8016836:	f000 fc89 	bl	801714c <iprintf>
  if (pcr->original != NULL) {
 801683a:	68fb      	ldr	r3, [r7, #12]
 801683c:	695b      	ldr	r3, [r3, #20]
 801683e:	2b00      	cmp	r3, #0
 8016840:	d004      	beq.n	801684c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016842:	68fb      	ldr	r3, [r7, #12]
 8016844:	695b      	ldr	r3, [r3, #20]
 8016846:	4618      	mov	r0, r3
 8016848:	f7f7 fae0 	bl	800de0c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801684c:	68f8      	ldr	r0, [r7, #12]
 801684e:	f7ff ffbd 	bl	80167cc <ip_frag_free_pbuf_custom_ref>
}
 8016852:	bf00      	nop
 8016854:	3710      	adds	r7, #16
 8016856:	46bd      	mov	sp, r7
 8016858:	bd80      	pop	{r7, pc}
 801685a:	bf00      	nop
 801685c:	0801b4fc 	.word	0x0801b4fc
 8016860:	0801b6c0 	.word	0x0801b6c0
 8016864:	0801b544 	.word	0x0801b544
 8016868:	0801b6cc 	.word	0x0801b6cc

0801686c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801686c:	b580      	push	{r7, lr}
 801686e:	b094      	sub	sp, #80	; 0x50
 8016870:	af02      	add	r7, sp, #8
 8016872:	60f8      	str	r0, [r7, #12]
 8016874:	60b9      	str	r1, [r7, #8]
 8016876:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016878:	2300      	movs	r3, #0
 801687a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801687e:	68bb      	ldr	r3, [r7, #8]
 8016880:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016882:	3b14      	subs	r3, #20
 8016884:	2b00      	cmp	r3, #0
 8016886:	da00      	bge.n	801688a <ip4_frag+0x1e>
 8016888:	3307      	adds	r3, #7
 801688a:	10db      	asrs	r3, r3, #3
 801688c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801688e:	2314      	movs	r3, #20
 8016890:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016892:	68fb      	ldr	r3, [r7, #12]
 8016894:	685b      	ldr	r3, [r3, #4]
 8016896:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8016898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801689a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801689c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801689e:	781b      	ldrb	r3, [r3, #0]
 80168a0:	f003 030f 	and.w	r3, r3, #15
 80168a4:	b2db      	uxtb	r3, r3
 80168a6:	009b      	lsls	r3, r3, #2
 80168a8:	b2db      	uxtb	r3, r3
 80168aa:	2b14      	cmp	r3, #20
 80168ac:	d002      	beq.n	80168b4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80168ae:	f06f 0305 	mvn.w	r3, #5
 80168b2:	e10f      	b.n	8016ad4 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80168b4:	68fb      	ldr	r3, [r7, #12]
 80168b6:	895b      	ldrh	r3, [r3, #10]
 80168b8:	2b13      	cmp	r3, #19
 80168ba:	d809      	bhi.n	80168d0 <ip4_frag+0x64>
 80168bc:	4b87      	ldr	r3, [pc, #540]	; (8016adc <ip4_frag+0x270>)
 80168be:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80168c2:	4987      	ldr	r1, [pc, #540]	; (8016ae0 <ip4_frag+0x274>)
 80168c4:	4887      	ldr	r0, [pc, #540]	; (8016ae4 <ip4_frag+0x278>)
 80168c6:	f000 fc41 	bl	801714c <iprintf>
 80168ca:	f06f 0305 	mvn.w	r3, #5
 80168ce:	e101      	b.n	8016ad4 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80168d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168d2:	88db      	ldrh	r3, [r3, #6]
 80168d4:	b29b      	uxth	r3, r3
 80168d6:	4618      	mov	r0, r3
 80168d8:	f7f5 fec4 	bl	800c664 <lwip_htons>
 80168dc:	4603      	mov	r3, r0
 80168de:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80168e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80168e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80168e6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80168ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80168ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80168f0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80168f2:	68fb      	ldr	r3, [r7, #12]
 80168f4:	891b      	ldrh	r3, [r3, #8]
 80168f6:	3b14      	subs	r3, #20
 80168f8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80168fc:	e0e0      	b.n	8016ac0 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80168fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016900:	00db      	lsls	r3, r3, #3
 8016902:	b29b      	uxth	r3, r3
 8016904:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016908:	4293      	cmp	r3, r2
 801690a:	bf28      	it	cs
 801690c:	4613      	movcs	r3, r2
 801690e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016910:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016914:	2114      	movs	r1, #20
 8016916:	200e      	movs	r0, #14
 8016918:	f7f6 ff66 	bl	800d7e8 <pbuf_alloc>
 801691c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801691e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016920:	2b00      	cmp	r3, #0
 8016922:	f000 80d4 	beq.w	8016ace <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016928:	895b      	ldrh	r3, [r3, #10]
 801692a:	2b13      	cmp	r3, #19
 801692c:	d806      	bhi.n	801693c <ip4_frag+0xd0>
 801692e:	4b6b      	ldr	r3, [pc, #428]	; (8016adc <ip4_frag+0x270>)
 8016930:	f240 3225 	movw	r2, #805	; 0x325
 8016934:	496c      	ldr	r1, [pc, #432]	; (8016ae8 <ip4_frag+0x27c>)
 8016936:	486b      	ldr	r0, [pc, #428]	; (8016ae4 <ip4_frag+0x278>)
 8016938:	f000 fc08 	bl	801714c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801693c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801693e:	685b      	ldr	r3, [r3, #4]
 8016940:	2214      	movs	r2, #20
 8016942:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016944:	4618      	mov	r0, r3
 8016946:	f000 fbd4 	bl	80170f2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801694a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801694c:	685b      	ldr	r3, [r3, #4]
 801694e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8016950:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016952:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8016956:	e064      	b.n	8016a22 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016958:	68fb      	ldr	r3, [r7, #12]
 801695a:	895a      	ldrh	r2, [r3, #10]
 801695c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801695e:	1ad3      	subs	r3, r2, r3
 8016960:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016962:	68fb      	ldr	r3, [r7, #12]
 8016964:	895b      	ldrh	r3, [r3, #10]
 8016966:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016968:	429a      	cmp	r2, r3
 801696a:	d906      	bls.n	801697a <ip4_frag+0x10e>
 801696c:	4b5b      	ldr	r3, [pc, #364]	; (8016adc <ip4_frag+0x270>)
 801696e:	f240 322d 	movw	r2, #813	; 0x32d
 8016972:	495e      	ldr	r1, [pc, #376]	; (8016aec <ip4_frag+0x280>)
 8016974:	485b      	ldr	r0, [pc, #364]	; (8016ae4 <ip4_frag+0x278>)
 8016976:	f000 fbe9 	bl	801714c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801697a:	8bfa      	ldrh	r2, [r7, #30]
 801697c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016980:	4293      	cmp	r3, r2
 8016982:	bf28      	it	cs
 8016984:	4613      	movcs	r3, r2
 8016986:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801698a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801698e:	2b00      	cmp	r3, #0
 8016990:	d105      	bne.n	801699e <ip4_frag+0x132>
        poff = 0;
 8016992:	2300      	movs	r3, #0
 8016994:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016996:	68fb      	ldr	r3, [r7, #12]
 8016998:	681b      	ldr	r3, [r3, #0]
 801699a:	60fb      	str	r3, [r7, #12]
        continue;
 801699c:	e041      	b.n	8016a22 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801699e:	f7ff ff0d 	bl	80167bc <ip_frag_alloc_pbuf_custom_ref>
 80169a2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80169a4:	69bb      	ldr	r3, [r7, #24]
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	d103      	bne.n	80169b2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80169aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80169ac:	f7f7 fa2e 	bl	800de0c <pbuf_free>
        goto memerr;
 80169b0:	e08e      	b.n	8016ad0 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80169b2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80169b4:	68fb      	ldr	r3, [r7, #12]
 80169b6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80169b8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80169ba:	4413      	add	r3, r2
 80169bc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80169c0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80169c4:	9201      	str	r2, [sp, #4]
 80169c6:	9300      	str	r3, [sp, #0]
 80169c8:	4603      	mov	r3, r0
 80169ca:	2241      	movs	r2, #65	; 0x41
 80169cc:	2000      	movs	r0, #0
 80169ce:	f7f7 f831 	bl	800da34 <pbuf_alloced_custom>
 80169d2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80169d4:	697b      	ldr	r3, [r7, #20]
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d106      	bne.n	80169e8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80169da:	69b8      	ldr	r0, [r7, #24]
 80169dc:	f7ff fef6 	bl	80167cc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80169e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80169e2:	f7f7 fa13 	bl	800de0c <pbuf_free>
        goto memerr;
 80169e6:	e073      	b.n	8016ad0 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 80169e8:	68f8      	ldr	r0, [r7, #12]
 80169ea:	f7f7 fab5 	bl	800df58 <pbuf_ref>
      pcr->original = p;
 80169ee:	69bb      	ldr	r3, [r7, #24]
 80169f0:	68fa      	ldr	r2, [r7, #12]
 80169f2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80169f4:	69bb      	ldr	r3, [r7, #24]
 80169f6:	4a3e      	ldr	r2, [pc, #248]	; (8016af0 <ip4_frag+0x284>)
 80169f8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80169fa:	6979      	ldr	r1, [r7, #20]
 80169fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80169fe:	f7f7 fad3 	bl	800dfa8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016a02:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8016a06:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016a0a:	1ad3      	subs	r3, r2, r3
 8016a0c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8016a10:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	d004      	beq.n	8016a22 <ip4_frag+0x1b6>
        poff = 0;
 8016a18:	2300      	movs	r3, #0
 8016a1a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016a1c:	68fb      	ldr	r3, [r7, #12]
 8016a1e:	681b      	ldr	r3, [r3, #0]
 8016a20:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016a22:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d196      	bne.n	8016958 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8016a2a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016a2c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016a30:	4413      	add	r3, r2
 8016a32:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016a34:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016a38:	68bb      	ldr	r3, [r7, #8]
 8016a3a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016a3c:	3b14      	subs	r3, #20
 8016a3e:	429a      	cmp	r2, r3
 8016a40:	bfd4      	ite	le
 8016a42:	2301      	movle	r3, #1
 8016a44:	2300      	movgt	r3, #0
 8016a46:	b2db      	uxtb	r3, r3
 8016a48:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016a4a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016a4e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016a52:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8016a54:	6a3b      	ldr	r3, [r7, #32]
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d002      	beq.n	8016a60 <ip4_frag+0x1f4>
 8016a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d003      	beq.n	8016a68 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016a60:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016a62:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016a66:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016a68:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016a6a:	4618      	mov	r0, r3
 8016a6c:	f7f5 fdfa 	bl	800c664 <lwip_htons>
 8016a70:	4603      	mov	r3, r0
 8016a72:	461a      	mov	r2, r3
 8016a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a76:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016a78:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016a7a:	3314      	adds	r3, #20
 8016a7c:	b29b      	uxth	r3, r3
 8016a7e:	4618      	mov	r0, r3
 8016a80:	f7f5 fdf0 	bl	800c664 <lwip_htons>
 8016a84:	4603      	mov	r3, r0
 8016a86:	461a      	mov	r2, r3
 8016a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a8a:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a8e:	2200      	movs	r2, #0
 8016a90:	729a      	strb	r2, [r3, #10]
 8016a92:	2200      	movs	r2, #0
 8016a94:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016a96:	68bb      	ldr	r3, [r7, #8]
 8016a98:	695b      	ldr	r3, [r3, #20]
 8016a9a:	687a      	ldr	r2, [r7, #4]
 8016a9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016a9e:	68b8      	ldr	r0, [r7, #8]
 8016aa0:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016aa2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016aa4:	f7f7 f9b2 	bl	800de0c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8016aa8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016aac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016aae:	1ad3      	subs	r3, r2, r3
 8016ab0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8016ab4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8016ab8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016aba:	4413      	add	r3, r2
 8016abc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8016ac0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	f47f af1a 	bne.w	80168fe <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016aca:	2300      	movs	r3, #0
 8016acc:	e002      	b.n	8016ad4 <ip4_frag+0x268>
      goto memerr;
 8016ace:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016ad0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016ad4:	4618      	mov	r0, r3
 8016ad6:	3748      	adds	r7, #72	; 0x48
 8016ad8:	46bd      	mov	sp, r7
 8016ada:	bd80      	pop	{r7, pc}
 8016adc:	0801b4fc 	.word	0x0801b4fc
 8016ae0:	0801b6d8 	.word	0x0801b6d8
 8016ae4:	0801b544 	.word	0x0801b544
 8016ae8:	0801b6f4 	.word	0x0801b6f4
 8016aec:	0801b714 	.word	0x0801b714
 8016af0:	08016805 	.word	0x08016805

08016af4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016af4:	b580      	push	{r7, lr}
 8016af6:	b086      	sub	sp, #24
 8016af8:	af00      	add	r7, sp, #0
 8016afa:	6078      	str	r0, [r7, #4]
 8016afc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016afe:	230e      	movs	r3, #14
 8016b00:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	895b      	ldrh	r3, [r3, #10]
 8016b06:	2b0e      	cmp	r3, #14
 8016b08:	d96e      	bls.n	8016be8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	7bdb      	ldrb	r3, [r3, #15]
 8016b0e:	2b00      	cmp	r3, #0
 8016b10:	d106      	bne.n	8016b20 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016b12:	683b      	ldr	r3, [r7, #0]
 8016b14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016b18:	3301      	adds	r3, #1
 8016b1a:	b2da      	uxtb	r2, r3
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	685b      	ldr	r3, [r3, #4]
 8016b24:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016b26:	693b      	ldr	r3, [r7, #16]
 8016b28:	7b1a      	ldrb	r2, [r3, #12]
 8016b2a:	7b5b      	ldrb	r3, [r3, #13]
 8016b2c:	021b      	lsls	r3, r3, #8
 8016b2e:	4313      	orrs	r3, r2
 8016b30:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016b32:	693b      	ldr	r3, [r7, #16]
 8016b34:	781b      	ldrb	r3, [r3, #0]
 8016b36:	f003 0301 	and.w	r3, r3, #1
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d023      	beq.n	8016b86 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016b3e:	693b      	ldr	r3, [r7, #16]
 8016b40:	781b      	ldrb	r3, [r3, #0]
 8016b42:	2b01      	cmp	r3, #1
 8016b44:	d10f      	bne.n	8016b66 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016b46:	693b      	ldr	r3, [r7, #16]
 8016b48:	785b      	ldrb	r3, [r3, #1]
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d11b      	bne.n	8016b86 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016b4e:	693b      	ldr	r3, [r7, #16]
 8016b50:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016b52:	2b5e      	cmp	r3, #94	; 0x5e
 8016b54:	d117      	bne.n	8016b86 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	7b5b      	ldrb	r3, [r3, #13]
 8016b5a:	f043 0310 	orr.w	r3, r3, #16
 8016b5e:	b2da      	uxtb	r2, r3
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	735a      	strb	r2, [r3, #13]
 8016b64:	e00f      	b.n	8016b86 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016b66:	693b      	ldr	r3, [r7, #16]
 8016b68:	2206      	movs	r2, #6
 8016b6a:	4928      	ldr	r1, [pc, #160]	; (8016c0c <ethernet_input+0x118>)
 8016b6c:	4618      	mov	r0, r3
 8016b6e:	f000 fab1 	bl	80170d4 <memcmp>
 8016b72:	4603      	mov	r3, r0
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d106      	bne.n	8016b86 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	7b5b      	ldrb	r3, [r3, #13]
 8016b7c:	f043 0308 	orr.w	r3, r3, #8
 8016b80:	b2da      	uxtb	r2, r3
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016b86:	89fb      	ldrh	r3, [r7, #14]
 8016b88:	2b08      	cmp	r3, #8
 8016b8a:	d003      	beq.n	8016b94 <ethernet_input+0xa0>
 8016b8c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016b90:	d014      	beq.n	8016bbc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016b92:	e032      	b.n	8016bfa <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016b94:	683b      	ldr	r3, [r7, #0]
 8016b96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016b9a:	f003 0308 	and.w	r3, r3, #8
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	d024      	beq.n	8016bec <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016ba2:	8afb      	ldrh	r3, [r7, #22]
 8016ba4:	4619      	mov	r1, r3
 8016ba6:	6878      	ldr	r0, [r7, #4]
 8016ba8:	f7f7 f878 	bl	800dc9c <pbuf_remove_header>
 8016bac:	4603      	mov	r3, r0
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d11e      	bne.n	8016bf0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016bb2:	6839      	ldr	r1, [r7, #0]
 8016bb4:	6878      	ldr	r0, [r7, #4]
 8016bb6:	f7fe ff35 	bl	8015a24 <ip4_input>
      break;
 8016bba:	e013      	b.n	8016be4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016bbc:	683b      	ldr	r3, [r7, #0]
 8016bbe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016bc2:	f003 0308 	and.w	r3, r3, #8
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d014      	beq.n	8016bf4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016bca:	8afb      	ldrh	r3, [r7, #22]
 8016bcc:	4619      	mov	r1, r3
 8016bce:	6878      	ldr	r0, [r7, #4]
 8016bd0:	f7f7 f864 	bl	800dc9c <pbuf_remove_header>
 8016bd4:	4603      	mov	r3, r0
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d10e      	bne.n	8016bf8 <ethernet_input+0x104>
        etharp_input(p, netif);
 8016bda:	6839      	ldr	r1, [r7, #0]
 8016bdc:	6878      	ldr	r0, [r7, #4]
 8016bde:	f7fe f8d5 	bl	8014d8c <etharp_input>
      break;
 8016be2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016be4:	2300      	movs	r3, #0
 8016be6:	e00c      	b.n	8016c02 <ethernet_input+0x10e>
    goto free_and_return;
 8016be8:	bf00      	nop
 8016bea:	e006      	b.n	8016bfa <ethernet_input+0x106>
        goto free_and_return;
 8016bec:	bf00      	nop
 8016bee:	e004      	b.n	8016bfa <ethernet_input+0x106>
        goto free_and_return;
 8016bf0:	bf00      	nop
 8016bf2:	e002      	b.n	8016bfa <ethernet_input+0x106>
        goto free_and_return;
 8016bf4:	bf00      	nop
 8016bf6:	e000      	b.n	8016bfa <ethernet_input+0x106>
        goto free_and_return;
 8016bf8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016bfa:	6878      	ldr	r0, [r7, #4]
 8016bfc:	f7f7 f906 	bl	800de0c <pbuf_free>
  return ERR_OK;
 8016c00:	2300      	movs	r3, #0
}
 8016c02:	4618      	mov	r0, r3
 8016c04:	3718      	adds	r7, #24
 8016c06:	46bd      	mov	sp, r7
 8016c08:	bd80      	pop	{r7, pc}
 8016c0a:	bf00      	nop
 8016c0c:	0801b91c 	.word	0x0801b91c

08016c10 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016c10:	b580      	push	{r7, lr}
 8016c12:	b086      	sub	sp, #24
 8016c14:	af00      	add	r7, sp, #0
 8016c16:	60f8      	str	r0, [r7, #12]
 8016c18:	60b9      	str	r1, [r7, #8]
 8016c1a:	607a      	str	r2, [r7, #4]
 8016c1c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016c1e:	8c3b      	ldrh	r3, [r7, #32]
 8016c20:	4618      	mov	r0, r3
 8016c22:	f7f5 fd1f 	bl	800c664 <lwip_htons>
 8016c26:	4603      	mov	r3, r0
 8016c28:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016c2a:	210e      	movs	r1, #14
 8016c2c:	68b8      	ldr	r0, [r7, #8]
 8016c2e:	f7f7 f825 	bl	800dc7c <pbuf_add_header>
 8016c32:	4603      	mov	r3, r0
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d125      	bne.n	8016c84 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016c38:	68bb      	ldr	r3, [r7, #8]
 8016c3a:	685b      	ldr	r3, [r3, #4]
 8016c3c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016c3e:	693b      	ldr	r3, [r7, #16]
 8016c40:	8afa      	ldrh	r2, [r7, #22]
 8016c42:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016c44:	693b      	ldr	r3, [r7, #16]
 8016c46:	2206      	movs	r2, #6
 8016c48:	6839      	ldr	r1, [r7, #0]
 8016c4a:	4618      	mov	r0, r3
 8016c4c:	f000 fa51 	bl	80170f2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016c50:	693b      	ldr	r3, [r7, #16]
 8016c52:	3306      	adds	r3, #6
 8016c54:	2206      	movs	r2, #6
 8016c56:	6879      	ldr	r1, [r7, #4]
 8016c58:	4618      	mov	r0, r3
 8016c5a:	f000 fa4a 	bl	80170f2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016c5e:	68fb      	ldr	r3, [r7, #12]
 8016c60:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016c64:	2b06      	cmp	r3, #6
 8016c66:	d006      	beq.n	8016c76 <ethernet_output+0x66>
 8016c68:	4b0a      	ldr	r3, [pc, #40]	; (8016c94 <ethernet_output+0x84>)
 8016c6a:	f240 1233 	movw	r2, #307	; 0x133
 8016c6e:	490a      	ldr	r1, [pc, #40]	; (8016c98 <ethernet_output+0x88>)
 8016c70:	480a      	ldr	r0, [pc, #40]	; (8016c9c <ethernet_output+0x8c>)
 8016c72:	f000 fa6b 	bl	801714c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016c76:	68fb      	ldr	r3, [r7, #12]
 8016c78:	699b      	ldr	r3, [r3, #24]
 8016c7a:	68b9      	ldr	r1, [r7, #8]
 8016c7c:	68f8      	ldr	r0, [r7, #12]
 8016c7e:	4798      	blx	r3
 8016c80:	4603      	mov	r3, r0
 8016c82:	e002      	b.n	8016c8a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016c84:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016c86:	f06f 0301 	mvn.w	r3, #1
}
 8016c8a:	4618      	mov	r0, r3
 8016c8c:	3718      	adds	r7, #24
 8016c8e:	46bd      	mov	sp, r7
 8016c90:	bd80      	pop	{r7, pc}
 8016c92:	bf00      	nop
 8016c94:	0801b724 	.word	0x0801b724
 8016c98:	0801b75c 	.word	0x0801b75c
 8016c9c:	0801b790 	.word	0x0801b790

08016ca0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8016ca0:	b580      	push	{r7, lr}
 8016ca2:	b086      	sub	sp, #24
 8016ca4:	af00      	add	r7, sp, #0
 8016ca6:	6078      	str	r0, [r7, #4]
 8016ca8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8016caa:	683b      	ldr	r3, [r7, #0]
 8016cac:	60bb      	str	r3, [r7, #8]
 8016cae:	2304      	movs	r3, #4
 8016cb0:	60fb      	str	r3, [r7, #12]
 8016cb2:	2300      	movs	r3, #0
 8016cb4:	613b      	str	r3, [r7, #16]
 8016cb6:	2300      	movs	r3, #0
 8016cb8:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8016cba:	f107 0308 	add.w	r3, r7, #8
 8016cbe:	2100      	movs	r1, #0
 8016cc0:	4618      	mov	r0, r3
 8016cc2:	f7ee ff7a 	bl	8005bba <osMessageCreate>
 8016cc6:	4602      	mov	r2, r0
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	681b      	ldr	r3, [r3, #0]
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	d102      	bne.n	8016cda <sys_mbox_new+0x3a>
    return ERR_MEM;
 8016cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8016cd8:	e000      	b.n	8016cdc <sys_mbox_new+0x3c>

  return ERR_OK;
 8016cda:	2300      	movs	r3, #0
}
 8016cdc:	4618      	mov	r0, r3
 8016cde:	3718      	adds	r7, #24
 8016ce0:	46bd      	mov	sp, r7
 8016ce2:	bd80      	pop	{r7, pc}

08016ce4 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8016ce4:	b580      	push	{r7, lr}
 8016ce6:	b082      	sub	sp, #8
 8016ce8:	af00      	add	r7, sp, #0
 8016cea:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	681b      	ldr	r3, [r3, #0]
 8016cf0:	4618      	mov	r0, r3
 8016cf2:	f7ef f83f 	bl	8005d74 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	681b      	ldr	r3, [r3, #0]
 8016cfa:	4618      	mov	r0, r3
 8016cfc:	f7ef f850 	bl	8005da0 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8016d00:	bf00      	nop
 8016d02:	3708      	adds	r7, #8
 8016d04:	46bd      	mov	sp, r7
 8016d06:	bd80      	pop	{r7, pc}

08016d08 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8016d08:	b580      	push	{r7, lr}
 8016d0a:	b084      	sub	sp, #16
 8016d0c:	af00      	add	r7, sp, #0
 8016d0e:	6078      	str	r0, [r7, #4]
 8016d10:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	681b      	ldr	r3, [r3, #0]
 8016d16:	6839      	ldr	r1, [r7, #0]
 8016d18:	2200      	movs	r2, #0
 8016d1a:	4618      	mov	r0, r3
 8016d1c:	f7ee ff76 	bl	8005c0c <osMessagePut>
 8016d20:	4603      	mov	r3, r0
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d102      	bne.n	8016d2c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8016d26:	2300      	movs	r3, #0
 8016d28:	73fb      	strb	r3, [r7, #15]
 8016d2a:	e001      	b.n	8016d30 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8016d2c:	23ff      	movs	r3, #255	; 0xff
 8016d2e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8016d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016d34:	4618      	mov	r0, r3
 8016d36:	3710      	adds	r7, #16
 8016d38:	46bd      	mov	sp, r7
 8016d3a:	bd80      	pop	{r7, pc}

08016d3c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8016d3c:	b580      	push	{r7, lr}
 8016d3e:	b08c      	sub	sp, #48	; 0x30
 8016d40:	af00      	add	r7, sp, #0
 8016d42:	61f8      	str	r0, [r7, #28]
 8016d44:	61b9      	str	r1, [r7, #24]
 8016d46:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8016d48:	f7ee fd60 	bl	800580c <osKernelSysTick>
 8016d4c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8016d4e:	697b      	ldr	r3, [r7, #20]
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	d017      	beq.n	8016d84 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8016d54:	69fb      	ldr	r3, [r7, #28]
 8016d56:	6819      	ldr	r1, [r3, #0]
 8016d58:	f107 0320 	add.w	r3, r7, #32
 8016d5c:	697a      	ldr	r2, [r7, #20]
 8016d5e:	4618      	mov	r0, r3
 8016d60:	f7ee ff94 	bl	8005c8c <osMessageGet>

    if(event.status == osEventMessage)
 8016d64:	6a3b      	ldr	r3, [r7, #32]
 8016d66:	2b10      	cmp	r3, #16
 8016d68:	d109      	bne.n	8016d7e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8016d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d6c:	461a      	mov	r2, r3
 8016d6e:	69bb      	ldr	r3, [r7, #24]
 8016d70:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8016d72:	f7ee fd4b 	bl	800580c <osKernelSysTick>
 8016d76:	4602      	mov	r2, r0
 8016d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d7a:	1ad3      	subs	r3, r2, r3
 8016d7c:	e019      	b.n	8016db2 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8016d82:	e016      	b.n	8016db2 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8016d84:	69fb      	ldr	r3, [r7, #28]
 8016d86:	6819      	ldr	r1, [r3, #0]
 8016d88:	463b      	mov	r3, r7
 8016d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8016d8e:	4618      	mov	r0, r3
 8016d90:	f7ee ff7c 	bl	8005c8c <osMessageGet>
 8016d94:	f107 0320 	add.w	r3, r7, #32
 8016d98:	463a      	mov	r2, r7
 8016d9a:	ca07      	ldmia	r2, {r0, r1, r2}
 8016d9c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8016da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016da2:	461a      	mov	r2, r3
 8016da4:	69bb      	ldr	r3, [r7, #24]
 8016da6:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8016da8:	f7ee fd30 	bl	800580c <osKernelSysTick>
 8016dac:	4602      	mov	r2, r0
 8016dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016db0:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8016db2:	4618      	mov	r0, r3
 8016db4:	3730      	adds	r7, #48	; 0x30
 8016db6:	46bd      	mov	sp, r7
 8016db8:	bd80      	pop	{r7, pc}

08016dba <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8016dba:	b580      	push	{r7, lr}
 8016dbc:	b086      	sub	sp, #24
 8016dbe:	af00      	add	r7, sp, #0
 8016dc0:	6078      	str	r0, [r7, #4]
 8016dc2:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	6819      	ldr	r1, [r3, #0]
 8016dc8:	f107 030c 	add.w	r3, r7, #12
 8016dcc:	2200      	movs	r2, #0
 8016dce:	4618      	mov	r0, r3
 8016dd0:	f7ee ff5c 	bl	8005c8c <osMessageGet>

  if(event.status == osEventMessage)
 8016dd4:	68fb      	ldr	r3, [r7, #12]
 8016dd6:	2b10      	cmp	r3, #16
 8016dd8:	d105      	bne.n	8016de6 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8016dda:	693b      	ldr	r3, [r7, #16]
 8016ddc:	461a      	mov	r2, r3
 8016dde:	683b      	ldr	r3, [r7, #0]
 8016de0:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8016de2:	2300      	movs	r3, #0
 8016de4:	e001      	b.n	8016dea <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8016de6:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8016dea:	4618      	mov	r0, r3
 8016dec:	3718      	adds	r7, #24
 8016dee:	46bd      	mov	sp, r7
 8016df0:	bd80      	pop	{r7, pc}

08016df2 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8016df2:	b480      	push	{r7}
 8016df4:	b083      	sub	sp, #12
 8016df6:	af00      	add	r7, sp, #0
 8016df8:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	681b      	ldr	r3, [r3, #0]
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	d101      	bne.n	8016e06 <sys_mbox_valid+0x14>
    return 0;
 8016e02:	2300      	movs	r3, #0
 8016e04:	e000      	b.n	8016e08 <sys_mbox_valid+0x16>
  else
    return 1;
 8016e06:	2301      	movs	r3, #1
}
 8016e08:	4618      	mov	r0, r3
 8016e0a:	370c      	adds	r7, #12
 8016e0c:	46bd      	mov	sp, r7
 8016e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e12:	4770      	bx	lr

08016e14 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8016e14:	b480      	push	{r7}
 8016e16:	b083      	sub	sp, #12
 8016e18:	af00      	add	r7, sp, #0
 8016e1a:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8016e1c:	687b      	ldr	r3, [r7, #4]
 8016e1e:	2200      	movs	r2, #0
 8016e20:	601a      	str	r2, [r3, #0]
}
 8016e22:	bf00      	nop
 8016e24:	370c      	adds	r7, #12
 8016e26:	46bd      	mov	sp, r7
 8016e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e2c:	4770      	bx	lr

08016e2e <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8016e2e:	b580      	push	{r7, lr}
 8016e30:	b084      	sub	sp, #16
 8016e32:	af00      	add	r7, sp, #0
 8016e34:	6078      	str	r0, [r7, #4]
 8016e36:	460b      	mov	r3, r1
 8016e38:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8016e3a:	2300      	movs	r3, #0
 8016e3c:	60bb      	str	r3, [r7, #8]
 8016e3e:	2300      	movs	r3, #0
 8016e40:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8016e42:	f107 0308 	add.w	r3, r7, #8
 8016e46:	2101      	movs	r1, #1
 8016e48:	4618      	mov	r0, r3
 8016e4a:	f7ee fdeb 	bl	8005a24 <osSemaphoreCreate>
 8016e4e:	4602      	mov	r2, r0
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	681b      	ldr	r3, [r3, #0]
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	d102      	bne.n	8016e62 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8016e60:	e009      	b.n	8016e76 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8016e62:	78fb      	ldrb	r3, [r7, #3]
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	d105      	bne.n	8016e74 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	681b      	ldr	r3, [r3, #0]
 8016e6c:	2100      	movs	r1, #0
 8016e6e:	4618      	mov	r0, r3
 8016e70:	f7ee fe0c 	bl	8005a8c <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8016e74:	2300      	movs	r3, #0
}
 8016e76:	4618      	mov	r0, r3
 8016e78:	3710      	adds	r7, #16
 8016e7a:	46bd      	mov	sp, r7
 8016e7c:	bd80      	pop	{r7, pc}

08016e7e <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8016e7e:	b580      	push	{r7, lr}
 8016e80:	b084      	sub	sp, #16
 8016e82:	af00      	add	r7, sp, #0
 8016e84:	6078      	str	r0, [r7, #4]
 8016e86:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8016e88:	f7ee fcc0 	bl	800580c <osKernelSysTick>
 8016e8c:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8016e8e:	683b      	ldr	r3, [r7, #0]
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d011      	beq.n	8016eb8 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	681b      	ldr	r3, [r3, #0]
 8016e98:	6839      	ldr	r1, [r7, #0]
 8016e9a:	4618      	mov	r0, r3
 8016e9c:	f7ee fdf6 	bl	8005a8c <osSemaphoreWait>
 8016ea0:	4603      	mov	r3, r0
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d105      	bne.n	8016eb2 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8016ea6:	f7ee fcb1 	bl	800580c <osKernelSysTick>
 8016eaa:	4602      	mov	r2, r0
 8016eac:	68fb      	ldr	r3, [r7, #12]
 8016eae:	1ad3      	subs	r3, r2, r3
 8016eb0:	e012      	b.n	8016ed8 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8016eb6:	e00f      	b.n	8016ed8 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8016eb8:	bf00      	nop
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	681b      	ldr	r3, [r3, #0]
 8016ebe:	f04f 31ff 	mov.w	r1, #4294967295
 8016ec2:	4618      	mov	r0, r3
 8016ec4:	f7ee fde2 	bl	8005a8c <osSemaphoreWait>
 8016ec8:	4603      	mov	r3, r0
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	d1f5      	bne.n	8016eba <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8016ece:	f7ee fc9d 	bl	800580c <osKernelSysTick>
 8016ed2:	4602      	mov	r2, r0
 8016ed4:	68fb      	ldr	r3, [r7, #12]
 8016ed6:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8016ed8:	4618      	mov	r0, r3
 8016eda:	3710      	adds	r7, #16
 8016edc:	46bd      	mov	sp, r7
 8016ede:	bd80      	pop	{r7, pc}

08016ee0 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8016ee0:	b580      	push	{r7, lr}
 8016ee2:	b082      	sub	sp, #8
 8016ee4:	af00      	add	r7, sp, #0
 8016ee6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	681b      	ldr	r3, [r3, #0]
 8016eec:	4618      	mov	r0, r3
 8016eee:	f7ee fe1b 	bl	8005b28 <osSemaphoreRelease>
}
 8016ef2:	bf00      	nop
 8016ef4:	3708      	adds	r7, #8
 8016ef6:	46bd      	mov	sp, r7
 8016ef8:	bd80      	pop	{r7, pc}

08016efa <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8016efa:	b580      	push	{r7, lr}
 8016efc:	b082      	sub	sp, #8
 8016efe:	af00      	add	r7, sp, #0
 8016f00:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	681b      	ldr	r3, [r3, #0]
 8016f06:	4618      	mov	r0, r3
 8016f08:	f7ee fe44 	bl	8005b94 <osSemaphoreDelete>
}
 8016f0c:	bf00      	nop
 8016f0e:	3708      	adds	r7, #8
 8016f10:	46bd      	mov	sp, r7
 8016f12:	bd80      	pop	{r7, pc}

08016f14 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8016f14:	b480      	push	{r7}
 8016f16:	b083      	sub	sp, #12
 8016f18:	af00      	add	r7, sp, #0
 8016f1a:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	681b      	ldr	r3, [r3, #0]
 8016f20:	2b00      	cmp	r3, #0
 8016f22:	d101      	bne.n	8016f28 <sys_sem_valid+0x14>
    return 0;
 8016f24:	2300      	movs	r3, #0
 8016f26:	e000      	b.n	8016f2a <sys_sem_valid+0x16>
  else
    return 1;
 8016f28:	2301      	movs	r3, #1
}
 8016f2a:	4618      	mov	r0, r3
 8016f2c:	370c      	adds	r7, #12
 8016f2e:	46bd      	mov	sp, r7
 8016f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f34:	4770      	bx	lr

08016f36 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8016f36:	b480      	push	{r7}
 8016f38:	b083      	sub	sp, #12
 8016f3a:	af00      	add	r7, sp, #0
 8016f3c:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	2200      	movs	r2, #0
 8016f42:	601a      	str	r2, [r3, #0]
}
 8016f44:	bf00      	nop
 8016f46:	370c      	adds	r7, #12
 8016f48:	46bd      	mov	sp, r7
 8016f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f4e:	4770      	bx	lr

08016f50 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8016f50:	b580      	push	{r7, lr}
 8016f52:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8016f54:	4803      	ldr	r0, [pc, #12]	; (8016f64 <sys_init+0x14>)
 8016f56:	f7ee fcc9 	bl	80058ec <osMutexCreate>
 8016f5a:	4602      	mov	r2, r0
 8016f5c:	4b02      	ldr	r3, [pc, #8]	; (8016f68 <sys_init+0x18>)
 8016f5e:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8016f60:	bf00      	nop
 8016f62:	bd80      	pop	{r7, pc}
 8016f64:	0801b92c 	.word	0x0801b92c
 8016f68:	2000d25c 	.word	0x2000d25c

08016f6c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8016f6c:	b580      	push	{r7, lr}
 8016f6e:	b084      	sub	sp, #16
 8016f70:	af00      	add	r7, sp, #0
 8016f72:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8016f74:	2300      	movs	r3, #0
 8016f76:	60bb      	str	r3, [r7, #8]
 8016f78:	2300      	movs	r3, #0
 8016f7a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8016f7c:	f107 0308 	add.w	r3, r7, #8
 8016f80:	4618      	mov	r0, r3
 8016f82:	f7ee fcb3 	bl	80058ec <osMutexCreate>
 8016f86:	4602      	mov	r2, r0
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	681b      	ldr	r3, [r3, #0]
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d102      	bne.n	8016f9a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016f94:	f04f 33ff 	mov.w	r3, #4294967295
 8016f98:	e000      	b.n	8016f9c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8016f9a:	2300      	movs	r3, #0
}
 8016f9c:	4618      	mov	r0, r3
 8016f9e:	3710      	adds	r7, #16
 8016fa0:	46bd      	mov	sp, r7
 8016fa2:	bd80      	pop	{r7, pc}

08016fa4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8016fa4:	b580      	push	{r7, lr}
 8016fa6:	b082      	sub	sp, #8
 8016fa8:	af00      	add	r7, sp, #0
 8016faa:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	681b      	ldr	r3, [r3, #0]
 8016fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8016fb4:	4618      	mov	r0, r3
 8016fb6:	f7ee fcb1 	bl	800591c <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8016fba:	bf00      	nop
 8016fbc:	3708      	adds	r7, #8
 8016fbe:	46bd      	mov	sp, r7
 8016fc0:	bd80      	pop	{r7, pc}

08016fc2 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8016fc2:	b580      	push	{r7, lr}
 8016fc4:	b082      	sub	sp, #8
 8016fc6:	af00      	add	r7, sp, #0
 8016fc8:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	681b      	ldr	r3, [r3, #0]
 8016fce:	4618      	mov	r0, r3
 8016fd0:	f7ee fcf2 	bl	80059b8 <osMutexRelease>
}
 8016fd4:	bf00      	nop
 8016fd6:	3708      	adds	r7, #8
 8016fd8:	46bd      	mov	sp, r7
 8016fda:	bd80      	pop	{r7, pc}

08016fdc <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8016fdc:	b580      	push	{r7, lr}
 8016fde:	b08c      	sub	sp, #48	; 0x30
 8016fe0:	af00      	add	r7, sp, #0
 8016fe2:	60f8      	str	r0, [r7, #12]
 8016fe4:	60b9      	str	r1, [r7, #8]
 8016fe6:	607a      	str	r2, [r7, #4]
 8016fe8:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8016fea:	f107 0314 	add.w	r3, r7, #20
 8016fee:	2200      	movs	r2, #0
 8016ff0:	601a      	str	r2, [r3, #0]
 8016ff2:	605a      	str	r2, [r3, #4]
 8016ff4:	609a      	str	r2, [r3, #8]
 8016ff6:	60da      	str	r2, [r3, #12]
 8016ff8:	611a      	str	r2, [r3, #16]
 8016ffa:	615a      	str	r2, [r3, #20]
 8016ffc:	619a      	str	r2, [r3, #24]
 8016ffe:	68fb      	ldr	r3, [r7, #12]
 8017000:	617b      	str	r3, [r7, #20]
 8017002:	68bb      	ldr	r3, [r7, #8]
 8017004:	61bb      	str	r3, [r7, #24]
 8017006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017008:	b21b      	sxth	r3, r3
 801700a:	83bb      	strh	r3, [r7, #28]
 801700c:	683b      	ldr	r3, [r7, #0]
 801700e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8017010:	f107 0314 	add.w	r3, r7, #20
 8017014:	6879      	ldr	r1, [r7, #4]
 8017016:	4618      	mov	r0, r3
 8017018:	f7ee fc08 	bl	800582c <osThreadCreate>
 801701c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801701e:	4618      	mov	r0, r3
 8017020:	3730      	adds	r7, #48	; 0x30
 8017022:	46bd      	mov	sp, r7
 8017024:	bd80      	pop	{r7, pc}
	...

08017028 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8017028:	b580      	push	{r7, lr}
 801702a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801702c:	4b04      	ldr	r3, [pc, #16]	; (8017040 <sys_arch_protect+0x18>)
 801702e:	681b      	ldr	r3, [r3, #0]
 8017030:	f04f 31ff 	mov.w	r1, #4294967295
 8017034:	4618      	mov	r0, r3
 8017036:	f7ee fc71 	bl	800591c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801703a:	2301      	movs	r3, #1
}
 801703c:	4618      	mov	r0, r3
 801703e:	bd80      	pop	{r7, pc}
 8017040:	2000d25c 	.word	0x2000d25c

08017044 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8017044:	b580      	push	{r7, lr}
 8017046:	b082      	sub	sp, #8
 8017048:	af00      	add	r7, sp, #0
 801704a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801704c:	4b04      	ldr	r3, [pc, #16]	; (8017060 <sys_arch_unprotect+0x1c>)
 801704e:	681b      	ldr	r3, [r3, #0]
 8017050:	4618      	mov	r0, r3
 8017052:	f7ee fcb1 	bl	80059b8 <osMutexRelease>
}
 8017056:	bf00      	nop
 8017058:	3708      	adds	r7, #8
 801705a:	46bd      	mov	sp, r7
 801705c:	bd80      	pop	{r7, pc}
 801705e:	bf00      	nop
 8017060:	2000d25c 	.word	0x2000d25c

08017064 <exit>:
 8017064:	b508      	push	{r3, lr}
 8017066:	4b07      	ldr	r3, [pc, #28]	; (8017084 <exit+0x20>)
 8017068:	4604      	mov	r4, r0
 801706a:	b113      	cbz	r3, 8017072 <exit+0xe>
 801706c:	2100      	movs	r1, #0
 801706e:	f3af 8000 	nop.w
 8017072:	4b05      	ldr	r3, [pc, #20]	; (8017088 <exit+0x24>)
 8017074:	6818      	ldr	r0, [r3, #0]
 8017076:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017078:	b103      	cbz	r3, 801707c <exit+0x18>
 801707a:	4798      	blx	r3
 801707c:	4620      	mov	r0, r4
 801707e:	f7e9 ffa9 	bl	8000fd4 <_exit>
 8017082:	bf00      	nop
 8017084:	00000000 	.word	0x00000000
 8017088:	0801b934 	.word	0x0801b934

0801708c <__libc_init_array>:
 801708c:	b570      	push	{r4, r5, r6, lr}
 801708e:	4e0d      	ldr	r6, [pc, #52]	; (80170c4 <__libc_init_array+0x38>)
 8017090:	4c0d      	ldr	r4, [pc, #52]	; (80170c8 <__libc_init_array+0x3c>)
 8017092:	1ba4      	subs	r4, r4, r6
 8017094:	10a4      	asrs	r4, r4, #2
 8017096:	2500      	movs	r5, #0
 8017098:	42a5      	cmp	r5, r4
 801709a:	d109      	bne.n	80170b0 <__libc_init_array+0x24>
 801709c:	4e0b      	ldr	r6, [pc, #44]	; (80170cc <__libc_init_array+0x40>)
 801709e:	4c0c      	ldr	r4, [pc, #48]	; (80170d0 <__libc_init_array+0x44>)
 80170a0:	f001 f92e 	bl	8018300 <_init>
 80170a4:	1ba4      	subs	r4, r4, r6
 80170a6:	10a4      	asrs	r4, r4, #2
 80170a8:	2500      	movs	r5, #0
 80170aa:	42a5      	cmp	r5, r4
 80170ac:	d105      	bne.n	80170ba <__libc_init_array+0x2e>
 80170ae:	bd70      	pop	{r4, r5, r6, pc}
 80170b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80170b4:	4798      	blx	r3
 80170b6:	3501      	adds	r5, #1
 80170b8:	e7ee      	b.n	8017098 <__libc_init_array+0xc>
 80170ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80170be:	4798      	blx	r3
 80170c0:	3501      	adds	r5, #1
 80170c2:	e7f2      	b.n	80170aa <__libc_init_array+0x1e>
 80170c4:	0801b9d4 	.word	0x0801b9d4
 80170c8:	0801b9d4 	.word	0x0801b9d4
 80170cc:	0801b9d4 	.word	0x0801b9d4
 80170d0:	0801b9d8 	.word	0x0801b9d8

080170d4 <memcmp>:
 80170d4:	b530      	push	{r4, r5, lr}
 80170d6:	2400      	movs	r4, #0
 80170d8:	42a2      	cmp	r2, r4
 80170da:	d101      	bne.n	80170e0 <memcmp+0xc>
 80170dc:	2000      	movs	r0, #0
 80170de:	e007      	b.n	80170f0 <memcmp+0x1c>
 80170e0:	5d03      	ldrb	r3, [r0, r4]
 80170e2:	3401      	adds	r4, #1
 80170e4:	190d      	adds	r5, r1, r4
 80170e6:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80170ea:	42ab      	cmp	r3, r5
 80170ec:	d0f4      	beq.n	80170d8 <memcmp+0x4>
 80170ee:	1b58      	subs	r0, r3, r5
 80170f0:	bd30      	pop	{r4, r5, pc}

080170f2 <memcpy>:
 80170f2:	b510      	push	{r4, lr}
 80170f4:	1e43      	subs	r3, r0, #1
 80170f6:	440a      	add	r2, r1
 80170f8:	4291      	cmp	r1, r2
 80170fa:	d100      	bne.n	80170fe <memcpy+0xc>
 80170fc:	bd10      	pop	{r4, pc}
 80170fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017102:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017106:	e7f7      	b.n	80170f8 <memcpy+0x6>

08017108 <memmove>:
 8017108:	4288      	cmp	r0, r1
 801710a:	b510      	push	{r4, lr}
 801710c:	eb01 0302 	add.w	r3, r1, r2
 8017110:	d807      	bhi.n	8017122 <memmove+0x1a>
 8017112:	1e42      	subs	r2, r0, #1
 8017114:	4299      	cmp	r1, r3
 8017116:	d00a      	beq.n	801712e <memmove+0x26>
 8017118:	f811 4b01 	ldrb.w	r4, [r1], #1
 801711c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8017120:	e7f8      	b.n	8017114 <memmove+0xc>
 8017122:	4283      	cmp	r3, r0
 8017124:	d9f5      	bls.n	8017112 <memmove+0xa>
 8017126:	1881      	adds	r1, r0, r2
 8017128:	1ad2      	subs	r2, r2, r3
 801712a:	42d3      	cmn	r3, r2
 801712c:	d100      	bne.n	8017130 <memmove+0x28>
 801712e:	bd10      	pop	{r4, pc}
 8017130:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017134:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017138:	e7f7      	b.n	801712a <memmove+0x22>

0801713a <memset>:
 801713a:	4402      	add	r2, r0
 801713c:	4603      	mov	r3, r0
 801713e:	4293      	cmp	r3, r2
 8017140:	d100      	bne.n	8017144 <memset+0xa>
 8017142:	4770      	bx	lr
 8017144:	f803 1b01 	strb.w	r1, [r3], #1
 8017148:	e7f9      	b.n	801713e <memset+0x4>
	...

0801714c <iprintf>:
 801714c:	b40f      	push	{r0, r1, r2, r3}
 801714e:	4b0a      	ldr	r3, [pc, #40]	; (8017178 <iprintf+0x2c>)
 8017150:	b513      	push	{r0, r1, r4, lr}
 8017152:	681c      	ldr	r4, [r3, #0]
 8017154:	b124      	cbz	r4, 8017160 <iprintf+0x14>
 8017156:	69a3      	ldr	r3, [r4, #24]
 8017158:	b913      	cbnz	r3, 8017160 <iprintf+0x14>
 801715a:	4620      	mov	r0, r4
 801715c:	f000 f8bc 	bl	80172d8 <__sinit>
 8017160:	ab05      	add	r3, sp, #20
 8017162:	9a04      	ldr	r2, [sp, #16]
 8017164:	68a1      	ldr	r1, [r4, #8]
 8017166:	9301      	str	r3, [sp, #4]
 8017168:	4620      	mov	r0, r4
 801716a:	f000 fb6b 	bl	8017844 <_vfiprintf_r>
 801716e:	b002      	add	sp, #8
 8017170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017174:	b004      	add	sp, #16
 8017176:	4770      	bx	lr
 8017178:	20000018 	.word	0x20000018

0801717c <rand>:
 801717c:	b538      	push	{r3, r4, r5, lr}
 801717e:	4b13      	ldr	r3, [pc, #76]	; (80171cc <rand+0x50>)
 8017180:	681c      	ldr	r4, [r3, #0]
 8017182:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017184:	b97b      	cbnz	r3, 80171a6 <rand+0x2a>
 8017186:	2018      	movs	r0, #24
 8017188:	f000 f930 	bl	80173ec <malloc>
 801718c:	4a10      	ldr	r2, [pc, #64]	; (80171d0 <rand+0x54>)
 801718e:	4b11      	ldr	r3, [pc, #68]	; (80171d4 <rand+0x58>)
 8017190:	63a0      	str	r0, [r4, #56]	; 0x38
 8017192:	e9c0 2300 	strd	r2, r3, [r0]
 8017196:	4b10      	ldr	r3, [pc, #64]	; (80171d8 <rand+0x5c>)
 8017198:	6083      	str	r3, [r0, #8]
 801719a:	230b      	movs	r3, #11
 801719c:	8183      	strh	r3, [r0, #12]
 801719e:	2201      	movs	r2, #1
 80171a0:	2300      	movs	r3, #0
 80171a2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80171a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80171a8:	480c      	ldr	r0, [pc, #48]	; (80171dc <rand+0x60>)
 80171aa:	690a      	ldr	r2, [r1, #16]
 80171ac:	694b      	ldr	r3, [r1, #20]
 80171ae:	4c0c      	ldr	r4, [pc, #48]	; (80171e0 <rand+0x64>)
 80171b0:	4350      	muls	r0, r2
 80171b2:	fb04 0003 	mla	r0, r4, r3, r0
 80171b6:	fba2 2304 	umull	r2, r3, r2, r4
 80171ba:	4403      	add	r3, r0
 80171bc:	1c54      	adds	r4, r2, #1
 80171be:	f143 0500 	adc.w	r5, r3, #0
 80171c2:	e9c1 4504 	strd	r4, r5, [r1, #16]
 80171c6:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 80171ca:	bd38      	pop	{r3, r4, r5, pc}
 80171cc:	20000018 	.word	0x20000018
 80171d0:	abcd330e 	.word	0xabcd330e
 80171d4:	e66d1234 	.word	0xe66d1234
 80171d8:	0005deec 	.word	0x0005deec
 80171dc:	5851f42d 	.word	0x5851f42d
 80171e0:	4c957f2d 	.word	0x4c957f2d

080171e4 <siprintf>:
 80171e4:	b40e      	push	{r1, r2, r3}
 80171e6:	b500      	push	{lr}
 80171e8:	b09c      	sub	sp, #112	; 0x70
 80171ea:	ab1d      	add	r3, sp, #116	; 0x74
 80171ec:	9002      	str	r0, [sp, #8]
 80171ee:	9006      	str	r0, [sp, #24]
 80171f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80171f4:	4809      	ldr	r0, [pc, #36]	; (801721c <siprintf+0x38>)
 80171f6:	9107      	str	r1, [sp, #28]
 80171f8:	9104      	str	r1, [sp, #16]
 80171fa:	4909      	ldr	r1, [pc, #36]	; (8017220 <siprintf+0x3c>)
 80171fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8017200:	9105      	str	r1, [sp, #20]
 8017202:	6800      	ldr	r0, [r0, #0]
 8017204:	9301      	str	r3, [sp, #4]
 8017206:	a902      	add	r1, sp, #8
 8017208:	f000 f9fa 	bl	8017600 <_svfiprintf_r>
 801720c:	9b02      	ldr	r3, [sp, #8]
 801720e:	2200      	movs	r2, #0
 8017210:	701a      	strb	r2, [r3, #0]
 8017212:	b01c      	add	sp, #112	; 0x70
 8017214:	f85d eb04 	ldr.w	lr, [sp], #4
 8017218:	b003      	add	sp, #12
 801721a:	4770      	bx	lr
 801721c:	20000018 	.word	0x20000018
 8017220:	ffff0208 	.word	0xffff0208

08017224 <strcpy>:
 8017224:	4603      	mov	r3, r0
 8017226:	f811 2b01 	ldrb.w	r2, [r1], #1
 801722a:	f803 2b01 	strb.w	r2, [r3], #1
 801722e:	2a00      	cmp	r2, #0
 8017230:	d1f9      	bne.n	8017226 <strcpy+0x2>
 8017232:	4770      	bx	lr

08017234 <strncmp>:
 8017234:	b510      	push	{r4, lr}
 8017236:	b16a      	cbz	r2, 8017254 <strncmp+0x20>
 8017238:	3901      	subs	r1, #1
 801723a:	1884      	adds	r4, r0, r2
 801723c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017240:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017244:	4293      	cmp	r3, r2
 8017246:	d103      	bne.n	8017250 <strncmp+0x1c>
 8017248:	42a0      	cmp	r0, r4
 801724a:	d001      	beq.n	8017250 <strncmp+0x1c>
 801724c:	2b00      	cmp	r3, #0
 801724e:	d1f5      	bne.n	801723c <strncmp+0x8>
 8017250:	1a98      	subs	r0, r3, r2
 8017252:	bd10      	pop	{r4, pc}
 8017254:	4610      	mov	r0, r2
 8017256:	e7fc      	b.n	8017252 <strncmp+0x1e>

08017258 <std>:
 8017258:	2300      	movs	r3, #0
 801725a:	b510      	push	{r4, lr}
 801725c:	4604      	mov	r4, r0
 801725e:	e9c0 3300 	strd	r3, r3, [r0]
 8017262:	6083      	str	r3, [r0, #8]
 8017264:	8181      	strh	r1, [r0, #12]
 8017266:	6643      	str	r3, [r0, #100]	; 0x64
 8017268:	81c2      	strh	r2, [r0, #14]
 801726a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801726e:	6183      	str	r3, [r0, #24]
 8017270:	4619      	mov	r1, r3
 8017272:	2208      	movs	r2, #8
 8017274:	305c      	adds	r0, #92	; 0x5c
 8017276:	f7ff ff60 	bl	801713a <memset>
 801727a:	4b05      	ldr	r3, [pc, #20]	; (8017290 <std+0x38>)
 801727c:	6263      	str	r3, [r4, #36]	; 0x24
 801727e:	4b05      	ldr	r3, [pc, #20]	; (8017294 <std+0x3c>)
 8017280:	62a3      	str	r3, [r4, #40]	; 0x28
 8017282:	4b05      	ldr	r3, [pc, #20]	; (8017298 <std+0x40>)
 8017284:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017286:	4b05      	ldr	r3, [pc, #20]	; (801729c <std+0x44>)
 8017288:	6224      	str	r4, [r4, #32]
 801728a:	6323      	str	r3, [r4, #48]	; 0x30
 801728c:	bd10      	pop	{r4, pc}
 801728e:	bf00      	nop
 8017290:	08017da1 	.word	0x08017da1
 8017294:	08017dc3 	.word	0x08017dc3
 8017298:	08017dfb 	.word	0x08017dfb
 801729c:	08017e1f 	.word	0x08017e1f

080172a0 <_cleanup_r>:
 80172a0:	4901      	ldr	r1, [pc, #4]	; (80172a8 <_cleanup_r+0x8>)
 80172a2:	f000 b885 	b.w	80173b0 <_fwalk_reent>
 80172a6:	bf00      	nop
 80172a8:	080180f9 	.word	0x080180f9

080172ac <__sfmoreglue>:
 80172ac:	b570      	push	{r4, r5, r6, lr}
 80172ae:	1e4a      	subs	r2, r1, #1
 80172b0:	2568      	movs	r5, #104	; 0x68
 80172b2:	4355      	muls	r5, r2
 80172b4:	460e      	mov	r6, r1
 80172b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80172ba:	f000 f8ed 	bl	8017498 <_malloc_r>
 80172be:	4604      	mov	r4, r0
 80172c0:	b140      	cbz	r0, 80172d4 <__sfmoreglue+0x28>
 80172c2:	2100      	movs	r1, #0
 80172c4:	e9c0 1600 	strd	r1, r6, [r0]
 80172c8:	300c      	adds	r0, #12
 80172ca:	60a0      	str	r0, [r4, #8]
 80172cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80172d0:	f7ff ff33 	bl	801713a <memset>
 80172d4:	4620      	mov	r0, r4
 80172d6:	bd70      	pop	{r4, r5, r6, pc}

080172d8 <__sinit>:
 80172d8:	6983      	ldr	r3, [r0, #24]
 80172da:	b510      	push	{r4, lr}
 80172dc:	4604      	mov	r4, r0
 80172de:	bb33      	cbnz	r3, 801732e <__sinit+0x56>
 80172e0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80172e4:	6503      	str	r3, [r0, #80]	; 0x50
 80172e6:	4b12      	ldr	r3, [pc, #72]	; (8017330 <__sinit+0x58>)
 80172e8:	4a12      	ldr	r2, [pc, #72]	; (8017334 <__sinit+0x5c>)
 80172ea:	681b      	ldr	r3, [r3, #0]
 80172ec:	6282      	str	r2, [r0, #40]	; 0x28
 80172ee:	4298      	cmp	r0, r3
 80172f0:	bf04      	itt	eq
 80172f2:	2301      	moveq	r3, #1
 80172f4:	6183      	streq	r3, [r0, #24]
 80172f6:	f000 f81f 	bl	8017338 <__sfp>
 80172fa:	6060      	str	r0, [r4, #4]
 80172fc:	4620      	mov	r0, r4
 80172fe:	f000 f81b 	bl	8017338 <__sfp>
 8017302:	60a0      	str	r0, [r4, #8]
 8017304:	4620      	mov	r0, r4
 8017306:	f000 f817 	bl	8017338 <__sfp>
 801730a:	2200      	movs	r2, #0
 801730c:	60e0      	str	r0, [r4, #12]
 801730e:	2104      	movs	r1, #4
 8017310:	6860      	ldr	r0, [r4, #4]
 8017312:	f7ff ffa1 	bl	8017258 <std>
 8017316:	2201      	movs	r2, #1
 8017318:	2109      	movs	r1, #9
 801731a:	68a0      	ldr	r0, [r4, #8]
 801731c:	f7ff ff9c 	bl	8017258 <std>
 8017320:	2202      	movs	r2, #2
 8017322:	2112      	movs	r1, #18
 8017324:	68e0      	ldr	r0, [r4, #12]
 8017326:	f7ff ff97 	bl	8017258 <std>
 801732a:	2301      	movs	r3, #1
 801732c:	61a3      	str	r3, [r4, #24]
 801732e:	bd10      	pop	{r4, pc}
 8017330:	0801b934 	.word	0x0801b934
 8017334:	080172a1 	.word	0x080172a1

08017338 <__sfp>:
 8017338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801733a:	4b1b      	ldr	r3, [pc, #108]	; (80173a8 <__sfp+0x70>)
 801733c:	681e      	ldr	r6, [r3, #0]
 801733e:	69b3      	ldr	r3, [r6, #24]
 8017340:	4607      	mov	r7, r0
 8017342:	b913      	cbnz	r3, 801734a <__sfp+0x12>
 8017344:	4630      	mov	r0, r6
 8017346:	f7ff ffc7 	bl	80172d8 <__sinit>
 801734a:	3648      	adds	r6, #72	; 0x48
 801734c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017350:	3b01      	subs	r3, #1
 8017352:	d503      	bpl.n	801735c <__sfp+0x24>
 8017354:	6833      	ldr	r3, [r6, #0]
 8017356:	b133      	cbz	r3, 8017366 <__sfp+0x2e>
 8017358:	6836      	ldr	r6, [r6, #0]
 801735a:	e7f7      	b.n	801734c <__sfp+0x14>
 801735c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017360:	b16d      	cbz	r5, 801737e <__sfp+0x46>
 8017362:	3468      	adds	r4, #104	; 0x68
 8017364:	e7f4      	b.n	8017350 <__sfp+0x18>
 8017366:	2104      	movs	r1, #4
 8017368:	4638      	mov	r0, r7
 801736a:	f7ff ff9f 	bl	80172ac <__sfmoreglue>
 801736e:	6030      	str	r0, [r6, #0]
 8017370:	2800      	cmp	r0, #0
 8017372:	d1f1      	bne.n	8017358 <__sfp+0x20>
 8017374:	230c      	movs	r3, #12
 8017376:	603b      	str	r3, [r7, #0]
 8017378:	4604      	mov	r4, r0
 801737a:	4620      	mov	r0, r4
 801737c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801737e:	4b0b      	ldr	r3, [pc, #44]	; (80173ac <__sfp+0x74>)
 8017380:	6665      	str	r5, [r4, #100]	; 0x64
 8017382:	e9c4 5500 	strd	r5, r5, [r4]
 8017386:	60a5      	str	r5, [r4, #8]
 8017388:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801738c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8017390:	2208      	movs	r2, #8
 8017392:	4629      	mov	r1, r5
 8017394:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017398:	f7ff fecf 	bl	801713a <memset>
 801739c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80173a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80173a4:	e7e9      	b.n	801737a <__sfp+0x42>
 80173a6:	bf00      	nop
 80173a8:	0801b934 	.word	0x0801b934
 80173ac:	ffff0001 	.word	0xffff0001

080173b0 <_fwalk_reent>:
 80173b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80173b4:	4680      	mov	r8, r0
 80173b6:	4689      	mov	r9, r1
 80173b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80173bc:	2600      	movs	r6, #0
 80173be:	b914      	cbnz	r4, 80173c6 <_fwalk_reent+0x16>
 80173c0:	4630      	mov	r0, r6
 80173c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80173c6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80173ca:	3f01      	subs	r7, #1
 80173cc:	d501      	bpl.n	80173d2 <_fwalk_reent+0x22>
 80173ce:	6824      	ldr	r4, [r4, #0]
 80173d0:	e7f5      	b.n	80173be <_fwalk_reent+0xe>
 80173d2:	89ab      	ldrh	r3, [r5, #12]
 80173d4:	2b01      	cmp	r3, #1
 80173d6:	d907      	bls.n	80173e8 <_fwalk_reent+0x38>
 80173d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80173dc:	3301      	adds	r3, #1
 80173de:	d003      	beq.n	80173e8 <_fwalk_reent+0x38>
 80173e0:	4629      	mov	r1, r5
 80173e2:	4640      	mov	r0, r8
 80173e4:	47c8      	blx	r9
 80173e6:	4306      	orrs	r6, r0
 80173e8:	3568      	adds	r5, #104	; 0x68
 80173ea:	e7ee      	b.n	80173ca <_fwalk_reent+0x1a>

080173ec <malloc>:
 80173ec:	4b02      	ldr	r3, [pc, #8]	; (80173f8 <malloc+0xc>)
 80173ee:	4601      	mov	r1, r0
 80173f0:	6818      	ldr	r0, [r3, #0]
 80173f2:	f000 b851 	b.w	8017498 <_malloc_r>
 80173f6:	bf00      	nop
 80173f8:	20000018 	.word	0x20000018

080173fc <_free_r>:
 80173fc:	b538      	push	{r3, r4, r5, lr}
 80173fe:	4605      	mov	r5, r0
 8017400:	2900      	cmp	r1, #0
 8017402:	d045      	beq.n	8017490 <_free_r+0x94>
 8017404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017408:	1f0c      	subs	r4, r1, #4
 801740a:	2b00      	cmp	r3, #0
 801740c:	bfb8      	it	lt
 801740e:	18e4      	addlt	r4, r4, r3
 8017410:	f000 ff12 	bl	8018238 <__malloc_lock>
 8017414:	4a1f      	ldr	r2, [pc, #124]	; (8017494 <_free_r+0x98>)
 8017416:	6813      	ldr	r3, [r2, #0]
 8017418:	4610      	mov	r0, r2
 801741a:	b933      	cbnz	r3, 801742a <_free_r+0x2e>
 801741c:	6063      	str	r3, [r4, #4]
 801741e:	6014      	str	r4, [r2, #0]
 8017420:	4628      	mov	r0, r5
 8017422:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017426:	f000 bf08 	b.w	801823a <__malloc_unlock>
 801742a:	42a3      	cmp	r3, r4
 801742c:	d90c      	bls.n	8017448 <_free_r+0x4c>
 801742e:	6821      	ldr	r1, [r4, #0]
 8017430:	1862      	adds	r2, r4, r1
 8017432:	4293      	cmp	r3, r2
 8017434:	bf04      	itt	eq
 8017436:	681a      	ldreq	r2, [r3, #0]
 8017438:	685b      	ldreq	r3, [r3, #4]
 801743a:	6063      	str	r3, [r4, #4]
 801743c:	bf04      	itt	eq
 801743e:	1852      	addeq	r2, r2, r1
 8017440:	6022      	streq	r2, [r4, #0]
 8017442:	6004      	str	r4, [r0, #0]
 8017444:	e7ec      	b.n	8017420 <_free_r+0x24>
 8017446:	4613      	mov	r3, r2
 8017448:	685a      	ldr	r2, [r3, #4]
 801744a:	b10a      	cbz	r2, 8017450 <_free_r+0x54>
 801744c:	42a2      	cmp	r2, r4
 801744e:	d9fa      	bls.n	8017446 <_free_r+0x4a>
 8017450:	6819      	ldr	r1, [r3, #0]
 8017452:	1858      	adds	r0, r3, r1
 8017454:	42a0      	cmp	r0, r4
 8017456:	d10b      	bne.n	8017470 <_free_r+0x74>
 8017458:	6820      	ldr	r0, [r4, #0]
 801745a:	4401      	add	r1, r0
 801745c:	1858      	adds	r0, r3, r1
 801745e:	4282      	cmp	r2, r0
 8017460:	6019      	str	r1, [r3, #0]
 8017462:	d1dd      	bne.n	8017420 <_free_r+0x24>
 8017464:	6810      	ldr	r0, [r2, #0]
 8017466:	6852      	ldr	r2, [r2, #4]
 8017468:	605a      	str	r2, [r3, #4]
 801746a:	4401      	add	r1, r0
 801746c:	6019      	str	r1, [r3, #0]
 801746e:	e7d7      	b.n	8017420 <_free_r+0x24>
 8017470:	d902      	bls.n	8017478 <_free_r+0x7c>
 8017472:	230c      	movs	r3, #12
 8017474:	602b      	str	r3, [r5, #0]
 8017476:	e7d3      	b.n	8017420 <_free_r+0x24>
 8017478:	6820      	ldr	r0, [r4, #0]
 801747a:	1821      	adds	r1, r4, r0
 801747c:	428a      	cmp	r2, r1
 801747e:	bf04      	itt	eq
 8017480:	6811      	ldreq	r1, [r2, #0]
 8017482:	6852      	ldreq	r2, [r2, #4]
 8017484:	6062      	str	r2, [r4, #4]
 8017486:	bf04      	itt	eq
 8017488:	1809      	addeq	r1, r1, r0
 801748a:	6021      	streq	r1, [r4, #0]
 801748c:	605c      	str	r4, [r3, #4]
 801748e:	e7c7      	b.n	8017420 <_free_r+0x24>
 8017490:	bd38      	pop	{r3, r4, r5, pc}
 8017492:	bf00      	nop
 8017494:	20004788 	.word	0x20004788

08017498 <_malloc_r>:
 8017498:	b570      	push	{r4, r5, r6, lr}
 801749a:	1ccd      	adds	r5, r1, #3
 801749c:	f025 0503 	bic.w	r5, r5, #3
 80174a0:	3508      	adds	r5, #8
 80174a2:	2d0c      	cmp	r5, #12
 80174a4:	bf38      	it	cc
 80174a6:	250c      	movcc	r5, #12
 80174a8:	2d00      	cmp	r5, #0
 80174aa:	4606      	mov	r6, r0
 80174ac:	db01      	blt.n	80174b2 <_malloc_r+0x1a>
 80174ae:	42a9      	cmp	r1, r5
 80174b0:	d903      	bls.n	80174ba <_malloc_r+0x22>
 80174b2:	230c      	movs	r3, #12
 80174b4:	6033      	str	r3, [r6, #0]
 80174b6:	2000      	movs	r0, #0
 80174b8:	bd70      	pop	{r4, r5, r6, pc}
 80174ba:	f000 febd 	bl	8018238 <__malloc_lock>
 80174be:	4a21      	ldr	r2, [pc, #132]	; (8017544 <_malloc_r+0xac>)
 80174c0:	6814      	ldr	r4, [r2, #0]
 80174c2:	4621      	mov	r1, r4
 80174c4:	b991      	cbnz	r1, 80174ec <_malloc_r+0x54>
 80174c6:	4c20      	ldr	r4, [pc, #128]	; (8017548 <_malloc_r+0xb0>)
 80174c8:	6823      	ldr	r3, [r4, #0]
 80174ca:	b91b      	cbnz	r3, 80174d4 <_malloc_r+0x3c>
 80174cc:	4630      	mov	r0, r6
 80174ce:	f000 fc57 	bl	8017d80 <_sbrk_r>
 80174d2:	6020      	str	r0, [r4, #0]
 80174d4:	4629      	mov	r1, r5
 80174d6:	4630      	mov	r0, r6
 80174d8:	f000 fc52 	bl	8017d80 <_sbrk_r>
 80174dc:	1c43      	adds	r3, r0, #1
 80174de:	d124      	bne.n	801752a <_malloc_r+0x92>
 80174e0:	230c      	movs	r3, #12
 80174e2:	6033      	str	r3, [r6, #0]
 80174e4:	4630      	mov	r0, r6
 80174e6:	f000 fea8 	bl	801823a <__malloc_unlock>
 80174ea:	e7e4      	b.n	80174b6 <_malloc_r+0x1e>
 80174ec:	680b      	ldr	r3, [r1, #0]
 80174ee:	1b5b      	subs	r3, r3, r5
 80174f0:	d418      	bmi.n	8017524 <_malloc_r+0x8c>
 80174f2:	2b0b      	cmp	r3, #11
 80174f4:	d90f      	bls.n	8017516 <_malloc_r+0x7e>
 80174f6:	600b      	str	r3, [r1, #0]
 80174f8:	50cd      	str	r5, [r1, r3]
 80174fa:	18cc      	adds	r4, r1, r3
 80174fc:	4630      	mov	r0, r6
 80174fe:	f000 fe9c 	bl	801823a <__malloc_unlock>
 8017502:	f104 000b 	add.w	r0, r4, #11
 8017506:	1d23      	adds	r3, r4, #4
 8017508:	f020 0007 	bic.w	r0, r0, #7
 801750c:	1ac3      	subs	r3, r0, r3
 801750e:	d0d3      	beq.n	80174b8 <_malloc_r+0x20>
 8017510:	425a      	negs	r2, r3
 8017512:	50e2      	str	r2, [r4, r3]
 8017514:	e7d0      	b.n	80174b8 <_malloc_r+0x20>
 8017516:	428c      	cmp	r4, r1
 8017518:	684b      	ldr	r3, [r1, #4]
 801751a:	bf16      	itet	ne
 801751c:	6063      	strne	r3, [r4, #4]
 801751e:	6013      	streq	r3, [r2, #0]
 8017520:	460c      	movne	r4, r1
 8017522:	e7eb      	b.n	80174fc <_malloc_r+0x64>
 8017524:	460c      	mov	r4, r1
 8017526:	6849      	ldr	r1, [r1, #4]
 8017528:	e7cc      	b.n	80174c4 <_malloc_r+0x2c>
 801752a:	1cc4      	adds	r4, r0, #3
 801752c:	f024 0403 	bic.w	r4, r4, #3
 8017530:	42a0      	cmp	r0, r4
 8017532:	d005      	beq.n	8017540 <_malloc_r+0xa8>
 8017534:	1a21      	subs	r1, r4, r0
 8017536:	4630      	mov	r0, r6
 8017538:	f000 fc22 	bl	8017d80 <_sbrk_r>
 801753c:	3001      	adds	r0, #1
 801753e:	d0cf      	beq.n	80174e0 <_malloc_r+0x48>
 8017540:	6025      	str	r5, [r4, #0]
 8017542:	e7db      	b.n	80174fc <_malloc_r+0x64>
 8017544:	20004788 	.word	0x20004788
 8017548:	2000478c 	.word	0x2000478c

0801754c <__ssputs_r>:
 801754c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017550:	688e      	ldr	r6, [r1, #8]
 8017552:	429e      	cmp	r6, r3
 8017554:	4682      	mov	sl, r0
 8017556:	460c      	mov	r4, r1
 8017558:	4690      	mov	r8, r2
 801755a:	4699      	mov	r9, r3
 801755c:	d837      	bhi.n	80175ce <__ssputs_r+0x82>
 801755e:	898a      	ldrh	r2, [r1, #12]
 8017560:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017564:	d031      	beq.n	80175ca <__ssputs_r+0x7e>
 8017566:	6825      	ldr	r5, [r4, #0]
 8017568:	6909      	ldr	r1, [r1, #16]
 801756a:	1a6f      	subs	r7, r5, r1
 801756c:	6965      	ldr	r5, [r4, #20]
 801756e:	2302      	movs	r3, #2
 8017570:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017574:	fb95 f5f3 	sdiv	r5, r5, r3
 8017578:	f109 0301 	add.w	r3, r9, #1
 801757c:	443b      	add	r3, r7
 801757e:	429d      	cmp	r5, r3
 8017580:	bf38      	it	cc
 8017582:	461d      	movcc	r5, r3
 8017584:	0553      	lsls	r3, r2, #21
 8017586:	d530      	bpl.n	80175ea <__ssputs_r+0x9e>
 8017588:	4629      	mov	r1, r5
 801758a:	f7ff ff85 	bl	8017498 <_malloc_r>
 801758e:	4606      	mov	r6, r0
 8017590:	b950      	cbnz	r0, 80175a8 <__ssputs_r+0x5c>
 8017592:	230c      	movs	r3, #12
 8017594:	f8ca 3000 	str.w	r3, [sl]
 8017598:	89a3      	ldrh	r3, [r4, #12]
 801759a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801759e:	81a3      	strh	r3, [r4, #12]
 80175a0:	f04f 30ff 	mov.w	r0, #4294967295
 80175a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175a8:	463a      	mov	r2, r7
 80175aa:	6921      	ldr	r1, [r4, #16]
 80175ac:	f7ff fda1 	bl	80170f2 <memcpy>
 80175b0:	89a3      	ldrh	r3, [r4, #12]
 80175b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80175b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80175ba:	81a3      	strh	r3, [r4, #12]
 80175bc:	6126      	str	r6, [r4, #16]
 80175be:	6165      	str	r5, [r4, #20]
 80175c0:	443e      	add	r6, r7
 80175c2:	1bed      	subs	r5, r5, r7
 80175c4:	6026      	str	r6, [r4, #0]
 80175c6:	60a5      	str	r5, [r4, #8]
 80175c8:	464e      	mov	r6, r9
 80175ca:	454e      	cmp	r6, r9
 80175cc:	d900      	bls.n	80175d0 <__ssputs_r+0x84>
 80175ce:	464e      	mov	r6, r9
 80175d0:	4632      	mov	r2, r6
 80175d2:	4641      	mov	r1, r8
 80175d4:	6820      	ldr	r0, [r4, #0]
 80175d6:	f7ff fd97 	bl	8017108 <memmove>
 80175da:	68a3      	ldr	r3, [r4, #8]
 80175dc:	1b9b      	subs	r3, r3, r6
 80175de:	60a3      	str	r3, [r4, #8]
 80175e0:	6823      	ldr	r3, [r4, #0]
 80175e2:	441e      	add	r6, r3
 80175e4:	6026      	str	r6, [r4, #0]
 80175e6:	2000      	movs	r0, #0
 80175e8:	e7dc      	b.n	80175a4 <__ssputs_r+0x58>
 80175ea:	462a      	mov	r2, r5
 80175ec:	f000 fe26 	bl	801823c <_realloc_r>
 80175f0:	4606      	mov	r6, r0
 80175f2:	2800      	cmp	r0, #0
 80175f4:	d1e2      	bne.n	80175bc <__ssputs_r+0x70>
 80175f6:	6921      	ldr	r1, [r4, #16]
 80175f8:	4650      	mov	r0, sl
 80175fa:	f7ff feff 	bl	80173fc <_free_r>
 80175fe:	e7c8      	b.n	8017592 <__ssputs_r+0x46>

08017600 <_svfiprintf_r>:
 8017600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017604:	461d      	mov	r5, r3
 8017606:	898b      	ldrh	r3, [r1, #12]
 8017608:	061f      	lsls	r7, r3, #24
 801760a:	b09d      	sub	sp, #116	; 0x74
 801760c:	4680      	mov	r8, r0
 801760e:	460c      	mov	r4, r1
 8017610:	4616      	mov	r6, r2
 8017612:	d50f      	bpl.n	8017634 <_svfiprintf_r+0x34>
 8017614:	690b      	ldr	r3, [r1, #16]
 8017616:	b96b      	cbnz	r3, 8017634 <_svfiprintf_r+0x34>
 8017618:	2140      	movs	r1, #64	; 0x40
 801761a:	f7ff ff3d 	bl	8017498 <_malloc_r>
 801761e:	6020      	str	r0, [r4, #0]
 8017620:	6120      	str	r0, [r4, #16]
 8017622:	b928      	cbnz	r0, 8017630 <_svfiprintf_r+0x30>
 8017624:	230c      	movs	r3, #12
 8017626:	f8c8 3000 	str.w	r3, [r8]
 801762a:	f04f 30ff 	mov.w	r0, #4294967295
 801762e:	e0c8      	b.n	80177c2 <_svfiprintf_r+0x1c2>
 8017630:	2340      	movs	r3, #64	; 0x40
 8017632:	6163      	str	r3, [r4, #20]
 8017634:	2300      	movs	r3, #0
 8017636:	9309      	str	r3, [sp, #36]	; 0x24
 8017638:	2320      	movs	r3, #32
 801763a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801763e:	2330      	movs	r3, #48	; 0x30
 8017640:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017644:	9503      	str	r5, [sp, #12]
 8017646:	f04f 0b01 	mov.w	fp, #1
 801764a:	4637      	mov	r7, r6
 801764c:	463d      	mov	r5, r7
 801764e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017652:	b10b      	cbz	r3, 8017658 <_svfiprintf_r+0x58>
 8017654:	2b25      	cmp	r3, #37	; 0x25
 8017656:	d13e      	bne.n	80176d6 <_svfiprintf_r+0xd6>
 8017658:	ebb7 0a06 	subs.w	sl, r7, r6
 801765c:	d00b      	beq.n	8017676 <_svfiprintf_r+0x76>
 801765e:	4653      	mov	r3, sl
 8017660:	4632      	mov	r2, r6
 8017662:	4621      	mov	r1, r4
 8017664:	4640      	mov	r0, r8
 8017666:	f7ff ff71 	bl	801754c <__ssputs_r>
 801766a:	3001      	adds	r0, #1
 801766c:	f000 80a4 	beq.w	80177b8 <_svfiprintf_r+0x1b8>
 8017670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017672:	4453      	add	r3, sl
 8017674:	9309      	str	r3, [sp, #36]	; 0x24
 8017676:	783b      	ldrb	r3, [r7, #0]
 8017678:	2b00      	cmp	r3, #0
 801767a:	f000 809d 	beq.w	80177b8 <_svfiprintf_r+0x1b8>
 801767e:	2300      	movs	r3, #0
 8017680:	f04f 32ff 	mov.w	r2, #4294967295
 8017684:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017688:	9304      	str	r3, [sp, #16]
 801768a:	9307      	str	r3, [sp, #28]
 801768c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017690:	931a      	str	r3, [sp, #104]	; 0x68
 8017692:	462f      	mov	r7, r5
 8017694:	2205      	movs	r2, #5
 8017696:	f817 1b01 	ldrb.w	r1, [r7], #1
 801769a:	4850      	ldr	r0, [pc, #320]	; (80177dc <_svfiprintf_r+0x1dc>)
 801769c:	f7e8 fde8 	bl	8000270 <memchr>
 80176a0:	9b04      	ldr	r3, [sp, #16]
 80176a2:	b9d0      	cbnz	r0, 80176da <_svfiprintf_r+0xda>
 80176a4:	06d9      	lsls	r1, r3, #27
 80176a6:	bf44      	itt	mi
 80176a8:	2220      	movmi	r2, #32
 80176aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80176ae:	071a      	lsls	r2, r3, #28
 80176b0:	bf44      	itt	mi
 80176b2:	222b      	movmi	r2, #43	; 0x2b
 80176b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80176b8:	782a      	ldrb	r2, [r5, #0]
 80176ba:	2a2a      	cmp	r2, #42	; 0x2a
 80176bc:	d015      	beq.n	80176ea <_svfiprintf_r+0xea>
 80176be:	9a07      	ldr	r2, [sp, #28]
 80176c0:	462f      	mov	r7, r5
 80176c2:	2000      	movs	r0, #0
 80176c4:	250a      	movs	r5, #10
 80176c6:	4639      	mov	r1, r7
 80176c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80176cc:	3b30      	subs	r3, #48	; 0x30
 80176ce:	2b09      	cmp	r3, #9
 80176d0:	d94d      	bls.n	801776e <_svfiprintf_r+0x16e>
 80176d2:	b1b8      	cbz	r0, 8017704 <_svfiprintf_r+0x104>
 80176d4:	e00f      	b.n	80176f6 <_svfiprintf_r+0xf6>
 80176d6:	462f      	mov	r7, r5
 80176d8:	e7b8      	b.n	801764c <_svfiprintf_r+0x4c>
 80176da:	4a40      	ldr	r2, [pc, #256]	; (80177dc <_svfiprintf_r+0x1dc>)
 80176dc:	1a80      	subs	r0, r0, r2
 80176de:	fa0b f000 	lsl.w	r0, fp, r0
 80176e2:	4318      	orrs	r0, r3
 80176e4:	9004      	str	r0, [sp, #16]
 80176e6:	463d      	mov	r5, r7
 80176e8:	e7d3      	b.n	8017692 <_svfiprintf_r+0x92>
 80176ea:	9a03      	ldr	r2, [sp, #12]
 80176ec:	1d11      	adds	r1, r2, #4
 80176ee:	6812      	ldr	r2, [r2, #0]
 80176f0:	9103      	str	r1, [sp, #12]
 80176f2:	2a00      	cmp	r2, #0
 80176f4:	db01      	blt.n	80176fa <_svfiprintf_r+0xfa>
 80176f6:	9207      	str	r2, [sp, #28]
 80176f8:	e004      	b.n	8017704 <_svfiprintf_r+0x104>
 80176fa:	4252      	negs	r2, r2
 80176fc:	f043 0302 	orr.w	r3, r3, #2
 8017700:	9207      	str	r2, [sp, #28]
 8017702:	9304      	str	r3, [sp, #16]
 8017704:	783b      	ldrb	r3, [r7, #0]
 8017706:	2b2e      	cmp	r3, #46	; 0x2e
 8017708:	d10c      	bne.n	8017724 <_svfiprintf_r+0x124>
 801770a:	787b      	ldrb	r3, [r7, #1]
 801770c:	2b2a      	cmp	r3, #42	; 0x2a
 801770e:	d133      	bne.n	8017778 <_svfiprintf_r+0x178>
 8017710:	9b03      	ldr	r3, [sp, #12]
 8017712:	1d1a      	adds	r2, r3, #4
 8017714:	681b      	ldr	r3, [r3, #0]
 8017716:	9203      	str	r2, [sp, #12]
 8017718:	2b00      	cmp	r3, #0
 801771a:	bfb8      	it	lt
 801771c:	f04f 33ff 	movlt.w	r3, #4294967295
 8017720:	3702      	adds	r7, #2
 8017722:	9305      	str	r3, [sp, #20]
 8017724:	4d2e      	ldr	r5, [pc, #184]	; (80177e0 <_svfiprintf_r+0x1e0>)
 8017726:	7839      	ldrb	r1, [r7, #0]
 8017728:	2203      	movs	r2, #3
 801772a:	4628      	mov	r0, r5
 801772c:	f7e8 fda0 	bl	8000270 <memchr>
 8017730:	b138      	cbz	r0, 8017742 <_svfiprintf_r+0x142>
 8017732:	2340      	movs	r3, #64	; 0x40
 8017734:	1b40      	subs	r0, r0, r5
 8017736:	fa03 f000 	lsl.w	r0, r3, r0
 801773a:	9b04      	ldr	r3, [sp, #16]
 801773c:	4303      	orrs	r3, r0
 801773e:	3701      	adds	r7, #1
 8017740:	9304      	str	r3, [sp, #16]
 8017742:	7839      	ldrb	r1, [r7, #0]
 8017744:	4827      	ldr	r0, [pc, #156]	; (80177e4 <_svfiprintf_r+0x1e4>)
 8017746:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801774a:	2206      	movs	r2, #6
 801774c:	1c7e      	adds	r6, r7, #1
 801774e:	f7e8 fd8f 	bl	8000270 <memchr>
 8017752:	2800      	cmp	r0, #0
 8017754:	d038      	beq.n	80177c8 <_svfiprintf_r+0x1c8>
 8017756:	4b24      	ldr	r3, [pc, #144]	; (80177e8 <_svfiprintf_r+0x1e8>)
 8017758:	bb13      	cbnz	r3, 80177a0 <_svfiprintf_r+0x1a0>
 801775a:	9b03      	ldr	r3, [sp, #12]
 801775c:	3307      	adds	r3, #7
 801775e:	f023 0307 	bic.w	r3, r3, #7
 8017762:	3308      	adds	r3, #8
 8017764:	9303      	str	r3, [sp, #12]
 8017766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017768:	444b      	add	r3, r9
 801776a:	9309      	str	r3, [sp, #36]	; 0x24
 801776c:	e76d      	b.n	801764a <_svfiprintf_r+0x4a>
 801776e:	fb05 3202 	mla	r2, r5, r2, r3
 8017772:	2001      	movs	r0, #1
 8017774:	460f      	mov	r7, r1
 8017776:	e7a6      	b.n	80176c6 <_svfiprintf_r+0xc6>
 8017778:	2300      	movs	r3, #0
 801777a:	3701      	adds	r7, #1
 801777c:	9305      	str	r3, [sp, #20]
 801777e:	4619      	mov	r1, r3
 8017780:	250a      	movs	r5, #10
 8017782:	4638      	mov	r0, r7
 8017784:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017788:	3a30      	subs	r2, #48	; 0x30
 801778a:	2a09      	cmp	r2, #9
 801778c:	d903      	bls.n	8017796 <_svfiprintf_r+0x196>
 801778e:	2b00      	cmp	r3, #0
 8017790:	d0c8      	beq.n	8017724 <_svfiprintf_r+0x124>
 8017792:	9105      	str	r1, [sp, #20]
 8017794:	e7c6      	b.n	8017724 <_svfiprintf_r+0x124>
 8017796:	fb05 2101 	mla	r1, r5, r1, r2
 801779a:	2301      	movs	r3, #1
 801779c:	4607      	mov	r7, r0
 801779e:	e7f0      	b.n	8017782 <_svfiprintf_r+0x182>
 80177a0:	ab03      	add	r3, sp, #12
 80177a2:	9300      	str	r3, [sp, #0]
 80177a4:	4622      	mov	r2, r4
 80177a6:	4b11      	ldr	r3, [pc, #68]	; (80177ec <_svfiprintf_r+0x1ec>)
 80177a8:	a904      	add	r1, sp, #16
 80177aa:	4640      	mov	r0, r8
 80177ac:	f3af 8000 	nop.w
 80177b0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80177b4:	4681      	mov	r9, r0
 80177b6:	d1d6      	bne.n	8017766 <_svfiprintf_r+0x166>
 80177b8:	89a3      	ldrh	r3, [r4, #12]
 80177ba:	065b      	lsls	r3, r3, #25
 80177bc:	f53f af35 	bmi.w	801762a <_svfiprintf_r+0x2a>
 80177c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80177c2:	b01d      	add	sp, #116	; 0x74
 80177c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177c8:	ab03      	add	r3, sp, #12
 80177ca:	9300      	str	r3, [sp, #0]
 80177cc:	4622      	mov	r2, r4
 80177ce:	4b07      	ldr	r3, [pc, #28]	; (80177ec <_svfiprintf_r+0x1ec>)
 80177d0:	a904      	add	r1, sp, #16
 80177d2:	4640      	mov	r0, r8
 80177d4:	f000 f9c2 	bl	8017b5c <_printf_i>
 80177d8:	e7ea      	b.n	80177b0 <_svfiprintf_r+0x1b0>
 80177da:	bf00      	nop
 80177dc:	0801b998 	.word	0x0801b998
 80177e0:	0801b99e 	.word	0x0801b99e
 80177e4:	0801b9a2 	.word	0x0801b9a2
 80177e8:	00000000 	.word	0x00000000
 80177ec:	0801754d 	.word	0x0801754d

080177f0 <__sfputc_r>:
 80177f0:	6893      	ldr	r3, [r2, #8]
 80177f2:	3b01      	subs	r3, #1
 80177f4:	2b00      	cmp	r3, #0
 80177f6:	b410      	push	{r4}
 80177f8:	6093      	str	r3, [r2, #8]
 80177fa:	da08      	bge.n	801780e <__sfputc_r+0x1e>
 80177fc:	6994      	ldr	r4, [r2, #24]
 80177fe:	42a3      	cmp	r3, r4
 8017800:	db01      	blt.n	8017806 <__sfputc_r+0x16>
 8017802:	290a      	cmp	r1, #10
 8017804:	d103      	bne.n	801780e <__sfputc_r+0x1e>
 8017806:	f85d 4b04 	ldr.w	r4, [sp], #4
 801780a:	f000 bb0d 	b.w	8017e28 <__swbuf_r>
 801780e:	6813      	ldr	r3, [r2, #0]
 8017810:	1c58      	adds	r0, r3, #1
 8017812:	6010      	str	r0, [r2, #0]
 8017814:	7019      	strb	r1, [r3, #0]
 8017816:	4608      	mov	r0, r1
 8017818:	f85d 4b04 	ldr.w	r4, [sp], #4
 801781c:	4770      	bx	lr

0801781e <__sfputs_r>:
 801781e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017820:	4606      	mov	r6, r0
 8017822:	460f      	mov	r7, r1
 8017824:	4614      	mov	r4, r2
 8017826:	18d5      	adds	r5, r2, r3
 8017828:	42ac      	cmp	r4, r5
 801782a:	d101      	bne.n	8017830 <__sfputs_r+0x12>
 801782c:	2000      	movs	r0, #0
 801782e:	e007      	b.n	8017840 <__sfputs_r+0x22>
 8017830:	463a      	mov	r2, r7
 8017832:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017836:	4630      	mov	r0, r6
 8017838:	f7ff ffda 	bl	80177f0 <__sfputc_r>
 801783c:	1c43      	adds	r3, r0, #1
 801783e:	d1f3      	bne.n	8017828 <__sfputs_r+0xa>
 8017840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017844 <_vfiprintf_r>:
 8017844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017848:	460c      	mov	r4, r1
 801784a:	b09d      	sub	sp, #116	; 0x74
 801784c:	4617      	mov	r7, r2
 801784e:	461d      	mov	r5, r3
 8017850:	4606      	mov	r6, r0
 8017852:	b118      	cbz	r0, 801785c <_vfiprintf_r+0x18>
 8017854:	6983      	ldr	r3, [r0, #24]
 8017856:	b90b      	cbnz	r3, 801785c <_vfiprintf_r+0x18>
 8017858:	f7ff fd3e 	bl	80172d8 <__sinit>
 801785c:	4b7c      	ldr	r3, [pc, #496]	; (8017a50 <_vfiprintf_r+0x20c>)
 801785e:	429c      	cmp	r4, r3
 8017860:	d158      	bne.n	8017914 <_vfiprintf_r+0xd0>
 8017862:	6874      	ldr	r4, [r6, #4]
 8017864:	89a3      	ldrh	r3, [r4, #12]
 8017866:	0718      	lsls	r0, r3, #28
 8017868:	d55e      	bpl.n	8017928 <_vfiprintf_r+0xe4>
 801786a:	6923      	ldr	r3, [r4, #16]
 801786c:	2b00      	cmp	r3, #0
 801786e:	d05b      	beq.n	8017928 <_vfiprintf_r+0xe4>
 8017870:	2300      	movs	r3, #0
 8017872:	9309      	str	r3, [sp, #36]	; 0x24
 8017874:	2320      	movs	r3, #32
 8017876:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801787a:	2330      	movs	r3, #48	; 0x30
 801787c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017880:	9503      	str	r5, [sp, #12]
 8017882:	f04f 0b01 	mov.w	fp, #1
 8017886:	46b8      	mov	r8, r7
 8017888:	4645      	mov	r5, r8
 801788a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801788e:	b10b      	cbz	r3, 8017894 <_vfiprintf_r+0x50>
 8017890:	2b25      	cmp	r3, #37	; 0x25
 8017892:	d154      	bne.n	801793e <_vfiprintf_r+0xfa>
 8017894:	ebb8 0a07 	subs.w	sl, r8, r7
 8017898:	d00b      	beq.n	80178b2 <_vfiprintf_r+0x6e>
 801789a:	4653      	mov	r3, sl
 801789c:	463a      	mov	r2, r7
 801789e:	4621      	mov	r1, r4
 80178a0:	4630      	mov	r0, r6
 80178a2:	f7ff ffbc 	bl	801781e <__sfputs_r>
 80178a6:	3001      	adds	r0, #1
 80178a8:	f000 80c2 	beq.w	8017a30 <_vfiprintf_r+0x1ec>
 80178ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80178ae:	4453      	add	r3, sl
 80178b0:	9309      	str	r3, [sp, #36]	; 0x24
 80178b2:	f898 3000 	ldrb.w	r3, [r8]
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	f000 80ba 	beq.w	8017a30 <_vfiprintf_r+0x1ec>
 80178bc:	2300      	movs	r3, #0
 80178be:	f04f 32ff 	mov.w	r2, #4294967295
 80178c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80178c6:	9304      	str	r3, [sp, #16]
 80178c8:	9307      	str	r3, [sp, #28]
 80178ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80178ce:	931a      	str	r3, [sp, #104]	; 0x68
 80178d0:	46a8      	mov	r8, r5
 80178d2:	2205      	movs	r2, #5
 80178d4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80178d8:	485e      	ldr	r0, [pc, #376]	; (8017a54 <_vfiprintf_r+0x210>)
 80178da:	f7e8 fcc9 	bl	8000270 <memchr>
 80178de:	9b04      	ldr	r3, [sp, #16]
 80178e0:	bb78      	cbnz	r0, 8017942 <_vfiprintf_r+0xfe>
 80178e2:	06d9      	lsls	r1, r3, #27
 80178e4:	bf44      	itt	mi
 80178e6:	2220      	movmi	r2, #32
 80178e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80178ec:	071a      	lsls	r2, r3, #28
 80178ee:	bf44      	itt	mi
 80178f0:	222b      	movmi	r2, #43	; 0x2b
 80178f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80178f6:	782a      	ldrb	r2, [r5, #0]
 80178f8:	2a2a      	cmp	r2, #42	; 0x2a
 80178fa:	d02a      	beq.n	8017952 <_vfiprintf_r+0x10e>
 80178fc:	9a07      	ldr	r2, [sp, #28]
 80178fe:	46a8      	mov	r8, r5
 8017900:	2000      	movs	r0, #0
 8017902:	250a      	movs	r5, #10
 8017904:	4641      	mov	r1, r8
 8017906:	f811 3b01 	ldrb.w	r3, [r1], #1
 801790a:	3b30      	subs	r3, #48	; 0x30
 801790c:	2b09      	cmp	r3, #9
 801790e:	d969      	bls.n	80179e4 <_vfiprintf_r+0x1a0>
 8017910:	b360      	cbz	r0, 801796c <_vfiprintf_r+0x128>
 8017912:	e024      	b.n	801795e <_vfiprintf_r+0x11a>
 8017914:	4b50      	ldr	r3, [pc, #320]	; (8017a58 <_vfiprintf_r+0x214>)
 8017916:	429c      	cmp	r4, r3
 8017918:	d101      	bne.n	801791e <_vfiprintf_r+0xda>
 801791a:	68b4      	ldr	r4, [r6, #8]
 801791c:	e7a2      	b.n	8017864 <_vfiprintf_r+0x20>
 801791e:	4b4f      	ldr	r3, [pc, #316]	; (8017a5c <_vfiprintf_r+0x218>)
 8017920:	429c      	cmp	r4, r3
 8017922:	bf08      	it	eq
 8017924:	68f4      	ldreq	r4, [r6, #12]
 8017926:	e79d      	b.n	8017864 <_vfiprintf_r+0x20>
 8017928:	4621      	mov	r1, r4
 801792a:	4630      	mov	r0, r6
 801792c:	f000 fae0 	bl	8017ef0 <__swsetup_r>
 8017930:	2800      	cmp	r0, #0
 8017932:	d09d      	beq.n	8017870 <_vfiprintf_r+0x2c>
 8017934:	f04f 30ff 	mov.w	r0, #4294967295
 8017938:	b01d      	add	sp, #116	; 0x74
 801793a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801793e:	46a8      	mov	r8, r5
 8017940:	e7a2      	b.n	8017888 <_vfiprintf_r+0x44>
 8017942:	4a44      	ldr	r2, [pc, #272]	; (8017a54 <_vfiprintf_r+0x210>)
 8017944:	1a80      	subs	r0, r0, r2
 8017946:	fa0b f000 	lsl.w	r0, fp, r0
 801794a:	4318      	orrs	r0, r3
 801794c:	9004      	str	r0, [sp, #16]
 801794e:	4645      	mov	r5, r8
 8017950:	e7be      	b.n	80178d0 <_vfiprintf_r+0x8c>
 8017952:	9a03      	ldr	r2, [sp, #12]
 8017954:	1d11      	adds	r1, r2, #4
 8017956:	6812      	ldr	r2, [r2, #0]
 8017958:	9103      	str	r1, [sp, #12]
 801795a:	2a00      	cmp	r2, #0
 801795c:	db01      	blt.n	8017962 <_vfiprintf_r+0x11e>
 801795e:	9207      	str	r2, [sp, #28]
 8017960:	e004      	b.n	801796c <_vfiprintf_r+0x128>
 8017962:	4252      	negs	r2, r2
 8017964:	f043 0302 	orr.w	r3, r3, #2
 8017968:	9207      	str	r2, [sp, #28]
 801796a:	9304      	str	r3, [sp, #16]
 801796c:	f898 3000 	ldrb.w	r3, [r8]
 8017970:	2b2e      	cmp	r3, #46	; 0x2e
 8017972:	d10e      	bne.n	8017992 <_vfiprintf_r+0x14e>
 8017974:	f898 3001 	ldrb.w	r3, [r8, #1]
 8017978:	2b2a      	cmp	r3, #42	; 0x2a
 801797a:	d138      	bne.n	80179ee <_vfiprintf_r+0x1aa>
 801797c:	9b03      	ldr	r3, [sp, #12]
 801797e:	1d1a      	adds	r2, r3, #4
 8017980:	681b      	ldr	r3, [r3, #0]
 8017982:	9203      	str	r2, [sp, #12]
 8017984:	2b00      	cmp	r3, #0
 8017986:	bfb8      	it	lt
 8017988:	f04f 33ff 	movlt.w	r3, #4294967295
 801798c:	f108 0802 	add.w	r8, r8, #2
 8017990:	9305      	str	r3, [sp, #20]
 8017992:	4d33      	ldr	r5, [pc, #204]	; (8017a60 <_vfiprintf_r+0x21c>)
 8017994:	f898 1000 	ldrb.w	r1, [r8]
 8017998:	2203      	movs	r2, #3
 801799a:	4628      	mov	r0, r5
 801799c:	f7e8 fc68 	bl	8000270 <memchr>
 80179a0:	b140      	cbz	r0, 80179b4 <_vfiprintf_r+0x170>
 80179a2:	2340      	movs	r3, #64	; 0x40
 80179a4:	1b40      	subs	r0, r0, r5
 80179a6:	fa03 f000 	lsl.w	r0, r3, r0
 80179aa:	9b04      	ldr	r3, [sp, #16]
 80179ac:	4303      	orrs	r3, r0
 80179ae:	f108 0801 	add.w	r8, r8, #1
 80179b2:	9304      	str	r3, [sp, #16]
 80179b4:	f898 1000 	ldrb.w	r1, [r8]
 80179b8:	482a      	ldr	r0, [pc, #168]	; (8017a64 <_vfiprintf_r+0x220>)
 80179ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80179be:	2206      	movs	r2, #6
 80179c0:	f108 0701 	add.w	r7, r8, #1
 80179c4:	f7e8 fc54 	bl	8000270 <memchr>
 80179c8:	2800      	cmp	r0, #0
 80179ca:	d037      	beq.n	8017a3c <_vfiprintf_r+0x1f8>
 80179cc:	4b26      	ldr	r3, [pc, #152]	; (8017a68 <_vfiprintf_r+0x224>)
 80179ce:	bb1b      	cbnz	r3, 8017a18 <_vfiprintf_r+0x1d4>
 80179d0:	9b03      	ldr	r3, [sp, #12]
 80179d2:	3307      	adds	r3, #7
 80179d4:	f023 0307 	bic.w	r3, r3, #7
 80179d8:	3308      	adds	r3, #8
 80179da:	9303      	str	r3, [sp, #12]
 80179dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80179de:	444b      	add	r3, r9
 80179e0:	9309      	str	r3, [sp, #36]	; 0x24
 80179e2:	e750      	b.n	8017886 <_vfiprintf_r+0x42>
 80179e4:	fb05 3202 	mla	r2, r5, r2, r3
 80179e8:	2001      	movs	r0, #1
 80179ea:	4688      	mov	r8, r1
 80179ec:	e78a      	b.n	8017904 <_vfiprintf_r+0xc0>
 80179ee:	2300      	movs	r3, #0
 80179f0:	f108 0801 	add.w	r8, r8, #1
 80179f4:	9305      	str	r3, [sp, #20]
 80179f6:	4619      	mov	r1, r3
 80179f8:	250a      	movs	r5, #10
 80179fa:	4640      	mov	r0, r8
 80179fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017a00:	3a30      	subs	r2, #48	; 0x30
 8017a02:	2a09      	cmp	r2, #9
 8017a04:	d903      	bls.n	8017a0e <_vfiprintf_r+0x1ca>
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	d0c3      	beq.n	8017992 <_vfiprintf_r+0x14e>
 8017a0a:	9105      	str	r1, [sp, #20]
 8017a0c:	e7c1      	b.n	8017992 <_vfiprintf_r+0x14e>
 8017a0e:	fb05 2101 	mla	r1, r5, r1, r2
 8017a12:	2301      	movs	r3, #1
 8017a14:	4680      	mov	r8, r0
 8017a16:	e7f0      	b.n	80179fa <_vfiprintf_r+0x1b6>
 8017a18:	ab03      	add	r3, sp, #12
 8017a1a:	9300      	str	r3, [sp, #0]
 8017a1c:	4622      	mov	r2, r4
 8017a1e:	4b13      	ldr	r3, [pc, #76]	; (8017a6c <_vfiprintf_r+0x228>)
 8017a20:	a904      	add	r1, sp, #16
 8017a22:	4630      	mov	r0, r6
 8017a24:	f3af 8000 	nop.w
 8017a28:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017a2c:	4681      	mov	r9, r0
 8017a2e:	d1d5      	bne.n	80179dc <_vfiprintf_r+0x198>
 8017a30:	89a3      	ldrh	r3, [r4, #12]
 8017a32:	065b      	lsls	r3, r3, #25
 8017a34:	f53f af7e 	bmi.w	8017934 <_vfiprintf_r+0xf0>
 8017a38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017a3a:	e77d      	b.n	8017938 <_vfiprintf_r+0xf4>
 8017a3c:	ab03      	add	r3, sp, #12
 8017a3e:	9300      	str	r3, [sp, #0]
 8017a40:	4622      	mov	r2, r4
 8017a42:	4b0a      	ldr	r3, [pc, #40]	; (8017a6c <_vfiprintf_r+0x228>)
 8017a44:	a904      	add	r1, sp, #16
 8017a46:	4630      	mov	r0, r6
 8017a48:	f000 f888 	bl	8017b5c <_printf_i>
 8017a4c:	e7ec      	b.n	8017a28 <_vfiprintf_r+0x1e4>
 8017a4e:	bf00      	nop
 8017a50:	0801b958 	.word	0x0801b958
 8017a54:	0801b998 	.word	0x0801b998
 8017a58:	0801b978 	.word	0x0801b978
 8017a5c:	0801b938 	.word	0x0801b938
 8017a60:	0801b99e 	.word	0x0801b99e
 8017a64:	0801b9a2 	.word	0x0801b9a2
 8017a68:	00000000 	.word	0x00000000
 8017a6c:	0801781f 	.word	0x0801781f

08017a70 <_printf_common>:
 8017a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a74:	4691      	mov	r9, r2
 8017a76:	461f      	mov	r7, r3
 8017a78:	688a      	ldr	r2, [r1, #8]
 8017a7a:	690b      	ldr	r3, [r1, #16]
 8017a7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017a80:	4293      	cmp	r3, r2
 8017a82:	bfb8      	it	lt
 8017a84:	4613      	movlt	r3, r2
 8017a86:	f8c9 3000 	str.w	r3, [r9]
 8017a8a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017a8e:	4606      	mov	r6, r0
 8017a90:	460c      	mov	r4, r1
 8017a92:	b112      	cbz	r2, 8017a9a <_printf_common+0x2a>
 8017a94:	3301      	adds	r3, #1
 8017a96:	f8c9 3000 	str.w	r3, [r9]
 8017a9a:	6823      	ldr	r3, [r4, #0]
 8017a9c:	0699      	lsls	r1, r3, #26
 8017a9e:	bf42      	ittt	mi
 8017aa0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8017aa4:	3302      	addmi	r3, #2
 8017aa6:	f8c9 3000 	strmi.w	r3, [r9]
 8017aaa:	6825      	ldr	r5, [r4, #0]
 8017aac:	f015 0506 	ands.w	r5, r5, #6
 8017ab0:	d107      	bne.n	8017ac2 <_printf_common+0x52>
 8017ab2:	f104 0a19 	add.w	sl, r4, #25
 8017ab6:	68e3      	ldr	r3, [r4, #12]
 8017ab8:	f8d9 2000 	ldr.w	r2, [r9]
 8017abc:	1a9b      	subs	r3, r3, r2
 8017abe:	42ab      	cmp	r3, r5
 8017ac0:	dc28      	bgt.n	8017b14 <_printf_common+0xa4>
 8017ac2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8017ac6:	6822      	ldr	r2, [r4, #0]
 8017ac8:	3300      	adds	r3, #0
 8017aca:	bf18      	it	ne
 8017acc:	2301      	movne	r3, #1
 8017ace:	0692      	lsls	r2, r2, #26
 8017ad0:	d42d      	bmi.n	8017b2e <_printf_common+0xbe>
 8017ad2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017ad6:	4639      	mov	r1, r7
 8017ad8:	4630      	mov	r0, r6
 8017ada:	47c0      	blx	r8
 8017adc:	3001      	adds	r0, #1
 8017ade:	d020      	beq.n	8017b22 <_printf_common+0xb2>
 8017ae0:	6823      	ldr	r3, [r4, #0]
 8017ae2:	68e5      	ldr	r5, [r4, #12]
 8017ae4:	f8d9 2000 	ldr.w	r2, [r9]
 8017ae8:	f003 0306 	and.w	r3, r3, #6
 8017aec:	2b04      	cmp	r3, #4
 8017aee:	bf08      	it	eq
 8017af0:	1aad      	subeq	r5, r5, r2
 8017af2:	68a3      	ldr	r3, [r4, #8]
 8017af4:	6922      	ldr	r2, [r4, #16]
 8017af6:	bf0c      	ite	eq
 8017af8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017afc:	2500      	movne	r5, #0
 8017afe:	4293      	cmp	r3, r2
 8017b00:	bfc4      	itt	gt
 8017b02:	1a9b      	subgt	r3, r3, r2
 8017b04:	18ed      	addgt	r5, r5, r3
 8017b06:	f04f 0900 	mov.w	r9, #0
 8017b0a:	341a      	adds	r4, #26
 8017b0c:	454d      	cmp	r5, r9
 8017b0e:	d11a      	bne.n	8017b46 <_printf_common+0xd6>
 8017b10:	2000      	movs	r0, #0
 8017b12:	e008      	b.n	8017b26 <_printf_common+0xb6>
 8017b14:	2301      	movs	r3, #1
 8017b16:	4652      	mov	r2, sl
 8017b18:	4639      	mov	r1, r7
 8017b1a:	4630      	mov	r0, r6
 8017b1c:	47c0      	blx	r8
 8017b1e:	3001      	adds	r0, #1
 8017b20:	d103      	bne.n	8017b2a <_printf_common+0xba>
 8017b22:	f04f 30ff 	mov.w	r0, #4294967295
 8017b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b2a:	3501      	adds	r5, #1
 8017b2c:	e7c3      	b.n	8017ab6 <_printf_common+0x46>
 8017b2e:	18e1      	adds	r1, r4, r3
 8017b30:	1c5a      	adds	r2, r3, #1
 8017b32:	2030      	movs	r0, #48	; 0x30
 8017b34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017b38:	4422      	add	r2, r4
 8017b3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017b3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017b42:	3302      	adds	r3, #2
 8017b44:	e7c5      	b.n	8017ad2 <_printf_common+0x62>
 8017b46:	2301      	movs	r3, #1
 8017b48:	4622      	mov	r2, r4
 8017b4a:	4639      	mov	r1, r7
 8017b4c:	4630      	mov	r0, r6
 8017b4e:	47c0      	blx	r8
 8017b50:	3001      	adds	r0, #1
 8017b52:	d0e6      	beq.n	8017b22 <_printf_common+0xb2>
 8017b54:	f109 0901 	add.w	r9, r9, #1
 8017b58:	e7d8      	b.n	8017b0c <_printf_common+0x9c>
	...

08017b5c <_printf_i>:
 8017b5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017b60:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8017b64:	460c      	mov	r4, r1
 8017b66:	7e09      	ldrb	r1, [r1, #24]
 8017b68:	b085      	sub	sp, #20
 8017b6a:	296e      	cmp	r1, #110	; 0x6e
 8017b6c:	4617      	mov	r7, r2
 8017b6e:	4606      	mov	r6, r0
 8017b70:	4698      	mov	r8, r3
 8017b72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017b74:	f000 80b3 	beq.w	8017cde <_printf_i+0x182>
 8017b78:	d822      	bhi.n	8017bc0 <_printf_i+0x64>
 8017b7a:	2963      	cmp	r1, #99	; 0x63
 8017b7c:	d036      	beq.n	8017bec <_printf_i+0x90>
 8017b7e:	d80a      	bhi.n	8017b96 <_printf_i+0x3a>
 8017b80:	2900      	cmp	r1, #0
 8017b82:	f000 80b9 	beq.w	8017cf8 <_printf_i+0x19c>
 8017b86:	2958      	cmp	r1, #88	; 0x58
 8017b88:	f000 8083 	beq.w	8017c92 <_printf_i+0x136>
 8017b8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017b90:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8017b94:	e032      	b.n	8017bfc <_printf_i+0xa0>
 8017b96:	2964      	cmp	r1, #100	; 0x64
 8017b98:	d001      	beq.n	8017b9e <_printf_i+0x42>
 8017b9a:	2969      	cmp	r1, #105	; 0x69
 8017b9c:	d1f6      	bne.n	8017b8c <_printf_i+0x30>
 8017b9e:	6820      	ldr	r0, [r4, #0]
 8017ba0:	6813      	ldr	r3, [r2, #0]
 8017ba2:	0605      	lsls	r5, r0, #24
 8017ba4:	f103 0104 	add.w	r1, r3, #4
 8017ba8:	d52a      	bpl.n	8017c00 <_printf_i+0xa4>
 8017baa:	681b      	ldr	r3, [r3, #0]
 8017bac:	6011      	str	r1, [r2, #0]
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	da03      	bge.n	8017bba <_printf_i+0x5e>
 8017bb2:	222d      	movs	r2, #45	; 0x2d
 8017bb4:	425b      	negs	r3, r3
 8017bb6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8017bba:	486f      	ldr	r0, [pc, #444]	; (8017d78 <_printf_i+0x21c>)
 8017bbc:	220a      	movs	r2, #10
 8017bbe:	e039      	b.n	8017c34 <_printf_i+0xd8>
 8017bc0:	2973      	cmp	r1, #115	; 0x73
 8017bc2:	f000 809d 	beq.w	8017d00 <_printf_i+0x1a4>
 8017bc6:	d808      	bhi.n	8017bda <_printf_i+0x7e>
 8017bc8:	296f      	cmp	r1, #111	; 0x6f
 8017bca:	d020      	beq.n	8017c0e <_printf_i+0xb2>
 8017bcc:	2970      	cmp	r1, #112	; 0x70
 8017bce:	d1dd      	bne.n	8017b8c <_printf_i+0x30>
 8017bd0:	6823      	ldr	r3, [r4, #0]
 8017bd2:	f043 0320 	orr.w	r3, r3, #32
 8017bd6:	6023      	str	r3, [r4, #0]
 8017bd8:	e003      	b.n	8017be2 <_printf_i+0x86>
 8017bda:	2975      	cmp	r1, #117	; 0x75
 8017bdc:	d017      	beq.n	8017c0e <_printf_i+0xb2>
 8017bde:	2978      	cmp	r1, #120	; 0x78
 8017be0:	d1d4      	bne.n	8017b8c <_printf_i+0x30>
 8017be2:	2378      	movs	r3, #120	; 0x78
 8017be4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017be8:	4864      	ldr	r0, [pc, #400]	; (8017d7c <_printf_i+0x220>)
 8017bea:	e055      	b.n	8017c98 <_printf_i+0x13c>
 8017bec:	6813      	ldr	r3, [r2, #0]
 8017bee:	1d19      	adds	r1, r3, #4
 8017bf0:	681b      	ldr	r3, [r3, #0]
 8017bf2:	6011      	str	r1, [r2, #0]
 8017bf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017bf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017bfc:	2301      	movs	r3, #1
 8017bfe:	e08c      	b.n	8017d1a <_printf_i+0x1be>
 8017c00:	681b      	ldr	r3, [r3, #0]
 8017c02:	6011      	str	r1, [r2, #0]
 8017c04:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017c08:	bf18      	it	ne
 8017c0a:	b21b      	sxthne	r3, r3
 8017c0c:	e7cf      	b.n	8017bae <_printf_i+0x52>
 8017c0e:	6813      	ldr	r3, [r2, #0]
 8017c10:	6825      	ldr	r5, [r4, #0]
 8017c12:	1d18      	adds	r0, r3, #4
 8017c14:	6010      	str	r0, [r2, #0]
 8017c16:	0628      	lsls	r0, r5, #24
 8017c18:	d501      	bpl.n	8017c1e <_printf_i+0xc2>
 8017c1a:	681b      	ldr	r3, [r3, #0]
 8017c1c:	e002      	b.n	8017c24 <_printf_i+0xc8>
 8017c1e:	0668      	lsls	r0, r5, #25
 8017c20:	d5fb      	bpl.n	8017c1a <_printf_i+0xbe>
 8017c22:	881b      	ldrh	r3, [r3, #0]
 8017c24:	4854      	ldr	r0, [pc, #336]	; (8017d78 <_printf_i+0x21c>)
 8017c26:	296f      	cmp	r1, #111	; 0x6f
 8017c28:	bf14      	ite	ne
 8017c2a:	220a      	movne	r2, #10
 8017c2c:	2208      	moveq	r2, #8
 8017c2e:	2100      	movs	r1, #0
 8017c30:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017c34:	6865      	ldr	r5, [r4, #4]
 8017c36:	60a5      	str	r5, [r4, #8]
 8017c38:	2d00      	cmp	r5, #0
 8017c3a:	f2c0 8095 	blt.w	8017d68 <_printf_i+0x20c>
 8017c3e:	6821      	ldr	r1, [r4, #0]
 8017c40:	f021 0104 	bic.w	r1, r1, #4
 8017c44:	6021      	str	r1, [r4, #0]
 8017c46:	2b00      	cmp	r3, #0
 8017c48:	d13d      	bne.n	8017cc6 <_printf_i+0x16a>
 8017c4a:	2d00      	cmp	r5, #0
 8017c4c:	f040 808e 	bne.w	8017d6c <_printf_i+0x210>
 8017c50:	4665      	mov	r5, ip
 8017c52:	2a08      	cmp	r2, #8
 8017c54:	d10b      	bne.n	8017c6e <_printf_i+0x112>
 8017c56:	6823      	ldr	r3, [r4, #0]
 8017c58:	07db      	lsls	r3, r3, #31
 8017c5a:	d508      	bpl.n	8017c6e <_printf_i+0x112>
 8017c5c:	6923      	ldr	r3, [r4, #16]
 8017c5e:	6862      	ldr	r2, [r4, #4]
 8017c60:	429a      	cmp	r2, r3
 8017c62:	bfde      	ittt	le
 8017c64:	2330      	movle	r3, #48	; 0x30
 8017c66:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017c6a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017c6e:	ebac 0305 	sub.w	r3, ip, r5
 8017c72:	6123      	str	r3, [r4, #16]
 8017c74:	f8cd 8000 	str.w	r8, [sp]
 8017c78:	463b      	mov	r3, r7
 8017c7a:	aa03      	add	r2, sp, #12
 8017c7c:	4621      	mov	r1, r4
 8017c7e:	4630      	mov	r0, r6
 8017c80:	f7ff fef6 	bl	8017a70 <_printf_common>
 8017c84:	3001      	adds	r0, #1
 8017c86:	d14d      	bne.n	8017d24 <_printf_i+0x1c8>
 8017c88:	f04f 30ff 	mov.w	r0, #4294967295
 8017c8c:	b005      	add	sp, #20
 8017c8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017c92:	4839      	ldr	r0, [pc, #228]	; (8017d78 <_printf_i+0x21c>)
 8017c94:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8017c98:	6813      	ldr	r3, [r2, #0]
 8017c9a:	6821      	ldr	r1, [r4, #0]
 8017c9c:	1d1d      	adds	r5, r3, #4
 8017c9e:	681b      	ldr	r3, [r3, #0]
 8017ca0:	6015      	str	r5, [r2, #0]
 8017ca2:	060a      	lsls	r2, r1, #24
 8017ca4:	d50b      	bpl.n	8017cbe <_printf_i+0x162>
 8017ca6:	07ca      	lsls	r2, r1, #31
 8017ca8:	bf44      	itt	mi
 8017caa:	f041 0120 	orrmi.w	r1, r1, #32
 8017cae:	6021      	strmi	r1, [r4, #0]
 8017cb0:	b91b      	cbnz	r3, 8017cba <_printf_i+0x15e>
 8017cb2:	6822      	ldr	r2, [r4, #0]
 8017cb4:	f022 0220 	bic.w	r2, r2, #32
 8017cb8:	6022      	str	r2, [r4, #0]
 8017cba:	2210      	movs	r2, #16
 8017cbc:	e7b7      	b.n	8017c2e <_printf_i+0xd2>
 8017cbe:	064d      	lsls	r5, r1, #25
 8017cc0:	bf48      	it	mi
 8017cc2:	b29b      	uxthmi	r3, r3
 8017cc4:	e7ef      	b.n	8017ca6 <_printf_i+0x14a>
 8017cc6:	4665      	mov	r5, ip
 8017cc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8017ccc:	fb02 3311 	mls	r3, r2, r1, r3
 8017cd0:	5cc3      	ldrb	r3, [r0, r3]
 8017cd2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8017cd6:	460b      	mov	r3, r1
 8017cd8:	2900      	cmp	r1, #0
 8017cda:	d1f5      	bne.n	8017cc8 <_printf_i+0x16c>
 8017cdc:	e7b9      	b.n	8017c52 <_printf_i+0xf6>
 8017cde:	6813      	ldr	r3, [r2, #0]
 8017ce0:	6825      	ldr	r5, [r4, #0]
 8017ce2:	6961      	ldr	r1, [r4, #20]
 8017ce4:	1d18      	adds	r0, r3, #4
 8017ce6:	6010      	str	r0, [r2, #0]
 8017ce8:	0628      	lsls	r0, r5, #24
 8017cea:	681b      	ldr	r3, [r3, #0]
 8017cec:	d501      	bpl.n	8017cf2 <_printf_i+0x196>
 8017cee:	6019      	str	r1, [r3, #0]
 8017cf0:	e002      	b.n	8017cf8 <_printf_i+0x19c>
 8017cf2:	066a      	lsls	r2, r5, #25
 8017cf4:	d5fb      	bpl.n	8017cee <_printf_i+0x192>
 8017cf6:	8019      	strh	r1, [r3, #0]
 8017cf8:	2300      	movs	r3, #0
 8017cfa:	6123      	str	r3, [r4, #16]
 8017cfc:	4665      	mov	r5, ip
 8017cfe:	e7b9      	b.n	8017c74 <_printf_i+0x118>
 8017d00:	6813      	ldr	r3, [r2, #0]
 8017d02:	1d19      	adds	r1, r3, #4
 8017d04:	6011      	str	r1, [r2, #0]
 8017d06:	681d      	ldr	r5, [r3, #0]
 8017d08:	6862      	ldr	r2, [r4, #4]
 8017d0a:	2100      	movs	r1, #0
 8017d0c:	4628      	mov	r0, r5
 8017d0e:	f7e8 faaf 	bl	8000270 <memchr>
 8017d12:	b108      	cbz	r0, 8017d18 <_printf_i+0x1bc>
 8017d14:	1b40      	subs	r0, r0, r5
 8017d16:	6060      	str	r0, [r4, #4]
 8017d18:	6863      	ldr	r3, [r4, #4]
 8017d1a:	6123      	str	r3, [r4, #16]
 8017d1c:	2300      	movs	r3, #0
 8017d1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017d22:	e7a7      	b.n	8017c74 <_printf_i+0x118>
 8017d24:	6923      	ldr	r3, [r4, #16]
 8017d26:	462a      	mov	r2, r5
 8017d28:	4639      	mov	r1, r7
 8017d2a:	4630      	mov	r0, r6
 8017d2c:	47c0      	blx	r8
 8017d2e:	3001      	adds	r0, #1
 8017d30:	d0aa      	beq.n	8017c88 <_printf_i+0x12c>
 8017d32:	6823      	ldr	r3, [r4, #0]
 8017d34:	079b      	lsls	r3, r3, #30
 8017d36:	d413      	bmi.n	8017d60 <_printf_i+0x204>
 8017d38:	68e0      	ldr	r0, [r4, #12]
 8017d3a:	9b03      	ldr	r3, [sp, #12]
 8017d3c:	4298      	cmp	r0, r3
 8017d3e:	bfb8      	it	lt
 8017d40:	4618      	movlt	r0, r3
 8017d42:	e7a3      	b.n	8017c8c <_printf_i+0x130>
 8017d44:	2301      	movs	r3, #1
 8017d46:	464a      	mov	r2, r9
 8017d48:	4639      	mov	r1, r7
 8017d4a:	4630      	mov	r0, r6
 8017d4c:	47c0      	blx	r8
 8017d4e:	3001      	adds	r0, #1
 8017d50:	d09a      	beq.n	8017c88 <_printf_i+0x12c>
 8017d52:	3501      	adds	r5, #1
 8017d54:	68e3      	ldr	r3, [r4, #12]
 8017d56:	9a03      	ldr	r2, [sp, #12]
 8017d58:	1a9b      	subs	r3, r3, r2
 8017d5a:	42ab      	cmp	r3, r5
 8017d5c:	dcf2      	bgt.n	8017d44 <_printf_i+0x1e8>
 8017d5e:	e7eb      	b.n	8017d38 <_printf_i+0x1dc>
 8017d60:	2500      	movs	r5, #0
 8017d62:	f104 0919 	add.w	r9, r4, #25
 8017d66:	e7f5      	b.n	8017d54 <_printf_i+0x1f8>
 8017d68:	2b00      	cmp	r3, #0
 8017d6a:	d1ac      	bne.n	8017cc6 <_printf_i+0x16a>
 8017d6c:	7803      	ldrb	r3, [r0, #0]
 8017d6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017d72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017d76:	e76c      	b.n	8017c52 <_printf_i+0xf6>
 8017d78:	0801b9a9 	.word	0x0801b9a9
 8017d7c:	0801b9ba 	.word	0x0801b9ba

08017d80 <_sbrk_r>:
 8017d80:	b538      	push	{r3, r4, r5, lr}
 8017d82:	4c06      	ldr	r4, [pc, #24]	; (8017d9c <_sbrk_r+0x1c>)
 8017d84:	2300      	movs	r3, #0
 8017d86:	4605      	mov	r5, r0
 8017d88:	4608      	mov	r0, r1
 8017d8a:	6023      	str	r3, [r4, #0]
 8017d8c:	f7e9 f99a 	bl	80010c4 <_sbrk>
 8017d90:	1c43      	adds	r3, r0, #1
 8017d92:	d102      	bne.n	8017d9a <_sbrk_r+0x1a>
 8017d94:	6823      	ldr	r3, [r4, #0]
 8017d96:	b103      	cbz	r3, 8017d9a <_sbrk_r+0x1a>
 8017d98:	602b      	str	r3, [r5, #0]
 8017d9a:	bd38      	pop	{r3, r4, r5, pc}
 8017d9c:	2000d258 	.word	0x2000d258

08017da0 <__sread>:
 8017da0:	b510      	push	{r4, lr}
 8017da2:	460c      	mov	r4, r1
 8017da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017da8:	f000 fa6e 	bl	8018288 <_read_r>
 8017dac:	2800      	cmp	r0, #0
 8017dae:	bfab      	itete	ge
 8017db0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017db2:	89a3      	ldrhlt	r3, [r4, #12]
 8017db4:	181b      	addge	r3, r3, r0
 8017db6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017dba:	bfac      	ite	ge
 8017dbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8017dbe:	81a3      	strhlt	r3, [r4, #12]
 8017dc0:	bd10      	pop	{r4, pc}

08017dc2 <__swrite>:
 8017dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017dc6:	461f      	mov	r7, r3
 8017dc8:	898b      	ldrh	r3, [r1, #12]
 8017dca:	05db      	lsls	r3, r3, #23
 8017dcc:	4605      	mov	r5, r0
 8017dce:	460c      	mov	r4, r1
 8017dd0:	4616      	mov	r6, r2
 8017dd2:	d505      	bpl.n	8017de0 <__swrite+0x1e>
 8017dd4:	2302      	movs	r3, #2
 8017dd6:	2200      	movs	r2, #0
 8017dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ddc:	f000 f9b6 	bl	801814c <_lseek_r>
 8017de0:	89a3      	ldrh	r3, [r4, #12]
 8017de2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017de6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017dea:	81a3      	strh	r3, [r4, #12]
 8017dec:	4632      	mov	r2, r6
 8017dee:	463b      	mov	r3, r7
 8017df0:	4628      	mov	r0, r5
 8017df2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017df6:	f000 b869 	b.w	8017ecc <_write_r>

08017dfa <__sseek>:
 8017dfa:	b510      	push	{r4, lr}
 8017dfc:	460c      	mov	r4, r1
 8017dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017e02:	f000 f9a3 	bl	801814c <_lseek_r>
 8017e06:	1c43      	adds	r3, r0, #1
 8017e08:	89a3      	ldrh	r3, [r4, #12]
 8017e0a:	bf15      	itete	ne
 8017e0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8017e0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017e12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017e16:	81a3      	strheq	r3, [r4, #12]
 8017e18:	bf18      	it	ne
 8017e1a:	81a3      	strhne	r3, [r4, #12]
 8017e1c:	bd10      	pop	{r4, pc}

08017e1e <__sclose>:
 8017e1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017e22:	f000 b8d3 	b.w	8017fcc <_close_r>
	...

08017e28 <__swbuf_r>:
 8017e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e2a:	460e      	mov	r6, r1
 8017e2c:	4614      	mov	r4, r2
 8017e2e:	4605      	mov	r5, r0
 8017e30:	b118      	cbz	r0, 8017e3a <__swbuf_r+0x12>
 8017e32:	6983      	ldr	r3, [r0, #24]
 8017e34:	b90b      	cbnz	r3, 8017e3a <__swbuf_r+0x12>
 8017e36:	f7ff fa4f 	bl	80172d8 <__sinit>
 8017e3a:	4b21      	ldr	r3, [pc, #132]	; (8017ec0 <__swbuf_r+0x98>)
 8017e3c:	429c      	cmp	r4, r3
 8017e3e:	d12a      	bne.n	8017e96 <__swbuf_r+0x6e>
 8017e40:	686c      	ldr	r4, [r5, #4]
 8017e42:	69a3      	ldr	r3, [r4, #24]
 8017e44:	60a3      	str	r3, [r4, #8]
 8017e46:	89a3      	ldrh	r3, [r4, #12]
 8017e48:	071a      	lsls	r2, r3, #28
 8017e4a:	d52e      	bpl.n	8017eaa <__swbuf_r+0x82>
 8017e4c:	6923      	ldr	r3, [r4, #16]
 8017e4e:	b363      	cbz	r3, 8017eaa <__swbuf_r+0x82>
 8017e50:	6923      	ldr	r3, [r4, #16]
 8017e52:	6820      	ldr	r0, [r4, #0]
 8017e54:	1ac0      	subs	r0, r0, r3
 8017e56:	6963      	ldr	r3, [r4, #20]
 8017e58:	b2f6      	uxtb	r6, r6
 8017e5a:	4283      	cmp	r3, r0
 8017e5c:	4637      	mov	r7, r6
 8017e5e:	dc04      	bgt.n	8017e6a <__swbuf_r+0x42>
 8017e60:	4621      	mov	r1, r4
 8017e62:	4628      	mov	r0, r5
 8017e64:	f000 f948 	bl	80180f8 <_fflush_r>
 8017e68:	bb28      	cbnz	r0, 8017eb6 <__swbuf_r+0x8e>
 8017e6a:	68a3      	ldr	r3, [r4, #8]
 8017e6c:	3b01      	subs	r3, #1
 8017e6e:	60a3      	str	r3, [r4, #8]
 8017e70:	6823      	ldr	r3, [r4, #0]
 8017e72:	1c5a      	adds	r2, r3, #1
 8017e74:	6022      	str	r2, [r4, #0]
 8017e76:	701e      	strb	r6, [r3, #0]
 8017e78:	6963      	ldr	r3, [r4, #20]
 8017e7a:	3001      	adds	r0, #1
 8017e7c:	4283      	cmp	r3, r0
 8017e7e:	d004      	beq.n	8017e8a <__swbuf_r+0x62>
 8017e80:	89a3      	ldrh	r3, [r4, #12]
 8017e82:	07db      	lsls	r3, r3, #31
 8017e84:	d519      	bpl.n	8017eba <__swbuf_r+0x92>
 8017e86:	2e0a      	cmp	r6, #10
 8017e88:	d117      	bne.n	8017eba <__swbuf_r+0x92>
 8017e8a:	4621      	mov	r1, r4
 8017e8c:	4628      	mov	r0, r5
 8017e8e:	f000 f933 	bl	80180f8 <_fflush_r>
 8017e92:	b190      	cbz	r0, 8017eba <__swbuf_r+0x92>
 8017e94:	e00f      	b.n	8017eb6 <__swbuf_r+0x8e>
 8017e96:	4b0b      	ldr	r3, [pc, #44]	; (8017ec4 <__swbuf_r+0x9c>)
 8017e98:	429c      	cmp	r4, r3
 8017e9a:	d101      	bne.n	8017ea0 <__swbuf_r+0x78>
 8017e9c:	68ac      	ldr	r4, [r5, #8]
 8017e9e:	e7d0      	b.n	8017e42 <__swbuf_r+0x1a>
 8017ea0:	4b09      	ldr	r3, [pc, #36]	; (8017ec8 <__swbuf_r+0xa0>)
 8017ea2:	429c      	cmp	r4, r3
 8017ea4:	bf08      	it	eq
 8017ea6:	68ec      	ldreq	r4, [r5, #12]
 8017ea8:	e7cb      	b.n	8017e42 <__swbuf_r+0x1a>
 8017eaa:	4621      	mov	r1, r4
 8017eac:	4628      	mov	r0, r5
 8017eae:	f000 f81f 	bl	8017ef0 <__swsetup_r>
 8017eb2:	2800      	cmp	r0, #0
 8017eb4:	d0cc      	beq.n	8017e50 <__swbuf_r+0x28>
 8017eb6:	f04f 37ff 	mov.w	r7, #4294967295
 8017eba:	4638      	mov	r0, r7
 8017ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017ebe:	bf00      	nop
 8017ec0:	0801b958 	.word	0x0801b958
 8017ec4:	0801b978 	.word	0x0801b978
 8017ec8:	0801b938 	.word	0x0801b938

08017ecc <_write_r>:
 8017ecc:	b538      	push	{r3, r4, r5, lr}
 8017ece:	4c07      	ldr	r4, [pc, #28]	; (8017eec <_write_r+0x20>)
 8017ed0:	4605      	mov	r5, r0
 8017ed2:	4608      	mov	r0, r1
 8017ed4:	4611      	mov	r1, r2
 8017ed6:	2200      	movs	r2, #0
 8017ed8:	6022      	str	r2, [r4, #0]
 8017eda:	461a      	mov	r2, r3
 8017edc:	f7e9 f8a1 	bl	8001022 <_write>
 8017ee0:	1c43      	adds	r3, r0, #1
 8017ee2:	d102      	bne.n	8017eea <_write_r+0x1e>
 8017ee4:	6823      	ldr	r3, [r4, #0]
 8017ee6:	b103      	cbz	r3, 8017eea <_write_r+0x1e>
 8017ee8:	602b      	str	r3, [r5, #0]
 8017eea:	bd38      	pop	{r3, r4, r5, pc}
 8017eec:	2000d258 	.word	0x2000d258

08017ef0 <__swsetup_r>:
 8017ef0:	4b32      	ldr	r3, [pc, #200]	; (8017fbc <__swsetup_r+0xcc>)
 8017ef2:	b570      	push	{r4, r5, r6, lr}
 8017ef4:	681d      	ldr	r5, [r3, #0]
 8017ef6:	4606      	mov	r6, r0
 8017ef8:	460c      	mov	r4, r1
 8017efa:	b125      	cbz	r5, 8017f06 <__swsetup_r+0x16>
 8017efc:	69ab      	ldr	r3, [r5, #24]
 8017efe:	b913      	cbnz	r3, 8017f06 <__swsetup_r+0x16>
 8017f00:	4628      	mov	r0, r5
 8017f02:	f7ff f9e9 	bl	80172d8 <__sinit>
 8017f06:	4b2e      	ldr	r3, [pc, #184]	; (8017fc0 <__swsetup_r+0xd0>)
 8017f08:	429c      	cmp	r4, r3
 8017f0a:	d10f      	bne.n	8017f2c <__swsetup_r+0x3c>
 8017f0c:	686c      	ldr	r4, [r5, #4]
 8017f0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017f12:	b29a      	uxth	r2, r3
 8017f14:	0715      	lsls	r5, r2, #28
 8017f16:	d42c      	bmi.n	8017f72 <__swsetup_r+0x82>
 8017f18:	06d0      	lsls	r0, r2, #27
 8017f1a:	d411      	bmi.n	8017f40 <__swsetup_r+0x50>
 8017f1c:	2209      	movs	r2, #9
 8017f1e:	6032      	str	r2, [r6, #0]
 8017f20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017f24:	81a3      	strh	r3, [r4, #12]
 8017f26:	f04f 30ff 	mov.w	r0, #4294967295
 8017f2a:	e03e      	b.n	8017faa <__swsetup_r+0xba>
 8017f2c:	4b25      	ldr	r3, [pc, #148]	; (8017fc4 <__swsetup_r+0xd4>)
 8017f2e:	429c      	cmp	r4, r3
 8017f30:	d101      	bne.n	8017f36 <__swsetup_r+0x46>
 8017f32:	68ac      	ldr	r4, [r5, #8]
 8017f34:	e7eb      	b.n	8017f0e <__swsetup_r+0x1e>
 8017f36:	4b24      	ldr	r3, [pc, #144]	; (8017fc8 <__swsetup_r+0xd8>)
 8017f38:	429c      	cmp	r4, r3
 8017f3a:	bf08      	it	eq
 8017f3c:	68ec      	ldreq	r4, [r5, #12]
 8017f3e:	e7e6      	b.n	8017f0e <__swsetup_r+0x1e>
 8017f40:	0751      	lsls	r1, r2, #29
 8017f42:	d512      	bpl.n	8017f6a <__swsetup_r+0x7a>
 8017f44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017f46:	b141      	cbz	r1, 8017f5a <__swsetup_r+0x6a>
 8017f48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017f4c:	4299      	cmp	r1, r3
 8017f4e:	d002      	beq.n	8017f56 <__swsetup_r+0x66>
 8017f50:	4630      	mov	r0, r6
 8017f52:	f7ff fa53 	bl	80173fc <_free_r>
 8017f56:	2300      	movs	r3, #0
 8017f58:	6363      	str	r3, [r4, #52]	; 0x34
 8017f5a:	89a3      	ldrh	r3, [r4, #12]
 8017f5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017f60:	81a3      	strh	r3, [r4, #12]
 8017f62:	2300      	movs	r3, #0
 8017f64:	6063      	str	r3, [r4, #4]
 8017f66:	6923      	ldr	r3, [r4, #16]
 8017f68:	6023      	str	r3, [r4, #0]
 8017f6a:	89a3      	ldrh	r3, [r4, #12]
 8017f6c:	f043 0308 	orr.w	r3, r3, #8
 8017f70:	81a3      	strh	r3, [r4, #12]
 8017f72:	6923      	ldr	r3, [r4, #16]
 8017f74:	b94b      	cbnz	r3, 8017f8a <__swsetup_r+0x9a>
 8017f76:	89a3      	ldrh	r3, [r4, #12]
 8017f78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017f7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017f80:	d003      	beq.n	8017f8a <__swsetup_r+0x9a>
 8017f82:	4621      	mov	r1, r4
 8017f84:	4630      	mov	r0, r6
 8017f86:	f000 f917 	bl	80181b8 <__smakebuf_r>
 8017f8a:	89a2      	ldrh	r2, [r4, #12]
 8017f8c:	f012 0301 	ands.w	r3, r2, #1
 8017f90:	d00c      	beq.n	8017fac <__swsetup_r+0xbc>
 8017f92:	2300      	movs	r3, #0
 8017f94:	60a3      	str	r3, [r4, #8]
 8017f96:	6963      	ldr	r3, [r4, #20]
 8017f98:	425b      	negs	r3, r3
 8017f9a:	61a3      	str	r3, [r4, #24]
 8017f9c:	6923      	ldr	r3, [r4, #16]
 8017f9e:	b953      	cbnz	r3, 8017fb6 <__swsetup_r+0xc6>
 8017fa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017fa4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8017fa8:	d1ba      	bne.n	8017f20 <__swsetup_r+0x30>
 8017faa:	bd70      	pop	{r4, r5, r6, pc}
 8017fac:	0792      	lsls	r2, r2, #30
 8017fae:	bf58      	it	pl
 8017fb0:	6963      	ldrpl	r3, [r4, #20]
 8017fb2:	60a3      	str	r3, [r4, #8]
 8017fb4:	e7f2      	b.n	8017f9c <__swsetup_r+0xac>
 8017fb6:	2000      	movs	r0, #0
 8017fb8:	e7f7      	b.n	8017faa <__swsetup_r+0xba>
 8017fba:	bf00      	nop
 8017fbc:	20000018 	.word	0x20000018
 8017fc0:	0801b958 	.word	0x0801b958
 8017fc4:	0801b978 	.word	0x0801b978
 8017fc8:	0801b938 	.word	0x0801b938

08017fcc <_close_r>:
 8017fcc:	b538      	push	{r3, r4, r5, lr}
 8017fce:	4c06      	ldr	r4, [pc, #24]	; (8017fe8 <_close_r+0x1c>)
 8017fd0:	2300      	movs	r3, #0
 8017fd2:	4605      	mov	r5, r0
 8017fd4:	4608      	mov	r0, r1
 8017fd6:	6023      	str	r3, [r4, #0]
 8017fd8:	f7e9 f83f 	bl	800105a <_close>
 8017fdc:	1c43      	adds	r3, r0, #1
 8017fde:	d102      	bne.n	8017fe6 <_close_r+0x1a>
 8017fe0:	6823      	ldr	r3, [r4, #0]
 8017fe2:	b103      	cbz	r3, 8017fe6 <_close_r+0x1a>
 8017fe4:	602b      	str	r3, [r5, #0]
 8017fe6:	bd38      	pop	{r3, r4, r5, pc}
 8017fe8:	2000d258 	.word	0x2000d258

08017fec <__sflush_r>:
 8017fec:	898a      	ldrh	r2, [r1, #12]
 8017fee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ff2:	4605      	mov	r5, r0
 8017ff4:	0710      	lsls	r0, r2, #28
 8017ff6:	460c      	mov	r4, r1
 8017ff8:	d458      	bmi.n	80180ac <__sflush_r+0xc0>
 8017ffa:	684b      	ldr	r3, [r1, #4]
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	dc05      	bgt.n	801800c <__sflush_r+0x20>
 8018000:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018002:	2b00      	cmp	r3, #0
 8018004:	dc02      	bgt.n	801800c <__sflush_r+0x20>
 8018006:	2000      	movs	r0, #0
 8018008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801800c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801800e:	2e00      	cmp	r6, #0
 8018010:	d0f9      	beq.n	8018006 <__sflush_r+0x1a>
 8018012:	2300      	movs	r3, #0
 8018014:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018018:	682f      	ldr	r7, [r5, #0]
 801801a:	6a21      	ldr	r1, [r4, #32]
 801801c:	602b      	str	r3, [r5, #0]
 801801e:	d032      	beq.n	8018086 <__sflush_r+0x9a>
 8018020:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018022:	89a3      	ldrh	r3, [r4, #12]
 8018024:	075a      	lsls	r2, r3, #29
 8018026:	d505      	bpl.n	8018034 <__sflush_r+0x48>
 8018028:	6863      	ldr	r3, [r4, #4]
 801802a:	1ac0      	subs	r0, r0, r3
 801802c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801802e:	b10b      	cbz	r3, 8018034 <__sflush_r+0x48>
 8018030:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018032:	1ac0      	subs	r0, r0, r3
 8018034:	2300      	movs	r3, #0
 8018036:	4602      	mov	r2, r0
 8018038:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801803a:	6a21      	ldr	r1, [r4, #32]
 801803c:	4628      	mov	r0, r5
 801803e:	47b0      	blx	r6
 8018040:	1c43      	adds	r3, r0, #1
 8018042:	89a3      	ldrh	r3, [r4, #12]
 8018044:	d106      	bne.n	8018054 <__sflush_r+0x68>
 8018046:	6829      	ldr	r1, [r5, #0]
 8018048:	291d      	cmp	r1, #29
 801804a:	d848      	bhi.n	80180de <__sflush_r+0xf2>
 801804c:	4a29      	ldr	r2, [pc, #164]	; (80180f4 <__sflush_r+0x108>)
 801804e:	40ca      	lsrs	r2, r1
 8018050:	07d6      	lsls	r6, r2, #31
 8018052:	d544      	bpl.n	80180de <__sflush_r+0xf2>
 8018054:	2200      	movs	r2, #0
 8018056:	6062      	str	r2, [r4, #4]
 8018058:	04d9      	lsls	r1, r3, #19
 801805a:	6922      	ldr	r2, [r4, #16]
 801805c:	6022      	str	r2, [r4, #0]
 801805e:	d504      	bpl.n	801806a <__sflush_r+0x7e>
 8018060:	1c42      	adds	r2, r0, #1
 8018062:	d101      	bne.n	8018068 <__sflush_r+0x7c>
 8018064:	682b      	ldr	r3, [r5, #0]
 8018066:	b903      	cbnz	r3, 801806a <__sflush_r+0x7e>
 8018068:	6560      	str	r0, [r4, #84]	; 0x54
 801806a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801806c:	602f      	str	r7, [r5, #0]
 801806e:	2900      	cmp	r1, #0
 8018070:	d0c9      	beq.n	8018006 <__sflush_r+0x1a>
 8018072:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018076:	4299      	cmp	r1, r3
 8018078:	d002      	beq.n	8018080 <__sflush_r+0x94>
 801807a:	4628      	mov	r0, r5
 801807c:	f7ff f9be 	bl	80173fc <_free_r>
 8018080:	2000      	movs	r0, #0
 8018082:	6360      	str	r0, [r4, #52]	; 0x34
 8018084:	e7c0      	b.n	8018008 <__sflush_r+0x1c>
 8018086:	2301      	movs	r3, #1
 8018088:	4628      	mov	r0, r5
 801808a:	47b0      	blx	r6
 801808c:	1c41      	adds	r1, r0, #1
 801808e:	d1c8      	bne.n	8018022 <__sflush_r+0x36>
 8018090:	682b      	ldr	r3, [r5, #0]
 8018092:	2b00      	cmp	r3, #0
 8018094:	d0c5      	beq.n	8018022 <__sflush_r+0x36>
 8018096:	2b1d      	cmp	r3, #29
 8018098:	d001      	beq.n	801809e <__sflush_r+0xb2>
 801809a:	2b16      	cmp	r3, #22
 801809c:	d101      	bne.n	80180a2 <__sflush_r+0xb6>
 801809e:	602f      	str	r7, [r5, #0]
 80180a0:	e7b1      	b.n	8018006 <__sflush_r+0x1a>
 80180a2:	89a3      	ldrh	r3, [r4, #12]
 80180a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80180a8:	81a3      	strh	r3, [r4, #12]
 80180aa:	e7ad      	b.n	8018008 <__sflush_r+0x1c>
 80180ac:	690f      	ldr	r7, [r1, #16]
 80180ae:	2f00      	cmp	r7, #0
 80180b0:	d0a9      	beq.n	8018006 <__sflush_r+0x1a>
 80180b2:	0793      	lsls	r3, r2, #30
 80180b4:	680e      	ldr	r6, [r1, #0]
 80180b6:	bf08      	it	eq
 80180b8:	694b      	ldreq	r3, [r1, #20]
 80180ba:	600f      	str	r7, [r1, #0]
 80180bc:	bf18      	it	ne
 80180be:	2300      	movne	r3, #0
 80180c0:	eba6 0807 	sub.w	r8, r6, r7
 80180c4:	608b      	str	r3, [r1, #8]
 80180c6:	f1b8 0f00 	cmp.w	r8, #0
 80180ca:	dd9c      	ble.n	8018006 <__sflush_r+0x1a>
 80180cc:	4643      	mov	r3, r8
 80180ce:	463a      	mov	r2, r7
 80180d0:	6a21      	ldr	r1, [r4, #32]
 80180d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80180d4:	4628      	mov	r0, r5
 80180d6:	47b0      	blx	r6
 80180d8:	2800      	cmp	r0, #0
 80180da:	dc06      	bgt.n	80180ea <__sflush_r+0xfe>
 80180dc:	89a3      	ldrh	r3, [r4, #12]
 80180de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80180e2:	81a3      	strh	r3, [r4, #12]
 80180e4:	f04f 30ff 	mov.w	r0, #4294967295
 80180e8:	e78e      	b.n	8018008 <__sflush_r+0x1c>
 80180ea:	4407      	add	r7, r0
 80180ec:	eba8 0800 	sub.w	r8, r8, r0
 80180f0:	e7e9      	b.n	80180c6 <__sflush_r+0xda>
 80180f2:	bf00      	nop
 80180f4:	20400001 	.word	0x20400001

080180f8 <_fflush_r>:
 80180f8:	b538      	push	{r3, r4, r5, lr}
 80180fa:	690b      	ldr	r3, [r1, #16]
 80180fc:	4605      	mov	r5, r0
 80180fe:	460c      	mov	r4, r1
 8018100:	b1db      	cbz	r3, 801813a <_fflush_r+0x42>
 8018102:	b118      	cbz	r0, 801810c <_fflush_r+0x14>
 8018104:	6983      	ldr	r3, [r0, #24]
 8018106:	b90b      	cbnz	r3, 801810c <_fflush_r+0x14>
 8018108:	f7ff f8e6 	bl	80172d8 <__sinit>
 801810c:	4b0c      	ldr	r3, [pc, #48]	; (8018140 <_fflush_r+0x48>)
 801810e:	429c      	cmp	r4, r3
 8018110:	d109      	bne.n	8018126 <_fflush_r+0x2e>
 8018112:	686c      	ldr	r4, [r5, #4]
 8018114:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018118:	b17b      	cbz	r3, 801813a <_fflush_r+0x42>
 801811a:	4621      	mov	r1, r4
 801811c:	4628      	mov	r0, r5
 801811e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018122:	f7ff bf63 	b.w	8017fec <__sflush_r>
 8018126:	4b07      	ldr	r3, [pc, #28]	; (8018144 <_fflush_r+0x4c>)
 8018128:	429c      	cmp	r4, r3
 801812a:	d101      	bne.n	8018130 <_fflush_r+0x38>
 801812c:	68ac      	ldr	r4, [r5, #8]
 801812e:	e7f1      	b.n	8018114 <_fflush_r+0x1c>
 8018130:	4b05      	ldr	r3, [pc, #20]	; (8018148 <_fflush_r+0x50>)
 8018132:	429c      	cmp	r4, r3
 8018134:	bf08      	it	eq
 8018136:	68ec      	ldreq	r4, [r5, #12]
 8018138:	e7ec      	b.n	8018114 <_fflush_r+0x1c>
 801813a:	2000      	movs	r0, #0
 801813c:	bd38      	pop	{r3, r4, r5, pc}
 801813e:	bf00      	nop
 8018140:	0801b958 	.word	0x0801b958
 8018144:	0801b978 	.word	0x0801b978
 8018148:	0801b938 	.word	0x0801b938

0801814c <_lseek_r>:
 801814c:	b538      	push	{r3, r4, r5, lr}
 801814e:	4c07      	ldr	r4, [pc, #28]	; (801816c <_lseek_r+0x20>)
 8018150:	4605      	mov	r5, r0
 8018152:	4608      	mov	r0, r1
 8018154:	4611      	mov	r1, r2
 8018156:	2200      	movs	r2, #0
 8018158:	6022      	str	r2, [r4, #0]
 801815a:	461a      	mov	r2, r3
 801815c:	f7e8 ffa4 	bl	80010a8 <_lseek>
 8018160:	1c43      	adds	r3, r0, #1
 8018162:	d102      	bne.n	801816a <_lseek_r+0x1e>
 8018164:	6823      	ldr	r3, [r4, #0]
 8018166:	b103      	cbz	r3, 801816a <_lseek_r+0x1e>
 8018168:	602b      	str	r3, [r5, #0]
 801816a:	bd38      	pop	{r3, r4, r5, pc}
 801816c:	2000d258 	.word	0x2000d258

08018170 <__swhatbuf_r>:
 8018170:	b570      	push	{r4, r5, r6, lr}
 8018172:	460e      	mov	r6, r1
 8018174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018178:	2900      	cmp	r1, #0
 801817a:	b096      	sub	sp, #88	; 0x58
 801817c:	4614      	mov	r4, r2
 801817e:	461d      	mov	r5, r3
 8018180:	da07      	bge.n	8018192 <__swhatbuf_r+0x22>
 8018182:	2300      	movs	r3, #0
 8018184:	602b      	str	r3, [r5, #0]
 8018186:	89b3      	ldrh	r3, [r6, #12]
 8018188:	061a      	lsls	r2, r3, #24
 801818a:	d410      	bmi.n	80181ae <__swhatbuf_r+0x3e>
 801818c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018190:	e00e      	b.n	80181b0 <__swhatbuf_r+0x40>
 8018192:	466a      	mov	r2, sp
 8018194:	f000 f88a 	bl	80182ac <_fstat_r>
 8018198:	2800      	cmp	r0, #0
 801819a:	dbf2      	blt.n	8018182 <__swhatbuf_r+0x12>
 801819c:	9a01      	ldr	r2, [sp, #4]
 801819e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80181a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80181a6:	425a      	negs	r2, r3
 80181a8:	415a      	adcs	r2, r3
 80181aa:	602a      	str	r2, [r5, #0]
 80181ac:	e7ee      	b.n	801818c <__swhatbuf_r+0x1c>
 80181ae:	2340      	movs	r3, #64	; 0x40
 80181b0:	2000      	movs	r0, #0
 80181b2:	6023      	str	r3, [r4, #0]
 80181b4:	b016      	add	sp, #88	; 0x58
 80181b6:	bd70      	pop	{r4, r5, r6, pc}

080181b8 <__smakebuf_r>:
 80181b8:	898b      	ldrh	r3, [r1, #12]
 80181ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80181bc:	079d      	lsls	r5, r3, #30
 80181be:	4606      	mov	r6, r0
 80181c0:	460c      	mov	r4, r1
 80181c2:	d507      	bpl.n	80181d4 <__smakebuf_r+0x1c>
 80181c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80181c8:	6023      	str	r3, [r4, #0]
 80181ca:	6123      	str	r3, [r4, #16]
 80181cc:	2301      	movs	r3, #1
 80181ce:	6163      	str	r3, [r4, #20]
 80181d0:	b002      	add	sp, #8
 80181d2:	bd70      	pop	{r4, r5, r6, pc}
 80181d4:	ab01      	add	r3, sp, #4
 80181d6:	466a      	mov	r2, sp
 80181d8:	f7ff ffca 	bl	8018170 <__swhatbuf_r>
 80181dc:	9900      	ldr	r1, [sp, #0]
 80181de:	4605      	mov	r5, r0
 80181e0:	4630      	mov	r0, r6
 80181e2:	f7ff f959 	bl	8017498 <_malloc_r>
 80181e6:	b948      	cbnz	r0, 80181fc <__smakebuf_r+0x44>
 80181e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80181ec:	059a      	lsls	r2, r3, #22
 80181ee:	d4ef      	bmi.n	80181d0 <__smakebuf_r+0x18>
 80181f0:	f023 0303 	bic.w	r3, r3, #3
 80181f4:	f043 0302 	orr.w	r3, r3, #2
 80181f8:	81a3      	strh	r3, [r4, #12]
 80181fa:	e7e3      	b.n	80181c4 <__smakebuf_r+0xc>
 80181fc:	4b0d      	ldr	r3, [pc, #52]	; (8018234 <__smakebuf_r+0x7c>)
 80181fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8018200:	89a3      	ldrh	r3, [r4, #12]
 8018202:	6020      	str	r0, [r4, #0]
 8018204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018208:	81a3      	strh	r3, [r4, #12]
 801820a:	9b00      	ldr	r3, [sp, #0]
 801820c:	6163      	str	r3, [r4, #20]
 801820e:	9b01      	ldr	r3, [sp, #4]
 8018210:	6120      	str	r0, [r4, #16]
 8018212:	b15b      	cbz	r3, 801822c <__smakebuf_r+0x74>
 8018214:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018218:	4630      	mov	r0, r6
 801821a:	f000 f859 	bl	80182d0 <_isatty_r>
 801821e:	b128      	cbz	r0, 801822c <__smakebuf_r+0x74>
 8018220:	89a3      	ldrh	r3, [r4, #12]
 8018222:	f023 0303 	bic.w	r3, r3, #3
 8018226:	f043 0301 	orr.w	r3, r3, #1
 801822a:	81a3      	strh	r3, [r4, #12]
 801822c:	89a3      	ldrh	r3, [r4, #12]
 801822e:	431d      	orrs	r5, r3
 8018230:	81a5      	strh	r5, [r4, #12]
 8018232:	e7cd      	b.n	80181d0 <__smakebuf_r+0x18>
 8018234:	080172a1 	.word	0x080172a1

08018238 <__malloc_lock>:
 8018238:	4770      	bx	lr

0801823a <__malloc_unlock>:
 801823a:	4770      	bx	lr

0801823c <_realloc_r>:
 801823c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801823e:	4607      	mov	r7, r0
 8018240:	4614      	mov	r4, r2
 8018242:	460e      	mov	r6, r1
 8018244:	b921      	cbnz	r1, 8018250 <_realloc_r+0x14>
 8018246:	4611      	mov	r1, r2
 8018248:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801824c:	f7ff b924 	b.w	8017498 <_malloc_r>
 8018250:	b922      	cbnz	r2, 801825c <_realloc_r+0x20>
 8018252:	f7ff f8d3 	bl	80173fc <_free_r>
 8018256:	4625      	mov	r5, r4
 8018258:	4628      	mov	r0, r5
 801825a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801825c:	f000 f848 	bl	80182f0 <_malloc_usable_size_r>
 8018260:	42a0      	cmp	r0, r4
 8018262:	d20f      	bcs.n	8018284 <_realloc_r+0x48>
 8018264:	4621      	mov	r1, r4
 8018266:	4638      	mov	r0, r7
 8018268:	f7ff f916 	bl	8017498 <_malloc_r>
 801826c:	4605      	mov	r5, r0
 801826e:	2800      	cmp	r0, #0
 8018270:	d0f2      	beq.n	8018258 <_realloc_r+0x1c>
 8018272:	4631      	mov	r1, r6
 8018274:	4622      	mov	r2, r4
 8018276:	f7fe ff3c 	bl	80170f2 <memcpy>
 801827a:	4631      	mov	r1, r6
 801827c:	4638      	mov	r0, r7
 801827e:	f7ff f8bd 	bl	80173fc <_free_r>
 8018282:	e7e9      	b.n	8018258 <_realloc_r+0x1c>
 8018284:	4635      	mov	r5, r6
 8018286:	e7e7      	b.n	8018258 <_realloc_r+0x1c>

08018288 <_read_r>:
 8018288:	b538      	push	{r3, r4, r5, lr}
 801828a:	4c07      	ldr	r4, [pc, #28]	; (80182a8 <_read_r+0x20>)
 801828c:	4605      	mov	r5, r0
 801828e:	4608      	mov	r0, r1
 8018290:	4611      	mov	r1, r2
 8018292:	2200      	movs	r2, #0
 8018294:	6022      	str	r2, [r4, #0]
 8018296:	461a      	mov	r2, r3
 8018298:	f7e8 fea6 	bl	8000fe8 <_read>
 801829c:	1c43      	adds	r3, r0, #1
 801829e:	d102      	bne.n	80182a6 <_read_r+0x1e>
 80182a0:	6823      	ldr	r3, [r4, #0]
 80182a2:	b103      	cbz	r3, 80182a6 <_read_r+0x1e>
 80182a4:	602b      	str	r3, [r5, #0]
 80182a6:	bd38      	pop	{r3, r4, r5, pc}
 80182a8:	2000d258 	.word	0x2000d258

080182ac <_fstat_r>:
 80182ac:	b538      	push	{r3, r4, r5, lr}
 80182ae:	4c07      	ldr	r4, [pc, #28]	; (80182cc <_fstat_r+0x20>)
 80182b0:	2300      	movs	r3, #0
 80182b2:	4605      	mov	r5, r0
 80182b4:	4608      	mov	r0, r1
 80182b6:	4611      	mov	r1, r2
 80182b8:	6023      	str	r3, [r4, #0]
 80182ba:	f7e8 feda 	bl	8001072 <_fstat>
 80182be:	1c43      	adds	r3, r0, #1
 80182c0:	d102      	bne.n	80182c8 <_fstat_r+0x1c>
 80182c2:	6823      	ldr	r3, [r4, #0]
 80182c4:	b103      	cbz	r3, 80182c8 <_fstat_r+0x1c>
 80182c6:	602b      	str	r3, [r5, #0]
 80182c8:	bd38      	pop	{r3, r4, r5, pc}
 80182ca:	bf00      	nop
 80182cc:	2000d258 	.word	0x2000d258

080182d0 <_isatty_r>:
 80182d0:	b538      	push	{r3, r4, r5, lr}
 80182d2:	4c06      	ldr	r4, [pc, #24]	; (80182ec <_isatty_r+0x1c>)
 80182d4:	2300      	movs	r3, #0
 80182d6:	4605      	mov	r5, r0
 80182d8:	4608      	mov	r0, r1
 80182da:	6023      	str	r3, [r4, #0]
 80182dc:	f7e8 fed9 	bl	8001092 <_isatty>
 80182e0:	1c43      	adds	r3, r0, #1
 80182e2:	d102      	bne.n	80182ea <_isatty_r+0x1a>
 80182e4:	6823      	ldr	r3, [r4, #0]
 80182e6:	b103      	cbz	r3, 80182ea <_isatty_r+0x1a>
 80182e8:	602b      	str	r3, [r5, #0]
 80182ea:	bd38      	pop	{r3, r4, r5, pc}
 80182ec:	2000d258 	.word	0x2000d258

080182f0 <_malloc_usable_size_r>:
 80182f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80182f4:	1f18      	subs	r0, r3, #4
 80182f6:	2b00      	cmp	r3, #0
 80182f8:	bfbc      	itt	lt
 80182fa:	580b      	ldrlt	r3, [r1, r0]
 80182fc:	18c0      	addlt	r0, r0, r3
 80182fe:	4770      	bx	lr

08018300 <_init>:
 8018300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018302:	bf00      	nop
 8018304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018306:	bc08      	pop	{r3}
 8018308:	469e      	mov	lr, r3
 801830a:	4770      	bx	lr

0801830c <_fini>:
 801830c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801830e:	bf00      	nop
 8018310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018312:	bc08      	pop	{r3}
 8018314:	469e      	mov	lr, r3
 8018316:	4770      	bx	lr
