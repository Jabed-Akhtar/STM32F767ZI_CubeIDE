
UDPServer_refFromO_v0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019870  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003f24  08019a70  08019a70  00029a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d994  0801d994  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  0801d994  0801d994  0002d994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d99c  0801d99c  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d99c  0801d99c  0002d99c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d9a0  0801d9a0  0002d9a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0801d9a4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d33c  20000080  0801da24  00030080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000d3bc  0801da24  0003d3bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003727b  00000000  00000000  000300ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007f9e  00000000  00000000  00067329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000026a0  00000000  00000000  0006f2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002570  00000000  00000000  00071968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003af97  00000000  00000000  00073ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003d5f0  00000000  00000000  000aee6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00128cf5  00000000  00000000  000ec45f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00215154  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a9a4  00000000  00000000  002151a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	08019a58 	.word	0x08019a58

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	08019a58 	.word	0x08019a58

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <configureTimerForRunTimeStats>:
void vApplicationIdleHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
//	ulStatsTimerticks = 0;
//	HAL_TIM_Base_Start_IT(&htim11);
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000618:	4b09      	ldr	r3, [pc, #36]	; (8000640 <configureTimerForRunTimeStats+0x2c>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	4a08      	ldr	r2, [pc, #32]	; (8000640 <configureTimerForRunTimeStats+0x2c>)
 800061e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000622:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= 1;
 8000624:	4b07      	ldr	r3, [pc, #28]	; (8000644 <configureTimerForRunTimeStats+0x30>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a06      	ldr	r2, [pc, #24]	; (8000644 <configureTimerForRunTimeStats+0x30>)
 800062a:	f043 0301 	orr.w	r3, r3, #1
 800062e:	6013      	str	r3, [r2, #0]
	DWT->CYCCNT = 0;
 8000630:	4b04      	ldr	r3, [pc, #16]	; (8000644 <configureTimerForRunTimeStats+0x30>)
 8000632:	2200      	movs	r2, #0
 8000634:	605a      	str	r2, [r3, #4]
}
 8000636:	bf00      	nop
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	e000edf0 	.word	0xe000edf0
 8000644:	e0001000 	.word	0xe0001000

08000648 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
//	return ulStatsTimerticks;
	return DWT->CYCCNT;
 800064c:	4b03      	ldr	r3, [pc, #12]	; (800065c <getRunTimeCounterValue+0x14>)
 800064e:	685b      	ldr	r3, [r3, #4]
}
 8000650:	4618      	mov	r0, r3
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	e0001000 	.word	0xe0001000

08000660 <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
	...

08000670 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	60b9      	str	r1, [r7, #8]
 800067a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	4a07      	ldr	r2, [pc, #28]	; (800069c <vApplicationGetIdleTaskMemory+0x2c>)
 8000680:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	4a06      	ldr	r2, [pc, #24]	; (80006a0 <vApplicationGetIdleTaskMemory+0x30>)
 8000686:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2280      	movs	r2, #128	; 0x80
 800068c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800068e:	bf00      	nop
 8000690:	3714      	adds	r7, #20
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	200000a0 	.word	0x200000a0
 80006a0:	20000114 	.word	0x20000114

080006a4 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	4a07      	ldr	r2, [pc, #28]	; (80006d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80006b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	4a06      	ldr	r2, [pc, #24]	; (80006d4 <vApplicationGetTimerTaskMemory+0x30>)
 80006ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006c2:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80006c4:	bf00      	nop
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	20000314 	.word	0x20000314
 80006d4:	20000388 	.word	0x20000388

080006d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d8:	b5b0      	push	{r4, r5, r7, lr}
 80006da:	b090      	sub	sp, #64	; 0x40
 80006dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006de:	f000 fe74 	bl	80013ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e2:	f000 f887 	bl	80007f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e6:	f000 f99b 	bl	8000a20 <MX_GPIO_Init>
  MX_ADC1_Init();
 80006ea:	f000 f8f1 	bl	80008d0 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 80006ee:	f000 f967 	bl	80009c0 <MX_USART3_UART_Init>
  MX_TIM11_Init();
 80006f2:	f000 f941 	bl	8000978 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  // sending data through USART at the beginning of Programm

  MX_LWIP_Init();
 80006f6:	f005 f85f 	bl	80057b8 <MX_LWIP_Init>

  char stri[] = "\n---------- Programm started!!! ----------\n\n\r";
 80006fa:	4b32      	ldr	r3, [pc, #200]	; (80007c4 <main+0xec>)
 80006fc:	463c      	mov	r4, r7
 80006fe:	461d      	mov	r5, r3
 8000700:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000704:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000708:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800070c:	c407      	stmia	r4!, {r0, r1, r2}
 800070e:	8023      	strh	r3, [r4, #0]
  HAL_UART_Transmit(&huart3, (uint8_t*)stri, strlen(stri), HAL_MAX_DELAY);
 8000710:	463b      	mov	r3, r7
 8000712:	4618      	mov	r0, r3
 8000714:	f7ff fd9e 	bl	8000254 <strlen>
 8000718:	4603      	mov	r3, r0
 800071a:	b29a      	uxth	r2, r3
 800071c:	4639      	mov	r1, r7
 800071e:	f04f 33ff 	mov.w	r3, #4294967295
 8000722:	4829      	ldr	r0, [pc, #164]	; (80007c8 <main+0xf0>)
 8000724:	f004 fba0 	bl	8004e68 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  Own_Queue = xQueueCreate(3,sizeof(struct queue_struct));
 8000728:	2200      	movs	r2, #0
 800072a:	2130      	movs	r1, #48	; 0x30
 800072c:	2003      	movs	r0, #3
 800072e:	f006 fa6f 	bl	8006c10 <xQueueGenericCreate>
 8000732:	4603      	mov	r3, r0
 8000734:	4a25      	ldr	r2, [pc, #148]	; (80007cc <main+0xf4>)
 8000736:	6013      	str	r3, [r2, #0]
  temperatureVal_queue = xQueueCreate(5, sizeof(tempVal_struct));
 8000738:	2200      	movs	r2, #0
 800073a:	2108      	movs	r1, #8
 800073c:	2005      	movs	r0, #5
 800073e:	f006 fa67 	bl	8006c10 <xQueueGenericCreate>
 8000742:	4603      	mov	r3, r0
 8000744:	4a22      	ldr	r2, [pc, #136]	; (80007d0 <main+0xf8>)
 8000746:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  HeartBeat_Timer = xTimerCreate("HeartBeat", pdMS_TO_TICKS(HEART_BEAT_RATE), pdTRUE, 0, HeartBeatCallback);
 8000748:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <main+0xfc>)
 800074a:	9300      	str	r3, [sp, #0]
 800074c:	2300      	movs	r3, #0
 800074e:	2201      	movs	r2, #1
 8000750:	21fa      	movs	r1, #250	; 0xfa
 8000752:	4821      	ldr	r0, [pc, #132]	; (80007d8 <main+0x100>)
 8000754:	f008 fb58 	bl	8008e08 <xTimerCreate>
 8000758:	6378      	str	r0, [r7, #52]	; 0x34
//  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
//  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(vTemp_Task, "Temp_Task",configMINIMAL_STACK_SIZE*2, NULL,1, NULL);		// Stacksize 128kB
 800075a:	2300      	movs	r3, #0
 800075c:	9301      	str	r3, [sp, #4]
 800075e:	2301      	movs	r3, #1
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	2300      	movs	r3, #0
 8000764:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000768:	491c      	ldr	r1, [pc, #112]	; (80007dc <main+0x104>)
 800076a:	481d      	ldr	r0, [pc, #116]	; (80007e0 <main+0x108>)
 800076c:	f007 fa37 	bl	8007bde <xTaskCreate>
  xTaskCreate(vGateKeeper_Task,"GateKeeper",4*configMINIMAL_STACK_SIZE,NULL,2,NULL);	// Stacksize 4*128kB
 8000770:	2300      	movs	r3, #0
 8000772:	9301      	str	r3, [sp, #4]
 8000774:	2302      	movs	r3, #2
 8000776:	9300      	str	r3, [sp, #0]
 8000778:	2300      	movs	r3, #0
 800077a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800077e:	4919      	ldr	r1, [pc, #100]	; (80007e4 <main+0x10c>)
 8000780:	4819      	ldr	r0, [pc, #100]	; (80007e8 <main+0x110>)
 8000782:	f007 fa2c 	bl	8007bde <xTaskCreate>
  xTaskCreate(vUDP_Task,"UDP_Task",4*configMINIMAL_STACK_SIZE,NULL,1,NULL);					// Stacksize 4*128kB
 8000786:	2300      	movs	r3, #0
 8000788:	9301      	str	r3, [sp, #4]
 800078a:	2301      	movs	r3, #1
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	2300      	movs	r3, #0
 8000790:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000794:	4915      	ldr	r1, [pc, #84]	; (80007ec <main+0x114>)
 8000796:	4816      	ldr	r0, [pc, #88]	; (80007f0 <main+0x118>)
 8000798:	f007 fa21 	bl	8007bde <xTaskCreate>

  if(HeartBeat_Timer != NULL){
 800079c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d00f      	beq.n	80007c2 <main+0xea>
	  Timer_State = xTimerStart(HeartBeat_Timer,0);
 80007a2:	f007 fd39 	bl	8008218 <xTaskGetTickCount>
 80007a6:	4602      	mov	r2, r0
 80007a8:	2300      	movs	r3, #0
 80007aa:	9300      	str	r3, [sp, #0]
 80007ac:	2300      	movs	r3, #0
 80007ae:	2101      	movs	r1, #1
 80007b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80007b2:	f008 fb87 	bl	8008ec4 <xTimerGenericCommand>
 80007b6:	6338      	str	r0, [r7, #48]	; 0x30
	  if(Timer_State == pdPASS){
 80007b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d101      	bne.n	80007c2 <main+0xea>
		  vTaskStartScheduler();
 80007be:	f007 fc13 	bl	8007fe8 <vTaskStartScheduler>
//  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007c2:	e7fe      	b.n	80007c2 <main+0xea>
 80007c4:	08019aa0 	.word	0x08019aa0
 80007c8:	2000081c 	.word	0x2000081c
 80007cc:	200008a0 	.word	0x200008a0
 80007d0:	200008a4 	.word	0x200008a4
 80007d4:	08000b01 	.word	0x08000b01
 80007d8:	08019a70 	.word	0x08019a70
 80007dc:	08019a7c 	.word	0x08019a7c
 80007e0:	08000b1d 	.word	0x08000b1d
 80007e4:	08019a88 	.word	0x08019a88
 80007e8:	08000dc9 	.word	0x08000dc9
 80007ec:	08019a94 	.word	0x08019a94
 80007f0:	08000c49 	.word	0x08000c49

080007f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b094      	sub	sp, #80	; 0x50
 80007f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	2234      	movs	r2, #52	; 0x34
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f017 ff1c 	bl	8018640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000808:	f107 0308 	add.w	r3, r7, #8
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000818:	4b2b      	ldr	r3, [pc, #172]	; (80008c8 <SystemClock_Config+0xd4>)
 800081a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081c:	4a2a      	ldr	r2, [pc, #168]	; (80008c8 <SystemClock_Config+0xd4>)
 800081e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000822:	6413      	str	r3, [r2, #64]	; 0x40
 8000824:	4b28      	ldr	r3, [pc, #160]	; (80008c8 <SystemClock_Config+0xd4>)
 8000826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000830:	4b26      	ldr	r3, [pc, #152]	; (80008cc <SystemClock_Config+0xd8>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a25      	ldr	r2, [pc, #148]	; (80008cc <SystemClock_Config+0xd8>)
 8000836:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800083a:	6013      	str	r3, [r2, #0]
 800083c:	4b23      	ldr	r3, [pc, #140]	; (80008cc <SystemClock_Config+0xd8>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000844:	603b      	str	r3, [r7, #0]
 8000846:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000848:	2301      	movs	r3, #1
 800084a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800084c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000850:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000852:	2302      	movs	r3, #2
 8000854:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000856:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800085a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800085c:	2304      	movs	r3, #4
 800085e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000860:	23d8      	movs	r3, #216	; 0xd8
 8000862:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000864:	2302      	movs	r3, #2
 8000866:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000868:	2302      	movs	r3, #2
 800086a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800086c:	2302      	movs	r3, #2
 800086e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4618      	mov	r0, r3
 8000876:	f002 fea5 	bl	80035c4 <HAL_RCC_OscConfig>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000880:	f000 fb28 	bl	8000ed4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000884:	f002 fe4e 	bl	8003524 <HAL_PWREx_EnableOverDrive>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800088e:	f000 fb21 	bl	8000ed4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000892:	230f      	movs	r3, #15
 8000894:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000896:	2302      	movs	r3, #2
 8000898:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089a:	2300      	movs	r3, #0
 800089c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800089e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80008aa:	f107 0308 	add.w	r3, r7, #8
 80008ae:	2107      	movs	r1, #7
 80008b0:	4618      	mov	r0, r3
 80008b2:	f003 f935 	bl	8003b20 <HAL_RCC_ClockConfig>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80008bc:	f000 fb0a 	bl	8000ed4 <Error_Handler>
  }
}
 80008c0:	bf00      	nop
 80008c2:	3750      	adds	r7, #80	; 0x50
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40007000 	.word	0x40007000

080008d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008d6:	463b      	mov	r3, r7
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008e2:	4b21      	ldr	r3, [pc, #132]	; (8000968 <MX_ADC1_Init+0x98>)
 80008e4:	4a21      	ldr	r2, [pc, #132]	; (800096c <MX_ADC1_Init+0x9c>)
 80008e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80008e8:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <MX_ADC1_Init+0x98>)
 80008ea:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008f0:	4b1d      	ldr	r3, [pc, #116]	; (8000968 <MX_ADC1_Init+0x98>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008f6:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <MX_ADC1_Init+0x98>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008fc:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <MX_ADC1_Init+0x98>)
 80008fe:	2201      	movs	r2, #1
 8000900:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000902:	4b19      	ldr	r3, [pc, #100]	; (8000968 <MX_ADC1_Init+0x98>)
 8000904:	2200      	movs	r2, #0
 8000906:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800090a:	4b17      	ldr	r3, [pc, #92]	; (8000968 <MX_ADC1_Init+0x98>)
 800090c:	2200      	movs	r2, #0
 800090e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000910:	4b15      	ldr	r3, [pc, #84]	; (8000968 <MX_ADC1_Init+0x98>)
 8000912:	4a17      	ldr	r2, [pc, #92]	; (8000970 <MX_ADC1_Init+0xa0>)
 8000914:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000916:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_ADC1_Init+0x98>)
 8000918:	2200      	movs	r2, #0
 800091a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <MX_ADC1_Init+0x98>)
 800091e:	2201      	movs	r2, #1
 8000920:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_ADC1_Init+0x98>)
 8000924:	2200      	movs	r2, #0
 8000926:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800092a:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_ADC1_Init+0x98>)
 800092c:	2201      	movs	r2, #1
 800092e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000930:	480d      	ldr	r0, [pc, #52]	; (8000968 <MX_ADC1_Init+0x98>)
 8000932:	f000 fd9b 	bl	800146c <HAL_ADC_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800093c:	f000 faca 	bl	8000ed4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_ADC1_Init+0xa4>)
 8000942:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000944:	2301      	movs	r3, #1
 8000946:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000948:	2306      	movs	r3, #6
 800094a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800094c:	463b      	mov	r3, r7
 800094e:	4619      	mov	r1, r3
 8000950:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_ADC1_Init+0x98>)
 8000952:	f000 ff69 	bl	8001828 <HAL_ADC_ConfigChannel>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800095c:	f000 faba 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	3710      	adds	r7, #16
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000788 	.word	0x20000788
 800096c:	40012000 	.word	0x40012000
 8000970:	0f000001 	.word	0x0f000001
 8000974:	10000012 	.word	0x10000012

08000978 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800097c:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <MX_TIM11_Init+0x40>)
 800097e:	4a0f      	ldr	r2, [pc, #60]	; (80009bc <MX_TIM11_Init+0x44>)
 8000980:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8000982:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <MX_TIM11_Init+0x40>)
 8000984:	2200      	movs	r2, #0
 8000986:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000988:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <MX_TIM11_Init+0x40>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1079;
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <MX_TIM11_Init+0x40>)
 8000990:	f240 4237 	movw	r2, #1079	; 0x437
 8000994:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <MX_TIM11_Init+0x40>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <MX_TIM11_Init+0x40>)
 800099e:	2200      	movs	r2, #0
 80009a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_TIM11_Init+0x40>)
 80009a4:	f003 ff3c 	bl	8004820 <HAL_TIM_Base_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80009ae:	f000 fa91 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200007d0 	.word	0x200007d0
 80009bc:	40014800 	.word	0x40014800

080009c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009c4:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <MX_USART3_UART_Init+0x58>)
 80009c6:	4a15      	ldr	r2, [pc, #84]	; (8000a1c <MX_USART3_UART_Init+0x5c>)
 80009c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009ca:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <MX_USART3_UART_Init+0x58>)
 80009cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009d2:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <MX_USART3_UART_Init+0x58>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <MX_USART3_UART_Init+0x58>)
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <MX_USART3_UART_Init+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <MX_USART3_UART_Init+0x58>)
 80009e6:	220c      	movs	r2, #12
 80009e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <MX_USART3_UART_Init+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <MX_USART3_UART_Init+0x58>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <MX_USART3_UART_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <MX_USART3_UART_Init+0x58>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_USART3_UART_Init+0x58>)
 8000a04:	f004 f9e2 	bl	8004dcc <HAL_UART_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a0e:	f000 fa61 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	2000081c 	.word	0x2000081c
 8000a1c:	40004800 	.word	0x40004800

08000a20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08c      	sub	sp, #48	; 0x30
 8000a24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
 8000a34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a36:	4b30      	ldr	r3, [pc, #192]	; (8000af8 <MX_GPIO_Init+0xd8>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a2f      	ldr	r2, [pc, #188]	; (8000af8 <MX_GPIO_Init+0xd8>)
 8000a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b2d      	ldr	r3, [pc, #180]	; (8000af8 <MX_GPIO_Init+0xd8>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a4a:	61bb      	str	r3, [r7, #24]
 8000a4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4e:	4b2a      	ldr	r3, [pc, #168]	; (8000af8 <MX_GPIO_Init+0xd8>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a29      	ldr	r2, [pc, #164]	; (8000af8 <MX_GPIO_Init+0xd8>)
 8000a54:	f043 0304 	orr.w	r3, r3, #4
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b27      	ldr	r3, [pc, #156]	; (8000af8 <MX_GPIO_Init+0xd8>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0304 	and.w	r3, r3, #4
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	4b24      	ldr	r3, [pc, #144]	; (8000af8 <MX_GPIO_Init+0xd8>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a23      	ldr	r2, [pc, #140]	; (8000af8 <MX_GPIO_Init+0xd8>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <MX_GPIO_Init+0xd8>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7e:	4b1e      	ldr	r3, [pc, #120]	; (8000af8 <MX_GPIO_Init+0xd8>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a1d      	ldr	r2, [pc, #116]	; (8000af8 <MX_GPIO_Init+0xd8>)
 8000a84:	f043 0302 	orr.w	r3, r3, #2
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <MX_GPIO_Init+0xd8>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0302 	and.w	r3, r3, #2
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a96:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <MX_GPIO_Init+0xd8>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a17      	ldr	r2, [pc, #92]	; (8000af8 <MX_GPIO_Init+0xd8>)
 8000a9c:	f043 0308 	orr.w	r3, r3, #8
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <MX_GPIO_Init+0xd8>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0308 	and.w	r3, r3, #8
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aae:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <MX_GPIO_Init+0xd8>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a11      	ldr	r2, [pc, #68]	; (8000af8 <MX_GPIO_Init+0xd8>)
 8000ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <MX_GPIO_Init+0xd8>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Green_LED_Pin|Red_LED_Pin|Blue_LED_Pin, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f244 0181 	movw	r1, #16513	; 0x4081
 8000acc:	480b      	ldr	r0, [pc, #44]	; (8000afc <MX_GPIO_Init+0xdc>)
 8000ace:	f002 fcf5 	bl	80034bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Green_LED_Pin Red_LED_Pin Blue_LED_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Red_LED_Pin|Blue_LED_Pin;
 8000ad2:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae4:	f107 031c 	add.w	r3, r7, #28
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4804      	ldr	r0, [pc, #16]	; (8000afc <MX_GPIO_Init+0xdc>)
 8000aec:	f002 fb3a 	bl	8003164 <HAL_GPIO_Init>

}
 8000af0:	bf00      	nop
 8000af2:	3730      	adds	r7, #48	; 0x30
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40020400 	.word	0x40020400

08000b00 <HeartBeatCallback>:
void vAplicationIdleHook(void){
	__WFI();
}

/* Timer callback function */
void HeartBeatCallback(TimerHandle_t xTimer){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, Green_LED_Pin);
 8000b08:	2101      	movs	r1, #1
 8000b0a:	4803      	ldr	r0, [pc, #12]	; (8000b18 <HeartBeatCallback+0x18>)
 8000b0c:	f002 fcef 	bl	80034ee <HAL_GPIO_TogglePin>
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40020400 	.word	0x40020400

08000b1c <vTemp_Task>:

/* Temperature reading task */
void vTemp_Task(void *pvParameters)
{
 8000b1c:	b5b0      	push	{r4, r5, r7, lr}
 8000b1e:	b09e      	sub	sp, #120	; 0x78
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	char stri1[] = "{vTemp_Task} [Info]	Entered vTemp_Task.\n\r";
 8000b24:	4b3f      	ldr	r3, [pc, #252]	; (8000c24 <vTemp_Task+0x108>)
 8000b26:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000b2a:	461d      	mov	r5, r3
 8000b2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b38:	c403      	stmia	r4!, {r0, r1}
 8000b3a:	8022      	strh	r2, [r4, #0]
    HAL_UART_Transmit(&huart3, (uint8_t*)stri1, strlen(stri1), HAL_MAX_DELAY);
 8000b3c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fb87 	bl	8000254 <strlen>
 8000b46:	4603      	mov	r3, r0
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b52:	4835      	ldr	r0, [pc, #212]	; (8000c28 <vTemp_Task+0x10c>)
 8000b54:	f004 f988 	bl	8004e68 <HAL_UART_Transmit>

	TickType_t xLastWakeTime;
	static uint16_t counter = 0; // Counter variable to count tempr. reading
	static uint32_t temp_sum = 0; // variable to store sum of temp. value
	uint32_t temp = 0;			// variable to store current temp. value
 8000b58:	2300      	movs	r3, #0
 8000b5a:	677b      	str	r3, [r7, #116]	; 0x74
	uint32_t temp_avr = 0;		// variable to store average temp. value
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	673b      	str	r3, [r7, #112]	; 0x70
	queue_struct from_temp_task; // structure variable to store data for gate keeper task
	from_temp_task.port = htons(CLIENT_PORT);	// port for client
 8000b60:	f641 305b 	movw	r0, #7003	; 0x1b5b
 8000b64:	f00c fa82 	bl	800d06c <lwip_htons>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	82bb      	strh	r3, [r7, #20]
	from_temp_task.addr = IPADDR_BROADCAST;	// client address
 8000b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b70:	613b      	str	r3, [r7, #16]
	// variable for data over uart
	tempVal_struct tempStruct;

	xLastWakeTime = xTaskGetTickCount();
 8000b72:	f007 fb51 	bl	8008218 <xTaskGetTickCount>
 8000b76:	4603      	mov	r3, r0
 8000b78:	643b      	str	r3, [r7, #64]	; 0x40

	while(1){

		/* Read temp. adc value */
		HAL_ADC_Start(&hadc1);
 8000b7a:	482c      	ldr	r0, [pc, #176]	; (8000c2c <vTemp_Task+0x110>)
 8000b7c:	f000 fcba 	bl	80014f4 <HAL_ADC_Start>
		while(HAL_ADC_PollForConversion(&hadc1,1) != HAL_OK){}
 8000b80:	bf00      	nop
 8000b82:	2101      	movs	r1, #1
 8000b84:	4829      	ldr	r0, [pc, #164]	; (8000c2c <vTemp_Task+0x110>)
 8000b86:	f000 fdb7 	bl	80016f8 <HAL_ADC_PollForConversion>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d1f8      	bne.n	8000b82 <vTemp_Task+0x66>
		temp = HAL_ADC_GetValue(&hadc1);
 8000b90:	4826      	ldr	r0, [pc, #152]	; (8000c2c <vTemp_Task+0x110>)
 8000b92:	f000 fe3c 	bl	800180e <HAL_ADC_GetValue>
 8000b96:	6778      	str	r0, [r7, #116]	; 0x74
		temp_sum += temp;
 8000b98:	4b25      	ldr	r3, [pc, #148]	; (8000c30 <vTemp_Task+0x114>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b9e:	4413      	add	r3, r2
 8000ba0:	4a23      	ldr	r2, [pc, #140]	; (8000c30 <vTemp_Task+0x114>)
 8000ba2:	6013      	str	r3, [r2, #0]
		counter++;
 8000ba4:	4b23      	ldr	r3, [pc, #140]	; (8000c34 <vTemp_Task+0x118>)
 8000ba6:	881b      	ldrh	r3, [r3, #0]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	4b21      	ldr	r3, [pc, #132]	; (8000c34 <vTemp_Task+0x118>)
 8000bae:	801a      	strh	r2, [r3, #0]
		temp_avr = temp_sum / counter;	// get average value
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	; (8000c30 <vTemp_Task+0x114>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a1f      	ldr	r2, [pc, #124]	; (8000c34 <vTemp_Task+0x118>)
 8000bb6:	8812      	ldrh	r2, [r2, #0]
 8000bb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8000bbc:	673b      	str	r3, [r7, #112]	; 0x70
		HAL_ADC_Stop(&hadc1);
 8000bbe:	481b      	ldr	r0, [pc, #108]	; (8000c2c <vTemp_Task+0x110>)
 8000bc0:	f000 fd66 	bl	8001690 <HAL_ADC_Stop>

		memset(&from_temp_task.msg_buffer, 0, BUFFER_LENGTH); // clear the character buffer
 8000bc4:	f107 0310 	add.w	r3, r7, #16
 8000bc8:	3306      	adds	r3, #6
 8000bca:	2228      	movs	r2, #40	; 0x28
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f017 fd36 	bl	8018640 <memset>
		/* make a string */
		sprintf(from_temp_task.msg_buffer,"Cur_Temp= %lu , Avr_Temp= %lu\n",(unsigned long)temp,(unsigned long)temp_avr);
 8000bd4:	f107 0310 	add.w	r3, r7, #16
 8000bd8:	1d98      	adds	r0, r3, #6
 8000bda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000bdc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000bde:	4916      	ldr	r1, [pc, #88]	; (8000c38 <vTemp_Task+0x11c>)
 8000be0:	f017 fd8c 	bl	80186fc <siprintf>

		tempStruct.lastVal = temp;
 8000be4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000be6:	60bb      	str	r3, [r7, #8]
		tempStruct.avrVal = temp_avr;
 8000be8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000bea:	60fb      	str	r3, [r7, #12]

		HAL_GPIO_TogglePin(GPIOB, Blue_LED_Pin);	// toggel blue led
 8000bec:	2180      	movs	r1, #128	; 0x80
 8000bee:	4813      	ldr	r0, [pc, #76]	; (8000c3c <vTemp_Task+0x120>)
 8000bf0:	f002 fc7d 	bl	80034ee <HAL_GPIO_TogglePin>

		xQueueSendToBack(Own_Queue, &from_temp_task, 10);	// send message to gatekeeper task
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <vTemp_Task+0x124>)
 8000bf6:	6818      	ldr	r0, [r3, #0]
 8000bf8:	f107 0110 	add.w	r1, r7, #16
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	220a      	movs	r2, #10
 8000c00:	f006 f8b8 	bl	8006d74 <xQueueGenericSend>
		xQueueSendToBack(temperatureVal_queue, &tempStruct, 10);
 8000c04:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <vTemp_Task+0x128>)
 8000c06:	6818      	ldr	r0, [r3, #0]
 8000c08:	f107 0108 	add.w	r1, r7, #8
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	220a      	movs	r2, #10
 8000c10:	f006 f8b0 	bl	8006d74 <xQueueGenericSend>

		vTaskDelayUntil(&xLastWakeTime, TEMP_READING_RATE); // wait till timeout
 8000c14:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f007 f929 	bl	8007e74 <vTaskDelayUntil>
		HAL_ADC_Start(&hadc1);
 8000c22:	e7aa      	b.n	8000b7a <vTemp_Task+0x5e>
 8000c24:	08019af0 	.word	0x08019af0
 8000c28:	2000081c 	.word	0x2000081c
 8000c2c:	20000788 	.word	0x20000788
 8000c30:	200008ac 	.word	0x200008ac
 8000c34:	200008b0 	.word	0x200008b0
 8000c38:	08019ad0 	.word	0x08019ad0
 8000c3c:	40020400 	.word	0x40020400
 8000c40:	200008a0 	.word	0x200008a0
 8000c44:	200008a4 	.word	0x200008a4

08000c48 <vUDP_Task>:
	}
}

/* UDP task */
void vUDP_Task(void *pvParameters)
{
 8000c48:	b5b0      	push	{r4, r5, r7, lr}
 8000c4a:	b0a4      	sub	sp, #144	; 0x90
 8000c4c:	af02      	add	r7, sp, #8
 8000c4e:	6078      	str	r0, [r7, #4]
	char stri1[] = "{vUDP_Task} [Info]	Entered vUDP_Task.\n\r";
 8000c50:	4b54      	ldr	r3, [pc, #336]	; (8000da4 <vUDP_Task+0x15c>)
 8000c52:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8000c56:	461d      	mov	r5, r3
 8000c58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c60:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c64:	e884 0003 	stmia.w	r4, {r0, r1}
	HAL_UART_Transmit(&huart3, (uint8_t*)stri1, strlen(stri1), HAL_MAX_DELAY);
 8000c68:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff faf1 	bl	8000254 <strlen>
 8000c72:	4603      	mov	r3, r0
 8000c74:	b29a      	uxth	r2, r3
 8000c76:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7e:	484a      	ldr	r0, [pc, #296]	; (8000da8 <vUDP_Task+0x160>)
 8000c80:	f004 f8f2 	bl	8004e68 <HAL_UART_Transmit>

	struct sockaddr_in client_addr; // struct variable for udp client
	struct sockaddr_in server_addr; // struct variable for udp server
	queue_struct from_udp_task;		// struct variable to pass through gate keeper
	uint8_t echo_flag = FALSE;		// echo flag
 8000c84:	2300      	movs	r3, #0
 8000c86:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	/*
	 * Create socket descriptor : "Domain=AF_INET","Type=SOCK_DGRAM","Protocol=0"
	 *  AF_INET= Connect with different machine, SOCK_DGRAM= UDP, 0=No additional protocol
	 *  */

	HAL_GPIO_WritePin(GPIOB, Red_LED_Pin, GPIO_PIN_SET); // turn on Red-LED
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c90:	4846      	ldr	r0, [pc, #280]	; (8000dac <vUDP_Task+0x164>)
 8000c92:	f002 fc13 	bl	80034bc <HAL_GPIO_WritePin>

	socket_id = socket(AF_INET,SOCK_DGRAM,0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2102      	movs	r1, #2
 8000c9a:	2002      	movs	r0, #2
 8000c9c:	f00b fe30 	bl	800c900 <lwip_socket>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	4a43      	ldr	r2, [pc, #268]	; (8000db0 <vUDP_Task+0x168>)
 8000ca4:	6013      	str	r3, [r2, #0]

//	Reset structure variable
	memset(&server_addr, 0, sizeof(server_addr));
 8000ca6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000caa:	2210      	movs	r2, #16
 8000cac:	2100      	movs	r1, #0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f017 fcc6 	bl	8018640 <memset>
	memset(&client_addr, 0, sizeof(client_addr));
 8000cb4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000cb8:	2210      	movs	r2, #16
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f017 fcbf 	bl	8018640 <memset>

// Initialize port
	server_addr.sin_family = AF_INET;	// Domain used in socket descriptor
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	server_addr.sin_addr.s_addr = inet_addr(OWN_IP_ADDR); // Permit given IP Address
 8000cc8:	483a      	ldr	r0, [pc, #232]	; (8000db4 <vUDP_Task+0x16c>)
 8000cca:	f016 fa28 	bl	801711e <ipaddr_addr>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	643b      	str	r3, [r7, #64]	; 0x40
//	server_addr.sin_addr.s_addr = htonl(INADDR_ANY);
	server_addr.sin_port = htons(OWN_PORT);	// Permit given Port
 8000cd2:	f641 208f 	movw	r0, #6799	; 0x1a8f
 8000cd6:	f00c f9c9 	bl	800d06c <lwip_htons>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	87fb      	strh	r3, [r7, #62]	; 0x3e

//	Bind the socket to a defined port
	if (bind(socket_id,(struct sockaddr *) &server_addr, sizeof(server_addr)) == -1){
 8000cde:	4b34      	ldr	r3, [pc, #208]	; (8000db0 <vUDP_Task+0x168>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000ce6:	2210      	movs	r2, #16
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f00b f975 	bl	800bfd8 <lwip_bind>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf4:	d101      	bne.n	8000cfa <vUDP_Task+0xb2>
		Error_Handler();
 8000cf6:	f000 f8ed 	bl	8000ed4 <Error_Handler>
	}

	from_len = sizeof(client_addr);
 8000cfa:	2310      	movs	r3, #16
 8000cfc:	60bb      	str	r3, [r7, #8]

//	Endlos loop
	while(1){
		HAL_GPIO_TogglePin(GPIOB, Red_LED_Pin);	// toggle blue led
 8000cfe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d02:	482a      	ldr	r0, [pc, #168]	; (8000dac <vUDP_Task+0x164>)
 8000d04:	f002 fbf3 	bl	80034ee <HAL_GPIO_TogglePin>

//	Clear recv_data array
		memset(&from_udp_task.msg_buffer,0,BUFFER_LENGTH);
 8000d08:	f107 030c 	add.w	r3, r7, #12
 8000d0c:	3306      	adds	r3, #6
 8000d0e:	2228      	movs	r2, #40	; 0x28
 8000d10:	2100      	movs	r1, #0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f017 fc94 	bl	8018640 <memset>
//	Receive data from server
		recvfrom(socket_id,from_udp_task.msg_buffer,sizeof(from_udp_task.msg_buffer),0,(struct sockaddr *)&client_addr,&from_len);
 8000d18:	4b25      	ldr	r3, [pc, #148]	; (8000db0 <vUDP_Task+0x168>)
 8000d1a:	6818      	ldr	r0, [r3, #0]
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	1d99      	adds	r1, r3, #6
 8000d22:	f107 0308 	add.w	r3, r7, #8
 8000d26:	9301      	str	r3, [sp, #4]
 8000d28:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d2c:	9300      	str	r3, [sp, #0]
 8000d2e:	2300      	movs	r3, #0
 8000d30:	2228      	movs	r2, #40	; 0x28
 8000d32:	f00b fc43 	bl	800c5bc <lwip_recvfrom>

// Set flag according received message
		if(strcmp(from_udp_task.msg_buffer,"ECHO_ON") == 0){
 8000d36:	f107 030c 	add.w	r3, r7, #12
 8000d3a:	3306      	adds	r3, #6
 8000d3c:	491e      	ldr	r1, [pc, #120]	; (8000db8 <vUDP_Task+0x170>)
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff fa7e 	bl	8000240 <strcmp>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d103      	bne.n	8000d52 <vUDP_Task+0x10a>
//			HAL_GPIO_WritePin(GPIOB, Red_LED_Pin,GPIO_PIN_SET);
			echo_flag = TRUE;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8000d50:	e00c      	b.n	8000d6c <vUDP_Task+0x124>
		}
		else if(strcmp(from_udp_task.msg_buffer,"ECHO_OFF")== 0){
 8000d52:	f107 030c 	add.w	r3, r7, #12
 8000d56:	3306      	adds	r3, #6
 8000d58:	4918      	ldr	r1, [pc, #96]	; (8000dbc <vUDP_Task+0x174>)
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff fa70 	bl	8000240 <strcmp>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d102      	bne.n	8000d6c <vUDP_Task+0x124>
//			HAL_GPIO_WritePin(GPIOB, Red_LED_Pin,GPIO_PIN_RESET);
			echo_flag = FALSE;
 8000d66:	2300      	movs	r3, #0
 8000d68:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		}

		if (echo_flag == TRUE){
 8000d6c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d1c4      	bne.n	8000cfe <vUDP_Task+0xb6>
			from_udp_task.addr = client_addr.sin_addr.s_addr;
 8000d74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d76:	60fb      	str	r3, [r7, #12]
			from_udp_task.port = client_addr.sin_port;
 8000d78:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000d7c:	823b      	strh	r3, [r7, #16]
			/* Make string */
			sprintf(from_udp_task.msg_buffer, "%s\n", from_udp_task.msg_buffer);
 8000d7e:	f107 030c 	add.w	r3, r7, #12
 8000d82:	1d9a      	adds	r2, r3, #6
 8000d84:	f107 030c 	add.w	r3, r7, #12
 8000d88:	3306      	adds	r3, #6
 8000d8a:	490d      	ldr	r1, [pc, #52]	; (8000dc0 <vUDP_Task+0x178>)
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f017 fcb5 	bl	80186fc <siprintf>
			xQueueSend(Own_Queue, &from_udp_task, 10); // send to gatekeeper task
 8000d92:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <vUDP_Task+0x17c>)
 8000d94:	6818      	ldr	r0, [r3, #0]
 8000d96:	f107 010c 	add.w	r1, r7, #12
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	220a      	movs	r2, #10
 8000d9e:	f005 ffe9 	bl	8006d74 <xQueueGenericSend>
		HAL_GPIO_TogglePin(GPIOB, Red_LED_Pin);	// toggle blue led
 8000da2:	e7ac      	b.n	8000cfe <vUDP_Task+0xb6>
 8000da4:	08019b44 	.word	0x08019b44
 8000da8:	2000081c 	.word	0x2000081c
 8000dac:	40020400 	.word	0x40020400
 8000db0:	200008a8 	.word	0x200008a8
 8000db4:	08019b1c 	.word	0x08019b1c
 8000db8:	08019b2c 	.word	0x08019b2c
 8000dbc:	08019b34 	.word	0x08019b34
 8000dc0:	08019b40 	.word	0x08019b40
 8000dc4:	200008a0 	.word	0x200008a0

08000dc8 <vGateKeeper_Task>:
	}
}

/* Gatekeeper task */
void vGateKeeper_Task(void *pvParameters)
{
 8000dc8:	b5b0      	push	{r4, r5, r7, lr}
 8000dca:	b0b2      	sub	sp, #200	; 0xc8
 8000dcc:	af02      	add	r7, sp, #8
 8000dce:	6078      	str	r0, [r7, #4]
	char stri1[] = "{vGateKeeper_Task} [Info]	Entered vGateKeeper_Task.\n\r";
 8000dd0:	4b31      	ldr	r3, [pc, #196]	; (8000e98 <vGateKeeper_Task+0xd0>)
 8000dd2:	f107 0488 	add.w	r4, r7, #136	; 0x88
 8000dd6:	461d      	mov	r5, r3
 8000dd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ddc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000de0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000de2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000de4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000de8:	6020      	str	r0, [r4, #0]
 8000dea:	3404      	adds	r4, #4
 8000dec:	8021      	strh	r1, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)stri1, strlen(stri1), HAL_MAX_DELAY);
 8000dee:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff fa2e 	bl	8000254 <strlen>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8000e00:	f04f 33ff 	mov.w	r3, #4294967295
 8000e04:	4825      	ldr	r0, [pc, #148]	; (8000e9c <vGateKeeper_Task+0xd4>)
 8000e06:	f004 f82f 	bl	8004e68 <HAL_UART_Transmit>

	tempVal_struct tempStruct;
	char s_tempVal[50];

	while(1){
		memset(&recv_from,0,sizeof(recv_from)); // reset the struct variable
 8000e0a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e0e:	2230      	movs	r2, #48	; 0x30
 8000e10:	2100      	movs	r1, #0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f017 fc14 	bl	8018640 <memset>
		xQueueReceive(Own_Queue, &recv_from, portMAX_DELAY); // receive message
 8000e18:	4b21      	ldr	r3, [pc, #132]	; (8000ea0 <vGateKeeper_Task+0xd8>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000e20:	f04f 32ff 	mov.w	r2, #4294967295
 8000e24:	4618      	mov	r0, r3
 8000e26:	f006 f9e1 	bl	80071ec <xQueueReceive>

		/* UDP client initialization */
		client_addr.sin_family = AF_INET;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
		client_addr.sin_addr.s_addr = recv_from.addr;
 8000e30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000e32:	64fb      	str	r3, [r7, #76]	; 0x4c
		client_addr.sin_port = recv_from.port;
 8000e34:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8000e38:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

		// Send Temperature data through UART
		xQueueReceive(temperatureVal_queue, &tempStruct, portMAX_DELAY); // receive message
 8000e3c:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <vGateKeeper_Task+0xdc>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000e44:	f04f 32ff 	mov.w	r2, #4294967295
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f006 f9cf 	bl	80071ec <xQueueReceive>
		sprintf(s_tempVal,"Temp-Last-Val= %lu , Temp-Avr-Val= %lu\n\r", tempStruct.lastVal, tempStruct.avrVal);
 8000e4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000e50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e52:	f107 000c 	add.w	r0, r7, #12
 8000e56:	4914      	ldr	r1, [pc, #80]	; (8000ea8 <vGateKeeper_Task+0xe0>)
 8000e58:	f017 fc50 	bl	80186fc <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*)s_tempVal, strlen(s_tempVal), HAL_MAX_DELAY);
 8000e5c:	f107 030c 	add.w	r3, r7, #12
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff f9f7 	bl	8000254 <strlen>
 8000e66:	4603      	mov	r3, r0
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	f107 010c 	add.w	r1, r7, #12
 8000e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e72:	480a      	ldr	r0, [pc, #40]	; (8000e9c <vGateKeeper_Task+0xd4>)
 8000e74:	f003 fff8 	bl	8004e68 <HAL_UART_Transmit>

		/* Send message via UDP interface */
		sendto(socket_id,recv_from.msg_buffer,sizeof(recv_from.msg_buffer),0,(struct sockaddr *)&client_addr,sizeof(client_addr));
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <vGateKeeper_Task+0xe4>)
 8000e7a:	6818      	ldr	r0, [r3, #0]
 8000e7c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e80:	1d99      	adds	r1, r3, #6
 8000e82:	2310      	movs	r3, #16
 8000e84:	9301      	str	r3, [sp, #4]
 8000e86:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	2228      	movs	r2, #40	; 0x28
 8000e90:	f00b fc84 	bl	800c79c <lwip_sendto>
		memset(&recv_from,0,sizeof(recv_from)); // reset the struct variable
 8000e94:	e7b9      	b.n	8000e0a <vGateKeeper_Task+0x42>
 8000e96:	bf00      	nop
 8000e98:	08019b98 	.word	0x08019b98
 8000e9c:	2000081c 	.word	0x2000081c
 8000ea0:	200008a0 	.word	0x200008a0
 8000ea4:	200008a4 	.word	0x200008a4
 8000ea8:	08019b6c 	.word	0x08019b6c
 8000eac:	200008a8 	.word	0x200008a8

08000eb0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d101      	bne.n	8000ec6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ec2:	f000 fa8f 	bl	80013e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40014400 	.word	0x40014400

08000ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
	...

08000ee4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000eea:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <HAL_MspInit+0x4c>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	4a10      	ldr	r2, [pc, #64]	; (8000f30 <HAL_MspInit+0x4c>)
 8000ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <HAL_MspInit+0x4c>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <HAL_MspInit+0x4c>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <HAL_MspInit+0x4c>)
 8000f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <HAL_MspInit+0x4c>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f16:	603b      	str	r3, [r7, #0]
 8000f18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	210f      	movs	r1, #15
 8000f1e:	f06f 0001 	mvn.w	r0, #1
 8000f22:	f000 ff89 	bl	8001e38 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40023800 	.word	0x40023800

08000f34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0a      	ldr	r2, [pc, #40]	; (8000f6c <HAL_ADC_MspInit+0x38>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d10b      	bne.n	8000f5e <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <HAL_ADC_MspInit+0x3c>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4a:	4a09      	ldr	r2, [pc, #36]	; (8000f70 <HAL_ADC_MspInit+0x3c>)
 8000f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f50:	6453      	str	r3, [r2, #68]	; 0x44
 8000f52:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <HAL_ADC_MspInit+0x3c>)
 8000f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f5e:	bf00      	nop
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	40012000 	.word	0x40012000
 8000f70:	40023800 	.word	0x40023800

08000f74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a0d      	ldr	r2, [pc, #52]	; (8000fb8 <HAL_TIM_Base_MspInit+0x44>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d113      	bne.n	8000fae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000f86:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <HAL_TIM_Base_MspInit+0x48>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	4a0c      	ldr	r2, [pc, #48]	; (8000fbc <HAL_TIM_Base_MspInit+0x48>)
 8000f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f90:	6453      	str	r3, [r2, #68]	; 0x44
 8000f92:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <HAL_TIM_Base_MspInit+0x48>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2105      	movs	r1, #5
 8000fa2:	201a      	movs	r0, #26
 8000fa4:	f000 ff48 	bl	8001e38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000fa8:	201a      	movs	r0, #26
 8000faa:	f000 ff61 	bl	8001e70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40014800 	.word	0x40014800
 8000fbc:	40023800 	.word	0x40023800

08000fc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b0ae      	sub	sp, #184	; 0xb8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2290      	movs	r2, #144	; 0x90
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f017 fb2d 	bl	8018640 <memset>
  if(huart->Instance==USART3)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a22      	ldr	r2, [pc, #136]	; (8001074 <HAL_UART_MspInit+0xb4>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d13c      	bne.n	800106a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ff0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ff4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	4618      	mov	r0, r3
 8001000:	f002 ffe6 	bl	8003fd0 <HAL_RCCEx_PeriphCLKConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800100a:	f7ff ff63 	bl	8000ed4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800100e:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <HAL_UART_MspInit+0xb8>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	4a19      	ldr	r2, [pc, #100]	; (8001078 <HAL_UART_MspInit+0xb8>)
 8001014:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001018:	6413      	str	r3, [r2, #64]	; 0x40
 800101a:	4b17      	ldr	r3, [pc, #92]	; (8001078 <HAL_UART_MspInit+0xb8>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001026:	4b14      	ldr	r3, [pc, #80]	; (8001078 <HAL_UART_MspInit+0xb8>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a13      	ldr	r2, [pc, #76]	; (8001078 <HAL_UART_MspInit+0xb8>)
 800102c:	f043 0308 	orr.w	r3, r3, #8
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b11      	ldr	r3, [pc, #68]	; (8001078 <HAL_UART_MspInit+0xb8>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0308 	and.w	r3, r3, #8
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800103e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001042:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001052:	2303      	movs	r3, #3
 8001054:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001058:	2307      	movs	r3, #7
 800105a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800105e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001062:	4619      	mov	r1, r3
 8001064:	4805      	ldr	r0, [pc, #20]	; (800107c <HAL_UART_MspInit+0xbc>)
 8001066:	f002 f87d 	bl	8003164 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800106a:	bf00      	nop
 800106c:	37b8      	adds	r7, #184	; 0xb8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40004800 	.word	0x40004800
 8001078:	40023800 	.word	0x40023800
 800107c:	40020c00 	.word	0x40020c00

08001080 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08c      	sub	sp, #48	; 0x30
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001090:	2200      	movs	r2, #0
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	2019      	movs	r0, #25
 8001096:	f000 fecf 	bl	8001e38 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800109a:	2019      	movs	r0, #25
 800109c:	f000 fee8 	bl	8001e70 <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80010a0:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <HAL_InitTick+0xa0>)
 80010a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a4:	4a1e      	ldr	r2, [pc, #120]	; (8001120 <HAL_InitTick+0xa0>)
 80010a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010aa:	6453      	str	r3, [r2, #68]	; 0x44
 80010ac:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <HAL_InitTick+0xa0>)
 80010ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010b8:	f107 0210 	add.w	r2, r7, #16
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	4611      	mov	r1, r2
 80010c2:	4618      	mov	r0, r3
 80010c4:	f002 ff52 	bl	8003f6c <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80010c8:	f002 ff3c 	bl	8003f44 <HAL_RCC_GetPCLK2Freq>
 80010cc:	4603      	mov	r3, r0
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d4:	4a13      	ldr	r2, [pc, #76]	; (8001124 <HAL_InitTick+0xa4>)
 80010d6:	fba2 2303 	umull	r2, r3, r2, r3
 80010da:	0c9b      	lsrs	r3, r3, #18
 80010dc:	3b01      	subs	r3, #1
 80010de:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80010e0:	4b11      	ldr	r3, [pc, #68]	; (8001128 <HAL_InitTick+0xa8>)
 80010e2:	4a12      	ldr	r2, [pc, #72]	; (800112c <HAL_InitTick+0xac>)
 80010e4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 80010e6:	4b10      	ldr	r3, [pc, #64]	; (8001128 <HAL_InitTick+0xa8>)
 80010e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010ec:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80010ee:	4a0e      	ldr	r2, [pc, #56]	; (8001128 <HAL_InitTick+0xa8>)
 80010f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010f2:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <HAL_InitTick+0xa8>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fa:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <HAL_InitTick+0xa8>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8001100:	4809      	ldr	r0, [pc, #36]	; (8001128 <HAL_InitTick+0xa8>)
 8001102:	f003 fb8d 	bl	8004820 <HAL_TIM_Base_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d104      	bne.n	8001116 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 800110c:	4806      	ldr	r0, [pc, #24]	; (8001128 <HAL_InitTick+0xa8>)
 800110e:	f003 fbdf 	bl	80048d0 <HAL_TIM_Base_Start_IT>
 8001112:	4603      	mov	r3, r0
 8001114:	e000      	b.n	8001118 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
}
 8001118:	4618      	mov	r0, r3
 800111a:	3730      	adds	r7, #48	; 0x30
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40023800 	.word	0x40023800
 8001124:	431bde83 	.word	0x431bde83
 8001128:	200008b4 	.word	0x200008b4
 800112c:	40014400 	.word	0x40014400

08001130 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001142:	e7fe      	b.n	8001142 <HardFault_Handler+0x4>

08001144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001148:	e7fe      	b.n	8001148 <MemManage_Handler+0x4>

0800114a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800114e:	e7fe      	b.n	800114e <BusFault_Handler+0x4>

08001150 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001154:	e7fe      	b.n	8001154 <UsageFault_Handler+0x4>

08001156 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001168:	4802      	ldr	r0, [pc, #8]	; (8001174 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800116a:	f003 fc29 	bl	80049c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200008b4 	.word	0x200008b4

08001178 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */
  ulStatsTimerticks++;
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	3301      	adds	r3, #1
 8001182:	4a03      	ldr	r2, [pc, #12]	; (8001190 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001184:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001186:	4803      	ldr	r0, [pc, #12]	; (8001194 <TIM1_TRG_COM_TIM11_IRQHandler+0x1c>)
 8001188:	f003 fc1a 	bl	80049c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */
  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	2000009c 	.word	0x2000009c
 8001194:	200007d0 	.word	0x200007d0

08001198 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800119c:	4802      	ldr	r0, [pc, #8]	; (80011a8 <ETH_IRQHandler+0x10>)
 800119e:	f001 fa53 	bl	8002648 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20003a04 	.word	0x20003a04

080011ac <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80011b0:	4802      	ldr	r0, [pc, #8]	; (80011bc <ETH_WKUP_IRQHandler+0x10>)
 80011b2:	f001 fa49 	bl	8002648 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20003a04 	.word	0x20003a04

080011c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
	return 1;
 80011c4:	2301      	movs	r3, #1
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <_kill>:

int _kill(int pid, int sig)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <_kill+0x20>)
 80011dc:	2216      	movs	r2, #22
 80011de:	601a      	str	r2, [r3, #0]
	return -1;
 80011e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	2000d3a8 	.word	0x2000d3a8

080011f4 <_exit>:

void _exit (int status)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80011fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f7ff ffe5 	bl	80011d0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001206:	e7fe      	b.n	8001206 <_exit+0x12>

08001208 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
 8001218:	e00a      	b.n	8001230 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800121a:	f3af 8000 	nop.w
 800121e:	4601      	mov	r1, r0
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	1c5a      	adds	r2, r3, #1
 8001224:	60ba      	str	r2, [r7, #8]
 8001226:	b2ca      	uxtb	r2, r1
 8001228:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	3301      	adds	r3, #1
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	697a      	ldr	r2, [r7, #20]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	429a      	cmp	r2, r3
 8001236:	dbf0      	blt.n	800121a <_read+0x12>
	}

return len;
 8001238:	687b      	ldr	r3, [r7, #4]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b086      	sub	sp, #24
 8001246:	af00      	add	r7, sp, #0
 8001248:	60f8      	str	r0, [r7, #12]
 800124a:	60b9      	str	r1, [r7, #8]
 800124c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
 8001252:	e009      	b.n	8001268 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	1c5a      	adds	r2, r3, #1
 8001258:	60ba      	str	r2, [r7, #8]
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	3301      	adds	r3, #1
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	697a      	ldr	r2, [r7, #20]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	429a      	cmp	r2, r3
 800126e:	dbf1      	blt.n	8001254 <_write+0x12>
	}
	return len;
 8001270:	687b      	ldr	r3, [r7, #4]
}
 8001272:	4618      	mov	r0, r3
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <_close>:

int _close(int file)
{
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
	return -1;
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001286:	4618      	mov	r0, r3
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
 800129a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012a2:	605a      	str	r2, [r3, #4]
	return 0;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <_isatty>:

int _isatty(int file)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
	return 1;
 80012ba:	2301      	movs	r3, #1
}
 80012bc:	4618      	mov	r0, r3
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
	return 0;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3714      	adds	r7, #20
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
	...

080012e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b087      	sub	sp, #28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012ec:	4a14      	ldr	r2, [pc, #80]	; (8001340 <_sbrk+0x5c>)
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <_sbrk+0x60>)
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012f8:	4b13      	ldr	r3, [pc, #76]	; (8001348 <_sbrk+0x64>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d102      	bne.n	8001306 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <_sbrk+0x64>)
 8001302:	4a12      	ldr	r2, [pc, #72]	; (800134c <_sbrk+0x68>)
 8001304:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <_sbrk+0x64>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	429a      	cmp	r2, r3
 8001312:	d205      	bcs.n	8001320 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001314:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <_sbrk+0x6c>)
 8001316:	220c      	movs	r2, #12
 8001318:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800131a:	f04f 33ff 	mov.w	r3, #4294967295
 800131e:	e009      	b.n	8001334 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001320:	4b09      	ldr	r3, [pc, #36]	; (8001348 <_sbrk+0x64>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <_sbrk+0x64>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4413      	add	r3, r2
 800132e:	4a06      	ldr	r2, [pc, #24]	; (8001348 <_sbrk+0x64>)
 8001330:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001332:	68fb      	ldr	r3, [r7, #12]
}
 8001334:	4618      	mov	r0, r3
 8001336:	371c      	adds	r7, #28
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	20080000 	.word	0x20080000
 8001344:	00000400 	.word	0x00000400
 8001348:	20000900 	.word	0x20000900
 800134c:	2000d3c0 	.word	0x2000d3c0
 8001350:	2000d3a8 	.word	0x2000d3a8

08001354 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <SystemInit+0x20>)
 800135a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800135e:	4a05      	ldr	r2, [pc, #20]	; (8001374 <SystemInit+0x20>)
 8001360:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001364:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001378:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800137c:	480d      	ldr	r0, [pc, #52]	; (80013b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800137e:	490e      	ldr	r1, [pc, #56]	; (80013b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001380:	4a0e      	ldr	r2, [pc, #56]	; (80013bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001384:	e002      	b.n	800138c <LoopCopyDataInit>

08001386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138a:	3304      	adds	r3, #4

0800138c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800138c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001390:	d3f9      	bcc.n	8001386 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001392:	4a0b      	ldr	r2, [pc, #44]	; (80013c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001394:	4c0b      	ldr	r4, [pc, #44]	; (80013c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001398:	e001      	b.n	800139e <LoopFillZerobss>

0800139a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800139a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800139c:	3204      	adds	r2, #4

0800139e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a0:	d3fb      	bcc.n	800139a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013a2:	f7ff ffd7 	bl	8001354 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013a6:	f017 f8ef 	bl	8018588 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013aa:	f7ff f995 	bl	80006d8 <main>
  bx  lr    
 80013ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013b0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80013b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80013bc:	0801d9a4 	.word	0x0801d9a4
  ldr r2, =_sbss
 80013c0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80013c4:	2000d3bc 	.word	0x2000d3bc

080013c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013c8:	e7fe      	b.n	80013c8 <ADC_IRQHandler>

080013ca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ce:	2003      	movs	r0, #3
 80013d0:	f000 fd27 	bl	8001e22 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013d4:	2000      	movs	r0, #0
 80013d6:	f7ff fe53 	bl	8001080 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013da:	f7ff fd83 	bl	8000ee4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_IncTick+0x20>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_IncTick+0x24>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4413      	add	r3, r2
 80013f4:	4a04      	ldr	r2, [pc, #16]	; (8001408 <HAL_IncTick+0x24>)
 80013f6:	6013      	str	r3, [r2, #0]
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000008 	.word	0x20000008
 8001408:	20000904 	.word	0x20000904

0800140c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return uwTick;
 8001410:	4b03      	ldr	r3, [pc, #12]	; (8001420 <HAL_GetTick+0x14>)
 8001412:	681b      	ldr	r3, [r3, #0]
}
 8001414:	4618      	mov	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	20000904 	.word	0x20000904

08001424 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800142c:	f7ff ffee 	bl	800140c <HAL_GetTick>
 8001430:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800143c:	d005      	beq.n	800144a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800143e:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <HAL_Delay+0x44>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	461a      	mov	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4413      	add	r3, r2
 8001448:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800144a:	bf00      	nop
 800144c:	f7ff ffde 	bl	800140c <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	429a      	cmp	r2, r3
 800145a:	d8f7      	bhi.n	800144c <HAL_Delay+0x28>
  {
  }
}
 800145c:	bf00      	nop
 800145e:	bf00      	nop
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000008 	.word	0x20000008

0800146c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001474:	2300      	movs	r3, #0
 8001476:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e031      	b.n	80014e6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	2b00      	cmp	r3, #0
 8001488:	d109      	bne.n	800149e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff fd52 	bl	8000f34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 0310 	and.w	r3, r3, #16
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d116      	bne.n	80014d8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014ae:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <HAL_ADC_Init+0x84>)
 80014b0:	4013      	ands	r3, r2
 80014b2:	f043 0202 	orr.w	r2, r3, #2
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f000 fb0a 	bl	8001ad4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f023 0303 	bic.w	r3, r3, #3
 80014ce:	f043 0201 	orr.w	r2, r3, #1
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	641a      	str	r2, [r3, #64]	; 0x40
 80014d6:	e001      	b.n	80014dc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	ffffeefd 	.word	0xffffeefd

080014f4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001506:	2b01      	cmp	r3, #1
 8001508:	d101      	bne.n	800150e <HAL_ADC_Start+0x1a>
 800150a:	2302      	movs	r3, #2
 800150c:	e0ad      	b.n	800166a <HAL_ADC_Start+0x176>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2201      	movs	r2, #1
 8001512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	2b01      	cmp	r3, #1
 8001522:	d018      	beq.n	8001556 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	689a      	ldr	r2, [r3, #8]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f042 0201 	orr.w	r2, r2, #1
 8001532:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001534:	4b50      	ldr	r3, [pc, #320]	; (8001678 <HAL_ADC_Start+0x184>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a50      	ldr	r2, [pc, #320]	; (800167c <HAL_ADC_Start+0x188>)
 800153a:	fba2 2303 	umull	r2, r3, r2, r3
 800153e:	0c9a      	lsrs	r2, r3, #18
 8001540:	4613      	mov	r3, r2
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	4413      	add	r3, r2
 8001546:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001548:	e002      	b.n	8001550 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	3b01      	subs	r3, #1
 800154e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1f9      	bne.n	800154a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	2b01      	cmp	r3, #1
 8001562:	d175      	bne.n	8001650 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001568:	4b45      	ldr	r3, [pc, #276]	; (8001680 <HAL_ADC_Start+0x18c>)
 800156a:	4013      	ands	r3, r2
 800156c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800157e:	2b00      	cmp	r3, #0
 8001580:	d007      	beq.n	8001592 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800158a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800159a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800159e:	d106      	bne.n	80015ae <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a4:	f023 0206 	bic.w	r2, r3, #6
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	645a      	str	r2, [r3, #68]	; 0x44
 80015ac:	e002      	b.n	80015b4 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80015c4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80015c6:	4b2f      	ldr	r3, [pc, #188]	; (8001684 <HAL_ADC_Start+0x190>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f003 031f 	and.w	r3, r3, #31
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d10f      	bne.n	80015f2 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d143      	bne.n	8001668 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	689a      	ldr	r2, [r3, #8]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	e03a      	b.n	8001668 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a24      	ldr	r2, [pc, #144]	; (8001688 <HAL_ADC_Start+0x194>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d10e      	bne.n	800161a <HAL_ADC_Start+0x126>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d107      	bne.n	800161a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001618:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800161a:	4b1a      	ldr	r3, [pc, #104]	; (8001684 <HAL_ADC_Start+0x190>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f003 0310 	and.w	r3, r3, #16
 8001622:	2b00      	cmp	r3, #0
 8001624:	d120      	bne.n	8001668 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a18      	ldr	r2, [pc, #96]	; (800168c <HAL_ADC_Start+0x198>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d11b      	bne.n	8001668 <HAL_ADC_Start+0x174>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d114      	bne.n	8001668 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800164c:	609a      	str	r2, [r3, #8]
 800164e:	e00b      	b.n	8001668 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001654:	f043 0210 	orr.w	r2, r3, #16
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001660:	f043 0201 	orr.w	r2, r3, #1
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	20000000 	.word	0x20000000
 800167c:	431bde83 	.word	0x431bde83
 8001680:	fffff8fe 	.word	0xfffff8fe
 8001684:	40012300 	.word	0x40012300
 8001688:	40012000 	.word	0x40012000
 800168c:	40012200 	.word	0x40012200

08001690 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d101      	bne.n	80016a6 <HAL_ADC_Stop+0x16>
 80016a2:	2302      	movs	r3, #2
 80016a4:	e01f      	b.n	80016e6 <HAL_ADC_Stop+0x56>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2201      	movs	r2, #1
 80016aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 0201 	bic.w	r2, r2, #1
 80016bc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d107      	bne.n	80016dc <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016d0:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <HAL_ADC_Stop+0x64>)
 80016d2:	4013      	ands	r3, r2
 80016d4:	f043 0201 	orr.w	r2, r3, #1
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	ffffeefe 	.word	0xffffeefe

080016f8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001714:	d113      	bne.n	800173e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001720:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001724:	d10b      	bne.n	800173e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f043 0220 	orr.w	r2, r3, #32
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e063      	b.n	8001806 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800173e:	f7ff fe65 	bl	800140c <HAL_GetTick>
 8001742:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001744:	e021      	b.n	800178a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800174c:	d01d      	beq.n	800178a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d007      	beq.n	8001764 <HAL_ADC_PollForConversion+0x6c>
 8001754:	f7ff fe5a 	bl	800140c <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	429a      	cmp	r2, r3
 8001762:	d212      	bcs.n	800178a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b02      	cmp	r3, #2
 8001770:	d00b      	beq.n	800178a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	f043 0204 	orr.w	r2, r3, #4
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e03d      	b.n	8001806 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b02      	cmp	r3, #2
 8001796:	d1d6      	bne.n	8001746 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f06f 0212 	mvn.w	r2, #18
 80017a0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d123      	bne.n	8001804 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d11f      	bne.n	8001804 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d006      	beq.n	80017e0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d111      	bne.n	8001804 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d105      	bne.n	8001804 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fc:	f043 0201 	orr.w	r2, r3, #1
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800181c:	4618      	mov	r0, r3
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800183c:	2b01      	cmp	r3, #1
 800183e:	d101      	bne.n	8001844 <HAL_ADC_ConfigChannel+0x1c>
 8001840:	2302      	movs	r3, #2
 8001842:	e136      	b.n	8001ab2 <HAL_ADC_ConfigChannel+0x28a>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b09      	cmp	r3, #9
 8001852:	d93a      	bls.n	80018ca <HAL_ADC_ConfigChannel+0xa2>
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800185c:	d035      	beq.n	80018ca <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68d9      	ldr	r1, [r3, #12]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	b29b      	uxth	r3, r3
 800186a:	461a      	mov	r2, r3
 800186c:	4613      	mov	r3, r2
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	4413      	add	r3, r2
 8001872:	3b1e      	subs	r3, #30
 8001874:	2207      	movs	r2, #7
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43da      	mvns	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	400a      	ands	r2, r1
 8001882:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a8d      	ldr	r2, [pc, #564]	; (8001ac0 <HAL_ADC_ConfigChannel+0x298>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d10a      	bne.n	80018a4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	68d9      	ldr	r1, [r3, #12]
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	061a      	lsls	r2, r3, #24
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	430a      	orrs	r2, r1
 80018a0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018a2:	e035      	b.n	8001910 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	68d9      	ldr	r1, [r3, #12]
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	689a      	ldr	r2, [r3, #8]
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	4618      	mov	r0, r3
 80018b6:	4603      	mov	r3, r0
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	4403      	add	r3, r0
 80018bc:	3b1e      	subs	r3, #30
 80018be:	409a      	lsls	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018c8:	e022      	b.n	8001910 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6919      	ldr	r1, [r3, #16]
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	461a      	mov	r2, r3
 80018d8:	4613      	mov	r3, r2
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	4413      	add	r3, r2
 80018de:	2207      	movs	r2, #7
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43da      	mvns	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	400a      	ands	r2, r1
 80018ec:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	6919      	ldr	r1, [r3, #16]
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	689a      	ldr	r2, [r3, #8]
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	4618      	mov	r0, r3
 8001900:	4603      	mov	r3, r0
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	4403      	add	r3, r0
 8001906:	409a      	lsls	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	430a      	orrs	r2, r1
 800190e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b06      	cmp	r3, #6
 8001916:	d824      	bhi.n	8001962 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	4613      	mov	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	3b05      	subs	r3, #5
 800192a:	221f      	movs	r2, #31
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43da      	mvns	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	400a      	ands	r2, r1
 8001938:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	b29b      	uxth	r3, r3
 8001946:	4618      	mov	r0, r3
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	3b05      	subs	r3, #5
 8001954:	fa00 f203 	lsl.w	r2, r0, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	430a      	orrs	r2, r1
 800195e:	635a      	str	r2, [r3, #52]	; 0x34
 8001960:	e04c      	b.n	80019fc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b0c      	cmp	r3, #12
 8001968:	d824      	bhi.n	80019b4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685a      	ldr	r2, [r3, #4]
 8001974:	4613      	mov	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	3b23      	subs	r3, #35	; 0x23
 800197c:	221f      	movs	r2, #31
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43da      	mvns	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	400a      	ands	r2, r1
 800198a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	b29b      	uxth	r3, r3
 8001998:	4618      	mov	r0, r3
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685a      	ldr	r2, [r3, #4]
 800199e:	4613      	mov	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	3b23      	subs	r3, #35	; 0x23
 80019a6:	fa00 f203 	lsl.w	r2, r0, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	631a      	str	r2, [r3, #48]	; 0x30
 80019b2:	e023      	b.n	80019fc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	4613      	mov	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	3b41      	subs	r3, #65	; 0x41
 80019c6:	221f      	movs	r2, #31
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	43da      	mvns	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	400a      	ands	r2, r1
 80019d4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	4618      	mov	r0, r3
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	4613      	mov	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	3b41      	subs	r3, #65	; 0x41
 80019f0:	fa00 f203 	lsl.w	r2, r0, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	430a      	orrs	r2, r1
 80019fa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a30      	ldr	r2, [pc, #192]	; (8001ac4 <HAL_ADC_ConfigChannel+0x29c>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d10a      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x1f4>
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a0e:	d105      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001a10:	4b2d      	ldr	r3, [pc, #180]	; (8001ac8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	4a2c      	ldr	r2, [pc, #176]	; (8001ac8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a16:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001a1a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a28      	ldr	r2, [pc, #160]	; (8001ac4 <HAL_ADC_ConfigChannel+0x29c>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d10f      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x21e>
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2b12      	cmp	r3, #18
 8001a2c:	d10b      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001a2e:	4b26      	ldr	r3, [pc, #152]	; (8001ac8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	4a25      	ldr	r2, [pc, #148]	; (8001ac8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a34:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a38:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001a3a:	4b23      	ldr	r3, [pc, #140]	; (8001ac8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	4a22      	ldr	r2, [pc, #136]	; (8001ac8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a44:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a1e      	ldr	r2, [pc, #120]	; (8001ac4 <HAL_ADC_ConfigChannel+0x29c>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d12b      	bne.n	8001aa8 <HAL_ADC_ConfigChannel+0x280>
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a1a      	ldr	r2, [pc, #104]	; (8001ac0 <HAL_ADC_ConfigChannel+0x298>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d003      	beq.n	8001a62 <HAL_ADC_ConfigChannel+0x23a>
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2b11      	cmp	r3, #17
 8001a60:	d122      	bne.n	8001aa8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001a62:	4b19      	ldr	r3, [pc, #100]	; (8001ac8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	4a18      	ldr	r2, [pc, #96]	; (8001ac8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a68:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001a6c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001a6e:	4b16      	ldr	r3, [pc, #88]	; (8001ac8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	4a15      	ldr	r2, [pc, #84]	; (8001ac8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a78:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a10      	ldr	r2, [pc, #64]	; (8001ac0 <HAL_ADC_ConfigChannel+0x298>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d111      	bne.n	8001aa8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001a84:	4b11      	ldr	r3, [pc, #68]	; (8001acc <HAL_ADC_ConfigChannel+0x2a4>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a11      	ldr	r2, [pc, #68]	; (8001ad0 <HAL_ADC_ConfigChannel+0x2a8>)
 8001a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8e:	0c9a      	lsrs	r2, r3, #18
 8001a90:	4613      	mov	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001a9a:	e002      	b.n	8001aa2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1f9      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	10000012 	.word	0x10000012
 8001ac4:	40012000 	.word	0x40012000
 8001ac8:	40012300 	.word	0x40012300
 8001acc:	20000000 	.word	0x20000000
 8001ad0:	431bde83 	.word	0x431bde83

08001ad4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001adc:	4b78      	ldr	r3, [pc, #480]	; (8001cc0 <ADC_Init+0x1ec>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	4a77      	ldr	r2, [pc, #476]	; (8001cc0 <ADC_Init+0x1ec>)
 8001ae2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001ae6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001ae8:	4b75      	ldr	r3, [pc, #468]	; (8001cc0 <ADC_Init+0x1ec>)
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	4973      	ldr	r1, [pc, #460]	; (8001cc0 <ADC_Init+0x1ec>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6859      	ldr	r1, [r3, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	021a      	lsls	r2, r3, #8
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	430a      	orrs	r2, r1
 8001b18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6859      	ldr	r1, [r3, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6899      	ldr	r1, [r3, #8]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68da      	ldr	r2, [r3, #12]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b62:	4a58      	ldr	r2, [pc, #352]	; (8001cc4 <ADC_Init+0x1f0>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d022      	beq.n	8001bae <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6899      	ldr	r1, [r3, #8]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6899      	ldr	r1, [r3, #8]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	e00f      	b.n	8001bce <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bcc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 0202 	bic.w	r2, r2, #2
 8001bdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6899      	ldr	r1, [r3, #8]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	005a      	lsls	r2, r3, #1
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d01b      	beq.n	8001c34 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c0a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6859      	ldr	r1, [r3, #4]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c26:	3b01      	subs	r3, #1
 8001c28:	035a      	lsls	r2, r3, #13
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	e007      	b.n	8001c44 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c42:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	051a      	lsls	r2, r3, #20
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6899      	ldr	r1, [r3, #8]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c86:	025a      	lsls	r2, r3, #9
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	689a      	ldr	r2, [r3, #8]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6899      	ldr	r1, [r3, #8]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	029a      	lsls	r2, r3, #10
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	609a      	str	r2, [r3, #8]
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	40012300 	.word	0x40012300
 8001cc4:	0f000001 	.word	0x0f000001

08001cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd8:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <__NVIC_SetPriorityGrouping+0x40>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <__NVIC_SetPriorityGrouping+0x44>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cf6:	4a04      	ldr	r2, [pc, #16]	; (8001d08 <__NVIC_SetPriorityGrouping+0x40>)
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	60d3      	str	r3, [r2, #12]
}
 8001cfc:	bf00      	nop
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	e000ed00 	.word	0xe000ed00
 8001d0c:	05fa0000 	.word	0x05fa0000

08001d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d14:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <__NVIC_GetPriorityGrouping+0x18>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	0a1b      	lsrs	r3, r3, #8
 8001d1a:	f003 0307 	and.w	r3, r3, #7
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	db0b      	blt.n	8001d56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	f003 021f 	and.w	r2, r3, #31
 8001d44:	4907      	ldr	r1, [pc, #28]	; (8001d64 <__NVIC_EnableIRQ+0x38>)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	095b      	lsrs	r3, r3, #5
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	e000e100 	.word	0xe000e100

08001d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	6039      	str	r1, [r7, #0]
 8001d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	db0a      	blt.n	8001d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	490c      	ldr	r1, [pc, #48]	; (8001db4 <__NVIC_SetPriority+0x4c>)
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	0112      	lsls	r2, r2, #4
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	440b      	add	r3, r1
 8001d8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d90:	e00a      	b.n	8001da8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	4908      	ldr	r1, [pc, #32]	; (8001db8 <__NVIC_SetPriority+0x50>)
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	3b04      	subs	r3, #4
 8001da0:	0112      	lsls	r2, r2, #4
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	440b      	add	r3, r1
 8001da6:	761a      	strb	r2, [r3, #24]
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	e000e100 	.word	0xe000e100
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b089      	sub	sp, #36	; 0x24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	f1c3 0307 	rsb	r3, r3, #7
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	bf28      	it	cs
 8001dda:	2304      	movcs	r3, #4
 8001ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3304      	adds	r3, #4
 8001de2:	2b06      	cmp	r3, #6
 8001de4:	d902      	bls.n	8001dec <NVIC_EncodePriority+0x30>
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3b03      	subs	r3, #3
 8001dea:	e000      	b.n	8001dee <NVIC_EncodePriority+0x32>
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df0:	f04f 32ff 	mov.w	r2, #4294967295
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	43da      	mvns	r2, r3
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	401a      	ands	r2, r3
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e04:	f04f 31ff 	mov.w	r1, #4294967295
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0e:	43d9      	mvns	r1, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e14:	4313      	orrs	r3, r2
         );
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3724      	adds	r7, #36	; 0x24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff ff4c 	bl	8001cc8 <__NVIC_SetPriorityGrouping>
}
 8001e30:	bf00      	nop
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
 8001e44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e4a:	f7ff ff61 	bl	8001d10 <__NVIC_GetPriorityGrouping>
 8001e4e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	68b9      	ldr	r1, [r7, #8]
 8001e54:	6978      	ldr	r0, [r7, #20]
 8001e56:	f7ff ffb1 	bl	8001dbc <NVIC_EncodePriority>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e60:	4611      	mov	r1, r2
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff ff80 	bl	8001d68 <__NVIC_SetPriority>
}
 8001e68:	bf00      	nop
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff ff54 	bl	8001d2c <__NVIC_EnableIRQ>
}
 8001e84:	bf00      	nop
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b088      	sub	sp, #32
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61fb      	str	r3, [r7, #28]
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001e9c:	4ba0      	ldr	r3, [pc, #640]	; (8002120 <HAL_ETH_Init+0x294>)
 8001e9e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e180      	b.n	80021b4 <HAL_ETH_Init+0x328>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d106      	bne.n	8001ecc <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f003 fdd4 	bl	8005a74 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ecc:	4b95      	ldr	r3, [pc, #596]	; (8002124 <HAL_ETH_Init+0x298>)
 8001ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed0:	4a94      	ldr	r2, [pc, #592]	; (8002124 <HAL_ETH_Init+0x298>)
 8001ed2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ed6:	6453      	str	r3, [r2, #68]	; 0x44
 8001ed8:	4b92      	ldr	r3, [pc, #584]	; (8002124 <HAL_ETH_Init+0x298>)
 8001eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001edc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ee0:	60bb      	str	r3, [r7, #8]
 8001ee2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001ee4:	4b90      	ldr	r3, [pc, #576]	; (8002128 <HAL_ETH_Init+0x29c>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	4a8f      	ldr	r2, [pc, #572]	; (8002128 <HAL_ETH_Init+0x29c>)
 8001eea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001eee:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001ef0:	4b8d      	ldr	r3, [pc, #564]	; (8002128 <HAL_ETH_Init+0x29c>)
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	498b      	ldr	r1, [pc, #556]	; (8002128 <HAL_ETH_Init+0x29c>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6812      	ldr	r2, [r2, #0]
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f14:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001f16:	f7ff fa79 	bl	800140c <HAL_GetTick>
 8001f1a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001f1c:	e011      	b.n	8001f42 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001f1e:	f7ff fa75 	bl	800140c <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f2c:	d909      	bls.n	8001f42 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2203      	movs	r2, #3
 8001f32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e138      	b.n	80021b4 <HAL_ETH_Init+0x328>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1e4      	bne.n	8001f1e <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f023 031c 	bic.w	r3, r3, #28
 8001f62:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001f64:	f001 ffce 	bl	8003f04 <HAL_RCC_GetHCLKFreq>
 8001f68:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	4a6f      	ldr	r2, [pc, #444]	; (800212c <HAL_ETH_Init+0x2a0>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d908      	bls.n	8001f84 <HAL_ETH_Init+0xf8>
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	4a6e      	ldr	r2, [pc, #440]	; (8002130 <HAL_ETH_Init+0x2a4>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d804      	bhi.n	8001f84 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	f043 0308 	orr.w	r3, r3, #8
 8001f80:	61fb      	str	r3, [r7, #28]
 8001f82:	e027      	b.n	8001fd4 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	4a6a      	ldr	r2, [pc, #424]	; (8002130 <HAL_ETH_Init+0x2a4>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d908      	bls.n	8001f9e <HAL_ETH_Init+0x112>
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	4a64      	ldr	r2, [pc, #400]	; (8002120 <HAL_ETH_Init+0x294>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d204      	bcs.n	8001f9e <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f043 030c 	orr.w	r3, r3, #12
 8001f9a:	61fb      	str	r3, [r7, #28]
 8001f9c:	e01a      	b.n	8001fd4 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	4a5f      	ldr	r2, [pc, #380]	; (8002120 <HAL_ETH_Init+0x294>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d303      	bcc.n	8001fae <HAL_ETH_Init+0x122>
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	4a62      	ldr	r2, [pc, #392]	; (8002134 <HAL_ETH_Init+0x2a8>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d911      	bls.n	8001fd2 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	4a60      	ldr	r2, [pc, #384]	; (8002134 <HAL_ETH_Init+0x2a8>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d908      	bls.n	8001fc8 <HAL_ETH_Init+0x13c>
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	4a5f      	ldr	r2, [pc, #380]	; (8002138 <HAL_ETH_Init+0x2ac>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d804      	bhi.n	8001fc8 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	f043 0304 	orr.w	r3, r3, #4
 8001fc4:	61fb      	str	r3, [r7, #28]
 8001fc6:	e005      	b.n	8001fd4 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f043 0310 	orr.w	r3, r3, #16
 8001fce:	61fb      	str	r3, [r7, #28]
 8001fd0:	e000      	b.n	8001fd4 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001fd2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	69fa      	ldr	r2, [r7, #28]
 8001fda:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001fdc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 fc10 	bl	8002808 <HAL_ETH_WritePHYRegister>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00b      	beq.n	8002006 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001ff2:	6939      	ldr	r1, [r7, #16]
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 fdc5 	bl	8002b84 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e0d6      	b.n	80021b4 <HAL_ETH_Init+0x328>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8002006:	20ff      	movs	r0, #255	; 0xff
 8002008:	f7ff fa0c 	bl	8001424 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 80a4 	beq.w	800215e <HAL_ETH_Init+0x2d2>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002016:	f7ff f9f9 	bl	800140c <HAL_GetTick>
 800201a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800201c:	f107 030c 	add.w	r3, r7, #12
 8002020:	461a      	mov	r2, r3
 8002022:	2101      	movs	r1, #1
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 fb87 	bl	8002738 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800202a:	f7ff f9ef 	bl	800140c <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	f241 3288 	movw	r2, #5000	; 0x1388
 8002038:	4293      	cmp	r3, r2
 800203a:	d90f      	bls.n	800205c <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002040:	6939      	ldr	r1, [r7, #16]
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 fd9e 	bl	8002b84 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e0ab      	b.n	80021b4 <HAL_ETH_Init+0x328>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f003 0304 	and.w	r3, r3, #4
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0da      	beq.n	800201c <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002066:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800206a:	2100      	movs	r1, #0
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 fbcb 	bl	8002808 <HAL_ETH_WritePHYRegister>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00b      	beq.n	8002090 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800207c:	6939      	ldr	r1, [r7, #16]
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 fd80 	bl	8002b84 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800208c:	2301      	movs	r3, #1
 800208e:	e091      	b.n	80021b4 <HAL_ETH_Init+0x328>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002090:	f7ff f9bc 	bl	800140c <HAL_GetTick>
 8002094:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002096:	f107 030c 	add.w	r3, r7, #12
 800209a:	461a      	mov	r2, r3
 800209c:	2101      	movs	r1, #1
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 fb4a 	bl	8002738 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80020a4:	f7ff f9b2 	bl	800140c <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d90f      	bls.n	80020d6 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80020ba:	6939      	ldr	r1, [r7, #16]
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 fd61 	bl	8002b84 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e06e      	b.n	80021b4 <HAL_ETH_Init+0x328>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f003 0320 	and.w	r3, r3, #32
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0da      	beq.n	8002096 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80020e0:	f107 030c 	add.w	r3, r7, #12
 80020e4:	461a      	mov	r2, r3
 80020e6:	2110      	movs	r1, #16
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 fb25 	bl	8002738 <HAL_ETH_ReadPHYRegister>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00b      	beq.n	800210c <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80020f8:	6939      	ldr	r1, [r7, #16]
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 fd42 	bl	8002b84 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002108:	2301      	movs	r3, #1
 800210a:	e053      	b.n	80021b4 <HAL_ETH_Init+0x328>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f003 0304 	and.w	r3, r3, #4
 8002112:	2b00      	cmp	r3, #0
 8002114:	d012      	beq.n	800213c <HAL_ETH_Init+0x2b0>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	e010      	b.n	8002142 <HAL_ETH_Init+0x2b6>
 8002120:	03938700 	.word	0x03938700
 8002124:	40023800 	.word	0x40023800
 8002128:	40013800 	.word	0x40013800
 800212c:	01312cff 	.word	0x01312cff
 8002130:	02160ebf 	.word	0x02160ebf
 8002134:	05f5e0ff 	.word	0x05f5e0ff
 8002138:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <HAL_ETH_Init+0x2c8>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	609a      	str	r2, [r3, #8]
 8002152:	e026      	b.n	80021a2 <HAL_ETH_Init+0x316>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	e021      	b.n	80021a2 <HAL_ETH_Init+0x316>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	08db      	lsrs	r3, r3, #3
 8002164:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	085b      	lsrs	r3, r3, #1
 800216c:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800216e:	4313      	orrs	r3, r2
 8002170:	b29b      	uxth	r3, r3
 8002172:	461a      	mov	r2, r3
 8002174:	2100      	movs	r1, #0
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 fb46 	bl	8002808 <HAL_ETH_WritePHYRegister>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00b      	beq.n	800219a <HAL_ETH_Init+0x30e>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002186:	6939      	ldr	r1, [r7, #16]
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 fcfb 	bl	8002b84 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e00c      	b.n	80021b4 <HAL_ETH_Init+0x328>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800219a:	f640 70ff 	movw	r0, #4095	; 0xfff
 800219e:	f7ff f941 	bl	8001424 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80021a2:	6939      	ldr	r1, [r7, #16]
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 fced 	bl	8002b84 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3720      	adds	r7, #32
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80021bc:	b480      	push	{r7}
 80021be:	b087      	sub	sp, #28
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
 80021c8:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d101      	bne.n	80021dc <HAL_ETH_DMATxDescListInit+0x20>
 80021d8:	2302      	movs	r3, #2
 80021da:	e051      	b.n	8002280 <HAL_ETH_DMATxDescListInit+0xc4>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2202      	movs	r2, #2
 80021e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 80021f2:	2300      	movs	r3, #0
 80021f4:	617b      	str	r3, [r7, #20]
 80021f6:	e030      	b.n	800225a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	015b      	lsls	r3, r3, #5
 80021fc:	68ba      	ldr	r2, [r7, #8]
 80021fe:	4413      	add	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002208:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002210:	fb02 f303 	mul.w	r3, r2, r3
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	4413      	add	r3, r2
 8002218:	461a      	mov	r2, r3
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d105      	bne.n	8002232 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	3b01      	subs	r3, #1
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	429a      	cmp	r2, r3
 800223a:	d208      	bcs.n	800224e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	3301      	adds	r3, #1
 8002240:	015b      	lsls	r3, r3, #5
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	4413      	add	r3, r2
 8002246:	461a      	mov	r2, r3
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	60da      	str	r2, [r3, #12]
 800224c:	e002      	b.n	8002254 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	3301      	adds	r3, #1
 8002258:	617b      	str	r3, [r7, #20]
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	429a      	cmp	r2, r3
 8002260:	d3ca      	bcc.n	80021f8 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800226c:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	371c      	adds	r7, #28
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800228c:	b480      	push	{r7}
 800228e:	b087      	sub	sp, #28
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
 8002298:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d101      	bne.n	80022ac <HAL_ETH_DMARxDescListInit+0x20>
 80022a8:	2302      	movs	r3, #2
 80022aa:	e055      	b.n	8002358 <HAL_ETH_DMARxDescListInit+0xcc>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2202      	movs	r2, #2
 80022b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
 80022c6:	e034      	b.n	8002332 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	015b      	lsls	r3, r3, #5
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	4413      	add	r3, r2
 80022d0:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80022d8:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80022e0:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80022e8:	fb02 f303 	mul.w	r3, r2, r3
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	4413      	add	r3, r2
 80022f0:	461a      	mov	r2, r3
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d105      	bne.n	800230a <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	3b01      	subs	r3, #1
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	429a      	cmp	r2, r3
 8002312:	d208      	bcs.n	8002326 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	3301      	adds	r3, #1
 8002318:	015b      	lsls	r3, r3, #5
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	4413      	add	r3, r2
 800231e:	461a      	mov	r2, r3
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	60da      	str	r2, [r3, #12]
 8002324:	e002      	b.n	800232c <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	3301      	adds	r3, #1
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d3c6      	bcc.n	80022c8 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002344:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	371c      	adds	r7, #28
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8002364:	b480      	push	{r7}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	2300      	movs	r3, #0
 8002378:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002380:	2b01      	cmp	r3, #1
 8002382:	d101      	bne.n	8002388 <HAL_ETH_TransmitFrame+0x24>
 8002384:	2302      	movs	r3, #2
 8002386:	e0cc      	b.n	8002522 <HAL_ETH_TransmitFrame+0x1be>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2202      	movs	r2, #2
 8002394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d109      	bne.n	80023b2 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80023ae:	2301      	movs	r3, #1
 80023b0:	e0b7      	b.n	8002522 <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	da09      	bge.n	80023d0 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2212      	movs	r2, #18
 80023c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e0a8      	b.n	8002522 <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d915      	bls.n	8002406 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	4a54      	ldr	r2, [pc, #336]	; (8002530 <HAL_ETH_TransmitFrame+0x1cc>)
 80023de:	fba2 2303 	umull	r2, r3, r2, r3
 80023e2:	0a9b      	lsrs	r3, r3, #10
 80023e4:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	4b51      	ldr	r3, [pc, #324]	; (8002530 <HAL_ETH_TransmitFrame+0x1cc>)
 80023ea:	fba3 1302 	umull	r1, r3, r3, r2
 80023ee:	0a9b      	lsrs	r3, r3, #10
 80023f0:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80023f4:	fb01 f303 	mul.w	r3, r1, r3
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d005      	beq.n	800240a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	3301      	adds	r3, #1
 8002402:	617b      	str	r3, [r7, #20]
 8002404:	e001      	b.n	800240a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8002406:	2301      	movs	r3, #1
 8002408:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d11c      	bne.n	800244a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800241e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800242a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002436:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800243a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	461a      	mov	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	62da      	str	r2, [r3, #44]	; 0x2c
 8002448:	e04b      	b.n	80024e2 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 800244a:	2300      	movs	r3, #0
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	e044      	b.n	80024da <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800245e:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d107      	bne.n	8002476 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002470:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002474:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800247e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	3b01      	subs	r3, #1
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	429a      	cmp	r2, r3
 8002488:	d116      	bne.n	80024b8 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002494:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002498:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	4a25      	ldr	r2, [pc, #148]	; (8002534 <HAL_ETH_TransmitFrame+0x1d0>)
 800249e:	fb03 f202 	mul.w	r2, r3, r2
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	4413      	add	r3, r2
 80024a6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80024aa:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80024b6:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80024c6:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	461a      	mov	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	3301      	adds	r3, #1
 80024d8:	613b      	str	r3, [r7, #16]
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d3b6      	bcc.n	8002450 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ea:	695b      	ldr	r3, [r3, #20]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00d      	beq.n	8002510 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024fc:	461a      	mov	r2, r3
 80024fe:	2304      	movs	r3, #4
 8002500:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800250a:	461a      	mov	r2, r3
 800250c:	2300      	movs	r3, #0
 800250e:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	371c      	adds	r7, #28
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	ac02b00b 	.word	0xac02b00b
 8002534:	fffffa0c 	.word	0xfffffa0c

08002538 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8002540:	2300      	movs	r3, #0
 8002542:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800254a:	2b01      	cmp	r3, #1
 800254c:	d101      	bne.n	8002552 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 800254e:	2302      	movs	r3, #2
 8002550:	e074      	b.n	800263c <HAL_ETH_GetReceivedFrame_IT+0x104>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2202      	movs	r2, #2
 800255e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8002562:	e05a      	b.n	800261a <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	3301      	adds	r3, #1
 8002568:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002578:	d10d      	bne.n	8002596 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	461a      	mov	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	629a      	str	r2, [r3, #40]	; 0x28
 8002594:	e041      	b.n	800261a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10b      	bne.n	80025bc <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a8:	1c5a      	adds	r2, r3, #1
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	461a      	mov	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	629a      	str	r2, [r3, #40]	; 0x28
 80025ba:	e02e      	b.n	800261a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c8:	1c5a      	adds	r2, r3, #1
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d103      	bne.n	80025de <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	0c1b      	lsrs	r3, r3, #16
 80025e6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80025ea:	1f1a      	subs	r2, r3, #4
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f4:	689a      	ldr	r2, [r3, #8]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	461a      	mov	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	e010      	b.n	800263c <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	db02      	blt.n	800262a <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2b03      	cmp	r3, #3
 8002628:	d99c      	bls.n	8002564 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
}
 800263c:	4618      	mov	r0, r3
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800265e:	2b40      	cmp	r3, #64	; 0x40
 8002660:	d112      	bne.n	8002688 <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f003 face 	bl	8005c04 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002670:	461a      	mov	r2, r3
 8002672:	2340      	movs	r3, #64	; 0x40
 8002674:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002686:	e01a      	b.n	80026be <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b01      	cmp	r3, #1
 8002698:	d111      	bne.n	80026be <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f838 	bl	8002710 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026a8:	461a      	mov	r2, r3
 80026aa:	2301      	movs	r3, #1
 80026ac:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026c6:	461a      	mov	r2, r3
 80026c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026cc:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026e0:	d112      	bne.n	8002708 <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f81e 	bl	8002724 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026f0:	461a      	mov	r2, r3
 80026f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026f6:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8002708:	bf00      	nop
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	460b      	mov	r3, r1
 8002742:	607a      	str	r2, [r7, #4]
 8002744:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8002746:	2300      	movs	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800274a:	2300      	movs	r3, #0
 800274c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b82      	cmp	r3, #130	; 0x82
 8002758:	d101      	bne.n	800275e <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800275a:	2302      	movs	r3, #2
 800275c:	e050      	b.n	8002800 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2282      	movs	r2, #130	; 0x82
 8002762:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	f003 031c 	and.w	r3, r3, #28
 8002774:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8a1b      	ldrh	r3, [r3, #16]
 800277a:	02db      	lsls	r3, r3, #11
 800277c:	b29b      	uxth	r3, r3
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	4313      	orrs	r3, r2
 8002782:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002784:	897b      	ldrh	r3, [r7, #10]
 8002786:	019b      	lsls	r3, r3, #6
 8002788:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	4313      	orrs	r3, r2
 8002790:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f023 0302 	bic.w	r3, r3, #2
 8002798:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f043 0301 	orr.w	r3, r3, #1
 80027a0:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80027aa:	f7fe fe2f 	bl	800140c <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80027b0:	e015      	b.n	80027de <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80027b2:	f7fe fe2b 	bl	800140c <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027c0:	d309      	bcc.n	80027d6 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e014      	b.n	8002800 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1e4      	bne.n	80027b2 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	461a      	mov	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	460b      	mov	r3, r1
 8002812:	607a      	str	r2, [r7, #4]
 8002814:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800281a:	2300      	movs	r3, #0
 800281c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b42      	cmp	r3, #66	; 0x42
 8002828:	d101      	bne.n	800282e <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800282a:	2302      	movs	r3, #2
 800282c:	e04e      	b.n	80028cc <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2242      	movs	r2, #66	; 0x42
 8002832:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	f003 031c 	and.w	r3, r3, #28
 8002844:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8a1b      	ldrh	r3, [r3, #16]
 800284a:	02db      	lsls	r3, r3, #11
 800284c:	b29b      	uxth	r3, r3
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	4313      	orrs	r3, r2
 8002852:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002854:	897b      	ldrh	r3, [r7, #10]
 8002856:	019b      	lsls	r3, r3, #6
 8002858:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	4313      	orrs	r3, r2
 8002860:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f043 0302 	orr.w	r3, r3, #2
 8002868:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	b29a      	uxth	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002884:	f7fe fdc2 	bl	800140c <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800288a:	e015      	b.n	80028b8 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800288c:	f7fe fdbe 	bl	800140c <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800289a:	d309      	bcc.n	80028b0 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e00d      	b.n	80028cc <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1e4      	bne.n	800288c <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3718      	adds	r7, #24
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d101      	bne.n	80028ea <HAL_ETH_Start+0x16>
 80028e6:	2302      	movs	r3, #2
 80028e8:	e01f      	b.n	800292a <HAL_ETH_Start+0x56>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2202      	movs	r2, #2
 80028f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 fb40 	bl	8002f80 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 fb77 	bl	8002ff4 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 fc06 	bl	8003118 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 fbab 	bl	8003068 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 fbd4 	bl	80030c0 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8002932:	b580      	push	{r7, lr}
 8002934:	b082      	sub	sp, #8
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002940:	2b01      	cmp	r3, #1
 8002942:	d101      	bne.n	8002948 <HAL_ETH_Stop+0x16>
 8002944:	2302      	movs	r3, #2
 8002946:	e01f      	b.n	8002988 <HAL_ETH_Stop+0x56>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2202      	movs	r2, #2
 8002954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 fb9b 	bl	8003094 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 fbc4 	bl	80030ec <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 fb62 	bl	800302e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 fbd4 	bl	8003118 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 fb22 	bl	8002fba <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800299a:	2300      	movs	r3, #0
 800299c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d101      	bne.n	80029ac <HAL_ETH_ConfigMAC+0x1c>
 80029a8:	2302      	movs	r3, #2
 80029aa:	e0e4      	b.n	8002b76 <HAL_ETH_ConfigMAC+0x1e6>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2202      	movs	r2, #2
 80029b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f000 80b1 	beq.w	8002b26 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	4b6c      	ldr	r3, [pc, #432]	; (8002b80 <HAL_ETH_ConfigMAC+0x1f0>)
 80029d0:	4013      	ands	r3, r2
 80029d2:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80029dc:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80029e2:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80029e8:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80029ee:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80029f4:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80029fa:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002a00:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8002a06:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8002a0c:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8002a12:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002a18:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8002a1e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a36:	2001      	movs	r0, #1
 8002a38:	f7fe fcf4 	bl	8001424 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002a4c:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8002a52:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002a58:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8002a5e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002a64:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8002a6a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8002a76:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002a78:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a82:	2001      	movs	r0, #1
 8002a84:	f7fe fcce 	bl	8001424 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002a98:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002aa2:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aba:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002ac0:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8002ac6:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002acc:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8002ad2:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002ad8:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002af0:	2001      	movs	r0, #1
 8002af2:	f7fe fc97 	bl	8001424 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b16:	2001      	movs	r0, #1
 8002b18:	f7fe fc84 	bl	8001424 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	61da      	str	r2, [r3, #28]
 8002b24:	e01e      	b.n	8002b64 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002b34:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689a      	ldr	r2, [r3, #8]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b56:	2001      	movs	r0, #1
 8002b58:	f7fe fc64 	bl	8001424 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	ff20810f 	.word	0xff20810f

08002b84 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b0b0      	sub	sp, #192	; 0xc0
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d007      	beq.n	8002baa <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ba0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ba8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002baa:	2300      	movs	r3, #0
 8002bac:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d103      	bne.n	8002bd2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002bca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bce:	663b      	str	r3, [r7, #96]	; 0x60
 8002bd0:	e001      	b.n	8002bd6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002bd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bda:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002be0:	2300      	movs	r3, #0
 8002be2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002be4:	2300      	movs	r3, #0
 8002be6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002be8:	2300      	movs	r3, #0
 8002bea:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002bec:	2300      	movs	r3, #0
 8002bee:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002bf0:	2340      	movs	r3, #64	; 0x40
 8002bf2:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002c00:	2300      	movs	r3, #0
 8002c02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002c06:	2300      	movs	r3, #0
 8002c08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8002c12:	2300      	movs	r3, #0
 8002c14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002c24:	2380      	movs	r3, #128	; 0x80
 8002c26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002c30:	2300      	movs	r3, #0
 8002c32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002c36:	2300      	movs	r3, #0
 8002c38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002c42:	2300      	movs	r3, #0
 8002c44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002c58:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c5c:	4ba9      	ldr	r3, [pc, #676]	; (8002f04 <ETH_MACDMAConfig+0x380>)
 8002c5e:	4013      	ands	r3, r2
 8002c60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002c64:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002c68:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002c6c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002c6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002c70:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002c76:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002c78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002c7a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002c7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002c7e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002c84:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002c86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002c88:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002c8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002c8c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002c8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002c90:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002c94:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002c96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002c98:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002c9a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cac:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cb8:	2001      	movs	r0, #1
 8002cba:	f7fe fbb3 	bl	8001424 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cc6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002cc8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002cca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002ccc:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002cce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002cd0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002cd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002cd6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002cd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002cdc:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002cde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002ce2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002ce4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002ce8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002cec:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002cf4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002cf6:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d02:	2001      	movs	r0, #1
 8002d04:	f7fe fb8e 	bl	8001424 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d10:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d1a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002d24:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002d30:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d34:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002d38:	4013      	ands	r3, r2
 8002d3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002d3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d42:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002d44:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002d48:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002d4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002d4e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002d50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002d54:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002d56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002d5a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002d5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002d60:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002d62:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d66:	4313      	orrs	r3, r2
 8002d68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d74:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d80:	2001      	movs	r0, #1
 8002d82:	f7fe fb4f 	bl	8001424 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d8e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002d90:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002d94:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002daa:	2001      	movs	r0, #1
 8002dac:	f7fe fb3a 	bl	8001424 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002db8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002dbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dc2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002dc8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002dcc:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002dde:	2304      	movs	r3, #4
 8002de0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002de2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002de6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002de8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dec:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002dee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002df2:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002df4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002df8:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002dfa:	2380      	movs	r3, #128	; 0x80
 8002dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002e02:	2300      	movs	r3, #0
 8002e04:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002e14:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e18:	4b3b      	ldr	r3, [pc, #236]	; (8002f08 <ETH_MACDMAConfig+0x384>)
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002e20:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002e22:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002e24:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002e26:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002e28:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002e2a:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002e2c:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002e2e:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002e30:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002e32:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002e34:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002e36:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002e38:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002e3c:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002e40:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002e42:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e46:	4313      	orrs	r3, r2
 8002e48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e54:	461a      	mov	r2, r3
 8002e56:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002e5a:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e6a:	2001      	movs	r0, #1
 8002e6c:	f7fe fada 	bl	8001424 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e78:	461a      	mov	r2, r3
 8002e7a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002e7e:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002e80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002e84:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002e88:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002e8c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002e90:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002e92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e94:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002e96:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002e98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002e9a:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6812      	ldr	r2, [r2, #0]
 8002ea0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ea4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ea8:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002eb8:	2001      	movs	r0, #1
 8002eba:	f7fe fab3 	bl	8001424 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ecc:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d10b      	bne.n	8002eee <ETH_MACDMAConfig+0x36a>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ede:	69d9      	ldr	r1, [r3, #28]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	4b09      	ldr	r3, [pc, #36]	; (8002f0c <ETH_MACDMAConfig+0x388>)
 8002ee6:	430b      	orrs	r3, r1
 8002ee8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002eec:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f80a 	bl	8002f10 <ETH_MACAddressConfig>
}
 8002efc:	bf00      	nop
 8002efe:	37c0      	adds	r7, #192	; 0xc0
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	ff20810f 	.word	0xff20810f
 8002f08:	f8de3f23 	.word	0xf8de3f23
 8002f0c:	00010040 	.word	0x00010040

08002f10 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b087      	sub	sp, #28
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	3305      	adds	r3, #5
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	021b      	lsls	r3, r3, #8
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	3204      	adds	r2, #4
 8002f28:	7812      	ldrb	r2, [r2, #0]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	4b11      	ldr	r3, [pc, #68]	; (8002f78 <ETH_MACAddressConfig+0x68>)
 8002f32:	4413      	add	r3, r2
 8002f34:	461a      	mov	r2, r3
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	3303      	adds	r3, #3
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	061a      	lsls	r2, r3, #24
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	3302      	adds	r3, #2
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	041b      	lsls	r3, r3, #16
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	021b      	lsls	r3, r3, #8
 8002f54:	4313      	orrs	r3, r2
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	7812      	ldrb	r2, [r2, #0]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002f5e:	68ba      	ldr	r2, [r7, #8]
 8002f60:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <ETH_MACAddressConfig+0x6c>)
 8002f62:	4413      	add	r3, r2
 8002f64:	461a      	mov	r2, r3
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	6013      	str	r3, [r2, #0]
}
 8002f6a:	bf00      	nop
 8002f6c:	371c      	adds	r7, #28
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	40028040 	.word	0x40028040
 8002f7c:	40028044 	.word	0x40028044

08002f80 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f042 0208 	orr.w	r2, r2, #8
 8002f9a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fa4:	2001      	movs	r0, #1
 8002fa6:	f7fe fa3d 	bl	8001424 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	601a      	str	r2, [r3, #0]
}
 8002fb2:	bf00      	nop
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b084      	sub	sp, #16
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 0208 	bic.w	r2, r2, #8
 8002fd4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fde:	2001      	movs	r0, #1
 8002fe0:	f7fe fa20 	bl	8001424 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	601a      	str	r2, [r3, #0]
}
 8002fec:	bf00      	nop
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 0204 	orr.w	r2, r2, #4
 800300e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003018:	2001      	movs	r0, #1
 800301a:	f7fe fa03 	bl	8001424 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	601a      	str	r2, [r3, #0]
}
 8003026:	bf00      	nop
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800302e:	b580      	push	{r7, lr}
 8003030:	b084      	sub	sp, #16
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003036:	2300      	movs	r3, #0
 8003038:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 0204 	bic.w	r2, r2, #4
 8003048:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003052:	2001      	movs	r0, #1
 8003054:	f7fe f9e6 	bl	8001424 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	601a      	str	r2, [r3, #0]
}
 8003060:	bf00      	nop
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6812      	ldr	r2, [r2, #0]
 800307e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003082:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003086:	6193      	str	r3, [r2, #24]
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6812      	ldr	r2, [r2, #0]
 80030aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80030b2:	6193      	str	r3, [r2, #24]
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6812      	ldr	r2, [r2, #0]
 80030d6:	f043 0302 	orr.w	r3, r3, #2
 80030da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80030de:	6193      	str	r3, [r2, #24]
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	6812      	ldr	r2, [r2, #0]
 8003102:	f023 0302 	bic.w	r3, r3, #2
 8003106:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800310a:	6193      	str	r3, [r2, #24]
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003120:	2300      	movs	r3, #0
 8003122:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6812      	ldr	r2, [r2, #0]
 8003132:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003136:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800313a:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003148:	2001      	movs	r0, #1
 800314a:	f7fe f96b 	bl	8001424 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003158:	6193      	str	r3, [r2, #24]
}
 800315a:	bf00      	nop
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
	...

08003164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003164:	b480      	push	{r7}
 8003166:	b089      	sub	sp, #36	; 0x24
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800316e:	2300      	movs	r3, #0
 8003170:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003172:	2300      	movs	r3, #0
 8003174:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003176:	2300      	movs	r3, #0
 8003178:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800317a:	2300      	movs	r3, #0
 800317c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800317e:	2300      	movs	r3, #0
 8003180:	61fb      	str	r3, [r7, #28]
 8003182:	e175      	b.n	8003470 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003184:	2201      	movs	r2, #1
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	4013      	ands	r3, r2
 8003196:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	429a      	cmp	r2, r3
 800319e:	f040 8164 	bne.w	800346a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d005      	beq.n	80031ba <HAL_GPIO_Init+0x56>
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d130      	bne.n	800321c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	2203      	movs	r2, #3
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	43db      	mvns	r3, r3
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	4013      	ands	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	68da      	ldr	r2, [r3, #12]
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	fa02 f303 	lsl.w	r3, r2, r3
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031f0:	2201      	movs	r2, #1
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	43db      	mvns	r3, r3
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4013      	ands	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	091b      	lsrs	r3, r3, #4
 8003206:	f003 0201 	and.w	r2, r3, #1
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	4313      	orrs	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f003 0303 	and.w	r3, r3, #3
 8003224:	2b03      	cmp	r3, #3
 8003226:	d017      	beq.n	8003258 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	2203      	movs	r2, #3
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	43db      	mvns	r3, r3
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	4013      	ands	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4313      	orrs	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f003 0303 	and.w	r3, r3, #3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d123      	bne.n	80032ac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	08da      	lsrs	r2, r3, #3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3208      	adds	r2, #8
 800326c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	220f      	movs	r2, #15
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4013      	ands	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	691a      	ldr	r2, [r3, #16]
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4313      	orrs	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	08da      	lsrs	r2, r3, #3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3208      	adds	r2, #8
 80032a6:	69b9      	ldr	r1, [r7, #24]
 80032a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	2203      	movs	r2, #3
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	43db      	mvns	r3, r3
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	4013      	ands	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f003 0203 	and.w	r2, r3, #3
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 80be 	beq.w	800346a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ee:	4b66      	ldr	r3, [pc, #408]	; (8003488 <HAL_GPIO_Init+0x324>)
 80032f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f2:	4a65      	ldr	r2, [pc, #404]	; (8003488 <HAL_GPIO_Init+0x324>)
 80032f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032f8:	6453      	str	r3, [r2, #68]	; 0x44
 80032fa:	4b63      	ldr	r3, [pc, #396]	; (8003488 <HAL_GPIO_Init+0x324>)
 80032fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003302:	60fb      	str	r3, [r7, #12]
 8003304:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003306:	4a61      	ldr	r2, [pc, #388]	; (800348c <HAL_GPIO_Init+0x328>)
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	089b      	lsrs	r3, r3, #2
 800330c:	3302      	adds	r3, #2
 800330e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003312:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	220f      	movs	r2, #15
 800331e:	fa02 f303 	lsl.w	r3, r2, r3
 8003322:	43db      	mvns	r3, r3
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	4013      	ands	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a58      	ldr	r2, [pc, #352]	; (8003490 <HAL_GPIO_Init+0x32c>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d037      	beq.n	80033a2 <HAL_GPIO_Init+0x23e>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a57      	ldr	r2, [pc, #348]	; (8003494 <HAL_GPIO_Init+0x330>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d031      	beq.n	800339e <HAL_GPIO_Init+0x23a>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a56      	ldr	r2, [pc, #344]	; (8003498 <HAL_GPIO_Init+0x334>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d02b      	beq.n	800339a <HAL_GPIO_Init+0x236>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a55      	ldr	r2, [pc, #340]	; (800349c <HAL_GPIO_Init+0x338>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d025      	beq.n	8003396 <HAL_GPIO_Init+0x232>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a54      	ldr	r2, [pc, #336]	; (80034a0 <HAL_GPIO_Init+0x33c>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d01f      	beq.n	8003392 <HAL_GPIO_Init+0x22e>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a53      	ldr	r2, [pc, #332]	; (80034a4 <HAL_GPIO_Init+0x340>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d019      	beq.n	800338e <HAL_GPIO_Init+0x22a>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a52      	ldr	r2, [pc, #328]	; (80034a8 <HAL_GPIO_Init+0x344>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d013      	beq.n	800338a <HAL_GPIO_Init+0x226>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a51      	ldr	r2, [pc, #324]	; (80034ac <HAL_GPIO_Init+0x348>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d00d      	beq.n	8003386 <HAL_GPIO_Init+0x222>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a50      	ldr	r2, [pc, #320]	; (80034b0 <HAL_GPIO_Init+0x34c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d007      	beq.n	8003382 <HAL_GPIO_Init+0x21e>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a4f      	ldr	r2, [pc, #316]	; (80034b4 <HAL_GPIO_Init+0x350>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d101      	bne.n	800337e <HAL_GPIO_Init+0x21a>
 800337a:	2309      	movs	r3, #9
 800337c:	e012      	b.n	80033a4 <HAL_GPIO_Init+0x240>
 800337e:	230a      	movs	r3, #10
 8003380:	e010      	b.n	80033a4 <HAL_GPIO_Init+0x240>
 8003382:	2308      	movs	r3, #8
 8003384:	e00e      	b.n	80033a4 <HAL_GPIO_Init+0x240>
 8003386:	2307      	movs	r3, #7
 8003388:	e00c      	b.n	80033a4 <HAL_GPIO_Init+0x240>
 800338a:	2306      	movs	r3, #6
 800338c:	e00a      	b.n	80033a4 <HAL_GPIO_Init+0x240>
 800338e:	2305      	movs	r3, #5
 8003390:	e008      	b.n	80033a4 <HAL_GPIO_Init+0x240>
 8003392:	2304      	movs	r3, #4
 8003394:	e006      	b.n	80033a4 <HAL_GPIO_Init+0x240>
 8003396:	2303      	movs	r3, #3
 8003398:	e004      	b.n	80033a4 <HAL_GPIO_Init+0x240>
 800339a:	2302      	movs	r3, #2
 800339c:	e002      	b.n	80033a4 <HAL_GPIO_Init+0x240>
 800339e:	2301      	movs	r3, #1
 80033a0:	e000      	b.n	80033a4 <HAL_GPIO_Init+0x240>
 80033a2:	2300      	movs	r3, #0
 80033a4:	69fa      	ldr	r2, [r7, #28]
 80033a6:	f002 0203 	and.w	r2, r2, #3
 80033aa:	0092      	lsls	r2, r2, #2
 80033ac:	4093      	lsls	r3, r2
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80033b4:	4935      	ldr	r1, [pc, #212]	; (800348c <HAL_GPIO_Init+0x328>)
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	089b      	lsrs	r3, r3, #2
 80033ba:	3302      	adds	r3, #2
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033c2:	4b3d      	ldr	r3, [pc, #244]	; (80034b8 <HAL_GPIO_Init+0x354>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	43db      	mvns	r3, r3
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	4013      	ands	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033e6:	4a34      	ldr	r2, [pc, #208]	; (80034b8 <HAL_GPIO_Init+0x354>)
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033ec:	4b32      	ldr	r3, [pc, #200]	; (80034b8 <HAL_GPIO_Init+0x354>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	43db      	mvns	r3, r3
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	4013      	ands	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d003      	beq.n	8003410 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	4313      	orrs	r3, r2
 800340e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003410:	4a29      	ldr	r2, [pc, #164]	; (80034b8 <HAL_GPIO_Init+0x354>)
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003416:	4b28      	ldr	r3, [pc, #160]	; (80034b8 <HAL_GPIO_Init+0x354>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	43db      	mvns	r3, r3
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	4013      	ands	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	4313      	orrs	r3, r2
 8003438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800343a:	4a1f      	ldr	r2, [pc, #124]	; (80034b8 <HAL_GPIO_Init+0x354>)
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003440:	4b1d      	ldr	r3, [pc, #116]	; (80034b8 <HAL_GPIO_Init+0x354>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	43db      	mvns	r3, r3
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	4013      	ands	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d003      	beq.n	8003464 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	4313      	orrs	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003464:	4a14      	ldr	r2, [pc, #80]	; (80034b8 <HAL_GPIO_Init+0x354>)
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	3301      	adds	r3, #1
 800346e:	61fb      	str	r3, [r7, #28]
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	2b0f      	cmp	r3, #15
 8003474:	f67f ae86 	bls.w	8003184 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003478:	bf00      	nop
 800347a:	bf00      	nop
 800347c:	3724      	adds	r7, #36	; 0x24
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	40023800 	.word	0x40023800
 800348c:	40013800 	.word	0x40013800
 8003490:	40020000 	.word	0x40020000
 8003494:	40020400 	.word	0x40020400
 8003498:	40020800 	.word	0x40020800
 800349c:	40020c00 	.word	0x40020c00
 80034a0:	40021000 	.word	0x40021000
 80034a4:	40021400 	.word	0x40021400
 80034a8:	40021800 	.word	0x40021800
 80034ac:	40021c00 	.word	0x40021c00
 80034b0:	40022000 	.word	0x40022000
 80034b4:	40022400 	.word	0x40022400
 80034b8:	40013c00 	.word	0x40013c00

080034bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	460b      	mov	r3, r1
 80034c6:	807b      	strh	r3, [r7, #2]
 80034c8:	4613      	mov	r3, r2
 80034ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034cc:	787b      	ldrb	r3, [r7, #1]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034d2:	887a      	ldrh	r2, [r7, #2]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80034d8:	e003      	b.n	80034e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80034da:	887b      	ldrh	r3, [r7, #2]
 80034dc:	041a      	lsls	r2, r3, #16
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	619a      	str	r2, [r3, #24]
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b085      	sub	sp, #20
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	460b      	mov	r3, r1
 80034f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003500:	887a      	ldrh	r2, [r7, #2]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	4013      	ands	r3, r2
 8003506:	041a      	lsls	r2, r3, #16
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	43d9      	mvns	r1, r3
 800350c:	887b      	ldrh	r3, [r7, #2]
 800350e:	400b      	ands	r3, r1
 8003510:	431a      	orrs	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	619a      	str	r2, [r3, #24]
}
 8003516:	bf00      	nop
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
	...

08003524 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800352a:	2300      	movs	r3, #0
 800352c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800352e:	4b23      	ldr	r3, [pc, #140]	; (80035bc <HAL_PWREx_EnableOverDrive+0x98>)
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	4a22      	ldr	r2, [pc, #136]	; (80035bc <HAL_PWREx_EnableOverDrive+0x98>)
 8003534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003538:	6413      	str	r3, [r2, #64]	; 0x40
 800353a:	4b20      	ldr	r3, [pc, #128]	; (80035bc <HAL_PWREx_EnableOverDrive+0x98>)
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003542:	603b      	str	r3, [r7, #0]
 8003544:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003546:	4b1e      	ldr	r3, [pc, #120]	; (80035c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a1d      	ldr	r2, [pc, #116]	; (80035c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800354c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003550:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003552:	f7fd ff5b 	bl	800140c <HAL_GetTick>
 8003556:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003558:	e009      	b.n	800356e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800355a:	f7fd ff57 	bl	800140c <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003568:	d901      	bls.n	800356e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e022      	b.n	80035b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800356e:	4b14      	ldr	r3, [pc, #80]	; (80035c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800357a:	d1ee      	bne.n	800355a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800357c:	4b10      	ldr	r3, [pc, #64]	; (80035c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a0f      	ldr	r2, [pc, #60]	; (80035c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003582:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003586:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003588:	f7fd ff40 	bl	800140c <HAL_GetTick>
 800358c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800358e:	e009      	b.n	80035a4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003590:	f7fd ff3c 	bl	800140c <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800359e:	d901      	bls.n	80035a4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e007      	b.n	80035b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035a4:	4b06      	ldr	r3, [pc, #24]	; (80035c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035b0:	d1ee      	bne.n	8003590 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	40023800 	.word	0x40023800
 80035c0:	40007000 	.word	0x40007000

080035c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80035cc:	2300      	movs	r3, #0
 80035ce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e29b      	b.n	8003b12 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 8087 	beq.w	80036f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035e8:	4b96      	ldr	r3, [pc, #600]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 030c 	and.w	r3, r3, #12
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d00c      	beq.n	800360e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035f4:	4b93      	ldr	r3, [pc, #588]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 030c 	and.w	r3, r3, #12
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d112      	bne.n	8003626 <HAL_RCC_OscConfig+0x62>
 8003600:	4b90      	ldr	r3, [pc, #576]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003608:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800360c:	d10b      	bne.n	8003626 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800360e:	4b8d      	ldr	r3, [pc, #564]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d06c      	beq.n	80036f4 <HAL_RCC_OscConfig+0x130>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d168      	bne.n	80036f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e275      	b.n	8003b12 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800362e:	d106      	bne.n	800363e <HAL_RCC_OscConfig+0x7a>
 8003630:	4b84      	ldr	r3, [pc, #528]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a83      	ldr	r2, [pc, #524]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003636:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800363a:	6013      	str	r3, [r2, #0]
 800363c:	e02e      	b.n	800369c <HAL_RCC_OscConfig+0xd8>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10c      	bne.n	8003660 <HAL_RCC_OscConfig+0x9c>
 8003646:	4b7f      	ldr	r3, [pc, #508]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a7e      	ldr	r2, [pc, #504]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 800364c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	4b7c      	ldr	r3, [pc, #496]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a7b      	ldr	r2, [pc, #492]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003658:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800365c:	6013      	str	r3, [r2, #0]
 800365e:	e01d      	b.n	800369c <HAL_RCC_OscConfig+0xd8>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003668:	d10c      	bne.n	8003684 <HAL_RCC_OscConfig+0xc0>
 800366a:	4b76      	ldr	r3, [pc, #472]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a75      	ldr	r2, [pc, #468]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003670:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003674:	6013      	str	r3, [r2, #0]
 8003676:	4b73      	ldr	r3, [pc, #460]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a72      	ldr	r2, [pc, #456]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 800367c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	e00b      	b.n	800369c <HAL_RCC_OscConfig+0xd8>
 8003684:	4b6f      	ldr	r3, [pc, #444]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a6e      	ldr	r2, [pc, #440]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 800368a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800368e:	6013      	str	r3, [r2, #0]
 8003690:	4b6c      	ldr	r3, [pc, #432]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a6b      	ldr	r2, [pc, #428]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800369a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d013      	beq.n	80036cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a4:	f7fd feb2 	bl	800140c <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036ac:	f7fd feae 	bl	800140c <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b64      	cmp	r3, #100	; 0x64
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e229      	b.n	8003b12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036be:	4b61      	ldr	r3, [pc, #388]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d0f0      	beq.n	80036ac <HAL_RCC_OscConfig+0xe8>
 80036ca:	e014      	b.n	80036f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036cc:	f7fd fe9e 	bl	800140c <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036d4:	f7fd fe9a 	bl	800140c <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b64      	cmp	r3, #100	; 0x64
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e215      	b.n	8003b12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036e6:	4b57      	ldr	r3, [pc, #348]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1f0      	bne.n	80036d4 <HAL_RCC_OscConfig+0x110>
 80036f2:	e000      	b.n	80036f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d069      	beq.n	80037d6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003702:	4b50      	ldr	r3, [pc, #320]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 030c 	and.w	r3, r3, #12
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00b      	beq.n	8003726 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800370e:	4b4d      	ldr	r3, [pc, #308]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 030c 	and.w	r3, r3, #12
 8003716:	2b08      	cmp	r3, #8
 8003718:	d11c      	bne.n	8003754 <HAL_RCC_OscConfig+0x190>
 800371a:	4b4a      	ldr	r3, [pc, #296]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d116      	bne.n	8003754 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003726:	4b47      	ldr	r3, [pc, #284]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d005      	beq.n	800373e <HAL_RCC_OscConfig+0x17a>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d001      	beq.n	800373e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e1e9      	b.n	8003b12 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800373e:	4b41      	ldr	r3, [pc, #260]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	493d      	ldr	r1, [pc, #244]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 800374e:	4313      	orrs	r3, r2
 8003750:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003752:	e040      	b.n	80037d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d023      	beq.n	80037a4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800375c:	4b39      	ldr	r3, [pc, #228]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a38      	ldr	r2, [pc, #224]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003762:	f043 0301 	orr.w	r3, r3, #1
 8003766:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003768:	f7fd fe50 	bl	800140c <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003770:	f7fd fe4c 	bl	800140c <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e1c7      	b.n	8003b12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003782:	4b30      	ldr	r3, [pc, #192]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0f0      	beq.n	8003770 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800378e:	4b2d      	ldr	r3, [pc, #180]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	4929      	ldr	r1, [pc, #164]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	600b      	str	r3, [r1, #0]
 80037a2:	e018      	b.n	80037d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037a4:	4b27      	ldr	r3, [pc, #156]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a26      	ldr	r2, [pc, #152]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 80037aa:	f023 0301 	bic.w	r3, r3, #1
 80037ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b0:	f7fd fe2c 	bl	800140c <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037b8:	f7fd fe28 	bl	800140c <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e1a3      	b.n	8003b12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ca:	4b1e      	ldr	r3, [pc, #120]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f0      	bne.n	80037b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d038      	beq.n	8003854 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d019      	beq.n	800381e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037ea:	4b16      	ldr	r3, [pc, #88]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 80037ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ee:	4a15      	ldr	r2, [pc, #84]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 80037f0:	f043 0301 	orr.w	r3, r3, #1
 80037f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f6:	f7fd fe09 	bl	800140c <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037fc:	e008      	b.n	8003810 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037fe:	f7fd fe05 	bl	800140c <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d901      	bls.n	8003810 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e180      	b.n	8003b12 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003810:	4b0c      	ldr	r3, [pc, #48]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0f0      	beq.n	80037fe <HAL_RCC_OscConfig+0x23a>
 800381c:	e01a      	b.n	8003854 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800381e:	4b09      	ldr	r3, [pc, #36]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003822:	4a08      	ldr	r2, [pc, #32]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003824:	f023 0301 	bic.w	r3, r3, #1
 8003828:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800382a:	f7fd fdef 	bl	800140c <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003830:	e00a      	b.n	8003848 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003832:	f7fd fdeb 	bl	800140c <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d903      	bls.n	8003848 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e166      	b.n	8003b12 <HAL_RCC_OscConfig+0x54e>
 8003844:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003848:	4b92      	ldr	r3, [pc, #584]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 800384a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1ee      	bne.n	8003832 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 80a4 	beq.w	80039aa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003862:	4b8c      	ldr	r3, [pc, #560]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10d      	bne.n	800388a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800386e:	4b89      	ldr	r3, [pc, #548]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	4a88      	ldr	r2, [pc, #544]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 8003874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003878:	6413      	str	r3, [r2, #64]	; 0x40
 800387a:	4b86      	ldr	r3, [pc, #536]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003882:	60bb      	str	r3, [r7, #8]
 8003884:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003886:	2301      	movs	r3, #1
 8003888:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800388a:	4b83      	ldr	r3, [pc, #524]	; (8003a98 <HAL_RCC_OscConfig+0x4d4>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003892:	2b00      	cmp	r3, #0
 8003894:	d118      	bne.n	80038c8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003896:	4b80      	ldr	r3, [pc, #512]	; (8003a98 <HAL_RCC_OscConfig+0x4d4>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a7f      	ldr	r2, [pc, #508]	; (8003a98 <HAL_RCC_OscConfig+0x4d4>)
 800389c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038a2:	f7fd fdb3 	bl	800140c <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038a8:	e008      	b.n	80038bc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038aa:	f7fd fdaf 	bl	800140c <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b64      	cmp	r3, #100	; 0x64
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e12a      	b.n	8003b12 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038bc:	4b76      	ldr	r3, [pc, #472]	; (8003a98 <HAL_RCC_OscConfig+0x4d4>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d0f0      	beq.n	80038aa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d106      	bne.n	80038de <HAL_RCC_OscConfig+0x31a>
 80038d0:	4b70      	ldr	r3, [pc, #448]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 80038d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d4:	4a6f      	ldr	r2, [pc, #444]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 80038d6:	f043 0301 	orr.w	r3, r3, #1
 80038da:	6713      	str	r3, [r2, #112]	; 0x70
 80038dc:	e02d      	b.n	800393a <HAL_RCC_OscConfig+0x376>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10c      	bne.n	8003900 <HAL_RCC_OscConfig+0x33c>
 80038e6:	4b6b      	ldr	r3, [pc, #428]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 80038e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ea:	4a6a      	ldr	r2, [pc, #424]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 80038ec:	f023 0301 	bic.w	r3, r3, #1
 80038f0:	6713      	str	r3, [r2, #112]	; 0x70
 80038f2:	4b68      	ldr	r3, [pc, #416]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 80038f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f6:	4a67      	ldr	r2, [pc, #412]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 80038f8:	f023 0304 	bic.w	r3, r3, #4
 80038fc:	6713      	str	r3, [r2, #112]	; 0x70
 80038fe:	e01c      	b.n	800393a <HAL_RCC_OscConfig+0x376>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	2b05      	cmp	r3, #5
 8003906:	d10c      	bne.n	8003922 <HAL_RCC_OscConfig+0x35e>
 8003908:	4b62      	ldr	r3, [pc, #392]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 800390a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390c:	4a61      	ldr	r2, [pc, #388]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 800390e:	f043 0304 	orr.w	r3, r3, #4
 8003912:	6713      	str	r3, [r2, #112]	; 0x70
 8003914:	4b5f      	ldr	r3, [pc, #380]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 8003916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003918:	4a5e      	ldr	r2, [pc, #376]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 800391a:	f043 0301 	orr.w	r3, r3, #1
 800391e:	6713      	str	r3, [r2, #112]	; 0x70
 8003920:	e00b      	b.n	800393a <HAL_RCC_OscConfig+0x376>
 8003922:	4b5c      	ldr	r3, [pc, #368]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 8003924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003926:	4a5b      	ldr	r2, [pc, #364]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 8003928:	f023 0301 	bic.w	r3, r3, #1
 800392c:	6713      	str	r3, [r2, #112]	; 0x70
 800392e:	4b59      	ldr	r3, [pc, #356]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 8003930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003932:	4a58      	ldr	r2, [pc, #352]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 8003934:	f023 0304 	bic.w	r3, r3, #4
 8003938:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d015      	beq.n	800396e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003942:	f7fd fd63 	bl	800140c <HAL_GetTick>
 8003946:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003948:	e00a      	b.n	8003960 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800394a:	f7fd fd5f 	bl	800140c <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	f241 3288 	movw	r2, #5000	; 0x1388
 8003958:	4293      	cmp	r3, r2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e0d8      	b.n	8003b12 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003960:	4b4c      	ldr	r3, [pc, #304]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 8003962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d0ee      	beq.n	800394a <HAL_RCC_OscConfig+0x386>
 800396c:	e014      	b.n	8003998 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800396e:	f7fd fd4d 	bl	800140c <HAL_GetTick>
 8003972:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003974:	e00a      	b.n	800398c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003976:	f7fd fd49 	bl	800140c <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	f241 3288 	movw	r2, #5000	; 0x1388
 8003984:	4293      	cmp	r3, r2
 8003986:	d901      	bls.n	800398c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e0c2      	b.n	8003b12 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800398c:	4b41      	ldr	r3, [pc, #260]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 800398e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1ee      	bne.n	8003976 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003998:	7dfb      	ldrb	r3, [r7, #23]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d105      	bne.n	80039aa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800399e:	4b3d      	ldr	r3, [pc, #244]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	4a3c      	ldr	r2, [pc, #240]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 80039a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f000 80ae 	beq.w	8003b10 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039b4:	4b37      	ldr	r3, [pc, #220]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f003 030c 	and.w	r3, r3, #12
 80039bc:	2b08      	cmp	r3, #8
 80039be:	d06d      	beq.n	8003a9c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d14b      	bne.n	8003a60 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039c8:	4b32      	ldr	r3, [pc, #200]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a31      	ldr	r2, [pc, #196]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 80039ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d4:	f7fd fd1a 	bl	800140c <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039dc:	f7fd fd16 	bl	800140c <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e091      	b.n	8003b12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ee:	4b29      	ldr	r3, [pc, #164]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1f0      	bne.n	80039dc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	69da      	ldr	r2, [r3, #28]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	019b      	lsls	r3, r3, #6
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a10:	085b      	lsrs	r3, r3, #1
 8003a12:	3b01      	subs	r3, #1
 8003a14:	041b      	lsls	r3, r3, #16
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1c:	061b      	lsls	r3, r3, #24
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a24:	071b      	lsls	r3, r3, #28
 8003a26:	491b      	ldr	r1, [pc, #108]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a2c:	4b19      	ldr	r3, [pc, #100]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a18      	ldr	r2, [pc, #96]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 8003a32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a38:	f7fd fce8 	bl	800140c <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a40:	f7fd fce4 	bl	800140c <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e05f      	b.n	8003b12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a52:	4b10      	ldr	r3, [pc, #64]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0f0      	beq.n	8003a40 <HAL_RCC_OscConfig+0x47c>
 8003a5e:	e057      	b.n	8003b10 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a60:	4b0c      	ldr	r3, [pc, #48]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a0b      	ldr	r2, [pc, #44]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 8003a66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6c:	f7fd fcce 	bl	800140c <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a74:	f7fd fcca 	bl	800140c <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e045      	b.n	8003b12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a86:	4b03      	ldr	r3, [pc, #12]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1f0      	bne.n	8003a74 <HAL_RCC_OscConfig+0x4b0>
 8003a92:	e03d      	b.n	8003b10 <HAL_RCC_OscConfig+0x54c>
 8003a94:	40023800 	.word	0x40023800
 8003a98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003a9c:	4b1f      	ldr	r3, [pc, #124]	; (8003b1c <HAL_RCC_OscConfig+0x558>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d030      	beq.n	8003b0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d129      	bne.n	8003b0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d122      	bne.n	8003b0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003acc:	4013      	ands	r3, r2
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ad2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d119      	bne.n	8003b0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae2:	085b      	lsrs	r3, r3, #1
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d10f      	bne.n	8003b0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d107      	bne.n	8003b0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b06:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d001      	beq.n	8003b10 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e000      	b.n	8003b12 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3718      	adds	r7, #24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40023800 	.word	0x40023800

08003b20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d101      	bne.n	8003b38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e0d0      	b.n	8003cda <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b38:	4b6a      	ldr	r3, [pc, #424]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 030f 	and.w	r3, r3, #15
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d910      	bls.n	8003b68 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b46:	4b67      	ldr	r3, [pc, #412]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f023 020f 	bic.w	r2, r3, #15
 8003b4e:	4965      	ldr	r1, [pc, #404]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b56:	4b63      	ldr	r3, [pc, #396]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 030f 	and.w	r3, r3, #15
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d001      	beq.n	8003b68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e0b8      	b.n	8003cda <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d020      	beq.n	8003bb6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0304 	and.w	r3, r3, #4
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d005      	beq.n	8003b8c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b80:	4b59      	ldr	r3, [pc, #356]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	4a58      	ldr	r2, [pc, #352]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8003b86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b8a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0308 	and.w	r3, r3, #8
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d005      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b98:	4b53      	ldr	r3, [pc, #332]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	4a52      	ldr	r2, [pc, #328]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8003b9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ba2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ba4:	4b50      	ldr	r3, [pc, #320]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	494d      	ldr	r1, [pc, #308]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d040      	beq.n	8003c44 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d107      	bne.n	8003bda <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bca:	4b47      	ldr	r3, [pc, #284]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d115      	bne.n	8003c02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e07f      	b.n	8003cda <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d107      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003be2:	4b41      	ldr	r3, [pc, #260]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d109      	bne.n	8003c02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e073      	b.n	8003cda <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf2:	4b3d      	ldr	r3, [pc, #244]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e06b      	b.n	8003cda <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c02:	4b39      	ldr	r3, [pc, #228]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f023 0203 	bic.w	r2, r3, #3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	4936      	ldr	r1, [pc, #216]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c14:	f7fd fbfa 	bl	800140c <HAL_GetTick>
 8003c18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c1a:	e00a      	b.n	8003c32 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c1c:	f7fd fbf6 	bl	800140c <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e053      	b.n	8003cda <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c32:	4b2d      	ldr	r3, [pc, #180]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 020c 	and.w	r2, r3, #12
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d1eb      	bne.n	8003c1c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c44:	4b27      	ldr	r3, [pc, #156]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 030f 	and.w	r3, r3, #15
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d210      	bcs.n	8003c74 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c52:	4b24      	ldr	r3, [pc, #144]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f023 020f 	bic.w	r2, r3, #15
 8003c5a:	4922      	ldr	r1, [pc, #136]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c62:	4b20      	ldr	r3, [pc, #128]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d001      	beq.n	8003c74 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e032      	b.n	8003cda <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d008      	beq.n	8003c92 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c80:	4b19      	ldr	r3, [pc, #100]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	4916      	ldr	r1, [pc, #88]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0308 	and.w	r3, r3, #8
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d009      	beq.n	8003cb2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c9e:	4b12      	ldr	r3, [pc, #72]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	490e      	ldr	r1, [pc, #56]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cb2:	f000 f821 	bl	8003cf8 <HAL_RCC_GetSysClockFreq>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	4b0b      	ldr	r3, [pc, #44]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	091b      	lsrs	r3, r3, #4
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	490a      	ldr	r1, [pc, #40]	; (8003cec <HAL_RCC_ClockConfig+0x1cc>)
 8003cc4:	5ccb      	ldrb	r3, [r1, r3]
 8003cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cca:	4a09      	ldr	r2, [pc, #36]	; (8003cf0 <HAL_RCC_ClockConfig+0x1d0>)
 8003ccc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cce:	4b09      	ldr	r3, [pc, #36]	; (8003cf4 <HAL_RCC_ClockConfig+0x1d4>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fd f9d4 	bl	8001080 <HAL_InitTick>

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40023c00 	.word	0x40023c00
 8003ce8:	40023800 	.word	0x40023800
 8003cec:	0801d5bc 	.word	0x0801d5bc
 8003cf0:	20000000 	.word	0x20000000
 8003cf4:	20000004 	.word	0x20000004

08003cf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cfc:	b094      	sub	sp, #80	; 0x50
 8003cfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003d00:	2300      	movs	r3, #0
 8003d02:	647b      	str	r3, [r7, #68]	; 0x44
 8003d04:	2300      	movs	r3, #0
 8003d06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d08:	2300      	movs	r3, #0
 8003d0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d10:	4b79      	ldr	r3, [pc, #484]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f003 030c 	and.w	r3, r3, #12
 8003d18:	2b08      	cmp	r3, #8
 8003d1a:	d00d      	beq.n	8003d38 <HAL_RCC_GetSysClockFreq+0x40>
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	f200 80e1 	bhi.w	8003ee4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d002      	beq.n	8003d2c <HAL_RCC_GetSysClockFreq+0x34>
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d003      	beq.n	8003d32 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d2a:	e0db      	b.n	8003ee4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d2c:	4b73      	ldr	r3, [pc, #460]	; (8003efc <HAL_RCC_GetSysClockFreq+0x204>)
 8003d2e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d30:	e0db      	b.n	8003eea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d32:	4b73      	ldr	r3, [pc, #460]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x208>)
 8003d34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d36:	e0d8      	b.n	8003eea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d38:	4b6f      	ldr	r3, [pc, #444]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d40:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003d42:	4b6d      	ldr	r3, [pc, #436]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d063      	beq.n	8003e16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d4e:	4b6a      	ldr	r3, [pc, #424]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	099b      	lsrs	r3, r3, #6
 8003d54:	2200      	movs	r2, #0
 8003d56:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d60:	633b      	str	r3, [r7, #48]	; 0x30
 8003d62:	2300      	movs	r3, #0
 8003d64:	637b      	str	r3, [r7, #52]	; 0x34
 8003d66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d6a:	4622      	mov	r2, r4
 8003d6c:	462b      	mov	r3, r5
 8003d6e:	f04f 0000 	mov.w	r0, #0
 8003d72:	f04f 0100 	mov.w	r1, #0
 8003d76:	0159      	lsls	r1, r3, #5
 8003d78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d7c:	0150      	lsls	r0, r2, #5
 8003d7e:	4602      	mov	r2, r0
 8003d80:	460b      	mov	r3, r1
 8003d82:	4621      	mov	r1, r4
 8003d84:	1a51      	subs	r1, r2, r1
 8003d86:	6139      	str	r1, [r7, #16]
 8003d88:	4629      	mov	r1, r5
 8003d8a:	eb63 0301 	sbc.w	r3, r3, r1
 8003d8e:	617b      	str	r3, [r7, #20]
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	f04f 0300 	mov.w	r3, #0
 8003d98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d9c:	4659      	mov	r1, fp
 8003d9e:	018b      	lsls	r3, r1, #6
 8003da0:	4651      	mov	r1, sl
 8003da2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003da6:	4651      	mov	r1, sl
 8003da8:	018a      	lsls	r2, r1, #6
 8003daa:	4651      	mov	r1, sl
 8003dac:	ebb2 0801 	subs.w	r8, r2, r1
 8003db0:	4659      	mov	r1, fp
 8003db2:	eb63 0901 	sbc.w	r9, r3, r1
 8003db6:	f04f 0200 	mov.w	r2, #0
 8003dba:	f04f 0300 	mov.w	r3, #0
 8003dbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dca:	4690      	mov	r8, r2
 8003dcc:	4699      	mov	r9, r3
 8003dce:	4623      	mov	r3, r4
 8003dd0:	eb18 0303 	adds.w	r3, r8, r3
 8003dd4:	60bb      	str	r3, [r7, #8]
 8003dd6:	462b      	mov	r3, r5
 8003dd8:	eb49 0303 	adc.w	r3, r9, r3
 8003ddc:	60fb      	str	r3, [r7, #12]
 8003dde:	f04f 0200 	mov.w	r2, #0
 8003de2:	f04f 0300 	mov.w	r3, #0
 8003de6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003dea:	4629      	mov	r1, r5
 8003dec:	024b      	lsls	r3, r1, #9
 8003dee:	4621      	mov	r1, r4
 8003df0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003df4:	4621      	mov	r1, r4
 8003df6:	024a      	lsls	r2, r1, #9
 8003df8:	4610      	mov	r0, r2
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dfe:	2200      	movs	r2, #0
 8003e00:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e08:	f7fc fa82 	bl	8000310 <__aeabi_uldivmod>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	460b      	mov	r3, r1
 8003e10:	4613      	mov	r3, r2
 8003e12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e14:	e058      	b.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e16:	4b38      	ldr	r3, [pc, #224]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	099b      	lsrs	r3, r3, #6
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	4618      	mov	r0, r3
 8003e20:	4611      	mov	r1, r2
 8003e22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e26:	623b      	str	r3, [r7, #32]
 8003e28:	2300      	movs	r3, #0
 8003e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e30:	4642      	mov	r2, r8
 8003e32:	464b      	mov	r3, r9
 8003e34:	f04f 0000 	mov.w	r0, #0
 8003e38:	f04f 0100 	mov.w	r1, #0
 8003e3c:	0159      	lsls	r1, r3, #5
 8003e3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e42:	0150      	lsls	r0, r2, #5
 8003e44:	4602      	mov	r2, r0
 8003e46:	460b      	mov	r3, r1
 8003e48:	4641      	mov	r1, r8
 8003e4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e4e:	4649      	mov	r1, r9
 8003e50:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	f04f 0300 	mov.w	r3, #0
 8003e5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e68:	ebb2 040a 	subs.w	r4, r2, sl
 8003e6c:	eb63 050b 	sbc.w	r5, r3, fp
 8003e70:	f04f 0200 	mov.w	r2, #0
 8003e74:	f04f 0300 	mov.w	r3, #0
 8003e78:	00eb      	lsls	r3, r5, #3
 8003e7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e7e:	00e2      	lsls	r2, r4, #3
 8003e80:	4614      	mov	r4, r2
 8003e82:	461d      	mov	r5, r3
 8003e84:	4643      	mov	r3, r8
 8003e86:	18e3      	adds	r3, r4, r3
 8003e88:	603b      	str	r3, [r7, #0]
 8003e8a:	464b      	mov	r3, r9
 8003e8c:	eb45 0303 	adc.w	r3, r5, r3
 8003e90:	607b      	str	r3, [r7, #4]
 8003e92:	f04f 0200 	mov.w	r2, #0
 8003e96:	f04f 0300 	mov.w	r3, #0
 8003e9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e9e:	4629      	mov	r1, r5
 8003ea0:	028b      	lsls	r3, r1, #10
 8003ea2:	4621      	mov	r1, r4
 8003ea4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ea8:	4621      	mov	r1, r4
 8003eaa:	028a      	lsls	r2, r1, #10
 8003eac:	4610      	mov	r0, r2
 8003eae:	4619      	mov	r1, r3
 8003eb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	61bb      	str	r3, [r7, #24]
 8003eb6:	61fa      	str	r2, [r7, #28]
 8003eb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ebc:	f7fc fa28 	bl	8000310 <__aeabi_uldivmod>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003ec8:	4b0b      	ldr	r3, [pc, #44]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	0c1b      	lsrs	r3, r3, #16
 8003ece:	f003 0303 	and.w	r3, r3, #3
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003ed8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003eda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ee2:	e002      	b.n	8003eea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ee4:	4b05      	ldr	r3, [pc, #20]	; (8003efc <HAL_RCC_GetSysClockFreq+0x204>)
 8003ee6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ee8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3750      	adds	r7, #80	; 0x50
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ef6:	bf00      	nop
 8003ef8:	40023800 	.word	0x40023800
 8003efc:	00f42400 	.word	0x00f42400
 8003f00:	007a1200 	.word	0x007a1200

08003f04 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f08:	4b03      	ldr	r3, [pc, #12]	; (8003f18 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	20000000 	.word	0x20000000

08003f1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f20:	f7ff fff0 	bl	8003f04 <HAL_RCC_GetHCLKFreq>
 8003f24:	4602      	mov	r2, r0
 8003f26:	4b05      	ldr	r3, [pc, #20]	; (8003f3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	0a9b      	lsrs	r3, r3, #10
 8003f2c:	f003 0307 	and.w	r3, r3, #7
 8003f30:	4903      	ldr	r1, [pc, #12]	; (8003f40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f32:	5ccb      	ldrb	r3, [r1, r3]
 8003f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	0801d5cc 	.word	0x0801d5cc

08003f44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f48:	f7ff ffdc 	bl	8003f04 <HAL_RCC_GetHCLKFreq>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	4b05      	ldr	r3, [pc, #20]	; (8003f64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	0b5b      	lsrs	r3, r3, #13
 8003f54:	f003 0307 	and.w	r3, r3, #7
 8003f58:	4903      	ldr	r1, [pc, #12]	; (8003f68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f5a:	5ccb      	ldrb	r3, [r1, r3]
 8003f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	40023800 	.word	0x40023800
 8003f68:	0801d5cc 	.word	0x0801d5cc

08003f6c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	220f      	movs	r2, #15
 8003f7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f7c:	4b12      	ldr	r3, [pc, #72]	; (8003fc8 <HAL_RCC_GetClockConfig+0x5c>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f003 0203 	and.w	r2, r3, #3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003f88:	4b0f      	ldr	r3, [pc, #60]	; (8003fc8 <HAL_RCC_GetClockConfig+0x5c>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f94:	4b0c      	ldr	r3, [pc, #48]	; (8003fc8 <HAL_RCC_GetClockConfig+0x5c>)
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003fa0:	4b09      	ldr	r3, [pc, #36]	; (8003fc8 <HAL_RCC_GetClockConfig+0x5c>)
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	08db      	lsrs	r3, r3, #3
 8003fa6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003fae:	4b07      	ldr	r3, [pc, #28]	; (8003fcc <HAL_RCC_GetClockConfig+0x60>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 020f 	and.w	r2, r3, #15
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	601a      	str	r2, [r3, #0]
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	40023800 	.word	0x40023800
 8003fcc:	40023c00 	.word	0x40023c00

08003fd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d012      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ff8:	4b69      	ldr	r3, [pc, #420]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	4a68      	ldr	r2, [pc, #416]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ffe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004002:	6093      	str	r3, [r2, #8]
 8004004:	4b66      	ldr	r3, [pc, #408]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800400c:	4964      	ldr	r1, [pc, #400]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800400e:	4313      	orrs	r3, r2
 8004010:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800401a:	2301      	movs	r3, #1
 800401c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d017      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800402a:	4b5d      	ldr	r3, [pc, #372]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800402c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004030:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004038:	4959      	ldr	r1, [pc, #356]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800403a:	4313      	orrs	r3, r2
 800403c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004044:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004048:	d101      	bne.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800404a:	2301      	movs	r3, #1
 800404c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004056:	2301      	movs	r3, #1
 8004058:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d017      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004066:	4b4e      	ldr	r3, [pc, #312]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004068:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800406c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004074:	494a      	ldr	r1, [pc, #296]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004076:	4313      	orrs	r3, r2
 8004078:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004080:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004084:	d101      	bne.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004086:	2301      	movs	r3, #1
 8004088:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004092:	2301      	movs	r3, #1
 8004094:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80040a2:	2301      	movs	r3, #1
 80040a4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0320 	and.w	r3, r3, #32
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 808b 	beq.w	80041ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80040b4:	4b3a      	ldr	r3, [pc, #232]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b8:	4a39      	ldr	r2, [pc, #228]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040be:	6413      	str	r3, [r2, #64]	; 0x40
 80040c0:	4b37      	ldr	r3, [pc, #220]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c8:	60bb      	str	r3, [r7, #8]
 80040ca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80040cc:	4b35      	ldr	r3, [pc, #212]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a34      	ldr	r2, [pc, #208]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040d8:	f7fd f998 	bl	800140c <HAL_GetTick>
 80040dc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80040de:	e008      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040e0:	f7fd f994 	bl	800140c <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b64      	cmp	r3, #100	; 0x64
 80040ec:	d901      	bls.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e38f      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80040f2:	4b2c      	ldr	r3, [pc, #176]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0f0      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040fe:	4b28      	ldr	r3, [pc, #160]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004106:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d035      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	429a      	cmp	r2, r3
 800411a:	d02e      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800411c:	4b20      	ldr	r3, [pc, #128]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800411e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004124:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004126:	4b1e      	ldr	r3, [pc, #120]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412a:	4a1d      	ldr	r2, [pc, #116]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800412c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004130:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004132:	4b1b      	ldr	r3, [pc, #108]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004136:	4a1a      	ldr	r2, [pc, #104]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004138:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800413c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800413e:	4a18      	ldr	r2, [pc, #96]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004144:	4b16      	ldr	r3, [pc, #88]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	2b01      	cmp	r3, #1
 800414e:	d114      	bne.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004150:	f7fd f95c 	bl	800140c <HAL_GetTick>
 8004154:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004156:	e00a      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004158:	f7fd f958 	bl	800140c <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	f241 3288 	movw	r2, #5000	; 0x1388
 8004166:	4293      	cmp	r3, r2
 8004168:	d901      	bls.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e351      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800416e:	4b0c      	ldr	r3, [pc, #48]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d0ee      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004182:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004186:	d111      	bne.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004188:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004194:	4b04      	ldr	r3, [pc, #16]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004196:	400b      	ands	r3, r1
 8004198:	4901      	ldr	r1, [pc, #4]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800419a:	4313      	orrs	r3, r2
 800419c:	608b      	str	r3, [r1, #8]
 800419e:	e00b      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80041a0:	40023800 	.word	0x40023800
 80041a4:	40007000 	.word	0x40007000
 80041a8:	0ffffcff 	.word	0x0ffffcff
 80041ac:	4bac      	ldr	r3, [pc, #688]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	4aab      	ldr	r2, [pc, #684]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80041b6:	6093      	str	r3, [r2, #8]
 80041b8:	4ba9      	ldr	r3, [pc, #676]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041c4:	49a6      	ldr	r1, [pc, #664]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0310 	and.w	r3, r3, #16
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d010      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80041d6:	4ba2      	ldr	r3, [pc, #648]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041dc:	4aa0      	ldr	r2, [pc, #640]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80041e6:	4b9e      	ldr	r3, [pc, #632]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041e8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f0:	499b      	ldr	r1, [pc, #620]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00a      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004204:	4b96      	ldr	r3, [pc, #600]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004212:	4993      	ldr	r1, [pc, #588]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004226:	4b8e      	ldr	r3, [pc, #568]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800422c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004234:	498a      	ldr	r1, [pc, #552]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004236:	4313      	orrs	r3, r2
 8004238:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00a      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004248:	4b85      	ldr	r3, [pc, #532]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800424a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004256:	4982      	ldr	r1, [pc, #520]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004258:	4313      	orrs	r3, r2
 800425a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800426a:	4b7d      	ldr	r3, [pc, #500]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800426c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004270:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004278:	4979      	ldr	r1, [pc, #484]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800427a:	4313      	orrs	r3, r2
 800427c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00a      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800428c:	4b74      	ldr	r3, [pc, #464]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800428e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004292:	f023 0203 	bic.w	r2, r3, #3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429a:	4971      	ldr	r1, [pc, #452]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800429c:	4313      	orrs	r3, r2
 800429e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00a      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042ae:	4b6c      	ldr	r3, [pc, #432]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b4:	f023 020c 	bic.w	r2, r3, #12
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042bc:	4968      	ldr	r1, [pc, #416]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00a      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042d0:	4b63      	ldr	r3, [pc, #396]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042de:	4960      	ldr	r1, [pc, #384]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00a      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042f2:	4b5b      	ldr	r3, [pc, #364]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004300:	4957      	ldr	r1, [pc, #348]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004302:	4313      	orrs	r3, r2
 8004304:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00a      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004314:	4b52      	ldr	r3, [pc, #328]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004322:	494f      	ldr	r1, [pc, #316]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004324:	4313      	orrs	r3, r2
 8004326:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00a      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004336:	4b4a      	ldr	r3, [pc, #296]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800433c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004344:	4946      	ldr	r1, [pc, #280]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004346:	4313      	orrs	r3, r2
 8004348:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00a      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004358:	4b41      	ldr	r3, [pc, #260]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800435a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004366:	493e      	ldr	r1, [pc, #248]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004368:	4313      	orrs	r3, r2
 800436a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00a      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800437a:	4b39      	ldr	r3, [pc, #228]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800437c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004380:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004388:	4935      	ldr	r1, [pc, #212]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800438a:	4313      	orrs	r3, r2
 800438c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00a      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800439c:	4b30      	ldr	r3, [pc, #192]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800439e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043aa:	492d      	ldr	r1, [pc, #180]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d011      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80043be:	4b28      	ldr	r3, [pc, #160]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043cc:	4924      	ldr	r1, [pc, #144]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043dc:	d101      	bne.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80043de:	2301      	movs	r3, #1
 80043e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0308 	and.w	r3, r3, #8
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80043ee:	2301      	movs	r3, #1
 80043f0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00a      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043fe:	4b18      	ldr	r3, [pc, #96]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004404:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800440c:	4914      	ldr	r1, [pc, #80]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00b      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004420:	4b0f      	ldr	r3, [pc, #60]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004426:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004430:	490b      	ldr	r1, [pc, #44]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004432:	4313      	orrs	r3, r2
 8004434:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00f      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004444:	4b06      	ldr	r3, [pc, #24]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800444a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004454:	4902      	ldr	r1, [pc, #8]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004456:	4313      	orrs	r3, r2
 8004458:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800445c:	e002      	b.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800445e:	bf00      	nop
 8004460:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00b      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004470:	4b8a      	ldr	r3, [pc, #552]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004472:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004476:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004480:	4986      	ldr	r1, [pc, #536]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004482:	4313      	orrs	r3, r2
 8004484:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00b      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004494:	4b81      	ldr	r3, [pc, #516]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004496:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800449a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044a4:	497d      	ldr	r1, [pc, #500]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d006      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f000 80d6 	beq.w	800466c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80044c0:	4b76      	ldr	r3, [pc, #472]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a75      	ldr	r2, [pc, #468]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044cc:	f7fc ff9e 	bl	800140c <HAL_GetTick>
 80044d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044d2:	e008      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80044d4:	f7fc ff9a 	bl	800140c <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b64      	cmp	r3, #100	; 0x64
 80044e0:	d901      	bls.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e195      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044e6:	4b6d      	ldr	r3, [pc, #436]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1f0      	bne.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d021      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004502:	2b00      	cmp	r3, #0
 8004504:	d11d      	bne.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004506:	4b65      	ldr	r3, [pc, #404]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800450c:	0c1b      	lsrs	r3, r3, #16
 800450e:	f003 0303 	and.w	r3, r3, #3
 8004512:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004514:	4b61      	ldr	r3, [pc, #388]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004516:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800451a:	0e1b      	lsrs	r3, r3, #24
 800451c:	f003 030f 	and.w	r3, r3, #15
 8004520:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	019a      	lsls	r2, r3, #6
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	041b      	lsls	r3, r3, #16
 800452c:	431a      	orrs	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	061b      	lsls	r3, r3, #24
 8004532:	431a      	orrs	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	071b      	lsls	r3, r3, #28
 800453a:	4958      	ldr	r1, [pc, #352]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800453c:	4313      	orrs	r3, r2
 800453e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d004      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004552:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004556:	d00a      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004560:	2b00      	cmp	r3, #0
 8004562:	d02e      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004568:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800456c:	d129      	bne.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800456e:	4b4b      	ldr	r3, [pc, #300]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004570:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004574:	0c1b      	lsrs	r3, r3, #16
 8004576:	f003 0303 	and.w	r3, r3, #3
 800457a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800457c:	4b47      	ldr	r3, [pc, #284]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800457e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004582:	0f1b      	lsrs	r3, r3, #28
 8004584:	f003 0307 	and.w	r3, r3, #7
 8004588:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	019a      	lsls	r2, r3, #6
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	041b      	lsls	r3, r3, #16
 8004594:	431a      	orrs	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	061b      	lsls	r3, r3, #24
 800459c:	431a      	orrs	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	071b      	lsls	r3, r3, #28
 80045a2:	493e      	ldr	r1, [pc, #248]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80045aa:	4b3c      	ldr	r3, [pc, #240]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045b0:	f023 021f 	bic.w	r2, r3, #31
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b8:	3b01      	subs	r3, #1
 80045ba:	4938      	ldr	r1, [pc, #224]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d01d      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80045ce:	4b33      	ldr	r3, [pc, #204]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045d4:	0e1b      	lsrs	r3, r3, #24
 80045d6:	f003 030f 	and.w	r3, r3, #15
 80045da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80045dc:	4b2f      	ldr	r3, [pc, #188]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045e2:	0f1b      	lsrs	r3, r3, #28
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	019a      	lsls	r2, r3, #6
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	041b      	lsls	r3, r3, #16
 80045f6:	431a      	orrs	r2, r3
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	061b      	lsls	r3, r3, #24
 80045fc:	431a      	orrs	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	071b      	lsls	r3, r3, #28
 8004602:	4926      	ldr	r1, [pc, #152]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004604:	4313      	orrs	r3, r2
 8004606:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d011      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	019a      	lsls	r2, r3, #6
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	041b      	lsls	r3, r3, #16
 8004622:	431a      	orrs	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	061b      	lsls	r3, r3, #24
 800462a:	431a      	orrs	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	071b      	lsls	r3, r3, #28
 8004632:	491a      	ldr	r1, [pc, #104]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004634:	4313      	orrs	r3, r2
 8004636:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800463a:	4b18      	ldr	r3, [pc, #96]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a17      	ldr	r2, [pc, #92]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004640:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004644:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004646:	f7fc fee1 	bl	800140c <HAL_GetTick>
 800464a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800464c:	e008      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800464e:	f7fc fedd 	bl	800140c <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b64      	cmp	r3, #100	; 0x64
 800465a:	d901      	bls.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e0d8      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004660:	4b0e      	ldr	r3, [pc, #56]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0f0      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	2b01      	cmp	r3, #1
 8004670:	f040 80ce 	bne.w	8004810 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004674:	4b09      	ldr	r3, [pc, #36]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a08      	ldr	r2, [pc, #32]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800467a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800467e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004680:	f7fc fec4 	bl	800140c <HAL_GetTick>
 8004684:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004686:	e00b      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004688:	f7fc fec0 	bl	800140c <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b64      	cmp	r3, #100	; 0x64
 8004694:	d904      	bls.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e0bb      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800469a:	bf00      	nop
 800469c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80046a0:	4b5e      	ldr	r3, [pc, #376]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046ac:	d0ec      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d009      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d02e      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d12a      	bne.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80046d6:	4b51      	ldr	r3, [pc, #324]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046dc:	0c1b      	lsrs	r3, r3, #16
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80046e4:	4b4d      	ldr	r3, [pc, #308]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ea:	0f1b      	lsrs	r3, r3, #28
 80046ec:	f003 0307 	and.w	r3, r3, #7
 80046f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	019a      	lsls	r2, r3, #6
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	041b      	lsls	r3, r3, #16
 80046fc:	431a      	orrs	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	061b      	lsls	r3, r3, #24
 8004704:	431a      	orrs	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	071b      	lsls	r3, r3, #28
 800470a:	4944      	ldr	r1, [pc, #272]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800470c:	4313      	orrs	r3, r2
 800470e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004712:	4b42      	ldr	r3, [pc, #264]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004714:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004718:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004720:	3b01      	subs	r3, #1
 8004722:	021b      	lsls	r3, r3, #8
 8004724:	493d      	ldr	r1, [pc, #244]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004726:	4313      	orrs	r3, r2
 8004728:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d022      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800473c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004740:	d11d      	bne.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004742:	4b36      	ldr	r3, [pc, #216]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004748:	0e1b      	lsrs	r3, r3, #24
 800474a:	f003 030f 	and.w	r3, r3, #15
 800474e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004750:	4b32      	ldr	r3, [pc, #200]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004756:	0f1b      	lsrs	r3, r3, #28
 8004758:	f003 0307 	and.w	r3, r3, #7
 800475c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	019a      	lsls	r2, r3, #6
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	041b      	lsls	r3, r3, #16
 800476a:	431a      	orrs	r2, r3
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	061b      	lsls	r3, r3, #24
 8004770:	431a      	orrs	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	071b      	lsls	r3, r3, #28
 8004776:	4929      	ldr	r1, [pc, #164]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004778:	4313      	orrs	r3, r2
 800477a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0308 	and.w	r3, r3, #8
 8004786:	2b00      	cmp	r3, #0
 8004788:	d028      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800478a:	4b24      	ldr	r3, [pc, #144]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800478c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004790:	0e1b      	lsrs	r3, r3, #24
 8004792:	f003 030f 	and.w	r3, r3, #15
 8004796:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004798:	4b20      	ldr	r3, [pc, #128]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800479a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800479e:	0c1b      	lsrs	r3, r3, #16
 80047a0:	f003 0303 	and.w	r3, r3, #3
 80047a4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	019a      	lsls	r2, r3, #6
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	041b      	lsls	r3, r3, #16
 80047b0:	431a      	orrs	r2, r3
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	061b      	lsls	r3, r3, #24
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	69db      	ldr	r3, [r3, #28]
 80047bc:	071b      	lsls	r3, r3, #28
 80047be:	4917      	ldr	r1, [pc, #92]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80047c6:	4b15      	ldr	r3, [pc, #84]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d4:	4911      	ldr	r1, [pc, #68]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80047dc:	4b0f      	ldr	r3, [pc, #60]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a0e      	ldr	r2, [pc, #56]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047e8:	f7fc fe10 	bl	800140c <HAL_GetTick>
 80047ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80047ee:	e008      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80047f0:	f7fc fe0c 	bl	800140c <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b64      	cmp	r3, #100	; 0x64
 80047fc:	d901      	bls.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e007      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004802:	4b06      	ldr	r3, [pc, #24]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800480a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800480e:	d1ef      	bne.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3720      	adds	r7, #32
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	40023800 	.word	0x40023800

08004820 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e049      	b.n	80048c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d106      	bne.n	800484c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f7fc fb94 	bl	8000f74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2202      	movs	r2, #2
 8004850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	3304      	adds	r3, #4
 800485c:	4619      	mov	r1, r3
 800485e:	4610      	mov	r0, r2
 8004860:	f000 f9f6 	bl	8004c50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
	...

080048d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d001      	beq.n	80048e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e054      	b.n	8004992 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2202      	movs	r2, #2
 80048ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68da      	ldr	r2, [r3, #12]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f042 0201 	orr.w	r2, r2, #1
 80048fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a26      	ldr	r2, [pc, #152]	; (80049a0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d022      	beq.n	8004950 <HAL_TIM_Base_Start_IT+0x80>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004912:	d01d      	beq.n	8004950 <HAL_TIM_Base_Start_IT+0x80>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a22      	ldr	r2, [pc, #136]	; (80049a4 <HAL_TIM_Base_Start_IT+0xd4>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d018      	beq.n	8004950 <HAL_TIM_Base_Start_IT+0x80>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a21      	ldr	r2, [pc, #132]	; (80049a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d013      	beq.n	8004950 <HAL_TIM_Base_Start_IT+0x80>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a1f      	ldr	r2, [pc, #124]	; (80049ac <HAL_TIM_Base_Start_IT+0xdc>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d00e      	beq.n	8004950 <HAL_TIM_Base_Start_IT+0x80>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a1e      	ldr	r2, [pc, #120]	; (80049b0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d009      	beq.n	8004950 <HAL_TIM_Base_Start_IT+0x80>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a1c      	ldr	r2, [pc, #112]	; (80049b4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d004      	beq.n	8004950 <HAL_TIM_Base_Start_IT+0x80>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a1b      	ldr	r2, [pc, #108]	; (80049b8 <HAL_TIM_Base_Start_IT+0xe8>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d115      	bne.n	800497c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689a      	ldr	r2, [r3, #8]
 8004956:	4b19      	ldr	r3, [pc, #100]	; (80049bc <HAL_TIM_Base_Start_IT+0xec>)
 8004958:	4013      	ands	r3, r2
 800495a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2b06      	cmp	r3, #6
 8004960:	d015      	beq.n	800498e <HAL_TIM_Base_Start_IT+0xbe>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004968:	d011      	beq.n	800498e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f042 0201 	orr.w	r2, r2, #1
 8004978:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800497a:	e008      	b.n	800498e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f042 0201 	orr.w	r2, r2, #1
 800498a:	601a      	str	r2, [r3, #0]
 800498c:	e000      	b.n	8004990 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800498e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	40010000 	.word	0x40010000
 80049a4:	40000400 	.word	0x40000400
 80049a8:	40000800 	.word	0x40000800
 80049ac:	40000c00 	.word	0x40000c00
 80049b0:	40010400 	.word	0x40010400
 80049b4:	40014000 	.word	0x40014000
 80049b8:	40001800 	.word	0x40001800
 80049bc:	00010007 	.word	0x00010007

080049c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d122      	bne.n	8004a1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d11b      	bne.n	8004a1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f06f 0202 	mvn.w	r2, #2
 80049ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	f003 0303 	and.w	r3, r3, #3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f905 	bl	8004c12 <HAL_TIM_IC_CaptureCallback>
 8004a08:	e005      	b.n	8004a16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f8f7 	bl	8004bfe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 f908 	bl	8004c26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	f003 0304 	and.w	r3, r3, #4
 8004a26:	2b04      	cmp	r3, #4
 8004a28:	d122      	bne.n	8004a70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f003 0304 	and.w	r3, r3, #4
 8004a34:	2b04      	cmp	r3, #4
 8004a36:	d11b      	bne.n	8004a70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f06f 0204 	mvn.w	r2, #4
 8004a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2202      	movs	r2, #2
 8004a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d003      	beq.n	8004a5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f8db 	bl	8004c12 <HAL_TIM_IC_CaptureCallback>
 8004a5c:	e005      	b.n	8004a6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f8cd 	bl	8004bfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 f8de 	bl	8004c26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	f003 0308 	and.w	r3, r3, #8
 8004a7a:	2b08      	cmp	r3, #8
 8004a7c:	d122      	bne.n	8004ac4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	f003 0308 	and.w	r3, r3, #8
 8004a88:	2b08      	cmp	r3, #8
 8004a8a:	d11b      	bne.n	8004ac4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f06f 0208 	mvn.w	r2, #8
 8004a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2204      	movs	r2, #4
 8004a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	69db      	ldr	r3, [r3, #28]
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f8b1 	bl	8004c12 <HAL_TIM_IC_CaptureCallback>
 8004ab0:	e005      	b.n	8004abe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f8a3 	bl	8004bfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 f8b4 	bl	8004c26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	f003 0310 	and.w	r3, r3, #16
 8004ace:	2b10      	cmp	r3, #16
 8004ad0:	d122      	bne.n	8004b18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	f003 0310 	and.w	r3, r3, #16
 8004adc:	2b10      	cmp	r3, #16
 8004ade:	d11b      	bne.n	8004b18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f06f 0210 	mvn.w	r2, #16
 8004ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2208      	movs	r2, #8
 8004aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	69db      	ldr	r3, [r3, #28]
 8004af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d003      	beq.n	8004b06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f887 	bl	8004c12 <HAL_TIM_IC_CaptureCallback>
 8004b04:	e005      	b.n	8004b12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f879 	bl	8004bfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f88a 	bl	8004c26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d10e      	bne.n	8004b44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f003 0301 	and.w	r3, r3, #1
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d107      	bne.n	8004b44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f06f 0201 	mvn.w	r2, #1
 8004b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7fc f9b6 	bl	8000eb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b4e:	2b80      	cmp	r3, #128	; 0x80
 8004b50:	d10e      	bne.n	8004b70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b5c:	2b80      	cmp	r3, #128	; 0x80
 8004b5e:	d107      	bne.n	8004b70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f91a 	bl	8004da4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b7e:	d10e      	bne.n	8004b9e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8a:	2b80      	cmp	r3, #128	; 0x80
 8004b8c:	d107      	bne.n	8004b9e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 f90d 	bl	8004db8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba8:	2b40      	cmp	r3, #64	; 0x40
 8004baa:	d10e      	bne.n	8004bca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb6:	2b40      	cmp	r3, #64	; 0x40
 8004bb8:	d107      	bne.n	8004bca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f838 	bl	8004c3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	f003 0320 	and.w	r3, r3, #32
 8004bd4:	2b20      	cmp	r3, #32
 8004bd6:	d10e      	bne.n	8004bf6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	f003 0320 	and.w	r3, r3, #32
 8004be2:	2b20      	cmp	r3, #32
 8004be4:	d107      	bne.n	8004bf6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f06f 0220 	mvn.w	r2, #32
 8004bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 f8cd 	bl	8004d90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bf6:	bf00      	nop
 8004bf8:	3708      	adds	r7, #8
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b083      	sub	sp, #12
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c06:	bf00      	nop
 8004c08:	370c      	adds	r7, #12
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr

08004c12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c12:	b480      	push	{r7}
 8004c14:	b083      	sub	sp, #12
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b083      	sub	sp, #12
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c2e:	bf00      	nop
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr

08004c3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	b083      	sub	sp, #12
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c42:	bf00      	nop
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
	...

08004c50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a40      	ldr	r2, [pc, #256]	; (8004d64 <TIM_Base_SetConfig+0x114>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d013      	beq.n	8004c90 <TIM_Base_SetConfig+0x40>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c6e:	d00f      	beq.n	8004c90 <TIM_Base_SetConfig+0x40>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a3d      	ldr	r2, [pc, #244]	; (8004d68 <TIM_Base_SetConfig+0x118>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d00b      	beq.n	8004c90 <TIM_Base_SetConfig+0x40>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a3c      	ldr	r2, [pc, #240]	; (8004d6c <TIM_Base_SetConfig+0x11c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d007      	beq.n	8004c90 <TIM_Base_SetConfig+0x40>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a3b      	ldr	r2, [pc, #236]	; (8004d70 <TIM_Base_SetConfig+0x120>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d003      	beq.n	8004c90 <TIM_Base_SetConfig+0x40>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a3a      	ldr	r2, [pc, #232]	; (8004d74 <TIM_Base_SetConfig+0x124>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d108      	bne.n	8004ca2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a2f      	ldr	r2, [pc, #188]	; (8004d64 <TIM_Base_SetConfig+0x114>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d02b      	beq.n	8004d02 <TIM_Base_SetConfig+0xb2>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb0:	d027      	beq.n	8004d02 <TIM_Base_SetConfig+0xb2>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a2c      	ldr	r2, [pc, #176]	; (8004d68 <TIM_Base_SetConfig+0x118>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d023      	beq.n	8004d02 <TIM_Base_SetConfig+0xb2>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a2b      	ldr	r2, [pc, #172]	; (8004d6c <TIM_Base_SetConfig+0x11c>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d01f      	beq.n	8004d02 <TIM_Base_SetConfig+0xb2>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a2a      	ldr	r2, [pc, #168]	; (8004d70 <TIM_Base_SetConfig+0x120>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d01b      	beq.n	8004d02 <TIM_Base_SetConfig+0xb2>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a29      	ldr	r2, [pc, #164]	; (8004d74 <TIM_Base_SetConfig+0x124>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d017      	beq.n	8004d02 <TIM_Base_SetConfig+0xb2>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a28      	ldr	r2, [pc, #160]	; (8004d78 <TIM_Base_SetConfig+0x128>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d013      	beq.n	8004d02 <TIM_Base_SetConfig+0xb2>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a27      	ldr	r2, [pc, #156]	; (8004d7c <TIM_Base_SetConfig+0x12c>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d00f      	beq.n	8004d02 <TIM_Base_SetConfig+0xb2>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a26      	ldr	r2, [pc, #152]	; (8004d80 <TIM_Base_SetConfig+0x130>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d00b      	beq.n	8004d02 <TIM_Base_SetConfig+0xb2>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a25      	ldr	r2, [pc, #148]	; (8004d84 <TIM_Base_SetConfig+0x134>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d007      	beq.n	8004d02 <TIM_Base_SetConfig+0xb2>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a24      	ldr	r2, [pc, #144]	; (8004d88 <TIM_Base_SetConfig+0x138>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d003      	beq.n	8004d02 <TIM_Base_SetConfig+0xb2>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a23      	ldr	r2, [pc, #140]	; (8004d8c <TIM_Base_SetConfig+0x13c>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d108      	bne.n	8004d14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a0a      	ldr	r2, [pc, #40]	; (8004d64 <TIM_Base_SetConfig+0x114>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d003      	beq.n	8004d48 <TIM_Base_SetConfig+0xf8>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a0c      	ldr	r2, [pc, #48]	; (8004d74 <TIM_Base_SetConfig+0x124>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d103      	bne.n	8004d50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	691a      	ldr	r2, [r3, #16]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	615a      	str	r2, [r3, #20]
}
 8004d56:	bf00      	nop
 8004d58:	3714      	adds	r7, #20
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	40010000 	.word	0x40010000
 8004d68:	40000400 	.word	0x40000400
 8004d6c:	40000800 	.word	0x40000800
 8004d70:	40000c00 	.word	0x40000c00
 8004d74:	40010400 	.word	0x40010400
 8004d78:	40014000 	.word	0x40014000
 8004d7c:	40014400 	.word	0x40014400
 8004d80:	40014800 	.word	0x40014800
 8004d84:	40001800 	.word	0x40001800
 8004d88:	40001c00 	.word	0x40001c00
 8004d8c:	40002000 	.word	0x40002000

08004d90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e040      	b.n	8004e60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d106      	bne.n	8004df4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f7fc f8e6 	bl	8000fc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2224      	movs	r2, #36	; 0x24
 8004df8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f022 0201 	bic.w	r2, r2, #1
 8004e08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f8c0 	bl	8004f90 <UART_SetConfig>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d101      	bne.n	8004e1a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e022      	b.n	8004e60 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d002      	beq.n	8004e28 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 fb18 	bl	8005458 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689a      	ldr	r2, [r3, #8]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f042 0201 	orr.w	r2, r2, #1
 8004e56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 fb9f 	bl	800559c <UART_CheckIdleState>
 8004e5e:	4603      	mov	r3, r0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3708      	adds	r7, #8
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b08a      	sub	sp, #40	; 0x28
 8004e6c:	af02      	add	r7, sp, #8
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	603b      	str	r3, [r7, #0]
 8004e74:	4613      	mov	r3, r2
 8004e76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e7c:	2b20      	cmp	r3, #32
 8004e7e:	f040 8081 	bne.w	8004f84 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d002      	beq.n	8004e8e <HAL_UART_Transmit+0x26>
 8004e88:	88fb      	ldrh	r3, [r7, #6]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e079      	b.n	8004f86 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d101      	bne.n	8004ea0 <HAL_UART_Transmit+0x38>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	e072      	b.n	8004f86 <HAL_UART_Transmit+0x11e>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2221      	movs	r2, #33	; 0x21
 8004eb4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004eb6:	f7fc faa9 	bl	800140c <HAL_GetTick>
 8004eba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	88fa      	ldrh	r2, [r7, #6]
 8004ec0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	88fa      	ldrh	r2, [r7, #6]
 8004ec8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ed4:	d108      	bne.n	8004ee8 <HAL_UART_Transmit+0x80>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d104      	bne.n	8004ee8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	61bb      	str	r3, [r7, #24]
 8004ee6:	e003      	b.n	8004ef0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004eec:	2300      	movs	r3, #0
 8004eee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004ef8:	e02c      	b.n	8004f54 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	2200      	movs	r2, #0
 8004f02:	2180      	movs	r1, #128	; 0x80
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f000 fb92 	bl	800562e <UART_WaitOnFlagUntilTimeout>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e038      	b.n	8004f86 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10b      	bne.n	8004f32 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	881b      	ldrh	r3, [r3, #0]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f28:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	3302      	adds	r3, #2
 8004f2e:	61bb      	str	r3, [r7, #24]
 8004f30:	e007      	b.n	8004f42 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	781a      	ldrb	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	3301      	adds	r3, #1
 8004f40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1cc      	bne.n	8004efa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	9300      	str	r3, [sp, #0]
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	2200      	movs	r2, #0
 8004f68:	2140      	movs	r1, #64	; 0x40
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	f000 fb5f 	bl	800562e <UART_WaitOnFlagUntilTimeout>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d001      	beq.n	8004f7a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e005      	b.n	8004f86 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004f80:	2300      	movs	r3, #0
 8004f82:	e000      	b.n	8004f86 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004f84:	2302      	movs	r3, #2
  }
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3720      	adds	r7, #32
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
	...

08004f90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b088      	sub	sp, #32
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689a      	ldr	r2, [r3, #8]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	431a      	orrs	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	69db      	ldr	r3, [r3, #28]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	4ba6      	ldr	r3, [pc, #664]	; (8005254 <UART_SetConfig+0x2c4>)
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	6812      	ldr	r2, [r2, #0]
 8004fc2:	6979      	ldr	r1, [r7, #20]
 8004fc4:	430b      	orrs	r3, r1
 8004fc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68da      	ldr	r2, [r3, #12]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a1b      	ldr	r3, [r3, #32]
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	430a      	orrs	r2, r1
 8005000:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a94      	ldr	r2, [pc, #592]	; (8005258 <UART_SetConfig+0x2c8>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d120      	bne.n	800504e <UART_SetConfig+0xbe>
 800500c:	4b93      	ldr	r3, [pc, #588]	; (800525c <UART_SetConfig+0x2cc>)
 800500e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005012:	f003 0303 	and.w	r3, r3, #3
 8005016:	2b03      	cmp	r3, #3
 8005018:	d816      	bhi.n	8005048 <UART_SetConfig+0xb8>
 800501a:	a201      	add	r2, pc, #4	; (adr r2, 8005020 <UART_SetConfig+0x90>)
 800501c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005020:	08005031 	.word	0x08005031
 8005024:	0800503d 	.word	0x0800503d
 8005028:	08005037 	.word	0x08005037
 800502c:	08005043 	.word	0x08005043
 8005030:	2301      	movs	r3, #1
 8005032:	77fb      	strb	r3, [r7, #31]
 8005034:	e150      	b.n	80052d8 <UART_SetConfig+0x348>
 8005036:	2302      	movs	r3, #2
 8005038:	77fb      	strb	r3, [r7, #31]
 800503a:	e14d      	b.n	80052d8 <UART_SetConfig+0x348>
 800503c:	2304      	movs	r3, #4
 800503e:	77fb      	strb	r3, [r7, #31]
 8005040:	e14a      	b.n	80052d8 <UART_SetConfig+0x348>
 8005042:	2308      	movs	r3, #8
 8005044:	77fb      	strb	r3, [r7, #31]
 8005046:	e147      	b.n	80052d8 <UART_SetConfig+0x348>
 8005048:	2310      	movs	r3, #16
 800504a:	77fb      	strb	r3, [r7, #31]
 800504c:	e144      	b.n	80052d8 <UART_SetConfig+0x348>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a83      	ldr	r2, [pc, #524]	; (8005260 <UART_SetConfig+0x2d0>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d132      	bne.n	80050be <UART_SetConfig+0x12e>
 8005058:	4b80      	ldr	r3, [pc, #512]	; (800525c <UART_SetConfig+0x2cc>)
 800505a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800505e:	f003 030c 	and.w	r3, r3, #12
 8005062:	2b0c      	cmp	r3, #12
 8005064:	d828      	bhi.n	80050b8 <UART_SetConfig+0x128>
 8005066:	a201      	add	r2, pc, #4	; (adr r2, 800506c <UART_SetConfig+0xdc>)
 8005068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506c:	080050a1 	.word	0x080050a1
 8005070:	080050b9 	.word	0x080050b9
 8005074:	080050b9 	.word	0x080050b9
 8005078:	080050b9 	.word	0x080050b9
 800507c:	080050ad 	.word	0x080050ad
 8005080:	080050b9 	.word	0x080050b9
 8005084:	080050b9 	.word	0x080050b9
 8005088:	080050b9 	.word	0x080050b9
 800508c:	080050a7 	.word	0x080050a7
 8005090:	080050b9 	.word	0x080050b9
 8005094:	080050b9 	.word	0x080050b9
 8005098:	080050b9 	.word	0x080050b9
 800509c:	080050b3 	.word	0x080050b3
 80050a0:	2300      	movs	r3, #0
 80050a2:	77fb      	strb	r3, [r7, #31]
 80050a4:	e118      	b.n	80052d8 <UART_SetConfig+0x348>
 80050a6:	2302      	movs	r3, #2
 80050a8:	77fb      	strb	r3, [r7, #31]
 80050aa:	e115      	b.n	80052d8 <UART_SetConfig+0x348>
 80050ac:	2304      	movs	r3, #4
 80050ae:	77fb      	strb	r3, [r7, #31]
 80050b0:	e112      	b.n	80052d8 <UART_SetConfig+0x348>
 80050b2:	2308      	movs	r3, #8
 80050b4:	77fb      	strb	r3, [r7, #31]
 80050b6:	e10f      	b.n	80052d8 <UART_SetConfig+0x348>
 80050b8:	2310      	movs	r3, #16
 80050ba:	77fb      	strb	r3, [r7, #31]
 80050bc:	e10c      	b.n	80052d8 <UART_SetConfig+0x348>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a68      	ldr	r2, [pc, #416]	; (8005264 <UART_SetConfig+0x2d4>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d120      	bne.n	800510a <UART_SetConfig+0x17a>
 80050c8:	4b64      	ldr	r3, [pc, #400]	; (800525c <UART_SetConfig+0x2cc>)
 80050ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80050d2:	2b30      	cmp	r3, #48	; 0x30
 80050d4:	d013      	beq.n	80050fe <UART_SetConfig+0x16e>
 80050d6:	2b30      	cmp	r3, #48	; 0x30
 80050d8:	d814      	bhi.n	8005104 <UART_SetConfig+0x174>
 80050da:	2b20      	cmp	r3, #32
 80050dc:	d009      	beq.n	80050f2 <UART_SetConfig+0x162>
 80050de:	2b20      	cmp	r3, #32
 80050e0:	d810      	bhi.n	8005104 <UART_SetConfig+0x174>
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d002      	beq.n	80050ec <UART_SetConfig+0x15c>
 80050e6:	2b10      	cmp	r3, #16
 80050e8:	d006      	beq.n	80050f8 <UART_SetConfig+0x168>
 80050ea:	e00b      	b.n	8005104 <UART_SetConfig+0x174>
 80050ec:	2300      	movs	r3, #0
 80050ee:	77fb      	strb	r3, [r7, #31]
 80050f0:	e0f2      	b.n	80052d8 <UART_SetConfig+0x348>
 80050f2:	2302      	movs	r3, #2
 80050f4:	77fb      	strb	r3, [r7, #31]
 80050f6:	e0ef      	b.n	80052d8 <UART_SetConfig+0x348>
 80050f8:	2304      	movs	r3, #4
 80050fa:	77fb      	strb	r3, [r7, #31]
 80050fc:	e0ec      	b.n	80052d8 <UART_SetConfig+0x348>
 80050fe:	2308      	movs	r3, #8
 8005100:	77fb      	strb	r3, [r7, #31]
 8005102:	e0e9      	b.n	80052d8 <UART_SetConfig+0x348>
 8005104:	2310      	movs	r3, #16
 8005106:	77fb      	strb	r3, [r7, #31]
 8005108:	e0e6      	b.n	80052d8 <UART_SetConfig+0x348>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a56      	ldr	r2, [pc, #344]	; (8005268 <UART_SetConfig+0x2d8>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d120      	bne.n	8005156 <UART_SetConfig+0x1c6>
 8005114:	4b51      	ldr	r3, [pc, #324]	; (800525c <UART_SetConfig+0x2cc>)
 8005116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800511a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800511e:	2bc0      	cmp	r3, #192	; 0xc0
 8005120:	d013      	beq.n	800514a <UART_SetConfig+0x1ba>
 8005122:	2bc0      	cmp	r3, #192	; 0xc0
 8005124:	d814      	bhi.n	8005150 <UART_SetConfig+0x1c0>
 8005126:	2b80      	cmp	r3, #128	; 0x80
 8005128:	d009      	beq.n	800513e <UART_SetConfig+0x1ae>
 800512a:	2b80      	cmp	r3, #128	; 0x80
 800512c:	d810      	bhi.n	8005150 <UART_SetConfig+0x1c0>
 800512e:	2b00      	cmp	r3, #0
 8005130:	d002      	beq.n	8005138 <UART_SetConfig+0x1a8>
 8005132:	2b40      	cmp	r3, #64	; 0x40
 8005134:	d006      	beq.n	8005144 <UART_SetConfig+0x1b4>
 8005136:	e00b      	b.n	8005150 <UART_SetConfig+0x1c0>
 8005138:	2300      	movs	r3, #0
 800513a:	77fb      	strb	r3, [r7, #31]
 800513c:	e0cc      	b.n	80052d8 <UART_SetConfig+0x348>
 800513e:	2302      	movs	r3, #2
 8005140:	77fb      	strb	r3, [r7, #31]
 8005142:	e0c9      	b.n	80052d8 <UART_SetConfig+0x348>
 8005144:	2304      	movs	r3, #4
 8005146:	77fb      	strb	r3, [r7, #31]
 8005148:	e0c6      	b.n	80052d8 <UART_SetConfig+0x348>
 800514a:	2308      	movs	r3, #8
 800514c:	77fb      	strb	r3, [r7, #31]
 800514e:	e0c3      	b.n	80052d8 <UART_SetConfig+0x348>
 8005150:	2310      	movs	r3, #16
 8005152:	77fb      	strb	r3, [r7, #31]
 8005154:	e0c0      	b.n	80052d8 <UART_SetConfig+0x348>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a44      	ldr	r2, [pc, #272]	; (800526c <UART_SetConfig+0x2dc>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d125      	bne.n	80051ac <UART_SetConfig+0x21c>
 8005160:	4b3e      	ldr	r3, [pc, #248]	; (800525c <UART_SetConfig+0x2cc>)
 8005162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800516a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800516e:	d017      	beq.n	80051a0 <UART_SetConfig+0x210>
 8005170:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005174:	d817      	bhi.n	80051a6 <UART_SetConfig+0x216>
 8005176:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800517a:	d00b      	beq.n	8005194 <UART_SetConfig+0x204>
 800517c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005180:	d811      	bhi.n	80051a6 <UART_SetConfig+0x216>
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <UART_SetConfig+0x1fe>
 8005186:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800518a:	d006      	beq.n	800519a <UART_SetConfig+0x20a>
 800518c:	e00b      	b.n	80051a6 <UART_SetConfig+0x216>
 800518e:	2300      	movs	r3, #0
 8005190:	77fb      	strb	r3, [r7, #31]
 8005192:	e0a1      	b.n	80052d8 <UART_SetConfig+0x348>
 8005194:	2302      	movs	r3, #2
 8005196:	77fb      	strb	r3, [r7, #31]
 8005198:	e09e      	b.n	80052d8 <UART_SetConfig+0x348>
 800519a:	2304      	movs	r3, #4
 800519c:	77fb      	strb	r3, [r7, #31]
 800519e:	e09b      	b.n	80052d8 <UART_SetConfig+0x348>
 80051a0:	2308      	movs	r3, #8
 80051a2:	77fb      	strb	r3, [r7, #31]
 80051a4:	e098      	b.n	80052d8 <UART_SetConfig+0x348>
 80051a6:	2310      	movs	r3, #16
 80051a8:	77fb      	strb	r3, [r7, #31]
 80051aa:	e095      	b.n	80052d8 <UART_SetConfig+0x348>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a2f      	ldr	r2, [pc, #188]	; (8005270 <UART_SetConfig+0x2e0>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d125      	bne.n	8005202 <UART_SetConfig+0x272>
 80051b6:	4b29      	ldr	r3, [pc, #164]	; (800525c <UART_SetConfig+0x2cc>)
 80051b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80051c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051c4:	d017      	beq.n	80051f6 <UART_SetConfig+0x266>
 80051c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051ca:	d817      	bhi.n	80051fc <UART_SetConfig+0x26c>
 80051cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051d0:	d00b      	beq.n	80051ea <UART_SetConfig+0x25a>
 80051d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051d6:	d811      	bhi.n	80051fc <UART_SetConfig+0x26c>
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d003      	beq.n	80051e4 <UART_SetConfig+0x254>
 80051dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051e0:	d006      	beq.n	80051f0 <UART_SetConfig+0x260>
 80051e2:	e00b      	b.n	80051fc <UART_SetConfig+0x26c>
 80051e4:	2301      	movs	r3, #1
 80051e6:	77fb      	strb	r3, [r7, #31]
 80051e8:	e076      	b.n	80052d8 <UART_SetConfig+0x348>
 80051ea:	2302      	movs	r3, #2
 80051ec:	77fb      	strb	r3, [r7, #31]
 80051ee:	e073      	b.n	80052d8 <UART_SetConfig+0x348>
 80051f0:	2304      	movs	r3, #4
 80051f2:	77fb      	strb	r3, [r7, #31]
 80051f4:	e070      	b.n	80052d8 <UART_SetConfig+0x348>
 80051f6:	2308      	movs	r3, #8
 80051f8:	77fb      	strb	r3, [r7, #31]
 80051fa:	e06d      	b.n	80052d8 <UART_SetConfig+0x348>
 80051fc:	2310      	movs	r3, #16
 80051fe:	77fb      	strb	r3, [r7, #31]
 8005200:	e06a      	b.n	80052d8 <UART_SetConfig+0x348>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a1b      	ldr	r2, [pc, #108]	; (8005274 <UART_SetConfig+0x2e4>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d138      	bne.n	800527e <UART_SetConfig+0x2ee>
 800520c:	4b13      	ldr	r3, [pc, #76]	; (800525c <UART_SetConfig+0x2cc>)
 800520e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005212:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005216:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800521a:	d017      	beq.n	800524c <UART_SetConfig+0x2bc>
 800521c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005220:	d82a      	bhi.n	8005278 <UART_SetConfig+0x2e8>
 8005222:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005226:	d00b      	beq.n	8005240 <UART_SetConfig+0x2b0>
 8005228:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800522c:	d824      	bhi.n	8005278 <UART_SetConfig+0x2e8>
 800522e:	2b00      	cmp	r3, #0
 8005230:	d003      	beq.n	800523a <UART_SetConfig+0x2aa>
 8005232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005236:	d006      	beq.n	8005246 <UART_SetConfig+0x2b6>
 8005238:	e01e      	b.n	8005278 <UART_SetConfig+0x2e8>
 800523a:	2300      	movs	r3, #0
 800523c:	77fb      	strb	r3, [r7, #31]
 800523e:	e04b      	b.n	80052d8 <UART_SetConfig+0x348>
 8005240:	2302      	movs	r3, #2
 8005242:	77fb      	strb	r3, [r7, #31]
 8005244:	e048      	b.n	80052d8 <UART_SetConfig+0x348>
 8005246:	2304      	movs	r3, #4
 8005248:	77fb      	strb	r3, [r7, #31]
 800524a:	e045      	b.n	80052d8 <UART_SetConfig+0x348>
 800524c:	2308      	movs	r3, #8
 800524e:	77fb      	strb	r3, [r7, #31]
 8005250:	e042      	b.n	80052d8 <UART_SetConfig+0x348>
 8005252:	bf00      	nop
 8005254:	efff69f3 	.word	0xefff69f3
 8005258:	40011000 	.word	0x40011000
 800525c:	40023800 	.word	0x40023800
 8005260:	40004400 	.word	0x40004400
 8005264:	40004800 	.word	0x40004800
 8005268:	40004c00 	.word	0x40004c00
 800526c:	40005000 	.word	0x40005000
 8005270:	40011400 	.word	0x40011400
 8005274:	40007800 	.word	0x40007800
 8005278:	2310      	movs	r3, #16
 800527a:	77fb      	strb	r3, [r7, #31]
 800527c:	e02c      	b.n	80052d8 <UART_SetConfig+0x348>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a72      	ldr	r2, [pc, #456]	; (800544c <UART_SetConfig+0x4bc>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d125      	bne.n	80052d4 <UART_SetConfig+0x344>
 8005288:	4b71      	ldr	r3, [pc, #452]	; (8005450 <UART_SetConfig+0x4c0>)
 800528a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800528e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005292:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005296:	d017      	beq.n	80052c8 <UART_SetConfig+0x338>
 8005298:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800529c:	d817      	bhi.n	80052ce <UART_SetConfig+0x33e>
 800529e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052a2:	d00b      	beq.n	80052bc <UART_SetConfig+0x32c>
 80052a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052a8:	d811      	bhi.n	80052ce <UART_SetConfig+0x33e>
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <UART_SetConfig+0x326>
 80052ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052b2:	d006      	beq.n	80052c2 <UART_SetConfig+0x332>
 80052b4:	e00b      	b.n	80052ce <UART_SetConfig+0x33e>
 80052b6:	2300      	movs	r3, #0
 80052b8:	77fb      	strb	r3, [r7, #31]
 80052ba:	e00d      	b.n	80052d8 <UART_SetConfig+0x348>
 80052bc:	2302      	movs	r3, #2
 80052be:	77fb      	strb	r3, [r7, #31]
 80052c0:	e00a      	b.n	80052d8 <UART_SetConfig+0x348>
 80052c2:	2304      	movs	r3, #4
 80052c4:	77fb      	strb	r3, [r7, #31]
 80052c6:	e007      	b.n	80052d8 <UART_SetConfig+0x348>
 80052c8:	2308      	movs	r3, #8
 80052ca:	77fb      	strb	r3, [r7, #31]
 80052cc:	e004      	b.n	80052d8 <UART_SetConfig+0x348>
 80052ce:	2310      	movs	r3, #16
 80052d0:	77fb      	strb	r3, [r7, #31]
 80052d2:	e001      	b.n	80052d8 <UART_SetConfig+0x348>
 80052d4:	2310      	movs	r3, #16
 80052d6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	69db      	ldr	r3, [r3, #28]
 80052dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052e0:	d15b      	bne.n	800539a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80052e2:	7ffb      	ldrb	r3, [r7, #31]
 80052e4:	2b08      	cmp	r3, #8
 80052e6:	d828      	bhi.n	800533a <UART_SetConfig+0x3aa>
 80052e8:	a201      	add	r2, pc, #4	; (adr r2, 80052f0 <UART_SetConfig+0x360>)
 80052ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ee:	bf00      	nop
 80052f0:	08005315 	.word	0x08005315
 80052f4:	0800531d 	.word	0x0800531d
 80052f8:	08005325 	.word	0x08005325
 80052fc:	0800533b 	.word	0x0800533b
 8005300:	0800532b 	.word	0x0800532b
 8005304:	0800533b 	.word	0x0800533b
 8005308:	0800533b 	.word	0x0800533b
 800530c:	0800533b 	.word	0x0800533b
 8005310:	08005333 	.word	0x08005333
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005314:	f7fe fe02 	bl	8003f1c <HAL_RCC_GetPCLK1Freq>
 8005318:	61b8      	str	r0, [r7, #24]
        break;
 800531a:	e013      	b.n	8005344 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800531c:	f7fe fe12 	bl	8003f44 <HAL_RCC_GetPCLK2Freq>
 8005320:	61b8      	str	r0, [r7, #24]
        break;
 8005322:	e00f      	b.n	8005344 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005324:	4b4b      	ldr	r3, [pc, #300]	; (8005454 <UART_SetConfig+0x4c4>)
 8005326:	61bb      	str	r3, [r7, #24]
        break;
 8005328:	e00c      	b.n	8005344 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800532a:	f7fe fce5 	bl	8003cf8 <HAL_RCC_GetSysClockFreq>
 800532e:	61b8      	str	r0, [r7, #24]
        break;
 8005330:	e008      	b.n	8005344 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005336:	61bb      	str	r3, [r7, #24]
        break;
 8005338:	e004      	b.n	8005344 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800533a:	2300      	movs	r3, #0
 800533c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	77bb      	strb	r3, [r7, #30]
        break;
 8005342:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d074      	beq.n	8005434 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	005a      	lsls	r2, r3, #1
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	085b      	lsrs	r3, r3, #1
 8005354:	441a      	add	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	fbb2 f3f3 	udiv	r3, r2, r3
 800535e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	2b0f      	cmp	r3, #15
 8005364:	d916      	bls.n	8005394 <UART_SetConfig+0x404>
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800536c:	d212      	bcs.n	8005394 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	b29b      	uxth	r3, r3
 8005372:	f023 030f 	bic.w	r3, r3, #15
 8005376:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	085b      	lsrs	r3, r3, #1
 800537c:	b29b      	uxth	r3, r3
 800537e:	f003 0307 	and.w	r3, r3, #7
 8005382:	b29a      	uxth	r2, r3
 8005384:	89fb      	ldrh	r3, [r7, #14]
 8005386:	4313      	orrs	r3, r2
 8005388:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	89fa      	ldrh	r2, [r7, #14]
 8005390:	60da      	str	r2, [r3, #12]
 8005392:	e04f      	b.n	8005434 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	77bb      	strb	r3, [r7, #30]
 8005398:	e04c      	b.n	8005434 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800539a:	7ffb      	ldrb	r3, [r7, #31]
 800539c:	2b08      	cmp	r3, #8
 800539e:	d828      	bhi.n	80053f2 <UART_SetConfig+0x462>
 80053a0:	a201      	add	r2, pc, #4	; (adr r2, 80053a8 <UART_SetConfig+0x418>)
 80053a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a6:	bf00      	nop
 80053a8:	080053cd 	.word	0x080053cd
 80053ac:	080053d5 	.word	0x080053d5
 80053b0:	080053dd 	.word	0x080053dd
 80053b4:	080053f3 	.word	0x080053f3
 80053b8:	080053e3 	.word	0x080053e3
 80053bc:	080053f3 	.word	0x080053f3
 80053c0:	080053f3 	.word	0x080053f3
 80053c4:	080053f3 	.word	0x080053f3
 80053c8:	080053eb 	.word	0x080053eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053cc:	f7fe fda6 	bl	8003f1c <HAL_RCC_GetPCLK1Freq>
 80053d0:	61b8      	str	r0, [r7, #24]
        break;
 80053d2:	e013      	b.n	80053fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053d4:	f7fe fdb6 	bl	8003f44 <HAL_RCC_GetPCLK2Freq>
 80053d8:	61b8      	str	r0, [r7, #24]
        break;
 80053da:	e00f      	b.n	80053fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053dc:	4b1d      	ldr	r3, [pc, #116]	; (8005454 <UART_SetConfig+0x4c4>)
 80053de:	61bb      	str	r3, [r7, #24]
        break;
 80053e0:	e00c      	b.n	80053fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053e2:	f7fe fc89 	bl	8003cf8 <HAL_RCC_GetSysClockFreq>
 80053e6:	61b8      	str	r0, [r7, #24]
        break;
 80053e8:	e008      	b.n	80053fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053ee:	61bb      	str	r3, [r7, #24]
        break;
 80053f0:	e004      	b.n	80053fc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80053f2:	2300      	movs	r3, #0
 80053f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	77bb      	strb	r3, [r7, #30]
        break;
 80053fa:	bf00      	nop
    }

    if (pclk != 0U)
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d018      	beq.n	8005434 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	085a      	lsrs	r2, r3, #1
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	441a      	add	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	fbb2 f3f3 	udiv	r3, r2, r3
 8005414:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	2b0f      	cmp	r3, #15
 800541a:	d909      	bls.n	8005430 <UART_SetConfig+0x4a0>
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005422:	d205      	bcs.n	8005430 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	b29a      	uxth	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	60da      	str	r2, [r3, #12]
 800542e:	e001      	b.n	8005434 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005440:	7fbb      	ldrb	r3, [r7, #30]
}
 8005442:	4618      	mov	r0, r3
 8005444:	3720      	adds	r7, #32
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	40007c00 	.word	0x40007c00
 8005450:	40023800 	.word	0x40023800
 8005454:	00f42400 	.word	0x00f42400

08005458 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00a      	beq.n	8005482 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	430a      	orrs	r2, r1
 8005480:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00a      	beq.n	80054a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	430a      	orrs	r2, r1
 80054a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a8:	f003 0304 	and.w	r3, r3, #4
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00a      	beq.n	80054c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ca:	f003 0308 	and.w	r3, r3, #8
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00a      	beq.n	80054e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	430a      	orrs	r2, r1
 80054e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ec:	f003 0310 	and.w	r3, r3, #16
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d00a      	beq.n	800550a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	430a      	orrs	r2, r1
 8005508:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550e:	f003 0320 	and.w	r3, r3, #32
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00a      	beq.n	800552c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	430a      	orrs	r2, r1
 800552a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005534:	2b00      	cmp	r3, #0
 8005536:	d01a      	beq.n	800556e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	430a      	orrs	r2, r1
 800554c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005552:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005556:	d10a      	bne.n	800556e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	430a      	orrs	r2, r1
 800556c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00a      	beq.n	8005590 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	430a      	orrs	r2, r1
 800558e:	605a      	str	r2, [r3, #4]
  }
}
 8005590:	bf00      	nop
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af02      	add	r7, sp, #8
 80055a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055ac:	f7fb ff2e 	bl	800140c <HAL_GetTick>
 80055b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0308 	and.w	r3, r3, #8
 80055bc:	2b08      	cmp	r3, #8
 80055be:	d10e      	bne.n	80055de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055c4:	9300      	str	r3, [sp, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f82d 	bl	800562e <UART_WaitOnFlagUntilTimeout>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e023      	b.n	8005626 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0304 	and.w	r3, r3, #4
 80055e8:	2b04      	cmp	r3, #4
 80055ea:	d10e      	bne.n	800560a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 f817 	bl	800562e <UART_WaitOnFlagUntilTimeout>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d001      	beq.n	800560a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e00d      	b.n	8005626 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2220      	movs	r2, #32
 800560e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2220      	movs	r2, #32
 8005614:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b09c      	sub	sp, #112	; 0x70
 8005632:	af00      	add	r7, sp, #0
 8005634:	60f8      	str	r0, [r7, #12]
 8005636:	60b9      	str	r1, [r7, #8]
 8005638:	603b      	str	r3, [r7, #0]
 800563a:	4613      	mov	r3, r2
 800563c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800563e:	e0a5      	b.n	800578c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005640:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005646:	f000 80a1 	beq.w	800578c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800564a:	f7fb fedf 	bl	800140c <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005656:	429a      	cmp	r2, r3
 8005658:	d302      	bcc.n	8005660 <UART_WaitOnFlagUntilTimeout+0x32>
 800565a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800565c:	2b00      	cmp	r3, #0
 800565e:	d13e      	bne.n	80056de <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005668:	e853 3f00 	ldrex	r3, [r3]
 800566c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800566e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005670:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005674:	667b      	str	r3, [r7, #100]	; 0x64
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	461a      	mov	r2, r3
 800567c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800567e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005680:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005682:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005684:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005686:	e841 2300 	strex	r3, r2, [r1]
 800568a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800568c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1e6      	bne.n	8005660 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	3308      	adds	r3, #8
 8005698:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800569c:	e853 3f00 	ldrex	r3, [r3]
 80056a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a4:	f023 0301 	bic.w	r3, r3, #1
 80056a8:	663b      	str	r3, [r7, #96]	; 0x60
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	3308      	adds	r3, #8
 80056b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80056b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80056b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80056b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056ba:	e841 2300 	strex	r3, r2, [r1]
 80056be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80056c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1e5      	bne.n	8005692 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2220      	movs	r2, #32
 80056ca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2220      	movs	r2, #32
 80056d0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e067      	b.n	80057ae <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0304 	and.w	r3, r3, #4
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d04f      	beq.n	800578c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056fa:	d147      	bne.n	800578c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005704:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570e:	e853 3f00 	ldrex	r3, [r3]
 8005712:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005716:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800571a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	461a      	mov	r2, r3
 8005722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005724:	637b      	str	r3, [r7, #52]	; 0x34
 8005726:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005728:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800572a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800572c:	e841 2300 	strex	r3, r2, [r1]
 8005730:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1e6      	bne.n	8005706 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	3308      	adds	r3, #8
 800573e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	e853 3f00 	ldrex	r3, [r3]
 8005746:	613b      	str	r3, [r7, #16]
   return(result);
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	f023 0301 	bic.w	r3, r3, #1
 800574e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	3308      	adds	r3, #8
 8005756:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005758:	623a      	str	r2, [r7, #32]
 800575a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575c:	69f9      	ldr	r1, [r7, #28]
 800575e:	6a3a      	ldr	r2, [r7, #32]
 8005760:	e841 2300 	strex	r3, r2, [r1]
 8005764:	61bb      	str	r3, [r7, #24]
   return(result);
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1e5      	bne.n	8005738 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2220      	movs	r2, #32
 8005770:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2220      	movs	r2, #32
 8005776:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2220      	movs	r2, #32
 800577c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e010      	b.n	80057ae <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	69da      	ldr	r2, [r3, #28]
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	4013      	ands	r3, r2
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	429a      	cmp	r2, r3
 800579a:	bf0c      	ite	eq
 800579c:	2301      	moveq	r3, #1
 800579e:	2300      	movne	r3, #0
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	461a      	mov	r2, r3
 80057a4:	79fb      	ldrb	r3, [r7, #7]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	f43f af4a 	beq.w	8005640 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3770      	adds	r7, #112	; 0x70
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
	...

080057b8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80057b8:	b5b0      	push	{r4, r5, r7, lr}
 80057ba:	b08e      	sub	sp, #56	; 0x38
 80057bc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80057be:	4ba0      	ldr	r3, [pc, #640]	; (8005a40 <MX_LWIP_Init+0x288>)
 80057c0:	22c0      	movs	r2, #192	; 0xc0
 80057c2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80057c4:	4b9e      	ldr	r3, [pc, #632]	; (8005a40 <MX_LWIP_Init+0x288>)
 80057c6:	22a8      	movs	r2, #168	; 0xa8
 80057c8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 178;
 80057ca:	4b9d      	ldr	r3, [pc, #628]	; (8005a40 <MX_LWIP_Init+0x288>)
 80057cc:	22b2      	movs	r2, #178	; 0xb2
 80057ce:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 31;
 80057d0:	4b9b      	ldr	r3, [pc, #620]	; (8005a40 <MX_LWIP_Init+0x288>)
 80057d2:	221f      	movs	r2, #31
 80057d4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80057d6:	4b9b      	ldr	r3, [pc, #620]	; (8005a44 <MX_LWIP_Init+0x28c>)
 80057d8:	22ff      	movs	r2, #255	; 0xff
 80057da:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80057dc:	4b99      	ldr	r3, [pc, #612]	; (8005a44 <MX_LWIP_Init+0x28c>)
 80057de:	22ff      	movs	r2, #255	; 0xff
 80057e0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80057e2:	4b98      	ldr	r3, [pc, #608]	; (8005a44 <MX_LWIP_Init+0x28c>)
 80057e4:	22ff      	movs	r2, #255	; 0xff
 80057e6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80057e8:	4b96      	ldr	r3, [pc, #600]	; (8005a44 <MX_LWIP_Init+0x28c>)
 80057ea:	2200      	movs	r2, #0
 80057ec:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80057ee:	4b96      	ldr	r3, [pc, #600]	; (8005a48 <MX_LWIP_Init+0x290>)
 80057f0:	22c0      	movs	r2, #192	; 0xc0
 80057f2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80057f4:	4b94      	ldr	r3, [pc, #592]	; (8005a48 <MX_LWIP_Init+0x290>)
 80057f6:	22a8      	movs	r2, #168	; 0xa8
 80057f8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 178;
 80057fa:	4b93      	ldr	r3, [pc, #588]	; (8005a48 <MX_LWIP_Init+0x290>)
 80057fc:	22b2      	movs	r2, #178	; 0xb2
 80057fe:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8005800:	4b91      	ldr	r3, [pc, #580]	; (8005a48 <MX_LWIP_Init+0x290>)
 8005802:	2201      	movs	r2, #1
 8005804:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8005806:	2100      	movs	r1, #0
 8005808:	2000      	movs	r0, #0
 800580a:	f007 fbe5 	bl	800cfd8 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800580e:	4b8c      	ldr	r3, [pc, #560]	; (8005a40 <MX_LWIP_Init+0x288>)
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	061a      	lsls	r2, r3, #24
 8005814:	4b8a      	ldr	r3, [pc, #552]	; (8005a40 <MX_LWIP_Init+0x288>)
 8005816:	785b      	ldrb	r3, [r3, #1]
 8005818:	041b      	lsls	r3, r3, #16
 800581a:	431a      	orrs	r2, r3
 800581c:	4b88      	ldr	r3, [pc, #544]	; (8005a40 <MX_LWIP_Init+0x288>)
 800581e:	789b      	ldrb	r3, [r3, #2]
 8005820:	021b      	lsls	r3, r3, #8
 8005822:	4313      	orrs	r3, r2
 8005824:	4a86      	ldr	r2, [pc, #536]	; (8005a40 <MX_LWIP_Init+0x288>)
 8005826:	78d2      	ldrb	r2, [r2, #3]
 8005828:	4313      	orrs	r3, r2
 800582a:	061a      	lsls	r2, r3, #24
 800582c:	4b84      	ldr	r3, [pc, #528]	; (8005a40 <MX_LWIP_Init+0x288>)
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	0619      	lsls	r1, r3, #24
 8005832:	4b83      	ldr	r3, [pc, #524]	; (8005a40 <MX_LWIP_Init+0x288>)
 8005834:	785b      	ldrb	r3, [r3, #1]
 8005836:	041b      	lsls	r3, r3, #16
 8005838:	4319      	orrs	r1, r3
 800583a:	4b81      	ldr	r3, [pc, #516]	; (8005a40 <MX_LWIP_Init+0x288>)
 800583c:	789b      	ldrb	r3, [r3, #2]
 800583e:	021b      	lsls	r3, r3, #8
 8005840:	430b      	orrs	r3, r1
 8005842:	497f      	ldr	r1, [pc, #508]	; (8005a40 <MX_LWIP_Init+0x288>)
 8005844:	78c9      	ldrb	r1, [r1, #3]
 8005846:	430b      	orrs	r3, r1
 8005848:	021b      	lsls	r3, r3, #8
 800584a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800584e:	431a      	orrs	r2, r3
 8005850:	4b7b      	ldr	r3, [pc, #492]	; (8005a40 <MX_LWIP_Init+0x288>)
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	0619      	lsls	r1, r3, #24
 8005856:	4b7a      	ldr	r3, [pc, #488]	; (8005a40 <MX_LWIP_Init+0x288>)
 8005858:	785b      	ldrb	r3, [r3, #1]
 800585a:	041b      	lsls	r3, r3, #16
 800585c:	4319      	orrs	r1, r3
 800585e:	4b78      	ldr	r3, [pc, #480]	; (8005a40 <MX_LWIP_Init+0x288>)
 8005860:	789b      	ldrb	r3, [r3, #2]
 8005862:	021b      	lsls	r3, r3, #8
 8005864:	430b      	orrs	r3, r1
 8005866:	4976      	ldr	r1, [pc, #472]	; (8005a40 <MX_LWIP_Init+0x288>)
 8005868:	78c9      	ldrb	r1, [r1, #3]
 800586a:	430b      	orrs	r3, r1
 800586c:	0a1b      	lsrs	r3, r3, #8
 800586e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005872:	431a      	orrs	r2, r3
 8005874:	4b72      	ldr	r3, [pc, #456]	; (8005a40 <MX_LWIP_Init+0x288>)
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	0619      	lsls	r1, r3, #24
 800587a:	4b71      	ldr	r3, [pc, #452]	; (8005a40 <MX_LWIP_Init+0x288>)
 800587c:	785b      	ldrb	r3, [r3, #1]
 800587e:	041b      	lsls	r3, r3, #16
 8005880:	4319      	orrs	r1, r3
 8005882:	4b6f      	ldr	r3, [pc, #444]	; (8005a40 <MX_LWIP_Init+0x288>)
 8005884:	789b      	ldrb	r3, [r3, #2]
 8005886:	021b      	lsls	r3, r3, #8
 8005888:	430b      	orrs	r3, r1
 800588a:	496d      	ldr	r1, [pc, #436]	; (8005a40 <MX_LWIP_Init+0x288>)
 800588c:	78c9      	ldrb	r1, [r1, #3]
 800588e:	430b      	orrs	r3, r1
 8005890:	0e1b      	lsrs	r3, r3, #24
 8005892:	4313      	orrs	r3, r2
 8005894:	4a6d      	ldr	r2, [pc, #436]	; (8005a4c <MX_LWIP_Init+0x294>)
 8005896:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005898:	4b6a      	ldr	r3, [pc, #424]	; (8005a44 <MX_LWIP_Init+0x28c>)
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	061a      	lsls	r2, r3, #24
 800589e:	4b69      	ldr	r3, [pc, #420]	; (8005a44 <MX_LWIP_Init+0x28c>)
 80058a0:	785b      	ldrb	r3, [r3, #1]
 80058a2:	041b      	lsls	r3, r3, #16
 80058a4:	431a      	orrs	r2, r3
 80058a6:	4b67      	ldr	r3, [pc, #412]	; (8005a44 <MX_LWIP_Init+0x28c>)
 80058a8:	789b      	ldrb	r3, [r3, #2]
 80058aa:	021b      	lsls	r3, r3, #8
 80058ac:	4313      	orrs	r3, r2
 80058ae:	4a65      	ldr	r2, [pc, #404]	; (8005a44 <MX_LWIP_Init+0x28c>)
 80058b0:	78d2      	ldrb	r2, [r2, #3]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	061a      	lsls	r2, r3, #24
 80058b6:	4b63      	ldr	r3, [pc, #396]	; (8005a44 <MX_LWIP_Init+0x28c>)
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	0619      	lsls	r1, r3, #24
 80058bc:	4b61      	ldr	r3, [pc, #388]	; (8005a44 <MX_LWIP_Init+0x28c>)
 80058be:	785b      	ldrb	r3, [r3, #1]
 80058c0:	041b      	lsls	r3, r3, #16
 80058c2:	4319      	orrs	r1, r3
 80058c4:	4b5f      	ldr	r3, [pc, #380]	; (8005a44 <MX_LWIP_Init+0x28c>)
 80058c6:	789b      	ldrb	r3, [r3, #2]
 80058c8:	021b      	lsls	r3, r3, #8
 80058ca:	430b      	orrs	r3, r1
 80058cc:	495d      	ldr	r1, [pc, #372]	; (8005a44 <MX_LWIP_Init+0x28c>)
 80058ce:	78c9      	ldrb	r1, [r1, #3]
 80058d0:	430b      	orrs	r3, r1
 80058d2:	021b      	lsls	r3, r3, #8
 80058d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80058d8:	431a      	orrs	r2, r3
 80058da:	4b5a      	ldr	r3, [pc, #360]	; (8005a44 <MX_LWIP_Init+0x28c>)
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	0619      	lsls	r1, r3, #24
 80058e0:	4b58      	ldr	r3, [pc, #352]	; (8005a44 <MX_LWIP_Init+0x28c>)
 80058e2:	785b      	ldrb	r3, [r3, #1]
 80058e4:	041b      	lsls	r3, r3, #16
 80058e6:	4319      	orrs	r1, r3
 80058e8:	4b56      	ldr	r3, [pc, #344]	; (8005a44 <MX_LWIP_Init+0x28c>)
 80058ea:	789b      	ldrb	r3, [r3, #2]
 80058ec:	021b      	lsls	r3, r3, #8
 80058ee:	430b      	orrs	r3, r1
 80058f0:	4954      	ldr	r1, [pc, #336]	; (8005a44 <MX_LWIP_Init+0x28c>)
 80058f2:	78c9      	ldrb	r1, [r1, #3]
 80058f4:	430b      	orrs	r3, r1
 80058f6:	0a1b      	lsrs	r3, r3, #8
 80058f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80058fc:	431a      	orrs	r2, r3
 80058fe:	4b51      	ldr	r3, [pc, #324]	; (8005a44 <MX_LWIP_Init+0x28c>)
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	0619      	lsls	r1, r3, #24
 8005904:	4b4f      	ldr	r3, [pc, #316]	; (8005a44 <MX_LWIP_Init+0x28c>)
 8005906:	785b      	ldrb	r3, [r3, #1]
 8005908:	041b      	lsls	r3, r3, #16
 800590a:	4319      	orrs	r1, r3
 800590c:	4b4d      	ldr	r3, [pc, #308]	; (8005a44 <MX_LWIP_Init+0x28c>)
 800590e:	789b      	ldrb	r3, [r3, #2]
 8005910:	021b      	lsls	r3, r3, #8
 8005912:	430b      	orrs	r3, r1
 8005914:	494b      	ldr	r1, [pc, #300]	; (8005a44 <MX_LWIP_Init+0x28c>)
 8005916:	78c9      	ldrb	r1, [r1, #3]
 8005918:	430b      	orrs	r3, r1
 800591a:	0e1b      	lsrs	r3, r3, #24
 800591c:	4313      	orrs	r3, r2
 800591e:	4a4c      	ldr	r2, [pc, #304]	; (8005a50 <MX_LWIP_Init+0x298>)
 8005920:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005922:	4b49      	ldr	r3, [pc, #292]	; (8005a48 <MX_LWIP_Init+0x290>)
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	061a      	lsls	r2, r3, #24
 8005928:	4b47      	ldr	r3, [pc, #284]	; (8005a48 <MX_LWIP_Init+0x290>)
 800592a:	785b      	ldrb	r3, [r3, #1]
 800592c:	041b      	lsls	r3, r3, #16
 800592e:	431a      	orrs	r2, r3
 8005930:	4b45      	ldr	r3, [pc, #276]	; (8005a48 <MX_LWIP_Init+0x290>)
 8005932:	789b      	ldrb	r3, [r3, #2]
 8005934:	021b      	lsls	r3, r3, #8
 8005936:	4313      	orrs	r3, r2
 8005938:	4a43      	ldr	r2, [pc, #268]	; (8005a48 <MX_LWIP_Init+0x290>)
 800593a:	78d2      	ldrb	r2, [r2, #3]
 800593c:	4313      	orrs	r3, r2
 800593e:	061a      	lsls	r2, r3, #24
 8005940:	4b41      	ldr	r3, [pc, #260]	; (8005a48 <MX_LWIP_Init+0x290>)
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	0619      	lsls	r1, r3, #24
 8005946:	4b40      	ldr	r3, [pc, #256]	; (8005a48 <MX_LWIP_Init+0x290>)
 8005948:	785b      	ldrb	r3, [r3, #1]
 800594a:	041b      	lsls	r3, r3, #16
 800594c:	4319      	orrs	r1, r3
 800594e:	4b3e      	ldr	r3, [pc, #248]	; (8005a48 <MX_LWIP_Init+0x290>)
 8005950:	789b      	ldrb	r3, [r3, #2]
 8005952:	021b      	lsls	r3, r3, #8
 8005954:	430b      	orrs	r3, r1
 8005956:	493c      	ldr	r1, [pc, #240]	; (8005a48 <MX_LWIP_Init+0x290>)
 8005958:	78c9      	ldrb	r1, [r1, #3]
 800595a:	430b      	orrs	r3, r1
 800595c:	021b      	lsls	r3, r3, #8
 800595e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005962:	431a      	orrs	r2, r3
 8005964:	4b38      	ldr	r3, [pc, #224]	; (8005a48 <MX_LWIP_Init+0x290>)
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	0619      	lsls	r1, r3, #24
 800596a:	4b37      	ldr	r3, [pc, #220]	; (8005a48 <MX_LWIP_Init+0x290>)
 800596c:	785b      	ldrb	r3, [r3, #1]
 800596e:	041b      	lsls	r3, r3, #16
 8005970:	4319      	orrs	r1, r3
 8005972:	4b35      	ldr	r3, [pc, #212]	; (8005a48 <MX_LWIP_Init+0x290>)
 8005974:	789b      	ldrb	r3, [r3, #2]
 8005976:	021b      	lsls	r3, r3, #8
 8005978:	430b      	orrs	r3, r1
 800597a:	4933      	ldr	r1, [pc, #204]	; (8005a48 <MX_LWIP_Init+0x290>)
 800597c:	78c9      	ldrb	r1, [r1, #3]
 800597e:	430b      	orrs	r3, r1
 8005980:	0a1b      	lsrs	r3, r3, #8
 8005982:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005986:	431a      	orrs	r2, r3
 8005988:	4b2f      	ldr	r3, [pc, #188]	; (8005a48 <MX_LWIP_Init+0x290>)
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	0619      	lsls	r1, r3, #24
 800598e:	4b2e      	ldr	r3, [pc, #184]	; (8005a48 <MX_LWIP_Init+0x290>)
 8005990:	785b      	ldrb	r3, [r3, #1]
 8005992:	041b      	lsls	r3, r3, #16
 8005994:	4319      	orrs	r1, r3
 8005996:	4b2c      	ldr	r3, [pc, #176]	; (8005a48 <MX_LWIP_Init+0x290>)
 8005998:	789b      	ldrb	r3, [r3, #2]
 800599a:	021b      	lsls	r3, r3, #8
 800599c:	430b      	orrs	r3, r1
 800599e:	492a      	ldr	r1, [pc, #168]	; (8005a48 <MX_LWIP_Init+0x290>)
 80059a0:	78c9      	ldrb	r1, [r1, #3]
 80059a2:	430b      	orrs	r3, r1
 80059a4:	0e1b      	lsrs	r3, r3, #24
 80059a6:	4313      	orrs	r3, r2
 80059a8:	4a2a      	ldr	r2, [pc, #168]	; (8005a54 <MX_LWIP_Init+0x29c>)
 80059aa:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80059ac:	4b2a      	ldr	r3, [pc, #168]	; (8005a58 <MX_LWIP_Init+0x2a0>)
 80059ae:	9302      	str	r3, [sp, #8]
 80059b0:	4b2a      	ldr	r3, [pc, #168]	; (8005a5c <MX_LWIP_Init+0x2a4>)
 80059b2:	9301      	str	r3, [sp, #4]
 80059b4:	2300      	movs	r3, #0
 80059b6:	9300      	str	r3, [sp, #0]
 80059b8:	4b26      	ldr	r3, [pc, #152]	; (8005a54 <MX_LWIP_Init+0x29c>)
 80059ba:	4a25      	ldr	r2, [pc, #148]	; (8005a50 <MX_LWIP_Init+0x298>)
 80059bc:	4923      	ldr	r1, [pc, #140]	; (8005a4c <MX_LWIP_Init+0x294>)
 80059be:	4828      	ldr	r0, [pc, #160]	; (8005a60 <MX_LWIP_Init+0x2a8>)
 80059c0:	f008 f88e 	bl	800dae0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80059c4:	4826      	ldr	r0, [pc, #152]	; (8005a60 <MX_LWIP_Init+0x2a8>)
 80059c6:	f008 fa3d 	bl	800de44 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80059ca:	4b25      	ldr	r3, [pc, #148]	; (8005a60 <MX_LWIP_Init+0x2a8>)
 80059cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80059d0:	089b      	lsrs	r3, r3, #2
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d003      	beq.n	80059e4 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80059dc:	4820      	ldr	r0, [pc, #128]	; (8005a60 <MX_LWIP_Init+0x2a8>)
 80059de:	f008 fa41 	bl	800de64 <netif_set_up>
 80059e2:	e002      	b.n	80059ea <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80059e4:	481e      	ldr	r0, [pc, #120]	; (8005a60 <MX_LWIP_Init+0x2a8>)
 80059e6:	f008 faa9 	bl	800df3c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80059ea:	491e      	ldr	r1, [pc, #120]	; (8005a64 <MX_LWIP_Init+0x2ac>)
 80059ec:	481c      	ldr	r0, [pc, #112]	; (8005a60 <MX_LWIP_Init+0x2a8>)
 80059ee:	f008 fb3b 	bl	800e068 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 80059f2:	2300      	movs	r3, #0
 80059f4:	623b      	str	r3, [r7, #32]
 80059f6:	2300      	movs	r3, #0
 80059f8:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 80059fa:	f107 0320 	add.w	r3, r7, #32
 80059fe:	2101      	movs	r1, #1
 8005a00:	4618      	mov	r0, r3
 8005a02:	f000 fd95 	bl	8006530 <osSemaphoreCreate>
 8005a06:	4603      	mov	r3, r0
 8005a08:	4a17      	ldr	r2, [pc, #92]	; (8005a68 <MX_LWIP_Init+0x2b0>)
 8005a0a:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8005a0c:	4b17      	ldr	r3, [pc, #92]	; (8005a6c <MX_LWIP_Init+0x2b4>)
 8005a0e:	4a14      	ldr	r2, [pc, #80]	; (8005a60 <MX_LWIP_Init+0x2a8>)
 8005a10:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8005a12:	4b15      	ldr	r3, [pc, #84]	; (8005a68 <MX_LWIP_Init+0x2b0>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a15      	ldr	r2, [pc, #84]	; (8005a6c <MX_LWIP_Init+0x2b4>)
 8005a18:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8005a1a:	4b15      	ldr	r3, [pc, #84]	; (8005a70 <MX_LWIP_Init+0x2b8>)
 8005a1c:	1d3c      	adds	r4, r7, #4
 8005a1e:	461d      	mov	r5, r3
 8005a20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005a28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8005a2c:	1d3b      	adds	r3, r7, #4
 8005a2e:	490f      	ldr	r1, [pc, #60]	; (8005a6c <MX_LWIP_Init+0x2b4>)
 8005a30:	4618      	mov	r0, r3
 8005a32:	f000 fc81 	bl	8006338 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005a36:	bf00      	nop
 8005a38:	3728      	adds	r7, #40	; 0x28
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bdb0      	pop	{r4, r5, r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	20000954 	.word	0x20000954
 8005a44:	20000958 	.word	0x20000958
 8005a48:	2000095c 	.word	0x2000095c
 8005a4c:	20000948 	.word	0x20000948
 8005a50:	2000094c 	.word	0x2000094c
 8005a54:	20000950 	.word	0x20000950
 8005a58:	0800cee9 	.word	0x0800cee9
 8005a5c:	080060d5 	.word	0x080060d5
 8005a60:	20000914 	.word	0x20000914
 8005a64:	080061b9 	.word	0x080061b9
 8005a68:	20000908 	.word	0x20000908
 8005a6c:	2000090c 	.word	0x2000090c
 8005a70:	08019bd8 	.word	0x08019bd8

08005a74 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b08e      	sub	sp, #56	; 0x38
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a80:	2200      	movs	r2, #0
 8005a82:	601a      	str	r2, [r3, #0]
 8005a84:	605a      	str	r2, [r3, #4]
 8005a86:	609a      	str	r2, [r3, #8]
 8005a88:	60da      	str	r2, [r3, #12]
 8005a8a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a56      	ldr	r2, [pc, #344]	; (8005bec <HAL_ETH_MspInit+0x178>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	f040 80a6 	bne.w	8005be4 <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005a98:	4b55      	ldr	r3, [pc, #340]	; (8005bf0 <HAL_ETH_MspInit+0x17c>)
 8005a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9c:	4a54      	ldr	r2, [pc, #336]	; (8005bf0 <HAL_ETH_MspInit+0x17c>)
 8005a9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005aa2:	6313      	str	r3, [r2, #48]	; 0x30
 8005aa4:	4b52      	ldr	r3, [pc, #328]	; (8005bf0 <HAL_ETH_MspInit+0x17c>)
 8005aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aac:	623b      	str	r3, [r7, #32]
 8005aae:	6a3b      	ldr	r3, [r7, #32]
 8005ab0:	4b4f      	ldr	r3, [pc, #316]	; (8005bf0 <HAL_ETH_MspInit+0x17c>)
 8005ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab4:	4a4e      	ldr	r2, [pc, #312]	; (8005bf0 <HAL_ETH_MspInit+0x17c>)
 8005ab6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005aba:	6313      	str	r3, [r2, #48]	; 0x30
 8005abc:	4b4c      	ldr	r3, [pc, #304]	; (8005bf0 <HAL_ETH_MspInit+0x17c>)
 8005abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ac4:	61fb      	str	r3, [r7, #28]
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	4b49      	ldr	r3, [pc, #292]	; (8005bf0 <HAL_ETH_MspInit+0x17c>)
 8005aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005acc:	4a48      	ldr	r2, [pc, #288]	; (8005bf0 <HAL_ETH_MspInit+0x17c>)
 8005ace:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ad2:	6313      	str	r3, [r2, #48]	; 0x30
 8005ad4:	4b46      	ldr	r3, [pc, #280]	; (8005bf0 <HAL_ETH_MspInit+0x17c>)
 8005ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005adc:	61bb      	str	r3, [r7, #24]
 8005ade:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ae0:	4b43      	ldr	r3, [pc, #268]	; (8005bf0 <HAL_ETH_MspInit+0x17c>)
 8005ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae4:	4a42      	ldr	r2, [pc, #264]	; (8005bf0 <HAL_ETH_MspInit+0x17c>)
 8005ae6:	f043 0304 	orr.w	r3, r3, #4
 8005aea:	6313      	str	r3, [r2, #48]	; 0x30
 8005aec:	4b40      	ldr	r3, [pc, #256]	; (8005bf0 <HAL_ETH_MspInit+0x17c>)
 8005aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af0:	f003 0304 	and.w	r3, r3, #4
 8005af4:	617b      	str	r3, [r7, #20]
 8005af6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005af8:	4b3d      	ldr	r3, [pc, #244]	; (8005bf0 <HAL_ETH_MspInit+0x17c>)
 8005afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afc:	4a3c      	ldr	r2, [pc, #240]	; (8005bf0 <HAL_ETH_MspInit+0x17c>)
 8005afe:	f043 0301 	orr.w	r3, r3, #1
 8005b02:	6313      	str	r3, [r2, #48]	; 0x30
 8005b04:	4b3a      	ldr	r3, [pc, #232]	; (8005bf0 <HAL_ETH_MspInit+0x17c>)
 8005b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b08:	f003 0301 	and.w	r3, r3, #1
 8005b0c:	613b      	str	r3, [r7, #16]
 8005b0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b10:	4b37      	ldr	r3, [pc, #220]	; (8005bf0 <HAL_ETH_MspInit+0x17c>)
 8005b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b14:	4a36      	ldr	r2, [pc, #216]	; (8005bf0 <HAL_ETH_MspInit+0x17c>)
 8005b16:	f043 0302 	orr.w	r3, r3, #2
 8005b1a:	6313      	str	r3, [r2, #48]	; 0x30
 8005b1c:	4b34      	ldr	r3, [pc, #208]	; (8005bf0 <HAL_ETH_MspInit+0x17c>)
 8005b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b20:	f003 0302 	and.w	r3, r3, #2
 8005b24:	60fb      	str	r3, [r7, #12]
 8005b26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005b28:	4b31      	ldr	r3, [pc, #196]	; (8005bf0 <HAL_ETH_MspInit+0x17c>)
 8005b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2c:	4a30      	ldr	r2, [pc, #192]	; (8005bf0 <HAL_ETH_MspInit+0x17c>)
 8005b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b32:	6313      	str	r3, [r2, #48]	; 0x30
 8005b34:	4b2e      	ldr	r3, [pc, #184]	; (8005bf0 <HAL_ETH_MspInit+0x17c>)
 8005b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3c:	60bb      	str	r3, [r7, #8]
 8005b3e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005b40:	2332      	movs	r3, #50	; 0x32
 8005b42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b44:	2302      	movs	r3, #2
 8005b46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005b50:	230b      	movs	r3, #11
 8005b52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b58:	4619      	mov	r1, r3
 8005b5a:	4826      	ldr	r0, [pc, #152]	; (8005bf4 <HAL_ETH_MspInit+0x180>)
 8005b5c:	f7fd fb02 	bl	8003164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005b60:	2386      	movs	r3, #134	; 0x86
 8005b62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b64:	2302      	movs	r3, #2
 8005b66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005b70:	230b      	movs	r3, #11
 8005b72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b78:	4619      	mov	r1, r3
 8005b7a:	481f      	ldr	r0, [pc, #124]	; (8005bf8 <HAL_ETH_MspInit+0x184>)
 8005b7c:	f7fd faf2 	bl	8003164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005b80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b86:	2302      	movs	r3, #2
 8005b88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005b92:	230b      	movs	r3, #11
 8005b94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	4817      	ldr	r0, [pc, #92]	; (8005bfc <HAL_ETH_MspInit+0x188>)
 8005b9e:	f7fd fae1 	bl	8003164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8005ba2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005ba6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ba8:	2302      	movs	r3, #2
 8005baa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bac:	2300      	movs	r3, #0
 8005bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005bb4:	230b      	movs	r3, #11
 8005bb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	4810      	ldr	r0, [pc, #64]	; (8005c00 <HAL_ETH_MspInit+0x18c>)
 8005bc0:	f7fd fad0 	bl	8003164 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	2105      	movs	r1, #5
 8005bc8:	203d      	movs	r0, #61	; 0x3d
 8005bca:	f7fc f935 	bl	8001e38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005bce:	203d      	movs	r0, #61	; 0x3d
 8005bd0:	f7fc f94e 	bl	8001e70 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	2105      	movs	r1, #5
 8005bd8:	203e      	movs	r0, #62	; 0x3e
 8005bda:	f7fc f92d 	bl	8001e38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8005bde:	203e      	movs	r0, #62	; 0x3e
 8005be0:	f7fc f946 	bl	8001e70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005be4:	bf00      	nop
 8005be6:	3738      	adds	r7, #56	; 0x38
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	40028000 	.word	0x40028000
 8005bf0:	40023800 	.word	0x40023800
 8005bf4:	40020800 	.word	0x40020800
 8005bf8:	40020000 	.word	0x40020000
 8005bfc:	40020400 	.word	0x40020400
 8005c00:	40021800 	.word	0x40021800

08005c04 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8005c0c:	4b04      	ldr	r3, [pc, #16]	; (8005c20 <HAL_ETH_RxCpltCallback+0x1c>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4618      	mov	r0, r3
 8005c12:	f000 fd0d 	bl	8006630 <osSemaphoreRelease>
}
 8005c16:	bf00      	nop
 8005c18:	3708      	adds	r7, #8
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	20003a00 	.word	0x20003a00

08005c24 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005c24:	b5b0      	push	{r4, r5, r7, lr}
 8005c26:	b090      	sub	sp, #64	; 0x40
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005c30:	4b60      	ldr	r3, [pc, #384]	; (8005db4 <low_level_init+0x190>)
 8005c32:	4a61      	ldr	r2, [pc, #388]	; (8005db8 <low_level_init+0x194>)
 8005c34:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8005c36:	4b5f      	ldr	r3, [pc, #380]	; (8005db4 <low_level_init+0x190>)
 8005c38:	2201      	movs	r2, #1
 8005c3a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8005c3c:	4b5d      	ldr	r3, [pc, #372]	; (8005db4 <low_level_init+0x190>)
 8005c3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005c42:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005c44:	4b5b      	ldr	r3, [pc, #364]	; (8005db4 <low_level_init+0x190>)
 8005c46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c4a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8005c4c:	4b59      	ldr	r3, [pc, #356]	; (8005db4 <low_level_init+0x190>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8005c52:	2300      	movs	r3, #0
 8005c54:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8005c58:	2380      	movs	r3, #128	; 0x80
 8005c5a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8005c5e:	23e1      	movs	r3, #225	; 0xe1
 8005c60:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8005c64:	2300      	movs	r3, #0
 8005c66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x01;
 8005c70:	2301      	movs	r3, #1
 8005c72:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8005c76:	4a4f      	ldr	r2, [pc, #316]	; (8005db4 <low_level_init+0x190>)
 8005c78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005c7c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8005c7e:	4b4d      	ldr	r3, [pc, #308]	; (8005db4 <low_level_init+0x190>)
 8005c80:	2201      	movs	r2, #1
 8005c82:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8005c84:	4b4b      	ldr	r3, [pc, #300]	; (8005db4 <low_level_init+0x190>)
 8005c86:	2200      	movs	r2, #0
 8005c88:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8005c8a:	4b4a      	ldr	r3, [pc, #296]	; (8005db4 <low_level_init+0x190>)
 8005c8c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005c90:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005c92:	4848      	ldr	r0, [pc, #288]	; (8005db4 <low_level_init+0x190>)
 8005c94:	f7fc f8fa 	bl	8001e8c <HAL_ETH_Init>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8005c9e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d108      	bne.n	8005cb8 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005cac:	f043 0304 	orr.w	r3, r3, #4
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8005cb8:	2304      	movs	r3, #4
 8005cba:	4a40      	ldr	r2, [pc, #256]	; (8005dbc <low_level_init+0x198>)
 8005cbc:	4940      	ldr	r1, [pc, #256]	; (8005dc0 <low_level_init+0x19c>)
 8005cbe:	483d      	ldr	r0, [pc, #244]	; (8005db4 <low_level_init+0x190>)
 8005cc0:	f7fc fa7c 	bl	80021bc <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8005cc4:	2304      	movs	r3, #4
 8005cc6:	4a3f      	ldr	r2, [pc, #252]	; (8005dc4 <low_level_init+0x1a0>)
 8005cc8:	493f      	ldr	r1, [pc, #252]	; (8005dc8 <low_level_init+0x1a4>)
 8005cca:	483a      	ldr	r0, [pc, #232]	; (8005db4 <low_level_init+0x190>)
 8005ccc:	f7fc fade 	bl	800228c <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2206      	movs	r2, #6
 8005cd4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005cd8:	4b36      	ldr	r3, [pc, #216]	; (8005db4 <low_level_init+0x190>)
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	781a      	ldrb	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005ce4:	4b33      	ldr	r3, [pc, #204]	; (8005db4 <low_level_init+0x190>)
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	785a      	ldrb	r2, [r3, #1]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005cf0:	4b30      	ldr	r3, [pc, #192]	; (8005db4 <low_level_init+0x190>)
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	789a      	ldrb	r2, [r3, #2]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005cfc:	4b2d      	ldr	r3, [pc, #180]	; (8005db4 <low_level_init+0x190>)
 8005cfe:	695b      	ldr	r3, [r3, #20]
 8005d00:	78da      	ldrb	r2, [r3, #3]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005d08:	4b2a      	ldr	r3, [pc, #168]	; (8005db4 <low_level_init+0x190>)
 8005d0a:	695b      	ldr	r3, [r3, #20]
 8005d0c:	791a      	ldrb	r2, [r3, #4]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005d14:	4b27      	ldr	r3, [pc, #156]	; (8005db4 <low_level_init+0x190>)
 8005d16:	695b      	ldr	r3, [r3, #20]
 8005d18:	795a      	ldrb	r2, [r3, #5]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005d26:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005d2e:	f043 030a 	orr.w	r3, r3, #10
 8005d32:	b2da      	uxtb	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d3e:	2300      	movs	r3, #0
 8005d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8005d42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d46:	2101      	movs	r1, #1
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f000 fbf1 	bl	8006530 <osSemaphoreCreate>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	4a1e      	ldr	r2, [pc, #120]	; (8005dcc <low_level_init+0x1a8>)
 8005d52:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8005d54:	4b1e      	ldr	r3, [pc, #120]	; (8005dd0 <low_level_init+0x1ac>)
 8005d56:	f107 040c 	add.w	r4, r7, #12
 8005d5a:	461d      	mov	r5, r3
 8005d5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d60:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005d64:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8005d68:	f107 030c 	add.w	r3, r7, #12
 8005d6c:	6879      	ldr	r1, [r7, #4]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f000 fae2 	bl	8006338 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8005d74:	480f      	ldr	r0, [pc, #60]	; (8005db4 <low_level_init+0x190>)
 8005d76:	f7fc fdad 	bl	80028d4 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8005d7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005d7e:	461a      	mov	r2, r3
 8005d80:	211d      	movs	r1, #29
 8005d82:	480c      	ldr	r0, [pc, #48]	; (8005db4 <low_level_init+0x190>)
 8005d84:	f7fc fcd8 	bl	8002738 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8005d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8a:	f043 030b 	orr.w	r3, r3, #11
 8005d8e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8005d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d92:	461a      	mov	r2, r3
 8005d94:	211d      	movs	r1, #29
 8005d96:	4807      	ldr	r0, [pc, #28]	; (8005db4 <low_level_init+0x190>)
 8005d98:	f7fc fd36 	bl	8002808 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8005d9c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005da0:	461a      	mov	r2, r3
 8005da2:	211d      	movs	r1, #29
 8005da4:	4803      	ldr	r0, [pc, #12]	; (8005db4 <low_level_init+0x190>)
 8005da6:	f7fc fcc7 	bl	8002738 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005daa:	bf00      	nop
 8005dac:	3740      	adds	r7, #64	; 0x40
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bdb0      	pop	{r4, r5, r7, pc}
 8005db2:	bf00      	nop
 8005db4:	20003a04 	.word	0x20003a04
 8005db8:	40028000 	.word	0x40028000
 8005dbc:	20002230 	.word	0x20002230
 8005dc0:	200009e0 	.word	0x200009e0
 8005dc4:	20000a60 	.word	0x20000a60
 8005dc8:	20000960 	.word	0x20000960
 8005dcc:	20003a00 	.word	0x20003a00
 8005dd0:	08019bfc 	.word	0x08019bfc

08005dd4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b08a      	sub	sp, #40	; 0x28
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8005dde:	4b4b      	ldr	r3, [pc, #300]	; (8005f0c <low_level_output+0x138>)
 8005de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8005de6:	2300      	movs	r3, #0
 8005de8:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8005dea:	2300      	movs	r3, #0
 8005dec:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8005dee:	2300      	movs	r3, #0
 8005df0:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8005df2:	2300      	movs	r3, #0
 8005df4:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8005df6:	4b45      	ldr	r3, [pc, #276]	; (8005f0c <low_level_output+0x138>)
 8005df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfa:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	623b      	str	r3, [r7, #32]
 8005e04:	e05a      	b.n	8005ebc <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	da03      	bge.n	8005e16 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8005e0e:	23f8      	movs	r3, #248	; 0xf8
 8005e10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8005e14:	e05c      	b.n	8005ed0 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8005e16:	6a3b      	ldr	r3, [r7, #32]
 8005e18:	895b      	ldrh	r3, [r3, #10]
 8005e1a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005e20:	e02f      	b.n	8005e82 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8005e22:	69fa      	ldr	r2, [r7, #28]
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	18d0      	adds	r0, r2, r3
 8005e28:	6a3b      	ldr	r3, [r7, #32]
 8005e2a:	685a      	ldr	r2, [r3, #4]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	18d1      	adds	r1, r2, r3
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8005e36:	1a9b      	subs	r3, r3, r2
 8005e38:	461a      	mov	r2, r3
 8005e3a:	f012 fbd9 	bl	80185f0 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	da03      	bge.n	8005e54 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8005e4c:	23f8      	movs	r3, #248	; 0xf8
 8005e4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8005e52:	e03d      	b.n	8005ed0 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	4413      	add	r3, r2
 8005e60:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005e64:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005e70:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005e7c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	4413      	add	r3, r2
 8005e88:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d8c8      	bhi.n	8005e22 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005e90:	69fa      	ldr	r2, [r7, #28]
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	18d0      	adds	r0, r2, r3
 8005e96:	6a3b      	ldr	r3, [r7, #32]
 8005e98:	685a      	ldr	r2, [r3, #4]
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	f012 fba5 	bl	80185f0 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	4413      	add	r3, r2
 8005eac:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8005eb6:	6a3b      	ldr	r3, [r7, #32]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	623b      	str	r3, [r7, #32]
 8005ebc:	6a3b      	ldr	r3, [r7, #32]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1a1      	bne.n	8005e06 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8005ec2:	6979      	ldr	r1, [r7, #20]
 8005ec4:	4811      	ldr	r0, [pc, #68]	; (8005f0c <low_level_output+0x138>)
 8005ec6:	f7fc fa4d 	bl	8002364 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8005ed0:	4b0e      	ldr	r3, [pc, #56]	; (8005f0c <low_level_output+0x138>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	f003 0320 	and.w	r3, r3, #32
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00d      	beq.n	8005efe <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8005ee2:	4b0a      	ldr	r3, [pc, #40]	; (8005f0c <low_level_output+0x138>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eea:	461a      	mov	r2, r3
 8005eec:	2320      	movs	r3, #32
 8005eee:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8005ef0:	4b06      	ldr	r3, [pc, #24]	; (8005f0c <low_level_output+0x138>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ef8:	461a      	mov	r2, r3
 8005efa:	2300      	movs	r3, #0
 8005efc:	6053      	str	r3, [r2, #4]
  }
  return errval;
 8005efe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3728      	adds	r7, #40	; 0x28
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	20003a04 	.word	0x20003a04

08005f10 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b08c      	sub	sp, #48	; 0x30
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8005f20:	2300      	movs	r3, #0
 8005f22:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8005f24:	2300      	movs	r3, #0
 8005f26:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8005f30:	2300      	movs	r3, #0
 8005f32:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8005f34:	484e      	ldr	r0, [pc, #312]	; (8006070 <low_level_input+0x160>)
 8005f36:	f7fc faff 	bl	8002538 <HAL_ETH_GetReceivedFrame_IT>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d001      	beq.n	8005f44 <low_level_input+0x34>

    return NULL;
 8005f40:	2300      	movs	r3, #0
 8005f42:	e091      	b.n	8006068 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8005f44:	4b4a      	ldr	r3, [pc, #296]	; (8006070 <low_level_input+0x160>)
 8005f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f48:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8005f4a:	4b49      	ldr	r3, [pc, #292]	; (8006070 <low_level_input+0x160>)
 8005f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8005f50:	89fb      	ldrh	r3, [r7, #14]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d007      	beq.n	8005f66 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8005f56:	89fb      	ldrh	r3, [r7, #14]
 8005f58:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	2000      	movs	r0, #0
 8005f60:	f008 f94c 	bl	800e1fc <pbuf_alloc>
 8005f64:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8005f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d04b      	beq.n	8006004 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005f6c:	4b40      	ldr	r3, [pc, #256]	; (8006070 <low_level_input+0x160>)
 8005f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f70:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8005f72:	2300      	movs	r3, #0
 8005f74:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f78:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f7a:	e040      	b.n	8005ffe <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8005f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7e:	895b      	ldrh	r3, [r3, #10]
 8005f80:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8005f82:	2300      	movs	r3, #0
 8005f84:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005f86:	e021      	b.n	8005fcc <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8005f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	18d0      	adds	r0, r2, r3
 8005f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	18d1      	adds	r1, r2, r3
 8005f96:	69fa      	ldr	r2, [r7, #28]
 8005f98:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8005f9c:	1a9b      	subs	r3, r3, r2
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	f012 fb26 	bl	80185f0 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005fa4:	6a3b      	ldr	r3, [r7, #32]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8005faa:	6a3b      	ldr	r3, [r7, #32]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8005fb0:	69fa      	ldr	r2, [r7, #28]
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005fba:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8005fbc:	69ba      	ldr	r2, [r7, #24]
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005fc6:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d8d6      	bhi.n	8005f88 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8005fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	18d0      	adds	r0, r2, r3
 8005fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	4619      	mov	r1, r3
 8005fec:	f012 fb00 	bl	80185f0 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005ff0:	69fa      	ldr	r2, [r7, #28]
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1bb      	bne.n	8005f7c <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006004:	4b1a      	ldr	r3, [pc, #104]	; (8006070 <low_level_input+0x160>)
 8006006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006008:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800600a:	2300      	movs	r3, #0
 800600c:	613b      	str	r3, [r7, #16]
 800600e:	e00b      	b.n	8006028 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8006010:	6a3b      	ldr	r3, [r7, #32]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006018:	6a3b      	ldr	r3, [r7, #32]
 800601a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800601c:	6a3b      	ldr	r3, [r7, #32]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	3301      	adds	r3, #1
 8006026:	613b      	str	r3, [r7, #16]
 8006028:	4b11      	ldr	r3, [pc, #68]	; (8006070 <low_level_input+0x160>)
 800602a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	429a      	cmp	r2, r3
 8006030:	d3ee      	bcc.n	8006010 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8006032:	4b0f      	ldr	r3, [pc, #60]	; (8006070 <low_level_input+0x160>)
 8006034:	2200      	movs	r2, #0
 8006036:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8006038:	4b0d      	ldr	r3, [pc, #52]	; (8006070 <low_level_input+0x160>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00d      	beq.n	8006066 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800604a:	4b09      	ldr	r3, [pc, #36]	; (8006070 <low_level_input+0x160>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006052:	461a      	mov	r2, r3
 8006054:	2380      	movs	r3, #128	; 0x80
 8006056:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8006058:	4b05      	ldr	r3, [pc, #20]	; (8006070 <low_level_input+0x160>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006060:	461a      	mov	r2, r3
 8006062:	2300      	movs	r3, #0
 8006064:	6093      	str	r3, [r2, #8]
  }
  return p;
 8006066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006068:	4618      	mov	r0, r3
 800606a:	3730      	adds	r7, #48	; 0x30
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	20003a04 	.word	0x20003a04

08006074 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006080:	4b12      	ldr	r3, [pc, #72]	; (80060cc <ethernetif_input+0x58>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f04f 31ff 	mov.w	r1, #4294967295
 8006088:	4618      	mov	r0, r3
 800608a:	f000 fa83 	bl	8006594 <osSemaphoreWait>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1f5      	bne.n	8006080 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8006094:	480e      	ldr	r0, [pc, #56]	; (80060d0 <ethernetif_input+0x5c>)
 8006096:	f012 fa17 	bl	80184c8 <sys_mutex_lock>
        p = low_level_input( netif );
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f7ff ff38 	bl	8005f10 <low_level_input>
 80060a0:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00a      	beq.n	80060be <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	68f9      	ldr	r1, [r7, #12]
 80060ae:	68b8      	ldr	r0, [r7, #8]
 80060b0:	4798      	blx	r3
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d002      	beq.n	80060be <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 80060b8:	68b8      	ldr	r0, [r7, #8]
 80060ba:	f008 fbb5 	bl	800e828 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 80060be:	4804      	ldr	r0, [pc, #16]	; (80060d0 <ethernetif_input+0x5c>)
 80060c0:	f012 fa11 	bl	80184e6 <sys_mutex_unlock>
      } while(p!=NULL);
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1e4      	bne.n	8006094 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80060ca:	e7d9      	b.n	8006080 <ethernetif_input+0xc>
 80060cc:	20003a00 	.word	0x20003a00
 80060d0:	20007934 	.word	0x20007934

080060d4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d106      	bne.n	80060f0 <ethernetif_init+0x1c>
 80060e2:	4b0e      	ldr	r3, [pc, #56]	; (800611c <ethernetif_init+0x48>)
 80060e4:	f240 223a 	movw	r2, #570	; 0x23a
 80060e8:	490d      	ldr	r1, [pc, #52]	; (8006120 <ethernetif_init+0x4c>)
 80060ea:	480e      	ldr	r0, [pc, #56]	; (8006124 <ethernetif_init+0x50>)
 80060ec:	f012 fab0 	bl	8018650 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2273      	movs	r2, #115	; 0x73
 80060f4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2274      	movs	r2, #116	; 0x74
 80060fc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a09      	ldr	r2, [pc, #36]	; (8006128 <ethernetif_init+0x54>)
 8006104:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a08      	ldr	r2, [pc, #32]	; (800612c <ethernetif_init+0x58>)
 800610a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f7ff fd89 	bl	8005c24 <low_level_init>

  return ERR_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3708      	adds	r7, #8
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	08019c18 	.word	0x08019c18
 8006120:	08019c34 	.word	0x08019c34
 8006124:	08019c44 	.word	0x08019c44
 8006128:	08016255 	.word	0x08016255
 800612c:	08005dd5 	.word	0x08005dd5

08006130 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006134:	f7fb f96a 	bl	800140c <HAL_GetTick>
 8006138:	4603      	mov	r3, r0
}
 800613a:	4618      	mov	r0, r3
 800613c:	bd80      	pop	{r7, pc}
	...

08006140 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8006148:	2300      	movs	r3, #0
 800614a:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8006150:	f107 0308 	add.w	r3, r7, #8
 8006154:	461a      	mov	r2, r3
 8006156:	2101      	movs	r1, #1
 8006158:	4816      	ldr	r0, [pc, #88]	; (80061b4 <ethernetif_set_link+0x74>)
 800615a:	f7fc faed 	bl	8002738 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	f003 0304 	and.w	r3, r3, #4
 8006164:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800616e:	f003 0304 	and.w	r3, r3, #4
 8006172:	2b00      	cmp	r3, #0
 8006174:	d108      	bne.n	8006188 <ethernetif_set_link+0x48>
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d005      	beq.n	8006188 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4618      	mov	r0, r3
 8006182:	f007 ff0d 	bl	800dfa0 <netif_set_link_up>
 8006186:	e011      	b.n	80061ac <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006190:	089b      	lsrs	r3, r3, #2
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	b2db      	uxtb	r3, r3
 8006198:	2b00      	cmp	r3, #0
 800619a:	d007      	beq.n	80061ac <ethernetif_set_link+0x6c>
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d104      	bne.n	80061ac <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4618      	mov	r0, r3
 80061a8:	f007 ff2e 	bl	800e008 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 80061ac:	20c8      	movs	r0, #200	; 0xc8
 80061ae:	f000 f90f 	bl	80063d0 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80061b2:	e7cd      	b.n	8006150 <ethernetif_set_link+0x10>
 80061b4:	20003a04 	.word	0x20003a04

080061b8 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80061c0:	2300      	movs	r3, #0
 80061c2:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80061c4:	2300      	movs	r3, #0
 80061c6:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80061ce:	089b      	lsrs	r3, r3, #2
 80061d0:	f003 0301 	and.w	r3, r3, #1
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d05d      	beq.n	8006296 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80061da:	4b34      	ldr	r3, [pc, #208]	; (80062ac <ethernetif_update_config+0xf4>)
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d03f      	beq.n	8006262 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80061e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80061e6:	2100      	movs	r1, #0
 80061e8:	4830      	ldr	r0, [pc, #192]	; (80062ac <ethernetif_update_config+0xf4>)
 80061ea:	f7fc fb0d 	bl	8002808 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80061ee:	f7fb f90d 	bl	800140c <HAL_GetTick>
 80061f2:	4603      	mov	r3, r0
 80061f4:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80061f6:	f107 0308 	add.w	r3, r7, #8
 80061fa:	461a      	mov	r2, r3
 80061fc:	2101      	movs	r1, #1
 80061fe:	482b      	ldr	r0, [pc, #172]	; (80062ac <ethernetif_update_config+0xf4>)
 8006200:	f7fc fa9a 	bl	8002738 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8006204:	f7fb f902 	bl	800140c <HAL_GetTick>
 8006208:	4602      	mov	r2, r0
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006212:	d828      	bhi.n	8006266 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	f003 0320 	and.w	r3, r3, #32
 800621a:	2b00      	cmp	r3, #0
 800621c:	d0eb      	beq.n	80061f6 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800621e:	f107 0308 	add.w	r3, r7, #8
 8006222:	461a      	mov	r2, r3
 8006224:	2110      	movs	r1, #16
 8006226:	4821      	ldr	r0, [pc, #132]	; (80062ac <ethernetif_update_config+0xf4>)
 8006228:	f7fc fa86 	bl	8002738 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	f003 0304 	and.w	r3, r3, #4
 8006232:	2b00      	cmp	r3, #0
 8006234:	d004      	beq.n	8006240 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8006236:	4b1d      	ldr	r3, [pc, #116]	; (80062ac <ethernetif_update_config+0xf4>)
 8006238:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800623c:	60da      	str	r2, [r3, #12]
 800623e:	e002      	b.n	8006246 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8006240:	4b1a      	ldr	r3, [pc, #104]	; (80062ac <ethernetif_update_config+0xf4>)
 8006242:	2200      	movs	r2, #0
 8006244:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	f003 0302 	and.w	r3, r3, #2
 800624c:	2b00      	cmp	r3, #0
 800624e:	d003      	beq.n	8006258 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8006250:	4b16      	ldr	r3, [pc, #88]	; (80062ac <ethernetif_update_config+0xf4>)
 8006252:	2200      	movs	r2, #0
 8006254:	609a      	str	r2, [r3, #8]
 8006256:	e016      	b.n	8006286 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8006258:	4b14      	ldr	r3, [pc, #80]	; (80062ac <ethernetif_update_config+0xf4>)
 800625a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800625e:	609a      	str	r2, [r3, #8]
 8006260:	e011      	b.n	8006286 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8006262:	bf00      	nop
 8006264:	e000      	b.n	8006268 <ethernetif_update_config+0xb0>
          goto error;
 8006266:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8006268:	4b10      	ldr	r3, [pc, #64]	; (80062ac <ethernetif_update_config+0xf4>)
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	08db      	lsrs	r3, r3, #3
 800626e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8006270:	4b0e      	ldr	r3, [pc, #56]	; (80062ac <ethernetif_update_config+0xf4>)
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	085b      	lsrs	r3, r3, #1
 8006276:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8006278:	4313      	orrs	r3, r2
 800627a:	b29b      	uxth	r3, r3
 800627c:	461a      	mov	r2, r3
 800627e:	2100      	movs	r1, #0
 8006280:	480a      	ldr	r0, [pc, #40]	; (80062ac <ethernetif_update_config+0xf4>)
 8006282:	f7fc fac1 	bl	8002808 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8006286:	2100      	movs	r1, #0
 8006288:	4808      	ldr	r0, [pc, #32]	; (80062ac <ethernetif_update_config+0xf4>)
 800628a:	f7fc fb81 	bl	8002990 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800628e:	4807      	ldr	r0, [pc, #28]	; (80062ac <ethernetif_update_config+0xf4>)
 8006290:	f7fc fb20 	bl	80028d4 <HAL_ETH_Start>
 8006294:	e002      	b.n	800629c <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8006296:	4805      	ldr	r0, [pc, #20]	; (80062ac <ethernetif_update_config+0xf4>)
 8006298:	f7fc fb4b 	bl	8002932 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 f807 	bl	80062b0 <ethernetif_notify_conn_changed>
}
 80062a2:	bf00      	nop
 80062a4:	3710      	adds	r7, #16
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	20003a04 	.word	0x20003a04

080062b0 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	4603      	mov	r3, r0
 80062cc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80062ce:	2300      	movs	r3, #0
 80062d0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80062d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80062d6:	2b84      	cmp	r3, #132	; 0x84
 80062d8:	d005      	beq.n	80062e6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80062da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	4413      	add	r3, r2
 80062e2:	3303      	adds	r3, #3
 80062e4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80062e6:	68fb      	ldr	r3, [r7, #12]
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3714      	adds	r7, #20
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062fa:	f3ef 8305 	mrs	r3, IPSR
 80062fe:	607b      	str	r3, [r7, #4]
  return(result);
 8006300:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006302:	2b00      	cmp	r3, #0
 8006304:	bf14      	ite	ne
 8006306:	2301      	movne	r3, #1
 8006308:	2300      	moveq	r3, #0
 800630a:	b2db      	uxtb	r3, r3
}
 800630c:	4618      	mov	r0, r3
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800631c:	f7ff ffea 	bl	80062f4 <inHandlerMode>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d003      	beq.n	800632e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8006326:	f001 ff87 	bl	8008238 <xTaskGetTickCountFromISR>
 800632a:	4603      	mov	r3, r0
 800632c:	e002      	b.n	8006334 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800632e:	f001 ff73 	bl	8008218 <xTaskGetTickCount>
 8006332:	4603      	mov	r3, r0
  }
}
 8006334:	4618      	mov	r0, r3
 8006336:	bd80      	pop	{r7, pc}

08006338 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800633a:	b089      	sub	sp, #36	; 0x24
 800633c:	af04      	add	r7, sp, #16
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d020      	beq.n	800638c <osThreadCreate+0x54>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d01c      	beq.n	800638c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	685c      	ldr	r4, [r3, #4]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681d      	ldr	r5, [r3, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	691e      	ldr	r6, [r3, #16]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006364:	4618      	mov	r0, r3
 8006366:	f7ff ffad 	bl	80062c4 <makeFreeRtosPriority>
 800636a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006374:	9202      	str	r2, [sp, #8]
 8006376:	9301      	str	r3, [sp, #4]
 8006378:	9100      	str	r1, [sp, #0]
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	4632      	mov	r2, r6
 800637e:	4629      	mov	r1, r5
 8006380:	4620      	mov	r0, r4
 8006382:	f001 fbc9 	bl	8007b18 <xTaskCreateStatic>
 8006386:	4603      	mov	r3, r0
 8006388:	60fb      	str	r3, [r7, #12]
 800638a:	e01c      	b.n	80063c6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	685c      	ldr	r4, [r3, #4]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006398:	b29e      	uxth	r6, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80063a0:	4618      	mov	r0, r3
 80063a2:	f7ff ff8f 	bl	80062c4 <makeFreeRtosPriority>
 80063a6:	4602      	mov	r2, r0
 80063a8:	f107 030c 	add.w	r3, r7, #12
 80063ac:	9301      	str	r3, [sp, #4]
 80063ae:	9200      	str	r2, [sp, #0]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	4632      	mov	r2, r6
 80063b4:	4629      	mov	r1, r5
 80063b6:	4620      	mov	r0, r4
 80063b8:	f001 fc11 	bl	8007bde <xTaskCreate>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d001      	beq.n	80063c6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80063c2:	2300      	movs	r3, #0
 80063c4:	e000      	b.n	80063c8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80063c6:	68fb      	ldr	r3, [r7, #12]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3714      	adds	r7, #20
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080063d0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d001      	beq.n	80063e6 <osDelay+0x16>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	e000      	b.n	80063e8 <osDelay+0x18>
 80063e6:	2301      	movs	r3, #1
 80063e8:	4618      	mov	r0, r3
 80063ea:	f001 fdc7 	bl	8007f7c <vTaskDelay>
  
  return osOK;
 80063ee:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d007      	beq.n	8006418 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	4619      	mov	r1, r3
 800640e:	2001      	movs	r0, #1
 8006410:	f000 fc95 	bl	8006d3e <xQueueCreateMutexStatic>
 8006414:	4603      	mov	r3, r0
 8006416:	e003      	b.n	8006420 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006418:	2001      	movs	r0, #1
 800641a:	f000 fc78 	bl	8006d0e <xQueueCreateMutex>
 800641e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8006420:	4618      	mov	r0, r3
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006432:	2300      	movs	r3, #0
 8006434:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <osMutexWait+0x18>
    return osErrorParameter;
 800643c:	2380      	movs	r3, #128	; 0x80
 800643e:	e03a      	b.n	80064b6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8006440:	2300      	movs	r3, #0
 8006442:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644a:	d103      	bne.n	8006454 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800644c:	f04f 33ff 	mov.w	r3, #4294967295
 8006450:	60fb      	str	r3, [r7, #12]
 8006452:	e009      	b.n	8006468 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d006      	beq.n	8006468 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d101      	bne.n	8006468 <osMutexWait+0x40>
      ticks = 1;
 8006464:	2301      	movs	r3, #1
 8006466:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006468:	f7ff ff44 	bl	80062f4 <inHandlerMode>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d017      	beq.n	80064a2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006472:	f107 0308 	add.w	r3, r7, #8
 8006476:	461a      	mov	r2, r3
 8006478:	2100      	movs	r1, #0
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f001 f8b0 	bl	80075e0 <xQueueReceiveFromISR>
 8006480:	4603      	mov	r3, r0
 8006482:	2b01      	cmp	r3, #1
 8006484:	d001      	beq.n	800648a <osMutexWait+0x62>
      return osErrorOS;
 8006486:	23ff      	movs	r3, #255	; 0xff
 8006488:	e015      	b.n	80064b6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d011      	beq.n	80064b4 <osMutexWait+0x8c>
 8006490:	4b0b      	ldr	r3, [pc, #44]	; (80064c0 <osMutexWait+0x98>)
 8006492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006496:	601a      	str	r2, [r3, #0]
 8006498:	f3bf 8f4f 	dsb	sy
 800649c:	f3bf 8f6f 	isb	sy
 80064a0:	e008      	b.n	80064b4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80064a2:	68f9      	ldr	r1, [r7, #12]
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 ff87 	bl	80073b8 <xQueueSemaphoreTake>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d001      	beq.n	80064b4 <osMutexWait+0x8c>
    return osErrorOS;
 80064b0:	23ff      	movs	r3, #255	; 0xff
 80064b2:	e000      	b.n	80064b6 <osMutexWait+0x8e>
  }
  
  return osOK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	e000ed04 	.word	0xe000ed04

080064c4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80064cc:	2300      	movs	r3, #0
 80064ce:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80064d0:	2300      	movs	r3, #0
 80064d2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80064d4:	f7ff ff0e 	bl	80062f4 <inHandlerMode>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d016      	beq.n	800650c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80064de:	f107 0308 	add.w	r3, r7, #8
 80064e2:	4619      	mov	r1, r3
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 fdeb 	bl	80070c0 <xQueueGiveFromISR>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d001      	beq.n	80064f4 <osMutexRelease+0x30>
      return osErrorOS;
 80064f0:	23ff      	movs	r3, #255	; 0xff
 80064f2:	e017      	b.n	8006524 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d013      	beq.n	8006522 <osMutexRelease+0x5e>
 80064fa:	4b0c      	ldr	r3, [pc, #48]	; (800652c <osMutexRelease+0x68>)
 80064fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006500:	601a      	str	r2, [r3, #0]
 8006502:	f3bf 8f4f 	dsb	sy
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	e00a      	b.n	8006522 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800650c:	2300      	movs	r3, #0
 800650e:	2200      	movs	r2, #0
 8006510:	2100      	movs	r1, #0
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 fc2e 	bl	8006d74 <xQueueGenericSend>
 8006518:	4603      	mov	r3, r0
 800651a:	2b01      	cmp	r3, #1
 800651c:	d001      	beq.n	8006522 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800651e:	23ff      	movs	r3, #255	; 0xff
 8006520:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8006522:	68fb      	ldr	r3, [r7, #12]
}
 8006524:	4618      	mov	r0, r3
 8006526:	3710      	adds	r7, #16
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}
 800652c:	e000ed04 	.word	0xe000ed04

08006530 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006530:	b580      	push	{r7, lr}
 8006532:	b086      	sub	sp, #24
 8006534:	af02      	add	r7, sp, #8
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d00f      	beq.n	8006562 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d10a      	bne.n	800655e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	2203      	movs	r2, #3
 800654e:	9200      	str	r2, [sp, #0]
 8006550:	2200      	movs	r2, #0
 8006552:	2100      	movs	r1, #0
 8006554:	2001      	movs	r0, #1
 8006556:	f000 fad9 	bl	8006b0c <xQueueGenericCreateStatic>
 800655a:	4603      	mov	r3, r0
 800655c:	e016      	b.n	800658c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800655e:	2300      	movs	r3, #0
 8006560:	e014      	b.n	800658c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	2b01      	cmp	r3, #1
 8006566:	d110      	bne.n	800658a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8006568:	2203      	movs	r2, #3
 800656a:	2100      	movs	r1, #0
 800656c:	2001      	movs	r0, #1
 800656e:	f000 fb4f 	bl	8006c10 <xQueueGenericCreate>
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d005      	beq.n	8006586 <osSemaphoreCreate+0x56>
 800657a:	2300      	movs	r3, #0
 800657c:	2200      	movs	r2, #0
 800657e:	2100      	movs	r1, #0
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f000 fbf7 	bl	8006d74 <xQueueGenericSend>
      return sema;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	e000      	b.n	800658c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800658a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800658c:	4618      	mov	r0, r3
 800658e:	3710      	adds	r7, #16
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800659e:	2300      	movs	r3, #0
 80065a0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d101      	bne.n	80065ac <osSemaphoreWait+0x18>
    return osErrorParameter;
 80065a8:	2380      	movs	r3, #128	; 0x80
 80065aa:	e03a      	b.n	8006622 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80065ac:	2300      	movs	r3, #0
 80065ae:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b6:	d103      	bne.n	80065c0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80065b8:	f04f 33ff 	mov.w	r3, #4294967295
 80065bc:	60fb      	str	r3, [r7, #12]
 80065be:	e009      	b.n	80065d4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d006      	beq.n	80065d4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d101      	bne.n	80065d4 <osSemaphoreWait+0x40>
      ticks = 1;
 80065d0:	2301      	movs	r3, #1
 80065d2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80065d4:	f7ff fe8e 	bl	80062f4 <inHandlerMode>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d017      	beq.n	800660e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80065de:	f107 0308 	add.w	r3, r7, #8
 80065e2:	461a      	mov	r2, r3
 80065e4:	2100      	movs	r1, #0
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 fffa 	bl	80075e0 <xQueueReceiveFromISR>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d001      	beq.n	80065f6 <osSemaphoreWait+0x62>
      return osErrorOS;
 80065f2:	23ff      	movs	r3, #255	; 0xff
 80065f4:	e015      	b.n	8006622 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d011      	beq.n	8006620 <osSemaphoreWait+0x8c>
 80065fc:	4b0b      	ldr	r3, [pc, #44]	; (800662c <osSemaphoreWait+0x98>)
 80065fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006602:	601a      	str	r2, [r3, #0]
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	f3bf 8f6f 	isb	sy
 800660c:	e008      	b.n	8006620 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800660e:	68f9      	ldr	r1, [r7, #12]
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 fed1 	bl	80073b8 <xQueueSemaphoreTake>
 8006616:	4603      	mov	r3, r0
 8006618:	2b01      	cmp	r3, #1
 800661a:	d001      	beq.n	8006620 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800661c:	23ff      	movs	r3, #255	; 0xff
 800661e:	e000      	b.n	8006622 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3710      	adds	r7, #16
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	e000ed04 	.word	0xe000ed04

08006630 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006638:	2300      	movs	r3, #0
 800663a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800663c:	2300      	movs	r3, #0
 800663e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8006640:	f7ff fe58 	bl	80062f4 <inHandlerMode>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d016      	beq.n	8006678 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800664a:	f107 0308 	add.w	r3, r7, #8
 800664e:	4619      	mov	r1, r3
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 fd35 	bl	80070c0 <xQueueGiveFromISR>
 8006656:	4603      	mov	r3, r0
 8006658:	2b01      	cmp	r3, #1
 800665a:	d001      	beq.n	8006660 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800665c:	23ff      	movs	r3, #255	; 0xff
 800665e:	e017      	b.n	8006690 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d013      	beq.n	800668e <osSemaphoreRelease+0x5e>
 8006666:	4b0c      	ldr	r3, [pc, #48]	; (8006698 <osSemaphoreRelease+0x68>)
 8006668:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800666c:	601a      	str	r2, [r3, #0]
 800666e:	f3bf 8f4f 	dsb	sy
 8006672:	f3bf 8f6f 	isb	sy
 8006676:	e00a      	b.n	800668e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8006678:	2300      	movs	r3, #0
 800667a:	2200      	movs	r2, #0
 800667c:	2100      	movs	r1, #0
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 fb78 	bl	8006d74 <xQueueGenericSend>
 8006684:	4603      	mov	r3, r0
 8006686:	2b01      	cmp	r3, #1
 8006688:	d001      	beq.n	800668e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800668a:	23ff      	movs	r3, #255	; 0xff
 800668c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800668e:	68fb      	ldr	r3, [r7, #12]
}
 8006690:	4618      	mov	r0, r3
 8006692:	3710      	adds	r7, #16
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	e000ed04 	.word	0xe000ed04

0800669c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80066a4:	f7ff fe26 	bl	80062f4 <inHandlerMode>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d001      	beq.n	80066b2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 80066ae:	2382      	movs	r3, #130	; 0x82
 80066b0:	e003      	b.n	80066ba <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f001 f85a 	bl	800776c <vQueueDelete>

  return osOK; 
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3708      	adds	r7, #8
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80066c2:	b590      	push	{r4, r7, lr}
 80066c4:	b085      	sub	sp, #20
 80066c6:	af02      	add	r7, sp, #8
 80066c8:	6078      	str	r0, [r7, #4]
 80066ca:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d011      	beq.n	80066f8 <osMessageCreate+0x36>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00d      	beq.n	80066f8 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6818      	ldr	r0, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6859      	ldr	r1, [r3, #4]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	689a      	ldr	r2, [r3, #8]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	2400      	movs	r4, #0
 80066ee:	9400      	str	r4, [sp, #0]
 80066f0:	f000 fa0c 	bl	8006b0c <xQueueGenericCreateStatic>
 80066f4:	4603      	mov	r3, r0
 80066f6:	e008      	b.n	800670a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6818      	ldr	r0, [r3, #0]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	4619      	mov	r1, r3
 8006704:	f000 fa84 	bl	8006c10 <xQueueGenericCreate>
 8006708:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800670a:	4618      	mov	r0, r3
 800670c:	370c      	adds	r7, #12
 800670e:	46bd      	mov	sp, r7
 8006710:	bd90      	pop	{r4, r7, pc}
	...

08006714 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b086      	sub	sp, #24
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006720:	2300      	movs	r3, #0
 8006722:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d101      	bne.n	8006732 <osMessagePut+0x1e>
    ticks = 1;
 800672e:	2301      	movs	r3, #1
 8006730:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8006732:	f7ff fddf 	bl	80062f4 <inHandlerMode>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d018      	beq.n	800676e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800673c:	f107 0210 	add.w	r2, r7, #16
 8006740:	f107 0108 	add.w	r1, r7, #8
 8006744:	2300      	movs	r3, #0
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	f000 fc1a 	bl	8006f80 <xQueueGenericSendFromISR>
 800674c:	4603      	mov	r3, r0
 800674e:	2b01      	cmp	r3, #1
 8006750:	d001      	beq.n	8006756 <osMessagePut+0x42>
      return osErrorOS;
 8006752:	23ff      	movs	r3, #255	; 0xff
 8006754:	e018      	b.n	8006788 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d014      	beq.n	8006786 <osMessagePut+0x72>
 800675c:	4b0c      	ldr	r3, [pc, #48]	; (8006790 <osMessagePut+0x7c>)
 800675e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006762:	601a      	str	r2, [r3, #0]
 8006764:	f3bf 8f4f 	dsb	sy
 8006768:	f3bf 8f6f 	isb	sy
 800676c:	e00b      	b.n	8006786 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800676e:	f107 0108 	add.w	r1, r7, #8
 8006772:	2300      	movs	r3, #0
 8006774:	697a      	ldr	r2, [r7, #20]
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f000 fafc 	bl	8006d74 <xQueueGenericSend>
 800677c:	4603      	mov	r3, r0
 800677e:	2b01      	cmp	r3, #1
 8006780:	d001      	beq.n	8006786 <osMessagePut+0x72>
      return osErrorOS;
 8006782:	23ff      	movs	r3, #255	; 0xff
 8006784:	e000      	b.n	8006788 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3718      	adds	r7, #24
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}
 8006790:	e000ed04 	.word	0xe000ed04

08006794 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8006794:	b590      	push	{r4, r7, lr}
 8006796:	b08b      	sub	sp, #44	; 0x2c
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80067a4:	2300      	movs	r3, #0
 80067a6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d10a      	bne.n	80067c4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80067ae:	2380      	movs	r3, #128	; 0x80
 80067b0:	617b      	str	r3, [r7, #20]
    return event;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	461c      	mov	r4, r3
 80067b6:	f107 0314 	add.w	r3, r7, #20
 80067ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80067be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80067c2:	e054      	b.n	800686e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80067c4:	2300      	movs	r3, #0
 80067c6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80067c8:	2300      	movs	r3, #0
 80067ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d2:	d103      	bne.n	80067dc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80067d4:	f04f 33ff 	mov.w	r3, #4294967295
 80067d8:	627b      	str	r3, [r7, #36]	; 0x24
 80067da:	e009      	b.n	80067f0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d006      	beq.n	80067f0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80067e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d101      	bne.n	80067f0 <osMessageGet+0x5c>
      ticks = 1;
 80067ec:	2301      	movs	r3, #1
 80067ee:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80067f0:	f7ff fd80 	bl	80062f4 <inHandlerMode>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d01c      	beq.n	8006834 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80067fa:	f107 0220 	add.w	r2, r7, #32
 80067fe:	f107 0314 	add.w	r3, r7, #20
 8006802:	3304      	adds	r3, #4
 8006804:	4619      	mov	r1, r3
 8006806:	68b8      	ldr	r0, [r7, #8]
 8006808:	f000 feea 	bl	80075e0 <xQueueReceiveFromISR>
 800680c:	4603      	mov	r3, r0
 800680e:	2b01      	cmp	r3, #1
 8006810:	d102      	bne.n	8006818 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8006812:	2310      	movs	r3, #16
 8006814:	617b      	str	r3, [r7, #20]
 8006816:	e001      	b.n	800681c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8006818:	2300      	movs	r3, #0
 800681a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800681c:	6a3b      	ldr	r3, [r7, #32]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d01d      	beq.n	800685e <osMessageGet+0xca>
 8006822:	4b15      	ldr	r3, [pc, #84]	; (8006878 <osMessageGet+0xe4>)
 8006824:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006828:	601a      	str	r2, [r3, #0]
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	f3bf 8f6f 	isb	sy
 8006832:	e014      	b.n	800685e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8006834:	f107 0314 	add.w	r3, r7, #20
 8006838:	3304      	adds	r3, #4
 800683a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800683c:	4619      	mov	r1, r3
 800683e:	68b8      	ldr	r0, [r7, #8]
 8006840:	f000 fcd4 	bl	80071ec <xQueueReceive>
 8006844:	4603      	mov	r3, r0
 8006846:	2b01      	cmp	r3, #1
 8006848:	d102      	bne.n	8006850 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800684a:	2310      	movs	r3, #16
 800684c:	617b      	str	r3, [r7, #20]
 800684e:	e006      	b.n	800685e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006852:	2b00      	cmp	r3, #0
 8006854:	d101      	bne.n	800685a <osMessageGet+0xc6>
 8006856:	2300      	movs	r3, #0
 8006858:	e000      	b.n	800685c <osMessageGet+0xc8>
 800685a:	2340      	movs	r3, #64	; 0x40
 800685c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	461c      	mov	r4, r3
 8006862:	f107 0314 	add.w	r3, r7, #20
 8006866:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800686a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	372c      	adds	r7, #44	; 0x2c
 8006872:	46bd      	mov	sp, r7
 8006874:	bd90      	pop	{r4, r7, pc}
 8006876:	bf00      	nop
 8006878:	e000ed04 	.word	0xe000ed04

0800687c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006884:	f7ff fd36 	bl	80062f4 <inHandlerMode>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d004      	beq.n	8006898 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 ff4c 	bl	800772c <uxQueueMessagesWaitingFromISR>
 8006894:	4603      	mov	r3, r0
 8006896:	e003      	b.n	80068a0 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 ff27 	bl	80076ec <uxQueueMessagesWaiting>
 800689e:	4603      	mov	r3, r0
  }
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3708      	adds	r7, #8
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80068b0:	f7ff fd20 	bl	80062f4 <inHandlerMode>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d001      	beq.n	80068be <osMessageDelete+0x16>
    return osErrorISR;
 80068ba:	2382      	movs	r3, #130	; 0x82
 80068bc:	e003      	b.n	80068c6 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 ff54 	bl	800776c <vQueueDelete>

  return osOK; 
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3708      	adds	r7, #8
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80068ce:	b480      	push	{r7}
 80068d0:	b083      	sub	sp, #12
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f103 0208 	add.w	r2, r3, #8
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f04f 32ff 	mov.w	r2, #4294967295
 80068e6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f103 0208 	add.w	r2, r3, #8
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f103 0208 	add.w	r2, r3, #8
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006902:	bf00      	nop
 8006904:	370c      	adds	r7, #12
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr

0800690e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800690e:	b480      	push	{r7}
 8006910:	b083      	sub	sp, #12
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	689a      	ldr	r2, [r3, #8]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	683a      	ldr	r2, [r7, #0]
 800694c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	683a      	ldr	r2, [r7, #0]
 8006952:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	1c5a      	adds	r2, r3, #1
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	601a      	str	r2, [r3, #0]
}
 8006964:	bf00      	nop
 8006966:	3714      	adds	r7, #20
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006970:	b480      	push	{r7}
 8006972:	b085      	sub	sp, #20
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006986:	d103      	bne.n	8006990 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	60fb      	str	r3, [r7, #12]
 800698e:	e00c      	b.n	80069aa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	3308      	adds	r3, #8
 8006994:	60fb      	str	r3, [r7, #12]
 8006996:	e002      	b.n	800699e <vListInsert+0x2e>
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	60fb      	str	r3, [r7, #12]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68ba      	ldr	r2, [r7, #8]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d2f6      	bcs.n	8006998 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	685a      	ldr	r2, [r3, #4]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	683a      	ldr	r2, [r7, #0]
 80069b8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	683a      	ldr	r2, [r7, #0]
 80069c4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	1c5a      	adds	r2, r3, #1
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	601a      	str	r2, [r3, #0]
}
 80069d6:	bf00      	nop
 80069d8:	3714      	adds	r7, #20
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr

080069e2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80069e2:	b480      	push	{r7}
 80069e4:	b085      	sub	sp, #20
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	6892      	ldr	r2, [r2, #8]
 80069f8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	6852      	ldr	r2, [r2, #4]
 8006a02:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d103      	bne.n	8006a16 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	689a      	ldr	r2, [r3, #8]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	1e5a      	subs	r2, r3, #1
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3714      	adds	r7, #20
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
	...

08006a38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d10c      	bne.n	8006a66 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a50:	b672      	cpsid	i
 8006a52:	f383 8811 	msr	BASEPRI, r3
 8006a56:	f3bf 8f6f 	isb	sy
 8006a5a:	f3bf 8f4f 	dsb	sy
 8006a5e:	b662      	cpsie	i
 8006a60:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006a62:	bf00      	nop
 8006a64:	e7fe      	b.n	8006a64 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006a66:	f002 fe31 	bl	80096cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a72:	68f9      	ldr	r1, [r7, #12]
 8006a74:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006a76:	fb01 f303 	mul.w	r3, r1, r3
 8006a7a:	441a      	add	r2, r3
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a96:	3b01      	subs	r3, #1
 8006a98:	68f9      	ldr	r1, [r7, #12]
 8006a9a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006a9c:	fb01 f303 	mul.w	r3, r1, r3
 8006aa0:	441a      	add	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	22ff      	movs	r2, #255	; 0xff
 8006aaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	22ff      	movs	r2, #255	; 0xff
 8006ab2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d114      	bne.n	8006ae6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d01a      	beq.n	8006afa <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	3310      	adds	r3, #16
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f001 fd4d 	bl	8008568 <xTaskRemoveFromEventList>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d012      	beq.n	8006afa <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006ad4:	4b0c      	ldr	r3, [pc, #48]	; (8006b08 <xQueueGenericReset+0xd0>)
 8006ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ada:	601a      	str	r2, [r3, #0]
 8006adc:	f3bf 8f4f 	dsb	sy
 8006ae0:	f3bf 8f6f 	isb	sy
 8006ae4:	e009      	b.n	8006afa <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	3310      	adds	r3, #16
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7ff feef 	bl	80068ce <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	3324      	adds	r3, #36	; 0x24
 8006af4:	4618      	mov	r0, r3
 8006af6:	f7ff feea 	bl	80068ce <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006afa:	f002 fe1b 	bl	8009734 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006afe:	2301      	movs	r3, #1
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3710      	adds	r7, #16
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	e000ed04 	.word	0xe000ed04

08006b0c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b08e      	sub	sp, #56	; 0x38
 8006b10:	af02      	add	r7, sp, #8
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
 8006b18:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d10c      	bne.n	8006b3a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8006b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b24:	b672      	cpsid	i
 8006b26:	f383 8811 	msr	BASEPRI, r3
 8006b2a:	f3bf 8f6f 	isb	sy
 8006b2e:	f3bf 8f4f 	dsb	sy
 8006b32:	b662      	cpsie	i
 8006b34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b36:	bf00      	nop
 8006b38:	e7fe      	b.n	8006b38 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d10c      	bne.n	8006b5a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8006b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b44:	b672      	cpsid	i
 8006b46:	f383 8811 	msr	BASEPRI, r3
 8006b4a:	f3bf 8f6f 	isb	sy
 8006b4e:	f3bf 8f4f 	dsb	sy
 8006b52:	b662      	cpsie	i
 8006b54:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b56:	bf00      	nop
 8006b58:	e7fe      	b.n	8006b58 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d002      	beq.n	8006b66 <xQueueGenericCreateStatic+0x5a>
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d001      	beq.n	8006b6a <xQueueGenericCreateStatic+0x5e>
 8006b66:	2301      	movs	r3, #1
 8006b68:	e000      	b.n	8006b6c <xQueueGenericCreateStatic+0x60>
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d10c      	bne.n	8006b8a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8006b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b74:	b672      	cpsid	i
 8006b76:	f383 8811 	msr	BASEPRI, r3
 8006b7a:	f3bf 8f6f 	isb	sy
 8006b7e:	f3bf 8f4f 	dsb	sy
 8006b82:	b662      	cpsie	i
 8006b84:	623b      	str	r3, [r7, #32]
}
 8006b86:	bf00      	nop
 8006b88:	e7fe      	b.n	8006b88 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d102      	bne.n	8006b96 <xQueueGenericCreateStatic+0x8a>
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d101      	bne.n	8006b9a <xQueueGenericCreateStatic+0x8e>
 8006b96:	2301      	movs	r3, #1
 8006b98:	e000      	b.n	8006b9c <xQueueGenericCreateStatic+0x90>
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d10c      	bne.n	8006bba <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8006ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba4:	b672      	cpsid	i
 8006ba6:	f383 8811 	msr	BASEPRI, r3
 8006baa:	f3bf 8f6f 	isb	sy
 8006bae:	f3bf 8f4f 	dsb	sy
 8006bb2:	b662      	cpsie	i
 8006bb4:	61fb      	str	r3, [r7, #28]
}
 8006bb6:	bf00      	nop
 8006bb8:	e7fe      	b.n	8006bb8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006bba:	2350      	movs	r3, #80	; 0x50
 8006bbc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	2b50      	cmp	r3, #80	; 0x50
 8006bc2:	d00c      	beq.n	8006bde <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8006bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc8:	b672      	cpsid	i
 8006bca:	f383 8811 	msr	BASEPRI, r3
 8006bce:	f3bf 8f6f 	isb	sy
 8006bd2:	f3bf 8f4f 	dsb	sy
 8006bd6:	b662      	cpsie	i
 8006bd8:	61bb      	str	r3, [r7, #24]
}
 8006bda:	bf00      	nop
 8006bdc:	e7fe      	b.n	8006bdc <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006bde:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00d      	beq.n	8006c06 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bec:	2201      	movs	r2, #1
 8006bee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006bf2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf8:	9300      	str	r3, [sp, #0]
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	68b9      	ldr	r1, [r7, #8]
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f000 f847 	bl	8006c94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3730      	adds	r7, #48	; 0x30
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b08a      	sub	sp, #40	; 0x28
 8006c14:	af02      	add	r7, sp, #8
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d10c      	bne.n	8006c3e <xQueueGenericCreate+0x2e>
	__asm volatile
 8006c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c28:	b672      	cpsid	i
 8006c2a:	f383 8811 	msr	BASEPRI, r3
 8006c2e:	f3bf 8f6f 	isb	sy
 8006c32:	f3bf 8f4f 	dsb	sy
 8006c36:	b662      	cpsie	i
 8006c38:	613b      	str	r3, [r7, #16]
}
 8006c3a:	bf00      	nop
 8006c3c:	e7fe      	b.n	8006c3c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d102      	bne.n	8006c4a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006c44:	2300      	movs	r3, #0
 8006c46:	61fb      	str	r3, [r7, #28]
 8006c48:	e004      	b.n	8006c54 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	68ba      	ldr	r2, [r7, #8]
 8006c4e:	fb02 f303 	mul.w	r3, r2, r3
 8006c52:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	3350      	adds	r3, #80	; 0x50
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f002 fe63 	bl	8009924 <pvPortMalloc>
 8006c5e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d011      	beq.n	8006c8a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	3350      	adds	r3, #80	; 0x50
 8006c6e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c78:	79fa      	ldrb	r2, [r7, #7]
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	9300      	str	r3, [sp, #0]
 8006c7e:	4613      	mov	r3, r2
 8006c80:	697a      	ldr	r2, [r7, #20]
 8006c82:	68b9      	ldr	r1, [r7, #8]
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f000 f805 	bl	8006c94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006c8a:	69bb      	ldr	r3, [r7, #24]
	}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3720      	adds	r7, #32
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
 8006ca0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d103      	bne.n	8006cb0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	69ba      	ldr	r2, [r7, #24]
 8006cac:	601a      	str	r2, [r3, #0]
 8006cae:	e002      	b.n	8006cb6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	68ba      	ldr	r2, [r7, #8]
 8006cc0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006cc2:	2101      	movs	r1, #1
 8006cc4:	69b8      	ldr	r0, [r7, #24]
 8006cc6:	f7ff feb7 	bl	8006a38 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	78fa      	ldrb	r2, [r7, #3]
 8006cce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006cd2:	bf00      	nop
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}

08006cda <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006cda:	b580      	push	{r7, lr}
 8006cdc:	b082      	sub	sp, #8
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00e      	beq.n	8006d06 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	2100      	movs	r1, #0
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 f837 	bl	8006d74 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006d06:	bf00      	nop
 8006d08:	3708      	adds	r7, #8
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b086      	sub	sp, #24
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	4603      	mov	r3, r0
 8006d16:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	617b      	str	r3, [r7, #20]
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006d20:	79fb      	ldrb	r3, [r7, #7]
 8006d22:	461a      	mov	r2, r3
 8006d24:	6939      	ldr	r1, [r7, #16]
 8006d26:	6978      	ldr	r0, [r7, #20]
 8006d28:	f7ff ff72 	bl	8006c10 <xQueueGenericCreate>
 8006d2c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f7ff ffd3 	bl	8006cda <prvInitialiseMutex>

		return xNewQueue;
 8006d34:	68fb      	ldr	r3, [r7, #12]
	}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3718      	adds	r7, #24
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}

08006d3e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b088      	sub	sp, #32
 8006d42:	af02      	add	r7, sp, #8
 8006d44:	4603      	mov	r3, r0
 8006d46:	6039      	str	r1, [r7, #0]
 8006d48:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	617b      	str	r3, [r7, #20]
 8006d4e:	2300      	movs	r3, #0
 8006d50:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006d52:	79fb      	ldrb	r3, [r7, #7]
 8006d54:	9300      	str	r3, [sp, #0]
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	6939      	ldr	r1, [r7, #16]
 8006d5c:	6978      	ldr	r0, [r7, #20]
 8006d5e:	f7ff fed5 	bl	8006b0c <xQueueGenericCreateStatic>
 8006d62:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f7ff ffb8 	bl	8006cda <prvInitialiseMutex>

		return xNewQueue;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
	}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3718      	adds	r7, #24
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b08e      	sub	sp, #56	; 0x38
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	607a      	str	r2, [r7, #4]
 8006d80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006d82:	2300      	movs	r3, #0
 8006d84:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10c      	bne.n	8006daa <xQueueGenericSend+0x36>
	__asm volatile
 8006d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d94:	b672      	cpsid	i
 8006d96:	f383 8811 	msr	BASEPRI, r3
 8006d9a:	f3bf 8f6f 	isb	sy
 8006d9e:	f3bf 8f4f 	dsb	sy
 8006da2:	b662      	cpsie	i
 8006da4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006da6:	bf00      	nop
 8006da8:	e7fe      	b.n	8006da8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d103      	bne.n	8006db8 <xQueueGenericSend+0x44>
 8006db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d101      	bne.n	8006dbc <xQueueGenericSend+0x48>
 8006db8:	2301      	movs	r3, #1
 8006dba:	e000      	b.n	8006dbe <xQueueGenericSend+0x4a>
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d10c      	bne.n	8006ddc <xQueueGenericSend+0x68>
	__asm volatile
 8006dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc6:	b672      	cpsid	i
 8006dc8:	f383 8811 	msr	BASEPRI, r3
 8006dcc:	f3bf 8f6f 	isb	sy
 8006dd0:	f3bf 8f4f 	dsb	sy
 8006dd4:	b662      	cpsie	i
 8006dd6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006dd8:	bf00      	nop
 8006dda:	e7fe      	b.n	8006dda <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d103      	bne.n	8006dea <xQueueGenericSend+0x76>
 8006de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d101      	bne.n	8006dee <xQueueGenericSend+0x7a>
 8006dea:	2301      	movs	r3, #1
 8006dec:	e000      	b.n	8006df0 <xQueueGenericSend+0x7c>
 8006dee:	2300      	movs	r3, #0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d10c      	bne.n	8006e0e <xQueueGenericSend+0x9a>
	__asm volatile
 8006df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df8:	b672      	cpsid	i
 8006dfa:	f383 8811 	msr	BASEPRI, r3
 8006dfe:	f3bf 8f6f 	isb	sy
 8006e02:	f3bf 8f4f 	dsb	sy
 8006e06:	b662      	cpsie	i
 8006e08:	623b      	str	r3, [r7, #32]
}
 8006e0a:	bf00      	nop
 8006e0c:	e7fe      	b.n	8006e0c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e0e:	f001 fd71 	bl	80088f4 <xTaskGetSchedulerState>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d102      	bne.n	8006e1e <xQueueGenericSend+0xaa>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d101      	bne.n	8006e22 <xQueueGenericSend+0xae>
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e000      	b.n	8006e24 <xQueueGenericSend+0xb0>
 8006e22:	2300      	movs	r3, #0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d10c      	bne.n	8006e42 <xQueueGenericSend+0xce>
	__asm volatile
 8006e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2c:	b672      	cpsid	i
 8006e2e:	f383 8811 	msr	BASEPRI, r3
 8006e32:	f3bf 8f6f 	isb	sy
 8006e36:	f3bf 8f4f 	dsb	sy
 8006e3a:	b662      	cpsie	i
 8006e3c:	61fb      	str	r3, [r7, #28]
}
 8006e3e:	bf00      	nop
 8006e40:	e7fe      	b.n	8006e40 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e42:	f002 fc43 	bl	80096cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d302      	bcc.n	8006e58 <xQueueGenericSend+0xe4>
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d129      	bne.n	8006eac <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e58:	683a      	ldr	r2, [r7, #0]
 8006e5a:	68b9      	ldr	r1, [r7, #8]
 8006e5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e5e:	f000 fcc2 	bl	80077e6 <prvCopyDataToQueue>
 8006e62:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d010      	beq.n	8006e8e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6e:	3324      	adds	r3, #36	; 0x24
 8006e70:	4618      	mov	r0, r3
 8006e72:	f001 fb79 	bl	8008568 <xTaskRemoveFromEventList>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d013      	beq.n	8006ea4 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006e7c:	4b3f      	ldr	r3, [pc, #252]	; (8006f7c <xQueueGenericSend+0x208>)
 8006e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e82:	601a      	str	r2, [r3, #0]
 8006e84:	f3bf 8f4f 	dsb	sy
 8006e88:	f3bf 8f6f 	isb	sy
 8006e8c:	e00a      	b.n	8006ea4 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d007      	beq.n	8006ea4 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006e94:	4b39      	ldr	r3, [pc, #228]	; (8006f7c <xQueueGenericSend+0x208>)
 8006e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e9a:	601a      	str	r2, [r3, #0]
 8006e9c:	f3bf 8f4f 	dsb	sy
 8006ea0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006ea4:	f002 fc46 	bl	8009734 <vPortExitCritical>
				return pdPASS;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e063      	b.n	8006f74 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d103      	bne.n	8006eba <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006eb2:	f002 fc3f 	bl	8009734 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	e05c      	b.n	8006f74 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d106      	bne.n	8006ece <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ec0:	f107 0314 	add.w	r3, r7, #20
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f001 fbb3 	bl	8008630 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ece:	f002 fc31 	bl	8009734 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ed2:	f001 f8f5 	bl	80080c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ed6:	f002 fbf9 	bl	80096cc <vPortEnterCritical>
 8006eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006edc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ee0:	b25b      	sxtb	r3, r3
 8006ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee6:	d103      	bne.n	8006ef0 <xQueueGenericSend+0x17c>
 8006ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ef6:	b25b      	sxtb	r3, r3
 8006ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006efc:	d103      	bne.n	8006f06 <xQueueGenericSend+0x192>
 8006efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f06:	f002 fc15 	bl	8009734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f0a:	1d3a      	adds	r2, r7, #4
 8006f0c:	f107 0314 	add.w	r3, r7, #20
 8006f10:	4611      	mov	r1, r2
 8006f12:	4618      	mov	r0, r3
 8006f14:	f001 fba2 	bl	800865c <xTaskCheckForTimeOut>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d124      	bne.n	8006f68 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006f1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f20:	f000 fd59 	bl	80079d6 <prvIsQueueFull>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d018      	beq.n	8006f5c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2c:	3310      	adds	r3, #16
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	4611      	mov	r1, r2
 8006f32:	4618      	mov	r0, r3
 8006f34:	f001 fac4 	bl	80084c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006f38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f3a:	f000 fce4 	bl	8007906 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006f3e:	f001 f8cd 	bl	80080dc <xTaskResumeAll>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f47f af7c 	bne.w	8006e42 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8006f4a:	4b0c      	ldr	r3, [pc, #48]	; (8006f7c <xQueueGenericSend+0x208>)
 8006f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f50:	601a      	str	r2, [r3, #0]
 8006f52:	f3bf 8f4f 	dsb	sy
 8006f56:	f3bf 8f6f 	isb	sy
 8006f5a:	e772      	b.n	8006e42 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006f5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f5e:	f000 fcd2 	bl	8007906 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f62:	f001 f8bb 	bl	80080dc <xTaskResumeAll>
 8006f66:	e76c      	b.n	8006e42 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006f68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f6a:	f000 fccc 	bl	8007906 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f6e:	f001 f8b5 	bl	80080dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006f72:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3738      	adds	r7, #56	; 0x38
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	e000ed04 	.word	0xe000ed04

08006f80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b08e      	sub	sp, #56	; 0x38
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	607a      	str	r2, [r7, #4]
 8006f8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d10c      	bne.n	8006fb2 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8006f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9c:	b672      	cpsid	i
 8006f9e:	f383 8811 	msr	BASEPRI, r3
 8006fa2:	f3bf 8f6f 	isb	sy
 8006fa6:	f3bf 8f4f 	dsb	sy
 8006faa:	b662      	cpsie	i
 8006fac:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006fae:	bf00      	nop
 8006fb0:	e7fe      	b.n	8006fb0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d103      	bne.n	8006fc0 <xQueueGenericSendFromISR+0x40>
 8006fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d101      	bne.n	8006fc4 <xQueueGenericSendFromISR+0x44>
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e000      	b.n	8006fc6 <xQueueGenericSendFromISR+0x46>
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d10c      	bne.n	8006fe4 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8006fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fce:	b672      	cpsid	i
 8006fd0:	f383 8811 	msr	BASEPRI, r3
 8006fd4:	f3bf 8f6f 	isb	sy
 8006fd8:	f3bf 8f4f 	dsb	sy
 8006fdc:	b662      	cpsie	i
 8006fde:	623b      	str	r3, [r7, #32]
}
 8006fe0:	bf00      	nop
 8006fe2:	e7fe      	b.n	8006fe2 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d103      	bne.n	8006ff2 <xQueueGenericSendFromISR+0x72>
 8006fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d101      	bne.n	8006ff6 <xQueueGenericSendFromISR+0x76>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e000      	b.n	8006ff8 <xQueueGenericSendFromISR+0x78>
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d10c      	bne.n	8007016 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8006ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007000:	b672      	cpsid	i
 8007002:	f383 8811 	msr	BASEPRI, r3
 8007006:	f3bf 8f6f 	isb	sy
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	b662      	cpsie	i
 8007010:	61fb      	str	r3, [r7, #28]
}
 8007012:	bf00      	nop
 8007014:	e7fe      	b.n	8007014 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007016:	f002 fc41 	bl	800989c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800701a:	f3ef 8211 	mrs	r2, BASEPRI
 800701e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007022:	b672      	cpsid	i
 8007024:	f383 8811 	msr	BASEPRI, r3
 8007028:	f3bf 8f6f 	isb	sy
 800702c:	f3bf 8f4f 	dsb	sy
 8007030:	b662      	cpsie	i
 8007032:	61ba      	str	r2, [r7, #24]
 8007034:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007036:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007038:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800703a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800703e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007042:	429a      	cmp	r2, r3
 8007044:	d302      	bcc.n	800704c <xQueueGenericSendFromISR+0xcc>
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	2b02      	cmp	r3, #2
 800704a:	d12c      	bne.n	80070a6 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800704c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007056:	683a      	ldr	r2, [r7, #0]
 8007058:	68b9      	ldr	r1, [r7, #8]
 800705a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800705c:	f000 fbc3 	bl	80077e6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007060:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007068:	d112      	bne.n	8007090 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800706a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706e:	2b00      	cmp	r3, #0
 8007070:	d016      	beq.n	80070a0 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007074:	3324      	adds	r3, #36	; 0x24
 8007076:	4618      	mov	r0, r3
 8007078:	f001 fa76 	bl	8008568 <xTaskRemoveFromEventList>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00e      	beq.n	80070a0 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d00b      	beq.n	80070a0 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	601a      	str	r2, [r3, #0]
 800708e:	e007      	b.n	80070a0 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007090:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007094:	3301      	adds	r3, #1
 8007096:	b2db      	uxtb	r3, r3
 8007098:	b25a      	sxtb	r2, r3
 800709a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80070a0:	2301      	movs	r3, #1
 80070a2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80070a4:	e001      	b.n	80070aa <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80070a6:	2300      	movs	r3, #0
 80070a8:	637b      	str	r3, [r7, #52]	; 0x34
 80070aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ac:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80070b4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80070b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3738      	adds	r7, #56	; 0x38
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b08e      	sub	sp, #56	; 0x38
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80070ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d10c      	bne.n	80070ee <xQueueGiveFromISR+0x2e>
	__asm volatile
 80070d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d8:	b672      	cpsid	i
 80070da:	f383 8811 	msr	BASEPRI, r3
 80070de:	f3bf 8f6f 	isb	sy
 80070e2:	f3bf 8f4f 	dsb	sy
 80070e6:	b662      	cpsie	i
 80070e8:	623b      	str	r3, [r7, #32]
}
 80070ea:	bf00      	nop
 80070ec:	e7fe      	b.n	80070ec <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80070ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00c      	beq.n	8007110 <xQueueGiveFromISR+0x50>
	__asm volatile
 80070f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070fa:	b672      	cpsid	i
 80070fc:	f383 8811 	msr	BASEPRI, r3
 8007100:	f3bf 8f6f 	isb	sy
 8007104:	f3bf 8f4f 	dsb	sy
 8007108:	b662      	cpsie	i
 800710a:	61fb      	str	r3, [r7, #28]
}
 800710c:	bf00      	nop
 800710e:	e7fe      	b.n	800710e <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d103      	bne.n	8007120 <xQueueGiveFromISR+0x60>
 8007118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d101      	bne.n	8007124 <xQueueGiveFromISR+0x64>
 8007120:	2301      	movs	r3, #1
 8007122:	e000      	b.n	8007126 <xQueueGiveFromISR+0x66>
 8007124:	2300      	movs	r3, #0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d10c      	bne.n	8007144 <xQueueGiveFromISR+0x84>
	__asm volatile
 800712a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712e:	b672      	cpsid	i
 8007130:	f383 8811 	msr	BASEPRI, r3
 8007134:	f3bf 8f6f 	isb	sy
 8007138:	f3bf 8f4f 	dsb	sy
 800713c:	b662      	cpsie	i
 800713e:	61bb      	str	r3, [r7, #24]
}
 8007140:	bf00      	nop
 8007142:	e7fe      	b.n	8007142 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007144:	f002 fbaa 	bl	800989c <vPortValidateInterruptPriority>
	__asm volatile
 8007148:	f3ef 8211 	mrs	r2, BASEPRI
 800714c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007150:	b672      	cpsid	i
 8007152:	f383 8811 	msr	BASEPRI, r3
 8007156:	f3bf 8f6f 	isb	sy
 800715a:	f3bf 8f4f 	dsb	sy
 800715e:	b662      	cpsie	i
 8007160:	617a      	str	r2, [r7, #20]
 8007162:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007164:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007166:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800716c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800716e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007172:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007174:	429a      	cmp	r2, r3
 8007176:	d22b      	bcs.n	80071d0 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800717e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007184:	1c5a      	adds	r2, r3, #1
 8007186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007188:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800718a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800718e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007192:	d112      	bne.n	80071ba <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007198:	2b00      	cmp	r3, #0
 800719a:	d016      	beq.n	80071ca <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800719c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719e:	3324      	adds	r3, #36	; 0x24
 80071a0:	4618      	mov	r0, r3
 80071a2:	f001 f9e1 	bl	8008568 <xTaskRemoveFromEventList>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00e      	beq.n	80071ca <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d00b      	beq.n	80071ca <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	2201      	movs	r2, #1
 80071b6:	601a      	str	r2, [r3, #0]
 80071b8:	e007      	b.n	80071ca <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80071ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071be:	3301      	adds	r3, #1
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	b25a      	sxtb	r2, r3
 80071c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80071ca:	2301      	movs	r3, #1
 80071cc:	637b      	str	r3, [r7, #52]	; 0x34
 80071ce:	e001      	b.n	80071d4 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80071d0:	2300      	movs	r3, #0
 80071d2:	637b      	str	r3, [r7, #52]	; 0x34
 80071d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d6:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f383 8811 	msr	BASEPRI, r3
}
 80071de:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80071e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3738      	adds	r7, #56	; 0x38
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
	...

080071ec <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b08c      	sub	sp, #48	; 0x30
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80071f8:	2300      	movs	r3, #0
 80071fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007202:	2b00      	cmp	r3, #0
 8007204:	d10c      	bne.n	8007220 <xQueueReceive+0x34>
	__asm volatile
 8007206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720a:	b672      	cpsid	i
 800720c:	f383 8811 	msr	BASEPRI, r3
 8007210:	f3bf 8f6f 	isb	sy
 8007214:	f3bf 8f4f 	dsb	sy
 8007218:	b662      	cpsie	i
 800721a:	623b      	str	r3, [r7, #32]
}
 800721c:	bf00      	nop
 800721e:	e7fe      	b.n	800721e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d103      	bne.n	800722e <xQueueReceive+0x42>
 8007226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722a:	2b00      	cmp	r3, #0
 800722c:	d101      	bne.n	8007232 <xQueueReceive+0x46>
 800722e:	2301      	movs	r3, #1
 8007230:	e000      	b.n	8007234 <xQueueReceive+0x48>
 8007232:	2300      	movs	r3, #0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d10c      	bne.n	8007252 <xQueueReceive+0x66>
	__asm volatile
 8007238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723c:	b672      	cpsid	i
 800723e:	f383 8811 	msr	BASEPRI, r3
 8007242:	f3bf 8f6f 	isb	sy
 8007246:	f3bf 8f4f 	dsb	sy
 800724a:	b662      	cpsie	i
 800724c:	61fb      	str	r3, [r7, #28]
}
 800724e:	bf00      	nop
 8007250:	e7fe      	b.n	8007250 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007252:	f001 fb4f 	bl	80088f4 <xTaskGetSchedulerState>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d102      	bne.n	8007262 <xQueueReceive+0x76>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d101      	bne.n	8007266 <xQueueReceive+0x7a>
 8007262:	2301      	movs	r3, #1
 8007264:	e000      	b.n	8007268 <xQueueReceive+0x7c>
 8007266:	2300      	movs	r3, #0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d10c      	bne.n	8007286 <xQueueReceive+0x9a>
	__asm volatile
 800726c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007270:	b672      	cpsid	i
 8007272:	f383 8811 	msr	BASEPRI, r3
 8007276:	f3bf 8f6f 	isb	sy
 800727a:	f3bf 8f4f 	dsb	sy
 800727e:	b662      	cpsie	i
 8007280:	61bb      	str	r3, [r7, #24]
}
 8007282:	bf00      	nop
 8007284:	e7fe      	b.n	8007284 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007286:	f002 fa21 	bl	80096cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800728a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800728e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007292:	2b00      	cmp	r3, #0
 8007294:	d01f      	beq.n	80072d6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007296:	68b9      	ldr	r1, [r7, #8]
 8007298:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800729a:	f000 fb0e 	bl	80078ba <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800729e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a0:	1e5a      	subs	r2, r3, #1
 80072a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00f      	beq.n	80072ce <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b0:	3310      	adds	r3, #16
 80072b2:	4618      	mov	r0, r3
 80072b4:	f001 f958 	bl	8008568 <xTaskRemoveFromEventList>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d007      	beq.n	80072ce <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80072be:	4b3d      	ldr	r3, [pc, #244]	; (80073b4 <xQueueReceive+0x1c8>)
 80072c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072c4:	601a      	str	r2, [r3, #0]
 80072c6:	f3bf 8f4f 	dsb	sy
 80072ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80072ce:	f002 fa31 	bl	8009734 <vPortExitCritical>
				return pdPASS;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e069      	b.n	80073aa <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d103      	bne.n	80072e4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80072dc:	f002 fa2a 	bl	8009734 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80072e0:	2300      	movs	r3, #0
 80072e2:	e062      	b.n	80073aa <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80072e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d106      	bne.n	80072f8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80072ea:	f107 0310 	add.w	r3, r7, #16
 80072ee:	4618      	mov	r0, r3
 80072f0:	f001 f99e 	bl	8008630 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072f4:	2301      	movs	r3, #1
 80072f6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80072f8:	f002 fa1c 	bl	8009734 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80072fc:	f000 fee0 	bl	80080c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007300:	f002 f9e4 	bl	80096cc <vPortEnterCritical>
 8007304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007306:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800730a:	b25b      	sxtb	r3, r3
 800730c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007310:	d103      	bne.n	800731a <xQueueReceive+0x12e>
 8007312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007314:	2200      	movs	r2, #0
 8007316:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800731a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007320:	b25b      	sxtb	r3, r3
 8007322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007326:	d103      	bne.n	8007330 <xQueueReceive+0x144>
 8007328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732a:	2200      	movs	r2, #0
 800732c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007330:	f002 fa00 	bl	8009734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007334:	1d3a      	adds	r2, r7, #4
 8007336:	f107 0310 	add.w	r3, r7, #16
 800733a:	4611      	mov	r1, r2
 800733c:	4618      	mov	r0, r3
 800733e:	f001 f98d 	bl	800865c <xTaskCheckForTimeOut>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d123      	bne.n	8007390 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007348:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800734a:	f000 fb2e 	bl	80079aa <prvIsQueueEmpty>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d017      	beq.n	8007384 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007356:	3324      	adds	r3, #36	; 0x24
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	4611      	mov	r1, r2
 800735c:	4618      	mov	r0, r3
 800735e:	f001 f8af 	bl	80084c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007362:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007364:	f000 facf 	bl	8007906 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007368:	f000 feb8 	bl	80080dc <xTaskResumeAll>
 800736c:	4603      	mov	r3, r0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d189      	bne.n	8007286 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8007372:	4b10      	ldr	r3, [pc, #64]	; (80073b4 <xQueueReceive+0x1c8>)
 8007374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007378:	601a      	str	r2, [r3, #0]
 800737a:	f3bf 8f4f 	dsb	sy
 800737e:	f3bf 8f6f 	isb	sy
 8007382:	e780      	b.n	8007286 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007384:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007386:	f000 fabe 	bl	8007906 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800738a:	f000 fea7 	bl	80080dc <xTaskResumeAll>
 800738e:	e77a      	b.n	8007286 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007390:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007392:	f000 fab8 	bl	8007906 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007396:	f000 fea1 	bl	80080dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800739a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800739c:	f000 fb05 	bl	80079aa <prvIsQueueEmpty>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	f43f af6f 	beq.w	8007286 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80073a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3730      	adds	r7, #48	; 0x30
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	e000ed04 	.word	0xe000ed04

080073b8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b08e      	sub	sp, #56	; 0x38
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80073c2:	2300      	movs	r3, #0
 80073c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80073ca:	2300      	movs	r3, #0
 80073cc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80073ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d10c      	bne.n	80073ee <xQueueSemaphoreTake+0x36>
	__asm volatile
 80073d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d8:	b672      	cpsid	i
 80073da:	f383 8811 	msr	BASEPRI, r3
 80073de:	f3bf 8f6f 	isb	sy
 80073e2:	f3bf 8f4f 	dsb	sy
 80073e6:	b662      	cpsie	i
 80073e8:	623b      	str	r3, [r7, #32]
}
 80073ea:	bf00      	nop
 80073ec:	e7fe      	b.n	80073ec <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80073ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00c      	beq.n	8007410 <xQueueSemaphoreTake+0x58>
	__asm volatile
 80073f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fa:	b672      	cpsid	i
 80073fc:	f383 8811 	msr	BASEPRI, r3
 8007400:	f3bf 8f6f 	isb	sy
 8007404:	f3bf 8f4f 	dsb	sy
 8007408:	b662      	cpsie	i
 800740a:	61fb      	str	r3, [r7, #28]
}
 800740c:	bf00      	nop
 800740e:	e7fe      	b.n	800740e <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007410:	f001 fa70 	bl	80088f4 <xTaskGetSchedulerState>
 8007414:	4603      	mov	r3, r0
 8007416:	2b00      	cmp	r3, #0
 8007418:	d102      	bne.n	8007420 <xQueueSemaphoreTake+0x68>
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d101      	bne.n	8007424 <xQueueSemaphoreTake+0x6c>
 8007420:	2301      	movs	r3, #1
 8007422:	e000      	b.n	8007426 <xQueueSemaphoreTake+0x6e>
 8007424:	2300      	movs	r3, #0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10c      	bne.n	8007444 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800742a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742e:	b672      	cpsid	i
 8007430:	f383 8811 	msr	BASEPRI, r3
 8007434:	f3bf 8f6f 	isb	sy
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	b662      	cpsie	i
 800743e:	61bb      	str	r3, [r7, #24]
}
 8007440:	bf00      	nop
 8007442:	e7fe      	b.n	8007442 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007444:	f002 f942 	bl	80096cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800744a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800744c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800744e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007450:	2b00      	cmp	r3, #0
 8007452:	d024      	beq.n	800749e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007456:	1e5a      	subs	r2, r3, #1
 8007458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800745c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d104      	bne.n	800746e <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007464:	f001 fc0c 	bl	8008c80 <pvTaskIncrementMutexHeldCount>
 8007468:	4602      	mov	r2, r0
 800746a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800746c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800746e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00f      	beq.n	8007496 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007478:	3310      	adds	r3, #16
 800747a:	4618      	mov	r0, r3
 800747c:	f001 f874 	bl	8008568 <xTaskRemoveFromEventList>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d007      	beq.n	8007496 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007486:	4b55      	ldr	r3, [pc, #340]	; (80075dc <xQueueSemaphoreTake+0x224>)
 8007488:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800748c:	601a      	str	r2, [r3, #0]
 800748e:	f3bf 8f4f 	dsb	sy
 8007492:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007496:	f002 f94d 	bl	8009734 <vPortExitCritical>
				return pdPASS;
 800749a:	2301      	movs	r3, #1
 800749c:	e099      	b.n	80075d2 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d113      	bne.n	80074cc <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80074a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00c      	beq.n	80074c4 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 80074aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ae:	b672      	cpsid	i
 80074b0:	f383 8811 	msr	BASEPRI, r3
 80074b4:	f3bf 8f6f 	isb	sy
 80074b8:	f3bf 8f4f 	dsb	sy
 80074bc:	b662      	cpsie	i
 80074be:	617b      	str	r3, [r7, #20]
}
 80074c0:	bf00      	nop
 80074c2:	e7fe      	b.n	80074c2 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80074c4:	f002 f936 	bl	8009734 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80074c8:	2300      	movs	r3, #0
 80074ca:	e082      	b.n	80075d2 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80074cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d106      	bne.n	80074e0 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074d2:	f107 030c 	add.w	r3, r7, #12
 80074d6:	4618      	mov	r0, r3
 80074d8:	f001 f8aa 	bl	8008630 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80074dc:	2301      	movs	r3, #1
 80074de:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80074e0:	f002 f928 	bl	8009734 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80074e4:	f000 fdec 	bl	80080c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80074e8:	f002 f8f0 	bl	80096cc <vPortEnterCritical>
 80074ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074f2:	b25b      	sxtb	r3, r3
 80074f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f8:	d103      	bne.n	8007502 <xQueueSemaphoreTake+0x14a>
 80074fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007504:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007508:	b25b      	sxtb	r3, r3
 800750a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800750e:	d103      	bne.n	8007518 <xQueueSemaphoreTake+0x160>
 8007510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007512:	2200      	movs	r2, #0
 8007514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007518:	f002 f90c 	bl	8009734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800751c:	463a      	mov	r2, r7
 800751e:	f107 030c 	add.w	r3, r7, #12
 8007522:	4611      	mov	r1, r2
 8007524:	4618      	mov	r0, r3
 8007526:	f001 f899 	bl	800865c <xTaskCheckForTimeOut>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d132      	bne.n	8007596 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007530:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007532:	f000 fa3a 	bl	80079aa <prvIsQueueEmpty>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d026      	beq.n	800758a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800753c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d109      	bne.n	8007558 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8007544:	f002 f8c2 	bl	80096cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	4618      	mov	r0, r3
 800754e:	f001 f9ef 	bl	8008930 <xTaskPriorityInherit>
 8007552:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007554:	f002 f8ee 	bl	8009734 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755a:	3324      	adds	r3, #36	; 0x24
 800755c:	683a      	ldr	r2, [r7, #0]
 800755e:	4611      	mov	r1, r2
 8007560:	4618      	mov	r0, r3
 8007562:	f000 ffad 	bl	80084c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007566:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007568:	f000 f9cd 	bl	8007906 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800756c:	f000 fdb6 	bl	80080dc <xTaskResumeAll>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	f47f af66 	bne.w	8007444 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8007578:	4b18      	ldr	r3, [pc, #96]	; (80075dc <xQueueSemaphoreTake+0x224>)
 800757a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800757e:	601a      	str	r2, [r3, #0]
 8007580:	f3bf 8f4f 	dsb	sy
 8007584:	f3bf 8f6f 	isb	sy
 8007588:	e75c      	b.n	8007444 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800758a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800758c:	f000 f9bb 	bl	8007906 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007590:	f000 fda4 	bl	80080dc <xTaskResumeAll>
 8007594:	e756      	b.n	8007444 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007596:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007598:	f000 f9b5 	bl	8007906 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800759c:	f000 fd9e 	bl	80080dc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80075a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075a2:	f000 fa02 	bl	80079aa <prvIsQueueEmpty>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f43f af4b 	beq.w	8007444 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80075ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d00d      	beq.n	80075d0 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 80075b4:	f002 f88a 	bl	80096cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80075b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075ba:	f000 f8fc 	bl	80077b6 <prvGetDisinheritPriorityAfterTimeout>
 80075be:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80075c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075c6:	4618      	mov	r0, r3
 80075c8:	f001 fabc 	bl	8008b44 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80075cc:	f002 f8b2 	bl	8009734 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80075d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3738      	adds	r7, #56	; 0x38
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	e000ed04 	.word	0xe000ed04

080075e0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b08e      	sub	sp, #56	; 0x38
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80075f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d10c      	bne.n	8007610 <xQueueReceiveFromISR+0x30>
	__asm volatile
 80075f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075fa:	b672      	cpsid	i
 80075fc:	f383 8811 	msr	BASEPRI, r3
 8007600:	f3bf 8f6f 	isb	sy
 8007604:	f3bf 8f4f 	dsb	sy
 8007608:	b662      	cpsie	i
 800760a:	623b      	str	r3, [r7, #32]
}
 800760c:	bf00      	nop
 800760e:	e7fe      	b.n	800760e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d103      	bne.n	800761e <xQueueReceiveFromISR+0x3e>
 8007616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761a:	2b00      	cmp	r3, #0
 800761c:	d101      	bne.n	8007622 <xQueueReceiveFromISR+0x42>
 800761e:	2301      	movs	r3, #1
 8007620:	e000      	b.n	8007624 <xQueueReceiveFromISR+0x44>
 8007622:	2300      	movs	r3, #0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d10c      	bne.n	8007642 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8007628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762c:	b672      	cpsid	i
 800762e:	f383 8811 	msr	BASEPRI, r3
 8007632:	f3bf 8f6f 	isb	sy
 8007636:	f3bf 8f4f 	dsb	sy
 800763a:	b662      	cpsie	i
 800763c:	61fb      	str	r3, [r7, #28]
}
 800763e:	bf00      	nop
 8007640:	e7fe      	b.n	8007640 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007642:	f002 f92b 	bl	800989c <vPortValidateInterruptPriority>
	__asm volatile
 8007646:	f3ef 8211 	mrs	r2, BASEPRI
 800764a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764e:	b672      	cpsid	i
 8007650:	f383 8811 	msr	BASEPRI, r3
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	b662      	cpsie	i
 800765e:	61ba      	str	r2, [r7, #24]
 8007660:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007662:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007664:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800766a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800766c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766e:	2b00      	cmp	r3, #0
 8007670:	d02f      	beq.n	80076d2 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007674:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007678:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800767c:	68b9      	ldr	r1, [r7, #8]
 800767e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007680:	f000 f91b 	bl	80078ba <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007686:	1e5a      	subs	r2, r3, #1
 8007688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800768c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007694:	d112      	bne.n	80076bc <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d016      	beq.n	80076cc <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800769e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a0:	3310      	adds	r3, #16
 80076a2:	4618      	mov	r0, r3
 80076a4:	f000 ff60 	bl	8008568 <xTaskRemoveFromEventList>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00e      	beq.n	80076cc <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d00b      	beq.n	80076cc <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	601a      	str	r2, [r3, #0]
 80076ba:	e007      	b.n	80076cc <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80076bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076c0:	3301      	adds	r3, #1
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	b25a      	sxtb	r2, r3
 80076c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80076cc:	2301      	movs	r3, #1
 80076ce:	637b      	str	r3, [r7, #52]	; 0x34
 80076d0:	e001      	b.n	80076d6 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 80076d2:	2300      	movs	r3, #0
 80076d4:	637b      	str	r3, [r7, #52]	; 0x34
 80076d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	f383 8811 	msr	BASEPRI, r3
}
 80076e0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80076e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3738      	adds	r7, #56	; 0x38
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d10c      	bne.n	8007714 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 80076fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fe:	b672      	cpsid	i
 8007700:	f383 8811 	msr	BASEPRI, r3
 8007704:	f3bf 8f6f 	isb	sy
 8007708:	f3bf 8f4f 	dsb	sy
 800770c:	b662      	cpsie	i
 800770e:	60bb      	str	r3, [r7, #8]
}
 8007710:	bf00      	nop
 8007712:	e7fe      	b.n	8007712 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8007714:	f001 ffda 	bl	80096cc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800771e:	f002 f809 	bl	8009734 <vPortExitCritical>

	return uxReturn;
 8007722:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007724:	4618      	mov	r0, r3
 8007726:	3710      	adds	r7, #16
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800772c:	b480      	push	{r7}
 800772e:	b087      	sub	sp, #28
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d10c      	bne.n	8007758 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 800773e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007742:	b672      	cpsid	i
 8007744:	f383 8811 	msr	BASEPRI, r3
 8007748:	f3bf 8f6f 	isb	sy
 800774c:	f3bf 8f4f 	dsb	sy
 8007750:	b662      	cpsie	i
 8007752:	60fb      	str	r3, [r7, #12]
}
 8007754:	bf00      	nop
 8007756:	e7fe      	b.n	8007756 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800775c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800775e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007760:	4618      	mov	r0, r3
 8007762:	371c      	adds	r7, #28
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d10c      	bne.n	8007798 <vQueueDelete+0x2c>
	__asm volatile
 800777e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007782:	b672      	cpsid	i
 8007784:	f383 8811 	msr	BASEPRI, r3
 8007788:	f3bf 8f6f 	isb	sy
 800778c:	f3bf 8f4f 	dsb	sy
 8007790:	b662      	cpsie	i
 8007792:	60bb      	str	r3, [r7, #8]
}
 8007794:	bf00      	nop
 8007796:	e7fe      	b.n	8007796 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007798:	68f8      	ldr	r0, [r7, #12]
 800779a:	f000 f95f 	bl	8007a5c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d102      	bne.n	80077ae <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f002 f985 	bl	8009ab8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80077ae:	bf00      	nop
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80077b6:	b480      	push	{r7}
 80077b8:	b085      	sub	sp, #20
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d006      	beq.n	80077d4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f1c3 0307 	rsb	r3, r3, #7
 80077d0:	60fb      	str	r3, [r7, #12]
 80077d2:	e001      	b.n	80077d8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80077d4:	2300      	movs	r3, #0
 80077d6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80077d8:	68fb      	ldr	r3, [r7, #12]
	}
 80077da:	4618      	mov	r0, r3
 80077dc:	3714      	adds	r7, #20
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr

080077e6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b086      	sub	sp, #24
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	60f8      	str	r0, [r7, #12]
 80077ee:	60b9      	str	r1, [r7, #8]
 80077f0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80077f2:	2300      	movs	r3, #0
 80077f4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007800:	2b00      	cmp	r3, #0
 8007802:	d10d      	bne.n	8007820 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d14d      	bne.n	80078a8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	4618      	mov	r0, r3
 8007812:	f001 f90d 	bl	8008a30 <xTaskPriorityDisinherit>
 8007816:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2200      	movs	r2, #0
 800781c:	609a      	str	r2, [r3, #8]
 800781e:	e043      	b.n	80078a8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d119      	bne.n	800785a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6858      	ldr	r0, [r3, #4]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782e:	461a      	mov	r2, r3
 8007830:	68b9      	ldr	r1, [r7, #8]
 8007832:	f010 fedd 	bl	80185f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	685a      	ldr	r2, [r3, #4]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800783e:	441a      	add	r2, r3
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	685a      	ldr	r2, [r3, #4]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	429a      	cmp	r2, r3
 800784e:	d32b      	bcc.n	80078a8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	605a      	str	r2, [r3, #4]
 8007858:	e026      	b.n	80078a8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	68d8      	ldr	r0, [r3, #12]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007862:	461a      	mov	r2, r3
 8007864:	68b9      	ldr	r1, [r7, #8]
 8007866:	f010 fec3 	bl	80185f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	68da      	ldr	r2, [r3, #12]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007872:	425b      	negs	r3, r3
 8007874:	441a      	add	r2, r3
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	68da      	ldr	r2, [r3, #12]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	429a      	cmp	r2, r3
 8007884:	d207      	bcs.n	8007896 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	689a      	ldr	r2, [r3, #8]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788e:	425b      	negs	r3, r3
 8007890:	441a      	add	r2, r3
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2b02      	cmp	r3, #2
 800789a:	d105      	bne.n	80078a8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d002      	beq.n	80078a8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	3b01      	subs	r3, #1
 80078a6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	1c5a      	adds	r2, r3, #1
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80078b0:	697b      	ldr	r3, [r7, #20]
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3718      	adds	r7, #24
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}

080078ba <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b082      	sub	sp, #8
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
 80078c2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d018      	beq.n	80078fe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	68da      	ldr	r2, [r3, #12]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d4:	441a      	add	r2, r3
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	68da      	ldr	r2, [r3, #12]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d303      	bcc.n	80078ee <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	68d9      	ldr	r1, [r3, #12]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f6:	461a      	mov	r2, r3
 80078f8:	6838      	ldr	r0, [r7, #0]
 80078fa:	f010 fe79 	bl	80185f0 <memcpy>
	}
}
 80078fe:	bf00      	nop
 8007900:	3708      	adds	r7, #8
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007906:	b580      	push	{r7, lr}
 8007908:	b084      	sub	sp, #16
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800790e:	f001 fedd 	bl	80096cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007918:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800791a:	e011      	b.n	8007940 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007920:	2b00      	cmp	r3, #0
 8007922:	d012      	beq.n	800794a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	3324      	adds	r3, #36	; 0x24
 8007928:	4618      	mov	r0, r3
 800792a:	f000 fe1d 	bl	8008568 <xTaskRemoveFromEventList>
 800792e:	4603      	mov	r3, r0
 8007930:	2b00      	cmp	r3, #0
 8007932:	d001      	beq.n	8007938 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007934:	f000 fef8 	bl	8008728 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007938:	7bfb      	ldrb	r3, [r7, #15]
 800793a:	3b01      	subs	r3, #1
 800793c:	b2db      	uxtb	r3, r3
 800793e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007940:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007944:	2b00      	cmp	r3, #0
 8007946:	dce9      	bgt.n	800791c <prvUnlockQueue+0x16>
 8007948:	e000      	b.n	800794c <prvUnlockQueue+0x46>
					break;
 800794a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	22ff      	movs	r2, #255	; 0xff
 8007950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007954:	f001 feee 	bl	8009734 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007958:	f001 feb8 	bl	80096cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007962:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007964:	e011      	b.n	800798a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d012      	beq.n	8007994 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	3310      	adds	r3, #16
 8007972:	4618      	mov	r0, r3
 8007974:	f000 fdf8 	bl	8008568 <xTaskRemoveFromEventList>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d001      	beq.n	8007982 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800797e:	f000 fed3 	bl	8008728 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007982:	7bbb      	ldrb	r3, [r7, #14]
 8007984:	3b01      	subs	r3, #1
 8007986:	b2db      	uxtb	r3, r3
 8007988:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800798a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800798e:	2b00      	cmp	r3, #0
 8007990:	dce9      	bgt.n	8007966 <prvUnlockQueue+0x60>
 8007992:	e000      	b.n	8007996 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007994:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	22ff      	movs	r2, #255	; 0xff
 800799a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800799e:	f001 fec9 	bl	8009734 <vPortExitCritical>
}
 80079a2:	bf00      	nop
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b084      	sub	sp, #16
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80079b2:	f001 fe8b 	bl	80096cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d102      	bne.n	80079c4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80079be:	2301      	movs	r3, #1
 80079c0:	60fb      	str	r3, [r7, #12]
 80079c2:	e001      	b.n	80079c8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80079c4:	2300      	movs	r3, #0
 80079c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80079c8:	f001 feb4 	bl	8009734 <vPortExitCritical>

	return xReturn;
 80079cc:	68fb      	ldr	r3, [r7, #12]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b084      	sub	sp, #16
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80079de:	f001 fe75 	bl	80096cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d102      	bne.n	80079f4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80079ee:	2301      	movs	r3, #1
 80079f0:	60fb      	str	r3, [r7, #12]
 80079f2:	e001      	b.n	80079f8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80079f4:	2300      	movs	r3, #0
 80079f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80079f8:	f001 fe9c 	bl	8009734 <vPortExitCritical>

	return xReturn;
 80079fc:	68fb      	ldr	r3, [r7, #12]
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
	...

08007a08 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a12:	2300      	movs	r3, #0
 8007a14:	60fb      	str	r3, [r7, #12]
 8007a16:	e014      	b.n	8007a42 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007a18:	4a0f      	ldr	r2, [pc, #60]	; (8007a58 <vQueueAddToRegistry+0x50>)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d10b      	bne.n	8007a3c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007a24:	490c      	ldr	r1, [pc, #48]	; (8007a58 <vQueueAddToRegistry+0x50>)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	683a      	ldr	r2, [r7, #0]
 8007a2a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007a2e:	4a0a      	ldr	r2, [pc, #40]	; (8007a58 <vQueueAddToRegistry+0x50>)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	00db      	lsls	r3, r3, #3
 8007a34:	4413      	add	r3, r2
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007a3a:	e006      	b.n	8007a4a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	3301      	adds	r3, #1
 8007a40:	60fb      	str	r3, [r7, #12]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2b07      	cmp	r3, #7
 8007a46:	d9e7      	bls.n	8007a18 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007a48:	bf00      	nop
 8007a4a:	bf00      	nop
 8007a4c:	3714      	adds	r7, #20
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	20003a4c 	.word	0x20003a4c

08007a5c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b085      	sub	sp, #20
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a64:	2300      	movs	r3, #0
 8007a66:	60fb      	str	r3, [r7, #12]
 8007a68:	e016      	b.n	8007a98 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007a6a:	4a10      	ldr	r2, [pc, #64]	; (8007aac <vQueueUnregisterQueue+0x50>)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	00db      	lsls	r3, r3, #3
 8007a70:	4413      	add	r3, r2
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d10b      	bne.n	8007a92 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007a7a:	4a0c      	ldr	r2, [pc, #48]	; (8007aac <vQueueUnregisterQueue+0x50>)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2100      	movs	r1, #0
 8007a80:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007a84:	4a09      	ldr	r2, [pc, #36]	; (8007aac <vQueueUnregisterQueue+0x50>)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	00db      	lsls	r3, r3, #3
 8007a8a:	4413      	add	r3, r2
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	605a      	str	r2, [r3, #4]
				break;
 8007a90:	e006      	b.n	8007aa0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	3301      	adds	r3, #1
 8007a96:	60fb      	str	r3, [r7, #12]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2b07      	cmp	r3, #7
 8007a9c:	d9e5      	bls.n	8007a6a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007a9e:	bf00      	nop
 8007aa0:	bf00      	nop
 8007aa2:	3714      	adds	r7, #20
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr
 8007aac:	20003a4c 	.word	0x20003a4c

08007ab0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007ac0:	f001 fe04 	bl	80096cc <vPortEnterCritical>
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007aca:	b25b      	sxtb	r3, r3
 8007acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ad0:	d103      	bne.n	8007ada <vQueueWaitForMessageRestricted+0x2a>
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ae0:	b25b      	sxtb	r3, r3
 8007ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ae6:	d103      	bne.n	8007af0 <vQueueWaitForMessageRestricted+0x40>
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007af0:	f001 fe20 	bl	8009734 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d106      	bne.n	8007b0a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	3324      	adds	r3, #36	; 0x24
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	68b9      	ldr	r1, [r7, #8]
 8007b04:	4618      	mov	r0, r3
 8007b06:	f000 fd01 	bl	800850c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007b0a:	6978      	ldr	r0, [r7, #20]
 8007b0c:	f7ff fefb 	bl	8007906 <prvUnlockQueue>
	}
 8007b10:	bf00      	nop
 8007b12:	3718      	adds	r7, #24
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b08e      	sub	sp, #56	; 0x38
 8007b1c:	af04      	add	r7, sp, #16
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	607a      	str	r2, [r7, #4]
 8007b24:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d10c      	bne.n	8007b46 <xTaskCreateStatic+0x2e>
	__asm volatile
 8007b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b30:	b672      	cpsid	i
 8007b32:	f383 8811 	msr	BASEPRI, r3
 8007b36:	f3bf 8f6f 	isb	sy
 8007b3a:	f3bf 8f4f 	dsb	sy
 8007b3e:	b662      	cpsie	i
 8007b40:	623b      	str	r3, [r7, #32]
}
 8007b42:	bf00      	nop
 8007b44:	e7fe      	b.n	8007b44 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d10c      	bne.n	8007b66 <xTaskCreateStatic+0x4e>
	__asm volatile
 8007b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b50:	b672      	cpsid	i
 8007b52:	f383 8811 	msr	BASEPRI, r3
 8007b56:	f3bf 8f6f 	isb	sy
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	b662      	cpsie	i
 8007b60:	61fb      	str	r3, [r7, #28]
}
 8007b62:	bf00      	nop
 8007b64:	e7fe      	b.n	8007b64 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007b66:	2374      	movs	r3, #116	; 0x74
 8007b68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	2b74      	cmp	r3, #116	; 0x74
 8007b6e:	d00c      	beq.n	8007b8a <xTaskCreateStatic+0x72>
	__asm volatile
 8007b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b74:	b672      	cpsid	i
 8007b76:	f383 8811 	msr	BASEPRI, r3
 8007b7a:	f3bf 8f6f 	isb	sy
 8007b7e:	f3bf 8f4f 	dsb	sy
 8007b82:	b662      	cpsie	i
 8007b84:	61bb      	str	r3, [r7, #24]
}
 8007b86:	bf00      	nop
 8007b88:	e7fe      	b.n	8007b88 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007b8a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d01e      	beq.n	8007bd0 <xTaskCreateStatic+0xb8>
 8007b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d01b      	beq.n	8007bd0 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b9a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ba0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba4:	2202      	movs	r2, #2
 8007ba6:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007baa:	2300      	movs	r3, #0
 8007bac:	9303      	str	r3, [sp, #12]
 8007bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb0:	9302      	str	r3, [sp, #8]
 8007bb2:	f107 0314 	add.w	r3, r7, #20
 8007bb6:	9301      	str	r3, [sp, #4]
 8007bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bba:	9300      	str	r3, [sp, #0]
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	68b9      	ldr	r1, [r7, #8]
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f000 f850 	bl	8007c68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007bc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007bca:	f000 f8e5 	bl	8007d98 <prvAddNewTaskToReadyList>
 8007bce:	e001      	b.n	8007bd4 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007bd4:	697b      	ldr	r3, [r7, #20]
	}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3728      	adds	r7, #40	; 0x28
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b08c      	sub	sp, #48	; 0x30
 8007be2:	af04      	add	r7, sp, #16
 8007be4:	60f8      	str	r0, [r7, #12]
 8007be6:	60b9      	str	r1, [r7, #8]
 8007be8:	603b      	str	r3, [r7, #0]
 8007bea:	4613      	mov	r3, r2
 8007bec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007bee:	88fb      	ldrh	r3, [r7, #6]
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f001 fe96 	bl	8009924 <pvPortMalloc>
 8007bf8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d00e      	beq.n	8007c1e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007c00:	2074      	movs	r0, #116	; 0x74
 8007c02:	f001 fe8f 	bl	8009924 <pvPortMalloc>
 8007c06:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d003      	beq.n	8007c16 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007c0e:	69fb      	ldr	r3, [r7, #28]
 8007c10:	697a      	ldr	r2, [r7, #20]
 8007c12:	631a      	str	r2, [r3, #48]	; 0x30
 8007c14:	e005      	b.n	8007c22 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007c16:	6978      	ldr	r0, [r7, #20]
 8007c18:	f001 ff4e 	bl	8009ab8 <vPortFree>
 8007c1c:	e001      	b.n	8007c22 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d017      	beq.n	8007c58 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007c30:	88fa      	ldrh	r2, [r7, #6]
 8007c32:	2300      	movs	r3, #0
 8007c34:	9303      	str	r3, [sp, #12]
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	9302      	str	r3, [sp, #8]
 8007c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3c:	9301      	str	r3, [sp, #4]
 8007c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c40:	9300      	str	r3, [sp, #0]
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	68b9      	ldr	r1, [r7, #8]
 8007c46:	68f8      	ldr	r0, [r7, #12]
 8007c48:	f000 f80e 	bl	8007c68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c4c:	69f8      	ldr	r0, [r7, #28]
 8007c4e:	f000 f8a3 	bl	8007d98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007c52:	2301      	movs	r3, #1
 8007c54:	61bb      	str	r3, [r7, #24]
 8007c56:	e002      	b.n	8007c5e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007c58:	f04f 33ff 	mov.w	r3, #4294967295
 8007c5c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007c5e:	69bb      	ldr	r3, [r7, #24]
	}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3720      	adds	r7, #32
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b088      	sub	sp, #32
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	607a      	str	r2, [r7, #4]
 8007c74:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c78:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	461a      	mov	r2, r3
 8007c80:	21a5      	movs	r1, #165	; 0xa5
 8007c82:	f010 fcdd 	bl	8018640 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c8a:	6879      	ldr	r1, [r7, #4]
 8007c8c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007c90:	440b      	add	r3, r1
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	4413      	add	r3, r2
 8007c96:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	f023 0307 	bic.w	r3, r3, #7
 8007c9e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	f003 0307 	and.w	r3, r3, #7
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00c      	beq.n	8007cc4 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8007caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cae:	b672      	cpsid	i
 8007cb0:	f383 8811 	msr	BASEPRI, r3
 8007cb4:	f3bf 8f6f 	isb	sy
 8007cb8:	f3bf 8f4f 	dsb	sy
 8007cbc:	b662      	cpsie	i
 8007cbe:	617b      	str	r3, [r7, #20]
}
 8007cc0:	bf00      	nop
 8007cc2:	e7fe      	b.n	8007cc2 <prvInitialiseNewTask+0x5a>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8007cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc6:	69ba      	ldr	r2, [r7, #24]
 8007cc8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d01f      	beq.n	8007d10 <prvInitialiseNewTask+0xa8>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	61fb      	str	r3, [r7, #28]
 8007cd4:	e012      	b.n	8007cfc <prvInitialiseNewTask+0x94>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007cd6:	68ba      	ldr	r2, [r7, #8]
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	4413      	add	r3, r2
 8007cdc:	7819      	ldrb	r1, [r3, #0]
 8007cde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	3334      	adds	r3, #52	; 0x34
 8007ce6:	460a      	mov	r2, r1
 8007ce8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007cea:	68ba      	ldr	r2, [r7, #8]
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	4413      	add	r3, r2
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d006      	beq.n	8007d04 <prvInitialiseNewTask+0x9c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007cf6:	69fb      	ldr	r3, [r7, #28]
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	61fb      	str	r3, [r7, #28]
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	2b1e      	cmp	r3, #30
 8007d00:	d9e9      	bls.n	8007cd6 <prvInitialiseNewTask+0x6e>
 8007d02:	e000      	b.n	8007d06 <prvInitialiseNewTask+0x9e>
			{
				break;
 8007d04:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8007d0e:	e003      	b.n	8007d18 <prvInitialiseNewTask+0xb0>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d12:	2200      	movs	r2, #0
 8007d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1a:	2b06      	cmp	r3, #6
 8007d1c:	d901      	bls.n	8007d22 <prvInitialiseNewTask+0xba>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007d1e:	2306      	movs	r3, #6
 8007d20:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d26:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d2c:	661a      	str	r2, [r3, #96]	; 0x60
		pxNewTCB->uxMutexesHeld = 0;
 8007d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d30:	2200      	movs	r2, #0
 8007d32:	665a      	str	r2, [r3, #100]	; 0x64
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d36:	3304      	adds	r3, #4
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f7fe fde8 	bl	800690e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d40:	3318      	adds	r3, #24
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7fe fde3 	bl	800690e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d4c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d50:	f1c3 0207 	rsb	r2, r3, #7
 8007d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d56:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d5c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8007d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d60:	2200      	movs	r2, #0
 8007d62:	669a      	str	r2, [r3, #104]	; 0x68
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d66:	2200      	movs	r2, #0
 8007d68:	66da      	str	r2, [r3, #108]	; 0x6c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007d72:	683a      	ldr	r2, [r7, #0]
 8007d74:	68f9      	ldr	r1, [r7, #12]
 8007d76:	69b8      	ldr	r0, [r7, #24]
 8007d78:	f001 fb98 	bl	80094ac <pxPortInitialiseStack>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d80:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d002      	beq.n	8007d8e <prvInitialiseNewTask+0x126>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d8e:	bf00      	nop
 8007d90:	3720      	adds	r7, #32
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
	...

08007d98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007da0:	f001 fc94 	bl	80096cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007da4:	4b2c      	ldr	r3, [pc, #176]	; (8007e58 <prvAddNewTaskToReadyList+0xc0>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	3301      	adds	r3, #1
 8007daa:	4a2b      	ldr	r2, [pc, #172]	; (8007e58 <prvAddNewTaskToReadyList+0xc0>)
 8007dac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007dae:	4b2b      	ldr	r3, [pc, #172]	; (8007e5c <prvAddNewTaskToReadyList+0xc4>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d109      	bne.n	8007dca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007db6:	4a29      	ldr	r2, [pc, #164]	; (8007e5c <prvAddNewTaskToReadyList+0xc4>)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007dbc:	4b26      	ldr	r3, [pc, #152]	; (8007e58 <prvAddNewTaskToReadyList+0xc0>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d110      	bne.n	8007de6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007dc4:	f000 fcd6 	bl	8008774 <prvInitialiseTaskLists>
 8007dc8:	e00d      	b.n	8007de6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007dca:	4b25      	ldr	r3, [pc, #148]	; (8007e60 <prvAddNewTaskToReadyList+0xc8>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d109      	bne.n	8007de6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007dd2:	4b22      	ldr	r3, [pc, #136]	; (8007e5c <prvAddNewTaskToReadyList+0xc4>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d802      	bhi.n	8007de6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007de0:	4a1e      	ldr	r2, [pc, #120]	; (8007e5c <prvAddNewTaskToReadyList+0xc4>)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007de6:	4b1f      	ldr	r3, [pc, #124]	; (8007e64 <prvAddNewTaskToReadyList+0xcc>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	3301      	adds	r3, #1
 8007dec:	4a1d      	ldr	r2, [pc, #116]	; (8007e64 <prvAddNewTaskToReadyList+0xcc>)
 8007dee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007df0:	4b1c      	ldr	r3, [pc, #112]	; (8007e64 <prvAddNewTaskToReadyList+0xcc>)
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	659a      	str	r2, [r3, #88]	; 0x58
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	409a      	lsls	r2, r3
 8007e00:	4b19      	ldr	r3, [pc, #100]	; (8007e68 <prvAddNewTaskToReadyList+0xd0>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4313      	orrs	r3, r2
 8007e06:	4a18      	ldr	r2, [pc, #96]	; (8007e68 <prvAddNewTaskToReadyList+0xd0>)
 8007e08:	6013      	str	r3, [r2, #0]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e0e:	4613      	mov	r3, r2
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	4413      	add	r3, r2
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	4a15      	ldr	r2, [pc, #84]	; (8007e6c <prvAddNewTaskToReadyList+0xd4>)
 8007e18:	441a      	add	r2, r3
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	3304      	adds	r3, #4
 8007e1e:	4619      	mov	r1, r3
 8007e20:	4610      	mov	r0, r2
 8007e22:	f7fe fd81 	bl	8006928 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007e26:	f001 fc85 	bl	8009734 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007e2a:	4b0d      	ldr	r3, [pc, #52]	; (8007e60 <prvAddNewTaskToReadyList+0xc8>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d00e      	beq.n	8007e50 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007e32:	4b0a      	ldr	r3, [pc, #40]	; (8007e5c <prvAddNewTaskToReadyList+0xc4>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d207      	bcs.n	8007e50 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007e40:	4b0b      	ldr	r3, [pc, #44]	; (8007e70 <prvAddNewTaskToReadyList+0xd8>)
 8007e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e46:	601a      	str	r2, [r3, #0]
 8007e48:	f3bf 8f4f 	dsb	sy
 8007e4c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e50:	bf00      	nop
 8007e52:	3708      	adds	r7, #8
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	20003b8c 	.word	0x20003b8c
 8007e5c:	20003a8c 	.word	0x20003a8c
 8007e60:	20003b98 	.word	0x20003b98
 8007e64:	20003ba8 	.word	0x20003ba8
 8007e68:	20003b94 	.word	0x20003b94
 8007e6c:	20003a90 	.word	0x20003a90
 8007e70:	e000ed04 	.word	0xe000ed04

08007e74 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b08a      	sub	sp, #40	; 0x28
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d10c      	bne.n	8007ea2 <vTaskDelayUntil+0x2e>
	__asm volatile
 8007e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8c:	b672      	cpsid	i
 8007e8e:	f383 8811 	msr	BASEPRI, r3
 8007e92:	f3bf 8f6f 	isb	sy
 8007e96:	f3bf 8f4f 	dsb	sy
 8007e9a:	b662      	cpsie	i
 8007e9c:	617b      	str	r3, [r7, #20]
}
 8007e9e:	bf00      	nop
 8007ea0:	e7fe      	b.n	8007ea0 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d10c      	bne.n	8007ec2 <vTaskDelayUntil+0x4e>
	__asm volatile
 8007ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eac:	b672      	cpsid	i
 8007eae:	f383 8811 	msr	BASEPRI, r3
 8007eb2:	f3bf 8f6f 	isb	sy
 8007eb6:	f3bf 8f4f 	dsb	sy
 8007eba:	b662      	cpsie	i
 8007ebc:	613b      	str	r3, [r7, #16]
}
 8007ebe:	bf00      	nop
 8007ec0:	e7fe      	b.n	8007ec0 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 8007ec2:	4b2b      	ldr	r3, [pc, #172]	; (8007f70 <vTaskDelayUntil+0xfc>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00c      	beq.n	8007ee4 <vTaskDelayUntil+0x70>
	__asm volatile
 8007eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ece:	b672      	cpsid	i
 8007ed0:	f383 8811 	msr	BASEPRI, r3
 8007ed4:	f3bf 8f6f 	isb	sy
 8007ed8:	f3bf 8f4f 	dsb	sy
 8007edc:	b662      	cpsie	i
 8007ede:	60fb      	str	r3, [r7, #12]
}
 8007ee0:	bf00      	nop
 8007ee2:	e7fe      	b.n	8007ee2 <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 8007ee4:	f000 f8ec 	bl	80080c0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007ee8:	4b22      	ldr	r3, [pc, #136]	; (8007f74 <vTaskDelayUntil+0x100>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	683a      	ldr	r2, [r7, #0]
 8007ef4:	4413      	add	r3, r2
 8007ef6:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	6a3a      	ldr	r2, [r7, #32]
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d20b      	bcs.n	8007f1a <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	69fa      	ldr	r2, [r7, #28]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d211      	bcs.n	8007f30 <vTaskDelayUntil+0xbc>
 8007f0c:	69fa      	ldr	r2, [r7, #28]
 8007f0e:	6a3b      	ldr	r3, [r7, #32]
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d90d      	bls.n	8007f30 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 8007f14:	2301      	movs	r3, #1
 8007f16:	627b      	str	r3, [r7, #36]	; 0x24
 8007f18:	e00a      	b.n	8007f30 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	69fa      	ldr	r2, [r7, #28]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d303      	bcc.n	8007f2c <vTaskDelayUntil+0xb8>
 8007f24:	69fa      	ldr	r2, [r7, #28]
 8007f26:	6a3b      	ldr	r3, [r7, #32]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d901      	bls.n	8007f30 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	69fa      	ldr	r2, [r7, #28]
 8007f34:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d006      	beq.n	8007f4a <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007f3c:	69fa      	ldr	r2, [r7, #28]
 8007f3e:	6a3b      	ldr	r3, [r7, #32]
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	2100      	movs	r1, #0
 8007f44:	4618      	mov	r0, r3
 8007f46:	f000 feaf 	bl	8008ca8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8007f4a:	f000 f8c7 	bl	80080dc <xTaskResumeAll>
 8007f4e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d107      	bne.n	8007f66 <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 8007f56:	4b08      	ldr	r3, [pc, #32]	; (8007f78 <vTaskDelayUntil+0x104>)
 8007f58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f5c:	601a      	str	r2, [r3, #0]
 8007f5e:	f3bf 8f4f 	dsb	sy
 8007f62:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f66:	bf00      	nop
 8007f68:	3728      	adds	r7, #40	; 0x28
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	20003bb4 	.word	0x20003bb4
 8007f74:	20003b90 	.word	0x20003b90
 8007f78:	e000ed04 	.word	0xe000ed04

08007f7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007f84:	2300      	movs	r3, #0
 8007f86:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d019      	beq.n	8007fc2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007f8e:	4b14      	ldr	r3, [pc, #80]	; (8007fe0 <vTaskDelay+0x64>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00c      	beq.n	8007fb0 <vTaskDelay+0x34>
	__asm volatile
 8007f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9a:	b672      	cpsid	i
 8007f9c:	f383 8811 	msr	BASEPRI, r3
 8007fa0:	f3bf 8f6f 	isb	sy
 8007fa4:	f3bf 8f4f 	dsb	sy
 8007fa8:	b662      	cpsie	i
 8007faa:	60bb      	str	r3, [r7, #8]
}
 8007fac:	bf00      	nop
 8007fae:	e7fe      	b.n	8007fae <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007fb0:	f000 f886 	bl	80080c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 fe76 	bl	8008ca8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007fbc:	f000 f88e 	bl	80080dc <xTaskResumeAll>
 8007fc0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d107      	bne.n	8007fd8 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8007fc8:	4b06      	ldr	r3, [pc, #24]	; (8007fe4 <vTaskDelay+0x68>)
 8007fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fce:	601a      	str	r2, [r3, #0]
 8007fd0:	f3bf 8f4f 	dsb	sy
 8007fd4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007fd8:	bf00      	nop
 8007fda:	3710      	adds	r7, #16
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	20003bb4 	.word	0x20003bb4
 8007fe4:	e000ed04 	.word	0xe000ed04

08007fe8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b08a      	sub	sp, #40	; 0x28
 8007fec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007ff6:	463a      	mov	r2, r7
 8007ff8:	1d39      	adds	r1, r7, #4
 8007ffa:	f107 0308 	add.w	r3, r7, #8
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7f8 fb36 	bl	8000670 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008004:	6839      	ldr	r1, [r7, #0]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	68ba      	ldr	r2, [r7, #8]
 800800a:	9202      	str	r2, [sp, #8]
 800800c:	9301      	str	r3, [sp, #4]
 800800e:	2300      	movs	r3, #0
 8008010:	9300      	str	r3, [sp, #0]
 8008012:	2300      	movs	r3, #0
 8008014:	460a      	mov	r2, r1
 8008016:	4924      	ldr	r1, [pc, #144]	; (80080a8 <vTaskStartScheduler+0xc0>)
 8008018:	4824      	ldr	r0, [pc, #144]	; (80080ac <vTaskStartScheduler+0xc4>)
 800801a:	f7ff fd7d 	bl	8007b18 <xTaskCreateStatic>
 800801e:	4603      	mov	r3, r0
 8008020:	4a23      	ldr	r2, [pc, #140]	; (80080b0 <vTaskStartScheduler+0xc8>)
 8008022:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008024:	4b22      	ldr	r3, [pc, #136]	; (80080b0 <vTaskStartScheduler+0xc8>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d002      	beq.n	8008032 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800802c:	2301      	movs	r3, #1
 800802e:	617b      	str	r3, [r7, #20]
 8008030:	e001      	b.n	8008036 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008032:	2300      	movs	r3, #0
 8008034:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	2b01      	cmp	r3, #1
 800803a:	d102      	bne.n	8008042 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800803c:	f000 fe9a 	bl	8008d74 <xTimerCreateTimerTask>
 8008040:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	2b01      	cmp	r3, #1
 8008046:	d11a      	bne.n	800807e <vTaskStartScheduler+0x96>
	__asm volatile
 8008048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804c:	b672      	cpsid	i
 800804e:	f383 8811 	msr	BASEPRI, r3
 8008052:	f3bf 8f6f 	isb	sy
 8008056:	f3bf 8f4f 	dsb	sy
 800805a:	b662      	cpsie	i
 800805c:	613b      	str	r3, [r7, #16]
}
 800805e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008060:	4b14      	ldr	r3, [pc, #80]	; (80080b4 <vTaskStartScheduler+0xcc>)
 8008062:	f04f 32ff 	mov.w	r2, #4294967295
 8008066:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008068:	4b13      	ldr	r3, [pc, #76]	; (80080b8 <vTaskStartScheduler+0xd0>)
 800806a:	2201      	movs	r2, #1
 800806c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800806e:	4b13      	ldr	r3, [pc, #76]	; (80080bc <vTaskStartScheduler+0xd4>)
 8008070:	2200      	movs	r2, #0
 8008072:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8008074:	f7f8 face 	bl	8000614 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008078:	f001 faaa 	bl	80095d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800807c:	e010      	b.n	80080a0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008084:	d10c      	bne.n	80080a0 <vTaskStartScheduler+0xb8>
	__asm volatile
 8008086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808a:	b672      	cpsid	i
 800808c:	f383 8811 	msr	BASEPRI, r3
 8008090:	f3bf 8f6f 	isb	sy
 8008094:	f3bf 8f4f 	dsb	sy
 8008098:	b662      	cpsie	i
 800809a:	60fb      	str	r3, [r7, #12]
}
 800809c:	bf00      	nop
 800809e:	e7fe      	b.n	800809e <vTaskStartScheduler+0xb6>
}
 80080a0:	bf00      	nop
 80080a2:	3718      	adds	r7, #24
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}
 80080a8:	08019c6c 	.word	0x08019c6c
 80080ac:	08008741 	.word	0x08008741
 80080b0:	20003bb0 	.word	0x20003bb0
 80080b4:	20003bac 	.word	0x20003bac
 80080b8:	20003b98 	.word	0x20003b98
 80080bc:	20003b90 	.word	0x20003b90

080080c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80080c0:	b480      	push	{r7}
 80080c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80080c4:	4b04      	ldr	r3, [pc, #16]	; (80080d8 <vTaskSuspendAll+0x18>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	3301      	adds	r3, #1
 80080ca:	4a03      	ldr	r2, [pc, #12]	; (80080d8 <vTaskSuspendAll+0x18>)
 80080cc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80080ce:	bf00      	nop
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr
 80080d8:	20003bb4 	.word	0x20003bb4

080080dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80080e2:	2300      	movs	r3, #0
 80080e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80080e6:	2300      	movs	r3, #0
 80080e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80080ea:	4b42      	ldr	r3, [pc, #264]	; (80081f4 <xTaskResumeAll+0x118>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d10c      	bne.n	800810c <xTaskResumeAll+0x30>
	__asm volatile
 80080f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f6:	b672      	cpsid	i
 80080f8:	f383 8811 	msr	BASEPRI, r3
 80080fc:	f3bf 8f6f 	isb	sy
 8008100:	f3bf 8f4f 	dsb	sy
 8008104:	b662      	cpsie	i
 8008106:	603b      	str	r3, [r7, #0]
}
 8008108:	bf00      	nop
 800810a:	e7fe      	b.n	800810a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800810c:	f001 fade 	bl	80096cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008110:	4b38      	ldr	r3, [pc, #224]	; (80081f4 <xTaskResumeAll+0x118>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	3b01      	subs	r3, #1
 8008116:	4a37      	ldr	r2, [pc, #220]	; (80081f4 <xTaskResumeAll+0x118>)
 8008118:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800811a:	4b36      	ldr	r3, [pc, #216]	; (80081f4 <xTaskResumeAll+0x118>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d161      	bne.n	80081e6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008122:	4b35      	ldr	r3, [pc, #212]	; (80081f8 <xTaskResumeAll+0x11c>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d05d      	beq.n	80081e6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800812a:	e02e      	b.n	800818a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800812c:	4b33      	ldr	r3, [pc, #204]	; (80081fc <xTaskResumeAll+0x120>)
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	3318      	adds	r3, #24
 8008138:	4618      	mov	r0, r3
 800813a:	f7fe fc52 	bl	80069e2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	3304      	adds	r3, #4
 8008142:	4618      	mov	r0, r3
 8008144:	f7fe fc4d 	bl	80069e2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800814c:	2201      	movs	r2, #1
 800814e:	409a      	lsls	r2, r3
 8008150:	4b2b      	ldr	r3, [pc, #172]	; (8008200 <xTaskResumeAll+0x124>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4313      	orrs	r3, r2
 8008156:	4a2a      	ldr	r2, [pc, #168]	; (8008200 <xTaskResumeAll+0x124>)
 8008158:	6013      	str	r3, [r2, #0]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800815e:	4613      	mov	r3, r2
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	4413      	add	r3, r2
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	4a27      	ldr	r2, [pc, #156]	; (8008204 <xTaskResumeAll+0x128>)
 8008168:	441a      	add	r2, r3
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	3304      	adds	r3, #4
 800816e:	4619      	mov	r1, r3
 8008170:	4610      	mov	r0, r2
 8008172:	f7fe fbd9 	bl	8006928 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800817a:	4b23      	ldr	r3, [pc, #140]	; (8008208 <xTaskResumeAll+0x12c>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008180:	429a      	cmp	r2, r3
 8008182:	d302      	bcc.n	800818a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008184:	4b21      	ldr	r3, [pc, #132]	; (800820c <xTaskResumeAll+0x130>)
 8008186:	2201      	movs	r2, #1
 8008188:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800818a:	4b1c      	ldr	r3, [pc, #112]	; (80081fc <xTaskResumeAll+0x120>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d1cc      	bne.n	800812c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d001      	beq.n	800819c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008198:	f000 fb8c 	bl	80088b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800819c:	4b1c      	ldr	r3, [pc, #112]	; (8008210 <xTaskResumeAll+0x134>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d010      	beq.n	80081ca <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80081a8:	f000 f858 	bl	800825c <xTaskIncrementTick>
 80081ac:	4603      	mov	r3, r0
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d002      	beq.n	80081b8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80081b2:	4b16      	ldr	r3, [pc, #88]	; (800820c <xTaskResumeAll+0x130>)
 80081b4:	2201      	movs	r2, #1
 80081b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	3b01      	subs	r3, #1
 80081bc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d1f1      	bne.n	80081a8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80081c4:	4b12      	ldr	r3, [pc, #72]	; (8008210 <xTaskResumeAll+0x134>)
 80081c6:	2200      	movs	r2, #0
 80081c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80081ca:	4b10      	ldr	r3, [pc, #64]	; (800820c <xTaskResumeAll+0x130>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d009      	beq.n	80081e6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80081d2:	2301      	movs	r3, #1
 80081d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80081d6:	4b0f      	ldr	r3, [pc, #60]	; (8008214 <xTaskResumeAll+0x138>)
 80081d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081dc:	601a      	str	r2, [r3, #0]
 80081de:	f3bf 8f4f 	dsb	sy
 80081e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80081e6:	f001 faa5 	bl	8009734 <vPortExitCritical>

	return xAlreadyYielded;
 80081ea:	68bb      	ldr	r3, [r7, #8]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3710      	adds	r7, #16
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	20003bb4 	.word	0x20003bb4
 80081f8:	20003b8c 	.word	0x20003b8c
 80081fc:	20003b4c 	.word	0x20003b4c
 8008200:	20003b94 	.word	0x20003b94
 8008204:	20003a90 	.word	0x20003a90
 8008208:	20003a8c 	.word	0x20003a8c
 800820c:	20003ba0 	.word	0x20003ba0
 8008210:	20003b9c 	.word	0x20003b9c
 8008214:	e000ed04 	.word	0xe000ed04

08008218 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800821e:	4b05      	ldr	r3, [pc, #20]	; (8008234 <xTaskGetTickCount+0x1c>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008224:	687b      	ldr	r3, [r7, #4]
}
 8008226:	4618      	mov	r0, r3
 8008228:	370c      	adds	r7, #12
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr
 8008232:	bf00      	nop
 8008234:	20003b90 	.word	0x20003b90

08008238 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800823e:	f001 fb2d 	bl	800989c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008242:	2300      	movs	r3, #0
 8008244:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008246:	4b04      	ldr	r3, [pc, #16]	; (8008258 <xTaskGetTickCountFromISR+0x20>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800824c:	683b      	ldr	r3, [r7, #0]
}
 800824e:	4618      	mov	r0, r3
 8008250:	3708      	adds	r7, #8
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	20003b90 	.word	0x20003b90

0800825c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b086      	sub	sp, #24
 8008260:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008262:	2300      	movs	r3, #0
 8008264:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008266:	4b4f      	ldr	r3, [pc, #316]	; (80083a4 <xTaskIncrementTick+0x148>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	f040 808a 	bne.w	8008384 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008270:	4b4d      	ldr	r3, [pc, #308]	; (80083a8 <xTaskIncrementTick+0x14c>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	3301      	adds	r3, #1
 8008276:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008278:	4a4b      	ldr	r2, [pc, #300]	; (80083a8 <xTaskIncrementTick+0x14c>)
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d122      	bne.n	80082ca <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008284:	4b49      	ldr	r3, [pc, #292]	; (80083ac <xTaskIncrementTick+0x150>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d00c      	beq.n	80082a8 <xTaskIncrementTick+0x4c>
	__asm volatile
 800828e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008292:	b672      	cpsid	i
 8008294:	f383 8811 	msr	BASEPRI, r3
 8008298:	f3bf 8f6f 	isb	sy
 800829c:	f3bf 8f4f 	dsb	sy
 80082a0:	b662      	cpsie	i
 80082a2:	603b      	str	r3, [r7, #0]
}
 80082a4:	bf00      	nop
 80082a6:	e7fe      	b.n	80082a6 <xTaskIncrementTick+0x4a>
 80082a8:	4b40      	ldr	r3, [pc, #256]	; (80083ac <xTaskIncrementTick+0x150>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	60fb      	str	r3, [r7, #12]
 80082ae:	4b40      	ldr	r3, [pc, #256]	; (80083b0 <xTaskIncrementTick+0x154>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a3e      	ldr	r2, [pc, #248]	; (80083ac <xTaskIncrementTick+0x150>)
 80082b4:	6013      	str	r3, [r2, #0]
 80082b6:	4a3e      	ldr	r2, [pc, #248]	; (80083b0 <xTaskIncrementTick+0x154>)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6013      	str	r3, [r2, #0]
 80082bc:	4b3d      	ldr	r3, [pc, #244]	; (80083b4 <xTaskIncrementTick+0x158>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	3301      	adds	r3, #1
 80082c2:	4a3c      	ldr	r2, [pc, #240]	; (80083b4 <xTaskIncrementTick+0x158>)
 80082c4:	6013      	str	r3, [r2, #0]
 80082c6:	f000 faf5 	bl	80088b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80082ca:	4b3b      	ldr	r3, [pc, #236]	; (80083b8 <xTaskIncrementTick+0x15c>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	693a      	ldr	r2, [r7, #16]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d348      	bcc.n	8008366 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082d4:	4b35      	ldr	r3, [pc, #212]	; (80083ac <xTaskIncrementTick+0x150>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d104      	bne.n	80082e8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082de:	4b36      	ldr	r3, [pc, #216]	; (80083b8 <xTaskIncrementTick+0x15c>)
 80082e0:	f04f 32ff 	mov.w	r2, #4294967295
 80082e4:	601a      	str	r2, [r3, #0]
					break;
 80082e6:	e03e      	b.n	8008366 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082e8:	4b30      	ldr	r3, [pc, #192]	; (80083ac <xTaskIncrementTick+0x150>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80082f8:	693a      	ldr	r2, [r7, #16]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d203      	bcs.n	8008308 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008300:	4a2d      	ldr	r2, [pc, #180]	; (80083b8 <xTaskIncrementTick+0x15c>)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008306:	e02e      	b.n	8008366 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	3304      	adds	r3, #4
 800830c:	4618      	mov	r0, r3
 800830e:	f7fe fb68 	bl	80069e2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008316:	2b00      	cmp	r3, #0
 8008318:	d004      	beq.n	8008324 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	3318      	adds	r3, #24
 800831e:	4618      	mov	r0, r3
 8008320:	f7fe fb5f 	bl	80069e2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008328:	2201      	movs	r2, #1
 800832a:	409a      	lsls	r2, r3
 800832c:	4b23      	ldr	r3, [pc, #140]	; (80083bc <xTaskIncrementTick+0x160>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4313      	orrs	r3, r2
 8008332:	4a22      	ldr	r2, [pc, #136]	; (80083bc <xTaskIncrementTick+0x160>)
 8008334:	6013      	str	r3, [r2, #0]
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800833a:	4613      	mov	r3, r2
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	4413      	add	r3, r2
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	4a1f      	ldr	r2, [pc, #124]	; (80083c0 <xTaskIncrementTick+0x164>)
 8008344:	441a      	add	r2, r3
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	3304      	adds	r3, #4
 800834a:	4619      	mov	r1, r3
 800834c:	4610      	mov	r0, r2
 800834e:	f7fe faeb 	bl	8006928 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008356:	4b1b      	ldr	r3, [pc, #108]	; (80083c4 <xTaskIncrementTick+0x168>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800835c:	429a      	cmp	r2, r3
 800835e:	d3b9      	bcc.n	80082d4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8008360:	2301      	movs	r3, #1
 8008362:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008364:	e7b6      	b.n	80082d4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008366:	4b17      	ldr	r3, [pc, #92]	; (80083c4 <xTaskIncrementTick+0x168>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800836c:	4914      	ldr	r1, [pc, #80]	; (80083c0 <xTaskIncrementTick+0x164>)
 800836e:	4613      	mov	r3, r2
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	4413      	add	r3, r2
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	440b      	add	r3, r1
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	2b01      	cmp	r3, #1
 800837c:	d907      	bls.n	800838e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800837e:	2301      	movs	r3, #1
 8008380:	617b      	str	r3, [r7, #20]
 8008382:	e004      	b.n	800838e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008384:	4b10      	ldr	r3, [pc, #64]	; (80083c8 <xTaskIncrementTick+0x16c>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	3301      	adds	r3, #1
 800838a:	4a0f      	ldr	r2, [pc, #60]	; (80083c8 <xTaskIncrementTick+0x16c>)
 800838c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800838e:	4b0f      	ldr	r3, [pc, #60]	; (80083cc <xTaskIncrementTick+0x170>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d001      	beq.n	800839a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8008396:	2301      	movs	r3, #1
 8008398:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800839a:	697b      	ldr	r3, [r7, #20]
}
 800839c:	4618      	mov	r0, r3
 800839e:	3718      	adds	r7, #24
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}
 80083a4:	20003bb4 	.word	0x20003bb4
 80083a8:	20003b90 	.word	0x20003b90
 80083ac:	20003b44 	.word	0x20003b44
 80083b0:	20003b48 	.word	0x20003b48
 80083b4:	20003ba4 	.word	0x20003ba4
 80083b8:	20003bac 	.word	0x20003bac
 80083bc:	20003b94 	.word	0x20003b94
 80083c0:	20003a90 	.word	0x20003a90
 80083c4:	20003a8c 	.word	0x20003a8c
 80083c8:	20003b9c 	.word	0x20003b9c
 80083cc:	20003ba0 	.word	0x20003ba0

080083d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b086      	sub	sp, #24
 80083d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80083d6:	4b33      	ldr	r3, [pc, #204]	; (80084a4 <vTaskSwitchContext+0xd4>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d003      	beq.n	80083e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80083de:	4b32      	ldr	r3, [pc, #200]	; (80084a8 <vTaskSwitchContext+0xd8>)
 80083e0:	2201      	movs	r2, #1
 80083e2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80083e4:	e05a      	b.n	800849c <vTaskSwitchContext+0xcc>
		xYieldPending = pdFALSE;
 80083e6:	4b30      	ldr	r3, [pc, #192]	; (80084a8 <vTaskSwitchContext+0xd8>)
 80083e8:	2200      	movs	r2, #0
 80083ea:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80083ec:	f7f8 f92c 	bl	8000648 <getRunTimeCounterValue>
 80083f0:	4603      	mov	r3, r0
 80083f2:	4a2e      	ldr	r2, [pc, #184]	; (80084ac <vTaskSwitchContext+0xdc>)
 80083f4:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80083f6:	4b2d      	ldr	r3, [pc, #180]	; (80084ac <vTaskSwitchContext+0xdc>)
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	4b2d      	ldr	r3, [pc, #180]	; (80084b0 <vTaskSwitchContext+0xe0>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	429a      	cmp	r2, r3
 8008400:	d909      	bls.n	8008416 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8008402:	4b2c      	ldr	r3, [pc, #176]	; (80084b4 <vTaskSwitchContext+0xe4>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8008408:	4a28      	ldr	r2, [pc, #160]	; (80084ac <vTaskSwitchContext+0xdc>)
 800840a:	6810      	ldr	r0, [r2, #0]
 800840c:	4a28      	ldr	r2, [pc, #160]	; (80084b0 <vTaskSwitchContext+0xe0>)
 800840e:	6812      	ldr	r2, [r2, #0]
 8008410:	1a82      	subs	r2, r0, r2
 8008412:	440a      	add	r2, r1
 8008414:	669a      	str	r2, [r3, #104]	; 0x68
			ulTaskSwitchedInTime = ulTotalRunTime;
 8008416:	4b25      	ldr	r3, [pc, #148]	; (80084ac <vTaskSwitchContext+0xdc>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a25      	ldr	r2, [pc, #148]	; (80084b0 <vTaskSwitchContext+0xe0>)
 800841c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800841e:	4b26      	ldr	r3, [pc, #152]	; (80084b8 <vTaskSwitchContext+0xe8>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	fab3 f383 	clz	r3, r3
 800842a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800842c:	7afb      	ldrb	r3, [r7, #11]
 800842e:	f1c3 031f 	rsb	r3, r3, #31
 8008432:	617b      	str	r3, [r7, #20]
 8008434:	4921      	ldr	r1, [pc, #132]	; (80084bc <vTaskSwitchContext+0xec>)
 8008436:	697a      	ldr	r2, [r7, #20]
 8008438:	4613      	mov	r3, r2
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	4413      	add	r3, r2
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	440b      	add	r3, r1
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d10c      	bne.n	8008462 <vTaskSwitchContext+0x92>
	__asm volatile
 8008448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844c:	b672      	cpsid	i
 800844e:	f383 8811 	msr	BASEPRI, r3
 8008452:	f3bf 8f6f 	isb	sy
 8008456:	f3bf 8f4f 	dsb	sy
 800845a:	b662      	cpsie	i
 800845c:	607b      	str	r3, [r7, #4]
}
 800845e:	bf00      	nop
 8008460:	e7fe      	b.n	8008460 <vTaskSwitchContext+0x90>
 8008462:	697a      	ldr	r2, [r7, #20]
 8008464:	4613      	mov	r3, r2
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	4413      	add	r3, r2
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	4a13      	ldr	r2, [pc, #76]	; (80084bc <vTaskSwitchContext+0xec>)
 800846e:	4413      	add	r3, r2
 8008470:	613b      	str	r3, [r7, #16]
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	685a      	ldr	r2, [r3, #4]
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	605a      	str	r2, [r3, #4]
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	685a      	ldr	r2, [r3, #4]
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	3308      	adds	r3, #8
 8008484:	429a      	cmp	r2, r3
 8008486:	d104      	bne.n	8008492 <vTaskSwitchContext+0xc2>
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	685a      	ldr	r2, [r3, #4]
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	605a      	str	r2, [r3, #4]
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	4a06      	ldr	r2, [pc, #24]	; (80084b4 <vTaskSwitchContext+0xe4>)
 800849a:	6013      	str	r3, [r2, #0]
}
 800849c:	bf00      	nop
 800849e:	3718      	adds	r7, #24
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	20003bb4 	.word	0x20003bb4
 80084a8:	20003ba0 	.word	0x20003ba0
 80084ac:	20003bbc 	.word	0x20003bbc
 80084b0:	20003bb8 	.word	0x20003bb8
 80084b4:	20003a8c 	.word	0x20003a8c
 80084b8:	20003b94 	.word	0x20003b94
 80084bc:	20003a90 	.word	0x20003a90

080084c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d10c      	bne.n	80084ea <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80084d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d4:	b672      	cpsid	i
 80084d6:	f383 8811 	msr	BASEPRI, r3
 80084da:	f3bf 8f6f 	isb	sy
 80084de:	f3bf 8f4f 	dsb	sy
 80084e2:	b662      	cpsie	i
 80084e4:	60fb      	str	r3, [r7, #12]
}
 80084e6:	bf00      	nop
 80084e8:	e7fe      	b.n	80084e8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80084ea:	4b07      	ldr	r3, [pc, #28]	; (8008508 <vTaskPlaceOnEventList+0x48>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	3318      	adds	r3, #24
 80084f0:	4619      	mov	r1, r3
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f7fe fa3c 	bl	8006970 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80084f8:	2101      	movs	r1, #1
 80084fa:	6838      	ldr	r0, [r7, #0]
 80084fc:	f000 fbd4 	bl	8008ca8 <prvAddCurrentTaskToDelayedList>
}
 8008500:	bf00      	nop
 8008502:	3710      	adds	r7, #16
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	20003a8c 	.word	0x20003a8c

0800850c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800850c:	b580      	push	{r7, lr}
 800850e:	b086      	sub	sp, #24
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d10c      	bne.n	8008538 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800851e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008522:	b672      	cpsid	i
 8008524:	f383 8811 	msr	BASEPRI, r3
 8008528:	f3bf 8f6f 	isb	sy
 800852c:	f3bf 8f4f 	dsb	sy
 8008530:	b662      	cpsie	i
 8008532:	617b      	str	r3, [r7, #20]
}
 8008534:	bf00      	nop
 8008536:	e7fe      	b.n	8008536 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008538:	4b0a      	ldr	r3, [pc, #40]	; (8008564 <vTaskPlaceOnEventListRestricted+0x58>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	3318      	adds	r3, #24
 800853e:	4619      	mov	r1, r3
 8008540:	68f8      	ldr	r0, [r7, #12]
 8008542:	f7fe f9f1 	bl	8006928 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d002      	beq.n	8008552 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800854c:	f04f 33ff 	mov.w	r3, #4294967295
 8008550:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008552:	6879      	ldr	r1, [r7, #4]
 8008554:	68b8      	ldr	r0, [r7, #8]
 8008556:	f000 fba7 	bl	8008ca8 <prvAddCurrentTaskToDelayedList>
	}
 800855a:	bf00      	nop
 800855c:	3718      	adds	r7, #24
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop
 8008564:	20003a8c 	.word	0x20003a8c

08008568 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b086      	sub	sp, #24
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d10c      	bne.n	8008598 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800857e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008582:	b672      	cpsid	i
 8008584:	f383 8811 	msr	BASEPRI, r3
 8008588:	f3bf 8f6f 	isb	sy
 800858c:	f3bf 8f4f 	dsb	sy
 8008590:	b662      	cpsie	i
 8008592:	60fb      	str	r3, [r7, #12]
}
 8008594:	bf00      	nop
 8008596:	e7fe      	b.n	8008596 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	3318      	adds	r3, #24
 800859c:	4618      	mov	r0, r3
 800859e:	f7fe fa20 	bl	80069e2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085a2:	4b1d      	ldr	r3, [pc, #116]	; (8008618 <xTaskRemoveFromEventList+0xb0>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d11c      	bne.n	80085e4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	3304      	adds	r3, #4
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7fe fa17 	bl	80069e2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b8:	2201      	movs	r2, #1
 80085ba:	409a      	lsls	r2, r3
 80085bc:	4b17      	ldr	r3, [pc, #92]	; (800861c <xTaskRemoveFromEventList+0xb4>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	4a16      	ldr	r2, [pc, #88]	; (800861c <xTaskRemoveFromEventList+0xb4>)
 80085c4:	6013      	str	r3, [r2, #0]
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085ca:	4613      	mov	r3, r2
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	4413      	add	r3, r2
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	4a13      	ldr	r2, [pc, #76]	; (8008620 <xTaskRemoveFromEventList+0xb8>)
 80085d4:	441a      	add	r2, r3
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	3304      	adds	r3, #4
 80085da:	4619      	mov	r1, r3
 80085dc:	4610      	mov	r0, r2
 80085de:	f7fe f9a3 	bl	8006928 <vListInsertEnd>
 80085e2:	e005      	b.n	80085f0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	3318      	adds	r3, #24
 80085e8:	4619      	mov	r1, r3
 80085ea:	480e      	ldr	r0, [pc, #56]	; (8008624 <xTaskRemoveFromEventList+0xbc>)
 80085ec:	f7fe f99c 	bl	8006928 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085f4:	4b0c      	ldr	r3, [pc, #48]	; (8008628 <xTaskRemoveFromEventList+0xc0>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d905      	bls.n	800860a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80085fe:	2301      	movs	r3, #1
 8008600:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008602:	4b0a      	ldr	r3, [pc, #40]	; (800862c <xTaskRemoveFromEventList+0xc4>)
 8008604:	2201      	movs	r2, #1
 8008606:	601a      	str	r2, [r3, #0]
 8008608:	e001      	b.n	800860e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800860a:	2300      	movs	r3, #0
 800860c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800860e:	697b      	ldr	r3, [r7, #20]
}
 8008610:	4618      	mov	r0, r3
 8008612:	3718      	adds	r7, #24
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	20003bb4 	.word	0x20003bb4
 800861c:	20003b94 	.word	0x20003b94
 8008620:	20003a90 	.word	0x20003a90
 8008624:	20003b4c 	.word	0x20003b4c
 8008628:	20003a8c 	.word	0x20003a8c
 800862c:	20003ba0 	.word	0x20003ba0

08008630 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008638:	4b06      	ldr	r3, [pc, #24]	; (8008654 <vTaskInternalSetTimeOutState+0x24>)
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008640:	4b05      	ldr	r3, [pc, #20]	; (8008658 <vTaskInternalSetTimeOutState+0x28>)
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	605a      	str	r2, [r3, #4]
}
 8008648:	bf00      	nop
 800864a:	370c      	adds	r7, #12
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr
 8008654:	20003ba4 	.word	0x20003ba4
 8008658:	20003b90 	.word	0x20003b90

0800865c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b088      	sub	sp, #32
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d10c      	bne.n	8008686 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800866c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008670:	b672      	cpsid	i
 8008672:	f383 8811 	msr	BASEPRI, r3
 8008676:	f3bf 8f6f 	isb	sy
 800867a:	f3bf 8f4f 	dsb	sy
 800867e:	b662      	cpsie	i
 8008680:	613b      	str	r3, [r7, #16]
}
 8008682:	bf00      	nop
 8008684:	e7fe      	b.n	8008684 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d10c      	bne.n	80086a6 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800868c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008690:	b672      	cpsid	i
 8008692:	f383 8811 	msr	BASEPRI, r3
 8008696:	f3bf 8f6f 	isb	sy
 800869a:	f3bf 8f4f 	dsb	sy
 800869e:	b662      	cpsie	i
 80086a0:	60fb      	str	r3, [r7, #12]
}
 80086a2:	bf00      	nop
 80086a4:	e7fe      	b.n	80086a4 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80086a6:	f001 f811 	bl	80096cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80086aa:	4b1d      	ldr	r3, [pc, #116]	; (8008720 <xTaskCheckForTimeOut+0xc4>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	69ba      	ldr	r2, [r7, #24]
 80086b6:	1ad3      	subs	r3, r2, r3
 80086b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c2:	d102      	bne.n	80086ca <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80086c4:	2300      	movs	r3, #0
 80086c6:	61fb      	str	r3, [r7, #28]
 80086c8:	e023      	b.n	8008712 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	4b15      	ldr	r3, [pc, #84]	; (8008724 <xTaskCheckForTimeOut+0xc8>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d007      	beq.n	80086e6 <xTaskCheckForTimeOut+0x8a>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	69ba      	ldr	r2, [r7, #24]
 80086dc:	429a      	cmp	r2, r3
 80086de:	d302      	bcc.n	80086e6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80086e0:	2301      	movs	r3, #1
 80086e2:	61fb      	str	r3, [r7, #28]
 80086e4:	e015      	b.n	8008712 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	697a      	ldr	r2, [r7, #20]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d20b      	bcs.n	8008708 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	1ad2      	subs	r2, r2, r3
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f7ff ff97 	bl	8008630 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008702:	2300      	movs	r3, #0
 8008704:	61fb      	str	r3, [r7, #28]
 8008706:	e004      	b.n	8008712 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	2200      	movs	r2, #0
 800870c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800870e:	2301      	movs	r3, #1
 8008710:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008712:	f001 f80f 	bl	8009734 <vPortExitCritical>

	return xReturn;
 8008716:	69fb      	ldr	r3, [r7, #28]
}
 8008718:	4618      	mov	r0, r3
 800871a:	3720      	adds	r7, #32
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}
 8008720:	20003b90 	.word	0x20003b90
 8008724:	20003ba4 	.word	0x20003ba4

08008728 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008728:	b480      	push	{r7}
 800872a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800872c:	4b03      	ldr	r3, [pc, #12]	; (800873c <vTaskMissedYield+0x14>)
 800872e:	2201      	movs	r2, #1
 8008730:	601a      	str	r2, [r3, #0]
}
 8008732:	bf00      	nop
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr
 800873c:	20003ba0 	.word	0x20003ba0

08008740 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008748:	f000 f854 	bl	80087f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800874c:	4b07      	ldr	r3, [pc, #28]	; (800876c <prvIdleTask+0x2c>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2b01      	cmp	r3, #1
 8008752:	d907      	bls.n	8008764 <prvIdleTask+0x24>
			{
				taskYIELD();
 8008754:	4b06      	ldr	r3, [pc, #24]	; (8008770 <prvIdleTask+0x30>)
 8008756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800875a:	601a      	str	r2, [r3, #0]
 800875c:	f3bf 8f4f 	dsb	sy
 8008760:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8008764:	f7f7 ff7c 	bl	8000660 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8008768:	e7ee      	b.n	8008748 <prvIdleTask+0x8>
 800876a:	bf00      	nop
 800876c:	20003a90 	.word	0x20003a90
 8008770:	e000ed04 	.word	0xe000ed04

08008774 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b082      	sub	sp, #8
 8008778:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800877a:	2300      	movs	r3, #0
 800877c:	607b      	str	r3, [r7, #4]
 800877e:	e00c      	b.n	800879a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	4613      	mov	r3, r2
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	4413      	add	r3, r2
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	4a12      	ldr	r2, [pc, #72]	; (80087d4 <prvInitialiseTaskLists+0x60>)
 800878c:	4413      	add	r3, r2
 800878e:	4618      	mov	r0, r3
 8008790:	f7fe f89d 	bl	80068ce <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	3301      	adds	r3, #1
 8008798:	607b      	str	r3, [r7, #4]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2b06      	cmp	r3, #6
 800879e:	d9ef      	bls.n	8008780 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80087a0:	480d      	ldr	r0, [pc, #52]	; (80087d8 <prvInitialiseTaskLists+0x64>)
 80087a2:	f7fe f894 	bl	80068ce <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80087a6:	480d      	ldr	r0, [pc, #52]	; (80087dc <prvInitialiseTaskLists+0x68>)
 80087a8:	f7fe f891 	bl	80068ce <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80087ac:	480c      	ldr	r0, [pc, #48]	; (80087e0 <prvInitialiseTaskLists+0x6c>)
 80087ae:	f7fe f88e 	bl	80068ce <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80087b2:	480c      	ldr	r0, [pc, #48]	; (80087e4 <prvInitialiseTaskLists+0x70>)
 80087b4:	f7fe f88b 	bl	80068ce <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80087b8:	480b      	ldr	r0, [pc, #44]	; (80087e8 <prvInitialiseTaskLists+0x74>)
 80087ba:	f7fe f888 	bl	80068ce <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80087be:	4b0b      	ldr	r3, [pc, #44]	; (80087ec <prvInitialiseTaskLists+0x78>)
 80087c0:	4a05      	ldr	r2, [pc, #20]	; (80087d8 <prvInitialiseTaskLists+0x64>)
 80087c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80087c4:	4b0a      	ldr	r3, [pc, #40]	; (80087f0 <prvInitialiseTaskLists+0x7c>)
 80087c6:	4a05      	ldr	r2, [pc, #20]	; (80087dc <prvInitialiseTaskLists+0x68>)
 80087c8:	601a      	str	r2, [r3, #0]
}
 80087ca:	bf00      	nop
 80087cc:	3708      	adds	r7, #8
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	20003a90 	.word	0x20003a90
 80087d8:	20003b1c 	.word	0x20003b1c
 80087dc:	20003b30 	.word	0x20003b30
 80087e0:	20003b4c 	.word	0x20003b4c
 80087e4:	20003b60 	.word	0x20003b60
 80087e8:	20003b78 	.word	0x20003b78
 80087ec:	20003b44 	.word	0x20003b44
 80087f0:	20003b48 	.word	0x20003b48

080087f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80087fa:	e019      	b.n	8008830 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80087fc:	f000 ff66 	bl	80096cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008800:	4b10      	ldr	r3, [pc, #64]	; (8008844 <prvCheckTasksWaitingTermination+0x50>)
 8008802:	68db      	ldr	r3, [r3, #12]
 8008804:	68db      	ldr	r3, [r3, #12]
 8008806:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	3304      	adds	r3, #4
 800880c:	4618      	mov	r0, r3
 800880e:	f7fe f8e8 	bl	80069e2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008812:	4b0d      	ldr	r3, [pc, #52]	; (8008848 <prvCheckTasksWaitingTermination+0x54>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	3b01      	subs	r3, #1
 8008818:	4a0b      	ldr	r2, [pc, #44]	; (8008848 <prvCheckTasksWaitingTermination+0x54>)
 800881a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800881c:	4b0b      	ldr	r3, [pc, #44]	; (800884c <prvCheckTasksWaitingTermination+0x58>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	3b01      	subs	r3, #1
 8008822:	4a0a      	ldr	r2, [pc, #40]	; (800884c <prvCheckTasksWaitingTermination+0x58>)
 8008824:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008826:	f000 ff85 	bl	8009734 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 f810 	bl	8008850 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008830:	4b06      	ldr	r3, [pc, #24]	; (800884c <prvCheckTasksWaitingTermination+0x58>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d1e1      	bne.n	80087fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008838:	bf00      	nop
 800883a:	bf00      	nop
 800883c:	3708      	adds	r7, #8
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	20003b60 	.word	0x20003b60
 8008848:	20003b8c 	.word	0x20003b8c
 800884c:	20003b74 	.word	0x20003b74

08008850 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800885e:	2b00      	cmp	r3, #0
 8008860:	d108      	bne.n	8008874 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008866:	4618      	mov	r0, r3
 8008868:	f001 f926 	bl	8009ab8 <vPortFree>
				vPortFree( pxTCB );
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f001 f923 	bl	8009ab8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008872:	e01a      	b.n	80088aa <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800887a:	2b01      	cmp	r3, #1
 800887c:	d103      	bne.n	8008886 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f001 f91a 	bl	8009ab8 <vPortFree>
	}
 8008884:	e011      	b.n	80088aa <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800888c:	2b02      	cmp	r3, #2
 800888e:	d00c      	beq.n	80088aa <prvDeleteTCB+0x5a>
	__asm volatile
 8008890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008894:	b672      	cpsid	i
 8008896:	f383 8811 	msr	BASEPRI, r3
 800889a:	f3bf 8f6f 	isb	sy
 800889e:	f3bf 8f4f 	dsb	sy
 80088a2:	b662      	cpsie	i
 80088a4:	60fb      	str	r3, [r7, #12]
}
 80088a6:	bf00      	nop
 80088a8:	e7fe      	b.n	80088a8 <prvDeleteTCB+0x58>
	}
 80088aa:	bf00      	nop
 80088ac:	3710      	adds	r7, #16
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
	...

080088b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80088b4:	b480      	push	{r7}
 80088b6:	b083      	sub	sp, #12
 80088b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088ba:	4b0c      	ldr	r3, [pc, #48]	; (80088ec <prvResetNextTaskUnblockTime+0x38>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d104      	bne.n	80088ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80088c4:	4b0a      	ldr	r3, [pc, #40]	; (80088f0 <prvResetNextTaskUnblockTime+0x3c>)
 80088c6:	f04f 32ff 	mov.w	r2, #4294967295
 80088ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80088cc:	e008      	b.n	80088e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088ce:	4b07      	ldr	r3, [pc, #28]	; (80088ec <prvResetNextTaskUnblockTime+0x38>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	68db      	ldr	r3, [r3, #12]
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	4a04      	ldr	r2, [pc, #16]	; (80088f0 <prvResetNextTaskUnblockTime+0x3c>)
 80088de:	6013      	str	r3, [r2, #0]
}
 80088e0:	bf00      	nop
 80088e2:	370c      	adds	r7, #12
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr
 80088ec:	20003b44 	.word	0x20003b44
 80088f0:	20003bac 	.word	0x20003bac

080088f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80088f4:	b480      	push	{r7}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80088fa:	4b0b      	ldr	r3, [pc, #44]	; (8008928 <xTaskGetSchedulerState+0x34>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d102      	bne.n	8008908 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008902:	2301      	movs	r3, #1
 8008904:	607b      	str	r3, [r7, #4]
 8008906:	e008      	b.n	800891a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008908:	4b08      	ldr	r3, [pc, #32]	; (800892c <xTaskGetSchedulerState+0x38>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d102      	bne.n	8008916 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008910:	2302      	movs	r3, #2
 8008912:	607b      	str	r3, [r7, #4]
 8008914:	e001      	b.n	800891a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008916:	2300      	movs	r3, #0
 8008918:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800891a:	687b      	ldr	r3, [r7, #4]
	}
 800891c:	4618      	mov	r0, r3
 800891e:	370c      	adds	r7, #12
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr
 8008928:	20003b98 	.word	0x20003b98
 800892c:	20003bb4 	.word	0x20003bb4

08008930 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800893c:	2300      	movs	r3, #0
 800893e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d069      	beq.n	8008a1a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800894a:	4b36      	ldr	r3, [pc, #216]	; (8008a24 <xTaskPriorityInherit+0xf4>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008950:	429a      	cmp	r2, r3
 8008952:	d259      	bcs.n	8008a08 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	699b      	ldr	r3, [r3, #24]
 8008958:	2b00      	cmp	r3, #0
 800895a:	db06      	blt.n	800896a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800895c:	4b31      	ldr	r3, [pc, #196]	; (8008a24 <xTaskPriorityInherit+0xf4>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008962:	f1c3 0207 	rsb	r2, r3, #7
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	6959      	ldr	r1, [r3, #20]
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008972:	4613      	mov	r3, r2
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	4413      	add	r3, r2
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	4a2b      	ldr	r2, [pc, #172]	; (8008a28 <xTaskPriorityInherit+0xf8>)
 800897c:	4413      	add	r3, r2
 800897e:	4299      	cmp	r1, r3
 8008980:	d13a      	bne.n	80089f8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	3304      	adds	r3, #4
 8008986:	4618      	mov	r0, r3
 8008988:	f7fe f82b 	bl	80069e2 <uxListRemove>
 800898c:	4603      	mov	r3, r0
 800898e:	2b00      	cmp	r3, #0
 8008990:	d115      	bne.n	80089be <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008996:	4924      	ldr	r1, [pc, #144]	; (8008a28 <xTaskPriorityInherit+0xf8>)
 8008998:	4613      	mov	r3, r2
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	4413      	add	r3, r2
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	440b      	add	r3, r1
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d10a      	bne.n	80089be <xTaskPriorityInherit+0x8e>
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ac:	2201      	movs	r2, #1
 80089ae:	fa02 f303 	lsl.w	r3, r2, r3
 80089b2:	43da      	mvns	r2, r3
 80089b4:	4b1d      	ldr	r3, [pc, #116]	; (8008a2c <xTaskPriorityInherit+0xfc>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4013      	ands	r3, r2
 80089ba:	4a1c      	ldr	r2, [pc, #112]	; (8008a2c <xTaskPriorityInherit+0xfc>)
 80089bc:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80089be:	4b19      	ldr	r3, [pc, #100]	; (8008a24 <xTaskPriorityInherit+0xf4>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089cc:	2201      	movs	r2, #1
 80089ce:	409a      	lsls	r2, r3
 80089d0:	4b16      	ldr	r3, [pc, #88]	; (8008a2c <xTaskPriorityInherit+0xfc>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4313      	orrs	r3, r2
 80089d6:	4a15      	ldr	r2, [pc, #84]	; (8008a2c <xTaskPriorityInherit+0xfc>)
 80089d8:	6013      	str	r3, [r2, #0]
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089de:	4613      	mov	r3, r2
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	4413      	add	r3, r2
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	4a10      	ldr	r2, [pc, #64]	; (8008a28 <xTaskPriorityInherit+0xf8>)
 80089e8:	441a      	add	r2, r3
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	3304      	adds	r3, #4
 80089ee:	4619      	mov	r1, r3
 80089f0:	4610      	mov	r0, r2
 80089f2:	f7fd ff99 	bl	8006928 <vListInsertEnd>
 80089f6:	e004      	b.n	8008a02 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80089f8:	4b0a      	ldr	r3, [pc, #40]	; (8008a24 <xTaskPriorityInherit+0xf4>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008a02:	2301      	movs	r3, #1
 8008a04:	60fb      	str	r3, [r7, #12]
 8008a06:	e008      	b.n	8008a1a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008a0c:	4b05      	ldr	r3, [pc, #20]	; (8008a24 <xTaskPriorityInherit+0xf4>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d201      	bcs.n	8008a1a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008a16:	2301      	movs	r3, #1
 8008a18:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
	}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3710      	adds	r7, #16
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	20003a8c 	.word	0x20003a8c
 8008a28:	20003a90 	.word	0x20003a90
 8008a2c:	20003b94 	.word	0x20003b94

08008a30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b086      	sub	sp, #24
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d072      	beq.n	8008b2c <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008a46:	4b3c      	ldr	r3, [pc, #240]	; (8008b38 <xTaskPriorityDisinherit+0x108>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	693a      	ldr	r2, [r7, #16]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d00c      	beq.n	8008a6a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8008a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a54:	b672      	cpsid	i
 8008a56:	f383 8811 	msr	BASEPRI, r3
 8008a5a:	f3bf 8f6f 	isb	sy
 8008a5e:	f3bf 8f4f 	dsb	sy
 8008a62:	b662      	cpsie	i
 8008a64:	60fb      	str	r3, [r7, #12]
}
 8008a66:	bf00      	nop
 8008a68:	e7fe      	b.n	8008a68 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d10c      	bne.n	8008a8c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8008a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a76:	b672      	cpsid	i
 8008a78:	f383 8811 	msr	BASEPRI, r3
 8008a7c:	f3bf 8f6f 	isb	sy
 8008a80:	f3bf 8f4f 	dsb	sy
 8008a84:	b662      	cpsie	i
 8008a86:	60bb      	str	r3, [r7, #8]
}
 8008a88:	bf00      	nop
 8008a8a:	e7fe      	b.n	8008a8a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a90:	1e5a      	subs	r2, r3, #1
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	665a      	str	r2, [r3, #100]	; 0x64

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d044      	beq.n	8008b2c <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d140      	bne.n	8008b2c <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	3304      	adds	r3, #4
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7fd ff97 	bl	80069e2 <uxListRemove>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d115      	bne.n	8008ae6 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008abe:	491f      	ldr	r1, [pc, #124]	; (8008b3c <xTaskPriorityDisinherit+0x10c>)
 8008ac0:	4613      	mov	r3, r2
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	4413      	add	r3, r2
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	440b      	add	r3, r1
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d10a      	bne.n	8008ae6 <xTaskPriorityDisinherit+0xb6>
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8008ada:	43da      	mvns	r2, r3
 8008adc:	4b18      	ldr	r3, [pc, #96]	; (8008b40 <xTaskPriorityDisinherit+0x110>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4013      	ands	r3, r2
 8008ae2:	4a17      	ldr	r2, [pc, #92]	; (8008b40 <xTaskPriorityDisinherit+0x110>)
 8008ae4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af2:	f1c3 0207 	rsb	r2, r3, #7
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008afe:	2201      	movs	r2, #1
 8008b00:	409a      	lsls	r2, r3
 8008b02:	4b0f      	ldr	r3, [pc, #60]	; (8008b40 <xTaskPriorityDisinherit+0x110>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	4a0d      	ldr	r2, [pc, #52]	; (8008b40 <xTaskPriorityDisinherit+0x110>)
 8008b0a:	6013      	str	r3, [r2, #0]
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b10:	4613      	mov	r3, r2
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	4413      	add	r3, r2
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	4a08      	ldr	r2, [pc, #32]	; (8008b3c <xTaskPriorityDisinherit+0x10c>)
 8008b1a:	441a      	add	r2, r3
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	3304      	adds	r3, #4
 8008b20:	4619      	mov	r1, r3
 8008b22:	4610      	mov	r0, r2
 8008b24:	f7fd ff00 	bl	8006928 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008b2c:	697b      	ldr	r3, [r7, #20]
	}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3718      	adds	r7, #24
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	20003a8c 	.word	0x20003a8c
 8008b3c:	20003a90 	.word	0x20003a90
 8008b40:	20003b94 	.word	0x20003b94

08008b44 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b088      	sub	sp, #32
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008b52:	2301      	movs	r3, #1
 8008b54:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	f000 8087 	beq.w	8008c6c <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d10c      	bne.n	8008b80 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8008b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b6a:	b672      	cpsid	i
 8008b6c:	f383 8811 	msr	BASEPRI, r3
 8008b70:	f3bf 8f6f 	isb	sy
 8008b74:	f3bf 8f4f 	dsb	sy
 8008b78:	b662      	cpsie	i
 8008b7a:	60fb      	str	r3, [r7, #12]
}
 8008b7c:	bf00      	nop
 8008b7e:	e7fe      	b.n	8008b7e <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008b80:	69bb      	ldr	r3, [r7, #24]
 8008b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b84:	683a      	ldr	r2, [r7, #0]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d902      	bls.n	8008b90 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	61fb      	str	r3, [r7, #28]
 8008b8e:	e002      	b.n	8008b96 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b94:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9a:	69fa      	ldr	r2, [r7, #28]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d065      	beq.n	8008c6c <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ba4:	697a      	ldr	r2, [r7, #20]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d160      	bne.n	8008c6c <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008baa:	4b32      	ldr	r3, [pc, #200]	; (8008c74 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	69ba      	ldr	r2, [r7, #24]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d10c      	bne.n	8008bce <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8008bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb8:	b672      	cpsid	i
 8008bba:	f383 8811 	msr	BASEPRI, r3
 8008bbe:	f3bf 8f6f 	isb	sy
 8008bc2:	f3bf 8f4f 	dsb	sy
 8008bc6:	b662      	cpsie	i
 8008bc8:	60bb      	str	r3, [r7, #8]
}
 8008bca:	bf00      	nop
 8008bcc:	e7fe      	b.n	8008bcc <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008bd4:	69bb      	ldr	r3, [r7, #24]
 8008bd6:	69fa      	ldr	r2, [r7, #28]
 8008bd8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008bda:	69bb      	ldr	r3, [r7, #24]
 8008bdc:	699b      	ldr	r3, [r3, #24]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	db04      	blt.n	8008bec <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008be2:	69fb      	ldr	r3, [r7, #28]
 8008be4:	f1c3 0207 	rsb	r2, r3, #7
 8008be8:	69bb      	ldr	r3, [r7, #24]
 8008bea:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	6959      	ldr	r1, [r3, #20]
 8008bf0:	693a      	ldr	r2, [r7, #16]
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	4413      	add	r3, r2
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	4a1f      	ldr	r2, [pc, #124]	; (8008c78 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008bfc:	4413      	add	r3, r2
 8008bfe:	4299      	cmp	r1, r3
 8008c00:	d134      	bne.n	8008c6c <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	3304      	adds	r3, #4
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7fd feeb 	bl	80069e2 <uxListRemove>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d115      	bne.n	8008c3e <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008c12:	69bb      	ldr	r3, [r7, #24]
 8008c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c16:	4918      	ldr	r1, [pc, #96]	; (8008c78 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008c18:	4613      	mov	r3, r2
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	4413      	add	r3, r2
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	440b      	add	r3, r1
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d10a      	bne.n	8008c3e <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c32:	43da      	mvns	r2, r3
 8008c34:	4b11      	ldr	r3, [pc, #68]	; (8008c7c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4013      	ands	r3, r2
 8008c3a:	4a10      	ldr	r2, [pc, #64]	; (8008c7c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008c3c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008c3e:	69bb      	ldr	r3, [r7, #24]
 8008c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c42:	2201      	movs	r2, #1
 8008c44:	409a      	lsls	r2, r3
 8008c46:	4b0d      	ldr	r3, [pc, #52]	; (8008c7c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	4a0b      	ldr	r2, [pc, #44]	; (8008c7c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008c4e:	6013      	str	r3, [r2, #0]
 8008c50:	69bb      	ldr	r3, [r7, #24]
 8008c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c54:	4613      	mov	r3, r2
 8008c56:	009b      	lsls	r3, r3, #2
 8008c58:	4413      	add	r3, r2
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	4a06      	ldr	r2, [pc, #24]	; (8008c78 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008c5e:	441a      	add	r2, r3
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	3304      	adds	r3, #4
 8008c64:	4619      	mov	r1, r3
 8008c66:	4610      	mov	r0, r2
 8008c68:	f7fd fe5e 	bl	8006928 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c6c:	bf00      	nop
 8008c6e:	3720      	adds	r7, #32
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}
 8008c74:	20003a8c 	.word	0x20003a8c
 8008c78:	20003a90 	.word	0x20003a90
 8008c7c:	20003b94 	.word	0x20003b94

08008c80 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008c80:	b480      	push	{r7}
 8008c82:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008c84:	4b07      	ldr	r3, [pc, #28]	; (8008ca4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d004      	beq.n	8008c96 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008c8c:	4b05      	ldr	r3, [pc, #20]	; (8008ca4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008c92:	3201      	adds	r2, #1
 8008c94:	665a      	str	r2, [r3, #100]	; 0x64
		}

		return pxCurrentTCB;
 8008c96:	4b03      	ldr	r3, [pc, #12]	; (8008ca4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c98:	681b      	ldr	r3, [r3, #0]
	}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr
 8008ca4:	20003a8c 	.word	0x20003a8c

08008ca8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008cb2:	4b29      	ldr	r3, [pc, #164]	; (8008d58 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cb8:	4b28      	ldr	r3, [pc, #160]	; (8008d5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	3304      	adds	r3, #4
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7fd fe8f 	bl	80069e2 <uxListRemove>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d10b      	bne.n	8008ce2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008cca:	4b24      	ldr	r3, [pc, #144]	; (8008d5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd6:	43da      	mvns	r2, r3
 8008cd8:	4b21      	ldr	r3, [pc, #132]	; (8008d60 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4013      	ands	r3, r2
 8008cde:	4a20      	ldr	r2, [pc, #128]	; (8008d60 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008ce0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce8:	d10a      	bne.n	8008d00 <prvAddCurrentTaskToDelayedList+0x58>
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d007      	beq.n	8008d00 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cf0:	4b1a      	ldr	r3, [pc, #104]	; (8008d5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	3304      	adds	r3, #4
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	481a      	ldr	r0, [pc, #104]	; (8008d64 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008cfa:	f7fd fe15 	bl	8006928 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008cfe:	e026      	b.n	8008d4e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008d00:	68fa      	ldr	r2, [r7, #12]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4413      	add	r3, r2
 8008d06:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008d08:	4b14      	ldr	r3, [pc, #80]	; (8008d5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	68ba      	ldr	r2, [r7, #8]
 8008d0e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008d10:	68ba      	ldr	r2, [r7, #8]
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d209      	bcs.n	8008d2c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d18:	4b13      	ldr	r3, [pc, #76]	; (8008d68 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	4b0f      	ldr	r3, [pc, #60]	; (8008d5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	3304      	adds	r3, #4
 8008d22:	4619      	mov	r1, r3
 8008d24:	4610      	mov	r0, r2
 8008d26:	f7fd fe23 	bl	8006970 <vListInsert>
}
 8008d2a:	e010      	b.n	8008d4e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d2c:	4b0f      	ldr	r3, [pc, #60]	; (8008d6c <prvAddCurrentTaskToDelayedList+0xc4>)
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	4b0a      	ldr	r3, [pc, #40]	; (8008d5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	3304      	adds	r3, #4
 8008d36:	4619      	mov	r1, r3
 8008d38:	4610      	mov	r0, r2
 8008d3a:	f7fd fe19 	bl	8006970 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008d3e:	4b0c      	ldr	r3, [pc, #48]	; (8008d70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	68ba      	ldr	r2, [r7, #8]
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d202      	bcs.n	8008d4e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008d48:	4a09      	ldr	r2, [pc, #36]	; (8008d70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	6013      	str	r3, [r2, #0]
}
 8008d4e:	bf00      	nop
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	20003b90 	.word	0x20003b90
 8008d5c:	20003a8c 	.word	0x20003a8c
 8008d60:	20003b94 	.word	0x20003b94
 8008d64:	20003b78 	.word	0x20003b78
 8008d68:	20003b48 	.word	0x20003b48
 8008d6c:	20003b44 	.word	0x20003b44
 8008d70:	20003bac 	.word	0x20003bac

08008d74 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b08a      	sub	sp, #40	; 0x28
 8008d78:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008d7e:	f000 fb55 	bl	800942c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008d82:	4b1d      	ldr	r3, [pc, #116]	; (8008df8 <xTimerCreateTimerTask+0x84>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d021      	beq.n	8008dce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008d92:	1d3a      	adds	r2, r7, #4
 8008d94:	f107 0108 	add.w	r1, r7, #8
 8008d98:	f107 030c 	add.w	r3, r7, #12
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f7f7 fc81 	bl	80006a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008da2:	6879      	ldr	r1, [r7, #4]
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	68fa      	ldr	r2, [r7, #12]
 8008da8:	9202      	str	r2, [sp, #8]
 8008daa:	9301      	str	r3, [sp, #4]
 8008dac:	2302      	movs	r3, #2
 8008dae:	9300      	str	r3, [sp, #0]
 8008db0:	2300      	movs	r3, #0
 8008db2:	460a      	mov	r2, r1
 8008db4:	4911      	ldr	r1, [pc, #68]	; (8008dfc <xTimerCreateTimerTask+0x88>)
 8008db6:	4812      	ldr	r0, [pc, #72]	; (8008e00 <xTimerCreateTimerTask+0x8c>)
 8008db8:	f7fe feae 	bl	8007b18 <xTaskCreateStatic>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	4a11      	ldr	r2, [pc, #68]	; (8008e04 <xTimerCreateTimerTask+0x90>)
 8008dc0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008dc2:	4b10      	ldr	r3, [pc, #64]	; (8008e04 <xTimerCreateTimerTask+0x90>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d001      	beq.n	8008dce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d10c      	bne.n	8008dee <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8008dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd8:	b672      	cpsid	i
 8008dda:	f383 8811 	msr	BASEPRI, r3
 8008dde:	f3bf 8f6f 	isb	sy
 8008de2:	f3bf 8f4f 	dsb	sy
 8008de6:	b662      	cpsie	i
 8008de8:	613b      	str	r3, [r7, #16]
}
 8008dea:	bf00      	nop
 8008dec:	e7fe      	b.n	8008dec <xTimerCreateTimerTask+0x78>
	return xReturn;
 8008dee:	697b      	ldr	r3, [r7, #20]
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3718      	adds	r7, #24
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	20003bf0 	.word	0x20003bf0
 8008dfc:	08019c9c 	.word	0x08019c9c
 8008e00:	08009001 	.word	0x08009001
 8008e04:	20003bf4 	.word	0x20003bf4

08008e08 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b088      	sub	sp, #32
 8008e0c:	af02      	add	r7, sp, #8
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	607a      	str	r2, [r7, #4]
 8008e14:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8008e16:	202c      	movs	r0, #44	; 0x2c
 8008e18:	f000 fd84 	bl	8009924 <pvPortMalloc>
 8008e1c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d00d      	beq.n	8008e40 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	2200      	movs	r2, #0
 8008e28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	9301      	str	r3, [sp, #4]
 8008e30:	6a3b      	ldr	r3, [r7, #32]
 8008e32:	9300      	str	r3, [sp, #0]
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	68b9      	ldr	r1, [r7, #8]
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	f000 f805 	bl	8008e4a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8008e40:	697b      	ldr	r3, [r7, #20]
	}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3718      	adds	r7, #24
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8008e4a:	b580      	push	{r7, lr}
 8008e4c:	b086      	sub	sp, #24
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	60f8      	str	r0, [r7, #12]
 8008e52:	60b9      	str	r1, [r7, #8]
 8008e54:	607a      	str	r2, [r7, #4]
 8008e56:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d10c      	bne.n	8008e78 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 8008e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e62:	b672      	cpsid	i
 8008e64:	f383 8811 	msr	BASEPRI, r3
 8008e68:	f3bf 8f6f 	isb	sy
 8008e6c:	f3bf 8f4f 	dsb	sy
 8008e70:	b662      	cpsie	i
 8008e72:	617b      	str	r3, [r7, #20]
}
 8008e74:	bf00      	nop
 8008e76:	e7fe      	b.n	8008e76 <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 8008e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d01e      	beq.n	8008ebc <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8008e7e:	f000 fad5 	bl	800942c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8008e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e84:	68fa      	ldr	r2, [r7, #12]
 8008e86:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8a:	68ba      	ldr	r2, [r7, #8]
 8008e8c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8008e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e90:	683a      	ldr	r2, [r7, #0]
 8008e92:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e96:	6a3a      	ldr	r2, [r7, #32]
 8008e98:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9c:	3304      	adds	r3, #4
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f7fd fd35 	bl	800690e <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d008      	beq.n	8008ebc <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8008eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008eb0:	f043 0304 	orr.w	r3, r3, #4
 8008eb4:	b2da      	uxtb	r2, r3
 8008eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008ebc:	bf00      	nop
 8008ebe:	3718      	adds	r7, #24
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b08a      	sub	sp, #40	; 0x28
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	60f8      	str	r0, [r7, #12]
 8008ecc:	60b9      	str	r1, [r7, #8]
 8008ece:	607a      	str	r2, [r7, #4]
 8008ed0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d10c      	bne.n	8008ef6 <xTimerGenericCommand+0x32>
	__asm volatile
 8008edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee0:	b672      	cpsid	i
 8008ee2:	f383 8811 	msr	BASEPRI, r3
 8008ee6:	f3bf 8f6f 	isb	sy
 8008eea:	f3bf 8f4f 	dsb	sy
 8008eee:	b662      	cpsie	i
 8008ef0:	623b      	str	r3, [r7, #32]
}
 8008ef2:	bf00      	nop
 8008ef4:	e7fe      	b.n	8008ef4 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008ef6:	4b1a      	ldr	r3, [pc, #104]	; (8008f60 <xTimerGenericCommand+0x9c>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d02a      	beq.n	8008f54 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	2b05      	cmp	r3, #5
 8008f0e:	dc18      	bgt.n	8008f42 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008f10:	f7ff fcf0 	bl	80088f4 <xTaskGetSchedulerState>
 8008f14:	4603      	mov	r3, r0
 8008f16:	2b02      	cmp	r3, #2
 8008f18:	d109      	bne.n	8008f2e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008f1a:	4b11      	ldr	r3, [pc, #68]	; (8008f60 <xTimerGenericCommand+0x9c>)
 8008f1c:	6818      	ldr	r0, [r3, #0]
 8008f1e:	f107 0114 	add.w	r1, r7, #20
 8008f22:	2300      	movs	r3, #0
 8008f24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f26:	f7fd ff25 	bl	8006d74 <xQueueGenericSend>
 8008f2a:	6278      	str	r0, [r7, #36]	; 0x24
 8008f2c:	e012      	b.n	8008f54 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008f2e:	4b0c      	ldr	r3, [pc, #48]	; (8008f60 <xTimerGenericCommand+0x9c>)
 8008f30:	6818      	ldr	r0, [r3, #0]
 8008f32:	f107 0114 	add.w	r1, r7, #20
 8008f36:	2300      	movs	r3, #0
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f7fd ff1b 	bl	8006d74 <xQueueGenericSend>
 8008f3e:	6278      	str	r0, [r7, #36]	; 0x24
 8008f40:	e008      	b.n	8008f54 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008f42:	4b07      	ldr	r3, [pc, #28]	; (8008f60 <xTimerGenericCommand+0x9c>)
 8008f44:	6818      	ldr	r0, [r3, #0]
 8008f46:	f107 0114 	add.w	r1, r7, #20
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	683a      	ldr	r2, [r7, #0]
 8008f4e:	f7fe f817 	bl	8006f80 <xQueueGenericSendFromISR>
 8008f52:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3728      	adds	r7, #40	; 0x28
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	20003bf0 	.word	0x20003bf0

08008f64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b088      	sub	sp, #32
 8008f68:	af02      	add	r7, sp, #8
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f6e:	4b23      	ldr	r3, [pc, #140]	; (8008ffc <prvProcessExpiredTimer+0x98>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	68db      	ldr	r3, [r3, #12]
 8008f74:	68db      	ldr	r3, [r3, #12]
 8008f76:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	3304      	adds	r3, #4
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f7fd fd30 	bl	80069e2 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f88:	f003 0304 	and.w	r3, r3, #4
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d024      	beq.n	8008fda <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	699a      	ldr	r2, [r3, #24]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	18d1      	adds	r1, r2, r3
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	683a      	ldr	r2, [r7, #0]
 8008f9c:	6978      	ldr	r0, [r7, #20]
 8008f9e:	f000 f8d3 	bl	8009148 <prvInsertTimerInActiveList>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d021      	beq.n	8008fec <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008fa8:	2300      	movs	r3, #0
 8008faa:	9300      	str	r3, [sp, #0]
 8008fac:	2300      	movs	r3, #0
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	2100      	movs	r1, #0
 8008fb2:	6978      	ldr	r0, [r7, #20]
 8008fb4:	f7ff ff86 	bl	8008ec4 <xTimerGenericCommand>
 8008fb8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d115      	bne.n	8008fec <prvProcessExpiredTimer+0x88>
	__asm volatile
 8008fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc4:	b672      	cpsid	i
 8008fc6:	f383 8811 	msr	BASEPRI, r3
 8008fca:	f3bf 8f6f 	isb	sy
 8008fce:	f3bf 8f4f 	dsb	sy
 8008fd2:	b662      	cpsie	i
 8008fd4:	60fb      	str	r3, [r7, #12]
}
 8008fd6:	bf00      	nop
 8008fd8:	e7fe      	b.n	8008fd8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fe0:	f023 0301 	bic.w	r3, r3, #1
 8008fe4:	b2da      	uxtb	r2, r3
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	6a1b      	ldr	r3, [r3, #32]
 8008ff0:	6978      	ldr	r0, [r7, #20]
 8008ff2:	4798      	blx	r3
}
 8008ff4:	bf00      	nop
 8008ff6:	3718      	adds	r7, #24
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	20003be8 	.word	0x20003be8

08009000 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009008:	f107 0308 	add.w	r3, r7, #8
 800900c:	4618      	mov	r0, r3
 800900e:	f000 f857 	bl	80090c0 <prvGetNextExpireTime>
 8009012:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	4619      	mov	r1, r3
 8009018:	68f8      	ldr	r0, [r7, #12]
 800901a:	f000 f803 	bl	8009024 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800901e:	f000 f8d5 	bl	80091cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009022:	e7f1      	b.n	8009008 <prvTimerTask+0x8>

08009024 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800902e:	f7ff f847 	bl	80080c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009032:	f107 0308 	add.w	r3, r7, #8
 8009036:	4618      	mov	r0, r3
 8009038:	f000 f866 	bl	8009108 <prvSampleTimeNow>
 800903c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d130      	bne.n	80090a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d10a      	bne.n	8009060 <prvProcessTimerOrBlockTask+0x3c>
 800904a:	687a      	ldr	r2, [r7, #4]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	429a      	cmp	r2, r3
 8009050:	d806      	bhi.n	8009060 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009052:	f7ff f843 	bl	80080dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009056:	68f9      	ldr	r1, [r7, #12]
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f7ff ff83 	bl	8008f64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800905e:	e024      	b.n	80090aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d008      	beq.n	8009078 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009066:	4b13      	ldr	r3, [pc, #76]	; (80090b4 <prvProcessTimerOrBlockTask+0x90>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d101      	bne.n	8009074 <prvProcessTimerOrBlockTask+0x50>
 8009070:	2301      	movs	r3, #1
 8009072:	e000      	b.n	8009076 <prvProcessTimerOrBlockTask+0x52>
 8009074:	2300      	movs	r3, #0
 8009076:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009078:	4b0f      	ldr	r3, [pc, #60]	; (80090b8 <prvProcessTimerOrBlockTask+0x94>)
 800907a:	6818      	ldr	r0, [r3, #0]
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	1ad3      	subs	r3, r2, r3
 8009082:	683a      	ldr	r2, [r7, #0]
 8009084:	4619      	mov	r1, r3
 8009086:	f7fe fd13 	bl	8007ab0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800908a:	f7ff f827 	bl	80080dc <xTaskResumeAll>
 800908e:	4603      	mov	r3, r0
 8009090:	2b00      	cmp	r3, #0
 8009092:	d10a      	bne.n	80090aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009094:	4b09      	ldr	r3, [pc, #36]	; (80090bc <prvProcessTimerOrBlockTask+0x98>)
 8009096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800909a:	601a      	str	r2, [r3, #0]
 800909c:	f3bf 8f4f 	dsb	sy
 80090a0:	f3bf 8f6f 	isb	sy
}
 80090a4:	e001      	b.n	80090aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80090a6:	f7ff f819 	bl	80080dc <xTaskResumeAll>
}
 80090aa:	bf00      	nop
 80090ac:	3710      	adds	r7, #16
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop
 80090b4:	20003bec 	.word	0x20003bec
 80090b8:	20003bf0 	.word	0x20003bf0
 80090bc:	e000ed04 	.word	0xe000ed04

080090c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80090c0:	b480      	push	{r7}
 80090c2:	b085      	sub	sp, #20
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80090c8:	4b0e      	ldr	r3, [pc, #56]	; (8009104 <prvGetNextExpireTime+0x44>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d101      	bne.n	80090d6 <prvGetNextExpireTime+0x16>
 80090d2:	2201      	movs	r2, #1
 80090d4:	e000      	b.n	80090d8 <prvGetNextExpireTime+0x18>
 80090d6:	2200      	movs	r2, #0
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d105      	bne.n	80090f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80090e4:	4b07      	ldr	r3, [pc, #28]	; (8009104 <prvGetNextExpireTime+0x44>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	68db      	ldr	r3, [r3, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	60fb      	str	r3, [r7, #12]
 80090ee:	e001      	b.n	80090f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80090f0:	2300      	movs	r3, #0
 80090f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80090f4:	68fb      	ldr	r3, [r7, #12]
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3714      	adds	r7, #20
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr
 8009102:	bf00      	nop
 8009104:	20003be8 	.word	0x20003be8

08009108 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009110:	f7ff f882 	bl	8008218 <xTaskGetTickCount>
 8009114:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009116:	4b0b      	ldr	r3, [pc, #44]	; (8009144 <prvSampleTimeNow+0x3c>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68fa      	ldr	r2, [r7, #12]
 800911c:	429a      	cmp	r2, r3
 800911e:	d205      	bcs.n	800912c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009120:	f000 f91e 	bl	8009360 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2201      	movs	r2, #1
 8009128:	601a      	str	r2, [r3, #0]
 800912a:	e002      	b.n	8009132 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009132:	4a04      	ldr	r2, [pc, #16]	; (8009144 <prvSampleTimeNow+0x3c>)
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009138:	68fb      	ldr	r3, [r7, #12]
}
 800913a:	4618      	mov	r0, r3
 800913c:	3710      	adds	r7, #16
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop
 8009144:	20003bf8 	.word	0x20003bf8

08009148 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b086      	sub	sp, #24
 800914c:	af00      	add	r7, sp, #0
 800914e:	60f8      	str	r0, [r7, #12]
 8009150:	60b9      	str	r1, [r7, #8]
 8009152:	607a      	str	r2, [r7, #4]
 8009154:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009156:	2300      	movs	r3, #0
 8009158:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	68ba      	ldr	r2, [r7, #8]
 800915e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	68fa      	ldr	r2, [r7, #12]
 8009164:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009166:	68ba      	ldr	r2, [r7, #8]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	429a      	cmp	r2, r3
 800916c:	d812      	bhi.n	8009194 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	1ad2      	subs	r2, r2, r3
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	699b      	ldr	r3, [r3, #24]
 8009178:	429a      	cmp	r2, r3
 800917a:	d302      	bcc.n	8009182 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800917c:	2301      	movs	r3, #1
 800917e:	617b      	str	r3, [r7, #20]
 8009180:	e01b      	b.n	80091ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009182:	4b10      	ldr	r3, [pc, #64]	; (80091c4 <prvInsertTimerInActiveList+0x7c>)
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	3304      	adds	r3, #4
 800918a:	4619      	mov	r1, r3
 800918c:	4610      	mov	r0, r2
 800918e:	f7fd fbef 	bl	8006970 <vListInsert>
 8009192:	e012      	b.n	80091ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	429a      	cmp	r2, r3
 800919a:	d206      	bcs.n	80091aa <prvInsertTimerInActiveList+0x62>
 800919c:	68ba      	ldr	r2, [r7, #8]
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d302      	bcc.n	80091aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80091a4:	2301      	movs	r3, #1
 80091a6:	617b      	str	r3, [r7, #20]
 80091a8:	e007      	b.n	80091ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80091aa:	4b07      	ldr	r3, [pc, #28]	; (80091c8 <prvInsertTimerInActiveList+0x80>)
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	3304      	adds	r3, #4
 80091b2:	4619      	mov	r1, r3
 80091b4:	4610      	mov	r0, r2
 80091b6:	f7fd fbdb 	bl	8006970 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80091ba:	697b      	ldr	r3, [r7, #20]
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3718      	adds	r7, #24
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}
 80091c4:	20003bec 	.word	0x20003bec
 80091c8:	20003be8 	.word	0x20003be8

080091cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b08c      	sub	sp, #48	; 0x30
 80091d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80091d2:	e0b2      	b.n	800933a <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	f2c0 80ae 	blt.w	8009338 <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80091e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e2:	695b      	ldr	r3, [r3, #20]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d004      	beq.n	80091f2 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ea:	3304      	adds	r3, #4
 80091ec:	4618      	mov	r0, r3
 80091ee:	f7fd fbf8 	bl	80069e2 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80091f2:	1d3b      	adds	r3, r7, #4
 80091f4:	4618      	mov	r0, r3
 80091f6:	f7ff ff87 	bl	8009108 <prvSampleTimeNow>
 80091fa:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	2b09      	cmp	r3, #9
 8009200:	f200 809b 	bhi.w	800933a <prvProcessReceivedCommands+0x16e>
 8009204:	a201      	add	r2, pc, #4	; (adr r2, 800920c <prvProcessReceivedCommands+0x40>)
 8009206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800920a:	bf00      	nop
 800920c:	08009235 	.word	0x08009235
 8009210:	08009235 	.word	0x08009235
 8009214:	08009235 	.word	0x08009235
 8009218:	080092ad 	.word	0x080092ad
 800921c:	080092c1 	.word	0x080092c1
 8009220:	0800930f 	.word	0x0800930f
 8009224:	08009235 	.word	0x08009235
 8009228:	08009235 	.word	0x08009235
 800922c:	080092ad 	.word	0x080092ad
 8009230:	080092c1 	.word	0x080092c1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009236:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800923a:	f043 0301 	orr.w	r3, r3, #1
 800923e:	b2da      	uxtb	r2, r3
 8009240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009242:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009246:	68fa      	ldr	r2, [r7, #12]
 8009248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924a:	699b      	ldr	r3, [r3, #24]
 800924c:	18d1      	adds	r1, r2, r3
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	6a3a      	ldr	r2, [r7, #32]
 8009252:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009254:	f7ff ff78 	bl	8009148 <prvInsertTimerInActiveList>
 8009258:	4603      	mov	r3, r0
 800925a:	2b00      	cmp	r3, #0
 800925c:	d06d      	beq.n	800933a <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800925e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009260:	6a1b      	ldr	r3, [r3, #32]
 8009262:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009264:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009268:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800926c:	f003 0304 	and.w	r3, r3, #4
 8009270:	2b00      	cmp	r3, #0
 8009272:	d062      	beq.n	800933a <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009274:	68fa      	ldr	r2, [r7, #12]
 8009276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009278:	699b      	ldr	r3, [r3, #24]
 800927a:	441a      	add	r2, r3
 800927c:	2300      	movs	r3, #0
 800927e:	9300      	str	r3, [sp, #0]
 8009280:	2300      	movs	r3, #0
 8009282:	2100      	movs	r1, #0
 8009284:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009286:	f7ff fe1d 	bl	8008ec4 <xTimerGenericCommand>
 800928a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d153      	bne.n	800933a <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8009292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009296:	b672      	cpsid	i
 8009298:	f383 8811 	msr	BASEPRI, r3
 800929c:	f3bf 8f6f 	isb	sy
 80092a0:	f3bf 8f4f 	dsb	sy
 80092a4:	b662      	cpsie	i
 80092a6:	61bb      	str	r3, [r7, #24]
}
 80092a8:	bf00      	nop
 80092aa:	e7fe      	b.n	80092aa <prvProcessReceivedCommands+0xde>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80092ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092b2:	f023 0301 	bic.w	r3, r3, #1
 80092b6:	b2da      	uxtb	r2, r3
 80092b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80092be:	e03c      	b.n	800933a <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80092c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092c6:	f043 0301 	orr.w	r3, r3, #1
 80092ca:	b2da      	uxtb	r2, r3
 80092cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80092d2:	68fa      	ldr	r2, [r7, #12]
 80092d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80092d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092da:	699b      	ldr	r3, [r3, #24]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d10c      	bne.n	80092fa <prvProcessReceivedCommands+0x12e>
	__asm volatile
 80092e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e4:	b672      	cpsid	i
 80092e6:	f383 8811 	msr	BASEPRI, r3
 80092ea:	f3bf 8f6f 	isb	sy
 80092ee:	f3bf 8f4f 	dsb	sy
 80092f2:	b662      	cpsie	i
 80092f4:	617b      	str	r3, [r7, #20]
}
 80092f6:	bf00      	nop
 80092f8:	e7fe      	b.n	80092f8 <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80092fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fc:	699a      	ldr	r2, [r3, #24]
 80092fe:	6a3b      	ldr	r3, [r7, #32]
 8009300:	18d1      	adds	r1, r2, r3
 8009302:	6a3b      	ldr	r3, [r7, #32]
 8009304:	6a3a      	ldr	r2, [r7, #32]
 8009306:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009308:	f7ff ff1e 	bl	8009148 <prvInsertTimerInActiveList>
					break;
 800930c:	e015      	b.n	800933a <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800930e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009310:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009314:	f003 0302 	and.w	r3, r3, #2
 8009318:	2b00      	cmp	r3, #0
 800931a:	d103      	bne.n	8009324 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 800931c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800931e:	f000 fbcb 	bl	8009ab8 <vPortFree>
 8009322:	e00a      	b.n	800933a <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009326:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800932a:	f023 0301 	bic.w	r3, r3, #1
 800932e:	b2da      	uxtb	r2, r3
 8009330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009332:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009336:	e000      	b.n	800933a <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009338:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800933a:	4b08      	ldr	r3, [pc, #32]	; (800935c <prvProcessReceivedCommands+0x190>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f107 0108 	add.w	r1, r7, #8
 8009342:	2200      	movs	r2, #0
 8009344:	4618      	mov	r0, r3
 8009346:	f7fd ff51 	bl	80071ec <xQueueReceive>
 800934a:	4603      	mov	r3, r0
 800934c:	2b00      	cmp	r3, #0
 800934e:	f47f af41 	bne.w	80091d4 <prvProcessReceivedCommands+0x8>
	}
}
 8009352:	bf00      	nop
 8009354:	bf00      	nop
 8009356:	3728      	adds	r7, #40	; 0x28
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}
 800935c:	20003bf0 	.word	0x20003bf0

08009360 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b088      	sub	sp, #32
 8009364:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009366:	e04a      	b.n	80093fe <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009368:	4b2e      	ldr	r3, [pc, #184]	; (8009424 <prvSwitchTimerLists+0xc4>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	68db      	ldr	r3, [r3, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009372:	4b2c      	ldr	r3, [pc, #176]	; (8009424 <prvSwitchTimerLists+0xc4>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	68db      	ldr	r3, [r3, #12]
 8009378:	68db      	ldr	r3, [r3, #12]
 800937a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	3304      	adds	r3, #4
 8009380:	4618      	mov	r0, r3
 8009382:	f7fd fb2e 	bl	80069e2 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	6a1b      	ldr	r3, [r3, #32]
 800938a:	68f8      	ldr	r0, [r7, #12]
 800938c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009394:	f003 0304 	and.w	r3, r3, #4
 8009398:	2b00      	cmp	r3, #0
 800939a:	d030      	beq.n	80093fe <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	699b      	ldr	r3, [r3, #24]
 80093a0:	693a      	ldr	r2, [r7, #16]
 80093a2:	4413      	add	r3, r2
 80093a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80093a6:	68ba      	ldr	r2, [r7, #8]
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d90e      	bls.n	80093cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	68ba      	ldr	r2, [r7, #8]
 80093b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	68fa      	ldr	r2, [r7, #12]
 80093b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80093ba:	4b1a      	ldr	r3, [pc, #104]	; (8009424 <prvSwitchTimerLists+0xc4>)
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	3304      	adds	r3, #4
 80093c2:	4619      	mov	r1, r3
 80093c4:	4610      	mov	r0, r2
 80093c6:	f7fd fad3 	bl	8006970 <vListInsert>
 80093ca:	e018      	b.n	80093fe <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80093cc:	2300      	movs	r3, #0
 80093ce:	9300      	str	r3, [sp, #0]
 80093d0:	2300      	movs	r3, #0
 80093d2:	693a      	ldr	r2, [r7, #16]
 80093d4:	2100      	movs	r1, #0
 80093d6:	68f8      	ldr	r0, [r7, #12]
 80093d8:	f7ff fd74 	bl	8008ec4 <xTimerGenericCommand>
 80093dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d10c      	bne.n	80093fe <prvSwitchTimerLists+0x9e>
	__asm volatile
 80093e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e8:	b672      	cpsid	i
 80093ea:	f383 8811 	msr	BASEPRI, r3
 80093ee:	f3bf 8f6f 	isb	sy
 80093f2:	f3bf 8f4f 	dsb	sy
 80093f6:	b662      	cpsie	i
 80093f8:	603b      	str	r3, [r7, #0]
}
 80093fa:	bf00      	nop
 80093fc:	e7fe      	b.n	80093fc <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80093fe:	4b09      	ldr	r3, [pc, #36]	; (8009424 <prvSwitchTimerLists+0xc4>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d1af      	bne.n	8009368 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009408:	4b06      	ldr	r3, [pc, #24]	; (8009424 <prvSwitchTimerLists+0xc4>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800940e:	4b06      	ldr	r3, [pc, #24]	; (8009428 <prvSwitchTimerLists+0xc8>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a04      	ldr	r2, [pc, #16]	; (8009424 <prvSwitchTimerLists+0xc4>)
 8009414:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009416:	4a04      	ldr	r2, [pc, #16]	; (8009428 <prvSwitchTimerLists+0xc8>)
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	6013      	str	r3, [r2, #0]
}
 800941c:	bf00      	nop
 800941e:	3718      	adds	r7, #24
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}
 8009424:	20003be8 	.word	0x20003be8
 8009428:	20003bec 	.word	0x20003bec

0800942c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009432:	f000 f94b 	bl	80096cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009436:	4b15      	ldr	r3, [pc, #84]	; (800948c <prvCheckForValidListAndQueue+0x60>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d120      	bne.n	8009480 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800943e:	4814      	ldr	r0, [pc, #80]	; (8009490 <prvCheckForValidListAndQueue+0x64>)
 8009440:	f7fd fa45 	bl	80068ce <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009444:	4813      	ldr	r0, [pc, #76]	; (8009494 <prvCheckForValidListAndQueue+0x68>)
 8009446:	f7fd fa42 	bl	80068ce <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800944a:	4b13      	ldr	r3, [pc, #76]	; (8009498 <prvCheckForValidListAndQueue+0x6c>)
 800944c:	4a10      	ldr	r2, [pc, #64]	; (8009490 <prvCheckForValidListAndQueue+0x64>)
 800944e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009450:	4b12      	ldr	r3, [pc, #72]	; (800949c <prvCheckForValidListAndQueue+0x70>)
 8009452:	4a10      	ldr	r2, [pc, #64]	; (8009494 <prvCheckForValidListAndQueue+0x68>)
 8009454:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009456:	2300      	movs	r3, #0
 8009458:	9300      	str	r3, [sp, #0]
 800945a:	4b11      	ldr	r3, [pc, #68]	; (80094a0 <prvCheckForValidListAndQueue+0x74>)
 800945c:	4a11      	ldr	r2, [pc, #68]	; (80094a4 <prvCheckForValidListAndQueue+0x78>)
 800945e:	210c      	movs	r1, #12
 8009460:	200a      	movs	r0, #10
 8009462:	f7fd fb53 	bl	8006b0c <xQueueGenericCreateStatic>
 8009466:	4603      	mov	r3, r0
 8009468:	4a08      	ldr	r2, [pc, #32]	; (800948c <prvCheckForValidListAndQueue+0x60>)
 800946a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800946c:	4b07      	ldr	r3, [pc, #28]	; (800948c <prvCheckForValidListAndQueue+0x60>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d005      	beq.n	8009480 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009474:	4b05      	ldr	r3, [pc, #20]	; (800948c <prvCheckForValidListAndQueue+0x60>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	490b      	ldr	r1, [pc, #44]	; (80094a8 <prvCheckForValidListAndQueue+0x7c>)
 800947a:	4618      	mov	r0, r3
 800947c:	f7fe fac4 	bl	8007a08 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009480:	f000 f958 	bl	8009734 <vPortExitCritical>
}
 8009484:	bf00      	nop
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
 800948a:	bf00      	nop
 800948c:	20003bf0 	.word	0x20003bf0
 8009490:	20003bc0 	.word	0x20003bc0
 8009494:	20003bd4 	.word	0x20003bd4
 8009498:	20003be8 	.word	0x20003be8
 800949c:	20003bec 	.word	0x20003bec
 80094a0:	20003c74 	.word	0x20003c74
 80094a4:	20003bfc 	.word	0x20003bfc
 80094a8:	08019ca4 	.word	0x08019ca4

080094ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80094ac:	b480      	push	{r7}
 80094ae:	b085      	sub	sp, #20
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	60f8      	str	r0, [r7, #12]
 80094b4:	60b9      	str	r1, [r7, #8]
 80094b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	3b04      	subs	r3, #4
 80094bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80094c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	3b04      	subs	r3, #4
 80094ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	f023 0201 	bic.w	r2, r3, #1
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	3b04      	subs	r3, #4
 80094da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80094dc:	4a0c      	ldr	r2, [pc, #48]	; (8009510 <pxPortInitialiseStack+0x64>)
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	3b14      	subs	r3, #20
 80094e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80094e8:	687a      	ldr	r2, [r7, #4]
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	3b04      	subs	r3, #4
 80094f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f06f 0202 	mvn.w	r2, #2
 80094fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	3b20      	subs	r3, #32
 8009500:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009502:	68fb      	ldr	r3, [r7, #12]
}
 8009504:	4618      	mov	r0, r3
 8009506:	3714      	adds	r7, #20
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr
 8009510:	08009515 	.word	0x08009515

08009514 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009514:	b480      	push	{r7}
 8009516:	b085      	sub	sp, #20
 8009518:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800951a:	2300      	movs	r3, #0
 800951c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800951e:	4b14      	ldr	r3, [pc, #80]	; (8009570 <prvTaskExitError+0x5c>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009526:	d00c      	beq.n	8009542 <prvTaskExitError+0x2e>
	__asm volatile
 8009528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952c:	b672      	cpsid	i
 800952e:	f383 8811 	msr	BASEPRI, r3
 8009532:	f3bf 8f6f 	isb	sy
 8009536:	f3bf 8f4f 	dsb	sy
 800953a:	b662      	cpsie	i
 800953c:	60fb      	str	r3, [r7, #12]
}
 800953e:	bf00      	nop
 8009540:	e7fe      	b.n	8009540 <prvTaskExitError+0x2c>
	__asm volatile
 8009542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009546:	b672      	cpsid	i
 8009548:	f383 8811 	msr	BASEPRI, r3
 800954c:	f3bf 8f6f 	isb	sy
 8009550:	f3bf 8f4f 	dsb	sy
 8009554:	b662      	cpsie	i
 8009556:	60bb      	str	r3, [r7, #8]
}
 8009558:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800955a:	bf00      	nop
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d0fc      	beq.n	800955c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009562:	bf00      	nop
 8009564:	bf00      	nop
 8009566:	3714      	adds	r7, #20
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr
 8009570:	2000000c 	.word	0x2000000c
	...

08009580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009580:	4b07      	ldr	r3, [pc, #28]	; (80095a0 <pxCurrentTCBConst2>)
 8009582:	6819      	ldr	r1, [r3, #0]
 8009584:	6808      	ldr	r0, [r1, #0]
 8009586:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800958a:	f380 8809 	msr	PSP, r0
 800958e:	f3bf 8f6f 	isb	sy
 8009592:	f04f 0000 	mov.w	r0, #0
 8009596:	f380 8811 	msr	BASEPRI, r0
 800959a:	4770      	bx	lr
 800959c:	f3af 8000 	nop.w

080095a0 <pxCurrentTCBConst2>:
 80095a0:	20003a8c 	.word	0x20003a8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80095a4:	bf00      	nop
 80095a6:	bf00      	nop

080095a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80095a8:	4808      	ldr	r0, [pc, #32]	; (80095cc <prvPortStartFirstTask+0x24>)
 80095aa:	6800      	ldr	r0, [r0, #0]
 80095ac:	6800      	ldr	r0, [r0, #0]
 80095ae:	f380 8808 	msr	MSP, r0
 80095b2:	f04f 0000 	mov.w	r0, #0
 80095b6:	f380 8814 	msr	CONTROL, r0
 80095ba:	b662      	cpsie	i
 80095bc:	b661      	cpsie	f
 80095be:	f3bf 8f4f 	dsb	sy
 80095c2:	f3bf 8f6f 	isb	sy
 80095c6:	df00      	svc	0
 80095c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80095ca:	bf00      	nop
 80095cc:	e000ed08 	.word	0xe000ed08

080095d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80095d6:	4b37      	ldr	r3, [pc, #220]	; (80096b4 <xPortStartScheduler+0xe4>)
 80095d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	22ff      	movs	r2, #255	; 0xff
 80095e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	781b      	ldrb	r3, [r3, #0]
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80095f0:	78fb      	ldrb	r3, [r7, #3]
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80095f8:	b2da      	uxtb	r2, r3
 80095fa:	4b2f      	ldr	r3, [pc, #188]	; (80096b8 <xPortStartScheduler+0xe8>)
 80095fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80095fe:	4b2f      	ldr	r3, [pc, #188]	; (80096bc <xPortStartScheduler+0xec>)
 8009600:	2207      	movs	r2, #7
 8009602:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009604:	e009      	b.n	800961a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009606:	4b2d      	ldr	r3, [pc, #180]	; (80096bc <xPortStartScheduler+0xec>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	3b01      	subs	r3, #1
 800960c:	4a2b      	ldr	r2, [pc, #172]	; (80096bc <xPortStartScheduler+0xec>)
 800960e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009610:	78fb      	ldrb	r3, [r7, #3]
 8009612:	b2db      	uxtb	r3, r3
 8009614:	005b      	lsls	r3, r3, #1
 8009616:	b2db      	uxtb	r3, r3
 8009618:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800961a:	78fb      	ldrb	r3, [r7, #3]
 800961c:	b2db      	uxtb	r3, r3
 800961e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009622:	2b80      	cmp	r3, #128	; 0x80
 8009624:	d0ef      	beq.n	8009606 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009626:	4b25      	ldr	r3, [pc, #148]	; (80096bc <xPortStartScheduler+0xec>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f1c3 0307 	rsb	r3, r3, #7
 800962e:	2b04      	cmp	r3, #4
 8009630:	d00c      	beq.n	800964c <xPortStartScheduler+0x7c>
	__asm volatile
 8009632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009636:	b672      	cpsid	i
 8009638:	f383 8811 	msr	BASEPRI, r3
 800963c:	f3bf 8f6f 	isb	sy
 8009640:	f3bf 8f4f 	dsb	sy
 8009644:	b662      	cpsie	i
 8009646:	60bb      	str	r3, [r7, #8]
}
 8009648:	bf00      	nop
 800964a:	e7fe      	b.n	800964a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800964c:	4b1b      	ldr	r3, [pc, #108]	; (80096bc <xPortStartScheduler+0xec>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	021b      	lsls	r3, r3, #8
 8009652:	4a1a      	ldr	r2, [pc, #104]	; (80096bc <xPortStartScheduler+0xec>)
 8009654:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009656:	4b19      	ldr	r3, [pc, #100]	; (80096bc <xPortStartScheduler+0xec>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800965e:	4a17      	ldr	r2, [pc, #92]	; (80096bc <xPortStartScheduler+0xec>)
 8009660:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	b2da      	uxtb	r2, r3
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800966a:	4b15      	ldr	r3, [pc, #84]	; (80096c0 <xPortStartScheduler+0xf0>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a14      	ldr	r2, [pc, #80]	; (80096c0 <xPortStartScheduler+0xf0>)
 8009670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009674:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009676:	4b12      	ldr	r3, [pc, #72]	; (80096c0 <xPortStartScheduler+0xf0>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a11      	ldr	r2, [pc, #68]	; (80096c0 <xPortStartScheduler+0xf0>)
 800967c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009680:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009682:	f000 f8dd 	bl	8009840 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009686:	4b0f      	ldr	r3, [pc, #60]	; (80096c4 <xPortStartScheduler+0xf4>)
 8009688:	2200      	movs	r2, #0
 800968a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800968c:	f000 f8fc 	bl	8009888 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009690:	4b0d      	ldr	r3, [pc, #52]	; (80096c8 <xPortStartScheduler+0xf8>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a0c      	ldr	r2, [pc, #48]	; (80096c8 <xPortStartScheduler+0xf8>)
 8009696:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800969a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800969c:	f7ff ff84 	bl	80095a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80096a0:	f7fe fe96 	bl	80083d0 <vTaskSwitchContext>
	prvTaskExitError();
 80096a4:	f7ff ff36 	bl	8009514 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80096a8:	2300      	movs	r3, #0
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3710      	adds	r7, #16
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	e000e400 	.word	0xe000e400
 80096b8:	20003cc4 	.word	0x20003cc4
 80096bc:	20003cc8 	.word	0x20003cc8
 80096c0:	e000ed20 	.word	0xe000ed20
 80096c4:	2000000c 	.word	0x2000000c
 80096c8:	e000ef34 	.word	0xe000ef34

080096cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
	__asm volatile
 80096d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d6:	b672      	cpsid	i
 80096d8:	f383 8811 	msr	BASEPRI, r3
 80096dc:	f3bf 8f6f 	isb	sy
 80096e0:	f3bf 8f4f 	dsb	sy
 80096e4:	b662      	cpsie	i
 80096e6:	607b      	str	r3, [r7, #4]
}
 80096e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80096ea:	4b10      	ldr	r3, [pc, #64]	; (800972c <vPortEnterCritical+0x60>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	3301      	adds	r3, #1
 80096f0:	4a0e      	ldr	r2, [pc, #56]	; (800972c <vPortEnterCritical+0x60>)
 80096f2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80096f4:	4b0d      	ldr	r3, [pc, #52]	; (800972c <vPortEnterCritical+0x60>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d111      	bne.n	8009720 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80096fc:	4b0c      	ldr	r3, [pc, #48]	; (8009730 <vPortEnterCritical+0x64>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	b2db      	uxtb	r3, r3
 8009702:	2b00      	cmp	r3, #0
 8009704:	d00c      	beq.n	8009720 <vPortEnterCritical+0x54>
	__asm volatile
 8009706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970a:	b672      	cpsid	i
 800970c:	f383 8811 	msr	BASEPRI, r3
 8009710:	f3bf 8f6f 	isb	sy
 8009714:	f3bf 8f4f 	dsb	sy
 8009718:	b662      	cpsie	i
 800971a:	603b      	str	r3, [r7, #0]
}
 800971c:	bf00      	nop
 800971e:	e7fe      	b.n	800971e <vPortEnterCritical+0x52>
	}
}
 8009720:	bf00      	nop
 8009722:	370c      	adds	r7, #12
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr
 800972c:	2000000c 	.word	0x2000000c
 8009730:	e000ed04 	.word	0xe000ed04

08009734 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009734:	b480      	push	{r7}
 8009736:	b083      	sub	sp, #12
 8009738:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800973a:	4b13      	ldr	r3, [pc, #76]	; (8009788 <vPortExitCritical+0x54>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d10c      	bne.n	800975c <vPortExitCritical+0x28>
	__asm volatile
 8009742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009746:	b672      	cpsid	i
 8009748:	f383 8811 	msr	BASEPRI, r3
 800974c:	f3bf 8f6f 	isb	sy
 8009750:	f3bf 8f4f 	dsb	sy
 8009754:	b662      	cpsie	i
 8009756:	607b      	str	r3, [r7, #4]
}
 8009758:	bf00      	nop
 800975a:	e7fe      	b.n	800975a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800975c:	4b0a      	ldr	r3, [pc, #40]	; (8009788 <vPortExitCritical+0x54>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	3b01      	subs	r3, #1
 8009762:	4a09      	ldr	r2, [pc, #36]	; (8009788 <vPortExitCritical+0x54>)
 8009764:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009766:	4b08      	ldr	r3, [pc, #32]	; (8009788 <vPortExitCritical+0x54>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d105      	bne.n	800977a <vPortExitCritical+0x46>
 800976e:	2300      	movs	r3, #0
 8009770:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	f383 8811 	msr	BASEPRI, r3
}
 8009778:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800977a:	bf00      	nop
 800977c:	370c      	adds	r7, #12
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr
 8009786:	bf00      	nop
 8009788:	2000000c 	.word	0x2000000c
 800978c:	00000000 	.word	0x00000000

08009790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009790:	f3ef 8009 	mrs	r0, PSP
 8009794:	f3bf 8f6f 	isb	sy
 8009798:	4b15      	ldr	r3, [pc, #84]	; (80097f0 <pxCurrentTCBConst>)
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	f01e 0f10 	tst.w	lr, #16
 80097a0:	bf08      	it	eq
 80097a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80097a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097aa:	6010      	str	r0, [r2, #0]
 80097ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80097b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80097b4:	b672      	cpsid	i
 80097b6:	f380 8811 	msr	BASEPRI, r0
 80097ba:	f3bf 8f4f 	dsb	sy
 80097be:	f3bf 8f6f 	isb	sy
 80097c2:	b662      	cpsie	i
 80097c4:	f7fe fe04 	bl	80083d0 <vTaskSwitchContext>
 80097c8:	f04f 0000 	mov.w	r0, #0
 80097cc:	f380 8811 	msr	BASEPRI, r0
 80097d0:	bc09      	pop	{r0, r3}
 80097d2:	6819      	ldr	r1, [r3, #0]
 80097d4:	6808      	ldr	r0, [r1, #0]
 80097d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097da:	f01e 0f10 	tst.w	lr, #16
 80097de:	bf08      	it	eq
 80097e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80097e4:	f380 8809 	msr	PSP, r0
 80097e8:	f3bf 8f6f 	isb	sy
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop

080097f0 <pxCurrentTCBConst>:
 80097f0:	20003a8c 	.word	0x20003a8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80097f4:	bf00      	nop
 80097f6:	bf00      	nop

080097f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
	__asm volatile
 80097fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009802:	b672      	cpsid	i
 8009804:	f383 8811 	msr	BASEPRI, r3
 8009808:	f3bf 8f6f 	isb	sy
 800980c:	f3bf 8f4f 	dsb	sy
 8009810:	b662      	cpsie	i
 8009812:	607b      	str	r3, [r7, #4]
}
 8009814:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009816:	f7fe fd21 	bl	800825c <xTaskIncrementTick>
 800981a:	4603      	mov	r3, r0
 800981c:	2b00      	cmp	r3, #0
 800981e:	d003      	beq.n	8009828 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009820:	4b06      	ldr	r3, [pc, #24]	; (800983c <SysTick_Handler+0x44>)
 8009822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009826:	601a      	str	r2, [r3, #0]
 8009828:	2300      	movs	r3, #0
 800982a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	f383 8811 	msr	BASEPRI, r3
}
 8009832:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009834:	bf00      	nop
 8009836:	3708      	adds	r7, #8
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}
 800983c:	e000ed04 	.word	0xe000ed04

08009840 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009840:	b480      	push	{r7}
 8009842:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009844:	4b0b      	ldr	r3, [pc, #44]	; (8009874 <vPortSetupTimerInterrupt+0x34>)
 8009846:	2200      	movs	r2, #0
 8009848:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800984a:	4b0b      	ldr	r3, [pc, #44]	; (8009878 <vPortSetupTimerInterrupt+0x38>)
 800984c:	2200      	movs	r2, #0
 800984e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009850:	4b0a      	ldr	r3, [pc, #40]	; (800987c <vPortSetupTimerInterrupt+0x3c>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a0a      	ldr	r2, [pc, #40]	; (8009880 <vPortSetupTimerInterrupt+0x40>)
 8009856:	fba2 2303 	umull	r2, r3, r2, r3
 800985a:	099b      	lsrs	r3, r3, #6
 800985c:	4a09      	ldr	r2, [pc, #36]	; (8009884 <vPortSetupTimerInterrupt+0x44>)
 800985e:	3b01      	subs	r3, #1
 8009860:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009862:	4b04      	ldr	r3, [pc, #16]	; (8009874 <vPortSetupTimerInterrupt+0x34>)
 8009864:	2207      	movs	r2, #7
 8009866:	601a      	str	r2, [r3, #0]
}
 8009868:	bf00      	nop
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr
 8009872:	bf00      	nop
 8009874:	e000e010 	.word	0xe000e010
 8009878:	e000e018 	.word	0xe000e018
 800987c:	20000000 	.word	0x20000000
 8009880:	10624dd3 	.word	0x10624dd3
 8009884:	e000e014 	.word	0xe000e014

08009888 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009888:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009898 <vPortEnableVFP+0x10>
 800988c:	6801      	ldr	r1, [r0, #0]
 800988e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009892:	6001      	str	r1, [r0, #0]
 8009894:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009896:	bf00      	nop
 8009898:	e000ed88 	.word	0xe000ed88

0800989c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800989c:	b480      	push	{r7}
 800989e:	b085      	sub	sp, #20
 80098a0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80098a2:	f3ef 8305 	mrs	r3, IPSR
 80098a6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2b0f      	cmp	r3, #15
 80098ac:	d916      	bls.n	80098dc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80098ae:	4a19      	ldr	r2, [pc, #100]	; (8009914 <vPortValidateInterruptPriority+0x78>)
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	4413      	add	r3, r2
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80098b8:	4b17      	ldr	r3, [pc, #92]	; (8009918 <vPortValidateInterruptPriority+0x7c>)
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	7afa      	ldrb	r2, [r7, #11]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d20c      	bcs.n	80098dc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80098c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c6:	b672      	cpsid	i
 80098c8:	f383 8811 	msr	BASEPRI, r3
 80098cc:	f3bf 8f6f 	isb	sy
 80098d0:	f3bf 8f4f 	dsb	sy
 80098d4:	b662      	cpsie	i
 80098d6:	607b      	str	r3, [r7, #4]
}
 80098d8:	bf00      	nop
 80098da:	e7fe      	b.n	80098da <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80098dc:	4b0f      	ldr	r3, [pc, #60]	; (800991c <vPortValidateInterruptPriority+0x80>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80098e4:	4b0e      	ldr	r3, [pc, #56]	; (8009920 <vPortValidateInterruptPriority+0x84>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	429a      	cmp	r2, r3
 80098ea:	d90c      	bls.n	8009906 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80098ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f0:	b672      	cpsid	i
 80098f2:	f383 8811 	msr	BASEPRI, r3
 80098f6:	f3bf 8f6f 	isb	sy
 80098fa:	f3bf 8f4f 	dsb	sy
 80098fe:	b662      	cpsie	i
 8009900:	603b      	str	r3, [r7, #0]
}
 8009902:	bf00      	nop
 8009904:	e7fe      	b.n	8009904 <vPortValidateInterruptPriority+0x68>
	}
 8009906:	bf00      	nop
 8009908:	3714      	adds	r7, #20
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr
 8009912:	bf00      	nop
 8009914:	e000e3f0 	.word	0xe000e3f0
 8009918:	20003cc4 	.word	0x20003cc4
 800991c:	e000ed0c 	.word	0xe000ed0c
 8009920:	20003cc8 	.word	0x20003cc8

08009924 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b08a      	sub	sp, #40	; 0x28
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800992c:	2300      	movs	r3, #0
 800992e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009930:	f7fe fbc6 	bl	80080c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009934:	4b5b      	ldr	r3, [pc, #364]	; (8009aa4 <pvPortMalloc+0x180>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d101      	bne.n	8009940 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800993c:	f000 f91a 	bl	8009b74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009940:	4b59      	ldr	r3, [pc, #356]	; (8009aa8 <pvPortMalloc+0x184>)
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	4013      	ands	r3, r2
 8009948:	2b00      	cmp	r3, #0
 800994a:	f040 8092 	bne.w	8009a72 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d01f      	beq.n	8009994 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009954:	2208      	movs	r2, #8
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	4413      	add	r3, r2
 800995a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f003 0307 	and.w	r3, r3, #7
 8009962:	2b00      	cmp	r3, #0
 8009964:	d016      	beq.n	8009994 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f023 0307 	bic.w	r3, r3, #7
 800996c:	3308      	adds	r3, #8
 800996e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f003 0307 	and.w	r3, r3, #7
 8009976:	2b00      	cmp	r3, #0
 8009978:	d00c      	beq.n	8009994 <pvPortMalloc+0x70>
	__asm volatile
 800997a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997e:	b672      	cpsid	i
 8009980:	f383 8811 	msr	BASEPRI, r3
 8009984:	f3bf 8f6f 	isb	sy
 8009988:	f3bf 8f4f 	dsb	sy
 800998c:	b662      	cpsie	i
 800998e:	617b      	str	r3, [r7, #20]
}
 8009990:	bf00      	nop
 8009992:	e7fe      	b.n	8009992 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d06b      	beq.n	8009a72 <pvPortMalloc+0x14e>
 800999a:	4b44      	ldr	r3, [pc, #272]	; (8009aac <pvPortMalloc+0x188>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	429a      	cmp	r2, r3
 80099a2:	d866      	bhi.n	8009a72 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80099a4:	4b42      	ldr	r3, [pc, #264]	; (8009ab0 <pvPortMalloc+0x18c>)
 80099a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80099a8:	4b41      	ldr	r3, [pc, #260]	; (8009ab0 <pvPortMalloc+0x18c>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80099ae:	e004      	b.n	80099ba <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80099b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80099b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80099ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d903      	bls.n	80099cc <pvPortMalloc+0xa8>
 80099c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d1f1      	bne.n	80099b0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80099cc:	4b35      	ldr	r3, [pc, #212]	; (8009aa4 <pvPortMalloc+0x180>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d04d      	beq.n	8009a72 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80099d6:	6a3b      	ldr	r3, [r7, #32]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	2208      	movs	r2, #8
 80099dc:	4413      	add	r3, r2
 80099de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80099e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	6a3b      	ldr	r3, [r7, #32]
 80099e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80099e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ea:	685a      	ldr	r2, [r3, #4]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	1ad2      	subs	r2, r2, r3
 80099f0:	2308      	movs	r3, #8
 80099f2:	005b      	lsls	r3, r3, #1
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d921      	bls.n	8009a3c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80099f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	4413      	add	r3, r2
 80099fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a00:	69bb      	ldr	r3, [r7, #24]
 8009a02:	f003 0307 	and.w	r3, r3, #7
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d00c      	beq.n	8009a24 <pvPortMalloc+0x100>
	__asm volatile
 8009a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0e:	b672      	cpsid	i
 8009a10:	f383 8811 	msr	BASEPRI, r3
 8009a14:	f3bf 8f6f 	isb	sy
 8009a18:	f3bf 8f4f 	dsb	sy
 8009a1c:	b662      	cpsie	i
 8009a1e:	613b      	str	r3, [r7, #16]
}
 8009a20:	bf00      	nop
 8009a22:	e7fe      	b.n	8009a22 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a26:	685a      	ldr	r2, [r3, #4]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	1ad2      	subs	r2, r2, r3
 8009a2c:	69bb      	ldr	r3, [r7, #24]
 8009a2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a32:	687a      	ldr	r2, [r7, #4]
 8009a34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009a36:	69b8      	ldr	r0, [r7, #24]
 8009a38:	f000 f8fe 	bl	8009c38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009a3c:	4b1b      	ldr	r3, [pc, #108]	; (8009aac <pvPortMalloc+0x188>)
 8009a3e:	681a      	ldr	r2, [r3, #0]
 8009a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	1ad3      	subs	r3, r2, r3
 8009a46:	4a19      	ldr	r2, [pc, #100]	; (8009aac <pvPortMalloc+0x188>)
 8009a48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009a4a:	4b18      	ldr	r3, [pc, #96]	; (8009aac <pvPortMalloc+0x188>)
 8009a4c:	681a      	ldr	r2, [r3, #0]
 8009a4e:	4b19      	ldr	r3, [pc, #100]	; (8009ab4 <pvPortMalloc+0x190>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d203      	bcs.n	8009a5e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009a56:	4b15      	ldr	r3, [pc, #84]	; (8009aac <pvPortMalloc+0x188>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a16      	ldr	r2, [pc, #88]	; (8009ab4 <pvPortMalloc+0x190>)
 8009a5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a60:	685a      	ldr	r2, [r3, #4]
 8009a62:	4b11      	ldr	r3, [pc, #68]	; (8009aa8 <pvPortMalloc+0x184>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	431a      	orrs	r2, r3
 8009a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6e:	2200      	movs	r2, #0
 8009a70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009a72:	f7fe fb33 	bl	80080dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	f003 0307 	and.w	r3, r3, #7
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d00c      	beq.n	8009a9a <pvPortMalloc+0x176>
	__asm volatile
 8009a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a84:	b672      	cpsid	i
 8009a86:	f383 8811 	msr	BASEPRI, r3
 8009a8a:	f3bf 8f6f 	isb	sy
 8009a8e:	f3bf 8f4f 	dsb	sy
 8009a92:	b662      	cpsie	i
 8009a94:	60fb      	str	r3, [r7, #12]
}
 8009a96:	bf00      	nop
 8009a98:	e7fe      	b.n	8009a98 <pvPortMalloc+0x174>
	return pvReturn;
 8009a9a:	69fb      	ldr	r3, [r7, #28]
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3728      	adds	r7, #40	; 0x28
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}
 8009aa4:	200078d4 	.word	0x200078d4
 8009aa8:	200078e0 	.word	0x200078e0
 8009aac:	200078d8 	.word	0x200078d8
 8009ab0:	200078cc 	.word	0x200078cc
 8009ab4:	200078dc 	.word	0x200078dc

08009ab8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b086      	sub	sp, #24
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d04c      	beq.n	8009b64 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009aca:	2308      	movs	r3, #8
 8009acc:	425b      	negs	r3, r3
 8009ace:	697a      	ldr	r2, [r7, #20]
 8009ad0:	4413      	add	r3, r2
 8009ad2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	685a      	ldr	r2, [r3, #4]
 8009adc:	4b23      	ldr	r3, [pc, #140]	; (8009b6c <vPortFree+0xb4>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4013      	ands	r3, r2
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d10c      	bne.n	8009b00 <vPortFree+0x48>
	__asm volatile
 8009ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aea:	b672      	cpsid	i
 8009aec:	f383 8811 	msr	BASEPRI, r3
 8009af0:	f3bf 8f6f 	isb	sy
 8009af4:	f3bf 8f4f 	dsb	sy
 8009af8:	b662      	cpsie	i
 8009afa:	60fb      	str	r3, [r7, #12]
}
 8009afc:	bf00      	nop
 8009afe:	e7fe      	b.n	8009afe <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d00c      	beq.n	8009b22 <vPortFree+0x6a>
	__asm volatile
 8009b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b0c:	b672      	cpsid	i
 8009b0e:	f383 8811 	msr	BASEPRI, r3
 8009b12:	f3bf 8f6f 	isb	sy
 8009b16:	f3bf 8f4f 	dsb	sy
 8009b1a:	b662      	cpsie	i
 8009b1c:	60bb      	str	r3, [r7, #8]
}
 8009b1e:	bf00      	nop
 8009b20:	e7fe      	b.n	8009b20 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	685a      	ldr	r2, [r3, #4]
 8009b26:	4b11      	ldr	r3, [pc, #68]	; (8009b6c <vPortFree+0xb4>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4013      	ands	r3, r2
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d019      	beq.n	8009b64 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d115      	bne.n	8009b64 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	685a      	ldr	r2, [r3, #4]
 8009b3c:	4b0b      	ldr	r3, [pc, #44]	; (8009b6c <vPortFree+0xb4>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	43db      	mvns	r3, r3
 8009b42:	401a      	ands	r2, r3
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009b48:	f7fe faba 	bl	80080c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	685a      	ldr	r2, [r3, #4]
 8009b50:	4b07      	ldr	r3, [pc, #28]	; (8009b70 <vPortFree+0xb8>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4413      	add	r3, r2
 8009b56:	4a06      	ldr	r2, [pc, #24]	; (8009b70 <vPortFree+0xb8>)
 8009b58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009b5a:	6938      	ldr	r0, [r7, #16]
 8009b5c:	f000 f86c 	bl	8009c38 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009b60:	f7fe fabc 	bl	80080dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009b64:	bf00      	nop
 8009b66:	3718      	adds	r7, #24
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}
 8009b6c:	200078e0 	.word	0x200078e0
 8009b70:	200078d8 	.word	0x200078d8

08009b74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009b74:	b480      	push	{r7}
 8009b76:	b085      	sub	sp, #20
 8009b78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009b7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009b7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009b80:	4b27      	ldr	r3, [pc, #156]	; (8009c20 <prvHeapInit+0xac>)
 8009b82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f003 0307 	and.w	r3, r3, #7
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d00c      	beq.n	8009ba8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	3307      	adds	r3, #7
 8009b92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f023 0307 	bic.w	r3, r3, #7
 8009b9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009b9c:	68ba      	ldr	r2, [r7, #8]
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	1ad3      	subs	r3, r2, r3
 8009ba2:	4a1f      	ldr	r2, [pc, #124]	; (8009c20 <prvHeapInit+0xac>)
 8009ba4:	4413      	add	r3, r2
 8009ba6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009bac:	4a1d      	ldr	r2, [pc, #116]	; (8009c24 <prvHeapInit+0xb0>)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009bb2:	4b1c      	ldr	r3, [pc, #112]	; (8009c24 <prvHeapInit+0xb0>)
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	68ba      	ldr	r2, [r7, #8]
 8009bbc:	4413      	add	r3, r2
 8009bbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009bc0:	2208      	movs	r2, #8
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	1a9b      	subs	r3, r3, r2
 8009bc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f023 0307 	bic.w	r3, r3, #7
 8009bce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	4a15      	ldr	r2, [pc, #84]	; (8009c28 <prvHeapInit+0xb4>)
 8009bd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009bd6:	4b14      	ldr	r3, [pc, #80]	; (8009c28 <prvHeapInit+0xb4>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009bde:	4b12      	ldr	r3, [pc, #72]	; (8009c28 <prvHeapInit+0xb4>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	2200      	movs	r2, #0
 8009be4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	68fa      	ldr	r2, [r7, #12]
 8009bee:	1ad2      	subs	r2, r2, r3
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009bf4:	4b0c      	ldr	r3, [pc, #48]	; (8009c28 <prvHeapInit+0xb4>)
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	4a0a      	ldr	r2, [pc, #40]	; (8009c2c <prvHeapInit+0xb8>)
 8009c02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	4a09      	ldr	r2, [pc, #36]	; (8009c30 <prvHeapInit+0xbc>)
 8009c0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009c0c:	4b09      	ldr	r3, [pc, #36]	; (8009c34 <prvHeapInit+0xc0>)
 8009c0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009c12:	601a      	str	r2, [r3, #0]
}
 8009c14:	bf00      	nop
 8009c16:	3714      	adds	r7, #20
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr
 8009c20:	20003ccc 	.word	0x20003ccc
 8009c24:	200078cc 	.word	0x200078cc
 8009c28:	200078d4 	.word	0x200078d4
 8009c2c:	200078dc 	.word	0x200078dc
 8009c30:	200078d8 	.word	0x200078d8
 8009c34:	200078e0 	.word	0x200078e0

08009c38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009c40:	4b28      	ldr	r3, [pc, #160]	; (8009ce4 <prvInsertBlockIntoFreeList+0xac>)
 8009c42:	60fb      	str	r3, [r7, #12]
 8009c44:	e002      	b.n	8009c4c <prvInsertBlockIntoFreeList+0x14>
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	60fb      	str	r3, [r7, #12]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d8f7      	bhi.n	8009c46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	68ba      	ldr	r2, [r7, #8]
 8009c60:	4413      	add	r3, r2
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d108      	bne.n	8009c7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	685a      	ldr	r2, [r3, #4]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	441a      	add	r2, r3
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	68ba      	ldr	r2, [r7, #8]
 8009c84:	441a      	add	r2, r3
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d118      	bne.n	8009cc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681a      	ldr	r2, [r3, #0]
 8009c92:	4b15      	ldr	r3, [pc, #84]	; (8009ce8 <prvInsertBlockIntoFreeList+0xb0>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d00d      	beq.n	8009cb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	685a      	ldr	r2, [r3, #4]
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	441a      	add	r2, r3
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	681a      	ldr	r2, [r3, #0]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	601a      	str	r2, [r3, #0]
 8009cb4:	e008      	b.n	8009cc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009cb6:	4b0c      	ldr	r3, [pc, #48]	; (8009ce8 <prvInsertBlockIntoFreeList+0xb0>)
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	601a      	str	r2, [r3, #0]
 8009cbe:	e003      	b.n	8009cc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681a      	ldr	r2, [r3, #0]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009cc8:	68fa      	ldr	r2, [r7, #12]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d002      	beq.n	8009cd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009cd6:	bf00      	nop
 8009cd8:	3714      	adds	r7, #20
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr
 8009ce2:	bf00      	nop
 8009ce4:	200078cc 	.word	0x200078cc
 8009ce8:	200078d4 	.word	0x200078d4

08009cec <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	330c      	adds	r3, #12
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	6839      	ldr	r1, [r7, #0]
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f003 f953 	bl	800cfac <tcpip_send_msg_wait_sem>
 8009d06:	4603      	mov	r3, r0
 8009d08:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8009d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d103      	bne.n	8009d1a <netconn_apimsg+0x2e>
    return apimsg->err;
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8009d18:	e001      	b.n	8009d1e <netconn_apimsg+0x32>
  }
  return err;
 8009d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3710      	adds	r7, #16
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
	...

08009d28 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b08c      	sub	sp, #48	; 0x30
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	4603      	mov	r3, r0
 8009d30:	603a      	str	r2, [r7, #0]
 8009d32:	71fb      	strb	r3, [r7, #7]
 8009d34:	460b      	mov	r3, r1
 8009d36:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8009d38:	79fb      	ldrb	r3, [r7, #7]
 8009d3a:	6839      	ldr	r1, [r7, #0]
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f001 f82f 	bl	800ada0 <netconn_alloc>
 8009d42:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8009d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d054      	beq.n	8009df4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8009d4a:	79bb      	ldrb	r3, [r7, #6]
 8009d4c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8009d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d50:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8009d52:	f107 0308 	add.w	r3, r7, #8
 8009d56:	4619      	mov	r1, r3
 8009d58:	4829      	ldr	r0, [pc, #164]	; (8009e00 <netconn_new_with_proto_and_callback+0xd8>)
 8009d5a:	f7ff ffc7 	bl	8009cec <netconn_apimsg>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8009d64:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d043      	beq.n	8009df4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8009d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d005      	beq.n	8009d80 <netconn_new_with_proto_and_callback+0x58>
 8009d74:	4b23      	ldr	r3, [pc, #140]	; (8009e04 <netconn_new_with_proto_and_callback+0xdc>)
 8009d76:	22a3      	movs	r2, #163	; 0xa3
 8009d78:	4923      	ldr	r1, [pc, #140]	; (8009e08 <netconn_new_with_proto_and_callback+0xe0>)
 8009d7a:	4824      	ldr	r0, [pc, #144]	; (8009e0c <netconn_new_with_proto_and_callback+0xe4>)
 8009d7c:	f00e fc68 	bl	8018650 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8009d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d82:	3310      	adds	r3, #16
 8009d84:	4618      	mov	r0, r3
 8009d86:	f00e fac6 	bl	8018316 <sys_mbox_valid>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d105      	bne.n	8009d9c <netconn_new_with_proto_and_callback+0x74>
 8009d90:	4b1c      	ldr	r3, [pc, #112]	; (8009e04 <netconn_new_with_proto_and_callback+0xdc>)
 8009d92:	22a4      	movs	r2, #164	; 0xa4
 8009d94:	491e      	ldr	r1, [pc, #120]	; (8009e10 <netconn_new_with_proto_and_callback+0xe8>)
 8009d96:	481d      	ldr	r0, [pc, #116]	; (8009e0c <netconn_new_with_proto_and_callback+0xe4>)
 8009d98:	f00e fc5a 	bl	8018650 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8009d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d9e:	3314      	adds	r3, #20
 8009da0:	4618      	mov	r0, r3
 8009da2:	f00e fab8 	bl	8018316 <sys_mbox_valid>
 8009da6:	4603      	mov	r3, r0
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d005      	beq.n	8009db8 <netconn_new_with_proto_and_callback+0x90>
 8009dac:	4b15      	ldr	r3, [pc, #84]	; (8009e04 <netconn_new_with_proto_and_callback+0xdc>)
 8009dae:	22a6      	movs	r2, #166	; 0xa6
 8009db0:	4918      	ldr	r1, [pc, #96]	; (8009e14 <netconn_new_with_proto_and_callback+0xec>)
 8009db2:	4816      	ldr	r0, [pc, #88]	; (8009e0c <netconn_new_with_proto_and_callback+0xe4>)
 8009db4:	f00e fc4c 	bl	8018650 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8009db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dba:	330c      	adds	r3, #12
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f00e fb3b 	bl	8018438 <sys_sem_valid>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d105      	bne.n	8009dd4 <netconn_new_with_proto_and_callback+0xac>
 8009dc8:	4b0e      	ldr	r3, [pc, #56]	; (8009e04 <netconn_new_with_proto_and_callback+0xdc>)
 8009dca:	22a9      	movs	r2, #169	; 0xa9
 8009dcc:	4912      	ldr	r1, [pc, #72]	; (8009e18 <netconn_new_with_proto_and_callback+0xf0>)
 8009dce:	480f      	ldr	r0, [pc, #60]	; (8009e0c <netconn_new_with_proto_and_callback+0xe4>)
 8009dd0:	f00e fc3e 	bl	8018650 <iprintf>
      sys_sem_free(&conn->op_completed);
 8009dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dd6:	330c      	adds	r3, #12
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f00e fb20 	bl	801841e <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8009dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009de0:	3310      	adds	r3, #16
 8009de2:	4618      	mov	r0, r3
 8009de4:	f00e fa10 	bl	8018208 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8009de8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009dea:	2007      	movs	r0, #7
 8009dec:	f003 fe46 	bl	800da7c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8009df0:	2300      	movs	r3, #0
 8009df2:	e000      	b.n	8009df6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8009df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3730      	adds	r7, #48	; 0x30
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}
 8009dfe:	bf00      	nop
 8009e00:	0800ad75 	.word	0x0800ad75
 8009e04:	08019cac 	.word	0x08019cac
 8009e08:	08019ce0 	.word	0x08019ce0
 8009e0c:	08019d04 	.word	0x08019d04
 8009e10:	08019d2c 	.word	0x08019d2c
 8009e14:	08019d44 	.word	0x08019d44
 8009e18:	08019d68 	.word	0x08019d68

08009e1c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b08c      	sub	sp, #48	; 0x30
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d101      	bne.n	8009e2e <netconn_prepare_delete+0x12>
    return ERR_OK;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	e014      	b.n	8009e58 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009e32:	2329      	movs	r3, #41	; 0x29
 8009e34:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8009e36:	f107 030c 	add.w	r3, r7, #12
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	4808      	ldr	r0, [pc, #32]	; (8009e60 <netconn_prepare_delete+0x44>)
 8009e3e:	f7ff ff55 	bl	8009cec <netconn_apimsg>
 8009e42:	4603      	mov	r3, r0
 8009e44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8009e48:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d002      	beq.n	8009e56 <netconn_prepare_delete+0x3a>
    return err;
 8009e50:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009e54:	e000      	b.n	8009e58 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8009e56:	2300      	movs	r3, #0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3730      	adds	r7, #48	; 0x30
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}
 8009e60:	0800b2e1 	.word	0x0800b2e1

08009e64 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b084      	sub	sp, #16
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d101      	bne.n	8009e76 <netconn_delete+0x12>
    return ERR_OK;
 8009e72:	2300      	movs	r3, #0
 8009e74:	e00d      	b.n	8009e92 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f7ff ffd0 	bl	8009e1c <netconn_prepare_delete>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8009e80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d102      	bne.n	8009e8e <netconn_delete+0x2a>
    netconn_free(conn);
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 fff7 	bl	800ae7c <netconn_free>
  }
  return err;
 8009e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3710      	adds	r7, #16
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
	...

08009e9c <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b08e      	sub	sp, #56	; 0x38
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	60f8      	str	r0, [r7, #12]
 8009ea4:	60b9      	str	r1, [r7, #8]
 8009ea6:	607a      	str	r2, [r7, #4]
 8009ea8:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d109      	bne.n	8009ec4 <netconn_getaddr+0x28>
 8009eb0:	4b1d      	ldr	r3, [pc, #116]	; (8009f28 <netconn_getaddr+0x8c>)
 8009eb2:	f44f 7289 	mov.w	r2, #274	; 0x112
 8009eb6:	491d      	ldr	r1, [pc, #116]	; (8009f2c <netconn_getaddr+0x90>)
 8009eb8:	481d      	ldr	r0, [pc, #116]	; (8009f30 <netconn_getaddr+0x94>)
 8009eba:	f00e fbc9 	bl	8018650 <iprintf>
 8009ebe:	f06f 030f 	mvn.w	r3, #15
 8009ec2:	e02d      	b.n	8009f20 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d109      	bne.n	8009ede <netconn_getaddr+0x42>
 8009eca:	4b17      	ldr	r3, [pc, #92]	; (8009f28 <netconn_getaddr+0x8c>)
 8009ecc:	f240 1213 	movw	r2, #275	; 0x113
 8009ed0:	4918      	ldr	r1, [pc, #96]	; (8009f34 <netconn_getaddr+0x98>)
 8009ed2:	4817      	ldr	r0, [pc, #92]	; (8009f30 <netconn_getaddr+0x94>)
 8009ed4:	f00e fbbc 	bl	8018650 <iprintf>
 8009ed8:	f06f 030f 	mvn.w	r3, #15
 8009edc:	e020      	b.n	8009f20 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d109      	bne.n	8009ef8 <netconn_getaddr+0x5c>
 8009ee4:	4b10      	ldr	r3, [pc, #64]	; (8009f28 <netconn_getaddr+0x8c>)
 8009ee6:	f44f 728a 	mov.w	r2, #276	; 0x114
 8009eea:	4913      	ldr	r1, [pc, #76]	; (8009f38 <netconn_getaddr+0x9c>)
 8009eec:	4810      	ldr	r0, [pc, #64]	; (8009f30 <netconn_getaddr+0x94>)
 8009eee:	f00e fbaf 	bl	8018650 <iprintf>
 8009ef2:	f06f 030f 	mvn.w	r3, #15
 8009ef6:	e013      	b.n	8009f20 <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 8009efc:	78fb      	ldrb	r3, [r7, #3]
 8009efe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 8009f0a:	f107 0314 	add.w	r3, r7, #20
 8009f0e:	4619      	mov	r1, r3
 8009f10:	480a      	ldr	r0, [pc, #40]	; (8009f3c <netconn_getaddr+0xa0>)
 8009f12:	f7ff feeb 	bl	8009cec <netconn_apimsg>
 8009f16:	4603      	mov	r3, r0
 8009f18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 8009f1c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3738      	adds	r7, #56	; 0x38
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}
 8009f28:	08019cac 	.word	0x08019cac
 8009f2c:	08019d84 	.word	0x08019d84
 8009f30:	08019d04 	.word	0x08019d04
 8009f34:	08019da4 	.word	0x08019da4
 8009f38:	08019dc4 	.word	0x08019dc4
 8009f3c:	0800bad1 	.word	0x0800bad1

08009f40 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b08e      	sub	sp, #56	; 0x38
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	60b9      	str	r1, [r7, #8]
 8009f4a:	4613      	mov	r3, r2
 8009f4c:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d109      	bne.n	8009f68 <netconn_bind+0x28>
 8009f54:	4b11      	ldr	r3, [pc, #68]	; (8009f9c <netconn_bind+0x5c>)
 8009f56:	f44f 729c 	mov.w	r2, #312	; 0x138
 8009f5a:	4911      	ldr	r1, [pc, #68]	; (8009fa0 <netconn_bind+0x60>)
 8009f5c:	4811      	ldr	r0, [pc, #68]	; (8009fa4 <netconn_bind+0x64>)
 8009f5e:	f00e fb77 	bl	8018650 <iprintf>
 8009f62:	f06f 030f 	mvn.w	r3, #15
 8009f66:	e015      	b.n	8009f94 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d101      	bne.n	8009f72 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8009f6e:	4b0e      	ldr	r3, [pc, #56]	; (8009fa8 <netconn_bind+0x68>)
 8009f70:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8009f7a:	88fb      	ldrh	r3, [r7, #6]
 8009f7c:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8009f7e:	f107 0314 	add.w	r3, r7, #20
 8009f82:	4619      	mov	r1, r3
 8009f84:	4809      	ldr	r0, [pc, #36]	; (8009fac <netconn_bind+0x6c>)
 8009f86:	f7ff feb1 	bl	8009cec <netconn_apimsg>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8009f90:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3738      	adds	r7, #56	; 0x38
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}
 8009f9c:	08019cac 	.word	0x08019cac
 8009fa0:	08019de4 	.word	0x08019de4
 8009fa4:	08019d04 	.word	0x08019d04
 8009fa8:	0801d72c 	.word	0x0801d72c
 8009fac:	0800b4a9 	.word	0x0800b4a9

08009fb0 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b088      	sub	sp, #32
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	60f8      	str	r0, [r7, #12]
 8009fb8:	60b9      	str	r1, [r7, #8]
 8009fba:	4613      	mov	r3, r2
 8009fbc:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d109      	bne.n	8009fdc <netconn_recv_data+0x2c>
 8009fc8:	4b58      	ldr	r3, [pc, #352]	; (800a12c <netconn_recv_data+0x17c>)
 8009fca:	f44f 7212 	mov.w	r2, #584	; 0x248
 8009fce:	4958      	ldr	r1, [pc, #352]	; (800a130 <netconn_recv_data+0x180>)
 8009fd0:	4858      	ldr	r0, [pc, #352]	; (800a134 <netconn_recv_data+0x184>)
 8009fd2:	f00e fb3d 	bl	8018650 <iprintf>
 8009fd6:	f06f 030f 	mvn.w	r3, #15
 8009fda:	e0a2      	b.n	800a122 <netconn_recv_data+0x172>
  *new_buf = NULL;
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d109      	bne.n	8009ffc <netconn_recv_data+0x4c>
 8009fe8:	4b50      	ldr	r3, [pc, #320]	; (800a12c <netconn_recv_data+0x17c>)
 8009fea:	f240 224a 	movw	r2, #586	; 0x24a
 8009fee:	4952      	ldr	r1, [pc, #328]	; (800a138 <netconn_recv_data+0x188>)
 8009ff0:	4850      	ldr	r0, [pc, #320]	; (800a134 <netconn_recv_data+0x184>)
 8009ff2:	f00e fb2d 	bl	8018650 <iprintf>
 8009ff6:	f06f 030f 	mvn.w	r3, #15
 8009ffa:	e092      	b.n	800a122 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	3310      	adds	r3, #16
 800a000:	4618      	mov	r0, r3
 800a002:	f00e f988 	bl	8018316 <sys_mbox_valid>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d10e      	bne.n	800a02a <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800a00c:	68f8      	ldr	r0, [r7, #12]
 800a00e:	f000 fb01 	bl	800a614 <netconn_err>
 800a012:	4603      	mov	r3, r0
 800a014:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800a016:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d002      	beq.n	800a024 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800a01e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800a022:	e07e      	b.n	800a122 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800a024:	f06f 030a 	mvn.w	r3, #10
 800a028:	e07b      	b.n	800a122 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	7f1b      	ldrb	r3, [r3, #28]
 800a02e:	f003 0302 	and.w	r3, r3, #2
 800a032:	2b00      	cmp	r3, #0
 800a034:	d10f      	bne.n	800a056 <netconn_recv_data+0xa6>
 800a036:	79fb      	ldrb	r3, [r7, #7]
 800a038:	f003 0304 	and.w	r3, r3, #4
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d10a      	bne.n	800a056 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	7f1b      	ldrb	r3, [r3, #28]
 800a044:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d104      	bne.n	800a056 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d023      	beq.n	800a09e <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	3310      	adds	r3, #16
 800a05a:	f107 0218 	add.w	r2, r7, #24
 800a05e:	4611      	mov	r1, r2
 800a060:	4618      	mov	r0, r3
 800a062:	f00e f93c 	bl	80182de <sys_arch_mbox_tryfetch>
 800a066:	4603      	mov	r3, r0
 800a068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a06c:	d11f      	bne.n	800a0ae <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800a06e:	68f8      	ldr	r0, [r7, #12]
 800a070:	f000 fad0 	bl	800a614 <netconn_err>
 800a074:	4603      	mov	r3, r0
 800a076:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800a078:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d002      	beq.n	800a086 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800a080:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a084:	e04d      	b.n	800a122 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	7f1b      	ldrb	r3, [r3, #28]
 800a08a:	f003 0301 	and.w	r3, r3, #1
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d002      	beq.n	800a098 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800a092:	f06f 030a 	mvn.w	r3, #10
 800a096:	e044      	b.n	800a122 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800a098:	f06f 0306 	mvn.w	r3, #6
 800a09c:	e041      	b.n	800a122 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	3310      	adds	r3, #16
 800a0a2:	f107 0118 	add.w	r1, r7, #24
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f00e f8d9 	bl	8018260 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	781b      	ldrb	r3, [r3, #0]
 800a0b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a0b6:	2b10      	cmp	r3, #16
 800a0b8:	d117      	bne.n	800a0ea <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800a0ba:	69bb      	ldr	r3, [r7, #24]
 800a0bc:	f107 0217 	add.w	r2, r7, #23
 800a0c0:	4611      	mov	r1, r2
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f000 faf8 	bl	800a6b8 <lwip_netconn_is_err_msg>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d009      	beq.n	800a0e2 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800a0ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a0d2:	f113 0f0f 	cmn.w	r3, #15
 800a0d6:	d101      	bne.n	800a0dc <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	e022      	b.n	800a122 <netconn_recv_data+0x172>
      }
      return err;
 800a0dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a0e0:	e01f      	b.n	800a122 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800a0e2:	69bb      	ldr	r3, [r7, #24]
 800a0e4:	891b      	ldrh	r3, [r3, #8]
 800a0e6:	83fb      	strh	r3, [r7, #30]
 800a0e8:	e00d      	b.n	800a106 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800a0ea:	69bb      	ldr	r3, [r7, #24]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d106      	bne.n	800a0fe <netconn_recv_data+0x14e>
 800a0f0:	4b0e      	ldr	r3, [pc, #56]	; (800a12c <netconn_recv_data+0x17c>)
 800a0f2:	f240 2291 	movw	r2, #657	; 0x291
 800a0f6:	4911      	ldr	r1, [pc, #68]	; (800a13c <netconn_recv_data+0x18c>)
 800a0f8:	480e      	ldr	r0, [pc, #56]	; (800a134 <netconn_recv_data+0x184>)
 800a0fa:	f00e faa9 	bl	8018650 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800a0fe:	69bb      	ldr	r3, [r7, #24]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	891b      	ldrh	r3, [r3, #8]
 800a104:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d005      	beq.n	800a11a <netconn_recv_data+0x16a>
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a112:	8bfa      	ldrh	r2, [r7, #30]
 800a114:	2101      	movs	r1, #1
 800a116:	68f8      	ldr	r0, [r7, #12]
 800a118:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800a11a:	69ba      	ldr	r2, [r7, #24]
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800a120:	2300      	movs	r3, #0
}
 800a122:	4618      	mov	r0, r3
 800a124:	3720      	adds	r7, #32
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	08019cac 	.word	0x08019cac
 800a130:	08019ec4 	.word	0x08019ec4
 800a134:	08019d04 	.word	0x08019d04
 800a138:	08019ee4 	.word	0x08019ee4
 800a13c:	08019f00 	.word	0x08019f00

0800a140 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
 800a146:	60f8      	str	r0, [r7, #12]
 800a148:	60b9      	str	r1, [r7, #8]
 800a14a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d005      	beq.n	800a15e <netconn_tcp_recvd_msg+0x1e>
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a15a:	2b10      	cmp	r3, #16
 800a15c:	d009      	beq.n	800a172 <netconn_tcp_recvd_msg+0x32>
 800a15e:	4b0c      	ldr	r3, [pc, #48]	; (800a190 <netconn_tcp_recvd_msg+0x50>)
 800a160:	f240 22a7 	movw	r2, #679	; 0x2a7
 800a164:	490b      	ldr	r1, [pc, #44]	; (800a194 <netconn_tcp_recvd_msg+0x54>)
 800a166:	480c      	ldr	r0, [pc, #48]	; (800a198 <netconn_tcp_recvd_msg+0x58>)
 800a168:	f00e fa72 	bl	8018650 <iprintf>
 800a16c:	f06f 030f 	mvn.w	r3, #15
 800a170:	e00a      	b.n	800a188 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	68fa      	ldr	r2, [r7, #12]
 800a176:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	68ba      	ldr	r2, [r7, #8]
 800a17c:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800a17e:	6879      	ldr	r1, [r7, #4]
 800a180:	4806      	ldr	r0, [pc, #24]	; (800a19c <netconn_tcp_recvd_msg+0x5c>)
 800a182:	f7ff fdb3 	bl	8009cec <netconn_apimsg>
 800a186:	4603      	mov	r3, r0
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3710      	adds	r7, #16
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	08019cac 	.word	0x08019cac
 800a194:	08019f0c 	.word	0x08019f0c
 800a198:	08019d04 	.word	0x08019d04
 800a19c:	0800b5b7 	.word	0x0800b5b7

0800a1a0 <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b08c      	sub	sp, #48	; 0x30
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d005      	beq.n	800a1bc <netconn_tcp_recvd+0x1c>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	781b      	ldrb	r3, [r3, #0]
 800a1b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a1b8:	2b10      	cmp	r3, #16
 800a1ba:	d009      	beq.n	800a1d0 <netconn_tcp_recvd+0x30>
 800a1bc:	4b0c      	ldr	r3, [pc, #48]	; (800a1f0 <netconn_tcp_recvd+0x50>)
 800a1be:	f240 22b5 	movw	r2, #693	; 0x2b5
 800a1c2:	490c      	ldr	r1, [pc, #48]	; (800a1f4 <netconn_tcp_recvd+0x54>)
 800a1c4:	480c      	ldr	r0, [pc, #48]	; (800a1f8 <netconn_tcp_recvd+0x58>)
 800a1c6:	f00e fa43 	bl	8018650 <iprintf>
 800a1ca:	f06f 030f 	mvn.w	r3, #15
 800a1ce:	e00b      	b.n	800a1e8 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 800a1d0:	f107 030c 	add.w	r3, r7, #12
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	6839      	ldr	r1, [r7, #0]
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f7ff ffb1 	bl	800a140 <netconn_tcp_recvd_msg>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 800a1e4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3730      	adds	r7, #48	; 0x30
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}
 800a1f0:	08019cac 	.word	0x08019cac
 800a1f4:	08019f0c 	.word	0x08019f0c
 800a1f8:	08019d04 	.word	0x08019d04

0800a1fc <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b090      	sub	sp, #64	; 0x40
 800a200:	af00      	add	r7, sp, #0
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	60b9      	str	r1, [r7, #8]
 800a206:	4613      	mov	r3, r2
 800a208:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	3310      	adds	r3, #16
 800a20e:	4618      	mov	r0, r3
 800a210:	f00e f881 	bl	8018316 <sys_mbox_valid>
 800a214:	4603      	mov	r3, r0
 800a216:	2b00      	cmp	r3, #0
 800a218:	d102      	bne.n	800a220 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800a21a:	f06f 030a 	mvn.w	r3, #10
 800a21e:	e06d      	b.n	800a2fc <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	7f1b      	ldrb	r3, [r3, #28]
 800a224:	b25b      	sxtb	r3, r3
 800a226:	2b00      	cmp	r3, #0
 800a228:	da07      	bge.n	800a23a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	7f1b      	ldrb	r3, [r3, #28]
 800a22e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a232:	b2da      	uxtb	r2, r3
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800a238:	e039      	b.n	800a2ae <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800a23a:	79fb      	ldrb	r3, [r7, #7]
 800a23c:	461a      	mov	r2, r3
 800a23e:	68b9      	ldr	r1, [r7, #8]
 800a240:	68f8      	ldr	r0, [r7, #12]
 800a242:	f7ff feb5 	bl	8009fb0 <netconn_recv_data>
 800a246:	4603      	mov	r3, r0
 800a248:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800a24c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a250:	2b00      	cmp	r3, #0
 800a252:	d002      	beq.n	800a25a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800a254:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a258:	e050      	b.n	800a2fc <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800a260:	79fb      	ldrb	r3, [r7, #7]
 800a262:	f003 0308 	and.w	r3, r3, #8
 800a266:	2b00      	cmp	r3, #0
 800a268:	d10e      	bne.n	800a288 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800a26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d002      	beq.n	800a276 <netconn_recv_data_tcp+0x7a>
 800a270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a272:	891b      	ldrh	r3, [r3, #8]
 800a274:	e000      	b.n	800a278 <netconn_recv_data_tcp+0x7c>
 800a276:	2301      	movs	r3, #1
 800a278:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800a27a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a27c:	f107 0214 	add.w	r2, r7, #20
 800a280:	4619      	mov	r1, r3
 800a282:	68f8      	ldr	r0, [r7, #12]
 800a284:	f7ff ff5c 	bl	800a140 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800a288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d134      	bne.n	800a2f8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800a28e:	79fb      	ldrb	r3, [r7, #7]
 800a290:	f003 0310 	and.w	r3, r3, #16
 800a294:	2b00      	cmp	r3, #0
 800a296:	d009      	beq.n	800a2ac <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	7f1b      	ldrb	r3, [r3, #28]
 800a29c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a2a0:	b2da      	uxtb	r2, r3
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800a2a6:	f06f 0306 	mvn.w	r3, #6
 800a2aa:	e027      	b.n	800a2fc <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800a2ac:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d005      	beq.n	800a2c2 <netconn_recv_data_tcp+0xc6>
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	2101      	movs	r1, #1
 800a2be:	68f8      	ldr	r0, [r7, #12]
 800a2c0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d10f      	bne.n	800a2ea <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800a2ca:	68f8      	ldr	r0, [r7, #12]
 800a2cc:	f000 f9a2 	bl	800a614 <netconn_err>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800a2d6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d002      	beq.n	800a2e4 <netconn_recv_data_tcp+0xe8>
          return err;
 800a2de:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a2e2:	e00b      	b.n	800a2fc <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800a2e4:	f06f 030d 	mvn.w	r3, #13
 800a2e8:	e008      	b.n	800a2fc <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800a2ea:	2101      	movs	r1, #1
 800a2ec:	68f8      	ldr	r0, [r7, #12]
 800a2ee:	f000 f961 	bl	800a5b4 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800a2f2:	f06f 030e 	mvn.w	r3, #14
 800a2f6:	e001      	b.n	800a2fc <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800a2f8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3740      	adds	r7, #64	; 0x40
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b084      	sub	sp, #16
 800a308:	af00      	add	r7, sp, #0
 800a30a:	60f8      	str	r0, [r7, #12]
 800a30c:	60b9      	str	r1, [r7, #8]
 800a30e:	4613      	mov	r3, r2
 800a310:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d005      	beq.n	800a324 <netconn_recv_tcp_pbuf_flags+0x20>
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a320:	2b10      	cmp	r3, #16
 800a322:	d009      	beq.n	800a338 <netconn_recv_tcp_pbuf_flags+0x34>
 800a324:	4b0a      	ldr	r3, [pc, #40]	; (800a350 <netconn_recv_tcp_pbuf_flags+0x4c>)
 800a326:	f240 3225 	movw	r2, #805	; 0x325
 800a32a:	490a      	ldr	r1, [pc, #40]	; (800a354 <netconn_recv_tcp_pbuf_flags+0x50>)
 800a32c:	480a      	ldr	r0, [pc, #40]	; (800a358 <netconn_recv_tcp_pbuf_flags+0x54>)
 800a32e:	f00e f98f 	bl	8018650 <iprintf>
 800a332:	f06f 030f 	mvn.w	r3, #15
 800a336:	e006      	b.n	800a346 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 800a338:	79fb      	ldrb	r3, [r7, #7]
 800a33a:	461a      	mov	r2, r3
 800a33c:	68b9      	ldr	r1, [r7, #8]
 800a33e:	68f8      	ldr	r0, [r7, #12]
 800a340:	f7ff ff5c 	bl	800a1fc <netconn_recv_data_tcp>
 800a344:	4603      	mov	r3, r0
}
 800a346:	4618      	mov	r0, r3
 800a348:	3710      	adds	r7, #16
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
 800a34e:	bf00      	nop
 800a350:	08019cac 	.word	0x08019cac
 800a354:	08019f0c 	.word	0x08019f0c
 800a358:	08019d04 	.word	0x08019d04

0800a35c <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b084      	sub	sp, #16
 800a360:	af00      	add	r7, sp, #0
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	60b9      	str	r1, [r7, #8]
 800a366:	4613      	mov	r3, r2
 800a368:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d005      	beq.n	800a37c <netconn_recv_udp_raw_netbuf_flags+0x20>
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	781b      	ldrb	r3, [r3, #0]
 800a374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a378:	2b10      	cmp	r3, #16
 800a37a:	d109      	bne.n	800a390 <netconn_recv_udp_raw_netbuf_flags+0x34>
 800a37c:	4b0a      	ldr	r3, [pc, #40]	; (800a3a8 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 800a37e:	f44f 7253 	mov.w	r2, #844	; 0x34c
 800a382:	490a      	ldr	r1, [pc, #40]	; (800a3ac <netconn_recv_udp_raw_netbuf_flags+0x50>)
 800a384:	480a      	ldr	r0, [pc, #40]	; (800a3b0 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 800a386:	f00e f963 	bl	8018650 <iprintf>
 800a38a:	f06f 030f 	mvn.w	r3, #15
 800a38e:	e006      	b.n	800a39e <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 800a390:	79fb      	ldrb	r3, [r7, #7]
 800a392:	461a      	mov	r2, r3
 800a394:	68b9      	ldr	r1, [r7, #8]
 800a396:	68f8      	ldr	r0, [r7, #12]
 800a398:	f7ff fe0a 	bl	8009fb0 <netconn_recv_data>
 800a39c:	4603      	mov	r3, r0
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3710      	adds	r7, #16
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	08019cac 	.word	0x08019cac
 800a3ac:	08019f30 	.word	0x08019f30
 800a3b0:	08019d04 	.word	0x08019d04

0800a3b4 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b08c      	sub	sp, #48	; 0x30
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d109      	bne.n	800a3d8 <netconn_send+0x24>
 800a3c4:	4b0e      	ldr	r3, [pc, #56]	; (800a400 <netconn_send+0x4c>)
 800a3c6:	f240 32b2 	movw	r2, #946	; 0x3b2
 800a3ca:	490e      	ldr	r1, [pc, #56]	; (800a404 <netconn_send+0x50>)
 800a3cc:	480e      	ldr	r0, [pc, #56]	; (800a408 <netconn_send+0x54>)
 800a3ce:	f00e f93f 	bl	8018650 <iprintf>
 800a3d2:	f06f 030f 	mvn.w	r3, #15
 800a3d6:	e00e      	b.n	800a3f6 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800a3e0:	f107 030c 	add.w	r3, r7, #12
 800a3e4:	4619      	mov	r1, r3
 800a3e6:	4809      	ldr	r0, [pc, #36]	; (800a40c <netconn_send+0x58>)
 800a3e8:	f7ff fc80 	bl	8009cec <netconn_apimsg>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800a3f2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3730      	adds	r7, #48	; 0x30
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop
 800a400:	08019cac 	.word	0x08019cac
 800a404:	08019f68 	.word	0x08019f68
 800a408:	08019d04 	.word	0x08019d04
 800a40c:	0800b51d 	.word	0x0800b51d

0800a410 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b088      	sub	sp, #32
 800a414:	af02      	add	r7, sp, #8
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	60b9      	str	r1, [r7, #8]
 800a41a:	607a      	str	r2, [r7, #4]
 800a41c:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800a426:	78fa      	ldrb	r2, [r7, #3]
 800a428:	f107 0110 	add.w	r1, r7, #16
 800a42c:	6a3b      	ldr	r3, [r7, #32]
 800a42e:	9300      	str	r3, [sp, #0]
 800a430:	4613      	mov	r3, r2
 800a432:	2201      	movs	r2, #1
 800a434:	68f8      	ldr	r0, [r7, #12]
 800a436:	f000 f805 	bl	800a444 <netconn_write_vectors_partly>
 800a43a:	4603      	mov	r3, r0
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3718      	adds	r7, #24
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b092      	sub	sp, #72	; 0x48
 800a448:	af00      	add	r7, sp, #0
 800a44a:	60f8      	str	r0, [r7, #12]
 800a44c:	60b9      	str	r1, [r7, #8]
 800a44e:	4611      	mov	r1, r2
 800a450:	461a      	mov	r2, r3
 800a452:	460b      	mov	r3, r1
 800a454:	80fb      	strh	r3, [r7, #6]
 800a456:	4613      	mov	r3, r2
 800a458:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d109      	bne.n	800a474 <netconn_write_vectors_partly+0x30>
 800a460:	4b4e      	ldr	r3, [pc, #312]	; (800a59c <netconn_write_vectors_partly+0x158>)
 800a462:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800a466:	494e      	ldr	r1, [pc, #312]	; (800a5a0 <netconn_write_vectors_partly+0x15c>)
 800a468:	484e      	ldr	r0, [pc, #312]	; (800a5a4 <netconn_write_vectors_partly+0x160>)
 800a46a:	f00e f8f1 	bl	8018650 <iprintf>
 800a46e:	f06f 030f 	mvn.w	r3, #15
 800a472:	e08e      	b.n	800a592 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a47c:	2b10      	cmp	r3, #16
 800a47e:	d009      	beq.n	800a494 <netconn_write_vectors_partly+0x50>
 800a480:	4b46      	ldr	r3, [pc, #280]	; (800a59c <netconn_write_vectors_partly+0x158>)
 800a482:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800a486:	4948      	ldr	r1, [pc, #288]	; (800a5a8 <netconn_write_vectors_partly+0x164>)
 800a488:	4846      	ldr	r0, [pc, #280]	; (800a5a4 <netconn_write_vectors_partly+0x160>)
 800a48a:	f00e f8e1 	bl	8018650 <iprintf>
 800a48e:	f06f 0305 	mvn.w	r3, #5
 800a492:	e07e      	b.n	800a592 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	7f1b      	ldrb	r3, [r3, #28]
 800a498:	f003 0302 	and.w	r3, r3, #2
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d104      	bne.n	800a4aa <netconn_write_vectors_partly+0x66>
 800a4a0:	797b      	ldrb	r3, [r7, #5]
 800a4a2:	f003 0304 	and.w	r3, r3, #4
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d001      	beq.n	800a4ae <netconn_write_vectors_partly+0x6a>
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	e000      	b.n	800a4b0 <netconn_write_vectors_partly+0x6c>
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800a4b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d005      	beq.n	800a4c8 <netconn_write_vectors_partly+0x84>
 800a4bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d102      	bne.n	800a4c8 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800a4c2:	f06f 0305 	mvn.w	r3, #5
 800a4c6:	e064      	b.n	800a592 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	643b      	str	r3, [r7, #64]	; 0x40
 800a4d0:	e015      	b.n	800a4fe <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800a4d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4d4:	00db      	lsls	r3, r3, #3
 800a4d6:	68ba      	ldr	r2, [r7, #8]
 800a4d8:	4413      	add	r3, r2
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a4de:	4413      	add	r3, r2
 800a4e0:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800a4e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4e4:	00db      	lsls	r3, r3, #3
 800a4e6:	68ba      	ldr	r2, [r7, #8]
 800a4e8:	4413      	add	r3, r2
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	d202      	bcs.n	800a4f8 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800a4f2:	f06f 0305 	mvn.w	r3, #5
 800a4f6:	e04c      	b.n	800a592 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800a4f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	643b      	str	r3, [r7, #64]	; 0x40
 800a4fe:	88fb      	ldrh	r3, [r7, #6]
 800a500:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a502:	429a      	cmp	r2, r3
 800a504:	dbe5      	blt.n	800a4d2 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800a506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d101      	bne.n	800a510 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800a50c:	2300      	movs	r3, #0
 800a50e:	e040      	b.n	800a592 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800a510:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a512:	2b00      	cmp	r3, #0
 800a514:	da0a      	bge.n	800a52c <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800a516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d102      	bne.n	800a522 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800a51c:	f06f 0305 	mvn.w	r3, #5
 800a520:	e037      	b.n	800a592 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800a522:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a526:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800a528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a52a:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800a534:	88fb      	ldrh	r3, [r7, #6]
 800a536:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800a538:	2300      	movs	r3, #0
 800a53a:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800a53c:	797b      	ldrb	r3, [r7, #5]
 800a53e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800a542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a544:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800a546:	2300      	movs	r3, #0
 800a548:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800a54a:	f107 0314 	add.w	r3, r7, #20
 800a54e:	4619      	mov	r1, r3
 800a550:	4816      	ldr	r0, [pc, #88]	; (800a5ac <netconn_write_vectors_partly+0x168>)
 800a552:	f7ff fbcb 	bl	8009cec <netconn_apimsg>
 800a556:	4603      	mov	r3, r0
 800a558:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800a55c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800a560:	2b00      	cmp	r3, #0
 800a562:	d114      	bne.n	800a58e <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800a564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a566:	2b00      	cmp	r3, #0
 800a568:	d002      	beq.n	800a570 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800a56a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a56c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a56e:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800a570:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a574:	2b00      	cmp	r3, #0
 800a576:	d10a      	bne.n	800a58e <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800a578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a57a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a57c:	429a      	cmp	r2, r3
 800a57e:	d006      	beq.n	800a58e <netconn_write_vectors_partly+0x14a>
 800a580:	4b06      	ldr	r3, [pc, #24]	; (800a59c <netconn_write_vectors_partly+0x158>)
 800a582:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a586:	490a      	ldr	r1, [pc, #40]	; (800a5b0 <netconn_write_vectors_partly+0x16c>)
 800a588:	4806      	ldr	r0, [pc, #24]	; (800a5a4 <netconn_write_vectors_partly+0x160>)
 800a58a:	f00e f861 	bl	8018650 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800a58e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800a592:	4618      	mov	r0, r3
 800a594:	3748      	adds	r7, #72	; 0x48
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
 800a59a:	bf00      	nop
 800a59c:	08019cac 	.word	0x08019cac
 800a5a0:	08019f84 	.word	0x08019f84
 800a5a4:	08019d04 	.word	0x08019d04
 800a5a8:	08019fa0 	.word	0x08019fa0
 800a5ac:	0800b9b9 	.word	0x0800b9b9
 800a5b0:	08019fc4 	.word	0x08019fc4

0800a5b4 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b08c      	sub	sp, #48	; 0x30
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	460b      	mov	r3, r1
 800a5be:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d109      	bne.n	800a5da <netconn_close_shutdown+0x26>
 800a5c6:	4b0f      	ldr	r3, [pc, #60]	; (800a604 <netconn_close_shutdown+0x50>)
 800a5c8:	f240 4247 	movw	r2, #1095	; 0x447
 800a5cc:	490e      	ldr	r1, [pc, #56]	; (800a608 <netconn_close_shutdown+0x54>)
 800a5ce:	480f      	ldr	r0, [pc, #60]	; (800a60c <netconn_close_shutdown+0x58>)
 800a5d0:	f00e f83e 	bl	8018650 <iprintf>
 800a5d4:	f06f 030f 	mvn.w	r3, #15
 800a5d8:	e010      	b.n	800a5fc <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800a5de:	78fb      	ldrb	r3, [r7, #3]
 800a5e0:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800a5e2:	2329      	movs	r3, #41	; 0x29
 800a5e4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800a5e6:	f107 030c 	add.w	r3, r7, #12
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	4808      	ldr	r0, [pc, #32]	; (800a610 <netconn_close_shutdown+0x5c>)
 800a5ee:	f7ff fb7d 	bl	8009cec <netconn_apimsg>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800a5f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3730      	adds	r7, #48	; 0x30
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}
 800a604:	08019cac 	.word	0x08019cac
 800a608:	08019fe8 	.word	0x08019fe8
 800a60c:	08019d04 	.word	0x08019d04
 800a610:	0800bbdd 	.word	0x0800bbdd

0800a614 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d101      	bne.n	800a626 <netconn_err+0x12>
    return ERR_OK;
 800a622:	2300      	movs	r3, #0
 800a624:	e00d      	b.n	800a642 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800a626:	f00d ff91 	bl	801854c <sys_arch_protect>
 800a62a:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	7a1b      	ldrb	r3, [r3, #8]
 800a630:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2200      	movs	r2, #0
 800a636:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800a638:	68f8      	ldr	r0, [r7, #12]
 800a63a:	f00d ff95 	bl	8018568 <sys_arch_unprotect>
  return err;
 800a63e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800a642:	4618      	mov	r0, r3
 800a644:	3710      	adds	r7, #16
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
	...

0800a64c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0
 800a652:	4603      	mov	r3, r0
 800a654:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800a656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a65a:	f113 0f0d 	cmn.w	r3, #13
 800a65e:	d009      	beq.n	800a674 <lwip_netconn_err_to_msg+0x28>
 800a660:	f113 0f0d 	cmn.w	r3, #13
 800a664:	dc0c      	bgt.n	800a680 <lwip_netconn_err_to_msg+0x34>
 800a666:	f113 0f0f 	cmn.w	r3, #15
 800a66a:	d007      	beq.n	800a67c <lwip_netconn_err_to_msg+0x30>
 800a66c:	f113 0f0e 	cmn.w	r3, #14
 800a670:	d002      	beq.n	800a678 <lwip_netconn_err_to_msg+0x2c>
 800a672:	e005      	b.n	800a680 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800a674:	4b0a      	ldr	r3, [pc, #40]	; (800a6a0 <lwip_netconn_err_to_msg+0x54>)
 800a676:	e00e      	b.n	800a696 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800a678:	4b0a      	ldr	r3, [pc, #40]	; (800a6a4 <lwip_netconn_err_to_msg+0x58>)
 800a67a:	e00c      	b.n	800a696 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800a67c:	4b0a      	ldr	r3, [pc, #40]	; (800a6a8 <lwip_netconn_err_to_msg+0x5c>)
 800a67e:	e00a      	b.n	800a696 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800a680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d005      	beq.n	800a694 <lwip_netconn_err_to_msg+0x48>
 800a688:	4b08      	ldr	r3, [pc, #32]	; (800a6ac <lwip_netconn_err_to_msg+0x60>)
 800a68a:	227d      	movs	r2, #125	; 0x7d
 800a68c:	4908      	ldr	r1, [pc, #32]	; (800a6b0 <lwip_netconn_err_to_msg+0x64>)
 800a68e:	4809      	ldr	r0, [pc, #36]	; (800a6b4 <lwip_netconn_err_to_msg+0x68>)
 800a690:	f00d ffde 	bl	8018650 <iprintf>
      return NULL;
 800a694:	2300      	movs	r3, #0
  }
}
 800a696:	4618      	mov	r0, r3
 800a698:	3708      	adds	r7, #8
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
 800a69e:	bf00      	nop
 800a6a0:	0801d5d4 	.word	0x0801d5d4
 800a6a4:	0801d5d5 	.word	0x0801d5d5
 800a6a8:	0801d5d6 	.word	0x0801d5d6
 800a6ac:	0801a004 	.word	0x0801a004
 800a6b0:	0801a038 	.word	0x0801a038
 800a6b4:	0801a048 	.word	0x0801a048

0800a6b8 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d105      	bne.n	800a6d4 <lwip_netconn_is_err_msg+0x1c>
 800a6c8:	4b12      	ldr	r3, [pc, #72]	; (800a714 <lwip_netconn_is_err_msg+0x5c>)
 800a6ca:	2285      	movs	r2, #133	; 0x85
 800a6cc:	4912      	ldr	r1, [pc, #72]	; (800a718 <lwip_netconn_is_err_msg+0x60>)
 800a6ce:	4813      	ldr	r0, [pc, #76]	; (800a71c <lwip_netconn_is_err_msg+0x64>)
 800a6d0:	f00d ffbe 	bl	8018650 <iprintf>

  if (msg == &netconn_aborted) {
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	4a12      	ldr	r2, [pc, #72]	; (800a720 <lwip_netconn_is_err_msg+0x68>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d104      	bne.n	800a6e6 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	22f3      	movs	r2, #243	; 0xf3
 800a6e0:	701a      	strb	r2, [r3, #0]
    return 1;
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	e012      	b.n	800a70c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	4a0e      	ldr	r2, [pc, #56]	; (800a724 <lwip_netconn_is_err_msg+0x6c>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d104      	bne.n	800a6f8 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	22f2      	movs	r2, #242	; 0xf2
 800a6f2:	701a      	strb	r2, [r3, #0]
    return 1;
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	e009      	b.n	800a70c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	4a0b      	ldr	r2, [pc, #44]	; (800a728 <lwip_netconn_is_err_msg+0x70>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d104      	bne.n	800a70a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	22f1      	movs	r2, #241	; 0xf1
 800a704:	701a      	strb	r2, [r3, #0]
    return 1;
 800a706:	2301      	movs	r3, #1
 800a708:	e000      	b.n	800a70c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800a70a:	2300      	movs	r3, #0
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3708      	adds	r7, #8
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}
 800a714:	0801a004 	.word	0x0801a004
 800a718:	0801a070 	.word	0x0801a070
 800a71c:	0801a048 	.word	0x0801a048
 800a720:	0801d5d4 	.word	0x0801d5d4
 800a724:	0801d5d5 	.word	0x0801d5d5
 800a728:	0801d5d6 	.word	0x0801d5d6

0800a72c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b088      	sub	sp, #32
 800a730:	af00      	add	r7, sp, #0
 800a732:	60f8      	str	r0, [r7, #12]
 800a734:	60b9      	str	r1, [r7, #8]
 800a736:	607a      	str	r2, [r7, #4]
 800a738:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d105      	bne.n	800a74c <recv_udp+0x20>
 800a740:	4b34      	ldr	r3, [pc, #208]	; (800a814 <recv_udp+0xe8>)
 800a742:	22e5      	movs	r2, #229	; 0xe5
 800a744:	4934      	ldr	r1, [pc, #208]	; (800a818 <recv_udp+0xec>)
 800a746:	4835      	ldr	r0, [pc, #212]	; (800a81c <recv_udp+0xf0>)
 800a748:	f00d ff82 	bl	8018650 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d105      	bne.n	800a75e <recv_udp+0x32>
 800a752:	4b30      	ldr	r3, [pc, #192]	; (800a814 <recv_udp+0xe8>)
 800a754:	22e6      	movs	r2, #230	; 0xe6
 800a756:	4932      	ldr	r1, [pc, #200]	; (800a820 <recv_udp+0xf4>)
 800a758:	4830      	ldr	r0, [pc, #192]	; (800a81c <recv_udp+0xf0>)
 800a75a:	f00d ff79 	bl	8018650 <iprintf>
  conn = (struct netconn *)arg;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800a762:	69fb      	ldr	r3, [r7, #28]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d103      	bne.n	800a770 <recv_udp+0x44>
    pbuf_free(p);
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f004 f85d 	bl	800e828 <pbuf_free>
    return;
 800a76e:	e04d      	b.n	800a80c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800a770:	69fb      	ldr	r3, [r7, #28]
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	68ba      	ldr	r2, [r7, #8]
 800a776:	429a      	cmp	r2, r3
 800a778:	d005      	beq.n	800a786 <recv_udp+0x5a>
 800a77a:	4b26      	ldr	r3, [pc, #152]	; (800a814 <recv_udp+0xe8>)
 800a77c:	22ee      	movs	r2, #238	; 0xee
 800a77e:	4929      	ldr	r1, [pc, #164]	; (800a824 <recv_udp+0xf8>)
 800a780:	4826      	ldr	r0, [pc, #152]	; (800a81c <recv_udp+0xf0>)
 800a782:	f00d ff65 	bl	8018650 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a786:	69fb      	ldr	r3, [r7, #28]
 800a788:	3310      	adds	r3, #16
 800a78a:	4618      	mov	r0, r3
 800a78c:	f00d fdc3 	bl	8018316 <sys_mbox_valid>
 800a790:	4603      	mov	r3, r0
 800a792:	2b00      	cmp	r3, #0
 800a794:	d103      	bne.n	800a79e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f004 f846 	bl	800e828 <pbuf_free>
    return;
 800a79c:	e036      	b.n	800a80c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800a79e:	2006      	movs	r0, #6
 800a7a0:	f003 f91a 	bl	800d9d8 <memp_malloc>
 800a7a4:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800a7a6:	69bb      	ldr	r3, [r7, #24]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d103      	bne.n	800a7b4 <recv_udp+0x88>
    pbuf_free(p);
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f004 f83b 	bl	800e828 <pbuf_free>
    return;
 800a7b2:	e02b      	b.n	800a80c <recv_udp+0xe0>
  } else {
    buf->p = p;
 800a7b4:	69bb      	ldr	r3, [r7, #24]
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800a7ba:	69bb      	ldr	r3, [r7, #24]
 800a7bc:	687a      	ldr	r2, [r7, #4]
 800a7be:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d002      	beq.n	800a7cc <recv_udp+0xa0>
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	e000      	b.n	800a7ce <recv_udp+0xa2>
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	69ba      	ldr	r2, [r7, #24]
 800a7d0:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800a7d2:	69bb      	ldr	r3, [r7, #24]
 800a7d4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a7d6:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	891b      	ldrh	r3, [r3, #8]
 800a7dc:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800a7de:	69fb      	ldr	r3, [r7, #28]
 800a7e0:	3310      	adds	r3, #16
 800a7e2:	69b9      	ldr	r1, [r7, #24]
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f00d fd21 	bl	801822c <sys_mbox_trypost>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d003      	beq.n	800a7f8 <recv_udp+0xcc>
    netbuf_delete(buf);
 800a7f0:	69b8      	ldr	r0, [r7, #24]
 800a7f2:	f001 fa9d 	bl	800bd30 <netbuf_delete>
    return;
 800a7f6:	e009      	b.n	800a80c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a7f8:	69fb      	ldr	r3, [r7, #28]
 800a7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d005      	beq.n	800a80c <recv_udp+0xe0>
 800a800:	69fb      	ldr	r3, [r7, #28]
 800a802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a804:	8afa      	ldrh	r2, [r7, #22]
 800a806:	2100      	movs	r1, #0
 800a808:	69f8      	ldr	r0, [r7, #28]
 800a80a:	4798      	blx	r3
  }
}
 800a80c:	3720      	adds	r7, #32
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	0801a004 	.word	0x0801a004
 800a818:	0801a07c 	.word	0x0801a07c
 800a81c:	0801a048 	.word	0x0801a048
 800a820:	0801a0a0 	.word	0x0801a0a0
 800a824:	0801a0c0 	.word	0x0801a0c0

0800a828 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b088      	sub	sp, #32
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	60f8      	str	r0, [r7, #12]
 800a830:	60b9      	str	r1, [r7, #8]
 800a832:	607a      	str	r2, [r7, #4]
 800a834:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d106      	bne.n	800a84a <recv_tcp+0x22>
 800a83c:	4b36      	ldr	r3, [pc, #216]	; (800a918 <recv_tcp+0xf0>)
 800a83e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a842:	4936      	ldr	r1, [pc, #216]	; (800a91c <recv_tcp+0xf4>)
 800a844:	4836      	ldr	r0, [pc, #216]	; (800a920 <recv_tcp+0xf8>)
 800a846:	f00d ff03 	bl	8018650 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d106      	bne.n	800a85e <recv_tcp+0x36>
 800a850:	4b31      	ldr	r3, [pc, #196]	; (800a918 <recv_tcp+0xf0>)
 800a852:	f240 122d 	movw	r2, #301	; 0x12d
 800a856:	4933      	ldr	r1, [pc, #204]	; (800a924 <recv_tcp+0xfc>)
 800a858:	4831      	ldr	r0, [pc, #196]	; (800a920 <recv_tcp+0xf8>)
 800a85a:	f00d fef9 	bl	8018650 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800a85e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d006      	beq.n	800a874 <recv_tcp+0x4c>
 800a866:	4b2c      	ldr	r3, [pc, #176]	; (800a918 <recv_tcp+0xf0>)
 800a868:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800a86c:	492e      	ldr	r1, [pc, #184]	; (800a928 <recv_tcp+0x100>)
 800a86e:	482c      	ldr	r0, [pc, #176]	; (800a920 <recv_tcp+0xf8>)
 800a870:	f00d feee 	bl	8018650 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d102      	bne.n	800a884 <recv_tcp+0x5c>
    return ERR_VAL;
 800a87e:	f06f 0305 	mvn.w	r3, #5
 800a882:	e045      	b.n	800a910 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	68ba      	ldr	r2, [r7, #8]
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d006      	beq.n	800a89c <recv_tcp+0x74>
 800a88e:	4b22      	ldr	r3, [pc, #136]	; (800a918 <recv_tcp+0xf0>)
 800a890:	f240 1235 	movw	r2, #309	; 0x135
 800a894:	4925      	ldr	r1, [pc, #148]	; (800a92c <recv_tcp+0x104>)
 800a896:	4822      	ldr	r0, [pc, #136]	; (800a920 <recv_tcp+0xf8>)
 800a898:	f00d feda 	bl	8018650 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	3310      	adds	r3, #16
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f00d fd38 	bl	8018316 <sys_mbox_valid>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d10d      	bne.n	800a8c8 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d008      	beq.n	800a8c4 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	891b      	ldrh	r3, [r3, #8]
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	68b8      	ldr	r0, [r7, #8]
 800a8ba:	f004 feb3 	bl	800f624 <tcp_recved>
      pbuf_free(p);
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f003 ffb2 	bl	800e828 <pbuf_free>
    }
    return ERR_OK;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	e023      	b.n	800a910 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d005      	beq.n	800a8da <recv_tcp+0xb2>
    msg = p;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	891b      	ldrh	r3, [r3, #8]
 800a8d6:	83fb      	strh	r3, [r7, #30]
 800a8d8:	e003      	b.n	800a8e2 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800a8da:	4b15      	ldr	r3, [pc, #84]	; (800a930 <recv_tcp+0x108>)
 800a8dc:	61bb      	str	r3, [r7, #24]
    len = 0;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	3310      	adds	r3, #16
 800a8e6:	69b9      	ldr	r1, [r7, #24]
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f00d fc9f 	bl	801822c <sys_mbox_trypost>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d002      	beq.n	800a8fa <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800a8f4:	f04f 33ff 	mov.w	r3, #4294967295
 800a8f8:	e00a      	b.n	800a910 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d005      	beq.n	800a90e <recv_tcp+0xe6>
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a906:	8bfa      	ldrh	r2, [r7, #30]
 800a908:	2100      	movs	r1, #0
 800a90a:	6978      	ldr	r0, [r7, #20]
 800a90c:	4798      	blx	r3
  }

  return ERR_OK;
 800a90e:	2300      	movs	r3, #0
}
 800a910:	4618      	mov	r0, r3
 800a912:	3720      	adds	r7, #32
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}
 800a918:	0801a004 	.word	0x0801a004
 800a91c:	0801a0e0 	.word	0x0801a0e0
 800a920:	0801a048 	.word	0x0801a048
 800a924:	0801a104 	.word	0x0801a104
 800a928:	0801a124 	.word	0x0801a124
 800a92c:	0801a13c 	.word	0x0801a13c
 800a930:	0801d5d6 	.word	0x0801d5d6

0800a934 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b084      	sub	sp, #16
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d106      	bne.n	800a956 <poll_tcp+0x22>
 800a948:	4b29      	ldr	r3, [pc, #164]	; (800a9f0 <poll_tcp+0xbc>)
 800a94a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800a94e:	4929      	ldr	r1, [pc, #164]	; (800a9f4 <poll_tcp+0xc0>)
 800a950:	4829      	ldr	r0, [pc, #164]	; (800a9f8 <poll_tcp+0xc4>)
 800a952:	f00d fe7d 	bl	8018650 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	785b      	ldrb	r3, [r3, #1]
 800a95a:	2b01      	cmp	r3, #1
 800a95c:	d104      	bne.n	800a968 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a95e:	2101      	movs	r1, #1
 800a960:	68f8      	ldr	r0, [r7, #12]
 800a962:	f000 fe5d 	bl	800b620 <lwip_netconn_do_writemore>
 800a966:	e016      	b.n	800a996 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	785b      	ldrb	r3, [r3, #1]
 800a96c:	2b04      	cmp	r3, #4
 800a96e:	d112      	bne.n	800a996 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	6a1b      	ldr	r3, [r3, #32]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d00a      	beq.n	800a98e <poll_tcp+0x5a>
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	6a1b      	ldr	r3, [r3, #32]
 800a97c:	7a5b      	ldrb	r3, [r3, #9]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d005      	beq.n	800a98e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	6a1b      	ldr	r3, [r3, #32]
 800a986:	7a5a      	ldrb	r2, [r3, #9]
 800a988:	3a01      	subs	r2, #1
 800a98a:	b2d2      	uxtb	r2, r2
 800a98c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a98e:	2101      	movs	r1, #1
 800a990:	68f8      	ldr	r0, [r7, #12]
 800a992:	f000 fb3b 	bl	800b00c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	7f1b      	ldrb	r3, [r3, #28]
 800a99a:	f003 0310 	and.w	r3, r3, #16
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d021      	beq.n	800a9e6 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d01d      	beq.n	800a9e6 <poll_tcp+0xb2>
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a9b2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a9b6:	d316      	bcc.n	800a9e6 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a9c0:	2b04      	cmp	r3, #4
 800a9c2:	d810      	bhi.n	800a9e6 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	7f1b      	ldrb	r3, [r3, #28]
 800a9c8:	f023 0310 	bic.w	r3, r3, #16
 800a9cc:	b2da      	uxtb	r2, r3
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d005      	beq.n	800a9e6 <poll_tcp+0xb2>
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9de:	2200      	movs	r2, #0
 800a9e0:	2102      	movs	r1, #2
 800a9e2:	68f8      	ldr	r0, [r7, #12]
 800a9e4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a9e6:	2300      	movs	r3, #0
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3710      	adds	r7, #16
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}
 800a9f0:	0801a004 	.word	0x0801a004
 800a9f4:	0801a15c 	.word	0x0801a15c
 800a9f8:	0801a048 	.word	0x0801a048

0800a9fc <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b086      	sub	sp, #24
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	60f8      	str	r0, [r7, #12]
 800aa04:	60b9      	str	r1, [r7, #8]
 800aa06:	4613      	mov	r3, r2
 800aa08:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d106      	bne.n	800aa22 <sent_tcp+0x26>
 800aa14:	4b20      	ldr	r3, [pc, #128]	; (800aa98 <sent_tcp+0x9c>)
 800aa16:	f240 1293 	movw	r2, #403	; 0x193
 800aa1a:	4920      	ldr	r1, [pc, #128]	; (800aa9c <sent_tcp+0xa0>)
 800aa1c:	4820      	ldr	r0, [pc, #128]	; (800aaa0 <sent_tcp+0xa4>)
 800aa1e:	f00d fe17 	bl	8018650 <iprintf>

  if (conn) {
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d032      	beq.n	800aa8e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	785b      	ldrb	r3, [r3, #1]
 800aa2c:	2b01      	cmp	r3, #1
 800aa2e:	d104      	bne.n	800aa3a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800aa30:	2101      	movs	r1, #1
 800aa32:	6978      	ldr	r0, [r7, #20]
 800aa34:	f000 fdf4 	bl	800b620 <lwip_netconn_do_writemore>
 800aa38:	e007      	b.n	800aa4a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	785b      	ldrb	r3, [r3, #1]
 800aa3e:	2b04      	cmp	r3, #4
 800aa40:	d103      	bne.n	800aa4a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800aa42:	2101      	movs	r1, #1
 800aa44:	6978      	ldr	r0, [r7, #20]
 800aa46:	f000 fae1 	bl	800b00c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d01d      	beq.n	800aa8e <sent_tcp+0x92>
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800aa5a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800aa5e:	d316      	bcc.n	800aa8e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800aa68:	2b04      	cmp	r3, #4
 800aa6a:	d810      	bhi.n	800aa8e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	7f1b      	ldrb	r3, [r3, #28]
 800aa70:	f023 0310 	bic.w	r3, r3, #16
 800aa74:	b2da      	uxtb	r2, r3
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d005      	beq.n	800aa8e <sent_tcp+0x92>
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa86:	88fa      	ldrh	r2, [r7, #6]
 800aa88:	2102      	movs	r1, #2
 800aa8a:	6978      	ldr	r0, [r7, #20]
 800aa8c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800aa8e:	2300      	movs	r3, #0
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3718      	adds	r7, #24
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}
 800aa98:	0801a004 	.word	0x0801a004
 800aa9c:	0801a15c 	.word	0x0801a15c
 800aaa0:	0801a048 	.word	0x0801a048

0800aaa4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b088      	sub	sp, #32
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	460b      	mov	r3, r1
 800aaae:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800aab4:	69fb      	ldr	r3, [r7, #28]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d106      	bne.n	800aac8 <err_tcp+0x24>
 800aaba:	4b5f      	ldr	r3, [pc, #380]	; (800ac38 <err_tcp+0x194>)
 800aabc:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800aac0:	495e      	ldr	r1, [pc, #376]	; (800ac3c <err_tcp+0x198>)
 800aac2:	485f      	ldr	r0, [pc, #380]	; (800ac40 <err_tcp+0x19c>)
 800aac4:	f00d fdc4 	bl	8018650 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800aac8:	f00d fd40 	bl	801854c <sys_arch_protect>
 800aacc:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800aace:	69fb      	ldr	r3, [r7, #28]
 800aad0:	2200      	movs	r2, #0
 800aad2:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800aad4:	69fb      	ldr	r3, [r7, #28]
 800aad6:	78fa      	ldrb	r2, [r7, #3]
 800aad8:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800aada:	69fb      	ldr	r3, [r7, #28]
 800aadc:	7f1b      	ldrb	r3, [r3, #28]
 800aade:	f043 0301 	orr.w	r3, r3, #1
 800aae2:	b2da      	uxtb	r2, r3
 800aae4:	69fb      	ldr	r3, [r7, #28]
 800aae6:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800aae8:	69fb      	ldr	r3, [r7, #28]
 800aaea:	785b      	ldrb	r3, [r3, #1]
 800aaec:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800aaee:	69fb      	ldr	r3, [r7, #28]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800aaf4:	69b8      	ldr	r0, [r7, #24]
 800aaf6:	f00d fd37 	bl	8018568 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800aafa:	69fb      	ldr	r3, [r7, #28]
 800aafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d005      	beq.n	800ab0e <err_tcp+0x6a>
 800ab02:	69fb      	ldr	r3, [r7, #28]
 800ab04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab06:	2200      	movs	r2, #0
 800ab08:	2104      	movs	r1, #4
 800ab0a:	69f8      	ldr	r0, [r7, #28]
 800ab0c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ab0e:	69fb      	ldr	r3, [r7, #28]
 800ab10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d005      	beq.n	800ab22 <err_tcp+0x7e>
 800ab16:	69fb      	ldr	r3, [r7, #28]
 800ab18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	2100      	movs	r1, #0
 800ab1e:	69f8      	ldr	r0, [r7, #28]
 800ab20:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800ab22:	69fb      	ldr	r3, [r7, #28]
 800ab24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d005      	beq.n	800ab36 <err_tcp+0x92>
 800ab2a:	69fb      	ldr	r3, [r7, #28]
 800ab2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab2e:	2200      	movs	r2, #0
 800ab30:	2102      	movs	r1, #2
 800ab32:	69f8      	ldr	r0, [r7, #28]
 800ab34:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800ab36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f7ff fd86 	bl	800a64c <lwip_netconn_err_to_msg>
 800ab40:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800ab42:	69fb      	ldr	r3, [r7, #28]
 800ab44:	3310      	adds	r3, #16
 800ab46:	4618      	mov	r0, r3
 800ab48:	f00d fbe5 	bl	8018316 <sys_mbox_valid>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d005      	beq.n	800ab5e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800ab52:	69fb      	ldr	r3, [r7, #28]
 800ab54:	3310      	adds	r3, #16
 800ab56:	6939      	ldr	r1, [r7, #16]
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f00d fb67 	bl	801822c <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800ab5e:	69fb      	ldr	r3, [r7, #28]
 800ab60:	3314      	adds	r3, #20
 800ab62:	4618      	mov	r0, r3
 800ab64:	f00d fbd7 	bl	8018316 <sys_mbox_valid>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d005      	beq.n	800ab7a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800ab6e:	69fb      	ldr	r3, [r7, #28]
 800ab70:	3314      	adds	r3, #20
 800ab72:	6939      	ldr	r1, [r7, #16]
 800ab74:	4618      	mov	r0, r3
 800ab76:	f00d fb59 	bl	801822c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800ab7a:	7dfb      	ldrb	r3, [r7, #23]
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	d005      	beq.n	800ab8c <err_tcp+0xe8>
 800ab80:	7dfb      	ldrb	r3, [r7, #23]
 800ab82:	2b04      	cmp	r3, #4
 800ab84:	d002      	beq.n	800ab8c <err_tcp+0xe8>
 800ab86:	7dfb      	ldrb	r3, [r7, #23]
 800ab88:	2b03      	cmp	r3, #3
 800ab8a:	d143      	bne.n	800ac14 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800ab8c:	69fb      	ldr	r3, [r7, #28]
 800ab8e:	7f1b      	ldrb	r3, [r3, #28]
 800ab90:	f003 0304 	and.w	r3, r3, #4
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	bf14      	ite	ne
 800ab98:	2301      	movne	r3, #1
 800ab9a:	2300      	moveq	r3, #0
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800aba0:	69fb      	ldr	r3, [r7, #28]
 800aba2:	7f1b      	ldrb	r3, [r3, #28]
 800aba4:	f023 0304 	bic.w	r3, r3, #4
 800aba8:	b2da      	uxtb	r2, r3
 800abaa:	69fb      	ldr	r3, [r7, #28]
 800abac:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d13b      	bne.n	800ac2c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800abb4:	69fb      	ldr	r3, [r7, #28]
 800abb6:	6a1b      	ldr	r3, [r3, #32]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d106      	bne.n	800abca <err_tcp+0x126>
 800abbc:	4b1e      	ldr	r3, [pc, #120]	; (800ac38 <err_tcp+0x194>)
 800abbe:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800abc2:	4920      	ldr	r1, [pc, #128]	; (800ac44 <err_tcp+0x1a0>)
 800abc4:	481e      	ldr	r0, [pc, #120]	; (800ac40 <err_tcp+0x19c>)
 800abc6:	f00d fd43 	bl	8018650 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800abca:	7dfb      	ldrb	r3, [r7, #23]
 800abcc:	2b04      	cmp	r3, #4
 800abce:	d104      	bne.n	800abda <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800abd0:	69fb      	ldr	r3, [r7, #28]
 800abd2:	6a1b      	ldr	r3, [r3, #32]
 800abd4:	2200      	movs	r2, #0
 800abd6:	711a      	strb	r2, [r3, #4]
 800abd8:	e003      	b.n	800abe2 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800abda:	69fb      	ldr	r3, [r7, #28]
 800abdc:	6a1b      	ldr	r3, [r3, #32]
 800abde:	78fa      	ldrb	r2, [r7, #3]
 800abe0:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800abe2:	69fb      	ldr	r3, [r7, #28]
 800abe4:	6a1b      	ldr	r3, [r3, #32]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	330c      	adds	r3, #12
 800abea:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800abec:	68b8      	ldr	r0, [r7, #8]
 800abee:	f00d fc23 	bl	8018438 <sys_sem_valid>
 800abf2:	4603      	mov	r3, r0
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d106      	bne.n	800ac06 <err_tcp+0x162>
 800abf8:	4b0f      	ldr	r3, [pc, #60]	; (800ac38 <err_tcp+0x194>)
 800abfa:	f240 12ef 	movw	r2, #495	; 0x1ef
 800abfe:	4912      	ldr	r1, [pc, #72]	; (800ac48 <err_tcp+0x1a4>)
 800ac00:	480f      	ldr	r0, [pc, #60]	; (800ac40 <err_tcp+0x19c>)
 800ac02:	f00d fd25 	bl	8018650 <iprintf>
      conn->current_msg = NULL;
 800ac06:	69fb      	ldr	r3, [r7, #28]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800ac0c:	68b8      	ldr	r0, [r7, #8]
 800ac0e:	f00d fbf9 	bl	8018404 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800ac12:	e00b      	b.n	800ac2c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800ac14:	69fb      	ldr	r3, [r7, #28]
 800ac16:	6a1b      	ldr	r3, [r3, #32]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d008      	beq.n	800ac2e <err_tcp+0x18a>
 800ac1c:	4b06      	ldr	r3, [pc, #24]	; (800ac38 <err_tcp+0x194>)
 800ac1e:	f240 12f7 	movw	r2, #503	; 0x1f7
 800ac22:	490a      	ldr	r1, [pc, #40]	; (800ac4c <err_tcp+0x1a8>)
 800ac24:	4806      	ldr	r0, [pc, #24]	; (800ac40 <err_tcp+0x19c>)
 800ac26:	f00d fd13 	bl	8018650 <iprintf>
  }
}
 800ac2a:	e000      	b.n	800ac2e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800ac2c:	bf00      	nop
}
 800ac2e:	bf00      	nop
 800ac30:	3720      	adds	r7, #32
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}
 800ac36:	bf00      	nop
 800ac38:	0801a004 	.word	0x0801a004
 800ac3c:	0801a15c 	.word	0x0801a15c
 800ac40:	0801a048 	.word	0x0801a048
 800ac44:	0801a16c 	.word	0x0801a16c
 800ac48:	0801a188 	.word	0x0801a188
 800ac4c:	0801a1a4 	.word	0x0801a1a4

0800ac50 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b084      	sub	sp, #16
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	685b      	ldr	r3, [r3, #4]
 800ac5c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800ac5e:	6879      	ldr	r1, [r7, #4]
 800ac60:	68f8      	ldr	r0, [r7, #12]
 800ac62:	f005 fba5 	bl	80103b0 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800ac66:	490a      	ldr	r1, [pc, #40]	; (800ac90 <setup_tcp+0x40>)
 800ac68:	68f8      	ldr	r0, [r7, #12]
 800ac6a:	f005 fbb3 	bl	80103d4 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800ac6e:	4909      	ldr	r1, [pc, #36]	; (800ac94 <setup_tcp+0x44>)
 800ac70:	68f8      	ldr	r0, [r7, #12]
 800ac72:	f005 fbd1 	bl	8010418 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800ac76:	2202      	movs	r2, #2
 800ac78:	4907      	ldr	r1, [pc, #28]	; (800ac98 <setup_tcp+0x48>)
 800ac7a:	68f8      	ldr	r0, [r7, #12]
 800ac7c:	f005 fc28 	bl	80104d0 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800ac80:	4906      	ldr	r1, [pc, #24]	; (800ac9c <setup_tcp+0x4c>)
 800ac82:	68f8      	ldr	r0, [r7, #12]
 800ac84:	f005 fbea 	bl	801045c <tcp_err>
}
 800ac88:	bf00      	nop
 800ac8a:	3710      	adds	r7, #16
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}
 800ac90:	0800a829 	.word	0x0800a829
 800ac94:	0800a9fd 	.word	0x0800a9fd
 800ac98:	0800a935 	.word	0x0800a935
 800ac9c:	0800aaa5 	.word	0x0800aaa5

0800aca0 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800aca0:	b590      	push	{r4, r7, lr}
 800aca2:	b085      	sub	sp, #20
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800aca8:	2300      	movs	r3, #0
 800acaa:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d006      	beq.n	800acc4 <pcb_new+0x24>
 800acb6:	4b2b      	ldr	r3, [pc, #172]	; (800ad64 <pcb_new+0xc4>)
 800acb8:	f240 2265 	movw	r2, #613	; 0x265
 800acbc:	492a      	ldr	r1, [pc, #168]	; (800ad68 <pcb_new+0xc8>)
 800acbe:	482b      	ldr	r0, [pc, #172]	; (800ad6c <pcb_new+0xcc>)
 800acc0:	f00d fcc6 	bl	8018650 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800acce:	2b10      	cmp	r3, #16
 800acd0:	d022      	beq.n	800ad18 <pcb_new+0x78>
 800acd2:	2b20      	cmp	r3, #32
 800acd4:	d133      	bne.n	800ad3e <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681c      	ldr	r4, [r3, #0]
 800acda:	7bfb      	ldrb	r3, [r7, #15]
 800acdc:	4618      	mov	r0, r3
 800acde:	f00a fe30 	bl	8015942 <udp_new_ip_type>
 800ace2:	4603      	mov	r3, r0
 800ace4:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d02a      	beq.n	800ad46 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	781b      	ldrb	r3, [r3, #0]
 800acf6:	2b22      	cmp	r3, #34	; 0x22
 800acf8:	d104      	bne.n	800ad04 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	2201      	movs	r2, #1
 800ad02:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	6858      	ldr	r0, [r3, #4]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	461a      	mov	r2, r3
 800ad10:	4917      	ldr	r1, [pc, #92]	; (800ad70 <pcb_new+0xd0>)
 800ad12:	f00a fd9d 	bl	8015850 <udp_recv>
      }
      break;
 800ad16:	e016      	b.n	800ad46 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681c      	ldr	r4, [r3, #0]
 800ad1c:	7bfb      	ldrb	r3, [r7, #15]
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f005 fb38 	bl	8010394 <tcp_new_ip_type>
 800ad24:	4603      	mov	r3, r0
 800ad26:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d00b      	beq.n	800ad4a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7ff ff8a 	bl	800ac50 <setup_tcp>
      }
      break;
 800ad3c:	e005      	b.n	800ad4a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	22fa      	movs	r2, #250	; 0xfa
 800ad42:	711a      	strb	r2, [r3, #4]
      return;
 800ad44:	e00a      	b.n	800ad5c <pcb_new+0xbc>
      break;
 800ad46:	bf00      	nop
 800ad48:	e000      	b.n	800ad4c <pcb_new+0xac>
      break;
 800ad4a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	685b      	ldr	r3, [r3, #4]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d102      	bne.n	800ad5c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	22ff      	movs	r2, #255	; 0xff
 800ad5a:	711a      	strb	r2, [r3, #4]
  }
}
 800ad5c:	3714      	adds	r7, #20
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd90      	pop	{r4, r7, pc}
 800ad62:	bf00      	nop
 800ad64:	0801a004 	.word	0x0801a004
 800ad68:	0801a1e8 	.word	0x0801a1e8
 800ad6c:	0801a048 	.word	0x0801a048
 800ad70:	0800a72d 	.word	0x0800a72d

0800ad74 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	2200      	movs	r2, #0
 800ad84:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d102      	bne.n	800ad96 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800ad90:	68f8      	ldr	r0, [r7, #12]
 800ad92:	f7ff ff85 	bl	800aca0 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800ad96:	bf00      	nop
 800ad98:	3710      	adds	r7, #16
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
	...

0800ada0 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b086      	sub	sp, #24
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	4603      	mov	r3, r0
 800ada8:	6039      	str	r1, [r7, #0]
 800adaa:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800adac:	2300      	movs	r3, #0
 800adae:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800adb0:	2007      	movs	r0, #7
 800adb2:	f002 fe11 	bl	800d9d8 <memp_malloc>
 800adb6:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d101      	bne.n	800adc2 <netconn_alloc+0x22>
    return NULL;
 800adbe:	2300      	movs	r3, #0
 800adc0:	e052      	b.n	800ae68 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	2200      	movs	r2, #0
 800adc6:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	79fa      	ldrb	r2, [r7, #7]
 800adcc:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2200      	movs	r2, #0
 800add2:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800add4:	79fb      	ldrb	r3, [r7, #7]
 800add6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800adda:	2b10      	cmp	r3, #16
 800addc:	d004      	beq.n	800ade8 <netconn_alloc+0x48>
 800adde:	2b20      	cmp	r3, #32
 800ade0:	d105      	bne.n	800adee <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800ade2:	2306      	movs	r3, #6
 800ade4:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800ade6:	e00a      	b.n	800adfe <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800ade8:	2306      	movs	r3, #6
 800adea:	617b      	str	r3, [r7, #20]
      break;
 800adec:	e007      	b.n	800adfe <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800adee:	4b20      	ldr	r3, [pc, #128]	; (800ae70 <netconn_alloc+0xd0>)
 800adf0:	f240 22e5 	movw	r2, #741	; 0x2e5
 800adf4:	491f      	ldr	r1, [pc, #124]	; (800ae74 <netconn_alloc+0xd4>)
 800adf6:	4820      	ldr	r0, [pc, #128]	; (800ae78 <netconn_alloc+0xd8>)
 800adf8:	f00d fc2a 	bl	8018650 <iprintf>
      goto free_and_return;
 800adfc:	e02f      	b.n	800ae5e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	3310      	adds	r3, #16
 800ae02:	6979      	ldr	r1, [r7, #20]
 800ae04:	4618      	mov	r0, r3
 800ae06:	f00d f9dd 	bl	80181c4 <sys_mbox_new>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d125      	bne.n	800ae5c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	330c      	adds	r3, #12
 800ae14:	2100      	movs	r1, #0
 800ae16:	4618      	mov	r0, r3
 800ae18:	f00d fa9b 	bl	8018352 <sys_sem_new>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d005      	beq.n	800ae2e <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	3310      	adds	r3, #16
 800ae26:	4618      	mov	r0, r3
 800ae28:	f00d f9ee 	bl	8018208 <sys_mbox_free>
    goto free_and_return;
 800ae2c:	e017      	b.n	800ae5e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	3314      	adds	r3, #20
 800ae32:	4618      	mov	r0, r3
 800ae34:	f00d fa80 	bl	8018338 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	f04f 32ff 	mov.w	r2, #4294967295
 800ae44:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	683a      	ldr	r2, [r7, #0]
 800ae4a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	7cfa      	ldrb	r2, [r7, #19]
 800ae56:	771a      	strb	r2, [r3, #28]
  return conn;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	e005      	b.n	800ae68 <netconn_alloc+0xc8>
    goto free_and_return;
 800ae5c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800ae5e:	68f9      	ldr	r1, [r7, #12]
 800ae60:	2007      	movs	r0, #7
 800ae62:	f002 fe0b 	bl	800da7c <memp_free>
  return NULL;
 800ae66:	2300      	movs	r3, #0
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3718      	adds	r7, #24
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}
 800ae70:	0801a004 	.word	0x0801a004
 800ae74:	0801a208 	.word	0x0801a208
 800ae78:	0801a048 	.word	0x0801a048

0800ae7c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b082      	sub	sp, #8
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	685b      	ldr	r3, [r3, #4]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d006      	beq.n	800ae9a <netconn_free+0x1e>
 800ae8c:	4b1b      	ldr	r3, [pc, #108]	; (800aefc <netconn_free+0x80>)
 800ae8e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800ae92:	491b      	ldr	r1, [pc, #108]	; (800af00 <netconn_free+0x84>)
 800ae94:	481b      	ldr	r0, [pc, #108]	; (800af04 <netconn_free+0x88>)
 800ae96:	f00d fbdb 	bl	8018650 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	3310      	adds	r3, #16
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f00d fa39 	bl	8018316 <sys_mbox_valid>
 800aea4:	4603      	mov	r3, r0
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d006      	beq.n	800aeb8 <netconn_free+0x3c>
 800aeaa:	4b14      	ldr	r3, [pc, #80]	; (800aefc <netconn_free+0x80>)
 800aeac:	f240 3223 	movw	r2, #803	; 0x323
 800aeb0:	4915      	ldr	r1, [pc, #84]	; (800af08 <netconn_free+0x8c>)
 800aeb2:	4814      	ldr	r0, [pc, #80]	; (800af04 <netconn_free+0x88>)
 800aeb4:	f00d fbcc 	bl	8018650 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	3314      	adds	r3, #20
 800aebc:	4618      	mov	r0, r3
 800aebe:	f00d fa2a 	bl	8018316 <sys_mbox_valid>
 800aec2:	4603      	mov	r3, r0
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d006      	beq.n	800aed6 <netconn_free+0x5a>
 800aec8:	4b0c      	ldr	r3, [pc, #48]	; (800aefc <netconn_free+0x80>)
 800aeca:	f240 3226 	movw	r2, #806	; 0x326
 800aece:	490f      	ldr	r1, [pc, #60]	; (800af0c <netconn_free+0x90>)
 800aed0:	480c      	ldr	r0, [pc, #48]	; (800af04 <netconn_free+0x88>)
 800aed2:	f00d fbbd 	bl	8018650 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	330c      	adds	r3, #12
 800aeda:	4618      	mov	r0, r3
 800aedc:	f00d fa9f 	bl	801841e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	330c      	adds	r3, #12
 800aee4:	4618      	mov	r0, r3
 800aee6:	f00d fab8 	bl	801845a <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800aeea:	6879      	ldr	r1, [r7, #4]
 800aeec:	2007      	movs	r0, #7
 800aeee:	f002 fdc5 	bl	800da7c <memp_free>
}
 800aef2:	bf00      	nop
 800aef4:	3708      	adds	r7, #8
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}
 800aefa:	bf00      	nop
 800aefc:	0801a004 	.word	0x0801a004
 800af00:	0801a230 	.word	0x0801a230
 800af04:	0801a048 	.word	0x0801a048
 800af08:	0801a260 	.word	0x0801a260
 800af0c:	0801a29c 	.word	0x0801a29c

0800af10 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b086      	sub	sp, #24
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	3310      	adds	r3, #16
 800af1c:	4618      	mov	r0, r3
 800af1e:	f00d f9fa 	bl	8018316 <sys_mbox_valid>
 800af22:	4603      	mov	r3, r0
 800af24:	2b00      	cmp	r3, #0
 800af26:	d02f      	beq.n	800af88 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800af28:	e018      	b.n	800af5c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	781b      	ldrb	r3, [r3, #0]
 800af2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800af32:	2b10      	cmp	r3, #16
 800af34:	d10e      	bne.n	800af54 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	f107 020f 	add.w	r2, r7, #15
 800af3c:	4611      	mov	r1, r2
 800af3e:	4618      	mov	r0, r3
 800af40:	f7ff fbba 	bl	800a6b8 <lwip_netconn_is_err_msg>
 800af44:	4603      	mov	r3, r0
 800af46:	2b00      	cmp	r3, #0
 800af48:	d108      	bne.n	800af5c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	4618      	mov	r0, r3
 800af4e:	f003 fc6b 	bl	800e828 <pbuf_free>
 800af52:	e003      	b.n	800af5c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	4618      	mov	r0, r3
 800af58:	f000 feea 	bl	800bd30 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	3310      	adds	r3, #16
 800af60:	f107 0210 	add.w	r2, r7, #16
 800af64:	4611      	mov	r1, r2
 800af66:	4618      	mov	r0, r3
 800af68:	f00d f9b9 	bl	80182de <sys_arch_mbox_tryfetch>
 800af6c:	4603      	mov	r3, r0
 800af6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af72:	d1da      	bne.n	800af2a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	3310      	adds	r3, #16
 800af78:	4618      	mov	r0, r3
 800af7a:	f00d f945 	bl	8018208 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	3310      	adds	r3, #16
 800af82:	4618      	mov	r0, r3
 800af84:	f00d f9d8 	bl	8018338 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	3314      	adds	r3, #20
 800af8c:	4618      	mov	r0, r3
 800af8e:	f00d f9c2 	bl	8018316 <sys_mbox_valid>
 800af92:	4603      	mov	r3, r0
 800af94:	2b00      	cmp	r3, #0
 800af96:	d034      	beq.n	800b002 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800af98:	e01d      	b.n	800afd6 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	f107 020e 	add.w	r2, r7, #14
 800afa0:	4611      	mov	r1, r2
 800afa2:	4618      	mov	r0, r3
 800afa4:	f7ff fb88 	bl	800a6b8 <lwip_netconn_is_err_msg>
 800afa8:	4603      	mov	r3, r0
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d113      	bne.n	800afd6 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800afb2:	6978      	ldr	r0, [r7, #20]
 800afb4:	f7ff ffac 	bl	800af10 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d007      	beq.n	800afd0 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	685b      	ldr	r3, [r3, #4]
 800afc4:	4618      	mov	r0, r3
 800afc6:	f004 fa2f 	bl	800f428 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	2200      	movs	r2, #0
 800afce:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800afd0:	6978      	ldr	r0, [r7, #20]
 800afd2:	f7ff ff53 	bl	800ae7c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	3314      	adds	r3, #20
 800afda:	f107 0210 	add.w	r2, r7, #16
 800afde:	4611      	mov	r1, r2
 800afe0:	4618      	mov	r0, r3
 800afe2:	f00d f97c 	bl	80182de <sys_arch_mbox_tryfetch>
 800afe6:	4603      	mov	r3, r0
 800afe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afec:	d1d5      	bne.n	800af9a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	3314      	adds	r3, #20
 800aff2:	4618      	mov	r0, r3
 800aff4:	f00d f908 	bl	8018208 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	3314      	adds	r3, #20
 800affc:	4618      	mov	r0, r3
 800affe:	f00d f99b 	bl	8018338 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800b002:	bf00      	nop
 800b004:	3718      	adds	r7, #24
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
	...

0800b00c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b086      	sub	sp, #24
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	460b      	mov	r3, r1
 800b016:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800b018:	2300      	movs	r3, #0
 800b01a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d106      	bne.n	800b030 <lwip_netconn_do_close_internal+0x24>
 800b022:	4b87      	ldr	r3, [pc, #540]	; (800b240 <lwip_netconn_do_close_internal+0x234>)
 800b024:	f240 32a2 	movw	r2, #930	; 0x3a2
 800b028:	4986      	ldr	r1, [pc, #536]	; (800b244 <lwip_netconn_do_close_internal+0x238>)
 800b02a:	4887      	ldr	r0, [pc, #540]	; (800b248 <lwip_netconn_do_close_internal+0x23c>)
 800b02c:	f00d fb10 	bl	8018650 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b038:	2b10      	cmp	r3, #16
 800b03a:	d006      	beq.n	800b04a <lwip_netconn_do_close_internal+0x3e>
 800b03c:	4b80      	ldr	r3, [pc, #512]	; (800b240 <lwip_netconn_do_close_internal+0x234>)
 800b03e:	f240 32a3 	movw	r2, #931	; 0x3a3
 800b042:	4982      	ldr	r1, [pc, #520]	; (800b24c <lwip_netconn_do_close_internal+0x240>)
 800b044:	4880      	ldr	r0, [pc, #512]	; (800b248 <lwip_netconn_do_close_internal+0x23c>)
 800b046:	f00d fb03 	bl	8018650 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	785b      	ldrb	r3, [r3, #1]
 800b04e:	2b04      	cmp	r3, #4
 800b050:	d006      	beq.n	800b060 <lwip_netconn_do_close_internal+0x54>
 800b052:	4b7b      	ldr	r3, [pc, #492]	; (800b240 <lwip_netconn_do_close_internal+0x234>)
 800b054:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800b058:	497d      	ldr	r1, [pc, #500]	; (800b250 <lwip_netconn_do_close_internal+0x244>)
 800b05a:	487b      	ldr	r0, [pc, #492]	; (800b248 <lwip_netconn_do_close_internal+0x23c>)
 800b05c:	f00d faf8 	bl	8018650 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d106      	bne.n	800b076 <lwip_netconn_do_close_internal+0x6a>
 800b068:	4b75      	ldr	r3, [pc, #468]	; (800b240 <lwip_netconn_do_close_internal+0x234>)
 800b06a:	f240 32a5 	movw	r2, #933	; 0x3a5
 800b06e:	4979      	ldr	r1, [pc, #484]	; (800b254 <lwip_netconn_do_close_internal+0x248>)
 800b070:	4875      	ldr	r0, [pc, #468]	; (800b248 <lwip_netconn_do_close_internal+0x23c>)
 800b072:	f00d faed 	bl	8018650 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6a1b      	ldr	r3, [r3, #32]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d106      	bne.n	800b08c <lwip_netconn_do_close_internal+0x80>
 800b07e:	4b70      	ldr	r3, [pc, #448]	; (800b240 <lwip_netconn_do_close_internal+0x234>)
 800b080:	f240 32a6 	movw	r2, #934	; 0x3a6
 800b084:	4974      	ldr	r1, [pc, #464]	; (800b258 <lwip_netconn_do_close_internal+0x24c>)
 800b086:	4870      	ldr	r0, [pc, #448]	; (800b248 <lwip_netconn_do_close_internal+0x23c>)
 800b088:	f00d fae2 	bl	8018650 <iprintf>

  tpcb = conn->pcb.tcp;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	685b      	ldr	r3, [r3, #4]
 800b090:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6a1b      	ldr	r3, [r3, #32]
 800b096:	7a1b      	ldrb	r3, [r3, #8]
 800b098:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800b09a:	7bfb      	ldrb	r3, [r7, #15]
 800b09c:	f003 0301 	and.w	r3, r3, #1
 800b0a0:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800b0a2:	7bfb      	ldrb	r3, [r7, #15]
 800b0a4:	f003 0302 	and.w	r3, r3, #2
 800b0a8:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800b0aa:	7bfb      	ldrb	r3, [r7, #15]
 800b0ac:	2b03      	cmp	r3, #3
 800b0ae:	d102      	bne.n	800b0b6 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	75bb      	strb	r3, [r7, #22]
 800b0b4:	e01f      	b.n	800b0f6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800b0b6:	7bbb      	ldrb	r3, [r7, #14]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d00e      	beq.n	800b0da <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800b0c0:	2b05      	cmp	r3, #5
 800b0c2:	d007      	beq.n	800b0d4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800b0c8:	2b06      	cmp	r3, #6
 800b0ca:	d003      	beq.n	800b0d4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800b0d0:	2b08      	cmp	r3, #8
 800b0d2:	d102      	bne.n	800b0da <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	75bb      	strb	r3, [r7, #22]
 800b0d8:	e00d      	b.n	800b0f6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800b0da:	7b7b      	ldrb	r3, [r7, #13]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d008      	beq.n	800b0f2 <lwip_netconn_do_close_internal+0xe6>
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	8b5b      	ldrh	r3, [r3, #26]
 800b0e4:	f003 0310 	and.w	r3, r3, #16
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d002      	beq.n	800b0f2 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	75bb      	strb	r3, [r7, #22]
 800b0f0:	e001      	b.n	800b0f6 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800b0f6:	7dbb      	ldrb	r3, [r7, #22]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d003      	beq.n	800b104 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800b0fc:	2100      	movs	r1, #0
 800b0fe:	6938      	ldr	r0, [r7, #16]
 800b100:	f005 f956 	bl	80103b0 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	7d1b      	ldrb	r3, [r3, #20]
 800b108:	2b01      	cmp	r3, #1
 800b10a:	d104      	bne.n	800b116 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800b10c:	2100      	movs	r1, #0
 800b10e:	6938      	ldr	r0, [r7, #16]
 800b110:	f005 f9c6 	bl	80104a0 <tcp_accept>
 800b114:	e01d      	b.n	800b152 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800b116:	7bbb      	ldrb	r3, [r7, #14]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d007      	beq.n	800b12c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800b11c:	2100      	movs	r1, #0
 800b11e:	6938      	ldr	r0, [r7, #16]
 800b120:	f005 f958 	bl	80103d4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800b124:	2100      	movs	r1, #0
 800b126:	6938      	ldr	r0, [r7, #16]
 800b128:	f005 f9ba 	bl	80104a0 <tcp_accept>
    }
    if (shut_tx) {
 800b12c:	7b7b      	ldrb	r3, [r7, #13]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d003      	beq.n	800b13a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800b132:	2100      	movs	r1, #0
 800b134:	6938      	ldr	r0, [r7, #16]
 800b136:	f005 f96f 	bl	8010418 <tcp_sent>
    }
    if (shut_close) {
 800b13a:	7dbb      	ldrb	r3, [r7, #22]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d008      	beq.n	800b152 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800b140:	2200      	movs	r2, #0
 800b142:	2100      	movs	r1, #0
 800b144:	6938      	ldr	r0, [r7, #16]
 800b146:	f005 f9c3 	bl	80104d0 <tcp_poll>
      tcp_err(tpcb, NULL);
 800b14a:	2100      	movs	r1, #0
 800b14c:	6938      	ldr	r0, [r7, #16]
 800b14e:	f005 f985 	bl	801045c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800b152:	7dbb      	ldrb	r3, [r7, #22]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d005      	beq.n	800b164 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800b158:	6938      	ldr	r0, [r7, #16]
 800b15a:	f004 f81f 	bl	800f19c <tcp_close>
 800b15e:	4603      	mov	r3, r0
 800b160:	75fb      	strb	r3, [r7, #23]
 800b162:	e007      	b.n	800b174 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800b164:	7bbb      	ldrb	r3, [r7, #14]
 800b166:	7b7a      	ldrb	r2, [r7, #13]
 800b168:	4619      	mov	r1, r3
 800b16a:	6938      	ldr	r0, [r7, #16]
 800b16c:	f004 f842 	bl	800f1f4 <tcp_shutdown>
 800b170:	4603      	mov	r3, r0
 800b172:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800b174:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d102      	bne.n	800b182 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800b17c:	2301      	movs	r3, #1
 800b17e:	757b      	strb	r3, [r7, #21]
 800b180:	e016      	b.n	800b1b0 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800b182:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b18a:	d10f      	bne.n	800b1ac <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	6a1b      	ldr	r3, [r3, #32]
 800b190:	7a5b      	ldrb	r3, [r3, #9]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d10c      	bne.n	800b1b0 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800b196:	2301      	movs	r3, #1
 800b198:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800b19a:	7dbb      	ldrb	r3, [r7, #22]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d007      	beq.n	800b1b0 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800b1a0:	6938      	ldr	r0, [r7, #16]
 800b1a2:	f004 f941 	bl	800f428 <tcp_abort>
          err = ERR_OK;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	75fb      	strb	r3, [r7, #23]
 800b1aa:	e001      	b.n	800b1b0 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800b1b0:	7d7b      	ldrb	r3, [r7, #21]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d052      	beq.n	800b25c <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6a1b      	ldr	r3, [r3, #32]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	330c      	adds	r3, #12
 800b1be:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6a1b      	ldr	r3, [r3, #32]
 800b1c4:	7dfa      	ldrb	r2, [r7, #23]
 800b1c6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800b1d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d129      	bne.n	800b230 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800b1dc:	7dbb      	ldrb	r3, [r7, #22]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d00c      	beq.n	800b1fc <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d005      	beq.n	800b1fc <lwip_netconn_do_close_internal+0x1f0>
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	2104      	movs	r1, #4
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	4798      	blx	r3
      }
      if (shut_rx) {
 800b1fc:	7bbb      	ldrb	r3, [r7, #14]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d009      	beq.n	800b216 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b206:	2b00      	cmp	r3, #0
 800b208:	d005      	beq.n	800b216 <lwip_netconn_do_close_internal+0x20a>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b20e:	2200      	movs	r2, #0
 800b210:	2100      	movs	r1, #0
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	4798      	blx	r3
      }
      if (shut_tx) {
 800b216:	7b7b      	ldrb	r3, [r7, #13]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d009      	beq.n	800b230 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b220:	2b00      	cmp	r3, #0
 800b222:	d005      	beq.n	800b230 <lwip_netconn_do_close_internal+0x224>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b228:	2200      	movs	r2, #0
 800b22a:	2102      	movs	r1, #2
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b230:	78fb      	ldrb	r3, [r7, #3]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d002      	beq.n	800b23c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800b236:	68b8      	ldr	r0, [r7, #8]
 800b238:	f00d f8e4 	bl	8018404 <sys_sem_signal>
    }
    return ERR_OK;
 800b23c:	2300      	movs	r3, #0
 800b23e:	e03c      	b.n	800b2ba <lwip_netconn_do_close_internal+0x2ae>
 800b240:	0801a004 	.word	0x0801a004
 800b244:	0801a2d8 	.word	0x0801a2d8
 800b248:	0801a048 	.word	0x0801a048
 800b24c:	0801a2e8 	.word	0x0801a2e8
 800b250:	0801a308 	.word	0x0801a308
 800b254:	0801a32c 	.word	0x0801a32c
 800b258:	0801a16c 	.word	0x0801a16c
  }
  if (!close_finished) {
 800b25c:	7d7b      	ldrb	r3, [r7, #21]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d11e      	bne.n	800b2a0 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	7d1b      	ldrb	r3, [r3, #20]
 800b266:	2b01      	cmp	r3, #1
 800b268:	d106      	bne.n	800b278 <lwip_netconn_do_close_internal+0x26c>
 800b26a:	4b16      	ldr	r3, [pc, #88]	; (800b2c4 <lwip_netconn_do_close_internal+0x2b8>)
 800b26c:	f240 4241 	movw	r2, #1089	; 0x441
 800b270:	4915      	ldr	r1, [pc, #84]	; (800b2c8 <lwip_netconn_do_close_internal+0x2bc>)
 800b272:	4816      	ldr	r0, [pc, #88]	; (800b2cc <lwip_netconn_do_close_internal+0x2c0>)
 800b274:	f00d f9ec 	bl	8018650 <iprintf>
    if (shut_tx) {
 800b278:	7b7b      	ldrb	r3, [r7, #13]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d003      	beq.n	800b286 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800b27e:	4914      	ldr	r1, [pc, #80]	; (800b2d0 <lwip_netconn_do_close_internal+0x2c4>)
 800b280:	6938      	ldr	r0, [r7, #16]
 800b282:	f005 f8c9 	bl	8010418 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800b286:	2201      	movs	r2, #1
 800b288:	4912      	ldr	r1, [pc, #72]	; (800b2d4 <lwip_netconn_do_close_internal+0x2c8>)
 800b28a:	6938      	ldr	r0, [r7, #16]
 800b28c:	f005 f920 	bl	80104d0 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800b290:	4911      	ldr	r1, [pc, #68]	; (800b2d8 <lwip_netconn_do_close_internal+0x2cc>)
 800b292:	6938      	ldr	r0, [r7, #16]
 800b294:	f005 f8e2 	bl	801045c <tcp_err>
    tcp_arg(tpcb, conn);
 800b298:	6879      	ldr	r1, [r7, #4]
 800b29a:	6938      	ldr	r0, [r7, #16]
 800b29c:	f005 f888 	bl	80103b0 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800b2a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d106      	bne.n	800b2b6 <lwip_netconn_do_close_internal+0x2aa>
 800b2a8:	4b06      	ldr	r3, [pc, #24]	; (800b2c4 <lwip_netconn_do_close_internal+0x2b8>)
 800b2aa:	f240 424d 	movw	r2, #1101	; 0x44d
 800b2ae:	490b      	ldr	r1, [pc, #44]	; (800b2dc <lwip_netconn_do_close_internal+0x2d0>)
 800b2b0:	4806      	ldr	r0, [pc, #24]	; (800b2cc <lwip_netconn_do_close_internal+0x2c0>)
 800b2b2:	f00d f9cd 	bl	8018650 <iprintf>
  return err;
 800b2b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3718      	adds	r7, #24
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}
 800b2c2:	bf00      	nop
 800b2c4:	0801a004 	.word	0x0801a004
 800b2c8:	0801a340 	.word	0x0801a340
 800b2cc:	0801a048 	.word	0x0801a048
 800b2d0:	0800a9fd 	.word	0x0800a9fd
 800b2d4:	0800a935 	.word	0x0800a935
 800b2d8:	0800aaa5 	.word	0x0800aaa5
 800b2dc:	0801a364 	.word	0x0801a364

0800b2e0 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b084      	sub	sp, #16
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	785b      	ldrb	r3, [r3, #1]
 800b2f2:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800b2f4:	7afb      	ldrb	r3, [r7, #11]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d00d      	beq.n	800b316 <lwip_netconn_do_delconn+0x36>
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	781b      	ldrb	r3, [r3, #0]
 800b300:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b304:	2b10      	cmp	r3, #16
 800b306:	d006      	beq.n	800b316 <lwip_netconn_do_delconn+0x36>
 800b308:	4b60      	ldr	r3, [pc, #384]	; (800b48c <lwip_netconn_do_delconn+0x1ac>)
 800b30a:	f240 425e 	movw	r2, #1118	; 0x45e
 800b30e:	4960      	ldr	r1, [pc, #384]	; (800b490 <lwip_netconn_do_delconn+0x1b0>)
 800b310:	4860      	ldr	r0, [pc, #384]	; (800b494 <lwip_netconn_do_delconn+0x1b4>)
 800b312:	f00d f99d 	bl	8018650 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800b316:	7afb      	ldrb	r3, [r7, #11]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d005      	beq.n	800b328 <lwip_netconn_do_delconn+0x48>
 800b31c:	7afb      	ldrb	r3, [r7, #11]
 800b31e:	2b02      	cmp	r3, #2
 800b320:	d002      	beq.n	800b328 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800b322:	7afb      	ldrb	r3, [r7, #11]
 800b324:	2b03      	cmp	r3, #3
 800b326:	d109      	bne.n	800b33c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800b328:	7afb      	ldrb	r3, [r7, #11]
 800b32a:	2b03      	cmp	r3, #3
 800b32c:	d10a      	bne.n	800b344 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	7f1b      	ldrb	r3, [r3, #28]
 800b334:	f003 0304 	and.w	r3, r3, #4
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d103      	bne.n	800b344 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	22fb      	movs	r2, #251	; 0xfb
 800b340:	711a      	strb	r2, [r3, #4]
 800b342:	e097      	b.n	800b474 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800b344:	7afb      	ldrb	r3, [r7, #11]
 800b346:	2b03      	cmp	r3, #3
 800b348:	d10d      	bne.n	800b366 <lwip_netconn_do_delconn+0x86>
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	7f1b      	ldrb	r3, [r3, #28]
 800b350:	f003 0304 	and.w	r3, r3, #4
 800b354:	2b00      	cmp	r3, #0
 800b356:	d106      	bne.n	800b366 <lwip_netconn_do_delconn+0x86>
 800b358:	4b4c      	ldr	r3, [pc, #304]	; (800b48c <lwip_netconn_do_delconn+0x1ac>)
 800b35a:	f240 427a 	movw	r2, #1146	; 0x47a
 800b35e:	494e      	ldr	r1, [pc, #312]	; (800b498 <lwip_netconn_do_delconn+0x1b8>)
 800b360:	484c      	ldr	r0, [pc, #304]	; (800b494 <lwip_netconn_do_delconn+0x1b4>)
 800b362:	f00d f975 	bl	8018650 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2200      	movs	r2, #0
 800b36a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	4618      	mov	r0, r3
 800b372:	f7ff fdcd 	bl	800af10 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	685b      	ldr	r3, [r3, #4]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d05f      	beq.n	800b440 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	781b      	ldrb	r3, [r3, #0]
 800b386:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b38a:	2b10      	cmp	r3, #16
 800b38c:	d00d      	beq.n	800b3aa <lwip_netconn_do_delconn+0xca>
 800b38e:	2b20      	cmp	r3, #32
 800b390:	d151      	bne.n	800b436 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	685b      	ldr	r3, [r3, #4]
 800b398:	2200      	movs	r2, #0
 800b39a:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f00a fa74 	bl	8015890 <udp_remove>
          break;
 800b3a8:	e046      	b.n	800b438 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	6a1b      	ldr	r3, [r3, #32]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d006      	beq.n	800b3c2 <lwip_netconn_do_delconn+0xe2>
 800b3b4:	4b35      	ldr	r3, [pc, #212]	; (800b48c <lwip_netconn_do_delconn+0x1ac>)
 800b3b6:	f240 4294 	movw	r2, #1172	; 0x494
 800b3ba:	4938      	ldr	r1, [pc, #224]	; (800b49c <lwip_netconn_do_delconn+0x1bc>)
 800b3bc:	4835      	ldr	r0, [pc, #212]	; (800b494 <lwip_netconn_do_delconn+0x1b4>)
 800b3be:	f00d f947 	bl	8018650 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	2204      	movs	r2, #4
 800b3c8:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	2203      	movs	r2, #3
 800b3ce:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	68fa      	ldr	r2, [r7, #12]
 800b3d6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	2100      	movs	r1, #0
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f7ff fe14 	bl	800b00c <lwip_netconn_do_close_internal>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d04b      	beq.n	800b482 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	785b      	ldrb	r3, [r3, #1]
 800b3f0:	2b04      	cmp	r3, #4
 800b3f2:	d006      	beq.n	800b402 <lwip_netconn_do_delconn+0x122>
 800b3f4:	4b25      	ldr	r3, [pc, #148]	; (800b48c <lwip_netconn_do_delconn+0x1ac>)
 800b3f6:	f240 429a 	movw	r2, #1178	; 0x49a
 800b3fa:	4929      	ldr	r1, [pc, #164]	; (800b4a0 <lwip_netconn_do_delconn+0x1c0>)
 800b3fc:	4825      	ldr	r0, [pc, #148]	; (800b494 <lwip_netconn_do_delconn+0x1b4>)
 800b3fe:	f00d f927 	bl	8018650 <iprintf>
            UNLOCK_TCPIP_CORE();
 800b402:	4828      	ldr	r0, [pc, #160]	; (800b4a4 <lwip_netconn_do_delconn+0x1c4>)
 800b404:	f00d f86f 	bl	80184e6 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	330c      	adds	r3, #12
 800b40e:	2100      	movs	r1, #0
 800b410:	4618      	mov	r0, r3
 800b412:	f00c ffc6 	bl	80183a2 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800b416:	4823      	ldr	r0, [pc, #140]	; (800b4a4 <lwip_netconn_do_delconn+0x1c4>)
 800b418:	f00d f856 	bl	80184c8 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	785b      	ldrb	r3, [r3, #1]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d02d      	beq.n	800b482 <lwip_netconn_do_delconn+0x1a2>
 800b426:	4b19      	ldr	r3, [pc, #100]	; (800b48c <lwip_netconn_do_delconn+0x1ac>)
 800b428:	f240 429e 	movw	r2, #1182	; 0x49e
 800b42c:	491c      	ldr	r1, [pc, #112]	; (800b4a0 <lwip_netconn_do_delconn+0x1c0>)
 800b42e:	4819      	ldr	r0, [pc, #100]	; (800b494 <lwip_netconn_do_delconn+0x1b4>)
 800b430:	f00d f90e 	bl	8018650 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800b434:	e025      	b.n	800b482 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800b436:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	2200      	movs	r2, #0
 800b43e:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b446:	2b00      	cmp	r3, #0
 800b448:	d007      	beq.n	800b45a <lwip_netconn_do_delconn+0x17a>
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b450:	68fa      	ldr	r2, [r7, #12]
 800b452:	6810      	ldr	r0, [r2, #0]
 800b454:	2200      	movs	r2, #0
 800b456:	2100      	movs	r1, #0
 800b458:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b460:	2b00      	cmp	r3, #0
 800b462:	d007      	beq.n	800b474 <lwip_netconn_do_delconn+0x194>
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b46a:	68fa      	ldr	r2, [r7, #12]
 800b46c:	6810      	ldr	r0, [r2, #0]
 800b46e:	2200      	movs	r2, #0
 800b470:	2102      	movs	r1, #2
 800b472:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	330c      	adds	r3, #12
 800b47a:	4618      	mov	r0, r3
 800b47c:	f00c ffdc 	bl	8018438 <sys_sem_valid>
 800b480:	e000      	b.n	800b484 <lwip_netconn_do_delconn+0x1a4>
          return;
 800b482:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800b484:	3710      	adds	r7, #16
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}
 800b48a:	bf00      	nop
 800b48c:	0801a004 	.word	0x0801a004
 800b490:	0801a374 	.word	0x0801a374
 800b494:	0801a048 	.word	0x0801a048
 800b498:	0801a388 	.word	0x0801a388
 800b49c:	0801a3a8 	.word	0x0801a3a8
 800b4a0:	0801a3c4 	.word	0x0801a3c4
 800b4a4:	20007934 	.word	0x20007934

0800b4a8 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b084      	sub	sp, #16
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	685b      	ldr	r3, [r3, #4]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d025      	beq.n	800b50a <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	781b      	ldrb	r3, [r3, #0]
 800b4c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b4c8:	2b10      	cmp	r3, #16
 800b4ca:	d00e      	beq.n	800b4ea <lwip_netconn_do_bind+0x42>
 800b4cc:	2b20      	cmp	r3, #32
 800b4ce:	d119      	bne.n	800b504 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	6858      	ldr	r0, [r3, #4]
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	6899      	ldr	r1, [r3, #8]
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	899b      	ldrh	r3, [r3, #12]
 800b4de:	461a      	mov	r2, r3
 800b4e0:	f00a f92e 	bl	8015740 <udp_bind>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	73fb      	strb	r3, [r7, #15]
        break;
 800b4e8:	e011      	b.n	800b50e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	6858      	ldr	r0, [r3, #4]
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	6899      	ldr	r1, [r3, #8]
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	899b      	ldrh	r3, [r3, #12]
 800b4f8:	461a      	mov	r2, r3
 800b4fa:	f003 ffa1 	bl	800f440 <tcp_bind>
 800b4fe:	4603      	mov	r3, r0
 800b500:	73fb      	strb	r3, [r7, #15]
        break;
 800b502:	e004      	b.n	800b50e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800b504:	23fa      	movs	r3, #250	; 0xfa
 800b506:	73fb      	strb	r3, [r7, #15]
        break;
 800b508:	e001      	b.n	800b50e <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800b50a:	23fa      	movs	r3, #250	; 0xfa
 800b50c:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	7bfa      	ldrb	r2, [r7, #15]
 800b512:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800b514:	bf00      	nop
 800b516:	3710      	adds	r7, #16
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}

0800b51c <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b084      	sub	sp, #16
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	4618      	mov	r0, r3
 800b52e:	f7ff f871 	bl	800a614 <netconn_err>
 800b532:	4603      	mov	r3, r0
 800b534:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d134      	bne.n	800b5a8 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	685b      	ldr	r3, [r3, #4]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d02d      	beq.n	800b5a4 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	781b      	ldrb	r3, [r3, #0]
 800b54e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b552:	2b20      	cmp	r3, #32
 800b554:	d123      	bne.n	800b59e <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	689b      	ldr	r3, [r3, #8]
 800b55a:	689b      	ldr	r3, [r3, #8]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d10c      	bne.n	800b57a <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	685a      	ldr	r2, [r3, #4]
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	689b      	ldr	r3, [r3, #8]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4619      	mov	r1, r3
 800b56e:	4610      	mov	r0, r2
 800b570:	f009 fefc 	bl	801536c <udp_send>
 800b574:	4603      	mov	r3, r0
 800b576:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800b578:	e016      	b.n	800b5a8 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	6858      	ldr	r0, [r3, #4]
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	689b      	ldr	r3, [r3, #8]
 800b584:	6819      	ldr	r1, [r3, #0]
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	689b      	ldr	r3, [r3, #8]
 800b58a:	f103 0208 	add.w	r2, r3, #8
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	689b      	ldr	r3, [r3, #8]
 800b592:	899b      	ldrh	r3, [r3, #12]
 800b594:	f009 ff1e 	bl	80153d4 <udp_sendto>
 800b598:	4603      	mov	r3, r0
 800b59a:	73fb      	strb	r3, [r7, #15]
          break;
 800b59c:	e004      	b.n	800b5a8 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800b59e:	23f5      	movs	r3, #245	; 0xf5
 800b5a0:	73fb      	strb	r3, [r7, #15]
          break;
 800b5a2:	e001      	b.n	800b5a8 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800b5a4:	23f5      	movs	r3, #245	; 0xf5
 800b5a6:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	7bfa      	ldrb	r2, [r7, #15]
 800b5ac:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800b5ae:	bf00      	nop
 800b5b0:	3710      	adds	r7, #16
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}

0800b5b6 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800b5b6:	b580      	push	{r7, lr}
 800b5b8:	b086      	sub	sp, #24
 800b5ba:	af00      	add	r7, sp, #0
 800b5bc:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	685b      	ldr	r3, [r3, #4]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d022      	beq.n	800b618 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	781b      	ldrb	r3, [r3, #0]
 800b5d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b5dc:	2b10      	cmp	r3, #16
 800b5de:	d11b      	bne.n	800b618 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	689b      	ldr	r3, [r3, #8]
 800b5e4:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5ec:	d202      	bcs.n	800b5f4 <lwip_netconn_do_recv+0x3e>
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	b29b      	uxth	r3, r3
 800b5f2:	e001      	b.n	800b5f8 <lwip_netconn_do_recv+0x42>
 800b5f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b5f8:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	685b      	ldr	r3, [r3, #4]
 800b600:	89fa      	ldrh	r2, [r7, #14]
 800b602:	4611      	mov	r1, r2
 800b604:	4618      	mov	r0, r3
 800b606:	f004 f80d 	bl	800f624 <tcp_recved>
        remaining -= recved;
 800b60a:	89fb      	ldrh	r3, [r7, #14]
 800b60c:	697a      	ldr	r2, [r7, #20]
 800b60e:	1ad3      	subs	r3, r2, r3
 800b610:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d1e6      	bne.n	800b5e6 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b618:	bf00      	nop
 800b61a:	3718      	adds	r7, #24
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bd80      	pop	{r7, pc}

0800b620 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b088      	sub	sp, #32
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
 800b628:	460b      	mov	r3, r1
 800b62a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800b62c:	2300      	movs	r3, #0
 800b62e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d106      	bne.n	800b644 <lwip_netconn_do_writemore+0x24>
 800b636:	4b96      	ldr	r3, [pc, #600]	; (800b890 <lwip_netconn_do_writemore+0x270>)
 800b638:	f240 6273 	movw	r2, #1651	; 0x673
 800b63c:	4995      	ldr	r1, [pc, #596]	; (800b894 <lwip_netconn_do_writemore+0x274>)
 800b63e:	4896      	ldr	r0, [pc, #600]	; (800b898 <lwip_netconn_do_writemore+0x278>)
 800b640:	f00d f806 	bl	8018650 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	785b      	ldrb	r3, [r3, #1]
 800b648:	2b01      	cmp	r3, #1
 800b64a:	d006      	beq.n	800b65a <lwip_netconn_do_writemore+0x3a>
 800b64c:	4b90      	ldr	r3, [pc, #576]	; (800b890 <lwip_netconn_do_writemore+0x270>)
 800b64e:	f240 6274 	movw	r2, #1652	; 0x674
 800b652:	4992      	ldr	r1, [pc, #584]	; (800b89c <lwip_netconn_do_writemore+0x27c>)
 800b654:	4890      	ldr	r0, [pc, #576]	; (800b898 <lwip_netconn_do_writemore+0x278>)
 800b656:	f00c fffb 	bl	8018650 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6a1b      	ldr	r3, [r3, #32]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d106      	bne.n	800b670 <lwip_netconn_do_writemore+0x50>
 800b662:	4b8b      	ldr	r3, [pc, #556]	; (800b890 <lwip_netconn_do_writemore+0x270>)
 800b664:	f240 6275 	movw	r2, #1653	; 0x675
 800b668:	498d      	ldr	r1, [pc, #564]	; (800b8a0 <lwip_netconn_do_writemore+0x280>)
 800b66a:	488b      	ldr	r0, [pc, #556]	; (800b898 <lwip_netconn_do_writemore+0x278>)
 800b66c:	f00c fff0 	bl	8018650 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	685b      	ldr	r3, [r3, #4]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d106      	bne.n	800b686 <lwip_netconn_do_writemore+0x66>
 800b678:	4b85      	ldr	r3, [pc, #532]	; (800b890 <lwip_netconn_do_writemore+0x270>)
 800b67a:	f240 6276 	movw	r2, #1654	; 0x676
 800b67e:	4989      	ldr	r1, [pc, #548]	; (800b8a4 <lwip_netconn_do_writemore+0x284>)
 800b680:	4885      	ldr	r0, [pc, #532]	; (800b898 <lwip_netconn_do_writemore+0x278>)
 800b682:	f00c ffe5 	bl	8018650 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6a1b      	ldr	r3, [r3, #32]
 800b68a:	699a      	ldr	r2, [r3, #24]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6a1b      	ldr	r3, [r3, #32]
 800b690:	695b      	ldr	r3, [r3, #20]
 800b692:	429a      	cmp	r2, r3
 800b694:	d306      	bcc.n	800b6a4 <lwip_netconn_do_writemore+0x84>
 800b696:	4b7e      	ldr	r3, [pc, #504]	; (800b890 <lwip_netconn_do_writemore+0x270>)
 800b698:	f240 6277 	movw	r2, #1655	; 0x677
 800b69c:	4982      	ldr	r1, [pc, #520]	; (800b8a8 <lwip_netconn_do_writemore+0x288>)
 800b69e:	487e      	ldr	r0, [pc, #504]	; (800b898 <lwip_netconn_do_writemore+0x278>)
 800b6a0:	f00c ffd6 	bl	8018650 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6a1b      	ldr	r3, [r3, #32]
 800b6a8:	899b      	ldrh	r3, [r3, #12]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d106      	bne.n	800b6bc <lwip_netconn_do_writemore+0x9c>
 800b6ae:	4b78      	ldr	r3, [pc, #480]	; (800b890 <lwip_netconn_do_writemore+0x270>)
 800b6b0:	f240 6279 	movw	r2, #1657	; 0x679
 800b6b4:	497d      	ldr	r1, [pc, #500]	; (800b8ac <lwip_netconn_do_writemore+0x28c>)
 800b6b6:	4878      	ldr	r0, [pc, #480]	; (800b898 <lwip_netconn_do_writemore+0x278>)
 800b6b8:	f00c ffca 	bl	8018650 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6a1b      	ldr	r3, [r3, #32]
 800b6c0:	7f1b      	ldrb	r3, [r3, #28]
 800b6c2:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	7f1b      	ldrb	r3, [r3, #28]
 800b6c8:	f003 0302 	and.w	r3, r3, #2
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d104      	bne.n	800b6da <lwip_netconn_do_writemore+0xba>
 800b6d0:	7ebb      	ldrb	r3, [r7, #26]
 800b6d2:	f003 0304 	and.w	r3, r3, #4
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d001      	beq.n	800b6de <lwip_netconn_do_writemore+0xbe>
 800b6da:	2301      	movs	r3, #1
 800b6dc:	e000      	b.n	800b6e0 <lwip_netconn_do_writemore+0xc0>
 800b6de:	2300      	movs	r3, #0
 800b6e0:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6a1b      	ldr	r3, [r3, #32]
 800b6e6:	689b      	ldr	r3, [r3, #8]
 800b6e8:	681a      	ldr	r2, [r3, #0]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6a1b      	ldr	r3, [r3, #32]
 800b6ee:	691b      	ldr	r3, [r3, #16]
 800b6f0:	4413      	add	r3, r2
 800b6f2:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6a1b      	ldr	r3, [r3, #32]
 800b6f8:	689b      	ldr	r3, [r3, #8]
 800b6fa:	685a      	ldr	r2, [r3, #4]
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6a1b      	ldr	r3, [r3, #32]
 800b700:	691b      	ldr	r3, [r3, #16]
 800b702:	1ad3      	subs	r3, r2, r3
 800b704:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b70c:	d307      	bcc.n	800b71e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800b70e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b712:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b714:	7ebb      	ldrb	r3, [r7, #26]
 800b716:	f043 0302 	orr.w	r3, r3, #2
 800b71a:	76bb      	strb	r3, [r7, #26]
 800b71c:	e001      	b.n	800b722 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b72a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800b72c:	89fa      	ldrh	r2, [r7, #14]
 800b72e:	8bbb      	ldrh	r3, [r7, #28]
 800b730:	429a      	cmp	r2, r3
 800b732:	d216      	bcs.n	800b762 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800b734:	89fb      	ldrh	r3, [r7, #14]
 800b736:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800b738:	7e3b      	ldrb	r3, [r7, #24]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d00d      	beq.n	800b75a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800b73e:	8bbb      	ldrh	r3, [r7, #28]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d10e      	bne.n	800b762 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6a1b      	ldr	r3, [r3, #32]
 800b748:	699b      	ldr	r3, [r3, #24]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d102      	bne.n	800b754 <lwip_netconn_do_writemore+0x134>
 800b74e:	f06f 0306 	mvn.w	r3, #6
 800b752:	e000      	b.n	800b756 <lwip_netconn_do_writemore+0x136>
 800b754:	2300      	movs	r3, #0
 800b756:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800b758:	e07d      	b.n	800b856 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800b75a:	7ebb      	ldrb	r3, [r7, #26]
 800b75c:	f043 0302 	orr.w	r3, r3, #2
 800b760:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6a1b      	ldr	r3, [r3, #32]
 800b766:	691a      	ldr	r2, [r3, #16]
 800b768:	8bbb      	ldrh	r3, [r7, #28]
 800b76a:	441a      	add	r2, r3
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6a1b      	ldr	r3, [r3, #32]
 800b770:	689b      	ldr	r3, [r3, #8]
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	429a      	cmp	r2, r3
 800b776:	d906      	bls.n	800b786 <lwip_netconn_do_writemore+0x166>
 800b778:	4b45      	ldr	r3, [pc, #276]	; (800b890 <lwip_netconn_do_writemore+0x270>)
 800b77a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800b77e:	494c      	ldr	r1, [pc, #304]	; (800b8b0 <lwip_netconn_do_writemore+0x290>)
 800b780:	4845      	ldr	r0, [pc, #276]	; (800b898 <lwip_netconn_do_writemore+0x278>)
 800b782:	f00c ff65 	bl	8018650 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b786:	8bbb      	ldrh	r3, [r7, #28]
 800b788:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b78c:	4293      	cmp	r3, r2
 800b78e:	d103      	bne.n	800b798 <lwip_netconn_do_writemore+0x178>
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b796:	d209      	bcs.n	800b7ac <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b79c:	8bba      	ldrh	r2, [r7, #28]
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	d10b      	bne.n	800b7ba <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6a1b      	ldr	r3, [r3, #32]
 800b7a6:	899b      	ldrh	r3, [r3, #12]
 800b7a8:	2b01      	cmp	r3, #1
 800b7aa:	d906      	bls.n	800b7ba <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b7b0:	7ebb      	ldrb	r3, [r7, #26]
 800b7b2:	f043 0302 	orr.w	r3, r3, #2
 800b7b6:	76bb      	strb	r3, [r7, #26]
 800b7b8:	e001      	b.n	800b7be <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6858      	ldr	r0, [r3, #4]
 800b7c2:	7ebb      	ldrb	r3, [r7, #26]
 800b7c4:	8bba      	ldrh	r2, [r7, #28]
 800b7c6:	6979      	ldr	r1, [r7, #20]
 800b7c8:	f007 fd34 	bl	8013234 <tcp_write>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800b7d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d12c      	bne.n	800b832 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6a1b      	ldr	r3, [r3, #32]
 800b7dc:	6999      	ldr	r1, [r3, #24]
 800b7de:	8bba      	ldrh	r2, [r7, #28]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6a1b      	ldr	r3, [r3, #32]
 800b7e4:	440a      	add	r2, r1
 800b7e6:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6a1b      	ldr	r3, [r3, #32]
 800b7ec:	6919      	ldr	r1, [r3, #16]
 800b7ee:	8bba      	ldrh	r2, [r7, #28]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6a1b      	ldr	r3, [r3, #32]
 800b7f4:	440a      	add	r2, r1
 800b7f6:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6a1b      	ldr	r3, [r3, #32]
 800b7fc:	691a      	ldr	r2, [r3, #16]
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6a1b      	ldr	r3, [r3, #32]
 800b802:	689b      	ldr	r3, [r3, #8]
 800b804:	685b      	ldr	r3, [r3, #4]
 800b806:	429a      	cmp	r2, r3
 800b808:	d113      	bne.n	800b832 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6a1b      	ldr	r3, [r3, #32]
 800b80e:	899a      	ldrh	r2, [r3, #12]
 800b810:	3a01      	subs	r2, #1
 800b812:	b292      	uxth	r2, r2
 800b814:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6a1b      	ldr	r3, [r3, #32]
 800b81a:	899b      	ldrh	r3, [r3, #12]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d008      	beq.n	800b832 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6a1b      	ldr	r3, [r3, #32]
 800b824:	689a      	ldr	r2, [r3, #8]
 800b826:	3208      	adds	r2, #8
 800b828:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6a1b      	ldr	r3, [r3, #32]
 800b82e:	2200      	movs	r2, #0
 800b830:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800b832:	7e7b      	ldrb	r3, [r7, #25]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d004      	beq.n	800b842 <lwip_netconn_do_writemore+0x222>
 800b838:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	f43f af50 	beq.w	800b6e2 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800b842:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d004      	beq.n	800b854 <lwip_netconn_do_writemore+0x234>
 800b84a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b84e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b852:	d146      	bne.n	800b8e2 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800b854:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800b856:	7e3b      	ldrb	r3, [r7, #24]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d02b      	beq.n	800b8b4 <lwip_netconn_do_writemore+0x294>
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6a1b      	ldr	r3, [r3, #32]
 800b860:	699a      	ldr	r2, [r3, #24]
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6a1b      	ldr	r3, [r3, #32]
 800b866:	695b      	ldr	r3, [r3, #20]
 800b868:	429a      	cmp	r2, r3
 800b86a:	d223      	bcs.n	800b8b4 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b870:	2b00      	cmp	r3, #0
 800b872:	d005      	beq.n	800b880 <lwip_netconn_do_writemore+0x260>
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b878:	2200      	movs	r2, #0
 800b87a:	2103      	movs	r1, #3
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	7f1b      	ldrb	r3, [r3, #28]
 800b884:	f043 0310 	orr.w	r3, r3, #16
 800b888:	b2da      	uxtb	r2, r3
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	771a      	strb	r2, [r3, #28]
 800b88e:	e028      	b.n	800b8e2 <lwip_netconn_do_writemore+0x2c2>
 800b890:	0801a004 	.word	0x0801a004
 800b894:	0801a15c 	.word	0x0801a15c
 800b898:	0801a048 	.word	0x0801a048
 800b89c:	0801a464 	.word	0x0801a464
 800b8a0:	0801a16c 	.word	0x0801a16c
 800b8a4:	0801a484 	.word	0x0801a484
 800b8a8:	0801a49c 	.word	0x0801a49c
 800b8ac:	0801a4dc 	.word	0x0801a4dc
 800b8b0:	0801a504 	.word	0x0801a504
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	685b      	ldr	r3, [r3, #4]
 800b8b8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b8bc:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800b8c0:	d305      	bcc.n	800b8ce <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	685b      	ldr	r3, [r3, #4]
 800b8c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b8ca:	2b04      	cmp	r3, #4
 800b8cc:	d909      	bls.n	800b8e2 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d005      	beq.n	800b8e2 <lwip_netconn_do_writemore+0x2c2>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8da:	2200      	movs	r2, #0
 800b8dc:	2103      	movs	r1, #3
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800b8e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d11d      	bne.n	800b926 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6a1b      	ldr	r3, [r3, #32]
 800b8ee:	699a      	ldr	r2, [r3, #24]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6a1b      	ldr	r3, [r3, #32]
 800b8f4:	695b      	ldr	r3, [r3, #20]
 800b8f6:	429a      	cmp	r2, r3
 800b8f8:	d002      	beq.n	800b900 <lwip_netconn_do_writemore+0x2e0>
 800b8fa:	7e3b      	ldrb	r3, [r7, #24]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d001      	beq.n	800b904 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800b900:	2301      	movs	r3, #1
 800b902:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	685b      	ldr	r3, [r3, #4]
 800b908:	4618      	mov	r0, r3
 800b90a:	f008 fa7d 	bl	8013e08 <tcp_output>
 800b90e:	4603      	mov	r3, r0
 800b910:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800b912:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b916:	f113 0f04 	cmn.w	r3, #4
 800b91a:	d12c      	bne.n	800b976 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b91c:	7b3b      	ldrb	r3, [r7, #12]
 800b91e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b920:	2301      	movs	r3, #1
 800b922:	76fb      	strb	r3, [r7, #27]
 800b924:	e027      	b.n	800b976 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800b926:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b92a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b92e:	d120      	bne.n	800b972 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	685b      	ldr	r3, [r3, #4]
 800b934:	4618      	mov	r0, r3
 800b936:	f008 fa67 	bl	8013e08 <tcp_output>
 800b93a:	4603      	mov	r3, r0
 800b93c:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800b93e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800b942:	f113 0f04 	cmn.w	r3, #4
 800b946:	d104      	bne.n	800b952 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b948:	7b7b      	ldrb	r3, [r7, #13]
 800b94a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b94c:	2301      	movs	r3, #1
 800b94e:	76fb      	strb	r3, [r7, #27]
 800b950:	e011      	b.n	800b976 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800b952:	7e3b      	ldrb	r3, [r7, #24]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d00e      	beq.n	800b976 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6a1b      	ldr	r3, [r3, #32]
 800b95c:	699b      	ldr	r3, [r3, #24]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d102      	bne.n	800b968 <lwip_netconn_do_writemore+0x348>
 800b962:	f06f 0306 	mvn.w	r3, #6
 800b966:	e000      	b.n	800b96a <lwip_netconn_do_writemore+0x34a>
 800b968:	2300      	movs	r3, #0
 800b96a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b96c:	2301      	movs	r3, #1
 800b96e:	76fb      	strb	r3, [r7, #27]
 800b970:	e001      	b.n	800b976 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800b972:	2301      	movs	r3, #1
 800b974:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800b976:	7efb      	ldrb	r3, [r7, #27]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d015      	beq.n	800b9a8 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6a1b      	ldr	r3, [r3, #32]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	330c      	adds	r3, #12
 800b984:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6a1b      	ldr	r3, [r3, #32]
 800b98a:	7ffa      	ldrb	r2, [r7, #31]
 800b98c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2200      	movs	r2, #0
 800b992:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2200      	movs	r2, #0
 800b998:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b99a:	78fb      	ldrb	r3, [r7, #3]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d006      	beq.n	800b9ae <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800b9a0:	68b8      	ldr	r0, [r7, #8]
 800b9a2:	f00c fd2f 	bl	8018404 <sys_sem_signal>
 800b9a6:	e002      	b.n	800b9ae <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800b9a8:	f04f 33ff 	mov.w	r3, #4294967295
 800b9ac:	e000      	b.n	800b9b0 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800b9ae:	2300      	movs	r3, #0
}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	3720      	adds	r7, #32
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}

0800b9b8 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b084      	sub	sp, #16
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f7fe fe23 	bl	800a614 <netconn_err>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b9d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d166      	bne.n	800baa8 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	781b      	ldrb	r3, [r3, #0]
 800b9e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b9e4:	2b10      	cmp	r3, #16
 800b9e6:	d15d      	bne.n	800baa4 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	785b      	ldrb	r3, [r3, #1]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d002      	beq.n	800b9f8 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800b9f2:	23fb      	movs	r3, #251	; 0xfb
 800b9f4:	73fb      	strb	r3, [r7, #15]
 800b9f6:	e057      	b.n	800baa8 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	685b      	ldr	r3, [r3, #4]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d04d      	beq.n	800ba9e <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	2201      	movs	r2, #1
 800ba08:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	6a1b      	ldr	r3, [r3, #32]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d006      	beq.n	800ba22 <lwip_netconn_do_write+0x6a>
 800ba14:	4b28      	ldr	r3, [pc, #160]	; (800bab8 <lwip_netconn_do_write+0x100>)
 800ba16:	f240 7223 	movw	r2, #1827	; 0x723
 800ba1a:	4928      	ldr	r1, [pc, #160]	; (800babc <lwip_netconn_do_write+0x104>)
 800ba1c:	4828      	ldr	r0, [pc, #160]	; (800bac0 <lwip_netconn_do_write+0x108>)
 800ba1e:	f00c fe17 	bl	8018650 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	695b      	ldr	r3, [r3, #20]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d106      	bne.n	800ba38 <lwip_netconn_do_write+0x80>
 800ba2a:	4b23      	ldr	r3, [pc, #140]	; (800bab8 <lwip_netconn_do_write+0x100>)
 800ba2c:	f240 7224 	movw	r2, #1828	; 0x724
 800ba30:	4924      	ldr	r1, [pc, #144]	; (800bac4 <lwip_netconn_do_write+0x10c>)
 800ba32:	4823      	ldr	r0, [pc, #140]	; (800bac0 <lwip_netconn_do_write+0x108>)
 800ba34:	f00c fe0c 	bl	8018650 <iprintf>
        msg->conn->current_msg = msg;
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	68ba      	ldr	r2, [r7, #8]
 800ba3e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	2100      	movs	r1, #0
 800ba46:	4618      	mov	r0, r3
 800ba48:	f7ff fdea 	bl	800b620 <lwip_netconn_do_writemore>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d02e      	beq.n	800bab0 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	785b      	ldrb	r3, [r3, #1]
 800ba58:	2b01      	cmp	r3, #1
 800ba5a:	d006      	beq.n	800ba6a <lwip_netconn_do_write+0xb2>
 800ba5c:	4b16      	ldr	r3, [pc, #88]	; (800bab8 <lwip_netconn_do_write+0x100>)
 800ba5e:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800ba62:	4919      	ldr	r1, [pc, #100]	; (800bac8 <lwip_netconn_do_write+0x110>)
 800ba64:	4816      	ldr	r0, [pc, #88]	; (800bac0 <lwip_netconn_do_write+0x108>)
 800ba66:	f00c fdf3 	bl	8018650 <iprintf>
          UNLOCK_TCPIP_CORE();
 800ba6a:	4818      	ldr	r0, [pc, #96]	; (800bacc <lwip_netconn_do_write+0x114>)
 800ba6c:	f00c fd3b 	bl	80184e6 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	330c      	adds	r3, #12
 800ba76:	2100      	movs	r1, #0
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f00c fc92 	bl	80183a2 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800ba7e:	4813      	ldr	r0, [pc, #76]	; (800bacc <lwip_netconn_do_write+0x114>)
 800ba80:	f00c fd22 	bl	80184c8 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	785b      	ldrb	r3, [r3, #1]
 800ba8a:	2b01      	cmp	r3, #1
 800ba8c:	d110      	bne.n	800bab0 <lwip_netconn_do_write+0xf8>
 800ba8e:	4b0a      	ldr	r3, [pc, #40]	; (800bab8 <lwip_netconn_do_write+0x100>)
 800ba90:	f240 722c 	movw	r2, #1836	; 0x72c
 800ba94:	490c      	ldr	r1, [pc, #48]	; (800bac8 <lwip_netconn_do_write+0x110>)
 800ba96:	480a      	ldr	r0, [pc, #40]	; (800bac0 <lwip_netconn_do_write+0x108>)
 800ba98:	f00c fdda 	bl	8018650 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800ba9c:	e008      	b.n	800bab0 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800ba9e:	23f5      	movs	r3, #245	; 0xf5
 800baa0:	73fb      	strb	r3, [r7, #15]
 800baa2:	e001      	b.n	800baa8 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800baa4:	23fa      	movs	r3, #250	; 0xfa
 800baa6:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	7bfa      	ldrb	r2, [r7, #15]
 800baac:	711a      	strb	r2, [r3, #4]
 800baae:	e000      	b.n	800bab2 <lwip_netconn_do_write+0xfa>
        return;
 800bab0:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800bab2:	3710      	adds	r7, #16
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}
 800bab8:	0801a004 	.word	0x0801a004
 800babc:	0801a3a8 	.word	0x0801a3a8
 800bac0:	0801a048 	.word	0x0801a048
 800bac4:	0801a530 	.word	0x0801a530
 800bac8:	0801a3c4 	.word	0x0801a3c4
 800bacc:	20007934 	.word	0x20007934

0800bad0 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b084      	sub	sp, #16
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	685b      	ldr	r3, [r3, #4]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d06b      	beq.n	800bbbe <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	7c1b      	ldrb	r3, [r3, #16]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d007      	beq.n	800bafe <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	685a      	ldr	r2, [r3, #4]
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	689b      	ldr	r3, [r3, #8]
 800baf8:	6812      	ldr	r2, [r2, #0]
 800bafa:	601a      	str	r2, [r3, #0]
 800bafc:	e006      	b.n	800bb0c <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	685a      	ldr	r2, [r3, #4]
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	689b      	ldr	r3, [r3, #8]
 800bb08:	6852      	ldr	r2, [r2, #4]
 800bb0a:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	781b      	ldrb	r3, [r3, #0]
 800bb18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bb1c:	2b10      	cmp	r3, #16
 800bb1e:	d021      	beq.n	800bb64 <lwip_netconn_do_getaddr+0x94>
 800bb20:	2b20      	cmp	r3, #32
 800bb22:	d144      	bne.n	800bbae <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	7c1b      	ldrb	r3, [r3, #16]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d007      	beq.n	800bb3c <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	685a      	ldr	r2, [r3, #4]
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	68db      	ldr	r3, [r3, #12]
 800bb36:	8a52      	ldrh	r2, [r2, #18]
 800bb38:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 800bb3a:	e044      	b.n	800bbc6 <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	685b      	ldr	r3, [r3, #4]
 800bb42:	7c1b      	ldrb	r3, [r3, #16]
 800bb44:	f003 0304 	and.w	r3, r3, #4
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d103      	bne.n	800bb54 <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	22f5      	movs	r2, #245	; 0xf5
 800bb50:	711a      	strb	r2, [r3, #4]
        break;
 800bb52:	e038      	b.n	800bbc6 <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	685a      	ldr	r2, [r3, #4]
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	68db      	ldr	r3, [r3, #12]
 800bb5e:	8a92      	ldrh	r2, [r2, #20]
 800bb60:	801a      	strh	r2, [r3, #0]
        break;
 800bb62:	e030      	b.n	800bbc6 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	7c1b      	ldrb	r3, [r3, #16]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d10f      	bne.n	800bb8c <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d005      	beq.n	800bb84 <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	685b      	ldr	r3, [r3, #4]
 800bb7e:	7d1b      	ldrb	r3, [r3, #20]
 800bb80:	2b01      	cmp	r3, #1
 800bb82:	d103      	bne.n	800bb8c <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	22f5      	movs	r2, #245	; 0xf5
 800bb88:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 800bb8a:	e01c      	b.n	800bbc6 <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	7c1b      	ldrb	r3, [r3, #16]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d004      	beq.n	800bb9e <lwip_netconn_do_getaddr+0xce>
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	685b      	ldr	r3, [r3, #4]
 800bb9a:	8adb      	ldrh	r3, [r3, #22]
 800bb9c:	e003      	b.n	800bba6 <lwip_netconn_do_getaddr+0xd6>
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	8b1b      	ldrh	r3, [r3, #24]
 800bba6:	68fa      	ldr	r2, [r7, #12]
 800bba8:	68d2      	ldr	r2, [r2, #12]
 800bbaa:	8013      	strh	r3, [r2, #0]
        break;
 800bbac:	e00b      	b.n	800bbc6 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 800bbae:	4b08      	ldr	r3, [pc, #32]	; (800bbd0 <lwip_netconn_do_getaddr+0x100>)
 800bbb0:	f240 727d 	movw	r2, #1917	; 0x77d
 800bbb4:	4907      	ldr	r1, [pc, #28]	; (800bbd4 <lwip_netconn_do_getaddr+0x104>)
 800bbb6:	4808      	ldr	r0, [pc, #32]	; (800bbd8 <lwip_netconn_do_getaddr+0x108>)
 800bbb8:	f00c fd4a 	bl	8018650 <iprintf>
        break;
 800bbbc:	e003      	b.n	800bbc6 <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	22f5      	movs	r2, #245	; 0xf5
 800bbc2:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 800bbc4:	bf00      	nop
 800bbc6:	bf00      	nop
 800bbc8:	3710      	adds	r7, #16
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}
 800bbce:	bf00      	nop
 800bbd0:	0801a004 	.word	0x0801a004
 800bbd4:	0801a544 	.word	0x0801a544
 800bbd8:	0801a048 	.word	0x0801a048

0800bbdc <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b084      	sub	sp, #16
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	785b      	ldrb	r3, [r3, #1]
 800bbee:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	685b      	ldr	r3, [r3, #4]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d069      	beq.n	800bcce <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	781b      	ldrb	r3, [r3, #0]
 800bc00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800bc04:	2b10      	cmp	r3, #16
 800bc06:	d162      	bne.n	800bcce <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800bc0c:	2b03      	cmp	r3, #3
 800bc0e:	d002      	beq.n	800bc16 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800bc10:	7afb      	ldrb	r3, [r7, #11]
 800bc12:	2b02      	cmp	r3, #2
 800bc14:	d05b      	beq.n	800bcce <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800bc16:	7afb      	ldrb	r3, [r7, #11]
 800bc18:	2b03      	cmp	r3, #3
 800bc1a:	d103      	bne.n	800bc24 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	22f5      	movs	r2, #245	; 0xf5
 800bc20:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800bc22:	e059      	b.n	800bcd8 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800bc24:	7afb      	ldrb	r3, [r7, #11]
 800bc26:	2b01      	cmp	r3, #1
 800bc28:	d103      	bne.n	800bc32 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	22fb      	movs	r2, #251	; 0xfb
 800bc2e:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800bc30:	e052      	b.n	800bcd8 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	7a1b      	ldrb	r3, [r3, #8]
 800bc36:	f003 0301 	and.w	r3, r3, #1
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d004      	beq.n	800bc48 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	4618      	mov	r0, r3
 800bc44:	f7ff f964 	bl	800af10 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	6a1b      	ldr	r3, [r3, #32]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d006      	beq.n	800bc60 <lwip_netconn_do_close+0x84>
 800bc52:	4b23      	ldr	r3, [pc, #140]	; (800bce0 <lwip_netconn_do_close+0x104>)
 800bc54:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800bc58:	4922      	ldr	r1, [pc, #136]	; (800bce4 <lwip_netconn_do_close+0x108>)
 800bc5a:	4823      	ldr	r0, [pc, #140]	; (800bce8 <lwip_netconn_do_close+0x10c>)
 800bc5c:	f00c fcf8 	bl	8018650 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	2204      	movs	r2, #4
 800bc66:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	68fa      	ldr	r2, [r7, #12]
 800bc6e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	2100      	movs	r1, #0
 800bc76:	4618      	mov	r0, r3
 800bc78:	f7ff f9c8 	bl	800b00c <lwip_netconn_do_close_internal>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d029      	beq.n	800bcd6 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	785b      	ldrb	r3, [r3, #1]
 800bc88:	2b04      	cmp	r3, #4
 800bc8a:	d006      	beq.n	800bc9a <lwip_netconn_do_close+0xbe>
 800bc8c:	4b14      	ldr	r3, [pc, #80]	; (800bce0 <lwip_netconn_do_close+0x104>)
 800bc8e:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800bc92:	4916      	ldr	r1, [pc, #88]	; (800bcec <lwip_netconn_do_close+0x110>)
 800bc94:	4814      	ldr	r0, [pc, #80]	; (800bce8 <lwip_netconn_do_close+0x10c>)
 800bc96:	f00c fcdb 	bl	8018650 <iprintf>
        UNLOCK_TCPIP_CORE();
 800bc9a:	4815      	ldr	r0, [pc, #84]	; (800bcf0 <lwip_netconn_do_close+0x114>)
 800bc9c:	f00c fc23 	bl	80184e6 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	330c      	adds	r3, #12
 800bca6:	2100      	movs	r1, #0
 800bca8:	4618      	mov	r0, r3
 800bcaa:	f00c fb7a 	bl	80183a2 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800bcae:	4810      	ldr	r0, [pc, #64]	; (800bcf0 <lwip_netconn_do_close+0x114>)
 800bcb0:	f00c fc0a 	bl	80184c8 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	785b      	ldrb	r3, [r3, #1]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d00b      	beq.n	800bcd6 <lwip_netconn_do_close+0xfa>
 800bcbe:	4b08      	ldr	r3, [pc, #32]	; (800bce0 <lwip_netconn_do_close+0x104>)
 800bcc0:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800bcc4:	4909      	ldr	r1, [pc, #36]	; (800bcec <lwip_netconn_do_close+0x110>)
 800bcc6:	4808      	ldr	r0, [pc, #32]	; (800bce8 <lwip_netconn_do_close+0x10c>)
 800bcc8:	f00c fcc2 	bl	8018650 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800bccc:	e003      	b.n	800bcd6 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	22f5      	movs	r2, #245	; 0xf5
 800bcd2:	711a      	strb	r2, [r3, #4]
 800bcd4:	e000      	b.n	800bcd8 <lwip_netconn_do_close+0xfc>
      return;
 800bcd6:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800bcd8:	3710      	adds	r7, #16
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}
 800bcde:	bf00      	nop
 800bce0:	0801a004 	.word	0x0801a004
 800bce4:	0801a3a8 	.word	0x0801a3a8
 800bce8:	0801a048 	.word	0x0801a048
 800bcec:	0801a3c4 	.word	0x0801a3c4
 800bcf0:	20007934 	.word	0x20007934

0800bcf4 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b083      	sub	sp, #12
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800bcfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	dc04      	bgt.n	800bd10 <err_to_errno+0x1c>
 800bd06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd0a:	f113 0f10 	cmn.w	r3, #16
 800bd0e:	da01      	bge.n	800bd14 <err_to_errno+0x20>
    return EIO;
 800bd10:	2305      	movs	r3, #5
 800bd12:	e005      	b.n	800bd20 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800bd14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd18:	425b      	negs	r3, r3
 800bd1a:	4a04      	ldr	r2, [pc, #16]	; (800bd2c <err_to_errno+0x38>)
 800bd1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	370c      	adds	r7, #12
 800bd24:	46bd      	mov	sp, r7
 800bd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2a:	4770      	bx	lr
 800bd2c:	0801d5d8 	.word	0x0801d5d8

0800bd30 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b082      	sub	sp, #8
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d013      	beq.n	800bd66 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d00b      	beq.n	800bd5e <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f002 fd6c 	bl	800e828 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2200      	movs	r2, #0
 800bd54:	605a      	str	r2, [r3, #4]
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	685a      	ldr	r2, [r3, #4]
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800bd5e:	6879      	ldr	r1, [r7, #4]
 800bd60:	2006      	movs	r0, #6
 800bd62:	f001 fe8b 	bl	800da7c <memp_free>
  }
}
 800bd66:	bf00      	nop
 800bd68:	3708      	adds	r7, #8
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
	...

0800bd70 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b082      	sub	sp, #8
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d106      	bne.n	800bd8c <netbuf_free+0x1c>
 800bd7e:	4b0d      	ldr	r3, [pc, #52]	; (800bdb4 <netbuf_free+0x44>)
 800bd80:	2281      	movs	r2, #129	; 0x81
 800bd82:	490d      	ldr	r1, [pc, #52]	; (800bdb8 <netbuf_free+0x48>)
 800bd84:	480d      	ldr	r0, [pc, #52]	; (800bdbc <netbuf_free+0x4c>)
 800bd86:	f00c fc63 	bl	8018650 <iprintf>
 800bd8a:	e00f      	b.n	800bdac <netbuf_free+0x3c>
  if (buf->p != NULL) {
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d004      	beq.n	800bd9e <netbuf_free+0x2e>
    pbuf_free(buf->p);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f002 fd45 	bl	800e828 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2200      	movs	r2, #0
 800bda2:	605a      	str	r2, [r3, #4]
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	685a      	ldr	r2, [r3, #4]
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 800bdac:	3708      	adds	r7, #8
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
 800bdb2:	bf00      	nop
 800bdb4:	0801a55c 	.word	0x0801a55c
 800bdb8:	0801a5f8 	.word	0x0801a5f8
 800bdbc:	0801a5ac 	.word	0x0801a5ac

0800bdc0 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b084      	sub	sp, #16
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	60f8      	str	r0, [r7, #12]
 800bdc8:	60b9      	str	r1, [r7, #8]
 800bdca:	4613      	mov	r3, r2
 800bdcc:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d108      	bne.n	800bde6 <netbuf_ref+0x26>
 800bdd4:	4b1c      	ldr	r3, [pc, #112]	; (800be48 <netbuf_ref+0x88>)
 800bdd6:	2299      	movs	r2, #153	; 0x99
 800bdd8:	491c      	ldr	r1, [pc, #112]	; (800be4c <netbuf_ref+0x8c>)
 800bdda:	481d      	ldr	r0, [pc, #116]	; (800be50 <netbuf_ref+0x90>)
 800bddc:	f00c fc38 	bl	8018650 <iprintf>
 800bde0:	f06f 030f 	mvn.w	r3, #15
 800bde4:	e02b      	b.n	800be3e <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d004      	beq.n	800bdf8 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f002 fd18 	bl	800e828 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800bdf8:	2241      	movs	r2, #65	; 0x41
 800bdfa:	2100      	movs	r1, #0
 800bdfc:	2036      	movs	r0, #54	; 0x36
 800bdfe:	f002 f9fd 	bl	800e1fc <pbuf_alloc>
 800be02:	4602      	mov	r2, r0
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d105      	bne.n	800be1c <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	2200      	movs	r2, #0
 800be14:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800be16:	f04f 33ff 	mov.w	r3, #4294967295
 800be1a:	e010      	b.n	800be3e <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	68ba      	ldr	r2, [r7, #8]
 800be22:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	88fa      	ldrh	r2, [r7, #6]
 800be2a:	811a      	strh	r2, [r3, #8]
 800be2c:	68fa      	ldr	r2, [r7, #12]
 800be2e:	6812      	ldr	r2, [r2, #0]
 800be30:	891b      	ldrh	r3, [r3, #8]
 800be32:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	681a      	ldr	r2, [r3, #0]
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800be3c:	2300      	movs	r3, #0
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3710      	adds	r7, #16
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}
 800be46:	bf00      	nop
 800be48:	0801a55c 	.word	0x0801a55c
 800be4c:	0801a614 	.word	0x0801a614
 800be50:	0801a5ac 	.word	0x0801a5ac

0800be54 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800be54:	b480      	push	{r7}
 800be56:	b085      	sub	sp, #20
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2b00      	cmp	r3, #0
 800be64:	db02      	blt.n	800be6c <tryget_socket_unconn_nouse+0x18>
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	2b03      	cmp	r3, #3
 800be6a:	dd01      	ble.n	800be70 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800be6c:	2300      	movs	r3, #0
 800be6e:	e003      	b.n	800be78 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	011b      	lsls	r3, r3, #4
 800be74:	4a03      	ldr	r2, [pc, #12]	; (800be84 <tryget_socket_unconn_nouse+0x30>)
 800be76:	4413      	add	r3, r2
}
 800be78:	4618      	mov	r0, r3
 800be7a:	3714      	adds	r7, #20
 800be7c:	46bd      	mov	sp, r7
 800be7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be82:	4770      	bx	lr
 800be84:	200078e4 	.word	0x200078e4

0800be88 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b084      	sub	sp, #16
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f7ff ffdf 	bl	800be54 <tryget_socket_unconn_nouse>
 800be96:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800be98:	68fb      	ldr	r3, [r7, #12]
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3710      	adds	r7, #16
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}

0800bea2 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800bea2:	b580      	push	{r7, lr}
 800bea4:	b084      	sub	sp, #16
 800bea6:	af00      	add	r7, sp, #0
 800bea8:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f7ff ffec 	bl	800be88 <tryget_socket_unconn>
 800beb0:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d005      	beq.n	800bec4 <tryget_socket+0x22>
    if (sock->conn) {
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d001      	beq.n	800bec4 <tryget_socket+0x22>
      return sock;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	e000      	b.n	800bec6 <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800bec4:	2300      	movs	r3, #0
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	3710      	adds	r7, #16
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}
	...

0800bed0 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b084      	sub	sp, #16
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f7ff ffe2 	bl	800bea2 <tryget_socket>
 800bede:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d104      	bne.n	800bef0 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800bee6:	4b05      	ldr	r3, [pc, #20]	; (800befc <get_socket+0x2c>)
 800bee8:	2209      	movs	r2, #9
 800beea:	601a      	str	r2, [r3, #0]
    return NULL;
 800beec:	2300      	movs	r3, #0
 800beee:	e000      	b.n	800bef2 <get_socket+0x22>
  }
  return sock;
 800bef0:	68fb      	ldr	r3, [r7, #12]
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3710      	adds	r7, #16
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}
 800befa:	bf00      	nop
 800befc:	2000d3a8 	.word	0x2000d3a8

0800bf00 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b084      	sub	sp, #16
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
 800bf08:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	60fb      	str	r3, [r7, #12]
 800bf0e:	e052      	b.n	800bfb6 <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800bf10:	f00c fb1c 	bl	801854c <sys_arch_protect>
 800bf14:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800bf16:	4a2c      	ldr	r2, [pc, #176]	; (800bfc8 <alloc_socket+0xc8>)
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	011b      	lsls	r3, r3, #4
 800bf1c:	4413      	add	r3, r2
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d142      	bne.n	800bfaa <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800bf24:	4a28      	ldr	r2, [pc, #160]	; (800bfc8 <alloc_socket+0xc8>)
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	011b      	lsls	r3, r3, #4
 800bf2a:	4413      	add	r3, r2
 800bf2c:	687a      	ldr	r2, [r7, #4]
 800bf2e:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800bf30:	68b8      	ldr	r0, [r7, #8]
 800bf32:	f00c fb19 	bl	8018568 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800bf36:	4a24      	ldr	r2, [pc, #144]	; (800bfc8 <alloc_socket+0xc8>)
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	011b      	lsls	r3, r3, #4
 800bf3c:	4413      	add	r3, r2
 800bf3e:	3304      	adds	r3, #4
 800bf40:	2200      	movs	r2, #0
 800bf42:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800bf44:	4a20      	ldr	r2, [pc, #128]	; (800bfc8 <alloc_socket+0xc8>)
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	011b      	lsls	r3, r3, #4
 800bf4a:	4413      	add	r3, r2
 800bf4c:	330e      	adds	r3, #14
 800bf4e:	781b      	ldrb	r3, [r3, #0]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d006      	beq.n	800bf62 <alloc_socket+0x62>
 800bf54:	4b1d      	ldr	r3, [pc, #116]	; (800bfcc <alloc_socket+0xcc>)
 800bf56:	f240 220e 	movw	r2, #526	; 0x20e
 800bf5a:	491d      	ldr	r1, [pc, #116]	; (800bfd0 <alloc_socket+0xd0>)
 800bf5c:	481d      	ldr	r0, [pc, #116]	; (800bfd4 <alloc_socket+0xd4>)
 800bf5e:	f00c fb77 	bl	8018650 <iprintf>
      sockets[i].rcvevent   = 0;
 800bf62:	4a19      	ldr	r2, [pc, #100]	; (800bfc8 <alloc_socket+0xc8>)
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	011b      	lsls	r3, r3, #4
 800bf68:	4413      	add	r3, r2
 800bf6a:	3308      	adds	r3, #8
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	781b      	ldrb	r3, [r3, #0]
 800bf74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf78:	2b10      	cmp	r3, #16
 800bf7a:	d102      	bne.n	800bf82 <alloc_socket+0x82>
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d001      	beq.n	800bf86 <alloc_socket+0x86>
 800bf82:	2301      	movs	r3, #1
 800bf84:	e000      	b.n	800bf88 <alloc_socket+0x88>
 800bf86:	2300      	movs	r3, #0
 800bf88:	b299      	uxth	r1, r3
 800bf8a:	4a0f      	ldr	r2, [pc, #60]	; (800bfc8 <alloc_socket+0xc8>)
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	011b      	lsls	r3, r3, #4
 800bf90:	4413      	add	r3, r2
 800bf92:	330a      	adds	r3, #10
 800bf94:	460a      	mov	r2, r1
 800bf96:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800bf98:	4a0b      	ldr	r2, [pc, #44]	; (800bfc8 <alloc_socket+0xc8>)
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	011b      	lsls	r3, r3, #4
 800bf9e:	4413      	add	r3, r2
 800bfa0:	330c      	adds	r3, #12
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	e00a      	b.n	800bfc0 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800bfaa:	68b8      	ldr	r0, [r7, #8]
 800bfac:	f00c fadc 	bl	8018568 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	60fb      	str	r3, [r7, #12]
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	2b03      	cmp	r3, #3
 800bfba:	dda9      	ble.n	800bf10 <alloc_socket+0x10>
  }
  return -1;
 800bfbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3710      	adds	r7, #16
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}
 800bfc8:	200078e4 	.word	0x200078e4
 800bfcc:	0801a6f4 	.word	0x0801a6f4
 800bfd0:	0801a728 	.word	0x0801a728
 800bfd4:	0801a748 	.word	0x0801a748

0800bfd8 <lwip_bind>:
  return newsock;
}

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b08a      	sub	sp, #40	; 0x28
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	60f8      	str	r0, [r7, #12]
 800bfe0:	60b9      	str	r1, [r7, #8]
 800bfe2:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 800bfe4:	68f8      	ldr	r0, [r7, #12]
 800bfe6:	f7ff ff73 	bl	800bed0 <get_socket>
 800bfea:	6278      	str	r0, [r7, #36]	; 0x24
  if (!sock) {
 800bfec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d102      	bne.n	800bff8 <lwip_bind+0x20>
    return -1;
 800bff2:	f04f 33ff 	mov.w	r3, #4294967295
 800bff6:	e051      	b.n	800c09c <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2b10      	cmp	r3, #16
 800bffc:	d108      	bne.n	800c010 <lwip_bind+0x38>
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	785b      	ldrb	r3, [r3, #1]
 800c002:	2b02      	cmp	r3, #2
 800c004:	d104      	bne.n	800c010 <lwip_bind+0x38>
 800c006:	68bb      	ldr	r3, [r7, #8]
 800c008:	f003 0303 	and.w	r3, r3, #3
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d014      	beq.n	800c03a <lwip_bind+0x62>
 800c010:	4b24      	ldr	r3, [pc, #144]	; (800c0a4 <lwip_bind+0xcc>)
 800c012:	f240 22e2 	movw	r2, #738	; 0x2e2
 800c016:	4924      	ldr	r1, [pc, #144]	; (800c0a8 <lwip_bind+0xd0>)
 800c018:	4824      	ldr	r0, [pc, #144]	; (800c0ac <lwip_bind+0xd4>)
 800c01a:	f00c fb19 	bl	8018650 <iprintf>
 800c01e:	f06f 000f 	mvn.w	r0, #15
 800c022:	f7ff fe67 	bl	800bcf4 <err_to_errno>
 800c026:	6178      	str	r0, [r7, #20]
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d002      	beq.n	800c034 <lwip_bind+0x5c>
 800c02e:	4a20      	ldr	r2, [pc, #128]	; (800c0b0 <lwip_bind+0xd8>)
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	6013      	str	r3, [r2, #0]
 800c034:	f04f 33ff 	mov.w	r3, #4294967295
 800c038:	e030      	b.n	800c09c <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	685b      	ldr	r3, [r3, #4]
 800c03e:	613b      	str	r3, [r7, #16]
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	885b      	ldrh	r3, [r3, #2]
 800c044:	4618      	mov	r0, r3
 800c046:	f001 f811 	bl	800d06c <lwip_htons>
 800c04a:	4603      	mov	r3, r0
 800c04c:	847b      	strh	r3, [r7, #34]	; 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 800c04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c054:	f107 0110 	add.w	r1, r7, #16
 800c058:	4618      	mov	r0, r3
 800c05a:	f7fd ff71 	bl	8009f40 <netconn_bind>
 800c05e:	4603      	mov	r3, r0
 800c060:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  if (err != ERR_OK) {
 800c064:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d00e      	beq.n	800c08a <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800c06c:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800c070:	4618      	mov	r0, r3
 800c072:	f7ff fe3f 	bl	800bcf4 <err_to_errno>
 800c076:	61b8      	str	r0, [r7, #24]
 800c078:	69bb      	ldr	r3, [r7, #24]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d002      	beq.n	800c084 <lwip_bind+0xac>
 800c07e:	4a0c      	ldr	r2, [pc, #48]	; (800c0b0 <lwip_bind+0xd8>)
 800c080:	69bb      	ldr	r3, [r7, #24]
 800c082:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800c084:	f04f 33ff 	mov.w	r3, #4294967295
 800c088:	e008      	b.n	800c09c <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800c08a:	2300      	movs	r3, #0
 800c08c:	61fb      	str	r3, [r7, #28]
 800c08e:	69fb      	ldr	r3, [r7, #28]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d002      	beq.n	800c09a <lwip_bind+0xc2>
 800c094:	4a06      	ldr	r2, [pc, #24]	; (800c0b0 <lwip_bind+0xd8>)
 800c096:	69fb      	ldr	r3, [r7, #28]
 800c098:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800c09a:	2300      	movs	r3, #0
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3728      	adds	r7, #40	; 0x28
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}
 800c0a4:	0801a6f4 	.word	0x0801a6f4
 800c0a8:	0801a798 	.word	0x0801a798
 800c0ac:	0801a748 	.word	0x0801a748
 800c0b0:	2000d3a8 	.word	0x2000d3a8

0800c0b4 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b08c      	sub	sp, #48	; 0x30
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	60f8      	str	r0, [r7, #12]
 800c0bc:	60b9      	str	r1, [r7, #8]
 800c0be:	607a      	str	r2, [r7, #4]
 800c0c0:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 800c0c2:	2308      	movs	r3, #8
 800c0c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  ssize_t recvd = 0;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	62bb      	str	r3, [r7, #40]	; 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	db01      	blt.n	800c0d6 <lwip_recv_tcp+0x22>
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	e001      	b.n	800c0da <lwip_recv_tcp+0x26>
 800c0d6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c0da:	627b      	str	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d106      	bne.n	800c0f0 <lwip_recv_tcp+0x3c>
 800c0e2:	4b74      	ldr	r3, [pc, #464]	; (800c2b4 <lwip_recv_tcp+0x200>)
 800c0e4:	f240 329e 	movw	r2, #926	; 0x39e
 800c0e8:	4973      	ldr	r1, [pc, #460]	; (800c2b8 <lwip_recv_tcp+0x204>)
 800c0ea:	4874      	ldr	r0, [pc, #464]	; (800c2bc <lwip_recv_tcp+0x208>)
 800c0ec:	f00c fab0 	bl	8018650 <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	781b      	ldrb	r3, [r3, #0]
 800c0f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c0fa:	2b10      	cmp	r3, #16
 800c0fc:	d006      	beq.n	800c10c <lwip_recv_tcp+0x58>
 800c0fe:	4b6d      	ldr	r3, [pc, #436]	; (800c2b4 <lwip_recv_tcp+0x200>)
 800c100:	f240 329f 	movw	r2, #927	; 0x39f
 800c104:	496e      	ldr	r1, [pc, #440]	; (800c2c0 <lwip_recv_tcp+0x20c>)
 800c106:	486d      	ldr	r0, [pc, #436]	; (800c2bc <lwip_recv_tcp+0x208>)
 800c108:	f00c faa2 	bl	8018650 <iprintf>

  if (flags & MSG_DONTWAIT) {
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	f003 0308 	and.w	r3, r3, #8
 800c112:	2b00      	cmp	r3, #0
 800c114:	d005      	beq.n	800c122 <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 800c116:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c11a:	f043 0304 	orr.w	r3, r3, #4
 800c11e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	685b      	ldr	r3, [r3, #4]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d003      	beq.n	800c132 <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	685b      	ldr	r3, [r3, #4]
 800c12e:	617b      	str	r3, [r7, #20]
 800c130:	e036      	b.n	800c1a0 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c13a:	f107 0114 	add.w	r1, r7, #20
 800c13e:	4618      	mov	r0, r3
 800c140:	f7fe f8e0 	bl	800a304 <netconn_recv_tcp_pbuf_flags>
 800c144:	4603      	mov	r3, r0
 800c146:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 800c14a:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d019      	beq.n	800c186 <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 800c152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c154:	2b00      	cmp	r3, #0
 800c156:	f300 808d 	bgt.w	800c274 <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 800c15a:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800c15e:	4618      	mov	r0, r3
 800c160:	f7ff fdc8 	bl	800bcf4 <err_to_errno>
 800c164:	61f8      	str	r0, [r7, #28]
 800c166:	69fb      	ldr	r3, [r7, #28]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d002      	beq.n	800c172 <lwip_recv_tcp+0xbe>
 800c16c:	4a55      	ldr	r2, [pc, #340]	; (800c2c4 <lwip_recv_tcp+0x210>)
 800c16e:	69fb      	ldr	r3, [r7, #28]
 800c170:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 800c172:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800c176:	f113 0f0f 	cmn.w	r3, #15
 800c17a:	d101      	bne.n	800c180 <lwip_recv_tcp+0xcc>
          return 0;
 800c17c:	2300      	movs	r3, #0
 800c17e:	e094      	b.n	800c2aa <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 800c180:	f04f 33ff 	mov.w	r3, #4294967295
 800c184:	e091      	b.n	800c2aa <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d106      	bne.n	800c19a <lwip_recv_tcp+0xe6>
 800c18c:	4b49      	ldr	r3, [pc, #292]	; (800c2b4 <lwip_recv_tcp+0x200>)
 800c18e:	f240 32c5 	movw	r2, #965	; 0x3c5
 800c192:	494d      	ldr	r1, [pc, #308]	; (800c2c8 <lwip_recv_tcp+0x214>)
 800c194:	4849      	ldr	r0, [pc, #292]	; (800c2bc <lwip_recv_tcp+0x208>)
 800c196:	f00c fa5b 	bl	8018650 <iprintf>
      sock->lastdata.pbuf = p;
 800c19a:	697a      	ldr	r2, [r7, #20]
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	891b      	ldrh	r3, [r3, #8]
 800c1a4:	461a      	mov	r2, r3
 800c1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	dd03      	ble.n	800c1b4 <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	891b      	ldrh	r3, [r3, #8]
 800c1b0:	847b      	strh	r3, [r7, #34]	; 0x22
 800c1b2:	e001      	b.n	800c1b8 <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 800c1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b6:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    if (recvd + copylen < recvd) {
 800c1b8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1bc:	4413      	add	r3, r2
 800c1be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1c0:	429a      	cmp	r2, r3
 800c1c2:	dd03      	ble.n	800c1cc <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 800c1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1c6:	b29b      	uxth	r3, r3
 800c1c8:	43db      	mvns	r3, r3
 800c1ca:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 800c1cc:	6978      	ldr	r0, [r7, #20]
 800c1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1d0:	68ba      	ldr	r2, [r7, #8]
 800c1d2:	18d1      	adds	r1, r2, r3
 800c1d4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	f002 fd2c 	bl	800ec34 <pbuf_copy_partial>

    recvd += copylen;
 800c1dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c1de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1e0:	4413      	add	r3, r2
 800c1e2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 800c1e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c1e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1e8:	429a      	cmp	r2, r3
 800c1ea:	da06      	bge.n	800c1fa <lwip_recv_tcp+0x146>
 800c1ec:	4b31      	ldr	r3, [pc, #196]	; (800c2b4 <lwip_recv_tcp+0x200>)
 800c1ee:	f240 32dd 	movw	r2, #989	; 0x3dd
 800c1f2:	4936      	ldr	r1, [pc, #216]	; (800c2cc <lwip_recv_tcp+0x218>)
 800c1f4:	4831      	ldr	r0, [pc, #196]	; (800c2bc <lwip_recv_tcp+0x208>)
 800c1f6:	f00c fa2b 	bl	8018650 <iprintf>
    recv_left -= copylen;
 800c1fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c1fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1fe:	1ad3      	subs	r3, r2, r3
 800c200:	627b      	str	r3, [r7, #36]	; 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	f003 0301 	and.w	r3, r3, #1
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d123      	bne.n	800c254 <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	891b      	ldrh	r3, [r3, #8]
 800c210:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c212:	429a      	cmp	r2, r3
 800c214:	d906      	bls.n	800c224 <lwip_recv_tcp+0x170>
 800c216:	4b27      	ldr	r3, [pc, #156]	; (800c2b4 <lwip_recv_tcp+0x200>)
 800c218:	f240 32e3 	movw	r2, #995	; 0x3e3
 800c21c:	492c      	ldr	r1, [pc, #176]	; (800c2d0 <lwip_recv_tcp+0x21c>)
 800c21e:	4827      	ldr	r0, [pc, #156]	; (800c2bc <lwip_recv_tcp+0x208>)
 800c220:	f00c fa16 	bl	8018650 <iprintf>
      if (p->tot_len - copylen > 0) {
 800c224:	697b      	ldr	r3, [r7, #20]
 800c226:	891b      	ldrh	r3, [r3, #8]
 800c228:	461a      	mov	r2, r3
 800c22a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c22c:	1ad3      	subs	r3, r2, r3
 800c22e:	2b00      	cmp	r3, #0
 800c230:	dd09      	ble.n	800c246 <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 800c232:	697b      	ldr	r3, [r7, #20]
 800c234:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c236:	4611      	mov	r1, r2
 800c238:	4618      	mov	r0, r3
 800c23a:	f002 fac2 	bl	800e7c2 <pbuf_free_header>
 800c23e:	4602      	mov	r2, r0
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	605a      	str	r2, [r3, #4]
 800c244:	e006      	b.n	800c254 <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	2200      	movs	r2, #0
 800c24a:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 800c24c:	697b      	ldr	r3, [r7, #20]
 800c24e:	4618      	mov	r0, r3
 800c250:	f002 faea 	bl	800e828 <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 800c254:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c258:	f043 0314 	orr.w	r3, r3, #20
 800c25c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 800c260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c262:	2b00      	cmp	r3, #0
 800c264:	dd08      	ble.n	800c278 <lwip_recv_tcp+0x1c4>
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	f003 0301 	and.w	r3, r3, #1
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	f43f af58 	beq.w	800c122 <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 800c272:	e001      	b.n	800c278 <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 800c274:	bf00      	nop
 800c276:	e000      	b.n	800c27a <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 800c278:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 800c27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	dd0b      	ble.n	800c298 <lwip_recv_tcp+0x1e4>
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	f003 0301 	and.w	r3, r3, #1
 800c286:	2b00      	cmp	r3, #0
 800c288:	d106      	bne.n	800c298 <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c290:	4611      	mov	r1, r2
 800c292:	4618      	mov	r0, r3
 800c294:	f7fd ff84 	bl	800a1a0 <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 800c298:	2300      	movs	r3, #0
 800c29a:	61bb      	str	r3, [r7, #24]
 800c29c:	69bb      	ldr	r3, [r7, #24]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d002      	beq.n	800c2a8 <lwip_recv_tcp+0x1f4>
 800c2a2:	4a08      	ldr	r2, [pc, #32]	; (800c2c4 <lwip_recv_tcp+0x210>)
 800c2a4:	69bb      	ldr	r3, [r7, #24]
 800c2a6:	6013      	str	r3, [r2, #0]
  return recvd;
 800c2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3730      	adds	r7, #48	; 0x30
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
 800c2b2:	bf00      	nop
 800c2b4:	0801a6f4 	.word	0x0801a6f4
 800c2b8:	0801a7ec 	.word	0x0801a7ec
 800c2bc:	0801a748 	.word	0x0801a748
 800c2c0:	0801a7fc 	.word	0x0801a7fc
 800c2c4:	2000d3a8 	.word	0x2000d3a8
 800c2c8:	0801a820 	.word	0x0801a820
 800c2cc:	0801a82c 	.word	0x0801a82c
 800c2d0:	0801a854 	.word	0x0801a854

0800c2d4 <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 800c2d4:	b590      	push	{r4, r7, lr}
 800c2d6:	b08b      	sub	sp, #44	; 0x2c
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	60f8      	str	r0, [r7, #12]
 800c2dc:	60b9      	str	r1, [r7, #8]
 800c2de:	603b      	str	r3, [r7, #0]
 800c2e0:	4613      	mov	r3, r2
 800c2e2:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	627b      	str	r3, [r7, #36]	; 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d106      	bne.n	800c2fc <lwip_sock_make_addr+0x28>
 800c2ee:	4b2b      	ldr	r3, [pc, #172]	; (800c39c <lwip_sock_make_addr+0xc8>)
 800c2f0:	f240 4207 	movw	r2, #1031	; 0x407
 800c2f4:	492a      	ldr	r1, [pc, #168]	; (800c3a0 <lwip_sock_make_addr+0xcc>)
 800c2f6:	482b      	ldr	r0, [pc, #172]	; (800c3a4 <lwip_sock_make_addr+0xd0>)
 800c2f8:	f00c f9aa 	bl	8018650 <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d106      	bne.n	800c310 <lwip_sock_make_addr+0x3c>
 800c302:	4b26      	ldr	r3, [pc, #152]	; (800c39c <lwip_sock_make_addr+0xc8>)
 800c304:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800c308:	4927      	ldr	r1, [pc, #156]	; (800c3a8 <lwip_sock_make_addr+0xd4>)
 800c30a:	4826      	ldr	r0, [pc, #152]	; (800c3a4 <lwip_sock_make_addr+0xd0>)
 800c30c:	f00c f9a0 	bl	8018650 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 800c310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c312:	2b00      	cmp	r3, #0
 800c314:	d106      	bne.n	800c324 <lwip_sock_make_addr+0x50>
 800c316:	4b21      	ldr	r3, [pc, #132]	; (800c39c <lwip_sock_make_addr+0xc8>)
 800c318:	f240 4209 	movw	r2, #1033	; 0x409
 800c31c:	4923      	ldr	r1, [pc, #140]	; (800c3ac <lwip_sock_make_addr+0xd8>)
 800c31e:	4821      	ldr	r0, [pc, #132]	; (800c3a4 <lwip_sock_make_addr+0xd0>)
 800c320:	f00c f996 	bl	8018650 <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800c324:	f107 0314 	add.w	r3, r7, #20
 800c328:	2210      	movs	r2, #16
 800c32a:	701a      	strb	r2, [r3, #0]
 800c32c:	f107 0314 	add.w	r3, r7, #20
 800c330:	2202      	movs	r2, #2
 800c332:	705a      	strb	r2, [r3, #1]
 800c334:	f107 0414 	add.w	r4, r7, #20
 800c338:	88fb      	ldrh	r3, [r7, #6]
 800c33a:	4618      	mov	r0, r3
 800c33c:	f000 fe96 	bl	800d06c <lwip_htons>
 800c340:	4603      	mov	r3, r0
 800c342:	8063      	strh	r3, [r4, #2]
 800c344:	f107 0314 	add.w	r3, r7, #20
 800c348:	68ba      	ldr	r2, [r7, #8]
 800c34a:	6812      	ldr	r2, [r2, #0]
 800c34c:	605a      	str	r2, [r3, #4]
 800c34e:	f107 0314 	add.w	r3, r7, #20
 800c352:	3308      	adds	r3, #8
 800c354:	2208      	movs	r2, #8
 800c356:	2100      	movs	r1, #0
 800c358:	4618      	mov	r0, r3
 800c35a:	f00c f971 	bl	8018640 <memset>
  if (*fromlen < saddr.sa.sa_len) {
 800c35e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	7d3a      	ldrb	r2, [r7, #20]
 800c364:	4293      	cmp	r3, r2
 800c366:	d202      	bcs.n	800c36e <lwip_sock_make_addr+0x9a>
    truncated = 1;
 800c368:	2301      	movs	r3, #1
 800c36a:	627b      	str	r3, [r7, #36]	; 0x24
 800c36c:	e008      	b.n	800c380 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 800c36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	7d3a      	ldrb	r2, [r7, #20]
 800c374:	4293      	cmp	r3, r2
 800c376:	d903      	bls.n	800c380 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 800c378:	7d3b      	ldrb	r3, [r7, #20]
 800c37a:	461a      	mov	r2, r3
 800c37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c37e:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 800c380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c382:	681a      	ldr	r2, [r3, #0]
 800c384:	f107 0314 	add.w	r3, r7, #20
 800c388:	4619      	mov	r1, r3
 800c38a:	6838      	ldr	r0, [r7, #0]
 800c38c:	f00c f930 	bl	80185f0 <memcpy>
  return truncated;
 800c390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c392:	4618      	mov	r0, r3
 800c394:	372c      	adds	r7, #44	; 0x2c
 800c396:	46bd      	mov	sp, r7
 800c398:	bd90      	pop	{r4, r7, pc}
 800c39a:	bf00      	nop
 800c39c:	0801a6f4 	.word	0x0801a6f4
 800c3a0:	0801a864 	.word	0x0801a864
 800c3a4:	0801a748 	.word	0x0801a748
 800c3a8:	0801a878 	.word	0x0801a878
 800c3ac:	0801a888 	.word	0x0801a888

0800c3b0 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b088      	sub	sp, #32
 800c3b4:	af02      	add	r7, sp, #8
 800c3b6:	60f8      	str	r0, [r7, #12]
 800c3b8:	60b9      	str	r1, [r7, #8]
 800c3ba:	607a      	str	r2, [r7, #4]
 800c3bc:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d101      	bne.n	800c3c8 <lwip_recv_tcp_from+0x18>
    return 0;
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	e021      	b.n	800c40c <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d01d      	beq.n	800c40a <lwip_recv_tcp_from+0x5a>
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d01a      	beq.n	800c40a <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	6818      	ldr	r0, [r3, #0]
 800c3d8:	f107 0216 	add.w	r2, r7, #22
 800c3dc:	f107 0110 	add.w	r1, r7, #16
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	f7fd fd5b 	bl	8009e9c <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d00e      	beq.n	800c40a <lwip_recv_tcp_from+0x5a>
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d00b      	beq.n	800c40a <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	6818      	ldr	r0, [r3, #0]
 800c3f6:	8afa      	ldrh	r2, [r7, #22]
 800c3f8:	f107 0110 	add.w	r1, r7, #16
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	9300      	str	r3, [sp, #0]
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	f7ff ff67 	bl	800c2d4 <lwip_sock_make_addr>
 800c406:	4603      	mov	r3, r0
 800c408:	e000      	b.n	800c40c <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 800c40a:	2300      	movs	r3, #0
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	3718      	adds	r7, #24
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}

0800c414 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 800c414:	b590      	push	{r4, r7, lr}
 800c416:	b08d      	sub	sp, #52	; 0x34
 800c418:	af02      	add	r7, sp, #8
 800c41a:	60f8      	str	r0, [r7, #12]
 800c41c:	60b9      	str	r1, [r7, #8]
 800c41e:	607a      	str	r2, [r7, #4]
 800c420:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	689b      	ldr	r3, [r3, #8]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d10d      	bne.n	800c446 <lwip_recvfrom_udp_raw+0x32>
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	68db      	ldr	r3, [r3, #12]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	dd09      	ble.n	800c446 <lwip_recvfrom_udp_raw+0x32>
 800c432:	4b5e      	ldr	r3, [pc, #376]	; (800c5ac <lwip_recvfrom_udp_raw+0x198>)
 800c434:	f240 4249 	movw	r2, #1097	; 0x449
 800c438:	495d      	ldr	r1, [pc, #372]	; (800c5b0 <lwip_recvfrom_udp_raw+0x19c>)
 800c43a:	485e      	ldr	r0, [pc, #376]	; (800c5b4 <lwip_recvfrom_udp_raw+0x1a0>)
 800c43c:	f00c f908 	bl	8018650 <iprintf>
 800c440:	f06f 030f 	mvn.w	r3, #15
 800c444:	e0ad      	b.n	800c5a2 <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	f003 0308 	and.w	r3, r3, #8
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d003      	beq.n	800c458 <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 800c450:	2304      	movs	r3, #4
 800c452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c456:	e002      	b.n	800c45e <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 800c458:	2300      	movs	r3, #0
 800c45a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	685b      	ldr	r3, [r3, #4]
 800c462:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d11e      	bne.n	800c4a8 <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c472:	f107 0110 	add.w	r1, r7, #16
 800c476:	4618      	mov	r0, r3
 800c478:	f7fd ff70 	bl	800a35c <netconn_recv_udp_raw_netbuf_flags>
 800c47c:	4603      	mov	r3, r0
 800c47e:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 800c480:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d002      	beq.n	800c48e <lwip_recvfrom_udp_raw+0x7a>
      return err;
 800c488:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c48c:	e089      	b.n	800c5a2 <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800c48e:	693b      	ldr	r3, [r7, #16]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d106      	bne.n	800c4a2 <lwip_recvfrom_udp_raw+0x8e>
 800c494:	4b45      	ldr	r3, [pc, #276]	; (800c5ac <lwip_recvfrom_udp_raw+0x198>)
 800c496:	f240 425e 	movw	r2, #1118	; 0x45e
 800c49a:	4947      	ldr	r1, [pc, #284]	; (800c5b8 <lwip_recvfrom_udp_raw+0x1a4>)
 800c49c:	4845      	ldr	r0, [pc, #276]	; (800c5b4 <lwip_recvfrom_udp_raw+0x1a0>)
 800c49e:	f00c f8d7 	bl	8018650 <iprintf>
    sock->lastdata.netbuf = buf;
 800c4a2:	693a      	ldr	r2, [r7, #16]
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 800c4a8:	693b      	ldr	r3, [r7, #16]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	891b      	ldrh	r3, [r3, #8]
 800c4ae:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	847b      	strh	r3, [r7, #34]	; 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	61fb      	str	r3, [r7, #28]
 800c4b8:	e029      	b.n	800c50e <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 800c4ba:	8b3a      	ldrh	r2, [r7, #24]
 800c4bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c4be:	1ad3      	subs	r3, r2, r3
 800c4c0:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	689a      	ldr	r2, [r3, #8]
 800c4c6:	69fb      	ldr	r3, [r7, #28]
 800c4c8:	00db      	lsls	r3, r3, #3
 800c4ca:	4413      	add	r3, r2
 800c4cc:	685a      	ldr	r2, [r3, #4]
 800c4ce:	8afb      	ldrh	r3, [r7, #22]
 800c4d0:	429a      	cmp	r2, r3
 800c4d2:	d902      	bls.n	800c4da <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 800c4d4:	8afb      	ldrh	r3, [r7, #22]
 800c4d6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c4d8:	e006      	b.n	800c4e8 <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	689a      	ldr	r2, [r3, #8]
 800c4de:	69fb      	ldr	r3, [r7, #28]
 800c4e0:	00db      	lsls	r3, r3, #3
 800c4e2:	4413      	add	r3, r2
 800c4e4:	685b      	ldr	r3, [r3, #4]
 800c4e6:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800c4e8:	693b      	ldr	r3, [r7, #16]
 800c4ea:	6818      	ldr	r0, [r3, #0]
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	689a      	ldr	r2, [r3, #8]
 800c4f0:	69fb      	ldr	r3, [r7, #28]
 800c4f2:	00db      	lsls	r3, r3, #3
 800c4f4:	4413      	add	r3, r2
 800c4f6:	6819      	ldr	r1, [r3, #0]
 800c4f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c4fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c4fc:	f002 fb9a 	bl	800ec34 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 800c500:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c502:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c504:	4413      	add	r3, r2
 800c506:	847b      	strh	r3, [r7, #34]	; 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800c508:	69fb      	ldr	r3, [r7, #28]
 800c50a:	3301      	adds	r3, #1
 800c50c:	61fb      	str	r3, [r7, #28]
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	68db      	ldr	r3, [r3, #12]
 800c512:	69fa      	ldr	r2, [r7, #28]
 800c514:	429a      	cmp	r2, r3
 800c516:	da03      	bge.n	800c520 <lwip_recvfrom_udp_raw+0x10c>
 800c518:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c51a:	8b3b      	ldrh	r3, [r7, #24]
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d3cc      	bcc.n	800c4ba <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d01a      	beq.n	800c55e <lwip_recvfrom_udp_raw+0x14a>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	685b      	ldr	r3, [r3, #4]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d016      	beq.n	800c55e <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d012      	beq.n	800c55e <lwip_recvfrom_udp_raw+0x14a>
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	685b      	ldr	r3, [r3, #4]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d00e      	beq.n	800c55e <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	6818      	ldr	r0, [r3, #0]
 800c544:	693b      	ldr	r3, [r7, #16]
 800c546:	f103 0108 	add.w	r1, r3, #8
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	3304      	adds	r3, #4
 800c556:	9300      	str	r3, [sp, #0]
 800c558:	4623      	mov	r3, r4
 800c55a:	f7ff febb 	bl	800c2d4 <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2200      	movs	r2, #0
 800c562:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	691b      	ldr	r3, [r3, #16]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d007      	beq.n	800c57c <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 800c56c:	2300      	movs	r3, #0
 800c56e:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 800c570:	7d7b      	ldrb	r3, [r7, #21]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d102      	bne.n	800c57c <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2200      	movs	r2, #0
 800c57a:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	f003 0301 	and.w	r3, r3, #1
 800c582:	2b00      	cmp	r3, #0
 800c584:	d106      	bne.n	800c594 <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	2200      	movs	r2, #0
 800c58a:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 800c58c:	693b      	ldr	r3, [r7, #16]
 800c58e:	4618      	mov	r0, r3
 800c590:	f7ff fbce 	bl	800bd30 <netbuf_delete>
  }
  if (datagram_len) {
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d002      	beq.n	800c5a0 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	8b3a      	ldrh	r2, [r7, #24]
 800c59e:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 800c5a0:	2300      	movs	r3, #0
}
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	372c      	adds	r7, #44	; 0x2c
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd90      	pop	{r4, r7, pc}
 800c5aa:	bf00      	nop
 800c5ac:	0801a6f4 	.word	0x0801a6f4
 800c5b0:	0801a898 	.word	0x0801a898
 800c5b4:	0801a748 	.word	0x0801a748
 800c5b8:	0801a8c4 	.word	0x0801a8c4

0800c5bc <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b096      	sub	sp, #88	; 0x58
 800c5c0:	af02      	add	r7, sp, #8
 800c5c2:	60f8      	str	r0, [r7, #12]
 800c5c4:	60b9      	str	r1, [r7, #8]
 800c5c6:	607a      	str	r2, [r7, #4]
 800c5c8:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 800c5ca:	68f8      	ldr	r0, [r7, #12]
 800c5cc:	f7ff fc80 	bl	800bed0 <get_socket>
 800c5d0:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (!sock) {
 800c5d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d102      	bne.n	800c5de <lwip_recvfrom+0x22>
    return -1;
 800c5d8:	f04f 33ff 	mov.w	r3, #4294967295
 800c5dc:	e078      	b.n	800c6d0 <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800c5de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	781b      	ldrb	r3, [r3, #0]
 800c5e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c5e8:	2b10      	cmp	r3, #16
 800c5ea:	d112      	bne.n	800c612 <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	687a      	ldr	r2, [r7, #4]
 800c5f0:	68b9      	ldr	r1, [r7, #8]
 800c5f2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c5f4:	f7ff fd5e 	bl	800c0b4 <lwip_recv_tcp>
 800c5f8:	6478      	str	r0, [r7, #68]	; 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 800c5fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5fc:	9301      	str	r3, [sp, #4]
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	9300      	str	r3, [sp, #0]
 800c602:	4b35      	ldr	r3, [pc, #212]	; (800c6d8 <lwip_recvfrom+0x11c>)
 800c604:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c606:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c608:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c60a:	f7ff fed1 	bl	800c3b0 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 800c60e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c610:	e05e      	b.n	800c6d0 <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 800c612:	2300      	movs	r3, #0
 800c614:	877b      	strh	r3, [r7, #58]	; 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	633b      	str	r3, [r7, #48]	; 0x30
    vec.iov_len = len;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	637b      	str	r3, [r7, #52]	; 0x34
    msg.msg_control = NULL;
 800c61e:	2300      	movs	r3, #0
 800c620:	627b      	str	r3, [r7, #36]	; 0x24
    msg.msg_controllen = 0;
 800c622:	2300      	movs	r3, #0
 800c624:	62bb      	str	r3, [r7, #40]	; 0x28
    msg.msg_flags = 0;
 800c626:	2300      	movs	r3, #0
 800c628:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg.msg_iov = &vec;
 800c62a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c62e:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 800c630:	2301      	movs	r3, #1
 800c632:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 800c634:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c636:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800c638:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d002      	beq.n	800c644 <lwip_recvfrom+0x88>
 800c63e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	e000      	b.n	800c646 <lwip_recvfrom+0x8a>
 800c644:	2300      	movs	r3, #0
 800c646:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800c648:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 800c64c:	f107 0214 	add.w	r2, r7, #20
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	9300      	str	r3, [sp, #0]
 800c654:	460b      	mov	r3, r1
 800c656:	6839      	ldr	r1, [r7, #0]
 800c658:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c65a:	f7ff fedb 	bl	800c414 <lwip_recvfrom_udp_raw>
 800c65e:	4603      	mov	r3, r0
 800c660:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (err != ERR_OK) {
 800c664:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d00e      	beq.n	800c68a <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 800c66c:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800c670:	4618      	mov	r0, r3
 800c672:	f7ff fb3f 	bl	800bcf4 <err_to_errno>
 800c676:	63f8      	str	r0, [r7, #60]	; 0x3c
 800c678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d002      	beq.n	800c684 <lwip_recvfrom+0xc8>
 800c67e:	4a17      	ldr	r2, [pc, #92]	; (800c6dc <lwip_recvfrom+0x120>)
 800c680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c682:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800c684:	f04f 33ff 	mov.w	r3, #4294967295
 800c688:	e022      	b.n	800c6d0 <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800c68a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c68c:	461a      	mov	r2, r3
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	4293      	cmp	r3, r2
 800c692:	bf28      	it	cs
 800c694:	4613      	movcs	r3, r2
 800c696:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d206      	bcs.n	800c6ac <lwip_recvfrom+0xf0>
 800c69e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c6a0:	461a      	mov	r2, r3
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	bf28      	it	cs
 800c6a8:	4613      	movcs	r3, r2
 800c6aa:	e001      	b.n	800c6b0 <lwip_recvfrom+0xf4>
 800c6ac:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c6b0:	647b      	str	r3, [r7, #68]	; 0x44
    if (fromlen) {
 800c6b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d002      	beq.n	800c6be <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 800c6b8:	69ba      	ldr	r2, [r7, #24]
 800c6ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c6bc:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 800c6be:	2300      	movs	r3, #0
 800c6c0:	643b      	str	r3, [r7, #64]	; 0x40
 800c6c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d002      	beq.n	800c6ce <lwip_recvfrom+0x112>
 800c6c8:	4a04      	ldr	r2, [pc, #16]	; (800c6dc <lwip_recvfrom+0x120>)
 800c6ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6cc:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 800c6ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	3750      	adds	r7, #80	; 0x50
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}
 800c6d8:	0801a8d0 	.word	0x0801a8d0
 800c6dc:	2000d3a8 	.word	0x2000d3a8

0800c6e0 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b08a      	sub	sp, #40	; 0x28
 800c6e4:	af02      	add	r7, sp, #8
 800c6e6:	60f8      	str	r0, [r7, #12]
 800c6e8:	60b9      	str	r1, [r7, #8]
 800c6ea:	607a      	str	r2, [r7, #4]
 800c6ec:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 800c6ee:	68f8      	ldr	r0, [r7, #12]
 800c6f0:	f7ff fbee 	bl	800bed0 <get_socket>
 800c6f4:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800c6f6:	69fb      	ldr	r3, [r7, #28]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d102      	bne.n	800c702 <lwip_send+0x22>
    return -1;
 800c6fc:	f04f 33ff 	mov.w	r3, #4294967295
 800c700:	e046      	b.n	800c790 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800c702:	69fb      	ldr	r3, [r7, #28]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	781b      	ldrb	r3, [r3, #0]
 800c708:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c70c:	2b10      	cmp	r3, #16
 800c70e:	d00b      	beq.n	800c728 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 800c710:	2300      	movs	r3, #0
 800c712:	9301      	str	r3, [sp, #4]
 800c714:	2300      	movs	r3, #0
 800c716:	9300      	str	r3, [sp, #0]
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	687a      	ldr	r2, [r7, #4]
 800c71c:	68b9      	ldr	r1, [r7, #8]
 800c71e:	68f8      	ldr	r0, [r7, #12]
 800c720:	f000 f83c 	bl	800c79c <lwip_sendto>
 800c724:	4603      	mov	r3, r0
 800c726:	e033      	b.n	800c790 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d001      	beq.n	800c736 <lwip_send+0x56>
 800c732:	2203      	movs	r2, #3
 800c734:	e000      	b.n	800c738 <lwip_send+0x58>
 800c736:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	105b      	asrs	r3, r3, #1
 800c73c:	b25b      	sxtb	r3, r3
 800c73e:	f003 0304 	and.w	r3, r3, #4
 800c742:	b25b      	sxtb	r3, r3
 800c744:	4313      	orrs	r3, r2
 800c746:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 800c748:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 800c74a:	2300      	movs	r3, #0
 800c74c:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800c74e:	69fb      	ldr	r3, [r7, #28]
 800c750:	6818      	ldr	r0, [r3, #0]
 800c752:	7efa      	ldrb	r2, [r7, #27]
 800c754:	f107 0310 	add.w	r3, r7, #16
 800c758:	9300      	str	r3, [sp, #0]
 800c75a:	4613      	mov	r3, r2
 800c75c:	687a      	ldr	r2, [r7, #4]
 800c75e:	68b9      	ldr	r1, [r7, #8]
 800c760:	f7fd fe56 	bl	800a410 <netconn_write_partly>
 800c764:	4603      	mov	r3, r0
 800c766:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800c768:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c76c:	4618      	mov	r0, r3
 800c76e:	f7ff fac1 	bl	800bcf4 <err_to_errno>
 800c772:	6178      	str	r0, [r7, #20]
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d002      	beq.n	800c780 <lwip_send+0xa0>
 800c77a:	4a07      	ldr	r2, [pc, #28]	; (800c798 <lwip_send+0xb8>)
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 800c780:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d101      	bne.n	800c78c <lwip_send+0xac>
 800c788:	693b      	ldr	r3, [r7, #16]
 800c78a:	e001      	b.n	800c790 <lwip_send+0xb0>
 800c78c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c790:	4618      	mov	r0, r3
 800c792:	3720      	adds	r7, #32
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}
 800c798:	2000d3a8 	.word	0x2000d3a8

0800c79c <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b08e      	sub	sp, #56	; 0x38
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	60f8      	str	r0, [r7, #12]
 800c7a4:	60b9      	str	r1, [r7, #8]
 800c7a6:	607a      	str	r2, [r7, #4]
 800c7a8:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800c7aa:	68f8      	ldr	r0, [r7, #12]
 800c7ac:	f7ff fb90 	bl	800bed0 <get_socket>
 800c7b0:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 800c7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d102      	bne.n	800c7be <lwip_sendto+0x22>
    return -1;
 800c7b8:	f04f 33ff 	mov.w	r3, #4294967295
 800c7bc:	e093      	b.n	800c8e6 <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800c7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	781b      	ldrb	r3, [r3, #0]
 800c7c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c7c8:	2b10      	cmp	r3, #16
 800c7ca:	d107      	bne.n	800c7dc <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	687a      	ldr	r2, [r7, #4]
 800c7d0:	68b9      	ldr	r1, [r7, #8]
 800c7d2:	68f8      	ldr	r0, [r7, #12]
 800c7d4:	f7ff ff84 	bl	800c6e0 <lwip_send>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	e084      	b.n	800c8e6 <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7e2:	d30a      	bcc.n	800c7fa <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 800c7e4:	235a      	movs	r3, #90	; 0x5a
 800c7e6:	623b      	str	r3, [r7, #32]
 800c7e8:	6a3b      	ldr	r3, [r7, #32]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d002      	beq.n	800c7f4 <lwip_sendto+0x58>
 800c7ee:	4a40      	ldr	r2, [pc, #256]	; (800c8f0 <lwip_sendto+0x154>)
 800c7f0:	6a3b      	ldr	r3, [r7, #32]
 800c7f2:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800c7f4:	f04f 33ff 	mov.w	r3, #4294967295
 800c7f8:	e075      	b.n	800c8e6 <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800c7fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c800:	2b00      	cmp	r3, #0
 800c802:	d102      	bne.n	800c80a <lwip_sendto+0x6e>
 800c804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c806:	2b00      	cmp	r3, #0
 800c808:	d023      	beq.n	800c852 <lwip_sendto+0xb6>
 800c80a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c80c:	2b10      	cmp	r3, #16
 800c80e:	d10b      	bne.n	800c828 <lwip_sendto+0x8c>
 800c810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c812:	2b00      	cmp	r3, #0
 800c814:	d008      	beq.n	800c828 <lwip_sendto+0x8c>
 800c816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c818:	785b      	ldrb	r3, [r3, #1]
 800c81a:	2b02      	cmp	r3, #2
 800c81c:	d104      	bne.n	800c828 <lwip_sendto+0x8c>
 800c81e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c820:	f003 0303 	and.w	r3, r3, #3
 800c824:	2b00      	cmp	r3, #0
 800c826:	d014      	beq.n	800c852 <lwip_sendto+0xb6>
 800c828:	4b32      	ldr	r3, [pc, #200]	; (800c8f4 <lwip_sendto+0x158>)
 800c82a:	f240 6252 	movw	r2, #1618	; 0x652
 800c82e:	4932      	ldr	r1, [pc, #200]	; (800c8f8 <lwip_sendto+0x15c>)
 800c830:	4832      	ldr	r0, [pc, #200]	; (800c8fc <lwip_sendto+0x160>)
 800c832:	f00b ff0d 	bl	8018650 <iprintf>
 800c836:	f06f 000f 	mvn.w	r0, #15
 800c83a:	f7ff fa5b 	bl	800bcf4 <err_to_errno>
 800c83e:	62b8      	str	r0, [r7, #40]	; 0x28
 800c840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c842:	2b00      	cmp	r3, #0
 800c844:	d002      	beq.n	800c84c <lwip_sendto+0xb0>
 800c846:	4a2a      	ldr	r2, [pc, #168]	; (800c8f0 <lwip_sendto+0x154>)
 800c848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c84a:	6013      	str	r3, [r2, #0]
 800c84c:	f04f 33ff 	mov.w	r3, #4294967295
 800c850:	e049      	b.n	800c8e6 <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800c852:	2300      	movs	r3, #0
 800c854:	617b      	str	r3, [r7, #20]
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 800c85a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d00a      	beq.n	800c876 <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800c860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c862:	685b      	ldr	r3, [r3, #4]
 800c864:	61bb      	str	r3, [r7, #24]
 800c866:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c868:	885b      	ldrh	r3, [r3, #2]
 800c86a:	4618      	mov	r0, r3
 800c86c:	f000 fbfe 	bl	800d06c <lwip_htons>
 800c870:	4603      	mov	r3, r0
 800c872:	86bb      	strh	r3, [r7, #52]	; 0x34
 800c874:	e003      	b.n	800c87e <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 800c876:	2300      	movs	r3, #0
 800c878:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800c87a:	2300      	movs	r3, #0
 800c87c:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 800c87e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c880:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800c882:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c884:	f107 0310 	add.w	r3, r7, #16
 800c888:	68b9      	ldr	r1, [r7, #8]
 800c88a:	4618      	mov	r0, r3
 800c88c:	f7ff fa98 	bl	800bdc0 <netbuf_ref>
 800c890:	4603      	mov	r3, r0
 800c892:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800c896:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d10a      	bne.n	800c8b4 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 800c89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	f107 0210 	add.w	r2, r7, #16
 800c8a6:	4611      	mov	r1, r2
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	f7fd fd83 	bl	800a3b4 <netconn_send>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800c8b4:	f107 0310 	add.w	r3, r7, #16
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	f7ff fa59 	bl	800bd70 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 800c8be:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f7ff fa16 	bl	800bcf4 <err_to_errno>
 800c8c8:	6278      	str	r0, [r7, #36]	; 0x24
 800c8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d002      	beq.n	800c8d6 <lwip_sendto+0x13a>
 800c8d0:	4a07      	ldr	r2, [pc, #28]	; (800c8f0 <lwip_sendto+0x154>)
 800c8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8d4:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 800c8d6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d101      	bne.n	800c8e2 <lwip_sendto+0x146>
 800c8de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c8e0:	e001      	b.n	800c8e6 <lwip_sendto+0x14a>
 800c8e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3738      	adds	r7, #56	; 0x38
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}
 800c8ee:	bf00      	nop
 800c8f0:	2000d3a8 	.word	0x2000d3a8
 800c8f4:	0801a6f4 	.word	0x0801a6f4
 800c8f8:	0801a9d4 	.word	0x0801a9d4
 800c8fc:	0801a748 	.word	0x0801a748

0800c900 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b086      	sub	sp, #24
 800c904:	af00      	add	r7, sp, #0
 800c906:	60f8      	str	r0, [r7, #12]
 800c908:	60b9      	str	r1, [r7, #8]
 800c90a:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	2b03      	cmp	r3, #3
 800c910:	d009      	beq.n	800c926 <lwip_socket+0x26>
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	2b03      	cmp	r3, #3
 800c916:	dc23      	bgt.n	800c960 <lwip_socket+0x60>
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	2b01      	cmp	r3, #1
 800c91c:	d019      	beq.n	800c952 <lwip_socket+0x52>
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	2b02      	cmp	r3, #2
 800c922:	d009      	beq.n	800c938 <lwip_socket+0x38>
 800c924:	e01c      	b.n	800c960 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	b2db      	uxtb	r3, r3
 800c92a:	4a22      	ldr	r2, [pc, #136]	; (800c9b4 <lwip_socket+0xb4>)
 800c92c:	4619      	mov	r1, r3
 800c92e:	2040      	movs	r0, #64	; 0x40
 800c930:	f7fd f9fa 	bl	8009d28 <netconn_new_with_proto_and_callback>
 800c934:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800c936:	e019      	b.n	800c96c <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2b88      	cmp	r3, #136	; 0x88
 800c93c:	d101      	bne.n	800c942 <lwip_socket+0x42>
 800c93e:	2321      	movs	r3, #33	; 0x21
 800c940:	e000      	b.n	800c944 <lwip_socket+0x44>
 800c942:	2320      	movs	r3, #32
 800c944:	4a1b      	ldr	r2, [pc, #108]	; (800c9b4 <lwip_socket+0xb4>)
 800c946:	2100      	movs	r1, #0
 800c948:	4618      	mov	r0, r3
 800c94a:	f7fd f9ed 	bl	8009d28 <netconn_new_with_proto_and_callback>
 800c94e:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800c950:	e00c      	b.n	800c96c <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800c952:	4a18      	ldr	r2, [pc, #96]	; (800c9b4 <lwip_socket+0xb4>)
 800c954:	2100      	movs	r1, #0
 800c956:	2010      	movs	r0, #16
 800c958:	f7fd f9e6 	bl	8009d28 <netconn_new_with_proto_and_callback>
 800c95c:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800c95e:	e005      	b.n	800c96c <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800c960:	4b15      	ldr	r3, [pc, #84]	; (800c9b8 <lwip_socket+0xb8>)
 800c962:	2216      	movs	r2, #22
 800c964:	601a      	str	r2, [r3, #0]
      return -1;
 800c966:	f04f 33ff 	mov.w	r3, #4294967295
 800c96a:	e01e      	b.n	800c9aa <lwip_socket+0xaa>
  }

  if (!conn) {
 800c96c:	697b      	ldr	r3, [r7, #20]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d105      	bne.n	800c97e <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800c972:	4b11      	ldr	r3, [pc, #68]	; (800c9b8 <lwip_socket+0xb8>)
 800c974:	2269      	movs	r2, #105	; 0x69
 800c976:	601a      	str	r2, [r3, #0]
    return -1;
 800c978:	f04f 33ff 	mov.w	r3, #4294967295
 800c97c:	e015      	b.n	800c9aa <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 800c97e:	2100      	movs	r1, #0
 800c980:	6978      	ldr	r0, [r7, #20]
 800c982:	f7ff fabd 	bl	800bf00 <alloc_socket>
 800c986:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c98e:	d108      	bne.n	800c9a2 <lwip_socket+0xa2>
    netconn_delete(conn);
 800c990:	6978      	ldr	r0, [r7, #20]
 800c992:	f7fd fa67 	bl	8009e64 <netconn_delete>
    set_errno(ENFILE);
 800c996:	4b08      	ldr	r3, [pc, #32]	; (800c9b8 <lwip_socket+0xb8>)
 800c998:	2217      	movs	r2, #23
 800c99a:	601a      	str	r2, [r3, #0]
    return -1;
 800c99c:	f04f 33ff 	mov.w	r3, #4294967295
 800c9a0:	e003      	b.n	800c9aa <lwip_socket+0xaa>
  }
  conn->socket = i;
 800c9a2:	697b      	ldr	r3, [r7, #20]
 800c9a4:	693a      	ldr	r2, [r7, #16]
 800c9a6:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800c9a8:	693b      	ldr	r3, [r7, #16]
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	3718      	adds	r7, #24
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}
 800c9b2:	bf00      	nop
 800c9b4:	0800ca45 	.word	0x0800ca45
 800c9b8:	2000d3a8 	.word	0x2000d3a8

0800c9bc <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b087      	sub	sp, #28
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	60f8      	str	r0, [r7, #12]
 800c9c4:	60b9      	str	r1, [r7, #8]
 800c9c6:	607a      	str	r2, [r7, #4]
 800c9c8:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	617b      	str	r3, [r7, #20]
 800c9ce:	e02c      	b.n	800ca2a <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	695a      	ldr	r2, [r3, #20]
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	00db      	lsls	r3, r3, #3
 800c9d8:	4413      	add	r3, r2
 800c9da:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800c9dc:	693b      	ldr	r3, [r7, #16]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	68ba      	ldr	r2, [r7, #8]
 800c9e2:	429a      	cmp	r2, r3
 800c9e4:	d11e      	bne.n	800ca24 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d009      	beq.n	800ca00 <lwip_poll_should_wake+0x44>
 800c9ec:	693b      	ldr	r3, [r7, #16]
 800c9ee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c9f2:	b29b      	uxth	r3, r3
 800c9f4:	f003 0301 	and.w	r3, r3, #1
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d001      	beq.n	800ca00 <lwip_poll_should_wake+0x44>
        return 1;
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	e01a      	b.n	800ca36 <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d009      	beq.n	800ca1a <lwip_poll_should_wake+0x5e>
 800ca06:	693b      	ldr	r3, [r7, #16]
 800ca08:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ca0c:	b29b      	uxth	r3, r3
 800ca0e:	f003 0302 	and.w	r3, r3, #2
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d001      	beq.n	800ca1a <lwip_poll_should_wake+0x5e>
        return 1;
 800ca16:	2301      	movs	r3, #1
 800ca18:	e00d      	b.n	800ca36 <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800ca1a:	6a3b      	ldr	r3, [r7, #32]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d001      	beq.n	800ca24 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800ca20:	2301      	movs	r3, #1
 800ca22:	e008      	b.n	800ca36 <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800ca24:	697b      	ldr	r3, [r7, #20]
 800ca26:	3301      	adds	r3, #1
 800ca28:	617b      	str	r3, [r7, #20]
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	699b      	ldr	r3, [r3, #24]
 800ca2e:	697a      	ldr	r2, [r7, #20]
 800ca30:	429a      	cmp	r2, r3
 800ca32:	d3cd      	bcc.n	800c9d0 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800ca34:	2300      	movs	r3, #0
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	371c      	adds	r7, #28
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca40:	4770      	bx	lr
	...

0800ca44 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b08a      	sub	sp, #40	; 0x28
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	460b      	mov	r3, r1
 800ca4e:	70fb      	strb	r3, [r7, #3]
 800ca50:	4613      	mov	r3, r2
 800ca52:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	f000 80a4 	beq.w	800cba4 <event_callback+0x160>
    s = conn->socket;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	699b      	ldr	r3, [r3, #24]
 800ca60:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 800ca62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	da18      	bge.n	800ca9a <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800ca68:	f00b fd70 	bl	801854c <sys_arch_protect>
 800ca6c:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	699b      	ldr	r3, [r3, #24]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	da0b      	bge.n	800ca8e <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800ca76:	78fb      	ldrb	r3, [r7, #3]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d104      	bne.n	800ca86 <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	699b      	ldr	r3, [r3, #24]
 800ca80:	1e5a      	subs	r2, r3, #1
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800ca86:	69f8      	ldr	r0, [r7, #28]
 800ca88:	f00b fd6e 	bl	8018568 <sys_arch_unprotect>
        return;
 800ca8c:	e08d      	b.n	800cbaa <event_callback+0x166>
      }
      s = conn->socket;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	699b      	ldr	r3, [r3, #24]
 800ca92:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 800ca94:	69f8      	ldr	r0, [r7, #28]
 800ca96:	f00b fd67 	bl	8018568 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800ca9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca9c:	f7ff fa18 	bl	800bed0 <get_socket>
 800caa0:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800caa2:	69bb      	ldr	r3, [r7, #24]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d07f      	beq.n	800cba8 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800caa8:	2301      	movs	r3, #1
 800caaa:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800caac:	f00b fd4e 	bl	801854c <sys_arch_protect>
 800cab0:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800cab2:	78fb      	ldrb	r3, [r7, #3]
 800cab4:	2b04      	cmp	r3, #4
 800cab6:	d83e      	bhi.n	800cb36 <event_callback+0xf2>
 800cab8:	a201      	add	r2, pc, #4	; (adr r2, 800cac0 <event_callback+0x7c>)
 800caba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cabe:	bf00      	nop
 800cac0:	0800cad5 	.word	0x0800cad5
 800cac4:	0800caf7 	.word	0x0800caf7
 800cac8:	0800cb0f 	.word	0x0800cb0f
 800cacc:	0800cb23 	.word	0x0800cb23
 800cad0:	0800cb2f 	.word	0x0800cb2f
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800cad4:	69bb      	ldr	r3, [r7, #24]
 800cad6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cada:	b29b      	uxth	r3, r3
 800cadc:	3301      	adds	r3, #1
 800cade:	b29b      	uxth	r3, r3
 800cae0:	b21a      	sxth	r2, r3
 800cae2:	69bb      	ldr	r3, [r7, #24]
 800cae4:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800cae6:	69bb      	ldr	r3, [r7, #24]
 800cae8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800caec:	2b01      	cmp	r3, #1
 800caee:	dd2a      	ble.n	800cb46 <event_callback+0x102>
        check_waiters = 0;
 800caf0:	2300      	movs	r3, #0
 800caf2:	623b      	str	r3, [r7, #32]
      }
      break;
 800caf4:	e027      	b.n	800cb46 <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800caf6:	69bb      	ldr	r3, [r7, #24]
 800caf8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cafc:	b29b      	uxth	r3, r3
 800cafe:	3b01      	subs	r3, #1
 800cb00:	b29b      	uxth	r3, r3
 800cb02:	b21a      	sxth	r2, r3
 800cb04:	69bb      	ldr	r3, [r7, #24]
 800cb06:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	623b      	str	r3, [r7, #32]
      break;
 800cb0c:	e01c      	b.n	800cb48 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800cb0e:	69bb      	ldr	r3, [r7, #24]
 800cb10:	895b      	ldrh	r3, [r3, #10]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d001      	beq.n	800cb1a <event_callback+0xd6>
        check_waiters = 0;
 800cb16:	2300      	movs	r3, #0
 800cb18:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800cb1a:	69bb      	ldr	r3, [r7, #24]
 800cb1c:	2201      	movs	r2, #1
 800cb1e:	815a      	strh	r2, [r3, #10]
      break;
 800cb20:	e012      	b.n	800cb48 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800cb22:	69bb      	ldr	r3, [r7, #24]
 800cb24:	2200      	movs	r2, #0
 800cb26:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	623b      	str	r3, [r7, #32]
      break;
 800cb2c:	e00c      	b.n	800cb48 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800cb2e:	69bb      	ldr	r3, [r7, #24]
 800cb30:	2201      	movs	r2, #1
 800cb32:	819a      	strh	r2, [r3, #12]
      break;
 800cb34:	e008      	b.n	800cb48 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800cb36:	4b1e      	ldr	r3, [pc, #120]	; (800cbb0 <event_callback+0x16c>)
 800cb38:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 800cb3c:	491d      	ldr	r1, [pc, #116]	; (800cbb4 <event_callback+0x170>)
 800cb3e:	481e      	ldr	r0, [pc, #120]	; (800cbb8 <event_callback+0x174>)
 800cb40:	f00b fd86 	bl	8018650 <iprintf>
      break;
 800cb44:	e000      	b.n	800cb48 <event_callback+0x104>
      break;
 800cb46:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800cb48:	69bb      	ldr	r3, [r7, #24]
 800cb4a:	7b9b      	ldrb	r3, [r3, #14]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d025      	beq.n	800cb9c <event_callback+0x158>
 800cb50:	6a3b      	ldr	r3, [r7, #32]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d022      	beq.n	800cb9c <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800cb56:	69bb      	ldr	r3, [r7, #24]
 800cb58:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	bfcc      	ite	gt
 800cb60:	2301      	movgt	r3, #1
 800cb62:	2300      	movle	r3, #0
 800cb64:	b2db      	uxtb	r3, r3
 800cb66:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800cb68:	69bb      	ldr	r3, [r7, #24]
 800cb6a:	895b      	ldrh	r3, [r3, #10]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	bf14      	ite	ne
 800cb70:	2301      	movne	r3, #1
 800cb72:	2300      	moveq	r3, #0
 800cb74:	b2db      	uxtb	r3, r3
 800cb76:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800cb78:	69bb      	ldr	r3, [r7, #24]
 800cb7a:	899b      	ldrh	r3, [r3, #12]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	bf14      	ite	ne
 800cb80:	2301      	movne	r3, #1
 800cb82:	2300      	moveq	r3, #0
 800cb84:	b2db      	uxtb	r3, r3
 800cb86:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800cb88:	69f8      	ldr	r0, [r7, #28]
 800cb8a:	f00b fced 	bl	8018568 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	693a      	ldr	r2, [r7, #16]
 800cb92:	6979      	ldr	r1, [r7, #20]
 800cb94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb96:	f000 f811 	bl	800cbbc <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800cb9a:	e006      	b.n	800cbaa <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800cb9c:	69f8      	ldr	r0, [r7, #28]
 800cb9e:	f00b fce3 	bl	8018568 <sys_arch_unprotect>
 800cba2:	e002      	b.n	800cbaa <event_callback+0x166>
    return;
 800cba4:	bf00      	nop
 800cba6:	e000      	b.n	800cbaa <event_callback+0x166>
      return;
 800cba8:	bf00      	nop
  }
  done_socket(sock);
}
 800cbaa:	3728      	adds	r7, #40	; 0x28
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}
 800cbb0:	0801a6f4 	.word	0x0801a6f4
 800cbb4:	0801aa70 	.word	0x0801aa70
 800cbb8:	0801a748 	.word	0x0801a748

0800cbbc <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b088      	sub	sp, #32
 800cbc0:	af02      	add	r7, sp, #8
 800cbc2:	60f8      	str	r0, [r7, #12]
 800cbc4:	60b9      	str	r1, [r7, #8]
 800cbc6:	607a      	str	r2, [r7, #4]
 800cbc8:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800cbca:	4b4b      	ldr	r3, [pc, #300]	; (800ccf8 <select_check_waiters+0x13c>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	617b      	str	r3, [r7, #20]
 800cbd0:	e088      	b.n	800cce4 <select_check_waiters+0x128>
    if (scb->sem_signalled == 0) {
 800cbd2:	697b      	ldr	r3, [r7, #20]
 800cbd4:	69db      	ldr	r3, [r3, #28]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	f040 8081 	bne.w	800ccde <select_check_waiters+0x122>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	695b      	ldr	r3, [r3, #20]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d009      	beq.n	800cbfc <select_check_waiters+0x40>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	9300      	str	r3, [sp, #0]
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	68ba      	ldr	r2, [r7, #8]
 800cbf0:	68f9      	ldr	r1, [r7, #12]
 800cbf2:	6978      	ldr	r0, [r7, #20]
 800cbf4:	f7ff fee2 	bl	800c9bc <lwip_poll_should_wake>
 800cbf8:	6138      	str	r0, [r7, #16]
 800cbfa:	e065      	b.n	800ccc8 <select_check_waiters+0x10c>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800cbfc:	68bb      	ldr	r3, [r7, #8]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d01c      	beq.n	800cc3c <select_check_waiters+0x80>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	689b      	ldr	r3, [r3, #8]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d018      	beq.n	800cc3c <select_check_waiters+0x80>
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	689a      	ldr	r2, [r3, #8]
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	da00      	bge.n	800cc16 <select_check_waiters+0x5a>
 800cc14:	331f      	adds	r3, #31
 800cc16:	115b      	asrs	r3, r3, #5
 800cc18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	4259      	negs	r1, r3
 800cc20:	f003 031f 	and.w	r3, r3, #31
 800cc24:	f001 011f 	and.w	r1, r1, #31
 800cc28:	bf58      	it	pl
 800cc2a:	424b      	negpl	r3, r1
 800cc2c:	fa22 f303 	lsr.w	r3, r2, r3
 800cc30:	f003 0301 	and.w	r3, r3, #1
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d001      	beq.n	800cc3c <select_check_waiters+0x80>
            do_signal = 1;
 800cc38:	2301      	movs	r3, #1
 800cc3a:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d01f      	beq.n	800cc82 <select_check_waiters+0xc6>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800cc42:	693b      	ldr	r3, [r7, #16]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d11c      	bne.n	800cc82 <select_check_waiters+0xc6>
 800cc48:	697b      	ldr	r3, [r7, #20]
 800cc4a:	68db      	ldr	r3, [r3, #12]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d018      	beq.n	800cc82 <select_check_waiters+0xc6>
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	68da      	ldr	r2, [r3, #12]
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	da00      	bge.n	800cc5c <select_check_waiters+0xa0>
 800cc5a:	331f      	adds	r3, #31
 800cc5c:	115b      	asrs	r3, r3, #5
 800cc5e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	4259      	negs	r1, r3
 800cc66:	f003 031f 	and.w	r3, r3, #31
 800cc6a:	f001 011f 	and.w	r1, r1, #31
 800cc6e:	bf58      	it	pl
 800cc70:	424b      	negpl	r3, r1
 800cc72:	fa22 f303 	lsr.w	r3, r2, r3
 800cc76:	f003 0301 	and.w	r3, r3, #1
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d001      	beq.n	800cc82 <select_check_waiters+0xc6>
            do_signal = 1;
 800cc7e:	2301      	movs	r3, #1
 800cc80:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d01f      	beq.n	800ccc8 <select_check_waiters+0x10c>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800cc88:	693b      	ldr	r3, [r7, #16]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d11c      	bne.n	800ccc8 <select_check_waiters+0x10c>
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	691b      	ldr	r3, [r3, #16]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d018      	beq.n	800ccc8 <select_check_waiters+0x10c>
 800cc96:	697b      	ldr	r3, [r7, #20]
 800cc98:	691a      	ldr	r2, [r3, #16]
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	da00      	bge.n	800cca2 <select_check_waiters+0xe6>
 800cca0:	331f      	adds	r3, #31
 800cca2:	115b      	asrs	r3, r3, #5
 800cca4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	4259      	negs	r1, r3
 800ccac:	f003 031f 	and.w	r3, r3, #31
 800ccb0:	f001 011f 	and.w	r1, r1, #31
 800ccb4:	bf58      	it	pl
 800ccb6:	424b      	negpl	r3, r1
 800ccb8:	fa22 f303 	lsr.w	r3, r2, r3
 800ccbc:	f003 0301 	and.w	r3, r3, #1
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d001      	beq.n	800ccc8 <select_check_waiters+0x10c>
            do_signal = 1;
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d007      	beq.n	800ccde <select_check_waiters+0x122>
        scb->sem_signalled = 1;
 800ccce:	697b      	ldr	r3, [r7, #20]
 800ccd0:	2201      	movs	r2, #1
 800ccd2:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800ccd4:	697b      	ldr	r3, [r7, #20]
 800ccd6:	3320      	adds	r3, #32
 800ccd8:	4618      	mov	r0, r3
 800ccda:	f00b fb93 	bl	8018404 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	617b      	str	r3, [r7, #20]
 800cce4:	697b      	ldr	r3, [r7, #20]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	f47f af73 	bne.w	800cbd2 <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800ccec:	bf00      	nop
 800ccee:	bf00      	nop
 800ccf0:	3718      	adds	r7, #24
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}
 800ccf6:	bf00      	nop
 800ccf8:	20007924 	.word	0x20007924

0800ccfc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b084      	sub	sp, #16
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
 800cd04:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800cd06:	f008 f937 	bl	8014f78 <sys_timeouts_sleeptime>
 800cd0a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd12:	d10b      	bne.n	800cd2c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800cd14:	4813      	ldr	r0, [pc, #76]	; (800cd64 <tcpip_timeouts_mbox_fetch+0x68>)
 800cd16:	f00b fbe6 	bl	80184e6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	6839      	ldr	r1, [r7, #0]
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f00b fa9e 	bl	8018260 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800cd24:	480f      	ldr	r0, [pc, #60]	; (800cd64 <tcpip_timeouts_mbox_fetch+0x68>)
 800cd26:	f00b fbcf 	bl	80184c8 <sys_mutex_lock>
    return;
 800cd2a:	e018      	b.n	800cd5e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d102      	bne.n	800cd38 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800cd32:	f008 f8e7 	bl	8014f04 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800cd36:	e7e6      	b.n	800cd06 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800cd38:	480a      	ldr	r0, [pc, #40]	; (800cd64 <tcpip_timeouts_mbox_fetch+0x68>)
 800cd3a:	f00b fbd4 	bl	80184e6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800cd3e:	68fa      	ldr	r2, [r7, #12]
 800cd40:	6839      	ldr	r1, [r7, #0]
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f00b fa8c 	bl	8018260 <sys_arch_mbox_fetch>
 800cd48:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800cd4a:	4806      	ldr	r0, [pc, #24]	; (800cd64 <tcpip_timeouts_mbox_fetch+0x68>)
 800cd4c:	f00b fbbc 	bl	80184c8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd56:	d102      	bne.n	800cd5e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800cd58:	f008 f8d4 	bl	8014f04 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800cd5c:	e7d3      	b.n	800cd06 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800cd5e:	3710      	adds	r7, #16
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bd80      	pop	{r7, pc}
 800cd64:	20007934 	.word	0x20007934

0800cd68 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b084      	sub	sp, #16
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800cd70:	4810      	ldr	r0, [pc, #64]	; (800cdb4 <tcpip_thread+0x4c>)
 800cd72:	f00b fba9 	bl	80184c8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800cd76:	4b10      	ldr	r3, [pc, #64]	; (800cdb8 <tcpip_thread+0x50>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d005      	beq.n	800cd8a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800cd7e:	4b0e      	ldr	r3, [pc, #56]	; (800cdb8 <tcpip_thread+0x50>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	4a0e      	ldr	r2, [pc, #56]	; (800cdbc <tcpip_thread+0x54>)
 800cd84:	6812      	ldr	r2, [r2, #0]
 800cd86:	4610      	mov	r0, r2
 800cd88:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800cd8a:	f107 030c 	add.w	r3, r7, #12
 800cd8e:	4619      	mov	r1, r3
 800cd90:	480b      	ldr	r0, [pc, #44]	; (800cdc0 <tcpip_thread+0x58>)
 800cd92:	f7ff ffb3 	bl	800ccfc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d106      	bne.n	800cdaa <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800cd9c:	4b09      	ldr	r3, [pc, #36]	; (800cdc4 <tcpip_thread+0x5c>)
 800cd9e:	2291      	movs	r2, #145	; 0x91
 800cda0:	4909      	ldr	r1, [pc, #36]	; (800cdc8 <tcpip_thread+0x60>)
 800cda2:	480a      	ldr	r0, [pc, #40]	; (800cdcc <tcpip_thread+0x64>)
 800cda4:	f00b fc54 	bl	8018650 <iprintf>
      continue;
 800cda8:	e003      	b.n	800cdb2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	4618      	mov	r0, r3
 800cdae:	f000 f80f 	bl	800cdd0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800cdb2:	e7ea      	b.n	800cd8a <tcpip_thread+0x22>
 800cdb4:	20007934 	.word	0x20007934
 800cdb8:	20007928 	.word	0x20007928
 800cdbc:	2000792c 	.word	0x2000792c
 800cdc0:	20007930 	.word	0x20007930
 800cdc4:	0801aac4 	.word	0x0801aac4
 800cdc8:	0801aaf4 	.word	0x0801aaf4
 800cdcc:	0801ab14 	.word	0x0801ab14

0800cdd0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b082      	sub	sp, #8
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	781b      	ldrb	r3, [r3, #0]
 800cddc:	2b02      	cmp	r3, #2
 800cdde:	d026      	beq.n	800ce2e <tcpip_thread_handle_msg+0x5e>
 800cde0:	2b02      	cmp	r3, #2
 800cde2:	dc2b      	bgt.n	800ce3c <tcpip_thread_handle_msg+0x6c>
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d002      	beq.n	800cdee <tcpip_thread_handle_msg+0x1e>
 800cde8:	2b01      	cmp	r3, #1
 800cdea:	d015      	beq.n	800ce18 <tcpip_thread_handle_msg+0x48>
 800cdec:	e026      	b.n	800ce3c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	68db      	ldr	r3, [r3, #12]
 800cdf2:	687a      	ldr	r2, [r7, #4]
 800cdf4:	6850      	ldr	r0, [r2, #4]
 800cdf6:	687a      	ldr	r2, [r7, #4]
 800cdf8:	6892      	ldr	r2, [r2, #8]
 800cdfa:	4611      	mov	r1, r2
 800cdfc:	4798      	blx	r3
 800cdfe:	4603      	mov	r3, r0
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d004      	beq.n	800ce0e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	685b      	ldr	r3, [r3, #4]
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f001 fd0d 	bl	800e828 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ce0e:	6879      	ldr	r1, [r7, #4]
 800ce10:	2009      	movs	r0, #9
 800ce12:	f000 fe33 	bl	800da7c <memp_free>
      break;
 800ce16:	e018      	b.n	800ce4a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	685b      	ldr	r3, [r3, #4]
 800ce1c:	687a      	ldr	r2, [r7, #4]
 800ce1e:	6892      	ldr	r2, [r2, #8]
 800ce20:	4610      	mov	r0, r2
 800ce22:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800ce24:	6879      	ldr	r1, [r7, #4]
 800ce26:	2008      	movs	r0, #8
 800ce28:	f000 fe28 	bl	800da7c <memp_free>
      break;
 800ce2c:	e00d      	b.n	800ce4a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	685b      	ldr	r3, [r3, #4]
 800ce32:	687a      	ldr	r2, [r7, #4]
 800ce34:	6892      	ldr	r2, [r2, #8]
 800ce36:	4610      	mov	r0, r2
 800ce38:	4798      	blx	r3
      break;
 800ce3a:	e006      	b.n	800ce4a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ce3c:	4b05      	ldr	r3, [pc, #20]	; (800ce54 <tcpip_thread_handle_msg+0x84>)
 800ce3e:	22cf      	movs	r2, #207	; 0xcf
 800ce40:	4905      	ldr	r1, [pc, #20]	; (800ce58 <tcpip_thread_handle_msg+0x88>)
 800ce42:	4806      	ldr	r0, [pc, #24]	; (800ce5c <tcpip_thread_handle_msg+0x8c>)
 800ce44:	f00b fc04 	bl	8018650 <iprintf>
      break;
 800ce48:	bf00      	nop
  }
}
 800ce4a:	bf00      	nop
 800ce4c:	3708      	adds	r7, #8
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}
 800ce52:	bf00      	nop
 800ce54:	0801aac4 	.word	0x0801aac4
 800ce58:	0801aaf4 	.word	0x0801aaf4
 800ce5c:	0801ab14 	.word	0x0801ab14

0800ce60 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b086      	sub	sp, #24
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	60f8      	str	r0, [r7, #12]
 800ce68:	60b9      	str	r1, [r7, #8]
 800ce6a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ce6c:	481a      	ldr	r0, [pc, #104]	; (800ced8 <tcpip_inpkt+0x78>)
 800ce6e:	f00b fa52 	bl	8018316 <sys_mbox_valid>
 800ce72:	4603      	mov	r3, r0
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d105      	bne.n	800ce84 <tcpip_inpkt+0x24>
 800ce78:	4b18      	ldr	r3, [pc, #96]	; (800cedc <tcpip_inpkt+0x7c>)
 800ce7a:	22fc      	movs	r2, #252	; 0xfc
 800ce7c:	4918      	ldr	r1, [pc, #96]	; (800cee0 <tcpip_inpkt+0x80>)
 800ce7e:	4819      	ldr	r0, [pc, #100]	; (800cee4 <tcpip_inpkt+0x84>)
 800ce80:	f00b fbe6 	bl	8018650 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800ce84:	2009      	movs	r0, #9
 800ce86:	f000 fda7 	bl	800d9d8 <memp_malloc>
 800ce8a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800ce8c:	697b      	ldr	r3, [r7, #20]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d102      	bne.n	800ce98 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800ce92:	f04f 33ff 	mov.w	r3, #4294967295
 800ce96:	e01a      	b.n	800cece <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	68fa      	ldr	r2, [r7, #12]
 800cea2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800cea4:	697b      	ldr	r3, [r7, #20]
 800cea6:	68ba      	ldr	r2, [r7, #8]
 800cea8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800ceaa:	697b      	ldr	r3, [r7, #20]
 800ceac:	687a      	ldr	r2, [r7, #4]
 800ceae:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ceb0:	6979      	ldr	r1, [r7, #20]
 800ceb2:	4809      	ldr	r0, [pc, #36]	; (800ced8 <tcpip_inpkt+0x78>)
 800ceb4:	f00b f9ba 	bl	801822c <sys_mbox_trypost>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d006      	beq.n	800cecc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800cebe:	6979      	ldr	r1, [r7, #20]
 800cec0:	2009      	movs	r0, #9
 800cec2:	f000 fddb 	bl	800da7c <memp_free>
    return ERR_MEM;
 800cec6:	f04f 33ff 	mov.w	r3, #4294967295
 800ceca:	e000      	b.n	800cece <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800cecc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800cece:	4618      	mov	r0, r3
 800ced0:	3718      	adds	r7, #24
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}
 800ced6:	bf00      	nop
 800ced8:	20007930 	.word	0x20007930
 800cedc:	0801aac4 	.word	0x0801aac4
 800cee0:	0801ab3c 	.word	0x0801ab3c
 800cee4:	0801ab14 	.word	0x0801ab14

0800cee8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b082      	sub	sp, #8
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
 800cef0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cef8:	f003 0318 	and.w	r3, r3, #24
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d006      	beq.n	800cf0e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800cf00:	4a08      	ldr	r2, [pc, #32]	; (800cf24 <tcpip_input+0x3c>)
 800cf02:	6839      	ldr	r1, [r7, #0]
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	f7ff ffab 	bl	800ce60 <tcpip_inpkt>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	e005      	b.n	800cf1a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800cf0e:	4a06      	ldr	r2, [pc, #24]	; (800cf28 <tcpip_input+0x40>)
 800cf10:	6839      	ldr	r1, [r7, #0]
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f7ff ffa4 	bl	800ce60 <tcpip_inpkt>
 800cf18:	4603      	mov	r3, r0
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	3708      	adds	r7, #8
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}
 800cf22:	bf00      	nop
 800cf24:	08018019 	.word	0x08018019
 800cf28:	08016ca5 	.word	0x08016ca5

0800cf2c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b084      	sub	sp, #16
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
 800cf34:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800cf36:	4819      	ldr	r0, [pc, #100]	; (800cf9c <tcpip_try_callback+0x70>)
 800cf38:	f00b f9ed 	bl	8018316 <sys_mbox_valid>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d106      	bne.n	800cf50 <tcpip_try_callback+0x24>
 800cf42:	4b17      	ldr	r3, [pc, #92]	; (800cfa0 <tcpip_try_callback+0x74>)
 800cf44:	f240 125d 	movw	r2, #349	; 0x15d
 800cf48:	4916      	ldr	r1, [pc, #88]	; (800cfa4 <tcpip_try_callback+0x78>)
 800cf4a:	4817      	ldr	r0, [pc, #92]	; (800cfa8 <tcpip_try_callback+0x7c>)
 800cf4c:	f00b fb80 	bl	8018650 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800cf50:	2008      	movs	r0, #8
 800cf52:	f000 fd41 	bl	800d9d8 <memp_malloc>
 800cf56:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d102      	bne.n	800cf64 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800cf5e:	f04f 33ff 	mov.w	r3, #4294967295
 800cf62:	e017      	b.n	800cf94 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	2201      	movs	r2, #1
 800cf68:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	687a      	ldr	r2, [r7, #4]
 800cf6e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	683a      	ldr	r2, [r7, #0]
 800cf74:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800cf76:	68f9      	ldr	r1, [r7, #12]
 800cf78:	4808      	ldr	r0, [pc, #32]	; (800cf9c <tcpip_try_callback+0x70>)
 800cf7a:	f00b f957 	bl	801822c <sys_mbox_trypost>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d006      	beq.n	800cf92 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800cf84:	68f9      	ldr	r1, [r7, #12]
 800cf86:	2008      	movs	r0, #8
 800cf88:	f000 fd78 	bl	800da7c <memp_free>
    return ERR_MEM;
 800cf8c:	f04f 33ff 	mov.w	r3, #4294967295
 800cf90:	e000      	b.n	800cf94 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800cf92:	2300      	movs	r3, #0
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	3710      	adds	r7, #16
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	bd80      	pop	{r7, pc}
 800cf9c:	20007930 	.word	0x20007930
 800cfa0:	0801aac4 	.word	0x0801aac4
 800cfa4:	0801ab3c 	.word	0x0801ab3c
 800cfa8:	0801ab14 	.word	0x0801ab14

0800cfac <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b084      	sub	sp, #16
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	60f8      	str	r0, [r7, #12]
 800cfb4:	60b9      	str	r1, [r7, #8]
 800cfb6:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800cfb8:	4806      	ldr	r0, [pc, #24]	; (800cfd4 <tcpip_send_msg_wait_sem+0x28>)
 800cfba:	f00b fa85 	bl	80184c8 <sys_mutex_lock>
  fn(apimsg);
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	68b8      	ldr	r0, [r7, #8]
 800cfc2:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800cfc4:	4803      	ldr	r0, [pc, #12]	; (800cfd4 <tcpip_send_msg_wait_sem+0x28>)
 800cfc6:	f00b fa8e 	bl	80184e6 <sys_mutex_unlock>
  return ERR_OK;
 800cfca:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800cfcc:	4618      	mov	r0, r3
 800cfce:	3710      	adds	r7, #16
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bd80      	pop	{r7, pc}
 800cfd4:	20007934 	.word	0x20007934

0800cfd8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b084      	sub	sp, #16
 800cfdc:	af02      	add	r7, sp, #8
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	6039      	str	r1, [r7, #0]
  lwip_init();
 800cfe2:	f000 f871 	bl	800d0c8 <lwip_init>

  tcpip_init_done = initfunc;
 800cfe6:	4a17      	ldr	r2, [pc, #92]	; (800d044 <tcpip_init+0x6c>)
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800cfec:	4a16      	ldr	r2, [pc, #88]	; (800d048 <tcpip_init+0x70>)
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800cff2:	2106      	movs	r1, #6
 800cff4:	4815      	ldr	r0, [pc, #84]	; (800d04c <tcpip_init+0x74>)
 800cff6:	f00b f8e5 	bl	80181c4 <sys_mbox_new>
 800cffa:	4603      	mov	r3, r0
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d006      	beq.n	800d00e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800d000:	4b13      	ldr	r3, [pc, #76]	; (800d050 <tcpip_init+0x78>)
 800d002:	f240 2261 	movw	r2, #609	; 0x261
 800d006:	4913      	ldr	r1, [pc, #76]	; (800d054 <tcpip_init+0x7c>)
 800d008:	4813      	ldr	r0, [pc, #76]	; (800d058 <tcpip_init+0x80>)
 800d00a:	f00b fb21 	bl	8018650 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800d00e:	4813      	ldr	r0, [pc, #76]	; (800d05c <tcpip_init+0x84>)
 800d010:	f00b fa3e 	bl	8018490 <sys_mutex_new>
 800d014:	4603      	mov	r3, r0
 800d016:	2b00      	cmp	r3, #0
 800d018:	d006      	beq.n	800d028 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800d01a:	4b0d      	ldr	r3, [pc, #52]	; (800d050 <tcpip_init+0x78>)
 800d01c:	f240 2265 	movw	r2, #613	; 0x265
 800d020:	490f      	ldr	r1, [pc, #60]	; (800d060 <tcpip_init+0x88>)
 800d022:	480d      	ldr	r0, [pc, #52]	; (800d058 <tcpip_init+0x80>)
 800d024:	f00b fb14 	bl	8018650 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800d028:	2300      	movs	r3, #0
 800d02a:	9300      	str	r3, [sp, #0]
 800d02c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d030:	2200      	movs	r2, #0
 800d032:	490c      	ldr	r1, [pc, #48]	; (800d064 <tcpip_init+0x8c>)
 800d034:	480c      	ldr	r0, [pc, #48]	; (800d068 <tcpip_init+0x90>)
 800d036:	f00b fa63 	bl	8018500 <sys_thread_new>
}
 800d03a:	bf00      	nop
 800d03c:	3708      	adds	r7, #8
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}
 800d042:	bf00      	nop
 800d044:	20007928 	.word	0x20007928
 800d048:	2000792c 	.word	0x2000792c
 800d04c:	20007930 	.word	0x20007930
 800d050:	0801aac4 	.word	0x0801aac4
 800d054:	0801ab4c 	.word	0x0801ab4c
 800d058:	0801ab14 	.word	0x0801ab14
 800d05c:	20007934 	.word	0x20007934
 800d060:	0801ab70 	.word	0x0801ab70
 800d064:	0800cd69 	.word	0x0800cd69
 800d068:	0801ab94 	.word	0x0801ab94

0800d06c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800d06c:	b480      	push	{r7}
 800d06e:	b083      	sub	sp, #12
 800d070:	af00      	add	r7, sp, #0
 800d072:	4603      	mov	r3, r0
 800d074:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800d076:	88fb      	ldrh	r3, [r7, #6]
 800d078:	021b      	lsls	r3, r3, #8
 800d07a:	b21a      	sxth	r2, r3
 800d07c:	88fb      	ldrh	r3, [r7, #6]
 800d07e:	0a1b      	lsrs	r3, r3, #8
 800d080:	b29b      	uxth	r3, r3
 800d082:	b21b      	sxth	r3, r3
 800d084:	4313      	orrs	r3, r2
 800d086:	b21b      	sxth	r3, r3
 800d088:	b29b      	uxth	r3, r3
}
 800d08a:	4618      	mov	r0, r3
 800d08c:	370c      	adds	r7, #12
 800d08e:	46bd      	mov	sp, r7
 800d090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d094:	4770      	bx	lr

0800d096 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800d096:	b480      	push	{r7}
 800d098:	b083      	sub	sp, #12
 800d09a:	af00      	add	r7, sp, #0
 800d09c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	061a      	lsls	r2, r3, #24
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	021b      	lsls	r3, r3, #8
 800d0a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d0aa:	431a      	orrs	r2, r3
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	0a1b      	lsrs	r3, r3, #8
 800d0b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d0b4:	431a      	orrs	r2, r3
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	0e1b      	lsrs	r3, r3, #24
 800d0ba:	4313      	orrs	r3, r2
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	370c      	adds	r7, #12
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c6:	4770      	bx	lr

0800d0c8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b082      	sub	sp, #8
 800d0cc:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800d0d2:	f00b f9cf 	bl	8018474 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800d0d6:	f000 f8d5 	bl	800d284 <mem_init>
  memp_init();
 800d0da:	f000 fc31 	bl	800d940 <memp_init>
  pbuf_init();
  netif_init();
 800d0de:	f000 fcf7 	bl	800dad0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800d0e2:	f007 ff81 	bl	8014fe8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800d0e6:	f001 fe49 	bl	800ed7c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800d0ea:	f007 fec3 	bl	8014e74 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800d0ee:	bf00      	nop
 800d0f0:	3708      	adds	r7, #8
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}
	...

0800d0f8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	b083      	sub	sp, #12
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	4603      	mov	r3, r0
 800d100:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800d102:	4b05      	ldr	r3, [pc, #20]	; (800d118 <ptr_to_mem+0x20>)
 800d104:	681a      	ldr	r2, [r3, #0]
 800d106:	88fb      	ldrh	r3, [r7, #6]
 800d108:	4413      	add	r3, r2
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	370c      	adds	r7, #12
 800d10e:	46bd      	mov	sp, r7
 800d110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d114:	4770      	bx	lr
 800d116:	bf00      	nop
 800d118:	2000a164 	.word	0x2000a164

0800d11c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800d11c:	b480      	push	{r7}
 800d11e:	b083      	sub	sp, #12
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800d124:	4b05      	ldr	r3, [pc, #20]	; (800d13c <mem_to_ptr+0x20>)
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	687a      	ldr	r2, [r7, #4]
 800d12a:	1ad3      	subs	r3, r2, r3
 800d12c:	b29b      	uxth	r3, r3
}
 800d12e:	4618      	mov	r0, r3
 800d130:	370c      	adds	r7, #12
 800d132:	46bd      	mov	sp, r7
 800d134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d138:	4770      	bx	lr
 800d13a:	bf00      	nop
 800d13c:	2000a164 	.word	0x2000a164

0800d140 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800d140:	b590      	push	{r4, r7, lr}
 800d142:	b085      	sub	sp, #20
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800d148:	4b45      	ldr	r3, [pc, #276]	; (800d260 <plug_holes+0x120>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	687a      	ldr	r2, [r7, #4]
 800d14e:	429a      	cmp	r2, r3
 800d150:	d206      	bcs.n	800d160 <plug_holes+0x20>
 800d152:	4b44      	ldr	r3, [pc, #272]	; (800d264 <plug_holes+0x124>)
 800d154:	f240 12df 	movw	r2, #479	; 0x1df
 800d158:	4943      	ldr	r1, [pc, #268]	; (800d268 <plug_holes+0x128>)
 800d15a:	4844      	ldr	r0, [pc, #272]	; (800d26c <plug_holes+0x12c>)
 800d15c:	f00b fa78 	bl	8018650 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800d160:	4b43      	ldr	r3, [pc, #268]	; (800d270 <plug_holes+0x130>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	687a      	ldr	r2, [r7, #4]
 800d166:	429a      	cmp	r2, r3
 800d168:	d306      	bcc.n	800d178 <plug_holes+0x38>
 800d16a:	4b3e      	ldr	r3, [pc, #248]	; (800d264 <plug_holes+0x124>)
 800d16c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d170:	4940      	ldr	r1, [pc, #256]	; (800d274 <plug_holes+0x134>)
 800d172:	483e      	ldr	r0, [pc, #248]	; (800d26c <plug_holes+0x12c>)
 800d174:	f00b fa6c 	bl	8018650 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	791b      	ldrb	r3, [r3, #4]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d006      	beq.n	800d18e <plug_holes+0x4e>
 800d180:	4b38      	ldr	r3, [pc, #224]	; (800d264 <plug_holes+0x124>)
 800d182:	f240 12e1 	movw	r2, #481	; 0x1e1
 800d186:	493c      	ldr	r1, [pc, #240]	; (800d278 <plug_holes+0x138>)
 800d188:	4838      	ldr	r0, [pc, #224]	; (800d26c <plug_holes+0x12c>)
 800d18a:	f00b fa61 	bl	8018650 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	881b      	ldrh	r3, [r3, #0]
 800d192:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d196:	d906      	bls.n	800d1a6 <plug_holes+0x66>
 800d198:	4b32      	ldr	r3, [pc, #200]	; (800d264 <plug_holes+0x124>)
 800d19a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800d19e:	4937      	ldr	r1, [pc, #220]	; (800d27c <plug_holes+0x13c>)
 800d1a0:	4832      	ldr	r0, [pc, #200]	; (800d26c <plug_holes+0x12c>)
 800d1a2:	f00b fa55 	bl	8018650 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	881b      	ldrh	r3, [r3, #0]
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	f7ff ffa4 	bl	800d0f8 <ptr_to_mem>
 800d1b0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800d1b2:	687a      	ldr	r2, [r7, #4]
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	429a      	cmp	r2, r3
 800d1b8:	d024      	beq.n	800d204 <plug_holes+0xc4>
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	791b      	ldrb	r3, [r3, #4]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d120      	bne.n	800d204 <plug_holes+0xc4>
 800d1c2:	4b2b      	ldr	r3, [pc, #172]	; (800d270 <plug_holes+0x130>)
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	68fa      	ldr	r2, [r7, #12]
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	d01b      	beq.n	800d204 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800d1cc:	4b2c      	ldr	r3, [pc, #176]	; (800d280 <plug_holes+0x140>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	68fa      	ldr	r2, [r7, #12]
 800d1d2:	429a      	cmp	r2, r3
 800d1d4:	d102      	bne.n	800d1dc <plug_holes+0x9c>
      lfree = mem;
 800d1d6:	4a2a      	ldr	r2, [pc, #168]	; (800d280 <plug_holes+0x140>)
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	881a      	ldrh	r2, [r3, #0]
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	881b      	ldrh	r3, [r3, #0]
 800d1e8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d1ec:	d00a      	beq.n	800d204 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	881b      	ldrh	r3, [r3, #0]
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f7ff ff80 	bl	800d0f8 <ptr_to_mem>
 800d1f8:	4604      	mov	r4, r0
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f7ff ff8e 	bl	800d11c <mem_to_ptr>
 800d200:	4603      	mov	r3, r0
 800d202:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	885b      	ldrh	r3, [r3, #2]
 800d208:	4618      	mov	r0, r3
 800d20a:	f7ff ff75 	bl	800d0f8 <ptr_to_mem>
 800d20e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800d210:	68ba      	ldr	r2, [r7, #8]
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	429a      	cmp	r2, r3
 800d216:	d01f      	beq.n	800d258 <plug_holes+0x118>
 800d218:	68bb      	ldr	r3, [r7, #8]
 800d21a:	791b      	ldrb	r3, [r3, #4]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d11b      	bne.n	800d258 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800d220:	4b17      	ldr	r3, [pc, #92]	; (800d280 <plug_holes+0x140>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	687a      	ldr	r2, [r7, #4]
 800d226:	429a      	cmp	r2, r3
 800d228:	d102      	bne.n	800d230 <plug_holes+0xf0>
      lfree = pmem;
 800d22a:	4a15      	ldr	r2, [pc, #84]	; (800d280 <plug_holes+0x140>)
 800d22c:	68bb      	ldr	r3, [r7, #8]
 800d22e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	881a      	ldrh	r2, [r3, #0]
 800d234:	68bb      	ldr	r3, [r7, #8]
 800d236:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	881b      	ldrh	r3, [r3, #0]
 800d23c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d240:	d00a      	beq.n	800d258 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	881b      	ldrh	r3, [r3, #0]
 800d246:	4618      	mov	r0, r3
 800d248:	f7ff ff56 	bl	800d0f8 <ptr_to_mem>
 800d24c:	4604      	mov	r4, r0
 800d24e:	68b8      	ldr	r0, [r7, #8]
 800d250:	f7ff ff64 	bl	800d11c <mem_to_ptr>
 800d254:	4603      	mov	r3, r0
 800d256:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800d258:	bf00      	nop
 800d25a:	3714      	adds	r7, #20
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd90      	pop	{r4, r7, pc}
 800d260:	2000a164 	.word	0x2000a164
 800d264:	0801aba4 	.word	0x0801aba4
 800d268:	0801abd4 	.word	0x0801abd4
 800d26c:	0801abec 	.word	0x0801abec
 800d270:	2000a168 	.word	0x2000a168
 800d274:	0801ac14 	.word	0x0801ac14
 800d278:	0801ac30 	.word	0x0801ac30
 800d27c:	0801ac4c 	.word	0x0801ac4c
 800d280:	2000a170 	.word	0x2000a170

0800d284 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b082      	sub	sp, #8
 800d288:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800d28a:	4b1f      	ldr	r3, [pc, #124]	; (800d308 <mem_init+0x84>)
 800d28c:	3303      	adds	r3, #3
 800d28e:	f023 0303 	bic.w	r3, r3, #3
 800d292:	461a      	mov	r2, r3
 800d294:	4b1d      	ldr	r3, [pc, #116]	; (800d30c <mem_init+0x88>)
 800d296:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800d298:	4b1c      	ldr	r3, [pc, #112]	; (800d30c <mem_init+0x88>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d2a4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d2b2:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800d2b6:	f7ff ff1f 	bl	800d0f8 <ptr_to_mem>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	4a14      	ldr	r2, [pc, #80]	; (800d310 <mem_init+0x8c>)
 800d2be:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800d2c0:	4b13      	ldr	r3, [pc, #76]	; (800d310 <mem_init+0x8c>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	2201      	movs	r2, #1
 800d2c6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d2c8:	4b11      	ldr	r3, [pc, #68]	; (800d310 <mem_init+0x8c>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d2d0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800d2d2:	4b0f      	ldr	r3, [pc, #60]	; (800d310 <mem_init+0x8c>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d2da:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800d2dc:	4b0b      	ldr	r3, [pc, #44]	; (800d30c <mem_init+0x88>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	4a0c      	ldr	r2, [pc, #48]	; (800d314 <mem_init+0x90>)
 800d2e2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800d2e4:	480c      	ldr	r0, [pc, #48]	; (800d318 <mem_init+0x94>)
 800d2e6:	f00b f8d3 	bl	8018490 <sys_mutex_new>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d006      	beq.n	800d2fe <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800d2f0:	4b0a      	ldr	r3, [pc, #40]	; (800d31c <mem_init+0x98>)
 800d2f2:	f240 221f 	movw	r2, #543	; 0x21f
 800d2f6:	490a      	ldr	r1, [pc, #40]	; (800d320 <mem_init+0x9c>)
 800d2f8:	480a      	ldr	r0, [pc, #40]	; (800d324 <mem_init+0xa0>)
 800d2fa:	f00b f9a9 	bl	8018650 <iprintf>
  }
}
 800d2fe:	bf00      	nop
 800d300:	3708      	adds	r7, #8
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}
 800d306:	bf00      	nop
 800d308:	20007950 	.word	0x20007950
 800d30c:	2000a164 	.word	0x2000a164
 800d310:	2000a168 	.word	0x2000a168
 800d314:	2000a170 	.word	0x2000a170
 800d318:	2000a16c 	.word	0x2000a16c
 800d31c:	0801aba4 	.word	0x0801aba4
 800d320:	0801ac78 	.word	0x0801ac78
 800d324:	0801abec 	.word	0x0801abec

0800d328 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b086      	sub	sp, #24
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f7ff fef3 	bl	800d11c <mem_to_ptr>
 800d336:	4603      	mov	r3, r0
 800d338:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	881b      	ldrh	r3, [r3, #0]
 800d33e:	4618      	mov	r0, r3
 800d340:	f7ff feda 	bl	800d0f8 <ptr_to_mem>
 800d344:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	885b      	ldrh	r3, [r3, #2]
 800d34a:	4618      	mov	r0, r3
 800d34c:	f7ff fed4 	bl	800d0f8 <ptr_to_mem>
 800d350:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	881b      	ldrh	r3, [r3, #0]
 800d356:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d35a:	d818      	bhi.n	800d38e <mem_link_valid+0x66>
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	885b      	ldrh	r3, [r3, #2]
 800d360:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d364:	d813      	bhi.n	800d38e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d36a:	8afa      	ldrh	r2, [r7, #22]
 800d36c:	429a      	cmp	r2, r3
 800d36e:	d004      	beq.n	800d37a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	881b      	ldrh	r3, [r3, #0]
 800d374:	8afa      	ldrh	r2, [r7, #22]
 800d376:	429a      	cmp	r2, r3
 800d378:	d109      	bne.n	800d38e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d37a:	4b08      	ldr	r3, [pc, #32]	; (800d39c <mem_link_valid+0x74>)
 800d37c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d37e:	693a      	ldr	r2, [r7, #16]
 800d380:	429a      	cmp	r2, r3
 800d382:	d006      	beq.n	800d392 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d384:	693b      	ldr	r3, [r7, #16]
 800d386:	885b      	ldrh	r3, [r3, #2]
 800d388:	8afa      	ldrh	r2, [r7, #22]
 800d38a:	429a      	cmp	r2, r3
 800d38c:	d001      	beq.n	800d392 <mem_link_valid+0x6a>
    return 0;
 800d38e:	2300      	movs	r3, #0
 800d390:	e000      	b.n	800d394 <mem_link_valid+0x6c>
  }
  return 1;
 800d392:	2301      	movs	r3, #1
}
 800d394:	4618      	mov	r0, r3
 800d396:	3718      	adds	r7, #24
 800d398:	46bd      	mov	sp, r7
 800d39a:	bd80      	pop	{r7, pc}
 800d39c:	2000a168 	.word	0x2000a168

0800d3a0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b088      	sub	sp, #32
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d070      	beq.n	800d490 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	f003 0303 	and.w	r3, r3, #3
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d00d      	beq.n	800d3d4 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d3b8:	4b37      	ldr	r3, [pc, #220]	; (800d498 <mem_free+0xf8>)
 800d3ba:	f240 2273 	movw	r2, #627	; 0x273
 800d3be:	4937      	ldr	r1, [pc, #220]	; (800d49c <mem_free+0xfc>)
 800d3c0:	4837      	ldr	r0, [pc, #220]	; (800d4a0 <mem_free+0x100>)
 800d3c2:	f00b f945 	bl	8018650 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d3c6:	f00b f8c1 	bl	801854c <sys_arch_protect>
 800d3ca:	60f8      	str	r0, [r7, #12]
 800d3cc:	68f8      	ldr	r0, [r7, #12]
 800d3ce:	f00b f8cb 	bl	8018568 <sys_arch_unprotect>
    return;
 800d3d2:	e05e      	b.n	800d492 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	3b08      	subs	r3, #8
 800d3d8:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d3da:	4b32      	ldr	r3, [pc, #200]	; (800d4a4 <mem_free+0x104>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	69fa      	ldr	r2, [r7, #28]
 800d3e0:	429a      	cmp	r2, r3
 800d3e2:	d306      	bcc.n	800d3f2 <mem_free+0x52>
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	f103 020c 	add.w	r2, r3, #12
 800d3ea:	4b2f      	ldr	r3, [pc, #188]	; (800d4a8 <mem_free+0x108>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	429a      	cmp	r2, r3
 800d3f0:	d90d      	bls.n	800d40e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d3f2:	4b29      	ldr	r3, [pc, #164]	; (800d498 <mem_free+0xf8>)
 800d3f4:	f240 227f 	movw	r2, #639	; 0x27f
 800d3f8:	492c      	ldr	r1, [pc, #176]	; (800d4ac <mem_free+0x10c>)
 800d3fa:	4829      	ldr	r0, [pc, #164]	; (800d4a0 <mem_free+0x100>)
 800d3fc:	f00b f928 	bl	8018650 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d400:	f00b f8a4 	bl	801854c <sys_arch_protect>
 800d404:	6138      	str	r0, [r7, #16]
 800d406:	6938      	ldr	r0, [r7, #16]
 800d408:	f00b f8ae 	bl	8018568 <sys_arch_unprotect>
    return;
 800d40c:	e041      	b.n	800d492 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d40e:	4828      	ldr	r0, [pc, #160]	; (800d4b0 <mem_free+0x110>)
 800d410:	f00b f85a 	bl	80184c8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800d414:	69fb      	ldr	r3, [r7, #28]
 800d416:	791b      	ldrb	r3, [r3, #4]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d110      	bne.n	800d43e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d41c:	4b1e      	ldr	r3, [pc, #120]	; (800d498 <mem_free+0xf8>)
 800d41e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800d422:	4924      	ldr	r1, [pc, #144]	; (800d4b4 <mem_free+0x114>)
 800d424:	481e      	ldr	r0, [pc, #120]	; (800d4a0 <mem_free+0x100>)
 800d426:	f00b f913 	bl	8018650 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d42a:	4821      	ldr	r0, [pc, #132]	; (800d4b0 <mem_free+0x110>)
 800d42c:	f00b f85b 	bl	80184e6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d430:	f00b f88c 	bl	801854c <sys_arch_protect>
 800d434:	6178      	str	r0, [r7, #20]
 800d436:	6978      	ldr	r0, [r7, #20]
 800d438:	f00b f896 	bl	8018568 <sys_arch_unprotect>
    return;
 800d43c:	e029      	b.n	800d492 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800d43e:	69f8      	ldr	r0, [r7, #28]
 800d440:	f7ff ff72 	bl	800d328 <mem_link_valid>
 800d444:	4603      	mov	r3, r0
 800d446:	2b00      	cmp	r3, #0
 800d448:	d110      	bne.n	800d46c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d44a:	4b13      	ldr	r3, [pc, #76]	; (800d498 <mem_free+0xf8>)
 800d44c:	f240 2295 	movw	r2, #661	; 0x295
 800d450:	4919      	ldr	r1, [pc, #100]	; (800d4b8 <mem_free+0x118>)
 800d452:	4813      	ldr	r0, [pc, #76]	; (800d4a0 <mem_free+0x100>)
 800d454:	f00b f8fc 	bl	8018650 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d458:	4815      	ldr	r0, [pc, #84]	; (800d4b0 <mem_free+0x110>)
 800d45a:	f00b f844 	bl	80184e6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d45e:	f00b f875 	bl	801854c <sys_arch_protect>
 800d462:	61b8      	str	r0, [r7, #24]
 800d464:	69b8      	ldr	r0, [r7, #24]
 800d466:	f00b f87f 	bl	8018568 <sys_arch_unprotect>
    return;
 800d46a:	e012      	b.n	800d492 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d46c:	69fb      	ldr	r3, [r7, #28]
 800d46e:	2200      	movs	r2, #0
 800d470:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d472:	4b12      	ldr	r3, [pc, #72]	; (800d4bc <mem_free+0x11c>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	69fa      	ldr	r2, [r7, #28]
 800d478:	429a      	cmp	r2, r3
 800d47a:	d202      	bcs.n	800d482 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d47c:	4a0f      	ldr	r2, [pc, #60]	; (800d4bc <mem_free+0x11c>)
 800d47e:	69fb      	ldr	r3, [r7, #28]
 800d480:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d482:	69f8      	ldr	r0, [r7, #28]
 800d484:	f7ff fe5c 	bl	800d140 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d488:	4809      	ldr	r0, [pc, #36]	; (800d4b0 <mem_free+0x110>)
 800d48a:	f00b f82c 	bl	80184e6 <sys_mutex_unlock>
 800d48e:	e000      	b.n	800d492 <mem_free+0xf2>
    return;
 800d490:	bf00      	nop
}
 800d492:	3720      	adds	r7, #32
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}
 800d498:	0801aba4 	.word	0x0801aba4
 800d49c:	0801ac94 	.word	0x0801ac94
 800d4a0:	0801abec 	.word	0x0801abec
 800d4a4:	2000a164 	.word	0x2000a164
 800d4a8:	2000a168 	.word	0x2000a168
 800d4ac:	0801acb8 	.word	0x0801acb8
 800d4b0:	2000a16c 	.word	0x2000a16c
 800d4b4:	0801acd4 	.word	0x0801acd4
 800d4b8:	0801acfc 	.word	0x0801acfc
 800d4bc:	2000a170 	.word	0x2000a170

0800d4c0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b088      	sub	sp, #32
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	460b      	mov	r3, r1
 800d4ca:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d4cc:	887b      	ldrh	r3, [r7, #2]
 800d4ce:	3303      	adds	r3, #3
 800d4d0:	b29b      	uxth	r3, r3
 800d4d2:	f023 0303 	bic.w	r3, r3, #3
 800d4d6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d4d8:	8bfb      	ldrh	r3, [r7, #30]
 800d4da:	2b0b      	cmp	r3, #11
 800d4dc:	d801      	bhi.n	800d4e2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d4de:	230c      	movs	r3, #12
 800d4e0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d4e2:	8bfb      	ldrh	r3, [r7, #30]
 800d4e4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d4e8:	d803      	bhi.n	800d4f2 <mem_trim+0x32>
 800d4ea:	8bfa      	ldrh	r2, [r7, #30]
 800d4ec:	887b      	ldrh	r3, [r7, #2]
 800d4ee:	429a      	cmp	r2, r3
 800d4f0:	d201      	bcs.n	800d4f6 <mem_trim+0x36>
    return NULL;
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	e0d8      	b.n	800d6a8 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d4f6:	4b6e      	ldr	r3, [pc, #440]	; (800d6b0 <mem_trim+0x1f0>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	687a      	ldr	r2, [r7, #4]
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	d304      	bcc.n	800d50a <mem_trim+0x4a>
 800d500:	4b6c      	ldr	r3, [pc, #432]	; (800d6b4 <mem_trim+0x1f4>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	687a      	ldr	r2, [r7, #4]
 800d506:	429a      	cmp	r2, r3
 800d508:	d306      	bcc.n	800d518 <mem_trim+0x58>
 800d50a:	4b6b      	ldr	r3, [pc, #428]	; (800d6b8 <mem_trim+0x1f8>)
 800d50c:	f240 22d1 	movw	r2, #721	; 0x2d1
 800d510:	496a      	ldr	r1, [pc, #424]	; (800d6bc <mem_trim+0x1fc>)
 800d512:	486b      	ldr	r0, [pc, #428]	; (800d6c0 <mem_trim+0x200>)
 800d514:	f00b f89c 	bl	8018650 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d518:	4b65      	ldr	r3, [pc, #404]	; (800d6b0 <mem_trim+0x1f0>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	687a      	ldr	r2, [r7, #4]
 800d51e:	429a      	cmp	r2, r3
 800d520:	d304      	bcc.n	800d52c <mem_trim+0x6c>
 800d522:	4b64      	ldr	r3, [pc, #400]	; (800d6b4 <mem_trim+0x1f4>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	687a      	ldr	r2, [r7, #4]
 800d528:	429a      	cmp	r2, r3
 800d52a:	d307      	bcc.n	800d53c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d52c:	f00b f80e 	bl	801854c <sys_arch_protect>
 800d530:	60b8      	str	r0, [r7, #8]
 800d532:	68b8      	ldr	r0, [r7, #8]
 800d534:	f00b f818 	bl	8018568 <sys_arch_unprotect>
    return rmem;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	e0b5      	b.n	800d6a8 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	3b08      	subs	r3, #8
 800d540:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d542:	69b8      	ldr	r0, [r7, #24]
 800d544:	f7ff fdea 	bl	800d11c <mem_to_ptr>
 800d548:	4603      	mov	r3, r0
 800d54a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d54c:	69bb      	ldr	r3, [r7, #24]
 800d54e:	881a      	ldrh	r2, [r3, #0]
 800d550:	8afb      	ldrh	r3, [r7, #22]
 800d552:	1ad3      	subs	r3, r2, r3
 800d554:	b29b      	uxth	r3, r3
 800d556:	3b08      	subs	r3, #8
 800d558:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d55a:	8bfa      	ldrh	r2, [r7, #30]
 800d55c:	8abb      	ldrh	r3, [r7, #20]
 800d55e:	429a      	cmp	r2, r3
 800d560:	d906      	bls.n	800d570 <mem_trim+0xb0>
 800d562:	4b55      	ldr	r3, [pc, #340]	; (800d6b8 <mem_trim+0x1f8>)
 800d564:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800d568:	4956      	ldr	r1, [pc, #344]	; (800d6c4 <mem_trim+0x204>)
 800d56a:	4855      	ldr	r0, [pc, #340]	; (800d6c0 <mem_trim+0x200>)
 800d56c:	f00b f870 	bl	8018650 <iprintf>
  if (newsize > size) {
 800d570:	8bfa      	ldrh	r2, [r7, #30]
 800d572:	8abb      	ldrh	r3, [r7, #20]
 800d574:	429a      	cmp	r2, r3
 800d576:	d901      	bls.n	800d57c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800d578:	2300      	movs	r3, #0
 800d57a:	e095      	b.n	800d6a8 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800d57c:	8bfa      	ldrh	r2, [r7, #30]
 800d57e:	8abb      	ldrh	r3, [r7, #20]
 800d580:	429a      	cmp	r2, r3
 800d582:	d101      	bne.n	800d588 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	e08f      	b.n	800d6a8 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d588:	484f      	ldr	r0, [pc, #316]	; (800d6c8 <mem_trim+0x208>)
 800d58a:	f00a ff9d 	bl	80184c8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800d58e:	69bb      	ldr	r3, [r7, #24]
 800d590:	881b      	ldrh	r3, [r3, #0]
 800d592:	4618      	mov	r0, r3
 800d594:	f7ff fdb0 	bl	800d0f8 <ptr_to_mem>
 800d598:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d59a:	693b      	ldr	r3, [r7, #16]
 800d59c:	791b      	ldrb	r3, [r3, #4]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d13f      	bne.n	800d622 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d5a2:	69bb      	ldr	r3, [r7, #24]
 800d5a4:	881b      	ldrh	r3, [r3, #0]
 800d5a6:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d5aa:	d106      	bne.n	800d5ba <mem_trim+0xfa>
 800d5ac:	4b42      	ldr	r3, [pc, #264]	; (800d6b8 <mem_trim+0x1f8>)
 800d5ae:	f240 22f5 	movw	r2, #757	; 0x2f5
 800d5b2:	4946      	ldr	r1, [pc, #280]	; (800d6cc <mem_trim+0x20c>)
 800d5b4:	4842      	ldr	r0, [pc, #264]	; (800d6c0 <mem_trim+0x200>)
 800d5b6:	f00b f84b 	bl	8018650 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800d5ba:	693b      	ldr	r3, [r7, #16]
 800d5bc:	881b      	ldrh	r3, [r3, #0]
 800d5be:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d5c0:	8afa      	ldrh	r2, [r7, #22]
 800d5c2:	8bfb      	ldrh	r3, [r7, #30]
 800d5c4:	4413      	add	r3, r2
 800d5c6:	b29b      	uxth	r3, r3
 800d5c8:	3308      	adds	r3, #8
 800d5ca:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800d5cc:	4b40      	ldr	r3, [pc, #256]	; (800d6d0 <mem_trim+0x210>)
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	693a      	ldr	r2, [r7, #16]
 800d5d2:	429a      	cmp	r2, r3
 800d5d4:	d106      	bne.n	800d5e4 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800d5d6:	89fb      	ldrh	r3, [r7, #14]
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f7ff fd8d 	bl	800d0f8 <ptr_to_mem>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	4a3b      	ldr	r2, [pc, #236]	; (800d6d0 <mem_trim+0x210>)
 800d5e2:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d5e4:	89fb      	ldrh	r3, [r7, #14]
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f7ff fd86 	bl	800d0f8 <ptr_to_mem>
 800d5ec:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d5ee:	693b      	ldr	r3, [r7, #16]
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d5f4:	693b      	ldr	r3, [r7, #16]
 800d5f6:	89ba      	ldrh	r2, [r7, #12]
 800d5f8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d5fa:	693b      	ldr	r3, [r7, #16]
 800d5fc:	8afa      	ldrh	r2, [r7, #22]
 800d5fe:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d600:	69bb      	ldr	r3, [r7, #24]
 800d602:	89fa      	ldrh	r2, [r7, #14]
 800d604:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d606:	693b      	ldr	r3, [r7, #16]
 800d608:	881b      	ldrh	r3, [r3, #0]
 800d60a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d60e:	d047      	beq.n	800d6a0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d610:	693b      	ldr	r3, [r7, #16]
 800d612:	881b      	ldrh	r3, [r3, #0]
 800d614:	4618      	mov	r0, r3
 800d616:	f7ff fd6f 	bl	800d0f8 <ptr_to_mem>
 800d61a:	4602      	mov	r2, r0
 800d61c:	89fb      	ldrh	r3, [r7, #14]
 800d61e:	8053      	strh	r3, [r2, #2]
 800d620:	e03e      	b.n	800d6a0 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d622:	8bfb      	ldrh	r3, [r7, #30]
 800d624:	f103 0214 	add.w	r2, r3, #20
 800d628:	8abb      	ldrh	r3, [r7, #20]
 800d62a:	429a      	cmp	r2, r3
 800d62c:	d838      	bhi.n	800d6a0 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d62e:	8afa      	ldrh	r2, [r7, #22]
 800d630:	8bfb      	ldrh	r3, [r7, #30]
 800d632:	4413      	add	r3, r2
 800d634:	b29b      	uxth	r3, r3
 800d636:	3308      	adds	r3, #8
 800d638:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d63a:	69bb      	ldr	r3, [r7, #24]
 800d63c:	881b      	ldrh	r3, [r3, #0]
 800d63e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d642:	d106      	bne.n	800d652 <mem_trim+0x192>
 800d644:	4b1c      	ldr	r3, [pc, #112]	; (800d6b8 <mem_trim+0x1f8>)
 800d646:	f240 3216 	movw	r2, #790	; 0x316
 800d64a:	4920      	ldr	r1, [pc, #128]	; (800d6cc <mem_trim+0x20c>)
 800d64c:	481c      	ldr	r0, [pc, #112]	; (800d6c0 <mem_trim+0x200>)
 800d64e:	f00a ffff 	bl	8018650 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800d652:	89fb      	ldrh	r3, [r7, #14]
 800d654:	4618      	mov	r0, r3
 800d656:	f7ff fd4f 	bl	800d0f8 <ptr_to_mem>
 800d65a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d65c:	4b1c      	ldr	r3, [pc, #112]	; (800d6d0 <mem_trim+0x210>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	693a      	ldr	r2, [r7, #16]
 800d662:	429a      	cmp	r2, r3
 800d664:	d202      	bcs.n	800d66c <mem_trim+0x1ac>
      lfree = mem2;
 800d666:	4a1a      	ldr	r2, [pc, #104]	; (800d6d0 <mem_trim+0x210>)
 800d668:	693b      	ldr	r3, [r7, #16]
 800d66a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800d66c:	693b      	ldr	r3, [r7, #16]
 800d66e:	2200      	movs	r2, #0
 800d670:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800d672:	69bb      	ldr	r3, [r7, #24]
 800d674:	881a      	ldrh	r2, [r3, #0]
 800d676:	693b      	ldr	r3, [r7, #16]
 800d678:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800d67a:	693b      	ldr	r3, [r7, #16]
 800d67c:	8afa      	ldrh	r2, [r7, #22]
 800d67e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800d680:	69bb      	ldr	r3, [r7, #24]
 800d682:	89fa      	ldrh	r2, [r7, #14]
 800d684:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d686:	693b      	ldr	r3, [r7, #16]
 800d688:	881b      	ldrh	r3, [r3, #0]
 800d68a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d68e:	d007      	beq.n	800d6a0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d690:	693b      	ldr	r3, [r7, #16]
 800d692:	881b      	ldrh	r3, [r3, #0]
 800d694:	4618      	mov	r0, r3
 800d696:	f7ff fd2f 	bl	800d0f8 <ptr_to_mem>
 800d69a:	4602      	mov	r2, r0
 800d69c:	89fb      	ldrh	r3, [r7, #14]
 800d69e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d6a0:	4809      	ldr	r0, [pc, #36]	; (800d6c8 <mem_trim+0x208>)
 800d6a2:	f00a ff20 	bl	80184e6 <sys_mutex_unlock>
  return rmem;
 800d6a6:	687b      	ldr	r3, [r7, #4]
}
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	3720      	adds	r7, #32
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	bd80      	pop	{r7, pc}
 800d6b0:	2000a164 	.word	0x2000a164
 800d6b4:	2000a168 	.word	0x2000a168
 800d6b8:	0801aba4 	.word	0x0801aba4
 800d6bc:	0801ad30 	.word	0x0801ad30
 800d6c0:	0801abec 	.word	0x0801abec
 800d6c4:	0801ad48 	.word	0x0801ad48
 800d6c8:	2000a16c 	.word	0x2000a16c
 800d6cc:	0801ad68 	.word	0x0801ad68
 800d6d0:	2000a170 	.word	0x2000a170

0800d6d4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b088      	sub	sp, #32
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	4603      	mov	r3, r0
 800d6dc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d6de:	88fb      	ldrh	r3, [r7, #6]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d101      	bne.n	800d6e8 <mem_malloc+0x14>
    return NULL;
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	e0e2      	b.n	800d8ae <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d6e8:	88fb      	ldrh	r3, [r7, #6]
 800d6ea:	3303      	adds	r3, #3
 800d6ec:	b29b      	uxth	r3, r3
 800d6ee:	f023 0303 	bic.w	r3, r3, #3
 800d6f2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d6f4:	8bbb      	ldrh	r3, [r7, #28]
 800d6f6:	2b0b      	cmp	r3, #11
 800d6f8:	d801      	bhi.n	800d6fe <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d6fa:	230c      	movs	r3, #12
 800d6fc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d6fe:	8bbb      	ldrh	r3, [r7, #28]
 800d700:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d704:	d803      	bhi.n	800d70e <mem_malloc+0x3a>
 800d706:	8bba      	ldrh	r2, [r7, #28]
 800d708:	88fb      	ldrh	r3, [r7, #6]
 800d70a:	429a      	cmp	r2, r3
 800d70c:	d201      	bcs.n	800d712 <mem_malloc+0x3e>
    return NULL;
 800d70e:	2300      	movs	r3, #0
 800d710:	e0cd      	b.n	800d8ae <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800d712:	4869      	ldr	r0, [pc, #420]	; (800d8b8 <mem_malloc+0x1e4>)
 800d714:	f00a fed8 	bl	80184c8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d718:	4b68      	ldr	r3, [pc, #416]	; (800d8bc <mem_malloc+0x1e8>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	4618      	mov	r0, r3
 800d71e:	f7ff fcfd 	bl	800d11c <mem_to_ptr>
 800d722:	4603      	mov	r3, r0
 800d724:	83fb      	strh	r3, [r7, #30]
 800d726:	e0b7      	b.n	800d898 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d728:	8bfb      	ldrh	r3, [r7, #30]
 800d72a:	4618      	mov	r0, r3
 800d72c:	f7ff fce4 	bl	800d0f8 <ptr_to_mem>
 800d730:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d732:	697b      	ldr	r3, [r7, #20]
 800d734:	791b      	ldrb	r3, [r3, #4]
 800d736:	2b00      	cmp	r3, #0
 800d738:	f040 80a7 	bne.w	800d88a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d73c:	697b      	ldr	r3, [r7, #20]
 800d73e:	881b      	ldrh	r3, [r3, #0]
 800d740:	461a      	mov	r2, r3
 800d742:	8bfb      	ldrh	r3, [r7, #30]
 800d744:	1ad3      	subs	r3, r2, r3
 800d746:	f1a3 0208 	sub.w	r2, r3, #8
 800d74a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d74c:	429a      	cmp	r2, r3
 800d74e:	f0c0 809c 	bcc.w	800d88a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d752:	697b      	ldr	r3, [r7, #20]
 800d754:	881b      	ldrh	r3, [r3, #0]
 800d756:	461a      	mov	r2, r3
 800d758:	8bfb      	ldrh	r3, [r7, #30]
 800d75a:	1ad3      	subs	r3, r2, r3
 800d75c:	f1a3 0208 	sub.w	r2, r3, #8
 800d760:	8bbb      	ldrh	r3, [r7, #28]
 800d762:	3314      	adds	r3, #20
 800d764:	429a      	cmp	r2, r3
 800d766:	d333      	bcc.n	800d7d0 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d768:	8bfa      	ldrh	r2, [r7, #30]
 800d76a:	8bbb      	ldrh	r3, [r7, #28]
 800d76c:	4413      	add	r3, r2
 800d76e:	b29b      	uxth	r3, r3
 800d770:	3308      	adds	r3, #8
 800d772:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d774:	8a7b      	ldrh	r3, [r7, #18]
 800d776:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d77a:	d106      	bne.n	800d78a <mem_malloc+0xb6>
 800d77c:	4b50      	ldr	r3, [pc, #320]	; (800d8c0 <mem_malloc+0x1ec>)
 800d77e:	f240 3287 	movw	r2, #903	; 0x387
 800d782:	4950      	ldr	r1, [pc, #320]	; (800d8c4 <mem_malloc+0x1f0>)
 800d784:	4850      	ldr	r0, [pc, #320]	; (800d8c8 <mem_malloc+0x1f4>)
 800d786:	f00a ff63 	bl	8018650 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d78a:	8a7b      	ldrh	r3, [r7, #18]
 800d78c:	4618      	mov	r0, r3
 800d78e:	f7ff fcb3 	bl	800d0f8 <ptr_to_mem>
 800d792:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	2200      	movs	r2, #0
 800d798:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d79a:	697b      	ldr	r3, [r7, #20]
 800d79c:	881a      	ldrh	r2, [r3, #0]
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	8bfa      	ldrh	r2, [r7, #30]
 800d7a6:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d7a8:	697b      	ldr	r3, [r7, #20]
 800d7aa:	8a7a      	ldrh	r2, [r7, #18]
 800d7ac:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d7ae:	697b      	ldr	r3, [r7, #20]
 800d7b0:	2201      	movs	r2, #1
 800d7b2:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	881b      	ldrh	r3, [r3, #0]
 800d7b8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d7bc:	d00b      	beq.n	800d7d6 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	881b      	ldrh	r3, [r3, #0]
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f7ff fc98 	bl	800d0f8 <ptr_to_mem>
 800d7c8:	4602      	mov	r2, r0
 800d7ca:	8a7b      	ldrh	r3, [r7, #18]
 800d7cc:	8053      	strh	r3, [r2, #2]
 800d7ce:	e002      	b.n	800d7d6 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d7d0:	697b      	ldr	r3, [r7, #20]
 800d7d2:	2201      	movs	r2, #1
 800d7d4:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d7d6:	4b39      	ldr	r3, [pc, #228]	; (800d8bc <mem_malloc+0x1e8>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	697a      	ldr	r2, [r7, #20]
 800d7dc:	429a      	cmp	r2, r3
 800d7de:	d127      	bne.n	800d830 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800d7e0:	4b36      	ldr	r3, [pc, #216]	; (800d8bc <mem_malloc+0x1e8>)
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d7e6:	e005      	b.n	800d7f4 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d7e8:	69bb      	ldr	r3, [r7, #24]
 800d7ea:	881b      	ldrh	r3, [r3, #0]
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	f7ff fc83 	bl	800d0f8 <ptr_to_mem>
 800d7f2:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d7f4:	69bb      	ldr	r3, [r7, #24]
 800d7f6:	791b      	ldrb	r3, [r3, #4]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d004      	beq.n	800d806 <mem_malloc+0x132>
 800d7fc:	4b33      	ldr	r3, [pc, #204]	; (800d8cc <mem_malloc+0x1f8>)
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	69ba      	ldr	r2, [r7, #24]
 800d802:	429a      	cmp	r2, r3
 800d804:	d1f0      	bne.n	800d7e8 <mem_malloc+0x114>
          }
          lfree = cur;
 800d806:	4a2d      	ldr	r2, [pc, #180]	; (800d8bc <mem_malloc+0x1e8>)
 800d808:	69bb      	ldr	r3, [r7, #24]
 800d80a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d80c:	4b2b      	ldr	r3, [pc, #172]	; (800d8bc <mem_malloc+0x1e8>)
 800d80e:	681a      	ldr	r2, [r3, #0]
 800d810:	4b2e      	ldr	r3, [pc, #184]	; (800d8cc <mem_malloc+0x1f8>)
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	429a      	cmp	r2, r3
 800d816:	d00b      	beq.n	800d830 <mem_malloc+0x15c>
 800d818:	4b28      	ldr	r3, [pc, #160]	; (800d8bc <mem_malloc+0x1e8>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	791b      	ldrb	r3, [r3, #4]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d006      	beq.n	800d830 <mem_malloc+0x15c>
 800d822:	4b27      	ldr	r3, [pc, #156]	; (800d8c0 <mem_malloc+0x1ec>)
 800d824:	f240 32b5 	movw	r2, #949	; 0x3b5
 800d828:	4929      	ldr	r1, [pc, #164]	; (800d8d0 <mem_malloc+0x1fc>)
 800d82a:	4827      	ldr	r0, [pc, #156]	; (800d8c8 <mem_malloc+0x1f4>)
 800d82c:	f00a ff10 	bl	8018650 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800d830:	4821      	ldr	r0, [pc, #132]	; (800d8b8 <mem_malloc+0x1e4>)
 800d832:	f00a fe58 	bl	80184e6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d836:	8bba      	ldrh	r2, [r7, #28]
 800d838:	697b      	ldr	r3, [r7, #20]
 800d83a:	4413      	add	r3, r2
 800d83c:	3308      	adds	r3, #8
 800d83e:	4a23      	ldr	r2, [pc, #140]	; (800d8cc <mem_malloc+0x1f8>)
 800d840:	6812      	ldr	r2, [r2, #0]
 800d842:	4293      	cmp	r3, r2
 800d844:	d906      	bls.n	800d854 <mem_malloc+0x180>
 800d846:	4b1e      	ldr	r3, [pc, #120]	; (800d8c0 <mem_malloc+0x1ec>)
 800d848:	f240 32b9 	movw	r2, #953	; 0x3b9
 800d84c:	4921      	ldr	r1, [pc, #132]	; (800d8d4 <mem_malloc+0x200>)
 800d84e:	481e      	ldr	r0, [pc, #120]	; (800d8c8 <mem_malloc+0x1f4>)
 800d850:	f00a fefe 	bl	8018650 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d854:	697b      	ldr	r3, [r7, #20]
 800d856:	f003 0303 	and.w	r3, r3, #3
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d006      	beq.n	800d86c <mem_malloc+0x198>
 800d85e:	4b18      	ldr	r3, [pc, #96]	; (800d8c0 <mem_malloc+0x1ec>)
 800d860:	f240 32bb 	movw	r2, #955	; 0x3bb
 800d864:	491c      	ldr	r1, [pc, #112]	; (800d8d8 <mem_malloc+0x204>)
 800d866:	4818      	ldr	r0, [pc, #96]	; (800d8c8 <mem_malloc+0x1f4>)
 800d868:	f00a fef2 	bl	8018650 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d86c:	697b      	ldr	r3, [r7, #20]
 800d86e:	f003 0303 	and.w	r3, r3, #3
 800d872:	2b00      	cmp	r3, #0
 800d874:	d006      	beq.n	800d884 <mem_malloc+0x1b0>
 800d876:	4b12      	ldr	r3, [pc, #72]	; (800d8c0 <mem_malloc+0x1ec>)
 800d878:	f240 32bd 	movw	r2, #957	; 0x3bd
 800d87c:	4917      	ldr	r1, [pc, #92]	; (800d8dc <mem_malloc+0x208>)
 800d87e:	4812      	ldr	r0, [pc, #72]	; (800d8c8 <mem_malloc+0x1f4>)
 800d880:	f00a fee6 	bl	8018650 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d884:	697b      	ldr	r3, [r7, #20]
 800d886:	3308      	adds	r3, #8
 800d888:	e011      	b.n	800d8ae <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800d88a:	8bfb      	ldrh	r3, [r7, #30]
 800d88c:	4618      	mov	r0, r3
 800d88e:	f7ff fc33 	bl	800d0f8 <ptr_to_mem>
 800d892:	4603      	mov	r3, r0
 800d894:	881b      	ldrh	r3, [r3, #0]
 800d896:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d898:	8bfa      	ldrh	r2, [r7, #30]
 800d89a:	8bbb      	ldrh	r3, [r7, #28]
 800d89c:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 800d8a0:	429a      	cmp	r2, r3
 800d8a2:	f4ff af41 	bcc.w	800d728 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800d8a6:	4804      	ldr	r0, [pc, #16]	; (800d8b8 <mem_malloc+0x1e4>)
 800d8a8:	f00a fe1d 	bl	80184e6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d8ac:	2300      	movs	r3, #0
}
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	3720      	adds	r7, #32
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}
 800d8b6:	bf00      	nop
 800d8b8:	2000a16c 	.word	0x2000a16c
 800d8bc:	2000a170 	.word	0x2000a170
 800d8c0:	0801aba4 	.word	0x0801aba4
 800d8c4:	0801ad68 	.word	0x0801ad68
 800d8c8:	0801abec 	.word	0x0801abec
 800d8cc:	2000a168 	.word	0x2000a168
 800d8d0:	0801ad7c 	.word	0x0801ad7c
 800d8d4:	0801ad98 	.word	0x0801ad98
 800d8d8:	0801adc8 	.word	0x0801adc8
 800d8dc:	0801adf8 	.word	0x0801adf8

0800d8e0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d8e0:	b480      	push	{r7}
 800d8e2:	b085      	sub	sp, #20
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	689b      	ldr	r3, [r3, #8]
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	685b      	ldr	r3, [r3, #4]
 800d8f4:	3303      	adds	r3, #3
 800d8f6:	f023 0303 	bic.w	r3, r3, #3
 800d8fa:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	60fb      	str	r3, [r7, #12]
 800d900:	e011      	b.n	800d926 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	689b      	ldr	r3, [r3, #8]
 800d906:	681a      	ldr	r2, [r3, #0]
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	689b      	ldr	r3, [r3, #8]
 800d910:	68ba      	ldr	r2, [r7, #8]
 800d912:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	881b      	ldrh	r3, [r3, #0]
 800d918:	461a      	mov	r2, r3
 800d91a:	68bb      	ldr	r3, [r7, #8]
 800d91c:	4413      	add	r3, r2
 800d91e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	3301      	adds	r3, #1
 800d924:	60fb      	str	r3, [r7, #12]
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	885b      	ldrh	r3, [r3, #2]
 800d92a:	461a      	mov	r2, r3
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	4293      	cmp	r3, r2
 800d930:	dbe7      	blt.n	800d902 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d932:	bf00      	nop
 800d934:	bf00      	nop
 800d936:	3714      	adds	r7, #20
 800d938:	46bd      	mov	sp, r7
 800d93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93e:	4770      	bx	lr

0800d940 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b082      	sub	sp, #8
 800d944:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d946:	2300      	movs	r3, #0
 800d948:	80fb      	strh	r3, [r7, #6]
 800d94a:	e009      	b.n	800d960 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d94c:	88fb      	ldrh	r3, [r7, #6]
 800d94e:	4a08      	ldr	r2, [pc, #32]	; (800d970 <memp_init+0x30>)
 800d950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d954:	4618      	mov	r0, r3
 800d956:	f7ff ffc3 	bl	800d8e0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d95a:	88fb      	ldrh	r3, [r7, #6]
 800d95c:	3301      	adds	r3, #1
 800d95e:	80fb      	strh	r3, [r7, #6]
 800d960:	88fb      	ldrh	r3, [r7, #6]
 800d962:	2b0c      	cmp	r3, #12
 800d964:	d9f2      	bls.n	800d94c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d966:	bf00      	nop
 800d968:	bf00      	nop
 800d96a:	3708      	adds	r7, #8
 800d96c:	46bd      	mov	sp, r7
 800d96e:	bd80      	pop	{r7, pc}
 800d970:	0801d6b8 	.word	0x0801d6b8

0800d974 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b084      	sub	sp, #16
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800d97c:	f00a fde6 	bl	801854c <sys_arch_protect>
 800d980:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	689b      	ldr	r3, [r3, #8]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d015      	beq.n	800d9bc <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	689b      	ldr	r3, [r3, #8]
 800d994:	68ba      	ldr	r2, [r7, #8]
 800d996:	6812      	ldr	r2, [r2, #0]
 800d998:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	f003 0303 	and.w	r3, r3, #3
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d006      	beq.n	800d9b2 <do_memp_malloc_pool+0x3e>
 800d9a4:	4b09      	ldr	r3, [pc, #36]	; (800d9cc <do_memp_malloc_pool+0x58>)
 800d9a6:	f44f 728c 	mov.w	r2, #280	; 0x118
 800d9aa:	4909      	ldr	r1, [pc, #36]	; (800d9d0 <do_memp_malloc_pool+0x5c>)
 800d9ac:	4809      	ldr	r0, [pc, #36]	; (800d9d4 <do_memp_malloc_pool+0x60>)
 800d9ae:	f00a fe4f 	bl	8018650 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d9b2:	68f8      	ldr	r0, [r7, #12]
 800d9b4:	f00a fdd8 	bl	8018568 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d9b8:	68bb      	ldr	r3, [r7, #8]
 800d9ba:	e003      	b.n	800d9c4 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d9bc:	68f8      	ldr	r0, [r7, #12]
 800d9be:	f00a fdd3 	bl	8018568 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d9c2:	2300      	movs	r3, #0
}
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	3710      	adds	r7, #16
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	bd80      	pop	{r7, pc}
 800d9cc:	0801ae1c 	.word	0x0801ae1c
 800d9d0:	0801ae4c 	.word	0x0801ae4c
 800d9d4:	0801ae70 	.word	0x0801ae70

0800d9d8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b084      	sub	sp, #16
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	4603      	mov	r3, r0
 800d9e0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d9e2:	79fb      	ldrb	r3, [r7, #7]
 800d9e4:	2b0c      	cmp	r3, #12
 800d9e6:	d908      	bls.n	800d9fa <memp_malloc+0x22>
 800d9e8:	4b0a      	ldr	r3, [pc, #40]	; (800da14 <memp_malloc+0x3c>)
 800d9ea:	f240 1257 	movw	r2, #343	; 0x157
 800d9ee:	490a      	ldr	r1, [pc, #40]	; (800da18 <memp_malloc+0x40>)
 800d9f0:	480a      	ldr	r0, [pc, #40]	; (800da1c <memp_malloc+0x44>)
 800d9f2:	f00a fe2d 	bl	8018650 <iprintf>
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	e008      	b.n	800da0c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d9fa:	79fb      	ldrb	r3, [r7, #7]
 800d9fc:	4a08      	ldr	r2, [pc, #32]	; (800da20 <memp_malloc+0x48>)
 800d9fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da02:	4618      	mov	r0, r3
 800da04:	f7ff ffb6 	bl	800d974 <do_memp_malloc_pool>
 800da08:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800da0a:	68fb      	ldr	r3, [r7, #12]
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3710      	adds	r7, #16
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}
 800da14:	0801ae1c 	.word	0x0801ae1c
 800da18:	0801aeac 	.word	0x0801aeac
 800da1c:	0801ae70 	.word	0x0801ae70
 800da20:	0801d6b8 	.word	0x0801d6b8

0800da24 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b084      	sub	sp, #16
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
 800da2c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	f003 0303 	and.w	r3, r3, #3
 800da34:	2b00      	cmp	r3, #0
 800da36:	d006      	beq.n	800da46 <do_memp_free_pool+0x22>
 800da38:	4b0d      	ldr	r3, [pc, #52]	; (800da70 <do_memp_free_pool+0x4c>)
 800da3a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800da3e:	490d      	ldr	r1, [pc, #52]	; (800da74 <do_memp_free_pool+0x50>)
 800da40:	480d      	ldr	r0, [pc, #52]	; (800da78 <do_memp_free_pool+0x54>)
 800da42:	f00a fe05 	bl	8018650 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800da4a:	f00a fd7f 	bl	801854c <sys_arch_protect>
 800da4e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	689b      	ldr	r3, [r3, #8]
 800da54:	681a      	ldr	r2, [r3, #0]
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	689b      	ldr	r3, [r3, #8]
 800da5e:	68fa      	ldr	r2, [r7, #12]
 800da60:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800da62:	68b8      	ldr	r0, [r7, #8]
 800da64:	f00a fd80 	bl	8018568 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800da68:	bf00      	nop
 800da6a:	3710      	adds	r7, #16
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}
 800da70:	0801ae1c 	.word	0x0801ae1c
 800da74:	0801aecc 	.word	0x0801aecc
 800da78:	0801ae70 	.word	0x0801ae70

0800da7c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b082      	sub	sp, #8
 800da80:	af00      	add	r7, sp, #0
 800da82:	4603      	mov	r3, r0
 800da84:	6039      	str	r1, [r7, #0]
 800da86:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800da88:	79fb      	ldrb	r3, [r7, #7]
 800da8a:	2b0c      	cmp	r3, #12
 800da8c:	d907      	bls.n	800da9e <memp_free+0x22>
 800da8e:	4b0c      	ldr	r3, [pc, #48]	; (800dac0 <memp_free+0x44>)
 800da90:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800da94:	490b      	ldr	r1, [pc, #44]	; (800dac4 <memp_free+0x48>)
 800da96:	480c      	ldr	r0, [pc, #48]	; (800dac8 <memp_free+0x4c>)
 800da98:	f00a fdda 	bl	8018650 <iprintf>
 800da9c:	e00c      	b.n	800dab8 <memp_free+0x3c>

  if (mem == NULL) {
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d008      	beq.n	800dab6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800daa4:	79fb      	ldrb	r3, [r7, #7]
 800daa6:	4a09      	ldr	r2, [pc, #36]	; (800dacc <memp_free+0x50>)
 800daa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800daac:	6839      	ldr	r1, [r7, #0]
 800daae:	4618      	mov	r0, r3
 800dab0:	f7ff ffb8 	bl	800da24 <do_memp_free_pool>
 800dab4:	e000      	b.n	800dab8 <memp_free+0x3c>
    return;
 800dab6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800dab8:	3708      	adds	r7, #8
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd80      	pop	{r7, pc}
 800dabe:	bf00      	nop
 800dac0:	0801ae1c 	.word	0x0801ae1c
 800dac4:	0801aeec 	.word	0x0801aeec
 800dac8:	0801ae70 	.word	0x0801ae70
 800dacc:	0801d6b8 	.word	0x0801d6b8

0800dad0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800dad0:	b480      	push	{r7}
 800dad2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800dad4:	bf00      	nop
 800dad6:	46bd      	mov	sp, r7
 800dad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dadc:	4770      	bx	lr
	...

0800dae0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b086      	sub	sp, #24
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	60f8      	str	r0, [r7, #12]
 800dae8:	60b9      	str	r1, [r7, #8]
 800daea:	607a      	str	r2, [r7, #4]
 800daec:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d108      	bne.n	800db06 <netif_add+0x26>
 800daf4:	4b57      	ldr	r3, [pc, #348]	; (800dc54 <netif_add+0x174>)
 800daf6:	f240 1227 	movw	r2, #295	; 0x127
 800dafa:	4957      	ldr	r1, [pc, #348]	; (800dc58 <netif_add+0x178>)
 800dafc:	4857      	ldr	r0, [pc, #348]	; (800dc5c <netif_add+0x17c>)
 800dafe:	f00a fda7 	bl	8018650 <iprintf>
 800db02:	2300      	movs	r3, #0
 800db04:	e0a2      	b.n	800dc4c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800db06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d108      	bne.n	800db1e <netif_add+0x3e>
 800db0c:	4b51      	ldr	r3, [pc, #324]	; (800dc54 <netif_add+0x174>)
 800db0e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800db12:	4953      	ldr	r1, [pc, #332]	; (800dc60 <netif_add+0x180>)
 800db14:	4851      	ldr	r0, [pc, #324]	; (800dc5c <netif_add+0x17c>)
 800db16:	f00a fd9b 	bl	8018650 <iprintf>
 800db1a:	2300      	movs	r3, #0
 800db1c:	e096      	b.n	800dc4c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800db1e:	68bb      	ldr	r3, [r7, #8]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d101      	bne.n	800db28 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800db24:	4b4f      	ldr	r3, [pc, #316]	; (800dc64 <netif_add+0x184>)
 800db26:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d101      	bne.n	800db32 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800db2e:	4b4d      	ldr	r3, [pc, #308]	; (800dc64 <netif_add+0x184>)
 800db30:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d101      	bne.n	800db3c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800db38:	4b4a      	ldr	r3, [pc, #296]	; (800dc64 <netif_add+0x184>)
 800db3a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	2200      	movs	r2, #0
 800db40:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	2200      	movs	r2, #0
 800db46:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	2200      	movs	r2, #0
 800db4c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	4a45      	ldr	r2, [pc, #276]	; (800dc68 <netif_add+0x188>)
 800db52:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	2200      	movs	r2, #0
 800db58:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	2200      	movs	r2, #0
 800db5e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	2200      	movs	r2, #0
 800db66:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	6a3a      	ldr	r2, [r7, #32]
 800db6c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800db6e:	4b3f      	ldr	r3, [pc, #252]	; (800dc6c <netif_add+0x18c>)
 800db70:	781a      	ldrb	r2, [r3, #0]
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db7c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	687a      	ldr	r2, [r7, #4]
 800db82:	68b9      	ldr	r1, [r7, #8]
 800db84:	68f8      	ldr	r0, [r7, #12]
 800db86:	f000 f913 	bl	800ddb0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800db8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db8c:	68f8      	ldr	r0, [r7, #12]
 800db8e:	4798      	blx	r3
 800db90:	4603      	mov	r3, r0
 800db92:	2b00      	cmp	r3, #0
 800db94:	d001      	beq.n	800db9a <netif_add+0xba>
    return NULL;
 800db96:	2300      	movs	r3, #0
 800db98:	e058      	b.n	800dc4c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dba0:	2bff      	cmp	r3, #255	; 0xff
 800dba2:	d103      	bne.n	800dbac <netif_add+0xcc>
        netif->num = 0;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	2200      	movs	r2, #0
 800dba8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800dbac:	2300      	movs	r3, #0
 800dbae:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800dbb0:	4b2f      	ldr	r3, [pc, #188]	; (800dc70 <netif_add+0x190>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	617b      	str	r3, [r7, #20]
 800dbb6:	e02b      	b.n	800dc10 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800dbb8:	697a      	ldr	r2, [r7, #20]
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d106      	bne.n	800dbce <netif_add+0xee>
 800dbc0:	4b24      	ldr	r3, [pc, #144]	; (800dc54 <netif_add+0x174>)
 800dbc2:	f240 128b 	movw	r2, #395	; 0x18b
 800dbc6:	492b      	ldr	r1, [pc, #172]	; (800dc74 <netif_add+0x194>)
 800dbc8:	4824      	ldr	r0, [pc, #144]	; (800dc5c <netif_add+0x17c>)
 800dbca:	f00a fd41 	bl	8018650 <iprintf>
        num_netifs++;
 800dbce:	693b      	ldr	r3, [r7, #16]
 800dbd0:	3301      	adds	r3, #1
 800dbd2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800dbd4:	693b      	ldr	r3, [r7, #16]
 800dbd6:	2bff      	cmp	r3, #255	; 0xff
 800dbd8:	dd06      	ble.n	800dbe8 <netif_add+0x108>
 800dbda:	4b1e      	ldr	r3, [pc, #120]	; (800dc54 <netif_add+0x174>)
 800dbdc:	f240 128d 	movw	r2, #397	; 0x18d
 800dbe0:	4925      	ldr	r1, [pc, #148]	; (800dc78 <netif_add+0x198>)
 800dbe2:	481e      	ldr	r0, [pc, #120]	; (800dc5c <netif_add+0x17c>)
 800dbe4:	f00a fd34 	bl	8018650 <iprintf>
        if (netif2->num == netif->num) {
 800dbe8:	697b      	ldr	r3, [r7, #20]
 800dbea:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dbf4:	429a      	cmp	r2, r3
 800dbf6:	d108      	bne.n	800dc0a <netif_add+0x12a>
          netif->num++;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dbfe:	3301      	adds	r3, #1
 800dc00:	b2da      	uxtb	r2, r3
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800dc08:	e005      	b.n	800dc16 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	617b      	str	r3, [r7, #20]
 800dc10:	697b      	ldr	r3, [r7, #20]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d1d0      	bne.n	800dbb8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d1be      	bne.n	800db9a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dc22:	2bfe      	cmp	r3, #254	; 0xfe
 800dc24:	d103      	bne.n	800dc2e <netif_add+0x14e>
    netif_num = 0;
 800dc26:	4b11      	ldr	r3, [pc, #68]	; (800dc6c <netif_add+0x18c>)
 800dc28:	2200      	movs	r2, #0
 800dc2a:	701a      	strb	r2, [r3, #0]
 800dc2c:	e006      	b.n	800dc3c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dc34:	3301      	adds	r3, #1
 800dc36:	b2da      	uxtb	r2, r3
 800dc38:	4b0c      	ldr	r3, [pc, #48]	; (800dc6c <netif_add+0x18c>)
 800dc3a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800dc3c:	4b0c      	ldr	r3, [pc, #48]	; (800dc70 <netif_add+0x190>)
 800dc3e:	681a      	ldr	r2, [r3, #0]
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800dc44:	4a0a      	ldr	r2, [pc, #40]	; (800dc70 <netif_add+0x190>)
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800dc4a:	68fb      	ldr	r3, [r7, #12]
}
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	3718      	adds	r7, #24
 800dc50:	46bd      	mov	sp, r7
 800dc52:	bd80      	pop	{r7, pc}
 800dc54:	0801af08 	.word	0x0801af08
 800dc58:	0801af9c 	.word	0x0801af9c
 800dc5c:	0801af58 	.word	0x0801af58
 800dc60:	0801afb8 	.word	0x0801afb8
 800dc64:	0801d72c 	.word	0x0801d72c
 800dc68:	0800e08b 	.word	0x0800e08b
 800dc6c:	2000d248 	.word	0x2000d248
 800dc70:	2000d240 	.word	0x2000d240
 800dc74:	0801afdc 	.word	0x0801afdc
 800dc78:	0801aff0 	.word	0x0801aff0

0800dc7c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b082      	sub	sp, #8
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
 800dc84:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800dc86:	6839      	ldr	r1, [r7, #0]
 800dc88:	6878      	ldr	r0, [r7, #4]
 800dc8a:	f002 fdc7 	bl	801081c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800dc8e:	6839      	ldr	r1, [r7, #0]
 800dc90:	6878      	ldr	r0, [r7, #4]
 800dc92:	f007 fe63 	bl	801595c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800dc96:	bf00      	nop
 800dc98:	3708      	adds	r7, #8
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}
	...

0800dca0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b086      	sub	sp, #24
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	60f8      	str	r0, [r7, #12]
 800dca8:	60b9      	str	r1, [r7, #8]
 800dcaa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d106      	bne.n	800dcc0 <netif_do_set_ipaddr+0x20>
 800dcb2:	4b1d      	ldr	r3, [pc, #116]	; (800dd28 <netif_do_set_ipaddr+0x88>)
 800dcb4:	f240 12cb 	movw	r2, #459	; 0x1cb
 800dcb8:	491c      	ldr	r1, [pc, #112]	; (800dd2c <netif_do_set_ipaddr+0x8c>)
 800dcba:	481d      	ldr	r0, [pc, #116]	; (800dd30 <netif_do_set_ipaddr+0x90>)
 800dcbc:	f00a fcc8 	bl	8018650 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d106      	bne.n	800dcd4 <netif_do_set_ipaddr+0x34>
 800dcc6:	4b18      	ldr	r3, [pc, #96]	; (800dd28 <netif_do_set_ipaddr+0x88>)
 800dcc8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800dccc:	4917      	ldr	r1, [pc, #92]	; (800dd2c <netif_do_set_ipaddr+0x8c>)
 800dcce:	4818      	ldr	r0, [pc, #96]	; (800dd30 <netif_do_set_ipaddr+0x90>)
 800dcd0:	f00a fcbe 	bl	8018650 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800dcd4:	68bb      	ldr	r3, [r7, #8]
 800dcd6:	681a      	ldr	r2, [r3, #0]
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	3304      	adds	r3, #4
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	429a      	cmp	r2, r3
 800dce0:	d01c      	beq.n	800dd1c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800dce2:	68bb      	ldr	r3, [r7, #8]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	3304      	adds	r3, #4
 800dcec:	681a      	ldr	r2, [r3, #0]
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800dcf2:	f107 0314 	add.w	r3, r7, #20
 800dcf6:	4619      	mov	r1, r3
 800dcf8:	6878      	ldr	r0, [r7, #4]
 800dcfa:	f7ff ffbf 	bl	800dc7c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800dcfe:	68bb      	ldr	r3, [r7, #8]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d002      	beq.n	800dd0a <netif_do_set_ipaddr+0x6a>
 800dd04:	68bb      	ldr	r3, [r7, #8]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	e000      	b.n	800dd0c <netif_do_set_ipaddr+0x6c>
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	68fa      	ldr	r2, [r7, #12]
 800dd0e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800dd10:	2101      	movs	r1, #1
 800dd12:	68f8      	ldr	r0, [r7, #12]
 800dd14:	f000 f8d2 	bl	800debc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800dd18:	2301      	movs	r3, #1
 800dd1a:	e000      	b.n	800dd1e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800dd1c:	2300      	movs	r3, #0
}
 800dd1e:	4618      	mov	r0, r3
 800dd20:	3718      	adds	r7, #24
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bd80      	pop	{r7, pc}
 800dd26:	bf00      	nop
 800dd28:	0801af08 	.word	0x0801af08
 800dd2c:	0801b020 	.word	0x0801b020
 800dd30:	0801af58 	.word	0x0801af58

0800dd34 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800dd34:	b480      	push	{r7}
 800dd36:	b085      	sub	sp, #20
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	60f8      	str	r0, [r7, #12]
 800dd3c:	60b9      	str	r1, [r7, #8]
 800dd3e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	681a      	ldr	r2, [r3, #0]
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	3308      	adds	r3, #8
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	429a      	cmp	r2, r3
 800dd4c:	d00a      	beq.n	800dd64 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800dd4e:	68bb      	ldr	r3, [r7, #8]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d002      	beq.n	800dd5a <netif_do_set_netmask+0x26>
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	e000      	b.n	800dd5c <netif_do_set_netmask+0x28>
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	68fa      	ldr	r2, [r7, #12]
 800dd5e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800dd60:	2301      	movs	r3, #1
 800dd62:	e000      	b.n	800dd66 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800dd64:	2300      	movs	r3, #0
}
 800dd66:	4618      	mov	r0, r3
 800dd68:	3714      	adds	r7, #20
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd70:	4770      	bx	lr

0800dd72 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800dd72:	b480      	push	{r7}
 800dd74:	b085      	sub	sp, #20
 800dd76:	af00      	add	r7, sp, #0
 800dd78:	60f8      	str	r0, [r7, #12]
 800dd7a:	60b9      	str	r1, [r7, #8]
 800dd7c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800dd7e:	68bb      	ldr	r3, [r7, #8]
 800dd80:	681a      	ldr	r2, [r3, #0]
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	330c      	adds	r3, #12
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	429a      	cmp	r2, r3
 800dd8a:	d00a      	beq.n	800dda2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800dd8c:	68bb      	ldr	r3, [r7, #8]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d002      	beq.n	800dd98 <netif_do_set_gw+0x26>
 800dd92:	68bb      	ldr	r3, [r7, #8]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	e000      	b.n	800dd9a <netif_do_set_gw+0x28>
 800dd98:	2300      	movs	r3, #0
 800dd9a:	68fa      	ldr	r2, [r7, #12]
 800dd9c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800dd9e:	2301      	movs	r3, #1
 800dda0:	e000      	b.n	800dda4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800dda2:	2300      	movs	r3, #0
}
 800dda4:	4618      	mov	r0, r3
 800dda6:	3714      	adds	r7, #20
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddae:	4770      	bx	lr

0800ddb0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b088      	sub	sp, #32
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	60f8      	str	r0, [r7, #12]
 800ddb8:	60b9      	str	r1, [r7, #8]
 800ddba:	607a      	str	r2, [r7, #4]
 800ddbc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d101      	bne.n	800ddd0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800ddcc:	4b1c      	ldr	r3, [pc, #112]	; (800de40 <netif_set_addr+0x90>)
 800ddce:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d101      	bne.n	800ddda <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800ddd6:	4b1a      	ldr	r3, [pc, #104]	; (800de40 <netif_set_addr+0x90>)
 800ddd8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d101      	bne.n	800dde4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800dde0:	4b17      	ldr	r3, [pc, #92]	; (800de40 <netif_set_addr+0x90>)
 800dde2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d003      	beq.n	800ddf2 <netif_set_addr+0x42>
 800ddea:	68bb      	ldr	r3, [r7, #8]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d101      	bne.n	800ddf6 <netif_set_addr+0x46>
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	e000      	b.n	800ddf8 <netif_set_addr+0x48>
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	617b      	str	r3, [r7, #20]
  if (remove) {
 800ddfa:	697b      	ldr	r3, [r7, #20]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d006      	beq.n	800de0e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800de00:	f107 0310 	add.w	r3, r7, #16
 800de04:	461a      	mov	r2, r3
 800de06:	68b9      	ldr	r1, [r7, #8]
 800de08:	68f8      	ldr	r0, [r7, #12]
 800de0a:	f7ff ff49 	bl	800dca0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800de0e:	69fa      	ldr	r2, [r7, #28]
 800de10:	6879      	ldr	r1, [r7, #4]
 800de12:	68f8      	ldr	r0, [r7, #12]
 800de14:	f7ff ff8e 	bl	800dd34 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800de18:	69ba      	ldr	r2, [r7, #24]
 800de1a:	6839      	ldr	r1, [r7, #0]
 800de1c:	68f8      	ldr	r0, [r7, #12]
 800de1e:	f7ff ffa8 	bl	800dd72 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800de22:	697b      	ldr	r3, [r7, #20]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d106      	bne.n	800de36 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800de28:	f107 0310 	add.w	r3, r7, #16
 800de2c:	461a      	mov	r2, r3
 800de2e:	68b9      	ldr	r1, [r7, #8]
 800de30:	68f8      	ldr	r0, [r7, #12]
 800de32:	f7ff ff35 	bl	800dca0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800de36:	bf00      	nop
 800de38:	3720      	adds	r7, #32
 800de3a:	46bd      	mov	sp, r7
 800de3c:	bd80      	pop	{r7, pc}
 800de3e:	bf00      	nop
 800de40:	0801d72c 	.word	0x0801d72c

0800de44 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800de44:	b480      	push	{r7}
 800de46:	b083      	sub	sp, #12
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800de4c:	4a04      	ldr	r2, [pc, #16]	; (800de60 <netif_set_default+0x1c>)
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800de52:	bf00      	nop
 800de54:	370c      	adds	r7, #12
 800de56:	46bd      	mov	sp, r7
 800de58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5c:	4770      	bx	lr
 800de5e:	bf00      	nop
 800de60:	2000d244 	.word	0x2000d244

0800de64 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b082      	sub	sp, #8
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d107      	bne.n	800de82 <netif_set_up+0x1e>
 800de72:	4b0f      	ldr	r3, [pc, #60]	; (800deb0 <netif_set_up+0x4c>)
 800de74:	f44f 7254 	mov.w	r2, #848	; 0x350
 800de78:	490e      	ldr	r1, [pc, #56]	; (800deb4 <netif_set_up+0x50>)
 800de7a:	480f      	ldr	r0, [pc, #60]	; (800deb8 <netif_set_up+0x54>)
 800de7c:	f00a fbe8 	bl	8018650 <iprintf>
 800de80:	e013      	b.n	800deaa <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800de88:	f003 0301 	and.w	r3, r3, #1
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d10c      	bne.n	800deaa <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800de96:	f043 0301 	orr.w	r3, r3, #1
 800de9a:	b2da      	uxtb	r2, r3
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800dea2:	2103      	movs	r1, #3
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f000 f809 	bl	800debc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800deaa:	3708      	adds	r7, #8
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}
 800deb0:	0801af08 	.word	0x0801af08
 800deb4:	0801b090 	.word	0x0801b090
 800deb8:	0801af58 	.word	0x0801af58

0800debc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b082      	sub	sp, #8
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
 800dec4:	460b      	mov	r3, r1
 800dec6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d106      	bne.n	800dedc <netif_issue_reports+0x20>
 800dece:	4b18      	ldr	r3, [pc, #96]	; (800df30 <netif_issue_reports+0x74>)
 800ded0:	f240 326d 	movw	r2, #877	; 0x36d
 800ded4:	4917      	ldr	r1, [pc, #92]	; (800df34 <netif_issue_reports+0x78>)
 800ded6:	4818      	ldr	r0, [pc, #96]	; (800df38 <netif_issue_reports+0x7c>)
 800ded8:	f00a fbba 	bl	8018650 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dee2:	f003 0304 	and.w	r3, r3, #4
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d01e      	beq.n	800df28 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800def0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800def4:	2b00      	cmp	r3, #0
 800def6:	d017      	beq.n	800df28 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800def8:	78fb      	ldrb	r3, [r7, #3]
 800defa:	f003 0301 	and.w	r3, r3, #1
 800defe:	2b00      	cmp	r3, #0
 800df00:	d013      	beq.n	800df2a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	3304      	adds	r3, #4
 800df06:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d00e      	beq.n	800df2a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df12:	f003 0308 	and.w	r3, r3, #8
 800df16:	2b00      	cmp	r3, #0
 800df18:	d007      	beq.n	800df2a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	3304      	adds	r3, #4
 800df1e:	4619      	mov	r1, r3
 800df20:	6878      	ldr	r0, [r7, #4]
 800df22:	f008 fc85 	bl	8016830 <etharp_request>
 800df26:	e000      	b.n	800df2a <netif_issue_reports+0x6e>
    return;
 800df28:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800df2a:	3708      	adds	r7, #8
 800df2c:	46bd      	mov	sp, r7
 800df2e:	bd80      	pop	{r7, pc}
 800df30:	0801af08 	.word	0x0801af08
 800df34:	0801b0ac 	.word	0x0801b0ac
 800df38:	0801af58 	.word	0x0801af58

0800df3c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b082      	sub	sp, #8
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d107      	bne.n	800df5a <netif_set_down+0x1e>
 800df4a:	4b12      	ldr	r3, [pc, #72]	; (800df94 <netif_set_down+0x58>)
 800df4c:	f240 329b 	movw	r2, #923	; 0x39b
 800df50:	4911      	ldr	r1, [pc, #68]	; (800df98 <netif_set_down+0x5c>)
 800df52:	4812      	ldr	r0, [pc, #72]	; (800df9c <netif_set_down+0x60>)
 800df54:	f00a fb7c 	bl	8018650 <iprintf>
 800df58:	e019      	b.n	800df8e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df60:	f003 0301 	and.w	r3, r3, #1
 800df64:	2b00      	cmp	r3, #0
 800df66:	d012      	beq.n	800df8e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df6e:	f023 0301 	bic.w	r3, r3, #1
 800df72:	b2da      	uxtb	r2, r3
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df80:	f003 0308 	and.w	r3, r3, #8
 800df84:	2b00      	cmp	r3, #0
 800df86:	d002      	beq.n	800df8e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800df88:	6878      	ldr	r0, [r7, #4]
 800df8a:	f008 f80f 	bl	8015fac <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800df8e:	3708      	adds	r7, #8
 800df90:	46bd      	mov	sp, r7
 800df92:	bd80      	pop	{r7, pc}
 800df94:	0801af08 	.word	0x0801af08
 800df98:	0801b0d0 	.word	0x0801b0d0
 800df9c:	0801af58 	.word	0x0801af58

0800dfa0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b082      	sub	sp, #8
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d107      	bne.n	800dfbe <netif_set_link_up+0x1e>
 800dfae:	4b13      	ldr	r3, [pc, #76]	; (800dffc <netif_set_link_up+0x5c>)
 800dfb0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800dfb4:	4912      	ldr	r1, [pc, #72]	; (800e000 <netif_set_link_up+0x60>)
 800dfb6:	4813      	ldr	r0, [pc, #76]	; (800e004 <netif_set_link_up+0x64>)
 800dfb8:	f00a fb4a 	bl	8018650 <iprintf>
 800dfbc:	e01b      	b.n	800dff6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dfc4:	f003 0304 	and.w	r3, r3, #4
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d114      	bne.n	800dff6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dfd2:	f043 0304 	orr.w	r3, r3, #4
 800dfd6:	b2da      	uxtb	r2, r3
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800dfde:	2103      	movs	r1, #3
 800dfe0:	6878      	ldr	r0, [r7, #4]
 800dfe2:	f7ff ff6b 	bl	800debc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	69db      	ldr	r3, [r3, #28]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d003      	beq.n	800dff6 <netif_set_link_up+0x56>
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	69db      	ldr	r3, [r3, #28]
 800dff2:	6878      	ldr	r0, [r7, #4]
 800dff4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800dff6:	3708      	adds	r7, #8
 800dff8:	46bd      	mov	sp, r7
 800dffa:	bd80      	pop	{r7, pc}
 800dffc:	0801af08 	.word	0x0801af08
 800e000:	0801b0f0 	.word	0x0801b0f0
 800e004:	0801af58 	.word	0x0801af58

0800e008 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b082      	sub	sp, #8
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d107      	bne.n	800e026 <netif_set_link_down+0x1e>
 800e016:	4b11      	ldr	r3, [pc, #68]	; (800e05c <netif_set_link_down+0x54>)
 800e018:	f240 4206 	movw	r2, #1030	; 0x406
 800e01c:	4910      	ldr	r1, [pc, #64]	; (800e060 <netif_set_link_down+0x58>)
 800e01e:	4811      	ldr	r0, [pc, #68]	; (800e064 <netif_set_link_down+0x5c>)
 800e020:	f00a fb16 	bl	8018650 <iprintf>
 800e024:	e017      	b.n	800e056 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e02c:	f003 0304 	and.w	r3, r3, #4
 800e030:	2b00      	cmp	r3, #0
 800e032:	d010      	beq.n	800e056 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e03a:	f023 0304 	bic.w	r3, r3, #4
 800e03e:	b2da      	uxtb	r2, r3
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	69db      	ldr	r3, [r3, #28]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d003      	beq.n	800e056 <netif_set_link_down+0x4e>
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	69db      	ldr	r3, [r3, #28]
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e056:	3708      	adds	r7, #8
 800e058:	46bd      	mov	sp, r7
 800e05a:	bd80      	pop	{r7, pc}
 800e05c:	0801af08 	.word	0x0801af08
 800e060:	0801b114 	.word	0x0801b114
 800e064:	0801af58 	.word	0x0801af58

0800e068 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800e068:	b480      	push	{r7}
 800e06a:	b083      	sub	sp, #12
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
 800e070:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d002      	beq.n	800e07e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	683a      	ldr	r2, [r7, #0]
 800e07c:	61da      	str	r2, [r3, #28]
  }
}
 800e07e:	bf00      	nop
 800e080:	370c      	adds	r7, #12
 800e082:	46bd      	mov	sp, r7
 800e084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e088:	4770      	bx	lr

0800e08a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800e08a:	b480      	push	{r7}
 800e08c:	b085      	sub	sp, #20
 800e08e:	af00      	add	r7, sp, #0
 800e090:	60f8      	str	r0, [r7, #12]
 800e092:	60b9      	str	r1, [r7, #8]
 800e094:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800e096:	f06f 030b 	mvn.w	r3, #11
}
 800e09a:	4618      	mov	r0, r3
 800e09c:	3714      	adds	r7, #20
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a4:	4770      	bx	lr
	...

0800e0a8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800e0a8:	b480      	push	{r7}
 800e0aa:	b085      	sub	sp, #20
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800e0b2:	79fb      	ldrb	r3, [r7, #7]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d013      	beq.n	800e0e0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800e0b8:	4b0d      	ldr	r3, [pc, #52]	; (800e0f0 <netif_get_by_index+0x48>)
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	60fb      	str	r3, [r7, #12]
 800e0be:	e00c      	b.n	800e0da <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e0c6:	3301      	adds	r3, #1
 800e0c8:	b2db      	uxtb	r3, r3
 800e0ca:	79fa      	ldrb	r2, [r7, #7]
 800e0cc:	429a      	cmp	r2, r3
 800e0ce:	d101      	bne.n	800e0d4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	e006      	b.n	800e0e2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	60fb      	str	r3, [r7, #12]
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d1ef      	bne.n	800e0c0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800e0e0:	2300      	movs	r3, #0
}
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	3714      	adds	r7, #20
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ec:	4770      	bx	lr
 800e0ee:	bf00      	nop
 800e0f0:	2000d240 	.word	0x2000d240

0800e0f4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b082      	sub	sp, #8
 800e0f8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800e0fa:	f00a fa27 	bl	801854c <sys_arch_protect>
 800e0fe:	6038      	str	r0, [r7, #0]
 800e100:	4b0d      	ldr	r3, [pc, #52]	; (800e138 <pbuf_free_ooseq+0x44>)
 800e102:	2200      	movs	r2, #0
 800e104:	701a      	strb	r2, [r3, #0]
 800e106:	6838      	ldr	r0, [r7, #0]
 800e108:	f00a fa2e 	bl	8018568 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e10c:	4b0b      	ldr	r3, [pc, #44]	; (800e13c <pbuf_free_ooseq+0x48>)
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	607b      	str	r3, [r7, #4]
 800e112:	e00a      	b.n	800e12a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d003      	beq.n	800e124 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f002 fbbb 	bl	8010898 <tcp_free_ooseq>
      return;
 800e122:	e005      	b.n	800e130 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	68db      	ldr	r3, [r3, #12]
 800e128:	607b      	str	r3, [r7, #4]
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d1f1      	bne.n	800e114 <pbuf_free_ooseq+0x20>
    }
  }
}
 800e130:	3708      	adds	r7, #8
 800e132:	46bd      	mov	sp, r7
 800e134:	bd80      	pop	{r7, pc}
 800e136:	bf00      	nop
 800e138:	2000d249 	.word	0x2000d249
 800e13c:	2000d258 	.word	0x2000d258

0800e140 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b082      	sub	sp, #8
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800e148:	f7ff ffd4 	bl	800e0f4 <pbuf_free_ooseq>
}
 800e14c:	bf00      	nop
 800e14e:	3708      	adds	r7, #8
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}

0800e154 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b082      	sub	sp, #8
 800e158:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800e15a:	f00a f9f7 	bl	801854c <sys_arch_protect>
 800e15e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800e160:	4b0f      	ldr	r3, [pc, #60]	; (800e1a0 <pbuf_pool_is_empty+0x4c>)
 800e162:	781b      	ldrb	r3, [r3, #0]
 800e164:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800e166:	4b0e      	ldr	r3, [pc, #56]	; (800e1a0 <pbuf_pool_is_empty+0x4c>)
 800e168:	2201      	movs	r2, #1
 800e16a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800e16c:	6878      	ldr	r0, [r7, #4]
 800e16e:	f00a f9fb 	bl	8018568 <sys_arch_unprotect>

  if (!queued) {
 800e172:	78fb      	ldrb	r3, [r7, #3]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d10f      	bne.n	800e198 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800e178:	2100      	movs	r1, #0
 800e17a:	480a      	ldr	r0, [pc, #40]	; (800e1a4 <pbuf_pool_is_empty+0x50>)
 800e17c:	f7fe fed6 	bl	800cf2c <tcpip_try_callback>
 800e180:	4603      	mov	r3, r0
 800e182:	2b00      	cmp	r3, #0
 800e184:	d008      	beq.n	800e198 <pbuf_pool_is_empty+0x44>
 800e186:	f00a f9e1 	bl	801854c <sys_arch_protect>
 800e18a:	6078      	str	r0, [r7, #4]
 800e18c:	4b04      	ldr	r3, [pc, #16]	; (800e1a0 <pbuf_pool_is_empty+0x4c>)
 800e18e:	2200      	movs	r2, #0
 800e190:	701a      	strb	r2, [r3, #0]
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f00a f9e8 	bl	8018568 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800e198:	bf00      	nop
 800e19a:	3708      	adds	r7, #8
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bd80      	pop	{r7, pc}
 800e1a0:	2000d249 	.word	0x2000d249
 800e1a4:	0800e141 	.word	0x0800e141

0800e1a8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b085      	sub	sp, #20
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	60f8      	str	r0, [r7, #12]
 800e1b0:	60b9      	str	r1, [r7, #8]
 800e1b2:	4611      	mov	r1, r2
 800e1b4:	461a      	mov	r2, r3
 800e1b6:	460b      	mov	r3, r1
 800e1b8:	80fb      	strh	r3, [r7, #6]
 800e1ba:	4613      	mov	r3, r2
 800e1bc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	68ba      	ldr	r2, [r7, #8]
 800e1c8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	88fa      	ldrh	r2, [r7, #6]
 800e1ce:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	88ba      	ldrh	r2, [r7, #4]
 800e1d4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800e1d6:	8b3b      	ldrh	r3, [r7, #24]
 800e1d8:	b2da      	uxtb	r2, r3
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	7f3a      	ldrb	r2, [r7, #28]
 800e1e2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	2201      	movs	r2, #1
 800e1e8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	73da      	strb	r2, [r3, #15]
}
 800e1f0:	bf00      	nop
 800e1f2:	3714      	adds	r7, #20
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fa:	4770      	bx	lr

0800e1fc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b08c      	sub	sp, #48	; 0x30
 800e200:	af02      	add	r7, sp, #8
 800e202:	4603      	mov	r3, r0
 800e204:	71fb      	strb	r3, [r7, #7]
 800e206:	460b      	mov	r3, r1
 800e208:	80bb      	strh	r3, [r7, #4]
 800e20a:	4613      	mov	r3, r2
 800e20c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800e20e:	79fb      	ldrb	r3, [r7, #7]
 800e210:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800e212:	887b      	ldrh	r3, [r7, #2]
 800e214:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e218:	d07f      	beq.n	800e31a <pbuf_alloc+0x11e>
 800e21a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e21e:	f300 80c8 	bgt.w	800e3b2 <pbuf_alloc+0x1b6>
 800e222:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e226:	d010      	beq.n	800e24a <pbuf_alloc+0x4e>
 800e228:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e22c:	f300 80c1 	bgt.w	800e3b2 <pbuf_alloc+0x1b6>
 800e230:	2b01      	cmp	r3, #1
 800e232:	d002      	beq.n	800e23a <pbuf_alloc+0x3e>
 800e234:	2b41      	cmp	r3, #65	; 0x41
 800e236:	f040 80bc 	bne.w	800e3b2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800e23a:	887a      	ldrh	r2, [r7, #2]
 800e23c:	88bb      	ldrh	r3, [r7, #4]
 800e23e:	4619      	mov	r1, r3
 800e240:	2000      	movs	r0, #0
 800e242:	f000 f8d1 	bl	800e3e8 <pbuf_alloc_reference>
 800e246:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800e248:	e0bd      	b.n	800e3c6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800e24a:	2300      	movs	r3, #0
 800e24c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800e24e:	2300      	movs	r3, #0
 800e250:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800e252:	88bb      	ldrh	r3, [r7, #4]
 800e254:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800e256:	200c      	movs	r0, #12
 800e258:	f7ff fbbe 	bl	800d9d8 <memp_malloc>
 800e25c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800e25e:	693b      	ldr	r3, [r7, #16]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d109      	bne.n	800e278 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800e264:	f7ff ff76 	bl	800e154 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800e268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d002      	beq.n	800e274 <pbuf_alloc+0x78>
            pbuf_free(p);
 800e26e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e270:	f000 fada 	bl	800e828 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800e274:	2300      	movs	r3, #0
 800e276:	e0a7      	b.n	800e3c8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800e278:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e27a:	3303      	adds	r3, #3
 800e27c:	b29b      	uxth	r3, r3
 800e27e:	f023 0303 	bic.w	r3, r3, #3
 800e282:	b29b      	uxth	r3, r3
 800e284:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800e288:	b29b      	uxth	r3, r3
 800e28a:	8b7a      	ldrh	r2, [r7, #26]
 800e28c:	4293      	cmp	r3, r2
 800e28e:	bf28      	it	cs
 800e290:	4613      	movcs	r3, r2
 800e292:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800e294:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e296:	3310      	adds	r3, #16
 800e298:	693a      	ldr	r2, [r7, #16]
 800e29a:	4413      	add	r3, r2
 800e29c:	3303      	adds	r3, #3
 800e29e:	f023 0303 	bic.w	r3, r3, #3
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	89f9      	ldrh	r1, [r7, #14]
 800e2a6:	8b7a      	ldrh	r2, [r7, #26]
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	9301      	str	r3, [sp, #4]
 800e2ac:	887b      	ldrh	r3, [r7, #2]
 800e2ae:	9300      	str	r3, [sp, #0]
 800e2b0:	460b      	mov	r3, r1
 800e2b2:	4601      	mov	r1, r0
 800e2b4:	6938      	ldr	r0, [r7, #16]
 800e2b6:	f7ff ff77 	bl	800e1a8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800e2ba:	693b      	ldr	r3, [r7, #16]
 800e2bc:	685b      	ldr	r3, [r3, #4]
 800e2be:	f003 0303 	and.w	r3, r3, #3
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d006      	beq.n	800e2d4 <pbuf_alloc+0xd8>
 800e2c6:	4b42      	ldr	r3, [pc, #264]	; (800e3d0 <pbuf_alloc+0x1d4>)
 800e2c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e2cc:	4941      	ldr	r1, [pc, #260]	; (800e3d4 <pbuf_alloc+0x1d8>)
 800e2ce:	4842      	ldr	r0, [pc, #264]	; (800e3d8 <pbuf_alloc+0x1dc>)
 800e2d0:	f00a f9be 	bl	8018650 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800e2d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e2d6:	3303      	adds	r3, #3
 800e2d8:	f023 0303 	bic.w	r3, r3, #3
 800e2dc:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800e2e0:	d106      	bne.n	800e2f0 <pbuf_alloc+0xf4>
 800e2e2:	4b3b      	ldr	r3, [pc, #236]	; (800e3d0 <pbuf_alloc+0x1d4>)
 800e2e4:	f44f 7281 	mov.w	r2, #258	; 0x102
 800e2e8:	493c      	ldr	r1, [pc, #240]	; (800e3dc <pbuf_alloc+0x1e0>)
 800e2ea:	483b      	ldr	r0, [pc, #236]	; (800e3d8 <pbuf_alloc+0x1dc>)
 800e2ec:	f00a f9b0 	bl	8018650 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800e2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d102      	bne.n	800e2fc <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800e2f6:	693b      	ldr	r3, [r7, #16]
 800e2f8:	627b      	str	r3, [r7, #36]	; 0x24
 800e2fa:	e002      	b.n	800e302 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800e2fc:	69fb      	ldr	r3, [r7, #28]
 800e2fe:	693a      	ldr	r2, [r7, #16]
 800e300:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800e302:	693b      	ldr	r3, [r7, #16]
 800e304:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800e306:	8b7a      	ldrh	r2, [r7, #26]
 800e308:	89fb      	ldrh	r3, [r7, #14]
 800e30a:	1ad3      	subs	r3, r2, r3
 800e30c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e30e:	2300      	movs	r3, #0
 800e310:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800e312:	8b7b      	ldrh	r3, [r7, #26]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d19e      	bne.n	800e256 <pbuf_alloc+0x5a>
      break;
 800e318:	e055      	b.n	800e3c6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e31a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e31c:	3303      	adds	r3, #3
 800e31e:	b29b      	uxth	r3, r3
 800e320:	f023 0303 	bic.w	r3, r3, #3
 800e324:	b29a      	uxth	r2, r3
 800e326:	88bb      	ldrh	r3, [r7, #4]
 800e328:	3303      	adds	r3, #3
 800e32a:	b29b      	uxth	r3, r3
 800e32c:	f023 0303 	bic.w	r3, r3, #3
 800e330:	b29b      	uxth	r3, r3
 800e332:	4413      	add	r3, r2
 800e334:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e336:	8b3b      	ldrh	r3, [r7, #24]
 800e338:	3310      	adds	r3, #16
 800e33a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e33c:	8b3a      	ldrh	r2, [r7, #24]
 800e33e:	88bb      	ldrh	r3, [r7, #4]
 800e340:	3303      	adds	r3, #3
 800e342:	f023 0303 	bic.w	r3, r3, #3
 800e346:	429a      	cmp	r2, r3
 800e348:	d306      	bcc.n	800e358 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e34a:	8afa      	ldrh	r2, [r7, #22]
 800e34c:	88bb      	ldrh	r3, [r7, #4]
 800e34e:	3303      	adds	r3, #3
 800e350:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e354:	429a      	cmp	r2, r3
 800e356:	d201      	bcs.n	800e35c <pbuf_alloc+0x160>
        return NULL;
 800e358:	2300      	movs	r3, #0
 800e35a:	e035      	b.n	800e3c8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e35c:	8afb      	ldrh	r3, [r7, #22]
 800e35e:	4618      	mov	r0, r3
 800e360:	f7ff f9b8 	bl	800d6d4 <mem_malloc>
 800e364:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800e366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d101      	bne.n	800e370 <pbuf_alloc+0x174>
        return NULL;
 800e36c:	2300      	movs	r3, #0
 800e36e:	e02b      	b.n	800e3c8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e370:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e372:	3310      	adds	r3, #16
 800e374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e376:	4413      	add	r3, r2
 800e378:	3303      	adds	r3, #3
 800e37a:	f023 0303 	bic.w	r3, r3, #3
 800e37e:	4618      	mov	r0, r3
 800e380:	88b9      	ldrh	r1, [r7, #4]
 800e382:	88ba      	ldrh	r2, [r7, #4]
 800e384:	2300      	movs	r3, #0
 800e386:	9301      	str	r3, [sp, #4]
 800e388:	887b      	ldrh	r3, [r7, #2]
 800e38a:	9300      	str	r3, [sp, #0]
 800e38c:	460b      	mov	r3, r1
 800e38e:	4601      	mov	r1, r0
 800e390:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e392:	f7ff ff09 	bl	800e1a8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e398:	685b      	ldr	r3, [r3, #4]
 800e39a:	f003 0303 	and.w	r3, r3, #3
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d010      	beq.n	800e3c4 <pbuf_alloc+0x1c8>
 800e3a2:	4b0b      	ldr	r3, [pc, #44]	; (800e3d0 <pbuf_alloc+0x1d4>)
 800e3a4:	f44f 7291 	mov.w	r2, #290	; 0x122
 800e3a8:	490d      	ldr	r1, [pc, #52]	; (800e3e0 <pbuf_alloc+0x1e4>)
 800e3aa:	480b      	ldr	r0, [pc, #44]	; (800e3d8 <pbuf_alloc+0x1dc>)
 800e3ac:	f00a f950 	bl	8018650 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800e3b0:	e008      	b.n	800e3c4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e3b2:	4b07      	ldr	r3, [pc, #28]	; (800e3d0 <pbuf_alloc+0x1d4>)
 800e3b4:	f240 1227 	movw	r2, #295	; 0x127
 800e3b8:	490a      	ldr	r1, [pc, #40]	; (800e3e4 <pbuf_alloc+0x1e8>)
 800e3ba:	4807      	ldr	r0, [pc, #28]	; (800e3d8 <pbuf_alloc+0x1dc>)
 800e3bc:	f00a f948 	bl	8018650 <iprintf>
      return NULL;
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	e001      	b.n	800e3c8 <pbuf_alloc+0x1cc>
      break;
 800e3c4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	3728      	adds	r7, #40	; 0x28
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	bd80      	pop	{r7, pc}
 800e3d0:	0801b138 	.word	0x0801b138
 800e3d4:	0801b168 	.word	0x0801b168
 800e3d8:	0801b198 	.word	0x0801b198
 800e3dc:	0801b1c0 	.word	0x0801b1c0
 800e3e0:	0801b1f4 	.word	0x0801b1f4
 800e3e4:	0801b220 	.word	0x0801b220

0800e3e8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b086      	sub	sp, #24
 800e3ec:	af02      	add	r7, sp, #8
 800e3ee:	6078      	str	r0, [r7, #4]
 800e3f0:	460b      	mov	r3, r1
 800e3f2:	807b      	strh	r3, [r7, #2]
 800e3f4:	4613      	mov	r3, r2
 800e3f6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800e3f8:	883b      	ldrh	r3, [r7, #0]
 800e3fa:	2b41      	cmp	r3, #65	; 0x41
 800e3fc:	d009      	beq.n	800e412 <pbuf_alloc_reference+0x2a>
 800e3fe:	883b      	ldrh	r3, [r7, #0]
 800e400:	2b01      	cmp	r3, #1
 800e402:	d006      	beq.n	800e412 <pbuf_alloc_reference+0x2a>
 800e404:	4b0f      	ldr	r3, [pc, #60]	; (800e444 <pbuf_alloc_reference+0x5c>)
 800e406:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800e40a:	490f      	ldr	r1, [pc, #60]	; (800e448 <pbuf_alloc_reference+0x60>)
 800e40c:	480f      	ldr	r0, [pc, #60]	; (800e44c <pbuf_alloc_reference+0x64>)
 800e40e:	f00a f91f 	bl	8018650 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800e412:	200b      	movs	r0, #11
 800e414:	f7ff fae0 	bl	800d9d8 <memp_malloc>
 800e418:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d101      	bne.n	800e424 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800e420:	2300      	movs	r3, #0
 800e422:	e00b      	b.n	800e43c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800e424:	8879      	ldrh	r1, [r7, #2]
 800e426:	887a      	ldrh	r2, [r7, #2]
 800e428:	2300      	movs	r3, #0
 800e42a:	9301      	str	r3, [sp, #4]
 800e42c:	883b      	ldrh	r3, [r7, #0]
 800e42e:	9300      	str	r3, [sp, #0]
 800e430:	460b      	mov	r3, r1
 800e432:	6879      	ldr	r1, [r7, #4]
 800e434:	68f8      	ldr	r0, [r7, #12]
 800e436:	f7ff feb7 	bl	800e1a8 <pbuf_init_alloced_pbuf>
  return p;
 800e43a:	68fb      	ldr	r3, [r7, #12]
}
 800e43c:	4618      	mov	r0, r3
 800e43e:	3710      	adds	r7, #16
 800e440:	46bd      	mov	sp, r7
 800e442:	bd80      	pop	{r7, pc}
 800e444:	0801b138 	.word	0x0801b138
 800e448:	0801b23c 	.word	0x0801b23c
 800e44c:	0801b198 	.word	0x0801b198

0800e450 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b088      	sub	sp, #32
 800e454:	af02      	add	r7, sp, #8
 800e456:	607b      	str	r3, [r7, #4]
 800e458:	4603      	mov	r3, r0
 800e45a:	73fb      	strb	r3, [r7, #15]
 800e45c:	460b      	mov	r3, r1
 800e45e:	81bb      	strh	r3, [r7, #12]
 800e460:	4613      	mov	r3, r2
 800e462:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800e464:	7bfb      	ldrb	r3, [r7, #15]
 800e466:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800e468:	8a7b      	ldrh	r3, [r7, #18]
 800e46a:	3303      	adds	r3, #3
 800e46c:	f023 0203 	bic.w	r2, r3, #3
 800e470:	89bb      	ldrh	r3, [r7, #12]
 800e472:	441a      	add	r2, r3
 800e474:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e476:	429a      	cmp	r2, r3
 800e478:	d901      	bls.n	800e47e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800e47a:	2300      	movs	r3, #0
 800e47c:	e018      	b.n	800e4b0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800e47e:	6a3b      	ldr	r3, [r7, #32]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d007      	beq.n	800e494 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800e484:	8a7b      	ldrh	r3, [r7, #18]
 800e486:	3303      	adds	r3, #3
 800e488:	f023 0303 	bic.w	r3, r3, #3
 800e48c:	6a3a      	ldr	r2, [r7, #32]
 800e48e:	4413      	add	r3, r2
 800e490:	617b      	str	r3, [r7, #20]
 800e492:	e001      	b.n	800e498 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800e494:	2300      	movs	r3, #0
 800e496:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	89b9      	ldrh	r1, [r7, #12]
 800e49c:	89ba      	ldrh	r2, [r7, #12]
 800e49e:	2302      	movs	r3, #2
 800e4a0:	9301      	str	r3, [sp, #4]
 800e4a2:	897b      	ldrh	r3, [r7, #10]
 800e4a4:	9300      	str	r3, [sp, #0]
 800e4a6:	460b      	mov	r3, r1
 800e4a8:	6979      	ldr	r1, [r7, #20]
 800e4aa:	f7ff fe7d 	bl	800e1a8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800e4ae:	687b      	ldr	r3, [r7, #4]
}
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	3718      	adds	r7, #24
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	bd80      	pop	{r7, pc}

0800e4b8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b084      	sub	sp, #16
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
 800e4c0:	460b      	mov	r3, r1
 800e4c2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d106      	bne.n	800e4d8 <pbuf_realloc+0x20>
 800e4ca:	4b3a      	ldr	r3, [pc, #232]	; (800e5b4 <pbuf_realloc+0xfc>)
 800e4cc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800e4d0:	4939      	ldr	r1, [pc, #228]	; (800e5b8 <pbuf_realloc+0x100>)
 800e4d2:	483a      	ldr	r0, [pc, #232]	; (800e5bc <pbuf_realloc+0x104>)
 800e4d4:	f00a f8bc 	bl	8018650 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	891b      	ldrh	r3, [r3, #8]
 800e4dc:	887a      	ldrh	r2, [r7, #2]
 800e4de:	429a      	cmp	r2, r3
 800e4e0:	d263      	bcs.n	800e5aa <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	891a      	ldrh	r2, [r3, #8]
 800e4e6:	887b      	ldrh	r3, [r7, #2]
 800e4e8:	1ad3      	subs	r3, r2, r3
 800e4ea:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800e4ec:	887b      	ldrh	r3, [r7, #2]
 800e4ee:	817b      	strh	r3, [r7, #10]
  q = p;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800e4f4:	e018      	b.n	800e528 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	895b      	ldrh	r3, [r3, #10]
 800e4fa:	897a      	ldrh	r2, [r7, #10]
 800e4fc:	1ad3      	subs	r3, r2, r3
 800e4fe:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	891a      	ldrh	r2, [r3, #8]
 800e504:	893b      	ldrh	r3, [r7, #8]
 800e506:	1ad3      	subs	r3, r2, r3
 800e508:	b29a      	uxth	r2, r3
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d106      	bne.n	800e528 <pbuf_realloc+0x70>
 800e51a:	4b26      	ldr	r3, [pc, #152]	; (800e5b4 <pbuf_realloc+0xfc>)
 800e51c:	f240 12af 	movw	r2, #431	; 0x1af
 800e520:	4927      	ldr	r1, [pc, #156]	; (800e5c0 <pbuf_realloc+0x108>)
 800e522:	4826      	ldr	r0, [pc, #152]	; (800e5bc <pbuf_realloc+0x104>)
 800e524:	f00a f894 	bl	8018650 <iprintf>
  while (rem_len > q->len) {
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	895b      	ldrh	r3, [r3, #10]
 800e52c:	897a      	ldrh	r2, [r7, #10]
 800e52e:	429a      	cmp	r2, r3
 800e530:	d8e1      	bhi.n	800e4f6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	7b1b      	ldrb	r3, [r3, #12]
 800e536:	f003 030f 	and.w	r3, r3, #15
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d121      	bne.n	800e582 <pbuf_realloc+0xca>
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	895b      	ldrh	r3, [r3, #10]
 800e542:	897a      	ldrh	r2, [r7, #10]
 800e544:	429a      	cmp	r2, r3
 800e546:	d01c      	beq.n	800e582 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	7b5b      	ldrb	r3, [r3, #13]
 800e54c:	f003 0302 	and.w	r3, r3, #2
 800e550:	2b00      	cmp	r3, #0
 800e552:	d116      	bne.n	800e582 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	685a      	ldr	r2, [r3, #4]
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	1ad3      	subs	r3, r2, r3
 800e55c:	b29a      	uxth	r2, r3
 800e55e:	897b      	ldrh	r3, [r7, #10]
 800e560:	4413      	add	r3, r2
 800e562:	b29b      	uxth	r3, r3
 800e564:	4619      	mov	r1, r3
 800e566:	68f8      	ldr	r0, [r7, #12]
 800e568:	f7fe ffaa 	bl	800d4c0 <mem_trim>
 800e56c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d106      	bne.n	800e582 <pbuf_realloc+0xca>
 800e574:	4b0f      	ldr	r3, [pc, #60]	; (800e5b4 <pbuf_realloc+0xfc>)
 800e576:	f240 12bd 	movw	r2, #445	; 0x1bd
 800e57a:	4912      	ldr	r1, [pc, #72]	; (800e5c4 <pbuf_realloc+0x10c>)
 800e57c:	480f      	ldr	r0, [pc, #60]	; (800e5bc <pbuf_realloc+0x104>)
 800e57e:	f00a f867 	bl	8018650 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	897a      	ldrh	r2, [r7, #10]
 800e586:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	895a      	ldrh	r2, [r3, #10]
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d004      	beq.n	800e5a2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	4618      	mov	r0, r3
 800e59e:	f000 f943 	bl	800e828 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	601a      	str	r2, [r3, #0]
 800e5a8:	e000      	b.n	800e5ac <pbuf_realloc+0xf4>
    return;
 800e5aa:	bf00      	nop

}
 800e5ac:	3710      	adds	r7, #16
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	bd80      	pop	{r7, pc}
 800e5b2:	bf00      	nop
 800e5b4:	0801b138 	.word	0x0801b138
 800e5b8:	0801b250 	.word	0x0801b250
 800e5bc:	0801b198 	.word	0x0801b198
 800e5c0:	0801b268 	.word	0x0801b268
 800e5c4:	0801b280 	.word	0x0801b280

0800e5c8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b086      	sub	sp, #24
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	60f8      	str	r0, [r7, #12]
 800e5d0:	60b9      	str	r1, [r7, #8]
 800e5d2:	4613      	mov	r3, r2
 800e5d4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d106      	bne.n	800e5ea <pbuf_add_header_impl+0x22>
 800e5dc:	4b2b      	ldr	r3, [pc, #172]	; (800e68c <pbuf_add_header_impl+0xc4>)
 800e5de:	f240 12df 	movw	r2, #479	; 0x1df
 800e5e2:	492b      	ldr	r1, [pc, #172]	; (800e690 <pbuf_add_header_impl+0xc8>)
 800e5e4:	482b      	ldr	r0, [pc, #172]	; (800e694 <pbuf_add_header_impl+0xcc>)
 800e5e6:	f00a f833 	bl	8018650 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d003      	beq.n	800e5f8 <pbuf_add_header_impl+0x30>
 800e5f0:	68bb      	ldr	r3, [r7, #8]
 800e5f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e5f6:	d301      	bcc.n	800e5fc <pbuf_add_header_impl+0x34>
    return 1;
 800e5f8:	2301      	movs	r3, #1
 800e5fa:	e043      	b.n	800e684 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800e5fc:	68bb      	ldr	r3, [r7, #8]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d101      	bne.n	800e606 <pbuf_add_header_impl+0x3e>
    return 0;
 800e602:	2300      	movs	r3, #0
 800e604:	e03e      	b.n	800e684 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800e606:	68bb      	ldr	r3, [r7, #8]
 800e608:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	891a      	ldrh	r2, [r3, #8]
 800e60e:	8a7b      	ldrh	r3, [r7, #18]
 800e610:	4413      	add	r3, r2
 800e612:	b29b      	uxth	r3, r3
 800e614:	8a7a      	ldrh	r2, [r7, #18]
 800e616:	429a      	cmp	r2, r3
 800e618:	d901      	bls.n	800e61e <pbuf_add_header_impl+0x56>
    return 1;
 800e61a:	2301      	movs	r3, #1
 800e61c:	e032      	b.n	800e684 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	7b1b      	ldrb	r3, [r3, #12]
 800e622:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800e624:	8a3b      	ldrh	r3, [r7, #16]
 800e626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d00c      	beq.n	800e648 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	685a      	ldr	r2, [r3, #4]
 800e632:	68bb      	ldr	r3, [r7, #8]
 800e634:	425b      	negs	r3, r3
 800e636:	4413      	add	r3, r2
 800e638:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	3310      	adds	r3, #16
 800e63e:	697a      	ldr	r2, [r7, #20]
 800e640:	429a      	cmp	r2, r3
 800e642:	d20d      	bcs.n	800e660 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e644:	2301      	movs	r3, #1
 800e646:	e01d      	b.n	800e684 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e648:	79fb      	ldrb	r3, [r7, #7]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d006      	beq.n	800e65c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	685a      	ldr	r2, [r3, #4]
 800e652:	68bb      	ldr	r3, [r7, #8]
 800e654:	425b      	negs	r3, r3
 800e656:	4413      	add	r3, r2
 800e658:	617b      	str	r3, [r7, #20]
 800e65a:	e001      	b.n	800e660 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e65c:	2301      	movs	r3, #1
 800e65e:	e011      	b.n	800e684 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	697a      	ldr	r2, [r7, #20]
 800e664:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	895a      	ldrh	r2, [r3, #10]
 800e66a:	8a7b      	ldrh	r3, [r7, #18]
 800e66c:	4413      	add	r3, r2
 800e66e:	b29a      	uxth	r2, r3
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	891a      	ldrh	r2, [r3, #8]
 800e678:	8a7b      	ldrh	r3, [r7, #18]
 800e67a:	4413      	add	r3, r2
 800e67c:	b29a      	uxth	r2, r3
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	811a      	strh	r2, [r3, #8]


  return 0;
 800e682:	2300      	movs	r3, #0
}
 800e684:	4618      	mov	r0, r3
 800e686:	3718      	adds	r7, #24
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}
 800e68c:	0801b138 	.word	0x0801b138
 800e690:	0801b29c 	.word	0x0801b29c
 800e694:	0801b198 	.word	0x0801b198

0800e698 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b082      	sub	sp, #8
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
 800e6a0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	6839      	ldr	r1, [r7, #0]
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f7ff ff8e 	bl	800e5c8 <pbuf_add_header_impl>
 800e6ac:	4603      	mov	r3, r0
}
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	3708      	adds	r7, #8
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd80      	pop	{r7, pc}
	...

0800e6b8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b084      	sub	sp, #16
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
 800e6c0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d106      	bne.n	800e6d6 <pbuf_remove_header+0x1e>
 800e6c8:	4b20      	ldr	r3, [pc, #128]	; (800e74c <pbuf_remove_header+0x94>)
 800e6ca:	f240 224b 	movw	r2, #587	; 0x24b
 800e6ce:	4920      	ldr	r1, [pc, #128]	; (800e750 <pbuf_remove_header+0x98>)
 800e6d0:	4820      	ldr	r0, [pc, #128]	; (800e754 <pbuf_remove_header+0x9c>)
 800e6d2:	f009 ffbd 	bl	8018650 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d003      	beq.n	800e6e4 <pbuf_remove_header+0x2c>
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e6e2:	d301      	bcc.n	800e6e8 <pbuf_remove_header+0x30>
    return 1;
 800e6e4:	2301      	movs	r3, #1
 800e6e6:	e02c      	b.n	800e742 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e6e8:	683b      	ldr	r3, [r7, #0]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d101      	bne.n	800e6f2 <pbuf_remove_header+0x3a>
    return 0;
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	e027      	b.n	800e742 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	895b      	ldrh	r3, [r3, #10]
 800e6fa:	89fa      	ldrh	r2, [r7, #14]
 800e6fc:	429a      	cmp	r2, r3
 800e6fe:	d908      	bls.n	800e712 <pbuf_remove_header+0x5a>
 800e700:	4b12      	ldr	r3, [pc, #72]	; (800e74c <pbuf_remove_header+0x94>)
 800e702:	f240 2255 	movw	r2, #597	; 0x255
 800e706:	4914      	ldr	r1, [pc, #80]	; (800e758 <pbuf_remove_header+0xa0>)
 800e708:	4812      	ldr	r0, [pc, #72]	; (800e754 <pbuf_remove_header+0x9c>)
 800e70a:	f009 ffa1 	bl	8018650 <iprintf>
 800e70e:	2301      	movs	r3, #1
 800e710:	e017      	b.n	800e742 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	685b      	ldr	r3, [r3, #4]
 800e716:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	685a      	ldr	r2, [r3, #4]
 800e71c:	683b      	ldr	r3, [r7, #0]
 800e71e:	441a      	add	r2, r3
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	895a      	ldrh	r2, [r3, #10]
 800e728:	89fb      	ldrh	r3, [r7, #14]
 800e72a:	1ad3      	subs	r3, r2, r3
 800e72c:	b29a      	uxth	r2, r3
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	891a      	ldrh	r2, [r3, #8]
 800e736:	89fb      	ldrh	r3, [r7, #14]
 800e738:	1ad3      	subs	r3, r2, r3
 800e73a:	b29a      	uxth	r2, r3
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e740:	2300      	movs	r3, #0
}
 800e742:	4618      	mov	r0, r3
 800e744:	3710      	adds	r7, #16
 800e746:	46bd      	mov	sp, r7
 800e748:	bd80      	pop	{r7, pc}
 800e74a:	bf00      	nop
 800e74c:	0801b138 	.word	0x0801b138
 800e750:	0801b29c 	.word	0x0801b29c
 800e754:	0801b198 	.word	0x0801b198
 800e758:	0801b2a8 	.word	0x0801b2a8

0800e75c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b082      	sub	sp, #8
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
 800e764:	460b      	mov	r3, r1
 800e766:	807b      	strh	r3, [r7, #2]
 800e768:	4613      	mov	r3, r2
 800e76a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e76c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e770:	2b00      	cmp	r3, #0
 800e772:	da08      	bge.n	800e786 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e774:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e778:	425b      	negs	r3, r3
 800e77a:	4619      	mov	r1, r3
 800e77c:	6878      	ldr	r0, [r7, #4]
 800e77e:	f7ff ff9b 	bl	800e6b8 <pbuf_remove_header>
 800e782:	4603      	mov	r3, r0
 800e784:	e007      	b.n	800e796 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e786:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e78a:	787a      	ldrb	r2, [r7, #1]
 800e78c:	4619      	mov	r1, r3
 800e78e:	6878      	ldr	r0, [r7, #4]
 800e790:	f7ff ff1a 	bl	800e5c8 <pbuf_add_header_impl>
 800e794:	4603      	mov	r3, r0
  }
}
 800e796:	4618      	mov	r0, r3
 800e798:	3708      	adds	r7, #8
 800e79a:	46bd      	mov	sp, r7
 800e79c:	bd80      	pop	{r7, pc}

0800e79e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e79e:	b580      	push	{r7, lr}
 800e7a0:	b082      	sub	sp, #8
 800e7a2:	af00      	add	r7, sp, #0
 800e7a4:	6078      	str	r0, [r7, #4]
 800e7a6:	460b      	mov	r3, r1
 800e7a8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e7aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e7ae:	2201      	movs	r2, #1
 800e7b0:	4619      	mov	r1, r3
 800e7b2:	6878      	ldr	r0, [r7, #4]
 800e7b4:	f7ff ffd2 	bl	800e75c <pbuf_header_impl>
 800e7b8:	4603      	mov	r3, r0
}
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	3708      	adds	r7, #8
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bd80      	pop	{r7, pc}

0800e7c2 <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 800e7c2:	b580      	push	{r7, lr}
 800e7c4:	b086      	sub	sp, #24
 800e7c6:	af00      	add	r7, sp, #0
 800e7c8:	6078      	str	r0, [r7, #4]
 800e7ca:	460b      	mov	r3, r1
 800e7cc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 800e7d2:	887b      	ldrh	r3, [r7, #2]
 800e7d4:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800e7d6:	e01c      	b.n	800e812 <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 800e7d8:	697b      	ldr	r3, [r7, #20]
 800e7da:	895b      	ldrh	r3, [r3, #10]
 800e7dc:	8a7a      	ldrh	r2, [r7, #18]
 800e7de:	429a      	cmp	r2, r3
 800e7e0:	d310      	bcc.n	800e804 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 800e7e2:	697b      	ldr	r3, [r7, #20]
 800e7e4:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 800e7e6:	697b      	ldr	r3, [r7, #20]
 800e7e8:	895b      	ldrh	r3, [r3, #10]
 800e7ea:	8a7a      	ldrh	r2, [r7, #18]
 800e7ec:	1ad3      	subs	r3, r2, r3
 800e7ee:	827b      	strh	r3, [r7, #18]
      p = p->next;
 800e7f0:	697b      	ldr	r3, [r7, #20]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	617b      	str	r3, [r7, #20]
      f->next = 0;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 800e7fc:	68f8      	ldr	r0, [r7, #12]
 800e7fe:	f000 f813 	bl	800e828 <pbuf_free>
 800e802:	e006      	b.n	800e812 <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 800e804:	8a7b      	ldrh	r3, [r7, #18]
 800e806:	4619      	mov	r1, r3
 800e808:	6978      	ldr	r0, [r7, #20]
 800e80a:	f7ff ff55 	bl	800e6b8 <pbuf_remove_header>
      free_left = 0;
 800e80e:	2300      	movs	r3, #0
 800e810:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800e812:	8a7b      	ldrh	r3, [r7, #18]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d002      	beq.n	800e81e <pbuf_free_header+0x5c>
 800e818:	697b      	ldr	r3, [r7, #20]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d1dc      	bne.n	800e7d8 <pbuf_free_header+0x16>
    }
  }
  return p;
 800e81e:	697b      	ldr	r3, [r7, #20]
}
 800e820:	4618      	mov	r0, r3
 800e822:	3718      	adds	r7, #24
 800e824:	46bd      	mov	sp, r7
 800e826:	bd80      	pop	{r7, pc}

0800e828 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e828:	b580      	push	{r7, lr}
 800e82a:	b088      	sub	sp, #32
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d10b      	bne.n	800e84e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d106      	bne.n	800e84a <pbuf_free+0x22>
 800e83c:	4b3b      	ldr	r3, [pc, #236]	; (800e92c <pbuf_free+0x104>)
 800e83e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800e842:	493b      	ldr	r1, [pc, #236]	; (800e930 <pbuf_free+0x108>)
 800e844:	483b      	ldr	r0, [pc, #236]	; (800e934 <pbuf_free+0x10c>)
 800e846:	f009 ff03 	bl	8018650 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e84a:	2300      	movs	r3, #0
 800e84c:	e069      	b.n	800e922 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e84e:	2300      	movs	r3, #0
 800e850:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e852:	e062      	b.n	800e91a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800e854:	f009 fe7a 	bl	801854c <sys_arch_protect>
 800e858:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	7b9b      	ldrb	r3, [r3, #14]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d106      	bne.n	800e870 <pbuf_free+0x48>
 800e862:	4b32      	ldr	r3, [pc, #200]	; (800e92c <pbuf_free+0x104>)
 800e864:	f240 22f1 	movw	r2, #753	; 0x2f1
 800e868:	4933      	ldr	r1, [pc, #204]	; (800e938 <pbuf_free+0x110>)
 800e86a:	4832      	ldr	r0, [pc, #200]	; (800e934 <pbuf_free+0x10c>)
 800e86c:	f009 fef0 	bl	8018650 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	7b9b      	ldrb	r3, [r3, #14]
 800e874:	3b01      	subs	r3, #1
 800e876:	b2da      	uxtb	r2, r3
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	739a      	strb	r2, [r3, #14]
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	7b9b      	ldrb	r3, [r3, #14]
 800e880:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800e882:	69b8      	ldr	r0, [r7, #24]
 800e884:	f009 fe70 	bl	8018568 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e888:	7dfb      	ldrb	r3, [r7, #23]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d143      	bne.n	800e916 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	7b1b      	ldrb	r3, [r3, #12]
 800e898:	f003 030f 	and.w	r3, r3, #15
 800e89c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	7b5b      	ldrb	r3, [r3, #13]
 800e8a2:	f003 0302 	and.w	r3, r3, #2
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d011      	beq.n	800e8ce <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	691b      	ldr	r3, [r3, #16]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d106      	bne.n	800e8c4 <pbuf_free+0x9c>
 800e8b6:	4b1d      	ldr	r3, [pc, #116]	; (800e92c <pbuf_free+0x104>)
 800e8b8:	f240 22ff 	movw	r2, #767	; 0x2ff
 800e8bc:	491f      	ldr	r1, [pc, #124]	; (800e93c <pbuf_free+0x114>)
 800e8be:	481d      	ldr	r0, [pc, #116]	; (800e934 <pbuf_free+0x10c>)
 800e8c0:	f009 fec6 	bl	8018650 <iprintf>
        pc->custom_free_function(p);
 800e8c4:	68bb      	ldr	r3, [r7, #8]
 800e8c6:	691b      	ldr	r3, [r3, #16]
 800e8c8:	6878      	ldr	r0, [r7, #4]
 800e8ca:	4798      	blx	r3
 800e8cc:	e01d      	b.n	800e90a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e8ce:	7bfb      	ldrb	r3, [r7, #15]
 800e8d0:	2b02      	cmp	r3, #2
 800e8d2:	d104      	bne.n	800e8de <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800e8d4:	6879      	ldr	r1, [r7, #4]
 800e8d6:	200c      	movs	r0, #12
 800e8d8:	f7ff f8d0 	bl	800da7c <memp_free>
 800e8dc:	e015      	b.n	800e90a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e8de:	7bfb      	ldrb	r3, [r7, #15]
 800e8e0:	2b01      	cmp	r3, #1
 800e8e2:	d104      	bne.n	800e8ee <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800e8e4:	6879      	ldr	r1, [r7, #4]
 800e8e6:	200b      	movs	r0, #11
 800e8e8:	f7ff f8c8 	bl	800da7c <memp_free>
 800e8ec:	e00d      	b.n	800e90a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e8ee:	7bfb      	ldrb	r3, [r7, #15]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d103      	bne.n	800e8fc <pbuf_free+0xd4>
          mem_free(p);
 800e8f4:	6878      	ldr	r0, [r7, #4]
 800e8f6:	f7fe fd53 	bl	800d3a0 <mem_free>
 800e8fa:	e006      	b.n	800e90a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e8fc:	4b0b      	ldr	r3, [pc, #44]	; (800e92c <pbuf_free+0x104>)
 800e8fe:	f240 320f 	movw	r2, #783	; 0x30f
 800e902:	490f      	ldr	r1, [pc, #60]	; (800e940 <pbuf_free+0x118>)
 800e904:	480b      	ldr	r0, [pc, #44]	; (800e934 <pbuf_free+0x10c>)
 800e906:	f009 fea3 	bl	8018650 <iprintf>
        }
      }
      count++;
 800e90a:	7ffb      	ldrb	r3, [r7, #31]
 800e90c:	3301      	adds	r3, #1
 800e90e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800e910:	693b      	ldr	r3, [r7, #16]
 800e912:	607b      	str	r3, [r7, #4]
 800e914:	e001      	b.n	800e91a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e916:	2300      	movs	r3, #0
 800e918:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d199      	bne.n	800e854 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e920:	7ffb      	ldrb	r3, [r7, #31]
}
 800e922:	4618      	mov	r0, r3
 800e924:	3720      	adds	r7, #32
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}
 800e92a:	bf00      	nop
 800e92c:	0801b138 	.word	0x0801b138
 800e930:	0801b29c 	.word	0x0801b29c
 800e934:	0801b198 	.word	0x0801b198
 800e938:	0801b2c8 	.word	0x0801b2c8
 800e93c:	0801b2e0 	.word	0x0801b2e0
 800e940:	0801b304 	.word	0x0801b304

0800e944 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e944:	b480      	push	{r7}
 800e946:	b085      	sub	sp, #20
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e94c:	2300      	movs	r3, #0
 800e94e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e950:	e005      	b.n	800e95e <pbuf_clen+0x1a>
    ++len;
 800e952:	89fb      	ldrh	r3, [r7, #14]
 800e954:	3301      	adds	r3, #1
 800e956:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d1f6      	bne.n	800e952 <pbuf_clen+0xe>
  }
  return len;
 800e964:	89fb      	ldrh	r3, [r7, #14]
}
 800e966:	4618      	mov	r0, r3
 800e968:	3714      	adds	r7, #20
 800e96a:	46bd      	mov	sp, r7
 800e96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e970:	4770      	bx	lr
	...

0800e974 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b084      	sub	sp, #16
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d016      	beq.n	800e9b0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e982:	f009 fde3 	bl	801854c <sys_arch_protect>
 800e986:	60f8      	str	r0, [r7, #12]
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	7b9b      	ldrb	r3, [r3, #14]
 800e98c:	3301      	adds	r3, #1
 800e98e:	b2da      	uxtb	r2, r3
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	739a      	strb	r2, [r3, #14]
 800e994:	68f8      	ldr	r0, [r7, #12]
 800e996:	f009 fde7 	bl	8018568 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	7b9b      	ldrb	r3, [r3, #14]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d106      	bne.n	800e9b0 <pbuf_ref+0x3c>
 800e9a2:	4b05      	ldr	r3, [pc, #20]	; (800e9b8 <pbuf_ref+0x44>)
 800e9a4:	f240 3242 	movw	r2, #834	; 0x342
 800e9a8:	4904      	ldr	r1, [pc, #16]	; (800e9bc <pbuf_ref+0x48>)
 800e9aa:	4805      	ldr	r0, [pc, #20]	; (800e9c0 <pbuf_ref+0x4c>)
 800e9ac:	f009 fe50 	bl	8018650 <iprintf>
  }
}
 800e9b0:	bf00      	nop
 800e9b2:	3710      	adds	r7, #16
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	bd80      	pop	{r7, pc}
 800e9b8:	0801b138 	.word	0x0801b138
 800e9bc:	0801b318 	.word	0x0801b318
 800e9c0:	0801b198 	.word	0x0801b198

0800e9c4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b084      	sub	sp, #16
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
 800e9cc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d002      	beq.n	800e9da <pbuf_cat+0x16>
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d107      	bne.n	800e9ea <pbuf_cat+0x26>
 800e9da:	4b20      	ldr	r3, [pc, #128]	; (800ea5c <pbuf_cat+0x98>)
 800e9dc:	f240 3259 	movw	r2, #857	; 0x359
 800e9e0:	491f      	ldr	r1, [pc, #124]	; (800ea60 <pbuf_cat+0x9c>)
 800e9e2:	4820      	ldr	r0, [pc, #128]	; (800ea64 <pbuf_cat+0xa0>)
 800e9e4:	f009 fe34 	bl	8018650 <iprintf>
 800e9e8:	e034      	b.n	800ea54 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	60fb      	str	r3, [r7, #12]
 800e9ee:	e00a      	b.n	800ea06 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	891a      	ldrh	r2, [r3, #8]
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	891b      	ldrh	r3, [r3, #8]
 800e9f8:	4413      	add	r3, r2
 800e9fa:	b29a      	uxth	r2, r3
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	60fb      	str	r3, [r7, #12]
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d1f0      	bne.n	800e9f0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	891a      	ldrh	r2, [r3, #8]
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	895b      	ldrh	r3, [r3, #10]
 800ea16:	429a      	cmp	r2, r3
 800ea18:	d006      	beq.n	800ea28 <pbuf_cat+0x64>
 800ea1a:	4b10      	ldr	r3, [pc, #64]	; (800ea5c <pbuf_cat+0x98>)
 800ea1c:	f240 3262 	movw	r2, #866	; 0x362
 800ea20:	4911      	ldr	r1, [pc, #68]	; (800ea68 <pbuf_cat+0xa4>)
 800ea22:	4810      	ldr	r0, [pc, #64]	; (800ea64 <pbuf_cat+0xa0>)
 800ea24:	f009 fe14 	bl	8018650 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d006      	beq.n	800ea3e <pbuf_cat+0x7a>
 800ea30:	4b0a      	ldr	r3, [pc, #40]	; (800ea5c <pbuf_cat+0x98>)
 800ea32:	f240 3263 	movw	r2, #867	; 0x363
 800ea36:	490d      	ldr	r1, [pc, #52]	; (800ea6c <pbuf_cat+0xa8>)
 800ea38:	480a      	ldr	r0, [pc, #40]	; (800ea64 <pbuf_cat+0xa0>)
 800ea3a:	f009 fe09 	bl	8018650 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	891a      	ldrh	r2, [r3, #8]
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	891b      	ldrh	r3, [r3, #8]
 800ea46:	4413      	add	r3, r2
 800ea48:	b29a      	uxth	r2, r3
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	683a      	ldr	r2, [r7, #0]
 800ea52:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ea54:	3710      	adds	r7, #16
 800ea56:	46bd      	mov	sp, r7
 800ea58:	bd80      	pop	{r7, pc}
 800ea5a:	bf00      	nop
 800ea5c:	0801b138 	.word	0x0801b138
 800ea60:	0801b32c 	.word	0x0801b32c
 800ea64:	0801b198 	.word	0x0801b198
 800ea68:	0801b364 	.word	0x0801b364
 800ea6c:	0801b394 	.word	0x0801b394

0800ea70 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b082      	sub	sp, #8
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
 800ea78:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800ea7a:	6839      	ldr	r1, [r7, #0]
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f7ff ffa1 	bl	800e9c4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800ea82:	6838      	ldr	r0, [r7, #0]
 800ea84:	f7ff ff76 	bl	800e974 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800ea88:	bf00      	nop
 800ea8a:	3708      	adds	r7, #8
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}

0800ea90 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b086      	sub	sp, #24
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
 800ea98:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	617b      	str	r3, [r7, #20]
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d008      	beq.n	800eaba <pbuf_copy+0x2a>
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d005      	beq.n	800eaba <pbuf_copy+0x2a>
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	891a      	ldrh	r2, [r3, #8]
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	891b      	ldrh	r3, [r3, #8]
 800eab6:	429a      	cmp	r2, r3
 800eab8:	d209      	bcs.n	800eace <pbuf_copy+0x3e>
 800eaba:	4b57      	ldr	r3, [pc, #348]	; (800ec18 <pbuf_copy+0x188>)
 800eabc:	f240 32c9 	movw	r2, #969	; 0x3c9
 800eac0:	4956      	ldr	r1, [pc, #344]	; (800ec1c <pbuf_copy+0x18c>)
 800eac2:	4857      	ldr	r0, [pc, #348]	; (800ec20 <pbuf_copy+0x190>)
 800eac4:	f009 fdc4 	bl	8018650 <iprintf>
 800eac8:	f06f 030f 	mvn.w	r3, #15
 800eacc:	e09f      	b.n	800ec0e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	895b      	ldrh	r3, [r3, #10]
 800ead2:	461a      	mov	r2, r3
 800ead4:	697b      	ldr	r3, [r7, #20]
 800ead6:	1ad2      	subs	r2, r2, r3
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	895b      	ldrh	r3, [r3, #10]
 800eadc:	4619      	mov	r1, r3
 800eade:	693b      	ldr	r3, [r7, #16]
 800eae0:	1acb      	subs	r3, r1, r3
 800eae2:	429a      	cmp	r2, r3
 800eae4:	d306      	bcc.n	800eaf4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	895b      	ldrh	r3, [r3, #10]
 800eaea:	461a      	mov	r2, r3
 800eaec:	693b      	ldr	r3, [r7, #16]
 800eaee:	1ad3      	subs	r3, r2, r3
 800eaf0:	60fb      	str	r3, [r7, #12]
 800eaf2:	e005      	b.n	800eb00 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	895b      	ldrh	r3, [r3, #10]
 800eaf8:	461a      	mov	r2, r3
 800eafa:	697b      	ldr	r3, [r7, #20]
 800eafc:	1ad3      	subs	r3, r2, r3
 800eafe:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	685a      	ldr	r2, [r3, #4]
 800eb04:	697b      	ldr	r3, [r7, #20]
 800eb06:	18d0      	adds	r0, r2, r3
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	685a      	ldr	r2, [r3, #4]
 800eb0c:	693b      	ldr	r3, [r7, #16]
 800eb0e:	4413      	add	r3, r2
 800eb10:	68fa      	ldr	r2, [r7, #12]
 800eb12:	4619      	mov	r1, r3
 800eb14:	f009 fd6c 	bl	80185f0 <memcpy>
    offset_to += len;
 800eb18:	697a      	ldr	r2, [r7, #20]
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	4413      	add	r3, r2
 800eb1e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800eb20:	693a      	ldr	r2, [r7, #16]
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	4413      	add	r3, r2
 800eb26:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	895b      	ldrh	r3, [r3, #10]
 800eb2c:	461a      	mov	r2, r3
 800eb2e:	697b      	ldr	r3, [r7, #20]
 800eb30:	4293      	cmp	r3, r2
 800eb32:	d906      	bls.n	800eb42 <pbuf_copy+0xb2>
 800eb34:	4b38      	ldr	r3, [pc, #224]	; (800ec18 <pbuf_copy+0x188>)
 800eb36:	f240 32d9 	movw	r2, #985	; 0x3d9
 800eb3a:	493a      	ldr	r1, [pc, #232]	; (800ec24 <pbuf_copy+0x194>)
 800eb3c:	4838      	ldr	r0, [pc, #224]	; (800ec20 <pbuf_copy+0x190>)
 800eb3e:	f009 fd87 	bl	8018650 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800eb42:	683b      	ldr	r3, [r7, #0]
 800eb44:	895b      	ldrh	r3, [r3, #10]
 800eb46:	461a      	mov	r2, r3
 800eb48:	693b      	ldr	r3, [r7, #16]
 800eb4a:	4293      	cmp	r3, r2
 800eb4c:	d906      	bls.n	800eb5c <pbuf_copy+0xcc>
 800eb4e:	4b32      	ldr	r3, [pc, #200]	; (800ec18 <pbuf_copy+0x188>)
 800eb50:	f240 32da 	movw	r2, #986	; 0x3da
 800eb54:	4934      	ldr	r1, [pc, #208]	; (800ec28 <pbuf_copy+0x198>)
 800eb56:	4832      	ldr	r0, [pc, #200]	; (800ec20 <pbuf_copy+0x190>)
 800eb58:	f009 fd7a 	bl	8018650 <iprintf>
    if (offset_from >= p_from->len) {
 800eb5c:	683b      	ldr	r3, [r7, #0]
 800eb5e:	895b      	ldrh	r3, [r3, #10]
 800eb60:	461a      	mov	r2, r3
 800eb62:	693b      	ldr	r3, [r7, #16]
 800eb64:	4293      	cmp	r3, r2
 800eb66:	d304      	bcc.n	800eb72 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800eb68:	2300      	movs	r3, #0
 800eb6a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	895b      	ldrh	r3, [r3, #10]
 800eb76:	461a      	mov	r2, r3
 800eb78:	697b      	ldr	r3, [r7, #20]
 800eb7a:	4293      	cmp	r3, r2
 800eb7c:	d114      	bne.n	800eba8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800eb7e:	2300      	movs	r3, #0
 800eb80:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d10c      	bne.n	800eba8 <pbuf_copy+0x118>
 800eb8e:	683b      	ldr	r3, [r7, #0]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d009      	beq.n	800eba8 <pbuf_copy+0x118>
 800eb94:	4b20      	ldr	r3, [pc, #128]	; (800ec18 <pbuf_copy+0x188>)
 800eb96:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800eb9a:	4924      	ldr	r1, [pc, #144]	; (800ec2c <pbuf_copy+0x19c>)
 800eb9c:	4820      	ldr	r0, [pc, #128]	; (800ec20 <pbuf_copy+0x190>)
 800eb9e:	f009 fd57 	bl	8018650 <iprintf>
 800eba2:	f06f 030f 	mvn.w	r3, #15
 800eba6:	e032      	b.n	800ec0e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d013      	beq.n	800ebd6 <pbuf_copy+0x146>
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	895a      	ldrh	r2, [r3, #10]
 800ebb2:	683b      	ldr	r3, [r7, #0]
 800ebb4:	891b      	ldrh	r3, [r3, #8]
 800ebb6:	429a      	cmp	r2, r3
 800ebb8:	d10d      	bne.n	800ebd6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d009      	beq.n	800ebd6 <pbuf_copy+0x146>
 800ebc2:	4b15      	ldr	r3, [pc, #84]	; (800ec18 <pbuf_copy+0x188>)
 800ebc4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800ebc8:	4919      	ldr	r1, [pc, #100]	; (800ec30 <pbuf_copy+0x1a0>)
 800ebca:	4815      	ldr	r0, [pc, #84]	; (800ec20 <pbuf_copy+0x190>)
 800ebcc:	f009 fd40 	bl	8018650 <iprintf>
 800ebd0:	f06f 0305 	mvn.w	r3, #5
 800ebd4:	e01b      	b.n	800ec0e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d013      	beq.n	800ec04 <pbuf_copy+0x174>
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	895a      	ldrh	r2, [r3, #10]
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	891b      	ldrh	r3, [r3, #8]
 800ebe4:	429a      	cmp	r2, r3
 800ebe6:	d10d      	bne.n	800ec04 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d009      	beq.n	800ec04 <pbuf_copy+0x174>
 800ebf0:	4b09      	ldr	r3, [pc, #36]	; (800ec18 <pbuf_copy+0x188>)
 800ebf2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800ebf6:	490e      	ldr	r1, [pc, #56]	; (800ec30 <pbuf_copy+0x1a0>)
 800ebf8:	4809      	ldr	r0, [pc, #36]	; (800ec20 <pbuf_copy+0x190>)
 800ebfa:	f009 fd29 	bl	8018650 <iprintf>
 800ebfe:	f06f 0305 	mvn.w	r3, #5
 800ec02:	e004      	b.n	800ec0e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800ec04:	683b      	ldr	r3, [r7, #0]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	f47f af61 	bne.w	800eace <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800ec0c:	2300      	movs	r3, #0
}
 800ec0e:	4618      	mov	r0, r3
 800ec10:	3718      	adds	r7, #24
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bd80      	pop	{r7, pc}
 800ec16:	bf00      	nop
 800ec18:	0801b138 	.word	0x0801b138
 800ec1c:	0801b3e0 	.word	0x0801b3e0
 800ec20:	0801b198 	.word	0x0801b198
 800ec24:	0801b410 	.word	0x0801b410
 800ec28:	0801b428 	.word	0x0801b428
 800ec2c:	0801b444 	.word	0x0801b444
 800ec30:	0801b454 	.word	0x0801b454

0800ec34 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b088      	sub	sp, #32
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	60f8      	str	r0, [r7, #12]
 800ec3c:	60b9      	str	r1, [r7, #8]
 800ec3e:	4611      	mov	r1, r2
 800ec40:	461a      	mov	r2, r3
 800ec42:	460b      	mov	r3, r1
 800ec44:	80fb      	strh	r3, [r7, #6]
 800ec46:	4613      	mov	r3, r2
 800ec48:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800ec4e:	2300      	movs	r3, #0
 800ec50:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d108      	bne.n	800ec6a <pbuf_copy_partial+0x36>
 800ec58:	4b2b      	ldr	r3, [pc, #172]	; (800ed08 <pbuf_copy_partial+0xd4>)
 800ec5a:	f240 420a 	movw	r2, #1034	; 0x40a
 800ec5e:	492b      	ldr	r1, [pc, #172]	; (800ed0c <pbuf_copy_partial+0xd8>)
 800ec60:	482b      	ldr	r0, [pc, #172]	; (800ed10 <pbuf_copy_partial+0xdc>)
 800ec62:	f009 fcf5 	bl	8018650 <iprintf>
 800ec66:	2300      	movs	r3, #0
 800ec68:	e04a      	b.n	800ed00 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800ec6a:	68bb      	ldr	r3, [r7, #8]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d108      	bne.n	800ec82 <pbuf_copy_partial+0x4e>
 800ec70:	4b25      	ldr	r3, [pc, #148]	; (800ed08 <pbuf_copy_partial+0xd4>)
 800ec72:	f240 420b 	movw	r2, #1035	; 0x40b
 800ec76:	4927      	ldr	r1, [pc, #156]	; (800ed14 <pbuf_copy_partial+0xe0>)
 800ec78:	4825      	ldr	r0, [pc, #148]	; (800ed10 <pbuf_copy_partial+0xdc>)
 800ec7a:	f009 fce9 	bl	8018650 <iprintf>
 800ec7e:	2300      	movs	r3, #0
 800ec80:	e03e      	b.n	800ed00 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	61fb      	str	r3, [r7, #28]
 800ec86:	e034      	b.n	800ecf2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800ec88:	88bb      	ldrh	r3, [r7, #4]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d00a      	beq.n	800eca4 <pbuf_copy_partial+0x70>
 800ec8e:	69fb      	ldr	r3, [r7, #28]
 800ec90:	895b      	ldrh	r3, [r3, #10]
 800ec92:	88ba      	ldrh	r2, [r7, #4]
 800ec94:	429a      	cmp	r2, r3
 800ec96:	d305      	bcc.n	800eca4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800ec98:	69fb      	ldr	r3, [r7, #28]
 800ec9a:	895b      	ldrh	r3, [r3, #10]
 800ec9c:	88ba      	ldrh	r2, [r7, #4]
 800ec9e:	1ad3      	subs	r3, r2, r3
 800eca0:	80bb      	strh	r3, [r7, #4]
 800eca2:	e023      	b.n	800ecec <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800eca4:	69fb      	ldr	r3, [r7, #28]
 800eca6:	895a      	ldrh	r2, [r3, #10]
 800eca8:	88bb      	ldrh	r3, [r7, #4]
 800ecaa:	1ad3      	subs	r3, r2, r3
 800ecac:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ecae:	8b3a      	ldrh	r2, [r7, #24]
 800ecb0:	88fb      	ldrh	r3, [r7, #6]
 800ecb2:	429a      	cmp	r2, r3
 800ecb4:	d901      	bls.n	800ecba <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ecb6:	88fb      	ldrh	r3, [r7, #6]
 800ecb8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ecba:	8b7b      	ldrh	r3, [r7, #26]
 800ecbc:	68ba      	ldr	r2, [r7, #8]
 800ecbe:	18d0      	adds	r0, r2, r3
 800ecc0:	69fb      	ldr	r3, [r7, #28]
 800ecc2:	685a      	ldr	r2, [r3, #4]
 800ecc4:	88bb      	ldrh	r3, [r7, #4]
 800ecc6:	4413      	add	r3, r2
 800ecc8:	8b3a      	ldrh	r2, [r7, #24]
 800ecca:	4619      	mov	r1, r3
 800eccc:	f009 fc90 	bl	80185f0 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ecd0:	8afa      	ldrh	r2, [r7, #22]
 800ecd2:	8b3b      	ldrh	r3, [r7, #24]
 800ecd4:	4413      	add	r3, r2
 800ecd6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800ecd8:	8b7a      	ldrh	r2, [r7, #26]
 800ecda:	8b3b      	ldrh	r3, [r7, #24]
 800ecdc:	4413      	add	r3, r2
 800ecde:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ece0:	88fa      	ldrh	r2, [r7, #6]
 800ece2:	8b3b      	ldrh	r3, [r7, #24]
 800ece4:	1ad3      	subs	r3, r2, r3
 800ece6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ece8:	2300      	movs	r3, #0
 800ecea:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ecec:	69fb      	ldr	r3, [r7, #28]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	61fb      	str	r3, [r7, #28]
 800ecf2:	88fb      	ldrh	r3, [r7, #6]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d002      	beq.n	800ecfe <pbuf_copy_partial+0xca>
 800ecf8:	69fb      	ldr	r3, [r7, #28]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d1c4      	bne.n	800ec88 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ecfe:	8afb      	ldrh	r3, [r7, #22]
}
 800ed00:	4618      	mov	r0, r3
 800ed02:	3720      	adds	r7, #32
 800ed04:	46bd      	mov	sp, r7
 800ed06:	bd80      	pop	{r7, pc}
 800ed08:	0801b138 	.word	0x0801b138
 800ed0c:	0801b480 	.word	0x0801b480
 800ed10:	0801b198 	.word	0x0801b198
 800ed14:	0801b4a0 	.word	0x0801b4a0

0800ed18 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b084      	sub	sp, #16
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	4603      	mov	r3, r0
 800ed20:	603a      	str	r2, [r7, #0]
 800ed22:	71fb      	strb	r3, [r7, #7]
 800ed24:	460b      	mov	r3, r1
 800ed26:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ed28:	683b      	ldr	r3, [r7, #0]
 800ed2a:	8919      	ldrh	r1, [r3, #8]
 800ed2c:	88ba      	ldrh	r2, [r7, #4]
 800ed2e:	79fb      	ldrb	r3, [r7, #7]
 800ed30:	4618      	mov	r0, r3
 800ed32:	f7ff fa63 	bl	800e1fc <pbuf_alloc>
 800ed36:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d101      	bne.n	800ed42 <pbuf_clone+0x2a>
    return NULL;
 800ed3e:	2300      	movs	r3, #0
 800ed40:	e011      	b.n	800ed66 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800ed42:	6839      	ldr	r1, [r7, #0]
 800ed44:	68f8      	ldr	r0, [r7, #12]
 800ed46:	f7ff fea3 	bl	800ea90 <pbuf_copy>
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ed4e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d006      	beq.n	800ed64 <pbuf_clone+0x4c>
 800ed56:	4b06      	ldr	r3, [pc, #24]	; (800ed70 <pbuf_clone+0x58>)
 800ed58:	f240 5224 	movw	r2, #1316	; 0x524
 800ed5c:	4905      	ldr	r1, [pc, #20]	; (800ed74 <pbuf_clone+0x5c>)
 800ed5e:	4806      	ldr	r0, [pc, #24]	; (800ed78 <pbuf_clone+0x60>)
 800ed60:	f009 fc76 	bl	8018650 <iprintf>
  return q;
 800ed64:	68fb      	ldr	r3, [r7, #12]
}
 800ed66:	4618      	mov	r0, r3
 800ed68:	3710      	adds	r7, #16
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	bd80      	pop	{r7, pc}
 800ed6e:	bf00      	nop
 800ed70:	0801b138 	.word	0x0801b138
 800ed74:	0801b5ac 	.word	0x0801b5ac
 800ed78:	0801b198 	.word	0x0801b198

0800ed7c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ed80:	f009 fc7e 	bl	8018680 <rand>
 800ed84:	4603      	mov	r3, r0
 800ed86:	b29b      	uxth	r3, r3
 800ed88:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ed8c:	b29b      	uxth	r3, r3
 800ed8e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ed92:	b29a      	uxth	r2, r3
 800ed94:	4b01      	ldr	r3, [pc, #4]	; (800ed9c <tcp_init+0x20>)
 800ed96:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ed98:	bf00      	nop
 800ed9a:	bd80      	pop	{r7, pc}
 800ed9c:	20000010 	.word	0x20000010

0800eda0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b082      	sub	sp, #8
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	7d1b      	ldrb	r3, [r3, #20]
 800edac:	2b01      	cmp	r3, #1
 800edae:	d105      	bne.n	800edbc <tcp_free+0x1c>
 800edb0:	4b06      	ldr	r3, [pc, #24]	; (800edcc <tcp_free+0x2c>)
 800edb2:	22d4      	movs	r2, #212	; 0xd4
 800edb4:	4906      	ldr	r1, [pc, #24]	; (800edd0 <tcp_free+0x30>)
 800edb6:	4807      	ldr	r0, [pc, #28]	; (800edd4 <tcp_free+0x34>)
 800edb8:	f009 fc4a 	bl	8018650 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800edbc:	6879      	ldr	r1, [r7, #4]
 800edbe:	2001      	movs	r0, #1
 800edc0:	f7fe fe5c 	bl	800da7c <memp_free>
}
 800edc4:	bf00      	nop
 800edc6:	3708      	adds	r7, #8
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}
 800edcc:	0801b638 	.word	0x0801b638
 800edd0:	0801b668 	.word	0x0801b668
 800edd4:	0801b67c 	.word	0x0801b67c

0800edd8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b082      	sub	sp, #8
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	7d1b      	ldrb	r3, [r3, #20]
 800ede4:	2b01      	cmp	r3, #1
 800ede6:	d105      	bne.n	800edf4 <tcp_free_listen+0x1c>
 800ede8:	4b06      	ldr	r3, [pc, #24]	; (800ee04 <tcp_free_listen+0x2c>)
 800edea:	22df      	movs	r2, #223	; 0xdf
 800edec:	4906      	ldr	r1, [pc, #24]	; (800ee08 <tcp_free_listen+0x30>)
 800edee:	4807      	ldr	r0, [pc, #28]	; (800ee0c <tcp_free_listen+0x34>)
 800edf0:	f009 fc2e 	bl	8018650 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800edf4:	6879      	ldr	r1, [r7, #4]
 800edf6:	2002      	movs	r0, #2
 800edf8:	f7fe fe40 	bl	800da7c <memp_free>
}
 800edfc:	bf00      	nop
 800edfe:	3708      	adds	r7, #8
 800ee00:	46bd      	mov	sp, r7
 800ee02:	bd80      	pop	{r7, pc}
 800ee04:	0801b638 	.word	0x0801b638
 800ee08:	0801b6a4 	.word	0x0801b6a4
 800ee0c:	0801b67c 	.word	0x0801b67c

0800ee10 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ee14:	f000 ffdc 	bl	800fdd0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ee18:	4b07      	ldr	r3, [pc, #28]	; (800ee38 <tcp_tmr+0x28>)
 800ee1a:	781b      	ldrb	r3, [r3, #0]
 800ee1c:	3301      	adds	r3, #1
 800ee1e:	b2da      	uxtb	r2, r3
 800ee20:	4b05      	ldr	r3, [pc, #20]	; (800ee38 <tcp_tmr+0x28>)
 800ee22:	701a      	strb	r2, [r3, #0]
 800ee24:	4b04      	ldr	r3, [pc, #16]	; (800ee38 <tcp_tmr+0x28>)
 800ee26:	781b      	ldrb	r3, [r3, #0]
 800ee28:	f003 0301 	and.w	r3, r3, #1
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d001      	beq.n	800ee34 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ee30:	f000 fc8e 	bl	800f750 <tcp_slowtmr>
  }
}
 800ee34:	bf00      	nop
 800ee36:	bd80      	pop	{r7, pc}
 800ee38:	2000d261 	.word	0x2000d261

0800ee3c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b084      	sub	sp, #16
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
 800ee44:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800ee46:	683b      	ldr	r3, [r7, #0]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d105      	bne.n	800ee58 <tcp_remove_listener+0x1c>
 800ee4c:	4b0d      	ldr	r3, [pc, #52]	; (800ee84 <tcp_remove_listener+0x48>)
 800ee4e:	22ff      	movs	r2, #255	; 0xff
 800ee50:	490d      	ldr	r1, [pc, #52]	; (800ee88 <tcp_remove_listener+0x4c>)
 800ee52:	480e      	ldr	r0, [pc, #56]	; (800ee8c <tcp_remove_listener+0x50>)
 800ee54:	f009 fbfc 	bl	8018650 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	60fb      	str	r3, [r7, #12]
 800ee5c:	e00a      	b.n	800ee74 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ee62:	683a      	ldr	r2, [r7, #0]
 800ee64:	429a      	cmp	r2, r3
 800ee66:	d102      	bne.n	800ee6e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	68db      	ldr	r3, [r3, #12]
 800ee72:	60fb      	str	r3, [r7, #12]
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d1f1      	bne.n	800ee5e <tcp_remove_listener+0x22>
    }
  }
}
 800ee7a:	bf00      	nop
 800ee7c:	bf00      	nop
 800ee7e:	3710      	adds	r7, #16
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bd80      	pop	{r7, pc}
 800ee84:	0801b638 	.word	0x0801b638
 800ee88:	0801b6c0 	.word	0x0801b6c0
 800ee8c:	0801b67c 	.word	0x0801b67c

0800ee90 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b084      	sub	sp, #16
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d106      	bne.n	800eeac <tcp_listen_closed+0x1c>
 800ee9e:	4b14      	ldr	r3, [pc, #80]	; (800eef0 <tcp_listen_closed+0x60>)
 800eea0:	f240 1211 	movw	r2, #273	; 0x111
 800eea4:	4913      	ldr	r1, [pc, #76]	; (800eef4 <tcp_listen_closed+0x64>)
 800eea6:	4814      	ldr	r0, [pc, #80]	; (800eef8 <tcp_listen_closed+0x68>)
 800eea8:	f009 fbd2 	bl	8018650 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	7d1b      	ldrb	r3, [r3, #20]
 800eeb0:	2b01      	cmp	r3, #1
 800eeb2:	d006      	beq.n	800eec2 <tcp_listen_closed+0x32>
 800eeb4:	4b0e      	ldr	r3, [pc, #56]	; (800eef0 <tcp_listen_closed+0x60>)
 800eeb6:	f44f 7289 	mov.w	r2, #274	; 0x112
 800eeba:	4910      	ldr	r1, [pc, #64]	; (800eefc <tcp_listen_closed+0x6c>)
 800eebc:	480e      	ldr	r0, [pc, #56]	; (800eef8 <tcp_listen_closed+0x68>)
 800eebe:	f009 fbc7 	bl	8018650 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800eec2:	2301      	movs	r3, #1
 800eec4:	60fb      	str	r3, [r7, #12]
 800eec6:	e00b      	b.n	800eee0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800eec8:	4a0d      	ldr	r2, [pc, #52]	; (800ef00 <tcp_listen_closed+0x70>)
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	6879      	ldr	r1, [r7, #4]
 800eed4:	4618      	mov	r0, r3
 800eed6:	f7ff ffb1 	bl	800ee3c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	3301      	adds	r3, #1
 800eede:	60fb      	str	r3, [r7, #12]
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	2b03      	cmp	r3, #3
 800eee4:	d9f0      	bls.n	800eec8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800eee6:	bf00      	nop
 800eee8:	bf00      	nop
 800eeea:	3710      	adds	r7, #16
 800eeec:	46bd      	mov	sp, r7
 800eeee:	bd80      	pop	{r7, pc}
 800eef0:	0801b638 	.word	0x0801b638
 800eef4:	0801b6e8 	.word	0x0801b6e8
 800eef8:	0801b67c 	.word	0x0801b67c
 800eefc:	0801b6f4 	.word	0x0801b6f4
 800ef00:	0801d704 	.word	0x0801d704

0800ef04 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ef04:	b5b0      	push	{r4, r5, r7, lr}
 800ef06:	b088      	sub	sp, #32
 800ef08:	af04      	add	r7, sp, #16
 800ef0a:	6078      	str	r0, [r7, #4]
 800ef0c:	460b      	mov	r3, r1
 800ef0e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d106      	bne.n	800ef24 <tcp_close_shutdown+0x20>
 800ef16:	4b63      	ldr	r3, [pc, #396]	; (800f0a4 <tcp_close_shutdown+0x1a0>)
 800ef18:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ef1c:	4962      	ldr	r1, [pc, #392]	; (800f0a8 <tcp_close_shutdown+0x1a4>)
 800ef1e:	4863      	ldr	r0, [pc, #396]	; (800f0ac <tcp_close_shutdown+0x1a8>)
 800ef20:	f009 fb96 	bl	8018650 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ef24:	78fb      	ldrb	r3, [r7, #3]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d066      	beq.n	800eff8 <tcp_close_shutdown+0xf4>
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	7d1b      	ldrb	r3, [r3, #20]
 800ef2e:	2b04      	cmp	r3, #4
 800ef30:	d003      	beq.n	800ef3a <tcp_close_shutdown+0x36>
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	7d1b      	ldrb	r3, [r3, #20]
 800ef36:	2b07      	cmp	r3, #7
 800ef38:	d15e      	bne.n	800eff8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d104      	bne.n	800ef4c <tcp_close_shutdown+0x48>
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ef46:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ef4a:	d055      	beq.n	800eff8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	8b5b      	ldrh	r3, [r3, #26]
 800ef50:	f003 0310 	and.w	r3, r3, #16
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d106      	bne.n	800ef66 <tcp_close_shutdown+0x62>
 800ef58:	4b52      	ldr	r3, [pc, #328]	; (800f0a4 <tcp_close_shutdown+0x1a0>)
 800ef5a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800ef5e:	4954      	ldr	r1, [pc, #336]	; (800f0b0 <tcp_close_shutdown+0x1ac>)
 800ef60:	4852      	ldr	r0, [pc, #328]	; (800f0ac <tcp_close_shutdown+0x1a8>)
 800ef62:	f009 fb75 	bl	8018650 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ef6e:	687d      	ldr	r5, [r7, #4]
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	3304      	adds	r3, #4
 800ef74:	687a      	ldr	r2, [r7, #4]
 800ef76:	8ad2      	ldrh	r2, [r2, #22]
 800ef78:	6879      	ldr	r1, [r7, #4]
 800ef7a:	8b09      	ldrh	r1, [r1, #24]
 800ef7c:	9102      	str	r1, [sp, #8]
 800ef7e:	9201      	str	r2, [sp, #4]
 800ef80:	9300      	str	r3, [sp, #0]
 800ef82:	462b      	mov	r3, r5
 800ef84:	4622      	mov	r2, r4
 800ef86:	4601      	mov	r1, r0
 800ef88:	6878      	ldr	r0, [r7, #4]
 800ef8a:	f005 fcf1 	bl	8014970 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ef8e:	6878      	ldr	r0, [r7, #4]
 800ef90:	f001 face 	bl	8010530 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ef94:	4b47      	ldr	r3, [pc, #284]	; (800f0b4 <tcp_close_shutdown+0x1b0>)
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	687a      	ldr	r2, [r7, #4]
 800ef9a:	429a      	cmp	r2, r3
 800ef9c:	d105      	bne.n	800efaa <tcp_close_shutdown+0xa6>
 800ef9e:	4b45      	ldr	r3, [pc, #276]	; (800f0b4 <tcp_close_shutdown+0x1b0>)
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	68db      	ldr	r3, [r3, #12]
 800efa4:	4a43      	ldr	r2, [pc, #268]	; (800f0b4 <tcp_close_shutdown+0x1b0>)
 800efa6:	6013      	str	r3, [r2, #0]
 800efa8:	e013      	b.n	800efd2 <tcp_close_shutdown+0xce>
 800efaa:	4b42      	ldr	r3, [pc, #264]	; (800f0b4 <tcp_close_shutdown+0x1b0>)
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	60fb      	str	r3, [r7, #12]
 800efb0:	e00c      	b.n	800efcc <tcp_close_shutdown+0xc8>
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	68db      	ldr	r3, [r3, #12]
 800efb6:	687a      	ldr	r2, [r7, #4]
 800efb8:	429a      	cmp	r2, r3
 800efba:	d104      	bne.n	800efc6 <tcp_close_shutdown+0xc2>
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	68da      	ldr	r2, [r3, #12]
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	60da      	str	r2, [r3, #12]
 800efc4:	e005      	b.n	800efd2 <tcp_close_shutdown+0xce>
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	68db      	ldr	r3, [r3, #12]
 800efca:	60fb      	str	r3, [r7, #12]
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d1ef      	bne.n	800efb2 <tcp_close_shutdown+0xae>
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	2200      	movs	r2, #0
 800efd6:	60da      	str	r2, [r3, #12]
 800efd8:	4b37      	ldr	r3, [pc, #220]	; (800f0b8 <tcp_close_shutdown+0x1b4>)
 800efda:	2201      	movs	r2, #1
 800efdc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800efde:	4b37      	ldr	r3, [pc, #220]	; (800f0bc <tcp_close_shutdown+0x1b8>)
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	687a      	ldr	r2, [r7, #4]
 800efe4:	429a      	cmp	r2, r3
 800efe6:	d102      	bne.n	800efee <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800efe8:	f003 ff66 	bl	8012eb8 <tcp_trigger_input_pcb_close>
 800efec:	e002      	b.n	800eff4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800efee:	6878      	ldr	r0, [r7, #4]
 800eff0:	f7ff fed6 	bl	800eda0 <tcp_free>
      }
      return ERR_OK;
 800eff4:	2300      	movs	r3, #0
 800eff6:	e050      	b.n	800f09a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	7d1b      	ldrb	r3, [r3, #20]
 800effc:	2b02      	cmp	r3, #2
 800effe:	d03b      	beq.n	800f078 <tcp_close_shutdown+0x174>
 800f000:	2b02      	cmp	r3, #2
 800f002:	dc44      	bgt.n	800f08e <tcp_close_shutdown+0x18a>
 800f004:	2b00      	cmp	r3, #0
 800f006:	d002      	beq.n	800f00e <tcp_close_shutdown+0x10a>
 800f008:	2b01      	cmp	r3, #1
 800f00a:	d02a      	beq.n	800f062 <tcp_close_shutdown+0x15e>
 800f00c:	e03f      	b.n	800f08e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	8adb      	ldrh	r3, [r3, #22]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d021      	beq.n	800f05a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f016:	4b2a      	ldr	r3, [pc, #168]	; (800f0c0 <tcp_close_shutdown+0x1bc>)
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	687a      	ldr	r2, [r7, #4]
 800f01c:	429a      	cmp	r2, r3
 800f01e:	d105      	bne.n	800f02c <tcp_close_shutdown+0x128>
 800f020:	4b27      	ldr	r3, [pc, #156]	; (800f0c0 <tcp_close_shutdown+0x1bc>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	68db      	ldr	r3, [r3, #12]
 800f026:	4a26      	ldr	r2, [pc, #152]	; (800f0c0 <tcp_close_shutdown+0x1bc>)
 800f028:	6013      	str	r3, [r2, #0]
 800f02a:	e013      	b.n	800f054 <tcp_close_shutdown+0x150>
 800f02c:	4b24      	ldr	r3, [pc, #144]	; (800f0c0 <tcp_close_shutdown+0x1bc>)
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	60bb      	str	r3, [r7, #8]
 800f032:	e00c      	b.n	800f04e <tcp_close_shutdown+0x14a>
 800f034:	68bb      	ldr	r3, [r7, #8]
 800f036:	68db      	ldr	r3, [r3, #12]
 800f038:	687a      	ldr	r2, [r7, #4]
 800f03a:	429a      	cmp	r2, r3
 800f03c:	d104      	bne.n	800f048 <tcp_close_shutdown+0x144>
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	68da      	ldr	r2, [r3, #12]
 800f042:	68bb      	ldr	r3, [r7, #8]
 800f044:	60da      	str	r2, [r3, #12]
 800f046:	e005      	b.n	800f054 <tcp_close_shutdown+0x150>
 800f048:	68bb      	ldr	r3, [r7, #8]
 800f04a:	68db      	ldr	r3, [r3, #12]
 800f04c:	60bb      	str	r3, [r7, #8]
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d1ef      	bne.n	800f034 <tcp_close_shutdown+0x130>
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	2200      	movs	r2, #0
 800f058:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800f05a:	6878      	ldr	r0, [r7, #4]
 800f05c:	f7ff fea0 	bl	800eda0 <tcp_free>
      break;
 800f060:	e01a      	b.n	800f098 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800f062:	6878      	ldr	r0, [r7, #4]
 800f064:	f7ff ff14 	bl	800ee90 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800f068:	6879      	ldr	r1, [r7, #4]
 800f06a:	4816      	ldr	r0, [pc, #88]	; (800f0c4 <tcp_close_shutdown+0x1c0>)
 800f06c:	f001 fab0 	bl	80105d0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800f070:	6878      	ldr	r0, [r7, #4]
 800f072:	f7ff feb1 	bl	800edd8 <tcp_free_listen>
      break;
 800f076:	e00f      	b.n	800f098 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f078:	6879      	ldr	r1, [r7, #4]
 800f07a:	480e      	ldr	r0, [pc, #56]	; (800f0b4 <tcp_close_shutdown+0x1b0>)
 800f07c:	f001 faa8 	bl	80105d0 <tcp_pcb_remove>
 800f080:	4b0d      	ldr	r3, [pc, #52]	; (800f0b8 <tcp_close_shutdown+0x1b4>)
 800f082:	2201      	movs	r2, #1
 800f084:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800f086:	6878      	ldr	r0, [r7, #4]
 800f088:	f7ff fe8a 	bl	800eda0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800f08c:	e004      	b.n	800f098 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	f000 f81a 	bl	800f0c8 <tcp_close_shutdown_fin>
 800f094:	4603      	mov	r3, r0
 800f096:	e000      	b.n	800f09a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800f098:	2300      	movs	r3, #0
}
 800f09a:	4618      	mov	r0, r3
 800f09c:	3710      	adds	r7, #16
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	bdb0      	pop	{r4, r5, r7, pc}
 800f0a2:	bf00      	nop
 800f0a4:	0801b638 	.word	0x0801b638
 800f0a8:	0801b70c 	.word	0x0801b70c
 800f0ac:	0801b67c 	.word	0x0801b67c
 800f0b0:	0801b72c 	.word	0x0801b72c
 800f0b4:	2000d258 	.word	0x2000d258
 800f0b8:	2000d260 	.word	0x2000d260
 800f0bc:	2000d298 	.word	0x2000d298
 800f0c0:	2000d250 	.word	0x2000d250
 800f0c4:	2000d254 	.word	0x2000d254

0800f0c8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b084      	sub	sp, #16
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d106      	bne.n	800f0e4 <tcp_close_shutdown_fin+0x1c>
 800f0d6:	4b2e      	ldr	r3, [pc, #184]	; (800f190 <tcp_close_shutdown_fin+0xc8>)
 800f0d8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800f0dc:	492d      	ldr	r1, [pc, #180]	; (800f194 <tcp_close_shutdown_fin+0xcc>)
 800f0de:	482e      	ldr	r0, [pc, #184]	; (800f198 <tcp_close_shutdown_fin+0xd0>)
 800f0e0:	f009 fab6 	bl	8018650 <iprintf>

  switch (pcb->state) {
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	7d1b      	ldrb	r3, [r3, #20]
 800f0e8:	2b07      	cmp	r3, #7
 800f0ea:	d020      	beq.n	800f12e <tcp_close_shutdown_fin+0x66>
 800f0ec:	2b07      	cmp	r3, #7
 800f0ee:	dc2b      	bgt.n	800f148 <tcp_close_shutdown_fin+0x80>
 800f0f0:	2b03      	cmp	r3, #3
 800f0f2:	d002      	beq.n	800f0fa <tcp_close_shutdown_fin+0x32>
 800f0f4:	2b04      	cmp	r3, #4
 800f0f6:	d00d      	beq.n	800f114 <tcp_close_shutdown_fin+0x4c>
 800f0f8:	e026      	b.n	800f148 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800f0fa:	6878      	ldr	r0, [r7, #4]
 800f0fc:	f004 fd46 	bl	8013b8c <tcp_send_fin>
 800f100:	4603      	mov	r3, r0
 800f102:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f104:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d11f      	bne.n	800f14c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	2205      	movs	r2, #5
 800f110:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f112:	e01b      	b.n	800f14c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800f114:	6878      	ldr	r0, [r7, #4]
 800f116:	f004 fd39 	bl	8013b8c <tcp_send_fin>
 800f11a:	4603      	mov	r3, r0
 800f11c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f11e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d114      	bne.n	800f150 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	2205      	movs	r2, #5
 800f12a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f12c:	e010      	b.n	800f150 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800f12e:	6878      	ldr	r0, [r7, #4]
 800f130:	f004 fd2c 	bl	8013b8c <tcp_send_fin>
 800f134:	4603      	mov	r3, r0
 800f136:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f138:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d109      	bne.n	800f154 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	2209      	movs	r2, #9
 800f144:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f146:	e005      	b.n	800f154 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800f148:	2300      	movs	r3, #0
 800f14a:	e01c      	b.n	800f186 <tcp_close_shutdown_fin+0xbe>
      break;
 800f14c:	bf00      	nop
 800f14e:	e002      	b.n	800f156 <tcp_close_shutdown_fin+0x8e>
      break;
 800f150:	bf00      	nop
 800f152:	e000      	b.n	800f156 <tcp_close_shutdown_fin+0x8e>
      break;
 800f154:	bf00      	nop
  }

  if (err == ERR_OK) {
 800f156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d103      	bne.n	800f166 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800f15e:	6878      	ldr	r0, [r7, #4]
 800f160:	f004 fe52 	bl	8013e08 <tcp_output>
 800f164:	e00d      	b.n	800f182 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800f166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f16a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f16e:	d108      	bne.n	800f182 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	8b5b      	ldrh	r3, [r3, #26]
 800f174:	f043 0308 	orr.w	r3, r3, #8
 800f178:	b29a      	uxth	r2, r3
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800f17e:	2300      	movs	r3, #0
 800f180:	e001      	b.n	800f186 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800f182:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f186:	4618      	mov	r0, r3
 800f188:	3710      	adds	r7, #16
 800f18a:	46bd      	mov	sp, r7
 800f18c:	bd80      	pop	{r7, pc}
 800f18e:	bf00      	nop
 800f190:	0801b638 	.word	0x0801b638
 800f194:	0801b6e8 	.word	0x0801b6e8
 800f198:	0801b67c 	.word	0x0801b67c

0800f19c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b082      	sub	sp, #8
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d109      	bne.n	800f1be <tcp_close+0x22>
 800f1aa:	4b0f      	ldr	r3, [pc, #60]	; (800f1e8 <tcp_close+0x4c>)
 800f1ac:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800f1b0:	490e      	ldr	r1, [pc, #56]	; (800f1ec <tcp_close+0x50>)
 800f1b2:	480f      	ldr	r0, [pc, #60]	; (800f1f0 <tcp_close+0x54>)
 800f1b4:	f009 fa4c 	bl	8018650 <iprintf>
 800f1b8:	f06f 030f 	mvn.w	r3, #15
 800f1bc:	e00f      	b.n	800f1de <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	7d1b      	ldrb	r3, [r3, #20]
 800f1c2:	2b01      	cmp	r3, #1
 800f1c4:	d006      	beq.n	800f1d4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	8b5b      	ldrh	r3, [r3, #26]
 800f1ca:	f043 0310 	orr.w	r3, r3, #16
 800f1ce:	b29a      	uxth	r2, r3
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800f1d4:	2101      	movs	r1, #1
 800f1d6:	6878      	ldr	r0, [r7, #4]
 800f1d8:	f7ff fe94 	bl	800ef04 <tcp_close_shutdown>
 800f1dc:	4603      	mov	r3, r0
}
 800f1de:	4618      	mov	r0, r3
 800f1e0:	3708      	adds	r7, #8
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	bd80      	pop	{r7, pc}
 800f1e6:	bf00      	nop
 800f1e8:	0801b638 	.word	0x0801b638
 800f1ec:	0801b748 	.word	0x0801b748
 800f1f0:	0801b67c 	.word	0x0801b67c

0800f1f4 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b084      	sub	sp, #16
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	60f8      	str	r0, [r7, #12]
 800f1fc:	60b9      	str	r1, [r7, #8]
 800f1fe:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d109      	bne.n	800f21a <tcp_shutdown+0x26>
 800f206:	4b26      	ldr	r3, [pc, #152]	; (800f2a0 <tcp_shutdown+0xac>)
 800f208:	f240 2207 	movw	r2, #519	; 0x207
 800f20c:	4925      	ldr	r1, [pc, #148]	; (800f2a4 <tcp_shutdown+0xb0>)
 800f20e:	4826      	ldr	r0, [pc, #152]	; (800f2a8 <tcp_shutdown+0xb4>)
 800f210:	f009 fa1e 	bl	8018650 <iprintf>
 800f214:	f06f 030f 	mvn.w	r3, #15
 800f218:	e03d      	b.n	800f296 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	7d1b      	ldrb	r3, [r3, #20]
 800f21e:	2b01      	cmp	r3, #1
 800f220:	d102      	bne.n	800f228 <tcp_shutdown+0x34>
    return ERR_CONN;
 800f222:	f06f 030a 	mvn.w	r3, #10
 800f226:	e036      	b.n	800f296 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800f228:	68bb      	ldr	r3, [r7, #8]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d01b      	beq.n	800f266 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	8b5b      	ldrh	r3, [r3, #26]
 800f232:	f043 0310 	orr.w	r3, r3, #16
 800f236:	b29a      	uxth	r2, r3
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d005      	beq.n	800f24e <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800f242:	2101      	movs	r1, #1
 800f244:	68f8      	ldr	r0, [r7, #12]
 800f246:	f7ff fe5d 	bl	800ef04 <tcp_close_shutdown>
 800f24a:	4603      	mov	r3, r0
 800f24c:	e023      	b.n	800f296 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f252:	2b00      	cmp	r3, #0
 800f254:	d007      	beq.n	800f266 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f25a:	4618      	mov	r0, r3
 800f25c:	f7ff fae4 	bl	800e828 <pbuf_free>
      pcb->refused_data = NULL;
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	2200      	movs	r2, #0
 800f264:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d013      	beq.n	800f294 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	7d1b      	ldrb	r3, [r3, #20]
 800f270:	2b04      	cmp	r3, #4
 800f272:	dc02      	bgt.n	800f27a <tcp_shutdown+0x86>
 800f274:	2b03      	cmp	r3, #3
 800f276:	da02      	bge.n	800f27e <tcp_shutdown+0x8a>
 800f278:	e009      	b.n	800f28e <tcp_shutdown+0x9a>
 800f27a:	2b07      	cmp	r3, #7
 800f27c:	d107      	bne.n	800f28e <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800f27e:	68bb      	ldr	r3, [r7, #8]
 800f280:	b2db      	uxtb	r3, r3
 800f282:	4619      	mov	r1, r3
 800f284:	68f8      	ldr	r0, [r7, #12]
 800f286:	f7ff fe3d 	bl	800ef04 <tcp_close_shutdown>
 800f28a:	4603      	mov	r3, r0
 800f28c:	e003      	b.n	800f296 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800f28e:	f06f 030a 	mvn.w	r3, #10
 800f292:	e000      	b.n	800f296 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800f294:	2300      	movs	r3, #0
}
 800f296:	4618      	mov	r0, r3
 800f298:	3710      	adds	r7, #16
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bd80      	pop	{r7, pc}
 800f29e:	bf00      	nop
 800f2a0:	0801b638 	.word	0x0801b638
 800f2a4:	0801b760 	.word	0x0801b760
 800f2a8:	0801b67c 	.word	0x0801b67c

0800f2ac <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b08e      	sub	sp, #56	; 0x38
 800f2b0:	af04      	add	r7, sp, #16
 800f2b2:	6078      	str	r0, [r7, #4]
 800f2b4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d107      	bne.n	800f2cc <tcp_abandon+0x20>
 800f2bc:	4b52      	ldr	r3, [pc, #328]	; (800f408 <tcp_abandon+0x15c>)
 800f2be:	f240 223d 	movw	r2, #573	; 0x23d
 800f2c2:	4952      	ldr	r1, [pc, #328]	; (800f40c <tcp_abandon+0x160>)
 800f2c4:	4852      	ldr	r0, [pc, #328]	; (800f410 <tcp_abandon+0x164>)
 800f2c6:	f009 f9c3 	bl	8018650 <iprintf>
 800f2ca:	e099      	b.n	800f400 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	7d1b      	ldrb	r3, [r3, #20]
 800f2d0:	2b01      	cmp	r3, #1
 800f2d2:	d106      	bne.n	800f2e2 <tcp_abandon+0x36>
 800f2d4:	4b4c      	ldr	r3, [pc, #304]	; (800f408 <tcp_abandon+0x15c>)
 800f2d6:	f44f 7210 	mov.w	r2, #576	; 0x240
 800f2da:	494e      	ldr	r1, [pc, #312]	; (800f414 <tcp_abandon+0x168>)
 800f2dc:	484c      	ldr	r0, [pc, #304]	; (800f410 <tcp_abandon+0x164>)
 800f2de:	f009 f9b7 	bl	8018650 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	7d1b      	ldrb	r3, [r3, #20]
 800f2e6:	2b0a      	cmp	r3, #10
 800f2e8:	d107      	bne.n	800f2fa <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800f2ea:	6879      	ldr	r1, [r7, #4]
 800f2ec:	484a      	ldr	r0, [pc, #296]	; (800f418 <tcp_abandon+0x16c>)
 800f2ee:	f001 f96f 	bl	80105d0 <tcp_pcb_remove>
    tcp_free(pcb);
 800f2f2:	6878      	ldr	r0, [r7, #4]
 800f2f4:	f7ff fd54 	bl	800eda0 <tcp_free>
 800f2f8:	e082      	b.n	800f400 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800f2fe:	2300      	movs	r3, #0
 800f300:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f306:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f30c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f314:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	691b      	ldr	r3, [r3, #16]
 800f31a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	7d1b      	ldrb	r3, [r3, #20]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d126      	bne.n	800f372 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	8adb      	ldrh	r3, [r3, #22]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d02e      	beq.n	800f38a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f32c:	4b3b      	ldr	r3, [pc, #236]	; (800f41c <tcp_abandon+0x170>)
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	687a      	ldr	r2, [r7, #4]
 800f332:	429a      	cmp	r2, r3
 800f334:	d105      	bne.n	800f342 <tcp_abandon+0x96>
 800f336:	4b39      	ldr	r3, [pc, #228]	; (800f41c <tcp_abandon+0x170>)
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	68db      	ldr	r3, [r3, #12]
 800f33c:	4a37      	ldr	r2, [pc, #220]	; (800f41c <tcp_abandon+0x170>)
 800f33e:	6013      	str	r3, [r2, #0]
 800f340:	e013      	b.n	800f36a <tcp_abandon+0xbe>
 800f342:	4b36      	ldr	r3, [pc, #216]	; (800f41c <tcp_abandon+0x170>)
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	61fb      	str	r3, [r7, #28]
 800f348:	e00c      	b.n	800f364 <tcp_abandon+0xb8>
 800f34a:	69fb      	ldr	r3, [r7, #28]
 800f34c:	68db      	ldr	r3, [r3, #12]
 800f34e:	687a      	ldr	r2, [r7, #4]
 800f350:	429a      	cmp	r2, r3
 800f352:	d104      	bne.n	800f35e <tcp_abandon+0xb2>
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	68da      	ldr	r2, [r3, #12]
 800f358:	69fb      	ldr	r3, [r7, #28]
 800f35a:	60da      	str	r2, [r3, #12]
 800f35c:	e005      	b.n	800f36a <tcp_abandon+0xbe>
 800f35e:	69fb      	ldr	r3, [r7, #28]
 800f360:	68db      	ldr	r3, [r3, #12]
 800f362:	61fb      	str	r3, [r7, #28]
 800f364:	69fb      	ldr	r3, [r7, #28]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d1ef      	bne.n	800f34a <tcp_abandon+0x9e>
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	2200      	movs	r2, #0
 800f36e:	60da      	str	r2, [r3, #12]
 800f370:	e00b      	b.n	800f38a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	8adb      	ldrh	r3, [r3, #22]
 800f37a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f37c:	6879      	ldr	r1, [r7, #4]
 800f37e:	4828      	ldr	r0, [pc, #160]	; (800f420 <tcp_abandon+0x174>)
 800f380:	f001 f926 	bl	80105d0 <tcp_pcb_remove>
 800f384:	4b27      	ldr	r3, [pc, #156]	; (800f424 <tcp_abandon+0x178>)
 800f386:	2201      	movs	r2, #1
 800f388:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d004      	beq.n	800f39c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f396:	4618      	mov	r0, r3
 800f398:	f000 fdfa 	bl	800ff90 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d004      	beq.n	800f3ae <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f000 fdf1 	bl	800ff90 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d004      	beq.n	800f3c0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	f000 fde8 	bl	800ff90 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800f3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d00e      	beq.n	800f3e4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800f3c6:	6879      	ldr	r1, [r7, #4]
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	3304      	adds	r3, #4
 800f3cc:	687a      	ldr	r2, [r7, #4]
 800f3ce:	8b12      	ldrh	r2, [r2, #24]
 800f3d0:	9202      	str	r2, [sp, #8]
 800f3d2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f3d4:	9201      	str	r2, [sp, #4]
 800f3d6:	9300      	str	r3, [sp, #0]
 800f3d8:	460b      	mov	r3, r1
 800f3da:	697a      	ldr	r2, [r7, #20]
 800f3dc:	69b9      	ldr	r1, [r7, #24]
 800f3de:	6878      	ldr	r0, [r7, #4]
 800f3e0:	f005 fac6 	bl	8014970 <tcp_rst>
    }
    last_state = pcb->state;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	7d1b      	ldrb	r3, [r3, #20]
 800f3e8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800f3ea:	6878      	ldr	r0, [r7, #4]
 800f3ec:	f7ff fcd8 	bl	800eda0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800f3f0:	693b      	ldr	r3, [r7, #16]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d004      	beq.n	800f400 <tcp_abandon+0x154>
 800f3f6:	693b      	ldr	r3, [r7, #16]
 800f3f8:	f06f 010c 	mvn.w	r1, #12
 800f3fc:	68f8      	ldr	r0, [r7, #12]
 800f3fe:	4798      	blx	r3
  }
}
 800f400:	3728      	adds	r7, #40	; 0x28
 800f402:	46bd      	mov	sp, r7
 800f404:	bd80      	pop	{r7, pc}
 800f406:	bf00      	nop
 800f408:	0801b638 	.word	0x0801b638
 800f40c:	0801b77c 	.word	0x0801b77c
 800f410:	0801b67c 	.word	0x0801b67c
 800f414:	0801b798 	.word	0x0801b798
 800f418:	2000d25c 	.word	0x2000d25c
 800f41c:	2000d250 	.word	0x2000d250
 800f420:	2000d258 	.word	0x2000d258
 800f424:	2000d260 	.word	0x2000d260

0800f428 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b082      	sub	sp, #8
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800f430:	2101      	movs	r1, #1
 800f432:	6878      	ldr	r0, [r7, #4]
 800f434:	f7ff ff3a 	bl	800f2ac <tcp_abandon>
}
 800f438:	bf00      	nop
 800f43a:	3708      	adds	r7, #8
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bd80      	pop	{r7, pc}

0800f440 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b088      	sub	sp, #32
 800f444:	af00      	add	r7, sp, #0
 800f446:	60f8      	str	r0, [r7, #12]
 800f448:	60b9      	str	r1, [r7, #8]
 800f44a:	4613      	mov	r3, r2
 800f44c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800f44e:	2304      	movs	r3, #4
 800f450:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f452:	68bb      	ldr	r3, [r7, #8]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d101      	bne.n	800f45c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800f458:	4b3e      	ldr	r3, [pc, #248]	; (800f554 <tcp_bind+0x114>)
 800f45a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d109      	bne.n	800f476 <tcp_bind+0x36>
 800f462:	4b3d      	ldr	r3, [pc, #244]	; (800f558 <tcp_bind+0x118>)
 800f464:	f240 22a9 	movw	r2, #681	; 0x2a9
 800f468:	493c      	ldr	r1, [pc, #240]	; (800f55c <tcp_bind+0x11c>)
 800f46a:	483d      	ldr	r0, [pc, #244]	; (800f560 <tcp_bind+0x120>)
 800f46c:	f009 f8f0 	bl	8018650 <iprintf>
 800f470:	f06f 030f 	mvn.w	r3, #15
 800f474:	e06a      	b.n	800f54c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	7d1b      	ldrb	r3, [r3, #20]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d009      	beq.n	800f492 <tcp_bind+0x52>
 800f47e:	4b36      	ldr	r3, [pc, #216]	; (800f558 <tcp_bind+0x118>)
 800f480:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f484:	4937      	ldr	r1, [pc, #220]	; (800f564 <tcp_bind+0x124>)
 800f486:	4836      	ldr	r0, [pc, #216]	; (800f560 <tcp_bind+0x120>)
 800f488:	f009 f8e2 	bl	8018650 <iprintf>
 800f48c:	f06f 0305 	mvn.w	r3, #5
 800f490:	e05c      	b.n	800f54c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800f492:	88fb      	ldrh	r3, [r7, #6]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d109      	bne.n	800f4ac <tcp_bind+0x6c>
    port = tcp_new_port();
 800f498:	f000 f914 	bl	800f6c4 <tcp_new_port>
 800f49c:	4603      	mov	r3, r0
 800f49e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f4a0:	88fb      	ldrh	r3, [r7, #6]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d135      	bne.n	800f512 <tcp_bind+0xd2>
      return ERR_BUF;
 800f4a6:	f06f 0301 	mvn.w	r3, #1
 800f4aa:	e04f      	b.n	800f54c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	61fb      	str	r3, [r7, #28]
 800f4b0:	e02b      	b.n	800f50a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f4b2:	4a2d      	ldr	r2, [pc, #180]	; (800f568 <tcp_bind+0x128>)
 800f4b4:	69fb      	ldr	r3, [r7, #28]
 800f4b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	61bb      	str	r3, [r7, #24]
 800f4be:	e01e      	b.n	800f4fe <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800f4c0:	69bb      	ldr	r3, [r7, #24]
 800f4c2:	8adb      	ldrh	r3, [r3, #22]
 800f4c4:	88fa      	ldrh	r2, [r7, #6]
 800f4c6:	429a      	cmp	r2, r3
 800f4c8:	d116      	bne.n	800f4f8 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800f4ca:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d010      	beq.n	800f4f2 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800f4d0:	69bb      	ldr	r3, [r7, #24]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d00c      	beq.n	800f4f2 <tcp_bind+0xb2>
 800f4d8:	68bb      	ldr	r3, [r7, #8]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d009      	beq.n	800f4f2 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800f4de:	68bb      	ldr	r3, [r7, #8]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d005      	beq.n	800f4f2 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800f4e6:	69bb      	ldr	r3, [r7, #24]
 800f4e8:	681a      	ldr	r2, [r3, #0]
 800f4ea:	68bb      	ldr	r3, [r7, #8]
 800f4ec:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f4ee:	429a      	cmp	r2, r3
 800f4f0:	d102      	bne.n	800f4f8 <tcp_bind+0xb8>
              return ERR_USE;
 800f4f2:	f06f 0307 	mvn.w	r3, #7
 800f4f6:	e029      	b.n	800f54c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f4f8:	69bb      	ldr	r3, [r7, #24]
 800f4fa:	68db      	ldr	r3, [r3, #12]
 800f4fc:	61bb      	str	r3, [r7, #24]
 800f4fe:	69bb      	ldr	r3, [r7, #24]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d1dd      	bne.n	800f4c0 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800f504:	69fb      	ldr	r3, [r7, #28]
 800f506:	3301      	adds	r3, #1
 800f508:	61fb      	str	r3, [r7, #28]
 800f50a:	69fa      	ldr	r2, [r7, #28]
 800f50c:	697b      	ldr	r3, [r7, #20]
 800f50e:	429a      	cmp	r2, r3
 800f510:	dbcf      	blt.n	800f4b2 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800f512:	68bb      	ldr	r3, [r7, #8]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d00c      	beq.n	800f532 <tcp_bind+0xf2>
 800f518:	68bb      	ldr	r3, [r7, #8]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d008      	beq.n	800f532 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800f520:	68bb      	ldr	r3, [r7, #8]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d002      	beq.n	800f52c <tcp_bind+0xec>
 800f526:	68bb      	ldr	r3, [r7, #8]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	e000      	b.n	800f52e <tcp_bind+0xee>
 800f52c:	2300      	movs	r3, #0
 800f52e:	68fa      	ldr	r2, [r7, #12]
 800f530:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	88fa      	ldrh	r2, [r7, #6]
 800f536:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800f538:	4b0c      	ldr	r3, [pc, #48]	; (800f56c <tcp_bind+0x12c>)
 800f53a:	681a      	ldr	r2, [r3, #0]
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	60da      	str	r2, [r3, #12]
 800f540:	4a0a      	ldr	r2, [pc, #40]	; (800f56c <tcp_bind+0x12c>)
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	6013      	str	r3, [r2, #0]
 800f546:	f005 fbd5 	bl	8014cf4 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800f54a:	2300      	movs	r3, #0
}
 800f54c:	4618      	mov	r0, r3
 800f54e:	3720      	adds	r7, #32
 800f550:	46bd      	mov	sp, r7
 800f552:	bd80      	pop	{r7, pc}
 800f554:	0801d72c 	.word	0x0801d72c
 800f558:	0801b638 	.word	0x0801b638
 800f55c:	0801b7cc 	.word	0x0801b7cc
 800f560:	0801b67c 	.word	0x0801b67c
 800f564:	0801b7e4 	.word	0x0801b7e4
 800f568:	0801d704 	.word	0x0801d704
 800f56c:	2000d250 	.word	0x2000d250

0800f570 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800f570:	b580      	push	{r7, lr}
 800f572:	b084      	sub	sp, #16
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d106      	bne.n	800f58c <tcp_update_rcv_ann_wnd+0x1c>
 800f57e:	4b25      	ldr	r3, [pc, #148]	; (800f614 <tcp_update_rcv_ann_wnd+0xa4>)
 800f580:	f240 32a6 	movw	r2, #934	; 0x3a6
 800f584:	4924      	ldr	r1, [pc, #144]	; (800f618 <tcp_update_rcv_ann_wnd+0xa8>)
 800f586:	4825      	ldr	r0, [pc, #148]	; (800f61c <tcp_update_rcv_ann_wnd+0xac>)
 800f588:	f009 f862 	bl	8018650 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f590:	687a      	ldr	r2, [r7, #4]
 800f592:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800f594:	4413      	add	r3, r2
 800f596:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f59c:	687a      	ldr	r2, [r7, #4]
 800f59e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800f5a0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800f5a4:	bf28      	it	cs
 800f5a6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800f5aa:	b292      	uxth	r2, r2
 800f5ac:	4413      	add	r3, r2
 800f5ae:	68fa      	ldr	r2, [r7, #12]
 800f5b0:	1ad3      	subs	r3, r2, r3
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	db08      	blt.n	800f5c8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5c2:	68fa      	ldr	r2, [r7, #12]
 800f5c4:	1ad3      	subs	r3, r2, r3
 800f5c6:	e020      	b.n	800f60a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5d0:	1ad3      	subs	r3, r2, r3
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	dd03      	ble.n	800f5de <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	2200      	movs	r2, #0
 800f5da:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f5dc:	e014      	b.n	800f608 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5e6:	1ad3      	subs	r3, r2, r3
 800f5e8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f5ea:	68bb      	ldr	r3, [r7, #8]
 800f5ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f5f0:	d306      	bcc.n	800f600 <tcp_update_rcv_ann_wnd+0x90>
 800f5f2:	4b08      	ldr	r3, [pc, #32]	; (800f614 <tcp_update_rcv_ann_wnd+0xa4>)
 800f5f4:	f240 32b6 	movw	r2, #950	; 0x3b6
 800f5f8:	4909      	ldr	r1, [pc, #36]	; (800f620 <tcp_update_rcv_ann_wnd+0xb0>)
 800f5fa:	4808      	ldr	r0, [pc, #32]	; (800f61c <tcp_update_rcv_ann_wnd+0xac>)
 800f5fc:	f009 f828 	bl	8018650 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f600:	68bb      	ldr	r3, [r7, #8]
 800f602:	b29a      	uxth	r2, r3
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800f608:	2300      	movs	r3, #0
  }
}
 800f60a:	4618      	mov	r0, r3
 800f60c:	3710      	adds	r7, #16
 800f60e:	46bd      	mov	sp, r7
 800f610:	bd80      	pop	{r7, pc}
 800f612:	bf00      	nop
 800f614:	0801b638 	.word	0x0801b638
 800f618:	0801b894 	.word	0x0801b894
 800f61c:	0801b67c 	.word	0x0801b67c
 800f620:	0801b8b8 	.word	0x0801b8b8

0800f624 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f624:	b580      	push	{r7, lr}
 800f626:	b084      	sub	sp, #16
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
 800f62c:	460b      	mov	r3, r1
 800f62e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d107      	bne.n	800f646 <tcp_recved+0x22>
 800f636:	4b1f      	ldr	r3, [pc, #124]	; (800f6b4 <tcp_recved+0x90>)
 800f638:	f240 32cf 	movw	r2, #975	; 0x3cf
 800f63c:	491e      	ldr	r1, [pc, #120]	; (800f6b8 <tcp_recved+0x94>)
 800f63e:	481f      	ldr	r0, [pc, #124]	; (800f6bc <tcp_recved+0x98>)
 800f640:	f009 f806 	bl	8018650 <iprintf>
 800f644:	e032      	b.n	800f6ac <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	7d1b      	ldrb	r3, [r3, #20]
 800f64a:	2b01      	cmp	r3, #1
 800f64c:	d106      	bne.n	800f65c <tcp_recved+0x38>
 800f64e:	4b19      	ldr	r3, [pc, #100]	; (800f6b4 <tcp_recved+0x90>)
 800f650:	f240 32d2 	movw	r2, #978	; 0x3d2
 800f654:	491a      	ldr	r1, [pc, #104]	; (800f6c0 <tcp_recved+0x9c>)
 800f656:	4819      	ldr	r0, [pc, #100]	; (800f6bc <tcp_recved+0x98>)
 800f658:	f008 fffa 	bl	8018650 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f660:	887b      	ldrh	r3, [r7, #2]
 800f662:	4413      	add	r3, r2
 800f664:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800f666:	89fb      	ldrh	r3, [r7, #14]
 800f668:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f66c:	d804      	bhi.n	800f678 <tcp_recved+0x54>
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f672:	89fa      	ldrh	r2, [r7, #14]
 800f674:	429a      	cmp	r2, r3
 800f676:	d204      	bcs.n	800f682 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f67e:	851a      	strh	r2, [r3, #40]	; 0x28
 800f680:	e002      	b.n	800f688 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	89fa      	ldrh	r2, [r7, #14]
 800f686:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800f688:	6878      	ldr	r0, [r7, #4]
 800f68a:	f7ff ff71 	bl	800f570 <tcp_update_rcv_ann_wnd>
 800f68e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800f690:	68bb      	ldr	r3, [r7, #8]
 800f692:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f696:	d309      	bcc.n	800f6ac <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	8b5b      	ldrh	r3, [r3, #26]
 800f69c:	f043 0302 	orr.w	r3, r3, #2
 800f6a0:	b29a      	uxth	r2, r3
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f6a6:	6878      	ldr	r0, [r7, #4]
 800f6a8:	f004 fbae 	bl	8013e08 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800f6ac:	3710      	adds	r7, #16
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	bd80      	pop	{r7, pc}
 800f6b2:	bf00      	nop
 800f6b4:	0801b638 	.word	0x0801b638
 800f6b8:	0801b8d4 	.word	0x0801b8d4
 800f6bc:	0801b67c 	.word	0x0801b67c
 800f6c0:	0801b8ec 	.word	0x0801b8ec

0800f6c4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800f6c4:	b480      	push	{r7}
 800f6c6:	b083      	sub	sp, #12
 800f6c8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800f6ce:	4b1e      	ldr	r3, [pc, #120]	; (800f748 <tcp_new_port+0x84>)
 800f6d0:	881b      	ldrh	r3, [r3, #0]
 800f6d2:	3301      	adds	r3, #1
 800f6d4:	b29a      	uxth	r2, r3
 800f6d6:	4b1c      	ldr	r3, [pc, #112]	; (800f748 <tcp_new_port+0x84>)
 800f6d8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800f6da:	4b1b      	ldr	r3, [pc, #108]	; (800f748 <tcp_new_port+0x84>)
 800f6dc:	881b      	ldrh	r3, [r3, #0]
 800f6de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f6e2:	4293      	cmp	r3, r2
 800f6e4:	d103      	bne.n	800f6ee <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800f6e6:	4b18      	ldr	r3, [pc, #96]	; (800f748 <tcp_new_port+0x84>)
 800f6e8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800f6ec:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	71fb      	strb	r3, [r7, #7]
 800f6f2:	e01e      	b.n	800f732 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f6f4:	79fb      	ldrb	r3, [r7, #7]
 800f6f6:	4a15      	ldr	r2, [pc, #84]	; (800f74c <tcp_new_port+0x88>)
 800f6f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	603b      	str	r3, [r7, #0]
 800f700:	e011      	b.n	800f726 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800f702:	683b      	ldr	r3, [r7, #0]
 800f704:	8ada      	ldrh	r2, [r3, #22]
 800f706:	4b10      	ldr	r3, [pc, #64]	; (800f748 <tcp_new_port+0x84>)
 800f708:	881b      	ldrh	r3, [r3, #0]
 800f70a:	429a      	cmp	r2, r3
 800f70c:	d108      	bne.n	800f720 <tcp_new_port+0x5c>
        n++;
 800f70e:	88bb      	ldrh	r3, [r7, #4]
 800f710:	3301      	adds	r3, #1
 800f712:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800f714:	88bb      	ldrh	r3, [r7, #4]
 800f716:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f71a:	d3d8      	bcc.n	800f6ce <tcp_new_port+0xa>
          return 0;
 800f71c:	2300      	movs	r3, #0
 800f71e:	e00d      	b.n	800f73c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f720:	683b      	ldr	r3, [r7, #0]
 800f722:	68db      	ldr	r3, [r3, #12]
 800f724:	603b      	str	r3, [r7, #0]
 800f726:	683b      	ldr	r3, [r7, #0]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d1ea      	bne.n	800f702 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f72c:	79fb      	ldrb	r3, [r7, #7]
 800f72e:	3301      	adds	r3, #1
 800f730:	71fb      	strb	r3, [r7, #7]
 800f732:	79fb      	ldrb	r3, [r7, #7]
 800f734:	2b03      	cmp	r3, #3
 800f736:	d9dd      	bls.n	800f6f4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800f738:	4b03      	ldr	r3, [pc, #12]	; (800f748 <tcp_new_port+0x84>)
 800f73a:	881b      	ldrh	r3, [r3, #0]
}
 800f73c:	4618      	mov	r0, r3
 800f73e:	370c      	adds	r7, #12
 800f740:	46bd      	mov	sp, r7
 800f742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f746:	4770      	bx	lr
 800f748:	20000010 	.word	0x20000010
 800f74c:	0801d704 	.word	0x0801d704

0800f750 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800f750:	b5b0      	push	{r4, r5, r7, lr}
 800f752:	b090      	sub	sp, #64	; 0x40
 800f754:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800f756:	2300      	movs	r3, #0
 800f758:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800f75c:	4b94      	ldr	r3, [pc, #592]	; (800f9b0 <tcp_slowtmr+0x260>)
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	3301      	adds	r3, #1
 800f762:	4a93      	ldr	r2, [pc, #588]	; (800f9b0 <tcp_slowtmr+0x260>)
 800f764:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800f766:	4b93      	ldr	r3, [pc, #588]	; (800f9b4 <tcp_slowtmr+0x264>)
 800f768:	781b      	ldrb	r3, [r3, #0]
 800f76a:	3301      	adds	r3, #1
 800f76c:	b2da      	uxtb	r2, r3
 800f76e:	4b91      	ldr	r3, [pc, #580]	; (800f9b4 <tcp_slowtmr+0x264>)
 800f770:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800f772:	2300      	movs	r3, #0
 800f774:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800f776:	4b90      	ldr	r3, [pc, #576]	; (800f9b8 <tcp_slowtmr+0x268>)
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800f77c:	e29d      	b.n	800fcba <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800f77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f780:	7d1b      	ldrb	r3, [r3, #20]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d106      	bne.n	800f794 <tcp_slowtmr+0x44>
 800f786:	4b8d      	ldr	r3, [pc, #564]	; (800f9bc <tcp_slowtmr+0x26c>)
 800f788:	f240 42be 	movw	r2, #1214	; 0x4be
 800f78c:	498c      	ldr	r1, [pc, #560]	; (800f9c0 <tcp_slowtmr+0x270>)
 800f78e:	488d      	ldr	r0, [pc, #564]	; (800f9c4 <tcp_slowtmr+0x274>)
 800f790:	f008 ff5e 	bl	8018650 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800f794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f796:	7d1b      	ldrb	r3, [r3, #20]
 800f798:	2b01      	cmp	r3, #1
 800f79a:	d106      	bne.n	800f7aa <tcp_slowtmr+0x5a>
 800f79c:	4b87      	ldr	r3, [pc, #540]	; (800f9bc <tcp_slowtmr+0x26c>)
 800f79e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800f7a2:	4989      	ldr	r1, [pc, #548]	; (800f9c8 <tcp_slowtmr+0x278>)
 800f7a4:	4887      	ldr	r0, [pc, #540]	; (800f9c4 <tcp_slowtmr+0x274>)
 800f7a6:	f008 ff53 	bl	8018650 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800f7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ac:	7d1b      	ldrb	r3, [r3, #20]
 800f7ae:	2b0a      	cmp	r3, #10
 800f7b0:	d106      	bne.n	800f7c0 <tcp_slowtmr+0x70>
 800f7b2:	4b82      	ldr	r3, [pc, #520]	; (800f9bc <tcp_slowtmr+0x26c>)
 800f7b4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800f7b8:	4984      	ldr	r1, [pc, #528]	; (800f9cc <tcp_slowtmr+0x27c>)
 800f7ba:	4882      	ldr	r0, [pc, #520]	; (800f9c4 <tcp_slowtmr+0x274>)
 800f7bc:	f008 ff48 	bl	8018650 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800f7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7c2:	7f9a      	ldrb	r2, [r3, #30]
 800f7c4:	4b7b      	ldr	r3, [pc, #492]	; (800f9b4 <tcp_slowtmr+0x264>)
 800f7c6:	781b      	ldrb	r3, [r3, #0]
 800f7c8:	429a      	cmp	r2, r3
 800f7ca:	d105      	bne.n	800f7d8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800f7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ce:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7d2:	68db      	ldr	r3, [r3, #12]
 800f7d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800f7d6:	e270      	b.n	800fcba <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800f7d8:	4b76      	ldr	r3, [pc, #472]	; (800f9b4 <tcp_slowtmr+0x264>)
 800f7da:	781a      	ldrb	r2, [r3, #0]
 800f7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7de:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800f7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ee:	7d1b      	ldrb	r3, [r3, #20]
 800f7f0:	2b02      	cmp	r3, #2
 800f7f2:	d10a      	bne.n	800f80a <tcp_slowtmr+0xba>
 800f7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f7fa:	2b05      	cmp	r3, #5
 800f7fc:	d905      	bls.n	800f80a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800f7fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f802:	3301      	adds	r3, #1
 800f804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f808:	e11e      	b.n	800fa48 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800f80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f80c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f810:	2b0b      	cmp	r3, #11
 800f812:	d905      	bls.n	800f820 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800f814:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f818:	3301      	adds	r3, #1
 800f81a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f81e:	e113      	b.n	800fa48 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800f820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f822:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f826:	2b00      	cmp	r3, #0
 800f828:	d075      	beq.n	800f916 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800f82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f82c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d006      	beq.n	800f840 <tcp_slowtmr+0xf0>
 800f832:	4b62      	ldr	r3, [pc, #392]	; (800f9bc <tcp_slowtmr+0x26c>)
 800f834:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800f838:	4965      	ldr	r1, [pc, #404]	; (800f9d0 <tcp_slowtmr+0x280>)
 800f83a:	4862      	ldr	r0, [pc, #392]	; (800f9c4 <tcp_slowtmr+0x274>)
 800f83c:	f008 ff08 	bl	8018650 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800f840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f844:	2b00      	cmp	r3, #0
 800f846:	d106      	bne.n	800f856 <tcp_slowtmr+0x106>
 800f848:	4b5c      	ldr	r3, [pc, #368]	; (800f9bc <tcp_slowtmr+0x26c>)
 800f84a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800f84e:	4961      	ldr	r1, [pc, #388]	; (800f9d4 <tcp_slowtmr+0x284>)
 800f850:	485c      	ldr	r0, [pc, #368]	; (800f9c4 <tcp_slowtmr+0x274>)
 800f852:	f008 fefd 	bl	8018650 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800f856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f858:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f85c:	2b0b      	cmp	r3, #11
 800f85e:	d905      	bls.n	800f86c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800f860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f864:	3301      	adds	r3, #1
 800f866:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f86a:	e0ed      	b.n	800fa48 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800f86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f86e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f872:	3b01      	subs	r3, #1
 800f874:	4a58      	ldr	r2, [pc, #352]	; (800f9d8 <tcp_slowtmr+0x288>)
 800f876:	5cd3      	ldrb	r3, [r2, r3]
 800f878:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800f87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f87c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f880:	7c7a      	ldrb	r2, [r7, #17]
 800f882:	429a      	cmp	r2, r3
 800f884:	d907      	bls.n	800f896 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800f886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f888:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f88c:	3301      	adds	r3, #1
 800f88e:	b2da      	uxtb	r2, r3
 800f890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f892:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800f896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f898:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f89c:	7c7a      	ldrb	r2, [r7, #17]
 800f89e:	429a      	cmp	r2, r3
 800f8a0:	f200 80d2 	bhi.w	800fa48 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800f8a4:	2301      	movs	r3, #1
 800f8a6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800f8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d108      	bne.n	800f8c4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800f8b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f8b4:	f005 f950 	bl	8014b58 <tcp_zero_window_probe>
 800f8b8:	4603      	mov	r3, r0
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d014      	beq.n	800f8e8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800f8be:	2300      	movs	r3, #0
 800f8c0:	623b      	str	r3, [r7, #32]
 800f8c2:	e011      	b.n	800f8e8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f8ca:	4619      	mov	r1, r3
 800f8cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f8ce:	f004 f815 	bl	80138fc <tcp_split_unsent_seg>
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d107      	bne.n	800f8e8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800f8d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f8da:	f004 fa95 	bl	8013e08 <tcp_output>
 800f8de:	4603      	mov	r3, r0
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d101      	bne.n	800f8e8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800f8e8:	6a3b      	ldr	r3, [r7, #32]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	f000 80ac 	beq.w	800fa48 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800f8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8f2:	2200      	movs	r2, #0
 800f8f4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800f8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8fa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f8fe:	2b06      	cmp	r3, #6
 800f900:	f200 80a2 	bhi.w	800fa48 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800f904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f906:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f90a:	3301      	adds	r3, #1
 800f90c:	b2da      	uxtb	r2, r3
 800f90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f910:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800f914:	e098      	b.n	800fa48 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f918:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	db0f      	blt.n	800f940 <tcp_slowtmr+0x1f0>
 800f920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f922:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f926:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f92a:	4293      	cmp	r3, r2
 800f92c:	d008      	beq.n	800f940 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800f92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f930:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f934:	b29b      	uxth	r3, r3
 800f936:	3301      	adds	r3, #1
 800f938:	b29b      	uxth	r3, r3
 800f93a:	b21a      	sxth	r2, r3
 800f93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f93e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800f940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f942:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800f946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f948:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f94c:	429a      	cmp	r2, r3
 800f94e:	db7b      	blt.n	800fa48 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f950:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f952:	f004 fd4b 	bl	80143ec <tcp_rexmit_rto_prepare>
 800f956:	4603      	mov	r3, r0
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d007      	beq.n	800f96c <tcp_slowtmr+0x21c>
 800f95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f95e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f960:	2b00      	cmp	r3, #0
 800f962:	d171      	bne.n	800fa48 <tcp_slowtmr+0x2f8>
 800f964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d06d      	beq.n	800fa48 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800f96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f96e:	7d1b      	ldrb	r3, [r3, #20]
 800f970:	2b02      	cmp	r3, #2
 800f972:	d03a      	beq.n	800f9ea <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f976:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f97a:	2b0c      	cmp	r3, #12
 800f97c:	bf28      	it	cs
 800f97e:	230c      	movcs	r3, #12
 800f980:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f984:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f988:	10db      	asrs	r3, r3, #3
 800f98a:	b21b      	sxth	r3, r3
 800f98c:	461a      	mov	r2, r3
 800f98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f990:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f994:	4413      	add	r3, r2
 800f996:	7efa      	ldrb	r2, [r7, #27]
 800f998:	4910      	ldr	r1, [pc, #64]	; (800f9dc <tcp_slowtmr+0x28c>)
 800f99a:	5c8a      	ldrb	r2, [r1, r2]
 800f99c:	4093      	lsls	r3, r2
 800f99e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f9a0:	697b      	ldr	r3, [r7, #20]
 800f9a2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800f9a6:	4293      	cmp	r3, r2
 800f9a8:	dc1a      	bgt.n	800f9e0 <tcp_slowtmr+0x290>
 800f9aa:	697b      	ldr	r3, [r7, #20]
 800f9ac:	b21a      	sxth	r2, r3
 800f9ae:	e019      	b.n	800f9e4 <tcp_slowtmr+0x294>
 800f9b0:	2000d24c 	.word	0x2000d24c
 800f9b4:	2000d262 	.word	0x2000d262
 800f9b8:	2000d258 	.word	0x2000d258
 800f9bc:	0801b638 	.word	0x0801b638
 800f9c0:	0801b97c 	.word	0x0801b97c
 800f9c4:	0801b67c 	.word	0x0801b67c
 800f9c8:	0801b9a8 	.word	0x0801b9a8
 800f9cc:	0801b9d4 	.word	0x0801b9d4
 800f9d0:	0801ba04 	.word	0x0801ba04
 800f9d4:	0801ba38 	.word	0x0801ba38
 800f9d8:	0801d6fc 	.word	0x0801d6fc
 800f9dc:	0801d6ec 	.word	0x0801d6ec
 800f9e0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800f9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f9fc:	4293      	cmp	r3, r2
 800f9fe:	bf28      	it	cs
 800fa00:	4613      	movcs	r3, r2
 800fa02:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800fa04:	8a7b      	ldrh	r3, [r7, #18]
 800fa06:	085b      	lsrs	r3, r3, #1
 800fa08:	b29a      	uxth	r2, r3
 800fa0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa0c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800fa10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa12:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fa16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa1a:	005b      	lsls	r3, r3, #1
 800fa1c:	b29b      	uxth	r3, r3
 800fa1e:	429a      	cmp	r2, r3
 800fa20:	d206      	bcs.n	800fa30 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800fa22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa26:	005b      	lsls	r3, r3, #1
 800fa28:	b29a      	uxth	r2, r3
 800fa2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa2c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800fa30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa32:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800fa34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa36:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800fa3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800fa42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa44:	f004 fd42 	bl	80144cc <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800fa48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa4a:	7d1b      	ldrb	r3, [r3, #20]
 800fa4c:	2b06      	cmp	r3, #6
 800fa4e:	d111      	bne.n	800fa74 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800fa50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa52:	8b5b      	ldrh	r3, [r3, #26]
 800fa54:	f003 0310 	and.w	r3, r3, #16
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d00b      	beq.n	800fa74 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fa5c:	4b9c      	ldr	r3, [pc, #624]	; (800fcd0 <tcp_slowtmr+0x580>)
 800fa5e:	681a      	ldr	r2, [r3, #0]
 800fa60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa62:	6a1b      	ldr	r3, [r3, #32]
 800fa64:	1ad3      	subs	r3, r2, r3
 800fa66:	2b28      	cmp	r3, #40	; 0x28
 800fa68:	d904      	bls.n	800fa74 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800fa6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa6e:	3301      	adds	r3, #1
 800fa70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fa74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa76:	7a5b      	ldrb	r3, [r3, #9]
 800fa78:	f003 0308 	and.w	r3, r3, #8
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d04a      	beq.n	800fb16 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800fa80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa82:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fa84:	2b04      	cmp	r3, #4
 800fa86:	d003      	beq.n	800fa90 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800fa88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa8a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800fa8c:	2b07      	cmp	r3, #7
 800fa8e:	d142      	bne.n	800fb16 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fa90:	4b8f      	ldr	r3, [pc, #572]	; (800fcd0 <tcp_slowtmr+0x580>)
 800fa92:	681a      	ldr	r2, [r3, #0]
 800fa94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa96:	6a1b      	ldr	r3, [r3, #32]
 800fa98:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800fa9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa9c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800faa0:	4b8c      	ldr	r3, [pc, #560]	; (800fcd4 <tcp_slowtmr+0x584>)
 800faa2:	440b      	add	r3, r1
 800faa4:	498c      	ldr	r1, [pc, #560]	; (800fcd8 <tcp_slowtmr+0x588>)
 800faa6:	fba1 1303 	umull	r1, r3, r1, r3
 800faaa:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800faac:	429a      	cmp	r2, r3
 800faae:	d90a      	bls.n	800fac6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800fab0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fab4:	3301      	adds	r3, #1
 800fab6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800faba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fabe:	3301      	adds	r3, #1
 800fac0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fac4:	e027      	b.n	800fb16 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fac6:	4b82      	ldr	r3, [pc, #520]	; (800fcd0 <tcp_slowtmr+0x580>)
 800fac8:	681a      	ldr	r2, [r3, #0]
 800faca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800facc:	6a1b      	ldr	r3, [r3, #32]
 800face:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800fad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fad2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800fad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fad8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800fadc:	4618      	mov	r0, r3
 800fade:	4b7f      	ldr	r3, [pc, #508]	; (800fcdc <tcp_slowtmr+0x58c>)
 800fae0:	fb00 f303 	mul.w	r3, r0, r3
 800fae4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800fae6:	497c      	ldr	r1, [pc, #496]	; (800fcd8 <tcp_slowtmr+0x588>)
 800fae8:	fba1 1303 	umull	r1, r3, r1, r3
 800faec:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800faee:	429a      	cmp	r2, r3
 800faf0:	d911      	bls.n	800fb16 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800faf2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800faf4:	f004 fff0 	bl	8014ad8 <tcp_keepalive>
 800faf8:	4603      	mov	r3, r0
 800fafa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800fafe:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d107      	bne.n	800fb16 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800fb06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb08:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800fb0c:	3301      	adds	r3, #1
 800fb0e:	b2da      	uxtb	r2, r3
 800fb10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb12:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800fb16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d011      	beq.n	800fb42 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800fb1e:	4b6c      	ldr	r3, [pc, #432]	; (800fcd0 <tcp_slowtmr+0x580>)
 800fb20:	681a      	ldr	r2, [r3, #0]
 800fb22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb24:	6a1b      	ldr	r3, [r3, #32]
 800fb26:	1ad2      	subs	r2, r2, r3
 800fb28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb2a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fb2e:	4619      	mov	r1, r3
 800fb30:	460b      	mov	r3, r1
 800fb32:	005b      	lsls	r3, r3, #1
 800fb34:	440b      	add	r3, r1
 800fb36:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800fb38:	429a      	cmp	r2, r3
 800fb3a:	d302      	bcc.n	800fb42 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800fb3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb3e:	f000 feab 	bl	8010898 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800fb42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb44:	7d1b      	ldrb	r3, [r3, #20]
 800fb46:	2b03      	cmp	r3, #3
 800fb48:	d10b      	bne.n	800fb62 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fb4a:	4b61      	ldr	r3, [pc, #388]	; (800fcd0 <tcp_slowtmr+0x580>)
 800fb4c:	681a      	ldr	r2, [r3, #0]
 800fb4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb50:	6a1b      	ldr	r3, [r3, #32]
 800fb52:	1ad3      	subs	r3, r2, r3
 800fb54:	2b28      	cmp	r3, #40	; 0x28
 800fb56:	d904      	bls.n	800fb62 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800fb58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb5c:	3301      	adds	r3, #1
 800fb5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800fb62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb64:	7d1b      	ldrb	r3, [r3, #20]
 800fb66:	2b09      	cmp	r3, #9
 800fb68:	d10b      	bne.n	800fb82 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fb6a:	4b59      	ldr	r3, [pc, #356]	; (800fcd0 <tcp_slowtmr+0x580>)
 800fb6c:	681a      	ldr	r2, [r3, #0]
 800fb6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb70:	6a1b      	ldr	r3, [r3, #32]
 800fb72:	1ad3      	subs	r3, r2, r3
 800fb74:	2bf0      	cmp	r3, #240	; 0xf0
 800fb76:	d904      	bls.n	800fb82 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800fb78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb7c:	3301      	adds	r3, #1
 800fb7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fb82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d060      	beq.n	800fc4c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800fb8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb90:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800fb92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb94:	f000 fccc 	bl	8010530 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800fb98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d010      	beq.n	800fbc0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800fb9e:	4b50      	ldr	r3, [pc, #320]	; (800fce0 <tcp_slowtmr+0x590>)
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fba4:	429a      	cmp	r2, r3
 800fba6:	d106      	bne.n	800fbb6 <tcp_slowtmr+0x466>
 800fba8:	4b4e      	ldr	r3, [pc, #312]	; (800fce4 <tcp_slowtmr+0x594>)
 800fbaa:	f240 526d 	movw	r2, #1389	; 0x56d
 800fbae:	494e      	ldr	r1, [pc, #312]	; (800fce8 <tcp_slowtmr+0x598>)
 800fbb0:	484e      	ldr	r0, [pc, #312]	; (800fcec <tcp_slowtmr+0x59c>)
 800fbb2:	f008 fd4d 	bl	8018650 <iprintf>
        prev->next = pcb->next;
 800fbb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbb8:	68da      	ldr	r2, [r3, #12]
 800fbba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbbc:	60da      	str	r2, [r3, #12]
 800fbbe:	e00f      	b.n	800fbe0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800fbc0:	4b47      	ldr	r3, [pc, #284]	; (800fce0 <tcp_slowtmr+0x590>)
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fbc6:	429a      	cmp	r2, r3
 800fbc8:	d006      	beq.n	800fbd8 <tcp_slowtmr+0x488>
 800fbca:	4b46      	ldr	r3, [pc, #280]	; (800fce4 <tcp_slowtmr+0x594>)
 800fbcc:	f240 5271 	movw	r2, #1393	; 0x571
 800fbd0:	4947      	ldr	r1, [pc, #284]	; (800fcf0 <tcp_slowtmr+0x5a0>)
 800fbd2:	4846      	ldr	r0, [pc, #280]	; (800fcec <tcp_slowtmr+0x59c>)
 800fbd4:	f008 fd3c 	bl	8018650 <iprintf>
        tcp_active_pcbs = pcb->next;
 800fbd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbda:	68db      	ldr	r3, [r3, #12]
 800fbdc:	4a40      	ldr	r2, [pc, #256]	; (800fce0 <tcp_slowtmr+0x590>)
 800fbde:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800fbe0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d013      	beq.n	800fc10 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fbe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbea:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800fbec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbee:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800fbf0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800fbf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbf4:	3304      	adds	r3, #4
 800fbf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fbf8:	8ad2      	ldrh	r2, [r2, #22]
 800fbfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fbfc:	8b09      	ldrh	r1, [r1, #24]
 800fbfe:	9102      	str	r1, [sp, #8]
 800fc00:	9201      	str	r2, [sp, #4]
 800fc02:	9300      	str	r3, [sp, #0]
 800fc04:	462b      	mov	r3, r5
 800fc06:	4622      	mov	r2, r4
 800fc08:	4601      	mov	r1, r0
 800fc0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc0c:	f004 feb0 	bl	8014970 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800fc10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc12:	691b      	ldr	r3, [r3, #16]
 800fc14:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800fc16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc18:	7d1b      	ldrb	r3, [r3, #20]
 800fc1a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800fc1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc1e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800fc20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc22:	68db      	ldr	r3, [r3, #12]
 800fc24:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800fc26:	6838      	ldr	r0, [r7, #0]
 800fc28:	f7ff f8ba 	bl	800eda0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800fc2c:	4b31      	ldr	r3, [pc, #196]	; (800fcf4 <tcp_slowtmr+0x5a4>)
 800fc2e:	2200      	movs	r2, #0
 800fc30:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d004      	beq.n	800fc42 <tcp_slowtmr+0x4f2>
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	f06f 010c 	mvn.w	r1, #12
 800fc3e:	68b8      	ldr	r0, [r7, #8]
 800fc40:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800fc42:	4b2c      	ldr	r3, [pc, #176]	; (800fcf4 <tcp_slowtmr+0x5a4>)
 800fc44:	781b      	ldrb	r3, [r3, #0]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d037      	beq.n	800fcba <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800fc4a:	e592      	b.n	800f772 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800fc4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc4e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fc50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc52:	68db      	ldr	r3, [r3, #12]
 800fc54:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800fc56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc58:	7f1b      	ldrb	r3, [r3, #28]
 800fc5a:	3301      	adds	r3, #1
 800fc5c:	b2da      	uxtb	r2, r3
 800fc5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc60:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800fc62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc64:	7f1a      	ldrb	r2, [r3, #28]
 800fc66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc68:	7f5b      	ldrb	r3, [r3, #29]
 800fc6a:	429a      	cmp	r2, r3
 800fc6c:	d325      	bcc.n	800fcba <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800fc6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc70:	2200      	movs	r2, #0
 800fc72:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800fc74:	4b1f      	ldr	r3, [pc, #124]	; (800fcf4 <tcp_slowtmr+0x5a4>)
 800fc76:	2200      	movs	r2, #0
 800fc78:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800fc7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d00b      	beq.n	800fc9c <tcp_slowtmr+0x54c>
 800fc84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fc8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc8c:	6912      	ldr	r2, [r2, #16]
 800fc8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fc90:	4610      	mov	r0, r2
 800fc92:	4798      	blx	r3
 800fc94:	4603      	mov	r3, r0
 800fc96:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800fc9a:	e002      	b.n	800fca2 <tcp_slowtmr+0x552>
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800fca2:	4b14      	ldr	r3, [pc, #80]	; (800fcf4 <tcp_slowtmr+0x5a4>)
 800fca4:	781b      	ldrb	r3, [r3, #0]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d000      	beq.n	800fcac <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800fcaa:	e562      	b.n	800f772 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800fcac:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d102      	bne.n	800fcba <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800fcb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fcb6:	f004 f8a7 	bl	8013e08 <tcp_output>
  while (pcb != NULL) {
 800fcba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	f47f ad5e 	bne.w	800f77e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800fcc6:	4b0c      	ldr	r3, [pc, #48]	; (800fcf8 <tcp_slowtmr+0x5a8>)
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800fccc:	e069      	b.n	800fda2 <tcp_slowtmr+0x652>
 800fcce:	bf00      	nop
 800fcd0:	2000d24c 	.word	0x2000d24c
 800fcd4:	000a4cb8 	.word	0x000a4cb8
 800fcd8:	10624dd3 	.word	0x10624dd3
 800fcdc:	000124f8 	.word	0x000124f8
 800fce0:	2000d258 	.word	0x2000d258
 800fce4:	0801b638 	.word	0x0801b638
 800fce8:	0801ba70 	.word	0x0801ba70
 800fcec:	0801b67c 	.word	0x0801b67c
 800fcf0:	0801ba9c 	.word	0x0801ba9c
 800fcf4:	2000d260 	.word	0x2000d260
 800fcf8:	2000d25c 	.word	0x2000d25c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fcfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcfe:	7d1b      	ldrb	r3, [r3, #20]
 800fd00:	2b0a      	cmp	r3, #10
 800fd02:	d006      	beq.n	800fd12 <tcp_slowtmr+0x5c2>
 800fd04:	4b2b      	ldr	r3, [pc, #172]	; (800fdb4 <tcp_slowtmr+0x664>)
 800fd06:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800fd0a:	492b      	ldr	r1, [pc, #172]	; (800fdb8 <tcp_slowtmr+0x668>)
 800fd0c:	482b      	ldr	r0, [pc, #172]	; (800fdbc <tcp_slowtmr+0x66c>)
 800fd0e:	f008 fc9f 	bl	8018650 <iprintf>
    pcb_remove = 0;
 800fd12:	2300      	movs	r3, #0
 800fd14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fd18:	4b29      	ldr	r3, [pc, #164]	; (800fdc0 <tcp_slowtmr+0x670>)
 800fd1a:	681a      	ldr	r2, [r3, #0]
 800fd1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd1e:	6a1b      	ldr	r3, [r3, #32]
 800fd20:	1ad3      	subs	r3, r2, r3
 800fd22:	2bf0      	cmp	r3, #240	; 0xf0
 800fd24:	d904      	bls.n	800fd30 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800fd26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd2a:	3301      	adds	r3, #1
 800fd2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fd30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d02f      	beq.n	800fd98 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800fd38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fd3a:	f000 fbf9 	bl	8010530 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800fd3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d010      	beq.n	800fd66 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800fd44:	4b1f      	ldr	r3, [pc, #124]	; (800fdc4 <tcp_slowtmr+0x674>)
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd4a:	429a      	cmp	r2, r3
 800fd4c:	d106      	bne.n	800fd5c <tcp_slowtmr+0x60c>
 800fd4e:	4b19      	ldr	r3, [pc, #100]	; (800fdb4 <tcp_slowtmr+0x664>)
 800fd50:	f240 52af 	movw	r2, #1455	; 0x5af
 800fd54:	491c      	ldr	r1, [pc, #112]	; (800fdc8 <tcp_slowtmr+0x678>)
 800fd56:	4819      	ldr	r0, [pc, #100]	; (800fdbc <tcp_slowtmr+0x66c>)
 800fd58:	f008 fc7a 	bl	8018650 <iprintf>
        prev->next = pcb->next;
 800fd5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd5e:	68da      	ldr	r2, [r3, #12]
 800fd60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd62:	60da      	str	r2, [r3, #12]
 800fd64:	e00f      	b.n	800fd86 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800fd66:	4b17      	ldr	r3, [pc, #92]	; (800fdc4 <tcp_slowtmr+0x674>)
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd6c:	429a      	cmp	r2, r3
 800fd6e:	d006      	beq.n	800fd7e <tcp_slowtmr+0x62e>
 800fd70:	4b10      	ldr	r3, [pc, #64]	; (800fdb4 <tcp_slowtmr+0x664>)
 800fd72:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800fd76:	4915      	ldr	r1, [pc, #84]	; (800fdcc <tcp_slowtmr+0x67c>)
 800fd78:	4810      	ldr	r0, [pc, #64]	; (800fdbc <tcp_slowtmr+0x66c>)
 800fd7a:	f008 fc69 	bl	8018650 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800fd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd80:	68db      	ldr	r3, [r3, #12]
 800fd82:	4a10      	ldr	r2, [pc, #64]	; (800fdc4 <tcp_slowtmr+0x674>)
 800fd84:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800fd86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd88:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800fd8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd8c:	68db      	ldr	r3, [r3, #12]
 800fd8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800fd90:	69f8      	ldr	r0, [r7, #28]
 800fd92:	f7ff f805 	bl	800eda0 <tcp_free>
 800fd96:	e004      	b.n	800fda2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800fd98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd9a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fd9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd9e:	68db      	ldr	r3, [r3, #12]
 800fda0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800fda2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d1a9      	bne.n	800fcfc <tcp_slowtmr+0x5ac>
    }
  }
}
 800fda8:	bf00      	nop
 800fdaa:	bf00      	nop
 800fdac:	3730      	adds	r7, #48	; 0x30
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	bdb0      	pop	{r4, r5, r7, pc}
 800fdb2:	bf00      	nop
 800fdb4:	0801b638 	.word	0x0801b638
 800fdb8:	0801bac8 	.word	0x0801bac8
 800fdbc:	0801b67c 	.word	0x0801b67c
 800fdc0:	2000d24c 	.word	0x2000d24c
 800fdc4:	2000d25c 	.word	0x2000d25c
 800fdc8:	0801baf8 	.word	0x0801baf8
 800fdcc:	0801bb20 	.word	0x0801bb20

0800fdd0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b082      	sub	sp, #8
 800fdd4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800fdd6:	4b2d      	ldr	r3, [pc, #180]	; (800fe8c <tcp_fasttmr+0xbc>)
 800fdd8:	781b      	ldrb	r3, [r3, #0]
 800fdda:	3301      	adds	r3, #1
 800fddc:	b2da      	uxtb	r2, r3
 800fdde:	4b2b      	ldr	r3, [pc, #172]	; (800fe8c <tcp_fasttmr+0xbc>)
 800fde0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800fde2:	4b2b      	ldr	r3, [pc, #172]	; (800fe90 <tcp_fasttmr+0xc0>)
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800fde8:	e048      	b.n	800fe7c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	7f9a      	ldrb	r2, [r3, #30]
 800fdee:	4b27      	ldr	r3, [pc, #156]	; (800fe8c <tcp_fasttmr+0xbc>)
 800fdf0:	781b      	ldrb	r3, [r3, #0]
 800fdf2:	429a      	cmp	r2, r3
 800fdf4:	d03f      	beq.n	800fe76 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800fdf6:	4b25      	ldr	r3, [pc, #148]	; (800fe8c <tcp_fasttmr+0xbc>)
 800fdf8:	781a      	ldrb	r2, [r3, #0]
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	8b5b      	ldrh	r3, [r3, #26]
 800fe02:	f003 0301 	and.w	r3, r3, #1
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d010      	beq.n	800fe2c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	8b5b      	ldrh	r3, [r3, #26]
 800fe0e:	f043 0302 	orr.w	r3, r3, #2
 800fe12:	b29a      	uxth	r2, r3
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800fe18:	6878      	ldr	r0, [r7, #4]
 800fe1a:	f003 fff5 	bl	8013e08 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	8b5b      	ldrh	r3, [r3, #26]
 800fe22:	f023 0303 	bic.w	r3, r3, #3
 800fe26:	b29a      	uxth	r2, r3
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	8b5b      	ldrh	r3, [r3, #26]
 800fe30:	f003 0308 	and.w	r3, r3, #8
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d009      	beq.n	800fe4c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	8b5b      	ldrh	r3, [r3, #26]
 800fe3c:	f023 0308 	bic.w	r3, r3, #8
 800fe40:	b29a      	uxth	r2, r3
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800fe46:	6878      	ldr	r0, [r7, #4]
 800fe48:	f7ff f93e 	bl	800f0c8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	68db      	ldr	r3, [r3, #12]
 800fe50:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d00a      	beq.n	800fe70 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800fe5a:	4b0e      	ldr	r3, [pc, #56]	; (800fe94 <tcp_fasttmr+0xc4>)
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800fe60:	6878      	ldr	r0, [r7, #4]
 800fe62:	f000 f819 	bl	800fe98 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800fe66:	4b0b      	ldr	r3, [pc, #44]	; (800fe94 <tcp_fasttmr+0xc4>)
 800fe68:	781b      	ldrb	r3, [r3, #0]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d000      	beq.n	800fe70 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800fe6e:	e7b8      	b.n	800fde2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800fe70:	683b      	ldr	r3, [r7, #0]
 800fe72:	607b      	str	r3, [r7, #4]
 800fe74:	e002      	b.n	800fe7c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	68db      	ldr	r3, [r3, #12]
 800fe7a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d1b3      	bne.n	800fdea <tcp_fasttmr+0x1a>
    }
  }
}
 800fe82:	bf00      	nop
 800fe84:	bf00      	nop
 800fe86:	3708      	adds	r7, #8
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	bd80      	pop	{r7, pc}
 800fe8c:	2000d262 	.word	0x2000d262
 800fe90:	2000d258 	.word	0x2000d258
 800fe94:	2000d260 	.word	0x2000d260

0800fe98 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800fe98:	b590      	push	{r4, r7, lr}
 800fe9a:	b085      	sub	sp, #20
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d109      	bne.n	800feba <tcp_process_refused_data+0x22>
 800fea6:	4b37      	ldr	r3, [pc, #220]	; (800ff84 <tcp_process_refused_data+0xec>)
 800fea8:	f240 6209 	movw	r2, #1545	; 0x609
 800feac:	4936      	ldr	r1, [pc, #216]	; (800ff88 <tcp_process_refused_data+0xf0>)
 800feae:	4837      	ldr	r0, [pc, #220]	; (800ff8c <tcp_process_refused_data+0xf4>)
 800feb0:	f008 fbce 	bl	8018650 <iprintf>
 800feb4:	f06f 030f 	mvn.w	r3, #15
 800feb8:	e060      	b.n	800ff7c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800febe:	7b5b      	ldrb	r3, [r3, #13]
 800fec0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fec6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	2200      	movs	r2, #0
 800fecc:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d00b      	beq.n	800fef0 <tcp_process_refused_data+0x58>
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	6918      	ldr	r0, [r3, #16]
 800fee2:	2300      	movs	r3, #0
 800fee4:	68ba      	ldr	r2, [r7, #8]
 800fee6:	6879      	ldr	r1, [r7, #4]
 800fee8:	47a0      	blx	r4
 800feea:	4603      	mov	r3, r0
 800feec:	73fb      	strb	r3, [r7, #15]
 800feee:	e007      	b.n	800ff00 <tcp_process_refused_data+0x68>
 800fef0:	2300      	movs	r3, #0
 800fef2:	68ba      	ldr	r2, [r7, #8]
 800fef4:	6879      	ldr	r1, [r7, #4]
 800fef6:	2000      	movs	r0, #0
 800fef8:	f000 f8a4 	bl	8010044 <tcp_recv_null>
 800fefc:	4603      	mov	r3, r0
 800fefe:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ff00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d12a      	bne.n	800ff5e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ff08:	7bbb      	ldrb	r3, [r7, #14]
 800ff0a:	f003 0320 	and.w	r3, r3, #32
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d033      	beq.n	800ff7a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ff16:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ff1a:	d005      	beq.n	800ff28 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ff20:	3301      	adds	r3, #1
 800ff22:	b29a      	uxth	r2, r3
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d00b      	beq.n	800ff4a <tcp_process_refused_data+0xb2>
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	6918      	ldr	r0, [r3, #16]
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	2200      	movs	r2, #0
 800ff40:	6879      	ldr	r1, [r7, #4]
 800ff42:	47a0      	blx	r4
 800ff44:	4603      	mov	r3, r0
 800ff46:	73fb      	strb	r3, [r7, #15]
 800ff48:	e001      	b.n	800ff4e <tcp_process_refused_data+0xb6>
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ff4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff52:	f113 0f0d 	cmn.w	r3, #13
 800ff56:	d110      	bne.n	800ff7a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ff58:	f06f 030c 	mvn.w	r3, #12
 800ff5c:	e00e      	b.n	800ff7c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ff5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff62:	f113 0f0d 	cmn.w	r3, #13
 800ff66:	d102      	bne.n	800ff6e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ff68:	f06f 030c 	mvn.w	r3, #12
 800ff6c:	e006      	b.n	800ff7c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	68ba      	ldr	r2, [r7, #8]
 800ff72:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ff74:	f06f 0304 	mvn.w	r3, #4
 800ff78:	e000      	b.n	800ff7c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ff7a:	2300      	movs	r3, #0
}
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	3714      	adds	r7, #20
 800ff80:	46bd      	mov	sp, r7
 800ff82:	bd90      	pop	{r4, r7, pc}
 800ff84:	0801b638 	.word	0x0801b638
 800ff88:	0801bb48 	.word	0x0801bb48
 800ff8c:	0801b67c 	.word	0x0801b67c

0800ff90 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b084      	sub	sp, #16
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ff98:	e007      	b.n	800ffaa <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ffa0:	6878      	ldr	r0, [r7, #4]
 800ffa2:	f000 f80a 	bl	800ffba <tcp_seg_free>
    seg = next;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d1f4      	bne.n	800ff9a <tcp_segs_free+0xa>
  }
}
 800ffb0:	bf00      	nop
 800ffb2:	bf00      	nop
 800ffb4:	3710      	adds	r7, #16
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	bd80      	pop	{r7, pc}

0800ffba <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ffba:	b580      	push	{r7, lr}
 800ffbc:	b082      	sub	sp, #8
 800ffbe:	af00      	add	r7, sp, #0
 800ffc0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d00c      	beq.n	800ffe2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	685b      	ldr	r3, [r3, #4]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d004      	beq.n	800ffda <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	685b      	ldr	r3, [r3, #4]
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	f7fe fc27 	bl	800e828 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ffda:	6879      	ldr	r1, [r7, #4]
 800ffdc:	2003      	movs	r0, #3
 800ffde:	f7fd fd4d 	bl	800da7c <memp_free>
  }
}
 800ffe2:	bf00      	nop
 800ffe4:	3708      	adds	r7, #8
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	bd80      	pop	{r7, pc}
	...

0800ffec <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b084      	sub	sp, #16
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d106      	bne.n	8010008 <tcp_seg_copy+0x1c>
 800fffa:	4b0f      	ldr	r3, [pc, #60]	; (8010038 <tcp_seg_copy+0x4c>)
 800fffc:	f240 6282 	movw	r2, #1666	; 0x682
 8010000:	490e      	ldr	r1, [pc, #56]	; (801003c <tcp_seg_copy+0x50>)
 8010002:	480f      	ldr	r0, [pc, #60]	; (8010040 <tcp_seg_copy+0x54>)
 8010004:	f008 fb24 	bl	8018650 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8010008:	2003      	movs	r0, #3
 801000a:	f7fd fce5 	bl	800d9d8 <memp_malloc>
 801000e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d101      	bne.n	801001a <tcp_seg_copy+0x2e>
    return NULL;
 8010016:	2300      	movs	r3, #0
 8010018:	e00a      	b.n	8010030 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801001a:	2210      	movs	r2, #16
 801001c:	6879      	ldr	r1, [r7, #4]
 801001e:	68f8      	ldr	r0, [r7, #12]
 8010020:	f008 fae6 	bl	80185f0 <memcpy>
  pbuf_ref(cseg->p);
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	685b      	ldr	r3, [r3, #4]
 8010028:	4618      	mov	r0, r3
 801002a:	f7fe fca3 	bl	800e974 <pbuf_ref>
  return cseg;
 801002e:	68fb      	ldr	r3, [r7, #12]
}
 8010030:	4618      	mov	r0, r3
 8010032:	3710      	adds	r7, #16
 8010034:	46bd      	mov	sp, r7
 8010036:	bd80      	pop	{r7, pc}
 8010038:	0801b638 	.word	0x0801b638
 801003c:	0801bb8c 	.word	0x0801bb8c
 8010040:	0801b67c 	.word	0x0801b67c

08010044 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010044:	b580      	push	{r7, lr}
 8010046:	b084      	sub	sp, #16
 8010048:	af00      	add	r7, sp, #0
 801004a:	60f8      	str	r0, [r7, #12]
 801004c:	60b9      	str	r1, [r7, #8]
 801004e:	607a      	str	r2, [r7, #4]
 8010050:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8010052:	68bb      	ldr	r3, [r7, #8]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d109      	bne.n	801006c <tcp_recv_null+0x28>
 8010058:	4b12      	ldr	r3, [pc, #72]	; (80100a4 <tcp_recv_null+0x60>)
 801005a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801005e:	4912      	ldr	r1, [pc, #72]	; (80100a8 <tcp_recv_null+0x64>)
 8010060:	4812      	ldr	r0, [pc, #72]	; (80100ac <tcp_recv_null+0x68>)
 8010062:	f008 faf5 	bl	8018650 <iprintf>
 8010066:	f06f 030f 	mvn.w	r3, #15
 801006a:	e016      	b.n	801009a <tcp_recv_null+0x56>

  if (p != NULL) {
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d009      	beq.n	8010086 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	891b      	ldrh	r3, [r3, #8]
 8010076:	4619      	mov	r1, r3
 8010078:	68b8      	ldr	r0, [r7, #8]
 801007a:	f7ff fad3 	bl	800f624 <tcp_recved>
    pbuf_free(p);
 801007e:	6878      	ldr	r0, [r7, #4]
 8010080:	f7fe fbd2 	bl	800e828 <pbuf_free>
 8010084:	e008      	b.n	8010098 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8010086:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d104      	bne.n	8010098 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801008e:	68b8      	ldr	r0, [r7, #8]
 8010090:	f7ff f884 	bl	800f19c <tcp_close>
 8010094:	4603      	mov	r3, r0
 8010096:	e000      	b.n	801009a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8010098:	2300      	movs	r3, #0
}
 801009a:	4618      	mov	r0, r3
 801009c:	3710      	adds	r7, #16
 801009e:	46bd      	mov	sp, r7
 80100a0:	bd80      	pop	{r7, pc}
 80100a2:	bf00      	nop
 80100a4:	0801b638 	.word	0x0801b638
 80100a8:	0801bba8 	.word	0x0801bba8
 80100ac:	0801b67c 	.word	0x0801b67c

080100b0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b086      	sub	sp, #24
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	4603      	mov	r3, r0
 80100b8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80100ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	db01      	blt.n	80100c6 <tcp_kill_prio+0x16>
 80100c2:	79fb      	ldrb	r3, [r7, #7]
 80100c4:	e000      	b.n	80100c8 <tcp_kill_prio+0x18>
 80100c6:	237f      	movs	r3, #127	; 0x7f
 80100c8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80100ca:	7afb      	ldrb	r3, [r7, #11]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d034      	beq.n	801013a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80100d0:	7afb      	ldrb	r3, [r7, #11]
 80100d2:	3b01      	subs	r3, #1
 80100d4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80100d6:	2300      	movs	r3, #0
 80100d8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80100da:	2300      	movs	r3, #0
 80100dc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80100de:	4b19      	ldr	r3, [pc, #100]	; (8010144 <tcp_kill_prio+0x94>)
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	617b      	str	r3, [r7, #20]
 80100e4:	e01f      	b.n	8010126 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80100e6:	697b      	ldr	r3, [r7, #20]
 80100e8:	7d5b      	ldrb	r3, [r3, #21]
 80100ea:	7afa      	ldrb	r2, [r7, #11]
 80100ec:	429a      	cmp	r2, r3
 80100ee:	d80c      	bhi.n	801010a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80100f0:	697b      	ldr	r3, [r7, #20]
 80100f2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80100f4:	7afa      	ldrb	r2, [r7, #11]
 80100f6:	429a      	cmp	r2, r3
 80100f8:	d112      	bne.n	8010120 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80100fa:	4b13      	ldr	r3, [pc, #76]	; (8010148 <tcp_kill_prio+0x98>)
 80100fc:	681a      	ldr	r2, [r3, #0]
 80100fe:	697b      	ldr	r3, [r7, #20]
 8010100:	6a1b      	ldr	r3, [r3, #32]
 8010102:	1ad3      	subs	r3, r2, r3
 8010104:	68fa      	ldr	r2, [r7, #12]
 8010106:	429a      	cmp	r2, r3
 8010108:	d80a      	bhi.n	8010120 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801010a:	4b0f      	ldr	r3, [pc, #60]	; (8010148 <tcp_kill_prio+0x98>)
 801010c:	681a      	ldr	r2, [r3, #0]
 801010e:	697b      	ldr	r3, [r7, #20]
 8010110:	6a1b      	ldr	r3, [r3, #32]
 8010112:	1ad3      	subs	r3, r2, r3
 8010114:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8010116:	697b      	ldr	r3, [r7, #20]
 8010118:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801011a:	697b      	ldr	r3, [r7, #20]
 801011c:	7d5b      	ldrb	r3, [r3, #21]
 801011e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010120:	697b      	ldr	r3, [r7, #20]
 8010122:	68db      	ldr	r3, [r3, #12]
 8010124:	617b      	str	r3, [r7, #20]
 8010126:	697b      	ldr	r3, [r7, #20]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d1dc      	bne.n	80100e6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801012c:	693b      	ldr	r3, [r7, #16]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d004      	beq.n	801013c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010132:	6938      	ldr	r0, [r7, #16]
 8010134:	f7ff f978 	bl	800f428 <tcp_abort>
 8010138:	e000      	b.n	801013c <tcp_kill_prio+0x8c>
    return;
 801013a:	bf00      	nop
  }
}
 801013c:	3718      	adds	r7, #24
 801013e:	46bd      	mov	sp, r7
 8010140:	bd80      	pop	{r7, pc}
 8010142:	bf00      	nop
 8010144:	2000d258 	.word	0x2000d258
 8010148:	2000d24c 	.word	0x2000d24c

0801014c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801014c:	b580      	push	{r7, lr}
 801014e:	b086      	sub	sp, #24
 8010150:	af00      	add	r7, sp, #0
 8010152:	4603      	mov	r3, r0
 8010154:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8010156:	79fb      	ldrb	r3, [r7, #7]
 8010158:	2b08      	cmp	r3, #8
 801015a:	d009      	beq.n	8010170 <tcp_kill_state+0x24>
 801015c:	79fb      	ldrb	r3, [r7, #7]
 801015e:	2b09      	cmp	r3, #9
 8010160:	d006      	beq.n	8010170 <tcp_kill_state+0x24>
 8010162:	4b1a      	ldr	r3, [pc, #104]	; (80101cc <tcp_kill_state+0x80>)
 8010164:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8010168:	4919      	ldr	r1, [pc, #100]	; (80101d0 <tcp_kill_state+0x84>)
 801016a:	481a      	ldr	r0, [pc, #104]	; (80101d4 <tcp_kill_state+0x88>)
 801016c:	f008 fa70 	bl	8018650 <iprintf>

  inactivity = 0;
 8010170:	2300      	movs	r3, #0
 8010172:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010174:	2300      	movs	r3, #0
 8010176:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010178:	4b17      	ldr	r3, [pc, #92]	; (80101d8 <tcp_kill_state+0x8c>)
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	617b      	str	r3, [r7, #20]
 801017e:	e017      	b.n	80101b0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8010180:	697b      	ldr	r3, [r7, #20]
 8010182:	7d1b      	ldrb	r3, [r3, #20]
 8010184:	79fa      	ldrb	r2, [r7, #7]
 8010186:	429a      	cmp	r2, r3
 8010188:	d10f      	bne.n	80101aa <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801018a:	4b14      	ldr	r3, [pc, #80]	; (80101dc <tcp_kill_state+0x90>)
 801018c:	681a      	ldr	r2, [r3, #0]
 801018e:	697b      	ldr	r3, [r7, #20]
 8010190:	6a1b      	ldr	r3, [r3, #32]
 8010192:	1ad3      	subs	r3, r2, r3
 8010194:	68fa      	ldr	r2, [r7, #12]
 8010196:	429a      	cmp	r2, r3
 8010198:	d807      	bhi.n	80101aa <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801019a:	4b10      	ldr	r3, [pc, #64]	; (80101dc <tcp_kill_state+0x90>)
 801019c:	681a      	ldr	r2, [r3, #0]
 801019e:	697b      	ldr	r3, [r7, #20]
 80101a0:	6a1b      	ldr	r3, [r3, #32]
 80101a2:	1ad3      	subs	r3, r2, r3
 80101a4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80101a6:	697b      	ldr	r3, [r7, #20]
 80101a8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80101aa:	697b      	ldr	r3, [r7, #20]
 80101ac:	68db      	ldr	r3, [r3, #12]
 80101ae:	617b      	str	r3, [r7, #20]
 80101b0:	697b      	ldr	r3, [r7, #20]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d1e4      	bne.n	8010180 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80101b6:	693b      	ldr	r3, [r7, #16]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d003      	beq.n	80101c4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80101bc:	2100      	movs	r1, #0
 80101be:	6938      	ldr	r0, [r7, #16]
 80101c0:	f7ff f874 	bl	800f2ac <tcp_abandon>
  }
}
 80101c4:	bf00      	nop
 80101c6:	3718      	adds	r7, #24
 80101c8:	46bd      	mov	sp, r7
 80101ca:	bd80      	pop	{r7, pc}
 80101cc:	0801b638 	.word	0x0801b638
 80101d0:	0801bbc4 	.word	0x0801bbc4
 80101d4:	0801b67c 	.word	0x0801b67c
 80101d8:	2000d258 	.word	0x2000d258
 80101dc:	2000d24c 	.word	0x2000d24c

080101e0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b084      	sub	sp, #16
 80101e4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80101e6:	2300      	movs	r3, #0
 80101e8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80101ea:	2300      	movs	r3, #0
 80101ec:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80101ee:	4b12      	ldr	r3, [pc, #72]	; (8010238 <tcp_kill_timewait+0x58>)
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	60fb      	str	r3, [r7, #12]
 80101f4:	e012      	b.n	801021c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80101f6:	4b11      	ldr	r3, [pc, #68]	; (801023c <tcp_kill_timewait+0x5c>)
 80101f8:	681a      	ldr	r2, [r3, #0]
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	6a1b      	ldr	r3, [r3, #32]
 80101fe:	1ad3      	subs	r3, r2, r3
 8010200:	687a      	ldr	r2, [r7, #4]
 8010202:	429a      	cmp	r2, r3
 8010204:	d807      	bhi.n	8010216 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8010206:	4b0d      	ldr	r3, [pc, #52]	; (801023c <tcp_kill_timewait+0x5c>)
 8010208:	681a      	ldr	r2, [r3, #0]
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	6a1b      	ldr	r3, [r3, #32]
 801020e:	1ad3      	subs	r3, r2, r3
 8010210:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	68db      	ldr	r3, [r3, #12]
 801021a:	60fb      	str	r3, [r7, #12]
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d1e9      	bne.n	80101f6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8010222:	68bb      	ldr	r3, [r7, #8]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d002      	beq.n	801022e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010228:	68b8      	ldr	r0, [r7, #8]
 801022a:	f7ff f8fd 	bl	800f428 <tcp_abort>
  }
}
 801022e:	bf00      	nop
 8010230:	3710      	adds	r7, #16
 8010232:	46bd      	mov	sp, r7
 8010234:	bd80      	pop	{r7, pc}
 8010236:	bf00      	nop
 8010238:	2000d25c 	.word	0x2000d25c
 801023c:	2000d24c 	.word	0x2000d24c

08010240 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8010240:	b580      	push	{r7, lr}
 8010242:	b082      	sub	sp, #8
 8010244:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8010246:	4b10      	ldr	r3, [pc, #64]	; (8010288 <tcp_handle_closepend+0x48>)
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801024c:	e014      	b.n	8010278 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	68db      	ldr	r3, [r3, #12]
 8010252:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	8b5b      	ldrh	r3, [r3, #26]
 8010258:	f003 0308 	and.w	r3, r3, #8
 801025c:	2b00      	cmp	r3, #0
 801025e:	d009      	beq.n	8010274 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	8b5b      	ldrh	r3, [r3, #26]
 8010264:	f023 0308 	bic.w	r3, r3, #8
 8010268:	b29a      	uxth	r2, r3
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801026e:	6878      	ldr	r0, [r7, #4]
 8010270:	f7fe ff2a 	bl	800f0c8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8010274:	683b      	ldr	r3, [r7, #0]
 8010276:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	2b00      	cmp	r3, #0
 801027c:	d1e7      	bne.n	801024e <tcp_handle_closepend+0xe>
  }
}
 801027e:	bf00      	nop
 8010280:	bf00      	nop
 8010282:	3708      	adds	r7, #8
 8010284:	46bd      	mov	sp, r7
 8010286:	bd80      	pop	{r7, pc}
 8010288:	2000d258 	.word	0x2000d258

0801028c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801028c:	b580      	push	{r7, lr}
 801028e:	b084      	sub	sp, #16
 8010290:	af00      	add	r7, sp, #0
 8010292:	4603      	mov	r3, r0
 8010294:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010296:	2001      	movs	r0, #1
 8010298:	f7fd fb9e 	bl	800d9d8 <memp_malloc>
 801029c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d126      	bne.n	80102f2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80102a4:	f7ff ffcc 	bl	8010240 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80102a8:	f7ff ff9a 	bl	80101e0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80102ac:	2001      	movs	r0, #1
 80102ae:	f7fd fb93 	bl	800d9d8 <memp_malloc>
 80102b2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d11b      	bne.n	80102f2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80102ba:	2009      	movs	r0, #9
 80102bc:	f7ff ff46 	bl	801014c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80102c0:	2001      	movs	r0, #1
 80102c2:	f7fd fb89 	bl	800d9d8 <memp_malloc>
 80102c6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d111      	bne.n	80102f2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80102ce:	2008      	movs	r0, #8
 80102d0:	f7ff ff3c 	bl	801014c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80102d4:	2001      	movs	r0, #1
 80102d6:	f7fd fb7f 	bl	800d9d8 <memp_malloc>
 80102da:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d107      	bne.n	80102f2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80102e2:	79fb      	ldrb	r3, [r7, #7]
 80102e4:	4618      	mov	r0, r3
 80102e6:	f7ff fee3 	bl	80100b0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80102ea:	2001      	movs	r0, #1
 80102ec:	f7fd fb74 	bl	800d9d8 <memp_malloc>
 80102f0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d03f      	beq.n	8010378 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80102f8:	229c      	movs	r2, #156	; 0x9c
 80102fa:	2100      	movs	r1, #0
 80102fc:	68f8      	ldr	r0, [r7, #12]
 80102fe:	f008 f99f 	bl	8018640 <memset>
    pcb->prio = prio;
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	79fa      	ldrb	r2, [r7, #7]
 8010306:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801030e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8010318:	855a      	strh	r2, [r3, #42]	; 0x2a
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	22ff      	movs	r2, #255	; 0xff
 8010326:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	f44f 7206 	mov.w	r2, #536	; 0x218
 801032e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	2206      	movs	r2, #6
 8010334:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	2206      	movs	r2, #6
 801033c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010344:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	2201      	movs	r2, #1
 801034a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801034e:	4b0d      	ldr	r3, [pc, #52]	; (8010384 <tcp_alloc+0xf8>)
 8010350:	681a      	ldr	r2, [r3, #0]
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8010356:	4b0c      	ldr	r3, [pc, #48]	; (8010388 <tcp_alloc+0xfc>)
 8010358:	781a      	ldrb	r2, [r3, #0]
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010364:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	4a08      	ldr	r2, [pc, #32]	; (801038c <tcp_alloc+0x100>)
 801036c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	4a07      	ldr	r2, [pc, #28]	; (8010390 <tcp_alloc+0x104>)
 8010374:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8010378:	68fb      	ldr	r3, [r7, #12]
}
 801037a:	4618      	mov	r0, r3
 801037c:	3710      	adds	r7, #16
 801037e:	46bd      	mov	sp, r7
 8010380:	bd80      	pop	{r7, pc}
 8010382:	bf00      	nop
 8010384:	2000d24c 	.word	0x2000d24c
 8010388:	2000d262 	.word	0x2000d262
 801038c:	08010045 	.word	0x08010045
 8010390:	006ddd00 	.word	0x006ddd00

08010394 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8010394:	b580      	push	{r7, lr}
 8010396:	b084      	sub	sp, #16
 8010398:	af00      	add	r7, sp, #0
 801039a:	4603      	mov	r3, r0
 801039c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801039e:	2040      	movs	r0, #64	; 0x40
 80103a0:	f7ff ff74 	bl	801028c <tcp_alloc>
 80103a4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80103a6:	68fb      	ldr	r3, [r7, #12]
}
 80103a8:	4618      	mov	r0, r3
 80103aa:	3710      	adds	r7, #16
 80103ac:	46bd      	mov	sp, r7
 80103ae:	bd80      	pop	{r7, pc}

080103b0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80103b0:	b480      	push	{r7}
 80103b2:	b083      	sub	sp, #12
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	6078      	str	r0, [r7, #4]
 80103b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d002      	beq.n	80103c6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	683a      	ldr	r2, [r7, #0]
 80103c4:	611a      	str	r2, [r3, #16]
  }
}
 80103c6:	bf00      	nop
 80103c8:	370c      	adds	r7, #12
 80103ca:	46bd      	mov	sp, r7
 80103cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d0:	4770      	bx	lr
	...

080103d4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80103d4:	b580      	push	{r7, lr}
 80103d6:	b082      	sub	sp, #8
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]
 80103dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d00e      	beq.n	8010402 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	7d1b      	ldrb	r3, [r3, #20]
 80103e8:	2b01      	cmp	r3, #1
 80103ea:	d106      	bne.n	80103fa <tcp_recv+0x26>
 80103ec:	4b07      	ldr	r3, [pc, #28]	; (801040c <tcp_recv+0x38>)
 80103ee:	f240 72df 	movw	r2, #2015	; 0x7df
 80103f2:	4907      	ldr	r1, [pc, #28]	; (8010410 <tcp_recv+0x3c>)
 80103f4:	4807      	ldr	r0, [pc, #28]	; (8010414 <tcp_recv+0x40>)
 80103f6:	f008 f92b 	bl	8018650 <iprintf>
    pcb->recv = recv;
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	683a      	ldr	r2, [r7, #0]
 80103fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8010402:	bf00      	nop
 8010404:	3708      	adds	r7, #8
 8010406:	46bd      	mov	sp, r7
 8010408:	bd80      	pop	{r7, pc}
 801040a:	bf00      	nop
 801040c:	0801b638 	.word	0x0801b638
 8010410:	0801bbd4 	.word	0x0801bbd4
 8010414:	0801b67c 	.word	0x0801b67c

08010418 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b082      	sub	sp, #8
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
 8010420:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	2b00      	cmp	r3, #0
 8010426:	d00e      	beq.n	8010446 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	7d1b      	ldrb	r3, [r3, #20]
 801042c:	2b01      	cmp	r3, #1
 801042e:	d106      	bne.n	801043e <tcp_sent+0x26>
 8010430:	4b07      	ldr	r3, [pc, #28]	; (8010450 <tcp_sent+0x38>)
 8010432:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8010436:	4907      	ldr	r1, [pc, #28]	; (8010454 <tcp_sent+0x3c>)
 8010438:	4807      	ldr	r0, [pc, #28]	; (8010458 <tcp_sent+0x40>)
 801043a:	f008 f909 	bl	8018650 <iprintf>
    pcb->sent = sent;
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	683a      	ldr	r2, [r7, #0]
 8010442:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8010446:	bf00      	nop
 8010448:	3708      	adds	r7, #8
 801044a:	46bd      	mov	sp, r7
 801044c:	bd80      	pop	{r7, pc}
 801044e:	bf00      	nop
 8010450:	0801b638 	.word	0x0801b638
 8010454:	0801bbfc 	.word	0x0801bbfc
 8010458:	0801b67c 	.word	0x0801b67c

0801045c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 801045c:	b580      	push	{r7, lr}
 801045e:	b082      	sub	sp, #8
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
 8010464:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d00e      	beq.n	801048a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	7d1b      	ldrb	r3, [r3, #20]
 8010470:	2b01      	cmp	r3, #1
 8010472:	d106      	bne.n	8010482 <tcp_err+0x26>
 8010474:	4b07      	ldr	r3, [pc, #28]	; (8010494 <tcp_err+0x38>)
 8010476:	f640 020d 	movw	r2, #2061	; 0x80d
 801047a:	4907      	ldr	r1, [pc, #28]	; (8010498 <tcp_err+0x3c>)
 801047c:	4807      	ldr	r0, [pc, #28]	; (801049c <tcp_err+0x40>)
 801047e:	f008 f8e7 	bl	8018650 <iprintf>
    pcb->errf = err;
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	683a      	ldr	r2, [r7, #0]
 8010486:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 801048a:	bf00      	nop
 801048c:	3708      	adds	r7, #8
 801048e:	46bd      	mov	sp, r7
 8010490:	bd80      	pop	{r7, pc}
 8010492:	bf00      	nop
 8010494:	0801b638 	.word	0x0801b638
 8010498:	0801bc24 	.word	0x0801bc24
 801049c:	0801b67c 	.word	0x0801b67c

080104a0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80104a0:	b480      	push	{r7}
 80104a2:	b085      	sub	sp, #20
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	6078      	str	r0, [r7, #4]
 80104a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d008      	beq.n	80104c2 <tcp_accept+0x22>
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	7d1b      	ldrb	r3, [r3, #20]
 80104b4:	2b01      	cmp	r3, #1
 80104b6:	d104      	bne.n	80104c2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	683a      	ldr	r2, [r7, #0]
 80104c0:	619a      	str	r2, [r3, #24]
  }
}
 80104c2:	bf00      	nop
 80104c4:	3714      	adds	r7, #20
 80104c6:	46bd      	mov	sp, r7
 80104c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104cc:	4770      	bx	lr
	...

080104d0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b084      	sub	sp, #16
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	60f8      	str	r0, [r7, #12]
 80104d8:	60b9      	str	r1, [r7, #8]
 80104da:	4613      	mov	r3, r2
 80104dc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d107      	bne.n	80104f4 <tcp_poll+0x24>
 80104e4:	4b0e      	ldr	r3, [pc, #56]	; (8010520 <tcp_poll+0x50>)
 80104e6:	f640 023d 	movw	r2, #2109	; 0x83d
 80104ea:	490e      	ldr	r1, [pc, #56]	; (8010524 <tcp_poll+0x54>)
 80104ec:	480e      	ldr	r0, [pc, #56]	; (8010528 <tcp_poll+0x58>)
 80104ee:	f008 f8af 	bl	8018650 <iprintf>
 80104f2:	e011      	b.n	8010518 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	7d1b      	ldrb	r3, [r3, #20]
 80104f8:	2b01      	cmp	r3, #1
 80104fa:	d106      	bne.n	801050a <tcp_poll+0x3a>
 80104fc:	4b08      	ldr	r3, [pc, #32]	; (8010520 <tcp_poll+0x50>)
 80104fe:	f640 023e 	movw	r2, #2110	; 0x83e
 8010502:	490a      	ldr	r1, [pc, #40]	; (801052c <tcp_poll+0x5c>)
 8010504:	4808      	ldr	r0, [pc, #32]	; (8010528 <tcp_poll+0x58>)
 8010506:	f008 f8a3 	bl	8018650 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	68ba      	ldr	r2, [r7, #8]
 801050e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	79fa      	ldrb	r2, [r7, #7]
 8010516:	775a      	strb	r2, [r3, #29]
}
 8010518:	3710      	adds	r7, #16
 801051a:	46bd      	mov	sp, r7
 801051c:	bd80      	pop	{r7, pc}
 801051e:	bf00      	nop
 8010520:	0801b638 	.word	0x0801b638
 8010524:	0801bc4c 	.word	0x0801bc4c
 8010528:	0801b67c 	.word	0x0801b67c
 801052c:	0801bc64 	.word	0x0801bc64

08010530 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8010530:	b580      	push	{r7, lr}
 8010532:	b082      	sub	sp, #8
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d107      	bne.n	801054e <tcp_pcb_purge+0x1e>
 801053e:	4b21      	ldr	r3, [pc, #132]	; (80105c4 <tcp_pcb_purge+0x94>)
 8010540:	f640 0251 	movw	r2, #2129	; 0x851
 8010544:	4920      	ldr	r1, [pc, #128]	; (80105c8 <tcp_pcb_purge+0x98>)
 8010546:	4821      	ldr	r0, [pc, #132]	; (80105cc <tcp_pcb_purge+0x9c>)
 8010548:	f008 f882 	bl	8018650 <iprintf>
 801054c:	e037      	b.n	80105be <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	7d1b      	ldrb	r3, [r3, #20]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d033      	beq.n	80105be <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801055a:	2b0a      	cmp	r3, #10
 801055c:	d02f      	beq.n	80105be <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8010562:	2b01      	cmp	r3, #1
 8010564:	d02b      	beq.n	80105be <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801056a:	2b00      	cmp	r3, #0
 801056c:	d007      	beq.n	801057e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010572:	4618      	mov	r0, r3
 8010574:	f7fe f958 	bl	800e828 <pbuf_free>
      pcb->refused_data = NULL;
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	2200      	movs	r2, #0
 801057c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010582:	2b00      	cmp	r3, #0
 8010584:	d002      	beq.n	801058c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8010586:	6878      	ldr	r0, [r7, #4]
 8010588:	f000 f986 	bl	8010898 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010592:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010598:	4618      	mov	r0, r3
 801059a:	f7ff fcf9 	bl	800ff90 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105a2:	4618      	mov	r0, r3
 80105a4:	f7ff fcf4 	bl	800ff90 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	2200      	movs	r2, #0
 80105ac:	66da      	str	r2, [r3, #108]	; 0x6c
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	2200      	movs	r2, #0
 80105ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80105be:	3708      	adds	r7, #8
 80105c0:	46bd      	mov	sp, r7
 80105c2:	bd80      	pop	{r7, pc}
 80105c4:	0801b638 	.word	0x0801b638
 80105c8:	0801bc84 	.word	0x0801bc84
 80105cc:	0801b67c 	.word	0x0801b67c

080105d0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b084      	sub	sp, #16
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]
 80105d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80105da:	683b      	ldr	r3, [r7, #0]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d106      	bne.n	80105ee <tcp_pcb_remove+0x1e>
 80105e0:	4b3e      	ldr	r3, [pc, #248]	; (80106dc <tcp_pcb_remove+0x10c>)
 80105e2:	f640 0283 	movw	r2, #2179	; 0x883
 80105e6:	493e      	ldr	r1, [pc, #248]	; (80106e0 <tcp_pcb_remove+0x110>)
 80105e8:	483e      	ldr	r0, [pc, #248]	; (80106e4 <tcp_pcb_remove+0x114>)
 80105ea:	f008 f831 	bl	8018650 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d106      	bne.n	8010602 <tcp_pcb_remove+0x32>
 80105f4:	4b39      	ldr	r3, [pc, #228]	; (80106dc <tcp_pcb_remove+0x10c>)
 80105f6:	f640 0284 	movw	r2, #2180	; 0x884
 80105fa:	493b      	ldr	r1, [pc, #236]	; (80106e8 <tcp_pcb_remove+0x118>)
 80105fc:	4839      	ldr	r0, [pc, #228]	; (80106e4 <tcp_pcb_remove+0x114>)
 80105fe:	f008 f827 	bl	8018650 <iprintf>

  TCP_RMV(pcblist, pcb);
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	683a      	ldr	r2, [r7, #0]
 8010608:	429a      	cmp	r2, r3
 801060a:	d105      	bne.n	8010618 <tcp_pcb_remove+0x48>
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	68da      	ldr	r2, [r3, #12]
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	601a      	str	r2, [r3, #0]
 8010616:	e013      	b.n	8010640 <tcp_pcb_remove+0x70>
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	60fb      	str	r3, [r7, #12]
 801061e:	e00c      	b.n	801063a <tcp_pcb_remove+0x6a>
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	68db      	ldr	r3, [r3, #12]
 8010624:	683a      	ldr	r2, [r7, #0]
 8010626:	429a      	cmp	r2, r3
 8010628:	d104      	bne.n	8010634 <tcp_pcb_remove+0x64>
 801062a:	683b      	ldr	r3, [r7, #0]
 801062c:	68da      	ldr	r2, [r3, #12]
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	60da      	str	r2, [r3, #12]
 8010632:	e005      	b.n	8010640 <tcp_pcb_remove+0x70>
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	68db      	ldr	r3, [r3, #12]
 8010638:	60fb      	str	r3, [r7, #12]
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d1ef      	bne.n	8010620 <tcp_pcb_remove+0x50>
 8010640:	683b      	ldr	r3, [r7, #0]
 8010642:	2200      	movs	r2, #0
 8010644:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8010646:	6838      	ldr	r0, [r7, #0]
 8010648:	f7ff ff72 	bl	8010530 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801064c:	683b      	ldr	r3, [r7, #0]
 801064e:	7d1b      	ldrb	r3, [r3, #20]
 8010650:	2b0a      	cmp	r3, #10
 8010652:	d013      	beq.n	801067c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8010654:	683b      	ldr	r3, [r7, #0]
 8010656:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8010658:	2b01      	cmp	r3, #1
 801065a:	d00f      	beq.n	801067c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801065c:	683b      	ldr	r3, [r7, #0]
 801065e:	8b5b      	ldrh	r3, [r3, #26]
 8010660:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8010664:	2b00      	cmp	r3, #0
 8010666:	d009      	beq.n	801067c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8010668:	683b      	ldr	r3, [r7, #0]
 801066a:	8b5b      	ldrh	r3, [r3, #26]
 801066c:	f043 0302 	orr.w	r3, r3, #2
 8010670:	b29a      	uxth	r2, r3
 8010672:	683b      	ldr	r3, [r7, #0]
 8010674:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010676:	6838      	ldr	r0, [r7, #0]
 8010678:	f003 fbc6 	bl	8013e08 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801067c:	683b      	ldr	r3, [r7, #0]
 801067e:	7d1b      	ldrb	r3, [r3, #20]
 8010680:	2b01      	cmp	r3, #1
 8010682:	d020      	beq.n	80106c6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010684:	683b      	ldr	r3, [r7, #0]
 8010686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010688:	2b00      	cmp	r3, #0
 801068a:	d006      	beq.n	801069a <tcp_pcb_remove+0xca>
 801068c:	4b13      	ldr	r3, [pc, #76]	; (80106dc <tcp_pcb_remove+0x10c>)
 801068e:	f640 0293 	movw	r2, #2195	; 0x893
 8010692:	4916      	ldr	r1, [pc, #88]	; (80106ec <tcp_pcb_remove+0x11c>)
 8010694:	4813      	ldr	r0, [pc, #76]	; (80106e4 <tcp_pcb_remove+0x114>)
 8010696:	f007 ffdb 	bl	8018650 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801069a:	683b      	ldr	r3, [r7, #0]
 801069c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d006      	beq.n	80106b0 <tcp_pcb_remove+0xe0>
 80106a2:	4b0e      	ldr	r3, [pc, #56]	; (80106dc <tcp_pcb_remove+0x10c>)
 80106a4:	f640 0294 	movw	r2, #2196	; 0x894
 80106a8:	4911      	ldr	r1, [pc, #68]	; (80106f0 <tcp_pcb_remove+0x120>)
 80106aa:	480e      	ldr	r0, [pc, #56]	; (80106e4 <tcp_pcb_remove+0x114>)
 80106ac:	f007 ffd0 	bl	8018650 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80106b0:	683b      	ldr	r3, [r7, #0]
 80106b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d006      	beq.n	80106c6 <tcp_pcb_remove+0xf6>
 80106b8:	4b08      	ldr	r3, [pc, #32]	; (80106dc <tcp_pcb_remove+0x10c>)
 80106ba:	f640 0296 	movw	r2, #2198	; 0x896
 80106be:	490d      	ldr	r1, [pc, #52]	; (80106f4 <tcp_pcb_remove+0x124>)
 80106c0:	4808      	ldr	r0, [pc, #32]	; (80106e4 <tcp_pcb_remove+0x114>)
 80106c2:	f007 ffc5 	bl	8018650 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80106c6:	683b      	ldr	r3, [r7, #0]
 80106c8:	2200      	movs	r2, #0
 80106ca:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80106cc:	683b      	ldr	r3, [r7, #0]
 80106ce:	2200      	movs	r2, #0
 80106d0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80106d2:	bf00      	nop
 80106d4:	3710      	adds	r7, #16
 80106d6:	46bd      	mov	sp, r7
 80106d8:	bd80      	pop	{r7, pc}
 80106da:	bf00      	nop
 80106dc:	0801b638 	.word	0x0801b638
 80106e0:	0801bca0 	.word	0x0801bca0
 80106e4:	0801b67c 	.word	0x0801b67c
 80106e8:	0801bcbc 	.word	0x0801bcbc
 80106ec:	0801bcdc 	.word	0x0801bcdc
 80106f0:	0801bcf4 	.word	0x0801bcf4
 80106f4:	0801bd10 	.word	0x0801bd10

080106f8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80106f8:	b580      	push	{r7, lr}
 80106fa:	b082      	sub	sp, #8
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d106      	bne.n	8010714 <tcp_next_iss+0x1c>
 8010706:	4b0a      	ldr	r3, [pc, #40]	; (8010730 <tcp_next_iss+0x38>)
 8010708:	f640 02af 	movw	r2, #2223	; 0x8af
 801070c:	4909      	ldr	r1, [pc, #36]	; (8010734 <tcp_next_iss+0x3c>)
 801070e:	480a      	ldr	r0, [pc, #40]	; (8010738 <tcp_next_iss+0x40>)
 8010710:	f007 ff9e 	bl	8018650 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8010714:	4b09      	ldr	r3, [pc, #36]	; (801073c <tcp_next_iss+0x44>)
 8010716:	681a      	ldr	r2, [r3, #0]
 8010718:	4b09      	ldr	r3, [pc, #36]	; (8010740 <tcp_next_iss+0x48>)
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	4413      	add	r3, r2
 801071e:	4a07      	ldr	r2, [pc, #28]	; (801073c <tcp_next_iss+0x44>)
 8010720:	6013      	str	r3, [r2, #0]
  return iss;
 8010722:	4b06      	ldr	r3, [pc, #24]	; (801073c <tcp_next_iss+0x44>)
 8010724:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8010726:	4618      	mov	r0, r3
 8010728:	3708      	adds	r7, #8
 801072a:	46bd      	mov	sp, r7
 801072c:	bd80      	pop	{r7, pc}
 801072e:	bf00      	nop
 8010730:	0801b638 	.word	0x0801b638
 8010734:	0801bd28 	.word	0x0801bd28
 8010738:	0801b67c 	.word	0x0801b67c
 801073c:	20000014 	.word	0x20000014
 8010740:	2000d24c 	.word	0x2000d24c

08010744 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8010744:	b580      	push	{r7, lr}
 8010746:	b086      	sub	sp, #24
 8010748:	af00      	add	r7, sp, #0
 801074a:	4603      	mov	r3, r0
 801074c:	60b9      	str	r1, [r7, #8]
 801074e:	607a      	str	r2, [r7, #4]
 8010750:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d106      	bne.n	8010766 <tcp_eff_send_mss_netif+0x22>
 8010758:	4b14      	ldr	r3, [pc, #80]	; (80107ac <tcp_eff_send_mss_netif+0x68>)
 801075a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801075e:	4914      	ldr	r1, [pc, #80]	; (80107b0 <tcp_eff_send_mss_netif+0x6c>)
 8010760:	4814      	ldr	r0, [pc, #80]	; (80107b4 <tcp_eff_send_mss_netif+0x70>)
 8010762:	f007 ff75 	bl	8018650 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8010766:	68bb      	ldr	r3, [r7, #8]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d101      	bne.n	8010770 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801076c:	89fb      	ldrh	r3, [r7, #14]
 801076e:	e019      	b.n	80107a4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8010770:	68bb      	ldr	r3, [r7, #8]
 8010772:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010774:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8010776:	8afb      	ldrh	r3, [r7, #22]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d012      	beq.n	80107a2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801077c:	2328      	movs	r3, #40	; 0x28
 801077e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8010780:	8afa      	ldrh	r2, [r7, #22]
 8010782:	8abb      	ldrh	r3, [r7, #20]
 8010784:	429a      	cmp	r2, r3
 8010786:	d904      	bls.n	8010792 <tcp_eff_send_mss_netif+0x4e>
 8010788:	8afa      	ldrh	r2, [r7, #22]
 801078a:	8abb      	ldrh	r3, [r7, #20]
 801078c:	1ad3      	subs	r3, r2, r3
 801078e:	b29b      	uxth	r3, r3
 8010790:	e000      	b.n	8010794 <tcp_eff_send_mss_netif+0x50>
 8010792:	2300      	movs	r3, #0
 8010794:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8010796:	8a7a      	ldrh	r2, [r7, #18]
 8010798:	89fb      	ldrh	r3, [r7, #14]
 801079a:	4293      	cmp	r3, r2
 801079c:	bf28      	it	cs
 801079e:	4613      	movcs	r3, r2
 80107a0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80107a2:	89fb      	ldrh	r3, [r7, #14]
}
 80107a4:	4618      	mov	r0, r3
 80107a6:	3718      	adds	r7, #24
 80107a8:	46bd      	mov	sp, r7
 80107aa:	bd80      	pop	{r7, pc}
 80107ac:	0801b638 	.word	0x0801b638
 80107b0:	0801bd44 	.word	0x0801bd44
 80107b4:	0801b67c 	.word	0x0801b67c

080107b8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80107b8:	b580      	push	{r7, lr}
 80107ba:	b084      	sub	sp, #16
 80107bc:	af00      	add	r7, sp, #0
 80107be:	6078      	str	r0, [r7, #4]
 80107c0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80107c2:	683b      	ldr	r3, [r7, #0]
 80107c4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d119      	bne.n	8010800 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80107cc:	4b10      	ldr	r3, [pc, #64]	; (8010810 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80107ce:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80107d2:	4910      	ldr	r1, [pc, #64]	; (8010814 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80107d4:	4810      	ldr	r0, [pc, #64]	; (8010818 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80107d6:	f007 ff3b 	bl	8018650 <iprintf>

  while (pcb != NULL) {
 80107da:	e011      	b.n	8010800 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	681a      	ldr	r2, [r3, #0]
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	429a      	cmp	r2, r3
 80107e6:	d108      	bne.n	80107fa <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	68db      	ldr	r3, [r3, #12]
 80107ec:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80107ee:	68f8      	ldr	r0, [r7, #12]
 80107f0:	f7fe fe1a 	bl	800f428 <tcp_abort>
      pcb = next;
 80107f4:	68bb      	ldr	r3, [r7, #8]
 80107f6:	60fb      	str	r3, [r7, #12]
 80107f8:	e002      	b.n	8010800 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	68db      	ldr	r3, [r3, #12]
 80107fe:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d1ea      	bne.n	80107dc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8010806:	bf00      	nop
 8010808:	bf00      	nop
 801080a:	3710      	adds	r7, #16
 801080c:	46bd      	mov	sp, r7
 801080e:	bd80      	pop	{r7, pc}
 8010810:	0801b638 	.word	0x0801b638
 8010814:	0801bd6c 	.word	0x0801bd6c
 8010818:	0801b67c 	.word	0x0801b67c

0801081c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801081c:	b580      	push	{r7, lr}
 801081e:	b084      	sub	sp, #16
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
 8010824:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d02a      	beq.n	8010882 <tcp_netif_ip_addr_changed+0x66>
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	2b00      	cmp	r3, #0
 8010832:	d026      	beq.n	8010882 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010834:	4b15      	ldr	r3, [pc, #84]	; (801088c <tcp_netif_ip_addr_changed+0x70>)
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	4619      	mov	r1, r3
 801083a:	6878      	ldr	r0, [r7, #4]
 801083c:	f7ff ffbc 	bl	80107b8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010840:	4b13      	ldr	r3, [pc, #76]	; (8010890 <tcp_netif_ip_addr_changed+0x74>)
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	4619      	mov	r1, r3
 8010846:	6878      	ldr	r0, [r7, #4]
 8010848:	f7ff ffb6 	bl	80107b8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801084c:	683b      	ldr	r3, [r7, #0]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d017      	beq.n	8010882 <tcp_netif_ip_addr_changed+0x66>
 8010852:	683b      	ldr	r3, [r7, #0]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d013      	beq.n	8010882 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801085a:	4b0e      	ldr	r3, [pc, #56]	; (8010894 <tcp_netif_ip_addr_changed+0x78>)
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	60fb      	str	r3, [r7, #12]
 8010860:	e00c      	b.n	801087c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	681a      	ldr	r2, [r3, #0]
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	429a      	cmp	r2, r3
 801086c:	d103      	bne.n	8010876 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801086e:	683b      	ldr	r3, [r7, #0]
 8010870:	681a      	ldr	r2, [r3, #0]
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	68db      	ldr	r3, [r3, #12]
 801087a:	60fb      	str	r3, [r7, #12]
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d1ef      	bne.n	8010862 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8010882:	bf00      	nop
 8010884:	3710      	adds	r7, #16
 8010886:	46bd      	mov	sp, r7
 8010888:	bd80      	pop	{r7, pc}
 801088a:	bf00      	nop
 801088c:	2000d258 	.word	0x2000d258
 8010890:	2000d250 	.word	0x2000d250
 8010894:	2000d254 	.word	0x2000d254

08010898 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8010898:	b580      	push	{r7, lr}
 801089a:	b082      	sub	sp, #8
 801089c:	af00      	add	r7, sp, #0
 801089e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d007      	beq.n	80108b8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108ac:	4618      	mov	r0, r3
 80108ae:	f7ff fb6f 	bl	800ff90 <tcp_segs_free>
    pcb->ooseq = NULL;
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	2200      	movs	r2, #0
 80108b6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80108b8:	bf00      	nop
 80108ba:	3708      	adds	r7, #8
 80108bc:	46bd      	mov	sp, r7
 80108be:	bd80      	pop	{r7, pc}

080108c0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80108c0:	b590      	push	{r4, r7, lr}
 80108c2:	b08d      	sub	sp, #52	; 0x34
 80108c4:	af04      	add	r7, sp, #16
 80108c6:	6078      	str	r0, [r7, #4]
 80108c8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d105      	bne.n	80108dc <tcp_input+0x1c>
 80108d0:	4b9b      	ldr	r3, [pc, #620]	; (8010b40 <tcp_input+0x280>)
 80108d2:	2283      	movs	r2, #131	; 0x83
 80108d4:	499b      	ldr	r1, [pc, #620]	; (8010b44 <tcp_input+0x284>)
 80108d6:	489c      	ldr	r0, [pc, #624]	; (8010b48 <tcp_input+0x288>)
 80108d8:	f007 feba 	bl	8018650 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	685b      	ldr	r3, [r3, #4]
 80108e0:	4a9a      	ldr	r2, [pc, #616]	; (8010b4c <tcp_input+0x28c>)
 80108e2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	895b      	ldrh	r3, [r3, #10]
 80108e8:	2b13      	cmp	r3, #19
 80108ea:	f240 83d1 	bls.w	8011090 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80108ee:	4b98      	ldr	r3, [pc, #608]	; (8010b50 <tcp_input+0x290>)
 80108f0:	695b      	ldr	r3, [r3, #20]
 80108f2:	4a97      	ldr	r2, [pc, #604]	; (8010b50 <tcp_input+0x290>)
 80108f4:	6812      	ldr	r2, [r2, #0]
 80108f6:	4611      	mov	r1, r2
 80108f8:	4618      	mov	r0, r3
 80108fa:	f006 fbcf 	bl	801709c <ip4_addr_isbroadcast_u32>
 80108fe:	4603      	mov	r3, r0
 8010900:	2b00      	cmp	r3, #0
 8010902:	f040 83c7 	bne.w	8011094 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8010906:	4b92      	ldr	r3, [pc, #584]	; (8010b50 <tcp_input+0x290>)
 8010908:	695b      	ldr	r3, [r3, #20]
 801090a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801090e:	2be0      	cmp	r3, #224	; 0xe0
 8010910:	f000 83c0 	beq.w	8011094 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010914:	4b8d      	ldr	r3, [pc, #564]	; (8010b4c <tcp_input+0x28c>)
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	899b      	ldrh	r3, [r3, #12]
 801091a:	b29b      	uxth	r3, r3
 801091c:	4618      	mov	r0, r3
 801091e:	f7fc fba5 	bl	800d06c <lwip_htons>
 8010922:	4603      	mov	r3, r0
 8010924:	0b1b      	lsrs	r3, r3, #12
 8010926:	b29b      	uxth	r3, r3
 8010928:	b2db      	uxtb	r3, r3
 801092a:	009b      	lsls	r3, r3, #2
 801092c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801092e:	7cbb      	ldrb	r3, [r7, #18]
 8010930:	2b13      	cmp	r3, #19
 8010932:	f240 83b1 	bls.w	8011098 <tcp_input+0x7d8>
 8010936:	7cbb      	ldrb	r3, [r7, #18]
 8010938:	b29a      	uxth	r2, r3
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	891b      	ldrh	r3, [r3, #8]
 801093e:	429a      	cmp	r2, r3
 8010940:	f200 83aa 	bhi.w	8011098 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010944:	7cbb      	ldrb	r3, [r7, #18]
 8010946:	b29b      	uxth	r3, r3
 8010948:	3b14      	subs	r3, #20
 801094a:	b29a      	uxth	r2, r3
 801094c:	4b81      	ldr	r3, [pc, #516]	; (8010b54 <tcp_input+0x294>)
 801094e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010950:	4b81      	ldr	r3, [pc, #516]	; (8010b58 <tcp_input+0x298>)
 8010952:	2200      	movs	r2, #0
 8010954:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	895a      	ldrh	r2, [r3, #10]
 801095a:	7cbb      	ldrb	r3, [r7, #18]
 801095c:	b29b      	uxth	r3, r3
 801095e:	429a      	cmp	r2, r3
 8010960:	d309      	bcc.n	8010976 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8010962:	4b7c      	ldr	r3, [pc, #496]	; (8010b54 <tcp_input+0x294>)
 8010964:	881a      	ldrh	r2, [r3, #0]
 8010966:	4b7d      	ldr	r3, [pc, #500]	; (8010b5c <tcp_input+0x29c>)
 8010968:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801096a:	7cbb      	ldrb	r3, [r7, #18]
 801096c:	4619      	mov	r1, r3
 801096e:	6878      	ldr	r0, [r7, #4]
 8010970:	f7fd fea2 	bl	800e6b8 <pbuf_remove_header>
 8010974:	e04e      	b.n	8010a14 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d105      	bne.n	801098a <tcp_input+0xca>
 801097e:	4b70      	ldr	r3, [pc, #448]	; (8010b40 <tcp_input+0x280>)
 8010980:	22c2      	movs	r2, #194	; 0xc2
 8010982:	4977      	ldr	r1, [pc, #476]	; (8010b60 <tcp_input+0x2a0>)
 8010984:	4870      	ldr	r0, [pc, #448]	; (8010b48 <tcp_input+0x288>)
 8010986:	f007 fe63 	bl	8018650 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801098a:	2114      	movs	r1, #20
 801098c:	6878      	ldr	r0, [r7, #4]
 801098e:	f7fd fe93 	bl	800e6b8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	895a      	ldrh	r2, [r3, #10]
 8010996:	4b71      	ldr	r3, [pc, #452]	; (8010b5c <tcp_input+0x29c>)
 8010998:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801099a:	4b6e      	ldr	r3, [pc, #440]	; (8010b54 <tcp_input+0x294>)
 801099c:	881a      	ldrh	r2, [r3, #0]
 801099e:	4b6f      	ldr	r3, [pc, #444]	; (8010b5c <tcp_input+0x29c>)
 80109a0:	881b      	ldrh	r3, [r3, #0]
 80109a2:	1ad3      	subs	r3, r2, r3
 80109a4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80109a6:	4b6d      	ldr	r3, [pc, #436]	; (8010b5c <tcp_input+0x29c>)
 80109a8:	881b      	ldrh	r3, [r3, #0]
 80109aa:	4619      	mov	r1, r3
 80109ac:	6878      	ldr	r0, [r7, #4]
 80109ae:	f7fd fe83 	bl	800e6b8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	895b      	ldrh	r3, [r3, #10]
 80109b8:	8a3a      	ldrh	r2, [r7, #16]
 80109ba:	429a      	cmp	r2, r3
 80109bc:	f200 836e 	bhi.w	801109c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	685b      	ldr	r3, [r3, #4]
 80109c6:	4a64      	ldr	r2, [pc, #400]	; (8010b58 <tcp_input+0x298>)
 80109c8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	8a3a      	ldrh	r2, [r7, #16]
 80109d0:	4611      	mov	r1, r2
 80109d2:	4618      	mov	r0, r3
 80109d4:	f7fd fe70 	bl	800e6b8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	891a      	ldrh	r2, [r3, #8]
 80109dc:	8a3b      	ldrh	r3, [r7, #16]
 80109de:	1ad3      	subs	r3, r2, r3
 80109e0:	b29a      	uxth	r2, r3
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	895b      	ldrh	r3, [r3, #10]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d005      	beq.n	80109fa <tcp_input+0x13a>
 80109ee:	4b54      	ldr	r3, [pc, #336]	; (8010b40 <tcp_input+0x280>)
 80109f0:	22df      	movs	r2, #223	; 0xdf
 80109f2:	495c      	ldr	r1, [pc, #368]	; (8010b64 <tcp_input+0x2a4>)
 80109f4:	4854      	ldr	r0, [pc, #336]	; (8010b48 <tcp_input+0x288>)
 80109f6:	f007 fe2b 	bl	8018650 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	891a      	ldrh	r2, [r3, #8]
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	891b      	ldrh	r3, [r3, #8]
 8010a04:	429a      	cmp	r2, r3
 8010a06:	d005      	beq.n	8010a14 <tcp_input+0x154>
 8010a08:	4b4d      	ldr	r3, [pc, #308]	; (8010b40 <tcp_input+0x280>)
 8010a0a:	22e0      	movs	r2, #224	; 0xe0
 8010a0c:	4956      	ldr	r1, [pc, #344]	; (8010b68 <tcp_input+0x2a8>)
 8010a0e:	484e      	ldr	r0, [pc, #312]	; (8010b48 <tcp_input+0x288>)
 8010a10:	f007 fe1e 	bl	8018650 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010a14:	4b4d      	ldr	r3, [pc, #308]	; (8010b4c <tcp_input+0x28c>)
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	881b      	ldrh	r3, [r3, #0]
 8010a1a:	b29b      	uxth	r3, r3
 8010a1c:	4a4b      	ldr	r2, [pc, #300]	; (8010b4c <tcp_input+0x28c>)
 8010a1e:	6814      	ldr	r4, [r2, #0]
 8010a20:	4618      	mov	r0, r3
 8010a22:	f7fc fb23 	bl	800d06c <lwip_htons>
 8010a26:	4603      	mov	r3, r0
 8010a28:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010a2a:	4b48      	ldr	r3, [pc, #288]	; (8010b4c <tcp_input+0x28c>)
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	885b      	ldrh	r3, [r3, #2]
 8010a30:	b29b      	uxth	r3, r3
 8010a32:	4a46      	ldr	r2, [pc, #280]	; (8010b4c <tcp_input+0x28c>)
 8010a34:	6814      	ldr	r4, [r2, #0]
 8010a36:	4618      	mov	r0, r3
 8010a38:	f7fc fb18 	bl	800d06c <lwip_htons>
 8010a3c:	4603      	mov	r3, r0
 8010a3e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010a40:	4b42      	ldr	r3, [pc, #264]	; (8010b4c <tcp_input+0x28c>)
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	685b      	ldr	r3, [r3, #4]
 8010a46:	4a41      	ldr	r2, [pc, #260]	; (8010b4c <tcp_input+0x28c>)
 8010a48:	6814      	ldr	r4, [r2, #0]
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f7fc fb23 	bl	800d096 <lwip_htonl>
 8010a50:	4603      	mov	r3, r0
 8010a52:	6063      	str	r3, [r4, #4]
 8010a54:	6863      	ldr	r3, [r4, #4]
 8010a56:	4a45      	ldr	r2, [pc, #276]	; (8010b6c <tcp_input+0x2ac>)
 8010a58:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010a5a:	4b3c      	ldr	r3, [pc, #240]	; (8010b4c <tcp_input+0x28c>)
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	689b      	ldr	r3, [r3, #8]
 8010a60:	4a3a      	ldr	r2, [pc, #232]	; (8010b4c <tcp_input+0x28c>)
 8010a62:	6814      	ldr	r4, [r2, #0]
 8010a64:	4618      	mov	r0, r3
 8010a66:	f7fc fb16 	bl	800d096 <lwip_htonl>
 8010a6a:	4603      	mov	r3, r0
 8010a6c:	60a3      	str	r3, [r4, #8]
 8010a6e:	68a3      	ldr	r3, [r4, #8]
 8010a70:	4a3f      	ldr	r2, [pc, #252]	; (8010b70 <tcp_input+0x2b0>)
 8010a72:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010a74:	4b35      	ldr	r3, [pc, #212]	; (8010b4c <tcp_input+0x28c>)
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	89db      	ldrh	r3, [r3, #14]
 8010a7a:	b29b      	uxth	r3, r3
 8010a7c:	4a33      	ldr	r2, [pc, #204]	; (8010b4c <tcp_input+0x28c>)
 8010a7e:	6814      	ldr	r4, [r2, #0]
 8010a80:	4618      	mov	r0, r3
 8010a82:	f7fc faf3 	bl	800d06c <lwip_htons>
 8010a86:	4603      	mov	r3, r0
 8010a88:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010a8a:	4b30      	ldr	r3, [pc, #192]	; (8010b4c <tcp_input+0x28c>)
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	899b      	ldrh	r3, [r3, #12]
 8010a90:	b29b      	uxth	r3, r3
 8010a92:	4618      	mov	r0, r3
 8010a94:	f7fc faea 	bl	800d06c <lwip_htons>
 8010a98:	4603      	mov	r3, r0
 8010a9a:	b2db      	uxtb	r3, r3
 8010a9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010aa0:	b2da      	uxtb	r2, r3
 8010aa2:	4b34      	ldr	r3, [pc, #208]	; (8010b74 <tcp_input+0x2b4>)
 8010aa4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	891a      	ldrh	r2, [r3, #8]
 8010aaa:	4b33      	ldr	r3, [pc, #204]	; (8010b78 <tcp_input+0x2b8>)
 8010aac:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8010aae:	4b31      	ldr	r3, [pc, #196]	; (8010b74 <tcp_input+0x2b4>)
 8010ab0:	781b      	ldrb	r3, [r3, #0]
 8010ab2:	f003 0303 	and.w	r3, r3, #3
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d00c      	beq.n	8010ad4 <tcp_input+0x214>
    tcplen++;
 8010aba:	4b2f      	ldr	r3, [pc, #188]	; (8010b78 <tcp_input+0x2b8>)
 8010abc:	881b      	ldrh	r3, [r3, #0]
 8010abe:	3301      	adds	r3, #1
 8010ac0:	b29a      	uxth	r2, r3
 8010ac2:	4b2d      	ldr	r3, [pc, #180]	; (8010b78 <tcp_input+0x2b8>)
 8010ac4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	891a      	ldrh	r2, [r3, #8]
 8010aca:	4b2b      	ldr	r3, [pc, #172]	; (8010b78 <tcp_input+0x2b8>)
 8010acc:	881b      	ldrh	r3, [r3, #0]
 8010ace:	429a      	cmp	r2, r3
 8010ad0:	f200 82e6 	bhi.w	80110a0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010ad8:	4b28      	ldr	r3, [pc, #160]	; (8010b7c <tcp_input+0x2bc>)
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	61fb      	str	r3, [r7, #28]
 8010ade:	e09d      	b.n	8010c1c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010ae0:	69fb      	ldr	r3, [r7, #28]
 8010ae2:	7d1b      	ldrb	r3, [r3, #20]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d105      	bne.n	8010af4 <tcp_input+0x234>
 8010ae8:	4b15      	ldr	r3, [pc, #84]	; (8010b40 <tcp_input+0x280>)
 8010aea:	22fb      	movs	r2, #251	; 0xfb
 8010aec:	4924      	ldr	r1, [pc, #144]	; (8010b80 <tcp_input+0x2c0>)
 8010aee:	4816      	ldr	r0, [pc, #88]	; (8010b48 <tcp_input+0x288>)
 8010af0:	f007 fdae 	bl	8018650 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010af4:	69fb      	ldr	r3, [r7, #28]
 8010af6:	7d1b      	ldrb	r3, [r3, #20]
 8010af8:	2b0a      	cmp	r3, #10
 8010afa:	d105      	bne.n	8010b08 <tcp_input+0x248>
 8010afc:	4b10      	ldr	r3, [pc, #64]	; (8010b40 <tcp_input+0x280>)
 8010afe:	22fc      	movs	r2, #252	; 0xfc
 8010b00:	4920      	ldr	r1, [pc, #128]	; (8010b84 <tcp_input+0x2c4>)
 8010b02:	4811      	ldr	r0, [pc, #68]	; (8010b48 <tcp_input+0x288>)
 8010b04:	f007 fda4 	bl	8018650 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010b08:	69fb      	ldr	r3, [r7, #28]
 8010b0a:	7d1b      	ldrb	r3, [r3, #20]
 8010b0c:	2b01      	cmp	r3, #1
 8010b0e:	d105      	bne.n	8010b1c <tcp_input+0x25c>
 8010b10:	4b0b      	ldr	r3, [pc, #44]	; (8010b40 <tcp_input+0x280>)
 8010b12:	22fd      	movs	r2, #253	; 0xfd
 8010b14:	491c      	ldr	r1, [pc, #112]	; (8010b88 <tcp_input+0x2c8>)
 8010b16:	480c      	ldr	r0, [pc, #48]	; (8010b48 <tcp_input+0x288>)
 8010b18:	f007 fd9a 	bl	8018650 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010b1c:	69fb      	ldr	r3, [r7, #28]
 8010b1e:	7a1b      	ldrb	r3, [r3, #8]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d033      	beq.n	8010b8c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010b24:	69fb      	ldr	r3, [r7, #28]
 8010b26:	7a1a      	ldrb	r2, [r3, #8]
 8010b28:	4b09      	ldr	r3, [pc, #36]	; (8010b50 <tcp_input+0x290>)
 8010b2a:	685b      	ldr	r3, [r3, #4]
 8010b2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010b30:	3301      	adds	r3, #1
 8010b32:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010b34:	429a      	cmp	r2, r3
 8010b36:	d029      	beq.n	8010b8c <tcp_input+0x2cc>
      prev = pcb;
 8010b38:	69fb      	ldr	r3, [r7, #28]
 8010b3a:	61bb      	str	r3, [r7, #24]
      continue;
 8010b3c:	e06b      	b.n	8010c16 <tcp_input+0x356>
 8010b3e:	bf00      	nop
 8010b40:	0801bda0 	.word	0x0801bda0
 8010b44:	0801bdd4 	.word	0x0801bdd4
 8010b48:	0801bdec 	.word	0x0801bdec
 8010b4c:	2000d274 	.word	0x2000d274
 8010b50:	20007938 	.word	0x20007938
 8010b54:	2000d278 	.word	0x2000d278
 8010b58:	2000d27c 	.word	0x2000d27c
 8010b5c:	2000d27a 	.word	0x2000d27a
 8010b60:	0801be14 	.word	0x0801be14
 8010b64:	0801be24 	.word	0x0801be24
 8010b68:	0801be30 	.word	0x0801be30
 8010b6c:	2000d284 	.word	0x2000d284
 8010b70:	2000d288 	.word	0x2000d288
 8010b74:	2000d290 	.word	0x2000d290
 8010b78:	2000d28e 	.word	0x2000d28e
 8010b7c:	2000d258 	.word	0x2000d258
 8010b80:	0801be50 	.word	0x0801be50
 8010b84:	0801be78 	.word	0x0801be78
 8010b88:	0801bea4 	.word	0x0801bea4
    }

    if (pcb->remote_port == tcphdr->src &&
 8010b8c:	69fb      	ldr	r3, [r7, #28]
 8010b8e:	8b1a      	ldrh	r2, [r3, #24]
 8010b90:	4b72      	ldr	r3, [pc, #456]	; (8010d5c <tcp_input+0x49c>)
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	881b      	ldrh	r3, [r3, #0]
 8010b96:	b29b      	uxth	r3, r3
 8010b98:	429a      	cmp	r2, r3
 8010b9a:	d13a      	bne.n	8010c12 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010b9c:	69fb      	ldr	r3, [r7, #28]
 8010b9e:	8ada      	ldrh	r2, [r3, #22]
 8010ba0:	4b6e      	ldr	r3, [pc, #440]	; (8010d5c <tcp_input+0x49c>)
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	885b      	ldrh	r3, [r3, #2]
 8010ba6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010ba8:	429a      	cmp	r2, r3
 8010baa:	d132      	bne.n	8010c12 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010bac:	69fb      	ldr	r3, [r7, #28]
 8010bae:	685a      	ldr	r2, [r3, #4]
 8010bb0:	4b6b      	ldr	r3, [pc, #428]	; (8010d60 <tcp_input+0x4a0>)
 8010bb2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010bb4:	429a      	cmp	r2, r3
 8010bb6:	d12c      	bne.n	8010c12 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010bb8:	69fb      	ldr	r3, [r7, #28]
 8010bba:	681a      	ldr	r2, [r3, #0]
 8010bbc:	4b68      	ldr	r3, [pc, #416]	; (8010d60 <tcp_input+0x4a0>)
 8010bbe:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010bc0:	429a      	cmp	r2, r3
 8010bc2:	d126      	bne.n	8010c12 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010bc4:	69fb      	ldr	r3, [r7, #28]
 8010bc6:	68db      	ldr	r3, [r3, #12]
 8010bc8:	69fa      	ldr	r2, [r7, #28]
 8010bca:	429a      	cmp	r2, r3
 8010bcc:	d106      	bne.n	8010bdc <tcp_input+0x31c>
 8010bce:	4b65      	ldr	r3, [pc, #404]	; (8010d64 <tcp_input+0x4a4>)
 8010bd0:	f240 120d 	movw	r2, #269	; 0x10d
 8010bd4:	4964      	ldr	r1, [pc, #400]	; (8010d68 <tcp_input+0x4a8>)
 8010bd6:	4865      	ldr	r0, [pc, #404]	; (8010d6c <tcp_input+0x4ac>)
 8010bd8:	f007 fd3a 	bl	8018650 <iprintf>
      if (prev != NULL) {
 8010bdc:	69bb      	ldr	r3, [r7, #24]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d00a      	beq.n	8010bf8 <tcp_input+0x338>
        prev->next = pcb->next;
 8010be2:	69fb      	ldr	r3, [r7, #28]
 8010be4:	68da      	ldr	r2, [r3, #12]
 8010be6:	69bb      	ldr	r3, [r7, #24]
 8010be8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010bea:	4b61      	ldr	r3, [pc, #388]	; (8010d70 <tcp_input+0x4b0>)
 8010bec:	681a      	ldr	r2, [r3, #0]
 8010bee:	69fb      	ldr	r3, [r7, #28]
 8010bf0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010bf2:	4a5f      	ldr	r2, [pc, #380]	; (8010d70 <tcp_input+0x4b0>)
 8010bf4:	69fb      	ldr	r3, [r7, #28]
 8010bf6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010bf8:	69fb      	ldr	r3, [r7, #28]
 8010bfa:	68db      	ldr	r3, [r3, #12]
 8010bfc:	69fa      	ldr	r2, [r7, #28]
 8010bfe:	429a      	cmp	r2, r3
 8010c00:	d111      	bne.n	8010c26 <tcp_input+0x366>
 8010c02:	4b58      	ldr	r3, [pc, #352]	; (8010d64 <tcp_input+0x4a4>)
 8010c04:	f240 1215 	movw	r2, #277	; 0x115
 8010c08:	495a      	ldr	r1, [pc, #360]	; (8010d74 <tcp_input+0x4b4>)
 8010c0a:	4858      	ldr	r0, [pc, #352]	; (8010d6c <tcp_input+0x4ac>)
 8010c0c:	f007 fd20 	bl	8018650 <iprintf>
      break;
 8010c10:	e009      	b.n	8010c26 <tcp_input+0x366>
    }
    prev = pcb;
 8010c12:	69fb      	ldr	r3, [r7, #28]
 8010c14:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010c16:	69fb      	ldr	r3, [r7, #28]
 8010c18:	68db      	ldr	r3, [r3, #12]
 8010c1a:	61fb      	str	r3, [r7, #28]
 8010c1c:	69fb      	ldr	r3, [r7, #28]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	f47f af5e 	bne.w	8010ae0 <tcp_input+0x220>
 8010c24:	e000      	b.n	8010c28 <tcp_input+0x368>
      break;
 8010c26:	bf00      	nop
  }

  if (pcb == NULL) {
 8010c28:	69fb      	ldr	r3, [r7, #28]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	f040 80aa 	bne.w	8010d84 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010c30:	4b51      	ldr	r3, [pc, #324]	; (8010d78 <tcp_input+0x4b8>)
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	61fb      	str	r3, [r7, #28]
 8010c36:	e03f      	b.n	8010cb8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010c38:	69fb      	ldr	r3, [r7, #28]
 8010c3a:	7d1b      	ldrb	r3, [r3, #20]
 8010c3c:	2b0a      	cmp	r3, #10
 8010c3e:	d006      	beq.n	8010c4e <tcp_input+0x38e>
 8010c40:	4b48      	ldr	r3, [pc, #288]	; (8010d64 <tcp_input+0x4a4>)
 8010c42:	f240 121f 	movw	r2, #287	; 0x11f
 8010c46:	494d      	ldr	r1, [pc, #308]	; (8010d7c <tcp_input+0x4bc>)
 8010c48:	4848      	ldr	r0, [pc, #288]	; (8010d6c <tcp_input+0x4ac>)
 8010c4a:	f007 fd01 	bl	8018650 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010c4e:	69fb      	ldr	r3, [r7, #28]
 8010c50:	7a1b      	ldrb	r3, [r3, #8]
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d009      	beq.n	8010c6a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010c56:	69fb      	ldr	r3, [r7, #28]
 8010c58:	7a1a      	ldrb	r2, [r3, #8]
 8010c5a:	4b41      	ldr	r3, [pc, #260]	; (8010d60 <tcp_input+0x4a0>)
 8010c5c:	685b      	ldr	r3, [r3, #4]
 8010c5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010c62:	3301      	adds	r3, #1
 8010c64:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010c66:	429a      	cmp	r2, r3
 8010c68:	d122      	bne.n	8010cb0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8010c6a:	69fb      	ldr	r3, [r7, #28]
 8010c6c:	8b1a      	ldrh	r2, [r3, #24]
 8010c6e:	4b3b      	ldr	r3, [pc, #236]	; (8010d5c <tcp_input+0x49c>)
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	881b      	ldrh	r3, [r3, #0]
 8010c74:	b29b      	uxth	r3, r3
 8010c76:	429a      	cmp	r2, r3
 8010c78:	d11b      	bne.n	8010cb2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8010c7a:	69fb      	ldr	r3, [r7, #28]
 8010c7c:	8ada      	ldrh	r2, [r3, #22]
 8010c7e:	4b37      	ldr	r3, [pc, #220]	; (8010d5c <tcp_input+0x49c>)
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	885b      	ldrh	r3, [r3, #2]
 8010c84:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010c86:	429a      	cmp	r2, r3
 8010c88:	d113      	bne.n	8010cb2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010c8a:	69fb      	ldr	r3, [r7, #28]
 8010c8c:	685a      	ldr	r2, [r3, #4]
 8010c8e:	4b34      	ldr	r3, [pc, #208]	; (8010d60 <tcp_input+0x4a0>)
 8010c90:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8010c92:	429a      	cmp	r2, r3
 8010c94:	d10d      	bne.n	8010cb2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010c96:	69fb      	ldr	r3, [r7, #28]
 8010c98:	681a      	ldr	r2, [r3, #0]
 8010c9a:	4b31      	ldr	r3, [pc, #196]	; (8010d60 <tcp_input+0x4a0>)
 8010c9c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010c9e:	429a      	cmp	r2, r3
 8010ca0:	d107      	bne.n	8010cb2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8010ca2:	69f8      	ldr	r0, [r7, #28]
 8010ca4:	f000 fb56 	bl	8011354 <tcp_timewait_input>
        }
        pbuf_free(p);
 8010ca8:	6878      	ldr	r0, [r7, #4]
 8010caa:	f7fd fdbd 	bl	800e828 <pbuf_free>
        return;
 8010cae:	e1fd      	b.n	80110ac <tcp_input+0x7ec>
        continue;
 8010cb0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010cb2:	69fb      	ldr	r3, [r7, #28]
 8010cb4:	68db      	ldr	r3, [r3, #12]
 8010cb6:	61fb      	str	r3, [r7, #28]
 8010cb8:	69fb      	ldr	r3, [r7, #28]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d1bc      	bne.n	8010c38 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010cbe:	2300      	movs	r3, #0
 8010cc0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010cc2:	4b2f      	ldr	r3, [pc, #188]	; (8010d80 <tcp_input+0x4c0>)
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	617b      	str	r3, [r7, #20]
 8010cc8:	e02a      	b.n	8010d20 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010cca:	697b      	ldr	r3, [r7, #20]
 8010ccc:	7a1b      	ldrb	r3, [r3, #8]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d00c      	beq.n	8010cec <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010cd2:	697b      	ldr	r3, [r7, #20]
 8010cd4:	7a1a      	ldrb	r2, [r3, #8]
 8010cd6:	4b22      	ldr	r3, [pc, #136]	; (8010d60 <tcp_input+0x4a0>)
 8010cd8:	685b      	ldr	r3, [r3, #4]
 8010cda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010cde:	3301      	adds	r3, #1
 8010ce0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010ce2:	429a      	cmp	r2, r3
 8010ce4:	d002      	beq.n	8010cec <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8010ce6:	697b      	ldr	r3, [r7, #20]
 8010ce8:	61bb      	str	r3, [r7, #24]
        continue;
 8010cea:	e016      	b.n	8010d1a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010cec:	697b      	ldr	r3, [r7, #20]
 8010cee:	8ada      	ldrh	r2, [r3, #22]
 8010cf0:	4b1a      	ldr	r3, [pc, #104]	; (8010d5c <tcp_input+0x49c>)
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	885b      	ldrh	r3, [r3, #2]
 8010cf6:	b29b      	uxth	r3, r3
 8010cf8:	429a      	cmp	r2, r3
 8010cfa:	d10c      	bne.n	8010d16 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010cfc:	697b      	ldr	r3, [r7, #20]
 8010cfe:	681a      	ldr	r2, [r3, #0]
 8010d00:	4b17      	ldr	r3, [pc, #92]	; (8010d60 <tcp_input+0x4a0>)
 8010d02:	695b      	ldr	r3, [r3, #20]
 8010d04:	429a      	cmp	r2, r3
 8010d06:	d00f      	beq.n	8010d28 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010d08:	697b      	ldr	r3, [r7, #20]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d00d      	beq.n	8010d2a <tcp_input+0x46a>
 8010d0e:	697b      	ldr	r3, [r7, #20]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d009      	beq.n	8010d2a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010d16:	697b      	ldr	r3, [r7, #20]
 8010d18:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010d1a:	697b      	ldr	r3, [r7, #20]
 8010d1c:	68db      	ldr	r3, [r3, #12]
 8010d1e:	617b      	str	r3, [r7, #20]
 8010d20:	697b      	ldr	r3, [r7, #20]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d1d1      	bne.n	8010cca <tcp_input+0x40a>
 8010d26:	e000      	b.n	8010d2a <tcp_input+0x46a>
            break;
 8010d28:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010d2a:	697b      	ldr	r3, [r7, #20]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d029      	beq.n	8010d84 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010d30:	69bb      	ldr	r3, [r7, #24]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d00a      	beq.n	8010d4c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010d36:	697b      	ldr	r3, [r7, #20]
 8010d38:	68da      	ldr	r2, [r3, #12]
 8010d3a:	69bb      	ldr	r3, [r7, #24]
 8010d3c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8010d3e:	4b10      	ldr	r3, [pc, #64]	; (8010d80 <tcp_input+0x4c0>)
 8010d40:	681a      	ldr	r2, [r3, #0]
 8010d42:	697b      	ldr	r3, [r7, #20]
 8010d44:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010d46:	4a0e      	ldr	r2, [pc, #56]	; (8010d80 <tcp_input+0x4c0>)
 8010d48:	697b      	ldr	r3, [r7, #20]
 8010d4a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010d4c:	6978      	ldr	r0, [r7, #20]
 8010d4e:	f000 fa03 	bl	8011158 <tcp_listen_input>
      }
      pbuf_free(p);
 8010d52:	6878      	ldr	r0, [r7, #4]
 8010d54:	f7fd fd68 	bl	800e828 <pbuf_free>
      return;
 8010d58:	e1a8      	b.n	80110ac <tcp_input+0x7ec>
 8010d5a:	bf00      	nop
 8010d5c:	2000d274 	.word	0x2000d274
 8010d60:	20007938 	.word	0x20007938
 8010d64:	0801bda0 	.word	0x0801bda0
 8010d68:	0801becc 	.word	0x0801becc
 8010d6c:	0801bdec 	.word	0x0801bdec
 8010d70:	2000d258 	.word	0x2000d258
 8010d74:	0801bef8 	.word	0x0801bef8
 8010d78:	2000d25c 	.word	0x2000d25c
 8010d7c:	0801bf24 	.word	0x0801bf24
 8010d80:	2000d254 	.word	0x2000d254
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8010d84:	69fb      	ldr	r3, [r7, #28]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	f000 8158 	beq.w	801103c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010d8c:	4b95      	ldr	r3, [pc, #596]	; (8010fe4 <tcp_input+0x724>)
 8010d8e:	2200      	movs	r2, #0
 8010d90:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	891a      	ldrh	r2, [r3, #8]
 8010d96:	4b93      	ldr	r3, [pc, #588]	; (8010fe4 <tcp_input+0x724>)
 8010d98:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010d9a:	4a92      	ldr	r2, [pc, #584]	; (8010fe4 <tcp_input+0x724>)
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010da0:	4b91      	ldr	r3, [pc, #580]	; (8010fe8 <tcp_input+0x728>)
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	4a8f      	ldr	r2, [pc, #572]	; (8010fe4 <tcp_input+0x724>)
 8010da6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8010da8:	4b90      	ldr	r3, [pc, #576]	; (8010fec <tcp_input+0x72c>)
 8010daa:	2200      	movs	r2, #0
 8010dac:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010dae:	4b90      	ldr	r3, [pc, #576]	; (8010ff0 <tcp_input+0x730>)
 8010db0:	2200      	movs	r2, #0
 8010db2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010db4:	4b8f      	ldr	r3, [pc, #572]	; (8010ff4 <tcp_input+0x734>)
 8010db6:	2200      	movs	r2, #0
 8010db8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010dba:	4b8f      	ldr	r3, [pc, #572]	; (8010ff8 <tcp_input+0x738>)
 8010dbc:	781b      	ldrb	r3, [r3, #0]
 8010dbe:	f003 0308 	and.w	r3, r3, #8
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d006      	beq.n	8010dd4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	7b5b      	ldrb	r3, [r3, #13]
 8010dca:	f043 0301 	orr.w	r3, r3, #1
 8010dce:	b2da      	uxtb	r2, r3
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8010dd4:	69fb      	ldr	r3, [r7, #28]
 8010dd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d017      	beq.n	8010e0c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010ddc:	69f8      	ldr	r0, [r7, #28]
 8010dde:	f7ff f85b 	bl	800fe98 <tcp_process_refused_data>
 8010de2:	4603      	mov	r3, r0
 8010de4:	f113 0f0d 	cmn.w	r3, #13
 8010de8:	d007      	beq.n	8010dfa <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010dea:	69fb      	ldr	r3, [r7, #28]
 8010dec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d00c      	beq.n	8010e0c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010df2:	4b82      	ldr	r3, [pc, #520]	; (8010ffc <tcp_input+0x73c>)
 8010df4:	881b      	ldrh	r3, [r3, #0]
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d008      	beq.n	8010e0c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8010dfa:	69fb      	ldr	r3, [r7, #28]
 8010dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	f040 80e3 	bne.w	8010fca <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8010e04:	69f8      	ldr	r0, [r7, #28]
 8010e06:	f003 fe05 	bl	8014a14 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8010e0a:	e0de      	b.n	8010fca <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8010e0c:	4a7c      	ldr	r2, [pc, #496]	; (8011000 <tcp_input+0x740>)
 8010e0e:	69fb      	ldr	r3, [r7, #28]
 8010e10:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8010e12:	69f8      	ldr	r0, [r7, #28]
 8010e14:	f000 fb18 	bl	8011448 <tcp_process>
 8010e18:	4603      	mov	r3, r0
 8010e1a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010e1c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010e20:	f113 0f0d 	cmn.w	r3, #13
 8010e24:	f000 80d3 	beq.w	8010fce <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8010e28:	4b71      	ldr	r3, [pc, #452]	; (8010ff0 <tcp_input+0x730>)
 8010e2a:	781b      	ldrb	r3, [r3, #0]
 8010e2c:	f003 0308 	and.w	r3, r3, #8
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d015      	beq.n	8010e60 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8010e34:	69fb      	ldr	r3, [r7, #28]
 8010e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d008      	beq.n	8010e50 <tcp_input+0x590>
 8010e3e:	69fb      	ldr	r3, [r7, #28]
 8010e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e44:	69fa      	ldr	r2, [r7, #28]
 8010e46:	6912      	ldr	r2, [r2, #16]
 8010e48:	f06f 010d 	mvn.w	r1, #13
 8010e4c:	4610      	mov	r0, r2
 8010e4e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010e50:	69f9      	ldr	r1, [r7, #28]
 8010e52:	486c      	ldr	r0, [pc, #432]	; (8011004 <tcp_input+0x744>)
 8010e54:	f7ff fbbc 	bl	80105d0 <tcp_pcb_remove>
        tcp_free(pcb);
 8010e58:	69f8      	ldr	r0, [r7, #28]
 8010e5a:	f7fd ffa1 	bl	800eda0 <tcp_free>
 8010e5e:	e0da      	b.n	8011016 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8010e60:	2300      	movs	r3, #0
 8010e62:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8010e64:	4b63      	ldr	r3, [pc, #396]	; (8010ff4 <tcp_input+0x734>)
 8010e66:	881b      	ldrh	r3, [r3, #0]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d01d      	beq.n	8010ea8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010e6c:	4b61      	ldr	r3, [pc, #388]	; (8010ff4 <tcp_input+0x734>)
 8010e6e:	881b      	ldrh	r3, [r3, #0]
 8010e70:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8010e72:	69fb      	ldr	r3, [r7, #28]
 8010e74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d00a      	beq.n	8010e92 <tcp_input+0x5d2>
 8010e7c:	69fb      	ldr	r3, [r7, #28]
 8010e7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e82:	69fa      	ldr	r2, [r7, #28]
 8010e84:	6910      	ldr	r0, [r2, #16]
 8010e86:	89fa      	ldrh	r2, [r7, #14]
 8010e88:	69f9      	ldr	r1, [r7, #28]
 8010e8a:	4798      	blx	r3
 8010e8c:	4603      	mov	r3, r0
 8010e8e:	74fb      	strb	r3, [r7, #19]
 8010e90:	e001      	b.n	8010e96 <tcp_input+0x5d6>
 8010e92:	2300      	movs	r3, #0
 8010e94:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010e96:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010e9a:	f113 0f0d 	cmn.w	r3, #13
 8010e9e:	f000 8098 	beq.w	8010fd2 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8010ea2:	4b54      	ldr	r3, [pc, #336]	; (8010ff4 <tcp_input+0x734>)
 8010ea4:	2200      	movs	r2, #0
 8010ea6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010ea8:	69f8      	ldr	r0, [r7, #28]
 8010eaa:	f000 f915 	bl	80110d8 <tcp_input_delayed_close>
 8010eae:	4603      	mov	r3, r0
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	f040 8090 	bne.w	8010fd6 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8010eb6:	4b4d      	ldr	r3, [pc, #308]	; (8010fec <tcp_input+0x72c>)
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d041      	beq.n	8010f42 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010ebe:	69fb      	ldr	r3, [r7, #28]
 8010ec0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d006      	beq.n	8010ed4 <tcp_input+0x614>
 8010ec6:	4b50      	ldr	r3, [pc, #320]	; (8011008 <tcp_input+0x748>)
 8010ec8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010ecc:	494f      	ldr	r1, [pc, #316]	; (801100c <tcp_input+0x74c>)
 8010ece:	4850      	ldr	r0, [pc, #320]	; (8011010 <tcp_input+0x750>)
 8010ed0:	f007 fbbe 	bl	8018650 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8010ed4:	69fb      	ldr	r3, [r7, #28]
 8010ed6:	8b5b      	ldrh	r3, [r3, #26]
 8010ed8:	f003 0310 	and.w	r3, r3, #16
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d008      	beq.n	8010ef2 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010ee0:	4b42      	ldr	r3, [pc, #264]	; (8010fec <tcp_input+0x72c>)
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	f7fd fc9f 	bl	800e828 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8010eea:	69f8      	ldr	r0, [r7, #28]
 8010eec:	f7fe fa9c 	bl	800f428 <tcp_abort>
            goto aborted;
 8010ef0:	e091      	b.n	8011016 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8010ef2:	69fb      	ldr	r3, [r7, #28]
 8010ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d00c      	beq.n	8010f16 <tcp_input+0x656>
 8010efc:	69fb      	ldr	r3, [r7, #28]
 8010efe:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010f02:	69fb      	ldr	r3, [r7, #28]
 8010f04:	6918      	ldr	r0, [r3, #16]
 8010f06:	4b39      	ldr	r3, [pc, #228]	; (8010fec <tcp_input+0x72c>)
 8010f08:	681a      	ldr	r2, [r3, #0]
 8010f0a:	2300      	movs	r3, #0
 8010f0c:	69f9      	ldr	r1, [r7, #28]
 8010f0e:	47a0      	blx	r4
 8010f10:	4603      	mov	r3, r0
 8010f12:	74fb      	strb	r3, [r7, #19]
 8010f14:	e008      	b.n	8010f28 <tcp_input+0x668>
 8010f16:	4b35      	ldr	r3, [pc, #212]	; (8010fec <tcp_input+0x72c>)
 8010f18:	681a      	ldr	r2, [r3, #0]
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	69f9      	ldr	r1, [r7, #28]
 8010f1e:	2000      	movs	r0, #0
 8010f20:	f7ff f890 	bl	8010044 <tcp_recv_null>
 8010f24:	4603      	mov	r3, r0
 8010f26:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8010f28:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010f2c:	f113 0f0d 	cmn.w	r3, #13
 8010f30:	d053      	beq.n	8010fda <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8010f32:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d003      	beq.n	8010f42 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8010f3a:	4b2c      	ldr	r3, [pc, #176]	; (8010fec <tcp_input+0x72c>)
 8010f3c:	681a      	ldr	r2, [r3, #0]
 8010f3e:	69fb      	ldr	r3, [r7, #28]
 8010f40:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8010f42:	4b2b      	ldr	r3, [pc, #172]	; (8010ff0 <tcp_input+0x730>)
 8010f44:	781b      	ldrb	r3, [r3, #0]
 8010f46:	f003 0320 	and.w	r3, r3, #32
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d030      	beq.n	8010fb0 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8010f4e:	69fb      	ldr	r3, [r7, #28]
 8010f50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d009      	beq.n	8010f6a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8010f56:	69fb      	ldr	r3, [r7, #28]
 8010f58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010f5a:	7b5a      	ldrb	r2, [r3, #13]
 8010f5c:	69fb      	ldr	r3, [r7, #28]
 8010f5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010f60:	f042 0220 	orr.w	r2, r2, #32
 8010f64:	b2d2      	uxtb	r2, r2
 8010f66:	735a      	strb	r2, [r3, #13]
 8010f68:	e022      	b.n	8010fb0 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010f6a:	69fb      	ldr	r3, [r7, #28]
 8010f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010f6e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010f72:	d005      	beq.n	8010f80 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8010f74:	69fb      	ldr	r3, [r7, #28]
 8010f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010f78:	3301      	adds	r3, #1
 8010f7a:	b29a      	uxth	r2, r3
 8010f7c:	69fb      	ldr	r3, [r7, #28]
 8010f7e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010f80:	69fb      	ldr	r3, [r7, #28]
 8010f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d00b      	beq.n	8010fa2 <tcp_input+0x6e2>
 8010f8a:	69fb      	ldr	r3, [r7, #28]
 8010f8c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010f90:	69fb      	ldr	r3, [r7, #28]
 8010f92:	6918      	ldr	r0, [r3, #16]
 8010f94:	2300      	movs	r3, #0
 8010f96:	2200      	movs	r2, #0
 8010f98:	69f9      	ldr	r1, [r7, #28]
 8010f9a:	47a0      	blx	r4
 8010f9c:	4603      	mov	r3, r0
 8010f9e:	74fb      	strb	r3, [r7, #19]
 8010fa0:	e001      	b.n	8010fa6 <tcp_input+0x6e6>
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010fa6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010faa:	f113 0f0d 	cmn.w	r3, #13
 8010fae:	d016      	beq.n	8010fde <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010fb0:	4b13      	ldr	r3, [pc, #76]	; (8011000 <tcp_input+0x740>)
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8010fb6:	69f8      	ldr	r0, [r7, #28]
 8010fb8:	f000 f88e 	bl	80110d8 <tcp_input_delayed_close>
 8010fbc:	4603      	mov	r3, r0
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d128      	bne.n	8011014 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8010fc2:	69f8      	ldr	r0, [r7, #28]
 8010fc4:	f002 ff20 	bl	8013e08 <tcp_output>
 8010fc8:	e025      	b.n	8011016 <tcp_input+0x756>
        goto aborted;
 8010fca:	bf00      	nop
 8010fcc:	e023      	b.n	8011016 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8010fce:	bf00      	nop
 8010fd0:	e021      	b.n	8011016 <tcp_input+0x756>
              goto aborted;
 8010fd2:	bf00      	nop
 8010fd4:	e01f      	b.n	8011016 <tcp_input+0x756>
          goto aborted;
 8010fd6:	bf00      	nop
 8010fd8:	e01d      	b.n	8011016 <tcp_input+0x756>
            goto aborted;
 8010fda:	bf00      	nop
 8010fdc:	e01b      	b.n	8011016 <tcp_input+0x756>
              goto aborted;
 8010fde:	bf00      	nop
 8010fe0:	e019      	b.n	8011016 <tcp_input+0x756>
 8010fe2:	bf00      	nop
 8010fe4:	2000d264 	.word	0x2000d264
 8010fe8:	2000d274 	.word	0x2000d274
 8010fec:	2000d294 	.word	0x2000d294
 8010ff0:	2000d291 	.word	0x2000d291
 8010ff4:	2000d28c 	.word	0x2000d28c
 8010ff8:	2000d290 	.word	0x2000d290
 8010ffc:	2000d28e 	.word	0x2000d28e
 8011000:	2000d298 	.word	0x2000d298
 8011004:	2000d258 	.word	0x2000d258
 8011008:	0801bda0 	.word	0x0801bda0
 801100c:	0801bf54 	.word	0x0801bf54
 8011010:	0801bdec 	.word	0x0801bdec
          goto aborted;
 8011014:	bf00      	nop
    tcp_input_pcb = NULL;
 8011016:	4b27      	ldr	r3, [pc, #156]	; (80110b4 <tcp_input+0x7f4>)
 8011018:	2200      	movs	r2, #0
 801101a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801101c:	4b26      	ldr	r3, [pc, #152]	; (80110b8 <tcp_input+0x7f8>)
 801101e:	2200      	movs	r2, #0
 8011020:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8011022:	4b26      	ldr	r3, [pc, #152]	; (80110bc <tcp_input+0x7fc>)
 8011024:	685b      	ldr	r3, [r3, #4]
 8011026:	2b00      	cmp	r3, #0
 8011028:	d03f      	beq.n	80110aa <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801102a:	4b24      	ldr	r3, [pc, #144]	; (80110bc <tcp_input+0x7fc>)
 801102c:	685b      	ldr	r3, [r3, #4]
 801102e:	4618      	mov	r0, r3
 8011030:	f7fd fbfa 	bl	800e828 <pbuf_free>
      inseg.p = NULL;
 8011034:	4b21      	ldr	r3, [pc, #132]	; (80110bc <tcp_input+0x7fc>)
 8011036:	2200      	movs	r2, #0
 8011038:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801103a:	e036      	b.n	80110aa <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801103c:	4b20      	ldr	r3, [pc, #128]	; (80110c0 <tcp_input+0x800>)
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	899b      	ldrh	r3, [r3, #12]
 8011042:	b29b      	uxth	r3, r3
 8011044:	4618      	mov	r0, r3
 8011046:	f7fc f811 	bl	800d06c <lwip_htons>
 801104a:	4603      	mov	r3, r0
 801104c:	b2db      	uxtb	r3, r3
 801104e:	f003 0304 	and.w	r3, r3, #4
 8011052:	2b00      	cmp	r3, #0
 8011054:	d118      	bne.n	8011088 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011056:	4b1b      	ldr	r3, [pc, #108]	; (80110c4 <tcp_input+0x804>)
 8011058:	6819      	ldr	r1, [r3, #0]
 801105a:	4b1b      	ldr	r3, [pc, #108]	; (80110c8 <tcp_input+0x808>)
 801105c:	881b      	ldrh	r3, [r3, #0]
 801105e:	461a      	mov	r2, r3
 8011060:	4b1a      	ldr	r3, [pc, #104]	; (80110cc <tcp_input+0x80c>)
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011066:	4b16      	ldr	r3, [pc, #88]	; (80110c0 <tcp_input+0x800>)
 8011068:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801106a:	885b      	ldrh	r3, [r3, #2]
 801106c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801106e:	4a14      	ldr	r2, [pc, #80]	; (80110c0 <tcp_input+0x800>)
 8011070:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011072:	8812      	ldrh	r2, [r2, #0]
 8011074:	b292      	uxth	r2, r2
 8011076:	9202      	str	r2, [sp, #8]
 8011078:	9301      	str	r3, [sp, #4]
 801107a:	4b15      	ldr	r3, [pc, #84]	; (80110d0 <tcp_input+0x810>)
 801107c:	9300      	str	r3, [sp, #0]
 801107e:	4b15      	ldr	r3, [pc, #84]	; (80110d4 <tcp_input+0x814>)
 8011080:	4602      	mov	r2, r0
 8011082:	2000      	movs	r0, #0
 8011084:	f003 fc74 	bl	8014970 <tcp_rst>
    pbuf_free(p);
 8011088:	6878      	ldr	r0, [r7, #4]
 801108a:	f7fd fbcd 	bl	800e828 <pbuf_free>
  return;
 801108e:	e00c      	b.n	80110aa <tcp_input+0x7ea>
    goto dropped;
 8011090:	bf00      	nop
 8011092:	e006      	b.n	80110a2 <tcp_input+0x7e2>
    goto dropped;
 8011094:	bf00      	nop
 8011096:	e004      	b.n	80110a2 <tcp_input+0x7e2>
    goto dropped;
 8011098:	bf00      	nop
 801109a:	e002      	b.n	80110a2 <tcp_input+0x7e2>
      goto dropped;
 801109c:	bf00      	nop
 801109e:	e000      	b.n	80110a2 <tcp_input+0x7e2>
      goto dropped;
 80110a0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80110a2:	6878      	ldr	r0, [r7, #4]
 80110a4:	f7fd fbc0 	bl	800e828 <pbuf_free>
 80110a8:	e000      	b.n	80110ac <tcp_input+0x7ec>
  return;
 80110aa:	bf00      	nop
}
 80110ac:	3724      	adds	r7, #36	; 0x24
 80110ae:	46bd      	mov	sp, r7
 80110b0:	bd90      	pop	{r4, r7, pc}
 80110b2:	bf00      	nop
 80110b4:	2000d298 	.word	0x2000d298
 80110b8:	2000d294 	.word	0x2000d294
 80110bc:	2000d264 	.word	0x2000d264
 80110c0:	2000d274 	.word	0x2000d274
 80110c4:	2000d288 	.word	0x2000d288
 80110c8:	2000d28e 	.word	0x2000d28e
 80110cc:	2000d284 	.word	0x2000d284
 80110d0:	20007948 	.word	0x20007948
 80110d4:	2000794c 	.word	0x2000794c

080110d8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80110d8:	b580      	push	{r7, lr}
 80110da:	b082      	sub	sp, #8
 80110dc:	af00      	add	r7, sp, #0
 80110de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d106      	bne.n	80110f4 <tcp_input_delayed_close+0x1c>
 80110e6:	4b17      	ldr	r3, [pc, #92]	; (8011144 <tcp_input_delayed_close+0x6c>)
 80110e8:	f240 225a 	movw	r2, #602	; 0x25a
 80110ec:	4916      	ldr	r1, [pc, #88]	; (8011148 <tcp_input_delayed_close+0x70>)
 80110ee:	4817      	ldr	r0, [pc, #92]	; (801114c <tcp_input_delayed_close+0x74>)
 80110f0:	f007 faae 	bl	8018650 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80110f4:	4b16      	ldr	r3, [pc, #88]	; (8011150 <tcp_input_delayed_close+0x78>)
 80110f6:	781b      	ldrb	r3, [r3, #0]
 80110f8:	f003 0310 	and.w	r3, r3, #16
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d01c      	beq.n	801113a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	8b5b      	ldrh	r3, [r3, #26]
 8011104:	f003 0310 	and.w	r3, r3, #16
 8011108:	2b00      	cmp	r3, #0
 801110a:	d10d      	bne.n	8011128 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011112:	2b00      	cmp	r3, #0
 8011114:	d008      	beq.n	8011128 <tcp_input_delayed_close+0x50>
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801111c:	687a      	ldr	r2, [r7, #4]
 801111e:	6912      	ldr	r2, [r2, #16]
 8011120:	f06f 010e 	mvn.w	r1, #14
 8011124:	4610      	mov	r0, r2
 8011126:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011128:	6879      	ldr	r1, [r7, #4]
 801112a:	480a      	ldr	r0, [pc, #40]	; (8011154 <tcp_input_delayed_close+0x7c>)
 801112c:	f7ff fa50 	bl	80105d0 <tcp_pcb_remove>
    tcp_free(pcb);
 8011130:	6878      	ldr	r0, [r7, #4]
 8011132:	f7fd fe35 	bl	800eda0 <tcp_free>
    return 1;
 8011136:	2301      	movs	r3, #1
 8011138:	e000      	b.n	801113c <tcp_input_delayed_close+0x64>
  }
  return 0;
 801113a:	2300      	movs	r3, #0
}
 801113c:	4618      	mov	r0, r3
 801113e:	3708      	adds	r7, #8
 8011140:	46bd      	mov	sp, r7
 8011142:	bd80      	pop	{r7, pc}
 8011144:	0801bda0 	.word	0x0801bda0
 8011148:	0801bf70 	.word	0x0801bf70
 801114c:	0801bdec 	.word	0x0801bdec
 8011150:	2000d291 	.word	0x2000d291
 8011154:	2000d258 	.word	0x2000d258

08011158 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8011158:	b590      	push	{r4, r7, lr}
 801115a:	b08b      	sub	sp, #44	; 0x2c
 801115c:	af04      	add	r7, sp, #16
 801115e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011160:	4b6f      	ldr	r3, [pc, #444]	; (8011320 <tcp_listen_input+0x1c8>)
 8011162:	781b      	ldrb	r3, [r3, #0]
 8011164:	f003 0304 	and.w	r3, r3, #4
 8011168:	2b00      	cmp	r3, #0
 801116a:	f040 80d2 	bne.w	8011312 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d106      	bne.n	8011182 <tcp_listen_input+0x2a>
 8011174:	4b6b      	ldr	r3, [pc, #428]	; (8011324 <tcp_listen_input+0x1cc>)
 8011176:	f240 2281 	movw	r2, #641	; 0x281
 801117a:	496b      	ldr	r1, [pc, #428]	; (8011328 <tcp_listen_input+0x1d0>)
 801117c:	486b      	ldr	r0, [pc, #428]	; (801132c <tcp_listen_input+0x1d4>)
 801117e:	f007 fa67 	bl	8018650 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8011182:	4b67      	ldr	r3, [pc, #412]	; (8011320 <tcp_listen_input+0x1c8>)
 8011184:	781b      	ldrb	r3, [r3, #0]
 8011186:	f003 0310 	and.w	r3, r3, #16
 801118a:	2b00      	cmp	r3, #0
 801118c:	d019      	beq.n	80111c2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801118e:	4b68      	ldr	r3, [pc, #416]	; (8011330 <tcp_listen_input+0x1d8>)
 8011190:	6819      	ldr	r1, [r3, #0]
 8011192:	4b68      	ldr	r3, [pc, #416]	; (8011334 <tcp_listen_input+0x1dc>)
 8011194:	881b      	ldrh	r3, [r3, #0]
 8011196:	461a      	mov	r2, r3
 8011198:	4b67      	ldr	r3, [pc, #412]	; (8011338 <tcp_listen_input+0x1e0>)
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801119e:	4b67      	ldr	r3, [pc, #412]	; (801133c <tcp_listen_input+0x1e4>)
 80111a0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80111a2:	885b      	ldrh	r3, [r3, #2]
 80111a4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80111a6:	4a65      	ldr	r2, [pc, #404]	; (801133c <tcp_listen_input+0x1e4>)
 80111a8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80111aa:	8812      	ldrh	r2, [r2, #0]
 80111ac:	b292      	uxth	r2, r2
 80111ae:	9202      	str	r2, [sp, #8]
 80111b0:	9301      	str	r3, [sp, #4]
 80111b2:	4b63      	ldr	r3, [pc, #396]	; (8011340 <tcp_listen_input+0x1e8>)
 80111b4:	9300      	str	r3, [sp, #0]
 80111b6:	4b63      	ldr	r3, [pc, #396]	; (8011344 <tcp_listen_input+0x1ec>)
 80111b8:	4602      	mov	r2, r0
 80111ba:	6878      	ldr	r0, [r7, #4]
 80111bc:	f003 fbd8 	bl	8014970 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80111c0:	e0a9      	b.n	8011316 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80111c2:	4b57      	ldr	r3, [pc, #348]	; (8011320 <tcp_listen_input+0x1c8>)
 80111c4:	781b      	ldrb	r3, [r3, #0]
 80111c6:	f003 0302 	and.w	r3, r3, #2
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	f000 80a3 	beq.w	8011316 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	7d5b      	ldrb	r3, [r3, #21]
 80111d4:	4618      	mov	r0, r3
 80111d6:	f7ff f859 	bl	801028c <tcp_alloc>
 80111da:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80111dc:	697b      	ldr	r3, [r7, #20]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d111      	bne.n	8011206 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	699b      	ldr	r3, [r3, #24]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d00a      	beq.n	8011200 <tcp_listen_input+0xa8>
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	699b      	ldr	r3, [r3, #24]
 80111ee:	687a      	ldr	r2, [r7, #4]
 80111f0:	6910      	ldr	r0, [r2, #16]
 80111f2:	f04f 32ff 	mov.w	r2, #4294967295
 80111f6:	2100      	movs	r1, #0
 80111f8:	4798      	blx	r3
 80111fa:	4603      	mov	r3, r0
 80111fc:	73bb      	strb	r3, [r7, #14]
      return;
 80111fe:	e08b      	b.n	8011318 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011200:	23f0      	movs	r3, #240	; 0xf0
 8011202:	73bb      	strb	r3, [r7, #14]
      return;
 8011204:	e088      	b.n	8011318 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8011206:	4b50      	ldr	r3, [pc, #320]	; (8011348 <tcp_listen_input+0x1f0>)
 8011208:	695a      	ldr	r2, [r3, #20]
 801120a:	697b      	ldr	r3, [r7, #20]
 801120c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801120e:	4b4e      	ldr	r3, [pc, #312]	; (8011348 <tcp_listen_input+0x1f0>)
 8011210:	691a      	ldr	r2, [r3, #16]
 8011212:	697b      	ldr	r3, [r7, #20]
 8011214:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	8ada      	ldrh	r2, [r3, #22]
 801121a:	697b      	ldr	r3, [r7, #20]
 801121c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801121e:	4b47      	ldr	r3, [pc, #284]	; (801133c <tcp_listen_input+0x1e4>)
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	881b      	ldrh	r3, [r3, #0]
 8011224:	b29a      	uxth	r2, r3
 8011226:	697b      	ldr	r3, [r7, #20]
 8011228:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801122a:	697b      	ldr	r3, [r7, #20]
 801122c:	2203      	movs	r2, #3
 801122e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011230:	4b41      	ldr	r3, [pc, #260]	; (8011338 <tcp_listen_input+0x1e0>)
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	1c5a      	adds	r2, r3, #1
 8011236:	697b      	ldr	r3, [r7, #20]
 8011238:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801123a:	697b      	ldr	r3, [r7, #20]
 801123c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801123e:	697b      	ldr	r3, [r7, #20]
 8011240:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8011242:	6978      	ldr	r0, [r7, #20]
 8011244:	f7ff fa58 	bl	80106f8 <tcp_next_iss>
 8011248:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801124a:	697b      	ldr	r3, [r7, #20]
 801124c:	693a      	ldr	r2, [r7, #16]
 801124e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8011250:	697b      	ldr	r3, [r7, #20]
 8011252:	693a      	ldr	r2, [r7, #16]
 8011254:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8011256:	697b      	ldr	r3, [r7, #20]
 8011258:	693a      	ldr	r2, [r7, #16]
 801125a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801125c:	697b      	ldr	r3, [r7, #20]
 801125e:	693a      	ldr	r2, [r7, #16]
 8011260:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011262:	4b35      	ldr	r3, [pc, #212]	; (8011338 <tcp_listen_input+0x1e0>)
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	1e5a      	subs	r2, r3, #1
 8011268:	697b      	ldr	r3, [r7, #20]
 801126a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	691a      	ldr	r2, [r3, #16]
 8011270:	697b      	ldr	r3, [r7, #20]
 8011272:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8011274:	697b      	ldr	r3, [r7, #20]
 8011276:	687a      	ldr	r2, [r7, #4]
 8011278:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	7a5b      	ldrb	r3, [r3, #9]
 801127e:	f003 030c 	and.w	r3, r3, #12
 8011282:	b2da      	uxtb	r2, r3
 8011284:	697b      	ldr	r3, [r7, #20]
 8011286:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	7a1a      	ldrb	r2, [r3, #8]
 801128c:	697b      	ldr	r3, [r7, #20]
 801128e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011290:	4b2e      	ldr	r3, [pc, #184]	; (801134c <tcp_listen_input+0x1f4>)
 8011292:	681a      	ldr	r2, [r3, #0]
 8011294:	697b      	ldr	r3, [r7, #20]
 8011296:	60da      	str	r2, [r3, #12]
 8011298:	4a2c      	ldr	r2, [pc, #176]	; (801134c <tcp_listen_input+0x1f4>)
 801129a:	697b      	ldr	r3, [r7, #20]
 801129c:	6013      	str	r3, [r2, #0]
 801129e:	f003 fd29 	bl	8014cf4 <tcp_timer_needed>
 80112a2:	4b2b      	ldr	r3, [pc, #172]	; (8011350 <tcp_listen_input+0x1f8>)
 80112a4:	2201      	movs	r2, #1
 80112a6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80112a8:	6978      	ldr	r0, [r7, #20]
 80112aa:	f001 fd8f 	bl	8012dcc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80112ae:	4b23      	ldr	r3, [pc, #140]	; (801133c <tcp_listen_input+0x1e4>)
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	89db      	ldrh	r3, [r3, #14]
 80112b4:	b29a      	uxth	r2, r3
 80112b6:	697b      	ldr	r3, [r7, #20]
 80112b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80112bc:	697b      	ldr	r3, [r7, #20]
 80112be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80112c2:	697b      	ldr	r3, [r7, #20]
 80112c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80112c8:	697b      	ldr	r3, [r7, #20]
 80112ca:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80112cc:	697b      	ldr	r3, [r7, #20]
 80112ce:	3304      	adds	r3, #4
 80112d0:	4618      	mov	r0, r3
 80112d2:	f005 fc4d 	bl	8016b70 <ip4_route>
 80112d6:	4601      	mov	r1, r0
 80112d8:	697b      	ldr	r3, [r7, #20]
 80112da:	3304      	adds	r3, #4
 80112dc:	461a      	mov	r2, r3
 80112de:	4620      	mov	r0, r4
 80112e0:	f7ff fa30 	bl	8010744 <tcp_eff_send_mss_netif>
 80112e4:	4603      	mov	r3, r0
 80112e6:	461a      	mov	r2, r3
 80112e8:	697b      	ldr	r3, [r7, #20]
 80112ea:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80112ec:	2112      	movs	r1, #18
 80112ee:	6978      	ldr	r0, [r7, #20]
 80112f0:	f002 fc9c 	bl	8013c2c <tcp_enqueue_flags>
 80112f4:	4603      	mov	r3, r0
 80112f6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80112f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d004      	beq.n	801130a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8011300:	2100      	movs	r1, #0
 8011302:	6978      	ldr	r0, [r7, #20]
 8011304:	f7fd ffd2 	bl	800f2ac <tcp_abandon>
      return;
 8011308:	e006      	b.n	8011318 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801130a:	6978      	ldr	r0, [r7, #20]
 801130c:	f002 fd7c 	bl	8013e08 <tcp_output>
  return;
 8011310:	e001      	b.n	8011316 <tcp_listen_input+0x1be>
    return;
 8011312:	bf00      	nop
 8011314:	e000      	b.n	8011318 <tcp_listen_input+0x1c0>
  return;
 8011316:	bf00      	nop
}
 8011318:	371c      	adds	r7, #28
 801131a:	46bd      	mov	sp, r7
 801131c:	bd90      	pop	{r4, r7, pc}
 801131e:	bf00      	nop
 8011320:	2000d290 	.word	0x2000d290
 8011324:	0801bda0 	.word	0x0801bda0
 8011328:	0801bf98 	.word	0x0801bf98
 801132c:	0801bdec 	.word	0x0801bdec
 8011330:	2000d288 	.word	0x2000d288
 8011334:	2000d28e 	.word	0x2000d28e
 8011338:	2000d284 	.word	0x2000d284
 801133c:	2000d274 	.word	0x2000d274
 8011340:	20007948 	.word	0x20007948
 8011344:	2000794c 	.word	0x2000794c
 8011348:	20007938 	.word	0x20007938
 801134c:	2000d258 	.word	0x2000d258
 8011350:	2000d260 	.word	0x2000d260

08011354 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8011354:	b580      	push	{r7, lr}
 8011356:	b086      	sub	sp, #24
 8011358:	af04      	add	r7, sp, #16
 801135a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801135c:	4b2f      	ldr	r3, [pc, #188]	; (801141c <tcp_timewait_input+0xc8>)
 801135e:	781b      	ldrb	r3, [r3, #0]
 8011360:	f003 0304 	and.w	r3, r3, #4
 8011364:	2b00      	cmp	r3, #0
 8011366:	d153      	bne.n	8011410 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d106      	bne.n	801137c <tcp_timewait_input+0x28>
 801136e:	4b2c      	ldr	r3, [pc, #176]	; (8011420 <tcp_timewait_input+0xcc>)
 8011370:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011374:	492b      	ldr	r1, [pc, #172]	; (8011424 <tcp_timewait_input+0xd0>)
 8011376:	482c      	ldr	r0, [pc, #176]	; (8011428 <tcp_timewait_input+0xd4>)
 8011378:	f007 f96a 	bl	8018650 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801137c:	4b27      	ldr	r3, [pc, #156]	; (801141c <tcp_timewait_input+0xc8>)
 801137e:	781b      	ldrb	r3, [r3, #0]
 8011380:	f003 0302 	and.w	r3, r3, #2
 8011384:	2b00      	cmp	r3, #0
 8011386:	d02a      	beq.n	80113de <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8011388:	4b28      	ldr	r3, [pc, #160]	; (801142c <tcp_timewait_input+0xd8>)
 801138a:	681a      	ldr	r2, [r3, #0]
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011390:	1ad3      	subs	r3, r2, r3
 8011392:	2b00      	cmp	r3, #0
 8011394:	db2d      	blt.n	80113f2 <tcp_timewait_input+0x9e>
 8011396:	4b25      	ldr	r3, [pc, #148]	; (801142c <tcp_timewait_input+0xd8>)
 8011398:	681a      	ldr	r2, [r3, #0]
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801139e:	6879      	ldr	r1, [r7, #4]
 80113a0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80113a2:	440b      	add	r3, r1
 80113a4:	1ad3      	subs	r3, r2, r3
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	dc23      	bgt.n	80113f2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80113aa:	4b21      	ldr	r3, [pc, #132]	; (8011430 <tcp_timewait_input+0xdc>)
 80113ac:	6819      	ldr	r1, [r3, #0]
 80113ae:	4b21      	ldr	r3, [pc, #132]	; (8011434 <tcp_timewait_input+0xe0>)
 80113b0:	881b      	ldrh	r3, [r3, #0]
 80113b2:	461a      	mov	r2, r3
 80113b4:	4b1d      	ldr	r3, [pc, #116]	; (801142c <tcp_timewait_input+0xd8>)
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80113ba:	4b1f      	ldr	r3, [pc, #124]	; (8011438 <tcp_timewait_input+0xe4>)
 80113bc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80113be:	885b      	ldrh	r3, [r3, #2]
 80113c0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80113c2:	4a1d      	ldr	r2, [pc, #116]	; (8011438 <tcp_timewait_input+0xe4>)
 80113c4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80113c6:	8812      	ldrh	r2, [r2, #0]
 80113c8:	b292      	uxth	r2, r2
 80113ca:	9202      	str	r2, [sp, #8]
 80113cc:	9301      	str	r3, [sp, #4]
 80113ce:	4b1b      	ldr	r3, [pc, #108]	; (801143c <tcp_timewait_input+0xe8>)
 80113d0:	9300      	str	r3, [sp, #0]
 80113d2:	4b1b      	ldr	r3, [pc, #108]	; (8011440 <tcp_timewait_input+0xec>)
 80113d4:	4602      	mov	r2, r0
 80113d6:	6878      	ldr	r0, [r7, #4]
 80113d8:	f003 faca 	bl	8014970 <tcp_rst>
      return;
 80113dc:	e01b      	b.n	8011416 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80113de:	4b0f      	ldr	r3, [pc, #60]	; (801141c <tcp_timewait_input+0xc8>)
 80113e0:	781b      	ldrb	r3, [r3, #0]
 80113e2:	f003 0301 	and.w	r3, r3, #1
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d003      	beq.n	80113f2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80113ea:	4b16      	ldr	r3, [pc, #88]	; (8011444 <tcp_timewait_input+0xf0>)
 80113ec:	681a      	ldr	r2, [r3, #0]
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80113f2:	4b10      	ldr	r3, [pc, #64]	; (8011434 <tcp_timewait_input+0xe0>)
 80113f4:	881b      	ldrh	r3, [r3, #0]
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d00c      	beq.n	8011414 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	8b5b      	ldrh	r3, [r3, #26]
 80113fe:	f043 0302 	orr.w	r3, r3, #2
 8011402:	b29a      	uxth	r2, r3
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011408:	6878      	ldr	r0, [r7, #4]
 801140a:	f002 fcfd 	bl	8013e08 <tcp_output>
  }
  return;
 801140e:	e001      	b.n	8011414 <tcp_timewait_input+0xc0>
    return;
 8011410:	bf00      	nop
 8011412:	e000      	b.n	8011416 <tcp_timewait_input+0xc2>
  return;
 8011414:	bf00      	nop
}
 8011416:	3708      	adds	r7, #8
 8011418:	46bd      	mov	sp, r7
 801141a:	bd80      	pop	{r7, pc}
 801141c:	2000d290 	.word	0x2000d290
 8011420:	0801bda0 	.word	0x0801bda0
 8011424:	0801bfb8 	.word	0x0801bfb8
 8011428:	0801bdec 	.word	0x0801bdec
 801142c:	2000d284 	.word	0x2000d284
 8011430:	2000d288 	.word	0x2000d288
 8011434:	2000d28e 	.word	0x2000d28e
 8011438:	2000d274 	.word	0x2000d274
 801143c:	20007948 	.word	0x20007948
 8011440:	2000794c 	.word	0x2000794c
 8011444:	2000d24c 	.word	0x2000d24c

08011448 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8011448:	b590      	push	{r4, r7, lr}
 801144a:	b08d      	sub	sp, #52	; 0x34
 801144c:	af04      	add	r7, sp, #16
 801144e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011450:	2300      	movs	r3, #0
 8011452:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8011454:	2300      	movs	r3, #0
 8011456:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	2b00      	cmp	r3, #0
 801145c:	d106      	bne.n	801146c <tcp_process+0x24>
 801145e:	4b9d      	ldr	r3, [pc, #628]	; (80116d4 <tcp_process+0x28c>)
 8011460:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8011464:	499c      	ldr	r1, [pc, #624]	; (80116d8 <tcp_process+0x290>)
 8011466:	489d      	ldr	r0, [pc, #628]	; (80116dc <tcp_process+0x294>)
 8011468:	f007 f8f2 	bl	8018650 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801146c:	4b9c      	ldr	r3, [pc, #624]	; (80116e0 <tcp_process+0x298>)
 801146e:	781b      	ldrb	r3, [r3, #0]
 8011470:	f003 0304 	and.w	r3, r3, #4
 8011474:	2b00      	cmp	r3, #0
 8011476:	d04e      	beq.n	8011516 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	7d1b      	ldrb	r3, [r3, #20]
 801147c:	2b02      	cmp	r3, #2
 801147e:	d108      	bne.n	8011492 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011484:	4b97      	ldr	r3, [pc, #604]	; (80116e4 <tcp_process+0x29c>)
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	429a      	cmp	r2, r3
 801148a:	d123      	bne.n	80114d4 <tcp_process+0x8c>
        acceptable = 1;
 801148c:	2301      	movs	r3, #1
 801148e:	76fb      	strb	r3, [r7, #27]
 8011490:	e020      	b.n	80114d4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011496:	4b94      	ldr	r3, [pc, #592]	; (80116e8 <tcp_process+0x2a0>)
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	429a      	cmp	r2, r3
 801149c:	d102      	bne.n	80114a4 <tcp_process+0x5c>
        acceptable = 1;
 801149e:	2301      	movs	r3, #1
 80114a0:	76fb      	strb	r3, [r7, #27]
 80114a2:	e017      	b.n	80114d4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80114a4:	4b90      	ldr	r3, [pc, #576]	; (80116e8 <tcp_process+0x2a0>)
 80114a6:	681a      	ldr	r2, [r3, #0]
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114ac:	1ad3      	subs	r3, r2, r3
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	db10      	blt.n	80114d4 <tcp_process+0x8c>
 80114b2:	4b8d      	ldr	r3, [pc, #564]	; (80116e8 <tcp_process+0x2a0>)
 80114b4:	681a      	ldr	r2, [r3, #0]
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114ba:	6879      	ldr	r1, [r7, #4]
 80114bc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80114be:	440b      	add	r3, r1
 80114c0:	1ad3      	subs	r3, r2, r3
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	dc06      	bgt.n	80114d4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	8b5b      	ldrh	r3, [r3, #26]
 80114ca:	f043 0302 	orr.w	r3, r3, #2
 80114ce:	b29a      	uxth	r2, r3
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80114d4:	7efb      	ldrb	r3, [r7, #27]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d01b      	beq.n	8011512 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	7d1b      	ldrb	r3, [r3, #20]
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d106      	bne.n	80114f0 <tcp_process+0xa8>
 80114e2:	4b7c      	ldr	r3, [pc, #496]	; (80116d4 <tcp_process+0x28c>)
 80114e4:	f44f 724e 	mov.w	r2, #824	; 0x338
 80114e8:	4980      	ldr	r1, [pc, #512]	; (80116ec <tcp_process+0x2a4>)
 80114ea:	487c      	ldr	r0, [pc, #496]	; (80116dc <tcp_process+0x294>)
 80114ec:	f007 f8b0 	bl	8018650 <iprintf>
      recv_flags |= TF_RESET;
 80114f0:	4b7f      	ldr	r3, [pc, #508]	; (80116f0 <tcp_process+0x2a8>)
 80114f2:	781b      	ldrb	r3, [r3, #0]
 80114f4:	f043 0308 	orr.w	r3, r3, #8
 80114f8:	b2da      	uxtb	r2, r3
 80114fa:	4b7d      	ldr	r3, [pc, #500]	; (80116f0 <tcp_process+0x2a8>)
 80114fc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	8b5b      	ldrh	r3, [r3, #26]
 8011502:	f023 0301 	bic.w	r3, r3, #1
 8011506:	b29a      	uxth	r2, r3
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801150c:	f06f 030d 	mvn.w	r3, #13
 8011510:	e37a      	b.n	8011c08 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8011512:	2300      	movs	r3, #0
 8011514:	e378      	b.n	8011c08 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8011516:	4b72      	ldr	r3, [pc, #456]	; (80116e0 <tcp_process+0x298>)
 8011518:	781b      	ldrb	r3, [r3, #0]
 801151a:	f003 0302 	and.w	r3, r3, #2
 801151e:	2b00      	cmp	r3, #0
 8011520:	d010      	beq.n	8011544 <tcp_process+0xfc>
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	7d1b      	ldrb	r3, [r3, #20]
 8011526:	2b02      	cmp	r3, #2
 8011528:	d00c      	beq.n	8011544 <tcp_process+0xfc>
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	7d1b      	ldrb	r3, [r3, #20]
 801152e:	2b03      	cmp	r3, #3
 8011530:	d008      	beq.n	8011544 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	8b5b      	ldrh	r3, [r3, #26]
 8011536:	f043 0302 	orr.w	r3, r3, #2
 801153a:	b29a      	uxth	r2, r3
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8011540:	2300      	movs	r3, #0
 8011542:	e361      	b.n	8011c08 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	8b5b      	ldrh	r3, [r3, #26]
 8011548:	f003 0310 	and.w	r3, r3, #16
 801154c:	2b00      	cmp	r3, #0
 801154e:	d103      	bne.n	8011558 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8011550:	4b68      	ldr	r3, [pc, #416]	; (80116f4 <tcp_process+0x2ac>)
 8011552:	681a      	ldr	r2, [r3, #0]
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	2200      	movs	r2, #0
 801155c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	2200      	movs	r2, #0
 8011564:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8011568:	6878      	ldr	r0, [r7, #4]
 801156a:	f001 fc2f 	bl	8012dcc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	7d1b      	ldrb	r3, [r3, #20]
 8011572:	3b02      	subs	r3, #2
 8011574:	2b07      	cmp	r3, #7
 8011576:	f200 8337 	bhi.w	8011be8 <tcp_process+0x7a0>
 801157a:	a201      	add	r2, pc, #4	; (adr r2, 8011580 <tcp_process+0x138>)
 801157c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011580:	080115a1 	.word	0x080115a1
 8011584:	080117d1 	.word	0x080117d1
 8011588:	08011949 	.word	0x08011949
 801158c:	08011973 	.word	0x08011973
 8011590:	08011a97 	.word	0x08011a97
 8011594:	08011949 	.word	0x08011949
 8011598:	08011b23 	.word	0x08011b23
 801159c:	08011bb3 	.word	0x08011bb3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80115a0:	4b4f      	ldr	r3, [pc, #316]	; (80116e0 <tcp_process+0x298>)
 80115a2:	781b      	ldrb	r3, [r3, #0]
 80115a4:	f003 0310 	and.w	r3, r3, #16
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	f000 80e4 	beq.w	8011776 <tcp_process+0x32e>
 80115ae:	4b4c      	ldr	r3, [pc, #304]	; (80116e0 <tcp_process+0x298>)
 80115b0:	781b      	ldrb	r3, [r3, #0]
 80115b2:	f003 0302 	and.w	r3, r3, #2
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	f000 80dd 	beq.w	8011776 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80115c0:	1c5a      	adds	r2, r3, #1
 80115c2:	4b48      	ldr	r3, [pc, #288]	; (80116e4 <tcp_process+0x29c>)
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	429a      	cmp	r2, r3
 80115c8:	f040 80d5 	bne.w	8011776 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80115cc:	4b46      	ldr	r3, [pc, #280]	; (80116e8 <tcp_process+0x2a0>)
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	1c5a      	adds	r2, r3, #1
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80115de:	4b41      	ldr	r3, [pc, #260]	; (80116e4 <tcp_process+0x29c>)
 80115e0:	681a      	ldr	r2, [r3, #0]
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80115e6:	4b44      	ldr	r3, [pc, #272]	; (80116f8 <tcp_process+0x2b0>)
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	89db      	ldrh	r3, [r3, #14]
 80115ec:	b29a      	uxth	r2, r3
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011600:	4b39      	ldr	r3, [pc, #228]	; (80116e8 <tcp_process+0x2a0>)
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	1e5a      	subs	r2, r3, #1
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	2204      	movs	r2, #4
 801160e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	3304      	adds	r3, #4
 8011618:	4618      	mov	r0, r3
 801161a:	f005 faa9 	bl	8016b70 <ip4_route>
 801161e:	4601      	mov	r1, r0
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	3304      	adds	r3, #4
 8011624:	461a      	mov	r2, r3
 8011626:	4620      	mov	r0, r4
 8011628:	f7ff f88c 	bl	8010744 <tcp_eff_send_mss_netif>
 801162c:	4603      	mov	r3, r0
 801162e:	461a      	mov	r2, r3
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011638:	009a      	lsls	r2, r3, #2
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801163e:	005b      	lsls	r3, r3, #1
 8011640:	f241 111c 	movw	r1, #4380	; 0x111c
 8011644:	428b      	cmp	r3, r1
 8011646:	bf38      	it	cc
 8011648:	460b      	movcc	r3, r1
 801164a:	429a      	cmp	r2, r3
 801164c:	d204      	bcs.n	8011658 <tcp_process+0x210>
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011652:	009b      	lsls	r3, r3, #2
 8011654:	b29b      	uxth	r3, r3
 8011656:	e00d      	b.n	8011674 <tcp_process+0x22c>
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801165c:	005b      	lsls	r3, r3, #1
 801165e:	f241 121c 	movw	r2, #4380	; 0x111c
 8011662:	4293      	cmp	r3, r2
 8011664:	d904      	bls.n	8011670 <tcp_process+0x228>
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801166a:	005b      	lsls	r3, r3, #1
 801166c:	b29b      	uxth	r3, r3
 801166e:	e001      	b.n	8011674 <tcp_process+0x22c>
 8011670:	f241 131c 	movw	r3, #4380	; 0x111c
 8011674:	687a      	ldr	r2, [r7, #4]
 8011676:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011680:	2b00      	cmp	r3, #0
 8011682:	d106      	bne.n	8011692 <tcp_process+0x24a>
 8011684:	4b13      	ldr	r3, [pc, #76]	; (80116d4 <tcp_process+0x28c>)
 8011686:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801168a:	491c      	ldr	r1, [pc, #112]	; (80116fc <tcp_process+0x2b4>)
 801168c:	4813      	ldr	r0, [pc, #76]	; (80116dc <tcp_process+0x294>)
 801168e:	f006 ffdf 	bl	8018650 <iprintf>
        --pcb->snd_queuelen;
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011698:	3b01      	subs	r3, #1
 801169a:	b29a      	uxth	r2, r3
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80116a6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80116a8:	69fb      	ldr	r3, [r7, #28]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d12a      	bne.n	8011704 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116b2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80116b4:	69fb      	ldr	r3, [r7, #28]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d106      	bne.n	80116c8 <tcp_process+0x280>
 80116ba:	4b06      	ldr	r3, [pc, #24]	; (80116d4 <tcp_process+0x28c>)
 80116bc:	f44f 725d 	mov.w	r2, #884	; 0x374
 80116c0:	490f      	ldr	r1, [pc, #60]	; (8011700 <tcp_process+0x2b8>)
 80116c2:	4806      	ldr	r0, [pc, #24]	; (80116dc <tcp_process+0x294>)
 80116c4:	f006 ffc4 	bl	8018650 <iprintf>
          pcb->unsent = rseg->next;
 80116c8:	69fb      	ldr	r3, [r7, #28]
 80116ca:	681a      	ldr	r2, [r3, #0]
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	66da      	str	r2, [r3, #108]	; 0x6c
 80116d0:	e01c      	b.n	801170c <tcp_process+0x2c4>
 80116d2:	bf00      	nop
 80116d4:	0801bda0 	.word	0x0801bda0
 80116d8:	0801bfd8 	.word	0x0801bfd8
 80116dc:	0801bdec 	.word	0x0801bdec
 80116e0:	2000d290 	.word	0x2000d290
 80116e4:	2000d288 	.word	0x2000d288
 80116e8:	2000d284 	.word	0x2000d284
 80116ec:	0801bff4 	.word	0x0801bff4
 80116f0:	2000d291 	.word	0x2000d291
 80116f4:	2000d24c 	.word	0x2000d24c
 80116f8:	2000d274 	.word	0x2000d274
 80116fc:	0801c014 	.word	0x0801c014
 8011700:	0801c02c 	.word	0x0801c02c
        } else {
          pcb->unacked = rseg->next;
 8011704:	69fb      	ldr	r3, [r7, #28]
 8011706:	681a      	ldr	r2, [r3, #0]
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801170c:	69f8      	ldr	r0, [r7, #28]
 801170e:	f7fe fc54 	bl	800ffba <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011716:	2b00      	cmp	r3, #0
 8011718:	d104      	bne.n	8011724 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011720:	861a      	strh	r2, [r3, #48]	; 0x30
 8011722:	e006      	b.n	8011732 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	2200      	movs	r2, #0
 8011728:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	2200      	movs	r2, #0
 801172e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011738:	2b00      	cmp	r3, #0
 801173a:	d00a      	beq.n	8011752 <tcp_process+0x30a>
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011742:	687a      	ldr	r2, [r7, #4]
 8011744:	6910      	ldr	r0, [r2, #16]
 8011746:	2200      	movs	r2, #0
 8011748:	6879      	ldr	r1, [r7, #4]
 801174a:	4798      	blx	r3
 801174c:	4603      	mov	r3, r0
 801174e:	76bb      	strb	r3, [r7, #26]
 8011750:	e001      	b.n	8011756 <tcp_process+0x30e>
 8011752:	2300      	movs	r3, #0
 8011754:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8011756:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801175a:	f113 0f0d 	cmn.w	r3, #13
 801175e:	d102      	bne.n	8011766 <tcp_process+0x31e>
          return ERR_ABRT;
 8011760:	f06f 030c 	mvn.w	r3, #12
 8011764:	e250      	b.n	8011c08 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	8b5b      	ldrh	r3, [r3, #26]
 801176a:	f043 0302 	orr.w	r3, r3, #2
 801176e:	b29a      	uxth	r2, r3
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8011774:	e23a      	b.n	8011bec <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8011776:	4b98      	ldr	r3, [pc, #608]	; (80119d8 <tcp_process+0x590>)
 8011778:	781b      	ldrb	r3, [r3, #0]
 801177a:	f003 0310 	and.w	r3, r3, #16
 801177e:	2b00      	cmp	r3, #0
 8011780:	f000 8234 	beq.w	8011bec <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011784:	4b95      	ldr	r3, [pc, #596]	; (80119dc <tcp_process+0x594>)
 8011786:	6819      	ldr	r1, [r3, #0]
 8011788:	4b95      	ldr	r3, [pc, #596]	; (80119e0 <tcp_process+0x598>)
 801178a:	881b      	ldrh	r3, [r3, #0]
 801178c:	461a      	mov	r2, r3
 801178e:	4b95      	ldr	r3, [pc, #596]	; (80119e4 <tcp_process+0x59c>)
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011794:	4b94      	ldr	r3, [pc, #592]	; (80119e8 <tcp_process+0x5a0>)
 8011796:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011798:	885b      	ldrh	r3, [r3, #2]
 801179a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801179c:	4a92      	ldr	r2, [pc, #584]	; (80119e8 <tcp_process+0x5a0>)
 801179e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80117a0:	8812      	ldrh	r2, [r2, #0]
 80117a2:	b292      	uxth	r2, r2
 80117a4:	9202      	str	r2, [sp, #8]
 80117a6:	9301      	str	r3, [sp, #4]
 80117a8:	4b90      	ldr	r3, [pc, #576]	; (80119ec <tcp_process+0x5a4>)
 80117aa:	9300      	str	r3, [sp, #0]
 80117ac:	4b90      	ldr	r3, [pc, #576]	; (80119f0 <tcp_process+0x5a8>)
 80117ae:	4602      	mov	r2, r0
 80117b0:	6878      	ldr	r0, [r7, #4]
 80117b2:	f003 f8dd 	bl	8014970 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80117bc:	2b05      	cmp	r3, #5
 80117be:	f200 8215 	bhi.w	8011bec <tcp_process+0x7a4>
          pcb->rtime = 0;
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	2200      	movs	r2, #0
 80117c6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80117c8:	6878      	ldr	r0, [r7, #4]
 80117ca:	f002 fea7 	bl	801451c <tcp_rexmit_rto>
      break;
 80117ce:	e20d      	b.n	8011bec <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80117d0:	4b81      	ldr	r3, [pc, #516]	; (80119d8 <tcp_process+0x590>)
 80117d2:	781b      	ldrb	r3, [r3, #0]
 80117d4:	f003 0310 	and.w	r3, r3, #16
 80117d8:	2b00      	cmp	r3, #0
 80117da:	f000 80a1 	beq.w	8011920 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80117de:	4b7f      	ldr	r3, [pc, #508]	; (80119dc <tcp_process+0x594>)
 80117e0:	681a      	ldr	r2, [r3, #0]
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80117e6:	1ad3      	subs	r3, r2, r3
 80117e8:	3b01      	subs	r3, #1
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	db7e      	blt.n	80118ec <tcp_process+0x4a4>
 80117ee:	4b7b      	ldr	r3, [pc, #492]	; (80119dc <tcp_process+0x594>)
 80117f0:	681a      	ldr	r2, [r3, #0]
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80117f6:	1ad3      	subs	r3, r2, r3
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	dc77      	bgt.n	80118ec <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	2204      	movs	r2, #4
 8011800:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011806:	2b00      	cmp	r3, #0
 8011808:	d102      	bne.n	8011810 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801180a:	23fa      	movs	r3, #250	; 0xfa
 801180c:	76bb      	strb	r3, [r7, #26]
 801180e:	e01d      	b.n	801184c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011814:	699b      	ldr	r3, [r3, #24]
 8011816:	2b00      	cmp	r3, #0
 8011818:	d106      	bne.n	8011828 <tcp_process+0x3e0>
 801181a:	4b76      	ldr	r3, [pc, #472]	; (80119f4 <tcp_process+0x5ac>)
 801181c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8011820:	4975      	ldr	r1, [pc, #468]	; (80119f8 <tcp_process+0x5b0>)
 8011822:	4876      	ldr	r0, [pc, #472]	; (80119fc <tcp_process+0x5b4>)
 8011824:	f006 ff14 	bl	8018650 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801182c:	699b      	ldr	r3, [r3, #24]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d00a      	beq.n	8011848 <tcp_process+0x400>
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011836:	699b      	ldr	r3, [r3, #24]
 8011838:	687a      	ldr	r2, [r7, #4]
 801183a:	6910      	ldr	r0, [r2, #16]
 801183c:	2200      	movs	r2, #0
 801183e:	6879      	ldr	r1, [r7, #4]
 8011840:	4798      	blx	r3
 8011842:	4603      	mov	r3, r0
 8011844:	76bb      	strb	r3, [r7, #26]
 8011846:	e001      	b.n	801184c <tcp_process+0x404>
 8011848:	23f0      	movs	r3, #240	; 0xf0
 801184a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801184c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011850:	2b00      	cmp	r3, #0
 8011852:	d00a      	beq.n	801186a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8011854:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011858:	f113 0f0d 	cmn.w	r3, #13
 801185c:	d002      	beq.n	8011864 <tcp_process+0x41c>
              tcp_abort(pcb);
 801185e:	6878      	ldr	r0, [r7, #4]
 8011860:	f7fd fde2 	bl	800f428 <tcp_abort>
            }
            return ERR_ABRT;
 8011864:	f06f 030c 	mvn.w	r3, #12
 8011868:	e1ce      	b.n	8011c08 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801186a:	6878      	ldr	r0, [r7, #4]
 801186c:	f000 fae0 	bl	8011e30 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8011870:	4b63      	ldr	r3, [pc, #396]	; (8011a00 <tcp_process+0x5b8>)
 8011872:	881b      	ldrh	r3, [r3, #0]
 8011874:	2b00      	cmp	r3, #0
 8011876:	d005      	beq.n	8011884 <tcp_process+0x43c>
            recv_acked--;
 8011878:	4b61      	ldr	r3, [pc, #388]	; (8011a00 <tcp_process+0x5b8>)
 801187a:	881b      	ldrh	r3, [r3, #0]
 801187c:	3b01      	subs	r3, #1
 801187e:	b29a      	uxth	r2, r3
 8011880:	4b5f      	ldr	r3, [pc, #380]	; (8011a00 <tcp_process+0x5b8>)
 8011882:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011888:	009a      	lsls	r2, r3, #2
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801188e:	005b      	lsls	r3, r3, #1
 8011890:	f241 111c 	movw	r1, #4380	; 0x111c
 8011894:	428b      	cmp	r3, r1
 8011896:	bf38      	it	cc
 8011898:	460b      	movcc	r3, r1
 801189a:	429a      	cmp	r2, r3
 801189c:	d204      	bcs.n	80118a8 <tcp_process+0x460>
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118a2:	009b      	lsls	r3, r3, #2
 80118a4:	b29b      	uxth	r3, r3
 80118a6:	e00d      	b.n	80118c4 <tcp_process+0x47c>
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118ac:	005b      	lsls	r3, r3, #1
 80118ae:	f241 121c 	movw	r2, #4380	; 0x111c
 80118b2:	4293      	cmp	r3, r2
 80118b4:	d904      	bls.n	80118c0 <tcp_process+0x478>
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118ba:	005b      	lsls	r3, r3, #1
 80118bc:	b29b      	uxth	r3, r3
 80118be:	e001      	b.n	80118c4 <tcp_process+0x47c>
 80118c0:	f241 131c 	movw	r3, #4380	; 0x111c
 80118c4:	687a      	ldr	r2, [r7, #4]
 80118c6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80118ca:	4b4e      	ldr	r3, [pc, #312]	; (8011a04 <tcp_process+0x5bc>)
 80118cc:	781b      	ldrb	r3, [r3, #0]
 80118ce:	f003 0320 	and.w	r3, r3, #32
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d037      	beq.n	8011946 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	8b5b      	ldrh	r3, [r3, #26]
 80118da:	f043 0302 	orr.w	r3, r3, #2
 80118de:	b29a      	uxth	r2, r3
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	2207      	movs	r2, #7
 80118e8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80118ea:	e02c      	b.n	8011946 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80118ec:	4b3b      	ldr	r3, [pc, #236]	; (80119dc <tcp_process+0x594>)
 80118ee:	6819      	ldr	r1, [r3, #0]
 80118f0:	4b3b      	ldr	r3, [pc, #236]	; (80119e0 <tcp_process+0x598>)
 80118f2:	881b      	ldrh	r3, [r3, #0]
 80118f4:	461a      	mov	r2, r3
 80118f6:	4b3b      	ldr	r3, [pc, #236]	; (80119e4 <tcp_process+0x59c>)
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80118fc:	4b3a      	ldr	r3, [pc, #232]	; (80119e8 <tcp_process+0x5a0>)
 80118fe:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011900:	885b      	ldrh	r3, [r3, #2]
 8011902:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011904:	4a38      	ldr	r2, [pc, #224]	; (80119e8 <tcp_process+0x5a0>)
 8011906:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011908:	8812      	ldrh	r2, [r2, #0]
 801190a:	b292      	uxth	r2, r2
 801190c:	9202      	str	r2, [sp, #8]
 801190e:	9301      	str	r3, [sp, #4]
 8011910:	4b36      	ldr	r3, [pc, #216]	; (80119ec <tcp_process+0x5a4>)
 8011912:	9300      	str	r3, [sp, #0]
 8011914:	4b36      	ldr	r3, [pc, #216]	; (80119f0 <tcp_process+0x5a8>)
 8011916:	4602      	mov	r2, r0
 8011918:	6878      	ldr	r0, [r7, #4]
 801191a:	f003 f829 	bl	8014970 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801191e:	e167      	b.n	8011bf0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011920:	4b2d      	ldr	r3, [pc, #180]	; (80119d8 <tcp_process+0x590>)
 8011922:	781b      	ldrb	r3, [r3, #0]
 8011924:	f003 0302 	and.w	r3, r3, #2
 8011928:	2b00      	cmp	r3, #0
 801192a:	f000 8161 	beq.w	8011bf0 <tcp_process+0x7a8>
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011932:	1e5a      	subs	r2, r3, #1
 8011934:	4b2b      	ldr	r3, [pc, #172]	; (80119e4 <tcp_process+0x59c>)
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	429a      	cmp	r2, r3
 801193a:	f040 8159 	bne.w	8011bf0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801193e:	6878      	ldr	r0, [r7, #4]
 8011940:	f002 fe0e 	bl	8014560 <tcp_rexmit>
      break;
 8011944:	e154      	b.n	8011bf0 <tcp_process+0x7a8>
 8011946:	e153      	b.n	8011bf0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011948:	6878      	ldr	r0, [r7, #4]
 801194a:	f000 fa71 	bl	8011e30 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801194e:	4b2d      	ldr	r3, [pc, #180]	; (8011a04 <tcp_process+0x5bc>)
 8011950:	781b      	ldrb	r3, [r3, #0]
 8011952:	f003 0320 	and.w	r3, r3, #32
 8011956:	2b00      	cmp	r3, #0
 8011958:	f000 814c 	beq.w	8011bf4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	8b5b      	ldrh	r3, [r3, #26]
 8011960:	f043 0302 	orr.w	r3, r3, #2
 8011964:	b29a      	uxth	r2, r3
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	2207      	movs	r2, #7
 801196e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011970:	e140      	b.n	8011bf4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8011972:	6878      	ldr	r0, [r7, #4]
 8011974:	f000 fa5c 	bl	8011e30 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011978:	4b22      	ldr	r3, [pc, #136]	; (8011a04 <tcp_process+0x5bc>)
 801197a:	781b      	ldrb	r3, [r3, #0]
 801197c:	f003 0320 	and.w	r3, r3, #32
 8011980:	2b00      	cmp	r3, #0
 8011982:	d071      	beq.n	8011a68 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011984:	4b14      	ldr	r3, [pc, #80]	; (80119d8 <tcp_process+0x590>)
 8011986:	781b      	ldrb	r3, [r3, #0]
 8011988:	f003 0310 	and.w	r3, r3, #16
 801198c:	2b00      	cmp	r3, #0
 801198e:	d060      	beq.n	8011a52 <tcp_process+0x60a>
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011994:	4b11      	ldr	r3, [pc, #68]	; (80119dc <tcp_process+0x594>)
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	429a      	cmp	r2, r3
 801199a:	d15a      	bne.n	8011a52 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d156      	bne.n	8011a52 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	8b5b      	ldrh	r3, [r3, #26]
 80119a8:	f043 0302 	orr.w	r3, r3, #2
 80119ac:	b29a      	uxth	r2, r3
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80119b2:	6878      	ldr	r0, [r7, #4]
 80119b4:	f7fe fdbc 	bl	8010530 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80119b8:	4b13      	ldr	r3, [pc, #76]	; (8011a08 <tcp_process+0x5c0>)
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	687a      	ldr	r2, [r7, #4]
 80119be:	429a      	cmp	r2, r3
 80119c0:	d105      	bne.n	80119ce <tcp_process+0x586>
 80119c2:	4b11      	ldr	r3, [pc, #68]	; (8011a08 <tcp_process+0x5c0>)
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	68db      	ldr	r3, [r3, #12]
 80119c8:	4a0f      	ldr	r2, [pc, #60]	; (8011a08 <tcp_process+0x5c0>)
 80119ca:	6013      	str	r3, [r2, #0]
 80119cc:	e02e      	b.n	8011a2c <tcp_process+0x5e4>
 80119ce:	4b0e      	ldr	r3, [pc, #56]	; (8011a08 <tcp_process+0x5c0>)
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	617b      	str	r3, [r7, #20]
 80119d4:	e027      	b.n	8011a26 <tcp_process+0x5de>
 80119d6:	bf00      	nop
 80119d8:	2000d290 	.word	0x2000d290
 80119dc:	2000d288 	.word	0x2000d288
 80119e0:	2000d28e 	.word	0x2000d28e
 80119e4:	2000d284 	.word	0x2000d284
 80119e8:	2000d274 	.word	0x2000d274
 80119ec:	20007948 	.word	0x20007948
 80119f0:	2000794c 	.word	0x2000794c
 80119f4:	0801bda0 	.word	0x0801bda0
 80119f8:	0801c040 	.word	0x0801c040
 80119fc:	0801bdec 	.word	0x0801bdec
 8011a00:	2000d28c 	.word	0x2000d28c
 8011a04:	2000d291 	.word	0x2000d291
 8011a08:	2000d258 	.word	0x2000d258
 8011a0c:	697b      	ldr	r3, [r7, #20]
 8011a0e:	68db      	ldr	r3, [r3, #12]
 8011a10:	687a      	ldr	r2, [r7, #4]
 8011a12:	429a      	cmp	r2, r3
 8011a14:	d104      	bne.n	8011a20 <tcp_process+0x5d8>
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	68da      	ldr	r2, [r3, #12]
 8011a1a:	697b      	ldr	r3, [r7, #20]
 8011a1c:	60da      	str	r2, [r3, #12]
 8011a1e:	e005      	b.n	8011a2c <tcp_process+0x5e4>
 8011a20:	697b      	ldr	r3, [r7, #20]
 8011a22:	68db      	ldr	r3, [r3, #12]
 8011a24:	617b      	str	r3, [r7, #20]
 8011a26:	697b      	ldr	r3, [r7, #20]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d1ef      	bne.n	8011a0c <tcp_process+0x5c4>
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	2200      	movs	r2, #0
 8011a30:	60da      	str	r2, [r3, #12]
 8011a32:	4b77      	ldr	r3, [pc, #476]	; (8011c10 <tcp_process+0x7c8>)
 8011a34:	2201      	movs	r2, #1
 8011a36:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	220a      	movs	r2, #10
 8011a3c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011a3e:	4b75      	ldr	r3, [pc, #468]	; (8011c14 <tcp_process+0x7cc>)
 8011a40:	681a      	ldr	r2, [r3, #0]
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	60da      	str	r2, [r3, #12]
 8011a46:	4a73      	ldr	r2, [pc, #460]	; (8011c14 <tcp_process+0x7cc>)
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	6013      	str	r3, [r2, #0]
 8011a4c:	f003 f952 	bl	8014cf4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011a50:	e0d2      	b.n	8011bf8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	8b5b      	ldrh	r3, [r3, #26]
 8011a56:	f043 0302 	orr.w	r3, r3, #2
 8011a5a:	b29a      	uxth	r2, r3
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	2208      	movs	r2, #8
 8011a64:	751a      	strb	r2, [r3, #20]
      break;
 8011a66:	e0c7      	b.n	8011bf8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011a68:	4b6b      	ldr	r3, [pc, #428]	; (8011c18 <tcp_process+0x7d0>)
 8011a6a:	781b      	ldrb	r3, [r3, #0]
 8011a6c:	f003 0310 	and.w	r3, r3, #16
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	f000 80c1 	beq.w	8011bf8 <tcp_process+0x7b0>
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011a7a:	4b68      	ldr	r3, [pc, #416]	; (8011c1c <tcp_process+0x7d4>)
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	429a      	cmp	r2, r3
 8011a80:	f040 80ba 	bne.w	8011bf8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	f040 80b5 	bne.w	8011bf8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	2206      	movs	r2, #6
 8011a92:	751a      	strb	r2, [r3, #20]
      break;
 8011a94:	e0b0      	b.n	8011bf8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8011a96:	6878      	ldr	r0, [r7, #4]
 8011a98:	f000 f9ca 	bl	8011e30 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011a9c:	4b60      	ldr	r3, [pc, #384]	; (8011c20 <tcp_process+0x7d8>)
 8011a9e:	781b      	ldrb	r3, [r3, #0]
 8011aa0:	f003 0320 	and.w	r3, r3, #32
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	f000 80a9 	beq.w	8011bfc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	8b5b      	ldrh	r3, [r3, #26]
 8011aae:	f043 0302 	orr.w	r3, r3, #2
 8011ab2:	b29a      	uxth	r2, r3
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011ab8:	6878      	ldr	r0, [r7, #4]
 8011aba:	f7fe fd39 	bl	8010530 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011abe:	4b59      	ldr	r3, [pc, #356]	; (8011c24 <tcp_process+0x7dc>)
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	687a      	ldr	r2, [r7, #4]
 8011ac4:	429a      	cmp	r2, r3
 8011ac6:	d105      	bne.n	8011ad4 <tcp_process+0x68c>
 8011ac8:	4b56      	ldr	r3, [pc, #344]	; (8011c24 <tcp_process+0x7dc>)
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	68db      	ldr	r3, [r3, #12]
 8011ace:	4a55      	ldr	r2, [pc, #340]	; (8011c24 <tcp_process+0x7dc>)
 8011ad0:	6013      	str	r3, [r2, #0]
 8011ad2:	e013      	b.n	8011afc <tcp_process+0x6b4>
 8011ad4:	4b53      	ldr	r3, [pc, #332]	; (8011c24 <tcp_process+0x7dc>)
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	613b      	str	r3, [r7, #16]
 8011ada:	e00c      	b.n	8011af6 <tcp_process+0x6ae>
 8011adc:	693b      	ldr	r3, [r7, #16]
 8011ade:	68db      	ldr	r3, [r3, #12]
 8011ae0:	687a      	ldr	r2, [r7, #4]
 8011ae2:	429a      	cmp	r2, r3
 8011ae4:	d104      	bne.n	8011af0 <tcp_process+0x6a8>
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	68da      	ldr	r2, [r3, #12]
 8011aea:	693b      	ldr	r3, [r7, #16]
 8011aec:	60da      	str	r2, [r3, #12]
 8011aee:	e005      	b.n	8011afc <tcp_process+0x6b4>
 8011af0:	693b      	ldr	r3, [r7, #16]
 8011af2:	68db      	ldr	r3, [r3, #12]
 8011af4:	613b      	str	r3, [r7, #16]
 8011af6:	693b      	ldr	r3, [r7, #16]
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d1ef      	bne.n	8011adc <tcp_process+0x694>
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	2200      	movs	r2, #0
 8011b00:	60da      	str	r2, [r3, #12]
 8011b02:	4b43      	ldr	r3, [pc, #268]	; (8011c10 <tcp_process+0x7c8>)
 8011b04:	2201      	movs	r2, #1
 8011b06:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	220a      	movs	r2, #10
 8011b0c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011b0e:	4b41      	ldr	r3, [pc, #260]	; (8011c14 <tcp_process+0x7cc>)
 8011b10:	681a      	ldr	r2, [r3, #0]
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	60da      	str	r2, [r3, #12]
 8011b16:	4a3f      	ldr	r2, [pc, #252]	; (8011c14 <tcp_process+0x7cc>)
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	6013      	str	r3, [r2, #0]
 8011b1c:	f003 f8ea 	bl	8014cf4 <tcp_timer_needed>
      }
      break;
 8011b20:	e06c      	b.n	8011bfc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8011b22:	6878      	ldr	r0, [r7, #4]
 8011b24:	f000 f984 	bl	8011e30 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011b28:	4b3b      	ldr	r3, [pc, #236]	; (8011c18 <tcp_process+0x7d0>)
 8011b2a:	781b      	ldrb	r3, [r3, #0]
 8011b2c:	f003 0310 	and.w	r3, r3, #16
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d065      	beq.n	8011c00 <tcp_process+0x7b8>
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011b38:	4b38      	ldr	r3, [pc, #224]	; (8011c1c <tcp_process+0x7d4>)
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	429a      	cmp	r2, r3
 8011b3e:	d15f      	bne.n	8011c00 <tcp_process+0x7b8>
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d15b      	bne.n	8011c00 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011b48:	6878      	ldr	r0, [r7, #4]
 8011b4a:	f7fe fcf1 	bl	8010530 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011b4e:	4b35      	ldr	r3, [pc, #212]	; (8011c24 <tcp_process+0x7dc>)
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	687a      	ldr	r2, [r7, #4]
 8011b54:	429a      	cmp	r2, r3
 8011b56:	d105      	bne.n	8011b64 <tcp_process+0x71c>
 8011b58:	4b32      	ldr	r3, [pc, #200]	; (8011c24 <tcp_process+0x7dc>)
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	68db      	ldr	r3, [r3, #12]
 8011b5e:	4a31      	ldr	r2, [pc, #196]	; (8011c24 <tcp_process+0x7dc>)
 8011b60:	6013      	str	r3, [r2, #0]
 8011b62:	e013      	b.n	8011b8c <tcp_process+0x744>
 8011b64:	4b2f      	ldr	r3, [pc, #188]	; (8011c24 <tcp_process+0x7dc>)
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	60fb      	str	r3, [r7, #12]
 8011b6a:	e00c      	b.n	8011b86 <tcp_process+0x73e>
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	68db      	ldr	r3, [r3, #12]
 8011b70:	687a      	ldr	r2, [r7, #4]
 8011b72:	429a      	cmp	r2, r3
 8011b74:	d104      	bne.n	8011b80 <tcp_process+0x738>
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	68da      	ldr	r2, [r3, #12]
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	60da      	str	r2, [r3, #12]
 8011b7e:	e005      	b.n	8011b8c <tcp_process+0x744>
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	68db      	ldr	r3, [r3, #12]
 8011b84:	60fb      	str	r3, [r7, #12]
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d1ef      	bne.n	8011b6c <tcp_process+0x724>
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	2200      	movs	r2, #0
 8011b90:	60da      	str	r2, [r3, #12]
 8011b92:	4b1f      	ldr	r3, [pc, #124]	; (8011c10 <tcp_process+0x7c8>)
 8011b94:	2201      	movs	r2, #1
 8011b96:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	220a      	movs	r2, #10
 8011b9c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011b9e:	4b1d      	ldr	r3, [pc, #116]	; (8011c14 <tcp_process+0x7cc>)
 8011ba0:	681a      	ldr	r2, [r3, #0]
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	60da      	str	r2, [r3, #12]
 8011ba6:	4a1b      	ldr	r2, [pc, #108]	; (8011c14 <tcp_process+0x7cc>)
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	6013      	str	r3, [r2, #0]
 8011bac:	f003 f8a2 	bl	8014cf4 <tcp_timer_needed>
      }
      break;
 8011bb0:	e026      	b.n	8011c00 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011bb2:	6878      	ldr	r0, [r7, #4]
 8011bb4:	f000 f93c 	bl	8011e30 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011bb8:	4b17      	ldr	r3, [pc, #92]	; (8011c18 <tcp_process+0x7d0>)
 8011bba:	781b      	ldrb	r3, [r3, #0]
 8011bbc:	f003 0310 	and.w	r3, r3, #16
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d01f      	beq.n	8011c04 <tcp_process+0x7bc>
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011bc8:	4b14      	ldr	r3, [pc, #80]	; (8011c1c <tcp_process+0x7d4>)
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	429a      	cmp	r2, r3
 8011bce:	d119      	bne.n	8011c04 <tcp_process+0x7bc>
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d115      	bne.n	8011c04 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011bd8:	4b11      	ldr	r3, [pc, #68]	; (8011c20 <tcp_process+0x7d8>)
 8011bda:	781b      	ldrb	r3, [r3, #0]
 8011bdc:	f043 0310 	orr.w	r3, r3, #16
 8011be0:	b2da      	uxtb	r2, r3
 8011be2:	4b0f      	ldr	r3, [pc, #60]	; (8011c20 <tcp_process+0x7d8>)
 8011be4:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011be6:	e00d      	b.n	8011c04 <tcp_process+0x7bc>
    default:
      break;
 8011be8:	bf00      	nop
 8011bea:	e00c      	b.n	8011c06 <tcp_process+0x7be>
      break;
 8011bec:	bf00      	nop
 8011bee:	e00a      	b.n	8011c06 <tcp_process+0x7be>
      break;
 8011bf0:	bf00      	nop
 8011bf2:	e008      	b.n	8011c06 <tcp_process+0x7be>
      break;
 8011bf4:	bf00      	nop
 8011bf6:	e006      	b.n	8011c06 <tcp_process+0x7be>
      break;
 8011bf8:	bf00      	nop
 8011bfa:	e004      	b.n	8011c06 <tcp_process+0x7be>
      break;
 8011bfc:	bf00      	nop
 8011bfe:	e002      	b.n	8011c06 <tcp_process+0x7be>
      break;
 8011c00:	bf00      	nop
 8011c02:	e000      	b.n	8011c06 <tcp_process+0x7be>
      break;
 8011c04:	bf00      	nop
  }
  return ERR_OK;
 8011c06:	2300      	movs	r3, #0
}
 8011c08:	4618      	mov	r0, r3
 8011c0a:	3724      	adds	r7, #36	; 0x24
 8011c0c:	46bd      	mov	sp, r7
 8011c0e:	bd90      	pop	{r4, r7, pc}
 8011c10:	2000d260 	.word	0x2000d260
 8011c14:	2000d25c 	.word	0x2000d25c
 8011c18:	2000d290 	.word	0x2000d290
 8011c1c:	2000d288 	.word	0x2000d288
 8011c20:	2000d291 	.word	0x2000d291
 8011c24:	2000d258 	.word	0x2000d258

08011c28 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011c28:	b590      	push	{r4, r7, lr}
 8011c2a:	b085      	sub	sp, #20
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	6078      	str	r0, [r7, #4]
 8011c30:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d106      	bne.n	8011c46 <tcp_oos_insert_segment+0x1e>
 8011c38:	4b3b      	ldr	r3, [pc, #236]	; (8011d28 <tcp_oos_insert_segment+0x100>)
 8011c3a:	f240 421f 	movw	r2, #1055	; 0x41f
 8011c3e:	493b      	ldr	r1, [pc, #236]	; (8011d2c <tcp_oos_insert_segment+0x104>)
 8011c40:	483b      	ldr	r0, [pc, #236]	; (8011d30 <tcp_oos_insert_segment+0x108>)
 8011c42:	f006 fd05 	bl	8018650 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	68db      	ldr	r3, [r3, #12]
 8011c4a:	899b      	ldrh	r3, [r3, #12]
 8011c4c:	b29b      	uxth	r3, r3
 8011c4e:	4618      	mov	r0, r3
 8011c50:	f7fb fa0c 	bl	800d06c <lwip_htons>
 8011c54:	4603      	mov	r3, r0
 8011c56:	b2db      	uxtb	r3, r3
 8011c58:	f003 0301 	and.w	r3, r3, #1
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d028      	beq.n	8011cb2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011c60:	6838      	ldr	r0, [r7, #0]
 8011c62:	f7fe f995 	bl	800ff90 <tcp_segs_free>
    next = NULL;
 8011c66:	2300      	movs	r3, #0
 8011c68:	603b      	str	r3, [r7, #0]
 8011c6a:	e056      	b.n	8011d1a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011c6c:	683b      	ldr	r3, [r7, #0]
 8011c6e:	68db      	ldr	r3, [r3, #12]
 8011c70:	899b      	ldrh	r3, [r3, #12]
 8011c72:	b29b      	uxth	r3, r3
 8011c74:	4618      	mov	r0, r3
 8011c76:	f7fb f9f9 	bl	800d06c <lwip_htons>
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	b2db      	uxtb	r3, r3
 8011c7e:	f003 0301 	and.w	r3, r3, #1
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d00d      	beq.n	8011ca2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	68db      	ldr	r3, [r3, #12]
 8011c8a:	899b      	ldrh	r3, [r3, #12]
 8011c8c:	b29c      	uxth	r4, r3
 8011c8e:	2001      	movs	r0, #1
 8011c90:	f7fb f9ec 	bl	800d06c <lwip_htons>
 8011c94:	4603      	mov	r3, r0
 8011c96:	461a      	mov	r2, r3
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	68db      	ldr	r3, [r3, #12]
 8011c9c:	4322      	orrs	r2, r4
 8011c9e:	b292      	uxth	r2, r2
 8011ca0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8011ca2:	683b      	ldr	r3, [r7, #0]
 8011ca4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8011ca6:	683b      	ldr	r3, [r7, #0]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011cac:	68f8      	ldr	r0, [r7, #12]
 8011cae:	f7fe f984 	bl	800ffba <tcp_seg_free>
    while (next &&
 8011cb2:	683b      	ldr	r3, [r7, #0]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d00e      	beq.n	8011cd6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	891b      	ldrh	r3, [r3, #8]
 8011cbc:	461a      	mov	r2, r3
 8011cbe:	4b1d      	ldr	r3, [pc, #116]	; (8011d34 <tcp_oos_insert_segment+0x10c>)
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	441a      	add	r2, r3
 8011cc4:	683b      	ldr	r3, [r7, #0]
 8011cc6:	68db      	ldr	r3, [r3, #12]
 8011cc8:	685b      	ldr	r3, [r3, #4]
 8011cca:	6839      	ldr	r1, [r7, #0]
 8011ccc:	8909      	ldrh	r1, [r1, #8]
 8011cce:	440b      	add	r3, r1
 8011cd0:	1ad3      	subs	r3, r2, r3
    while (next &&
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	daca      	bge.n	8011c6c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8011cd6:	683b      	ldr	r3, [r7, #0]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d01e      	beq.n	8011d1a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	891b      	ldrh	r3, [r3, #8]
 8011ce0:	461a      	mov	r2, r3
 8011ce2:	4b14      	ldr	r3, [pc, #80]	; (8011d34 <tcp_oos_insert_segment+0x10c>)
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	441a      	add	r2, r3
 8011ce8:	683b      	ldr	r3, [r7, #0]
 8011cea:	68db      	ldr	r3, [r3, #12]
 8011cec:	685b      	ldr	r3, [r3, #4]
 8011cee:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	dd12      	ble.n	8011d1a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011cf4:	683b      	ldr	r3, [r7, #0]
 8011cf6:	68db      	ldr	r3, [r3, #12]
 8011cf8:	685b      	ldr	r3, [r3, #4]
 8011cfa:	b29a      	uxth	r2, r3
 8011cfc:	4b0d      	ldr	r3, [pc, #52]	; (8011d34 <tcp_oos_insert_segment+0x10c>)
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	b29b      	uxth	r3, r3
 8011d02:	1ad3      	subs	r3, r2, r3
 8011d04:	b29a      	uxth	r2, r3
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	685a      	ldr	r2, [r3, #4]
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	891b      	ldrh	r3, [r3, #8]
 8011d12:	4619      	mov	r1, r3
 8011d14:	4610      	mov	r0, r2
 8011d16:	f7fc fbcf 	bl	800e4b8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	683a      	ldr	r2, [r7, #0]
 8011d1e:	601a      	str	r2, [r3, #0]
}
 8011d20:	bf00      	nop
 8011d22:	3714      	adds	r7, #20
 8011d24:	46bd      	mov	sp, r7
 8011d26:	bd90      	pop	{r4, r7, pc}
 8011d28:	0801bda0 	.word	0x0801bda0
 8011d2c:	0801c060 	.word	0x0801c060
 8011d30:	0801bdec 	.word	0x0801bdec
 8011d34:	2000d284 	.word	0x2000d284

08011d38 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011d38:	b5b0      	push	{r4, r5, r7, lr}
 8011d3a:	b086      	sub	sp, #24
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	60f8      	str	r0, [r7, #12]
 8011d40:	60b9      	str	r1, [r7, #8]
 8011d42:	607a      	str	r2, [r7, #4]
 8011d44:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8011d46:	e03e      	b.n	8011dc6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011d48:	68bb      	ldr	r3, [r7, #8]
 8011d4a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011d4c:	68bb      	ldr	r3, [r7, #8]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8011d52:	697b      	ldr	r3, [r7, #20]
 8011d54:	685b      	ldr	r3, [r3, #4]
 8011d56:	4618      	mov	r0, r3
 8011d58:	f7fc fdf4 	bl	800e944 <pbuf_clen>
 8011d5c:	4603      	mov	r3, r0
 8011d5e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011d66:	8a7a      	ldrh	r2, [r7, #18]
 8011d68:	429a      	cmp	r2, r3
 8011d6a:	d906      	bls.n	8011d7a <tcp_free_acked_segments+0x42>
 8011d6c:	4b2a      	ldr	r3, [pc, #168]	; (8011e18 <tcp_free_acked_segments+0xe0>)
 8011d6e:	f240 4257 	movw	r2, #1111	; 0x457
 8011d72:	492a      	ldr	r1, [pc, #168]	; (8011e1c <tcp_free_acked_segments+0xe4>)
 8011d74:	482a      	ldr	r0, [pc, #168]	; (8011e20 <tcp_free_acked_segments+0xe8>)
 8011d76:	f006 fc6b 	bl	8018650 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8011d80:	8a7b      	ldrh	r3, [r7, #18]
 8011d82:	1ad3      	subs	r3, r2, r3
 8011d84:	b29a      	uxth	r2, r3
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011d8c:	697b      	ldr	r3, [r7, #20]
 8011d8e:	891a      	ldrh	r2, [r3, #8]
 8011d90:	4b24      	ldr	r3, [pc, #144]	; (8011e24 <tcp_free_acked_segments+0xec>)
 8011d92:	881b      	ldrh	r3, [r3, #0]
 8011d94:	4413      	add	r3, r2
 8011d96:	b29a      	uxth	r2, r3
 8011d98:	4b22      	ldr	r3, [pc, #136]	; (8011e24 <tcp_free_acked_segments+0xec>)
 8011d9a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011d9c:	6978      	ldr	r0, [r7, #20]
 8011d9e:	f7fe f90c 	bl	800ffba <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d00c      	beq.n	8011dc6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011dac:	68bb      	ldr	r3, [r7, #8]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d109      	bne.n	8011dc6 <tcp_free_acked_segments+0x8e>
 8011db2:	683b      	ldr	r3, [r7, #0]
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d106      	bne.n	8011dc6 <tcp_free_acked_segments+0x8e>
 8011db8:	4b17      	ldr	r3, [pc, #92]	; (8011e18 <tcp_free_acked_segments+0xe0>)
 8011dba:	f240 4261 	movw	r2, #1121	; 0x461
 8011dbe:	491a      	ldr	r1, [pc, #104]	; (8011e28 <tcp_free_acked_segments+0xf0>)
 8011dc0:	4817      	ldr	r0, [pc, #92]	; (8011e20 <tcp_free_acked_segments+0xe8>)
 8011dc2:	f006 fc45 	bl	8018650 <iprintf>
  while (seg_list != NULL &&
 8011dc6:	68bb      	ldr	r3, [r7, #8]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d020      	beq.n	8011e0e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011dcc:	68bb      	ldr	r3, [r7, #8]
 8011dce:	68db      	ldr	r3, [r3, #12]
 8011dd0:	685b      	ldr	r3, [r3, #4]
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	f7fb f95f 	bl	800d096 <lwip_htonl>
 8011dd8:	4604      	mov	r4, r0
 8011dda:	68bb      	ldr	r3, [r7, #8]
 8011ddc:	891b      	ldrh	r3, [r3, #8]
 8011dde:	461d      	mov	r5, r3
 8011de0:	68bb      	ldr	r3, [r7, #8]
 8011de2:	68db      	ldr	r3, [r3, #12]
 8011de4:	899b      	ldrh	r3, [r3, #12]
 8011de6:	b29b      	uxth	r3, r3
 8011de8:	4618      	mov	r0, r3
 8011dea:	f7fb f93f 	bl	800d06c <lwip_htons>
 8011dee:	4603      	mov	r3, r0
 8011df0:	b2db      	uxtb	r3, r3
 8011df2:	f003 0303 	and.w	r3, r3, #3
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d001      	beq.n	8011dfe <tcp_free_acked_segments+0xc6>
 8011dfa:	2301      	movs	r3, #1
 8011dfc:	e000      	b.n	8011e00 <tcp_free_acked_segments+0xc8>
 8011dfe:	2300      	movs	r3, #0
 8011e00:	442b      	add	r3, r5
 8011e02:	18e2      	adds	r2, r4, r3
 8011e04:	4b09      	ldr	r3, [pc, #36]	; (8011e2c <tcp_free_acked_segments+0xf4>)
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	dd9c      	ble.n	8011d48 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8011e0e:	68bb      	ldr	r3, [r7, #8]
}
 8011e10:	4618      	mov	r0, r3
 8011e12:	3718      	adds	r7, #24
 8011e14:	46bd      	mov	sp, r7
 8011e16:	bdb0      	pop	{r4, r5, r7, pc}
 8011e18:	0801bda0 	.word	0x0801bda0
 8011e1c:	0801c088 	.word	0x0801c088
 8011e20:	0801bdec 	.word	0x0801bdec
 8011e24:	2000d28c 	.word	0x2000d28c
 8011e28:	0801c0b0 	.word	0x0801c0b0
 8011e2c:	2000d288 	.word	0x2000d288

08011e30 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011e30:	b5b0      	push	{r4, r5, r7, lr}
 8011e32:	b094      	sub	sp, #80	; 0x50
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011e38:	2300      	movs	r3, #0
 8011e3a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d106      	bne.n	8011e50 <tcp_receive+0x20>
 8011e42:	4b91      	ldr	r3, [pc, #580]	; (8012088 <tcp_receive+0x258>)
 8011e44:	f240 427b 	movw	r2, #1147	; 0x47b
 8011e48:	4990      	ldr	r1, [pc, #576]	; (801208c <tcp_receive+0x25c>)
 8011e4a:	4891      	ldr	r0, [pc, #580]	; (8012090 <tcp_receive+0x260>)
 8011e4c:	f006 fc00 	bl	8018650 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	7d1b      	ldrb	r3, [r3, #20]
 8011e54:	2b03      	cmp	r3, #3
 8011e56:	d806      	bhi.n	8011e66 <tcp_receive+0x36>
 8011e58:	4b8b      	ldr	r3, [pc, #556]	; (8012088 <tcp_receive+0x258>)
 8011e5a:	f240 427c 	movw	r2, #1148	; 0x47c
 8011e5e:	498d      	ldr	r1, [pc, #564]	; (8012094 <tcp_receive+0x264>)
 8011e60:	488b      	ldr	r0, [pc, #556]	; (8012090 <tcp_receive+0x260>)
 8011e62:	f006 fbf5 	bl	8018650 <iprintf>

  if (flags & TCP_ACK) {
 8011e66:	4b8c      	ldr	r3, [pc, #560]	; (8012098 <tcp_receive+0x268>)
 8011e68:	781b      	ldrb	r3, [r3, #0]
 8011e6a:	f003 0310 	and.w	r3, r3, #16
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	f000 8264 	beq.w	801233c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011e7a:	461a      	mov	r2, r3
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e80:	4413      	add	r3, r2
 8011e82:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011e88:	4b84      	ldr	r3, [pc, #528]	; (801209c <tcp_receive+0x26c>)
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	1ad3      	subs	r3, r2, r3
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	db1b      	blt.n	8011eca <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011e96:	4b81      	ldr	r3, [pc, #516]	; (801209c <tcp_receive+0x26c>)
 8011e98:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011e9a:	429a      	cmp	r2, r3
 8011e9c:	d106      	bne.n	8011eac <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011ea2:	4b7f      	ldr	r3, [pc, #508]	; (80120a0 <tcp_receive+0x270>)
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	1ad3      	subs	r3, r2, r3
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	db0e      	blt.n	8011eca <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011eb0:	4b7b      	ldr	r3, [pc, #492]	; (80120a0 <tcp_receive+0x270>)
 8011eb2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011eb4:	429a      	cmp	r2, r3
 8011eb6:	d125      	bne.n	8011f04 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011eb8:	4b7a      	ldr	r3, [pc, #488]	; (80120a4 <tcp_receive+0x274>)
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	89db      	ldrh	r3, [r3, #14]
 8011ebe:	b29a      	uxth	r2, r3
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011ec6:	429a      	cmp	r2, r3
 8011ec8:	d91c      	bls.n	8011f04 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8011eca:	4b76      	ldr	r3, [pc, #472]	; (80120a4 <tcp_receive+0x274>)
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	89db      	ldrh	r3, [r3, #14]
 8011ed0:	b29a      	uxth	r2, r3
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011ee4:	429a      	cmp	r2, r3
 8011ee6:	d205      	bcs.n	8011ef4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8011ef4:	4b69      	ldr	r3, [pc, #420]	; (801209c <tcp_receive+0x26c>)
 8011ef6:	681a      	ldr	r2, [r3, #0]
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8011efc:	4b68      	ldr	r3, [pc, #416]	; (80120a0 <tcp_receive+0x270>)
 8011efe:	681a      	ldr	r2, [r3, #0]
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8011f04:	4b66      	ldr	r3, [pc, #408]	; (80120a0 <tcp_receive+0x270>)
 8011f06:	681a      	ldr	r2, [r3, #0]
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011f0c:	1ad3      	subs	r3, r2, r3
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	dc58      	bgt.n	8011fc4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8011f12:	4b65      	ldr	r3, [pc, #404]	; (80120a8 <tcp_receive+0x278>)
 8011f14:	881b      	ldrh	r3, [r3, #0]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d14b      	bne.n	8011fb2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011f1e:	687a      	ldr	r2, [r7, #4]
 8011f20:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8011f24:	4413      	add	r3, r2
 8011f26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f28:	429a      	cmp	r2, r3
 8011f2a:	d142      	bne.n	8011fb2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	db3d      	blt.n	8011fb2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011f3a:	4b59      	ldr	r3, [pc, #356]	; (80120a0 <tcp_receive+0x270>)
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	429a      	cmp	r2, r3
 8011f40:	d137      	bne.n	8011fb2 <tcp_receive+0x182>
              found_dupack = 1;
 8011f42:	2301      	movs	r3, #1
 8011f44:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011f4c:	2bff      	cmp	r3, #255	; 0xff
 8011f4e:	d007      	beq.n	8011f60 <tcp_receive+0x130>
                ++pcb->dupacks;
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011f56:	3301      	adds	r3, #1
 8011f58:	b2da      	uxtb	r2, r3
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011f66:	2b03      	cmp	r3, #3
 8011f68:	d91b      	bls.n	8011fa2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f74:	4413      	add	r3, r2
 8011f76:	b29a      	uxth	r2, r3
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011f7e:	429a      	cmp	r2, r3
 8011f80:	d30a      	bcc.n	8011f98 <tcp_receive+0x168>
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f8c:	4413      	add	r3, r2
 8011f8e:	b29a      	uxth	r2, r3
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011f96:	e004      	b.n	8011fa2 <tcp_receive+0x172>
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011f9e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011fa8:	2b02      	cmp	r3, #2
 8011faa:	d902      	bls.n	8011fb2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011fac:	6878      	ldr	r0, [r7, #4]
 8011fae:	f002 fb43 	bl	8014638 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8011fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	f040 8161 	bne.w	801227c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	2200      	movs	r2, #0
 8011fbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011fc2:	e15b      	b.n	801227c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011fc4:	4b36      	ldr	r3, [pc, #216]	; (80120a0 <tcp_receive+0x270>)
 8011fc6:	681a      	ldr	r2, [r3, #0]
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011fcc:	1ad3      	subs	r3, r2, r3
 8011fce:	3b01      	subs	r3, #1
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	f2c0 814e 	blt.w	8012272 <tcp_receive+0x442>
 8011fd6:	4b32      	ldr	r3, [pc, #200]	; (80120a0 <tcp_receive+0x270>)
 8011fd8:	681a      	ldr	r2, [r3, #0]
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011fde:	1ad3      	subs	r3, r2, r3
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	f300 8146 	bgt.w	8012272 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	8b5b      	ldrh	r3, [r3, #26]
 8011fea:	f003 0304 	and.w	r3, r3, #4
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d010      	beq.n	8012014 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	8b5b      	ldrh	r3, [r3, #26]
 8011ff6:	f023 0304 	bic.w	r3, r3, #4
 8011ffa:	b29a      	uxth	r2, r3
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	2200      	movs	r2, #0
 8012010:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	2200      	movs	r2, #0
 8012018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012022:	10db      	asrs	r3, r3, #3
 8012024:	b21b      	sxth	r3, r3
 8012026:	b29a      	uxth	r2, r3
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801202e:	b29b      	uxth	r3, r3
 8012030:	4413      	add	r3, r2
 8012032:	b29b      	uxth	r3, r3
 8012034:	b21a      	sxth	r2, r3
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801203c:	4b18      	ldr	r3, [pc, #96]	; (80120a0 <tcp_receive+0x270>)
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	b29a      	uxth	r2, r3
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012046:	b29b      	uxth	r3, r3
 8012048:	1ad3      	subs	r3, r2, r3
 801204a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	2200      	movs	r2, #0
 8012050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8012054:	4b12      	ldr	r3, [pc, #72]	; (80120a0 <tcp_receive+0x270>)
 8012056:	681a      	ldr	r2, [r3, #0]
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	7d1b      	ldrb	r3, [r3, #20]
 8012060:	2b03      	cmp	r3, #3
 8012062:	f240 8097 	bls.w	8012194 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012072:	429a      	cmp	r2, r3
 8012074:	d245      	bcs.n	8012102 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	8b5b      	ldrh	r3, [r3, #26]
 801207a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801207e:	2b00      	cmp	r3, #0
 8012080:	d014      	beq.n	80120ac <tcp_receive+0x27c>
 8012082:	2301      	movs	r3, #1
 8012084:	e013      	b.n	80120ae <tcp_receive+0x27e>
 8012086:	bf00      	nop
 8012088:	0801bda0 	.word	0x0801bda0
 801208c:	0801c0d0 	.word	0x0801c0d0
 8012090:	0801bdec 	.word	0x0801bdec
 8012094:	0801c0ec 	.word	0x0801c0ec
 8012098:	2000d290 	.word	0x2000d290
 801209c:	2000d284 	.word	0x2000d284
 80120a0:	2000d288 	.word	0x2000d288
 80120a4:	2000d274 	.word	0x2000d274
 80120a8:	2000d28e 	.word	0x2000d28e
 80120ac:	2302      	movs	r3, #2
 80120ae:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80120b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80120b6:	b29a      	uxth	r2, r3
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80120bc:	fb12 f303 	smulbb	r3, r2, r3
 80120c0:	b29b      	uxth	r3, r3
 80120c2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80120c4:	4293      	cmp	r3, r2
 80120c6:	bf28      	it	cs
 80120c8:	4613      	movcs	r3, r2
 80120ca:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80120d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80120d4:	4413      	add	r3, r2
 80120d6:	b29a      	uxth	r2, r3
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80120de:	429a      	cmp	r2, r3
 80120e0:	d309      	bcc.n	80120f6 <tcp_receive+0x2c6>
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80120e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80120ea:	4413      	add	r3, r2
 80120ec:	b29a      	uxth	r2, r3
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80120f4:	e04e      	b.n	8012194 <tcp_receive+0x364>
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80120fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012100:	e048      	b.n	8012194 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012108:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801210a:	4413      	add	r3, r2
 801210c:	b29a      	uxth	r2, r3
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012114:	429a      	cmp	r2, r3
 8012116:	d309      	bcc.n	801212c <tcp_receive+0x2fc>
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801211e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012120:	4413      	add	r3, r2
 8012122:	b29a      	uxth	r2, r3
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801212a:	e004      	b.n	8012136 <tcp_receive+0x306>
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012132:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012142:	429a      	cmp	r2, r3
 8012144:	d326      	bcc.n	8012194 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012152:	1ad3      	subs	r3, r2, r3
 8012154:	b29a      	uxth	r2, r3
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012166:	4413      	add	r3, r2
 8012168:	b29a      	uxth	r2, r3
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012170:	429a      	cmp	r2, r3
 8012172:	d30a      	bcc.n	801218a <tcp_receive+0x35a>
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801217e:	4413      	add	r3, r2
 8012180:	b29a      	uxth	r2, r3
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012188:	e004      	b.n	8012194 <tcp_receive+0x364>
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012190:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801219c:	4a98      	ldr	r2, [pc, #608]	; (8012400 <tcp_receive+0x5d0>)
 801219e:	6878      	ldr	r0, [r7, #4]
 80121a0:	f7ff fdca 	bl	8011d38 <tcp_free_acked_segments>
 80121a4:	4602      	mov	r2, r0
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121b2:	4a94      	ldr	r2, [pc, #592]	; (8012404 <tcp_receive+0x5d4>)
 80121b4:	6878      	ldr	r0, [r7, #4]
 80121b6:	f7ff fdbf 	bl	8011d38 <tcp_free_acked_segments>
 80121ba:	4602      	mov	r2, r0
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d104      	bne.n	80121d2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80121ce:	861a      	strh	r2, [r3, #48]	; 0x30
 80121d0:	e002      	b.n	80121d8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	2200      	movs	r2, #0
 80121d6:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	2200      	movs	r2, #0
 80121dc:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d103      	bne.n	80121ee <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	2200      	movs	r2, #0
 80121ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80121f4:	4b84      	ldr	r3, [pc, #528]	; (8012408 <tcp_receive+0x5d8>)
 80121f6:	881b      	ldrh	r3, [r3, #0]
 80121f8:	4413      	add	r3, r2
 80121fa:	b29a      	uxth	r2, r3
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	8b5b      	ldrh	r3, [r3, #26]
 8012206:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801220a:	2b00      	cmp	r3, #0
 801220c:	d035      	beq.n	801227a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012212:	2b00      	cmp	r3, #0
 8012214:	d118      	bne.n	8012248 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801221a:	2b00      	cmp	r3, #0
 801221c:	d00c      	beq.n	8012238 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012226:	68db      	ldr	r3, [r3, #12]
 8012228:	685b      	ldr	r3, [r3, #4]
 801222a:	4618      	mov	r0, r3
 801222c:	f7fa ff33 	bl	800d096 <lwip_htonl>
 8012230:	4603      	mov	r3, r0
 8012232:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8012234:	2b00      	cmp	r3, #0
 8012236:	dc20      	bgt.n	801227a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	8b5b      	ldrh	r3, [r3, #26]
 801223c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012240:	b29a      	uxth	r2, r3
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012246:	e018      	b.n	801227a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012250:	68db      	ldr	r3, [r3, #12]
 8012252:	685b      	ldr	r3, [r3, #4]
 8012254:	4618      	mov	r0, r3
 8012256:	f7fa ff1e 	bl	800d096 <lwip_htonl>
 801225a:	4603      	mov	r3, r0
 801225c:	1ae3      	subs	r3, r4, r3
 801225e:	2b00      	cmp	r3, #0
 8012260:	dc0b      	bgt.n	801227a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	8b5b      	ldrh	r3, [r3, #26]
 8012266:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801226a:	b29a      	uxth	r2, r3
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012270:	e003      	b.n	801227a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012272:	6878      	ldr	r0, [r7, #4]
 8012274:	f002 fbce 	bl	8014a14 <tcp_send_empty_ack>
 8012278:	e000      	b.n	801227c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801227a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012280:	2b00      	cmp	r3, #0
 8012282:	d05b      	beq.n	801233c <tcp_receive+0x50c>
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012288:	4b60      	ldr	r3, [pc, #384]	; (801240c <tcp_receive+0x5dc>)
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	1ad3      	subs	r3, r2, r3
 801228e:	2b00      	cmp	r3, #0
 8012290:	da54      	bge.n	801233c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012292:	4b5f      	ldr	r3, [pc, #380]	; (8012410 <tcp_receive+0x5e0>)
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	b29a      	uxth	r2, r3
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801229c:	b29b      	uxth	r3, r3
 801229e:	1ad3      	subs	r3, r2, r3
 80122a0:	b29b      	uxth	r3, r3
 80122a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80122a6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80122b0:	10db      	asrs	r3, r3, #3
 80122b2:	b21b      	sxth	r3, r3
 80122b4:	b29b      	uxth	r3, r3
 80122b6:	1ad3      	subs	r3, r2, r3
 80122b8:	b29b      	uxth	r3, r3
 80122ba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80122c4:	b29a      	uxth	r2, r3
 80122c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80122ca:	4413      	add	r3, r2
 80122cc:	b29b      	uxth	r3, r3
 80122ce:	b21a      	sxth	r2, r3
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80122d4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80122d8:	2b00      	cmp	r3, #0
 80122da:	da05      	bge.n	80122e8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80122dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80122e0:	425b      	negs	r3, r3
 80122e2:	b29b      	uxth	r3, r3
 80122e4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80122e8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80122f2:	109b      	asrs	r3, r3, #2
 80122f4:	b21b      	sxth	r3, r3
 80122f6:	b29b      	uxth	r3, r3
 80122f8:	1ad3      	subs	r3, r2, r3
 80122fa:	b29b      	uxth	r3, r3
 80122fc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012306:	b29a      	uxth	r2, r3
 8012308:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801230c:	4413      	add	r3, r2
 801230e:	b29b      	uxth	r3, r3
 8012310:	b21a      	sxth	r2, r3
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801231c:	10db      	asrs	r3, r3, #3
 801231e:	b21b      	sxth	r3, r3
 8012320:	b29a      	uxth	r2, r3
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012328:	b29b      	uxth	r3, r3
 801232a:	4413      	add	r3, r2
 801232c:	b29b      	uxth	r3, r3
 801232e:	b21a      	sxth	r2, r3
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	2200      	movs	r2, #0
 801233a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801233c:	4b35      	ldr	r3, [pc, #212]	; (8012414 <tcp_receive+0x5e4>)
 801233e:	881b      	ldrh	r3, [r3, #0]
 8012340:	2b00      	cmp	r3, #0
 8012342:	f000 84e2 	beq.w	8012d0a <tcp_receive+0xeda>
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	7d1b      	ldrb	r3, [r3, #20]
 801234a:	2b06      	cmp	r3, #6
 801234c:	f200 84dd 	bhi.w	8012d0a <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012354:	4b30      	ldr	r3, [pc, #192]	; (8012418 <tcp_receive+0x5e8>)
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	1ad3      	subs	r3, r2, r3
 801235a:	3b01      	subs	r3, #1
 801235c:	2b00      	cmp	r3, #0
 801235e:	f2c0 808f 	blt.w	8012480 <tcp_receive+0x650>
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012366:	4b2b      	ldr	r3, [pc, #172]	; (8012414 <tcp_receive+0x5e4>)
 8012368:	881b      	ldrh	r3, [r3, #0]
 801236a:	4619      	mov	r1, r3
 801236c:	4b2a      	ldr	r3, [pc, #168]	; (8012418 <tcp_receive+0x5e8>)
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	440b      	add	r3, r1
 8012372:	1ad3      	subs	r3, r2, r3
 8012374:	3301      	adds	r3, #1
 8012376:	2b00      	cmp	r3, #0
 8012378:	f300 8082 	bgt.w	8012480 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801237c:	4b27      	ldr	r3, [pc, #156]	; (801241c <tcp_receive+0x5ec>)
 801237e:	685b      	ldr	r3, [r3, #4]
 8012380:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012386:	4b24      	ldr	r3, [pc, #144]	; (8012418 <tcp_receive+0x5e8>)
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	1ad3      	subs	r3, r2, r3
 801238c:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801238e:	4b23      	ldr	r3, [pc, #140]	; (801241c <tcp_receive+0x5ec>)
 8012390:	685b      	ldr	r3, [r3, #4]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d106      	bne.n	80123a4 <tcp_receive+0x574>
 8012396:	4b22      	ldr	r3, [pc, #136]	; (8012420 <tcp_receive+0x5f0>)
 8012398:	f240 5294 	movw	r2, #1428	; 0x594
 801239c:	4921      	ldr	r1, [pc, #132]	; (8012424 <tcp_receive+0x5f4>)
 801239e:	4822      	ldr	r0, [pc, #136]	; (8012428 <tcp_receive+0x5f8>)
 80123a0:	f006 f956 	bl	8018650 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80123a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123a6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80123aa:	4293      	cmp	r3, r2
 80123ac:	d906      	bls.n	80123bc <tcp_receive+0x58c>
 80123ae:	4b1c      	ldr	r3, [pc, #112]	; (8012420 <tcp_receive+0x5f0>)
 80123b0:	f240 5295 	movw	r2, #1429	; 0x595
 80123b4:	491d      	ldr	r1, [pc, #116]	; (801242c <tcp_receive+0x5fc>)
 80123b6:	481c      	ldr	r0, [pc, #112]	; (8012428 <tcp_receive+0x5f8>)
 80123b8:	f006 f94a 	bl	8018650 <iprintf>
      off = (u16_t)off32;
 80123bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80123c2:	4b16      	ldr	r3, [pc, #88]	; (801241c <tcp_receive+0x5ec>)
 80123c4:	685b      	ldr	r3, [r3, #4]
 80123c6:	891b      	ldrh	r3, [r3, #8]
 80123c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80123cc:	429a      	cmp	r2, r3
 80123ce:	d906      	bls.n	80123de <tcp_receive+0x5ae>
 80123d0:	4b13      	ldr	r3, [pc, #76]	; (8012420 <tcp_receive+0x5f0>)
 80123d2:	f240 5297 	movw	r2, #1431	; 0x597
 80123d6:	4916      	ldr	r1, [pc, #88]	; (8012430 <tcp_receive+0x600>)
 80123d8:	4813      	ldr	r0, [pc, #76]	; (8012428 <tcp_receive+0x5f8>)
 80123da:	f006 f939 	bl	8018650 <iprintf>
      inseg.len -= off;
 80123de:	4b0f      	ldr	r3, [pc, #60]	; (801241c <tcp_receive+0x5ec>)
 80123e0:	891a      	ldrh	r2, [r3, #8]
 80123e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80123e6:	1ad3      	subs	r3, r2, r3
 80123e8:	b29a      	uxth	r2, r3
 80123ea:	4b0c      	ldr	r3, [pc, #48]	; (801241c <tcp_receive+0x5ec>)
 80123ec:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80123ee:	4b0b      	ldr	r3, [pc, #44]	; (801241c <tcp_receive+0x5ec>)
 80123f0:	685b      	ldr	r3, [r3, #4]
 80123f2:	891a      	ldrh	r2, [r3, #8]
 80123f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80123f8:	1ad3      	subs	r3, r2, r3
 80123fa:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80123fc:	e02a      	b.n	8012454 <tcp_receive+0x624>
 80123fe:	bf00      	nop
 8012400:	0801c108 	.word	0x0801c108
 8012404:	0801c110 	.word	0x0801c110
 8012408:	2000d28c 	.word	0x2000d28c
 801240c:	2000d288 	.word	0x2000d288
 8012410:	2000d24c 	.word	0x2000d24c
 8012414:	2000d28e 	.word	0x2000d28e
 8012418:	2000d284 	.word	0x2000d284
 801241c:	2000d264 	.word	0x2000d264
 8012420:	0801bda0 	.word	0x0801bda0
 8012424:	0801c118 	.word	0x0801c118
 8012428:	0801bdec 	.word	0x0801bdec
 801242c:	0801c128 	.word	0x0801c128
 8012430:	0801c138 	.word	0x0801c138
        off -= p->len;
 8012434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012436:	895b      	ldrh	r3, [r3, #10]
 8012438:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801243c:	1ad3      	subs	r3, r2, r3
 801243e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8012442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012444:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012446:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8012448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801244a:	2200      	movs	r2, #0
 801244c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801244e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8012454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012456:	895b      	ldrh	r3, [r3, #10]
 8012458:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801245c:	429a      	cmp	r2, r3
 801245e:	d8e9      	bhi.n	8012434 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8012460:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012464:	4619      	mov	r1, r3
 8012466:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012468:	f7fc f926 	bl	800e6b8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012470:	4a91      	ldr	r2, [pc, #580]	; (80126b8 <tcp_receive+0x888>)
 8012472:	6013      	str	r3, [r2, #0]
 8012474:	4b91      	ldr	r3, [pc, #580]	; (80126bc <tcp_receive+0x88c>)
 8012476:	68db      	ldr	r3, [r3, #12]
 8012478:	4a8f      	ldr	r2, [pc, #572]	; (80126b8 <tcp_receive+0x888>)
 801247a:	6812      	ldr	r2, [r2, #0]
 801247c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801247e:	e00d      	b.n	801249c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012480:	4b8d      	ldr	r3, [pc, #564]	; (80126b8 <tcp_receive+0x888>)
 8012482:	681a      	ldr	r2, [r3, #0]
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012488:	1ad3      	subs	r3, r2, r3
 801248a:	2b00      	cmp	r3, #0
 801248c:	da06      	bge.n	801249c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	8b5b      	ldrh	r3, [r3, #26]
 8012492:	f043 0302 	orr.w	r3, r3, #2
 8012496:	b29a      	uxth	r2, r3
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801249c:	4b86      	ldr	r3, [pc, #536]	; (80126b8 <tcp_receive+0x888>)
 801249e:	681a      	ldr	r2, [r3, #0]
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124a4:	1ad3      	subs	r3, r2, r3
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	f2c0 842a 	blt.w	8012d00 <tcp_receive+0xed0>
 80124ac:	4b82      	ldr	r3, [pc, #520]	; (80126b8 <tcp_receive+0x888>)
 80124ae:	681a      	ldr	r2, [r3, #0]
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124b4:	6879      	ldr	r1, [r7, #4]
 80124b6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80124b8:	440b      	add	r3, r1
 80124ba:	1ad3      	subs	r3, r2, r3
 80124bc:	3301      	adds	r3, #1
 80124be:	2b00      	cmp	r3, #0
 80124c0:	f300 841e 	bgt.w	8012d00 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80124c8:	4b7b      	ldr	r3, [pc, #492]	; (80126b8 <tcp_receive+0x888>)
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	429a      	cmp	r2, r3
 80124ce:	f040 829a 	bne.w	8012a06 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80124d2:	4b7a      	ldr	r3, [pc, #488]	; (80126bc <tcp_receive+0x88c>)
 80124d4:	891c      	ldrh	r4, [r3, #8]
 80124d6:	4b79      	ldr	r3, [pc, #484]	; (80126bc <tcp_receive+0x88c>)
 80124d8:	68db      	ldr	r3, [r3, #12]
 80124da:	899b      	ldrh	r3, [r3, #12]
 80124dc:	b29b      	uxth	r3, r3
 80124de:	4618      	mov	r0, r3
 80124e0:	f7fa fdc4 	bl	800d06c <lwip_htons>
 80124e4:	4603      	mov	r3, r0
 80124e6:	b2db      	uxtb	r3, r3
 80124e8:	f003 0303 	and.w	r3, r3, #3
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d001      	beq.n	80124f4 <tcp_receive+0x6c4>
 80124f0:	2301      	movs	r3, #1
 80124f2:	e000      	b.n	80124f6 <tcp_receive+0x6c6>
 80124f4:	2300      	movs	r3, #0
 80124f6:	4423      	add	r3, r4
 80124f8:	b29a      	uxth	r2, r3
 80124fa:	4b71      	ldr	r3, [pc, #452]	; (80126c0 <tcp_receive+0x890>)
 80124fc:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012502:	4b6f      	ldr	r3, [pc, #444]	; (80126c0 <tcp_receive+0x890>)
 8012504:	881b      	ldrh	r3, [r3, #0]
 8012506:	429a      	cmp	r2, r3
 8012508:	d275      	bcs.n	80125f6 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801250a:	4b6c      	ldr	r3, [pc, #432]	; (80126bc <tcp_receive+0x88c>)
 801250c:	68db      	ldr	r3, [r3, #12]
 801250e:	899b      	ldrh	r3, [r3, #12]
 8012510:	b29b      	uxth	r3, r3
 8012512:	4618      	mov	r0, r3
 8012514:	f7fa fdaa 	bl	800d06c <lwip_htons>
 8012518:	4603      	mov	r3, r0
 801251a:	b2db      	uxtb	r3, r3
 801251c:	f003 0301 	and.w	r3, r3, #1
 8012520:	2b00      	cmp	r3, #0
 8012522:	d01f      	beq.n	8012564 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012524:	4b65      	ldr	r3, [pc, #404]	; (80126bc <tcp_receive+0x88c>)
 8012526:	68db      	ldr	r3, [r3, #12]
 8012528:	899b      	ldrh	r3, [r3, #12]
 801252a:	b29b      	uxth	r3, r3
 801252c:	b21b      	sxth	r3, r3
 801252e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012532:	b21c      	sxth	r4, r3
 8012534:	4b61      	ldr	r3, [pc, #388]	; (80126bc <tcp_receive+0x88c>)
 8012536:	68db      	ldr	r3, [r3, #12]
 8012538:	899b      	ldrh	r3, [r3, #12]
 801253a:	b29b      	uxth	r3, r3
 801253c:	4618      	mov	r0, r3
 801253e:	f7fa fd95 	bl	800d06c <lwip_htons>
 8012542:	4603      	mov	r3, r0
 8012544:	b2db      	uxtb	r3, r3
 8012546:	b29b      	uxth	r3, r3
 8012548:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801254c:	b29b      	uxth	r3, r3
 801254e:	4618      	mov	r0, r3
 8012550:	f7fa fd8c 	bl	800d06c <lwip_htons>
 8012554:	4603      	mov	r3, r0
 8012556:	b21b      	sxth	r3, r3
 8012558:	4323      	orrs	r3, r4
 801255a:	b21a      	sxth	r2, r3
 801255c:	4b57      	ldr	r3, [pc, #348]	; (80126bc <tcp_receive+0x88c>)
 801255e:	68db      	ldr	r3, [r3, #12]
 8012560:	b292      	uxth	r2, r2
 8012562:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012568:	4b54      	ldr	r3, [pc, #336]	; (80126bc <tcp_receive+0x88c>)
 801256a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801256c:	4b53      	ldr	r3, [pc, #332]	; (80126bc <tcp_receive+0x88c>)
 801256e:	68db      	ldr	r3, [r3, #12]
 8012570:	899b      	ldrh	r3, [r3, #12]
 8012572:	b29b      	uxth	r3, r3
 8012574:	4618      	mov	r0, r3
 8012576:	f7fa fd79 	bl	800d06c <lwip_htons>
 801257a:	4603      	mov	r3, r0
 801257c:	b2db      	uxtb	r3, r3
 801257e:	f003 0302 	and.w	r3, r3, #2
 8012582:	2b00      	cmp	r3, #0
 8012584:	d005      	beq.n	8012592 <tcp_receive+0x762>
            inseg.len -= 1;
 8012586:	4b4d      	ldr	r3, [pc, #308]	; (80126bc <tcp_receive+0x88c>)
 8012588:	891b      	ldrh	r3, [r3, #8]
 801258a:	3b01      	subs	r3, #1
 801258c:	b29a      	uxth	r2, r3
 801258e:	4b4b      	ldr	r3, [pc, #300]	; (80126bc <tcp_receive+0x88c>)
 8012590:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012592:	4b4a      	ldr	r3, [pc, #296]	; (80126bc <tcp_receive+0x88c>)
 8012594:	685b      	ldr	r3, [r3, #4]
 8012596:	4a49      	ldr	r2, [pc, #292]	; (80126bc <tcp_receive+0x88c>)
 8012598:	8912      	ldrh	r2, [r2, #8]
 801259a:	4611      	mov	r1, r2
 801259c:	4618      	mov	r0, r3
 801259e:	f7fb ff8b 	bl	800e4b8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80125a2:	4b46      	ldr	r3, [pc, #280]	; (80126bc <tcp_receive+0x88c>)
 80125a4:	891c      	ldrh	r4, [r3, #8]
 80125a6:	4b45      	ldr	r3, [pc, #276]	; (80126bc <tcp_receive+0x88c>)
 80125a8:	68db      	ldr	r3, [r3, #12]
 80125aa:	899b      	ldrh	r3, [r3, #12]
 80125ac:	b29b      	uxth	r3, r3
 80125ae:	4618      	mov	r0, r3
 80125b0:	f7fa fd5c 	bl	800d06c <lwip_htons>
 80125b4:	4603      	mov	r3, r0
 80125b6:	b2db      	uxtb	r3, r3
 80125b8:	f003 0303 	and.w	r3, r3, #3
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d001      	beq.n	80125c4 <tcp_receive+0x794>
 80125c0:	2301      	movs	r3, #1
 80125c2:	e000      	b.n	80125c6 <tcp_receive+0x796>
 80125c4:	2300      	movs	r3, #0
 80125c6:	4423      	add	r3, r4
 80125c8:	b29a      	uxth	r2, r3
 80125ca:	4b3d      	ldr	r3, [pc, #244]	; (80126c0 <tcp_receive+0x890>)
 80125cc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80125ce:	4b3c      	ldr	r3, [pc, #240]	; (80126c0 <tcp_receive+0x890>)
 80125d0:	881b      	ldrh	r3, [r3, #0]
 80125d2:	461a      	mov	r2, r3
 80125d4:	4b38      	ldr	r3, [pc, #224]	; (80126b8 <tcp_receive+0x888>)
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	441a      	add	r2, r3
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125de:	6879      	ldr	r1, [r7, #4]
 80125e0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80125e2:	440b      	add	r3, r1
 80125e4:	429a      	cmp	r2, r3
 80125e6:	d006      	beq.n	80125f6 <tcp_receive+0x7c6>
 80125e8:	4b36      	ldr	r3, [pc, #216]	; (80126c4 <tcp_receive+0x894>)
 80125ea:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80125ee:	4936      	ldr	r1, [pc, #216]	; (80126c8 <tcp_receive+0x898>)
 80125f0:	4836      	ldr	r0, [pc, #216]	; (80126cc <tcp_receive+0x89c>)
 80125f2:	f006 f82d 	bl	8018650 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	f000 80e7 	beq.w	80127ce <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012600:	4b2e      	ldr	r3, [pc, #184]	; (80126bc <tcp_receive+0x88c>)
 8012602:	68db      	ldr	r3, [r3, #12]
 8012604:	899b      	ldrh	r3, [r3, #12]
 8012606:	b29b      	uxth	r3, r3
 8012608:	4618      	mov	r0, r3
 801260a:	f7fa fd2f 	bl	800d06c <lwip_htons>
 801260e:	4603      	mov	r3, r0
 8012610:	b2db      	uxtb	r3, r3
 8012612:	f003 0301 	and.w	r3, r3, #1
 8012616:	2b00      	cmp	r3, #0
 8012618:	d010      	beq.n	801263c <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801261a:	e00a      	b.n	8012632 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012620:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012626:	681a      	ldr	r2, [r3, #0]
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801262c:	68f8      	ldr	r0, [r7, #12]
 801262e:	f7fd fcc4 	bl	800ffba <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012636:	2b00      	cmp	r3, #0
 8012638:	d1f0      	bne.n	801261c <tcp_receive+0x7ec>
 801263a:	e0c8      	b.n	80127ce <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012640:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8012642:	e052      	b.n	80126ea <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012646:	68db      	ldr	r3, [r3, #12]
 8012648:	899b      	ldrh	r3, [r3, #12]
 801264a:	b29b      	uxth	r3, r3
 801264c:	4618      	mov	r0, r3
 801264e:	f7fa fd0d 	bl	800d06c <lwip_htons>
 8012652:	4603      	mov	r3, r0
 8012654:	b2db      	uxtb	r3, r3
 8012656:	f003 0301 	and.w	r3, r3, #1
 801265a:	2b00      	cmp	r3, #0
 801265c:	d03d      	beq.n	80126da <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801265e:	4b17      	ldr	r3, [pc, #92]	; (80126bc <tcp_receive+0x88c>)
 8012660:	68db      	ldr	r3, [r3, #12]
 8012662:	899b      	ldrh	r3, [r3, #12]
 8012664:	b29b      	uxth	r3, r3
 8012666:	4618      	mov	r0, r3
 8012668:	f7fa fd00 	bl	800d06c <lwip_htons>
 801266c:	4603      	mov	r3, r0
 801266e:	b2db      	uxtb	r3, r3
 8012670:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012674:	2b00      	cmp	r3, #0
 8012676:	d130      	bne.n	80126da <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8012678:	4b10      	ldr	r3, [pc, #64]	; (80126bc <tcp_receive+0x88c>)
 801267a:	68db      	ldr	r3, [r3, #12]
 801267c:	899b      	ldrh	r3, [r3, #12]
 801267e:	b29c      	uxth	r4, r3
 8012680:	2001      	movs	r0, #1
 8012682:	f7fa fcf3 	bl	800d06c <lwip_htons>
 8012686:	4603      	mov	r3, r0
 8012688:	461a      	mov	r2, r3
 801268a:	4b0c      	ldr	r3, [pc, #48]	; (80126bc <tcp_receive+0x88c>)
 801268c:	68db      	ldr	r3, [r3, #12]
 801268e:	4322      	orrs	r2, r4
 8012690:	b292      	uxth	r2, r2
 8012692:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8012694:	4b09      	ldr	r3, [pc, #36]	; (80126bc <tcp_receive+0x88c>)
 8012696:	891c      	ldrh	r4, [r3, #8]
 8012698:	4b08      	ldr	r3, [pc, #32]	; (80126bc <tcp_receive+0x88c>)
 801269a:	68db      	ldr	r3, [r3, #12]
 801269c:	899b      	ldrh	r3, [r3, #12]
 801269e:	b29b      	uxth	r3, r3
 80126a0:	4618      	mov	r0, r3
 80126a2:	f7fa fce3 	bl	800d06c <lwip_htons>
 80126a6:	4603      	mov	r3, r0
 80126a8:	b2db      	uxtb	r3, r3
 80126aa:	f003 0303 	and.w	r3, r3, #3
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d00e      	beq.n	80126d0 <tcp_receive+0x8a0>
 80126b2:	2301      	movs	r3, #1
 80126b4:	e00d      	b.n	80126d2 <tcp_receive+0x8a2>
 80126b6:	bf00      	nop
 80126b8:	2000d284 	.word	0x2000d284
 80126bc:	2000d264 	.word	0x2000d264
 80126c0:	2000d28e 	.word	0x2000d28e
 80126c4:	0801bda0 	.word	0x0801bda0
 80126c8:	0801c148 	.word	0x0801c148
 80126cc:	0801bdec 	.word	0x0801bdec
 80126d0:	2300      	movs	r3, #0
 80126d2:	4423      	add	r3, r4
 80126d4:	b29a      	uxth	r2, r3
 80126d6:	4b98      	ldr	r3, [pc, #608]	; (8012938 <tcp_receive+0xb08>)
 80126d8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80126da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126dc:	613b      	str	r3, [r7, #16]
              next = next->next;
 80126de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80126e4:	6938      	ldr	r0, [r7, #16]
 80126e6:	f7fd fc68 	bl	800ffba <tcp_seg_free>
            while (next &&
 80126ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d00e      	beq.n	801270e <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80126f0:	4b91      	ldr	r3, [pc, #580]	; (8012938 <tcp_receive+0xb08>)
 80126f2:	881b      	ldrh	r3, [r3, #0]
 80126f4:	461a      	mov	r2, r3
 80126f6:	4b91      	ldr	r3, [pc, #580]	; (801293c <tcp_receive+0xb0c>)
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	441a      	add	r2, r3
 80126fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126fe:	68db      	ldr	r3, [r3, #12]
 8012700:	685b      	ldr	r3, [r3, #4]
 8012702:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012704:	8909      	ldrh	r1, [r1, #8]
 8012706:	440b      	add	r3, r1
 8012708:	1ad3      	subs	r3, r2, r3
            while (next &&
 801270a:	2b00      	cmp	r3, #0
 801270c:	da9a      	bge.n	8012644 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801270e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012710:	2b00      	cmp	r3, #0
 8012712:	d059      	beq.n	80127c8 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8012714:	4b88      	ldr	r3, [pc, #544]	; (8012938 <tcp_receive+0xb08>)
 8012716:	881b      	ldrh	r3, [r3, #0]
 8012718:	461a      	mov	r2, r3
 801271a:	4b88      	ldr	r3, [pc, #544]	; (801293c <tcp_receive+0xb0c>)
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	441a      	add	r2, r3
 8012720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012722:	68db      	ldr	r3, [r3, #12]
 8012724:	685b      	ldr	r3, [r3, #4]
 8012726:	1ad3      	subs	r3, r2, r3
            if (next &&
 8012728:	2b00      	cmp	r3, #0
 801272a:	dd4d      	ble.n	80127c8 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801272c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801272e:	68db      	ldr	r3, [r3, #12]
 8012730:	685b      	ldr	r3, [r3, #4]
 8012732:	b29a      	uxth	r2, r3
 8012734:	4b81      	ldr	r3, [pc, #516]	; (801293c <tcp_receive+0xb0c>)
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	b29b      	uxth	r3, r3
 801273a:	1ad3      	subs	r3, r2, r3
 801273c:	b29a      	uxth	r2, r3
 801273e:	4b80      	ldr	r3, [pc, #512]	; (8012940 <tcp_receive+0xb10>)
 8012740:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012742:	4b7f      	ldr	r3, [pc, #508]	; (8012940 <tcp_receive+0xb10>)
 8012744:	68db      	ldr	r3, [r3, #12]
 8012746:	899b      	ldrh	r3, [r3, #12]
 8012748:	b29b      	uxth	r3, r3
 801274a:	4618      	mov	r0, r3
 801274c:	f7fa fc8e 	bl	800d06c <lwip_htons>
 8012750:	4603      	mov	r3, r0
 8012752:	b2db      	uxtb	r3, r3
 8012754:	f003 0302 	and.w	r3, r3, #2
 8012758:	2b00      	cmp	r3, #0
 801275a:	d005      	beq.n	8012768 <tcp_receive+0x938>
                inseg.len -= 1;
 801275c:	4b78      	ldr	r3, [pc, #480]	; (8012940 <tcp_receive+0xb10>)
 801275e:	891b      	ldrh	r3, [r3, #8]
 8012760:	3b01      	subs	r3, #1
 8012762:	b29a      	uxth	r2, r3
 8012764:	4b76      	ldr	r3, [pc, #472]	; (8012940 <tcp_receive+0xb10>)
 8012766:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8012768:	4b75      	ldr	r3, [pc, #468]	; (8012940 <tcp_receive+0xb10>)
 801276a:	685b      	ldr	r3, [r3, #4]
 801276c:	4a74      	ldr	r2, [pc, #464]	; (8012940 <tcp_receive+0xb10>)
 801276e:	8912      	ldrh	r2, [r2, #8]
 8012770:	4611      	mov	r1, r2
 8012772:	4618      	mov	r0, r3
 8012774:	f7fb fea0 	bl	800e4b8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8012778:	4b71      	ldr	r3, [pc, #452]	; (8012940 <tcp_receive+0xb10>)
 801277a:	891c      	ldrh	r4, [r3, #8]
 801277c:	4b70      	ldr	r3, [pc, #448]	; (8012940 <tcp_receive+0xb10>)
 801277e:	68db      	ldr	r3, [r3, #12]
 8012780:	899b      	ldrh	r3, [r3, #12]
 8012782:	b29b      	uxth	r3, r3
 8012784:	4618      	mov	r0, r3
 8012786:	f7fa fc71 	bl	800d06c <lwip_htons>
 801278a:	4603      	mov	r3, r0
 801278c:	b2db      	uxtb	r3, r3
 801278e:	f003 0303 	and.w	r3, r3, #3
 8012792:	2b00      	cmp	r3, #0
 8012794:	d001      	beq.n	801279a <tcp_receive+0x96a>
 8012796:	2301      	movs	r3, #1
 8012798:	e000      	b.n	801279c <tcp_receive+0x96c>
 801279a:	2300      	movs	r3, #0
 801279c:	4423      	add	r3, r4
 801279e:	b29a      	uxth	r2, r3
 80127a0:	4b65      	ldr	r3, [pc, #404]	; (8012938 <tcp_receive+0xb08>)
 80127a2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80127a4:	4b64      	ldr	r3, [pc, #400]	; (8012938 <tcp_receive+0xb08>)
 80127a6:	881b      	ldrh	r3, [r3, #0]
 80127a8:	461a      	mov	r2, r3
 80127aa:	4b64      	ldr	r3, [pc, #400]	; (801293c <tcp_receive+0xb0c>)
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	441a      	add	r2, r3
 80127b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127b2:	68db      	ldr	r3, [r3, #12]
 80127b4:	685b      	ldr	r3, [r3, #4]
 80127b6:	429a      	cmp	r2, r3
 80127b8:	d006      	beq.n	80127c8 <tcp_receive+0x998>
 80127ba:	4b62      	ldr	r3, [pc, #392]	; (8012944 <tcp_receive+0xb14>)
 80127bc:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80127c0:	4961      	ldr	r1, [pc, #388]	; (8012948 <tcp_receive+0xb18>)
 80127c2:	4862      	ldr	r0, [pc, #392]	; (801294c <tcp_receive+0xb1c>)
 80127c4:	f005 ff44 	bl	8018650 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80127cc:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80127ce:	4b5a      	ldr	r3, [pc, #360]	; (8012938 <tcp_receive+0xb08>)
 80127d0:	881b      	ldrh	r3, [r3, #0]
 80127d2:	461a      	mov	r2, r3
 80127d4:	4b59      	ldr	r3, [pc, #356]	; (801293c <tcp_receive+0xb0c>)
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	441a      	add	r2, r3
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80127e2:	4b55      	ldr	r3, [pc, #340]	; (8012938 <tcp_receive+0xb08>)
 80127e4:	881b      	ldrh	r3, [r3, #0]
 80127e6:	429a      	cmp	r2, r3
 80127e8:	d206      	bcs.n	80127f8 <tcp_receive+0x9c8>
 80127ea:	4b56      	ldr	r3, [pc, #344]	; (8012944 <tcp_receive+0xb14>)
 80127ec:	f240 6207 	movw	r2, #1543	; 0x607
 80127f0:	4957      	ldr	r1, [pc, #348]	; (8012950 <tcp_receive+0xb20>)
 80127f2:	4856      	ldr	r0, [pc, #344]	; (801294c <tcp_receive+0xb1c>)
 80127f4:	f005 ff2c 	bl	8018650 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80127fc:	4b4e      	ldr	r3, [pc, #312]	; (8012938 <tcp_receive+0xb08>)
 80127fe:	881b      	ldrh	r3, [r3, #0]
 8012800:	1ad3      	subs	r3, r2, r3
 8012802:	b29a      	uxth	r2, r3
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8012808:	6878      	ldr	r0, [r7, #4]
 801280a:	f7fc feb1 	bl	800f570 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801280e:	4b4c      	ldr	r3, [pc, #304]	; (8012940 <tcp_receive+0xb10>)
 8012810:	685b      	ldr	r3, [r3, #4]
 8012812:	891b      	ldrh	r3, [r3, #8]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d006      	beq.n	8012826 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8012818:	4b49      	ldr	r3, [pc, #292]	; (8012940 <tcp_receive+0xb10>)
 801281a:	685b      	ldr	r3, [r3, #4]
 801281c:	4a4d      	ldr	r2, [pc, #308]	; (8012954 <tcp_receive+0xb24>)
 801281e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012820:	4b47      	ldr	r3, [pc, #284]	; (8012940 <tcp_receive+0xb10>)
 8012822:	2200      	movs	r2, #0
 8012824:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012826:	4b46      	ldr	r3, [pc, #280]	; (8012940 <tcp_receive+0xb10>)
 8012828:	68db      	ldr	r3, [r3, #12]
 801282a:	899b      	ldrh	r3, [r3, #12]
 801282c:	b29b      	uxth	r3, r3
 801282e:	4618      	mov	r0, r3
 8012830:	f7fa fc1c 	bl	800d06c <lwip_htons>
 8012834:	4603      	mov	r3, r0
 8012836:	b2db      	uxtb	r3, r3
 8012838:	f003 0301 	and.w	r3, r3, #1
 801283c:	2b00      	cmp	r3, #0
 801283e:	f000 80b8 	beq.w	80129b2 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8012842:	4b45      	ldr	r3, [pc, #276]	; (8012958 <tcp_receive+0xb28>)
 8012844:	781b      	ldrb	r3, [r3, #0]
 8012846:	f043 0320 	orr.w	r3, r3, #32
 801284a:	b2da      	uxtb	r2, r3
 801284c:	4b42      	ldr	r3, [pc, #264]	; (8012958 <tcp_receive+0xb28>)
 801284e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8012850:	e0af      	b.n	80129b2 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012856:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801285c:	68db      	ldr	r3, [r3, #12]
 801285e:	685b      	ldr	r3, [r3, #4]
 8012860:	4a36      	ldr	r2, [pc, #216]	; (801293c <tcp_receive+0xb0c>)
 8012862:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012864:	68bb      	ldr	r3, [r7, #8]
 8012866:	891b      	ldrh	r3, [r3, #8]
 8012868:	461c      	mov	r4, r3
 801286a:	68bb      	ldr	r3, [r7, #8]
 801286c:	68db      	ldr	r3, [r3, #12]
 801286e:	899b      	ldrh	r3, [r3, #12]
 8012870:	b29b      	uxth	r3, r3
 8012872:	4618      	mov	r0, r3
 8012874:	f7fa fbfa 	bl	800d06c <lwip_htons>
 8012878:	4603      	mov	r3, r0
 801287a:	b2db      	uxtb	r3, r3
 801287c:	f003 0303 	and.w	r3, r3, #3
 8012880:	2b00      	cmp	r3, #0
 8012882:	d001      	beq.n	8012888 <tcp_receive+0xa58>
 8012884:	2301      	movs	r3, #1
 8012886:	e000      	b.n	801288a <tcp_receive+0xa5a>
 8012888:	2300      	movs	r3, #0
 801288a:	191a      	adds	r2, r3, r4
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012890:	441a      	add	r2, r3
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801289a:	461c      	mov	r4, r3
 801289c:	68bb      	ldr	r3, [r7, #8]
 801289e:	891b      	ldrh	r3, [r3, #8]
 80128a0:	461d      	mov	r5, r3
 80128a2:	68bb      	ldr	r3, [r7, #8]
 80128a4:	68db      	ldr	r3, [r3, #12]
 80128a6:	899b      	ldrh	r3, [r3, #12]
 80128a8:	b29b      	uxth	r3, r3
 80128aa:	4618      	mov	r0, r3
 80128ac:	f7fa fbde 	bl	800d06c <lwip_htons>
 80128b0:	4603      	mov	r3, r0
 80128b2:	b2db      	uxtb	r3, r3
 80128b4:	f003 0303 	and.w	r3, r3, #3
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d001      	beq.n	80128c0 <tcp_receive+0xa90>
 80128bc:	2301      	movs	r3, #1
 80128be:	e000      	b.n	80128c2 <tcp_receive+0xa92>
 80128c0:	2300      	movs	r3, #0
 80128c2:	442b      	add	r3, r5
 80128c4:	429c      	cmp	r4, r3
 80128c6:	d206      	bcs.n	80128d6 <tcp_receive+0xaa6>
 80128c8:	4b1e      	ldr	r3, [pc, #120]	; (8012944 <tcp_receive+0xb14>)
 80128ca:	f240 622b 	movw	r2, #1579	; 0x62b
 80128ce:	4923      	ldr	r1, [pc, #140]	; (801295c <tcp_receive+0xb2c>)
 80128d0:	481e      	ldr	r0, [pc, #120]	; (801294c <tcp_receive+0xb1c>)
 80128d2:	f005 febd 	bl	8018650 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80128d6:	68bb      	ldr	r3, [r7, #8]
 80128d8:	891b      	ldrh	r3, [r3, #8]
 80128da:	461c      	mov	r4, r3
 80128dc:	68bb      	ldr	r3, [r7, #8]
 80128de:	68db      	ldr	r3, [r3, #12]
 80128e0:	899b      	ldrh	r3, [r3, #12]
 80128e2:	b29b      	uxth	r3, r3
 80128e4:	4618      	mov	r0, r3
 80128e6:	f7fa fbc1 	bl	800d06c <lwip_htons>
 80128ea:	4603      	mov	r3, r0
 80128ec:	b2db      	uxtb	r3, r3
 80128ee:	f003 0303 	and.w	r3, r3, #3
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d001      	beq.n	80128fa <tcp_receive+0xaca>
 80128f6:	2301      	movs	r3, #1
 80128f8:	e000      	b.n	80128fc <tcp_receive+0xacc>
 80128fa:	2300      	movs	r3, #0
 80128fc:	1919      	adds	r1, r3, r4
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012902:	b28b      	uxth	r3, r1
 8012904:	1ad3      	subs	r3, r2, r3
 8012906:	b29a      	uxth	r2, r3
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801290c:	6878      	ldr	r0, [r7, #4]
 801290e:	f7fc fe2f 	bl	800f570 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8012912:	68bb      	ldr	r3, [r7, #8]
 8012914:	685b      	ldr	r3, [r3, #4]
 8012916:	891b      	ldrh	r3, [r3, #8]
 8012918:	2b00      	cmp	r3, #0
 801291a:	d028      	beq.n	801296e <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801291c:	4b0d      	ldr	r3, [pc, #52]	; (8012954 <tcp_receive+0xb24>)
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d01d      	beq.n	8012960 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8012924:	4b0b      	ldr	r3, [pc, #44]	; (8012954 <tcp_receive+0xb24>)
 8012926:	681a      	ldr	r2, [r3, #0]
 8012928:	68bb      	ldr	r3, [r7, #8]
 801292a:	685b      	ldr	r3, [r3, #4]
 801292c:	4619      	mov	r1, r3
 801292e:	4610      	mov	r0, r2
 8012930:	f7fc f848 	bl	800e9c4 <pbuf_cat>
 8012934:	e018      	b.n	8012968 <tcp_receive+0xb38>
 8012936:	bf00      	nop
 8012938:	2000d28e 	.word	0x2000d28e
 801293c:	2000d284 	.word	0x2000d284
 8012940:	2000d264 	.word	0x2000d264
 8012944:	0801bda0 	.word	0x0801bda0
 8012948:	0801c180 	.word	0x0801c180
 801294c:	0801bdec 	.word	0x0801bdec
 8012950:	0801c1bc 	.word	0x0801c1bc
 8012954:	2000d294 	.word	0x2000d294
 8012958:	2000d291 	.word	0x2000d291
 801295c:	0801c1dc 	.word	0x0801c1dc
            } else {
              recv_data = cseg->p;
 8012960:	68bb      	ldr	r3, [r7, #8]
 8012962:	685b      	ldr	r3, [r3, #4]
 8012964:	4a70      	ldr	r2, [pc, #448]	; (8012b28 <tcp_receive+0xcf8>)
 8012966:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8012968:	68bb      	ldr	r3, [r7, #8]
 801296a:	2200      	movs	r2, #0
 801296c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801296e:	68bb      	ldr	r3, [r7, #8]
 8012970:	68db      	ldr	r3, [r3, #12]
 8012972:	899b      	ldrh	r3, [r3, #12]
 8012974:	b29b      	uxth	r3, r3
 8012976:	4618      	mov	r0, r3
 8012978:	f7fa fb78 	bl	800d06c <lwip_htons>
 801297c:	4603      	mov	r3, r0
 801297e:	b2db      	uxtb	r3, r3
 8012980:	f003 0301 	and.w	r3, r3, #1
 8012984:	2b00      	cmp	r3, #0
 8012986:	d00d      	beq.n	80129a4 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8012988:	4b68      	ldr	r3, [pc, #416]	; (8012b2c <tcp_receive+0xcfc>)
 801298a:	781b      	ldrb	r3, [r3, #0]
 801298c:	f043 0320 	orr.w	r3, r3, #32
 8012990:	b2da      	uxtb	r2, r3
 8012992:	4b66      	ldr	r3, [pc, #408]	; (8012b2c <tcp_receive+0xcfc>)
 8012994:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	7d1b      	ldrb	r3, [r3, #20]
 801299a:	2b04      	cmp	r3, #4
 801299c:	d102      	bne.n	80129a4 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	2207      	movs	r2, #7
 80129a2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80129a4:	68bb      	ldr	r3, [r7, #8]
 80129a6:	681a      	ldr	r2, [r3, #0]
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80129ac:	68b8      	ldr	r0, [r7, #8]
 80129ae:	f7fd fb04 	bl	800ffba <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d008      	beq.n	80129cc <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129be:	68db      	ldr	r3, [r3, #12]
 80129c0:	685a      	ldr	r2, [r3, #4]
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80129c6:	429a      	cmp	r2, r3
 80129c8:	f43f af43 	beq.w	8012852 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	8b5b      	ldrh	r3, [r3, #26]
 80129d0:	f003 0301 	and.w	r3, r3, #1
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d00e      	beq.n	80129f6 <tcp_receive+0xbc6>
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	8b5b      	ldrh	r3, [r3, #26]
 80129dc:	f023 0301 	bic.w	r3, r3, #1
 80129e0:	b29a      	uxth	r2, r3
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	835a      	strh	r2, [r3, #26]
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	8b5b      	ldrh	r3, [r3, #26]
 80129ea:	f043 0302 	orr.w	r3, r3, #2
 80129ee:	b29a      	uxth	r2, r3
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80129f4:	e188      	b.n	8012d08 <tcp_receive+0xed8>
        tcp_ack(pcb);
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	8b5b      	ldrh	r3, [r3, #26]
 80129fa:	f043 0301 	orr.w	r3, r3, #1
 80129fe:	b29a      	uxth	r2, r3
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012a04:	e180      	b.n	8012d08 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d106      	bne.n	8012a1c <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8012a0e:	4848      	ldr	r0, [pc, #288]	; (8012b30 <tcp_receive+0xd00>)
 8012a10:	f7fd faec 	bl	800ffec <tcp_seg_copy>
 8012a14:	4602      	mov	r2, r0
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	675a      	str	r2, [r3, #116]	; 0x74
 8012a1a:	e16d      	b.n	8012cf8 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012a1c:	2300      	movs	r3, #0
 8012a1e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a24:	63bb      	str	r3, [r7, #56]	; 0x38
 8012a26:	e157      	b.n	8012cd8 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8012a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a2a:	68db      	ldr	r3, [r3, #12]
 8012a2c:	685a      	ldr	r2, [r3, #4]
 8012a2e:	4b41      	ldr	r3, [pc, #260]	; (8012b34 <tcp_receive+0xd04>)
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	429a      	cmp	r2, r3
 8012a34:	d11d      	bne.n	8012a72 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8012a36:	4b3e      	ldr	r3, [pc, #248]	; (8012b30 <tcp_receive+0xd00>)
 8012a38:	891a      	ldrh	r2, [r3, #8]
 8012a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a3c:	891b      	ldrh	r3, [r3, #8]
 8012a3e:	429a      	cmp	r2, r3
 8012a40:	f240 814f 	bls.w	8012ce2 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012a44:	483a      	ldr	r0, [pc, #232]	; (8012b30 <tcp_receive+0xd00>)
 8012a46:	f7fd fad1 	bl	800ffec <tcp_seg_copy>
 8012a4a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012a4c:	697b      	ldr	r3, [r7, #20]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	f000 8149 	beq.w	8012ce6 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8012a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d003      	beq.n	8012a62 <tcp_receive+0xc32>
                    prev->next = cseg;
 8012a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a5c:	697a      	ldr	r2, [r7, #20]
 8012a5e:	601a      	str	r2, [r3, #0]
 8012a60:	e002      	b.n	8012a68 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	697a      	ldr	r2, [r7, #20]
 8012a66:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8012a68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012a6a:	6978      	ldr	r0, [r7, #20]
 8012a6c:	f7ff f8dc 	bl	8011c28 <tcp_oos_insert_segment>
                }
                break;
 8012a70:	e139      	b.n	8012ce6 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8012a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d117      	bne.n	8012aa8 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8012a78:	4b2e      	ldr	r3, [pc, #184]	; (8012b34 <tcp_receive+0xd04>)
 8012a7a:	681a      	ldr	r2, [r3, #0]
 8012a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a7e:	68db      	ldr	r3, [r3, #12]
 8012a80:	685b      	ldr	r3, [r3, #4]
 8012a82:	1ad3      	subs	r3, r2, r3
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	da57      	bge.n	8012b38 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012a88:	4829      	ldr	r0, [pc, #164]	; (8012b30 <tcp_receive+0xd00>)
 8012a8a:	f7fd faaf 	bl	800ffec <tcp_seg_copy>
 8012a8e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8012a90:	69bb      	ldr	r3, [r7, #24]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	f000 8129 	beq.w	8012cea <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	69ba      	ldr	r2, [r7, #24]
 8012a9c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8012a9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012aa0:	69b8      	ldr	r0, [r7, #24]
 8012aa2:	f7ff f8c1 	bl	8011c28 <tcp_oos_insert_segment>
                  }
                  break;
 8012aa6:	e120      	b.n	8012cea <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8012aa8:	4b22      	ldr	r3, [pc, #136]	; (8012b34 <tcp_receive+0xd04>)
 8012aaa:	681a      	ldr	r2, [r3, #0]
 8012aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012aae:	68db      	ldr	r3, [r3, #12]
 8012ab0:	685b      	ldr	r3, [r3, #4]
 8012ab2:	1ad3      	subs	r3, r2, r3
 8012ab4:	3b01      	subs	r3, #1
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	db3e      	blt.n	8012b38 <tcp_receive+0xd08>
 8012aba:	4b1e      	ldr	r3, [pc, #120]	; (8012b34 <tcp_receive+0xd04>)
 8012abc:	681a      	ldr	r2, [r3, #0]
 8012abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ac0:	68db      	ldr	r3, [r3, #12]
 8012ac2:	685b      	ldr	r3, [r3, #4]
 8012ac4:	1ad3      	subs	r3, r2, r3
 8012ac6:	3301      	adds	r3, #1
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	dc35      	bgt.n	8012b38 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012acc:	4818      	ldr	r0, [pc, #96]	; (8012b30 <tcp_receive+0xd00>)
 8012ace:	f7fd fa8d 	bl	800ffec <tcp_seg_copy>
 8012ad2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012ad4:	69fb      	ldr	r3, [r7, #28]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	f000 8109 	beq.w	8012cee <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ade:	68db      	ldr	r3, [r3, #12]
 8012ae0:	685b      	ldr	r3, [r3, #4]
 8012ae2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012ae4:	8912      	ldrh	r2, [r2, #8]
 8012ae6:	441a      	add	r2, r3
 8012ae8:	4b12      	ldr	r3, [pc, #72]	; (8012b34 <tcp_receive+0xd04>)
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	1ad3      	subs	r3, r2, r3
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	dd12      	ble.n	8012b18 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012af2:	4b10      	ldr	r3, [pc, #64]	; (8012b34 <tcp_receive+0xd04>)
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	b29a      	uxth	r2, r3
 8012af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012afa:	68db      	ldr	r3, [r3, #12]
 8012afc:	685b      	ldr	r3, [r3, #4]
 8012afe:	b29b      	uxth	r3, r3
 8012b00:	1ad3      	subs	r3, r2, r3
 8012b02:	b29a      	uxth	r2, r3
 8012b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b06:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8012b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b0a:	685a      	ldr	r2, [r3, #4]
 8012b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b0e:	891b      	ldrh	r3, [r3, #8]
 8012b10:	4619      	mov	r1, r3
 8012b12:	4610      	mov	r0, r2
 8012b14:	f7fb fcd0 	bl	800e4b8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b1a:	69fa      	ldr	r2, [r7, #28]
 8012b1c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012b1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012b20:	69f8      	ldr	r0, [r7, #28]
 8012b22:	f7ff f881 	bl	8011c28 <tcp_oos_insert_segment>
                  }
                  break;
 8012b26:	e0e2      	b.n	8012cee <tcp_receive+0xebe>
 8012b28:	2000d294 	.word	0x2000d294
 8012b2c:	2000d291 	.word	0x2000d291
 8012b30:	2000d264 	.word	0x2000d264
 8012b34:	2000d284 	.word	0x2000d284
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8012b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b3a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	f040 80c6 	bne.w	8012cd2 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8012b46:	4b80      	ldr	r3, [pc, #512]	; (8012d48 <tcp_receive+0xf18>)
 8012b48:	681a      	ldr	r2, [r3, #0]
 8012b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b4c:	68db      	ldr	r3, [r3, #12]
 8012b4e:	685b      	ldr	r3, [r3, #4]
 8012b50:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	f340 80bd 	ble.w	8012cd2 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b5a:	68db      	ldr	r3, [r3, #12]
 8012b5c:	899b      	ldrh	r3, [r3, #12]
 8012b5e:	b29b      	uxth	r3, r3
 8012b60:	4618      	mov	r0, r3
 8012b62:	f7fa fa83 	bl	800d06c <lwip_htons>
 8012b66:	4603      	mov	r3, r0
 8012b68:	b2db      	uxtb	r3, r3
 8012b6a:	f003 0301 	and.w	r3, r3, #1
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	f040 80bf 	bne.w	8012cf2 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012b74:	4875      	ldr	r0, [pc, #468]	; (8012d4c <tcp_receive+0xf1c>)
 8012b76:	f7fd fa39 	bl	800ffec <tcp_seg_copy>
 8012b7a:	4602      	mov	r2, r0
 8012b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b7e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	f000 80b6 	beq.w	8012cf6 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b8c:	68db      	ldr	r3, [r3, #12]
 8012b8e:	685b      	ldr	r3, [r3, #4]
 8012b90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012b92:	8912      	ldrh	r2, [r2, #8]
 8012b94:	441a      	add	r2, r3
 8012b96:	4b6c      	ldr	r3, [pc, #432]	; (8012d48 <tcp_receive+0xf18>)
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	1ad3      	subs	r3, r2, r3
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	dd12      	ble.n	8012bc6 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012ba0:	4b69      	ldr	r3, [pc, #420]	; (8012d48 <tcp_receive+0xf18>)
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	b29a      	uxth	r2, r3
 8012ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ba8:	68db      	ldr	r3, [r3, #12]
 8012baa:	685b      	ldr	r3, [r3, #4]
 8012bac:	b29b      	uxth	r3, r3
 8012bae:	1ad3      	subs	r3, r2, r3
 8012bb0:	b29a      	uxth	r2, r3
 8012bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bb4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bb8:	685a      	ldr	r2, [r3, #4]
 8012bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bbc:	891b      	ldrh	r3, [r3, #8]
 8012bbe:	4619      	mov	r1, r3
 8012bc0:	4610      	mov	r0, r2
 8012bc2:	f7fb fc79 	bl	800e4b8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012bc6:	4b62      	ldr	r3, [pc, #392]	; (8012d50 <tcp_receive+0xf20>)
 8012bc8:	881b      	ldrh	r3, [r3, #0]
 8012bca:	461a      	mov	r2, r3
 8012bcc:	4b5e      	ldr	r3, [pc, #376]	; (8012d48 <tcp_receive+0xf18>)
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	441a      	add	r2, r3
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bd6:	6879      	ldr	r1, [r7, #4]
 8012bd8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012bda:	440b      	add	r3, r1
 8012bdc:	1ad3      	subs	r3, r2, r3
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	f340 8089 	ble.w	8012cf6 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	68db      	ldr	r3, [r3, #12]
 8012bea:	899b      	ldrh	r3, [r3, #12]
 8012bec:	b29b      	uxth	r3, r3
 8012bee:	4618      	mov	r0, r3
 8012bf0:	f7fa fa3c 	bl	800d06c <lwip_htons>
 8012bf4:	4603      	mov	r3, r0
 8012bf6:	b2db      	uxtb	r3, r3
 8012bf8:	f003 0301 	and.w	r3, r3, #1
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d022      	beq.n	8012c46 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	68db      	ldr	r3, [r3, #12]
 8012c06:	899b      	ldrh	r3, [r3, #12]
 8012c08:	b29b      	uxth	r3, r3
 8012c0a:	b21b      	sxth	r3, r3
 8012c0c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012c10:	b21c      	sxth	r4, r3
 8012c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	68db      	ldr	r3, [r3, #12]
 8012c18:	899b      	ldrh	r3, [r3, #12]
 8012c1a:	b29b      	uxth	r3, r3
 8012c1c:	4618      	mov	r0, r3
 8012c1e:	f7fa fa25 	bl	800d06c <lwip_htons>
 8012c22:	4603      	mov	r3, r0
 8012c24:	b2db      	uxtb	r3, r3
 8012c26:	b29b      	uxth	r3, r3
 8012c28:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012c2c:	b29b      	uxth	r3, r3
 8012c2e:	4618      	mov	r0, r3
 8012c30:	f7fa fa1c 	bl	800d06c <lwip_htons>
 8012c34:	4603      	mov	r3, r0
 8012c36:	b21b      	sxth	r3, r3
 8012c38:	4323      	orrs	r3, r4
 8012c3a:	b21a      	sxth	r2, r3
 8012c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	68db      	ldr	r3, [r3, #12]
 8012c42:	b292      	uxth	r2, r2
 8012c44:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c4a:	b29a      	uxth	r2, r3
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012c50:	4413      	add	r3, r2
 8012c52:	b299      	uxth	r1, r3
 8012c54:	4b3c      	ldr	r3, [pc, #240]	; (8012d48 <tcp_receive+0xf18>)
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	b29a      	uxth	r2, r3
 8012c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	1a8a      	subs	r2, r1, r2
 8012c60:	b292      	uxth	r2, r2
 8012c62:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	685a      	ldr	r2, [r3, #4]
 8012c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	891b      	ldrh	r3, [r3, #8]
 8012c70:	4619      	mov	r1, r3
 8012c72:	4610      	mov	r0, r2
 8012c74:	f7fb fc20 	bl	800e4b8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8012c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	891c      	ldrh	r4, [r3, #8]
 8012c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	68db      	ldr	r3, [r3, #12]
 8012c84:	899b      	ldrh	r3, [r3, #12]
 8012c86:	b29b      	uxth	r3, r3
 8012c88:	4618      	mov	r0, r3
 8012c8a:	f7fa f9ef 	bl	800d06c <lwip_htons>
 8012c8e:	4603      	mov	r3, r0
 8012c90:	b2db      	uxtb	r3, r3
 8012c92:	f003 0303 	and.w	r3, r3, #3
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d001      	beq.n	8012c9e <tcp_receive+0xe6e>
 8012c9a:	2301      	movs	r3, #1
 8012c9c:	e000      	b.n	8012ca0 <tcp_receive+0xe70>
 8012c9e:	2300      	movs	r3, #0
 8012ca0:	4423      	add	r3, r4
 8012ca2:	b29a      	uxth	r2, r3
 8012ca4:	4b2a      	ldr	r3, [pc, #168]	; (8012d50 <tcp_receive+0xf20>)
 8012ca6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012ca8:	4b29      	ldr	r3, [pc, #164]	; (8012d50 <tcp_receive+0xf20>)
 8012caa:	881b      	ldrh	r3, [r3, #0]
 8012cac:	461a      	mov	r2, r3
 8012cae:	4b26      	ldr	r3, [pc, #152]	; (8012d48 <tcp_receive+0xf18>)
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	441a      	add	r2, r3
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cb8:	6879      	ldr	r1, [r7, #4]
 8012cba:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012cbc:	440b      	add	r3, r1
 8012cbe:	429a      	cmp	r2, r3
 8012cc0:	d019      	beq.n	8012cf6 <tcp_receive+0xec6>
 8012cc2:	4b24      	ldr	r3, [pc, #144]	; (8012d54 <tcp_receive+0xf24>)
 8012cc4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8012cc8:	4923      	ldr	r1, [pc, #140]	; (8012d58 <tcp_receive+0xf28>)
 8012cca:	4824      	ldr	r0, [pc, #144]	; (8012d5c <tcp_receive+0xf2c>)
 8012ccc:	f005 fcc0 	bl	8018650 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012cd0:	e011      	b.n	8012cf6 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8012cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	f47f aea4 	bne.w	8012a28 <tcp_receive+0xbf8>
 8012ce0:	e00a      	b.n	8012cf8 <tcp_receive+0xec8>
                break;
 8012ce2:	bf00      	nop
 8012ce4:	e008      	b.n	8012cf8 <tcp_receive+0xec8>
                break;
 8012ce6:	bf00      	nop
 8012ce8:	e006      	b.n	8012cf8 <tcp_receive+0xec8>
                  break;
 8012cea:	bf00      	nop
 8012cec:	e004      	b.n	8012cf8 <tcp_receive+0xec8>
                  break;
 8012cee:	bf00      	nop
 8012cf0:	e002      	b.n	8012cf8 <tcp_receive+0xec8>
                  break;
 8012cf2:	bf00      	nop
 8012cf4:	e000      	b.n	8012cf8 <tcp_receive+0xec8>
                break;
 8012cf6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012cf8:	6878      	ldr	r0, [r7, #4]
 8012cfa:	f001 fe8b 	bl	8014a14 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012cfe:	e003      	b.n	8012d08 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012d00:	6878      	ldr	r0, [r7, #4]
 8012d02:	f001 fe87 	bl	8014a14 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012d06:	e01a      	b.n	8012d3e <tcp_receive+0xf0e>
 8012d08:	e019      	b.n	8012d3e <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8012d0a:	4b0f      	ldr	r3, [pc, #60]	; (8012d48 <tcp_receive+0xf18>)
 8012d0c:	681a      	ldr	r2, [r3, #0]
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d12:	1ad3      	subs	r3, r2, r3
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	db0a      	blt.n	8012d2e <tcp_receive+0xefe>
 8012d18:	4b0b      	ldr	r3, [pc, #44]	; (8012d48 <tcp_receive+0xf18>)
 8012d1a:	681a      	ldr	r2, [r3, #0]
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d20:	6879      	ldr	r1, [r7, #4]
 8012d22:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012d24:	440b      	add	r3, r1
 8012d26:	1ad3      	subs	r3, r2, r3
 8012d28:	3301      	adds	r3, #1
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	dd07      	ble.n	8012d3e <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	8b5b      	ldrh	r3, [r3, #26]
 8012d32:	f043 0302 	orr.w	r3, r3, #2
 8012d36:	b29a      	uxth	r2, r3
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012d3c:	e7ff      	b.n	8012d3e <tcp_receive+0xf0e>
 8012d3e:	bf00      	nop
 8012d40:	3750      	adds	r7, #80	; 0x50
 8012d42:	46bd      	mov	sp, r7
 8012d44:	bdb0      	pop	{r4, r5, r7, pc}
 8012d46:	bf00      	nop
 8012d48:	2000d284 	.word	0x2000d284
 8012d4c:	2000d264 	.word	0x2000d264
 8012d50:	2000d28e 	.word	0x2000d28e
 8012d54:	0801bda0 	.word	0x0801bda0
 8012d58:	0801c148 	.word	0x0801c148
 8012d5c:	0801bdec 	.word	0x0801bdec

08012d60 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012d60:	b480      	push	{r7}
 8012d62:	b083      	sub	sp, #12
 8012d64:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8012d66:	4b15      	ldr	r3, [pc, #84]	; (8012dbc <tcp_get_next_optbyte+0x5c>)
 8012d68:	881b      	ldrh	r3, [r3, #0]
 8012d6a:	1c5a      	adds	r2, r3, #1
 8012d6c:	b291      	uxth	r1, r2
 8012d6e:	4a13      	ldr	r2, [pc, #76]	; (8012dbc <tcp_get_next_optbyte+0x5c>)
 8012d70:	8011      	strh	r1, [r2, #0]
 8012d72:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012d74:	4b12      	ldr	r3, [pc, #72]	; (8012dc0 <tcp_get_next_optbyte+0x60>)
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d004      	beq.n	8012d86 <tcp_get_next_optbyte+0x26>
 8012d7c:	4b11      	ldr	r3, [pc, #68]	; (8012dc4 <tcp_get_next_optbyte+0x64>)
 8012d7e:	881b      	ldrh	r3, [r3, #0]
 8012d80:	88fa      	ldrh	r2, [r7, #6]
 8012d82:	429a      	cmp	r2, r3
 8012d84:	d208      	bcs.n	8012d98 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8012d86:	4b10      	ldr	r3, [pc, #64]	; (8012dc8 <tcp_get_next_optbyte+0x68>)
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	3314      	adds	r3, #20
 8012d8c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012d8e:	88fb      	ldrh	r3, [r7, #6]
 8012d90:	683a      	ldr	r2, [r7, #0]
 8012d92:	4413      	add	r3, r2
 8012d94:	781b      	ldrb	r3, [r3, #0]
 8012d96:	e00b      	b.n	8012db0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012d98:	88fb      	ldrh	r3, [r7, #6]
 8012d9a:	b2da      	uxtb	r2, r3
 8012d9c:	4b09      	ldr	r3, [pc, #36]	; (8012dc4 <tcp_get_next_optbyte+0x64>)
 8012d9e:	881b      	ldrh	r3, [r3, #0]
 8012da0:	b2db      	uxtb	r3, r3
 8012da2:	1ad3      	subs	r3, r2, r3
 8012da4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8012da6:	4b06      	ldr	r3, [pc, #24]	; (8012dc0 <tcp_get_next_optbyte+0x60>)
 8012da8:	681a      	ldr	r2, [r3, #0]
 8012daa:	797b      	ldrb	r3, [r7, #5]
 8012dac:	4413      	add	r3, r2
 8012dae:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012db0:	4618      	mov	r0, r3
 8012db2:	370c      	adds	r7, #12
 8012db4:	46bd      	mov	sp, r7
 8012db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dba:	4770      	bx	lr
 8012dbc:	2000d280 	.word	0x2000d280
 8012dc0:	2000d27c 	.word	0x2000d27c
 8012dc4:	2000d27a 	.word	0x2000d27a
 8012dc8:	2000d274 	.word	0x2000d274

08012dcc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012dcc:	b580      	push	{r7, lr}
 8012dce:	b084      	sub	sp, #16
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d106      	bne.n	8012de8 <tcp_parseopt+0x1c>
 8012dda:	4b32      	ldr	r3, [pc, #200]	; (8012ea4 <tcp_parseopt+0xd8>)
 8012ddc:	f240 727d 	movw	r2, #1917	; 0x77d
 8012de0:	4931      	ldr	r1, [pc, #196]	; (8012ea8 <tcp_parseopt+0xdc>)
 8012de2:	4832      	ldr	r0, [pc, #200]	; (8012eac <tcp_parseopt+0xe0>)
 8012de4:	f005 fc34 	bl	8018650 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012de8:	4b31      	ldr	r3, [pc, #196]	; (8012eb0 <tcp_parseopt+0xe4>)
 8012dea:	881b      	ldrh	r3, [r3, #0]
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d055      	beq.n	8012e9c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012df0:	4b30      	ldr	r3, [pc, #192]	; (8012eb4 <tcp_parseopt+0xe8>)
 8012df2:	2200      	movs	r2, #0
 8012df4:	801a      	strh	r2, [r3, #0]
 8012df6:	e045      	b.n	8012e84 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8012df8:	f7ff ffb2 	bl	8012d60 <tcp_get_next_optbyte>
 8012dfc:	4603      	mov	r3, r0
 8012dfe:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012e00:	7bfb      	ldrb	r3, [r7, #15]
 8012e02:	2b02      	cmp	r3, #2
 8012e04:	d006      	beq.n	8012e14 <tcp_parseopt+0x48>
 8012e06:	2b02      	cmp	r3, #2
 8012e08:	dc2b      	bgt.n	8012e62 <tcp_parseopt+0x96>
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d041      	beq.n	8012e92 <tcp_parseopt+0xc6>
 8012e0e:	2b01      	cmp	r3, #1
 8012e10:	d127      	bne.n	8012e62 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8012e12:	e037      	b.n	8012e84 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012e14:	f7ff ffa4 	bl	8012d60 <tcp_get_next_optbyte>
 8012e18:	4603      	mov	r3, r0
 8012e1a:	2b04      	cmp	r3, #4
 8012e1c:	d13b      	bne.n	8012e96 <tcp_parseopt+0xca>
 8012e1e:	4b25      	ldr	r3, [pc, #148]	; (8012eb4 <tcp_parseopt+0xe8>)
 8012e20:	881b      	ldrh	r3, [r3, #0]
 8012e22:	3301      	adds	r3, #1
 8012e24:	4a22      	ldr	r2, [pc, #136]	; (8012eb0 <tcp_parseopt+0xe4>)
 8012e26:	8812      	ldrh	r2, [r2, #0]
 8012e28:	4293      	cmp	r3, r2
 8012e2a:	da34      	bge.n	8012e96 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8012e2c:	f7ff ff98 	bl	8012d60 <tcp_get_next_optbyte>
 8012e30:	4603      	mov	r3, r0
 8012e32:	b29b      	uxth	r3, r3
 8012e34:	021b      	lsls	r3, r3, #8
 8012e36:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8012e38:	f7ff ff92 	bl	8012d60 <tcp_get_next_optbyte>
 8012e3c:	4603      	mov	r3, r0
 8012e3e:	b29a      	uxth	r2, r3
 8012e40:	89bb      	ldrh	r3, [r7, #12]
 8012e42:	4313      	orrs	r3, r2
 8012e44:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8012e46:	89bb      	ldrh	r3, [r7, #12]
 8012e48:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012e4c:	d804      	bhi.n	8012e58 <tcp_parseopt+0x8c>
 8012e4e:	89bb      	ldrh	r3, [r7, #12]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d001      	beq.n	8012e58 <tcp_parseopt+0x8c>
 8012e54:	89ba      	ldrh	r2, [r7, #12]
 8012e56:	e001      	b.n	8012e5c <tcp_parseopt+0x90>
 8012e58:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8012e60:	e010      	b.n	8012e84 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8012e62:	f7ff ff7d 	bl	8012d60 <tcp_get_next_optbyte>
 8012e66:	4603      	mov	r3, r0
 8012e68:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8012e6a:	7afb      	ldrb	r3, [r7, #11]
 8012e6c:	2b01      	cmp	r3, #1
 8012e6e:	d914      	bls.n	8012e9a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012e70:	7afb      	ldrb	r3, [r7, #11]
 8012e72:	b29a      	uxth	r2, r3
 8012e74:	4b0f      	ldr	r3, [pc, #60]	; (8012eb4 <tcp_parseopt+0xe8>)
 8012e76:	881b      	ldrh	r3, [r3, #0]
 8012e78:	4413      	add	r3, r2
 8012e7a:	b29b      	uxth	r3, r3
 8012e7c:	3b02      	subs	r3, #2
 8012e7e:	b29a      	uxth	r2, r3
 8012e80:	4b0c      	ldr	r3, [pc, #48]	; (8012eb4 <tcp_parseopt+0xe8>)
 8012e82:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012e84:	4b0b      	ldr	r3, [pc, #44]	; (8012eb4 <tcp_parseopt+0xe8>)
 8012e86:	881a      	ldrh	r2, [r3, #0]
 8012e88:	4b09      	ldr	r3, [pc, #36]	; (8012eb0 <tcp_parseopt+0xe4>)
 8012e8a:	881b      	ldrh	r3, [r3, #0]
 8012e8c:	429a      	cmp	r2, r3
 8012e8e:	d3b3      	bcc.n	8012df8 <tcp_parseopt+0x2c>
 8012e90:	e004      	b.n	8012e9c <tcp_parseopt+0xd0>
          return;
 8012e92:	bf00      	nop
 8012e94:	e002      	b.n	8012e9c <tcp_parseopt+0xd0>
            return;
 8012e96:	bf00      	nop
 8012e98:	e000      	b.n	8012e9c <tcp_parseopt+0xd0>
            return;
 8012e9a:	bf00      	nop
      }
    }
  }
}
 8012e9c:	3710      	adds	r7, #16
 8012e9e:	46bd      	mov	sp, r7
 8012ea0:	bd80      	pop	{r7, pc}
 8012ea2:	bf00      	nop
 8012ea4:	0801bda0 	.word	0x0801bda0
 8012ea8:	0801c204 	.word	0x0801c204
 8012eac:	0801bdec 	.word	0x0801bdec
 8012eb0:	2000d278 	.word	0x2000d278
 8012eb4:	2000d280 	.word	0x2000d280

08012eb8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012eb8:	b480      	push	{r7}
 8012eba:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012ebc:	4b05      	ldr	r3, [pc, #20]	; (8012ed4 <tcp_trigger_input_pcb_close+0x1c>)
 8012ebe:	781b      	ldrb	r3, [r3, #0]
 8012ec0:	f043 0310 	orr.w	r3, r3, #16
 8012ec4:	b2da      	uxtb	r2, r3
 8012ec6:	4b03      	ldr	r3, [pc, #12]	; (8012ed4 <tcp_trigger_input_pcb_close+0x1c>)
 8012ec8:	701a      	strb	r2, [r3, #0]
}
 8012eca:	bf00      	nop
 8012ecc:	46bd      	mov	sp, r7
 8012ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed2:	4770      	bx	lr
 8012ed4:	2000d291 	.word	0x2000d291

08012ed8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012ed8:	b580      	push	{r7, lr}
 8012eda:	b084      	sub	sp, #16
 8012edc:	af00      	add	r7, sp, #0
 8012ede:	60f8      	str	r0, [r7, #12]
 8012ee0:	60b9      	str	r1, [r7, #8]
 8012ee2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d00a      	beq.n	8012f00 <tcp_route+0x28>
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	7a1b      	ldrb	r3, [r3, #8]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d006      	beq.n	8012f00 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	7a1b      	ldrb	r3, [r3, #8]
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	f7fb f8d6 	bl	800e0a8 <netif_get_by_index>
 8012efc:	4603      	mov	r3, r0
 8012efe:	e003      	b.n	8012f08 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012f00:	6878      	ldr	r0, [r7, #4]
 8012f02:	f003 fe35 	bl	8016b70 <ip4_route>
 8012f06:	4603      	mov	r3, r0
  }
}
 8012f08:	4618      	mov	r0, r3
 8012f0a:	3710      	adds	r7, #16
 8012f0c:	46bd      	mov	sp, r7
 8012f0e:	bd80      	pop	{r7, pc}

08012f10 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8012f10:	b590      	push	{r4, r7, lr}
 8012f12:	b087      	sub	sp, #28
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	60f8      	str	r0, [r7, #12]
 8012f18:	60b9      	str	r1, [r7, #8]
 8012f1a:	603b      	str	r3, [r7, #0]
 8012f1c:	4613      	mov	r3, r2
 8012f1e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d105      	bne.n	8012f32 <tcp_create_segment+0x22>
 8012f26:	4b44      	ldr	r3, [pc, #272]	; (8013038 <tcp_create_segment+0x128>)
 8012f28:	22a3      	movs	r2, #163	; 0xa3
 8012f2a:	4944      	ldr	r1, [pc, #272]	; (801303c <tcp_create_segment+0x12c>)
 8012f2c:	4844      	ldr	r0, [pc, #272]	; (8013040 <tcp_create_segment+0x130>)
 8012f2e:	f005 fb8f 	bl	8018650 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8012f32:	68bb      	ldr	r3, [r7, #8]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d105      	bne.n	8012f44 <tcp_create_segment+0x34>
 8012f38:	4b3f      	ldr	r3, [pc, #252]	; (8013038 <tcp_create_segment+0x128>)
 8012f3a:	22a4      	movs	r2, #164	; 0xa4
 8012f3c:	4941      	ldr	r1, [pc, #260]	; (8013044 <tcp_create_segment+0x134>)
 8012f3e:	4840      	ldr	r0, [pc, #256]	; (8013040 <tcp_create_segment+0x130>)
 8012f40:	f005 fb86 	bl	8018650 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012f44:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012f48:	009b      	lsls	r3, r3, #2
 8012f4a:	b2db      	uxtb	r3, r3
 8012f4c:	f003 0304 	and.w	r3, r3, #4
 8012f50:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012f52:	2003      	movs	r0, #3
 8012f54:	f7fa fd40 	bl	800d9d8 <memp_malloc>
 8012f58:	6138      	str	r0, [r7, #16]
 8012f5a:	693b      	ldr	r3, [r7, #16]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d104      	bne.n	8012f6a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012f60:	68b8      	ldr	r0, [r7, #8]
 8012f62:	f7fb fc61 	bl	800e828 <pbuf_free>
    return NULL;
 8012f66:	2300      	movs	r3, #0
 8012f68:	e061      	b.n	801302e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8012f6a:	693b      	ldr	r3, [r7, #16]
 8012f6c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012f70:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8012f72:	693b      	ldr	r3, [r7, #16]
 8012f74:	2200      	movs	r2, #0
 8012f76:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012f78:	693b      	ldr	r3, [r7, #16]
 8012f7a:	68ba      	ldr	r2, [r7, #8]
 8012f7c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8012f7e:	68bb      	ldr	r3, [r7, #8]
 8012f80:	891a      	ldrh	r2, [r3, #8]
 8012f82:	7dfb      	ldrb	r3, [r7, #23]
 8012f84:	b29b      	uxth	r3, r3
 8012f86:	429a      	cmp	r2, r3
 8012f88:	d205      	bcs.n	8012f96 <tcp_create_segment+0x86>
 8012f8a:	4b2b      	ldr	r3, [pc, #172]	; (8013038 <tcp_create_segment+0x128>)
 8012f8c:	22b0      	movs	r2, #176	; 0xb0
 8012f8e:	492e      	ldr	r1, [pc, #184]	; (8013048 <tcp_create_segment+0x138>)
 8012f90:	482b      	ldr	r0, [pc, #172]	; (8013040 <tcp_create_segment+0x130>)
 8012f92:	f005 fb5d 	bl	8018650 <iprintf>
  seg->len = p->tot_len - optlen;
 8012f96:	68bb      	ldr	r3, [r7, #8]
 8012f98:	891a      	ldrh	r2, [r3, #8]
 8012f9a:	7dfb      	ldrb	r3, [r7, #23]
 8012f9c:	b29b      	uxth	r3, r3
 8012f9e:	1ad3      	subs	r3, r2, r3
 8012fa0:	b29a      	uxth	r2, r3
 8012fa2:	693b      	ldr	r3, [r7, #16]
 8012fa4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8012fa6:	2114      	movs	r1, #20
 8012fa8:	68b8      	ldr	r0, [r7, #8]
 8012faa:	f7fb fb75 	bl	800e698 <pbuf_add_header>
 8012fae:	4603      	mov	r3, r0
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d004      	beq.n	8012fbe <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012fb4:	6938      	ldr	r0, [r7, #16]
 8012fb6:	f7fd f800 	bl	800ffba <tcp_seg_free>
    return NULL;
 8012fba:	2300      	movs	r3, #0
 8012fbc:	e037      	b.n	801302e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012fbe:	693b      	ldr	r3, [r7, #16]
 8012fc0:	685b      	ldr	r3, [r3, #4]
 8012fc2:	685a      	ldr	r2, [r3, #4]
 8012fc4:	693b      	ldr	r3, [r7, #16]
 8012fc6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	8ada      	ldrh	r2, [r3, #22]
 8012fcc:	693b      	ldr	r3, [r7, #16]
 8012fce:	68dc      	ldr	r4, [r3, #12]
 8012fd0:	4610      	mov	r0, r2
 8012fd2:	f7fa f84b 	bl	800d06c <lwip_htons>
 8012fd6:	4603      	mov	r3, r0
 8012fd8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	8b1a      	ldrh	r2, [r3, #24]
 8012fde:	693b      	ldr	r3, [r7, #16]
 8012fe0:	68dc      	ldr	r4, [r3, #12]
 8012fe2:	4610      	mov	r0, r2
 8012fe4:	f7fa f842 	bl	800d06c <lwip_htons>
 8012fe8:	4603      	mov	r3, r0
 8012fea:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012fec:	693b      	ldr	r3, [r7, #16]
 8012fee:	68dc      	ldr	r4, [r3, #12]
 8012ff0:	6838      	ldr	r0, [r7, #0]
 8012ff2:	f7fa f850 	bl	800d096 <lwip_htonl>
 8012ff6:	4603      	mov	r3, r0
 8012ff8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8012ffa:	7dfb      	ldrb	r3, [r7, #23]
 8012ffc:	089b      	lsrs	r3, r3, #2
 8012ffe:	b2db      	uxtb	r3, r3
 8013000:	b29b      	uxth	r3, r3
 8013002:	3305      	adds	r3, #5
 8013004:	b29b      	uxth	r3, r3
 8013006:	031b      	lsls	r3, r3, #12
 8013008:	b29a      	uxth	r2, r3
 801300a:	79fb      	ldrb	r3, [r7, #7]
 801300c:	b29b      	uxth	r3, r3
 801300e:	4313      	orrs	r3, r2
 8013010:	b29a      	uxth	r2, r3
 8013012:	693b      	ldr	r3, [r7, #16]
 8013014:	68dc      	ldr	r4, [r3, #12]
 8013016:	4610      	mov	r0, r2
 8013018:	f7fa f828 	bl	800d06c <lwip_htons>
 801301c:	4603      	mov	r3, r0
 801301e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8013020:	693b      	ldr	r3, [r7, #16]
 8013022:	68db      	ldr	r3, [r3, #12]
 8013024:	2200      	movs	r2, #0
 8013026:	749a      	strb	r2, [r3, #18]
 8013028:	2200      	movs	r2, #0
 801302a:	74da      	strb	r2, [r3, #19]
  return seg;
 801302c:	693b      	ldr	r3, [r7, #16]
}
 801302e:	4618      	mov	r0, r3
 8013030:	371c      	adds	r7, #28
 8013032:	46bd      	mov	sp, r7
 8013034:	bd90      	pop	{r4, r7, pc}
 8013036:	bf00      	nop
 8013038:	0801c220 	.word	0x0801c220
 801303c:	0801c254 	.word	0x0801c254
 8013040:	0801c274 	.word	0x0801c274
 8013044:	0801c29c 	.word	0x0801c29c
 8013048:	0801c2c0 	.word	0x0801c2c0

0801304c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801304c:	b580      	push	{r7, lr}
 801304e:	b086      	sub	sp, #24
 8013050:	af00      	add	r7, sp, #0
 8013052:	607b      	str	r3, [r7, #4]
 8013054:	4603      	mov	r3, r0
 8013056:	73fb      	strb	r3, [r7, #15]
 8013058:	460b      	mov	r3, r1
 801305a:	81bb      	strh	r3, [r7, #12]
 801305c:	4613      	mov	r3, r2
 801305e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8013060:	89bb      	ldrh	r3, [r7, #12]
 8013062:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	2b00      	cmp	r3, #0
 8013068:	d105      	bne.n	8013076 <tcp_pbuf_prealloc+0x2a>
 801306a:	4b30      	ldr	r3, [pc, #192]	; (801312c <tcp_pbuf_prealloc+0xe0>)
 801306c:	22e8      	movs	r2, #232	; 0xe8
 801306e:	4930      	ldr	r1, [pc, #192]	; (8013130 <tcp_pbuf_prealloc+0xe4>)
 8013070:	4830      	ldr	r0, [pc, #192]	; (8013134 <tcp_pbuf_prealloc+0xe8>)
 8013072:	f005 faed 	bl	8018650 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8013076:	6a3b      	ldr	r3, [r7, #32]
 8013078:	2b00      	cmp	r3, #0
 801307a:	d105      	bne.n	8013088 <tcp_pbuf_prealloc+0x3c>
 801307c:	4b2b      	ldr	r3, [pc, #172]	; (801312c <tcp_pbuf_prealloc+0xe0>)
 801307e:	22e9      	movs	r2, #233	; 0xe9
 8013080:	492d      	ldr	r1, [pc, #180]	; (8013138 <tcp_pbuf_prealloc+0xec>)
 8013082:	482c      	ldr	r0, [pc, #176]	; (8013134 <tcp_pbuf_prealloc+0xe8>)
 8013084:	f005 fae4 	bl	8018650 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8013088:	89ba      	ldrh	r2, [r7, #12]
 801308a:	897b      	ldrh	r3, [r7, #10]
 801308c:	429a      	cmp	r2, r3
 801308e:	d221      	bcs.n	80130d4 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013090:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013094:	f003 0302 	and.w	r3, r3, #2
 8013098:	2b00      	cmp	r3, #0
 801309a:	d111      	bne.n	80130c0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801309c:	6a3b      	ldr	r3, [r7, #32]
 801309e:	8b5b      	ldrh	r3, [r3, #26]
 80130a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d115      	bne.n	80130d4 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80130a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d007      	beq.n	80130c0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80130b0:	6a3b      	ldr	r3, [r7, #32]
 80130b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d103      	bne.n	80130c0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80130b8:	6a3b      	ldr	r3, [r7, #32]
 80130ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d009      	beq.n	80130d4 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80130c0:	89bb      	ldrh	r3, [r7, #12]
 80130c2:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80130c6:	f023 0203 	bic.w	r2, r3, #3
 80130ca:	897b      	ldrh	r3, [r7, #10]
 80130cc:	4293      	cmp	r3, r2
 80130ce:	bf28      	it	cs
 80130d0:	4613      	movcs	r3, r2
 80130d2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80130d4:	8af9      	ldrh	r1, [r7, #22]
 80130d6:	7bfb      	ldrb	r3, [r7, #15]
 80130d8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80130dc:	4618      	mov	r0, r3
 80130de:	f7fb f88d 	bl	800e1fc <pbuf_alloc>
 80130e2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80130e4:	693b      	ldr	r3, [r7, #16]
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d101      	bne.n	80130ee <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80130ea:	2300      	movs	r3, #0
 80130ec:	e019      	b.n	8013122 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80130ee:	693b      	ldr	r3, [r7, #16]
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d006      	beq.n	8013104 <tcp_pbuf_prealloc+0xb8>
 80130f6:	4b0d      	ldr	r3, [pc, #52]	; (801312c <tcp_pbuf_prealloc+0xe0>)
 80130f8:	f240 120b 	movw	r2, #267	; 0x10b
 80130fc:	490f      	ldr	r1, [pc, #60]	; (801313c <tcp_pbuf_prealloc+0xf0>)
 80130fe:	480d      	ldr	r0, [pc, #52]	; (8013134 <tcp_pbuf_prealloc+0xe8>)
 8013100:	f005 faa6 	bl	8018650 <iprintf>
  *oversize = p->len - length;
 8013104:	693b      	ldr	r3, [r7, #16]
 8013106:	895a      	ldrh	r2, [r3, #10]
 8013108:	89bb      	ldrh	r3, [r7, #12]
 801310a:	1ad3      	subs	r3, r2, r3
 801310c:	b29a      	uxth	r2, r3
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8013112:	693b      	ldr	r3, [r7, #16]
 8013114:	89ba      	ldrh	r2, [r7, #12]
 8013116:	811a      	strh	r2, [r3, #8]
 8013118:	693b      	ldr	r3, [r7, #16]
 801311a:	891a      	ldrh	r2, [r3, #8]
 801311c:	693b      	ldr	r3, [r7, #16]
 801311e:	815a      	strh	r2, [r3, #10]
  return p;
 8013120:	693b      	ldr	r3, [r7, #16]
}
 8013122:	4618      	mov	r0, r3
 8013124:	3718      	adds	r7, #24
 8013126:	46bd      	mov	sp, r7
 8013128:	bd80      	pop	{r7, pc}
 801312a:	bf00      	nop
 801312c:	0801c220 	.word	0x0801c220
 8013130:	0801c2d8 	.word	0x0801c2d8
 8013134:	0801c274 	.word	0x0801c274
 8013138:	0801c2fc 	.word	0x0801c2fc
 801313c:	0801c31c 	.word	0x0801c31c

08013140 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8013140:	b580      	push	{r7, lr}
 8013142:	b082      	sub	sp, #8
 8013144:	af00      	add	r7, sp, #0
 8013146:	6078      	str	r0, [r7, #4]
 8013148:	460b      	mov	r3, r1
 801314a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d106      	bne.n	8013160 <tcp_write_checks+0x20>
 8013152:	4b33      	ldr	r3, [pc, #204]	; (8013220 <tcp_write_checks+0xe0>)
 8013154:	f240 1233 	movw	r2, #307	; 0x133
 8013158:	4932      	ldr	r1, [pc, #200]	; (8013224 <tcp_write_checks+0xe4>)
 801315a:	4833      	ldr	r0, [pc, #204]	; (8013228 <tcp_write_checks+0xe8>)
 801315c:	f005 fa78 	bl	8018650 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	7d1b      	ldrb	r3, [r3, #20]
 8013164:	2b04      	cmp	r3, #4
 8013166:	d00e      	beq.n	8013186 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801316c:	2b07      	cmp	r3, #7
 801316e:	d00a      	beq.n	8013186 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8013174:	2b02      	cmp	r3, #2
 8013176:	d006      	beq.n	8013186 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801317c:	2b03      	cmp	r3, #3
 801317e:	d002      	beq.n	8013186 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8013180:	f06f 030a 	mvn.w	r3, #10
 8013184:	e048      	b.n	8013218 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8013186:	887b      	ldrh	r3, [r7, #2]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d101      	bne.n	8013190 <tcp_write_checks+0x50>
    return ERR_OK;
 801318c:	2300      	movs	r3, #0
 801318e:	e043      	b.n	8013218 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013196:	887a      	ldrh	r2, [r7, #2]
 8013198:	429a      	cmp	r2, r3
 801319a:	d909      	bls.n	80131b0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	8b5b      	ldrh	r3, [r3, #26]
 80131a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80131a4:	b29a      	uxth	r2, r3
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80131aa:	f04f 33ff 	mov.w	r3, #4294967295
 80131ae:	e033      	b.n	8013218 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80131b6:	2b08      	cmp	r3, #8
 80131b8:	d909      	bls.n	80131ce <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	8b5b      	ldrh	r3, [r3, #26]
 80131be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80131c2:	b29a      	uxth	r2, r3
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80131c8:	f04f 33ff 	mov.w	r3, #4294967295
 80131cc:	e024      	b.n	8013218 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d00f      	beq.n	80131f8 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d11a      	bne.n	8013216 <tcp_write_checks+0xd6>
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d116      	bne.n	8013216 <tcp_write_checks+0xd6>
 80131e8:	4b0d      	ldr	r3, [pc, #52]	; (8013220 <tcp_write_checks+0xe0>)
 80131ea:	f240 1255 	movw	r2, #341	; 0x155
 80131ee:	490f      	ldr	r1, [pc, #60]	; (801322c <tcp_write_checks+0xec>)
 80131f0:	480d      	ldr	r0, [pc, #52]	; (8013228 <tcp_write_checks+0xe8>)
 80131f2:	f005 fa2d 	bl	8018650 <iprintf>
 80131f6:	e00e      	b.n	8013216 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d103      	bne.n	8013208 <tcp_write_checks+0xc8>
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013204:	2b00      	cmp	r3, #0
 8013206:	d006      	beq.n	8013216 <tcp_write_checks+0xd6>
 8013208:	4b05      	ldr	r3, [pc, #20]	; (8013220 <tcp_write_checks+0xe0>)
 801320a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801320e:	4908      	ldr	r1, [pc, #32]	; (8013230 <tcp_write_checks+0xf0>)
 8013210:	4805      	ldr	r0, [pc, #20]	; (8013228 <tcp_write_checks+0xe8>)
 8013212:	f005 fa1d 	bl	8018650 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8013216:	2300      	movs	r3, #0
}
 8013218:	4618      	mov	r0, r3
 801321a:	3708      	adds	r7, #8
 801321c:	46bd      	mov	sp, r7
 801321e:	bd80      	pop	{r7, pc}
 8013220:	0801c220 	.word	0x0801c220
 8013224:	0801c330 	.word	0x0801c330
 8013228:	0801c274 	.word	0x0801c274
 801322c:	0801c350 	.word	0x0801c350
 8013230:	0801c38c 	.word	0x0801c38c

08013234 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8013234:	b590      	push	{r4, r7, lr}
 8013236:	b09b      	sub	sp, #108	; 0x6c
 8013238:	af04      	add	r7, sp, #16
 801323a:	60f8      	str	r0, [r7, #12]
 801323c:	60b9      	str	r1, [r7, #8]
 801323e:	4611      	mov	r1, r2
 8013240:	461a      	mov	r2, r3
 8013242:	460b      	mov	r3, r1
 8013244:	80fb      	strh	r3, [r7, #6]
 8013246:	4613      	mov	r3, r2
 8013248:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801324a:	2300      	movs	r3, #0
 801324c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801324e:	2300      	movs	r3, #0
 8013250:	653b      	str	r3, [r7, #80]	; 0x50
 8013252:	2300      	movs	r3, #0
 8013254:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013256:	2300      	movs	r3, #0
 8013258:	64bb      	str	r3, [r7, #72]	; 0x48
 801325a:	2300      	movs	r3, #0
 801325c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801325e:	2300      	movs	r3, #0
 8013260:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8013264:	2300      	movs	r3, #0
 8013266:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801326a:	2300      	movs	r3, #0
 801326c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801326e:	2300      	movs	r3, #0
 8013270:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8013272:	2300      	movs	r3, #0
 8013274:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d109      	bne.n	8013290 <tcp_write+0x5c>
 801327c:	4ba4      	ldr	r3, [pc, #656]	; (8013510 <tcp_write+0x2dc>)
 801327e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8013282:	49a4      	ldr	r1, [pc, #656]	; (8013514 <tcp_write+0x2e0>)
 8013284:	48a4      	ldr	r0, [pc, #656]	; (8013518 <tcp_write+0x2e4>)
 8013286:	f005 f9e3 	bl	8018650 <iprintf>
 801328a:	f06f 030f 	mvn.w	r3, #15
 801328e:	e32a      	b.n	80138e6 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013296:	085b      	lsrs	r3, r3, #1
 8013298:	b29a      	uxth	r2, r3
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801329e:	4293      	cmp	r3, r2
 80132a0:	bf28      	it	cs
 80132a2:	4613      	movcs	r3, r2
 80132a4:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80132a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d102      	bne.n	80132b2 <tcp_write+0x7e>
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80132b0:	e000      	b.n	80132b4 <tcp_write+0x80>
 80132b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80132b4:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80132b6:	68bb      	ldr	r3, [r7, #8]
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d109      	bne.n	80132d0 <tcp_write+0x9c>
 80132bc:	4b94      	ldr	r3, [pc, #592]	; (8013510 <tcp_write+0x2dc>)
 80132be:	f240 12ad 	movw	r2, #429	; 0x1ad
 80132c2:	4996      	ldr	r1, [pc, #600]	; (801351c <tcp_write+0x2e8>)
 80132c4:	4894      	ldr	r0, [pc, #592]	; (8013518 <tcp_write+0x2e4>)
 80132c6:	f005 f9c3 	bl	8018650 <iprintf>
 80132ca:	f06f 030f 	mvn.w	r3, #15
 80132ce:	e30a      	b.n	80138e6 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80132d0:	88fb      	ldrh	r3, [r7, #6]
 80132d2:	4619      	mov	r1, r3
 80132d4:	68f8      	ldr	r0, [r7, #12]
 80132d6:	f7ff ff33 	bl	8013140 <tcp_write_checks>
 80132da:	4603      	mov	r3, r0
 80132dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80132e0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d002      	beq.n	80132ee <tcp_write+0xba>
    return err;
 80132e8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80132ec:	e2fb      	b.n	80138e6 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80132f4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80132f8:	2300      	movs	r3, #0
 80132fa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013302:	2b00      	cmp	r3, #0
 8013304:	f000 80f6 	beq.w	80134f4 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801330c:	653b      	str	r3, [r7, #80]	; 0x50
 801330e:	e002      	b.n	8013316 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8013310:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	2b00      	cmp	r3, #0
 801331c:	d1f8      	bne.n	8013310 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801331e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013320:	7a9b      	ldrb	r3, [r3, #10]
 8013322:	009b      	lsls	r3, r3, #2
 8013324:	b29b      	uxth	r3, r3
 8013326:	f003 0304 	and.w	r3, r3, #4
 801332a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801332c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801332e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013330:	891b      	ldrh	r3, [r3, #8]
 8013332:	4619      	mov	r1, r3
 8013334:	8c3b      	ldrh	r3, [r7, #32]
 8013336:	440b      	add	r3, r1
 8013338:	429a      	cmp	r2, r3
 801333a:	da06      	bge.n	801334a <tcp_write+0x116>
 801333c:	4b74      	ldr	r3, [pc, #464]	; (8013510 <tcp_write+0x2dc>)
 801333e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013342:	4977      	ldr	r1, [pc, #476]	; (8013520 <tcp_write+0x2ec>)
 8013344:	4874      	ldr	r0, [pc, #464]	; (8013518 <tcp_write+0x2e4>)
 8013346:	f005 f983 	bl	8018650 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801334a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801334c:	891a      	ldrh	r2, [r3, #8]
 801334e:	8c3b      	ldrh	r3, [r7, #32]
 8013350:	4413      	add	r3, r2
 8013352:	b29b      	uxth	r3, r3
 8013354:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013356:	1ad3      	subs	r3, r2, r3
 8013358:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013360:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8013362:	8a7b      	ldrh	r3, [r7, #18]
 8013364:	2b00      	cmp	r3, #0
 8013366:	d026      	beq.n	80133b6 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8013368:	8a7b      	ldrh	r3, [r7, #18]
 801336a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801336c:	429a      	cmp	r2, r3
 801336e:	d206      	bcs.n	801337e <tcp_write+0x14a>
 8013370:	4b67      	ldr	r3, [pc, #412]	; (8013510 <tcp_write+0x2dc>)
 8013372:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8013376:	496b      	ldr	r1, [pc, #428]	; (8013524 <tcp_write+0x2f0>)
 8013378:	4867      	ldr	r0, [pc, #412]	; (8013518 <tcp_write+0x2e4>)
 801337a:	f005 f969 	bl	8018650 <iprintf>
      seg = last_unsent;
 801337e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013380:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8013382:	8a7b      	ldrh	r3, [r7, #18]
 8013384:	88fa      	ldrh	r2, [r7, #6]
 8013386:	4293      	cmp	r3, r2
 8013388:	bf28      	it	cs
 801338a:	4613      	movcs	r3, r2
 801338c:	b29b      	uxth	r3, r3
 801338e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013390:	4293      	cmp	r3, r2
 8013392:	bf28      	it	cs
 8013394:	4613      	movcs	r3, r2
 8013396:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8013398:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801339c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801339e:	4413      	add	r3, r2
 80133a0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80133a4:	8a7a      	ldrh	r2, [r7, #18]
 80133a6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80133a8:	1ad3      	subs	r3, r2, r3
 80133aa:	b29b      	uxth	r3, r3
 80133ac:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80133ae:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80133b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80133b2:	1ad3      	subs	r3, r2, r3
 80133b4:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80133b6:	8a7b      	ldrh	r3, [r7, #18]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d00b      	beq.n	80133d4 <tcp_write+0x1a0>
 80133bc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80133c0:	88fb      	ldrh	r3, [r7, #6]
 80133c2:	429a      	cmp	r2, r3
 80133c4:	d006      	beq.n	80133d4 <tcp_write+0x1a0>
 80133c6:	4b52      	ldr	r3, [pc, #328]	; (8013510 <tcp_write+0x2dc>)
 80133c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80133cc:	4956      	ldr	r1, [pc, #344]	; (8013528 <tcp_write+0x2f4>)
 80133ce:	4852      	ldr	r0, [pc, #328]	; (8013518 <tcp_write+0x2e4>)
 80133d0:	f005 f93e 	bl	8018650 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80133d4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80133d8:	88fb      	ldrh	r3, [r7, #6]
 80133da:	429a      	cmp	r2, r3
 80133dc:	f080 8167 	bcs.w	80136ae <tcp_write+0x47a>
 80133e0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	f000 8163 	beq.w	80136ae <tcp_write+0x47a>
 80133e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80133ea:	891b      	ldrh	r3, [r3, #8]
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	f000 815e 	beq.w	80136ae <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80133f2:	88fa      	ldrh	r2, [r7, #6]
 80133f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80133f8:	1ad2      	subs	r2, r2, r3
 80133fa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80133fc:	4293      	cmp	r3, r2
 80133fe:	bfa8      	it	ge
 8013400:	4613      	movge	r3, r2
 8013402:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8013404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013406:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8013408:	797b      	ldrb	r3, [r7, #5]
 801340a:	f003 0301 	and.w	r3, r3, #1
 801340e:	2b00      	cmp	r3, #0
 8013410:	d027      	beq.n	8013462 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8013412:	f107 0012 	add.w	r0, r7, #18
 8013416:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013418:	8bf9      	ldrh	r1, [r7, #30]
 801341a:	2301      	movs	r3, #1
 801341c:	9302      	str	r3, [sp, #8]
 801341e:	797b      	ldrb	r3, [r7, #5]
 8013420:	9301      	str	r3, [sp, #4]
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	9300      	str	r3, [sp, #0]
 8013426:	4603      	mov	r3, r0
 8013428:	2000      	movs	r0, #0
 801342a:	f7ff fe0f 	bl	801304c <tcp_pbuf_prealloc>
 801342e:	6578      	str	r0, [r7, #84]	; 0x54
 8013430:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013432:	2b00      	cmp	r3, #0
 8013434:	f000 8225 	beq.w	8013882 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8013438:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801343a:	6858      	ldr	r0, [r3, #4]
 801343c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013440:	68ba      	ldr	r2, [r7, #8]
 8013442:	4413      	add	r3, r2
 8013444:	8bfa      	ldrh	r2, [r7, #30]
 8013446:	4619      	mov	r1, r3
 8013448:	f005 f8d2 	bl	80185f0 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801344c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801344e:	f7fb fa79 	bl	800e944 <pbuf_clen>
 8013452:	4603      	mov	r3, r0
 8013454:	461a      	mov	r2, r3
 8013456:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801345a:	4413      	add	r3, r2
 801345c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8013460:	e041      	b.n	80134e6 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8013462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013464:	685b      	ldr	r3, [r3, #4]
 8013466:	637b      	str	r3, [r7, #52]	; 0x34
 8013468:	e002      	b.n	8013470 <tcp_write+0x23c>
 801346a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	637b      	str	r3, [r7, #52]	; 0x34
 8013470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	2b00      	cmp	r3, #0
 8013476:	d1f8      	bne.n	801346a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801347a:	7b1b      	ldrb	r3, [r3, #12]
 801347c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013480:	2b00      	cmp	r3, #0
 8013482:	d115      	bne.n	80134b0 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8013484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013486:	685b      	ldr	r3, [r3, #4]
 8013488:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801348a:	8952      	ldrh	r2, [r2, #10]
 801348c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801348e:	68ba      	ldr	r2, [r7, #8]
 8013490:	429a      	cmp	r2, r3
 8013492:	d10d      	bne.n	80134b0 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8013494:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013498:	2b00      	cmp	r3, #0
 801349a:	d006      	beq.n	80134aa <tcp_write+0x276>
 801349c:	4b1c      	ldr	r3, [pc, #112]	; (8013510 <tcp_write+0x2dc>)
 801349e:	f240 2231 	movw	r2, #561	; 0x231
 80134a2:	4922      	ldr	r1, [pc, #136]	; (801352c <tcp_write+0x2f8>)
 80134a4:	481c      	ldr	r0, [pc, #112]	; (8013518 <tcp_write+0x2e4>)
 80134a6:	f005 f8d3 	bl	8018650 <iprintf>
          extendlen = seglen;
 80134aa:	8bfb      	ldrh	r3, [r7, #30]
 80134ac:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80134ae:	e01a      	b.n	80134e6 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80134b0:	8bfb      	ldrh	r3, [r7, #30]
 80134b2:	2201      	movs	r2, #1
 80134b4:	4619      	mov	r1, r3
 80134b6:	2000      	movs	r0, #0
 80134b8:	f7fa fea0 	bl	800e1fc <pbuf_alloc>
 80134bc:	6578      	str	r0, [r7, #84]	; 0x54
 80134be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	f000 81e0 	beq.w	8013886 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80134c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80134ca:	68ba      	ldr	r2, [r7, #8]
 80134cc:	441a      	add	r2, r3
 80134ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80134d0:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80134d2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80134d4:	f7fb fa36 	bl	800e944 <pbuf_clen>
 80134d8:	4603      	mov	r3, r0
 80134da:	461a      	mov	r2, r3
 80134dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80134e0:	4413      	add	r3, r2
 80134e2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80134e6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80134ea:	8bfb      	ldrh	r3, [r7, #30]
 80134ec:	4413      	add	r3, r2
 80134ee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80134f2:	e0dc      	b.n	80136ae <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	f000 80d7 	beq.w	80136ae <tcp_write+0x47a>
 8013500:	4b03      	ldr	r3, [pc, #12]	; (8013510 <tcp_write+0x2dc>)
 8013502:	f240 224a 	movw	r2, #586	; 0x24a
 8013506:	490a      	ldr	r1, [pc, #40]	; (8013530 <tcp_write+0x2fc>)
 8013508:	4803      	ldr	r0, [pc, #12]	; (8013518 <tcp_write+0x2e4>)
 801350a:	f005 f8a1 	bl	8018650 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801350e:	e0ce      	b.n	80136ae <tcp_write+0x47a>
 8013510:	0801c220 	.word	0x0801c220
 8013514:	0801c3c0 	.word	0x0801c3c0
 8013518:	0801c274 	.word	0x0801c274
 801351c:	0801c3d8 	.word	0x0801c3d8
 8013520:	0801c40c 	.word	0x0801c40c
 8013524:	0801c424 	.word	0x0801c424
 8013528:	0801c444 	.word	0x0801c444
 801352c:	0801c464 	.word	0x0801c464
 8013530:	0801c490 	.word	0x0801c490
    struct pbuf *p;
    u16_t left = len - pos;
 8013534:	88fa      	ldrh	r2, [r7, #6]
 8013536:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801353a:	1ad3      	subs	r3, r2, r3
 801353c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801353e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013542:	b29b      	uxth	r3, r3
 8013544:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013546:	1ad3      	subs	r3, r2, r3
 8013548:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801354a:	8b7a      	ldrh	r2, [r7, #26]
 801354c:	8bbb      	ldrh	r3, [r7, #28]
 801354e:	4293      	cmp	r3, r2
 8013550:	bf28      	it	cs
 8013552:	4613      	movcs	r3, r2
 8013554:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8013556:	797b      	ldrb	r3, [r7, #5]
 8013558:	f003 0301 	and.w	r3, r3, #1
 801355c:	2b00      	cmp	r3, #0
 801355e:	d036      	beq.n	80135ce <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8013560:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013564:	b29a      	uxth	r2, r3
 8013566:	8b3b      	ldrh	r3, [r7, #24]
 8013568:	4413      	add	r3, r2
 801356a:	b299      	uxth	r1, r3
 801356c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801356e:	2b00      	cmp	r3, #0
 8013570:	bf0c      	ite	eq
 8013572:	2301      	moveq	r3, #1
 8013574:	2300      	movne	r3, #0
 8013576:	b2db      	uxtb	r3, r3
 8013578:	f107 0012 	add.w	r0, r7, #18
 801357c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801357e:	9302      	str	r3, [sp, #8]
 8013580:	797b      	ldrb	r3, [r7, #5]
 8013582:	9301      	str	r3, [sp, #4]
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	9300      	str	r3, [sp, #0]
 8013588:	4603      	mov	r3, r0
 801358a:	2036      	movs	r0, #54	; 0x36
 801358c:	f7ff fd5e 	bl	801304c <tcp_pbuf_prealloc>
 8013590:	6338      	str	r0, [r7, #48]	; 0x30
 8013592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013594:	2b00      	cmp	r3, #0
 8013596:	f000 8178 	beq.w	801388a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801359a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801359c:	895b      	ldrh	r3, [r3, #10]
 801359e:	8b3a      	ldrh	r2, [r7, #24]
 80135a0:	429a      	cmp	r2, r3
 80135a2:	d906      	bls.n	80135b2 <tcp_write+0x37e>
 80135a4:	4b8c      	ldr	r3, [pc, #560]	; (80137d8 <tcp_write+0x5a4>)
 80135a6:	f240 2266 	movw	r2, #614	; 0x266
 80135aa:	498c      	ldr	r1, [pc, #560]	; (80137dc <tcp_write+0x5a8>)
 80135ac:	488c      	ldr	r0, [pc, #560]	; (80137e0 <tcp_write+0x5ac>)
 80135ae:	f005 f84f 	bl	8018650 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80135b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135b4:	685a      	ldr	r2, [r3, #4]
 80135b6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80135ba:	18d0      	adds	r0, r2, r3
 80135bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80135c0:	68ba      	ldr	r2, [r7, #8]
 80135c2:	4413      	add	r3, r2
 80135c4:	8b3a      	ldrh	r2, [r7, #24]
 80135c6:	4619      	mov	r1, r3
 80135c8:	f005 f812 	bl	80185f0 <memcpy>
 80135cc:	e02f      	b.n	801362e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80135ce:	8a7b      	ldrh	r3, [r7, #18]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d006      	beq.n	80135e2 <tcp_write+0x3ae>
 80135d4:	4b80      	ldr	r3, [pc, #512]	; (80137d8 <tcp_write+0x5a4>)
 80135d6:	f240 2271 	movw	r2, #625	; 0x271
 80135da:	4982      	ldr	r1, [pc, #520]	; (80137e4 <tcp_write+0x5b0>)
 80135dc:	4880      	ldr	r0, [pc, #512]	; (80137e0 <tcp_write+0x5ac>)
 80135de:	f005 f837 	bl	8018650 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80135e2:	8b3b      	ldrh	r3, [r7, #24]
 80135e4:	2201      	movs	r2, #1
 80135e6:	4619      	mov	r1, r3
 80135e8:	2036      	movs	r0, #54	; 0x36
 80135ea:	f7fa fe07 	bl	800e1fc <pbuf_alloc>
 80135ee:	6178      	str	r0, [r7, #20]
 80135f0:	697b      	ldr	r3, [r7, #20]
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	f000 814b 	beq.w	801388e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80135f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80135fc:	68ba      	ldr	r2, [r7, #8]
 80135fe:	441a      	add	r2, r3
 8013600:	697b      	ldr	r3, [r7, #20]
 8013602:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013604:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013608:	b29b      	uxth	r3, r3
 801360a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801360e:	4619      	mov	r1, r3
 8013610:	2036      	movs	r0, #54	; 0x36
 8013612:	f7fa fdf3 	bl	800e1fc <pbuf_alloc>
 8013616:	6338      	str	r0, [r7, #48]	; 0x30
 8013618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801361a:	2b00      	cmp	r3, #0
 801361c:	d103      	bne.n	8013626 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801361e:	6978      	ldr	r0, [r7, #20]
 8013620:	f7fb f902 	bl	800e828 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8013624:	e136      	b.n	8013894 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8013626:	6979      	ldr	r1, [r7, #20]
 8013628:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801362a:	f7fb f9cb 	bl	800e9c4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801362e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013630:	f7fb f988 	bl	800e944 <pbuf_clen>
 8013634:	4603      	mov	r3, r0
 8013636:	461a      	mov	r2, r3
 8013638:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801363c:	4413      	add	r3, r2
 801363e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8013642:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013646:	2b09      	cmp	r3, #9
 8013648:	d903      	bls.n	8013652 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801364a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801364c:	f7fb f8ec 	bl	800e828 <pbuf_free>
      goto memerr;
 8013650:	e120      	b.n	8013894 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013656:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801365a:	441a      	add	r2, r3
 801365c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013660:	9300      	str	r3, [sp, #0]
 8013662:	4613      	mov	r3, r2
 8013664:	2200      	movs	r2, #0
 8013666:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013668:	68f8      	ldr	r0, [r7, #12]
 801366a:	f7ff fc51 	bl	8012f10 <tcp_create_segment>
 801366e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8013670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013672:	2b00      	cmp	r3, #0
 8013674:	f000 810d 	beq.w	8013892 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8013678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801367a:	2b00      	cmp	r3, #0
 801367c:	d102      	bne.n	8013684 <tcp_write+0x450>
      queue = seg;
 801367e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013680:	647b      	str	r3, [r7, #68]	; 0x44
 8013682:	e00c      	b.n	801369e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8013684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013686:	2b00      	cmp	r3, #0
 8013688:	d106      	bne.n	8013698 <tcp_write+0x464>
 801368a:	4b53      	ldr	r3, [pc, #332]	; (80137d8 <tcp_write+0x5a4>)
 801368c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013690:	4955      	ldr	r1, [pc, #340]	; (80137e8 <tcp_write+0x5b4>)
 8013692:	4853      	ldr	r0, [pc, #332]	; (80137e0 <tcp_write+0x5ac>)
 8013694:	f004 ffdc 	bl	8018650 <iprintf>
      prev_seg->next = seg;
 8013698:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801369a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801369c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801369e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136a0:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80136a2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80136a6:	8b3b      	ldrh	r3, [r7, #24]
 80136a8:	4413      	add	r3, r2
 80136aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80136ae:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80136b2:	88fb      	ldrh	r3, [r7, #6]
 80136b4:	429a      	cmp	r2, r3
 80136b6:	f4ff af3d 	bcc.w	8013534 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80136ba:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d02c      	beq.n	801371a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80136c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80136c2:	685b      	ldr	r3, [r3, #4]
 80136c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80136c6:	e01e      	b.n	8013706 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80136c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136ca:	891a      	ldrh	r2, [r3, #8]
 80136cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80136ce:	4413      	add	r3, r2
 80136d0:	b29a      	uxth	r2, r3
 80136d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136d4:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80136d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d110      	bne.n	8013700 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80136de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136e0:	685b      	ldr	r3, [r3, #4]
 80136e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80136e4:	8952      	ldrh	r2, [r2, #10]
 80136e6:	4413      	add	r3, r2
 80136e8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80136ea:	68b9      	ldr	r1, [r7, #8]
 80136ec:	4618      	mov	r0, r3
 80136ee:	f004 ff7f 	bl	80185f0 <memcpy>
        p->len += oversize_used;
 80136f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136f4:	895a      	ldrh	r2, [r3, #10]
 80136f6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80136f8:	4413      	add	r3, r2
 80136fa:	b29a      	uxth	r2, r3
 80136fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136fe:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8013700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013708:	2b00      	cmp	r3, #0
 801370a:	d1dd      	bne.n	80136c8 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801370c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801370e:	891a      	ldrh	r2, [r3, #8]
 8013710:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013712:	4413      	add	r3, r2
 8013714:	b29a      	uxth	r2, r3
 8013716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013718:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801371a:	8a7a      	ldrh	r2, [r7, #18]
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8013722:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013724:	2b00      	cmp	r3, #0
 8013726:	d018      	beq.n	801375a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8013728:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801372a:	2b00      	cmp	r3, #0
 801372c:	d106      	bne.n	801373c <tcp_write+0x508>
 801372e:	4b2a      	ldr	r3, [pc, #168]	; (80137d8 <tcp_write+0x5a4>)
 8013730:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8013734:	492d      	ldr	r1, [pc, #180]	; (80137ec <tcp_write+0x5b8>)
 8013736:	482a      	ldr	r0, [pc, #168]	; (80137e0 <tcp_write+0x5ac>)
 8013738:	f004 ff8a 	bl	8018650 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801373c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801373e:	685b      	ldr	r3, [r3, #4]
 8013740:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013742:	4618      	mov	r0, r3
 8013744:	f7fb f93e 	bl	800e9c4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8013748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801374a:	891a      	ldrh	r2, [r3, #8]
 801374c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801374e:	891b      	ldrh	r3, [r3, #8]
 8013750:	4413      	add	r3, r2
 8013752:	b29a      	uxth	r2, r3
 8013754:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013756:	811a      	strh	r2, [r3, #8]
 8013758:	e037      	b.n	80137ca <tcp_write+0x596>
  } else if (extendlen > 0) {
 801375a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801375c:	2b00      	cmp	r3, #0
 801375e:	d034      	beq.n	80137ca <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8013760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013762:	2b00      	cmp	r3, #0
 8013764:	d003      	beq.n	801376e <tcp_write+0x53a>
 8013766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013768:	685b      	ldr	r3, [r3, #4]
 801376a:	2b00      	cmp	r3, #0
 801376c:	d106      	bne.n	801377c <tcp_write+0x548>
 801376e:	4b1a      	ldr	r3, [pc, #104]	; (80137d8 <tcp_write+0x5a4>)
 8013770:	f240 22e6 	movw	r2, #742	; 0x2e6
 8013774:	491e      	ldr	r1, [pc, #120]	; (80137f0 <tcp_write+0x5bc>)
 8013776:	481a      	ldr	r0, [pc, #104]	; (80137e0 <tcp_write+0x5ac>)
 8013778:	f004 ff6a 	bl	8018650 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801377c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801377e:	685b      	ldr	r3, [r3, #4]
 8013780:	62bb      	str	r3, [r7, #40]	; 0x28
 8013782:	e009      	b.n	8013798 <tcp_write+0x564>
      p->tot_len += extendlen;
 8013784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013786:	891a      	ldrh	r2, [r3, #8]
 8013788:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801378a:	4413      	add	r3, r2
 801378c:	b29a      	uxth	r2, r3
 801378e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013790:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	62bb      	str	r3, [r7, #40]	; 0x28
 8013798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	2b00      	cmp	r3, #0
 801379e:	d1f1      	bne.n	8013784 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80137a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137a2:	891a      	ldrh	r2, [r3, #8]
 80137a4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80137a6:	4413      	add	r3, r2
 80137a8:	b29a      	uxth	r2, r3
 80137aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137ac:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80137ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137b0:	895a      	ldrh	r2, [r3, #10]
 80137b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80137b4:	4413      	add	r3, r2
 80137b6:	b29a      	uxth	r2, r3
 80137b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137ba:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80137bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137be:	891a      	ldrh	r2, [r3, #8]
 80137c0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80137c2:	4413      	add	r3, r2
 80137c4:	b29a      	uxth	r2, r3
 80137c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137c8:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80137ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d111      	bne.n	80137f4 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80137d4:	66da      	str	r2, [r3, #108]	; 0x6c
 80137d6:	e010      	b.n	80137fa <tcp_write+0x5c6>
 80137d8:	0801c220 	.word	0x0801c220
 80137dc:	0801c4c0 	.word	0x0801c4c0
 80137e0:	0801c274 	.word	0x0801c274
 80137e4:	0801c500 	.word	0x0801c500
 80137e8:	0801c510 	.word	0x0801c510
 80137ec:	0801c524 	.word	0x0801c524
 80137f0:	0801c55c 	.word	0x0801c55c
  } else {
    last_unsent->next = queue;
 80137f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80137f8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80137fe:	88fb      	ldrh	r3, [r7, #6]
 8013800:	441a      	add	r2, r3
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801380c:	88fb      	ldrh	r3, [r7, #6]
 801380e:	1ad3      	subs	r3, r2, r3
 8013810:	b29a      	uxth	r2, r3
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801381e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013828:	2b00      	cmp	r3, #0
 801382a:	d00e      	beq.n	801384a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013830:	2b00      	cmp	r3, #0
 8013832:	d10a      	bne.n	801384a <tcp_write+0x616>
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013838:	2b00      	cmp	r3, #0
 801383a:	d106      	bne.n	801384a <tcp_write+0x616>
 801383c:	4b2c      	ldr	r3, [pc, #176]	; (80138f0 <tcp_write+0x6bc>)
 801383e:	f240 3212 	movw	r2, #786	; 0x312
 8013842:	492c      	ldr	r1, [pc, #176]	; (80138f4 <tcp_write+0x6c0>)
 8013844:	482c      	ldr	r0, [pc, #176]	; (80138f8 <tcp_write+0x6c4>)
 8013846:	f004 ff03 	bl	8018650 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801384a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801384c:	2b00      	cmp	r3, #0
 801384e:	d016      	beq.n	801387e <tcp_write+0x64a>
 8013850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013852:	68db      	ldr	r3, [r3, #12]
 8013854:	2b00      	cmp	r3, #0
 8013856:	d012      	beq.n	801387e <tcp_write+0x64a>
 8013858:	797b      	ldrb	r3, [r7, #5]
 801385a:	f003 0302 	and.w	r3, r3, #2
 801385e:	2b00      	cmp	r3, #0
 8013860:	d10d      	bne.n	801387e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8013862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013864:	68db      	ldr	r3, [r3, #12]
 8013866:	899b      	ldrh	r3, [r3, #12]
 8013868:	b29c      	uxth	r4, r3
 801386a:	2008      	movs	r0, #8
 801386c:	f7f9 fbfe 	bl	800d06c <lwip_htons>
 8013870:	4603      	mov	r3, r0
 8013872:	461a      	mov	r2, r3
 8013874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013876:	68db      	ldr	r3, [r3, #12]
 8013878:	4322      	orrs	r2, r4
 801387a:	b292      	uxth	r2, r2
 801387c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801387e:	2300      	movs	r3, #0
 8013880:	e031      	b.n	80138e6 <tcp_write+0x6b2>
          goto memerr;
 8013882:	bf00      	nop
 8013884:	e006      	b.n	8013894 <tcp_write+0x660>
            goto memerr;
 8013886:	bf00      	nop
 8013888:	e004      	b.n	8013894 <tcp_write+0x660>
        goto memerr;
 801388a:	bf00      	nop
 801388c:	e002      	b.n	8013894 <tcp_write+0x660>
        goto memerr;
 801388e:	bf00      	nop
 8013890:	e000      	b.n	8013894 <tcp_write+0x660>
      goto memerr;
 8013892:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	8b5b      	ldrh	r3, [r3, #26]
 8013898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801389c:	b29a      	uxth	r2, r3
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80138a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d002      	beq.n	80138ae <tcp_write+0x67a>
    pbuf_free(concat_p);
 80138a8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80138aa:	f7fa ffbd 	bl	800e828 <pbuf_free>
  }
  if (queue != NULL) {
 80138ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d002      	beq.n	80138ba <tcp_write+0x686>
    tcp_segs_free(queue);
 80138b4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80138b6:	f7fc fb6b 	bl	800ff90 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d00e      	beq.n	80138e2 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d10a      	bne.n	80138e2 <tcp_write+0x6ae>
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d106      	bne.n	80138e2 <tcp_write+0x6ae>
 80138d4:	4b06      	ldr	r3, [pc, #24]	; (80138f0 <tcp_write+0x6bc>)
 80138d6:	f240 3227 	movw	r2, #807	; 0x327
 80138da:	4906      	ldr	r1, [pc, #24]	; (80138f4 <tcp_write+0x6c0>)
 80138dc:	4806      	ldr	r0, [pc, #24]	; (80138f8 <tcp_write+0x6c4>)
 80138de:	f004 feb7 	bl	8018650 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80138e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80138e6:	4618      	mov	r0, r3
 80138e8:	375c      	adds	r7, #92	; 0x5c
 80138ea:	46bd      	mov	sp, r7
 80138ec:	bd90      	pop	{r4, r7, pc}
 80138ee:	bf00      	nop
 80138f0:	0801c220 	.word	0x0801c220
 80138f4:	0801c594 	.word	0x0801c594
 80138f8:	0801c274 	.word	0x0801c274

080138fc <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80138fc:	b590      	push	{r4, r7, lr}
 80138fe:	b08b      	sub	sp, #44	; 0x2c
 8013900:	af02      	add	r7, sp, #8
 8013902:	6078      	str	r0, [r7, #4]
 8013904:	460b      	mov	r3, r1
 8013906:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8013908:	2300      	movs	r3, #0
 801390a:	61fb      	str	r3, [r7, #28]
 801390c:	2300      	movs	r3, #0
 801390e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013910:	2300      	movs	r3, #0
 8013912:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	2b00      	cmp	r3, #0
 8013918:	d106      	bne.n	8013928 <tcp_split_unsent_seg+0x2c>
 801391a:	4b95      	ldr	r3, [pc, #596]	; (8013b70 <tcp_split_unsent_seg+0x274>)
 801391c:	f240 324b 	movw	r2, #843	; 0x34b
 8013920:	4994      	ldr	r1, [pc, #592]	; (8013b74 <tcp_split_unsent_seg+0x278>)
 8013922:	4895      	ldr	r0, [pc, #596]	; (8013b78 <tcp_split_unsent_seg+0x27c>)
 8013924:	f004 fe94 	bl	8018650 <iprintf>

  useg = pcb->unsent;
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801392c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801392e:	697b      	ldr	r3, [r7, #20]
 8013930:	2b00      	cmp	r3, #0
 8013932:	d102      	bne.n	801393a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013934:	f04f 33ff 	mov.w	r3, #4294967295
 8013938:	e116      	b.n	8013b68 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801393a:	887b      	ldrh	r3, [r7, #2]
 801393c:	2b00      	cmp	r3, #0
 801393e:	d109      	bne.n	8013954 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013940:	4b8b      	ldr	r3, [pc, #556]	; (8013b70 <tcp_split_unsent_seg+0x274>)
 8013942:	f240 3253 	movw	r2, #851	; 0x353
 8013946:	498d      	ldr	r1, [pc, #564]	; (8013b7c <tcp_split_unsent_seg+0x280>)
 8013948:	488b      	ldr	r0, [pc, #556]	; (8013b78 <tcp_split_unsent_seg+0x27c>)
 801394a:	f004 fe81 	bl	8018650 <iprintf>
    return ERR_VAL;
 801394e:	f06f 0305 	mvn.w	r3, #5
 8013952:	e109      	b.n	8013b68 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8013954:	697b      	ldr	r3, [r7, #20]
 8013956:	891b      	ldrh	r3, [r3, #8]
 8013958:	887a      	ldrh	r2, [r7, #2]
 801395a:	429a      	cmp	r2, r3
 801395c:	d301      	bcc.n	8013962 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801395e:	2300      	movs	r3, #0
 8013960:	e102      	b.n	8013b68 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013966:	887a      	ldrh	r2, [r7, #2]
 8013968:	429a      	cmp	r2, r3
 801396a:	d906      	bls.n	801397a <tcp_split_unsent_seg+0x7e>
 801396c:	4b80      	ldr	r3, [pc, #512]	; (8013b70 <tcp_split_unsent_seg+0x274>)
 801396e:	f240 325b 	movw	r2, #859	; 0x35b
 8013972:	4983      	ldr	r1, [pc, #524]	; (8013b80 <tcp_split_unsent_seg+0x284>)
 8013974:	4880      	ldr	r0, [pc, #512]	; (8013b78 <tcp_split_unsent_seg+0x27c>)
 8013976:	f004 fe6b 	bl	8018650 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801397a:	697b      	ldr	r3, [r7, #20]
 801397c:	891b      	ldrh	r3, [r3, #8]
 801397e:	2b00      	cmp	r3, #0
 8013980:	d106      	bne.n	8013990 <tcp_split_unsent_seg+0x94>
 8013982:	4b7b      	ldr	r3, [pc, #492]	; (8013b70 <tcp_split_unsent_seg+0x274>)
 8013984:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8013988:	497e      	ldr	r1, [pc, #504]	; (8013b84 <tcp_split_unsent_seg+0x288>)
 801398a:	487b      	ldr	r0, [pc, #492]	; (8013b78 <tcp_split_unsent_seg+0x27c>)
 801398c:	f004 fe60 	bl	8018650 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8013990:	697b      	ldr	r3, [r7, #20]
 8013992:	7a9b      	ldrb	r3, [r3, #10]
 8013994:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013996:	7bfb      	ldrb	r3, [r7, #15]
 8013998:	009b      	lsls	r3, r3, #2
 801399a:	b2db      	uxtb	r3, r3
 801399c:	f003 0304 	and.w	r3, r3, #4
 80139a0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80139a2:	697b      	ldr	r3, [r7, #20]
 80139a4:	891a      	ldrh	r2, [r3, #8]
 80139a6:	887b      	ldrh	r3, [r7, #2]
 80139a8:	1ad3      	subs	r3, r2, r3
 80139aa:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80139ac:	7bbb      	ldrb	r3, [r7, #14]
 80139ae:	b29a      	uxth	r2, r3
 80139b0:	89bb      	ldrh	r3, [r7, #12]
 80139b2:	4413      	add	r3, r2
 80139b4:	b29b      	uxth	r3, r3
 80139b6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80139ba:	4619      	mov	r1, r3
 80139bc:	2036      	movs	r0, #54	; 0x36
 80139be:	f7fa fc1d 	bl	800e1fc <pbuf_alloc>
 80139c2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80139c4:	693b      	ldr	r3, [r7, #16]
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	f000 80b7 	beq.w	8013b3a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80139cc:	697b      	ldr	r3, [r7, #20]
 80139ce:	685b      	ldr	r3, [r3, #4]
 80139d0:	891a      	ldrh	r2, [r3, #8]
 80139d2:	697b      	ldr	r3, [r7, #20]
 80139d4:	891b      	ldrh	r3, [r3, #8]
 80139d6:	1ad3      	subs	r3, r2, r3
 80139d8:	b29a      	uxth	r2, r3
 80139da:	887b      	ldrh	r3, [r7, #2]
 80139dc:	4413      	add	r3, r2
 80139de:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80139e0:	697b      	ldr	r3, [r7, #20]
 80139e2:	6858      	ldr	r0, [r3, #4]
 80139e4:	693b      	ldr	r3, [r7, #16]
 80139e6:	685a      	ldr	r2, [r3, #4]
 80139e8:	7bbb      	ldrb	r3, [r7, #14]
 80139ea:	18d1      	adds	r1, r2, r3
 80139ec:	897b      	ldrh	r3, [r7, #10]
 80139ee:	89ba      	ldrh	r2, [r7, #12]
 80139f0:	f7fb f920 	bl	800ec34 <pbuf_copy_partial>
 80139f4:	4603      	mov	r3, r0
 80139f6:	461a      	mov	r2, r3
 80139f8:	89bb      	ldrh	r3, [r7, #12]
 80139fa:	4293      	cmp	r3, r2
 80139fc:	f040 809f 	bne.w	8013b3e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013a00:	697b      	ldr	r3, [r7, #20]
 8013a02:	68db      	ldr	r3, [r3, #12]
 8013a04:	899b      	ldrh	r3, [r3, #12]
 8013a06:	b29b      	uxth	r3, r3
 8013a08:	4618      	mov	r0, r3
 8013a0a:	f7f9 fb2f 	bl	800d06c <lwip_htons>
 8013a0e:	4603      	mov	r3, r0
 8013a10:	b2db      	uxtb	r3, r3
 8013a12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013a16:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013a18:	2300      	movs	r3, #0
 8013a1a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8013a1c:	7efb      	ldrb	r3, [r7, #27]
 8013a1e:	f003 0308 	and.w	r3, r3, #8
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d007      	beq.n	8013a36 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8013a26:	7efb      	ldrb	r3, [r7, #27]
 8013a28:	f023 0308 	bic.w	r3, r3, #8
 8013a2c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8013a2e:	7ebb      	ldrb	r3, [r7, #26]
 8013a30:	f043 0308 	orr.w	r3, r3, #8
 8013a34:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8013a36:	7efb      	ldrb	r3, [r7, #27]
 8013a38:	f003 0301 	and.w	r3, r3, #1
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d007      	beq.n	8013a50 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013a40:	7efb      	ldrb	r3, [r7, #27]
 8013a42:	f023 0301 	bic.w	r3, r3, #1
 8013a46:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8013a48:	7ebb      	ldrb	r3, [r7, #26]
 8013a4a:	f043 0301 	orr.w	r3, r3, #1
 8013a4e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013a50:	697b      	ldr	r3, [r7, #20]
 8013a52:	68db      	ldr	r3, [r3, #12]
 8013a54:	685b      	ldr	r3, [r3, #4]
 8013a56:	4618      	mov	r0, r3
 8013a58:	f7f9 fb1d 	bl	800d096 <lwip_htonl>
 8013a5c:	4602      	mov	r2, r0
 8013a5e:	887b      	ldrh	r3, [r7, #2]
 8013a60:	18d1      	adds	r1, r2, r3
 8013a62:	7eba      	ldrb	r2, [r7, #26]
 8013a64:	7bfb      	ldrb	r3, [r7, #15]
 8013a66:	9300      	str	r3, [sp, #0]
 8013a68:	460b      	mov	r3, r1
 8013a6a:	6939      	ldr	r1, [r7, #16]
 8013a6c:	6878      	ldr	r0, [r7, #4]
 8013a6e:	f7ff fa4f 	bl	8012f10 <tcp_create_segment>
 8013a72:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8013a74:	69fb      	ldr	r3, [r7, #28]
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d063      	beq.n	8013b42 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8013a7a:	697b      	ldr	r3, [r7, #20]
 8013a7c:	685b      	ldr	r3, [r3, #4]
 8013a7e:	4618      	mov	r0, r3
 8013a80:	f7fa ff60 	bl	800e944 <pbuf_clen>
 8013a84:	4603      	mov	r3, r0
 8013a86:	461a      	mov	r2, r3
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013a8e:	1a9b      	subs	r3, r3, r2
 8013a90:	b29a      	uxth	r2, r3
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013a98:	697b      	ldr	r3, [r7, #20]
 8013a9a:	6858      	ldr	r0, [r3, #4]
 8013a9c:	697b      	ldr	r3, [r7, #20]
 8013a9e:	685b      	ldr	r3, [r3, #4]
 8013aa0:	891a      	ldrh	r2, [r3, #8]
 8013aa2:	89bb      	ldrh	r3, [r7, #12]
 8013aa4:	1ad3      	subs	r3, r2, r3
 8013aa6:	b29b      	uxth	r3, r3
 8013aa8:	4619      	mov	r1, r3
 8013aaa:	f7fa fd05 	bl	800e4b8 <pbuf_realloc>
  useg->len -= remainder;
 8013aae:	697b      	ldr	r3, [r7, #20]
 8013ab0:	891a      	ldrh	r2, [r3, #8]
 8013ab2:	89bb      	ldrh	r3, [r7, #12]
 8013ab4:	1ad3      	subs	r3, r2, r3
 8013ab6:	b29a      	uxth	r2, r3
 8013ab8:	697b      	ldr	r3, [r7, #20]
 8013aba:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013abc:	697b      	ldr	r3, [r7, #20]
 8013abe:	68db      	ldr	r3, [r3, #12]
 8013ac0:	899b      	ldrh	r3, [r3, #12]
 8013ac2:	b29c      	uxth	r4, r3
 8013ac4:	7efb      	ldrb	r3, [r7, #27]
 8013ac6:	b29b      	uxth	r3, r3
 8013ac8:	4618      	mov	r0, r3
 8013aca:	f7f9 facf 	bl	800d06c <lwip_htons>
 8013ace:	4603      	mov	r3, r0
 8013ad0:	461a      	mov	r2, r3
 8013ad2:	697b      	ldr	r3, [r7, #20]
 8013ad4:	68db      	ldr	r3, [r3, #12]
 8013ad6:	4322      	orrs	r2, r4
 8013ad8:	b292      	uxth	r2, r2
 8013ada:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013adc:	697b      	ldr	r3, [r7, #20]
 8013ade:	685b      	ldr	r3, [r3, #4]
 8013ae0:	4618      	mov	r0, r3
 8013ae2:	f7fa ff2f 	bl	800e944 <pbuf_clen>
 8013ae6:	4603      	mov	r3, r0
 8013ae8:	461a      	mov	r2, r3
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013af0:	4413      	add	r3, r2
 8013af2:	b29a      	uxth	r2, r3
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013afa:	69fb      	ldr	r3, [r7, #28]
 8013afc:	685b      	ldr	r3, [r3, #4]
 8013afe:	4618      	mov	r0, r3
 8013b00:	f7fa ff20 	bl	800e944 <pbuf_clen>
 8013b04:	4603      	mov	r3, r0
 8013b06:	461a      	mov	r2, r3
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013b0e:	4413      	add	r3, r2
 8013b10:	b29a      	uxth	r2, r3
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013b18:	697b      	ldr	r3, [r7, #20]
 8013b1a:	681a      	ldr	r2, [r3, #0]
 8013b1c:	69fb      	ldr	r3, [r7, #28]
 8013b1e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013b20:	697b      	ldr	r3, [r7, #20]
 8013b22:	69fa      	ldr	r2, [r7, #28]
 8013b24:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8013b26:	69fb      	ldr	r3, [r7, #28]
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d103      	bne.n	8013b36 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	2200      	movs	r2, #0
 8013b32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8013b36:	2300      	movs	r3, #0
 8013b38:	e016      	b.n	8013b68 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8013b3a:	bf00      	nop
 8013b3c:	e002      	b.n	8013b44 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013b3e:	bf00      	nop
 8013b40:	e000      	b.n	8013b44 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013b42:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013b44:	69fb      	ldr	r3, [r7, #28]
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d006      	beq.n	8013b58 <tcp_split_unsent_seg+0x25c>
 8013b4a:	4b09      	ldr	r3, [pc, #36]	; (8013b70 <tcp_split_unsent_seg+0x274>)
 8013b4c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8013b50:	490d      	ldr	r1, [pc, #52]	; (8013b88 <tcp_split_unsent_seg+0x28c>)
 8013b52:	4809      	ldr	r0, [pc, #36]	; (8013b78 <tcp_split_unsent_seg+0x27c>)
 8013b54:	f004 fd7c 	bl	8018650 <iprintf>
  if (p != NULL) {
 8013b58:	693b      	ldr	r3, [r7, #16]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d002      	beq.n	8013b64 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8013b5e:	6938      	ldr	r0, [r7, #16]
 8013b60:	f7fa fe62 	bl	800e828 <pbuf_free>
  }

  return ERR_MEM;
 8013b64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013b68:	4618      	mov	r0, r3
 8013b6a:	3724      	adds	r7, #36	; 0x24
 8013b6c:	46bd      	mov	sp, r7
 8013b6e:	bd90      	pop	{r4, r7, pc}
 8013b70:	0801c220 	.word	0x0801c220
 8013b74:	0801c5b4 	.word	0x0801c5b4
 8013b78:	0801c274 	.word	0x0801c274
 8013b7c:	0801c5d8 	.word	0x0801c5d8
 8013b80:	0801c5fc 	.word	0x0801c5fc
 8013b84:	0801c60c 	.word	0x0801c60c
 8013b88:	0801c61c 	.word	0x0801c61c

08013b8c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013b8c:	b590      	push	{r4, r7, lr}
 8013b8e:	b085      	sub	sp, #20
 8013b90:	af00      	add	r7, sp, #0
 8013b92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d106      	bne.n	8013ba8 <tcp_send_fin+0x1c>
 8013b9a:	4b21      	ldr	r3, [pc, #132]	; (8013c20 <tcp_send_fin+0x94>)
 8013b9c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013ba0:	4920      	ldr	r1, [pc, #128]	; (8013c24 <tcp_send_fin+0x98>)
 8013ba2:	4821      	ldr	r0, [pc, #132]	; (8013c28 <tcp_send_fin+0x9c>)
 8013ba4:	f004 fd54 	bl	8018650 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d02e      	beq.n	8013c0e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013bb4:	60fb      	str	r3, [r7, #12]
 8013bb6:	e002      	b.n	8013bbe <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	681b      	ldr	r3, [r3, #0]
 8013bbc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d1f8      	bne.n	8013bb8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	68db      	ldr	r3, [r3, #12]
 8013bca:	899b      	ldrh	r3, [r3, #12]
 8013bcc:	b29b      	uxth	r3, r3
 8013bce:	4618      	mov	r0, r3
 8013bd0:	f7f9 fa4c 	bl	800d06c <lwip_htons>
 8013bd4:	4603      	mov	r3, r0
 8013bd6:	b2db      	uxtb	r3, r3
 8013bd8:	f003 0307 	and.w	r3, r3, #7
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d116      	bne.n	8013c0e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	68db      	ldr	r3, [r3, #12]
 8013be4:	899b      	ldrh	r3, [r3, #12]
 8013be6:	b29c      	uxth	r4, r3
 8013be8:	2001      	movs	r0, #1
 8013bea:	f7f9 fa3f 	bl	800d06c <lwip_htons>
 8013bee:	4603      	mov	r3, r0
 8013bf0:	461a      	mov	r2, r3
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	68db      	ldr	r3, [r3, #12]
 8013bf6:	4322      	orrs	r2, r4
 8013bf8:	b292      	uxth	r2, r2
 8013bfa:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	8b5b      	ldrh	r3, [r3, #26]
 8013c00:	f043 0320 	orr.w	r3, r3, #32
 8013c04:	b29a      	uxth	r2, r3
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013c0a:	2300      	movs	r3, #0
 8013c0c:	e004      	b.n	8013c18 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013c0e:	2101      	movs	r1, #1
 8013c10:	6878      	ldr	r0, [r7, #4]
 8013c12:	f000 f80b 	bl	8013c2c <tcp_enqueue_flags>
 8013c16:	4603      	mov	r3, r0
}
 8013c18:	4618      	mov	r0, r3
 8013c1a:	3714      	adds	r7, #20
 8013c1c:	46bd      	mov	sp, r7
 8013c1e:	bd90      	pop	{r4, r7, pc}
 8013c20:	0801c220 	.word	0x0801c220
 8013c24:	0801c628 	.word	0x0801c628
 8013c28:	0801c274 	.word	0x0801c274

08013c2c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013c2c:	b580      	push	{r7, lr}
 8013c2e:	b08a      	sub	sp, #40	; 0x28
 8013c30:	af02      	add	r7, sp, #8
 8013c32:	6078      	str	r0, [r7, #4]
 8013c34:	460b      	mov	r3, r1
 8013c36:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013c38:	2300      	movs	r3, #0
 8013c3a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013c3c:	2300      	movs	r3, #0
 8013c3e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013c40:	78fb      	ldrb	r3, [r7, #3]
 8013c42:	f003 0303 	and.w	r3, r3, #3
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d106      	bne.n	8013c58 <tcp_enqueue_flags+0x2c>
 8013c4a:	4b67      	ldr	r3, [pc, #412]	; (8013de8 <tcp_enqueue_flags+0x1bc>)
 8013c4c:	f240 4211 	movw	r2, #1041	; 0x411
 8013c50:	4966      	ldr	r1, [pc, #408]	; (8013dec <tcp_enqueue_flags+0x1c0>)
 8013c52:	4867      	ldr	r0, [pc, #412]	; (8013df0 <tcp_enqueue_flags+0x1c4>)
 8013c54:	f004 fcfc 	bl	8018650 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d106      	bne.n	8013c6c <tcp_enqueue_flags+0x40>
 8013c5e:	4b62      	ldr	r3, [pc, #392]	; (8013de8 <tcp_enqueue_flags+0x1bc>)
 8013c60:	f240 4213 	movw	r2, #1043	; 0x413
 8013c64:	4963      	ldr	r1, [pc, #396]	; (8013df4 <tcp_enqueue_flags+0x1c8>)
 8013c66:	4862      	ldr	r0, [pc, #392]	; (8013df0 <tcp_enqueue_flags+0x1c4>)
 8013c68:	f004 fcf2 	bl	8018650 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013c6c:	78fb      	ldrb	r3, [r7, #3]
 8013c6e:	f003 0302 	and.w	r3, r3, #2
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d001      	beq.n	8013c7a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8013c76:	2301      	movs	r3, #1
 8013c78:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013c7a:	7ffb      	ldrb	r3, [r7, #31]
 8013c7c:	009b      	lsls	r3, r3, #2
 8013c7e:	b2db      	uxtb	r3, r3
 8013c80:	f003 0304 	and.w	r3, r3, #4
 8013c84:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013c86:	7dfb      	ldrb	r3, [r7, #23]
 8013c88:	b29b      	uxth	r3, r3
 8013c8a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013c8e:	4619      	mov	r1, r3
 8013c90:	2036      	movs	r0, #54	; 0x36
 8013c92:	f7fa fab3 	bl	800e1fc <pbuf_alloc>
 8013c96:	6138      	str	r0, [r7, #16]
 8013c98:	693b      	ldr	r3, [r7, #16]
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d109      	bne.n	8013cb2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	8b5b      	ldrh	r3, [r3, #26]
 8013ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013ca6:	b29a      	uxth	r2, r3
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013cac:	f04f 33ff 	mov.w	r3, #4294967295
 8013cb0:	e095      	b.n	8013dde <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013cb2:	693b      	ldr	r3, [r7, #16]
 8013cb4:	895a      	ldrh	r2, [r3, #10]
 8013cb6:	7dfb      	ldrb	r3, [r7, #23]
 8013cb8:	b29b      	uxth	r3, r3
 8013cba:	429a      	cmp	r2, r3
 8013cbc:	d206      	bcs.n	8013ccc <tcp_enqueue_flags+0xa0>
 8013cbe:	4b4a      	ldr	r3, [pc, #296]	; (8013de8 <tcp_enqueue_flags+0x1bc>)
 8013cc0:	f240 4239 	movw	r2, #1081	; 0x439
 8013cc4:	494c      	ldr	r1, [pc, #304]	; (8013df8 <tcp_enqueue_flags+0x1cc>)
 8013cc6:	484a      	ldr	r0, [pc, #296]	; (8013df0 <tcp_enqueue_flags+0x1c4>)
 8013cc8:	f004 fcc2 	bl	8018650 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013cd0:	78fa      	ldrb	r2, [r7, #3]
 8013cd2:	7ffb      	ldrb	r3, [r7, #31]
 8013cd4:	9300      	str	r3, [sp, #0]
 8013cd6:	460b      	mov	r3, r1
 8013cd8:	6939      	ldr	r1, [r7, #16]
 8013cda:	6878      	ldr	r0, [r7, #4]
 8013cdc:	f7ff f918 	bl	8012f10 <tcp_create_segment>
 8013ce0:	60f8      	str	r0, [r7, #12]
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d109      	bne.n	8013cfc <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	8b5b      	ldrh	r3, [r3, #26]
 8013cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013cf0:	b29a      	uxth	r2, r3
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8013cfa:	e070      	b.n	8013dde <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	68db      	ldr	r3, [r3, #12]
 8013d00:	f003 0303 	and.w	r3, r3, #3
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d006      	beq.n	8013d16 <tcp_enqueue_flags+0xea>
 8013d08:	4b37      	ldr	r3, [pc, #220]	; (8013de8 <tcp_enqueue_flags+0x1bc>)
 8013d0a:	f240 4242 	movw	r2, #1090	; 0x442
 8013d0e:	493b      	ldr	r1, [pc, #236]	; (8013dfc <tcp_enqueue_flags+0x1d0>)
 8013d10:	4837      	ldr	r0, [pc, #220]	; (8013df0 <tcp_enqueue_flags+0x1c4>)
 8013d12:	f004 fc9d 	bl	8018650 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	891b      	ldrh	r3, [r3, #8]
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d006      	beq.n	8013d2c <tcp_enqueue_flags+0x100>
 8013d1e:	4b32      	ldr	r3, [pc, #200]	; (8013de8 <tcp_enqueue_flags+0x1bc>)
 8013d20:	f240 4243 	movw	r2, #1091	; 0x443
 8013d24:	4936      	ldr	r1, [pc, #216]	; (8013e00 <tcp_enqueue_flags+0x1d4>)
 8013d26:	4832      	ldr	r0, [pc, #200]	; (8013df0 <tcp_enqueue_flags+0x1c4>)
 8013d28:	f004 fc92 	bl	8018650 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d103      	bne.n	8013d3c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	68fa      	ldr	r2, [r7, #12]
 8013d38:	66da      	str	r2, [r3, #108]	; 0x6c
 8013d3a:	e00d      	b.n	8013d58 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d40:	61bb      	str	r3, [r7, #24]
 8013d42:	e002      	b.n	8013d4a <tcp_enqueue_flags+0x11e>
 8013d44:	69bb      	ldr	r3, [r7, #24]
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	61bb      	str	r3, [r7, #24]
 8013d4a:	69bb      	ldr	r3, [r7, #24]
 8013d4c:	681b      	ldr	r3, [r3, #0]
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d1f8      	bne.n	8013d44 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013d52:	69bb      	ldr	r3, [r7, #24]
 8013d54:	68fa      	ldr	r2, [r7, #12]
 8013d56:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	2200      	movs	r2, #0
 8013d5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013d60:	78fb      	ldrb	r3, [r7, #3]
 8013d62:	f003 0302 	and.w	r3, r3, #2
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d104      	bne.n	8013d74 <tcp_enqueue_flags+0x148>
 8013d6a:	78fb      	ldrb	r3, [r7, #3]
 8013d6c:	f003 0301 	and.w	r3, r3, #1
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d004      	beq.n	8013d7e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013d78:	1c5a      	adds	r2, r3, #1
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013d7e:	78fb      	ldrb	r3, [r7, #3]
 8013d80:	f003 0301 	and.w	r3, r3, #1
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d006      	beq.n	8013d96 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	8b5b      	ldrh	r3, [r3, #26]
 8013d8c:	f043 0320 	orr.w	r3, r3, #32
 8013d90:	b29a      	uxth	r2, r3
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	685b      	ldr	r3, [r3, #4]
 8013d9a:	4618      	mov	r0, r3
 8013d9c:	f7fa fdd2 	bl	800e944 <pbuf_clen>
 8013da0:	4603      	mov	r3, r0
 8013da2:	461a      	mov	r2, r3
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013daa:	4413      	add	r3, r2
 8013dac:	b29a      	uxth	r2, r3
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d00e      	beq.n	8013ddc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d10a      	bne.n	8013ddc <tcp_enqueue_flags+0x1b0>
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d106      	bne.n	8013ddc <tcp_enqueue_flags+0x1b0>
 8013dce:	4b06      	ldr	r3, [pc, #24]	; (8013de8 <tcp_enqueue_flags+0x1bc>)
 8013dd0:	f240 4265 	movw	r2, #1125	; 0x465
 8013dd4:	490b      	ldr	r1, [pc, #44]	; (8013e04 <tcp_enqueue_flags+0x1d8>)
 8013dd6:	4806      	ldr	r0, [pc, #24]	; (8013df0 <tcp_enqueue_flags+0x1c4>)
 8013dd8:	f004 fc3a 	bl	8018650 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013ddc:	2300      	movs	r3, #0
}
 8013dde:	4618      	mov	r0, r3
 8013de0:	3720      	adds	r7, #32
 8013de2:	46bd      	mov	sp, r7
 8013de4:	bd80      	pop	{r7, pc}
 8013de6:	bf00      	nop
 8013de8:	0801c220 	.word	0x0801c220
 8013dec:	0801c644 	.word	0x0801c644
 8013df0:	0801c274 	.word	0x0801c274
 8013df4:	0801c69c 	.word	0x0801c69c
 8013df8:	0801c6bc 	.word	0x0801c6bc
 8013dfc:	0801c6f8 	.word	0x0801c6f8
 8013e00:	0801c710 	.word	0x0801c710
 8013e04:	0801c73c 	.word	0x0801c73c

08013e08 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013e08:	b5b0      	push	{r4, r5, r7, lr}
 8013e0a:	b08a      	sub	sp, #40	; 0x28
 8013e0c:	af00      	add	r7, sp, #0
 8013e0e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d106      	bne.n	8013e24 <tcp_output+0x1c>
 8013e16:	4b8a      	ldr	r3, [pc, #552]	; (8014040 <tcp_output+0x238>)
 8013e18:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8013e1c:	4989      	ldr	r1, [pc, #548]	; (8014044 <tcp_output+0x23c>)
 8013e1e:	488a      	ldr	r0, [pc, #552]	; (8014048 <tcp_output+0x240>)
 8013e20:	f004 fc16 	bl	8018650 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	7d1b      	ldrb	r3, [r3, #20]
 8013e28:	2b01      	cmp	r3, #1
 8013e2a:	d106      	bne.n	8013e3a <tcp_output+0x32>
 8013e2c:	4b84      	ldr	r3, [pc, #528]	; (8014040 <tcp_output+0x238>)
 8013e2e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8013e32:	4986      	ldr	r1, [pc, #536]	; (801404c <tcp_output+0x244>)
 8013e34:	4884      	ldr	r0, [pc, #528]	; (8014048 <tcp_output+0x240>)
 8013e36:	f004 fc0b 	bl	8018650 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8013e3a:	4b85      	ldr	r3, [pc, #532]	; (8014050 <tcp_output+0x248>)
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	687a      	ldr	r2, [r7, #4]
 8013e40:	429a      	cmp	r2, r3
 8013e42:	d101      	bne.n	8013e48 <tcp_output+0x40>
    return ERR_OK;
 8013e44:	2300      	movs	r3, #0
 8013e46:	e1ce      	b.n	80141e6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013e54:	4293      	cmp	r3, r2
 8013e56:	bf28      	it	cs
 8013e58:	4613      	movcs	r3, r2
 8013e5a:	b29b      	uxth	r3, r3
 8013e5c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e62:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8013e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d10b      	bne.n	8013e82 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	8b5b      	ldrh	r3, [r3, #26]
 8013e6e:	f003 0302 	and.w	r3, r3, #2
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	f000 81aa 	beq.w	80141cc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8013e78:	6878      	ldr	r0, [r7, #4]
 8013e7a:	f000 fdcb 	bl	8014a14 <tcp_send_empty_ack>
 8013e7e:	4603      	mov	r3, r0
 8013e80:	e1b1      	b.n	80141e6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8013e82:	6879      	ldr	r1, [r7, #4]
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	3304      	adds	r3, #4
 8013e88:	461a      	mov	r2, r3
 8013e8a:	6878      	ldr	r0, [r7, #4]
 8013e8c:	f7ff f824 	bl	8012ed8 <tcp_route>
 8013e90:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8013e92:	697b      	ldr	r3, [r7, #20]
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d102      	bne.n	8013e9e <tcp_output+0x96>
    return ERR_RTE;
 8013e98:	f06f 0303 	mvn.w	r3, #3
 8013e9c:	e1a3      	b.n	80141e6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d003      	beq.n	8013eac <tcp_output+0xa4>
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	681b      	ldr	r3, [r3, #0]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d111      	bne.n	8013ed0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013eac:	697b      	ldr	r3, [r7, #20]
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d002      	beq.n	8013eb8 <tcp_output+0xb0>
 8013eb2:	697b      	ldr	r3, [r7, #20]
 8013eb4:	3304      	adds	r3, #4
 8013eb6:	e000      	b.n	8013eba <tcp_output+0xb2>
 8013eb8:	2300      	movs	r3, #0
 8013eba:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013ebc:	693b      	ldr	r3, [r7, #16]
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d102      	bne.n	8013ec8 <tcp_output+0xc0>
      return ERR_RTE;
 8013ec2:	f06f 0303 	mvn.w	r3, #3
 8013ec6:	e18e      	b.n	80141e6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013ec8:	693b      	ldr	r3, [r7, #16]
 8013eca:	681a      	ldr	r2, [r3, #0]
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8013ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ed2:	68db      	ldr	r3, [r3, #12]
 8013ed4:	685b      	ldr	r3, [r3, #4]
 8013ed6:	4618      	mov	r0, r3
 8013ed8:	f7f9 f8dd 	bl	800d096 <lwip_htonl>
 8013edc:	4602      	mov	r2, r0
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013ee2:	1ad3      	subs	r3, r2, r3
 8013ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ee6:	8912      	ldrh	r2, [r2, #8]
 8013ee8:	4413      	add	r3, r2
 8013eea:	69ba      	ldr	r2, [r7, #24]
 8013eec:	429a      	cmp	r2, r3
 8013eee:	d227      	bcs.n	8013f40 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013ef6:	461a      	mov	r2, r3
 8013ef8:	69bb      	ldr	r3, [r7, #24]
 8013efa:	4293      	cmp	r3, r2
 8013efc:	d114      	bne.n	8013f28 <tcp_output+0x120>
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d110      	bne.n	8013f28 <tcp_output+0x120>
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d10b      	bne.n	8013f28 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	2200      	movs	r2, #0
 8013f14:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	2201      	movs	r2, #1
 8013f1c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	2200      	movs	r2, #0
 8013f24:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	8b5b      	ldrh	r3, [r3, #26]
 8013f2c:	f003 0302 	and.w	r3, r3, #2
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	f000 814d 	beq.w	80141d0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8013f36:	6878      	ldr	r0, [r7, #4]
 8013f38:	f000 fd6c 	bl	8014a14 <tcp_send_empty_ack>
 8013f3c:	4603      	mov	r3, r0
 8013f3e:	e152      	b.n	80141e6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	2200      	movs	r2, #0
 8013f44:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f4c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013f4e:	6a3b      	ldr	r3, [r7, #32]
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	f000 811c 	beq.w	801418e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8013f56:	e002      	b.n	8013f5e <tcp_output+0x156>
 8013f58:	6a3b      	ldr	r3, [r7, #32]
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	623b      	str	r3, [r7, #32]
 8013f5e:	6a3b      	ldr	r3, [r7, #32]
 8013f60:	681b      	ldr	r3, [r3, #0]
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d1f8      	bne.n	8013f58 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8013f66:	e112      	b.n	801418e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8013f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f6a:	68db      	ldr	r3, [r3, #12]
 8013f6c:	899b      	ldrh	r3, [r3, #12]
 8013f6e:	b29b      	uxth	r3, r3
 8013f70:	4618      	mov	r0, r3
 8013f72:	f7f9 f87b 	bl	800d06c <lwip_htons>
 8013f76:	4603      	mov	r3, r0
 8013f78:	b2db      	uxtb	r3, r3
 8013f7a:	f003 0304 	and.w	r3, r3, #4
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d006      	beq.n	8013f90 <tcp_output+0x188>
 8013f82:	4b2f      	ldr	r3, [pc, #188]	; (8014040 <tcp_output+0x238>)
 8013f84:	f240 5236 	movw	r2, #1334	; 0x536
 8013f88:	4932      	ldr	r1, [pc, #200]	; (8014054 <tcp_output+0x24c>)
 8013f8a:	482f      	ldr	r0, [pc, #188]	; (8014048 <tcp_output+0x240>)
 8013f8c:	f004 fb60 	bl	8018650 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d01f      	beq.n	8013fd8 <tcp_output+0x1d0>
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	8b5b      	ldrh	r3, [r3, #26]
 8013f9c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d119      	bne.n	8013fd8 <tcp_output+0x1d0>
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d00b      	beq.n	8013fc4 <tcp_output+0x1bc>
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d110      	bne.n	8013fd8 <tcp_output+0x1d0>
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fba:	891a      	ldrh	r2, [r3, #8]
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013fc0:	429a      	cmp	r2, r3
 8013fc2:	d209      	bcs.n	8013fd8 <tcp_output+0x1d0>
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d004      	beq.n	8013fd8 <tcp_output+0x1d0>
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013fd4:	2b08      	cmp	r3, #8
 8013fd6:	d901      	bls.n	8013fdc <tcp_output+0x1d4>
 8013fd8:	2301      	movs	r3, #1
 8013fda:	e000      	b.n	8013fde <tcp_output+0x1d6>
 8013fdc:	2300      	movs	r3, #0
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d106      	bne.n	8013ff0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	8b5b      	ldrh	r3, [r3, #26]
 8013fe6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	f000 80e4 	beq.w	80141b8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	7d1b      	ldrb	r3, [r3, #20]
 8013ff4:	2b02      	cmp	r3, #2
 8013ff6:	d00d      	beq.n	8014014 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ffa:	68db      	ldr	r3, [r3, #12]
 8013ffc:	899b      	ldrh	r3, [r3, #12]
 8013ffe:	b29c      	uxth	r4, r3
 8014000:	2010      	movs	r0, #16
 8014002:	f7f9 f833 	bl	800d06c <lwip_htons>
 8014006:	4603      	mov	r3, r0
 8014008:	461a      	mov	r2, r3
 801400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801400c:	68db      	ldr	r3, [r3, #12]
 801400e:	4322      	orrs	r2, r4
 8014010:	b292      	uxth	r2, r2
 8014012:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8014014:	697a      	ldr	r2, [r7, #20]
 8014016:	6879      	ldr	r1, [r7, #4]
 8014018:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801401a:	f000 f909 	bl	8014230 <tcp_output_segment>
 801401e:	4603      	mov	r3, r0
 8014020:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8014022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014026:	2b00      	cmp	r3, #0
 8014028:	d016      	beq.n	8014058 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	8b5b      	ldrh	r3, [r3, #26]
 801402e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014032:	b29a      	uxth	r2, r3
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	835a      	strh	r2, [r3, #26]
      return err;
 8014038:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801403c:	e0d3      	b.n	80141e6 <tcp_output+0x3de>
 801403e:	bf00      	nop
 8014040:	0801c220 	.word	0x0801c220
 8014044:	0801c764 	.word	0x0801c764
 8014048:	0801c274 	.word	0x0801c274
 801404c:	0801c77c 	.word	0x0801c77c
 8014050:	2000d298 	.word	0x2000d298
 8014054:	0801c7a4 	.word	0x0801c7a4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8014058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801405a:	681a      	ldr	r2, [r3, #0]
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	7d1b      	ldrb	r3, [r3, #20]
 8014064:	2b02      	cmp	r3, #2
 8014066:	d006      	beq.n	8014076 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	8b5b      	ldrh	r3, [r3, #26]
 801406c:	f023 0303 	bic.w	r3, r3, #3
 8014070:	b29a      	uxth	r2, r3
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014078:	68db      	ldr	r3, [r3, #12]
 801407a:	685b      	ldr	r3, [r3, #4]
 801407c:	4618      	mov	r0, r3
 801407e:	f7f9 f80a 	bl	800d096 <lwip_htonl>
 8014082:	4604      	mov	r4, r0
 8014084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014086:	891b      	ldrh	r3, [r3, #8]
 8014088:	461d      	mov	r5, r3
 801408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801408c:	68db      	ldr	r3, [r3, #12]
 801408e:	899b      	ldrh	r3, [r3, #12]
 8014090:	b29b      	uxth	r3, r3
 8014092:	4618      	mov	r0, r3
 8014094:	f7f8 ffea 	bl	800d06c <lwip_htons>
 8014098:	4603      	mov	r3, r0
 801409a:	b2db      	uxtb	r3, r3
 801409c:	f003 0303 	and.w	r3, r3, #3
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d001      	beq.n	80140a8 <tcp_output+0x2a0>
 80140a4:	2301      	movs	r3, #1
 80140a6:	e000      	b.n	80140aa <tcp_output+0x2a2>
 80140a8:	2300      	movs	r3, #0
 80140aa:	442b      	add	r3, r5
 80140ac:	4423      	add	r3, r4
 80140ae:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80140b4:	68bb      	ldr	r3, [r7, #8]
 80140b6:	1ad3      	subs	r3, r2, r3
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	da02      	bge.n	80140c2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	68ba      	ldr	r2, [r7, #8]
 80140c0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80140c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140c4:	891b      	ldrh	r3, [r3, #8]
 80140c6:	461c      	mov	r4, r3
 80140c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140ca:	68db      	ldr	r3, [r3, #12]
 80140cc:	899b      	ldrh	r3, [r3, #12]
 80140ce:	b29b      	uxth	r3, r3
 80140d0:	4618      	mov	r0, r3
 80140d2:	f7f8 ffcb 	bl	800d06c <lwip_htons>
 80140d6:	4603      	mov	r3, r0
 80140d8:	b2db      	uxtb	r3, r3
 80140da:	f003 0303 	and.w	r3, r3, #3
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d001      	beq.n	80140e6 <tcp_output+0x2de>
 80140e2:	2301      	movs	r3, #1
 80140e4:	e000      	b.n	80140e8 <tcp_output+0x2e0>
 80140e6:	2300      	movs	r3, #0
 80140e8:	4423      	add	r3, r4
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d049      	beq.n	8014182 <tcp_output+0x37a>
      seg->next = NULL;
 80140ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140f0:	2200      	movs	r2, #0
 80140f2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d105      	bne.n	8014108 <tcp_output+0x300>
        pcb->unacked = seg;
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014100:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8014102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014104:	623b      	str	r3, [r7, #32]
 8014106:	e03f      	b.n	8014188 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8014108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801410a:	68db      	ldr	r3, [r3, #12]
 801410c:	685b      	ldr	r3, [r3, #4]
 801410e:	4618      	mov	r0, r3
 8014110:	f7f8 ffc1 	bl	800d096 <lwip_htonl>
 8014114:	4604      	mov	r4, r0
 8014116:	6a3b      	ldr	r3, [r7, #32]
 8014118:	68db      	ldr	r3, [r3, #12]
 801411a:	685b      	ldr	r3, [r3, #4]
 801411c:	4618      	mov	r0, r3
 801411e:	f7f8 ffba 	bl	800d096 <lwip_htonl>
 8014122:	4603      	mov	r3, r0
 8014124:	1ae3      	subs	r3, r4, r3
 8014126:	2b00      	cmp	r3, #0
 8014128:	da24      	bge.n	8014174 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	3370      	adds	r3, #112	; 0x70
 801412e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014130:	e002      	b.n	8014138 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8014132:	69fb      	ldr	r3, [r7, #28]
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014138:	69fb      	ldr	r3, [r7, #28]
 801413a:	681b      	ldr	r3, [r3, #0]
 801413c:	2b00      	cmp	r3, #0
 801413e:	d011      	beq.n	8014164 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014140:	69fb      	ldr	r3, [r7, #28]
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	68db      	ldr	r3, [r3, #12]
 8014146:	685b      	ldr	r3, [r3, #4]
 8014148:	4618      	mov	r0, r3
 801414a:	f7f8 ffa4 	bl	800d096 <lwip_htonl>
 801414e:	4604      	mov	r4, r0
 8014150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014152:	68db      	ldr	r3, [r3, #12]
 8014154:	685b      	ldr	r3, [r3, #4]
 8014156:	4618      	mov	r0, r3
 8014158:	f7f8 ff9d 	bl	800d096 <lwip_htonl>
 801415c:	4603      	mov	r3, r0
 801415e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8014160:	2b00      	cmp	r3, #0
 8014162:	dbe6      	blt.n	8014132 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8014164:	69fb      	ldr	r3, [r7, #28]
 8014166:	681a      	ldr	r2, [r3, #0]
 8014168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801416a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801416c:	69fb      	ldr	r3, [r7, #28]
 801416e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014170:	601a      	str	r2, [r3, #0]
 8014172:	e009      	b.n	8014188 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8014174:	6a3b      	ldr	r3, [r7, #32]
 8014176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014178:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801417a:	6a3b      	ldr	r3, [r7, #32]
 801417c:	681b      	ldr	r3, [r3, #0]
 801417e:	623b      	str	r3, [r7, #32]
 8014180:	e002      	b.n	8014188 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014182:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014184:	f7fb ff19 	bl	800ffba <tcp_seg_free>
    }
    seg = pcb->unsent;
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801418c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014190:	2b00      	cmp	r3, #0
 8014192:	d012      	beq.n	80141ba <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8014194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014196:	68db      	ldr	r3, [r3, #12]
 8014198:	685b      	ldr	r3, [r3, #4]
 801419a:	4618      	mov	r0, r3
 801419c:	f7f8 ff7b 	bl	800d096 <lwip_htonl>
 80141a0:	4602      	mov	r2, r0
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80141a6:	1ad3      	subs	r3, r2, r3
 80141a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80141aa:	8912      	ldrh	r2, [r2, #8]
 80141ac:	4413      	add	r3, r2
  while (seg != NULL &&
 80141ae:	69ba      	ldr	r2, [r7, #24]
 80141b0:	429a      	cmp	r2, r3
 80141b2:	f4bf aed9 	bcs.w	8013f68 <tcp_output+0x160>
 80141b6:	e000      	b.n	80141ba <tcp_output+0x3b2>
      break;
 80141b8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d108      	bne.n	80141d4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	2200      	movs	r2, #0
 80141c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80141ca:	e004      	b.n	80141d6 <tcp_output+0x3ce>
    goto output_done;
 80141cc:	bf00      	nop
 80141ce:	e002      	b.n	80141d6 <tcp_output+0x3ce>
    goto output_done;
 80141d0:	bf00      	nop
 80141d2:	e000      	b.n	80141d6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80141d4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	8b5b      	ldrh	r3, [r3, #26]
 80141da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80141de:	b29a      	uxth	r2, r3
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80141e4:	2300      	movs	r3, #0
}
 80141e6:	4618      	mov	r0, r3
 80141e8:	3728      	adds	r7, #40	; 0x28
 80141ea:	46bd      	mov	sp, r7
 80141ec:	bdb0      	pop	{r4, r5, r7, pc}
 80141ee:	bf00      	nop

080141f0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80141f0:	b580      	push	{r7, lr}
 80141f2:	b082      	sub	sp, #8
 80141f4:	af00      	add	r7, sp, #0
 80141f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d106      	bne.n	801420c <tcp_output_segment_busy+0x1c>
 80141fe:	4b09      	ldr	r3, [pc, #36]	; (8014224 <tcp_output_segment_busy+0x34>)
 8014200:	f240 529a 	movw	r2, #1434	; 0x59a
 8014204:	4908      	ldr	r1, [pc, #32]	; (8014228 <tcp_output_segment_busy+0x38>)
 8014206:	4809      	ldr	r0, [pc, #36]	; (801422c <tcp_output_segment_busy+0x3c>)
 8014208:	f004 fa22 	bl	8018650 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	685b      	ldr	r3, [r3, #4]
 8014210:	7b9b      	ldrb	r3, [r3, #14]
 8014212:	2b01      	cmp	r3, #1
 8014214:	d001      	beq.n	801421a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8014216:	2301      	movs	r3, #1
 8014218:	e000      	b.n	801421c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801421a:	2300      	movs	r3, #0
}
 801421c:	4618      	mov	r0, r3
 801421e:	3708      	adds	r7, #8
 8014220:	46bd      	mov	sp, r7
 8014222:	bd80      	pop	{r7, pc}
 8014224:	0801c220 	.word	0x0801c220
 8014228:	0801c7bc 	.word	0x0801c7bc
 801422c:	0801c274 	.word	0x0801c274

08014230 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8014230:	b5b0      	push	{r4, r5, r7, lr}
 8014232:	b08c      	sub	sp, #48	; 0x30
 8014234:	af04      	add	r7, sp, #16
 8014236:	60f8      	str	r0, [r7, #12]
 8014238:	60b9      	str	r1, [r7, #8]
 801423a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801423c:	68fb      	ldr	r3, [r7, #12]
 801423e:	2b00      	cmp	r3, #0
 8014240:	d106      	bne.n	8014250 <tcp_output_segment+0x20>
 8014242:	4b63      	ldr	r3, [pc, #396]	; (80143d0 <tcp_output_segment+0x1a0>)
 8014244:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8014248:	4962      	ldr	r1, [pc, #392]	; (80143d4 <tcp_output_segment+0x1a4>)
 801424a:	4863      	ldr	r0, [pc, #396]	; (80143d8 <tcp_output_segment+0x1a8>)
 801424c:	f004 fa00 	bl	8018650 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8014250:	68bb      	ldr	r3, [r7, #8]
 8014252:	2b00      	cmp	r3, #0
 8014254:	d106      	bne.n	8014264 <tcp_output_segment+0x34>
 8014256:	4b5e      	ldr	r3, [pc, #376]	; (80143d0 <tcp_output_segment+0x1a0>)
 8014258:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801425c:	495f      	ldr	r1, [pc, #380]	; (80143dc <tcp_output_segment+0x1ac>)
 801425e:	485e      	ldr	r0, [pc, #376]	; (80143d8 <tcp_output_segment+0x1a8>)
 8014260:	f004 f9f6 	bl	8018650 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	2b00      	cmp	r3, #0
 8014268:	d106      	bne.n	8014278 <tcp_output_segment+0x48>
 801426a:	4b59      	ldr	r3, [pc, #356]	; (80143d0 <tcp_output_segment+0x1a0>)
 801426c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8014270:	495b      	ldr	r1, [pc, #364]	; (80143e0 <tcp_output_segment+0x1b0>)
 8014272:	4859      	ldr	r0, [pc, #356]	; (80143d8 <tcp_output_segment+0x1a8>)
 8014274:	f004 f9ec 	bl	8018650 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8014278:	68f8      	ldr	r0, [r7, #12]
 801427a:	f7ff ffb9 	bl	80141f0 <tcp_output_segment_busy>
 801427e:	4603      	mov	r3, r0
 8014280:	2b00      	cmp	r3, #0
 8014282:	d001      	beq.n	8014288 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8014284:	2300      	movs	r3, #0
 8014286:	e09f      	b.n	80143c8 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8014288:	68bb      	ldr	r3, [r7, #8]
 801428a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	68dc      	ldr	r4, [r3, #12]
 8014290:	4610      	mov	r0, r2
 8014292:	f7f8 ff00 	bl	800d096 <lwip_htonl>
 8014296:	4603      	mov	r3, r0
 8014298:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801429a:	68bb      	ldr	r3, [r7, #8]
 801429c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	68dc      	ldr	r4, [r3, #12]
 80142a2:	4610      	mov	r0, r2
 80142a4:	f7f8 fee2 	bl	800d06c <lwip_htons>
 80142a8:	4603      	mov	r3, r0
 80142aa:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80142ac:	68bb      	ldr	r3, [r7, #8]
 80142ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142b0:	68ba      	ldr	r2, [r7, #8]
 80142b2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80142b4:	441a      	add	r2, r3
 80142b6:	68bb      	ldr	r3, [r7, #8]
 80142b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80142ba:	68fb      	ldr	r3, [r7, #12]
 80142bc:	68db      	ldr	r3, [r3, #12]
 80142be:	3314      	adds	r3, #20
 80142c0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	7a9b      	ldrb	r3, [r3, #10]
 80142c6:	f003 0301 	and.w	r3, r3, #1
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d015      	beq.n	80142fa <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80142ce:	68bb      	ldr	r3, [r7, #8]
 80142d0:	3304      	adds	r3, #4
 80142d2:	461a      	mov	r2, r3
 80142d4:	6879      	ldr	r1, [r7, #4]
 80142d6:	f44f 7006 	mov.w	r0, #536	; 0x218
 80142da:	f7fc fa33 	bl	8010744 <tcp_eff_send_mss_netif>
 80142de:	4603      	mov	r3, r0
 80142e0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80142e2:	8b7b      	ldrh	r3, [r7, #26]
 80142e4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80142e8:	4618      	mov	r0, r3
 80142ea:	f7f8 fed4 	bl	800d096 <lwip_htonl>
 80142ee:	4602      	mov	r2, r0
 80142f0:	69fb      	ldr	r3, [r7, #28]
 80142f2:	601a      	str	r2, [r3, #0]
    opts += 1;
 80142f4:	69fb      	ldr	r3, [r7, #28]
 80142f6:	3304      	adds	r3, #4
 80142f8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80142fa:	68bb      	ldr	r3, [r7, #8]
 80142fc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014300:	2b00      	cmp	r3, #0
 8014302:	da02      	bge.n	801430a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8014304:	68bb      	ldr	r3, [r7, #8]
 8014306:	2200      	movs	r2, #0
 8014308:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801430a:	68bb      	ldr	r3, [r7, #8]
 801430c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801430e:	2b00      	cmp	r3, #0
 8014310:	d10c      	bne.n	801432c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8014312:	4b34      	ldr	r3, [pc, #208]	; (80143e4 <tcp_output_segment+0x1b4>)
 8014314:	681a      	ldr	r2, [r3, #0]
 8014316:	68bb      	ldr	r3, [r7, #8]
 8014318:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801431a:	68fb      	ldr	r3, [r7, #12]
 801431c:	68db      	ldr	r3, [r3, #12]
 801431e:	685b      	ldr	r3, [r3, #4]
 8014320:	4618      	mov	r0, r3
 8014322:	f7f8 feb8 	bl	800d096 <lwip_htonl>
 8014326:	4602      	mov	r2, r0
 8014328:	68bb      	ldr	r3, [r7, #8]
 801432a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	68da      	ldr	r2, [r3, #12]
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	685b      	ldr	r3, [r3, #4]
 8014334:	685b      	ldr	r3, [r3, #4]
 8014336:	1ad3      	subs	r3, r2, r3
 8014338:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	685b      	ldr	r3, [r3, #4]
 801433e:	8959      	ldrh	r1, [r3, #10]
 8014340:	68fb      	ldr	r3, [r7, #12]
 8014342:	685b      	ldr	r3, [r3, #4]
 8014344:	8b3a      	ldrh	r2, [r7, #24]
 8014346:	1a8a      	subs	r2, r1, r2
 8014348:	b292      	uxth	r2, r2
 801434a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801434c:	68fb      	ldr	r3, [r7, #12]
 801434e:	685b      	ldr	r3, [r3, #4]
 8014350:	8919      	ldrh	r1, [r3, #8]
 8014352:	68fb      	ldr	r3, [r7, #12]
 8014354:	685b      	ldr	r3, [r3, #4]
 8014356:	8b3a      	ldrh	r2, [r7, #24]
 8014358:	1a8a      	subs	r2, r1, r2
 801435a:	b292      	uxth	r2, r2
 801435c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801435e:	68fb      	ldr	r3, [r7, #12]
 8014360:	685b      	ldr	r3, [r3, #4]
 8014362:	68fa      	ldr	r2, [r7, #12]
 8014364:	68d2      	ldr	r2, [r2, #12]
 8014366:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8014368:	68fb      	ldr	r3, [r7, #12]
 801436a:	68db      	ldr	r3, [r3, #12]
 801436c:	2200      	movs	r2, #0
 801436e:	741a      	strb	r2, [r3, #16]
 8014370:	2200      	movs	r2, #0
 8014372:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8014374:	68fb      	ldr	r3, [r7, #12]
 8014376:	68db      	ldr	r3, [r3, #12]
 8014378:	f103 0214 	add.w	r2, r3, #20
 801437c:	68fb      	ldr	r3, [r7, #12]
 801437e:	7a9b      	ldrb	r3, [r3, #10]
 8014380:	009b      	lsls	r3, r3, #2
 8014382:	f003 0304 	and.w	r3, r3, #4
 8014386:	4413      	add	r3, r2
 8014388:	69fa      	ldr	r2, [r7, #28]
 801438a:	429a      	cmp	r2, r3
 801438c:	d006      	beq.n	801439c <tcp_output_segment+0x16c>
 801438e:	4b10      	ldr	r3, [pc, #64]	; (80143d0 <tcp_output_segment+0x1a0>)
 8014390:	f240 621c 	movw	r2, #1564	; 0x61c
 8014394:	4914      	ldr	r1, [pc, #80]	; (80143e8 <tcp_output_segment+0x1b8>)
 8014396:	4810      	ldr	r0, [pc, #64]	; (80143d8 <tcp_output_segment+0x1a8>)
 8014398:	f004 f95a 	bl	8018650 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801439c:	68fb      	ldr	r3, [r7, #12]
 801439e:	6858      	ldr	r0, [r3, #4]
 80143a0:	68b9      	ldr	r1, [r7, #8]
 80143a2:	68bb      	ldr	r3, [r7, #8]
 80143a4:	1d1c      	adds	r4, r3, #4
 80143a6:	68bb      	ldr	r3, [r7, #8]
 80143a8:	7add      	ldrb	r5, [r3, #11]
 80143aa:	68bb      	ldr	r3, [r7, #8]
 80143ac:	7a9b      	ldrb	r3, [r3, #10]
 80143ae:	687a      	ldr	r2, [r7, #4]
 80143b0:	9202      	str	r2, [sp, #8]
 80143b2:	2206      	movs	r2, #6
 80143b4:	9201      	str	r2, [sp, #4]
 80143b6:	9300      	str	r3, [sp, #0]
 80143b8:	462b      	mov	r3, r5
 80143ba:	4622      	mov	r2, r4
 80143bc:	f002 fd96 	bl	8016eec <ip4_output_if>
 80143c0:	4603      	mov	r3, r0
 80143c2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80143c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80143c8:	4618      	mov	r0, r3
 80143ca:	3720      	adds	r7, #32
 80143cc:	46bd      	mov	sp, r7
 80143ce:	bdb0      	pop	{r4, r5, r7, pc}
 80143d0:	0801c220 	.word	0x0801c220
 80143d4:	0801c7e4 	.word	0x0801c7e4
 80143d8:	0801c274 	.word	0x0801c274
 80143dc:	0801c804 	.word	0x0801c804
 80143e0:	0801c824 	.word	0x0801c824
 80143e4:	2000d24c 	.word	0x2000d24c
 80143e8:	0801c848 	.word	0x0801c848

080143ec <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80143ec:	b5b0      	push	{r4, r5, r7, lr}
 80143ee:	b084      	sub	sp, #16
 80143f0:	af00      	add	r7, sp, #0
 80143f2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d106      	bne.n	8014408 <tcp_rexmit_rto_prepare+0x1c>
 80143fa:	4b31      	ldr	r3, [pc, #196]	; (80144c0 <tcp_rexmit_rto_prepare+0xd4>)
 80143fc:	f240 6263 	movw	r2, #1635	; 0x663
 8014400:	4930      	ldr	r1, [pc, #192]	; (80144c4 <tcp_rexmit_rto_prepare+0xd8>)
 8014402:	4831      	ldr	r0, [pc, #196]	; (80144c8 <tcp_rexmit_rto_prepare+0xdc>)
 8014404:	f004 f924 	bl	8018650 <iprintf>

  if (pcb->unacked == NULL) {
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801440c:	2b00      	cmp	r3, #0
 801440e:	d102      	bne.n	8014416 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8014410:	f06f 0305 	mvn.w	r3, #5
 8014414:	e050      	b.n	80144b8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801441a:	60fb      	str	r3, [r7, #12]
 801441c:	e00b      	b.n	8014436 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801441e:	68f8      	ldr	r0, [r7, #12]
 8014420:	f7ff fee6 	bl	80141f0 <tcp_output_segment_busy>
 8014424:	4603      	mov	r3, r0
 8014426:	2b00      	cmp	r3, #0
 8014428:	d002      	beq.n	8014430 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801442a:	f06f 0305 	mvn.w	r3, #5
 801442e:	e043      	b.n	80144b8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014430:	68fb      	ldr	r3, [r7, #12]
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	60fb      	str	r3, [r7, #12]
 8014436:	68fb      	ldr	r3, [r7, #12]
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	2b00      	cmp	r3, #0
 801443c:	d1ef      	bne.n	801441e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801443e:	68f8      	ldr	r0, [r7, #12]
 8014440:	f7ff fed6 	bl	80141f0 <tcp_output_segment_busy>
 8014444:	4603      	mov	r3, r0
 8014446:	2b00      	cmp	r3, #0
 8014448:	d002      	beq.n	8014450 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801444a:	f06f 0305 	mvn.w	r3, #5
 801444e:	e033      	b.n	80144b8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014454:	68fb      	ldr	r3, [r7, #12]
 8014456:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	2200      	movs	r2, #0
 8014464:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	8b5b      	ldrh	r3, [r3, #26]
 801446a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801446e:	b29a      	uxth	r2, r3
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014474:	68fb      	ldr	r3, [r7, #12]
 8014476:	68db      	ldr	r3, [r3, #12]
 8014478:	685b      	ldr	r3, [r3, #4]
 801447a:	4618      	mov	r0, r3
 801447c:	f7f8 fe0b 	bl	800d096 <lwip_htonl>
 8014480:	4604      	mov	r4, r0
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	891b      	ldrh	r3, [r3, #8]
 8014486:	461d      	mov	r5, r3
 8014488:	68fb      	ldr	r3, [r7, #12]
 801448a:	68db      	ldr	r3, [r3, #12]
 801448c:	899b      	ldrh	r3, [r3, #12]
 801448e:	b29b      	uxth	r3, r3
 8014490:	4618      	mov	r0, r3
 8014492:	f7f8 fdeb 	bl	800d06c <lwip_htons>
 8014496:	4603      	mov	r3, r0
 8014498:	b2db      	uxtb	r3, r3
 801449a:	f003 0303 	and.w	r3, r3, #3
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d001      	beq.n	80144a6 <tcp_rexmit_rto_prepare+0xba>
 80144a2:	2301      	movs	r3, #1
 80144a4:	e000      	b.n	80144a8 <tcp_rexmit_rto_prepare+0xbc>
 80144a6:	2300      	movs	r3, #0
 80144a8:	442b      	add	r3, r5
 80144aa:	18e2      	adds	r2, r4, r3
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	2200      	movs	r2, #0
 80144b4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80144b6:	2300      	movs	r3, #0
}
 80144b8:	4618      	mov	r0, r3
 80144ba:	3710      	adds	r7, #16
 80144bc:	46bd      	mov	sp, r7
 80144be:	bdb0      	pop	{r4, r5, r7, pc}
 80144c0:	0801c220 	.word	0x0801c220
 80144c4:	0801c85c 	.word	0x0801c85c
 80144c8:	0801c274 	.word	0x0801c274

080144cc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80144cc:	b580      	push	{r7, lr}
 80144ce:	b082      	sub	sp, #8
 80144d0:	af00      	add	r7, sp, #0
 80144d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d106      	bne.n	80144e8 <tcp_rexmit_rto_commit+0x1c>
 80144da:	4b0d      	ldr	r3, [pc, #52]	; (8014510 <tcp_rexmit_rto_commit+0x44>)
 80144dc:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80144e0:	490c      	ldr	r1, [pc, #48]	; (8014514 <tcp_rexmit_rto_commit+0x48>)
 80144e2:	480d      	ldr	r0, [pc, #52]	; (8014518 <tcp_rexmit_rto_commit+0x4c>)
 80144e4:	f004 f8b4 	bl	8018650 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80144ee:	2bff      	cmp	r3, #255	; 0xff
 80144f0:	d007      	beq.n	8014502 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80144f8:	3301      	adds	r3, #1
 80144fa:	b2da      	uxtb	r2, r3
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8014502:	6878      	ldr	r0, [r7, #4]
 8014504:	f7ff fc80 	bl	8013e08 <tcp_output>
}
 8014508:	bf00      	nop
 801450a:	3708      	adds	r7, #8
 801450c:	46bd      	mov	sp, r7
 801450e:	bd80      	pop	{r7, pc}
 8014510:	0801c220 	.word	0x0801c220
 8014514:	0801c880 	.word	0x0801c880
 8014518:	0801c274 	.word	0x0801c274

0801451c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801451c:	b580      	push	{r7, lr}
 801451e:	b082      	sub	sp, #8
 8014520:	af00      	add	r7, sp, #0
 8014522:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	2b00      	cmp	r3, #0
 8014528:	d106      	bne.n	8014538 <tcp_rexmit_rto+0x1c>
 801452a:	4b0a      	ldr	r3, [pc, #40]	; (8014554 <tcp_rexmit_rto+0x38>)
 801452c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8014530:	4909      	ldr	r1, [pc, #36]	; (8014558 <tcp_rexmit_rto+0x3c>)
 8014532:	480a      	ldr	r0, [pc, #40]	; (801455c <tcp_rexmit_rto+0x40>)
 8014534:	f004 f88c 	bl	8018650 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8014538:	6878      	ldr	r0, [r7, #4]
 801453a:	f7ff ff57 	bl	80143ec <tcp_rexmit_rto_prepare>
 801453e:	4603      	mov	r3, r0
 8014540:	2b00      	cmp	r3, #0
 8014542:	d102      	bne.n	801454a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8014544:	6878      	ldr	r0, [r7, #4]
 8014546:	f7ff ffc1 	bl	80144cc <tcp_rexmit_rto_commit>
  }
}
 801454a:	bf00      	nop
 801454c:	3708      	adds	r7, #8
 801454e:	46bd      	mov	sp, r7
 8014550:	bd80      	pop	{r7, pc}
 8014552:	bf00      	nop
 8014554:	0801c220 	.word	0x0801c220
 8014558:	0801c8a4 	.word	0x0801c8a4
 801455c:	0801c274 	.word	0x0801c274

08014560 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8014560:	b590      	push	{r4, r7, lr}
 8014562:	b085      	sub	sp, #20
 8014564:	af00      	add	r7, sp, #0
 8014566:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	2b00      	cmp	r3, #0
 801456c:	d106      	bne.n	801457c <tcp_rexmit+0x1c>
 801456e:	4b2f      	ldr	r3, [pc, #188]	; (801462c <tcp_rexmit+0xcc>)
 8014570:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8014574:	492e      	ldr	r1, [pc, #184]	; (8014630 <tcp_rexmit+0xd0>)
 8014576:	482f      	ldr	r0, [pc, #188]	; (8014634 <tcp_rexmit+0xd4>)
 8014578:	f004 f86a 	bl	8018650 <iprintf>

  if (pcb->unacked == NULL) {
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014580:	2b00      	cmp	r3, #0
 8014582:	d102      	bne.n	801458a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8014584:	f06f 0305 	mvn.w	r3, #5
 8014588:	e04c      	b.n	8014624 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801458e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8014590:	68b8      	ldr	r0, [r7, #8]
 8014592:	f7ff fe2d 	bl	80141f0 <tcp_output_segment_busy>
 8014596:	4603      	mov	r3, r0
 8014598:	2b00      	cmp	r3, #0
 801459a:	d002      	beq.n	80145a2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801459c:	f06f 0305 	mvn.w	r3, #5
 80145a0:	e040      	b.n	8014624 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80145a2:	68bb      	ldr	r3, [r7, #8]
 80145a4:	681a      	ldr	r2, [r3, #0]
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	336c      	adds	r3, #108	; 0x6c
 80145ae:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80145b0:	e002      	b.n	80145b8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80145b8:	68fb      	ldr	r3, [r7, #12]
 80145ba:	681b      	ldr	r3, [r3, #0]
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d011      	beq.n	80145e4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	68db      	ldr	r3, [r3, #12]
 80145c6:	685b      	ldr	r3, [r3, #4]
 80145c8:	4618      	mov	r0, r3
 80145ca:	f7f8 fd64 	bl	800d096 <lwip_htonl>
 80145ce:	4604      	mov	r4, r0
 80145d0:	68bb      	ldr	r3, [r7, #8]
 80145d2:	68db      	ldr	r3, [r3, #12]
 80145d4:	685b      	ldr	r3, [r3, #4]
 80145d6:	4618      	mov	r0, r3
 80145d8:	f7f8 fd5d 	bl	800d096 <lwip_htonl>
 80145dc:	4603      	mov	r3, r0
 80145de:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	dbe6      	blt.n	80145b2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	681a      	ldr	r2, [r3, #0]
 80145e8:	68bb      	ldr	r3, [r7, #8]
 80145ea:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80145ec:	68fb      	ldr	r3, [r7, #12]
 80145ee:	68ba      	ldr	r2, [r7, #8]
 80145f0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80145f2:	68bb      	ldr	r3, [r7, #8]
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d103      	bne.n	8014602 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	2200      	movs	r2, #0
 80145fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014608:	2bff      	cmp	r3, #255	; 0xff
 801460a:	d007      	beq.n	801461c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014612:	3301      	adds	r3, #1
 8014614:	b2da      	uxtb	r2, r3
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	2200      	movs	r2, #0
 8014620:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8014622:	2300      	movs	r3, #0
}
 8014624:	4618      	mov	r0, r3
 8014626:	3714      	adds	r7, #20
 8014628:	46bd      	mov	sp, r7
 801462a:	bd90      	pop	{r4, r7, pc}
 801462c:	0801c220 	.word	0x0801c220
 8014630:	0801c8c0 	.word	0x0801c8c0
 8014634:	0801c274 	.word	0x0801c274

08014638 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8014638:	b580      	push	{r7, lr}
 801463a:	b082      	sub	sp, #8
 801463c:	af00      	add	r7, sp, #0
 801463e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d106      	bne.n	8014654 <tcp_rexmit_fast+0x1c>
 8014646:	4b2a      	ldr	r3, [pc, #168]	; (80146f0 <tcp_rexmit_fast+0xb8>)
 8014648:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801464c:	4929      	ldr	r1, [pc, #164]	; (80146f4 <tcp_rexmit_fast+0xbc>)
 801464e:	482a      	ldr	r0, [pc, #168]	; (80146f8 <tcp_rexmit_fast+0xc0>)
 8014650:	f003 fffe 	bl	8018650 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014658:	2b00      	cmp	r3, #0
 801465a:	d045      	beq.n	80146e8 <tcp_rexmit_fast+0xb0>
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	8b5b      	ldrh	r3, [r3, #26]
 8014660:	f003 0304 	and.w	r3, r3, #4
 8014664:	2b00      	cmp	r3, #0
 8014666:	d13f      	bne.n	80146e8 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8014668:	6878      	ldr	r0, [r7, #4]
 801466a:	f7ff ff79 	bl	8014560 <tcp_rexmit>
 801466e:	4603      	mov	r3, r0
 8014670:	2b00      	cmp	r3, #0
 8014672:	d139      	bne.n	80146e8 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014680:	4293      	cmp	r3, r2
 8014682:	bf28      	it	cs
 8014684:	4613      	movcs	r3, r2
 8014686:	b29b      	uxth	r3, r3
 8014688:	2b00      	cmp	r3, #0
 801468a:	da00      	bge.n	801468e <tcp_rexmit_fast+0x56>
 801468c:	3301      	adds	r3, #1
 801468e:	105b      	asrs	r3, r3, #1
 8014690:	b29a      	uxth	r2, r3
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801469e:	461a      	mov	r2, r3
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80146a4:	005b      	lsls	r3, r3, #1
 80146a6:	429a      	cmp	r2, r3
 80146a8:	d206      	bcs.n	80146b8 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80146ae:	005b      	lsls	r3, r3, #1
 80146b0:	b29a      	uxth	r2, r3
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80146c2:	4619      	mov	r1, r3
 80146c4:	0049      	lsls	r1, r1, #1
 80146c6:	440b      	add	r3, r1
 80146c8:	b29b      	uxth	r3, r3
 80146ca:	4413      	add	r3, r2
 80146cc:	b29a      	uxth	r2, r3
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	8b5b      	ldrh	r3, [r3, #26]
 80146d8:	f043 0304 	orr.w	r3, r3, #4
 80146dc:	b29a      	uxth	r2, r3
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	2200      	movs	r2, #0
 80146e6:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80146e8:	bf00      	nop
 80146ea:	3708      	adds	r7, #8
 80146ec:	46bd      	mov	sp, r7
 80146ee:	bd80      	pop	{r7, pc}
 80146f0:	0801c220 	.word	0x0801c220
 80146f4:	0801c8d8 	.word	0x0801c8d8
 80146f8:	0801c274 	.word	0x0801c274

080146fc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80146fc:	b580      	push	{r7, lr}
 80146fe:	b086      	sub	sp, #24
 8014700:	af00      	add	r7, sp, #0
 8014702:	60f8      	str	r0, [r7, #12]
 8014704:	607b      	str	r3, [r7, #4]
 8014706:	460b      	mov	r3, r1
 8014708:	817b      	strh	r3, [r7, #10]
 801470a:	4613      	mov	r3, r2
 801470c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801470e:	897a      	ldrh	r2, [r7, #10]
 8014710:	893b      	ldrh	r3, [r7, #8]
 8014712:	4413      	add	r3, r2
 8014714:	b29b      	uxth	r3, r3
 8014716:	3314      	adds	r3, #20
 8014718:	b29b      	uxth	r3, r3
 801471a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801471e:	4619      	mov	r1, r3
 8014720:	2022      	movs	r0, #34	; 0x22
 8014722:	f7f9 fd6b 	bl	800e1fc <pbuf_alloc>
 8014726:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8014728:	697b      	ldr	r3, [r7, #20]
 801472a:	2b00      	cmp	r3, #0
 801472c:	d04d      	beq.n	80147ca <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801472e:	897b      	ldrh	r3, [r7, #10]
 8014730:	3313      	adds	r3, #19
 8014732:	697a      	ldr	r2, [r7, #20]
 8014734:	8952      	ldrh	r2, [r2, #10]
 8014736:	4293      	cmp	r3, r2
 8014738:	db06      	blt.n	8014748 <tcp_output_alloc_header_common+0x4c>
 801473a:	4b26      	ldr	r3, [pc, #152]	; (80147d4 <tcp_output_alloc_header_common+0xd8>)
 801473c:	f240 7223 	movw	r2, #1827	; 0x723
 8014740:	4925      	ldr	r1, [pc, #148]	; (80147d8 <tcp_output_alloc_header_common+0xdc>)
 8014742:	4826      	ldr	r0, [pc, #152]	; (80147dc <tcp_output_alloc_header_common+0xe0>)
 8014744:	f003 ff84 	bl	8018650 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8014748:	697b      	ldr	r3, [r7, #20]
 801474a:	685b      	ldr	r3, [r3, #4]
 801474c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801474e:	8c3b      	ldrh	r3, [r7, #32]
 8014750:	4618      	mov	r0, r3
 8014752:	f7f8 fc8b 	bl	800d06c <lwip_htons>
 8014756:	4603      	mov	r3, r0
 8014758:	461a      	mov	r2, r3
 801475a:	693b      	ldr	r3, [r7, #16]
 801475c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801475e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014760:	4618      	mov	r0, r3
 8014762:	f7f8 fc83 	bl	800d06c <lwip_htons>
 8014766:	4603      	mov	r3, r0
 8014768:	461a      	mov	r2, r3
 801476a:	693b      	ldr	r3, [r7, #16]
 801476c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801476e:	693b      	ldr	r3, [r7, #16]
 8014770:	687a      	ldr	r2, [r7, #4]
 8014772:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8014774:	68f8      	ldr	r0, [r7, #12]
 8014776:	f7f8 fc8e 	bl	800d096 <lwip_htonl>
 801477a:	4602      	mov	r2, r0
 801477c:	693b      	ldr	r3, [r7, #16]
 801477e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8014780:	897b      	ldrh	r3, [r7, #10]
 8014782:	089b      	lsrs	r3, r3, #2
 8014784:	b29b      	uxth	r3, r3
 8014786:	3305      	adds	r3, #5
 8014788:	b29b      	uxth	r3, r3
 801478a:	031b      	lsls	r3, r3, #12
 801478c:	b29a      	uxth	r2, r3
 801478e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014792:	b29b      	uxth	r3, r3
 8014794:	4313      	orrs	r3, r2
 8014796:	b29b      	uxth	r3, r3
 8014798:	4618      	mov	r0, r3
 801479a:	f7f8 fc67 	bl	800d06c <lwip_htons>
 801479e:	4603      	mov	r3, r0
 80147a0:	461a      	mov	r2, r3
 80147a2:	693b      	ldr	r3, [r7, #16]
 80147a4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80147a6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80147a8:	4618      	mov	r0, r3
 80147aa:	f7f8 fc5f 	bl	800d06c <lwip_htons>
 80147ae:	4603      	mov	r3, r0
 80147b0:	461a      	mov	r2, r3
 80147b2:	693b      	ldr	r3, [r7, #16]
 80147b4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80147b6:	693b      	ldr	r3, [r7, #16]
 80147b8:	2200      	movs	r2, #0
 80147ba:	741a      	strb	r2, [r3, #16]
 80147bc:	2200      	movs	r2, #0
 80147be:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80147c0:	693b      	ldr	r3, [r7, #16]
 80147c2:	2200      	movs	r2, #0
 80147c4:	749a      	strb	r2, [r3, #18]
 80147c6:	2200      	movs	r2, #0
 80147c8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80147ca:	697b      	ldr	r3, [r7, #20]
}
 80147cc:	4618      	mov	r0, r3
 80147ce:	3718      	adds	r7, #24
 80147d0:	46bd      	mov	sp, r7
 80147d2:	bd80      	pop	{r7, pc}
 80147d4:	0801c220 	.word	0x0801c220
 80147d8:	0801c8f8 	.word	0x0801c8f8
 80147dc:	0801c274 	.word	0x0801c274

080147e0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80147e0:	b5b0      	push	{r4, r5, r7, lr}
 80147e2:	b08a      	sub	sp, #40	; 0x28
 80147e4:	af04      	add	r7, sp, #16
 80147e6:	60f8      	str	r0, [r7, #12]
 80147e8:	607b      	str	r3, [r7, #4]
 80147ea:	460b      	mov	r3, r1
 80147ec:	817b      	strh	r3, [r7, #10]
 80147ee:	4613      	mov	r3, r2
 80147f0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80147f2:	68fb      	ldr	r3, [r7, #12]
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d106      	bne.n	8014806 <tcp_output_alloc_header+0x26>
 80147f8:	4b15      	ldr	r3, [pc, #84]	; (8014850 <tcp_output_alloc_header+0x70>)
 80147fa:	f240 7242 	movw	r2, #1858	; 0x742
 80147fe:	4915      	ldr	r1, [pc, #84]	; (8014854 <tcp_output_alloc_header+0x74>)
 8014800:	4815      	ldr	r0, [pc, #84]	; (8014858 <tcp_output_alloc_header+0x78>)
 8014802:	f003 ff25 	bl	8018650 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	8adb      	ldrh	r3, [r3, #22]
 801480e:	68fa      	ldr	r2, [r7, #12]
 8014810:	8b12      	ldrh	r2, [r2, #24]
 8014812:	68f9      	ldr	r1, [r7, #12]
 8014814:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8014816:	893d      	ldrh	r5, [r7, #8]
 8014818:	897c      	ldrh	r4, [r7, #10]
 801481a:	9103      	str	r1, [sp, #12]
 801481c:	2110      	movs	r1, #16
 801481e:	9102      	str	r1, [sp, #8]
 8014820:	9201      	str	r2, [sp, #4]
 8014822:	9300      	str	r3, [sp, #0]
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	462a      	mov	r2, r5
 8014828:	4621      	mov	r1, r4
 801482a:	f7ff ff67 	bl	80146fc <tcp_output_alloc_header_common>
 801482e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8014830:	697b      	ldr	r3, [r7, #20]
 8014832:	2b00      	cmp	r3, #0
 8014834:	d006      	beq.n	8014844 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014836:	68fb      	ldr	r3, [r7, #12]
 8014838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801483a:	68fa      	ldr	r2, [r7, #12]
 801483c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801483e:	441a      	add	r2, r3
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8014844:	697b      	ldr	r3, [r7, #20]
}
 8014846:	4618      	mov	r0, r3
 8014848:	3718      	adds	r7, #24
 801484a:	46bd      	mov	sp, r7
 801484c:	bdb0      	pop	{r4, r5, r7, pc}
 801484e:	bf00      	nop
 8014850:	0801c220 	.word	0x0801c220
 8014854:	0801c928 	.word	0x0801c928
 8014858:	0801c274 	.word	0x0801c274

0801485c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801485c:	b580      	push	{r7, lr}
 801485e:	b088      	sub	sp, #32
 8014860:	af00      	add	r7, sp, #0
 8014862:	60f8      	str	r0, [r7, #12]
 8014864:	60b9      	str	r1, [r7, #8]
 8014866:	4611      	mov	r1, r2
 8014868:	461a      	mov	r2, r3
 801486a:	460b      	mov	r3, r1
 801486c:	71fb      	strb	r3, [r7, #7]
 801486e:	4613      	mov	r3, r2
 8014870:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8014872:	2300      	movs	r3, #0
 8014874:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8014876:	68bb      	ldr	r3, [r7, #8]
 8014878:	2b00      	cmp	r3, #0
 801487a:	d106      	bne.n	801488a <tcp_output_fill_options+0x2e>
 801487c:	4b13      	ldr	r3, [pc, #76]	; (80148cc <tcp_output_fill_options+0x70>)
 801487e:	f240 7256 	movw	r2, #1878	; 0x756
 8014882:	4913      	ldr	r1, [pc, #76]	; (80148d0 <tcp_output_fill_options+0x74>)
 8014884:	4813      	ldr	r0, [pc, #76]	; (80148d4 <tcp_output_fill_options+0x78>)
 8014886:	f003 fee3 	bl	8018650 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801488a:	68bb      	ldr	r3, [r7, #8]
 801488c:	685b      	ldr	r3, [r3, #4]
 801488e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8014890:	69bb      	ldr	r3, [r7, #24]
 8014892:	3314      	adds	r3, #20
 8014894:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8014896:	69bb      	ldr	r3, [r7, #24]
 8014898:	f103 0214 	add.w	r2, r3, #20
 801489c:	8bfb      	ldrh	r3, [r7, #30]
 801489e:	009b      	lsls	r3, r3, #2
 80148a0:	4619      	mov	r1, r3
 80148a2:	79fb      	ldrb	r3, [r7, #7]
 80148a4:	009b      	lsls	r3, r3, #2
 80148a6:	f003 0304 	and.w	r3, r3, #4
 80148aa:	440b      	add	r3, r1
 80148ac:	4413      	add	r3, r2
 80148ae:	697a      	ldr	r2, [r7, #20]
 80148b0:	429a      	cmp	r2, r3
 80148b2:	d006      	beq.n	80148c2 <tcp_output_fill_options+0x66>
 80148b4:	4b05      	ldr	r3, [pc, #20]	; (80148cc <tcp_output_fill_options+0x70>)
 80148b6:	f240 7275 	movw	r2, #1909	; 0x775
 80148ba:	4907      	ldr	r1, [pc, #28]	; (80148d8 <tcp_output_fill_options+0x7c>)
 80148bc:	4805      	ldr	r0, [pc, #20]	; (80148d4 <tcp_output_fill_options+0x78>)
 80148be:	f003 fec7 	bl	8018650 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80148c2:	bf00      	nop
 80148c4:	3720      	adds	r7, #32
 80148c6:	46bd      	mov	sp, r7
 80148c8:	bd80      	pop	{r7, pc}
 80148ca:	bf00      	nop
 80148cc:	0801c220 	.word	0x0801c220
 80148d0:	0801c950 	.word	0x0801c950
 80148d4:	0801c274 	.word	0x0801c274
 80148d8:	0801c848 	.word	0x0801c848

080148dc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80148dc:	b580      	push	{r7, lr}
 80148de:	b08a      	sub	sp, #40	; 0x28
 80148e0:	af04      	add	r7, sp, #16
 80148e2:	60f8      	str	r0, [r7, #12]
 80148e4:	60b9      	str	r1, [r7, #8]
 80148e6:	607a      	str	r2, [r7, #4]
 80148e8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80148ea:	68bb      	ldr	r3, [r7, #8]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d106      	bne.n	80148fe <tcp_output_control_segment+0x22>
 80148f0:	4b1c      	ldr	r3, [pc, #112]	; (8014964 <tcp_output_control_segment+0x88>)
 80148f2:	f240 7287 	movw	r2, #1927	; 0x787
 80148f6:	491c      	ldr	r1, [pc, #112]	; (8014968 <tcp_output_control_segment+0x8c>)
 80148f8:	481c      	ldr	r0, [pc, #112]	; (801496c <tcp_output_control_segment+0x90>)
 80148fa:	f003 fea9 	bl	8018650 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80148fe:	683a      	ldr	r2, [r7, #0]
 8014900:	6879      	ldr	r1, [r7, #4]
 8014902:	68f8      	ldr	r0, [r7, #12]
 8014904:	f7fe fae8 	bl	8012ed8 <tcp_route>
 8014908:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801490a:	693b      	ldr	r3, [r7, #16]
 801490c:	2b00      	cmp	r3, #0
 801490e:	d102      	bne.n	8014916 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014910:	23fc      	movs	r3, #252	; 0xfc
 8014912:	75fb      	strb	r3, [r7, #23]
 8014914:	e01c      	b.n	8014950 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	2b00      	cmp	r3, #0
 801491a:	d006      	beq.n	801492a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	7adb      	ldrb	r3, [r3, #11]
 8014920:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	7a9b      	ldrb	r3, [r3, #10]
 8014926:	757b      	strb	r3, [r7, #21]
 8014928:	e003      	b.n	8014932 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801492a:	23ff      	movs	r3, #255	; 0xff
 801492c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801492e:	2300      	movs	r3, #0
 8014930:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8014932:	7dba      	ldrb	r2, [r7, #22]
 8014934:	693b      	ldr	r3, [r7, #16]
 8014936:	9302      	str	r3, [sp, #8]
 8014938:	2306      	movs	r3, #6
 801493a:	9301      	str	r3, [sp, #4]
 801493c:	7d7b      	ldrb	r3, [r7, #21]
 801493e:	9300      	str	r3, [sp, #0]
 8014940:	4613      	mov	r3, r2
 8014942:	683a      	ldr	r2, [r7, #0]
 8014944:	6879      	ldr	r1, [r7, #4]
 8014946:	68b8      	ldr	r0, [r7, #8]
 8014948:	f002 fad0 	bl	8016eec <ip4_output_if>
 801494c:	4603      	mov	r3, r0
 801494e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014950:	68b8      	ldr	r0, [r7, #8]
 8014952:	f7f9 ff69 	bl	800e828 <pbuf_free>
  return err;
 8014956:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801495a:	4618      	mov	r0, r3
 801495c:	3718      	adds	r7, #24
 801495e:	46bd      	mov	sp, r7
 8014960:	bd80      	pop	{r7, pc}
 8014962:	bf00      	nop
 8014964:	0801c220 	.word	0x0801c220
 8014968:	0801c978 	.word	0x0801c978
 801496c:	0801c274 	.word	0x0801c274

08014970 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014970:	b590      	push	{r4, r7, lr}
 8014972:	b08b      	sub	sp, #44	; 0x2c
 8014974:	af04      	add	r7, sp, #16
 8014976:	60f8      	str	r0, [r7, #12]
 8014978:	60b9      	str	r1, [r7, #8]
 801497a:	607a      	str	r2, [r7, #4]
 801497c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801497e:	683b      	ldr	r3, [r7, #0]
 8014980:	2b00      	cmp	r3, #0
 8014982:	d106      	bne.n	8014992 <tcp_rst+0x22>
 8014984:	4b1f      	ldr	r3, [pc, #124]	; (8014a04 <tcp_rst+0x94>)
 8014986:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801498a:	491f      	ldr	r1, [pc, #124]	; (8014a08 <tcp_rst+0x98>)
 801498c:	481f      	ldr	r0, [pc, #124]	; (8014a0c <tcp_rst+0x9c>)
 801498e:	f003 fe5f 	bl	8018650 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8014992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014994:	2b00      	cmp	r3, #0
 8014996:	d106      	bne.n	80149a6 <tcp_rst+0x36>
 8014998:	4b1a      	ldr	r3, [pc, #104]	; (8014a04 <tcp_rst+0x94>)
 801499a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801499e:	491c      	ldr	r1, [pc, #112]	; (8014a10 <tcp_rst+0xa0>)
 80149a0:	481a      	ldr	r0, [pc, #104]	; (8014a0c <tcp_rst+0x9c>)
 80149a2:	f003 fe55 	bl	8018650 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80149a6:	2300      	movs	r3, #0
 80149a8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80149aa:	f246 0308 	movw	r3, #24584	; 0x6008
 80149ae:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80149b0:	7dfb      	ldrb	r3, [r7, #23]
 80149b2:	b29c      	uxth	r4, r3
 80149b4:	68b8      	ldr	r0, [r7, #8]
 80149b6:	f7f8 fb6e 	bl	800d096 <lwip_htonl>
 80149ba:	4602      	mov	r2, r0
 80149bc:	8abb      	ldrh	r3, [r7, #20]
 80149be:	9303      	str	r3, [sp, #12]
 80149c0:	2314      	movs	r3, #20
 80149c2:	9302      	str	r3, [sp, #8]
 80149c4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80149c6:	9301      	str	r3, [sp, #4]
 80149c8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80149ca:	9300      	str	r3, [sp, #0]
 80149cc:	4613      	mov	r3, r2
 80149ce:	2200      	movs	r2, #0
 80149d0:	4621      	mov	r1, r4
 80149d2:	6878      	ldr	r0, [r7, #4]
 80149d4:	f7ff fe92 	bl	80146fc <tcp_output_alloc_header_common>
 80149d8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80149da:	693b      	ldr	r3, [r7, #16]
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d00c      	beq.n	80149fa <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80149e0:	7dfb      	ldrb	r3, [r7, #23]
 80149e2:	2200      	movs	r2, #0
 80149e4:	6939      	ldr	r1, [r7, #16]
 80149e6:	68f8      	ldr	r0, [r7, #12]
 80149e8:	f7ff ff38 	bl	801485c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80149ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149ee:	683a      	ldr	r2, [r7, #0]
 80149f0:	6939      	ldr	r1, [r7, #16]
 80149f2:	68f8      	ldr	r0, [r7, #12]
 80149f4:	f7ff ff72 	bl	80148dc <tcp_output_control_segment>
 80149f8:	e000      	b.n	80149fc <tcp_rst+0x8c>
    return;
 80149fa:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80149fc:	371c      	adds	r7, #28
 80149fe:	46bd      	mov	sp, r7
 8014a00:	bd90      	pop	{r4, r7, pc}
 8014a02:	bf00      	nop
 8014a04:	0801c220 	.word	0x0801c220
 8014a08:	0801c9a4 	.word	0x0801c9a4
 8014a0c:	0801c274 	.word	0x0801c274
 8014a10:	0801c9c0 	.word	0x0801c9c0

08014a14 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014a14:	b590      	push	{r4, r7, lr}
 8014a16:	b087      	sub	sp, #28
 8014a18:	af00      	add	r7, sp, #0
 8014a1a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014a1c:	2300      	movs	r3, #0
 8014a1e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014a20:	2300      	movs	r3, #0
 8014a22:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d106      	bne.n	8014a38 <tcp_send_empty_ack+0x24>
 8014a2a:	4b28      	ldr	r3, [pc, #160]	; (8014acc <tcp_send_empty_ack+0xb8>)
 8014a2c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8014a30:	4927      	ldr	r1, [pc, #156]	; (8014ad0 <tcp_send_empty_ack+0xbc>)
 8014a32:	4828      	ldr	r0, [pc, #160]	; (8014ad4 <tcp_send_empty_ack+0xc0>)
 8014a34:	f003 fe0c 	bl	8018650 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014a38:	7dfb      	ldrb	r3, [r7, #23]
 8014a3a:	009b      	lsls	r3, r3, #2
 8014a3c:	b2db      	uxtb	r3, r3
 8014a3e:	f003 0304 	and.w	r3, r3, #4
 8014a42:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014a44:	7d7b      	ldrb	r3, [r7, #21]
 8014a46:	b29c      	uxth	r4, r3
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014a4c:	4618      	mov	r0, r3
 8014a4e:	f7f8 fb22 	bl	800d096 <lwip_htonl>
 8014a52:	4603      	mov	r3, r0
 8014a54:	2200      	movs	r2, #0
 8014a56:	4621      	mov	r1, r4
 8014a58:	6878      	ldr	r0, [r7, #4]
 8014a5a:	f7ff fec1 	bl	80147e0 <tcp_output_alloc_header>
 8014a5e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014a60:	693b      	ldr	r3, [r7, #16]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d109      	bne.n	8014a7a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	8b5b      	ldrh	r3, [r3, #26]
 8014a6a:	f043 0303 	orr.w	r3, r3, #3
 8014a6e:	b29a      	uxth	r2, r3
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014a74:	f06f 0301 	mvn.w	r3, #1
 8014a78:	e023      	b.n	8014ac2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8014a7a:	7dbb      	ldrb	r3, [r7, #22]
 8014a7c:	7dfa      	ldrb	r2, [r7, #23]
 8014a7e:	6939      	ldr	r1, [r7, #16]
 8014a80:	6878      	ldr	r0, [r7, #4]
 8014a82:	f7ff feeb 	bl	801485c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014a86:	687a      	ldr	r2, [r7, #4]
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	3304      	adds	r3, #4
 8014a8c:	6939      	ldr	r1, [r7, #16]
 8014a8e:	6878      	ldr	r0, [r7, #4]
 8014a90:	f7ff ff24 	bl	80148dc <tcp_output_control_segment>
 8014a94:	4603      	mov	r3, r0
 8014a96:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014a98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d007      	beq.n	8014ab0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	8b5b      	ldrh	r3, [r3, #26]
 8014aa4:	f043 0303 	orr.w	r3, r3, #3
 8014aa8:	b29a      	uxth	r2, r3
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	835a      	strh	r2, [r3, #26]
 8014aae:	e006      	b.n	8014abe <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	8b5b      	ldrh	r3, [r3, #26]
 8014ab4:	f023 0303 	bic.w	r3, r3, #3
 8014ab8:	b29a      	uxth	r2, r3
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8014abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014ac2:	4618      	mov	r0, r3
 8014ac4:	371c      	adds	r7, #28
 8014ac6:	46bd      	mov	sp, r7
 8014ac8:	bd90      	pop	{r4, r7, pc}
 8014aca:	bf00      	nop
 8014acc:	0801c220 	.word	0x0801c220
 8014ad0:	0801c9dc 	.word	0x0801c9dc
 8014ad4:	0801c274 	.word	0x0801c274

08014ad8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014ad8:	b590      	push	{r4, r7, lr}
 8014ada:	b087      	sub	sp, #28
 8014adc:	af00      	add	r7, sp, #0
 8014ade:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014ae0:	2300      	movs	r3, #0
 8014ae2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d106      	bne.n	8014af8 <tcp_keepalive+0x20>
 8014aea:	4b18      	ldr	r3, [pc, #96]	; (8014b4c <tcp_keepalive+0x74>)
 8014aec:	f640 0224 	movw	r2, #2084	; 0x824
 8014af0:	4917      	ldr	r1, [pc, #92]	; (8014b50 <tcp_keepalive+0x78>)
 8014af2:	4818      	ldr	r0, [pc, #96]	; (8014b54 <tcp_keepalive+0x7c>)
 8014af4:	f003 fdac 	bl	8018650 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014af8:	7dfb      	ldrb	r3, [r7, #23]
 8014afa:	b29c      	uxth	r4, r3
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014b00:	3b01      	subs	r3, #1
 8014b02:	4618      	mov	r0, r3
 8014b04:	f7f8 fac7 	bl	800d096 <lwip_htonl>
 8014b08:	4603      	mov	r3, r0
 8014b0a:	2200      	movs	r2, #0
 8014b0c:	4621      	mov	r1, r4
 8014b0e:	6878      	ldr	r0, [r7, #4]
 8014b10:	f7ff fe66 	bl	80147e0 <tcp_output_alloc_header>
 8014b14:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014b16:	693b      	ldr	r3, [r7, #16]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d102      	bne.n	8014b22 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8014b20:	e010      	b.n	8014b44 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014b22:	7dfb      	ldrb	r3, [r7, #23]
 8014b24:	2200      	movs	r2, #0
 8014b26:	6939      	ldr	r1, [r7, #16]
 8014b28:	6878      	ldr	r0, [r7, #4]
 8014b2a:	f7ff fe97 	bl	801485c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014b2e:	687a      	ldr	r2, [r7, #4]
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	3304      	adds	r3, #4
 8014b34:	6939      	ldr	r1, [r7, #16]
 8014b36:	6878      	ldr	r0, [r7, #4]
 8014b38:	f7ff fed0 	bl	80148dc <tcp_output_control_segment>
 8014b3c:	4603      	mov	r3, r0
 8014b3e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014b40:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014b44:	4618      	mov	r0, r3
 8014b46:	371c      	adds	r7, #28
 8014b48:	46bd      	mov	sp, r7
 8014b4a:	bd90      	pop	{r4, r7, pc}
 8014b4c:	0801c220 	.word	0x0801c220
 8014b50:	0801c9fc 	.word	0x0801c9fc
 8014b54:	0801c274 	.word	0x0801c274

08014b58 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014b58:	b590      	push	{r4, r7, lr}
 8014b5a:	b08b      	sub	sp, #44	; 0x2c
 8014b5c:	af00      	add	r7, sp, #0
 8014b5e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014b60:	2300      	movs	r3, #0
 8014b62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d106      	bne.n	8014b7a <tcp_zero_window_probe+0x22>
 8014b6c:	4b4c      	ldr	r3, [pc, #304]	; (8014ca0 <tcp_zero_window_probe+0x148>)
 8014b6e:	f640 024f 	movw	r2, #2127	; 0x84f
 8014b72:	494c      	ldr	r1, [pc, #304]	; (8014ca4 <tcp_zero_window_probe+0x14c>)
 8014b74:	484c      	ldr	r0, [pc, #304]	; (8014ca8 <tcp_zero_window_probe+0x150>)
 8014b76:	f003 fd6b 	bl	8018650 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b7e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014b80:	6a3b      	ldr	r3, [r7, #32]
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d101      	bne.n	8014b8a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014b86:	2300      	movs	r3, #0
 8014b88:	e086      	b.n	8014c98 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014b90:	2bff      	cmp	r3, #255	; 0xff
 8014b92:	d007      	beq.n	8014ba4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014b9a:	3301      	adds	r3, #1
 8014b9c:	b2da      	uxtb	r2, r3
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014ba4:	6a3b      	ldr	r3, [r7, #32]
 8014ba6:	68db      	ldr	r3, [r3, #12]
 8014ba8:	899b      	ldrh	r3, [r3, #12]
 8014baa:	b29b      	uxth	r3, r3
 8014bac:	4618      	mov	r0, r3
 8014bae:	f7f8 fa5d 	bl	800d06c <lwip_htons>
 8014bb2:	4603      	mov	r3, r0
 8014bb4:	b2db      	uxtb	r3, r3
 8014bb6:	f003 0301 	and.w	r3, r3, #1
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d005      	beq.n	8014bca <tcp_zero_window_probe+0x72>
 8014bbe:	6a3b      	ldr	r3, [r7, #32]
 8014bc0:	891b      	ldrh	r3, [r3, #8]
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d101      	bne.n	8014bca <tcp_zero_window_probe+0x72>
 8014bc6:	2301      	movs	r3, #1
 8014bc8:	e000      	b.n	8014bcc <tcp_zero_window_probe+0x74>
 8014bca:	2300      	movs	r3, #0
 8014bcc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014bce:	7ffb      	ldrb	r3, [r7, #31]
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	bf0c      	ite	eq
 8014bd4:	2301      	moveq	r3, #1
 8014bd6:	2300      	movne	r3, #0
 8014bd8:	b2db      	uxtb	r3, r3
 8014bda:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014bdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014be0:	b299      	uxth	r1, r3
 8014be2:	6a3b      	ldr	r3, [r7, #32]
 8014be4:	68db      	ldr	r3, [r3, #12]
 8014be6:	685b      	ldr	r3, [r3, #4]
 8014be8:	8bba      	ldrh	r2, [r7, #28]
 8014bea:	6878      	ldr	r0, [r7, #4]
 8014bec:	f7ff fdf8 	bl	80147e0 <tcp_output_alloc_header>
 8014bf0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014bf2:	69bb      	ldr	r3, [r7, #24]
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d102      	bne.n	8014bfe <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8014bfc:	e04c      	b.n	8014c98 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014bfe:	69bb      	ldr	r3, [r7, #24]
 8014c00:	685b      	ldr	r3, [r3, #4]
 8014c02:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014c04:	7ffb      	ldrb	r3, [r7, #31]
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d011      	beq.n	8014c2e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014c0a:	697b      	ldr	r3, [r7, #20]
 8014c0c:	899b      	ldrh	r3, [r3, #12]
 8014c0e:	b29b      	uxth	r3, r3
 8014c10:	b21b      	sxth	r3, r3
 8014c12:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014c16:	b21c      	sxth	r4, r3
 8014c18:	2011      	movs	r0, #17
 8014c1a:	f7f8 fa27 	bl	800d06c <lwip_htons>
 8014c1e:	4603      	mov	r3, r0
 8014c20:	b21b      	sxth	r3, r3
 8014c22:	4323      	orrs	r3, r4
 8014c24:	b21b      	sxth	r3, r3
 8014c26:	b29a      	uxth	r2, r3
 8014c28:	697b      	ldr	r3, [r7, #20]
 8014c2a:	819a      	strh	r2, [r3, #12]
 8014c2c:	e010      	b.n	8014c50 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014c2e:	69bb      	ldr	r3, [r7, #24]
 8014c30:	685b      	ldr	r3, [r3, #4]
 8014c32:	3314      	adds	r3, #20
 8014c34:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014c36:	6a3b      	ldr	r3, [r7, #32]
 8014c38:	6858      	ldr	r0, [r3, #4]
 8014c3a:	6a3b      	ldr	r3, [r7, #32]
 8014c3c:	685b      	ldr	r3, [r3, #4]
 8014c3e:	891a      	ldrh	r2, [r3, #8]
 8014c40:	6a3b      	ldr	r3, [r7, #32]
 8014c42:	891b      	ldrh	r3, [r3, #8]
 8014c44:	1ad3      	subs	r3, r2, r3
 8014c46:	b29b      	uxth	r3, r3
 8014c48:	2201      	movs	r2, #1
 8014c4a:	6939      	ldr	r1, [r7, #16]
 8014c4c:	f7f9 fff2 	bl	800ec34 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014c50:	6a3b      	ldr	r3, [r7, #32]
 8014c52:	68db      	ldr	r3, [r3, #12]
 8014c54:	685b      	ldr	r3, [r3, #4]
 8014c56:	4618      	mov	r0, r3
 8014c58:	f7f8 fa1d 	bl	800d096 <lwip_htonl>
 8014c5c:	4603      	mov	r3, r0
 8014c5e:	3301      	adds	r3, #1
 8014c60:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	1ad3      	subs	r3, r2, r3
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	da02      	bge.n	8014c74 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	68fa      	ldr	r2, [r7, #12]
 8014c72:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014c74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c78:	2200      	movs	r2, #0
 8014c7a:	69b9      	ldr	r1, [r7, #24]
 8014c7c:	6878      	ldr	r0, [r7, #4]
 8014c7e:	f7ff fded 	bl	801485c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014c82:	687a      	ldr	r2, [r7, #4]
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	3304      	adds	r3, #4
 8014c88:	69b9      	ldr	r1, [r7, #24]
 8014c8a:	6878      	ldr	r0, [r7, #4]
 8014c8c:	f7ff fe26 	bl	80148dc <tcp_output_control_segment>
 8014c90:	4603      	mov	r3, r0
 8014c92:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014c94:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014c98:	4618      	mov	r0, r3
 8014c9a:	372c      	adds	r7, #44	; 0x2c
 8014c9c:	46bd      	mov	sp, r7
 8014c9e:	bd90      	pop	{r4, r7, pc}
 8014ca0:	0801c220 	.word	0x0801c220
 8014ca4:	0801ca18 	.word	0x0801ca18
 8014ca8:	0801c274 	.word	0x0801c274

08014cac <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014cac:	b580      	push	{r7, lr}
 8014cae:	b082      	sub	sp, #8
 8014cb0:	af00      	add	r7, sp, #0
 8014cb2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014cb4:	f7fa f8ac 	bl	800ee10 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014cb8:	4b0a      	ldr	r3, [pc, #40]	; (8014ce4 <tcpip_tcp_timer+0x38>)
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d103      	bne.n	8014cc8 <tcpip_tcp_timer+0x1c>
 8014cc0:	4b09      	ldr	r3, [pc, #36]	; (8014ce8 <tcpip_tcp_timer+0x3c>)
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d005      	beq.n	8014cd4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014cc8:	2200      	movs	r2, #0
 8014cca:	4908      	ldr	r1, [pc, #32]	; (8014cec <tcpip_tcp_timer+0x40>)
 8014ccc:	20fa      	movs	r0, #250	; 0xfa
 8014cce:	f000 f8f3 	bl	8014eb8 <sys_timeout>
 8014cd2:	e003      	b.n	8014cdc <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014cd4:	4b06      	ldr	r3, [pc, #24]	; (8014cf0 <tcpip_tcp_timer+0x44>)
 8014cd6:	2200      	movs	r2, #0
 8014cd8:	601a      	str	r2, [r3, #0]
  }
}
 8014cda:	bf00      	nop
 8014cdc:	bf00      	nop
 8014cde:	3708      	adds	r7, #8
 8014ce0:	46bd      	mov	sp, r7
 8014ce2:	bd80      	pop	{r7, pc}
 8014ce4:	2000d258 	.word	0x2000d258
 8014ce8:	2000d25c 	.word	0x2000d25c
 8014cec:	08014cad 	.word	0x08014cad
 8014cf0:	2000d2a4 	.word	0x2000d2a4

08014cf4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014cf4:	b580      	push	{r7, lr}
 8014cf6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014cf8:	4b0a      	ldr	r3, [pc, #40]	; (8014d24 <tcp_timer_needed+0x30>)
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d10f      	bne.n	8014d20 <tcp_timer_needed+0x2c>
 8014d00:	4b09      	ldr	r3, [pc, #36]	; (8014d28 <tcp_timer_needed+0x34>)
 8014d02:	681b      	ldr	r3, [r3, #0]
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d103      	bne.n	8014d10 <tcp_timer_needed+0x1c>
 8014d08:	4b08      	ldr	r3, [pc, #32]	; (8014d2c <tcp_timer_needed+0x38>)
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d007      	beq.n	8014d20 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014d10:	4b04      	ldr	r3, [pc, #16]	; (8014d24 <tcp_timer_needed+0x30>)
 8014d12:	2201      	movs	r2, #1
 8014d14:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014d16:	2200      	movs	r2, #0
 8014d18:	4905      	ldr	r1, [pc, #20]	; (8014d30 <tcp_timer_needed+0x3c>)
 8014d1a:	20fa      	movs	r0, #250	; 0xfa
 8014d1c:	f000 f8cc 	bl	8014eb8 <sys_timeout>
  }
}
 8014d20:	bf00      	nop
 8014d22:	bd80      	pop	{r7, pc}
 8014d24:	2000d2a4 	.word	0x2000d2a4
 8014d28:	2000d258 	.word	0x2000d258
 8014d2c:	2000d25c 	.word	0x2000d25c
 8014d30:	08014cad 	.word	0x08014cad

08014d34 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014d34:	b580      	push	{r7, lr}
 8014d36:	b086      	sub	sp, #24
 8014d38:	af00      	add	r7, sp, #0
 8014d3a:	60f8      	str	r0, [r7, #12]
 8014d3c:	60b9      	str	r1, [r7, #8]
 8014d3e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014d40:	200a      	movs	r0, #10
 8014d42:	f7f8 fe49 	bl	800d9d8 <memp_malloc>
 8014d46:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014d48:	693b      	ldr	r3, [r7, #16]
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d109      	bne.n	8014d62 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014d4e:	693b      	ldr	r3, [r7, #16]
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d151      	bne.n	8014df8 <sys_timeout_abs+0xc4>
 8014d54:	4b2a      	ldr	r3, [pc, #168]	; (8014e00 <sys_timeout_abs+0xcc>)
 8014d56:	22be      	movs	r2, #190	; 0xbe
 8014d58:	492a      	ldr	r1, [pc, #168]	; (8014e04 <sys_timeout_abs+0xd0>)
 8014d5a:	482b      	ldr	r0, [pc, #172]	; (8014e08 <sys_timeout_abs+0xd4>)
 8014d5c:	f003 fc78 	bl	8018650 <iprintf>
    return;
 8014d60:	e04a      	b.n	8014df8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8014d62:	693b      	ldr	r3, [r7, #16]
 8014d64:	2200      	movs	r2, #0
 8014d66:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014d68:	693b      	ldr	r3, [r7, #16]
 8014d6a:	68ba      	ldr	r2, [r7, #8]
 8014d6c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014d6e:	693b      	ldr	r3, [r7, #16]
 8014d70:	687a      	ldr	r2, [r7, #4]
 8014d72:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014d74:	693b      	ldr	r3, [r7, #16]
 8014d76:	68fa      	ldr	r2, [r7, #12]
 8014d78:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014d7a:	4b24      	ldr	r3, [pc, #144]	; (8014e0c <sys_timeout_abs+0xd8>)
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d103      	bne.n	8014d8a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8014d82:	4a22      	ldr	r2, [pc, #136]	; (8014e0c <sys_timeout_abs+0xd8>)
 8014d84:	693b      	ldr	r3, [r7, #16]
 8014d86:	6013      	str	r3, [r2, #0]
    return;
 8014d88:	e037      	b.n	8014dfa <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014d8a:	693b      	ldr	r3, [r7, #16]
 8014d8c:	685a      	ldr	r2, [r3, #4]
 8014d8e:	4b1f      	ldr	r3, [pc, #124]	; (8014e0c <sys_timeout_abs+0xd8>)
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	685b      	ldr	r3, [r3, #4]
 8014d94:	1ad3      	subs	r3, r2, r3
 8014d96:	0fdb      	lsrs	r3, r3, #31
 8014d98:	f003 0301 	and.w	r3, r3, #1
 8014d9c:	b2db      	uxtb	r3, r3
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d007      	beq.n	8014db2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8014da2:	4b1a      	ldr	r3, [pc, #104]	; (8014e0c <sys_timeout_abs+0xd8>)
 8014da4:	681a      	ldr	r2, [r3, #0]
 8014da6:	693b      	ldr	r3, [r7, #16]
 8014da8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014daa:	4a18      	ldr	r2, [pc, #96]	; (8014e0c <sys_timeout_abs+0xd8>)
 8014dac:	693b      	ldr	r3, [r7, #16]
 8014dae:	6013      	str	r3, [r2, #0]
 8014db0:	e023      	b.n	8014dfa <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014db2:	4b16      	ldr	r3, [pc, #88]	; (8014e0c <sys_timeout_abs+0xd8>)
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	617b      	str	r3, [r7, #20]
 8014db8:	e01a      	b.n	8014df0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014dba:	697b      	ldr	r3, [r7, #20]
 8014dbc:	681b      	ldr	r3, [r3, #0]
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d00b      	beq.n	8014dda <sys_timeout_abs+0xa6>
 8014dc2:	693b      	ldr	r3, [r7, #16]
 8014dc4:	685a      	ldr	r2, [r3, #4]
 8014dc6:	697b      	ldr	r3, [r7, #20]
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	685b      	ldr	r3, [r3, #4]
 8014dcc:	1ad3      	subs	r3, r2, r3
 8014dce:	0fdb      	lsrs	r3, r3, #31
 8014dd0:	f003 0301 	and.w	r3, r3, #1
 8014dd4:	b2db      	uxtb	r3, r3
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d007      	beq.n	8014dea <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014dda:	697b      	ldr	r3, [r7, #20]
 8014ddc:	681a      	ldr	r2, [r3, #0]
 8014dde:	693b      	ldr	r3, [r7, #16]
 8014de0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014de2:	697b      	ldr	r3, [r7, #20]
 8014de4:	693a      	ldr	r2, [r7, #16]
 8014de6:	601a      	str	r2, [r3, #0]
        break;
 8014de8:	e007      	b.n	8014dfa <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014dea:	697b      	ldr	r3, [r7, #20]
 8014dec:	681b      	ldr	r3, [r3, #0]
 8014dee:	617b      	str	r3, [r7, #20]
 8014df0:	697b      	ldr	r3, [r7, #20]
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d1e1      	bne.n	8014dba <sys_timeout_abs+0x86>
 8014df6:	e000      	b.n	8014dfa <sys_timeout_abs+0xc6>
    return;
 8014df8:	bf00      	nop
      }
    }
  }
}
 8014dfa:	3718      	adds	r7, #24
 8014dfc:	46bd      	mov	sp, r7
 8014dfe:	bd80      	pop	{r7, pc}
 8014e00:	0801ca3c 	.word	0x0801ca3c
 8014e04:	0801ca70 	.word	0x0801ca70
 8014e08:	0801cab0 	.word	0x0801cab0
 8014e0c:	2000d29c 	.word	0x2000d29c

08014e10 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014e10:	b580      	push	{r7, lr}
 8014e12:	b086      	sub	sp, #24
 8014e14:	af00      	add	r7, sp, #0
 8014e16:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014e1c:	697b      	ldr	r3, [r7, #20]
 8014e1e:	685b      	ldr	r3, [r3, #4]
 8014e20:	4798      	blx	r3

  now = sys_now();
 8014e22:	f7f1 f985 	bl	8006130 <sys_now>
 8014e26:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014e28:	697b      	ldr	r3, [r7, #20]
 8014e2a:	681a      	ldr	r2, [r3, #0]
 8014e2c:	4b0f      	ldr	r3, [pc, #60]	; (8014e6c <lwip_cyclic_timer+0x5c>)
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	4413      	add	r3, r2
 8014e32:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014e34:	68fa      	ldr	r2, [r7, #12]
 8014e36:	693b      	ldr	r3, [r7, #16]
 8014e38:	1ad3      	subs	r3, r2, r3
 8014e3a:	0fdb      	lsrs	r3, r3, #31
 8014e3c:	f003 0301 	and.w	r3, r3, #1
 8014e40:	b2db      	uxtb	r3, r3
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d009      	beq.n	8014e5a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8014e46:	697b      	ldr	r3, [r7, #20]
 8014e48:	681a      	ldr	r2, [r3, #0]
 8014e4a:	693b      	ldr	r3, [r7, #16]
 8014e4c:	4413      	add	r3, r2
 8014e4e:	687a      	ldr	r2, [r7, #4]
 8014e50:	4907      	ldr	r1, [pc, #28]	; (8014e70 <lwip_cyclic_timer+0x60>)
 8014e52:	4618      	mov	r0, r3
 8014e54:	f7ff ff6e 	bl	8014d34 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014e58:	e004      	b.n	8014e64 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8014e5a:	687a      	ldr	r2, [r7, #4]
 8014e5c:	4904      	ldr	r1, [pc, #16]	; (8014e70 <lwip_cyclic_timer+0x60>)
 8014e5e:	68f8      	ldr	r0, [r7, #12]
 8014e60:	f7ff ff68 	bl	8014d34 <sys_timeout_abs>
}
 8014e64:	bf00      	nop
 8014e66:	3718      	adds	r7, #24
 8014e68:	46bd      	mov	sp, r7
 8014e6a:	bd80      	pop	{r7, pc}
 8014e6c:	2000d2a0 	.word	0x2000d2a0
 8014e70:	08014e11 	.word	0x08014e11

08014e74 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014e74:	b580      	push	{r7, lr}
 8014e76:	b082      	sub	sp, #8
 8014e78:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014e7a:	2301      	movs	r3, #1
 8014e7c:	607b      	str	r3, [r7, #4]
 8014e7e:	e00e      	b.n	8014e9e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014e80:	4a0b      	ldr	r2, [pc, #44]	; (8014eb0 <sys_timeouts_init+0x3c>)
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	00db      	lsls	r3, r3, #3
 8014e8c:	4a08      	ldr	r2, [pc, #32]	; (8014eb0 <sys_timeouts_init+0x3c>)
 8014e8e:	4413      	add	r3, r2
 8014e90:	461a      	mov	r2, r3
 8014e92:	4908      	ldr	r1, [pc, #32]	; (8014eb4 <sys_timeouts_init+0x40>)
 8014e94:	f000 f810 	bl	8014eb8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	3301      	adds	r3, #1
 8014e9c:	607b      	str	r3, [r7, #4]
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	2b02      	cmp	r3, #2
 8014ea2:	d9ed      	bls.n	8014e80 <sys_timeouts_init+0xc>
  }
}
 8014ea4:	bf00      	nop
 8014ea6:	bf00      	nop
 8014ea8:	3708      	adds	r7, #8
 8014eaa:	46bd      	mov	sp, r7
 8014eac:	bd80      	pop	{r7, pc}
 8014eae:	bf00      	nop
 8014eb0:	0801d714 	.word	0x0801d714
 8014eb4:	08014e11 	.word	0x08014e11

08014eb8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014eb8:	b580      	push	{r7, lr}
 8014eba:	b086      	sub	sp, #24
 8014ebc:	af00      	add	r7, sp, #0
 8014ebe:	60f8      	str	r0, [r7, #12]
 8014ec0:	60b9      	str	r1, [r7, #8]
 8014ec2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014ec4:	68fb      	ldr	r3, [r7, #12]
 8014ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014eca:	d306      	bcc.n	8014eda <sys_timeout+0x22>
 8014ecc:	4b0a      	ldr	r3, [pc, #40]	; (8014ef8 <sys_timeout+0x40>)
 8014ece:	f240 1229 	movw	r2, #297	; 0x129
 8014ed2:	490a      	ldr	r1, [pc, #40]	; (8014efc <sys_timeout+0x44>)
 8014ed4:	480a      	ldr	r0, [pc, #40]	; (8014f00 <sys_timeout+0x48>)
 8014ed6:	f003 fbbb 	bl	8018650 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8014eda:	f7f1 f929 	bl	8006130 <sys_now>
 8014ede:	4602      	mov	r2, r0
 8014ee0:	68fb      	ldr	r3, [r7, #12]
 8014ee2:	4413      	add	r3, r2
 8014ee4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014ee6:	687a      	ldr	r2, [r7, #4]
 8014ee8:	68b9      	ldr	r1, [r7, #8]
 8014eea:	6978      	ldr	r0, [r7, #20]
 8014eec:	f7ff ff22 	bl	8014d34 <sys_timeout_abs>
#endif
}
 8014ef0:	bf00      	nop
 8014ef2:	3718      	adds	r7, #24
 8014ef4:	46bd      	mov	sp, r7
 8014ef6:	bd80      	pop	{r7, pc}
 8014ef8:	0801ca3c 	.word	0x0801ca3c
 8014efc:	0801cad8 	.word	0x0801cad8
 8014f00:	0801cab0 	.word	0x0801cab0

08014f04 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014f04:	b580      	push	{r7, lr}
 8014f06:	b084      	sub	sp, #16
 8014f08:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8014f0a:	f7f1 f911 	bl	8006130 <sys_now>
 8014f0e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8014f10:	4b17      	ldr	r3, [pc, #92]	; (8014f70 <sys_check_timeouts+0x6c>)
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8014f16:	68bb      	ldr	r3, [r7, #8]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d022      	beq.n	8014f62 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8014f1c:	68bb      	ldr	r3, [r7, #8]
 8014f1e:	685b      	ldr	r3, [r3, #4]
 8014f20:	68fa      	ldr	r2, [r7, #12]
 8014f22:	1ad3      	subs	r3, r2, r3
 8014f24:	0fdb      	lsrs	r3, r3, #31
 8014f26:	f003 0301 	and.w	r3, r3, #1
 8014f2a:	b2db      	uxtb	r3, r3
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d11a      	bne.n	8014f66 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014f30:	68bb      	ldr	r3, [r7, #8]
 8014f32:	681b      	ldr	r3, [r3, #0]
 8014f34:	4a0e      	ldr	r2, [pc, #56]	; (8014f70 <sys_check_timeouts+0x6c>)
 8014f36:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014f38:	68bb      	ldr	r3, [r7, #8]
 8014f3a:	689b      	ldr	r3, [r3, #8]
 8014f3c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014f3e:	68bb      	ldr	r3, [r7, #8]
 8014f40:	68db      	ldr	r3, [r3, #12]
 8014f42:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014f44:	68bb      	ldr	r3, [r7, #8]
 8014f46:	685b      	ldr	r3, [r3, #4]
 8014f48:	4a0a      	ldr	r2, [pc, #40]	; (8014f74 <sys_check_timeouts+0x70>)
 8014f4a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014f4c:	68b9      	ldr	r1, [r7, #8]
 8014f4e:	200a      	movs	r0, #10
 8014f50:	f7f8 fd94 	bl	800da7c <memp_free>
    if (handler != NULL) {
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d0da      	beq.n	8014f10 <sys_check_timeouts+0xc>
      handler(arg);
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	6838      	ldr	r0, [r7, #0]
 8014f5e:	4798      	blx	r3
  do {
 8014f60:	e7d6      	b.n	8014f10 <sys_check_timeouts+0xc>
      return;
 8014f62:	bf00      	nop
 8014f64:	e000      	b.n	8014f68 <sys_check_timeouts+0x64>
      return;
 8014f66:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8014f68:	3710      	adds	r7, #16
 8014f6a:	46bd      	mov	sp, r7
 8014f6c:	bd80      	pop	{r7, pc}
 8014f6e:	bf00      	nop
 8014f70:	2000d29c 	.word	0x2000d29c
 8014f74:	2000d2a0 	.word	0x2000d2a0

08014f78 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8014f78:	b580      	push	{r7, lr}
 8014f7a:	b082      	sub	sp, #8
 8014f7c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8014f7e:	4b16      	ldr	r3, [pc, #88]	; (8014fd8 <sys_timeouts_sleeptime+0x60>)
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d102      	bne.n	8014f8c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8014f86:	f04f 33ff 	mov.w	r3, #4294967295
 8014f8a:	e020      	b.n	8014fce <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8014f8c:	f7f1 f8d0 	bl	8006130 <sys_now>
 8014f90:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8014f92:	4b11      	ldr	r3, [pc, #68]	; (8014fd8 <sys_timeouts_sleeptime+0x60>)
 8014f94:	681b      	ldr	r3, [r3, #0]
 8014f96:	685a      	ldr	r2, [r3, #4]
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	1ad3      	subs	r3, r2, r3
 8014f9c:	0fdb      	lsrs	r3, r3, #31
 8014f9e:	f003 0301 	and.w	r3, r3, #1
 8014fa2:	b2db      	uxtb	r3, r3
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d001      	beq.n	8014fac <sys_timeouts_sleeptime+0x34>
    return 0;
 8014fa8:	2300      	movs	r3, #0
 8014faa:	e010      	b.n	8014fce <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8014fac:	4b0a      	ldr	r3, [pc, #40]	; (8014fd8 <sys_timeouts_sleeptime+0x60>)
 8014fae:	681b      	ldr	r3, [r3, #0]
 8014fb0:	685a      	ldr	r2, [r3, #4]
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	1ad3      	subs	r3, r2, r3
 8014fb6:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8014fb8:	683b      	ldr	r3, [r7, #0]
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	da06      	bge.n	8014fcc <sys_timeouts_sleeptime+0x54>
 8014fbe:	4b07      	ldr	r3, [pc, #28]	; (8014fdc <sys_timeouts_sleeptime+0x64>)
 8014fc0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8014fc4:	4906      	ldr	r1, [pc, #24]	; (8014fe0 <sys_timeouts_sleeptime+0x68>)
 8014fc6:	4807      	ldr	r0, [pc, #28]	; (8014fe4 <sys_timeouts_sleeptime+0x6c>)
 8014fc8:	f003 fb42 	bl	8018650 <iprintf>
    return ret;
 8014fcc:	683b      	ldr	r3, [r7, #0]
  }
}
 8014fce:	4618      	mov	r0, r3
 8014fd0:	3708      	adds	r7, #8
 8014fd2:	46bd      	mov	sp, r7
 8014fd4:	bd80      	pop	{r7, pc}
 8014fd6:	bf00      	nop
 8014fd8:	2000d29c 	.word	0x2000d29c
 8014fdc:	0801ca3c 	.word	0x0801ca3c
 8014fe0:	0801cb10 	.word	0x0801cb10
 8014fe4:	0801cab0 	.word	0x0801cab0

08014fe8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014fe8:	b580      	push	{r7, lr}
 8014fea:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014fec:	f003 fb48 	bl	8018680 <rand>
 8014ff0:	4603      	mov	r3, r0
 8014ff2:	b29b      	uxth	r3, r3
 8014ff4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014ff8:	b29b      	uxth	r3, r3
 8014ffa:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8014ffe:	b29a      	uxth	r2, r3
 8015000:	4b01      	ldr	r3, [pc, #4]	; (8015008 <udp_init+0x20>)
 8015002:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015004:	bf00      	nop
 8015006:	bd80      	pop	{r7, pc}
 8015008:	20000018 	.word	0x20000018

0801500c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801500c:	b480      	push	{r7}
 801500e:	b083      	sub	sp, #12
 8015010:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8015012:	2300      	movs	r3, #0
 8015014:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8015016:	4b17      	ldr	r3, [pc, #92]	; (8015074 <udp_new_port+0x68>)
 8015018:	881b      	ldrh	r3, [r3, #0]
 801501a:	1c5a      	adds	r2, r3, #1
 801501c:	b291      	uxth	r1, r2
 801501e:	4a15      	ldr	r2, [pc, #84]	; (8015074 <udp_new_port+0x68>)
 8015020:	8011      	strh	r1, [r2, #0]
 8015022:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015026:	4293      	cmp	r3, r2
 8015028:	d103      	bne.n	8015032 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801502a:	4b12      	ldr	r3, [pc, #72]	; (8015074 <udp_new_port+0x68>)
 801502c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8015030:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015032:	4b11      	ldr	r3, [pc, #68]	; (8015078 <udp_new_port+0x6c>)
 8015034:	681b      	ldr	r3, [r3, #0]
 8015036:	603b      	str	r3, [r7, #0]
 8015038:	e011      	b.n	801505e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801503a:	683b      	ldr	r3, [r7, #0]
 801503c:	8a5a      	ldrh	r2, [r3, #18]
 801503e:	4b0d      	ldr	r3, [pc, #52]	; (8015074 <udp_new_port+0x68>)
 8015040:	881b      	ldrh	r3, [r3, #0]
 8015042:	429a      	cmp	r2, r3
 8015044:	d108      	bne.n	8015058 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8015046:	88fb      	ldrh	r3, [r7, #6]
 8015048:	3301      	adds	r3, #1
 801504a:	80fb      	strh	r3, [r7, #6]
 801504c:	88fb      	ldrh	r3, [r7, #6]
 801504e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015052:	d3e0      	bcc.n	8015016 <udp_new_port+0xa>
        return 0;
 8015054:	2300      	movs	r3, #0
 8015056:	e007      	b.n	8015068 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015058:	683b      	ldr	r3, [r7, #0]
 801505a:	68db      	ldr	r3, [r3, #12]
 801505c:	603b      	str	r3, [r7, #0]
 801505e:	683b      	ldr	r3, [r7, #0]
 8015060:	2b00      	cmp	r3, #0
 8015062:	d1ea      	bne.n	801503a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8015064:	4b03      	ldr	r3, [pc, #12]	; (8015074 <udp_new_port+0x68>)
 8015066:	881b      	ldrh	r3, [r3, #0]
}
 8015068:	4618      	mov	r0, r3
 801506a:	370c      	adds	r7, #12
 801506c:	46bd      	mov	sp, r7
 801506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015072:	4770      	bx	lr
 8015074:	20000018 	.word	0x20000018
 8015078:	2000d2a8 	.word	0x2000d2a8

0801507c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801507c:	b580      	push	{r7, lr}
 801507e:	b084      	sub	sp, #16
 8015080:	af00      	add	r7, sp, #0
 8015082:	60f8      	str	r0, [r7, #12]
 8015084:	60b9      	str	r1, [r7, #8]
 8015086:	4613      	mov	r3, r2
 8015088:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	2b00      	cmp	r3, #0
 801508e:	d105      	bne.n	801509c <udp_input_local_match+0x20>
 8015090:	4b27      	ldr	r3, [pc, #156]	; (8015130 <udp_input_local_match+0xb4>)
 8015092:	2287      	movs	r2, #135	; 0x87
 8015094:	4927      	ldr	r1, [pc, #156]	; (8015134 <udp_input_local_match+0xb8>)
 8015096:	4828      	ldr	r0, [pc, #160]	; (8015138 <udp_input_local_match+0xbc>)
 8015098:	f003 fada 	bl	8018650 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801509c:	68bb      	ldr	r3, [r7, #8]
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d105      	bne.n	80150ae <udp_input_local_match+0x32>
 80150a2:	4b23      	ldr	r3, [pc, #140]	; (8015130 <udp_input_local_match+0xb4>)
 80150a4:	2288      	movs	r2, #136	; 0x88
 80150a6:	4925      	ldr	r1, [pc, #148]	; (801513c <udp_input_local_match+0xc0>)
 80150a8:	4823      	ldr	r0, [pc, #140]	; (8015138 <udp_input_local_match+0xbc>)
 80150aa:	f003 fad1 	bl	8018650 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	7a1b      	ldrb	r3, [r3, #8]
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d00b      	beq.n	80150ce <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80150b6:	68fb      	ldr	r3, [r7, #12]
 80150b8:	7a1a      	ldrb	r2, [r3, #8]
 80150ba:	4b21      	ldr	r3, [pc, #132]	; (8015140 <udp_input_local_match+0xc4>)
 80150bc:	685b      	ldr	r3, [r3, #4]
 80150be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80150c2:	3301      	adds	r3, #1
 80150c4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80150c6:	429a      	cmp	r2, r3
 80150c8:	d001      	beq.n	80150ce <udp_input_local_match+0x52>
    return 0;
 80150ca:	2300      	movs	r3, #0
 80150cc:	e02b      	b.n	8015126 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80150ce:	79fb      	ldrb	r3, [r7, #7]
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d018      	beq.n	8015106 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80150d4:	68fb      	ldr	r3, [r7, #12]
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d013      	beq.n	8015102 <udp_input_local_match+0x86>
 80150da:	68fb      	ldr	r3, [r7, #12]
 80150dc:	681b      	ldr	r3, [r3, #0]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d00f      	beq.n	8015102 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80150e2:	4b17      	ldr	r3, [pc, #92]	; (8015140 <udp_input_local_match+0xc4>)
 80150e4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80150e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80150ea:	d00a      	beq.n	8015102 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80150ec:	68fb      	ldr	r3, [r7, #12]
 80150ee:	681a      	ldr	r2, [r3, #0]
 80150f0:	4b13      	ldr	r3, [pc, #76]	; (8015140 <udp_input_local_match+0xc4>)
 80150f2:	695b      	ldr	r3, [r3, #20]
 80150f4:	405a      	eors	r2, r3
 80150f6:	68bb      	ldr	r3, [r7, #8]
 80150f8:	3308      	adds	r3, #8
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d110      	bne.n	8015124 <udp_input_local_match+0xa8>
          return 1;
 8015102:	2301      	movs	r3, #1
 8015104:	e00f      	b.n	8015126 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	2b00      	cmp	r3, #0
 801510a:	d009      	beq.n	8015120 <udp_input_local_match+0xa4>
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	2b00      	cmp	r3, #0
 8015112:	d005      	beq.n	8015120 <udp_input_local_match+0xa4>
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	681a      	ldr	r2, [r3, #0]
 8015118:	4b09      	ldr	r3, [pc, #36]	; (8015140 <udp_input_local_match+0xc4>)
 801511a:	695b      	ldr	r3, [r3, #20]
 801511c:	429a      	cmp	r2, r3
 801511e:	d101      	bne.n	8015124 <udp_input_local_match+0xa8>
        return 1;
 8015120:	2301      	movs	r3, #1
 8015122:	e000      	b.n	8015126 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8015124:	2300      	movs	r3, #0
}
 8015126:	4618      	mov	r0, r3
 8015128:	3710      	adds	r7, #16
 801512a:	46bd      	mov	sp, r7
 801512c:	bd80      	pop	{r7, pc}
 801512e:	bf00      	nop
 8015130:	0801cb24 	.word	0x0801cb24
 8015134:	0801cb54 	.word	0x0801cb54
 8015138:	0801cb78 	.word	0x0801cb78
 801513c:	0801cba0 	.word	0x0801cba0
 8015140:	20007938 	.word	0x20007938

08015144 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8015144:	b590      	push	{r4, r7, lr}
 8015146:	b08d      	sub	sp, #52	; 0x34
 8015148:	af02      	add	r7, sp, #8
 801514a:	6078      	str	r0, [r7, #4]
 801514c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801514e:	2300      	movs	r3, #0
 8015150:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	2b00      	cmp	r3, #0
 8015156:	d105      	bne.n	8015164 <udp_input+0x20>
 8015158:	4b7c      	ldr	r3, [pc, #496]	; (801534c <udp_input+0x208>)
 801515a:	22cf      	movs	r2, #207	; 0xcf
 801515c:	497c      	ldr	r1, [pc, #496]	; (8015350 <udp_input+0x20c>)
 801515e:	487d      	ldr	r0, [pc, #500]	; (8015354 <udp_input+0x210>)
 8015160:	f003 fa76 	bl	8018650 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8015164:	683b      	ldr	r3, [r7, #0]
 8015166:	2b00      	cmp	r3, #0
 8015168:	d105      	bne.n	8015176 <udp_input+0x32>
 801516a:	4b78      	ldr	r3, [pc, #480]	; (801534c <udp_input+0x208>)
 801516c:	22d0      	movs	r2, #208	; 0xd0
 801516e:	497a      	ldr	r1, [pc, #488]	; (8015358 <udp_input+0x214>)
 8015170:	4878      	ldr	r0, [pc, #480]	; (8015354 <udp_input+0x210>)
 8015172:	f003 fa6d 	bl	8018650 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	895b      	ldrh	r3, [r3, #10]
 801517a:	2b07      	cmp	r3, #7
 801517c:	d803      	bhi.n	8015186 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801517e:	6878      	ldr	r0, [r7, #4]
 8015180:	f7f9 fb52 	bl	800e828 <pbuf_free>
    goto end;
 8015184:	e0de      	b.n	8015344 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	685b      	ldr	r3, [r3, #4]
 801518a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801518c:	4b73      	ldr	r3, [pc, #460]	; (801535c <udp_input+0x218>)
 801518e:	695b      	ldr	r3, [r3, #20]
 8015190:	4a72      	ldr	r2, [pc, #456]	; (801535c <udp_input+0x218>)
 8015192:	6812      	ldr	r2, [r2, #0]
 8015194:	4611      	mov	r1, r2
 8015196:	4618      	mov	r0, r3
 8015198:	f001 ff80 	bl	801709c <ip4_addr_isbroadcast_u32>
 801519c:	4603      	mov	r3, r0
 801519e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80151a0:	697b      	ldr	r3, [r7, #20]
 80151a2:	881b      	ldrh	r3, [r3, #0]
 80151a4:	b29b      	uxth	r3, r3
 80151a6:	4618      	mov	r0, r3
 80151a8:	f7f7 ff60 	bl	800d06c <lwip_htons>
 80151ac:	4603      	mov	r3, r0
 80151ae:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80151b0:	697b      	ldr	r3, [r7, #20]
 80151b2:	885b      	ldrh	r3, [r3, #2]
 80151b4:	b29b      	uxth	r3, r3
 80151b6:	4618      	mov	r0, r3
 80151b8:	f7f7 ff58 	bl	800d06c <lwip_htons>
 80151bc:	4603      	mov	r3, r0
 80151be:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80151c0:	2300      	movs	r3, #0
 80151c2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80151c4:	2300      	movs	r3, #0
 80151c6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80151c8:	2300      	movs	r3, #0
 80151ca:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80151cc:	4b64      	ldr	r3, [pc, #400]	; (8015360 <udp_input+0x21c>)
 80151ce:	681b      	ldr	r3, [r3, #0]
 80151d0:	627b      	str	r3, [r7, #36]	; 0x24
 80151d2:	e054      	b.n	801527e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80151d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151d6:	8a5b      	ldrh	r3, [r3, #18]
 80151d8:	89fa      	ldrh	r2, [r7, #14]
 80151da:	429a      	cmp	r2, r3
 80151dc:	d14a      	bne.n	8015274 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80151de:	7cfb      	ldrb	r3, [r7, #19]
 80151e0:	461a      	mov	r2, r3
 80151e2:	6839      	ldr	r1, [r7, #0]
 80151e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80151e6:	f7ff ff49 	bl	801507c <udp_input_local_match>
 80151ea:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d041      	beq.n	8015274 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80151f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151f2:	7c1b      	ldrb	r3, [r3, #16]
 80151f4:	f003 0304 	and.w	r3, r3, #4
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d11d      	bne.n	8015238 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80151fc:	69fb      	ldr	r3, [r7, #28]
 80151fe:	2b00      	cmp	r3, #0
 8015200:	d102      	bne.n	8015208 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8015202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015204:	61fb      	str	r3, [r7, #28]
 8015206:	e017      	b.n	8015238 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8015208:	7cfb      	ldrb	r3, [r7, #19]
 801520a:	2b00      	cmp	r3, #0
 801520c:	d014      	beq.n	8015238 <udp_input+0xf4>
 801520e:	4b53      	ldr	r3, [pc, #332]	; (801535c <udp_input+0x218>)
 8015210:	695b      	ldr	r3, [r3, #20]
 8015212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015216:	d10f      	bne.n	8015238 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8015218:	69fb      	ldr	r3, [r7, #28]
 801521a:	681a      	ldr	r2, [r3, #0]
 801521c:	683b      	ldr	r3, [r7, #0]
 801521e:	3304      	adds	r3, #4
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	429a      	cmp	r2, r3
 8015224:	d008      	beq.n	8015238 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8015226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015228:	681a      	ldr	r2, [r3, #0]
 801522a:	683b      	ldr	r3, [r7, #0]
 801522c:	3304      	adds	r3, #4
 801522e:	681b      	ldr	r3, [r3, #0]
 8015230:	429a      	cmp	r2, r3
 8015232:	d101      	bne.n	8015238 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8015234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015236:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8015238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801523a:	8a9b      	ldrh	r3, [r3, #20]
 801523c:	8a3a      	ldrh	r2, [r7, #16]
 801523e:	429a      	cmp	r2, r3
 8015240:	d118      	bne.n	8015274 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015244:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8015246:	2b00      	cmp	r3, #0
 8015248:	d005      	beq.n	8015256 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801524c:	685a      	ldr	r2, [r3, #4]
 801524e:	4b43      	ldr	r3, [pc, #268]	; (801535c <udp_input+0x218>)
 8015250:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015252:	429a      	cmp	r2, r3
 8015254:	d10e      	bne.n	8015274 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8015256:	6a3b      	ldr	r3, [r7, #32]
 8015258:	2b00      	cmp	r3, #0
 801525a:	d014      	beq.n	8015286 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801525e:	68da      	ldr	r2, [r3, #12]
 8015260:	6a3b      	ldr	r3, [r7, #32]
 8015262:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8015264:	4b3e      	ldr	r3, [pc, #248]	; (8015360 <udp_input+0x21c>)
 8015266:	681a      	ldr	r2, [r3, #0]
 8015268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801526a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801526c:	4a3c      	ldr	r2, [pc, #240]	; (8015360 <udp_input+0x21c>)
 801526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015270:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8015272:	e008      	b.n	8015286 <udp_input+0x142>
      }
    }

    prev = pcb;
 8015274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015276:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801527a:	68db      	ldr	r3, [r3, #12]
 801527c:	627b      	str	r3, [r7, #36]	; 0x24
 801527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015280:	2b00      	cmp	r3, #0
 8015282:	d1a7      	bne.n	80151d4 <udp_input+0x90>
 8015284:	e000      	b.n	8015288 <udp_input+0x144>
        break;
 8015286:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8015288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801528a:	2b00      	cmp	r3, #0
 801528c:	d101      	bne.n	8015292 <udp_input+0x14e>
    pcb = uncon_pcb;
 801528e:	69fb      	ldr	r3, [r7, #28]
 8015290:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8015292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015294:	2b00      	cmp	r3, #0
 8015296:	d002      	beq.n	801529e <udp_input+0x15a>
    for_us = 1;
 8015298:	2301      	movs	r3, #1
 801529a:	76fb      	strb	r3, [r7, #27]
 801529c:	e00a      	b.n	80152b4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801529e:	683b      	ldr	r3, [r7, #0]
 80152a0:	3304      	adds	r3, #4
 80152a2:	681a      	ldr	r2, [r3, #0]
 80152a4:	4b2d      	ldr	r3, [pc, #180]	; (801535c <udp_input+0x218>)
 80152a6:	695b      	ldr	r3, [r3, #20]
 80152a8:	429a      	cmp	r2, r3
 80152aa:	bf0c      	ite	eq
 80152ac:	2301      	moveq	r3, #1
 80152ae:	2300      	movne	r3, #0
 80152b0:	b2db      	uxtb	r3, r3
 80152b2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80152b4:	7efb      	ldrb	r3, [r7, #27]
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d041      	beq.n	801533e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80152ba:	2108      	movs	r1, #8
 80152bc:	6878      	ldr	r0, [r7, #4]
 80152be:	f7f9 f9fb 	bl	800e6b8 <pbuf_remove_header>
 80152c2:	4603      	mov	r3, r0
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d00a      	beq.n	80152de <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80152c8:	4b20      	ldr	r3, [pc, #128]	; (801534c <udp_input+0x208>)
 80152ca:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80152ce:	4925      	ldr	r1, [pc, #148]	; (8015364 <udp_input+0x220>)
 80152d0:	4820      	ldr	r0, [pc, #128]	; (8015354 <udp_input+0x210>)
 80152d2:	f003 f9bd 	bl	8018650 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80152d6:	6878      	ldr	r0, [r7, #4]
 80152d8:	f7f9 faa6 	bl	800e828 <pbuf_free>
      goto end;
 80152dc:	e032      	b.n	8015344 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80152de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	d012      	beq.n	801530a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80152e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152e6:	699b      	ldr	r3, [r3, #24]
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d00a      	beq.n	8015302 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80152ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152ee:	699c      	ldr	r4, [r3, #24]
 80152f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152f2:	69d8      	ldr	r0, [r3, #28]
 80152f4:	8a3b      	ldrh	r3, [r7, #16]
 80152f6:	9300      	str	r3, [sp, #0]
 80152f8:	4b1b      	ldr	r3, [pc, #108]	; (8015368 <udp_input+0x224>)
 80152fa:	687a      	ldr	r2, [r7, #4]
 80152fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80152fe:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8015300:	e021      	b.n	8015346 <udp_input+0x202>
        pbuf_free(p);
 8015302:	6878      	ldr	r0, [r7, #4]
 8015304:	f7f9 fa90 	bl	800e828 <pbuf_free>
        goto end;
 8015308:	e01c      	b.n	8015344 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801530a:	7cfb      	ldrb	r3, [r7, #19]
 801530c:	2b00      	cmp	r3, #0
 801530e:	d112      	bne.n	8015336 <udp_input+0x1f2>
 8015310:	4b12      	ldr	r3, [pc, #72]	; (801535c <udp_input+0x218>)
 8015312:	695b      	ldr	r3, [r3, #20]
 8015314:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015318:	2be0      	cmp	r3, #224	; 0xe0
 801531a:	d00c      	beq.n	8015336 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801531c:	4b0f      	ldr	r3, [pc, #60]	; (801535c <udp_input+0x218>)
 801531e:	899b      	ldrh	r3, [r3, #12]
 8015320:	3308      	adds	r3, #8
 8015322:	b29b      	uxth	r3, r3
 8015324:	b21b      	sxth	r3, r3
 8015326:	4619      	mov	r1, r3
 8015328:	6878      	ldr	r0, [r7, #4]
 801532a:	f7f9 fa38 	bl	800e79e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801532e:	2103      	movs	r1, #3
 8015330:	6878      	ldr	r0, [r7, #4]
 8015332:	f001 fb93 	bl	8016a5c <icmp_dest_unreach>
      pbuf_free(p);
 8015336:	6878      	ldr	r0, [r7, #4]
 8015338:	f7f9 fa76 	bl	800e828 <pbuf_free>
  return;
 801533c:	e003      	b.n	8015346 <udp_input+0x202>
    pbuf_free(p);
 801533e:	6878      	ldr	r0, [r7, #4]
 8015340:	f7f9 fa72 	bl	800e828 <pbuf_free>
  return;
 8015344:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8015346:	372c      	adds	r7, #44	; 0x2c
 8015348:	46bd      	mov	sp, r7
 801534a:	bd90      	pop	{r4, r7, pc}
 801534c:	0801cb24 	.word	0x0801cb24
 8015350:	0801cbc8 	.word	0x0801cbc8
 8015354:	0801cb78 	.word	0x0801cb78
 8015358:	0801cbe0 	.word	0x0801cbe0
 801535c:	20007938 	.word	0x20007938
 8015360:	2000d2a8 	.word	0x2000d2a8
 8015364:	0801cbfc 	.word	0x0801cbfc
 8015368:	20007948 	.word	0x20007948

0801536c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801536c:	b580      	push	{r7, lr}
 801536e:	b082      	sub	sp, #8
 8015370:	af00      	add	r7, sp, #0
 8015372:	6078      	str	r0, [r7, #4]
 8015374:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	2b00      	cmp	r3, #0
 801537a:	d109      	bne.n	8015390 <udp_send+0x24>
 801537c:	4b11      	ldr	r3, [pc, #68]	; (80153c4 <udp_send+0x58>)
 801537e:	f240 12d5 	movw	r2, #469	; 0x1d5
 8015382:	4911      	ldr	r1, [pc, #68]	; (80153c8 <udp_send+0x5c>)
 8015384:	4811      	ldr	r0, [pc, #68]	; (80153cc <udp_send+0x60>)
 8015386:	f003 f963 	bl	8018650 <iprintf>
 801538a:	f06f 030f 	mvn.w	r3, #15
 801538e:	e015      	b.n	80153bc <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8015390:	683b      	ldr	r3, [r7, #0]
 8015392:	2b00      	cmp	r3, #0
 8015394:	d109      	bne.n	80153aa <udp_send+0x3e>
 8015396:	4b0b      	ldr	r3, [pc, #44]	; (80153c4 <udp_send+0x58>)
 8015398:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801539c:	490c      	ldr	r1, [pc, #48]	; (80153d0 <udp_send+0x64>)
 801539e:	480b      	ldr	r0, [pc, #44]	; (80153cc <udp_send+0x60>)
 80153a0:	f003 f956 	bl	8018650 <iprintf>
 80153a4:	f06f 030f 	mvn.w	r3, #15
 80153a8:	e008      	b.n	80153bc <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	1d1a      	adds	r2, r3, #4
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	8a9b      	ldrh	r3, [r3, #20]
 80153b2:	6839      	ldr	r1, [r7, #0]
 80153b4:	6878      	ldr	r0, [r7, #4]
 80153b6:	f000 f80d 	bl	80153d4 <udp_sendto>
 80153ba:	4603      	mov	r3, r0
}
 80153bc:	4618      	mov	r0, r3
 80153be:	3708      	adds	r7, #8
 80153c0:	46bd      	mov	sp, r7
 80153c2:	bd80      	pop	{r7, pc}
 80153c4:	0801cb24 	.word	0x0801cb24
 80153c8:	0801cc18 	.word	0x0801cc18
 80153cc:	0801cb78 	.word	0x0801cb78
 80153d0:	0801cc30 	.word	0x0801cc30

080153d4 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80153d4:	b580      	push	{r7, lr}
 80153d6:	b088      	sub	sp, #32
 80153d8:	af02      	add	r7, sp, #8
 80153da:	60f8      	str	r0, [r7, #12]
 80153dc:	60b9      	str	r1, [r7, #8]
 80153de:	607a      	str	r2, [r7, #4]
 80153e0:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80153e2:	68fb      	ldr	r3, [r7, #12]
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d109      	bne.n	80153fc <udp_sendto+0x28>
 80153e8:	4b23      	ldr	r3, [pc, #140]	; (8015478 <udp_sendto+0xa4>)
 80153ea:	f44f 7206 	mov.w	r2, #536	; 0x218
 80153ee:	4923      	ldr	r1, [pc, #140]	; (801547c <udp_sendto+0xa8>)
 80153f0:	4823      	ldr	r0, [pc, #140]	; (8015480 <udp_sendto+0xac>)
 80153f2:	f003 f92d 	bl	8018650 <iprintf>
 80153f6:	f06f 030f 	mvn.w	r3, #15
 80153fa:	e038      	b.n	801546e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80153fc:	68bb      	ldr	r3, [r7, #8]
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d109      	bne.n	8015416 <udp_sendto+0x42>
 8015402:	4b1d      	ldr	r3, [pc, #116]	; (8015478 <udp_sendto+0xa4>)
 8015404:	f240 2219 	movw	r2, #537	; 0x219
 8015408:	491e      	ldr	r1, [pc, #120]	; (8015484 <udp_sendto+0xb0>)
 801540a:	481d      	ldr	r0, [pc, #116]	; (8015480 <udp_sendto+0xac>)
 801540c:	f003 f920 	bl	8018650 <iprintf>
 8015410:	f06f 030f 	mvn.w	r3, #15
 8015414:	e02b      	b.n	801546e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	2b00      	cmp	r3, #0
 801541a:	d109      	bne.n	8015430 <udp_sendto+0x5c>
 801541c:	4b16      	ldr	r3, [pc, #88]	; (8015478 <udp_sendto+0xa4>)
 801541e:	f240 221a 	movw	r2, #538	; 0x21a
 8015422:	4919      	ldr	r1, [pc, #100]	; (8015488 <udp_sendto+0xb4>)
 8015424:	4816      	ldr	r0, [pc, #88]	; (8015480 <udp_sendto+0xac>)
 8015426:	f003 f913 	bl	8018650 <iprintf>
 801542a:	f06f 030f 	mvn.w	r3, #15
 801542e:	e01e      	b.n	801546e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	7a1b      	ldrb	r3, [r3, #8]
 8015434:	2b00      	cmp	r3, #0
 8015436:	d006      	beq.n	8015446 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8015438:	68fb      	ldr	r3, [r7, #12]
 801543a:	7a1b      	ldrb	r3, [r3, #8]
 801543c:	4618      	mov	r0, r3
 801543e:	f7f8 fe33 	bl	800e0a8 <netif_get_by_index>
 8015442:	6178      	str	r0, [r7, #20]
 8015444:	e003      	b.n	801544e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8015446:	6878      	ldr	r0, [r7, #4]
 8015448:	f001 fb92 	bl	8016b70 <ip4_route>
 801544c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801544e:	697b      	ldr	r3, [r7, #20]
 8015450:	2b00      	cmp	r3, #0
 8015452:	d102      	bne.n	801545a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8015454:	f06f 0303 	mvn.w	r3, #3
 8015458:	e009      	b.n	801546e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801545a:	887a      	ldrh	r2, [r7, #2]
 801545c:	697b      	ldr	r3, [r7, #20]
 801545e:	9300      	str	r3, [sp, #0]
 8015460:	4613      	mov	r3, r2
 8015462:	687a      	ldr	r2, [r7, #4]
 8015464:	68b9      	ldr	r1, [r7, #8]
 8015466:	68f8      	ldr	r0, [r7, #12]
 8015468:	f000 f810 	bl	801548c <udp_sendto_if>
 801546c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801546e:	4618      	mov	r0, r3
 8015470:	3718      	adds	r7, #24
 8015472:	46bd      	mov	sp, r7
 8015474:	bd80      	pop	{r7, pc}
 8015476:	bf00      	nop
 8015478:	0801cb24 	.word	0x0801cb24
 801547c:	0801cc48 	.word	0x0801cc48
 8015480:	0801cb78 	.word	0x0801cb78
 8015484:	0801cc60 	.word	0x0801cc60
 8015488:	0801cc7c 	.word	0x0801cc7c

0801548c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801548c:	b580      	push	{r7, lr}
 801548e:	b088      	sub	sp, #32
 8015490:	af02      	add	r7, sp, #8
 8015492:	60f8      	str	r0, [r7, #12]
 8015494:	60b9      	str	r1, [r7, #8]
 8015496:	607a      	str	r2, [r7, #4]
 8015498:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801549a:	68fb      	ldr	r3, [r7, #12]
 801549c:	2b00      	cmp	r3, #0
 801549e:	d109      	bne.n	80154b4 <udp_sendto_if+0x28>
 80154a0:	4b2e      	ldr	r3, [pc, #184]	; (801555c <udp_sendto_if+0xd0>)
 80154a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80154a6:	492e      	ldr	r1, [pc, #184]	; (8015560 <udp_sendto_if+0xd4>)
 80154a8:	482e      	ldr	r0, [pc, #184]	; (8015564 <udp_sendto_if+0xd8>)
 80154aa:	f003 f8d1 	bl	8018650 <iprintf>
 80154ae:	f06f 030f 	mvn.w	r3, #15
 80154b2:	e04f      	b.n	8015554 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80154b4:	68bb      	ldr	r3, [r7, #8]
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d109      	bne.n	80154ce <udp_sendto_if+0x42>
 80154ba:	4b28      	ldr	r3, [pc, #160]	; (801555c <udp_sendto_if+0xd0>)
 80154bc:	f240 2281 	movw	r2, #641	; 0x281
 80154c0:	4929      	ldr	r1, [pc, #164]	; (8015568 <udp_sendto_if+0xdc>)
 80154c2:	4828      	ldr	r0, [pc, #160]	; (8015564 <udp_sendto_if+0xd8>)
 80154c4:	f003 f8c4 	bl	8018650 <iprintf>
 80154c8:	f06f 030f 	mvn.w	r3, #15
 80154cc:	e042      	b.n	8015554 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d109      	bne.n	80154e8 <udp_sendto_if+0x5c>
 80154d4:	4b21      	ldr	r3, [pc, #132]	; (801555c <udp_sendto_if+0xd0>)
 80154d6:	f240 2282 	movw	r2, #642	; 0x282
 80154da:	4924      	ldr	r1, [pc, #144]	; (801556c <udp_sendto_if+0xe0>)
 80154dc:	4821      	ldr	r0, [pc, #132]	; (8015564 <udp_sendto_if+0xd8>)
 80154de:	f003 f8b7 	bl	8018650 <iprintf>
 80154e2:	f06f 030f 	mvn.w	r3, #15
 80154e6:	e035      	b.n	8015554 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80154e8:	6a3b      	ldr	r3, [r7, #32]
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d109      	bne.n	8015502 <udp_sendto_if+0x76>
 80154ee:	4b1b      	ldr	r3, [pc, #108]	; (801555c <udp_sendto_if+0xd0>)
 80154f0:	f240 2283 	movw	r2, #643	; 0x283
 80154f4:	491e      	ldr	r1, [pc, #120]	; (8015570 <udp_sendto_if+0xe4>)
 80154f6:	481b      	ldr	r0, [pc, #108]	; (8015564 <udp_sendto_if+0xd8>)
 80154f8:	f003 f8aa 	bl	8018650 <iprintf>
 80154fc:	f06f 030f 	mvn.w	r3, #15
 8015500:	e028      	b.n	8015554 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015502:	68fb      	ldr	r3, [r7, #12]
 8015504:	2b00      	cmp	r3, #0
 8015506:	d009      	beq.n	801551c <udp_sendto_if+0x90>
 8015508:	68fb      	ldr	r3, [r7, #12]
 801550a:	681b      	ldr	r3, [r3, #0]
 801550c:	2b00      	cmp	r3, #0
 801550e:	d005      	beq.n	801551c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8015510:	68fb      	ldr	r3, [r7, #12]
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015518:	2be0      	cmp	r3, #224	; 0xe0
 801551a:	d103      	bne.n	8015524 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801551c:	6a3b      	ldr	r3, [r7, #32]
 801551e:	3304      	adds	r3, #4
 8015520:	617b      	str	r3, [r7, #20]
 8015522:	e00b      	b.n	801553c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8015524:	68fb      	ldr	r3, [r7, #12]
 8015526:	681a      	ldr	r2, [r3, #0]
 8015528:	6a3b      	ldr	r3, [r7, #32]
 801552a:	3304      	adds	r3, #4
 801552c:	681b      	ldr	r3, [r3, #0]
 801552e:	429a      	cmp	r2, r3
 8015530:	d002      	beq.n	8015538 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8015532:	f06f 0303 	mvn.w	r3, #3
 8015536:	e00d      	b.n	8015554 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8015538:	68fb      	ldr	r3, [r7, #12]
 801553a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801553c:	887a      	ldrh	r2, [r7, #2]
 801553e:	697b      	ldr	r3, [r7, #20]
 8015540:	9301      	str	r3, [sp, #4]
 8015542:	6a3b      	ldr	r3, [r7, #32]
 8015544:	9300      	str	r3, [sp, #0]
 8015546:	4613      	mov	r3, r2
 8015548:	687a      	ldr	r2, [r7, #4]
 801554a:	68b9      	ldr	r1, [r7, #8]
 801554c:	68f8      	ldr	r0, [r7, #12]
 801554e:	f000 f811 	bl	8015574 <udp_sendto_if_src>
 8015552:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8015554:	4618      	mov	r0, r3
 8015556:	3718      	adds	r7, #24
 8015558:	46bd      	mov	sp, r7
 801555a:	bd80      	pop	{r7, pc}
 801555c:	0801cb24 	.word	0x0801cb24
 8015560:	0801cc98 	.word	0x0801cc98
 8015564:	0801cb78 	.word	0x0801cb78
 8015568:	0801ccb4 	.word	0x0801ccb4
 801556c:	0801ccd0 	.word	0x0801ccd0
 8015570:	0801ccf0 	.word	0x0801ccf0

08015574 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8015574:	b580      	push	{r7, lr}
 8015576:	b08c      	sub	sp, #48	; 0x30
 8015578:	af04      	add	r7, sp, #16
 801557a:	60f8      	str	r0, [r7, #12]
 801557c:	60b9      	str	r1, [r7, #8]
 801557e:	607a      	str	r2, [r7, #4]
 8015580:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	2b00      	cmp	r3, #0
 8015586:	d109      	bne.n	801559c <udp_sendto_if_src+0x28>
 8015588:	4b65      	ldr	r3, [pc, #404]	; (8015720 <udp_sendto_if_src+0x1ac>)
 801558a:	f240 22d1 	movw	r2, #721	; 0x2d1
 801558e:	4965      	ldr	r1, [pc, #404]	; (8015724 <udp_sendto_if_src+0x1b0>)
 8015590:	4865      	ldr	r0, [pc, #404]	; (8015728 <udp_sendto_if_src+0x1b4>)
 8015592:	f003 f85d 	bl	8018650 <iprintf>
 8015596:	f06f 030f 	mvn.w	r3, #15
 801559a:	e0bc      	b.n	8015716 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801559c:	68bb      	ldr	r3, [r7, #8]
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d109      	bne.n	80155b6 <udp_sendto_if_src+0x42>
 80155a2:	4b5f      	ldr	r3, [pc, #380]	; (8015720 <udp_sendto_if_src+0x1ac>)
 80155a4:	f240 22d2 	movw	r2, #722	; 0x2d2
 80155a8:	4960      	ldr	r1, [pc, #384]	; (801572c <udp_sendto_if_src+0x1b8>)
 80155aa:	485f      	ldr	r0, [pc, #380]	; (8015728 <udp_sendto_if_src+0x1b4>)
 80155ac:	f003 f850 	bl	8018650 <iprintf>
 80155b0:	f06f 030f 	mvn.w	r3, #15
 80155b4:	e0af      	b.n	8015716 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d109      	bne.n	80155d0 <udp_sendto_if_src+0x5c>
 80155bc:	4b58      	ldr	r3, [pc, #352]	; (8015720 <udp_sendto_if_src+0x1ac>)
 80155be:	f240 22d3 	movw	r2, #723	; 0x2d3
 80155c2:	495b      	ldr	r1, [pc, #364]	; (8015730 <udp_sendto_if_src+0x1bc>)
 80155c4:	4858      	ldr	r0, [pc, #352]	; (8015728 <udp_sendto_if_src+0x1b4>)
 80155c6:	f003 f843 	bl	8018650 <iprintf>
 80155ca:	f06f 030f 	mvn.w	r3, #15
 80155ce:	e0a2      	b.n	8015716 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80155d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d109      	bne.n	80155ea <udp_sendto_if_src+0x76>
 80155d6:	4b52      	ldr	r3, [pc, #328]	; (8015720 <udp_sendto_if_src+0x1ac>)
 80155d8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80155dc:	4955      	ldr	r1, [pc, #340]	; (8015734 <udp_sendto_if_src+0x1c0>)
 80155de:	4852      	ldr	r0, [pc, #328]	; (8015728 <udp_sendto_if_src+0x1b4>)
 80155e0:	f003 f836 	bl	8018650 <iprintf>
 80155e4:	f06f 030f 	mvn.w	r3, #15
 80155e8:	e095      	b.n	8015716 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80155ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d109      	bne.n	8015604 <udp_sendto_if_src+0x90>
 80155f0:	4b4b      	ldr	r3, [pc, #300]	; (8015720 <udp_sendto_if_src+0x1ac>)
 80155f2:	f240 22d5 	movw	r2, #725	; 0x2d5
 80155f6:	4950      	ldr	r1, [pc, #320]	; (8015738 <udp_sendto_if_src+0x1c4>)
 80155f8:	484b      	ldr	r0, [pc, #300]	; (8015728 <udp_sendto_if_src+0x1b4>)
 80155fa:	f003 f829 	bl	8018650 <iprintf>
 80155fe:	f06f 030f 	mvn.w	r3, #15
 8015602:	e088      	b.n	8015716 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8015604:	68fb      	ldr	r3, [r7, #12]
 8015606:	8a5b      	ldrh	r3, [r3, #18]
 8015608:	2b00      	cmp	r3, #0
 801560a:	d10f      	bne.n	801562c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801560c:	68f9      	ldr	r1, [r7, #12]
 801560e:	68fb      	ldr	r3, [r7, #12]
 8015610:	8a5b      	ldrh	r3, [r3, #18]
 8015612:	461a      	mov	r2, r3
 8015614:	68f8      	ldr	r0, [r7, #12]
 8015616:	f000 f893 	bl	8015740 <udp_bind>
 801561a:	4603      	mov	r3, r0
 801561c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801561e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015622:	2b00      	cmp	r3, #0
 8015624:	d002      	beq.n	801562c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8015626:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801562a:	e074      	b.n	8015716 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801562c:	68bb      	ldr	r3, [r7, #8]
 801562e:	891b      	ldrh	r3, [r3, #8]
 8015630:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8015634:	4293      	cmp	r3, r2
 8015636:	d902      	bls.n	801563e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8015638:	f04f 33ff 	mov.w	r3, #4294967295
 801563c:	e06b      	b.n	8015716 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801563e:	2108      	movs	r1, #8
 8015640:	68b8      	ldr	r0, [r7, #8]
 8015642:	f7f9 f829 	bl	800e698 <pbuf_add_header>
 8015646:	4603      	mov	r3, r0
 8015648:	2b00      	cmp	r3, #0
 801564a:	d015      	beq.n	8015678 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801564c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015650:	2108      	movs	r1, #8
 8015652:	2022      	movs	r0, #34	; 0x22
 8015654:	f7f8 fdd2 	bl	800e1fc <pbuf_alloc>
 8015658:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801565a:	69fb      	ldr	r3, [r7, #28]
 801565c:	2b00      	cmp	r3, #0
 801565e:	d102      	bne.n	8015666 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8015660:	f04f 33ff 	mov.w	r3, #4294967295
 8015664:	e057      	b.n	8015716 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8015666:	68bb      	ldr	r3, [r7, #8]
 8015668:	891b      	ldrh	r3, [r3, #8]
 801566a:	2b00      	cmp	r3, #0
 801566c:	d006      	beq.n	801567c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801566e:	68b9      	ldr	r1, [r7, #8]
 8015670:	69f8      	ldr	r0, [r7, #28]
 8015672:	f7f9 f9fd 	bl	800ea70 <pbuf_chain>
 8015676:	e001      	b.n	801567c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8015678:	68bb      	ldr	r3, [r7, #8]
 801567a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801567c:	69fb      	ldr	r3, [r7, #28]
 801567e:	895b      	ldrh	r3, [r3, #10]
 8015680:	2b07      	cmp	r3, #7
 8015682:	d806      	bhi.n	8015692 <udp_sendto_if_src+0x11e>
 8015684:	4b26      	ldr	r3, [pc, #152]	; (8015720 <udp_sendto_if_src+0x1ac>)
 8015686:	f240 320d 	movw	r2, #781	; 0x30d
 801568a:	492c      	ldr	r1, [pc, #176]	; (801573c <udp_sendto_if_src+0x1c8>)
 801568c:	4826      	ldr	r0, [pc, #152]	; (8015728 <udp_sendto_if_src+0x1b4>)
 801568e:	f002 ffdf 	bl	8018650 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8015692:	69fb      	ldr	r3, [r7, #28]
 8015694:	685b      	ldr	r3, [r3, #4]
 8015696:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8015698:	68fb      	ldr	r3, [r7, #12]
 801569a:	8a5b      	ldrh	r3, [r3, #18]
 801569c:	4618      	mov	r0, r3
 801569e:	f7f7 fce5 	bl	800d06c <lwip_htons>
 80156a2:	4603      	mov	r3, r0
 80156a4:	461a      	mov	r2, r3
 80156a6:	697b      	ldr	r3, [r7, #20]
 80156a8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80156aa:	887b      	ldrh	r3, [r7, #2]
 80156ac:	4618      	mov	r0, r3
 80156ae:	f7f7 fcdd 	bl	800d06c <lwip_htons>
 80156b2:	4603      	mov	r3, r0
 80156b4:	461a      	mov	r2, r3
 80156b6:	697b      	ldr	r3, [r7, #20]
 80156b8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80156ba:	697b      	ldr	r3, [r7, #20]
 80156bc:	2200      	movs	r2, #0
 80156be:	719a      	strb	r2, [r3, #6]
 80156c0:	2200      	movs	r2, #0
 80156c2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80156c4:	69fb      	ldr	r3, [r7, #28]
 80156c6:	891b      	ldrh	r3, [r3, #8]
 80156c8:	4618      	mov	r0, r3
 80156ca:	f7f7 fccf 	bl	800d06c <lwip_htons>
 80156ce:	4603      	mov	r3, r0
 80156d0:	461a      	mov	r2, r3
 80156d2:	697b      	ldr	r3, [r7, #20]
 80156d4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80156d6:	2311      	movs	r3, #17
 80156d8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80156da:	68fb      	ldr	r3, [r7, #12]
 80156dc:	7adb      	ldrb	r3, [r3, #11]
 80156de:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80156e0:	68fb      	ldr	r3, [r7, #12]
 80156e2:	7a9b      	ldrb	r3, [r3, #10]
 80156e4:	7cb9      	ldrb	r1, [r7, #18]
 80156e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80156e8:	9202      	str	r2, [sp, #8]
 80156ea:	7cfa      	ldrb	r2, [r7, #19]
 80156ec:	9201      	str	r2, [sp, #4]
 80156ee:	9300      	str	r3, [sp, #0]
 80156f0:	460b      	mov	r3, r1
 80156f2:	687a      	ldr	r2, [r7, #4]
 80156f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80156f6:	69f8      	ldr	r0, [r7, #28]
 80156f8:	f001 fc22 	bl	8016f40 <ip4_output_if_src>
 80156fc:	4603      	mov	r3, r0
 80156fe:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8015700:	69fa      	ldr	r2, [r7, #28]
 8015702:	68bb      	ldr	r3, [r7, #8]
 8015704:	429a      	cmp	r2, r3
 8015706:	d004      	beq.n	8015712 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8015708:	69f8      	ldr	r0, [r7, #28]
 801570a:	f7f9 f88d 	bl	800e828 <pbuf_free>
    q = NULL;
 801570e:	2300      	movs	r3, #0
 8015710:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8015712:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8015716:	4618      	mov	r0, r3
 8015718:	3720      	adds	r7, #32
 801571a:	46bd      	mov	sp, r7
 801571c:	bd80      	pop	{r7, pc}
 801571e:	bf00      	nop
 8015720:	0801cb24 	.word	0x0801cb24
 8015724:	0801cd10 	.word	0x0801cd10
 8015728:	0801cb78 	.word	0x0801cb78
 801572c:	0801cd30 	.word	0x0801cd30
 8015730:	0801cd50 	.word	0x0801cd50
 8015734:	0801cd74 	.word	0x0801cd74
 8015738:	0801cd98 	.word	0x0801cd98
 801573c:	0801cdbc 	.word	0x0801cdbc

08015740 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015740:	b580      	push	{r7, lr}
 8015742:	b086      	sub	sp, #24
 8015744:	af00      	add	r7, sp, #0
 8015746:	60f8      	str	r0, [r7, #12]
 8015748:	60b9      	str	r1, [r7, #8]
 801574a:	4613      	mov	r3, r2
 801574c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801574e:	68bb      	ldr	r3, [r7, #8]
 8015750:	2b00      	cmp	r3, #0
 8015752:	d101      	bne.n	8015758 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8015754:	4b39      	ldr	r3, [pc, #228]	; (801583c <udp_bind+0xfc>)
 8015756:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	2b00      	cmp	r3, #0
 801575c:	d109      	bne.n	8015772 <udp_bind+0x32>
 801575e:	4b38      	ldr	r3, [pc, #224]	; (8015840 <udp_bind+0x100>)
 8015760:	f240 32b7 	movw	r2, #951	; 0x3b7
 8015764:	4937      	ldr	r1, [pc, #220]	; (8015844 <udp_bind+0x104>)
 8015766:	4838      	ldr	r0, [pc, #224]	; (8015848 <udp_bind+0x108>)
 8015768:	f002 ff72 	bl	8018650 <iprintf>
 801576c:	f06f 030f 	mvn.w	r3, #15
 8015770:	e060      	b.n	8015834 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8015772:	2300      	movs	r3, #0
 8015774:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015776:	4b35      	ldr	r3, [pc, #212]	; (801584c <udp_bind+0x10c>)
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	617b      	str	r3, [r7, #20]
 801577c:	e009      	b.n	8015792 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801577e:	68fa      	ldr	r2, [r7, #12]
 8015780:	697b      	ldr	r3, [r7, #20]
 8015782:	429a      	cmp	r2, r3
 8015784:	d102      	bne.n	801578c <udp_bind+0x4c>
      rebind = 1;
 8015786:	2301      	movs	r3, #1
 8015788:	74fb      	strb	r3, [r7, #19]
      break;
 801578a:	e005      	b.n	8015798 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801578c:	697b      	ldr	r3, [r7, #20]
 801578e:	68db      	ldr	r3, [r3, #12]
 8015790:	617b      	str	r3, [r7, #20]
 8015792:	697b      	ldr	r3, [r7, #20]
 8015794:	2b00      	cmp	r3, #0
 8015796:	d1f2      	bne.n	801577e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8015798:	88fb      	ldrh	r3, [r7, #6]
 801579a:	2b00      	cmp	r3, #0
 801579c:	d109      	bne.n	80157b2 <udp_bind+0x72>
    port = udp_new_port();
 801579e:	f7ff fc35 	bl	801500c <udp_new_port>
 80157a2:	4603      	mov	r3, r0
 80157a4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80157a6:	88fb      	ldrh	r3, [r7, #6]
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d12c      	bne.n	8015806 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80157ac:	f06f 0307 	mvn.w	r3, #7
 80157b0:	e040      	b.n	8015834 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80157b2:	4b26      	ldr	r3, [pc, #152]	; (801584c <udp_bind+0x10c>)
 80157b4:	681b      	ldr	r3, [r3, #0]
 80157b6:	617b      	str	r3, [r7, #20]
 80157b8:	e022      	b.n	8015800 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80157ba:	68fa      	ldr	r2, [r7, #12]
 80157bc:	697b      	ldr	r3, [r7, #20]
 80157be:	429a      	cmp	r2, r3
 80157c0:	d01b      	beq.n	80157fa <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80157c2:	697b      	ldr	r3, [r7, #20]
 80157c4:	8a5b      	ldrh	r3, [r3, #18]
 80157c6:	88fa      	ldrh	r2, [r7, #6]
 80157c8:	429a      	cmp	r2, r3
 80157ca:	d116      	bne.n	80157fa <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80157cc:	697b      	ldr	r3, [r7, #20]
 80157ce:	681a      	ldr	r2, [r3, #0]
 80157d0:	68bb      	ldr	r3, [r7, #8]
 80157d2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80157d4:	429a      	cmp	r2, r3
 80157d6:	d00d      	beq.n	80157f4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80157d8:	68bb      	ldr	r3, [r7, #8]
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d00a      	beq.n	80157f4 <udp_bind+0xb4>
 80157de:	68bb      	ldr	r3, [r7, #8]
 80157e0:	681b      	ldr	r3, [r3, #0]
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d006      	beq.n	80157f4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80157e6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d003      	beq.n	80157f4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80157ec:	697b      	ldr	r3, [r7, #20]
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d102      	bne.n	80157fa <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80157f4:	f06f 0307 	mvn.w	r3, #7
 80157f8:	e01c      	b.n	8015834 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80157fa:	697b      	ldr	r3, [r7, #20]
 80157fc:	68db      	ldr	r3, [r3, #12]
 80157fe:	617b      	str	r3, [r7, #20]
 8015800:	697b      	ldr	r3, [r7, #20]
 8015802:	2b00      	cmp	r3, #0
 8015804:	d1d9      	bne.n	80157ba <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8015806:	68bb      	ldr	r3, [r7, #8]
 8015808:	2b00      	cmp	r3, #0
 801580a:	d002      	beq.n	8015812 <udp_bind+0xd2>
 801580c:	68bb      	ldr	r3, [r7, #8]
 801580e:	681b      	ldr	r3, [r3, #0]
 8015810:	e000      	b.n	8015814 <udp_bind+0xd4>
 8015812:	2300      	movs	r3, #0
 8015814:	68fa      	ldr	r2, [r7, #12]
 8015816:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8015818:	68fb      	ldr	r3, [r7, #12]
 801581a:	88fa      	ldrh	r2, [r7, #6]
 801581c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801581e:	7cfb      	ldrb	r3, [r7, #19]
 8015820:	2b00      	cmp	r3, #0
 8015822:	d106      	bne.n	8015832 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8015824:	4b09      	ldr	r3, [pc, #36]	; (801584c <udp_bind+0x10c>)
 8015826:	681a      	ldr	r2, [r3, #0]
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801582c:	4a07      	ldr	r2, [pc, #28]	; (801584c <udp_bind+0x10c>)
 801582e:	68fb      	ldr	r3, [r7, #12]
 8015830:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8015832:	2300      	movs	r3, #0
}
 8015834:	4618      	mov	r0, r3
 8015836:	3718      	adds	r7, #24
 8015838:	46bd      	mov	sp, r7
 801583a:	bd80      	pop	{r7, pc}
 801583c:	0801d72c 	.word	0x0801d72c
 8015840:	0801cb24 	.word	0x0801cb24
 8015844:	0801cdec 	.word	0x0801cdec
 8015848:	0801cb78 	.word	0x0801cb78
 801584c:	2000d2a8 	.word	0x2000d2a8

08015850 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8015850:	b580      	push	{r7, lr}
 8015852:	b084      	sub	sp, #16
 8015854:	af00      	add	r7, sp, #0
 8015856:	60f8      	str	r0, [r7, #12]
 8015858:	60b9      	str	r1, [r7, #8]
 801585a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801585c:	68fb      	ldr	r3, [r7, #12]
 801585e:	2b00      	cmp	r3, #0
 8015860:	d107      	bne.n	8015872 <udp_recv+0x22>
 8015862:	4b08      	ldr	r3, [pc, #32]	; (8015884 <udp_recv+0x34>)
 8015864:	f240 428a 	movw	r2, #1162	; 0x48a
 8015868:	4907      	ldr	r1, [pc, #28]	; (8015888 <udp_recv+0x38>)
 801586a:	4808      	ldr	r0, [pc, #32]	; (801588c <udp_recv+0x3c>)
 801586c:	f002 fef0 	bl	8018650 <iprintf>
 8015870:	e005      	b.n	801587e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8015872:	68fb      	ldr	r3, [r7, #12]
 8015874:	68ba      	ldr	r2, [r7, #8]
 8015876:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8015878:	68fb      	ldr	r3, [r7, #12]
 801587a:	687a      	ldr	r2, [r7, #4]
 801587c:	61da      	str	r2, [r3, #28]
}
 801587e:	3710      	adds	r7, #16
 8015880:	46bd      	mov	sp, r7
 8015882:	bd80      	pop	{r7, pc}
 8015884:	0801cb24 	.word	0x0801cb24
 8015888:	0801ce58 	.word	0x0801ce58
 801588c:	0801cb78 	.word	0x0801cb78

08015890 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8015890:	b580      	push	{r7, lr}
 8015892:	b084      	sub	sp, #16
 8015894:	af00      	add	r7, sp, #0
 8015896:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	2b00      	cmp	r3, #0
 801589c:	d107      	bne.n	80158ae <udp_remove+0x1e>
 801589e:	4b19      	ldr	r3, [pc, #100]	; (8015904 <udp_remove+0x74>)
 80158a0:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80158a4:	4918      	ldr	r1, [pc, #96]	; (8015908 <udp_remove+0x78>)
 80158a6:	4819      	ldr	r0, [pc, #100]	; (801590c <udp_remove+0x7c>)
 80158a8:	f002 fed2 	bl	8018650 <iprintf>
 80158ac:	e026      	b.n	80158fc <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80158ae:	4b18      	ldr	r3, [pc, #96]	; (8015910 <udp_remove+0x80>)
 80158b0:	681b      	ldr	r3, [r3, #0]
 80158b2:	687a      	ldr	r2, [r7, #4]
 80158b4:	429a      	cmp	r2, r3
 80158b6:	d105      	bne.n	80158c4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80158b8:	4b15      	ldr	r3, [pc, #84]	; (8015910 <udp_remove+0x80>)
 80158ba:	681b      	ldr	r3, [r3, #0]
 80158bc:	68db      	ldr	r3, [r3, #12]
 80158be:	4a14      	ldr	r2, [pc, #80]	; (8015910 <udp_remove+0x80>)
 80158c0:	6013      	str	r3, [r2, #0]
 80158c2:	e017      	b.n	80158f4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80158c4:	4b12      	ldr	r3, [pc, #72]	; (8015910 <udp_remove+0x80>)
 80158c6:	681b      	ldr	r3, [r3, #0]
 80158c8:	60fb      	str	r3, [r7, #12]
 80158ca:	e010      	b.n	80158ee <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80158cc:	68fb      	ldr	r3, [r7, #12]
 80158ce:	68db      	ldr	r3, [r3, #12]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d009      	beq.n	80158e8 <udp_remove+0x58>
 80158d4:	68fb      	ldr	r3, [r7, #12]
 80158d6:	68db      	ldr	r3, [r3, #12]
 80158d8:	687a      	ldr	r2, [r7, #4]
 80158da:	429a      	cmp	r2, r3
 80158dc:	d104      	bne.n	80158e8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	68da      	ldr	r2, [r3, #12]
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	60da      	str	r2, [r3, #12]
        break;
 80158e6:	e005      	b.n	80158f4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80158e8:	68fb      	ldr	r3, [r7, #12]
 80158ea:	68db      	ldr	r3, [r3, #12]
 80158ec:	60fb      	str	r3, [r7, #12]
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d1eb      	bne.n	80158cc <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80158f4:	6879      	ldr	r1, [r7, #4]
 80158f6:	2000      	movs	r0, #0
 80158f8:	f7f8 f8c0 	bl	800da7c <memp_free>
}
 80158fc:	3710      	adds	r7, #16
 80158fe:	46bd      	mov	sp, r7
 8015900:	bd80      	pop	{r7, pc}
 8015902:	bf00      	nop
 8015904:	0801cb24 	.word	0x0801cb24
 8015908:	0801ce70 	.word	0x0801ce70
 801590c:	0801cb78 	.word	0x0801cb78
 8015910:	2000d2a8 	.word	0x2000d2a8

08015914 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8015914:	b580      	push	{r7, lr}
 8015916:	b082      	sub	sp, #8
 8015918:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801591a:	2000      	movs	r0, #0
 801591c:	f7f8 f85c 	bl	800d9d8 <memp_malloc>
 8015920:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	2b00      	cmp	r3, #0
 8015926:	d007      	beq.n	8015938 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8015928:	2220      	movs	r2, #32
 801592a:	2100      	movs	r1, #0
 801592c:	6878      	ldr	r0, [r7, #4]
 801592e:	f002 fe87 	bl	8018640 <memset>
    pcb->ttl = UDP_TTL;
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	22ff      	movs	r2, #255	; 0xff
 8015936:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8015938:	687b      	ldr	r3, [r7, #4]
}
 801593a:	4618      	mov	r0, r3
 801593c:	3708      	adds	r7, #8
 801593e:	46bd      	mov	sp, r7
 8015940:	bd80      	pop	{r7, pc}

08015942 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8015942:	b580      	push	{r7, lr}
 8015944:	b084      	sub	sp, #16
 8015946:	af00      	add	r7, sp, #0
 8015948:	4603      	mov	r3, r0
 801594a:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801594c:	f7ff ffe2 	bl	8015914 <udp_new>
 8015950:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8015952:	68fb      	ldr	r3, [r7, #12]
}
 8015954:	4618      	mov	r0, r3
 8015956:	3710      	adds	r7, #16
 8015958:	46bd      	mov	sp, r7
 801595a:	bd80      	pop	{r7, pc}

0801595c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801595c:	b480      	push	{r7}
 801595e:	b085      	sub	sp, #20
 8015960:	af00      	add	r7, sp, #0
 8015962:	6078      	str	r0, [r7, #4]
 8015964:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	2b00      	cmp	r3, #0
 801596a:	d01e      	beq.n	80159aa <udp_netif_ip_addr_changed+0x4e>
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	681b      	ldr	r3, [r3, #0]
 8015970:	2b00      	cmp	r3, #0
 8015972:	d01a      	beq.n	80159aa <udp_netif_ip_addr_changed+0x4e>
 8015974:	683b      	ldr	r3, [r7, #0]
 8015976:	2b00      	cmp	r3, #0
 8015978:	d017      	beq.n	80159aa <udp_netif_ip_addr_changed+0x4e>
 801597a:	683b      	ldr	r3, [r7, #0]
 801597c:	681b      	ldr	r3, [r3, #0]
 801597e:	2b00      	cmp	r3, #0
 8015980:	d013      	beq.n	80159aa <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015982:	4b0d      	ldr	r3, [pc, #52]	; (80159b8 <udp_netif_ip_addr_changed+0x5c>)
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	60fb      	str	r3, [r7, #12]
 8015988:	e00c      	b.n	80159a4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801598a:	68fb      	ldr	r3, [r7, #12]
 801598c:	681a      	ldr	r2, [r3, #0]
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	681b      	ldr	r3, [r3, #0]
 8015992:	429a      	cmp	r2, r3
 8015994:	d103      	bne.n	801599e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8015996:	683b      	ldr	r3, [r7, #0]
 8015998:	681a      	ldr	r2, [r3, #0]
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801599e:	68fb      	ldr	r3, [r7, #12]
 80159a0:	68db      	ldr	r3, [r3, #12]
 80159a2:	60fb      	str	r3, [r7, #12]
 80159a4:	68fb      	ldr	r3, [r7, #12]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d1ef      	bne.n	801598a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80159aa:	bf00      	nop
 80159ac:	3714      	adds	r7, #20
 80159ae:	46bd      	mov	sp, r7
 80159b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159b4:	4770      	bx	lr
 80159b6:	bf00      	nop
 80159b8:	2000d2a8 	.word	0x2000d2a8

080159bc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80159bc:	b580      	push	{r7, lr}
 80159be:	b082      	sub	sp, #8
 80159c0:	af00      	add	r7, sp, #0
 80159c2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80159c4:	4915      	ldr	r1, [pc, #84]	; (8015a1c <etharp_free_entry+0x60>)
 80159c6:	687a      	ldr	r2, [r7, #4]
 80159c8:	4613      	mov	r3, r2
 80159ca:	005b      	lsls	r3, r3, #1
 80159cc:	4413      	add	r3, r2
 80159ce:	00db      	lsls	r3, r3, #3
 80159d0:	440b      	add	r3, r1
 80159d2:	681b      	ldr	r3, [r3, #0]
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d013      	beq.n	8015a00 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80159d8:	4910      	ldr	r1, [pc, #64]	; (8015a1c <etharp_free_entry+0x60>)
 80159da:	687a      	ldr	r2, [r7, #4]
 80159dc:	4613      	mov	r3, r2
 80159de:	005b      	lsls	r3, r3, #1
 80159e0:	4413      	add	r3, r2
 80159e2:	00db      	lsls	r3, r3, #3
 80159e4:	440b      	add	r3, r1
 80159e6:	681b      	ldr	r3, [r3, #0]
 80159e8:	4618      	mov	r0, r3
 80159ea:	f7f8 ff1d 	bl	800e828 <pbuf_free>
    arp_table[i].q = NULL;
 80159ee:	490b      	ldr	r1, [pc, #44]	; (8015a1c <etharp_free_entry+0x60>)
 80159f0:	687a      	ldr	r2, [r7, #4]
 80159f2:	4613      	mov	r3, r2
 80159f4:	005b      	lsls	r3, r3, #1
 80159f6:	4413      	add	r3, r2
 80159f8:	00db      	lsls	r3, r3, #3
 80159fa:	440b      	add	r3, r1
 80159fc:	2200      	movs	r2, #0
 80159fe:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8015a00:	4906      	ldr	r1, [pc, #24]	; (8015a1c <etharp_free_entry+0x60>)
 8015a02:	687a      	ldr	r2, [r7, #4]
 8015a04:	4613      	mov	r3, r2
 8015a06:	005b      	lsls	r3, r3, #1
 8015a08:	4413      	add	r3, r2
 8015a0a:	00db      	lsls	r3, r3, #3
 8015a0c:	440b      	add	r3, r1
 8015a0e:	3314      	adds	r3, #20
 8015a10:	2200      	movs	r2, #0
 8015a12:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8015a14:	bf00      	nop
 8015a16:	3708      	adds	r7, #8
 8015a18:	46bd      	mov	sp, r7
 8015a1a:	bd80      	pop	{r7, pc}
 8015a1c:	2000d2ac 	.word	0x2000d2ac

08015a20 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8015a20:	b580      	push	{r7, lr}
 8015a22:	b082      	sub	sp, #8
 8015a24:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015a26:	2300      	movs	r3, #0
 8015a28:	607b      	str	r3, [r7, #4]
 8015a2a:	e096      	b.n	8015b5a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8015a2c:	494f      	ldr	r1, [pc, #316]	; (8015b6c <etharp_tmr+0x14c>)
 8015a2e:	687a      	ldr	r2, [r7, #4]
 8015a30:	4613      	mov	r3, r2
 8015a32:	005b      	lsls	r3, r3, #1
 8015a34:	4413      	add	r3, r2
 8015a36:	00db      	lsls	r3, r3, #3
 8015a38:	440b      	add	r3, r1
 8015a3a:	3314      	adds	r3, #20
 8015a3c:	781b      	ldrb	r3, [r3, #0]
 8015a3e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8015a40:	78fb      	ldrb	r3, [r7, #3]
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	f000 8086 	beq.w	8015b54 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8015a48:	4948      	ldr	r1, [pc, #288]	; (8015b6c <etharp_tmr+0x14c>)
 8015a4a:	687a      	ldr	r2, [r7, #4]
 8015a4c:	4613      	mov	r3, r2
 8015a4e:	005b      	lsls	r3, r3, #1
 8015a50:	4413      	add	r3, r2
 8015a52:	00db      	lsls	r3, r3, #3
 8015a54:	440b      	add	r3, r1
 8015a56:	3312      	adds	r3, #18
 8015a58:	881b      	ldrh	r3, [r3, #0]
 8015a5a:	3301      	adds	r3, #1
 8015a5c:	b298      	uxth	r0, r3
 8015a5e:	4943      	ldr	r1, [pc, #268]	; (8015b6c <etharp_tmr+0x14c>)
 8015a60:	687a      	ldr	r2, [r7, #4]
 8015a62:	4613      	mov	r3, r2
 8015a64:	005b      	lsls	r3, r3, #1
 8015a66:	4413      	add	r3, r2
 8015a68:	00db      	lsls	r3, r3, #3
 8015a6a:	440b      	add	r3, r1
 8015a6c:	3312      	adds	r3, #18
 8015a6e:	4602      	mov	r2, r0
 8015a70:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015a72:	493e      	ldr	r1, [pc, #248]	; (8015b6c <etharp_tmr+0x14c>)
 8015a74:	687a      	ldr	r2, [r7, #4]
 8015a76:	4613      	mov	r3, r2
 8015a78:	005b      	lsls	r3, r3, #1
 8015a7a:	4413      	add	r3, r2
 8015a7c:	00db      	lsls	r3, r3, #3
 8015a7e:	440b      	add	r3, r1
 8015a80:	3312      	adds	r3, #18
 8015a82:	881b      	ldrh	r3, [r3, #0]
 8015a84:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015a88:	d215      	bcs.n	8015ab6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015a8a:	4938      	ldr	r1, [pc, #224]	; (8015b6c <etharp_tmr+0x14c>)
 8015a8c:	687a      	ldr	r2, [r7, #4]
 8015a8e:	4613      	mov	r3, r2
 8015a90:	005b      	lsls	r3, r3, #1
 8015a92:	4413      	add	r3, r2
 8015a94:	00db      	lsls	r3, r3, #3
 8015a96:	440b      	add	r3, r1
 8015a98:	3314      	adds	r3, #20
 8015a9a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015a9c:	2b01      	cmp	r3, #1
 8015a9e:	d10e      	bne.n	8015abe <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8015aa0:	4932      	ldr	r1, [pc, #200]	; (8015b6c <etharp_tmr+0x14c>)
 8015aa2:	687a      	ldr	r2, [r7, #4]
 8015aa4:	4613      	mov	r3, r2
 8015aa6:	005b      	lsls	r3, r3, #1
 8015aa8:	4413      	add	r3, r2
 8015aaa:	00db      	lsls	r3, r3, #3
 8015aac:	440b      	add	r3, r1
 8015aae:	3312      	adds	r3, #18
 8015ab0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015ab2:	2b04      	cmp	r3, #4
 8015ab4:	d903      	bls.n	8015abe <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8015ab6:	6878      	ldr	r0, [r7, #4]
 8015ab8:	f7ff ff80 	bl	80159bc <etharp_free_entry>
 8015abc:	e04a      	b.n	8015b54 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8015abe:	492b      	ldr	r1, [pc, #172]	; (8015b6c <etharp_tmr+0x14c>)
 8015ac0:	687a      	ldr	r2, [r7, #4]
 8015ac2:	4613      	mov	r3, r2
 8015ac4:	005b      	lsls	r3, r3, #1
 8015ac6:	4413      	add	r3, r2
 8015ac8:	00db      	lsls	r3, r3, #3
 8015aca:	440b      	add	r3, r1
 8015acc:	3314      	adds	r3, #20
 8015ace:	781b      	ldrb	r3, [r3, #0]
 8015ad0:	2b03      	cmp	r3, #3
 8015ad2:	d10a      	bne.n	8015aea <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015ad4:	4925      	ldr	r1, [pc, #148]	; (8015b6c <etharp_tmr+0x14c>)
 8015ad6:	687a      	ldr	r2, [r7, #4]
 8015ad8:	4613      	mov	r3, r2
 8015ada:	005b      	lsls	r3, r3, #1
 8015adc:	4413      	add	r3, r2
 8015ade:	00db      	lsls	r3, r3, #3
 8015ae0:	440b      	add	r3, r1
 8015ae2:	3314      	adds	r3, #20
 8015ae4:	2204      	movs	r2, #4
 8015ae6:	701a      	strb	r2, [r3, #0]
 8015ae8:	e034      	b.n	8015b54 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8015aea:	4920      	ldr	r1, [pc, #128]	; (8015b6c <etharp_tmr+0x14c>)
 8015aec:	687a      	ldr	r2, [r7, #4]
 8015aee:	4613      	mov	r3, r2
 8015af0:	005b      	lsls	r3, r3, #1
 8015af2:	4413      	add	r3, r2
 8015af4:	00db      	lsls	r3, r3, #3
 8015af6:	440b      	add	r3, r1
 8015af8:	3314      	adds	r3, #20
 8015afa:	781b      	ldrb	r3, [r3, #0]
 8015afc:	2b04      	cmp	r3, #4
 8015afe:	d10a      	bne.n	8015b16 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8015b00:	491a      	ldr	r1, [pc, #104]	; (8015b6c <etharp_tmr+0x14c>)
 8015b02:	687a      	ldr	r2, [r7, #4]
 8015b04:	4613      	mov	r3, r2
 8015b06:	005b      	lsls	r3, r3, #1
 8015b08:	4413      	add	r3, r2
 8015b0a:	00db      	lsls	r3, r3, #3
 8015b0c:	440b      	add	r3, r1
 8015b0e:	3314      	adds	r3, #20
 8015b10:	2202      	movs	r2, #2
 8015b12:	701a      	strb	r2, [r3, #0]
 8015b14:	e01e      	b.n	8015b54 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015b16:	4915      	ldr	r1, [pc, #84]	; (8015b6c <etharp_tmr+0x14c>)
 8015b18:	687a      	ldr	r2, [r7, #4]
 8015b1a:	4613      	mov	r3, r2
 8015b1c:	005b      	lsls	r3, r3, #1
 8015b1e:	4413      	add	r3, r2
 8015b20:	00db      	lsls	r3, r3, #3
 8015b22:	440b      	add	r3, r1
 8015b24:	3314      	adds	r3, #20
 8015b26:	781b      	ldrb	r3, [r3, #0]
 8015b28:	2b01      	cmp	r3, #1
 8015b2a:	d113      	bne.n	8015b54 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015b2c:	490f      	ldr	r1, [pc, #60]	; (8015b6c <etharp_tmr+0x14c>)
 8015b2e:	687a      	ldr	r2, [r7, #4]
 8015b30:	4613      	mov	r3, r2
 8015b32:	005b      	lsls	r3, r3, #1
 8015b34:	4413      	add	r3, r2
 8015b36:	00db      	lsls	r3, r3, #3
 8015b38:	440b      	add	r3, r1
 8015b3a:	3308      	adds	r3, #8
 8015b3c:	6818      	ldr	r0, [r3, #0]
 8015b3e:	687a      	ldr	r2, [r7, #4]
 8015b40:	4613      	mov	r3, r2
 8015b42:	005b      	lsls	r3, r3, #1
 8015b44:	4413      	add	r3, r2
 8015b46:	00db      	lsls	r3, r3, #3
 8015b48:	4a08      	ldr	r2, [pc, #32]	; (8015b6c <etharp_tmr+0x14c>)
 8015b4a:	4413      	add	r3, r2
 8015b4c:	3304      	adds	r3, #4
 8015b4e:	4619      	mov	r1, r3
 8015b50:	f000 fe6e 	bl	8016830 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	3301      	adds	r3, #1
 8015b58:	607b      	str	r3, [r7, #4]
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	2b09      	cmp	r3, #9
 8015b5e:	f77f af65 	ble.w	8015a2c <etharp_tmr+0xc>
      }
    }
  }
}
 8015b62:	bf00      	nop
 8015b64:	bf00      	nop
 8015b66:	3708      	adds	r7, #8
 8015b68:	46bd      	mov	sp, r7
 8015b6a:	bd80      	pop	{r7, pc}
 8015b6c:	2000d2ac 	.word	0x2000d2ac

08015b70 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8015b70:	b580      	push	{r7, lr}
 8015b72:	b08a      	sub	sp, #40	; 0x28
 8015b74:	af00      	add	r7, sp, #0
 8015b76:	60f8      	str	r0, [r7, #12]
 8015b78:	460b      	mov	r3, r1
 8015b7a:	607a      	str	r2, [r7, #4]
 8015b7c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8015b7e:	230a      	movs	r3, #10
 8015b80:	84fb      	strh	r3, [r7, #38]	; 0x26
 8015b82:	230a      	movs	r3, #10
 8015b84:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8015b86:	230a      	movs	r3, #10
 8015b88:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8015b8a:	2300      	movs	r3, #0
 8015b8c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8015b8e:	230a      	movs	r3, #10
 8015b90:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8015b92:	2300      	movs	r3, #0
 8015b94:	83bb      	strh	r3, [r7, #28]
 8015b96:	2300      	movs	r3, #0
 8015b98:	837b      	strh	r3, [r7, #26]
 8015b9a:	2300      	movs	r3, #0
 8015b9c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015b9e:	2300      	movs	r3, #0
 8015ba0:	843b      	strh	r3, [r7, #32]
 8015ba2:	e0ae      	b.n	8015d02 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8015ba4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015ba8:	49a6      	ldr	r1, [pc, #664]	; (8015e44 <etharp_find_entry+0x2d4>)
 8015baa:	4613      	mov	r3, r2
 8015bac:	005b      	lsls	r3, r3, #1
 8015bae:	4413      	add	r3, r2
 8015bb0:	00db      	lsls	r3, r3, #3
 8015bb2:	440b      	add	r3, r1
 8015bb4:	3314      	adds	r3, #20
 8015bb6:	781b      	ldrb	r3, [r3, #0]
 8015bb8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8015bba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015bbe:	2b0a      	cmp	r3, #10
 8015bc0:	d105      	bne.n	8015bce <etharp_find_entry+0x5e>
 8015bc2:	7dfb      	ldrb	r3, [r7, #23]
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	d102      	bne.n	8015bce <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8015bc8:	8c3b      	ldrh	r3, [r7, #32]
 8015bca:	847b      	strh	r3, [r7, #34]	; 0x22
 8015bcc:	e095      	b.n	8015cfa <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8015bce:	7dfb      	ldrb	r3, [r7, #23]
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	f000 8092 	beq.w	8015cfa <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8015bd6:	7dfb      	ldrb	r3, [r7, #23]
 8015bd8:	2b01      	cmp	r3, #1
 8015bda:	d009      	beq.n	8015bf0 <etharp_find_entry+0x80>
 8015bdc:	7dfb      	ldrb	r3, [r7, #23]
 8015bde:	2b01      	cmp	r3, #1
 8015be0:	d806      	bhi.n	8015bf0 <etharp_find_entry+0x80>
 8015be2:	4b99      	ldr	r3, [pc, #612]	; (8015e48 <etharp_find_entry+0x2d8>)
 8015be4:	f240 1223 	movw	r2, #291	; 0x123
 8015be8:	4998      	ldr	r1, [pc, #608]	; (8015e4c <etharp_find_entry+0x2dc>)
 8015bea:	4899      	ldr	r0, [pc, #612]	; (8015e50 <etharp_find_entry+0x2e0>)
 8015bec:	f002 fd30 	bl	8018650 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8015bf0:	68fb      	ldr	r3, [r7, #12]
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	d020      	beq.n	8015c38 <etharp_find_entry+0xc8>
 8015bf6:	68fb      	ldr	r3, [r7, #12]
 8015bf8:	6819      	ldr	r1, [r3, #0]
 8015bfa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015bfe:	4891      	ldr	r0, [pc, #580]	; (8015e44 <etharp_find_entry+0x2d4>)
 8015c00:	4613      	mov	r3, r2
 8015c02:	005b      	lsls	r3, r3, #1
 8015c04:	4413      	add	r3, r2
 8015c06:	00db      	lsls	r3, r3, #3
 8015c08:	4403      	add	r3, r0
 8015c0a:	3304      	adds	r3, #4
 8015c0c:	681b      	ldr	r3, [r3, #0]
 8015c0e:	4299      	cmp	r1, r3
 8015c10:	d112      	bne.n	8015c38 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d00c      	beq.n	8015c32 <etharp_find_entry+0xc2>
 8015c18:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c1c:	4989      	ldr	r1, [pc, #548]	; (8015e44 <etharp_find_entry+0x2d4>)
 8015c1e:	4613      	mov	r3, r2
 8015c20:	005b      	lsls	r3, r3, #1
 8015c22:	4413      	add	r3, r2
 8015c24:	00db      	lsls	r3, r3, #3
 8015c26:	440b      	add	r3, r1
 8015c28:	3308      	adds	r3, #8
 8015c2a:	681b      	ldr	r3, [r3, #0]
 8015c2c:	687a      	ldr	r2, [r7, #4]
 8015c2e:	429a      	cmp	r2, r3
 8015c30:	d102      	bne.n	8015c38 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8015c32:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015c36:	e100      	b.n	8015e3a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8015c38:	7dfb      	ldrb	r3, [r7, #23]
 8015c3a:	2b01      	cmp	r3, #1
 8015c3c:	d140      	bne.n	8015cc0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8015c3e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c42:	4980      	ldr	r1, [pc, #512]	; (8015e44 <etharp_find_entry+0x2d4>)
 8015c44:	4613      	mov	r3, r2
 8015c46:	005b      	lsls	r3, r3, #1
 8015c48:	4413      	add	r3, r2
 8015c4a:	00db      	lsls	r3, r3, #3
 8015c4c:	440b      	add	r3, r1
 8015c4e:	681b      	ldr	r3, [r3, #0]
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d01a      	beq.n	8015c8a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8015c54:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c58:	497a      	ldr	r1, [pc, #488]	; (8015e44 <etharp_find_entry+0x2d4>)
 8015c5a:	4613      	mov	r3, r2
 8015c5c:	005b      	lsls	r3, r3, #1
 8015c5e:	4413      	add	r3, r2
 8015c60:	00db      	lsls	r3, r3, #3
 8015c62:	440b      	add	r3, r1
 8015c64:	3312      	adds	r3, #18
 8015c66:	881b      	ldrh	r3, [r3, #0]
 8015c68:	8bba      	ldrh	r2, [r7, #28]
 8015c6a:	429a      	cmp	r2, r3
 8015c6c:	d845      	bhi.n	8015cfa <etharp_find_entry+0x18a>
            old_queue = i;
 8015c6e:	8c3b      	ldrh	r3, [r7, #32]
 8015c70:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8015c72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c76:	4973      	ldr	r1, [pc, #460]	; (8015e44 <etharp_find_entry+0x2d4>)
 8015c78:	4613      	mov	r3, r2
 8015c7a:	005b      	lsls	r3, r3, #1
 8015c7c:	4413      	add	r3, r2
 8015c7e:	00db      	lsls	r3, r3, #3
 8015c80:	440b      	add	r3, r1
 8015c82:	3312      	adds	r3, #18
 8015c84:	881b      	ldrh	r3, [r3, #0]
 8015c86:	83bb      	strh	r3, [r7, #28]
 8015c88:	e037      	b.n	8015cfa <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8015c8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c8e:	496d      	ldr	r1, [pc, #436]	; (8015e44 <etharp_find_entry+0x2d4>)
 8015c90:	4613      	mov	r3, r2
 8015c92:	005b      	lsls	r3, r3, #1
 8015c94:	4413      	add	r3, r2
 8015c96:	00db      	lsls	r3, r3, #3
 8015c98:	440b      	add	r3, r1
 8015c9a:	3312      	adds	r3, #18
 8015c9c:	881b      	ldrh	r3, [r3, #0]
 8015c9e:	8b7a      	ldrh	r2, [r7, #26]
 8015ca0:	429a      	cmp	r2, r3
 8015ca2:	d82a      	bhi.n	8015cfa <etharp_find_entry+0x18a>
            old_pending = i;
 8015ca4:	8c3b      	ldrh	r3, [r7, #32]
 8015ca6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8015ca8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015cac:	4965      	ldr	r1, [pc, #404]	; (8015e44 <etharp_find_entry+0x2d4>)
 8015cae:	4613      	mov	r3, r2
 8015cb0:	005b      	lsls	r3, r3, #1
 8015cb2:	4413      	add	r3, r2
 8015cb4:	00db      	lsls	r3, r3, #3
 8015cb6:	440b      	add	r3, r1
 8015cb8:	3312      	adds	r3, #18
 8015cba:	881b      	ldrh	r3, [r3, #0]
 8015cbc:	837b      	strh	r3, [r7, #26]
 8015cbe:	e01c      	b.n	8015cfa <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8015cc0:	7dfb      	ldrb	r3, [r7, #23]
 8015cc2:	2b01      	cmp	r3, #1
 8015cc4:	d919      	bls.n	8015cfa <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8015cc6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015cca:	495e      	ldr	r1, [pc, #376]	; (8015e44 <etharp_find_entry+0x2d4>)
 8015ccc:	4613      	mov	r3, r2
 8015cce:	005b      	lsls	r3, r3, #1
 8015cd0:	4413      	add	r3, r2
 8015cd2:	00db      	lsls	r3, r3, #3
 8015cd4:	440b      	add	r3, r1
 8015cd6:	3312      	adds	r3, #18
 8015cd8:	881b      	ldrh	r3, [r3, #0]
 8015cda:	8b3a      	ldrh	r2, [r7, #24]
 8015cdc:	429a      	cmp	r2, r3
 8015cde:	d80c      	bhi.n	8015cfa <etharp_find_entry+0x18a>
            old_stable = i;
 8015ce0:	8c3b      	ldrh	r3, [r7, #32]
 8015ce2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8015ce4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015ce8:	4956      	ldr	r1, [pc, #344]	; (8015e44 <etharp_find_entry+0x2d4>)
 8015cea:	4613      	mov	r3, r2
 8015cec:	005b      	lsls	r3, r3, #1
 8015cee:	4413      	add	r3, r2
 8015cf0:	00db      	lsls	r3, r3, #3
 8015cf2:	440b      	add	r3, r1
 8015cf4:	3312      	adds	r3, #18
 8015cf6:	881b      	ldrh	r3, [r3, #0]
 8015cf8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015cfa:	8c3b      	ldrh	r3, [r7, #32]
 8015cfc:	3301      	adds	r3, #1
 8015cfe:	b29b      	uxth	r3, r3
 8015d00:	843b      	strh	r3, [r7, #32]
 8015d02:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015d06:	2b09      	cmp	r3, #9
 8015d08:	f77f af4c 	ble.w	8015ba4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015d0c:	7afb      	ldrb	r3, [r7, #11]
 8015d0e:	f003 0302 	and.w	r3, r3, #2
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	d108      	bne.n	8015d28 <etharp_find_entry+0x1b8>
 8015d16:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015d1a:	2b0a      	cmp	r3, #10
 8015d1c:	d107      	bne.n	8015d2e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8015d1e:	7afb      	ldrb	r3, [r7, #11]
 8015d20:	f003 0301 	and.w	r3, r3, #1
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d102      	bne.n	8015d2e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8015d28:	f04f 33ff 	mov.w	r3, #4294967295
 8015d2c:	e085      	b.n	8015e3a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8015d2e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015d32:	2b09      	cmp	r3, #9
 8015d34:	dc02      	bgt.n	8015d3c <etharp_find_entry+0x1cc>
    i = empty;
 8015d36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015d38:	843b      	strh	r3, [r7, #32]
 8015d3a:	e039      	b.n	8015db0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015d3c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8015d40:	2b09      	cmp	r3, #9
 8015d42:	dc14      	bgt.n	8015d6e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8015d44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015d46:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8015d48:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015d4c:	493d      	ldr	r1, [pc, #244]	; (8015e44 <etharp_find_entry+0x2d4>)
 8015d4e:	4613      	mov	r3, r2
 8015d50:	005b      	lsls	r3, r3, #1
 8015d52:	4413      	add	r3, r2
 8015d54:	00db      	lsls	r3, r3, #3
 8015d56:	440b      	add	r3, r1
 8015d58:	681b      	ldr	r3, [r3, #0]
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d018      	beq.n	8015d90 <etharp_find_entry+0x220>
 8015d5e:	4b3a      	ldr	r3, [pc, #232]	; (8015e48 <etharp_find_entry+0x2d8>)
 8015d60:	f240 126d 	movw	r2, #365	; 0x16d
 8015d64:	493b      	ldr	r1, [pc, #236]	; (8015e54 <etharp_find_entry+0x2e4>)
 8015d66:	483a      	ldr	r0, [pc, #232]	; (8015e50 <etharp_find_entry+0x2e0>)
 8015d68:	f002 fc72 	bl	8018650 <iprintf>
 8015d6c:	e010      	b.n	8015d90 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015d6e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8015d72:	2b09      	cmp	r3, #9
 8015d74:	dc02      	bgt.n	8015d7c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8015d76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015d78:	843b      	strh	r3, [r7, #32]
 8015d7a:	e009      	b.n	8015d90 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015d7c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015d80:	2b09      	cmp	r3, #9
 8015d82:	dc02      	bgt.n	8015d8a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015d84:	8bfb      	ldrh	r3, [r7, #30]
 8015d86:	843b      	strh	r3, [r7, #32]
 8015d88:	e002      	b.n	8015d90 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8015d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8015d8e:	e054      	b.n	8015e3a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015d90:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015d94:	2b09      	cmp	r3, #9
 8015d96:	dd06      	ble.n	8015da6 <etharp_find_entry+0x236>
 8015d98:	4b2b      	ldr	r3, [pc, #172]	; (8015e48 <etharp_find_entry+0x2d8>)
 8015d9a:	f240 127f 	movw	r2, #383	; 0x17f
 8015d9e:	492e      	ldr	r1, [pc, #184]	; (8015e58 <etharp_find_entry+0x2e8>)
 8015da0:	482b      	ldr	r0, [pc, #172]	; (8015e50 <etharp_find_entry+0x2e0>)
 8015da2:	f002 fc55 	bl	8018650 <iprintf>
    etharp_free_entry(i);
 8015da6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015daa:	4618      	mov	r0, r3
 8015dac:	f7ff fe06 	bl	80159bc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015db0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015db4:	2b09      	cmp	r3, #9
 8015db6:	dd06      	ble.n	8015dc6 <etharp_find_entry+0x256>
 8015db8:	4b23      	ldr	r3, [pc, #140]	; (8015e48 <etharp_find_entry+0x2d8>)
 8015dba:	f240 1283 	movw	r2, #387	; 0x183
 8015dbe:	4926      	ldr	r1, [pc, #152]	; (8015e58 <etharp_find_entry+0x2e8>)
 8015dc0:	4823      	ldr	r0, [pc, #140]	; (8015e50 <etharp_find_entry+0x2e0>)
 8015dc2:	f002 fc45 	bl	8018650 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8015dc6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015dca:	491e      	ldr	r1, [pc, #120]	; (8015e44 <etharp_find_entry+0x2d4>)
 8015dcc:	4613      	mov	r3, r2
 8015dce:	005b      	lsls	r3, r3, #1
 8015dd0:	4413      	add	r3, r2
 8015dd2:	00db      	lsls	r3, r3, #3
 8015dd4:	440b      	add	r3, r1
 8015dd6:	3314      	adds	r3, #20
 8015dd8:	781b      	ldrb	r3, [r3, #0]
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d006      	beq.n	8015dec <etharp_find_entry+0x27c>
 8015dde:	4b1a      	ldr	r3, [pc, #104]	; (8015e48 <etharp_find_entry+0x2d8>)
 8015de0:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8015de4:	491d      	ldr	r1, [pc, #116]	; (8015e5c <etharp_find_entry+0x2ec>)
 8015de6:	481a      	ldr	r0, [pc, #104]	; (8015e50 <etharp_find_entry+0x2e0>)
 8015de8:	f002 fc32 	bl	8018650 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015dec:	68fb      	ldr	r3, [r7, #12]
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d00b      	beq.n	8015e0a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8015df2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015df6:	68fb      	ldr	r3, [r7, #12]
 8015df8:	6819      	ldr	r1, [r3, #0]
 8015dfa:	4812      	ldr	r0, [pc, #72]	; (8015e44 <etharp_find_entry+0x2d4>)
 8015dfc:	4613      	mov	r3, r2
 8015dfe:	005b      	lsls	r3, r3, #1
 8015e00:	4413      	add	r3, r2
 8015e02:	00db      	lsls	r3, r3, #3
 8015e04:	4403      	add	r3, r0
 8015e06:	3304      	adds	r3, #4
 8015e08:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8015e0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015e0e:	490d      	ldr	r1, [pc, #52]	; (8015e44 <etharp_find_entry+0x2d4>)
 8015e10:	4613      	mov	r3, r2
 8015e12:	005b      	lsls	r3, r3, #1
 8015e14:	4413      	add	r3, r2
 8015e16:	00db      	lsls	r3, r3, #3
 8015e18:	440b      	add	r3, r1
 8015e1a:	3312      	adds	r3, #18
 8015e1c:	2200      	movs	r2, #0
 8015e1e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8015e20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015e24:	4907      	ldr	r1, [pc, #28]	; (8015e44 <etharp_find_entry+0x2d4>)
 8015e26:	4613      	mov	r3, r2
 8015e28:	005b      	lsls	r3, r3, #1
 8015e2a:	4413      	add	r3, r2
 8015e2c:	00db      	lsls	r3, r3, #3
 8015e2e:	440b      	add	r3, r1
 8015e30:	3308      	adds	r3, #8
 8015e32:	687a      	ldr	r2, [r7, #4]
 8015e34:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8015e36:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8015e3a:	4618      	mov	r0, r3
 8015e3c:	3728      	adds	r7, #40	; 0x28
 8015e3e:	46bd      	mov	sp, r7
 8015e40:	bd80      	pop	{r7, pc}
 8015e42:	bf00      	nop
 8015e44:	2000d2ac 	.word	0x2000d2ac
 8015e48:	0801ce88 	.word	0x0801ce88
 8015e4c:	0801cec0 	.word	0x0801cec0
 8015e50:	0801cf00 	.word	0x0801cf00
 8015e54:	0801cf28 	.word	0x0801cf28
 8015e58:	0801cf40 	.word	0x0801cf40
 8015e5c:	0801cf54 	.word	0x0801cf54

08015e60 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015e60:	b580      	push	{r7, lr}
 8015e62:	b088      	sub	sp, #32
 8015e64:	af02      	add	r7, sp, #8
 8015e66:	60f8      	str	r0, [r7, #12]
 8015e68:	60b9      	str	r1, [r7, #8]
 8015e6a:	607a      	str	r2, [r7, #4]
 8015e6c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015e6e:	68fb      	ldr	r3, [r7, #12]
 8015e70:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015e74:	2b06      	cmp	r3, #6
 8015e76:	d006      	beq.n	8015e86 <etharp_update_arp_entry+0x26>
 8015e78:	4b48      	ldr	r3, [pc, #288]	; (8015f9c <etharp_update_arp_entry+0x13c>)
 8015e7a:	f240 12a9 	movw	r2, #425	; 0x1a9
 8015e7e:	4948      	ldr	r1, [pc, #288]	; (8015fa0 <etharp_update_arp_entry+0x140>)
 8015e80:	4848      	ldr	r0, [pc, #288]	; (8015fa4 <etharp_update_arp_entry+0x144>)
 8015e82:	f002 fbe5 	bl	8018650 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8015e86:	68bb      	ldr	r3, [r7, #8]
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d012      	beq.n	8015eb2 <etharp_update_arp_entry+0x52>
 8015e8c:	68bb      	ldr	r3, [r7, #8]
 8015e8e:	681b      	ldr	r3, [r3, #0]
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d00e      	beq.n	8015eb2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015e94:	68bb      	ldr	r3, [r7, #8]
 8015e96:	681b      	ldr	r3, [r3, #0]
 8015e98:	68f9      	ldr	r1, [r7, #12]
 8015e9a:	4618      	mov	r0, r3
 8015e9c:	f001 f8fe 	bl	801709c <ip4_addr_isbroadcast_u32>
 8015ea0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d105      	bne.n	8015eb2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8015ea6:	68bb      	ldr	r3, [r7, #8]
 8015ea8:	681b      	ldr	r3, [r3, #0]
 8015eaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015eae:	2be0      	cmp	r3, #224	; 0xe0
 8015eb0:	d102      	bne.n	8015eb8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015eb2:	f06f 030f 	mvn.w	r3, #15
 8015eb6:	e06c      	b.n	8015f92 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015eb8:	78fb      	ldrb	r3, [r7, #3]
 8015eba:	68fa      	ldr	r2, [r7, #12]
 8015ebc:	4619      	mov	r1, r3
 8015ebe:	68b8      	ldr	r0, [r7, #8]
 8015ec0:	f7ff fe56 	bl	8015b70 <etharp_find_entry>
 8015ec4:	4603      	mov	r3, r0
 8015ec6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015ec8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	da02      	bge.n	8015ed6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015ed0:	8afb      	ldrh	r3, [r7, #22]
 8015ed2:	b25b      	sxtb	r3, r3
 8015ed4:	e05d      	b.n	8015f92 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8015ed6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015eda:	4933      	ldr	r1, [pc, #204]	; (8015fa8 <etharp_update_arp_entry+0x148>)
 8015edc:	4613      	mov	r3, r2
 8015ede:	005b      	lsls	r3, r3, #1
 8015ee0:	4413      	add	r3, r2
 8015ee2:	00db      	lsls	r3, r3, #3
 8015ee4:	440b      	add	r3, r1
 8015ee6:	3314      	adds	r3, #20
 8015ee8:	2202      	movs	r2, #2
 8015eea:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015eec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015ef0:	492d      	ldr	r1, [pc, #180]	; (8015fa8 <etharp_update_arp_entry+0x148>)
 8015ef2:	4613      	mov	r3, r2
 8015ef4:	005b      	lsls	r3, r3, #1
 8015ef6:	4413      	add	r3, r2
 8015ef8:	00db      	lsls	r3, r3, #3
 8015efa:	440b      	add	r3, r1
 8015efc:	3308      	adds	r3, #8
 8015efe:	68fa      	ldr	r2, [r7, #12]
 8015f00:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015f02:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f06:	4613      	mov	r3, r2
 8015f08:	005b      	lsls	r3, r3, #1
 8015f0a:	4413      	add	r3, r2
 8015f0c:	00db      	lsls	r3, r3, #3
 8015f0e:	3308      	adds	r3, #8
 8015f10:	4a25      	ldr	r2, [pc, #148]	; (8015fa8 <etharp_update_arp_entry+0x148>)
 8015f12:	4413      	add	r3, r2
 8015f14:	3304      	adds	r3, #4
 8015f16:	2206      	movs	r2, #6
 8015f18:	6879      	ldr	r1, [r7, #4]
 8015f1a:	4618      	mov	r0, r3
 8015f1c:	f002 fb68 	bl	80185f0 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015f20:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f24:	4920      	ldr	r1, [pc, #128]	; (8015fa8 <etharp_update_arp_entry+0x148>)
 8015f26:	4613      	mov	r3, r2
 8015f28:	005b      	lsls	r3, r3, #1
 8015f2a:	4413      	add	r3, r2
 8015f2c:	00db      	lsls	r3, r3, #3
 8015f2e:	440b      	add	r3, r1
 8015f30:	3312      	adds	r3, #18
 8015f32:	2200      	movs	r2, #0
 8015f34:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8015f36:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f3a:	491b      	ldr	r1, [pc, #108]	; (8015fa8 <etharp_update_arp_entry+0x148>)
 8015f3c:	4613      	mov	r3, r2
 8015f3e:	005b      	lsls	r3, r3, #1
 8015f40:	4413      	add	r3, r2
 8015f42:	00db      	lsls	r3, r3, #3
 8015f44:	440b      	add	r3, r1
 8015f46:	681b      	ldr	r3, [r3, #0]
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d021      	beq.n	8015f90 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015f4c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f50:	4915      	ldr	r1, [pc, #84]	; (8015fa8 <etharp_update_arp_entry+0x148>)
 8015f52:	4613      	mov	r3, r2
 8015f54:	005b      	lsls	r3, r3, #1
 8015f56:	4413      	add	r3, r2
 8015f58:	00db      	lsls	r3, r3, #3
 8015f5a:	440b      	add	r3, r1
 8015f5c:	681b      	ldr	r3, [r3, #0]
 8015f5e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015f60:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f64:	4910      	ldr	r1, [pc, #64]	; (8015fa8 <etharp_update_arp_entry+0x148>)
 8015f66:	4613      	mov	r3, r2
 8015f68:	005b      	lsls	r3, r3, #1
 8015f6a:	4413      	add	r3, r2
 8015f6c:	00db      	lsls	r3, r3, #3
 8015f6e:	440b      	add	r3, r1
 8015f70:	2200      	movs	r2, #0
 8015f72:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8015f7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015f7e:	9300      	str	r3, [sp, #0]
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	6939      	ldr	r1, [r7, #16]
 8015f84:	68f8      	ldr	r0, [r7, #12]
 8015f86:	f002 f8d5 	bl	8018134 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8015f8a:	6938      	ldr	r0, [r7, #16]
 8015f8c:	f7f8 fc4c 	bl	800e828 <pbuf_free>
  }
  return ERR_OK;
 8015f90:	2300      	movs	r3, #0
}
 8015f92:	4618      	mov	r0, r3
 8015f94:	3718      	adds	r7, #24
 8015f96:	46bd      	mov	sp, r7
 8015f98:	bd80      	pop	{r7, pc}
 8015f9a:	bf00      	nop
 8015f9c:	0801ce88 	.word	0x0801ce88
 8015fa0:	0801cf80 	.word	0x0801cf80
 8015fa4:	0801cf00 	.word	0x0801cf00
 8015fa8:	2000d2ac 	.word	0x2000d2ac

08015fac <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015fac:	b580      	push	{r7, lr}
 8015fae:	b084      	sub	sp, #16
 8015fb0:	af00      	add	r7, sp, #0
 8015fb2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015fb4:	2300      	movs	r3, #0
 8015fb6:	60fb      	str	r3, [r7, #12]
 8015fb8:	e01e      	b.n	8015ff8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8015fba:	4913      	ldr	r1, [pc, #76]	; (8016008 <etharp_cleanup_netif+0x5c>)
 8015fbc:	68fa      	ldr	r2, [r7, #12]
 8015fbe:	4613      	mov	r3, r2
 8015fc0:	005b      	lsls	r3, r3, #1
 8015fc2:	4413      	add	r3, r2
 8015fc4:	00db      	lsls	r3, r3, #3
 8015fc6:	440b      	add	r3, r1
 8015fc8:	3314      	adds	r3, #20
 8015fca:	781b      	ldrb	r3, [r3, #0]
 8015fcc:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8015fce:	7afb      	ldrb	r3, [r7, #11]
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d00e      	beq.n	8015ff2 <etharp_cleanup_netif+0x46>
 8015fd4:	490c      	ldr	r1, [pc, #48]	; (8016008 <etharp_cleanup_netif+0x5c>)
 8015fd6:	68fa      	ldr	r2, [r7, #12]
 8015fd8:	4613      	mov	r3, r2
 8015fda:	005b      	lsls	r3, r3, #1
 8015fdc:	4413      	add	r3, r2
 8015fde:	00db      	lsls	r3, r3, #3
 8015fe0:	440b      	add	r3, r1
 8015fe2:	3308      	adds	r3, #8
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	687a      	ldr	r2, [r7, #4]
 8015fe8:	429a      	cmp	r2, r3
 8015fea:	d102      	bne.n	8015ff2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015fec:	68f8      	ldr	r0, [r7, #12]
 8015fee:	f7ff fce5 	bl	80159bc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015ff2:	68fb      	ldr	r3, [r7, #12]
 8015ff4:	3301      	adds	r3, #1
 8015ff6:	60fb      	str	r3, [r7, #12]
 8015ff8:	68fb      	ldr	r3, [r7, #12]
 8015ffa:	2b09      	cmp	r3, #9
 8015ffc:	dddd      	ble.n	8015fba <etharp_cleanup_netif+0xe>
    }
  }
}
 8015ffe:	bf00      	nop
 8016000:	bf00      	nop
 8016002:	3710      	adds	r7, #16
 8016004:	46bd      	mov	sp, r7
 8016006:	bd80      	pop	{r7, pc}
 8016008:	2000d2ac 	.word	0x2000d2ac

0801600c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801600c:	b5b0      	push	{r4, r5, r7, lr}
 801600e:	b08a      	sub	sp, #40	; 0x28
 8016010:	af04      	add	r7, sp, #16
 8016012:	6078      	str	r0, [r7, #4]
 8016014:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016016:	683b      	ldr	r3, [r7, #0]
 8016018:	2b00      	cmp	r3, #0
 801601a:	d107      	bne.n	801602c <etharp_input+0x20>
 801601c:	4b3d      	ldr	r3, [pc, #244]	; (8016114 <etharp_input+0x108>)
 801601e:	f240 228a 	movw	r2, #650	; 0x28a
 8016022:	493d      	ldr	r1, [pc, #244]	; (8016118 <etharp_input+0x10c>)
 8016024:	483d      	ldr	r0, [pc, #244]	; (801611c <etharp_input+0x110>)
 8016026:	f002 fb13 	bl	8018650 <iprintf>
 801602a:	e06f      	b.n	801610c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	685b      	ldr	r3, [r3, #4]
 8016030:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016032:	693b      	ldr	r3, [r7, #16]
 8016034:	881b      	ldrh	r3, [r3, #0]
 8016036:	b29b      	uxth	r3, r3
 8016038:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801603c:	d10c      	bne.n	8016058 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801603e:	693b      	ldr	r3, [r7, #16]
 8016040:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016042:	2b06      	cmp	r3, #6
 8016044:	d108      	bne.n	8016058 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016046:	693b      	ldr	r3, [r7, #16]
 8016048:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801604a:	2b04      	cmp	r3, #4
 801604c:	d104      	bne.n	8016058 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801604e:	693b      	ldr	r3, [r7, #16]
 8016050:	885b      	ldrh	r3, [r3, #2]
 8016052:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016054:	2b08      	cmp	r3, #8
 8016056:	d003      	beq.n	8016060 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016058:	6878      	ldr	r0, [r7, #4]
 801605a:	f7f8 fbe5 	bl	800e828 <pbuf_free>
    return;
 801605e:	e055      	b.n	801610c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016060:	693b      	ldr	r3, [r7, #16]
 8016062:	330e      	adds	r3, #14
 8016064:	681b      	ldr	r3, [r3, #0]
 8016066:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8016068:	693b      	ldr	r3, [r7, #16]
 801606a:	3318      	adds	r3, #24
 801606c:	681b      	ldr	r3, [r3, #0]
 801606e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016070:	683b      	ldr	r3, [r7, #0]
 8016072:	3304      	adds	r3, #4
 8016074:	681b      	ldr	r3, [r3, #0]
 8016076:	2b00      	cmp	r3, #0
 8016078:	d102      	bne.n	8016080 <etharp_input+0x74>
    for_us = 0;
 801607a:	2300      	movs	r3, #0
 801607c:	75fb      	strb	r3, [r7, #23]
 801607e:	e009      	b.n	8016094 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016080:	68ba      	ldr	r2, [r7, #8]
 8016082:	683b      	ldr	r3, [r7, #0]
 8016084:	3304      	adds	r3, #4
 8016086:	681b      	ldr	r3, [r3, #0]
 8016088:	429a      	cmp	r2, r3
 801608a:	bf0c      	ite	eq
 801608c:	2301      	moveq	r3, #1
 801608e:	2300      	movne	r3, #0
 8016090:	b2db      	uxtb	r3, r3
 8016092:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016094:	693b      	ldr	r3, [r7, #16]
 8016096:	f103 0208 	add.w	r2, r3, #8
 801609a:	7dfb      	ldrb	r3, [r7, #23]
 801609c:	2b00      	cmp	r3, #0
 801609e:	d001      	beq.n	80160a4 <etharp_input+0x98>
 80160a0:	2301      	movs	r3, #1
 80160a2:	e000      	b.n	80160a6 <etharp_input+0x9a>
 80160a4:	2302      	movs	r3, #2
 80160a6:	f107 010c 	add.w	r1, r7, #12
 80160aa:	6838      	ldr	r0, [r7, #0]
 80160ac:	f7ff fed8 	bl	8015e60 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80160b0:	693b      	ldr	r3, [r7, #16]
 80160b2:	88db      	ldrh	r3, [r3, #6]
 80160b4:	b29b      	uxth	r3, r3
 80160b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80160ba:	d003      	beq.n	80160c4 <etharp_input+0xb8>
 80160bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80160c0:	d01e      	beq.n	8016100 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80160c2:	e020      	b.n	8016106 <etharp_input+0xfa>
      if (for_us) {
 80160c4:	7dfb      	ldrb	r3, [r7, #23]
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d01c      	beq.n	8016104 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80160ca:	683b      	ldr	r3, [r7, #0]
 80160cc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80160d0:	693b      	ldr	r3, [r7, #16]
 80160d2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80160d6:	683b      	ldr	r3, [r7, #0]
 80160d8:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80160dc:	683b      	ldr	r3, [r7, #0]
 80160de:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80160e0:	693a      	ldr	r2, [r7, #16]
 80160e2:	3208      	adds	r2, #8
        etharp_raw(netif,
 80160e4:	2102      	movs	r1, #2
 80160e6:	9103      	str	r1, [sp, #12]
 80160e8:	f107 010c 	add.w	r1, r7, #12
 80160ec:	9102      	str	r1, [sp, #8]
 80160ee:	9201      	str	r2, [sp, #4]
 80160f0:	9300      	str	r3, [sp, #0]
 80160f2:	462b      	mov	r3, r5
 80160f4:	4622      	mov	r2, r4
 80160f6:	4601      	mov	r1, r0
 80160f8:	6838      	ldr	r0, [r7, #0]
 80160fa:	f000 faeb 	bl	80166d4 <etharp_raw>
      break;
 80160fe:	e001      	b.n	8016104 <etharp_input+0xf8>
      break;
 8016100:	bf00      	nop
 8016102:	e000      	b.n	8016106 <etharp_input+0xfa>
      break;
 8016104:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016106:	6878      	ldr	r0, [r7, #4]
 8016108:	f7f8 fb8e 	bl	800e828 <pbuf_free>
}
 801610c:	3718      	adds	r7, #24
 801610e:	46bd      	mov	sp, r7
 8016110:	bdb0      	pop	{r4, r5, r7, pc}
 8016112:	bf00      	nop
 8016114:	0801ce88 	.word	0x0801ce88
 8016118:	0801cfd8 	.word	0x0801cfd8
 801611c:	0801cf00 	.word	0x0801cf00

08016120 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016120:	b580      	push	{r7, lr}
 8016122:	b086      	sub	sp, #24
 8016124:	af02      	add	r7, sp, #8
 8016126:	60f8      	str	r0, [r7, #12]
 8016128:	60b9      	str	r1, [r7, #8]
 801612a:	4613      	mov	r3, r2
 801612c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801612e:	79fa      	ldrb	r2, [r7, #7]
 8016130:	4944      	ldr	r1, [pc, #272]	; (8016244 <etharp_output_to_arp_index+0x124>)
 8016132:	4613      	mov	r3, r2
 8016134:	005b      	lsls	r3, r3, #1
 8016136:	4413      	add	r3, r2
 8016138:	00db      	lsls	r3, r3, #3
 801613a:	440b      	add	r3, r1
 801613c:	3314      	adds	r3, #20
 801613e:	781b      	ldrb	r3, [r3, #0]
 8016140:	2b01      	cmp	r3, #1
 8016142:	d806      	bhi.n	8016152 <etharp_output_to_arp_index+0x32>
 8016144:	4b40      	ldr	r3, [pc, #256]	; (8016248 <etharp_output_to_arp_index+0x128>)
 8016146:	f240 22ee 	movw	r2, #750	; 0x2ee
 801614a:	4940      	ldr	r1, [pc, #256]	; (801624c <etharp_output_to_arp_index+0x12c>)
 801614c:	4840      	ldr	r0, [pc, #256]	; (8016250 <etharp_output_to_arp_index+0x130>)
 801614e:	f002 fa7f 	bl	8018650 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8016152:	79fa      	ldrb	r2, [r7, #7]
 8016154:	493b      	ldr	r1, [pc, #236]	; (8016244 <etharp_output_to_arp_index+0x124>)
 8016156:	4613      	mov	r3, r2
 8016158:	005b      	lsls	r3, r3, #1
 801615a:	4413      	add	r3, r2
 801615c:	00db      	lsls	r3, r3, #3
 801615e:	440b      	add	r3, r1
 8016160:	3314      	adds	r3, #20
 8016162:	781b      	ldrb	r3, [r3, #0]
 8016164:	2b02      	cmp	r3, #2
 8016166:	d153      	bne.n	8016210 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016168:	79fa      	ldrb	r2, [r7, #7]
 801616a:	4936      	ldr	r1, [pc, #216]	; (8016244 <etharp_output_to_arp_index+0x124>)
 801616c:	4613      	mov	r3, r2
 801616e:	005b      	lsls	r3, r3, #1
 8016170:	4413      	add	r3, r2
 8016172:	00db      	lsls	r3, r3, #3
 8016174:	440b      	add	r3, r1
 8016176:	3312      	adds	r3, #18
 8016178:	881b      	ldrh	r3, [r3, #0]
 801617a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801617e:	d919      	bls.n	80161b4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016180:	79fa      	ldrb	r2, [r7, #7]
 8016182:	4613      	mov	r3, r2
 8016184:	005b      	lsls	r3, r3, #1
 8016186:	4413      	add	r3, r2
 8016188:	00db      	lsls	r3, r3, #3
 801618a:	4a2e      	ldr	r2, [pc, #184]	; (8016244 <etharp_output_to_arp_index+0x124>)
 801618c:	4413      	add	r3, r2
 801618e:	3304      	adds	r3, #4
 8016190:	4619      	mov	r1, r3
 8016192:	68f8      	ldr	r0, [r7, #12]
 8016194:	f000 fb4c 	bl	8016830 <etharp_request>
 8016198:	4603      	mov	r3, r0
 801619a:	2b00      	cmp	r3, #0
 801619c:	d138      	bne.n	8016210 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801619e:	79fa      	ldrb	r2, [r7, #7]
 80161a0:	4928      	ldr	r1, [pc, #160]	; (8016244 <etharp_output_to_arp_index+0x124>)
 80161a2:	4613      	mov	r3, r2
 80161a4:	005b      	lsls	r3, r3, #1
 80161a6:	4413      	add	r3, r2
 80161a8:	00db      	lsls	r3, r3, #3
 80161aa:	440b      	add	r3, r1
 80161ac:	3314      	adds	r3, #20
 80161ae:	2203      	movs	r2, #3
 80161b0:	701a      	strb	r2, [r3, #0]
 80161b2:	e02d      	b.n	8016210 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80161b4:	79fa      	ldrb	r2, [r7, #7]
 80161b6:	4923      	ldr	r1, [pc, #140]	; (8016244 <etharp_output_to_arp_index+0x124>)
 80161b8:	4613      	mov	r3, r2
 80161ba:	005b      	lsls	r3, r3, #1
 80161bc:	4413      	add	r3, r2
 80161be:	00db      	lsls	r3, r3, #3
 80161c0:	440b      	add	r3, r1
 80161c2:	3312      	adds	r3, #18
 80161c4:	881b      	ldrh	r3, [r3, #0]
 80161c6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80161ca:	d321      	bcc.n	8016210 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80161cc:	79fa      	ldrb	r2, [r7, #7]
 80161ce:	4613      	mov	r3, r2
 80161d0:	005b      	lsls	r3, r3, #1
 80161d2:	4413      	add	r3, r2
 80161d4:	00db      	lsls	r3, r3, #3
 80161d6:	4a1b      	ldr	r2, [pc, #108]	; (8016244 <etharp_output_to_arp_index+0x124>)
 80161d8:	4413      	add	r3, r2
 80161da:	1d19      	adds	r1, r3, #4
 80161dc:	79fa      	ldrb	r2, [r7, #7]
 80161de:	4613      	mov	r3, r2
 80161e0:	005b      	lsls	r3, r3, #1
 80161e2:	4413      	add	r3, r2
 80161e4:	00db      	lsls	r3, r3, #3
 80161e6:	3308      	adds	r3, #8
 80161e8:	4a16      	ldr	r2, [pc, #88]	; (8016244 <etharp_output_to_arp_index+0x124>)
 80161ea:	4413      	add	r3, r2
 80161ec:	3304      	adds	r3, #4
 80161ee:	461a      	mov	r2, r3
 80161f0:	68f8      	ldr	r0, [r7, #12]
 80161f2:	f000 fafb 	bl	80167ec <etharp_request_dst>
 80161f6:	4603      	mov	r3, r0
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d109      	bne.n	8016210 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80161fc:	79fa      	ldrb	r2, [r7, #7]
 80161fe:	4911      	ldr	r1, [pc, #68]	; (8016244 <etharp_output_to_arp_index+0x124>)
 8016200:	4613      	mov	r3, r2
 8016202:	005b      	lsls	r3, r3, #1
 8016204:	4413      	add	r3, r2
 8016206:	00db      	lsls	r3, r3, #3
 8016208:	440b      	add	r3, r1
 801620a:	3314      	adds	r3, #20
 801620c:	2203      	movs	r2, #3
 801620e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8016216:	79fa      	ldrb	r2, [r7, #7]
 8016218:	4613      	mov	r3, r2
 801621a:	005b      	lsls	r3, r3, #1
 801621c:	4413      	add	r3, r2
 801621e:	00db      	lsls	r3, r3, #3
 8016220:	3308      	adds	r3, #8
 8016222:	4a08      	ldr	r2, [pc, #32]	; (8016244 <etharp_output_to_arp_index+0x124>)
 8016224:	4413      	add	r3, r2
 8016226:	3304      	adds	r3, #4
 8016228:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801622c:	9200      	str	r2, [sp, #0]
 801622e:	460a      	mov	r2, r1
 8016230:	68b9      	ldr	r1, [r7, #8]
 8016232:	68f8      	ldr	r0, [r7, #12]
 8016234:	f001 ff7e 	bl	8018134 <ethernet_output>
 8016238:	4603      	mov	r3, r0
}
 801623a:	4618      	mov	r0, r3
 801623c:	3710      	adds	r7, #16
 801623e:	46bd      	mov	sp, r7
 8016240:	bd80      	pop	{r7, pc}
 8016242:	bf00      	nop
 8016244:	2000d2ac 	.word	0x2000d2ac
 8016248:	0801ce88 	.word	0x0801ce88
 801624c:	0801cff8 	.word	0x0801cff8
 8016250:	0801cf00 	.word	0x0801cf00

08016254 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016254:	b580      	push	{r7, lr}
 8016256:	b08a      	sub	sp, #40	; 0x28
 8016258:	af02      	add	r7, sp, #8
 801625a:	60f8      	str	r0, [r7, #12]
 801625c:	60b9      	str	r1, [r7, #8]
 801625e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016264:	68fb      	ldr	r3, [r7, #12]
 8016266:	2b00      	cmp	r3, #0
 8016268:	d106      	bne.n	8016278 <etharp_output+0x24>
 801626a:	4b73      	ldr	r3, [pc, #460]	; (8016438 <etharp_output+0x1e4>)
 801626c:	f240 321e 	movw	r2, #798	; 0x31e
 8016270:	4972      	ldr	r1, [pc, #456]	; (801643c <etharp_output+0x1e8>)
 8016272:	4873      	ldr	r0, [pc, #460]	; (8016440 <etharp_output+0x1ec>)
 8016274:	f002 f9ec 	bl	8018650 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016278:	68bb      	ldr	r3, [r7, #8]
 801627a:	2b00      	cmp	r3, #0
 801627c:	d106      	bne.n	801628c <etharp_output+0x38>
 801627e:	4b6e      	ldr	r3, [pc, #440]	; (8016438 <etharp_output+0x1e4>)
 8016280:	f240 321f 	movw	r2, #799	; 0x31f
 8016284:	496f      	ldr	r1, [pc, #444]	; (8016444 <etharp_output+0x1f0>)
 8016286:	486e      	ldr	r0, [pc, #440]	; (8016440 <etharp_output+0x1ec>)
 8016288:	f002 f9e2 	bl	8018650 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	2b00      	cmp	r3, #0
 8016290:	d106      	bne.n	80162a0 <etharp_output+0x4c>
 8016292:	4b69      	ldr	r3, [pc, #420]	; (8016438 <etharp_output+0x1e4>)
 8016294:	f44f 7248 	mov.w	r2, #800	; 0x320
 8016298:	496b      	ldr	r1, [pc, #428]	; (8016448 <etharp_output+0x1f4>)
 801629a:	4869      	ldr	r0, [pc, #420]	; (8016440 <etharp_output+0x1ec>)
 801629c:	f002 f9d8 	bl	8018650 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	681b      	ldr	r3, [r3, #0]
 80162a4:	68f9      	ldr	r1, [r7, #12]
 80162a6:	4618      	mov	r0, r3
 80162a8:	f000 fef8 	bl	801709c <ip4_addr_isbroadcast_u32>
 80162ac:	4603      	mov	r3, r0
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d002      	beq.n	80162b8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80162b2:	4b66      	ldr	r3, [pc, #408]	; (801644c <etharp_output+0x1f8>)
 80162b4:	61fb      	str	r3, [r7, #28]
 80162b6:	e0af      	b.n	8016418 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	681b      	ldr	r3, [r3, #0]
 80162bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80162c0:	2be0      	cmp	r3, #224	; 0xe0
 80162c2:	d118      	bne.n	80162f6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80162c4:	2301      	movs	r3, #1
 80162c6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80162c8:	2300      	movs	r3, #0
 80162ca:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80162cc:	235e      	movs	r3, #94	; 0x5e
 80162ce:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	3301      	adds	r3, #1
 80162d4:	781b      	ldrb	r3, [r3, #0]
 80162d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80162da:	b2db      	uxtb	r3, r3
 80162dc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	3302      	adds	r3, #2
 80162e2:	781b      	ldrb	r3, [r3, #0]
 80162e4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	3303      	adds	r3, #3
 80162ea:	781b      	ldrb	r3, [r3, #0]
 80162ec:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80162ee:	f107 0310 	add.w	r3, r7, #16
 80162f2:	61fb      	str	r3, [r7, #28]
 80162f4:	e090      	b.n	8016418 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	681a      	ldr	r2, [r3, #0]
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	3304      	adds	r3, #4
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	405a      	eors	r2, r3
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	3308      	adds	r3, #8
 8016306:	681b      	ldr	r3, [r3, #0]
 8016308:	4013      	ands	r3, r2
 801630a:	2b00      	cmp	r3, #0
 801630c:	d012      	beq.n	8016334 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	681b      	ldr	r3, [r3, #0]
 8016312:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016314:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8016318:	4293      	cmp	r3, r2
 801631a:	d00b      	beq.n	8016334 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801631c:	68fb      	ldr	r3, [r7, #12]
 801631e:	330c      	adds	r3, #12
 8016320:	681b      	ldr	r3, [r3, #0]
 8016322:	2b00      	cmp	r3, #0
 8016324:	d003      	beq.n	801632e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	330c      	adds	r3, #12
 801632a:	61bb      	str	r3, [r7, #24]
 801632c:	e002      	b.n	8016334 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801632e:	f06f 0303 	mvn.w	r3, #3
 8016332:	e07d      	b.n	8016430 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016334:	4b46      	ldr	r3, [pc, #280]	; (8016450 <etharp_output+0x1fc>)
 8016336:	781b      	ldrb	r3, [r3, #0]
 8016338:	4619      	mov	r1, r3
 801633a:	4a46      	ldr	r2, [pc, #280]	; (8016454 <etharp_output+0x200>)
 801633c:	460b      	mov	r3, r1
 801633e:	005b      	lsls	r3, r3, #1
 8016340:	440b      	add	r3, r1
 8016342:	00db      	lsls	r3, r3, #3
 8016344:	4413      	add	r3, r2
 8016346:	3314      	adds	r3, #20
 8016348:	781b      	ldrb	r3, [r3, #0]
 801634a:	2b01      	cmp	r3, #1
 801634c:	d925      	bls.n	801639a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801634e:	4b40      	ldr	r3, [pc, #256]	; (8016450 <etharp_output+0x1fc>)
 8016350:	781b      	ldrb	r3, [r3, #0]
 8016352:	4619      	mov	r1, r3
 8016354:	4a3f      	ldr	r2, [pc, #252]	; (8016454 <etharp_output+0x200>)
 8016356:	460b      	mov	r3, r1
 8016358:	005b      	lsls	r3, r3, #1
 801635a:	440b      	add	r3, r1
 801635c:	00db      	lsls	r3, r3, #3
 801635e:	4413      	add	r3, r2
 8016360:	3308      	adds	r3, #8
 8016362:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016364:	68fa      	ldr	r2, [r7, #12]
 8016366:	429a      	cmp	r2, r3
 8016368:	d117      	bne.n	801639a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801636a:	69bb      	ldr	r3, [r7, #24]
 801636c:	681a      	ldr	r2, [r3, #0]
 801636e:	4b38      	ldr	r3, [pc, #224]	; (8016450 <etharp_output+0x1fc>)
 8016370:	781b      	ldrb	r3, [r3, #0]
 8016372:	4618      	mov	r0, r3
 8016374:	4937      	ldr	r1, [pc, #220]	; (8016454 <etharp_output+0x200>)
 8016376:	4603      	mov	r3, r0
 8016378:	005b      	lsls	r3, r3, #1
 801637a:	4403      	add	r3, r0
 801637c:	00db      	lsls	r3, r3, #3
 801637e:	440b      	add	r3, r1
 8016380:	3304      	adds	r3, #4
 8016382:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016384:	429a      	cmp	r2, r3
 8016386:	d108      	bne.n	801639a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016388:	4b31      	ldr	r3, [pc, #196]	; (8016450 <etharp_output+0x1fc>)
 801638a:	781b      	ldrb	r3, [r3, #0]
 801638c:	461a      	mov	r2, r3
 801638e:	68b9      	ldr	r1, [r7, #8]
 8016390:	68f8      	ldr	r0, [r7, #12]
 8016392:	f7ff fec5 	bl	8016120 <etharp_output_to_arp_index>
 8016396:	4603      	mov	r3, r0
 8016398:	e04a      	b.n	8016430 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801639a:	2300      	movs	r3, #0
 801639c:	75fb      	strb	r3, [r7, #23]
 801639e:	e031      	b.n	8016404 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80163a0:	7dfa      	ldrb	r2, [r7, #23]
 80163a2:	492c      	ldr	r1, [pc, #176]	; (8016454 <etharp_output+0x200>)
 80163a4:	4613      	mov	r3, r2
 80163a6:	005b      	lsls	r3, r3, #1
 80163a8:	4413      	add	r3, r2
 80163aa:	00db      	lsls	r3, r3, #3
 80163ac:	440b      	add	r3, r1
 80163ae:	3314      	adds	r3, #20
 80163b0:	781b      	ldrb	r3, [r3, #0]
 80163b2:	2b01      	cmp	r3, #1
 80163b4:	d923      	bls.n	80163fe <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80163b6:	7dfa      	ldrb	r2, [r7, #23]
 80163b8:	4926      	ldr	r1, [pc, #152]	; (8016454 <etharp_output+0x200>)
 80163ba:	4613      	mov	r3, r2
 80163bc:	005b      	lsls	r3, r3, #1
 80163be:	4413      	add	r3, r2
 80163c0:	00db      	lsls	r3, r3, #3
 80163c2:	440b      	add	r3, r1
 80163c4:	3308      	adds	r3, #8
 80163c6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80163c8:	68fa      	ldr	r2, [r7, #12]
 80163ca:	429a      	cmp	r2, r3
 80163cc:	d117      	bne.n	80163fe <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80163ce:	69bb      	ldr	r3, [r7, #24]
 80163d0:	6819      	ldr	r1, [r3, #0]
 80163d2:	7dfa      	ldrb	r2, [r7, #23]
 80163d4:	481f      	ldr	r0, [pc, #124]	; (8016454 <etharp_output+0x200>)
 80163d6:	4613      	mov	r3, r2
 80163d8:	005b      	lsls	r3, r3, #1
 80163da:	4413      	add	r3, r2
 80163dc:	00db      	lsls	r3, r3, #3
 80163de:	4403      	add	r3, r0
 80163e0:	3304      	adds	r3, #4
 80163e2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80163e4:	4299      	cmp	r1, r3
 80163e6:	d10a      	bne.n	80163fe <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80163e8:	4a19      	ldr	r2, [pc, #100]	; (8016450 <etharp_output+0x1fc>)
 80163ea:	7dfb      	ldrb	r3, [r7, #23]
 80163ec:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80163ee:	7dfb      	ldrb	r3, [r7, #23]
 80163f0:	461a      	mov	r2, r3
 80163f2:	68b9      	ldr	r1, [r7, #8]
 80163f4:	68f8      	ldr	r0, [r7, #12]
 80163f6:	f7ff fe93 	bl	8016120 <etharp_output_to_arp_index>
 80163fa:	4603      	mov	r3, r0
 80163fc:	e018      	b.n	8016430 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80163fe:	7dfb      	ldrb	r3, [r7, #23]
 8016400:	3301      	adds	r3, #1
 8016402:	75fb      	strb	r3, [r7, #23]
 8016404:	7dfb      	ldrb	r3, [r7, #23]
 8016406:	2b09      	cmp	r3, #9
 8016408:	d9ca      	bls.n	80163a0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801640a:	68ba      	ldr	r2, [r7, #8]
 801640c:	69b9      	ldr	r1, [r7, #24]
 801640e:	68f8      	ldr	r0, [r7, #12]
 8016410:	f000 f822 	bl	8016458 <etharp_query>
 8016414:	4603      	mov	r3, r0
 8016416:	e00b      	b.n	8016430 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801641e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016422:	9300      	str	r3, [sp, #0]
 8016424:	69fb      	ldr	r3, [r7, #28]
 8016426:	68b9      	ldr	r1, [r7, #8]
 8016428:	68f8      	ldr	r0, [r7, #12]
 801642a:	f001 fe83 	bl	8018134 <ethernet_output>
 801642e:	4603      	mov	r3, r0
}
 8016430:	4618      	mov	r0, r3
 8016432:	3720      	adds	r7, #32
 8016434:	46bd      	mov	sp, r7
 8016436:	bd80      	pop	{r7, pc}
 8016438:	0801ce88 	.word	0x0801ce88
 801643c:	0801cfd8 	.word	0x0801cfd8
 8016440:	0801cf00 	.word	0x0801cf00
 8016444:	0801d028 	.word	0x0801d028
 8016448:	0801cfc8 	.word	0x0801cfc8
 801644c:	0801d730 	.word	0x0801d730
 8016450:	2000d39c 	.word	0x2000d39c
 8016454:	2000d2ac 	.word	0x2000d2ac

08016458 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016458:	b580      	push	{r7, lr}
 801645a:	b08c      	sub	sp, #48	; 0x30
 801645c:	af02      	add	r7, sp, #8
 801645e:	60f8      	str	r0, [r7, #12]
 8016460:	60b9      	str	r1, [r7, #8]
 8016462:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	3326      	adds	r3, #38	; 0x26
 8016468:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801646a:	23ff      	movs	r3, #255	; 0xff
 801646c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8016470:	2300      	movs	r3, #0
 8016472:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016474:	68bb      	ldr	r3, [r7, #8]
 8016476:	681b      	ldr	r3, [r3, #0]
 8016478:	68f9      	ldr	r1, [r7, #12]
 801647a:	4618      	mov	r0, r3
 801647c:	f000 fe0e 	bl	801709c <ip4_addr_isbroadcast_u32>
 8016480:	4603      	mov	r3, r0
 8016482:	2b00      	cmp	r3, #0
 8016484:	d10c      	bne.n	80164a0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016486:	68bb      	ldr	r3, [r7, #8]
 8016488:	681b      	ldr	r3, [r3, #0]
 801648a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801648e:	2be0      	cmp	r3, #224	; 0xe0
 8016490:	d006      	beq.n	80164a0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016492:	68bb      	ldr	r3, [r7, #8]
 8016494:	2b00      	cmp	r3, #0
 8016496:	d003      	beq.n	80164a0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016498:	68bb      	ldr	r3, [r7, #8]
 801649a:	681b      	ldr	r3, [r3, #0]
 801649c:	2b00      	cmp	r3, #0
 801649e:	d102      	bne.n	80164a6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80164a0:	f06f 030f 	mvn.w	r3, #15
 80164a4:	e101      	b.n	80166aa <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80164a6:	68fa      	ldr	r2, [r7, #12]
 80164a8:	2101      	movs	r1, #1
 80164aa:	68b8      	ldr	r0, [r7, #8]
 80164ac:	f7ff fb60 	bl	8015b70 <etharp_find_entry>
 80164b0:	4603      	mov	r3, r0
 80164b2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80164b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	da02      	bge.n	80164c2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80164bc:	8a7b      	ldrh	r3, [r7, #18]
 80164be:	b25b      	sxtb	r3, r3
 80164c0:	e0f3      	b.n	80166aa <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80164c2:	8a7b      	ldrh	r3, [r7, #18]
 80164c4:	2b7e      	cmp	r3, #126	; 0x7e
 80164c6:	d906      	bls.n	80164d6 <etharp_query+0x7e>
 80164c8:	4b7a      	ldr	r3, [pc, #488]	; (80166b4 <etharp_query+0x25c>)
 80164ca:	f240 32c1 	movw	r2, #961	; 0x3c1
 80164ce:	497a      	ldr	r1, [pc, #488]	; (80166b8 <etharp_query+0x260>)
 80164d0:	487a      	ldr	r0, [pc, #488]	; (80166bc <etharp_query+0x264>)
 80164d2:	f002 f8bd 	bl	8018650 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80164d6:	8a7b      	ldrh	r3, [r7, #18]
 80164d8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80164da:	7c7a      	ldrb	r2, [r7, #17]
 80164dc:	4978      	ldr	r1, [pc, #480]	; (80166c0 <etharp_query+0x268>)
 80164de:	4613      	mov	r3, r2
 80164e0:	005b      	lsls	r3, r3, #1
 80164e2:	4413      	add	r3, r2
 80164e4:	00db      	lsls	r3, r3, #3
 80164e6:	440b      	add	r3, r1
 80164e8:	3314      	adds	r3, #20
 80164ea:	781b      	ldrb	r3, [r3, #0]
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d115      	bne.n	801651c <etharp_query+0xc4>
    is_new_entry = 1;
 80164f0:	2301      	movs	r3, #1
 80164f2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80164f4:	7c7a      	ldrb	r2, [r7, #17]
 80164f6:	4972      	ldr	r1, [pc, #456]	; (80166c0 <etharp_query+0x268>)
 80164f8:	4613      	mov	r3, r2
 80164fa:	005b      	lsls	r3, r3, #1
 80164fc:	4413      	add	r3, r2
 80164fe:	00db      	lsls	r3, r3, #3
 8016500:	440b      	add	r3, r1
 8016502:	3314      	adds	r3, #20
 8016504:	2201      	movs	r2, #1
 8016506:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016508:	7c7a      	ldrb	r2, [r7, #17]
 801650a:	496d      	ldr	r1, [pc, #436]	; (80166c0 <etharp_query+0x268>)
 801650c:	4613      	mov	r3, r2
 801650e:	005b      	lsls	r3, r3, #1
 8016510:	4413      	add	r3, r2
 8016512:	00db      	lsls	r3, r3, #3
 8016514:	440b      	add	r3, r1
 8016516:	3308      	adds	r3, #8
 8016518:	68fa      	ldr	r2, [r7, #12]
 801651a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801651c:	7c7a      	ldrb	r2, [r7, #17]
 801651e:	4968      	ldr	r1, [pc, #416]	; (80166c0 <etharp_query+0x268>)
 8016520:	4613      	mov	r3, r2
 8016522:	005b      	lsls	r3, r3, #1
 8016524:	4413      	add	r3, r2
 8016526:	00db      	lsls	r3, r3, #3
 8016528:	440b      	add	r3, r1
 801652a:	3314      	adds	r3, #20
 801652c:	781b      	ldrb	r3, [r3, #0]
 801652e:	2b01      	cmp	r3, #1
 8016530:	d011      	beq.n	8016556 <etharp_query+0xfe>
 8016532:	7c7a      	ldrb	r2, [r7, #17]
 8016534:	4962      	ldr	r1, [pc, #392]	; (80166c0 <etharp_query+0x268>)
 8016536:	4613      	mov	r3, r2
 8016538:	005b      	lsls	r3, r3, #1
 801653a:	4413      	add	r3, r2
 801653c:	00db      	lsls	r3, r3, #3
 801653e:	440b      	add	r3, r1
 8016540:	3314      	adds	r3, #20
 8016542:	781b      	ldrb	r3, [r3, #0]
 8016544:	2b01      	cmp	r3, #1
 8016546:	d806      	bhi.n	8016556 <etharp_query+0xfe>
 8016548:	4b5a      	ldr	r3, [pc, #360]	; (80166b4 <etharp_query+0x25c>)
 801654a:	f240 32cd 	movw	r2, #973	; 0x3cd
 801654e:	495d      	ldr	r1, [pc, #372]	; (80166c4 <etharp_query+0x26c>)
 8016550:	485a      	ldr	r0, [pc, #360]	; (80166bc <etharp_query+0x264>)
 8016552:	f002 f87d 	bl	8018650 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016556:	6a3b      	ldr	r3, [r7, #32]
 8016558:	2b00      	cmp	r3, #0
 801655a:	d102      	bne.n	8016562 <etharp_query+0x10a>
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	2b00      	cmp	r3, #0
 8016560:	d10c      	bne.n	801657c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8016562:	68b9      	ldr	r1, [r7, #8]
 8016564:	68f8      	ldr	r0, [r7, #12]
 8016566:	f000 f963 	bl	8016830 <etharp_request>
 801656a:	4603      	mov	r3, r0
 801656c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	2b00      	cmp	r3, #0
 8016574:	d102      	bne.n	801657c <etharp_query+0x124>
      return result;
 8016576:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801657a:	e096      	b.n	80166aa <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	2b00      	cmp	r3, #0
 8016580:	d106      	bne.n	8016590 <etharp_query+0x138>
 8016582:	4b4c      	ldr	r3, [pc, #304]	; (80166b4 <etharp_query+0x25c>)
 8016584:	f240 32e1 	movw	r2, #993	; 0x3e1
 8016588:	494f      	ldr	r1, [pc, #316]	; (80166c8 <etharp_query+0x270>)
 801658a:	484c      	ldr	r0, [pc, #304]	; (80166bc <etharp_query+0x264>)
 801658c:	f002 f860 	bl	8018650 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8016590:	7c7a      	ldrb	r2, [r7, #17]
 8016592:	494b      	ldr	r1, [pc, #300]	; (80166c0 <etharp_query+0x268>)
 8016594:	4613      	mov	r3, r2
 8016596:	005b      	lsls	r3, r3, #1
 8016598:	4413      	add	r3, r2
 801659a:	00db      	lsls	r3, r3, #3
 801659c:	440b      	add	r3, r1
 801659e:	3314      	adds	r3, #20
 80165a0:	781b      	ldrb	r3, [r3, #0]
 80165a2:	2b01      	cmp	r3, #1
 80165a4:	d917      	bls.n	80165d6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80165a6:	4a49      	ldr	r2, [pc, #292]	; (80166cc <etharp_query+0x274>)
 80165a8:	7c7b      	ldrb	r3, [r7, #17]
 80165aa:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80165ac:	7c7a      	ldrb	r2, [r7, #17]
 80165ae:	4613      	mov	r3, r2
 80165b0:	005b      	lsls	r3, r3, #1
 80165b2:	4413      	add	r3, r2
 80165b4:	00db      	lsls	r3, r3, #3
 80165b6:	3308      	adds	r3, #8
 80165b8:	4a41      	ldr	r2, [pc, #260]	; (80166c0 <etharp_query+0x268>)
 80165ba:	4413      	add	r3, r2
 80165bc:	3304      	adds	r3, #4
 80165be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80165c2:	9200      	str	r2, [sp, #0]
 80165c4:	697a      	ldr	r2, [r7, #20]
 80165c6:	6879      	ldr	r1, [r7, #4]
 80165c8:	68f8      	ldr	r0, [r7, #12]
 80165ca:	f001 fdb3 	bl	8018134 <ethernet_output>
 80165ce:	4603      	mov	r3, r0
 80165d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80165d4:	e067      	b.n	80166a6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80165d6:	7c7a      	ldrb	r2, [r7, #17]
 80165d8:	4939      	ldr	r1, [pc, #228]	; (80166c0 <etharp_query+0x268>)
 80165da:	4613      	mov	r3, r2
 80165dc:	005b      	lsls	r3, r3, #1
 80165de:	4413      	add	r3, r2
 80165e0:	00db      	lsls	r3, r3, #3
 80165e2:	440b      	add	r3, r1
 80165e4:	3314      	adds	r3, #20
 80165e6:	781b      	ldrb	r3, [r3, #0]
 80165e8:	2b01      	cmp	r3, #1
 80165ea:	d15c      	bne.n	80166a6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80165ec:	2300      	movs	r3, #0
 80165ee:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80165f4:	e01c      	b.n	8016630 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80165f6:	69fb      	ldr	r3, [r7, #28]
 80165f8:	895a      	ldrh	r2, [r3, #10]
 80165fa:	69fb      	ldr	r3, [r7, #28]
 80165fc:	891b      	ldrh	r3, [r3, #8]
 80165fe:	429a      	cmp	r2, r3
 8016600:	d10a      	bne.n	8016618 <etharp_query+0x1c0>
 8016602:	69fb      	ldr	r3, [r7, #28]
 8016604:	681b      	ldr	r3, [r3, #0]
 8016606:	2b00      	cmp	r3, #0
 8016608:	d006      	beq.n	8016618 <etharp_query+0x1c0>
 801660a:	4b2a      	ldr	r3, [pc, #168]	; (80166b4 <etharp_query+0x25c>)
 801660c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8016610:	492f      	ldr	r1, [pc, #188]	; (80166d0 <etharp_query+0x278>)
 8016612:	482a      	ldr	r0, [pc, #168]	; (80166bc <etharp_query+0x264>)
 8016614:	f002 f81c 	bl	8018650 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016618:	69fb      	ldr	r3, [r7, #28]
 801661a:	7b1b      	ldrb	r3, [r3, #12]
 801661c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016620:	2b00      	cmp	r3, #0
 8016622:	d002      	beq.n	801662a <etharp_query+0x1d2>
        copy_needed = 1;
 8016624:	2301      	movs	r3, #1
 8016626:	61bb      	str	r3, [r7, #24]
        break;
 8016628:	e005      	b.n	8016636 <etharp_query+0x1de>
      }
      p = p->next;
 801662a:	69fb      	ldr	r3, [r7, #28]
 801662c:	681b      	ldr	r3, [r3, #0]
 801662e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016630:	69fb      	ldr	r3, [r7, #28]
 8016632:	2b00      	cmp	r3, #0
 8016634:	d1df      	bne.n	80165f6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8016636:	69bb      	ldr	r3, [r7, #24]
 8016638:	2b00      	cmp	r3, #0
 801663a:	d007      	beq.n	801664c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801663c:	687a      	ldr	r2, [r7, #4]
 801663e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8016642:	200e      	movs	r0, #14
 8016644:	f7f8 fb68 	bl	800ed18 <pbuf_clone>
 8016648:	61f8      	str	r0, [r7, #28]
 801664a:	e004      	b.n	8016656 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8016650:	69f8      	ldr	r0, [r7, #28]
 8016652:	f7f8 f98f 	bl	800e974 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016656:	69fb      	ldr	r3, [r7, #28]
 8016658:	2b00      	cmp	r3, #0
 801665a:	d021      	beq.n	80166a0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801665c:	7c7a      	ldrb	r2, [r7, #17]
 801665e:	4918      	ldr	r1, [pc, #96]	; (80166c0 <etharp_query+0x268>)
 8016660:	4613      	mov	r3, r2
 8016662:	005b      	lsls	r3, r3, #1
 8016664:	4413      	add	r3, r2
 8016666:	00db      	lsls	r3, r3, #3
 8016668:	440b      	add	r3, r1
 801666a:	681b      	ldr	r3, [r3, #0]
 801666c:	2b00      	cmp	r3, #0
 801666e:	d00a      	beq.n	8016686 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8016670:	7c7a      	ldrb	r2, [r7, #17]
 8016672:	4913      	ldr	r1, [pc, #76]	; (80166c0 <etharp_query+0x268>)
 8016674:	4613      	mov	r3, r2
 8016676:	005b      	lsls	r3, r3, #1
 8016678:	4413      	add	r3, r2
 801667a:	00db      	lsls	r3, r3, #3
 801667c:	440b      	add	r3, r1
 801667e:	681b      	ldr	r3, [r3, #0]
 8016680:	4618      	mov	r0, r3
 8016682:	f7f8 f8d1 	bl	800e828 <pbuf_free>
      }
      arp_table[i].q = p;
 8016686:	7c7a      	ldrb	r2, [r7, #17]
 8016688:	490d      	ldr	r1, [pc, #52]	; (80166c0 <etharp_query+0x268>)
 801668a:	4613      	mov	r3, r2
 801668c:	005b      	lsls	r3, r3, #1
 801668e:	4413      	add	r3, r2
 8016690:	00db      	lsls	r3, r3, #3
 8016692:	440b      	add	r3, r1
 8016694:	69fa      	ldr	r2, [r7, #28]
 8016696:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016698:	2300      	movs	r3, #0
 801669a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801669e:	e002      	b.n	80166a6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80166a0:	23ff      	movs	r3, #255	; 0xff
 80166a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80166a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80166aa:	4618      	mov	r0, r3
 80166ac:	3728      	adds	r7, #40	; 0x28
 80166ae:	46bd      	mov	sp, r7
 80166b0:	bd80      	pop	{r7, pc}
 80166b2:	bf00      	nop
 80166b4:	0801ce88 	.word	0x0801ce88
 80166b8:	0801d034 	.word	0x0801d034
 80166bc:	0801cf00 	.word	0x0801cf00
 80166c0:	2000d2ac 	.word	0x2000d2ac
 80166c4:	0801d044 	.word	0x0801d044
 80166c8:	0801d028 	.word	0x0801d028
 80166cc:	2000d39c 	.word	0x2000d39c
 80166d0:	0801d06c 	.word	0x0801d06c

080166d4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80166d4:	b580      	push	{r7, lr}
 80166d6:	b08a      	sub	sp, #40	; 0x28
 80166d8:	af02      	add	r7, sp, #8
 80166da:	60f8      	str	r0, [r7, #12]
 80166dc:	60b9      	str	r1, [r7, #8]
 80166de:	607a      	str	r2, [r7, #4]
 80166e0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80166e2:	2300      	movs	r3, #0
 80166e4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80166e6:	68fb      	ldr	r3, [r7, #12]
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	d106      	bne.n	80166fa <etharp_raw+0x26>
 80166ec:	4b3a      	ldr	r3, [pc, #232]	; (80167d8 <etharp_raw+0x104>)
 80166ee:	f240 4257 	movw	r2, #1111	; 0x457
 80166f2:	493a      	ldr	r1, [pc, #232]	; (80167dc <etharp_raw+0x108>)
 80166f4:	483a      	ldr	r0, [pc, #232]	; (80167e0 <etharp_raw+0x10c>)
 80166f6:	f001 ffab 	bl	8018650 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80166fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80166fe:	211c      	movs	r1, #28
 8016700:	200e      	movs	r0, #14
 8016702:	f7f7 fd7b 	bl	800e1fc <pbuf_alloc>
 8016706:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016708:	69bb      	ldr	r3, [r7, #24]
 801670a:	2b00      	cmp	r3, #0
 801670c:	d102      	bne.n	8016714 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801670e:	f04f 33ff 	mov.w	r3, #4294967295
 8016712:	e05d      	b.n	80167d0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016714:	69bb      	ldr	r3, [r7, #24]
 8016716:	895b      	ldrh	r3, [r3, #10]
 8016718:	2b1b      	cmp	r3, #27
 801671a:	d806      	bhi.n	801672a <etharp_raw+0x56>
 801671c:	4b2e      	ldr	r3, [pc, #184]	; (80167d8 <etharp_raw+0x104>)
 801671e:	f240 4262 	movw	r2, #1122	; 0x462
 8016722:	4930      	ldr	r1, [pc, #192]	; (80167e4 <etharp_raw+0x110>)
 8016724:	482e      	ldr	r0, [pc, #184]	; (80167e0 <etharp_raw+0x10c>)
 8016726:	f001 ff93 	bl	8018650 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801672a:	69bb      	ldr	r3, [r7, #24]
 801672c:	685b      	ldr	r3, [r3, #4]
 801672e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8016730:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016732:	4618      	mov	r0, r3
 8016734:	f7f6 fc9a 	bl	800d06c <lwip_htons>
 8016738:	4603      	mov	r3, r0
 801673a:	461a      	mov	r2, r3
 801673c:	697b      	ldr	r3, [r7, #20]
 801673e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8016740:	68fb      	ldr	r3, [r7, #12]
 8016742:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016746:	2b06      	cmp	r3, #6
 8016748:	d006      	beq.n	8016758 <etharp_raw+0x84>
 801674a:	4b23      	ldr	r3, [pc, #140]	; (80167d8 <etharp_raw+0x104>)
 801674c:	f240 4269 	movw	r2, #1129	; 0x469
 8016750:	4925      	ldr	r1, [pc, #148]	; (80167e8 <etharp_raw+0x114>)
 8016752:	4823      	ldr	r0, [pc, #140]	; (80167e0 <etharp_raw+0x10c>)
 8016754:	f001 ff7c 	bl	8018650 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016758:	697b      	ldr	r3, [r7, #20]
 801675a:	3308      	adds	r3, #8
 801675c:	2206      	movs	r2, #6
 801675e:	6839      	ldr	r1, [r7, #0]
 8016760:	4618      	mov	r0, r3
 8016762:	f001 ff45 	bl	80185f0 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016766:	697b      	ldr	r3, [r7, #20]
 8016768:	3312      	adds	r3, #18
 801676a:	2206      	movs	r2, #6
 801676c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801676e:	4618      	mov	r0, r3
 8016770:	f001 ff3e 	bl	80185f0 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016774:	697b      	ldr	r3, [r7, #20]
 8016776:	330e      	adds	r3, #14
 8016778:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801677a:	6812      	ldr	r2, [r2, #0]
 801677c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801677e:	697b      	ldr	r3, [r7, #20]
 8016780:	3318      	adds	r3, #24
 8016782:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016784:	6812      	ldr	r2, [r2, #0]
 8016786:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016788:	697b      	ldr	r3, [r7, #20]
 801678a:	2200      	movs	r2, #0
 801678c:	701a      	strb	r2, [r3, #0]
 801678e:	2200      	movs	r2, #0
 8016790:	f042 0201 	orr.w	r2, r2, #1
 8016794:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016796:	697b      	ldr	r3, [r7, #20]
 8016798:	2200      	movs	r2, #0
 801679a:	f042 0208 	orr.w	r2, r2, #8
 801679e:	709a      	strb	r2, [r3, #2]
 80167a0:	2200      	movs	r2, #0
 80167a2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80167a4:	697b      	ldr	r3, [r7, #20]
 80167a6:	2206      	movs	r2, #6
 80167a8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80167aa:	697b      	ldr	r3, [r7, #20]
 80167ac:	2204      	movs	r2, #4
 80167ae:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80167b0:	f640 0306 	movw	r3, #2054	; 0x806
 80167b4:	9300      	str	r3, [sp, #0]
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	68ba      	ldr	r2, [r7, #8]
 80167ba:	69b9      	ldr	r1, [r7, #24]
 80167bc:	68f8      	ldr	r0, [r7, #12]
 80167be:	f001 fcb9 	bl	8018134 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80167c2:	69b8      	ldr	r0, [r7, #24]
 80167c4:	f7f8 f830 	bl	800e828 <pbuf_free>
  p = NULL;
 80167c8:	2300      	movs	r3, #0
 80167ca:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80167cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80167d0:	4618      	mov	r0, r3
 80167d2:	3720      	adds	r7, #32
 80167d4:	46bd      	mov	sp, r7
 80167d6:	bd80      	pop	{r7, pc}
 80167d8:	0801ce88 	.word	0x0801ce88
 80167dc:	0801cfd8 	.word	0x0801cfd8
 80167e0:	0801cf00 	.word	0x0801cf00
 80167e4:	0801d088 	.word	0x0801d088
 80167e8:	0801d0bc 	.word	0x0801d0bc

080167ec <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80167ec:	b580      	push	{r7, lr}
 80167ee:	b088      	sub	sp, #32
 80167f0:	af04      	add	r7, sp, #16
 80167f2:	60f8      	str	r0, [r7, #12]
 80167f4:	60b9      	str	r1, [r7, #8]
 80167f6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80167f8:	68fb      	ldr	r3, [r7, #12]
 80167fa:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80167fe:	68fb      	ldr	r3, [r7, #12]
 8016800:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8016804:	68fb      	ldr	r3, [r7, #12]
 8016806:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016808:	2201      	movs	r2, #1
 801680a:	9203      	str	r2, [sp, #12]
 801680c:	68ba      	ldr	r2, [r7, #8]
 801680e:	9202      	str	r2, [sp, #8]
 8016810:	4a06      	ldr	r2, [pc, #24]	; (801682c <etharp_request_dst+0x40>)
 8016812:	9201      	str	r2, [sp, #4]
 8016814:	9300      	str	r3, [sp, #0]
 8016816:	4603      	mov	r3, r0
 8016818:	687a      	ldr	r2, [r7, #4]
 801681a:	68f8      	ldr	r0, [r7, #12]
 801681c:	f7ff ff5a 	bl	80166d4 <etharp_raw>
 8016820:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8016822:	4618      	mov	r0, r3
 8016824:	3710      	adds	r7, #16
 8016826:	46bd      	mov	sp, r7
 8016828:	bd80      	pop	{r7, pc}
 801682a:	bf00      	nop
 801682c:	0801d738 	.word	0x0801d738

08016830 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8016830:	b580      	push	{r7, lr}
 8016832:	b082      	sub	sp, #8
 8016834:	af00      	add	r7, sp, #0
 8016836:	6078      	str	r0, [r7, #4]
 8016838:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801683a:	4a05      	ldr	r2, [pc, #20]	; (8016850 <etharp_request+0x20>)
 801683c:	6839      	ldr	r1, [r7, #0]
 801683e:	6878      	ldr	r0, [r7, #4]
 8016840:	f7ff ffd4 	bl	80167ec <etharp_request_dst>
 8016844:	4603      	mov	r3, r0
}
 8016846:	4618      	mov	r0, r3
 8016848:	3708      	adds	r7, #8
 801684a:	46bd      	mov	sp, r7
 801684c:	bd80      	pop	{r7, pc}
 801684e:	bf00      	nop
 8016850:	0801d730 	.word	0x0801d730

08016854 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016854:	b580      	push	{r7, lr}
 8016856:	b08e      	sub	sp, #56	; 0x38
 8016858:	af04      	add	r7, sp, #16
 801685a:	6078      	str	r0, [r7, #4]
 801685c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801685e:	4b79      	ldr	r3, [pc, #484]	; (8016a44 <icmp_input+0x1f0>)
 8016860:	689b      	ldr	r3, [r3, #8]
 8016862:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8016864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016866:	781b      	ldrb	r3, [r3, #0]
 8016868:	f003 030f 	and.w	r3, r3, #15
 801686c:	b2db      	uxtb	r3, r3
 801686e:	009b      	lsls	r3, r3, #2
 8016870:	b2db      	uxtb	r3, r3
 8016872:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8016874:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016876:	2b13      	cmp	r3, #19
 8016878:	f240 80cd 	bls.w	8016a16 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	895b      	ldrh	r3, [r3, #10]
 8016880:	2b03      	cmp	r3, #3
 8016882:	f240 80ca 	bls.w	8016a1a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	685b      	ldr	r3, [r3, #4]
 801688a:	781b      	ldrb	r3, [r3, #0]
 801688c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8016890:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8016894:	2b00      	cmp	r3, #0
 8016896:	f000 80b7 	beq.w	8016a08 <icmp_input+0x1b4>
 801689a:	2b08      	cmp	r3, #8
 801689c:	f040 80b7 	bne.w	8016a0e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80168a0:	4b69      	ldr	r3, [pc, #420]	; (8016a48 <icmp_input+0x1f4>)
 80168a2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80168a4:	4b67      	ldr	r3, [pc, #412]	; (8016a44 <icmp_input+0x1f0>)
 80168a6:	695b      	ldr	r3, [r3, #20]
 80168a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80168ac:	2be0      	cmp	r3, #224	; 0xe0
 80168ae:	f000 80bb 	beq.w	8016a28 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80168b2:	4b64      	ldr	r3, [pc, #400]	; (8016a44 <icmp_input+0x1f0>)
 80168b4:	695b      	ldr	r3, [r3, #20]
 80168b6:	4a63      	ldr	r2, [pc, #396]	; (8016a44 <icmp_input+0x1f0>)
 80168b8:	6812      	ldr	r2, [r2, #0]
 80168ba:	4611      	mov	r1, r2
 80168bc:	4618      	mov	r0, r3
 80168be:	f000 fbed 	bl	801709c <ip4_addr_isbroadcast_u32>
 80168c2:	4603      	mov	r3, r0
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	f040 80b1 	bne.w	8016a2c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	891b      	ldrh	r3, [r3, #8]
 80168ce:	2b07      	cmp	r3, #7
 80168d0:	f240 80a5 	bls.w	8016a1e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80168d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80168d6:	330e      	adds	r3, #14
 80168d8:	4619      	mov	r1, r3
 80168da:	6878      	ldr	r0, [r7, #4]
 80168dc:	f7f7 fedc 	bl	800e698 <pbuf_add_header>
 80168e0:	4603      	mov	r3, r0
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d04b      	beq.n	801697e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	891a      	ldrh	r2, [r3, #8]
 80168ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80168ec:	4413      	add	r3, r2
 80168ee:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	891b      	ldrh	r3, [r3, #8]
 80168f4:	8b7a      	ldrh	r2, [r7, #26]
 80168f6:	429a      	cmp	r2, r3
 80168f8:	f0c0 809a 	bcc.w	8016a30 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80168fc:	8b7b      	ldrh	r3, [r7, #26]
 80168fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016902:	4619      	mov	r1, r3
 8016904:	200e      	movs	r0, #14
 8016906:	f7f7 fc79 	bl	800e1fc <pbuf_alloc>
 801690a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801690c:	697b      	ldr	r3, [r7, #20]
 801690e:	2b00      	cmp	r3, #0
 8016910:	f000 8090 	beq.w	8016a34 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016914:	697b      	ldr	r3, [r7, #20]
 8016916:	895b      	ldrh	r3, [r3, #10]
 8016918:	461a      	mov	r2, r3
 801691a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801691c:	3308      	adds	r3, #8
 801691e:	429a      	cmp	r2, r3
 8016920:	d203      	bcs.n	801692a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8016922:	6978      	ldr	r0, [r7, #20]
 8016924:	f7f7 ff80 	bl	800e828 <pbuf_free>
          goto icmperr;
 8016928:	e085      	b.n	8016a36 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801692a:	697b      	ldr	r3, [r7, #20]
 801692c:	685b      	ldr	r3, [r3, #4]
 801692e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016930:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016932:	4618      	mov	r0, r3
 8016934:	f001 fe5c 	bl	80185f0 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8016938:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801693a:	4619      	mov	r1, r3
 801693c:	6978      	ldr	r0, [r7, #20]
 801693e:	f7f7 febb 	bl	800e6b8 <pbuf_remove_header>
 8016942:	4603      	mov	r3, r0
 8016944:	2b00      	cmp	r3, #0
 8016946:	d009      	beq.n	801695c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8016948:	4b40      	ldr	r3, [pc, #256]	; (8016a4c <icmp_input+0x1f8>)
 801694a:	22b6      	movs	r2, #182	; 0xb6
 801694c:	4940      	ldr	r1, [pc, #256]	; (8016a50 <icmp_input+0x1fc>)
 801694e:	4841      	ldr	r0, [pc, #260]	; (8016a54 <icmp_input+0x200>)
 8016950:	f001 fe7e 	bl	8018650 <iprintf>
          pbuf_free(r);
 8016954:	6978      	ldr	r0, [r7, #20]
 8016956:	f7f7 ff67 	bl	800e828 <pbuf_free>
          goto icmperr;
 801695a:	e06c      	b.n	8016a36 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801695c:	6879      	ldr	r1, [r7, #4]
 801695e:	6978      	ldr	r0, [r7, #20]
 8016960:	f7f8 f896 	bl	800ea90 <pbuf_copy>
 8016964:	4603      	mov	r3, r0
 8016966:	2b00      	cmp	r3, #0
 8016968:	d003      	beq.n	8016972 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801696a:	6978      	ldr	r0, [r7, #20]
 801696c:	f7f7 ff5c 	bl	800e828 <pbuf_free>
          goto icmperr;
 8016970:	e061      	b.n	8016a36 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8016972:	6878      	ldr	r0, [r7, #4]
 8016974:	f7f7 ff58 	bl	800e828 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8016978:	697b      	ldr	r3, [r7, #20]
 801697a:	607b      	str	r3, [r7, #4]
 801697c:	e00f      	b.n	801699e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801697e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016980:	330e      	adds	r3, #14
 8016982:	4619      	mov	r1, r3
 8016984:	6878      	ldr	r0, [r7, #4]
 8016986:	f7f7 fe97 	bl	800e6b8 <pbuf_remove_header>
 801698a:	4603      	mov	r3, r0
 801698c:	2b00      	cmp	r3, #0
 801698e:	d006      	beq.n	801699e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8016990:	4b2e      	ldr	r3, [pc, #184]	; (8016a4c <icmp_input+0x1f8>)
 8016992:	22c7      	movs	r2, #199	; 0xc7
 8016994:	4930      	ldr	r1, [pc, #192]	; (8016a58 <icmp_input+0x204>)
 8016996:	482f      	ldr	r0, [pc, #188]	; (8016a54 <icmp_input+0x200>)
 8016998:	f001 fe5a 	bl	8018650 <iprintf>
          goto icmperr;
 801699c:	e04b      	b.n	8016a36 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	685b      	ldr	r3, [r3, #4]
 80169a2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80169a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80169a6:	4619      	mov	r1, r3
 80169a8:	6878      	ldr	r0, [r7, #4]
 80169aa:	f7f7 fe75 	bl	800e698 <pbuf_add_header>
 80169ae:	4603      	mov	r3, r0
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d12b      	bne.n	8016a0c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	685b      	ldr	r3, [r3, #4]
 80169b8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80169ba:	69fb      	ldr	r3, [r7, #28]
 80169bc:	681a      	ldr	r2, [r3, #0]
 80169be:	68fb      	ldr	r3, [r7, #12]
 80169c0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80169c2:	4b20      	ldr	r3, [pc, #128]	; (8016a44 <icmp_input+0x1f0>)
 80169c4:	691a      	ldr	r2, [r3, #16]
 80169c6:	68fb      	ldr	r3, [r7, #12]
 80169c8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80169ca:	693b      	ldr	r3, [r7, #16]
 80169cc:	2200      	movs	r2, #0
 80169ce:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80169d0:	693b      	ldr	r3, [r7, #16]
 80169d2:	2200      	movs	r2, #0
 80169d4:	709a      	strb	r2, [r3, #2]
 80169d6:	2200      	movs	r2, #0
 80169d8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80169da:	68fb      	ldr	r3, [r7, #12]
 80169dc:	22ff      	movs	r2, #255	; 0xff
 80169de:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80169e0:	68fb      	ldr	r3, [r7, #12]
 80169e2:	2200      	movs	r2, #0
 80169e4:	729a      	strb	r2, [r3, #10]
 80169e6:	2200      	movs	r2, #0
 80169e8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80169ea:	683b      	ldr	r3, [r7, #0]
 80169ec:	9302      	str	r3, [sp, #8]
 80169ee:	2301      	movs	r3, #1
 80169f0:	9301      	str	r3, [sp, #4]
 80169f2:	2300      	movs	r3, #0
 80169f4:	9300      	str	r3, [sp, #0]
 80169f6:	23ff      	movs	r3, #255	; 0xff
 80169f8:	2200      	movs	r2, #0
 80169fa:	69f9      	ldr	r1, [r7, #28]
 80169fc:	6878      	ldr	r0, [r7, #4]
 80169fe:	f000 fa75 	bl	8016eec <ip4_output_if>
 8016a02:	4603      	mov	r3, r0
 8016a04:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8016a06:	e001      	b.n	8016a0c <icmp_input+0x1b8>
      break;
 8016a08:	bf00      	nop
 8016a0a:	e000      	b.n	8016a0e <icmp_input+0x1ba>
      break;
 8016a0c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8016a0e:	6878      	ldr	r0, [r7, #4]
 8016a10:	f7f7 ff0a 	bl	800e828 <pbuf_free>
  return;
 8016a14:	e013      	b.n	8016a3e <icmp_input+0x1ea>
    goto lenerr;
 8016a16:	bf00      	nop
 8016a18:	e002      	b.n	8016a20 <icmp_input+0x1cc>
    goto lenerr;
 8016a1a:	bf00      	nop
 8016a1c:	e000      	b.n	8016a20 <icmp_input+0x1cc>
        goto lenerr;
 8016a1e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8016a20:	6878      	ldr	r0, [r7, #4]
 8016a22:	f7f7 ff01 	bl	800e828 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016a26:	e00a      	b.n	8016a3e <icmp_input+0x1ea>
        goto icmperr;
 8016a28:	bf00      	nop
 8016a2a:	e004      	b.n	8016a36 <icmp_input+0x1e2>
        goto icmperr;
 8016a2c:	bf00      	nop
 8016a2e:	e002      	b.n	8016a36 <icmp_input+0x1e2>
          goto icmperr;
 8016a30:	bf00      	nop
 8016a32:	e000      	b.n	8016a36 <icmp_input+0x1e2>
          goto icmperr;
 8016a34:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8016a36:	6878      	ldr	r0, [r7, #4]
 8016a38:	f7f7 fef6 	bl	800e828 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016a3c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8016a3e:	3728      	adds	r7, #40	; 0x28
 8016a40:	46bd      	mov	sp, r7
 8016a42:	bd80      	pop	{r7, pc}
 8016a44:	20007938 	.word	0x20007938
 8016a48:	2000794c 	.word	0x2000794c
 8016a4c:	0801d100 	.word	0x0801d100
 8016a50:	0801d138 	.word	0x0801d138
 8016a54:	0801d170 	.word	0x0801d170
 8016a58:	0801d198 	.word	0x0801d198

08016a5c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8016a5c:	b580      	push	{r7, lr}
 8016a5e:	b082      	sub	sp, #8
 8016a60:	af00      	add	r7, sp, #0
 8016a62:	6078      	str	r0, [r7, #4]
 8016a64:	460b      	mov	r3, r1
 8016a66:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8016a68:	78fb      	ldrb	r3, [r7, #3]
 8016a6a:	461a      	mov	r2, r3
 8016a6c:	2103      	movs	r1, #3
 8016a6e:	6878      	ldr	r0, [r7, #4]
 8016a70:	f000 f814 	bl	8016a9c <icmp_send_response>
}
 8016a74:	bf00      	nop
 8016a76:	3708      	adds	r7, #8
 8016a78:	46bd      	mov	sp, r7
 8016a7a:	bd80      	pop	{r7, pc}

08016a7c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8016a7c:	b580      	push	{r7, lr}
 8016a7e:	b082      	sub	sp, #8
 8016a80:	af00      	add	r7, sp, #0
 8016a82:	6078      	str	r0, [r7, #4]
 8016a84:	460b      	mov	r3, r1
 8016a86:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8016a88:	78fb      	ldrb	r3, [r7, #3]
 8016a8a:	461a      	mov	r2, r3
 8016a8c:	210b      	movs	r1, #11
 8016a8e:	6878      	ldr	r0, [r7, #4]
 8016a90:	f000 f804 	bl	8016a9c <icmp_send_response>
}
 8016a94:	bf00      	nop
 8016a96:	3708      	adds	r7, #8
 8016a98:	46bd      	mov	sp, r7
 8016a9a:	bd80      	pop	{r7, pc}

08016a9c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8016a9c:	b580      	push	{r7, lr}
 8016a9e:	b08c      	sub	sp, #48	; 0x30
 8016aa0:	af04      	add	r7, sp, #16
 8016aa2:	6078      	str	r0, [r7, #4]
 8016aa4:	460b      	mov	r3, r1
 8016aa6:	70fb      	strb	r3, [r7, #3]
 8016aa8:	4613      	mov	r3, r2
 8016aaa:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016aac:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016ab0:	2124      	movs	r1, #36	; 0x24
 8016ab2:	2022      	movs	r0, #34	; 0x22
 8016ab4:	f7f7 fba2 	bl	800e1fc <pbuf_alloc>
 8016ab8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8016aba:	69fb      	ldr	r3, [r7, #28]
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	d04c      	beq.n	8016b5a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016ac0:	69fb      	ldr	r3, [r7, #28]
 8016ac2:	895b      	ldrh	r3, [r3, #10]
 8016ac4:	2b23      	cmp	r3, #35	; 0x23
 8016ac6:	d806      	bhi.n	8016ad6 <icmp_send_response+0x3a>
 8016ac8:	4b26      	ldr	r3, [pc, #152]	; (8016b64 <icmp_send_response+0xc8>)
 8016aca:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016ace:	4926      	ldr	r1, [pc, #152]	; (8016b68 <icmp_send_response+0xcc>)
 8016ad0:	4826      	ldr	r0, [pc, #152]	; (8016b6c <icmp_send_response+0xd0>)
 8016ad2:	f001 fdbd 	bl	8018650 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	685b      	ldr	r3, [r3, #4]
 8016ada:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016adc:	69fb      	ldr	r3, [r7, #28]
 8016ade:	685b      	ldr	r3, [r3, #4]
 8016ae0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8016ae2:	697b      	ldr	r3, [r7, #20]
 8016ae4:	78fa      	ldrb	r2, [r7, #3]
 8016ae6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8016ae8:	697b      	ldr	r3, [r7, #20]
 8016aea:	78ba      	ldrb	r2, [r7, #2]
 8016aec:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8016aee:	697b      	ldr	r3, [r7, #20]
 8016af0:	2200      	movs	r2, #0
 8016af2:	711a      	strb	r2, [r3, #4]
 8016af4:	2200      	movs	r2, #0
 8016af6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8016af8:	697b      	ldr	r3, [r7, #20]
 8016afa:	2200      	movs	r2, #0
 8016afc:	719a      	strb	r2, [r3, #6]
 8016afe:	2200      	movs	r2, #0
 8016b00:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8016b02:	69fb      	ldr	r3, [r7, #28]
 8016b04:	685b      	ldr	r3, [r3, #4]
 8016b06:	f103 0008 	add.w	r0, r3, #8
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	685b      	ldr	r3, [r3, #4]
 8016b0e:	221c      	movs	r2, #28
 8016b10:	4619      	mov	r1, r3
 8016b12:	f001 fd6d 	bl	80185f0 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8016b16:	69bb      	ldr	r3, [r7, #24]
 8016b18:	68db      	ldr	r3, [r3, #12]
 8016b1a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8016b1c:	f107 030c 	add.w	r3, r7, #12
 8016b20:	4618      	mov	r0, r3
 8016b22:	f000 f825 	bl	8016b70 <ip4_route>
 8016b26:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8016b28:	693b      	ldr	r3, [r7, #16]
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d011      	beq.n	8016b52 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8016b2e:	697b      	ldr	r3, [r7, #20]
 8016b30:	2200      	movs	r2, #0
 8016b32:	709a      	strb	r2, [r3, #2]
 8016b34:	2200      	movs	r2, #0
 8016b36:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016b38:	f107 020c 	add.w	r2, r7, #12
 8016b3c:	693b      	ldr	r3, [r7, #16]
 8016b3e:	9302      	str	r3, [sp, #8]
 8016b40:	2301      	movs	r3, #1
 8016b42:	9301      	str	r3, [sp, #4]
 8016b44:	2300      	movs	r3, #0
 8016b46:	9300      	str	r3, [sp, #0]
 8016b48:	23ff      	movs	r3, #255	; 0xff
 8016b4a:	2100      	movs	r1, #0
 8016b4c:	69f8      	ldr	r0, [r7, #28]
 8016b4e:	f000 f9cd 	bl	8016eec <ip4_output_if>
  }
  pbuf_free(q);
 8016b52:	69f8      	ldr	r0, [r7, #28]
 8016b54:	f7f7 fe68 	bl	800e828 <pbuf_free>
 8016b58:	e000      	b.n	8016b5c <icmp_send_response+0xc0>
    return;
 8016b5a:	bf00      	nop
}
 8016b5c:	3720      	adds	r7, #32
 8016b5e:	46bd      	mov	sp, r7
 8016b60:	bd80      	pop	{r7, pc}
 8016b62:	bf00      	nop
 8016b64:	0801d100 	.word	0x0801d100
 8016b68:	0801d1cc 	.word	0x0801d1cc
 8016b6c:	0801d170 	.word	0x0801d170

08016b70 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8016b70:	b480      	push	{r7}
 8016b72:	b085      	sub	sp, #20
 8016b74:	af00      	add	r7, sp, #0
 8016b76:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8016b78:	4b33      	ldr	r3, [pc, #204]	; (8016c48 <ip4_route+0xd8>)
 8016b7a:	681b      	ldr	r3, [r3, #0]
 8016b7c:	60fb      	str	r3, [r7, #12]
 8016b7e:	e036      	b.n	8016bee <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016b80:	68fb      	ldr	r3, [r7, #12]
 8016b82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016b86:	f003 0301 	and.w	r3, r3, #1
 8016b8a:	b2db      	uxtb	r3, r3
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d02b      	beq.n	8016be8 <ip4_route+0x78>
 8016b90:	68fb      	ldr	r3, [r7, #12]
 8016b92:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016b96:	089b      	lsrs	r3, r3, #2
 8016b98:	f003 0301 	and.w	r3, r3, #1
 8016b9c:	b2db      	uxtb	r3, r3
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	d022      	beq.n	8016be8 <ip4_route+0x78>
 8016ba2:	68fb      	ldr	r3, [r7, #12]
 8016ba4:	3304      	adds	r3, #4
 8016ba6:	681b      	ldr	r3, [r3, #0]
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d01d      	beq.n	8016be8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	681a      	ldr	r2, [r3, #0]
 8016bb0:	68fb      	ldr	r3, [r7, #12]
 8016bb2:	3304      	adds	r3, #4
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	405a      	eors	r2, r3
 8016bb8:	68fb      	ldr	r3, [r7, #12]
 8016bba:	3308      	adds	r3, #8
 8016bbc:	681b      	ldr	r3, [r3, #0]
 8016bbe:	4013      	ands	r3, r2
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	d101      	bne.n	8016bc8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8016bc4:	68fb      	ldr	r3, [r7, #12]
 8016bc6:	e038      	b.n	8016c3a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016bc8:	68fb      	ldr	r3, [r7, #12]
 8016bca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016bce:	f003 0302 	and.w	r3, r3, #2
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	d108      	bne.n	8016be8 <ip4_route+0x78>
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	681a      	ldr	r2, [r3, #0]
 8016bda:	68fb      	ldr	r3, [r7, #12]
 8016bdc:	330c      	adds	r3, #12
 8016bde:	681b      	ldr	r3, [r3, #0]
 8016be0:	429a      	cmp	r2, r3
 8016be2:	d101      	bne.n	8016be8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8016be4:	68fb      	ldr	r3, [r7, #12]
 8016be6:	e028      	b.n	8016c3a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8016be8:	68fb      	ldr	r3, [r7, #12]
 8016bea:	681b      	ldr	r3, [r3, #0]
 8016bec:	60fb      	str	r3, [r7, #12]
 8016bee:	68fb      	ldr	r3, [r7, #12]
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d1c5      	bne.n	8016b80 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016bf4:	4b15      	ldr	r3, [pc, #84]	; (8016c4c <ip4_route+0xdc>)
 8016bf6:	681b      	ldr	r3, [r3, #0]
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d01a      	beq.n	8016c32 <ip4_route+0xc2>
 8016bfc:	4b13      	ldr	r3, [pc, #76]	; (8016c4c <ip4_route+0xdc>)
 8016bfe:	681b      	ldr	r3, [r3, #0]
 8016c00:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016c04:	f003 0301 	and.w	r3, r3, #1
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	d012      	beq.n	8016c32 <ip4_route+0xc2>
 8016c0c:	4b0f      	ldr	r3, [pc, #60]	; (8016c4c <ip4_route+0xdc>)
 8016c0e:	681b      	ldr	r3, [r3, #0]
 8016c10:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016c14:	f003 0304 	and.w	r3, r3, #4
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d00a      	beq.n	8016c32 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016c1c:	4b0b      	ldr	r3, [pc, #44]	; (8016c4c <ip4_route+0xdc>)
 8016c1e:	681b      	ldr	r3, [r3, #0]
 8016c20:	3304      	adds	r3, #4
 8016c22:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	d004      	beq.n	8016c32 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	681b      	ldr	r3, [r3, #0]
 8016c2c:	b2db      	uxtb	r3, r3
 8016c2e:	2b7f      	cmp	r3, #127	; 0x7f
 8016c30:	d101      	bne.n	8016c36 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8016c32:	2300      	movs	r3, #0
 8016c34:	e001      	b.n	8016c3a <ip4_route+0xca>
  }

  return netif_default;
 8016c36:	4b05      	ldr	r3, [pc, #20]	; (8016c4c <ip4_route+0xdc>)
 8016c38:	681b      	ldr	r3, [r3, #0]
}
 8016c3a:	4618      	mov	r0, r3
 8016c3c:	3714      	adds	r7, #20
 8016c3e:	46bd      	mov	sp, r7
 8016c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c44:	4770      	bx	lr
 8016c46:	bf00      	nop
 8016c48:	2000d240 	.word	0x2000d240
 8016c4c:	2000d244 	.word	0x2000d244

08016c50 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8016c50:	b580      	push	{r7, lr}
 8016c52:	b082      	sub	sp, #8
 8016c54:	af00      	add	r7, sp, #0
 8016c56:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016c5e:	f003 0301 	and.w	r3, r3, #1
 8016c62:	b2db      	uxtb	r3, r3
 8016c64:	2b00      	cmp	r3, #0
 8016c66:	d016      	beq.n	8016c96 <ip4_input_accept+0x46>
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	3304      	adds	r3, #4
 8016c6c:	681b      	ldr	r3, [r3, #0]
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d011      	beq.n	8016c96 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016c72:	4b0b      	ldr	r3, [pc, #44]	; (8016ca0 <ip4_input_accept+0x50>)
 8016c74:	695a      	ldr	r2, [r3, #20]
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	3304      	adds	r3, #4
 8016c7a:	681b      	ldr	r3, [r3, #0]
 8016c7c:	429a      	cmp	r2, r3
 8016c7e:	d008      	beq.n	8016c92 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8016c80:	4b07      	ldr	r3, [pc, #28]	; (8016ca0 <ip4_input_accept+0x50>)
 8016c82:	695b      	ldr	r3, [r3, #20]
 8016c84:	6879      	ldr	r1, [r7, #4]
 8016c86:	4618      	mov	r0, r3
 8016c88:	f000 fa08 	bl	801709c <ip4_addr_isbroadcast_u32>
 8016c8c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	d001      	beq.n	8016c96 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8016c92:	2301      	movs	r3, #1
 8016c94:	e000      	b.n	8016c98 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8016c96:	2300      	movs	r3, #0
}
 8016c98:	4618      	mov	r0, r3
 8016c9a:	3708      	adds	r7, #8
 8016c9c:	46bd      	mov	sp, r7
 8016c9e:	bd80      	pop	{r7, pc}
 8016ca0:	20007938 	.word	0x20007938

08016ca4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016ca4:	b580      	push	{r7, lr}
 8016ca6:	b086      	sub	sp, #24
 8016ca8:	af00      	add	r7, sp, #0
 8016caa:	6078      	str	r0, [r7, #4]
 8016cac:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	685b      	ldr	r3, [r3, #4]
 8016cb2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8016cb4:	697b      	ldr	r3, [r7, #20]
 8016cb6:	781b      	ldrb	r3, [r3, #0]
 8016cb8:	091b      	lsrs	r3, r3, #4
 8016cba:	b2db      	uxtb	r3, r3
 8016cbc:	2b04      	cmp	r3, #4
 8016cbe:	d004      	beq.n	8016cca <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016cc0:	6878      	ldr	r0, [r7, #4]
 8016cc2:	f7f7 fdb1 	bl	800e828 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8016cc6:	2300      	movs	r3, #0
 8016cc8:	e107      	b.n	8016eda <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8016cca:	697b      	ldr	r3, [r7, #20]
 8016ccc:	781b      	ldrb	r3, [r3, #0]
 8016cce:	f003 030f 	and.w	r3, r3, #15
 8016cd2:	b2db      	uxtb	r3, r3
 8016cd4:	009b      	lsls	r3, r3, #2
 8016cd6:	b2db      	uxtb	r3, r3
 8016cd8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8016cda:	697b      	ldr	r3, [r7, #20]
 8016cdc:	885b      	ldrh	r3, [r3, #2]
 8016cde:	b29b      	uxth	r3, r3
 8016ce0:	4618      	mov	r0, r3
 8016ce2:	f7f6 f9c3 	bl	800d06c <lwip_htons>
 8016ce6:	4603      	mov	r3, r0
 8016ce8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	891b      	ldrh	r3, [r3, #8]
 8016cee:	89ba      	ldrh	r2, [r7, #12]
 8016cf0:	429a      	cmp	r2, r3
 8016cf2:	d204      	bcs.n	8016cfe <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8016cf4:	89bb      	ldrh	r3, [r7, #12]
 8016cf6:	4619      	mov	r1, r3
 8016cf8:	6878      	ldr	r0, [r7, #4]
 8016cfa:	f7f7 fbdd 	bl	800e4b8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	895b      	ldrh	r3, [r3, #10]
 8016d02:	89fa      	ldrh	r2, [r7, #14]
 8016d04:	429a      	cmp	r2, r3
 8016d06:	d807      	bhi.n	8016d18 <ip4_input+0x74>
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	891b      	ldrh	r3, [r3, #8]
 8016d0c:	89ba      	ldrh	r2, [r7, #12]
 8016d0e:	429a      	cmp	r2, r3
 8016d10:	d802      	bhi.n	8016d18 <ip4_input+0x74>
 8016d12:	89fb      	ldrh	r3, [r7, #14]
 8016d14:	2b13      	cmp	r3, #19
 8016d16:	d804      	bhi.n	8016d22 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8016d18:	6878      	ldr	r0, [r7, #4]
 8016d1a:	f7f7 fd85 	bl	800e828 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8016d1e:	2300      	movs	r3, #0
 8016d20:	e0db      	b.n	8016eda <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016d22:	697b      	ldr	r3, [r7, #20]
 8016d24:	691b      	ldr	r3, [r3, #16]
 8016d26:	4a6f      	ldr	r2, [pc, #444]	; (8016ee4 <ip4_input+0x240>)
 8016d28:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8016d2a:	697b      	ldr	r3, [r7, #20]
 8016d2c:	68db      	ldr	r3, [r3, #12]
 8016d2e:	4a6d      	ldr	r2, [pc, #436]	; (8016ee4 <ip4_input+0x240>)
 8016d30:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016d32:	4b6c      	ldr	r3, [pc, #432]	; (8016ee4 <ip4_input+0x240>)
 8016d34:	695b      	ldr	r3, [r3, #20]
 8016d36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016d3a:	2be0      	cmp	r3, #224	; 0xe0
 8016d3c:	d112      	bne.n	8016d64 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8016d3e:	683b      	ldr	r3, [r7, #0]
 8016d40:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016d44:	f003 0301 	and.w	r3, r3, #1
 8016d48:	b2db      	uxtb	r3, r3
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	d007      	beq.n	8016d5e <ip4_input+0xba>
 8016d4e:	683b      	ldr	r3, [r7, #0]
 8016d50:	3304      	adds	r3, #4
 8016d52:	681b      	ldr	r3, [r3, #0]
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d002      	beq.n	8016d5e <ip4_input+0xba>
      netif = inp;
 8016d58:	683b      	ldr	r3, [r7, #0]
 8016d5a:	613b      	str	r3, [r7, #16]
 8016d5c:	e02a      	b.n	8016db4 <ip4_input+0x110>
    } else {
      netif = NULL;
 8016d5e:	2300      	movs	r3, #0
 8016d60:	613b      	str	r3, [r7, #16]
 8016d62:	e027      	b.n	8016db4 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016d64:	6838      	ldr	r0, [r7, #0]
 8016d66:	f7ff ff73 	bl	8016c50 <ip4_input_accept>
 8016d6a:	4603      	mov	r3, r0
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	d002      	beq.n	8016d76 <ip4_input+0xd2>
      netif = inp;
 8016d70:	683b      	ldr	r3, [r7, #0]
 8016d72:	613b      	str	r3, [r7, #16]
 8016d74:	e01e      	b.n	8016db4 <ip4_input+0x110>
    } else {
      netif = NULL;
 8016d76:	2300      	movs	r3, #0
 8016d78:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8016d7a:	4b5a      	ldr	r3, [pc, #360]	; (8016ee4 <ip4_input+0x240>)
 8016d7c:	695b      	ldr	r3, [r3, #20]
 8016d7e:	b2db      	uxtb	r3, r3
 8016d80:	2b7f      	cmp	r3, #127	; 0x7f
 8016d82:	d017      	beq.n	8016db4 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016d84:	4b58      	ldr	r3, [pc, #352]	; (8016ee8 <ip4_input+0x244>)
 8016d86:	681b      	ldr	r3, [r3, #0]
 8016d88:	613b      	str	r3, [r7, #16]
 8016d8a:	e00e      	b.n	8016daa <ip4_input+0x106>
          if (netif == inp) {
 8016d8c:	693a      	ldr	r2, [r7, #16]
 8016d8e:	683b      	ldr	r3, [r7, #0]
 8016d90:	429a      	cmp	r2, r3
 8016d92:	d006      	beq.n	8016da2 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016d94:	6938      	ldr	r0, [r7, #16]
 8016d96:	f7ff ff5b 	bl	8016c50 <ip4_input_accept>
 8016d9a:	4603      	mov	r3, r0
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	d108      	bne.n	8016db2 <ip4_input+0x10e>
 8016da0:	e000      	b.n	8016da4 <ip4_input+0x100>
            continue;
 8016da2:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016da4:	693b      	ldr	r3, [r7, #16]
 8016da6:	681b      	ldr	r3, [r3, #0]
 8016da8:	613b      	str	r3, [r7, #16]
 8016daa:	693b      	ldr	r3, [r7, #16]
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	d1ed      	bne.n	8016d8c <ip4_input+0xe8>
 8016db0:	e000      	b.n	8016db4 <ip4_input+0x110>
            break;
 8016db2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016db4:	4b4b      	ldr	r3, [pc, #300]	; (8016ee4 <ip4_input+0x240>)
 8016db6:	691b      	ldr	r3, [r3, #16]
 8016db8:	6839      	ldr	r1, [r7, #0]
 8016dba:	4618      	mov	r0, r3
 8016dbc:	f000 f96e 	bl	801709c <ip4_addr_isbroadcast_u32>
 8016dc0:	4603      	mov	r3, r0
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d105      	bne.n	8016dd2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016dc6:	4b47      	ldr	r3, [pc, #284]	; (8016ee4 <ip4_input+0x240>)
 8016dc8:	691b      	ldr	r3, [r3, #16]
 8016dca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016dce:	2be0      	cmp	r3, #224	; 0xe0
 8016dd0:	d104      	bne.n	8016ddc <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8016dd2:	6878      	ldr	r0, [r7, #4]
 8016dd4:	f7f7 fd28 	bl	800e828 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016dd8:	2300      	movs	r3, #0
 8016dda:	e07e      	b.n	8016eda <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016ddc:	693b      	ldr	r3, [r7, #16]
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d104      	bne.n	8016dec <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8016de2:	6878      	ldr	r0, [r7, #4]
 8016de4:	f7f7 fd20 	bl	800e828 <pbuf_free>
    return ERR_OK;
 8016de8:	2300      	movs	r3, #0
 8016dea:	e076      	b.n	8016eda <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016dec:	697b      	ldr	r3, [r7, #20]
 8016dee:	88db      	ldrh	r3, [r3, #6]
 8016df0:	b29b      	uxth	r3, r3
 8016df2:	461a      	mov	r2, r3
 8016df4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8016df8:	4013      	ands	r3, r2
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	d00b      	beq.n	8016e16 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8016dfe:	6878      	ldr	r0, [r7, #4]
 8016e00:	f000 fdd0 	bl	80179a4 <ip4_reass>
 8016e04:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d101      	bne.n	8016e10 <ip4_input+0x16c>
      return ERR_OK;
 8016e0c:	2300      	movs	r3, #0
 8016e0e:	e064      	b.n	8016eda <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8016e10:	687b      	ldr	r3, [r7, #4]
 8016e12:	685b      	ldr	r3, [r3, #4]
 8016e14:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8016e16:	4a33      	ldr	r2, [pc, #204]	; (8016ee4 <ip4_input+0x240>)
 8016e18:	693b      	ldr	r3, [r7, #16]
 8016e1a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016e1c:	4a31      	ldr	r2, [pc, #196]	; (8016ee4 <ip4_input+0x240>)
 8016e1e:	683b      	ldr	r3, [r7, #0]
 8016e20:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8016e22:	4a30      	ldr	r2, [pc, #192]	; (8016ee4 <ip4_input+0x240>)
 8016e24:	697b      	ldr	r3, [r7, #20]
 8016e26:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016e28:	697b      	ldr	r3, [r7, #20]
 8016e2a:	781b      	ldrb	r3, [r3, #0]
 8016e2c:	f003 030f 	and.w	r3, r3, #15
 8016e30:	b2db      	uxtb	r3, r3
 8016e32:	009b      	lsls	r3, r3, #2
 8016e34:	b2db      	uxtb	r3, r3
 8016e36:	b29a      	uxth	r2, r3
 8016e38:	4b2a      	ldr	r3, [pc, #168]	; (8016ee4 <ip4_input+0x240>)
 8016e3a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016e3c:	89fb      	ldrh	r3, [r7, #14]
 8016e3e:	4619      	mov	r1, r3
 8016e40:	6878      	ldr	r0, [r7, #4]
 8016e42:	f7f7 fc39 	bl	800e6b8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8016e46:	697b      	ldr	r3, [r7, #20]
 8016e48:	7a5b      	ldrb	r3, [r3, #9]
 8016e4a:	2b11      	cmp	r3, #17
 8016e4c:	d006      	beq.n	8016e5c <ip4_input+0x1b8>
 8016e4e:	2b11      	cmp	r3, #17
 8016e50:	dc13      	bgt.n	8016e7a <ip4_input+0x1d6>
 8016e52:	2b01      	cmp	r3, #1
 8016e54:	d00c      	beq.n	8016e70 <ip4_input+0x1cc>
 8016e56:	2b06      	cmp	r3, #6
 8016e58:	d005      	beq.n	8016e66 <ip4_input+0x1c2>
 8016e5a:	e00e      	b.n	8016e7a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016e5c:	6839      	ldr	r1, [r7, #0]
 8016e5e:	6878      	ldr	r0, [r7, #4]
 8016e60:	f7fe f970 	bl	8015144 <udp_input>
        break;
 8016e64:	e026      	b.n	8016eb4 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8016e66:	6839      	ldr	r1, [r7, #0]
 8016e68:	6878      	ldr	r0, [r7, #4]
 8016e6a:	f7f9 fd29 	bl	80108c0 <tcp_input>
        break;
 8016e6e:	e021      	b.n	8016eb4 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016e70:	6839      	ldr	r1, [r7, #0]
 8016e72:	6878      	ldr	r0, [r7, #4]
 8016e74:	f7ff fcee 	bl	8016854 <icmp_input>
        break;
 8016e78:	e01c      	b.n	8016eb4 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016e7a:	4b1a      	ldr	r3, [pc, #104]	; (8016ee4 <ip4_input+0x240>)
 8016e7c:	695b      	ldr	r3, [r3, #20]
 8016e7e:	6939      	ldr	r1, [r7, #16]
 8016e80:	4618      	mov	r0, r3
 8016e82:	f000 f90b 	bl	801709c <ip4_addr_isbroadcast_u32>
 8016e86:	4603      	mov	r3, r0
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	d10f      	bne.n	8016eac <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016e8c:	4b15      	ldr	r3, [pc, #84]	; (8016ee4 <ip4_input+0x240>)
 8016e8e:	695b      	ldr	r3, [r3, #20]
 8016e90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016e94:	2be0      	cmp	r3, #224	; 0xe0
 8016e96:	d009      	beq.n	8016eac <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8016e98:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016e9c:	4619      	mov	r1, r3
 8016e9e:	6878      	ldr	r0, [r7, #4]
 8016ea0:	f7f7 fc7d 	bl	800e79e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016ea4:	2102      	movs	r1, #2
 8016ea6:	6878      	ldr	r0, [r7, #4]
 8016ea8:	f7ff fdd8 	bl	8016a5c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016eac:	6878      	ldr	r0, [r7, #4]
 8016eae:	f7f7 fcbb 	bl	800e828 <pbuf_free>
        break;
 8016eb2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016eb4:	4b0b      	ldr	r3, [pc, #44]	; (8016ee4 <ip4_input+0x240>)
 8016eb6:	2200      	movs	r2, #0
 8016eb8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016eba:	4b0a      	ldr	r3, [pc, #40]	; (8016ee4 <ip4_input+0x240>)
 8016ebc:	2200      	movs	r2, #0
 8016ebe:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016ec0:	4b08      	ldr	r3, [pc, #32]	; (8016ee4 <ip4_input+0x240>)
 8016ec2:	2200      	movs	r2, #0
 8016ec4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016ec6:	4b07      	ldr	r3, [pc, #28]	; (8016ee4 <ip4_input+0x240>)
 8016ec8:	2200      	movs	r2, #0
 8016eca:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016ecc:	4b05      	ldr	r3, [pc, #20]	; (8016ee4 <ip4_input+0x240>)
 8016ece:	2200      	movs	r2, #0
 8016ed0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016ed2:	4b04      	ldr	r3, [pc, #16]	; (8016ee4 <ip4_input+0x240>)
 8016ed4:	2200      	movs	r2, #0
 8016ed6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016ed8:	2300      	movs	r3, #0
}
 8016eda:	4618      	mov	r0, r3
 8016edc:	3718      	adds	r7, #24
 8016ede:	46bd      	mov	sp, r7
 8016ee0:	bd80      	pop	{r7, pc}
 8016ee2:	bf00      	nop
 8016ee4:	20007938 	.word	0x20007938
 8016ee8:	2000d240 	.word	0x2000d240

08016eec <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016eec:	b580      	push	{r7, lr}
 8016eee:	b08a      	sub	sp, #40	; 0x28
 8016ef0:	af04      	add	r7, sp, #16
 8016ef2:	60f8      	str	r0, [r7, #12]
 8016ef4:	60b9      	str	r1, [r7, #8]
 8016ef6:	607a      	str	r2, [r7, #4]
 8016ef8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016efa:	68bb      	ldr	r3, [r7, #8]
 8016efc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d009      	beq.n	8016f18 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016f04:	68bb      	ldr	r3, [r7, #8]
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d003      	beq.n	8016f12 <ip4_output_if+0x26>
 8016f0a:	68bb      	ldr	r3, [r7, #8]
 8016f0c:	681b      	ldr	r3, [r3, #0]
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d102      	bne.n	8016f18 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8016f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f14:	3304      	adds	r3, #4
 8016f16:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016f18:	78fa      	ldrb	r2, [r7, #3]
 8016f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f1c:	9302      	str	r3, [sp, #8]
 8016f1e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016f22:	9301      	str	r3, [sp, #4]
 8016f24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016f28:	9300      	str	r3, [sp, #0]
 8016f2a:	4613      	mov	r3, r2
 8016f2c:	687a      	ldr	r2, [r7, #4]
 8016f2e:	6979      	ldr	r1, [r7, #20]
 8016f30:	68f8      	ldr	r0, [r7, #12]
 8016f32:	f000 f805 	bl	8016f40 <ip4_output_if_src>
 8016f36:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016f38:	4618      	mov	r0, r3
 8016f3a:	3718      	adds	r7, #24
 8016f3c:	46bd      	mov	sp, r7
 8016f3e:	bd80      	pop	{r7, pc}

08016f40 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016f40:	b580      	push	{r7, lr}
 8016f42:	b088      	sub	sp, #32
 8016f44:	af00      	add	r7, sp, #0
 8016f46:	60f8      	str	r0, [r7, #12]
 8016f48:	60b9      	str	r1, [r7, #8]
 8016f4a:	607a      	str	r2, [r7, #4]
 8016f4c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016f4e:	68fb      	ldr	r3, [r7, #12]
 8016f50:	7b9b      	ldrb	r3, [r3, #14]
 8016f52:	2b01      	cmp	r3, #1
 8016f54:	d006      	beq.n	8016f64 <ip4_output_if_src+0x24>
 8016f56:	4b4b      	ldr	r3, [pc, #300]	; (8017084 <ip4_output_if_src+0x144>)
 8016f58:	f44f 7255 	mov.w	r2, #852	; 0x354
 8016f5c:	494a      	ldr	r1, [pc, #296]	; (8017088 <ip4_output_if_src+0x148>)
 8016f5e:	484b      	ldr	r0, [pc, #300]	; (801708c <ip4_output_if_src+0x14c>)
 8016f60:	f001 fb76 	bl	8018650 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d060      	beq.n	801702c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8016f6a:	2314      	movs	r3, #20
 8016f6c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8016f6e:	2114      	movs	r1, #20
 8016f70:	68f8      	ldr	r0, [r7, #12]
 8016f72:	f7f7 fb91 	bl	800e698 <pbuf_add_header>
 8016f76:	4603      	mov	r3, r0
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	d002      	beq.n	8016f82 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016f7c:	f06f 0301 	mvn.w	r3, #1
 8016f80:	e07c      	b.n	801707c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016f82:	68fb      	ldr	r3, [r7, #12]
 8016f84:	685b      	ldr	r3, [r3, #4]
 8016f86:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016f88:	68fb      	ldr	r3, [r7, #12]
 8016f8a:	895b      	ldrh	r3, [r3, #10]
 8016f8c:	2b13      	cmp	r3, #19
 8016f8e:	d806      	bhi.n	8016f9e <ip4_output_if_src+0x5e>
 8016f90:	4b3c      	ldr	r3, [pc, #240]	; (8017084 <ip4_output_if_src+0x144>)
 8016f92:	f44f 7262 	mov.w	r2, #904	; 0x388
 8016f96:	493e      	ldr	r1, [pc, #248]	; (8017090 <ip4_output_if_src+0x150>)
 8016f98:	483c      	ldr	r0, [pc, #240]	; (801708c <ip4_output_if_src+0x14c>)
 8016f9a:	f001 fb59 	bl	8018650 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8016f9e:	69fb      	ldr	r3, [r7, #28]
 8016fa0:	78fa      	ldrb	r2, [r7, #3]
 8016fa2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016fa4:	69fb      	ldr	r3, [r7, #28]
 8016fa6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016faa:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	681a      	ldr	r2, [r3, #0]
 8016fb0:	69fb      	ldr	r3, [r7, #28]
 8016fb2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016fb4:	8b7b      	ldrh	r3, [r7, #26]
 8016fb6:	089b      	lsrs	r3, r3, #2
 8016fb8:	b29b      	uxth	r3, r3
 8016fba:	b2db      	uxtb	r3, r3
 8016fbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016fc0:	b2da      	uxtb	r2, r3
 8016fc2:	69fb      	ldr	r3, [r7, #28]
 8016fc4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8016fc6:	69fb      	ldr	r3, [r7, #28]
 8016fc8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016fcc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8016fce:	68fb      	ldr	r3, [r7, #12]
 8016fd0:	891b      	ldrh	r3, [r3, #8]
 8016fd2:	4618      	mov	r0, r3
 8016fd4:	f7f6 f84a 	bl	800d06c <lwip_htons>
 8016fd8:	4603      	mov	r3, r0
 8016fda:	461a      	mov	r2, r3
 8016fdc:	69fb      	ldr	r3, [r7, #28]
 8016fde:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8016fe0:	69fb      	ldr	r3, [r7, #28]
 8016fe2:	2200      	movs	r2, #0
 8016fe4:	719a      	strb	r2, [r3, #6]
 8016fe6:	2200      	movs	r2, #0
 8016fe8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016fea:	4b2a      	ldr	r3, [pc, #168]	; (8017094 <ip4_output_if_src+0x154>)
 8016fec:	881b      	ldrh	r3, [r3, #0]
 8016fee:	4618      	mov	r0, r3
 8016ff0:	f7f6 f83c 	bl	800d06c <lwip_htons>
 8016ff4:	4603      	mov	r3, r0
 8016ff6:	461a      	mov	r2, r3
 8016ff8:	69fb      	ldr	r3, [r7, #28]
 8016ffa:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016ffc:	4b25      	ldr	r3, [pc, #148]	; (8017094 <ip4_output_if_src+0x154>)
 8016ffe:	881b      	ldrh	r3, [r3, #0]
 8017000:	3301      	adds	r3, #1
 8017002:	b29a      	uxth	r2, r3
 8017004:	4b23      	ldr	r3, [pc, #140]	; (8017094 <ip4_output_if_src+0x154>)
 8017006:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017008:	68bb      	ldr	r3, [r7, #8]
 801700a:	2b00      	cmp	r3, #0
 801700c:	d104      	bne.n	8017018 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801700e:	4b22      	ldr	r3, [pc, #136]	; (8017098 <ip4_output_if_src+0x158>)
 8017010:	681a      	ldr	r2, [r3, #0]
 8017012:	69fb      	ldr	r3, [r7, #28]
 8017014:	60da      	str	r2, [r3, #12]
 8017016:	e003      	b.n	8017020 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017018:	68bb      	ldr	r3, [r7, #8]
 801701a:	681a      	ldr	r2, [r3, #0]
 801701c:	69fb      	ldr	r3, [r7, #28]
 801701e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017020:	69fb      	ldr	r3, [r7, #28]
 8017022:	2200      	movs	r2, #0
 8017024:	729a      	strb	r2, [r3, #10]
 8017026:	2200      	movs	r2, #0
 8017028:	72da      	strb	r2, [r3, #11]
 801702a:	e00f      	b.n	801704c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801702c:	68fb      	ldr	r3, [r7, #12]
 801702e:	895b      	ldrh	r3, [r3, #10]
 8017030:	2b13      	cmp	r3, #19
 8017032:	d802      	bhi.n	801703a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017034:	f06f 0301 	mvn.w	r3, #1
 8017038:	e020      	b.n	801707c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801703a:	68fb      	ldr	r3, [r7, #12]
 801703c:	685b      	ldr	r3, [r3, #4]
 801703e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017040:	69fb      	ldr	r3, [r7, #28]
 8017042:	691b      	ldr	r3, [r3, #16]
 8017044:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8017046:	f107 0314 	add.w	r3, r7, #20
 801704a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801704c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801704e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017050:	2b00      	cmp	r3, #0
 8017052:	d00c      	beq.n	801706e <ip4_output_if_src+0x12e>
 8017054:	68fb      	ldr	r3, [r7, #12]
 8017056:	891a      	ldrh	r2, [r3, #8]
 8017058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801705a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801705c:	429a      	cmp	r2, r3
 801705e:	d906      	bls.n	801706e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017060:	687a      	ldr	r2, [r7, #4]
 8017062:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017064:	68f8      	ldr	r0, [r7, #12]
 8017066:	f000 fe91 	bl	8017d8c <ip4_frag>
 801706a:	4603      	mov	r3, r0
 801706c:	e006      	b.n	801707c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801706e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017070:	695b      	ldr	r3, [r3, #20]
 8017072:	687a      	ldr	r2, [r7, #4]
 8017074:	68f9      	ldr	r1, [r7, #12]
 8017076:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017078:	4798      	blx	r3
 801707a:	4603      	mov	r3, r0
}
 801707c:	4618      	mov	r0, r3
 801707e:	3720      	adds	r7, #32
 8017080:	46bd      	mov	sp, r7
 8017082:	bd80      	pop	{r7, pc}
 8017084:	0801d1f8 	.word	0x0801d1f8
 8017088:	0801d22c 	.word	0x0801d22c
 801708c:	0801d238 	.word	0x0801d238
 8017090:	0801d260 	.word	0x0801d260
 8017094:	2000d39e 	.word	0x2000d39e
 8017098:	0801d72c 	.word	0x0801d72c

0801709c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801709c:	b480      	push	{r7}
 801709e:	b085      	sub	sp, #20
 80170a0:	af00      	add	r7, sp, #0
 80170a2:	6078      	str	r0, [r7, #4]
 80170a4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80170a6:	687b      	ldr	r3, [r7, #4]
 80170a8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80170b0:	d002      	beq.n	80170b8 <ip4_addr_isbroadcast_u32+0x1c>
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d101      	bne.n	80170bc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80170b8:	2301      	movs	r3, #1
 80170ba:	e02a      	b.n	8017112 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80170bc:	683b      	ldr	r3, [r7, #0]
 80170be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80170c2:	f003 0302 	and.w	r3, r3, #2
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d101      	bne.n	80170ce <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80170ca:	2300      	movs	r3, #0
 80170cc:	e021      	b.n	8017112 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80170ce:	683b      	ldr	r3, [r7, #0]
 80170d0:	3304      	adds	r3, #4
 80170d2:	681b      	ldr	r3, [r3, #0]
 80170d4:	687a      	ldr	r2, [r7, #4]
 80170d6:	429a      	cmp	r2, r3
 80170d8:	d101      	bne.n	80170de <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80170da:	2300      	movs	r3, #0
 80170dc:	e019      	b.n	8017112 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80170de:	68fa      	ldr	r2, [r7, #12]
 80170e0:	683b      	ldr	r3, [r7, #0]
 80170e2:	3304      	adds	r3, #4
 80170e4:	681b      	ldr	r3, [r3, #0]
 80170e6:	405a      	eors	r2, r3
 80170e8:	683b      	ldr	r3, [r7, #0]
 80170ea:	3308      	adds	r3, #8
 80170ec:	681b      	ldr	r3, [r3, #0]
 80170ee:	4013      	ands	r3, r2
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	d10d      	bne.n	8017110 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80170f4:	683b      	ldr	r3, [r7, #0]
 80170f6:	3308      	adds	r3, #8
 80170f8:	681b      	ldr	r3, [r3, #0]
 80170fa:	43da      	mvns	r2, r3
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017100:	683b      	ldr	r3, [r7, #0]
 8017102:	3308      	adds	r3, #8
 8017104:	681b      	ldr	r3, [r3, #0]
 8017106:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017108:	429a      	cmp	r2, r3
 801710a:	d101      	bne.n	8017110 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801710c:	2301      	movs	r3, #1
 801710e:	e000      	b.n	8017112 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017110:	2300      	movs	r3, #0
  }
}
 8017112:	4618      	mov	r0, r3
 8017114:	3714      	adds	r7, #20
 8017116:	46bd      	mov	sp, r7
 8017118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801711c:	4770      	bx	lr

0801711e <ipaddr_addr>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
 801711e:	b580      	push	{r7, lr}
 8017120:	b084      	sub	sp, #16
 8017122:	af00      	add	r7, sp, #0
 8017124:	6078      	str	r0, [r7, #4]
  ip4_addr_t val;

  if (ip4addr_aton(cp, &val)) {
 8017126:	f107 030c 	add.w	r3, r7, #12
 801712a:	4619      	mov	r1, r3
 801712c:	6878      	ldr	r0, [r7, #4]
 801712e:	f000 f80b 	bl	8017148 <ip4addr_aton>
 8017132:	4603      	mov	r3, r0
 8017134:	2b00      	cmp	r3, #0
 8017136:	d001      	beq.n	801713c <ipaddr_addr+0x1e>
    return ip4_addr_get_u32(&val);
 8017138:	68fb      	ldr	r3, [r7, #12]
 801713a:	e001      	b.n	8017140 <ipaddr_addr+0x22>
  }
  return (IPADDR_NONE);
 801713c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017140:	4618      	mov	r0, r3
 8017142:	3710      	adds	r7, #16
 8017144:	46bd      	mov	sp, r7
 8017146:	bd80      	pop	{r7, pc}

08017148 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8017148:	b580      	push	{r7, lr}
 801714a:	b08a      	sub	sp, #40	; 0x28
 801714c:	af00      	add	r7, sp, #0
 801714e:	6078      	str	r0, [r7, #4]
 8017150:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 8017152:	f107 030c 	add.w	r3, r7, #12
 8017156:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	781b      	ldrb	r3, [r3, #0]
 801715c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8017160:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017164:	3301      	adds	r3, #1
 8017166:	4a89      	ldr	r2, [pc, #548]	; (801738c <ip4addr_aton+0x244>)
 8017168:	4413      	add	r3, r2
 801716a:	781b      	ldrb	r3, [r3, #0]
 801716c:	f003 0304 	and.w	r3, r3, #4
 8017170:	2b00      	cmp	r3, #0
 8017172:	d101      	bne.n	8017178 <ip4addr_aton+0x30>
      return 0;
 8017174:	2300      	movs	r3, #0
 8017176:	e105      	b.n	8017384 <ip4addr_aton+0x23c>
    }
    val = 0;
 8017178:	2300      	movs	r3, #0
 801717a:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 801717c:	230a      	movs	r3, #10
 801717e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 8017182:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017186:	2b30      	cmp	r3, #48	; 0x30
 8017188:	d11c      	bne.n	80171c4 <ip4addr_aton+0x7c>
      c = *++cp;
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	3301      	adds	r3, #1
 801718e:	607b      	str	r3, [r7, #4]
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	781b      	ldrb	r3, [r3, #0]
 8017194:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 8017198:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801719c:	2b78      	cmp	r3, #120	; 0x78
 801719e:	d003      	beq.n	80171a8 <ip4addr_aton+0x60>
 80171a0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80171a4:	2b58      	cmp	r3, #88	; 0x58
 80171a6:	d10a      	bne.n	80171be <ip4addr_aton+0x76>
        base = 16;
 80171a8:	2310      	movs	r3, #16
 80171aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	3301      	adds	r3, #1
 80171b2:	607b      	str	r3, [r7, #4]
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	781b      	ldrb	r3, [r3, #0]
 80171b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80171bc:	e002      	b.n	80171c4 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 80171be:	2308      	movs	r3, #8
 80171c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 80171c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80171c8:	3301      	adds	r3, #1
 80171ca:	4a70      	ldr	r2, [pc, #448]	; (801738c <ip4addr_aton+0x244>)
 80171cc:	4413      	add	r3, r2
 80171ce:	781b      	ldrb	r3, [r3, #0]
 80171d0:	f003 0304 	and.w	r3, r3, #4
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	d011      	beq.n	80171fc <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 80171d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80171dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80171de:	fb03 f202 	mul.w	r2, r3, r2
 80171e2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80171e6:	4413      	add	r3, r2
 80171e8:	3b30      	subs	r3, #48	; 0x30
 80171ea:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	3301      	adds	r3, #1
 80171f0:	607b      	str	r3, [r7, #4]
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	781b      	ldrb	r3, [r3, #0]
 80171f6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80171fa:	e7e3      	b.n	80171c4 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 80171fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017200:	2b10      	cmp	r3, #16
 8017202:	d127      	bne.n	8017254 <ip4addr_aton+0x10c>
 8017204:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017208:	3301      	adds	r3, #1
 801720a:	4a60      	ldr	r2, [pc, #384]	; (801738c <ip4addr_aton+0x244>)
 801720c:	4413      	add	r3, r2
 801720e:	781b      	ldrb	r3, [r3, #0]
 8017210:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8017214:	2b00      	cmp	r3, #0
 8017216:	d01d      	beq.n	8017254 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8017218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801721a:	011b      	lsls	r3, r3, #4
 801721c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017220:	f102 010a 	add.w	r1, r2, #10
 8017224:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017228:	3201      	adds	r2, #1
 801722a:	4858      	ldr	r0, [pc, #352]	; (801738c <ip4addr_aton+0x244>)
 801722c:	4402      	add	r2, r0
 801722e:	7812      	ldrb	r2, [r2, #0]
 8017230:	f002 0203 	and.w	r2, r2, #3
 8017234:	2a02      	cmp	r2, #2
 8017236:	d101      	bne.n	801723c <ip4addr_aton+0xf4>
 8017238:	2261      	movs	r2, #97	; 0x61
 801723a:	e000      	b.n	801723e <ip4addr_aton+0xf6>
 801723c:	2241      	movs	r2, #65	; 0x41
 801723e:	1a8a      	subs	r2, r1, r2
 8017240:	4313      	orrs	r3, r2
 8017242:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	3301      	adds	r3, #1
 8017248:	607b      	str	r3, [r7, #4]
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	781b      	ldrb	r3, [r3, #0]
 801724e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 8017252:	e7b7      	b.n	80171c4 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 8017254:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017258:	2b2e      	cmp	r3, #46	; 0x2e
 801725a:	d114      	bne.n	8017286 <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801725c:	f107 030c 	add.w	r3, r7, #12
 8017260:	330c      	adds	r3, #12
 8017262:	69fa      	ldr	r2, [r7, #28]
 8017264:	429a      	cmp	r2, r3
 8017266:	d301      	bcc.n	801726c <ip4addr_aton+0x124>
        return 0;
 8017268:	2300      	movs	r3, #0
 801726a:	e08b      	b.n	8017384 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 801726c:	69fb      	ldr	r3, [r7, #28]
 801726e:	1d1a      	adds	r2, r3, #4
 8017270:	61fa      	str	r2, [r7, #28]
 8017272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017274:	601a      	str	r2, [r3, #0]
      c = *++cp;
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	3301      	adds	r3, #1
 801727a:	607b      	str	r3, [r7, #4]
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	781b      	ldrb	r3, [r3, #0]
 8017280:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 8017284:	e76c      	b.n	8017160 <ip4addr_aton+0x18>
    } else {
      break;
 8017286:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 8017288:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801728c:	2b00      	cmp	r3, #0
 801728e:	d00b      	beq.n	80172a8 <ip4addr_aton+0x160>
 8017290:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017294:	3301      	adds	r3, #1
 8017296:	4a3d      	ldr	r2, [pc, #244]	; (801738c <ip4addr_aton+0x244>)
 8017298:	4413      	add	r3, r2
 801729a:	781b      	ldrb	r3, [r3, #0]
 801729c:	f003 0308 	and.w	r3, r3, #8
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d101      	bne.n	80172a8 <ip4addr_aton+0x160>
    return 0;
 80172a4:	2300      	movs	r3, #0
 80172a6:	e06d      	b.n	8017384 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 80172a8:	f107 030c 	add.w	r3, r7, #12
 80172ac:	69fa      	ldr	r2, [r7, #28]
 80172ae:	1ad3      	subs	r3, r2, r3
 80172b0:	109b      	asrs	r3, r3, #2
 80172b2:	3301      	adds	r3, #1
 80172b4:	2b04      	cmp	r3, #4
 80172b6:	d853      	bhi.n	8017360 <ip4addr_aton+0x218>
 80172b8:	a201      	add	r2, pc, #4	; (adr r2, 80172c0 <ip4addr_aton+0x178>)
 80172ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80172be:	bf00      	nop
 80172c0:	080172d5 	.word	0x080172d5
 80172c4:	0801736f 	.word	0x0801736f
 80172c8:	080172d9 	.word	0x080172d9
 80172cc:	080172fb 	.word	0x080172fb
 80172d0:	08017329 	.word	0x08017329

    case 0:
      return 0;       /* initial nondigit */
 80172d4:	2300      	movs	r3, #0
 80172d6:	e055      	b.n	8017384 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 80172d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80172de:	d301      	bcc.n	80172e4 <ip4addr_aton+0x19c>
        return 0;
 80172e0:	2300      	movs	r3, #0
 80172e2:	e04f      	b.n	8017384 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 80172e4:	68fb      	ldr	r3, [r7, #12]
 80172e6:	2bff      	cmp	r3, #255	; 0xff
 80172e8:	d901      	bls.n	80172ee <ip4addr_aton+0x1a6>
        return 0;
 80172ea:	2300      	movs	r3, #0
 80172ec:	e04a      	b.n	8017384 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 80172ee:	68fb      	ldr	r3, [r7, #12]
 80172f0:	061b      	lsls	r3, r3, #24
 80172f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80172f4:	4313      	orrs	r3, r2
 80172f6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80172f8:	e03a      	b.n	8017370 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 80172fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017300:	d301      	bcc.n	8017306 <ip4addr_aton+0x1be>
        return 0;
 8017302:	2300      	movs	r3, #0
 8017304:	e03e      	b.n	8017384 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8017306:	68fb      	ldr	r3, [r7, #12]
 8017308:	2bff      	cmp	r3, #255	; 0xff
 801730a:	d802      	bhi.n	8017312 <ip4addr_aton+0x1ca>
 801730c:	693b      	ldr	r3, [r7, #16]
 801730e:	2bff      	cmp	r3, #255	; 0xff
 8017310:	d901      	bls.n	8017316 <ip4addr_aton+0x1ce>
        return 0;
 8017312:	2300      	movs	r3, #0
 8017314:	e036      	b.n	8017384 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 8017316:	68fb      	ldr	r3, [r7, #12]
 8017318:	061a      	lsls	r2, r3, #24
 801731a:	693b      	ldr	r3, [r7, #16]
 801731c:	041b      	lsls	r3, r3, #16
 801731e:	4313      	orrs	r3, r2
 8017320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017322:	4313      	orrs	r3, r2
 8017324:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8017326:	e023      	b.n	8017370 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 8017328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801732a:	2bff      	cmp	r3, #255	; 0xff
 801732c:	d901      	bls.n	8017332 <ip4addr_aton+0x1ea>
        return 0;
 801732e:	2300      	movs	r3, #0
 8017330:	e028      	b.n	8017384 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8017332:	68fb      	ldr	r3, [r7, #12]
 8017334:	2bff      	cmp	r3, #255	; 0xff
 8017336:	d805      	bhi.n	8017344 <ip4addr_aton+0x1fc>
 8017338:	693b      	ldr	r3, [r7, #16]
 801733a:	2bff      	cmp	r3, #255	; 0xff
 801733c:	d802      	bhi.n	8017344 <ip4addr_aton+0x1fc>
 801733e:	697b      	ldr	r3, [r7, #20]
 8017340:	2bff      	cmp	r3, #255	; 0xff
 8017342:	d901      	bls.n	8017348 <ip4addr_aton+0x200>
        return 0;
 8017344:	2300      	movs	r3, #0
 8017346:	e01d      	b.n	8017384 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8017348:	68fb      	ldr	r3, [r7, #12]
 801734a:	061a      	lsls	r2, r3, #24
 801734c:	693b      	ldr	r3, [r7, #16]
 801734e:	041b      	lsls	r3, r3, #16
 8017350:	431a      	orrs	r2, r3
 8017352:	697b      	ldr	r3, [r7, #20]
 8017354:	021b      	lsls	r3, r3, #8
 8017356:	4313      	orrs	r3, r2
 8017358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801735a:	4313      	orrs	r3, r2
 801735c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801735e:	e007      	b.n	8017370 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 8017360:	4b0b      	ldr	r3, [pc, #44]	; (8017390 <ip4addr_aton+0x248>)
 8017362:	22f9      	movs	r2, #249	; 0xf9
 8017364:	490b      	ldr	r1, [pc, #44]	; (8017394 <ip4addr_aton+0x24c>)
 8017366:	480c      	ldr	r0, [pc, #48]	; (8017398 <ip4addr_aton+0x250>)
 8017368:	f001 f972 	bl	8018650 <iprintf>
      break;
 801736c:	e000      	b.n	8017370 <ip4addr_aton+0x228>
      break;
 801736e:	bf00      	nop
  }
  if (addr) {
 8017370:	683b      	ldr	r3, [r7, #0]
 8017372:	2b00      	cmp	r3, #0
 8017374:	d005      	beq.n	8017382 <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8017376:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017378:	f7f5 fe8d 	bl	800d096 <lwip_htonl>
 801737c:	4602      	mov	r2, r0
 801737e:	683b      	ldr	r3, [r7, #0]
 8017380:	601a      	str	r2, [r3, #0]
  }
  return 1;
 8017382:	2301      	movs	r3, #1
}
 8017384:	4618      	mov	r0, r3
 8017386:	3728      	adds	r7, #40	; 0x28
 8017388:	46bd      	mov	sp, r7
 801738a:	bd80      	pop	{r7, pc}
 801738c:	0801d748 	.word	0x0801d748
 8017390:	0801d290 	.word	0x0801d290
 8017394:	0801d2cc 	.word	0x0801d2cc
 8017398:	0801d2d8 	.word	0x0801d2d8

0801739c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801739c:	b580      	push	{r7, lr}
 801739e:	b084      	sub	sp, #16
 80173a0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80173a2:	2300      	movs	r3, #0
 80173a4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80173a6:	4b12      	ldr	r3, [pc, #72]	; (80173f0 <ip_reass_tmr+0x54>)
 80173a8:	681b      	ldr	r3, [r3, #0]
 80173aa:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80173ac:	e018      	b.n	80173e0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80173ae:	68fb      	ldr	r3, [r7, #12]
 80173b0:	7fdb      	ldrb	r3, [r3, #31]
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	d00b      	beq.n	80173ce <ip_reass_tmr+0x32>
      r->timer--;
 80173b6:	68fb      	ldr	r3, [r7, #12]
 80173b8:	7fdb      	ldrb	r3, [r3, #31]
 80173ba:	3b01      	subs	r3, #1
 80173bc:	b2da      	uxtb	r2, r3
 80173be:	68fb      	ldr	r3, [r7, #12]
 80173c0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80173c2:	68fb      	ldr	r3, [r7, #12]
 80173c4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80173c6:	68fb      	ldr	r3, [r7, #12]
 80173c8:	681b      	ldr	r3, [r3, #0]
 80173ca:	60fb      	str	r3, [r7, #12]
 80173cc:	e008      	b.n	80173e0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80173ce:	68fb      	ldr	r3, [r7, #12]
 80173d0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80173d2:	68fb      	ldr	r3, [r7, #12]
 80173d4:	681b      	ldr	r3, [r3, #0]
 80173d6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80173d8:	68b9      	ldr	r1, [r7, #8]
 80173da:	6878      	ldr	r0, [r7, #4]
 80173dc:	f000 f80a 	bl	80173f4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80173e0:	68fb      	ldr	r3, [r7, #12]
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	d1e3      	bne.n	80173ae <ip_reass_tmr+0x12>
    }
  }
}
 80173e6:	bf00      	nop
 80173e8:	bf00      	nop
 80173ea:	3710      	adds	r7, #16
 80173ec:	46bd      	mov	sp, r7
 80173ee:	bd80      	pop	{r7, pc}
 80173f0:	2000d3a0 	.word	0x2000d3a0

080173f4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80173f4:	b580      	push	{r7, lr}
 80173f6:	b088      	sub	sp, #32
 80173f8:	af00      	add	r7, sp, #0
 80173fa:	6078      	str	r0, [r7, #4]
 80173fc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80173fe:	2300      	movs	r3, #0
 8017400:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8017402:	683a      	ldr	r2, [r7, #0]
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	429a      	cmp	r2, r3
 8017408:	d105      	bne.n	8017416 <ip_reass_free_complete_datagram+0x22>
 801740a:	4b45      	ldr	r3, [pc, #276]	; (8017520 <ip_reass_free_complete_datagram+0x12c>)
 801740c:	22ab      	movs	r2, #171	; 0xab
 801740e:	4945      	ldr	r1, [pc, #276]	; (8017524 <ip_reass_free_complete_datagram+0x130>)
 8017410:	4845      	ldr	r0, [pc, #276]	; (8017528 <ip_reass_free_complete_datagram+0x134>)
 8017412:	f001 f91d 	bl	8018650 <iprintf>
  if (prev != NULL) {
 8017416:	683b      	ldr	r3, [r7, #0]
 8017418:	2b00      	cmp	r3, #0
 801741a:	d00a      	beq.n	8017432 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801741c:	683b      	ldr	r3, [r7, #0]
 801741e:	681b      	ldr	r3, [r3, #0]
 8017420:	687a      	ldr	r2, [r7, #4]
 8017422:	429a      	cmp	r2, r3
 8017424:	d005      	beq.n	8017432 <ip_reass_free_complete_datagram+0x3e>
 8017426:	4b3e      	ldr	r3, [pc, #248]	; (8017520 <ip_reass_free_complete_datagram+0x12c>)
 8017428:	22ad      	movs	r2, #173	; 0xad
 801742a:	4940      	ldr	r1, [pc, #256]	; (801752c <ip_reass_free_complete_datagram+0x138>)
 801742c:	483e      	ldr	r0, [pc, #248]	; (8017528 <ip_reass_free_complete_datagram+0x134>)
 801742e:	f001 f90f 	bl	8018650 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	685b      	ldr	r3, [r3, #4]
 8017436:	685b      	ldr	r3, [r3, #4]
 8017438:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801743a:	697b      	ldr	r3, [r7, #20]
 801743c:	889b      	ldrh	r3, [r3, #4]
 801743e:	b29b      	uxth	r3, r3
 8017440:	2b00      	cmp	r3, #0
 8017442:	d12a      	bne.n	801749a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	685b      	ldr	r3, [r3, #4]
 8017448:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801744a:	697b      	ldr	r3, [r7, #20]
 801744c:	681a      	ldr	r2, [r3, #0]
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8017452:	69bb      	ldr	r3, [r7, #24]
 8017454:	6858      	ldr	r0, [r3, #4]
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	3308      	adds	r3, #8
 801745a:	2214      	movs	r2, #20
 801745c:	4619      	mov	r1, r3
 801745e:	f001 f8c7 	bl	80185f0 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8017462:	2101      	movs	r1, #1
 8017464:	69b8      	ldr	r0, [r7, #24]
 8017466:	f7ff fb09 	bl	8016a7c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801746a:	69b8      	ldr	r0, [r7, #24]
 801746c:	f7f7 fa6a 	bl	800e944 <pbuf_clen>
 8017470:	4603      	mov	r3, r0
 8017472:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017474:	8bfa      	ldrh	r2, [r7, #30]
 8017476:	8a7b      	ldrh	r3, [r7, #18]
 8017478:	4413      	add	r3, r2
 801747a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801747e:	db05      	blt.n	801748c <ip_reass_free_complete_datagram+0x98>
 8017480:	4b27      	ldr	r3, [pc, #156]	; (8017520 <ip_reass_free_complete_datagram+0x12c>)
 8017482:	22bc      	movs	r2, #188	; 0xbc
 8017484:	492a      	ldr	r1, [pc, #168]	; (8017530 <ip_reass_free_complete_datagram+0x13c>)
 8017486:	4828      	ldr	r0, [pc, #160]	; (8017528 <ip_reass_free_complete_datagram+0x134>)
 8017488:	f001 f8e2 	bl	8018650 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801748c:	8bfa      	ldrh	r2, [r7, #30]
 801748e:	8a7b      	ldrh	r3, [r7, #18]
 8017490:	4413      	add	r3, r2
 8017492:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8017494:	69b8      	ldr	r0, [r7, #24]
 8017496:	f7f7 f9c7 	bl	800e828 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	685b      	ldr	r3, [r3, #4]
 801749e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80174a0:	e01f      	b.n	80174e2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80174a2:	69bb      	ldr	r3, [r7, #24]
 80174a4:	685b      	ldr	r3, [r3, #4]
 80174a6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80174a8:	69bb      	ldr	r3, [r7, #24]
 80174aa:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80174ac:	697b      	ldr	r3, [r7, #20]
 80174ae:	681b      	ldr	r3, [r3, #0]
 80174b0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80174b2:	68f8      	ldr	r0, [r7, #12]
 80174b4:	f7f7 fa46 	bl	800e944 <pbuf_clen>
 80174b8:	4603      	mov	r3, r0
 80174ba:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80174bc:	8bfa      	ldrh	r2, [r7, #30]
 80174be:	8a7b      	ldrh	r3, [r7, #18]
 80174c0:	4413      	add	r3, r2
 80174c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80174c6:	db05      	blt.n	80174d4 <ip_reass_free_complete_datagram+0xe0>
 80174c8:	4b15      	ldr	r3, [pc, #84]	; (8017520 <ip_reass_free_complete_datagram+0x12c>)
 80174ca:	22cc      	movs	r2, #204	; 0xcc
 80174cc:	4918      	ldr	r1, [pc, #96]	; (8017530 <ip_reass_free_complete_datagram+0x13c>)
 80174ce:	4816      	ldr	r0, [pc, #88]	; (8017528 <ip_reass_free_complete_datagram+0x134>)
 80174d0:	f001 f8be 	bl	8018650 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80174d4:	8bfa      	ldrh	r2, [r7, #30]
 80174d6:	8a7b      	ldrh	r3, [r7, #18]
 80174d8:	4413      	add	r3, r2
 80174da:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80174dc:	68f8      	ldr	r0, [r7, #12]
 80174de:	f7f7 f9a3 	bl	800e828 <pbuf_free>
  while (p != NULL) {
 80174e2:	69bb      	ldr	r3, [r7, #24]
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	d1dc      	bne.n	80174a2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80174e8:	6839      	ldr	r1, [r7, #0]
 80174ea:	6878      	ldr	r0, [r7, #4]
 80174ec:	f000 f8c2 	bl	8017674 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80174f0:	4b10      	ldr	r3, [pc, #64]	; (8017534 <ip_reass_free_complete_datagram+0x140>)
 80174f2:	881b      	ldrh	r3, [r3, #0]
 80174f4:	8bfa      	ldrh	r2, [r7, #30]
 80174f6:	429a      	cmp	r2, r3
 80174f8:	d905      	bls.n	8017506 <ip_reass_free_complete_datagram+0x112>
 80174fa:	4b09      	ldr	r3, [pc, #36]	; (8017520 <ip_reass_free_complete_datagram+0x12c>)
 80174fc:	22d2      	movs	r2, #210	; 0xd2
 80174fe:	490e      	ldr	r1, [pc, #56]	; (8017538 <ip_reass_free_complete_datagram+0x144>)
 8017500:	4809      	ldr	r0, [pc, #36]	; (8017528 <ip_reass_free_complete_datagram+0x134>)
 8017502:	f001 f8a5 	bl	8018650 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8017506:	4b0b      	ldr	r3, [pc, #44]	; (8017534 <ip_reass_free_complete_datagram+0x140>)
 8017508:	881a      	ldrh	r2, [r3, #0]
 801750a:	8bfb      	ldrh	r3, [r7, #30]
 801750c:	1ad3      	subs	r3, r2, r3
 801750e:	b29a      	uxth	r2, r3
 8017510:	4b08      	ldr	r3, [pc, #32]	; (8017534 <ip_reass_free_complete_datagram+0x140>)
 8017512:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017514:	8bfb      	ldrh	r3, [r7, #30]
}
 8017516:	4618      	mov	r0, r3
 8017518:	3720      	adds	r7, #32
 801751a:	46bd      	mov	sp, r7
 801751c:	bd80      	pop	{r7, pc}
 801751e:	bf00      	nop
 8017520:	0801d300 	.word	0x0801d300
 8017524:	0801d33c 	.word	0x0801d33c
 8017528:	0801d348 	.word	0x0801d348
 801752c:	0801d370 	.word	0x0801d370
 8017530:	0801d384 	.word	0x0801d384
 8017534:	2000d3a4 	.word	0x2000d3a4
 8017538:	0801d3a4 	.word	0x0801d3a4

0801753c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801753c:	b580      	push	{r7, lr}
 801753e:	b08a      	sub	sp, #40	; 0x28
 8017540:	af00      	add	r7, sp, #0
 8017542:	6078      	str	r0, [r7, #4]
 8017544:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8017546:	2300      	movs	r3, #0
 8017548:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801754a:	2300      	movs	r3, #0
 801754c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801754e:	2300      	movs	r3, #0
 8017550:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8017552:	2300      	movs	r3, #0
 8017554:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8017556:	2300      	movs	r3, #0
 8017558:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801755a:	4b28      	ldr	r3, [pc, #160]	; (80175fc <ip_reass_remove_oldest_datagram+0xc0>)
 801755c:	681b      	ldr	r3, [r3, #0]
 801755e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017560:	e030      	b.n	80175c4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017564:	695a      	ldr	r2, [r3, #20]
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	68db      	ldr	r3, [r3, #12]
 801756a:	429a      	cmp	r2, r3
 801756c:	d10c      	bne.n	8017588 <ip_reass_remove_oldest_datagram+0x4c>
 801756e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017570:	699a      	ldr	r2, [r3, #24]
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	691b      	ldr	r3, [r3, #16]
 8017576:	429a      	cmp	r2, r3
 8017578:	d106      	bne.n	8017588 <ip_reass_remove_oldest_datagram+0x4c>
 801757a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801757c:	899a      	ldrh	r2, [r3, #12]
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	889b      	ldrh	r3, [r3, #4]
 8017582:	b29b      	uxth	r3, r3
 8017584:	429a      	cmp	r2, r3
 8017586:	d014      	beq.n	80175b2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017588:	693b      	ldr	r3, [r7, #16]
 801758a:	3301      	adds	r3, #1
 801758c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801758e:	6a3b      	ldr	r3, [r7, #32]
 8017590:	2b00      	cmp	r3, #0
 8017592:	d104      	bne.n	801759e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017596:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017598:	69fb      	ldr	r3, [r7, #28]
 801759a:	61bb      	str	r3, [r7, #24]
 801759c:	e009      	b.n	80175b2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801759e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175a0:	7fda      	ldrb	r2, [r3, #31]
 80175a2:	6a3b      	ldr	r3, [r7, #32]
 80175a4:	7fdb      	ldrb	r3, [r3, #31]
 80175a6:	429a      	cmp	r2, r3
 80175a8:	d803      	bhi.n	80175b2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80175aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175ac:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80175ae:	69fb      	ldr	r3, [r7, #28]
 80175b0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80175b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175b4:	681b      	ldr	r3, [r3, #0]
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d001      	beq.n	80175be <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80175ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175bc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80175be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175c0:	681b      	ldr	r3, [r3, #0]
 80175c2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80175c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d1cb      	bne.n	8017562 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80175ca:	6a3b      	ldr	r3, [r7, #32]
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	d008      	beq.n	80175e2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80175d0:	69b9      	ldr	r1, [r7, #24]
 80175d2:	6a38      	ldr	r0, [r7, #32]
 80175d4:	f7ff ff0e 	bl	80173f4 <ip_reass_free_complete_datagram>
 80175d8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80175da:	697a      	ldr	r2, [r7, #20]
 80175dc:	68fb      	ldr	r3, [r7, #12]
 80175de:	4413      	add	r3, r2
 80175e0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80175e2:	697a      	ldr	r2, [r7, #20]
 80175e4:	683b      	ldr	r3, [r7, #0]
 80175e6:	429a      	cmp	r2, r3
 80175e8:	da02      	bge.n	80175f0 <ip_reass_remove_oldest_datagram+0xb4>
 80175ea:	693b      	ldr	r3, [r7, #16]
 80175ec:	2b01      	cmp	r3, #1
 80175ee:	dcac      	bgt.n	801754a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80175f0:	697b      	ldr	r3, [r7, #20]
}
 80175f2:	4618      	mov	r0, r3
 80175f4:	3728      	adds	r7, #40	; 0x28
 80175f6:	46bd      	mov	sp, r7
 80175f8:	bd80      	pop	{r7, pc}
 80175fa:	bf00      	nop
 80175fc:	2000d3a0 	.word	0x2000d3a0

08017600 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017600:	b580      	push	{r7, lr}
 8017602:	b084      	sub	sp, #16
 8017604:	af00      	add	r7, sp, #0
 8017606:	6078      	str	r0, [r7, #4]
 8017608:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801760a:	2004      	movs	r0, #4
 801760c:	f7f6 f9e4 	bl	800d9d8 <memp_malloc>
 8017610:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8017612:	68fb      	ldr	r3, [r7, #12]
 8017614:	2b00      	cmp	r3, #0
 8017616:	d110      	bne.n	801763a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017618:	6839      	ldr	r1, [r7, #0]
 801761a:	6878      	ldr	r0, [r7, #4]
 801761c:	f7ff ff8e 	bl	801753c <ip_reass_remove_oldest_datagram>
 8017620:	4602      	mov	r2, r0
 8017622:	683b      	ldr	r3, [r7, #0]
 8017624:	4293      	cmp	r3, r2
 8017626:	dc03      	bgt.n	8017630 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017628:	2004      	movs	r0, #4
 801762a:	f7f6 f9d5 	bl	800d9d8 <memp_malloc>
 801762e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017630:	68fb      	ldr	r3, [r7, #12]
 8017632:	2b00      	cmp	r3, #0
 8017634:	d101      	bne.n	801763a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8017636:	2300      	movs	r3, #0
 8017638:	e016      	b.n	8017668 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801763a:	2220      	movs	r2, #32
 801763c:	2100      	movs	r1, #0
 801763e:	68f8      	ldr	r0, [r7, #12]
 8017640:	f000 fffe 	bl	8018640 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017644:	68fb      	ldr	r3, [r7, #12]
 8017646:	220f      	movs	r2, #15
 8017648:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801764a:	4b09      	ldr	r3, [pc, #36]	; (8017670 <ip_reass_enqueue_new_datagram+0x70>)
 801764c:	681a      	ldr	r2, [r3, #0]
 801764e:	68fb      	ldr	r3, [r7, #12]
 8017650:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017652:	4a07      	ldr	r2, [pc, #28]	; (8017670 <ip_reass_enqueue_new_datagram+0x70>)
 8017654:	68fb      	ldr	r3, [r7, #12]
 8017656:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017658:	68fb      	ldr	r3, [r7, #12]
 801765a:	3308      	adds	r3, #8
 801765c:	2214      	movs	r2, #20
 801765e:	6879      	ldr	r1, [r7, #4]
 8017660:	4618      	mov	r0, r3
 8017662:	f000 ffc5 	bl	80185f0 <memcpy>
  return ipr;
 8017666:	68fb      	ldr	r3, [r7, #12]
}
 8017668:	4618      	mov	r0, r3
 801766a:	3710      	adds	r7, #16
 801766c:	46bd      	mov	sp, r7
 801766e:	bd80      	pop	{r7, pc}
 8017670:	2000d3a0 	.word	0x2000d3a0

08017674 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017674:	b580      	push	{r7, lr}
 8017676:	b082      	sub	sp, #8
 8017678:	af00      	add	r7, sp, #0
 801767a:	6078      	str	r0, [r7, #4]
 801767c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801767e:	4b10      	ldr	r3, [pc, #64]	; (80176c0 <ip_reass_dequeue_datagram+0x4c>)
 8017680:	681b      	ldr	r3, [r3, #0]
 8017682:	687a      	ldr	r2, [r7, #4]
 8017684:	429a      	cmp	r2, r3
 8017686:	d104      	bne.n	8017692 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	681b      	ldr	r3, [r3, #0]
 801768c:	4a0c      	ldr	r2, [pc, #48]	; (80176c0 <ip_reass_dequeue_datagram+0x4c>)
 801768e:	6013      	str	r3, [r2, #0]
 8017690:	e00d      	b.n	80176ae <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017692:	683b      	ldr	r3, [r7, #0]
 8017694:	2b00      	cmp	r3, #0
 8017696:	d106      	bne.n	80176a6 <ip_reass_dequeue_datagram+0x32>
 8017698:	4b0a      	ldr	r3, [pc, #40]	; (80176c4 <ip_reass_dequeue_datagram+0x50>)
 801769a:	f240 1245 	movw	r2, #325	; 0x145
 801769e:	490a      	ldr	r1, [pc, #40]	; (80176c8 <ip_reass_dequeue_datagram+0x54>)
 80176a0:	480a      	ldr	r0, [pc, #40]	; (80176cc <ip_reass_dequeue_datagram+0x58>)
 80176a2:	f000 ffd5 	bl	8018650 <iprintf>
    prev->next = ipr->next;
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	681a      	ldr	r2, [r3, #0]
 80176aa:	683b      	ldr	r3, [r7, #0]
 80176ac:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80176ae:	6879      	ldr	r1, [r7, #4]
 80176b0:	2004      	movs	r0, #4
 80176b2:	f7f6 f9e3 	bl	800da7c <memp_free>
}
 80176b6:	bf00      	nop
 80176b8:	3708      	adds	r7, #8
 80176ba:	46bd      	mov	sp, r7
 80176bc:	bd80      	pop	{r7, pc}
 80176be:	bf00      	nop
 80176c0:	2000d3a0 	.word	0x2000d3a0
 80176c4:	0801d300 	.word	0x0801d300
 80176c8:	0801d3c8 	.word	0x0801d3c8
 80176cc:	0801d348 	.word	0x0801d348

080176d0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80176d0:	b580      	push	{r7, lr}
 80176d2:	b08c      	sub	sp, #48	; 0x30
 80176d4:	af00      	add	r7, sp, #0
 80176d6:	60f8      	str	r0, [r7, #12]
 80176d8:	60b9      	str	r1, [r7, #8]
 80176da:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80176dc:	2300      	movs	r3, #0
 80176de:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80176e0:	2301      	movs	r3, #1
 80176e2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80176e4:	68bb      	ldr	r3, [r7, #8]
 80176e6:	685b      	ldr	r3, [r3, #4]
 80176e8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80176ea:	69fb      	ldr	r3, [r7, #28]
 80176ec:	885b      	ldrh	r3, [r3, #2]
 80176ee:	b29b      	uxth	r3, r3
 80176f0:	4618      	mov	r0, r3
 80176f2:	f7f5 fcbb 	bl	800d06c <lwip_htons>
 80176f6:	4603      	mov	r3, r0
 80176f8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80176fa:	69fb      	ldr	r3, [r7, #28]
 80176fc:	781b      	ldrb	r3, [r3, #0]
 80176fe:	f003 030f 	and.w	r3, r3, #15
 8017702:	b2db      	uxtb	r3, r3
 8017704:	009b      	lsls	r3, r3, #2
 8017706:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017708:	7e7b      	ldrb	r3, [r7, #25]
 801770a:	b29b      	uxth	r3, r3
 801770c:	8b7a      	ldrh	r2, [r7, #26]
 801770e:	429a      	cmp	r2, r3
 8017710:	d202      	bcs.n	8017718 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017712:	f04f 33ff 	mov.w	r3, #4294967295
 8017716:	e135      	b.n	8017984 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8017718:	7e7b      	ldrb	r3, [r7, #25]
 801771a:	b29b      	uxth	r3, r3
 801771c:	8b7a      	ldrh	r2, [r7, #26]
 801771e:	1ad3      	subs	r3, r2, r3
 8017720:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8017722:	69fb      	ldr	r3, [r7, #28]
 8017724:	88db      	ldrh	r3, [r3, #6]
 8017726:	b29b      	uxth	r3, r3
 8017728:	4618      	mov	r0, r3
 801772a:	f7f5 fc9f 	bl	800d06c <lwip_htons>
 801772e:	4603      	mov	r3, r0
 8017730:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017734:	b29b      	uxth	r3, r3
 8017736:	00db      	lsls	r3, r3, #3
 8017738:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801773a:	68bb      	ldr	r3, [r7, #8]
 801773c:	685b      	ldr	r3, [r3, #4]
 801773e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8017740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017742:	2200      	movs	r2, #0
 8017744:	701a      	strb	r2, [r3, #0]
 8017746:	2200      	movs	r2, #0
 8017748:	705a      	strb	r2, [r3, #1]
 801774a:	2200      	movs	r2, #0
 801774c:	709a      	strb	r2, [r3, #2]
 801774e:	2200      	movs	r2, #0
 8017750:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8017752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017754:	8afa      	ldrh	r2, [r7, #22]
 8017756:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8017758:	8afa      	ldrh	r2, [r7, #22]
 801775a:	8b7b      	ldrh	r3, [r7, #26]
 801775c:	4413      	add	r3, r2
 801775e:	b29a      	uxth	r2, r3
 8017760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017762:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8017764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017766:	88db      	ldrh	r3, [r3, #6]
 8017768:	b29b      	uxth	r3, r3
 801776a:	8afa      	ldrh	r2, [r7, #22]
 801776c:	429a      	cmp	r2, r3
 801776e:	d902      	bls.n	8017776 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017770:	f04f 33ff 	mov.w	r3, #4294967295
 8017774:	e106      	b.n	8017984 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8017776:	68fb      	ldr	r3, [r7, #12]
 8017778:	685b      	ldr	r3, [r3, #4]
 801777a:	627b      	str	r3, [r7, #36]	; 0x24
 801777c:	e068      	b.n	8017850 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801777e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017780:	685b      	ldr	r3, [r3, #4]
 8017782:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8017784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017786:	889b      	ldrh	r3, [r3, #4]
 8017788:	b29a      	uxth	r2, r3
 801778a:	693b      	ldr	r3, [r7, #16]
 801778c:	889b      	ldrh	r3, [r3, #4]
 801778e:	b29b      	uxth	r3, r3
 8017790:	429a      	cmp	r2, r3
 8017792:	d235      	bcs.n	8017800 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017798:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801779a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801779c:	2b00      	cmp	r3, #0
 801779e:	d020      	beq.n	80177e2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80177a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177a2:	889b      	ldrh	r3, [r3, #4]
 80177a4:	b29a      	uxth	r2, r3
 80177a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177a8:	88db      	ldrh	r3, [r3, #6]
 80177aa:	b29b      	uxth	r3, r3
 80177ac:	429a      	cmp	r2, r3
 80177ae:	d307      	bcc.n	80177c0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80177b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177b2:	88db      	ldrh	r3, [r3, #6]
 80177b4:	b29a      	uxth	r2, r3
 80177b6:	693b      	ldr	r3, [r7, #16]
 80177b8:	889b      	ldrh	r3, [r3, #4]
 80177ba:	b29b      	uxth	r3, r3
 80177bc:	429a      	cmp	r2, r3
 80177be:	d902      	bls.n	80177c6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80177c0:	f04f 33ff 	mov.w	r3, #4294967295
 80177c4:	e0de      	b.n	8017984 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80177c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177c8:	68ba      	ldr	r2, [r7, #8]
 80177ca:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80177cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177ce:	88db      	ldrh	r3, [r3, #6]
 80177d0:	b29a      	uxth	r2, r3
 80177d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177d4:	889b      	ldrh	r3, [r3, #4]
 80177d6:	b29b      	uxth	r3, r3
 80177d8:	429a      	cmp	r2, r3
 80177da:	d03d      	beq.n	8017858 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80177dc:	2300      	movs	r3, #0
 80177de:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80177e0:	e03a      	b.n	8017858 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80177e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177e4:	88db      	ldrh	r3, [r3, #6]
 80177e6:	b29a      	uxth	r2, r3
 80177e8:	693b      	ldr	r3, [r7, #16]
 80177ea:	889b      	ldrh	r3, [r3, #4]
 80177ec:	b29b      	uxth	r3, r3
 80177ee:	429a      	cmp	r2, r3
 80177f0:	d902      	bls.n	80177f8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80177f2:	f04f 33ff 	mov.w	r3, #4294967295
 80177f6:	e0c5      	b.n	8017984 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80177f8:	68fb      	ldr	r3, [r7, #12]
 80177fa:	68ba      	ldr	r2, [r7, #8]
 80177fc:	605a      	str	r2, [r3, #4]
      break;
 80177fe:	e02b      	b.n	8017858 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017802:	889b      	ldrh	r3, [r3, #4]
 8017804:	b29a      	uxth	r2, r3
 8017806:	693b      	ldr	r3, [r7, #16]
 8017808:	889b      	ldrh	r3, [r3, #4]
 801780a:	b29b      	uxth	r3, r3
 801780c:	429a      	cmp	r2, r3
 801780e:	d102      	bne.n	8017816 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017810:	f04f 33ff 	mov.w	r3, #4294967295
 8017814:	e0b6      	b.n	8017984 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8017816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017818:	889b      	ldrh	r3, [r3, #4]
 801781a:	b29a      	uxth	r2, r3
 801781c:	693b      	ldr	r3, [r7, #16]
 801781e:	88db      	ldrh	r3, [r3, #6]
 8017820:	b29b      	uxth	r3, r3
 8017822:	429a      	cmp	r2, r3
 8017824:	d202      	bcs.n	801782c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017826:	f04f 33ff 	mov.w	r3, #4294967295
 801782a:	e0ab      	b.n	8017984 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801782c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801782e:	2b00      	cmp	r3, #0
 8017830:	d009      	beq.n	8017846 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8017832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017834:	88db      	ldrh	r3, [r3, #6]
 8017836:	b29a      	uxth	r2, r3
 8017838:	693b      	ldr	r3, [r7, #16]
 801783a:	889b      	ldrh	r3, [r3, #4]
 801783c:	b29b      	uxth	r3, r3
 801783e:	429a      	cmp	r2, r3
 8017840:	d001      	beq.n	8017846 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017842:	2300      	movs	r3, #0
 8017844:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8017846:	693b      	ldr	r3, [r7, #16]
 8017848:	681b      	ldr	r3, [r3, #0]
 801784a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801784c:	693b      	ldr	r3, [r7, #16]
 801784e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8017850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017852:	2b00      	cmp	r3, #0
 8017854:	d193      	bne.n	801777e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8017856:	e000      	b.n	801785a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017858:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801785c:	2b00      	cmp	r3, #0
 801785e:	d12d      	bne.n	80178bc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017862:	2b00      	cmp	r3, #0
 8017864:	d01c      	beq.n	80178a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017868:	88db      	ldrh	r3, [r3, #6]
 801786a:	b29a      	uxth	r2, r3
 801786c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801786e:	889b      	ldrh	r3, [r3, #4]
 8017870:	b29b      	uxth	r3, r3
 8017872:	429a      	cmp	r2, r3
 8017874:	d906      	bls.n	8017884 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8017876:	4b45      	ldr	r3, [pc, #276]	; (801798c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017878:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801787c:	4944      	ldr	r1, [pc, #272]	; (8017990 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801787e:	4845      	ldr	r0, [pc, #276]	; (8017994 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017880:	f000 fee6 	bl	8018650 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017886:	68ba      	ldr	r2, [r7, #8]
 8017888:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801788a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801788c:	88db      	ldrh	r3, [r3, #6]
 801788e:	b29a      	uxth	r2, r3
 8017890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017892:	889b      	ldrh	r3, [r3, #4]
 8017894:	b29b      	uxth	r3, r3
 8017896:	429a      	cmp	r2, r3
 8017898:	d010      	beq.n	80178bc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801789a:	2300      	movs	r3, #0
 801789c:	623b      	str	r3, [r7, #32]
 801789e:	e00d      	b.n	80178bc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80178a0:	68fb      	ldr	r3, [r7, #12]
 80178a2:	685b      	ldr	r3, [r3, #4]
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	d006      	beq.n	80178b6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80178a8:	4b38      	ldr	r3, [pc, #224]	; (801798c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80178aa:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80178ae:	493a      	ldr	r1, [pc, #232]	; (8017998 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80178b0:	4838      	ldr	r0, [pc, #224]	; (8017994 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80178b2:	f000 fecd 	bl	8018650 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80178b6:	68fb      	ldr	r3, [r7, #12]
 80178b8:	68ba      	ldr	r2, [r7, #8]
 80178ba:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80178bc:	687b      	ldr	r3, [r7, #4]
 80178be:	2b00      	cmp	r3, #0
 80178c0:	d105      	bne.n	80178ce <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80178c2:	68fb      	ldr	r3, [r7, #12]
 80178c4:	7f9b      	ldrb	r3, [r3, #30]
 80178c6:	f003 0301 	and.w	r3, r3, #1
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d059      	beq.n	8017982 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80178ce:	6a3b      	ldr	r3, [r7, #32]
 80178d0:	2b00      	cmp	r3, #0
 80178d2:	d04f      	beq.n	8017974 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80178d4:	68fb      	ldr	r3, [r7, #12]
 80178d6:	685b      	ldr	r3, [r3, #4]
 80178d8:	2b00      	cmp	r3, #0
 80178da:	d006      	beq.n	80178ea <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80178dc:	68fb      	ldr	r3, [r7, #12]
 80178de:	685b      	ldr	r3, [r3, #4]
 80178e0:	685b      	ldr	r3, [r3, #4]
 80178e2:	889b      	ldrh	r3, [r3, #4]
 80178e4:	b29b      	uxth	r3, r3
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	d002      	beq.n	80178f0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80178ea:	2300      	movs	r3, #0
 80178ec:	623b      	str	r3, [r7, #32]
 80178ee:	e041      	b.n	8017974 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80178f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178f2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80178f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178f6:	681b      	ldr	r3, [r3, #0]
 80178f8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80178fa:	e012      	b.n	8017922 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80178fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178fe:	685b      	ldr	r3, [r3, #4]
 8017900:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8017902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017904:	88db      	ldrh	r3, [r3, #6]
 8017906:	b29a      	uxth	r2, r3
 8017908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801790a:	889b      	ldrh	r3, [r3, #4]
 801790c:	b29b      	uxth	r3, r3
 801790e:	429a      	cmp	r2, r3
 8017910:	d002      	beq.n	8017918 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8017912:	2300      	movs	r3, #0
 8017914:	623b      	str	r3, [r7, #32]
            break;
 8017916:	e007      	b.n	8017928 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8017918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801791a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801791c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801791e:	681b      	ldr	r3, [r3, #0]
 8017920:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017924:	2b00      	cmp	r3, #0
 8017926:	d1e9      	bne.n	80178fc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8017928:	6a3b      	ldr	r3, [r7, #32]
 801792a:	2b00      	cmp	r3, #0
 801792c:	d022      	beq.n	8017974 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801792e:	68fb      	ldr	r3, [r7, #12]
 8017930:	685b      	ldr	r3, [r3, #4]
 8017932:	2b00      	cmp	r3, #0
 8017934:	d106      	bne.n	8017944 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8017936:	4b15      	ldr	r3, [pc, #84]	; (801798c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017938:	f240 12df 	movw	r2, #479	; 0x1df
 801793c:	4917      	ldr	r1, [pc, #92]	; (801799c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801793e:	4815      	ldr	r0, [pc, #84]	; (8017994 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017940:	f000 fe86 	bl	8018650 <iprintf>
          LWIP_ASSERT("sanity check",
 8017944:	68fb      	ldr	r3, [r7, #12]
 8017946:	685b      	ldr	r3, [r3, #4]
 8017948:	685b      	ldr	r3, [r3, #4]
 801794a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801794c:	429a      	cmp	r2, r3
 801794e:	d106      	bne.n	801795e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8017950:	4b0e      	ldr	r3, [pc, #56]	; (801798c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017952:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8017956:	4911      	ldr	r1, [pc, #68]	; (801799c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017958:	480e      	ldr	r0, [pc, #56]	; (8017994 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801795a:	f000 fe79 	bl	8018650 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801795e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017960:	681b      	ldr	r3, [r3, #0]
 8017962:	2b00      	cmp	r3, #0
 8017964:	d006      	beq.n	8017974 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8017966:	4b09      	ldr	r3, [pc, #36]	; (801798c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017968:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801796c:	490c      	ldr	r1, [pc, #48]	; (80179a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801796e:	4809      	ldr	r0, [pc, #36]	; (8017994 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017970:	f000 fe6e 	bl	8018650 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017974:	6a3b      	ldr	r3, [r7, #32]
 8017976:	2b00      	cmp	r3, #0
 8017978:	bf14      	ite	ne
 801797a:	2301      	movne	r3, #1
 801797c:	2300      	moveq	r3, #0
 801797e:	b2db      	uxtb	r3, r3
 8017980:	e000      	b.n	8017984 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8017982:	2300      	movs	r3, #0
}
 8017984:	4618      	mov	r0, r3
 8017986:	3730      	adds	r7, #48	; 0x30
 8017988:	46bd      	mov	sp, r7
 801798a:	bd80      	pop	{r7, pc}
 801798c:	0801d300 	.word	0x0801d300
 8017990:	0801d3e4 	.word	0x0801d3e4
 8017994:	0801d348 	.word	0x0801d348
 8017998:	0801d404 	.word	0x0801d404
 801799c:	0801d43c 	.word	0x0801d43c
 80179a0:	0801d44c 	.word	0x0801d44c

080179a4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80179a4:	b580      	push	{r7, lr}
 80179a6:	b08e      	sub	sp, #56	; 0x38
 80179a8:	af00      	add	r7, sp, #0
 80179aa:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	685b      	ldr	r3, [r3, #4]
 80179b0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80179b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179b4:	781b      	ldrb	r3, [r3, #0]
 80179b6:	f003 030f 	and.w	r3, r3, #15
 80179ba:	b2db      	uxtb	r3, r3
 80179bc:	009b      	lsls	r3, r3, #2
 80179be:	b2db      	uxtb	r3, r3
 80179c0:	2b14      	cmp	r3, #20
 80179c2:	f040 8171 	bne.w	8017ca8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80179c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179c8:	88db      	ldrh	r3, [r3, #6]
 80179ca:	b29b      	uxth	r3, r3
 80179cc:	4618      	mov	r0, r3
 80179ce:	f7f5 fb4d 	bl	800d06c <lwip_htons>
 80179d2:	4603      	mov	r3, r0
 80179d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80179d8:	b29b      	uxth	r3, r3
 80179da:	00db      	lsls	r3, r3, #3
 80179dc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80179de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179e0:	885b      	ldrh	r3, [r3, #2]
 80179e2:	b29b      	uxth	r3, r3
 80179e4:	4618      	mov	r0, r3
 80179e6:	f7f5 fb41 	bl	800d06c <lwip_htons>
 80179ea:	4603      	mov	r3, r0
 80179ec:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80179ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179f0:	781b      	ldrb	r3, [r3, #0]
 80179f2:	f003 030f 	and.w	r3, r3, #15
 80179f6:	b2db      	uxtb	r3, r3
 80179f8:	009b      	lsls	r3, r3, #2
 80179fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80179fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017a02:	b29b      	uxth	r3, r3
 8017a04:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017a06:	429a      	cmp	r2, r3
 8017a08:	f0c0 8150 	bcc.w	8017cac <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017a0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017a10:	b29b      	uxth	r3, r3
 8017a12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017a14:	1ad3      	subs	r3, r2, r3
 8017a16:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8017a18:	6878      	ldr	r0, [r7, #4]
 8017a1a:	f7f6 ff93 	bl	800e944 <pbuf_clen>
 8017a1e:	4603      	mov	r3, r0
 8017a20:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8017a22:	4b8c      	ldr	r3, [pc, #560]	; (8017c54 <ip4_reass+0x2b0>)
 8017a24:	881b      	ldrh	r3, [r3, #0]
 8017a26:	461a      	mov	r2, r3
 8017a28:	8c3b      	ldrh	r3, [r7, #32]
 8017a2a:	4413      	add	r3, r2
 8017a2c:	2b0a      	cmp	r3, #10
 8017a2e:	dd10      	ble.n	8017a52 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017a30:	8c3b      	ldrh	r3, [r7, #32]
 8017a32:	4619      	mov	r1, r3
 8017a34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017a36:	f7ff fd81 	bl	801753c <ip_reass_remove_oldest_datagram>
 8017a3a:	4603      	mov	r3, r0
 8017a3c:	2b00      	cmp	r3, #0
 8017a3e:	f000 8137 	beq.w	8017cb0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8017a42:	4b84      	ldr	r3, [pc, #528]	; (8017c54 <ip4_reass+0x2b0>)
 8017a44:	881b      	ldrh	r3, [r3, #0]
 8017a46:	461a      	mov	r2, r3
 8017a48:	8c3b      	ldrh	r3, [r7, #32]
 8017a4a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017a4c:	2b0a      	cmp	r3, #10
 8017a4e:	f300 812f 	bgt.w	8017cb0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017a52:	4b81      	ldr	r3, [pc, #516]	; (8017c58 <ip4_reass+0x2b4>)
 8017a54:	681b      	ldr	r3, [r3, #0]
 8017a56:	633b      	str	r3, [r7, #48]	; 0x30
 8017a58:	e015      	b.n	8017a86 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8017a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a5c:	695a      	ldr	r2, [r3, #20]
 8017a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a60:	68db      	ldr	r3, [r3, #12]
 8017a62:	429a      	cmp	r2, r3
 8017a64:	d10c      	bne.n	8017a80 <ip4_reass+0xdc>
 8017a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a68:	699a      	ldr	r2, [r3, #24]
 8017a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a6c:	691b      	ldr	r3, [r3, #16]
 8017a6e:	429a      	cmp	r2, r3
 8017a70:	d106      	bne.n	8017a80 <ip4_reass+0xdc>
 8017a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a74:	899a      	ldrh	r2, [r3, #12]
 8017a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a78:	889b      	ldrh	r3, [r3, #4]
 8017a7a:	b29b      	uxth	r3, r3
 8017a7c:	429a      	cmp	r2, r3
 8017a7e:	d006      	beq.n	8017a8e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a82:	681b      	ldr	r3, [r3, #0]
 8017a84:	633b      	str	r3, [r7, #48]	; 0x30
 8017a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a88:	2b00      	cmp	r3, #0
 8017a8a:	d1e6      	bne.n	8017a5a <ip4_reass+0xb6>
 8017a8c:	e000      	b.n	8017a90 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8017a8e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a92:	2b00      	cmp	r3, #0
 8017a94:	d109      	bne.n	8017aaa <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8017a96:	8c3b      	ldrh	r3, [r7, #32]
 8017a98:	4619      	mov	r1, r3
 8017a9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017a9c:	f7ff fdb0 	bl	8017600 <ip_reass_enqueue_new_datagram>
 8017aa0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8017aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	d11c      	bne.n	8017ae2 <ip4_reass+0x13e>
      goto nullreturn;
 8017aa8:	e105      	b.n	8017cb6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017aac:	88db      	ldrh	r3, [r3, #6]
 8017aae:	b29b      	uxth	r3, r3
 8017ab0:	4618      	mov	r0, r3
 8017ab2:	f7f5 fadb 	bl	800d06c <lwip_htons>
 8017ab6:	4603      	mov	r3, r0
 8017ab8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	d110      	bne.n	8017ae2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ac2:	89db      	ldrh	r3, [r3, #14]
 8017ac4:	4618      	mov	r0, r3
 8017ac6:	f7f5 fad1 	bl	800d06c <lwip_htons>
 8017aca:	4603      	mov	r3, r0
 8017acc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	d006      	beq.n	8017ae2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8017ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ad6:	3308      	adds	r3, #8
 8017ad8:	2214      	movs	r2, #20
 8017ada:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017adc:	4618      	mov	r0, r3
 8017ade:	f000 fd87 	bl	80185f0 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8017ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ae4:	88db      	ldrh	r3, [r3, #6]
 8017ae6:	b29b      	uxth	r3, r3
 8017ae8:	f003 0320 	and.w	r3, r3, #32
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	bf0c      	ite	eq
 8017af0:	2301      	moveq	r3, #1
 8017af2:	2300      	movne	r3, #0
 8017af4:	b2db      	uxtb	r3, r3
 8017af6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017af8:	69fb      	ldr	r3, [r7, #28]
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	d00e      	beq.n	8017b1c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8017afe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017b00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017b02:	4413      	add	r3, r2
 8017b04:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8017b06:	8b7a      	ldrh	r2, [r7, #26]
 8017b08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017b0a:	429a      	cmp	r2, r3
 8017b0c:	f0c0 80a0 	bcc.w	8017c50 <ip4_reass+0x2ac>
 8017b10:	8b7b      	ldrh	r3, [r7, #26]
 8017b12:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8017b16:	4293      	cmp	r3, r2
 8017b18:	f200 809a 	bhi.w	8017c50 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017b1c:	69fa      	ldr	r2, [r7, #28]
 8017b1e:	6879      	ldr	r1, [r7, #4]
 8017b20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017b22:	f7ff fdd5 	bl	80176d0 <ip_reass_chain_frag_into_datagram_and_validate>
 8017b26:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017b28:	697b      	ldr	r3, [r7, #20]
 8017b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b2e:	f000 809b 	beq.w	8017c68 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8017b32:	4b48      	ldr	r3, [pc, #288]	; (8017c54 <ip4_reass+0x2b0>)
 8017b34:	881a      	ldrh	r2, [r3, #0]
 8017b36:	8c3b      	ldrh	r3, [r7, #32]
 8017b38:	4413      	add	r3, r2
 8017b3a:	b29a      	uxth	r2, r3
 8017b3c:	4b45      	ldr	r3, [pc, #276]	; (8017c54 <ip4_reass+0x2b0>)
 8017b3e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017b40:	69fb      	ldr	r3, [r7, #28]
 8017b42:	2b00      	cmp	r3, #0
 8017b44:	d00d      	beq.n	8017b62 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8017b46:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017b48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017b4a:	4413      	add	r3, r2
 8017b4c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8017b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b50:	8a7a      	ldrh	r2, [r7, #18]
 8017b52:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8017b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b56:	7f9b      	ldrb	r3, [r3, #30]
 8017b58:	f043 0301 	orr.w	r3, r3, #1
 8017b5c:	b2da      	uxtb	r2, r3
 8017b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b60:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8017b62:	697b      	ldr	r3, [r7, #20]
 8017b64:	2b01      	cmp	r3, #1
 8017b66:	d171      	bne.n	8017c4c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8017b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b6a:	8b9b      	ldrh	r3, [r3, #28]
 8017b6c:	3314      	adds	r3, #20
 8017b6e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8017b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b72:	685b      	ldr	r3, [r3, #4]
 8017b74:	685b      	ldr	r3, [r3, #4]
 8017b76:	681b      	ldr	r3, [r3, #0]
 8017b78:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8017b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b7c:	685b      	ldr	r3, [r3, #4]
 8017b7e:	685b      	ldr	r3, [r3, #4]
 8017b80:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8017b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b84:	3308      	adds	r3, #8
 8017b86:	2214      	movs	r2, #20
 8017b88:	4619      	mov	r1, r3
 8017b8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017b8c:	f000 fd30 	bl	80185f0 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017b90:	8a3b      	ldrh	r3, [r7, #16]
 8017b92:	4618      	mov	r0, r3
 8017b94:	f7f5 fa6a 	bl	800d06c <lwip_htons>
 8017b98:	4603      	mov	r3, r0
 8017b9a:	461a      	mov	r2, r3
 8017b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b9e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ba2:	2200      	movs	r2, #0
 8017ba4:	719a      	strb	r2, [r3, #6]
 8017ba6:	2200      	movs	r2, #0
 8017ba8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8017baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bac:	2200      	movs	r2, #0
 8017bae:	729a      	strb	r2, [r3, #10]
 8017bb0:	2200      	movs	r2, #0
 8017bb2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8017bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bb6:	685b      	ldr	r3, [r3, #4]
 8017bb8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8017bba:	e00d      	b.n	8017bd8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8017bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017bbe:	685b      	ldr	r3, [r3, #4]
 8017bc0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8017bc2:	2114      	movs	r1, #20
 8017bc4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017bc6:	f7f6 fd77 	bl	800e6b8 <pbuf_remove_header>
      pbuf_cat(p, r);
 8017bca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017bcc:	6878      	ldr	r0, [r7, #4]
 8017bce:	f7f6 fef9 	bl	800e9c4 <pbuf_cat>
      r = iprh->next_pbuf;
 8017bd2:	68fb      	ldr	r3, [r7, #12]
 8017bd4:	681b      	ldr	r3, [r3, #0]
 8017bd6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8017bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017bda:	2b00      	cmp	r3, #0
 8017bdc:	d1ee      	bne.n	8017bbc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8017bde:	4b1e      	ldr	r3, [pc, #120]	; (8017c58 <ip4_reass+0x2b4>)
 8017be0:	681b      	ldr	r3, [r3, #0]
 8017be2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017be4:	429a      	cmp	r2, r3
 8017be6:	d102      	bne.n	8017bee <ip4_reass+0x24a>
      ipr_prev = NULL;
 8017be8:	2300      	movs	r3, #0
 8017bea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017bec:	e010      	b.n	8017c10 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017bee:	4b1a      	ldr	r3, [pc, #104]	; (8017c58 <ip4_reass+0x2b4>)
 8017bf0:	681b      	ldr	r3, [r3, #0]
 8017bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017bf4:	e007      	b.n	8017c06 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8017bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bf8:	681b      	ldr	r3, [r3, #0]
 8017bfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017bfc:	429a      	cmp	r2, r3
 8017bfe:	d006      	beq.n	8017c0e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c02:	681b      	ldr	r3, [r3, #0]
 8017c04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c08:	2b00      	cmp	r3, #0
 8017c0a:	d1f4      	bne.n	8017bf6 <ip4_reass+0x252>
 8017c0c:	e000      	b.n	8017c10 <ip4_reass+0x26c>
          break;
 8017c0e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017c10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017c12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017c14:	f7ff fd2e 	bl	8017674 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8017c18:	6878      	ldr	r0, [r7, #4]
 8017c1a:	f7f6 fe93 	bl	800e944 <pbuf_clen>
 8017c1e:	4603      	mov	r3, r0
 8017c20:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8017c22:	4b0c      	ldr	r3, [pc, #48]	; (8017c54 <ip4_reass+0x2b0>)
 8017c24:	881b      	ldrh	r3, [r3, #0]
 8017c26:	8c3a      	ldrh	r2, [r7, #32]
 8017c28:	429a      	cmp	r2, r3
 8017c2a:	d906      	bls.n	8017c3a <ip4_reass+0x296>
 8017c2c:	4b0b      	ldr	r3, [pc, #44]	; (8017c5c <ip4_reass+0x2b8>)
 8017c2e:	f240 229b 	movw	r2, #667	; 0x29b
 8017c32:	490b      	ldr	r1, [pc, #44]	; (8017c60 <ip4_reass+0x2bc>)
 8017c34:	480b      	ldr	r0, [pc, #44]	; (8017c64 <ip4_reass+0x2c0>)
 8017c36:	f000 fd0b 	bl	8018650 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8017c3a:	4b06      	ldr	r3, [pc, #24]	; (8017c54 <ip4_reass+0x2b0>)
 8017c3c:	881a      	ldrh	r2, [r3, #0]
 8017c3e:	8c3b      	ldrh	r3, [r7, #32]
 8017c40:	1ad3      	subs	r3, r2, r3
 8017c42:	b29a      	uxth	r2, r3
 8017c44:	4b03      	ldr	r3, [pc, #12]	; (8017c54 <ip4_reass+0x2b0>)
 8017c46:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	e038      	b.n	8017cbe <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8017c4c:	2300      	movs	r3, #0
 8017c4e:	e036      	b.n	8017cbe <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8017c50:	bf00      	nop
 8017c52:	e00a      	b.n	8017c6a <ip4_reass+0x2c6>
 8017c54:	2000d3a4 	.word	0x2000d3a4
 8017c58:	2000d3a0 	.word	0x2000d3a0
 8017c5c:	0801d300 	.word	0x0801d300
 8017c60:	0801d470 	.word	0x0801d470
 8017c64:	0801d348 	.word	0x0801d348
    goto nullreturn_ipr;
 8017c68:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8017c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c6c:	2b00      	cmp	r3, #0
 8017c6e:	d106      	bne.n	8017c7e <ip4_reass+0x2da>
 8017c70:	4b15      	ldr	r3, [pc, #84]	; (8017cc8 <ip4_reass+0x324>)
 8017c72:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8017c76:	4915      	ldr	r1, [pc, #84]	; (8017ccc <ip4_reass+0x328>)
 8017c78:	4815      	ldr	r0, [pc, #84]	; (8017cd0 <ip4_reass+0x32c>)
 8017c7a:	f000 fce9 	bl	8018650 <iprintf>
  if (ipr->p == NULL) {
 8017c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c80:	685b      	ldr	r3, [r3, #4]
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	d116      	bne.n	8017cb4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8017c86:	4b13      	ldr	r3, [pc, #76]	; (8017cd4 <ip4_reass+0x330>)
 8017c88:	681b      	ldr	r3, [r3, #0]
 8017c8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017c8c:	429a      	cmp	r2, r3
 8017c8e:	d006      	beq.n	8017c9e <ip4_reass+0x2fa>
 8017c90:	4b0d      	ldr	r3, [pc, #52]	; (8017cc8 <ip4_reass+0x324>)
 8017c92:	f240 22ab 	movw	r2, #683	; 0x2ab
 8017c96:	4910      	ldr	r1, [pc, #64]	; (8017cd8 <ip4_reass+0x334>)
 8017c98:	480d      	ldr	r0, [pc, #52]	; (8017cd0 <ip4_reass+0x32c>)
 8017c9a:	f000 fcd9 	bl	8018650 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8017c9e:	2100      	movs	r1, #0
 8017ca0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017ca2:	f7ff fce7 	bl	8017674 <ip_reass_dequeue_datagram>
 8017ca6:	e006      	b.n	8017cb6 <ip4_reass+0x312>
    goto nullreturn;
 8017ca8:	bf00      	nop
 8017caa:	e004      	b.n	8017cb6 <ip4_reass+0x312>
    goto nullreturn;
 8017cac:	bf00      	nop
 8017cae:	e002      	b.n	8017cb6 <ip4_reass+0x312>
      goto nullreturn;
 8017cb0:	bf00      	nop
 8017cb2:	e000      	b.n	8017cb6 <ip4_reass+0x312>
  }

nullreturn:
 8017cb4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8017cb6:	6878      	ldr	r0, [r7, #4]
 8017cb8:	f7f6 fdb6 	bl	800e828 <pbuf_free>
  return NULL;
 8017cbc:	2300      	movs	r3, #0
}
 8017cbe:	4618      	mov	r0, r3
 8017cc0:	3738      	adds	r7, #56	; 0x38
 8017cc2:	46bd      	mov	sp, r7
 8017cc4:	bd80      	pop	{r7, pc}
 8017cc6:	bf00      	nop
 8017cc8:	0801d300 	.word	0x0801d300
 8017ccc:	0801d48c 	.word	0x0801d48c
 8017cd0:	0801d348 	.word	0x0801d348
 8017cd4:	2000d3a0 	.word	0x2000d3a0
 8017cd8:	0801d498 	.word	0x0801d498

08017cdc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8017cdc:	b580      	push	{r7, lr}
 8017cde:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8017ce0:	2005      	movs	r0, #5
 8017ce2:	f7f5 fe79 	bl	800d9d8 <memp_malloc>
 8017ce6:	4603      	mov	r3, r0
}
 8017ce8:	4618      	mov	r0, r3
 8017cea:	bd80      	pop	{r7, pc}

08017cec <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8017cec:	b580      	push	{r7, lr}
 8017cee:	b082      	sub	sp, #8
 8017cf0:	af00      	add	r7, sp, #0
 8017cf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	d106      	bne.n	8017d08 <ip_frag_free_pbuf_custom_ref+0x1c>
 8017cfa:	4b07      	ldr	r3, [pc, #28]	; (8017d18 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8017cfc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8017d00:	4906      	ldr	r1, [pc, #24]	; (8017d1c <ip_frag_free_pbuf_custom_ref+0x30>)
 8017d02:	4807      	ldr	r0, [pc, #28]	; (8017d20 <ip_frag_free_pbuf_custom_ref+0x34>)
 8017d04:	f000 fca4 	bl	8018650 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8017d08:	6879      	ldr	r1, [r7, #4]
 8017d0a:	2005      	movs	r0, #5
 8017d0c:	f7f5 feb6 	bl	800da7c <memp_free>
}
 8017d10:	bf00      	nop
 8017d12:	3708      	adds	r7, #8
 8017d14:	46bd      	mov	sp, r7
 8017d16:	bd80      	pop	{r7, pc}
 8017d18:	0801d300 	.word	0x0801d300
 8017d1c:	0801d4b8 	.word	0x0801d4b8
 8017d20:	0801d348 	.word	0x0801d348

08017d24 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8017d24:	b580      	push	{r7, lr}
 8017d26:	b084      	sub	sp, #16
 8017d28:	af00      	add	r7, sp, #0
 8017d2a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8017d30:	68fb      	ldr	r3, [r7, #12]
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	d106      	bne.n	8017d44 <ipfrag_free_pbuf_custom+0x20>
 8017d36:	4b11      	ldr	r3, [pc, #68]	; (8017d7c <ipfrag_free_pbuf_custom+0x58>)
 8017d38:	f240 22ce 	movw	r2, #718	; 0x2ce
 8017d3c:	4910      	ldr	r1, [pc, #64]	; (8017d80 <ipfrag_free_pbuf_custom+0x5c>)
 8017d3e:	4811      	ldr	r0, [pc, #68]	; (8017d84 <ipfrag_free_pbuf_custom+0x60>)
 8017d40:	f000 fc86 	bl	8018650 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8017d44:	68fa      	ldr	r2, [r7, #12]
 8017d46:	687b      	ldr	r3, [r7, #4]
 8017d48:	429a      	cmp	r2, r3
 8017d4a:	d006      	beq.n	8017d5a <ipfrag_free_pbuf_custom+0x36>
 8017d4c:	4b0b      	ldr	r3, [pc, #44]	; (8017d7c <ipfrag_free_pbuf_custom+0x58>)
 8017d4e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8017d52:	490d      	ldr	r1, [pc, #52]	; (8017d88 <ipfrag_free_pbuf_custom+0x64>)
 8017d54:	480b      	ldr	r0, [pc, #44]	; (8017d84 <ipfrag_free_pbuf_custom+0x60>)
 8017d56:	f000 fc7b 	bl	8018650 <iprintf>
  if (pcr->original != NULL) {
 8017d5a:	68fb      	ldr	r3, [r7, #12]
 8017d5c:	695b      	ldr	r3, [r3, #20]
 8017d5e:	2b00      	cmp	r3, #0
 8017d60:	d004      	beq.n	8017d6c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8017d62:	68fb      	ldr	r3, [r7, #12]
 8017d64:	695b      	ldr	r3, [r3, #20]
 8017d66:	4618      	mov	r0, r3
 8017d68:	f7f6 fd5e 	bl	800e828 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8017d6c:	68f8      	ldr	r0, [r7, #12]
 8017d6e:	f7ff ffbd 	bl	8017cec <ip_frag_free_pbuf_custom_ref>
}
 8017d72:	bf00      	nop
 8017d74:	3710      	adds	r7, #16
 8017d76:	46bd      	mov	sp, r7
 8017d78:	bd80      	pop	{r7, pc}
 8017d7a:	bf00      	nop
 8017d7c:	0801d300 	.word	0x0801d300
 8017d80:	0801d4c4 	.word	0x0801d4c4
 8017d84:	0801d348 	.word	0x0801d348
 8017d88:	0801d4d0 	.word	0x0801d4d0

08017d8c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017d8c:	b580      	push	{r7, lr}
 8017d8e:	b094      	sub	sp, #80	; 0x50
 8017d90:	af02      	add	r7, sp, #8
 8017d92:	60f8      	str	r0, [r7, #12]
 8017d94:	60b9      	str	r1, [r7, #8]
 8017d96:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8017d98:	2300      	movs	r3, #0
 8017d9a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8017d9e:	68bb      	ldr	r3, [r7, #8]
 8017da0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017da2:	3b14      	subs	r3, #20
 8017da4:	2b00      	cmp	r3, #0
 8017da6:	da00      	bge.n	8017daa <ip4_frag+0x1e>
 8017da8:	3307      	adds	r3, #7
 8017daa:	10db      	asrs	r3, r3, #3
 8017dac:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8017dae:	2314      	movs	r3, #20
 8017db0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8017db2:	68fb      	ldr	r3, [r7, #12]
 8017db4:	685b      	ldr	r3, [r3, #4]
 8017db6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8017db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017dba:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8017dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dbe:	781b      	ldrb	r3, [r3, #0]
 8017dc0:	f003 030f 	and.w	r3, r3, #15
 8017dc4:	b2db      	uxtb	r3, r3
 8017dc6:	009b      	lsls	r3, r3, #2
 8017dc8:	b2db      	uxtb	r3, r3
 8017dca:	2b14      	cmp	r3, #20
 8017dcc:	d002      	beq.n	8017dd4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8017dce:	f06f 0305 	mvn.w	r3, #5
 8017dd2:	e110      	b.n	8017ff6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8017dd4:	68fb      	ldr	r3, [r7, #12]
 8017dd6:	895b      	ldrh	r3, [r3, #10]
 8017dd8:	2b13      	cmp	r3, #19
 8017dda:	d809      	bhi.n	8017df0 <ip4_frag+0x64>
 8017ddc:	4b88      	ldr	r3, [pc, #544]	; (8018000 <ip4_frag+0x274>)
 8017dde:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8017de2:	4988      	ldr	r1, [pc, #544]	; (8018004 <ip4_frag+0x278>)
 8017de4:	4888      	ldr	r0, [pc, #544]	; (8018008 <ip4_frag+0x27c>)
 8017de6:	f000 fc33 	bl	8018650 <iprintf>
 8017dea:	f06f 0305 	mvn.w	r3, #5
 8017dee:	e102      	b.n	8017ff6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8017df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017df2:	88db      	ldrh	r3, [r3, #6]
 8017df4:	b29b      	uxth	r3, r3
 8017df6:	4618      	mov	r0, r3
 8017df8:	f7f5 f938 	bl	800d06c <lwip_htons>
 8017dfc:	4603      	mov	r3, r0
 8017dfe:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8017e00:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017e02:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017e06:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8017e0a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017e0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017e10:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8017e12:	68fb      	ldr	r3, [r7, #12]
 8017e14:	891b      	ldrh	r3, [r3, #8]
 8017e16:	3b14      	subs	r3, #20
 8017e18:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8017e1c:	e0e1      	b.n	8017fe2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8017e1e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017e20:	00db      	lsls	r3, r3, #3
 8017e22:	b29b      	uxth	r3, r3
 8017e24:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017e28:	4293      	cmp	r3, r2
 8017e2a:	bf28      	it	cs
 8017e2c:	4613      	movcs	r3, r2
 8017e2e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8017e30:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017e34:	2114      	movs	r1, #20
 8017e36:	200e      	movs	r0, #14
 8017e38:	f7f6 f9e0 	bl	800e1fc <pbuf_alloc>
 8017e3c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8017e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e40:	2b00      	cmp	r3, #0
 8017e42:	f000 80d5 	beq.w	8017ff0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8017e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e48:	895b      	ldrh	r3, [r3, #10]
 8017e4a:	2b13      	cmp	r3, #19
 8017e4c:	d806      	bhi.n	8017e5c <ip4_frag+0xd0>
 8017e4e:	4b6c      	ldr	r3, [pc, #432]	; (8018000 <ip4_frag+0x274>)
 8017e50:	f44f 7249 	mov.w	r2, #804	; 0x324
 8017e54:	496d      	ldr	r1, [pc, #436]	; (801800c <ip4_frag+0x280>)
 8017e56:	486c      	ldr	r0, [pc, #432]	; (8018008 <ip4_frag+0x27c>)
 8017e58:	f000 fbfa 	bl	8018650 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e5e:	685b      	ldr	r3, [r3, #4]
 8017e60:	2214      	movs	r2, #20
 8017e62:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017e64:	4618      	mov	r0, r3
 8017e66:	f000 fbc3 	bl	80185f0 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8017e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e6c:	685b      	ldr	r3, [r3, #4]
 8017e6e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8017e70:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017e72:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8017e76:	e064      	b.n	8017f42 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8017e78:	68fb      	ldr	r3, [r7, #12]
 8017e7a:	895a      	ldrh	r2, [r3, #10]
 8017e7c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017e7e:	1ad3      	subs	r3, r2, r3
 8017e80:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8017e82:	68fb      	ldr	r3, [r7, #12]
 8017e84:	895b      	ldrh	r3, [r3, #10]
 8017e86:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017e88:	429a      	cmp	r2, r3
 8017e8a:	d906      	bls.n	8017e9a <ip4_frag+0x10e>
 8017e8c:	4b5c      	ldr	r3, [pc, #368]	; (8018000 <ip4_frag+0x274>)
 8017e8e:	f240 322d 	movw	r2, #813	; 0x32d
 8017e92:	495f      	ldr	r1, [pc, #380]	; (8018010 <ip4_frag+0x284>)
 8017e94:	485c      	ldr	r0, [pc, #368]	; (8018008 <ip4_frag+0x27c>)
 8017e96:	f000 fbdb 	bl	8018650 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8017e9a:	8bfa      	ldrh	r2, [r7, #30]
 8017e9c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017ea0:	4293      	cmp	r3, r2
 8017ea2:	bf28      	it	cs
 8017ea4:	4613      	movcs	r3, r2
 8017ea6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8017eaa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	d105      	bne.n	8017ebe <ip4_frag+0x132>
        poff = 0;
 8017eb2:	2300      	movs	r3, #0
 8017eb4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017eb6:	68fb      	ldr	r3, [r7, #12]
 8017eb8:	681b      	ldr	r3, [r3, #0]
 8017eba:	60fb      	str	r3, [r7, #12]
        continue;
 8017ebc:	e041      	b.n	8017f42 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8017ebe:	f7ff ff0d 	bl	8017cdc <ip_frag_alloc_pbuf_custom_ref>
 8017ec2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8017ec4:	69bb      	ldr	r3, [r7, #24]
 8017ec6:	2b00      	cmp	r3, #0
 8017ec8:	d103      	bne.n	8017ed2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8017eca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017ecc:	f7f6 fcac 	bl	800e828 <pbuf_free>
        goto memerr;
 8017ed0:	e08f      	b.n	8017ff2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017ed2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8017ed4:	68fb      	ldr	r3, [r7, #12]
 8017ed6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017ed8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017eda:	4413      	add	r3, r2
 8017edc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8017ee0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017ee4:	9201      	str	r2, [sp, #4]
 8017ee6:	9300      	str	r3, [sp, #0]
 8017ee8:	4603      	mov	r3, r0
 8017eea:	2241      	movs	r2, #65	; 0x41
 8017eec:	2000      	movs	r0, #0
 8017eee:	f7f6 faaf 	bl	800e450 <pbuf_alloced_custom>
 8017ef2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8017ef4:	697b      	ldr	r3, [r7, #20]
 8017ef6:	2b00      	cmp	r3, #0
 8017ef8:	d106      	bne.n	8017f08 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8017efa:	69b8      	ldr	r0, [r7, #24]
 8017efc:	f7ff fef6 	bl	8017cec <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017f00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017f02:	f7f6 fc91 	bl	800e828 <pbuf_free>
        goto memerr;
 8017f06:	e074      	b.n	8017ff2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8017f08:	68f8      	ldr	r0, [r7, #12]
 8017f0a:	f7f6 fd33 	bl	800e974 <pbuf_ref>
      pcr->original = p;
 8017f0e:	69bb      	ldr	r3, [r7, #24]
 8017f10:	68fa      	ldr	r2, [r7, #12]
 8017f12:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8017f14:	69bb      	ldr	r3, [r7, #24]
 8017f16:	4a3f      	ldr	r2, [pc, #252]	; (8018014 <ip4_frag+0x288>)
 8017f18:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8017f1a:	6979      	ldr	r1, [r7, #20]
 8017f1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017f1e:	f7f6 fd51 	bl	800e9c4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8017f22:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8017f26:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017f2a:	1ad3      	subs	r3, r2, r3
 8017f2c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8017f30:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017f34:	2b00      	cmp	r3, #0
 8017f36:	d004      	beq.n	8017f42 <ip4_frag+0x1b6>
        poff = 0;
 8017f38:	2300      	movs	r3, #0
 8017f3a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017f3c:	68fb      	ldr	r3, [r7, #12]
 8017f3e:	681b      	ldr	r3, [r3, #0]
 8017f40:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8017f42:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	d196      	bne.n	8017e78 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8017f4a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017f4c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017f50:	4413      	add	r3, r2
 8017f52:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8017f54:	68bb      	ldr	r3, [r7, #8]
 8017f56:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017f58:	f1a3 0213 	sub.w	r2, r3, #19
 8017f5c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017f60:	429a      	cmp	r2, r3
 8017f62:	bfcc      	ite	gt
 8017f64:	2301      	movgt	r3, #1
 8017f66:	2300      	movle	r3, #0
 8017f68:	b2db      	uxtb	r3, r3
 8017f6a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8017f6c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017f70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017f74:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8017f76:	6a3b      	ldr	r3, [r7, #32]
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	d002      	beq.n	8017f82 <ip4_frag+0x1f6>
 8017f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	d003      	beq.n	8017f8a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8017f82:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017f84:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017f88:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017f8a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017f8c:	4618      	mov	r0, r3
 8017f8e:	f7f5 f86d 	bl	800d06c <lwip_htons>
 8017f92:	4603      	mov	r3, r0
 8017f94:	461a      	mov	r2, r3
 8017f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f98:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8017f9a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017f9c:	3314      	adds	r3, #20
 8017f9e:	b29b      	uxth	r3, r3
 8017fa0:	4618      	mov	r0, r3
 8017fa2:	f7f5 f863 	bl	800d06c <lwip_htons>
 8017fa6:	4603      	mov	r3, r0
 8017fa8:	461a      	mov	r2, r3
 8017faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fac:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8017fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fb0:	2200      	movs	r2, #0
 8017fb2:	729a      	strb	r2, [r3, #10]
 8017fb4:	2200      	movs	r2, #0
 8017fb6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017fb8:	68bb      	ldr	r3, [r7, #8]
 8017fba:	695b      	ldr	r3, [r3, #20]
 8017fbc:	687a      	ldr	r2, [r7, #4]
 8017fbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017fc0:	68b8      	ldr	r0, [r7, #8]
 8017fc2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017fc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017fc6:	f7f6 fc2f 	bl	800e828 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8017fca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017fce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017fd0:	1ad3      	subs	r3, r2, r3
 8017fd2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8017fd6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8017fda:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017fdc:	4413      	add	r3, r2
 8017fde:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8017fe2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	f47f af19 	bne.w	8017e1e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017fec:	2300      	movs	r3, #0
 8017fee:	e002      	b.n	8017ff6 <ip4_frag+0x26a>
      goto memerr;
 8017ff0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017ff2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017ff6:	4618      	mov	r0, r3
 8017ff8:	3748      	adds	r7, #72	; 0x48
 8017ffa:	46bd      	mov	sp, r7
 8017ffc:	bd80      	pop	{r7, pc}
 8017ffe:	bf00      	nop
 8018000:	0801d300 	.word	0x0801d300
 8018004:	0801d4dc 	.word	0x0801d4dc
 8018008:	0801d348 	.word	0x0801d348
 801800c:	0801d4f8 	.word	0x0801d4f8
 8018010:	0801d518 	.word	0x0801d518
 8018014:	08017d25 	.word	0x08017d25

08018018 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018018:	b580      	push	{r7, lr}
 801801a:	b086      	sub	sp, #24
 801801c:	af00      	add	r7, sp, #0
 801801e:	6078      	str	r0, [r7, #4]
 8018020:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8018022:	230e      	movs	r3, #14
 8018024:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8018026:	687b      	ldr	r3, [r7, #4]
 8018028:	895b      	ldrh	r3, [r3, #10]
 801802a:	2b0e      	cmp	r3, #14
 801802c:	d96e      	bls.n	801810c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	7bdb      	ldrb	r3, [r3, #15]
 8018032:	2b00      	cmp	r3, #0
 8018034:	d106      	bne.n	8018044 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8018036:	683b      	ldr	r3, [r7, #0]
 8018038:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801803c:	3301      	adds	r3, #1
 801803e:	b2da      	uxtb	r2, r3
 8018040:	687b      	ldr	r3, [r7, #4]
 8018042:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	685b      	ldr	r3, [r3, #4]
 8018048:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801804a:	693b      	ldr	r3, [r7, #16]
 801804c:	7b1a      	ldrb	r2, [r3, #12]
 801804e:	7b5b      	ldrb	r3, [r3, #13]
 8018050:	021b      	lsls	r3, r3, #8
 8018052:	4313      	orrs	r3, r2
 8018054:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8018056:	693b      	ldr	r3, [r7, #16]
 8018058:	781b      	ldrb	r3, [r3, #0]
 801805a:	f003 0301 	and.w	r3, r3, #1
 801805e:	2b00      	cmp	r3, #0
 8018060:	d023      	beq.n	80180aa <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018062:	693b      	ldr	r3, [r7, #16]
 8018064:	781b      	ldrb	r3, [r3, #0]
 8018066:	2b01      	cmp	r3, #1
 8018068:	d10f      	bne.n	801808a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801806a:	693b      	ldr	r3, [r7, #16]
 801806c:	785b      	ldrb	r3, [r3, #1]
 801806e:	2b00      	cmp	r3, #0
 8018070:	d11b      	bne.n	80180aa <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018072:	693b      	ldr	r3, [r7, #16]
 8018074:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018076:	2b5e      	cmp	r3, #94	; 0x5e
 8018078:	d117      	bne.n	80180aa <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	7b5b      	ldrb	r3, [r3, #13]
 801807e:	f043 0310 	orr.w	r3, r3, #16
 8018082:	b2da      	uxtb	r2, r3
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	735a      	strb	r2, [r3, #13]
 8018088:	e00f      	b.n	80180aa <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801808a:	693b      	ldr	r3, [r7, #16]
 801808c:	2206      	movs	r2, #6
 801808e:	4928      	ldr	r1, [pc, #160]	; (8018130 <ethernet_input+0x118>)
 8018090:	4618      	mov	r0, r3
 8018092:	f000 fa9d 	bl	80185d0 <memcmp>
 8018096:	4603      	mov	r3, r0
 8018098:	2b00      	cmp	r3, #0
 801809a:	d106      	bne.n	80180aa <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	7b5b      	ldrb	r3, [r3, #13]
 80180a0:	f043 0308 	orr.w	r3, r3, #8
 80180a4:	b2da      	uxtb	r2, r3
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80180aa:	89fb      	ldrh	r3, [r7, #14]
 80180ac:	2b08      	cmp	r3, #8
 80180ae:	d003      	beq.n	80180b8 <ethernet_input+0xa0>
 80180b0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80180b4:	d014      	beq.n	80180e0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80180b6:	e032      	b.n	801811e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80180b8:	683b      	ldr	r3, [r7, #0]
 80180ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80180be:	f003 0308 	and.w	r3, r3, #8
 80180c2:	2b00      	cmp	r3, #0
 80180c4:	d024      	beq.n	8018110 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80180c6:	8afb      	ldrh	r3, [r7, #22]
 80180c8:	4619      	mov	r1, r3
 80180ca:	6878      	ldr	r0, [r7, #4]
 80180cc:	f7f6 faf4 	bl	800e6b8 <pbuf_remove_header>
 80180d0:	4603      	mov	r3, r0
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	d11e      	bne.n	8018114 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80180d6:	6839      	ldr	r1, [r7, #0]
 80180d8:	6878      	ldr	r0, [r7, #4]
 80180da:	f7fe fde3 	bl	8016ca4 <ip4_input>
      break;
 80180de:	e013      	b.n	8018108 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80180e0:	683b      	ldr	r3, [r7, #0]
 80180e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80180e6:	f003 0308 	and.w	r3, r3, #8
 80180ea:	2b00      	cmp	r3, #0
 80180ec:	d014      	beq.n	8018118 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80180ee:	8afb      	ldrh	r3, [r7, #22]
 80180f0:	4619      	mov	r1, r3
 80180f2:	6878      	ldr	r0, [r7, #4]
 80180f4:	f7f6 fae0 	bl	800e6b8 <pbuf_remove_header>
 80180f8:	4603      	mov	r3, r0
 80180fa:	2b00      	cmp	r3, #0
 80180fc:	d10e      	bne.n	801811c <ethernet_input+0x104>
        etharp_input(p, netif);
 80180fe:	6839      	ldr	r1, [r7, #0]
 8018100:	6878      	ldr	r0, [r7, #4]
 8018102:	f7fd ff83 	bl	801600c <etharp_input>
      break;
 8018106:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018108:	2300      	movs	r3, #0
 801810a:	e00c      	b.n	8018126 <ethernet_input+0x10e>
    goto free_and_return;
 801810c:	bf00      	nop
 801810e:	e006      	b.n	801811e <ethernet_input+0x106>
        goto free_and_return;
 8018110:	bf00      	nop
 8018112:	e004      	b.n	801811e <ethernet_input+0x106>
        goto free_and_return;
 8018114:	bf00      	nop
 8018116:	e002      	b.n	801811e <ethernet_input+0x106>
        goto free_and_return;
 8018118:	bf00      	nop
 801811a:	e000      	b.n	801811e <ethernet_input+0x106>
        goto free_and_return;
 801811c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801811e:	6878      	ldr	r0, [r7, #4]
 8018120:	f7f6 fb82 	bl	800e828 <pbuf_free>
  return ERR_OK;
 8018124:	2300      	movs	r3, #0
}
 8018126:	4618      	mov	r0, r3
 8018128:	3718      	adds	r7, #24
 801812a:	46bd      	mov	sp, r7
 801812c:	bd80      	pop	{r7, pc}
 801812e:	bf00      	nop
 8018130:	0801d730 	.word	0x0801d730

08018134 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8018134:	b580      	push	{r7, lr}
 8018136:	b086      	sub	sp, #24
 8018138:	af00      	add	r7, sp, #0
 801813a:	60f8      	str	r0, [r7, #12]
 801813c:	60b9      	str	r1, [r7, #8]
 801813e:	607a      	str	r2, [r7, #4]
 8018140:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8018142:	8c3b      	ldrh	r3, [r7, #32]
 8018144:	4618      	mov	r0, r3
 8018146:	f7f4 ff91 	bl	800d06c <lwip_htons>
 801814a:	4603      	mov	r3, r0
 801814c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801814e:	210e      	movs	r1, #14
 8018150:	68b8      	ldr	r0, [r7, #8]
 8018152:	f7f6 faa1 	bl	800e698 <pbuf_add_header>
 8018156:	4603      	mov	r3, r0
 8018158:	2b00      	cmp	r3, #0
 801815a:	d125      	bne.n	80181a8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801815c:	68bb      	ldr	r3, [r7, #8]
 801815e:	685b      	ldr	r3, [r3, #4]
 8018160:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8018162:	693b      	ldr	r3, [r7, #16]
 8018164:	8afa      	ldrh	r2, [r7, #22]
 8018166:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018168:	693b      	ldr	r3, [r7, #16]
 801816a:	2206      	movs	r2, #6
 801816c:	6839      	ldr	r1, [r7, #0]
 801816e:	4618      	mov	r0, r3
 8018170:	f000 fa3e 	bl	80185f0 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8018174:	693b      	ldr	r3, [r7, #16]
 8018176:	3306      	adds	r3, #6
 8018178:	2206      	movs	r2, #6
 801817a:	6879      	ldr	r1, [r7, #4]
 801817c:	4618      	mov	r0, r3
 801817e:	f000 fa37 	bl	80185f0 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8018182:	68fb      	ldr	r3, [r7, #12]
 8018184:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018188:	2b06      	cmp	r3, #6
 801818a:	d006      	beq.n	801819a <ethernet_output+0x66>
 801818c:	4b0a      	ldr	r3, [pc, #40]	; (80181b8 <ethernet_output+0x84>)
 801818e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8018192:	490a      	ldr	r1, [pc, #40]	; (80181bc <ethernet_output+0x88>)
 8018194:	480a      	ldr	r0, [pc, #40]	; (80181c0 <ethernet_output+0x8c>)
 8018196:	f000 fa5b 	bl	8018650 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801819a:	68fb      	ldr	r3, [r7, #12]
 801819c:	699b      	ldr	r3, [r3, #24]
 801819e:	68b9      	ldr	r1, [r7, #8]
 80181a0:	68f8      	ldr	r0, [r7, #12]
 80181a2:	4798      	blx	r3
 80181a4:	4603      	mov	r3, r0
 80181a6:	e002      	b.n	80181ae <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80181a8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80181aa:	f06f 0301 	mvn.w	r3, #1
}
 80181ae:	4618      	mov	r0, r3
 80181b0:	3718      	adds	r7, #24
 80181b2:	46bd      	mov	sp, r7
 80181b4:	bd80      	pop	{r7, pc}
 80181b6:	bf00      	nop
 80181b8:	0801d528 	.word	0x0801d528
 80181bc:	0801d560 	.word	0x0801d560
 80181c0:	0801d594 	.word	0x0801d594

080181c4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80181c4:	b580      	push	{r7, lr}
 80181c6:	b086      	sub	sp, #24
 80181c8:	af00      	add	r7, sp, #0
 80181ca:	6078      	str	r0, [r7, #4]
 80181cc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80181ce:	683b      	ldr	r3, [r7, #0]
 80181d0:	60bb      	str	r3, [r7, #8]
 80181d2:	2304      	movs	r3, #4
 80181d4:	60fb      	str	r3, [r7, #12]
 80181d6:	2300      	movs	r3, #0
 80181d8:	613b      	str	r3, [r7, #16]
 80181da:	2300      	movs	r3, #0
 80181dc:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80181de:	f107 0308 	add.w	r3, r7, #8
 80181e2:	2100      	movs	r1, #0
 80181e4:	4618      	mov	r0, r3
 80181e6:	f7ee fa6c 	bl	80066c2 <osMessageCreate>
 80181ea:	4602      	mov	r2, r0
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80181f0:	687b      	ldr	r3, [r7, #4]
 80181f2:	681b      	ldr	r3, [r3, #0]
 80181f4:	2b00      	cmp	r3, #0
 80181f6:	d102      	bne.n	80181fe <sys_mbox_new+0x3a>
    return ERR_MEM;
 80181f8:	f04f 33ff 	mov.w	r3, #4294967295
 80181fc:	e000      	b.n	8018200 <sys_mbox_new+0x3c>

  return ERR_OK;
 80181fe:	2300      	movs	r3, #0
}
 8018200:	4618      	mov	r0, r3
 8018202:	3718      	adds	r7, #24
 8018204:	46bd      	mov	sp, r7
 8018206:	bd80      	pop	{r7, pc}

08018208 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8018208:	b580      	push	{r7, lr}
 801820a:	b082      	sub	sp, #8
 801820c:	af00      	add	r7, sp, #0
 801820e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	681b      	ldr	r3, [r3, #0]
 8018214:	4618      	mov	r0, r3
 8018216:	f7ee fb31 	bl	800687c <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	681b      	ldr	r3, [r3, #0]
 801821e:	4618      	mov	r0, r3
 8018220:	f7ee fb42 	bl	80068a8 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8018224:	bf00      	nop
 8018226:	3708      	adds	r7, #8
 8018228:	46bd      	mov	sp, r7
 801822a:	bd80      	pop	{r7, pc}

0801822c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801822c:	b580      	push	{r7, lr}
 801822e:	b084      	sub	sp, #16
 8018230:	af00      	add	r7, sp, #0
 8018232:	6078      	str	r0, [r7, #4]
 8018234:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	681b      	ldr	r3, [r3, #0]
 801823a:	6839      	ldr	r1, [r7, #0]
 801823c:	2200      	movs	r2, #0
 801823e:	4618      	mov	r0, r3
 8018240:	f7ee fa68 	bl	8006714 <osMessagePut>
 8018244:	4603      	mov	r3, r0
 8018246:	2b00      	cmp	r3, #0
 8018248:	d102      	bne.n	8018250 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801824a:	2300      	movs	r3, #0
 801824c:	73fb      	strb	r3, [r7, #15]
 801824e:	e001      	b.n	8018254 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018250:	23ff      	movs	r3, #255	; 0xff
 8018252:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8018254:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018258:	4618      	mov	r0, r3
 801825a:	3710      	adds	r7, #16
 801825c:	46bd      	mov	sp, r7
 801825e:	bd80      	pop	{r7, pc}

08018260 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018260:	b580      	push	{r7, lr}
 8018262:	b08c      	sub	sp, #48	; 0x30
 8018264:	af00      	add	r7, sp, #0
 8018266:	61f8      	str	r0, [r7, #28]
 8018268:	61b9      	str	r1, [r7, #24]
 801826a:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801826c:	f7ee f854 	bl	8006318 <osKernelSysTick>
 8018270:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8018272:	697b      	ldr	r3, [r7, #20]
 8018274:	2b00      	cmp	r3, #0
 8018276:	d017      	beq.n	80182a8 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8018278:	69fb      	ldr	r3, [r7, #28]
 801827a:	6819      	ldr	r1, [r3, #0]
 801827c:	f107 0320 	add.w	r3, r7, #32
 8018280:	697a      	ldr	r2, [r7, #20]
 8018282:	4618      	mov	r0, r3
 8018284:	f7ee fa86 	bl	8006794 <osMessageGet>

    if(event.status == osEventMessage)
 8018288:	6a3b      	ldr	r3, [r7, #32]
 801828a:	2b10      	cmp	r3, #16
 801828c:	d109      	bne.n	80182a2 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801828e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018290:	461a      	mov	r2, r3
 8018292:	69bb      	ldr	r3, [r7, #24]
 8018294:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8018296:	f7ee f83f 	bl	8006318 <osKernelSysTick>
 801829a:	4602      	mov	r2, r0
 801829c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801829e:	1ad3      	subs	r3, r2, r3
 80182a0:	e019      	b.n	80182d6 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80182a2:	f04f 33ff 	mov.w	r3, #4294967295
 80182a6:	e016      	b.n	80182d6 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80182a8:	69fb      	ldr	r3, [r7, #28]
 80182aa:	6819      	ldr	r1, [r3, #0]
 80182ac:	463b      	mov	r3, r7
 80182ae:	f04f 32ff 	mov.w	r2, #4294967295
 80182b2:	4618      	mov	r0, r3
 80182b4:	f7ee fa6e 	bl	8006794 <osMessageGet>
 80182b8:	f107 0320 	add.w	r3, r7, #32
 80182bc:	463a      	mov	r2, r7
 80182be:	ca07      	ldmia	r2, {r0, r1, r2}
 80182c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80182c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182c6:	461a      	mov	r2, r3
 80182c8:	69bb      	ldr	r3, [r7, #24]
 80182ca:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80182cc:	f7ee f824 	bl	8006318 <osKernelSysTick>
 80182d0:	4602      	mov	r2, r0
 80182d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182d4:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80182d6:	4618      	mov	r0, r3
 80182d8:	3730      	adds	r7, #48	; 0x30
 80182da:	46bd      	mov	sp, r7
 80182dc:	bd80      	pop	{r7, pc}

080182de <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80182de:	b580      	push	{r7, lr}
 80182e0:	b086      	sub	sp, #24
 80182e2:	af00      	add	r7, sp, #0
 80182e4:	6078      	str	r0, [r7, #4]
 80182e6:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	6819      	ldr	r1, [r3, #0]
 80182ec:	f107 030c 	add.w	r3, r7, #12
 80182f0:	2200      	movs	r2, #0
 80182f2:	4618      	mov	r0, r3
 80182f4:	f7ee fa4e 	bl	8006794 <osMessageGet>

  if(event.status == osEventMessage)
 80182f8:	68fb      	ldr	r3, [r7, #12]
 80182fa:	2b10      	cmp	r3, #16
 80182fc:	d105      	bne.n	801830a <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 80182fe:	693b      	ldr	r3, [r7, #16]
 8018300:	461a      	mov	r2, r3
 8018302:	683b      	ldr	r3, [r7, #0]
 8018304:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8018306:	2300      	movs	r3, #0
 8018308:	e001      	b.n	801830e <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801830a:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801830e:	4618      	mov	r0, r3
 8018310:	3718      	adds	r7, #24
 8018312:	46bd      	mov	sp, r7
 8018314:	bd80      	pop	{r7, pc}

08018316 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8018316:	b480      	push	{r7}
 8018318:	b083      	sub	sp, #12
 801831a:	af00      	add	r7, sp, #0
 801831c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	681b      	ldr	r3, [r3, #0]
 8018322:	2b00      	cmp	r3, #0
 8018324:	d101      	bne.n	801832a <sys_mbox_valid+0x14>
    return 0;
 8018326:	2300      	movs	r3, #0
 8018328:	e000      	b.n	801832c <sys_mbox_valid+0x16>
  else
    return 1;
 801832a:	2301      	movs	r3, #1
}
 801832c:	4618      	mov	r0, r3
 801832e:	370c      	adds	r7, #12
 8018330:	46bd      	mov	sp, r7
 8018332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018336:	4770      	bx	lr

08018338 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8018338:	b480      	push	{r7}
 801833a:	b083      	sub	sp, #12
 801833c:	af00      	add	r7, sp, #0
 801833e:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	2200      	movs	r2, #0
 8018344:	601a      	str	r2, [r3, #0]
}
 8018346:	bf00      	nop
 8018348:	370c      	adds	r7, #12
 801834a:	46bd      	mov	sp, r7
 801834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018350:	4770      	bx	lr

08018352 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8018352:	b580      	push	{r7, lr}
 8018354:	b084      	sub	sp, #16
 8018356:	af00      	add	r7, sp, #0
 8018358:	6078      	str	r0, [r7, #4]
 801835a:	460b      	mov	r3, r1
 801835c:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801835e:	2300      	movs	r3, #0
 8018360:	60bb      	str	r3, [r7, #8]
 8018362:	2300      	movs	r3, #0
 8018364:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8018366:	f107 0308 	add.w	r3, r7, #8
 801836a:	2101      	movs	r1, #1
 801836c:	4618      	mov	r0, r3
 801836e:	f7ee f8df 	bl	8006530 <osSemaphoreCreate>
 8018372:	4602      	mov	r2, r0
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	681b      	ldr	r3, [r3, #0]
 801837c:	2b00      	cmp	r3, #0
 801837e:	d102      	bne.n	8018386 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018380:	f04f 33ff 	mov.w	r3, #4294967295
 8018384:	e009      	b.n	801839a <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8018386:	78fb      	ldrb	r3, [r7, #3]
 8018388:	2b00      	cmp	r3, #0
 801838a:	d105      	bne.n	8018398 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	681b      	ldr	r3, [r3, #0]
 8018390:	2100      	movs	r1, #0
 8018392:	4618      	mov	r0, r3
 8018394:	f7ee f8fe 	bl	8006594 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8018398:	2300      	movs	r3, #0
}
 801839a:	4618      	mov	r0, r3
 801839c:	3710      	adds	r7, #16
 801839e:	46bd      	mov	sp, r7
 80183a0:	bd80      	pop	{r7, pc}

080183a2 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80183a2:	b580      	push	{r7, lr}
 80183a4:	b084      	sub	sp, #16
 80183a6:	af00      	add	r7, sp, #0
 80183a8:	6078      	str	r0, [r7, #4]
 80183aa:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 80183ac:	f7ed ffb4 	bl	8006318 <osKernelSysTick>
 80183b0:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80183b2:	683b      	ldr	r3, [r7, #0]
 80183b4:	2b00      	cmp	r3, #0
 80183b6:	d011      	beq.n	80183dc <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	681b      	ldr	r3, [r3, #0]
 80183bc:	6839      	ldr	r1, [r7, #0]
 80183be:	4618      	mov	r0, r3
 80183c0:	f7ee f8e8 	bl	8006594 <osSemaphoreWait>
 80183c4:	4603      	mov	r3, r0
 80183c6:	2b00      	cmp	r3, #0
 80183c8:	d105      	bne.n	80183d6 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 80183ca:	f7ed ffa5 	bl	8006318 <osKernelSysTick>
 80183ce:	4602      	mov	r2, r0
 80183d0:	68fb      	ldr	r3, [r7, #12]
 80183d2:	1ad3      	subs	r3, r2, r3
 80183d4:	e012      	b.n	80183fc <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80183d6:	f04f 33ff 	mov.w	r3, #4294967295
 80183da:	e00f      	b.n	80183fc <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 80183dc:	bf00      	nop
 80183de:	687b      	ldr	r3, [r7, #4]
 80183e0:	681b      	ldr	r3, [r3, #0]
 80183e2:	f04f 31ff 	mov.w	r1, #4294967295
 80183e6:	4618      	mov	r0, r3
 80183e8:	f7ee f8d4 	bl	8006594 <osSemaphoreWait>
 80183ec:	4603      	mov	r3, r0
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	d1f5      	bne.n	80183de <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 80183f2:	f7ed ff91 	bl	8006318 <osKernelSysTick>
 80183f6:	4602      	mov	r2, r0
 80183f8:	68fb      	ldr	r3, [r7, #12]
 80183fa:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80183fc:	4618      	mov	r0, r3
 80183fe:	3710      	adds	r7, #16
 8018400:	46bd      	mov	sp, r7
 8018402:	bd80      	pop	{r7, pc}

08018404 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8018404:	b580      	push	{r7, lr}
 8018406:	b082      	sub	sp, #8
 8018408:	af00      	add	r7, sp, #0
 801840a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	681b      	ldr	r3, [r3, #0]
 8018410:	4618      	mov	r0, r3
 8018412:	f7ee f90d 	bl	8006630 <osSemaphoreRelease>
}
 8018416:	bf00      	nop
 8018418:	3708      	adds	r7, #8
 801841a:	46bd      	mov	sp, r7
 801841c:	bd80      	pop	{r7, pc}

0801841e <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801841e:	b580      	push	{r7, lr}
 8018420:	b082      	sub	sp, #8
 8018422:	af00      	add	r7, sp, #0
 8018424:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	681b      	ldr	r3, [r3, #0]
 801842a:	4618      	mov	r0, r3
 801842c:	f7ee f936 	bl	800669c <osSemaphoreDelete>
}
 8018430:	bf00      	nop
 8018432:	3708      	adds	r7, #8
 8018434:	46bd      	mov	sp, r7
 8018436:	bd80      	pop	{r7, pc}

08018438 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8018438:	b480      	push	{r7}
 801843a:	b083      	sub	sp, #12
 801843c:	af00      	add	r7, sp, #0
 801843e:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	681b      	ldr	r3, [r3, #0]
 8018444:	2b00      	cmp	r3, #0
 8018446:	d101      	bne.n	801844c <sys_sem_valid+0x14>
    return 0;
 8018448:	2300      	movs	r3, #0
 801844a:	e000      	b.n	801844e <sys_sem_valid+0x16>
  else
    return 1;
 801844c:	2301      	movs	r3, #1
}
 801844e:	4618      	mov	r0, r3
 8018450:	370c      	adds	r7, #12
 8018452:	46bd      	mov	sp, r7
 8018454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018458:	4770      	bx	lr

0801845a <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801845a:	b480      	push	{r7}
 801845c:	b083      	sub	sp, #12
 801845e:	af00      	add	r7, sp, #0
 8018460:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	2200      	movs	r2, #0
 8018466:	601a      	str	r2, [r3, #0]
}
 8018468:	bf00      	nop
 801846a:	370c      	adds	r7, #12
 801846c:	46bd      	mov	sp, r7
 801846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018472:	4770      	bx	lr

08018474 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8018474:	b580      	push	{r7, lr}
 8018476:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8018478:	4803      	ldr	r0, [pc, #12]	; (8018488 <sys_init+0x14>)
 801847a:	f7ed ffbd 	bl	80063f8 <osMutexCreate>
 801847e:	4603      	mov	r3, r0
 8018480:	4a02      	ldr	r2, [pc, #8]	; (801848c <sys_init+0x18>)
 8018482:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8018484:	bf00      	nop
 8018486:	bd80      	pop	{r7, pc}
 8018488:	0801d740 	.word	0x0801d740
 801848c:	2000d3ac 	.word	0x2000d3ac

08018490 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018490:	b580      	push	{r7, lr}
 8018492:	b084      	sub	sp, #16
 8018494:	af00      	add	r7, sp, #0
 8018496:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8018498:	2300      	movs	r3, #0
 801849a:	60bb      	str	r3, [r7, #8]
 801849c:	2300      	movs	r3, #0
 801849e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80184a0:	f107 0308 	add.w	r3, r7, #8
 80184a4:	4618      	mov	r0, r3
 80184a6:	f7ed ffa7 	bl	80063f8 <osMutexCreate>
 80184aa:	4602      	mov	r2, r0
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80184b0:	687b      	ldr	r3, [r7, #4]
 80184b2:	681b      	ldr	r3, [r3, #0]
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	d102      	bne.n	80184be <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80184b8:	f04f 33ff 	mov.w	r3, #4294967295
 80184bc:	e000      	b.n	80184c0 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80184be:	2300      	movs	r3, #0
}
 80184c0:	4618      	mov	r0, r3
 80184c2:	3710      	adds	r7, #16
 80184c4:	46bd      	mov	sp, r7
 80184c6:	bd80      	pop	{r7, pc}

080184c8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80184c8:	b580      	push	{r7, lr}
 80184ca:	b082      	sub	sp, #8
 80184cc:	af00      	add	r7, sp, #0
 80184ce:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80184d0:	687b      	ldr	r3, [r7, #4]
 80184d2:	681b      	ldr	r3, [r3, #0]
 80184d4:	f04f 31ff 	mov.w	r1, #4294967295
 80184d8:	4618      	mov	r0, r3
 80184da:	f7ed ffa5 	bl	8006428 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80184de:	bf00      	nop
 80184e0:	3708      	adds	r7, #8
 80184e2:	46bd      	mov	sp, r7
 80184e4:	bd80      	pop	{r7, pc}

080184e6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80184e6:	b580      	push	{r7, lr}
 80184e8:	b082      	sub	sp, #8
 80184ea:	af00      	add	r7, sp, #0
 80184ec:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80184ee:	687b      	ldr	r3, [r7, #4]
 80184f0:	681b      	ldr	r3, [r3, #0]
 80184f2:	4618      	mov	r0, r3
 80184f4:	f7ed ffe6 	bl	80064c4 <osMutexRelease>
}
 80184f8:	bf00      	nop
 80184fa:	3708      	adds	r7, #8
 80184fc:	46bd      	mov	sp, r7
 80184fe:	bd80      	pop	{r7, pc}

08018500 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8018500:	b580      	push	{r7, lr}
 8018502:	b08c      	sub	sp, #48	; 0x30
 8018504:	af00      	add	r7, sp, #0
 8018506:	60f8      	str	r0, [r7, #12]
 8018508:	60b9      	str	r1, [r7, #8]
 801850a:	607a      	str	r2, [r7, #4]
 801850c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801850e:	f107 0314 	add.w	r3, r7, #20
 8018512:	2200      	movs	r2, #0
 8018514:	601a      	str	r2, [r3, #0]
 8018516:	605a      	str	r2, [r3, #4]
 8018518:	609a      	str	r2, [r3, #8]
 801851a:	60da      	str	r2, [r3, #12]
 801851c:	611a      	str	r2, [r3, #16]
 801851e:	615a      	str	r2, [r3, #20]
 8018520:	619a      	str	r2, [r3, #24]
 8018522:	68fb      	ldr	r3, [r7, #12]
 8018524:	617b      	str	r3, [r7, #20]
 8018526:	68bb      	ldr	r3, [r7, #8]
 8018528:	61bb      	str	r3, [r7, #24]
 801852a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801852c:	b21b      	sxth	r3, r3
 801852e:	83bb      	strh	r3, [r7, #28]
 8018530:	683b      	ldr	r3, [r7, #0]
 8018532:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8018534:	f107 0314 	add.w	r3, r7, #20
 8018538:	6879      	ldr	r1, [r7, #4]
 801853a:	4618      	mov	r0, r3
 801853c:	f7ed fefc 	bl	8006338 <osThreadCreate>
 8018540:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8018542:	4618      	mov	r0, r3
 8018544:	3730      	adds	r7, #48	; 0x30
 8018546:	46bd      	mov	sp, r7
 8018548:	bd80      	pop	{r7, pc}
	...

0801854c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801854c:	b580      	push	{r7, lr}
 801854e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8018550:	4b04      	ldr	r3, [pc, #16]	; (8018564 <sys_arch_protect+0x18>)
 8018552:	681b      	ldr	r3, [r3, #0]
 8018554:	f04f 31ff 	mov.w	r1, #4294967295
 8018558:	4618      	mov	r0, r3
 801855a:	f7ed ff65 	bl	8006428 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801855e:	2301      	movs	r3, #1
}
 8018560:	4618      	mov	r0, r3
 8018562:	bd80      	pop	{r7, pc}
 8018564:	2000d3ac 	.word	0x2000d3ac

08018568 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8018568:	b580      	push	{r7, lr}
 801856a:	b082      	sub	sp, #8
 801856c:	af00      	add	r7, sp, #0
 801856e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018570:	4b04      	ldr	r3, [pc, #16]	; (8018584 <sys_arch_unprotect+0x1c>)
 8018572:	681b      	ldr	r3, [r3, #0]
 8018574:	4618      	mov	r0, r3
 8018576:	f7ed ffa5 	bl	80064c4 <osMutexRelease>
}
 801857a:	bf00      	nop
 801857c:	3708      	adds	r7, #8
 801857e:	46bd      	mov	sp, r7
 8018580:	bd80      	pop	{r7, pc}
 8018582:	bf00      	nop
 8018584:	2000d3ac 	.word	0x2000d3ac

08018588 <__libc_init_array>:
 8018588:	b570      	push	{r4, r5, r6, lr}
 801858a:	4d0d      	ldr	r5, [pc, #52]	; (80185c0 <__libc_init_array+0x38>)
 801858c:	4c0d      	ldr	r4, [pc, #52]	; (80185c4 <__libc_init_array+0x3c>)
 801858e:	1b64      	subs	r4, r4, r5
 8018590:	10a4      	asrs	r4, r4, #2
 8018592:	2600      	movs	r6, #0
 8018594:	42a6      	cmp	r6, r4
 8018596:	d109      	bne.n	80185ac <__libc_init_array+0x24>
 8018598:	4d0b      	ldr	r5, [pc, #44]	; (80185c8 <__libc_init_array+0x40>)
 801859a:	4c0c      	ldr	r4, [pc, #48]	; (80185cc <__libc_init_array+0x44>)
 801859c:	f001 fa5c 	bl	8019a58 <_init>
 80185a0:	1b64      	subs	r4, r4, r5
 80185a2:	10a4      	asrs	r4, r4, #2
 80185a4:	2600      	movs	r6, #0
 80185a6:	42a6      	cmp	r6, r4
 80185a8:	d105      	bne.n	80185b6 <__libc_init_array+0x2e>
 80185aa:	bd70      	pop	{r4, r5, r6, pc}
 80185ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80185b0:	4798      	blx	r3
 80185b2:	3601      	adds	r6, #1
 80185b4:	e7ee      	b.n	8018594 <__libc_init_array+0xc>
 80185b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80185ba:	4798      	blx	r3
 80185bc:	3601      	adds	r6, #1
 80185be:	e7f2      	b.n	80185a6 <__libc_init_array+0x1e>
 80185c0:	0801d99c 	.word	0x0801d99c
 80185c4:	0801d99c 	.word	0x0801d99c
 80185c8:	0801d99c 	.word	0x0801d99c
 80185cc:	0801d9a0 	.word	0x0801d9a0

080185d0 <memcmp>:
 80185d0:	b510      	push	{r4, lr}
 80185d2:	3901      	subs	r1, #1
 80185d4:	4402      	add	r2, r0
 80185d6:	4290      	cmp	r0, r2
 80185d8:	d101      	bne.n	80185de <memcmp+0xe>
 80185da:	2000      	movs	r0, #0
 80185dc:	e005      	b.n	80185ea <memcmp+0x1a>
 80185de:	7803      	ldrb	r3, [r0, #0]
 80185e0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80185e4:	42a3      	cmp	r3, r4
 80185e6:	d001      	beq.n	80185ec <memcmp+0x1c>
 80185e8:	1b18      	subs	r0, r3, r4
 80185ea:	bd10      	pop	{r4, pc}
 80185ec:	3001      	adds	r0, #1
 80185ee:	e7f2      	b.n	80185d6 <memcmp+0x6>

080185f0 <memcpy>:
 80185f0:	440a      	add	r2, r1
 80185f2:	4291      	cmp	r1, r2
 80185f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80185f8:	d100      	bne.n	80185fc <memcpy+0xc>
 80185fa:	4770      	bx	lr
 80185fc:	b510      	push	{r4, lr}
 80185fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018602:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018606:	4291      	cmp	r1, r2
 8018608:	d1f9      	bne.n	80185fe <memcpy+0xe>
 801860a:	bd10      	pop	{r4, pc}

0801860c <memmove>:
 801860c:	4288      	cmp	r0, r1
 801860e:	b510      	push	{r4, lr}
 8018610:	eb01 0402 	add.w	r4, r1, r2
 8018614:	d902      	bls.n	801861c <memmove+0x10>
 8018616:	4284      	cmp	r4, r0
 8018618:	4623      	mov	r3, r4
 801861a:	d807      	bhi.n	801862c <memmove+0x20>
 801861c:	1e43      	subs	r3, r0, #1
 801861e:	42a1      	cmp	r1, r4
 8018620:	d008      	beq.n	8018634 <memmove+0x28>
 8018622:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018626:	f803 2f01 	strb.w	r2, [r3, #1]!
 801862a:	e7f8      	b.n	801861e <memmove+0x12>
 801862c:	4402      	add	r2, r0
 801862e:	4601      	mov	r1, r0
 8018630:	428a      	cmp	r2, r1
 8018632:	d100      	bne.n	8018636 <memmove+0x2a>
 8018634:	bd10      	pop	{r4, pc}
 8018636:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801863a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801863e:	e7f7      	b.n	8018630 <memmove+0x24>

08018640 <memset>:
 8018640:	4402      	add	r2, r0
 8018642:	4603      	mov	r3, r0
 8018644:	4293      	cmp	r3, r2
 8018646:	d100      	bne.n	801864a <memset+0xa>
 8018648:	4770      	bx	lr
 801864a:	f803 1b01 	strb.w	r1, [r3], #1
 801864e:	e7f9      	b.n	8018644 <memset+0x4>

08018650 <iprintf>:
 8018650:	b40f      	push	{r0, r1, r2, r3}
 8018652:	4b0a      	ldr	r3, [pc, #40]	; (801867c <iprintf+0x2c>)
 8018654:	b513      	push	{r0, r1, r4, lr}
 8018656:	681c      	ldr	r4, [r3, #0]
 8018658:	b124      	cbz	r4, 8018664 <iprintf+0x14>
 801865a:	69a3      	ldr	r3, [r4, #24]
 801865c:	b913      	cbnz	r3, 8018664 <iprintf+0x14>
 801865e:	4620      	mov	r0, r4
 8018660:	f000 f8e2 	bl	8018828 <__sinit>
 8018664:	ab05      	add	r3, sp, #20
 8018666:	9a04      	ldr	r2, [sp, #16]
 8018668:	68a1      	ldr	r1, [r4, #8]
 801866a:	9301      	str	r3, [sp, #4]
 801866c:	4620      	mov	r0, r4
 801866e:	f000 fbfb 	bl	8018e68 <_vfiprintf_r>
 8018672:	b002      	add	sp, #8
 8018674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018678:	b004      	add	sp, #16
 801867a:	4770      	bx	lr
 801867c:	2000001c 	.word	0x2000001c

08018680 <rand>:
 8018680:	4b16      	ldr	r3, [pc, #88]	; (80186dc <rand+0x5c>)
 8018682:	b510      	push	{r4, lr}
 8018684:	681c      	ldr	r4, [r3, #0]
 8018686:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018688:	b9b3      	cbnz	r3, 80186b8 <rand+0x38>
 801868a:	2018      	movs	r0, #24
 801868c:	f000 f97e 	bl	801898c <malloc>
 8018690:	63a0      	str	r0, [r4, #56]	; 0x38
 8018692:	b928      	cbnz	r0, 80186a0 <rand+0x20>
 8018694:	4602      	mov	r2, r0
 8018696:	4b12      	ldr	r3, [pc, #72]	; (80186e0 <rand+0x60>)
 8018698:	4812      	ldr	r0, [pc, #72]	; (80186e4 <rand+0x64>)
 801869a:	214e      	movs	r1, #78	; 0x4e
 801869c:	f000 f84e 	bl	801873c <__assert_func>
 80186a0:	4a11      	ldr	r2, [pc, #68]	; (80186e8 <rand+0x68>)
 80186a2:	4b12      	ldr	r3, [pc, #72]	; (80186ec <rand+0x6c>)
 80186a4:	e9c0 2300 	strd	r2, r3, [r0]
 80186a8:	4b11      	ldr	r3, [pc, #68]	; (80186f0 <rand+0x70>)
 80186aa:	6083      	str	r3, [r0, #8]
 80186ac:	230b      	movs	r3, #11
 80186ae:	8183      	strh	r3, [r0, #12]
 80186b0:	2201      	movs	r2, #1
 80186b2:	2300      	movs	r3, #0
 80186b4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80186b8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80186ba:	4a0e      	ldr	r2, [pc, #56]	; (80186f4 <rand+0x74>)
 80186bc:	6920      	ldr	r0, [r4, #16]
 80186be:	6963      	ldr	r3, [r4, #20]
 80186c0:	490d      	ldr	r1, [pc, #52]	; (80186f8 <rand+0x78>)
 80186c2:	4342      	muls	r2, r0
 80186c4:	fb01 2203 	mla	r2, r1, r3, r2
 80186c8:	fba0 0101 	umull	r0, r1, r0, r1
 80186cc:	1c43      	adds	r3, r0, #1
 80186ce:	eb42 0001 	adc.w	r0, r2, r1
 80186d2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80186d6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80186da:	bd10      	pop	{r4, pc}
 80186dc:	2000001c 	.word	0x2000001c
 80186e0:	0801d850 	.word	0x0801d850
 80186e4:	0801d867 	.word	0x0801d867
 80186e8:	abcd330e 	.word	0xabcd330e
 80186ec:	e66d1234 	.word	0xe66d1234
 80186f0:	0005deec 	.word	0x0005deec
 80186f4:	5851f42d 	.word	0x5851f42d
 80186f8:	4c957f2d 	.word	0x4c957f2d

080186fc <siprintf>:
 80186fc:	b40e      	push	{r1, r2, r3}
 80186fe:	b500      	push	{lr}
 8018700:	b09c      	sub	sp, #112	; 0x70
 8018702:	ab1d      	add	r3, sp, #116	; 0x74
 8018704:	9002      	str	r0, [sp, #8]
 8018706:	9006      	str	r0, [sp, #24]
 8018708:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801870c:	4809      	ldr	r0, [pc, #36]	; (8018734 <siprintf+0x38>)
 801870e:	9107      	str	r1, [sp, #28]
 8018710:	9104      	str	r1, [sp, #16]
 8018712:	4909      	ldr	r1, [pc, #36]	; (8018738 <siprintf+0x3c>)
 8018714:	f853 2b04 	ldr.w	r2, [r3], #4
 8018718:	9105      	str	r1, [sp, #20]
 801871a:	6800      	ldr	r0, [r0, #0]
 801871c:	9301      	str	r3, [sp, #4]
 801871e:	a902      	add	r1, sp, #8
 8018720:	f000 fa78 	bl	8018c14 <_svfiprintf_r>
 8018724:	9b02      	ldr	r3, [sp, #8]
 8018726:	2200      	movs	r2, #0
 8018728:	701a      	strb	r2, [r3, #0]
 801872a:	b01c      	add	sp, #112	; 0x70
 801872c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018730:	b003      	add	sp, #12
 8018732:	4770      	bx	lr
 8018734:	2000001c 	.word	0x2000001c
 8018738:	ffff0208 	.word	0xffff0208

0801873c <__assert_func>:
 801873c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801873e:	4614      	mov	r4, r2
 8018740:	461a      	mov	r2, r3
 8018742:	4b09      	ldr	r3, [pc, #36]	; (8018768 <__assert_func+0x2c>)
 8018744:	681b      	ldr	r3, [r3, #0]
 8018746:	4605      	mov	r5, r0
 8018748:	68d8      	ldr	r0, [r3, #12]
 801874a:	b14c      	cbz	r4, 8018760 <__assert_func+0x24>
 801874c:	4b07      	ldr	r3, [pc, #28]	; (801876c <__assert_func+0x30>)
 801874e:	9100      	str	r1, [sp, #0]
 8018750:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018754:	4906      	ldr	r1, [pc, #24]	; (8018770 <__assert_func+0x34>)
 8018756:	462b      	mov	r3, r5
 8018758:	f000 f8e4 	bl	8018924 <fiprintf>
 801875c:	f000 ff6e 	bl	801963c <abort>
 8018760:	4b04      	ldr	r3, [pc, #16]	; (8018774 <__assert_func+0x38>)
 8018762:	461c      	mov	r4, r3
 8018764:	e7f3      	b.n	801874e <__assert_func+0x12>
 8018766:	bf00      	nop
 8018768:	2000001c 	.word	0x2000001c
 801876c:	0801d8c2 	.word	0x0801d8c2
 8018770:	0801d8cf 	.word	0x0801d8cf
 8018774:	0801d8fd 	.word	0x0801d8fd

08018778 <std>:
 8018778:	2300      	movs	r3, #0
 801877a:	b510      	push	{r4, lr}
 801877c:	4604      	mov	r4, r0
 801877e:	e9c0 3300 	strd	r3, r3, [r0]
 8018782:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018786:	6083      	str	r3, [r0, #8]
 8018788:	8181      	strh	r1, [r0, #12]
 801878a:	6643      	str	r3, [r0, #100]	; 0x64
 801878c:	81c2      	strh	r2, [r0, #14]
 801878e:	6183      	str	r3, [r0, #24]
 8018790:	4619      	mov	r1, r3
 8018792:	2208      	movs	r2, #8
 8018794:	305c      	adds	r0, #92	; 0x5c
 8018796:	f7ff ff53 	bl	8018640 <memset>
 801879a:	4b05      	ldr	r3, [pc, #20]	; (80187b0 <std+0x38>)
 801879c:	6263      	str	r3, [r4, #36]	; 0x24
 801879e:	4b05      	ldr	r3, [pc, #20]	; (80187b4 <std+0x3c>)
 80187a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80187a2:	4b05      	ldr	r3, [pc, #20]	; (80187b8 <std+0x40>)
 80187a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80187a6:	4b05      	ldr	r3, [pc, #20]	; (80187bc <std+0x44>)
 80187a8:	6224      	str	r4, [r4, #32]
 80187aa:	6323      	str	r3, [r4, #48]	; 0x30
 80187ac:	bd10      	pop	{r4, pc}
 80187ae:	bf00      	nop
 80187b0:	08019411 	.word	0x08019411
 80187b4:	08019433 	.word	0x08019433
 80187b8:	0801946b 	.word	0x0801946b
 80187bc:	0801948f 	.word	0x0801948f

080187c0 <_cleanup_r>:
 80187c0:	4901      	ldr	r1, [pc, #4]	; (80187c8 <_cleanup_r+0x8>)
 80187c2:	f000 b8c1 	b.w	8018948 <_fwalk_reent>
 80187c6:	bf00      	nop
 80187c8:	08019779 	.word	0x08019779

080187cc <__sfmoreglue>:
 80187cc:	b570      	push	{r4, r5, r6, lr}
 80187ce:	2268      	movs	r2, #104	; 0x68
 80187d0:	1e4d      	subs	r5, r1, #1
 80187d2:	4355      	muls	r5, r2
 80187d4:	460e      	mov	r6, r1
 80187d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80187da:	f000 f94b 	bl	8018a74 <_malloc_r>
 80187de:	4604      	mov	r4, r0
 80187e0:	b140      	cbz	r0, 80187f4 <__sfmoreglue+0x28>
 80187e2:	2100      	movs	r1, #0
 80187e4:	e9c0 1600 	strd	r1, r6, [r0]
 80187e8:	300c      	adds	r0, #12
 80187ea:	60a0      	str	r0, [r4, #8]
 80187ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80187f0:	f7ff ff26 	bl	8018640 <memset>
 80187f4:	4620      	mov	r0, r4
 80187f6:	bd70      	pop	{r4, r5, r6, pc}

080187f8 <__sfp_lock_acquire>:
 80187f8:	4801      	ldr	r0, [pc, #4]	; (8018800 <__sfp_lock_acquire+0x8>)
 80187fa:	f000 b8c5 	b.w	8018988 <__retarget_lock_acquire_recursive>
 80187fe:	bf00      	nop
 8018800:	2000d3b1 	.word	0x2000d3b1

08018804 <__sfp_lock_release>:
 8018804:	4801      	ldr	r0, [pc, #4]	; (801880c <__sfp_lock_release+0x8>)
 8018806:	f000 b8c0 	b.w	801898a <__retarget_lock_release_recursive>
 801880a:	bf00      	nop
 801880c:	2000d3b1 	.word	0x2000d3b1

08018810 <__sinit_lock_acquire>:
 8018810:	4801      	ldr	r0, [pc, #4]	; (8018818 <__sinit_lock_acquire+0x8>)
 8018812:	f000 b8b9 	b.w	8018988 <__retarget_lock_acquire_recursive>
 8018816:	bf00      	nop
 8018818:	2000d3b2 	.word	0x2000d3b2

0801881c <__sinit_lock_release>:
 801881c:	4801      	ldr	r0, [pc, #4]	; (8018824 <__sinit_lock_release+0x8>)
 801881e:	f000 b8b4 	b.w	801898a <__retarget_lock_release_recursive>
 8018822:	bf00      	nop
 8018824:	2000d3b2 	.word	0x2000d3b2

08018828 <__sinit>:
 8018828:	b510      	push	{r4, lr}
 801882a:	4604      	mov	r4, r0
 801882c:	f7ff fff0 	bl	8018810 <__sinit_lock_acquire>
 8018830:	69a3      	ldr	r3, [r4, #24]
 8018832:	b11b      	cbz	r3, 801883c <__sinit+0x14>
 8018834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018838:	f7ff bff0 	b.w	801881c <__sinit_lock_release>
 801883c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018840:	6523      	str	r3, [r4, #80]	; 0x50
 8018842:	4b13      	ldr	r3, [pc, #76]	; (8018890 <__sinit+0x68>)
 8018844:	4a13      	ldr	r2, [pc, #76]	; (8018894 <__sinit+0x6c>)
 8018846:	681b      	ldr	r3, [r3, #0]
 8018848:	62a2      	str	r2, [r4, #40]	; 0x28
 801884a:	42a3      	cmp	r3, r4
 801884c:	bf04      	itt	eq
 801884e:	2301      	moveq	r3, #1
 8018850:	61a3      	streq	r3, [r4, #24]
 8018852:	4620      	mov	r0, r4
 8018854:	f000 f820 	bl	8018898 <__sfp>
 8018858:	6060      	str	r0, [r4, #4]
 801885a:	4620      	mov	r0, r4
 801885c:	f000 f81c 	bl	8018898 <__sfp>
 8018860:	60a0      	str	r0, [r4, #8]
 8018862:	4620      	mov	r0, r4
 8018864:	f000 f818 	bl	8018898 <__sfp>
 8018868:	2200      	movs	r2, #0
 801886a:	60e0      	str	r0, [r4, #12]
 801886c:	2104      	movs	r1, #4
 801886e:	6860      	ldr	r0, [r4, #4]
 8018870:	f7ff ff82 	bl	8018778 <std>
 8018874:	68a0      	ldr	r0, [r4, #8]
 8018876:	2201      	movs	r2, #1
 8018878:	2109      	movs	r1, #9
 801887a:	f7ff ff7d 	bl	8018778 <std>
 801887e:	68e0      	ldr	r0, [r4, #12]
 8018880:	2202      	movs	r2, #2
 8018882:	2112      	movs	r1, #18
 8018884:	f7ff ff78 	bl	8018778 <std>
 8018888:	2301      	movs	r3, #1
 801888a:	61a3      	str	r3, [r4, #24]
 801888c:	e7d2      	b.n	8018834 <__sinit+0xc>
 801888e:	bf00      	nop
 8018890:	0801d84c 	.word	0x0801d84c
 8018894:	080187c1 	.word	0x080187c1

08018898 <__sfp>:
 8018898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801889a:	4607      	mov	r7, r0
 801889c:	f7ff ffac 	bl	80187f8 <__sfp_lock_acquire>
 80188a0:	4b1e      	ldr	r3, [pc, #120]	; (801891c <__sfp+0x84>)
 80188a2:	681e      	ldr	r6, [r3, #0]
 80188a4:	69b3      	ldr	r3, [r6, #24]
 80188a6:	b913      	cbnz	r3, 80188ae <__sfp+0x16>
 80188a8:	4630      	mov	r0, r6
 80188aa:	f7ff ffbd 	bl	8018828 <__sinit>
 80188ae:	3648      	adds	r6, #72	; 0x48
 80188b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80188b4:	3b01      	subs	r3, #1
 80188b6:	d503      	bpl.n	80188c0 <__sfp+0x28>
 80188b8:	6833      	ldr	r3, [r6, #0]
 80188ba:	b30b      	cbz	r3, 8018900 <__sfp+0x68>
 80188bc:	6836      	ldr	r6, [r6, #0]
 80188be:	e7f7      	b.n	80188b0 <__sfp+0x18>
 80188c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80188c4:	b9d5      	cbnz	r5, 80188fc <__sfp+0x64>
 80188c6:	4b16      	ldr	r3, [pc, #88]	; (8018920 <__sfp+0x88>)
 80188c8:	60e3      	str	r3, [r4, #12]
 80188ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80188ce:	6665      	str	r5, [r4, #100]	; 0x64
 80188d0:	f000 f859 	bl	8018986 <__retarget_lock_init_recursive>
 80188d4:	f7ff ff96 	bl	8018804 <__sfp_lock_release>
 80188d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80188dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80188e0:	6025      	str	r5, [r4, #0]
 80188e2:	61a5      	str	r5, [r4, #24]
 80188e4:	2208      	movs	r2, #8
 80188e6:	4629      	mov	r1, r5
 80188e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80188ec:	f7ff fea8 	bl	8018640 <memset>
 80188f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80188f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80188f8:	4620      	mov	r0, r4
 80188fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80188fc:	3468      	adds	r4, #104	; 0x68
 80188fe:	e7d9      	b.n	80188b4 <__sfp+0x1c>
 8018900:	2104      	movs	r1, #4
 8018902:	4638      	mov	r0, r7
 8018904:	f7ff ff62 	bl	80187cc <__sfmoreglue>
 8018908:	4604      	mov	r4, r0
 801890a:	6030      	str	r0, [r6, #0]
 801890c:	2800      	cmp	r0, #0
 801890e:	d1d5      	bne.n	80188bc <__sfp+0x24>
 8018910:	f7ff ff78 	bl	8018804 <__sfp_lock_release>
 8018914:	230c      	movs	r3, #12
 8018916:	603b      	str	r3, [r7, #0]
 8018918:	e7ee      	b.n	80188f8 <__sfp+0x60>
 801891a:	bf00      	nop
 801891c:	0801d84c 	.word	0x0801d84c
 8018920:	ffff0001 	.word	0xffff0001

08018924 <fiprintf>:
 8018924:	b40e      	push	{r1, r2, r3}
 8018926:	b503      	push	{r0, r1, lr}
 8018928:	4601      	mov	r1, r0
 801892a:	ab03      	add	r3, sp, #12
 801892c:	4805      	ldr	r0, [pc, #20]	; (8018944 <fiprintf+0x20>)
 801892e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018932:	6800      	ldr	r0, [r0, #0]
 8018934:	9301      	str	r3, [sp, #4]
 8018936:	f000 fa97 	bl	8018e68 <_vfiprintf_r>
 801893a:	b002      	add	sp, #8
 801893c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018940:	b003      	add	sp, #12
 8018942:	4770      	bx	lr
 8018944:	2000001c 	.word	0x2000001c

08018948 <_fwalk_reent>:
 8018948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801894c:	4606      	mov	r6, r0
 801894e:	4688      	mov	r8, r1
 8018950:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018954:	2700      	movs	r7, #0
 8018956:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801895a:	f1b9 0901 	subs.w	r9, r9, #1
 801895e:	d505      	bpl.n	801896c <_fwalk_reent+0x24>
 8018960:	6824      	ldr	r4, [r4, #0]
 8018962:	2c00      	cmp	r4, #0
 8018964:	d1f7      	bne.n	8018956 <_fwalk_reent+0xe>
 8018966:	4638      	mov	r0, r7
 8018968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801896c:	89ab      	ldrh	r3, [r5, #12]
 801896e:	2b01      	cmp	r3, #1
 8018970:	d907      	bls.n	8018982 <_fwalk_reent+0x3a>
 8018972:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018976:	3301      	adds	r3, #1
 8018978:	d003      	beq.n	8018982 <_fwalk_reent+0x3a>
 801897a:	4629      	mov	r1, r5
 801897c:	4630      	mov	r0, r6
 801897e:	47c0      	blx	r8
 8018980:	4307      	orrs	r7, r0
 8018982:	3568      	adds	r5, #104	; 0x68
 8018984:	e7e9      	b.n	801895a <_fwalk_reent+0x12>

08018986 <__retarget_lock_init_recursive>:
 8018986:	4770      	bx	lr

08018988 <__retarget_lock_acquire_recursive>:
 8018988:	4770      	bx	lr

0801898a <__retarget_lock_release_recursive>:
 801898a:	4770      	bx	lr

0801898c <malloc>:
 801898c:	4b02      	ldr	r3, [pc, #8]	; (8018998 <malloc+0xc>)
 801898e:	4601      	mov	r1, r0
 8018990:	6818      	ldr	r0, [r3, #0]
 8018992:	f000 b86f 	b.w	8018a74 <_malloc_r>
 8018996:	bf00      	nop
 8018998:	2000001c 	.word	0x2000001c

0801899c <_free_r>:
 801899c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801899e:	2900      	cmp	r1, #0
 80189a0:	d044      	beq.n	8018a2c <_free_r+0x90>
 80189a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80189a6:	9001      	str	r0, [sp, #4]
 80189a8:	2b00      	cmp	r3, #0
 80189aa:	f1a1 0404 	sub.w	r4, r1, #4
 80189ae:	bfb8      	it	lt
 80189b0:	18e4      	addlt	r4, r4, r3
 80189b2:	f000 ff95 	bl	80198e0 <__malloc_lock>
 80189b6:	4a1e      	ldr	r2, [pc, #120]	; (8018a30 <_free_r+0x94>)
 80189b8:	9801      	ldr	r0, [sp, #4]
 80189ba:	6813      	ldr	r3, [r2, #0]
 80189bc:	b933      	cbnz	r3, 80189cc <_free_r+0x30>
 80189be:	6063      	str	r3, [r4, #4]
 80189c0:	6014      	str	r4, [r2, #0]
 80189c2:	b003      	add	sp, #12
 80189c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80189c8:	f000 bf90 	b.w	80198ec <__malloc_unlock>
 80189cc:	42a3      	cmp	r3, r4
 80189ce:	d908      	bls.n	80189e2 <_free_r+0x46>
 80189d0:	6825      	ldr	r5, [r4, #0]
 80189d2:	1961      	adds	r1, r4, r5
 80189d4:	428b      	cmp	r3, r1
 80189d6:	bf01      	itttt	eq
 80189d8:	6819      	ldreq	r1, [r3, #0]
 80189da:	685b      	ldreq	r3, [r3, #4]
 80189dc:	1949      	addeq	r1, r1, r5
 80189de:	6021      	streq	r1, [r4, #0]
 80189e0:	e7ed      	b.n	80189be <_free_r+0x22>
 80189e2:	461a      	mov	r2, r3
 80189e4:	685b      	ldr	r3, [r3, #4]
 80189e6:	b10b      	cbz	r3, 80189ec <_free_r+0x50>
 80189e8:	42a3      	cmp	r3, r4
 80189ea:	d9fa      	bls.n	80189e2 <_free_r+0x46>
 80189ec:	6811      	ldr	r1, [r2, #0]
 80189ee:	1855      	adds	r5, r2, r1
 80189f0:	42a5      	cmp	r5, r4
 80189f2:	d10b      	bne.n	8018a0c <_free_r+0x70>
 80189f4:	6824      	ldr	r4, [r4, #0]
 80189f6:	4421      	add	r1, r4
 80189f8:	1854      	adds	r4, r2, r1
 80189fa:	42a3      	cmp	r3, r4
 80189fc:	6011      	str	r1, [r2, #0]
 80189fe:	d1e0      	bne.n	80189c2 <_free_r+0x26>
 8018a00:	681c      	ldr	r4, [r3, #0]
 8018a02:	685b      	ldr	r3, [r3, #4]
 8018a04:	6053      	str	r3, [r2, #4]
 8018a06:	4421      	add	r1, r4
 8018a08:	6011      	str	r1, [r2, #0]
 8018a0a:	e7da      	b.n	80189c2 <_free_r+0x26>
 8018a0c:	d902      	bls.n	8018a14 <_free_r+0x78>
 8018a0e:	230c      	movs	r3, #12
 8018a10:	6003      	str	r3, [r0, #0]
 8018a12:	e7d6      	b.n	80189c2 <_free_r+0x26>
 8018a14:	6825      	ldr	r5, [r4, #0]
 8018a16:	1961      	adds	r1, r4, r5
 8018a18:	428b      	cmp	r3, r1
 8018a1a:	bf04      	itt	eq
 8018a1c:	6819      	ldreq	r1, [r3, #0]
 8018a1e:	685b      	ldreq	r3, [r3, #4]
 8018a20:	6063      	str	r3, [r4, #4]
 8018a22:	bf04      	itt	eq
 8018a24:	1949      	addeq	r1, r1, r5
 8018a26:	6021      	streq	r1, [r4, #0]
 8018a28:	6054      	str	r4, [r2, #4]
 8018a2a:	e7ca      	b.n	80189c2 <_free_r+0x26>
 8018a2c:	b003      	add	sp, #12
 8018a2e:	bd30      	pop	{r4, r5, pc}
 8018a30:	2000d3b4 	.word	0x2000d3b4

08018a34 <sbrk_aligned>:
 8018a34:	b570      	push	{r4, r5, r6, lr}
 8018a36:	4e0e      	ldr	r6, [pc, #56]	; (8018a70 <sbrk_aligned+0x3c>)
 8018a38:	460c      	mov	r4, r1
 8018a3a:	6831      	ldr	r1, [r6, #0]
 8018a3c:	4605      	mov	r5, r0
 8018a3e:	b911      	cbnz	r1, 8018a46 <sbrk_aligned+0x12>
 8018a40:	f000 fcd6 	bl	80193f0 <_sbrk_r>
 8018a44:	6030      	str	r0, [r6, #0]
 8018a46:	4621      	mov	r1, r4
 8018a48:	4628      	mov	r0, r5
 8018a4a:	f000 fcd1 	bl	80193f0 <_sbrk_r>
 8018a4e:	1c43      	adds	r3, r0, #1
 8018a50:	d00a      	beq.n	8018a68 <sbrk_aligned+0x34>
 8018a52:	1cc4      	adds	r4, r0, #3
 8018a54:	f024 0403 	bic.w	r4, r4, #3
 8018a58:	42a0      	cmp	r0, r4
 8018a5a:	d007      	beq.n	8018a6c <sbrk_aligned+0x38>
 8018a5c:	1a21      	subs	r1, r4, r0
 8018a5e:	4628      	mov	r0, r5
 8018a60:	f000 fcc6 	bl	80193f0 <_sbrk_r>
 8018a64:	3001      	adds	r0, #1
 8018a66:	d101      	bne.n	8018a6c <sbrk_aligned+0x38>
 8018a68:	f04f 34ff 	mov.w	r4, #4294967295
 8018a6c:	4620      	mov	r0, r4
 8018a6e:	bd70      	pop	{r4, r5, r6, pc}
 8018a70:	2000d3b8 	.word	0x2000d3b8

08018a74 <_malloc_r>:
 8018a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a78:	1ccd      	adds	r5, r1, #3
 8018a7a:	f025 0503 	bic.w	r5, r5, #3
 8018a7e:	3508      	adds	r5, #8
 8018a80:	2d0c      	cmp	r5, #12
 8018a82:	bf38      	it	cc
 8018a84:	250c      	movcc	r5, #12
 8018a86:	2d00      	cmp	r5, #0
 8018a88:	4607      	mov	r7, r0
 8018a8a:	db01      	blt.n	8018a90 <_malloc_r+0x1c>
 8018a8c:	42a9      	cmp	r1, r5
 8018a8e:	d905      	bls.n	8018a9c <_malloc_r+0x28>
 8018a90:	230c      	movs	r3, #12
 8018a92:	603b      	str	r3, [r7, #0]
 8018a94:	2600      	movs	r6, #0
 8018a96:	4630      	mov	r0, r6
 8018a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a9c:	4e2e      	ldr	r6, [pc, #184]	; (8018b58 <_malloc_r+0xe4>)
 8018a9e:	f000 ff1f 	bl	80198e0 <__malloc_lock>
 8018aa2:	6833      	ldr	r3, [r6, #0]
 8018aa4:	461c      	mov	r4, r3
 8018aa6:	bb34      	cbnz	r4, 8018af6 <_malloc_r+0x82>
 8018aa8:	4629      	mov	r1, r5
 8018aaa:	4638      	mov	r0, r7
 8018aac:	f7ff ffc2 	bl	8018a34 <sbrk_aligned>
 8018ab0:	1c43      	adds	r3, r0, #1
 8018ab2:	4604      	mov	r4, r0
 8018ab4:	d14d      	bne.n	8018b52 <_malloc_r+0xde>
 8018ab6:	6834      	ldr	r4, [r6, #0]
 8018ab8:	4626      	mov	r6, r4
 8018aba:	2e00      	cmp	r6, #0
 8018abc:	d140      	bne.n	8018b40 <_malloc_r+0xcc>
 8018abe:	6823      	ldr	r3, [r4, #0]
 8018ac0:	4631      	mov	r1, r6
 8018ac2:	4638      	mov	r0, r7
 8018ac4:	eb04 0803 	add.w	r8, r4, r3
 8018ac8:	f000 fc92 	bl	80193f0 <_sbrk_r>
 8018acc:	4580      	cmp	r8, r0
 8018ace:	d13a      	bne.n	8018b46 <_malloc_r+0xd2>
 8018ad0:	6821      	ldr	r1, [r4, #0]
 8018ad2:	3503      	adds	r5, #3
 8018ad4:	1a6d      	subs	r5, r5, r1
 8018ad6:	f025 0503 	bic.w	r5, r5, #3
 8018ada:	3508      	adds	r5, #8
 8018adc:	2d0c      	cmp	r5, #12
 8018ade:	bf38      	it	cc
 8018ae0:	250c      	movcc	r5, #12
 8018ae2:	4629      	mov	r1, r5
 8018ae4:	4638      	mov	r0, r7
 8018ae6:	f7ff ffa5 	bl	8018a34 <sbrk_aligned>
 8018aea:	3001      	adds	r0, #1
 8018aec:	d02b      	beq.n	8018b46 <_malloc_r+0xd2>
 8018aee:	6823      	ldr	r3, [r4, #0]
 8018af0:	442b      	add	r3, r5
 8018af2:	6023      	str	r3, [r4, #0]
 8018af4:	e00e      	b.n	8018b14 <_malloc_r+0xa0>
 8018af6:	6822      	ldr	r2, [r4, #0]
 8018af8:	1b52      	subs	r2, r2, r5
 8018afa:	d41e      	bmi.n	8018b3a <_malloc_r+0xc6>
 8018afc:	2a0b      	cmp	r2, #11
 8018afe:	d916      	bls.n	8018b2e <_malloc_r+0xba>
 8018b00:	1961      	adds	r1, r4, r5
 8018b02:	42a3      	cmp	r3, r4
 8018b04:	6025      	str	r5, [r4, #0]
 8018b06:	bf18      	it	ne
 8018b08:	6059      	strne	r1, [r3, #4]
 8018b0a:	6863      	ldr	r3, [r4, #4]
 8018b0c:	bf08      	it	eq
 8018b0e:	6031      	streq	r1, [r6, #0]
 8018b10:	5162      	str	r2, [r4, r5]
 8018b12:	604b      	str	r3, [r1, #4]
 8018b14:	4638      	mov	r0, r7
 8018b16:	f104 060b 	add.w	r6, r4, #11
 8018b1a:	f000 fee7 	bl	80198ec <__malloc_unlock>
 8018b1e:	f026 0607 	bic.w	r6, r6, #7
 8018b22:	1d23      	adds	r3, r4, #4
 8018b24:	1af2      	subs	r2, r6, r3
 8018b26:	d0b6      	beq.n	8018a96 <_malloc_r+0x22>
 8018b28:	1b9b      	subs	r3, r3, r6
 8018b2a:	50a3      	str	r3, [r4, r2]
 8018b2c:	e7b3      	b.n	8018a96 <_malloc_r+0x22>
 8018b2e:	6862      	ldr	r2, [r4, #4]
 8018b30:	42a3      	cmp	r3, r4
 8018b32:	bf0c      	ite	eq
 8018b34:	6032      	streq	r2, [r6, #0]
 8018b36:	605a      	strne	r2, [r3, #4]
 8018b38:	e7ec      	b.n	8018b14 <_malloc_r+0xa0>
 8018b3a:	4623      	mov	r3, r4
 8018b3c:	6864      	ldr	r4, [r4, #4]
 8018b3e:	e7b2      	b.n	8018aa6 <_malloc_r+0x32>
 8018b40:	4634      	mov	r4, r6
 8018b42:	6876      	ldr	r6, [r6, #4]
 8018b44:	e7b9      	b.n	8018aba <_malloc_r+0x46>
 8018b46:	230c      	movs	r3, #12
 8018b48:	603b      	str	r3, [r7, #0]
 8018b4a:	4638      	mov	r0, r7
 8018b4c:	f000 fece 	bl	80198ec <__malloc_unlock>
 8018b50:	e7a1      	b.n	8018a96 <_malloc_r+0x22>
 8018b52:	6025      	str	r5, [r4, #0]
 8018b54:	e7de      	b.n	8018b14 <_malloc_r+0xa0>
 8018b56:	bf00      	nop
 8018b58:	2000d3b4 	.word	0x2000d3b4

08018b5c <__ssputs_r>:
 8018b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b60:	688e      	ldr	r6, [r1, #8]
 8018b62:	429e      	cmp	r6, r3
 8018b64:	4682      	mov	sl, r0
 8018b66:	460c      	mov	r4, r1
 8018b68:	4690      	mov	r8, r2
 8018b6a:	461f      	mov	r7, r3
 8018b6c:	d838      	bhi.n	8018be0 <__ssputs_r+0x84>
 8018b6e:	898a      	ldrh	r2, [r1, #12]
 8018b70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018b74:	d032      	beq.n	8018bdc <__ssputs_r+0x80>
 8018b76:	6825      	ldr	r5, [r4, #0]
 8018b78:	6909      	ldr	r1, [r1, #16]
 8018b7a:	eba5 0901 	sub.w	r9, r5, r1
 8018b7e:	6965      	ldr	r5, [r4, #20]
 8018b80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018b84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018b88:	3301      	adds	r3, #1
 8018b8a:	444b      	add	r3, r9
 8018b8c:	106d      	asrs	r5, r5, #1
 8018b8e:	429d      	cmp	r5, r3
 8018b90:	bf38      	it	cc
 8018b92:	461d      	movcc	r5, r3
 8018b94:	0553      	lsls	r3, r2, #21
 8018b96:	d531      	bpl.n	8018bfc <__ssputs_r+0xa0>
 8018b98:	4629      	mov	r1, r5
 8018b9a:	f7ff ff6b 	bl	8018a74 <_malloc_r>
 8018b9e:	4606      	mov	r6, r0
 8018ba0:	b950      	cbnz	r0, 8018bb8 <__ssputs_r+0x5c>
 8018ba2:	230c      	movs	r3, #12
 8018ba4:	f8ca 3000 	str.w	r3, [sl]
 8018ba8:	89a3      	ldrh	r3, [r4, #12]
 8018baa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018bae:	81a3      	strh	r3, [r4, #12]
 8018bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8018bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018bb8:	6921      	ldr	r1, [r4, #16]
 8018bba:	464a      	mov	r2, r9
 8018bbc:	f7ff fd18 	bl	80185f0 <memcpy>
 8018bc0:	89a3      	ldrh	r3, [r4, #12]
 8018bc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018bca:	81a3      	strh	r3, [r4, #12]
 8018bcc:	6126      	str	r6, [r4, #16]
 8018bce:	6165      	str	r5, [r4, #20]
 8018bd0:	444e      	add	r6, r9
 8018bd2:	eba5 0509 	sub.w	r5, r5, r9
 8018bd6:	6026      	str	r6, [r4, #0]
 8018bd8:	60a5      	str	r5, [r4, #8]
 8018bda:	463e      	mov	r6, r7
 8018bdc:	42be      	cmp	r6, r7
 8018bde:	d900      	bls.n	8018be2 <__ssputs_r+0x86>
 8018be0:	463e      	mov	r6, r7
 8018be2:	6820      	ldr	r0, [r4, #0]
 8018be4:	4632      	mov	r2, r6
 8018be6:	4641      	mov	r1, r8
 8018be8:	f7ff fd10 	bl	801860c <memmove>
 8018bec:	68a3      	ldr	r3, [r4, #8]
 8018bee:	1b9b      	subs	r3, r3, r6
 8018bf0:	60a3      	str	r3, [r4, #8]
 8018bf2:	6823      	ldr	r3, [r4, #0]
 8018bf4:	4433      	add	r3, r6
 8018bf6:	6023      	str	r3, [r4, #0]
 8018bf8:	2000      	movs	r0, #0
 8018bfa:	e7db      	b.n	8018bb4 <__ssputs_r+0x58>
 8018bfc:	462a      	mov	r2, r5
 8018bfe:	f000 fe7b 	bl	80198f8 <_realloc_r>
 8018c02:	4606      	mov	r6, r0
 8018c04:	2800      	cmp	r0, #0
 8018c06:	d1e1      	bne.n	8018bcc <__ssputs_r+0x70>
 8018c08:	6921      	ldr	r1, [r4, #16]
 8018c0a:	4650      	mov	r0, sl
 8018c0c:	f7ff fec6 	bl	801899c <_free_r>
 8018c10:	e7c7      	b.n	8018ba2 <__ssputs_r+0x46>
	...

08018c14 <_svfiprintf_r>:
 8018c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c18:	4698      	mov	r8, r3
 8018c1a:	898b      	ldrh	r3, [r1, #12]
 8018c1c:	061b      	lsls	r3, r3, #24
 8018c1e:	b09d      	sub	sp, #116	; 0x74
 8018c20:	4607      	mov	r7, r0
 8018c22:	460d      	mov	r5, r1
 8018c24:	4614      	mov	r4, r2
 8018c26:	d50e      	bpl.n	8018c46 <_svfiprintf_r+0x32>
 8018c28:	690b      	ldr	r3, [r1, #16]
 8018c2a:	b963      	cbnz	r3, 8018c46 <_svfiprintf_r+0x32>
 8018c2c:	2140      	movs	r1, #64	; 0x40
 8018c2e:	f7ff ff21 	bl	8018a74 <_malloc_r>
 8018c32:	6028      	str	r0, [r5, #0]
 8018c34:	6128      	str	r0, [r5, #16]
 8018c36:	b920      	cbnz	r0, 8018c42 <_svfiprintf_r+0x2e>
 8018c38:	230c      	movs	r3, #12
 8018c3a:	603b      	str	r3, [r7, #0]
 8018c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8018c40:	e0d1      	b.n	8018de6 <_svfiprintf_r+0x1d2>
 8018c42:	2340      	movs	r3, #64	; 0x40
 8018c44:	616b      	str	r3, [r5, #20]
 8018c46:	2300      	movs	r3, #0
 8018c48:	9309      	str	r3, [sp, #36]	; 0x24
 8018c4a:	2320      	movs	r3, #32
 8018c4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018c50:	f8cd 800c 	str.w	r8, [sp, #12]
 8018c54:	2330      	movs	r3, #48	; 0x30
 8018c56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8018e00 <_svfiprintf_r+0x1ec>
 8018c5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018c5e:	f04f 0901 	mov.w	r9, #1
 8018c62:	4623      	mov	r3, r4
 8018c64:	469a      	mov	sl, r3
 8018c66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018c6a:	b10a      	cbz	r2, 8018c70 <_svfiprintf_r+0x5c>
 8018c6c:	2a25      	cmp	r2, #37	; 0x25
 8018c6e:	d1f9      	bne.n	8018c64 <_svfiprintf_r+0x50>
 8018c70:	ebba 0b04 	subs.w	fp, sl, r4
 8018c74:	d00b      	beq.n	8018c8e <_svfiprintf_r+0x7a>
 8018c76:	465b      	mov	r3, fp
 8018c78:	4622      	mov	r2, r4
 8018c7a:	4629      	mov	r1, r5
 8018c7c:	4638      	mov	r0, r7
 8018c7e:	f7ff ff6d 	bl	8018b5c <__ssputs_r>
 8018c82:	3001      	adds	r0, #1
 8018c84:	f000 80aa 	beq.w	8018ddc <_svfiprintf_r+0x1c8>
 8018c88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018c8a:	445a      	add	r2, fp
 8018c8c:	9209      	str	r2, [sp, #36]	; 0x24
 8018c8e:	f89a 3000 	ldrb.w	r3, [sl]
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	f000 80a2 	beq.w	8018ddc <_svfiprintf_r+0x1c8>
 8018c98:	2300      	movs	r3, #0
 8018c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8018c9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018ca2:	f10a 0a01 	add.w	sl, sl, #1
 8018ca6:	9304      	str	r3, [sp, #16]
 8018ca8:	9307      	str	r3, [sp, #28]
 8018caa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018cae:	931a      	str	r3, [sp, #104]	; 0x68
 8018cb0:	4654      	mov	r4, sl
 8018cb2:	2205      	movs	r2, #5
 8018cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018cb8:	4851      	ldr	r0, [pc, #324]	; (8018e00 <_svfiprintf_r+0x1ec>)
 8018cba:	f7e7 fad9 	bl	8000270 <memchr>
 8018cbe:	9a04      	ldr	r2, [sp, #16]
 8018cc0:	b9d8      	cbnz	r0, 8018cfa <_svfiprintf_r+0xe6>
 8018cc2:	06d0      	lsls	r0, r2, #27
 8018cc4:	bf44      	itt	mi
 8018cc6:	2320      	movmi	r3, #32
 8018cc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018ccc:	0711      	lsls	r1, r2, #28
 8018cce:	bf44      	itt	mi
 8018cd0:	232b      	movmi	r3, #43	; 0x2b
 8018cd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018cd6:	f89a 3000 	ldrb.w	r3, [sl]
 8018cda:	2b2a      	cmp	r3, #42	; 0x2a
 8018cdc:	d015      	beq.n	8018d0a <_svfiprintf_r+0xf6>
 8018cde:	9a07      	ldr	r2, [sp, #28]
 8018ce0:	4654      	mov	r4, sl
 8018ce2:	2000      	movs	r0, #0
 8018ce4:	f04f 0c0a 	mov.w	ip, #10
 8018ce8:	4621      	mov	r1, r4
 8018cea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018cee:	3b30      	subs	r3, #48	; 0x30
 8018cf0:	2b09      	cmp	r3, #9
 8018cf2:	d94e      	bls.n	8018d92 <_svfiprintf_r+0x17e>
 8018cf4:	b1b0      	cbz	r0, 8018d24 <_svfiprintf_r+0x110>
 8018cf6:	9207      	str	r2, [sp, #28]
 8018cf8:	e014      	b.n	8018d24 <_svfiprintf_r+0x110>
 8018cfa:	eba0 0308 	sub.w	r3, r0, r8
 8018cfe:	fa09 f303 	lsl.w	r3, r9, r3
 8018d02:	4313      	orrs	r3, r2
 8018d04:	9304      	str	r3, [sp, #16]
 8018d06:	46a2      	mov	sl, r4
 8018d08:	e7d2      	b.n	8018cb0 <_svfiprintf_r+0x9c>
 8018d0a:	9b03      	ldr	r3, [sp, #12]
 8018d0c:	1d19      	adds	r1, r3, #4
 8018d0e:	681b      	ldr	r3, [r3, #0]
 8018d10:	9103      	str	r1, [sp, #12]
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	bfbb      	ittet	lt
 8018d16:	425b      	neglt	r3, r3
 8018d18:	f042 0202 	orrlt.w	r2, r2, #2
 8018d1c:	9307      	strge	r3, [sp, #28]
 8018d1e:	9307      	strlt	r3, [sp, #28]
 8018d20:	bfb8      	it	lt
 8018d22:	9204      	strlt	r2, [sp, #16]
 8018d24:	7823      	ldrb	r3, [r4, #0]
 8018d26:	2b2e      	cmp	r3, #46	; 0x2e
 8018d28:	d10c      	bne.n	8018d44 <_svfiprintf_r+0x130>
 8018d2a:	7863      	ldrb	r3, [r4, #1]
 8018d2c:	2b2a      	cmp	r3, #42	; 0x2a
 8018d2e:	d135      	bne.n	8018d9c <_svfiprintf_r+0x188>
 8018d30:	9b03      	ldr	r3, [sp, #12]
 8018d32:	1d1a      	adds	r2, r3, #4
 8018d34:	681b      	ldr	r3, [r3, #0]
 8018d36:	9203      	str	r2, [sp, #12]
 8018d38:	2b00      	cmp	r3, #0
 8018d3a:	bfb8      	it	lt
 8018d3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8018d40:	3402      	adds	r4, #2
 8018d42:	9305      	str	r3, [sp, #20]
 8018d44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8018e10 <_svfiprintf_r+0x1fc>
 8018d48:	7821      	ldrb	r1, [r4, #0]
 8018d4a:	2203      	movs	r2, #3
 8018d4c:	4650      	mov	r0, sl
 8018d4e:	f7e7 fa8f 	bl	8000270 <memchr>
 8018d52:	b140      	cbz	r0, 8018d66 <_svfiprintf_r+0x152>
 8018d54:	2340      	movs	r3, #64	; 0x40
 8018d56:	eba0 000a 	sub.w	r0, r0, sl
 8018d5a:	fa03 f000 	lsl.w	r0, r3, r0
 8018d5e:	9b04      	ldr	r3, [sp, #16]
 8018d60:	4303      	orrs	r3, r0
 8018d62:	3401      	adds	r4, #1
 8018d64:	9304      	str	r3, [sp, #16]
 8018d66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018d6a:	4826      	ldr	r0, [pc, #152]	; (8018e04 <_svfiprintf_r+0x1f0>)
 8018d6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018d70:	2206      	movs	r2, #6
 8018d72:	f7e7 fa7d 	bl	8000270 <memchr>
 8018d76:	2800      	cmp	r0, #0
 8018d78:	d038      	beq.n	8018dec <_svfiprintf_r+0x1d8>
 8018d7a:	4b23      	ldr	r3, [pc, #140]	; (8018e08 <_svfiprintf_r+0x1f4>)
 8018d7c:	bb1b      	cbnz	r3, 8018dc6 <_svfiprintf_r+0x1b2>
 8018d7e:	9b03      	ldr	r3, [sp, #12]
 8018d80:	3307      	adds	r3, #7
 8018d82:	f023 0307 	bic.w	r3, r3, #7
 8018d86:	3308      	adds	r3, #8
 8018d88:	9303      	str	r3, [sp, #12]
 8018d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018d8c:	4433      	add	r3, r6
 8018d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8018d90:	e767      	b.n	8018c62 <_svfiprintf_r+0x4e>
 8018d92:	fb0c 3202 	mla	r2, ip, r2, r3
 8018d96:	460c      	mov	r4, r1
 8018d98:	2001      	movs	r0, #1
 8018d9a:	e7a5      	b.n	8018ce8 <_svfiprintf_r+0xd4>
 8018d9c:	2300      	movs	r3, #0
 8018d9e:	3401      	adds	r4, #1
 8018da0:	9305      	str	r3, [sp, #20]
 8018da2:	4619      	mov	r1, r3
 8018da4:	f04f 0c0a 	mov.w	ip, #10
 8018da8:	4620      	mov	r0, r4
 8018daa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018dae:	3a30      	subs	r2, #48	; 0x30
 8018db0:	2a09      	cmp	r2, #9
 8018db2:	d903      	bls.n	8018dbc <_svfiprintf_r+0x1a8>
 8018db4:	2b00      	cmp	r3, #0
 8018db6:	d0c5      	beq.n	8018d44 <_svfiprintf_r+0x130>
 8018db8:	9105      	str	r1, [sp, #20]
 8018dba:	e7c3      	b.n	8018d44 <_svfiprintf_r+0x130>
 8018dbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8018dc0:	4604      	mov	r4, r0
 8018dc2:	2301      	movs	r3, #1
 8018dc4:	e7f0      	b.n	8018da8 <_svfiprintf_r+0x194>
 8018dc6:	ab03      	add	r3, sp, #12
 8018dc8:	9300      	str	r3, [sp, #0]
 8018dca:	462a      	mov	r2, r5
 8018dcc:	4b0f      	ldr	r3, [pc, #60]	; (8018e0c <_svfiprintf_r+0x1f8>)
 8018dce:	a904      	add	r1, sp, #16
 8018dd0:	4638      	mov	r0, r7
 8018dd2:	f3af 8000 	nop.w
 8018dd6:	1c42      	adds	r2, r0, #1
 8018dd8:	4606      	mov	r6, r0
 8018dda:	d1d6      	bne.n	8018d8a <_svfiprintf_r+0x176>
 8018ddc:	89ab      	ldrh	r3, [r5, #12]
 8018dde:	065b      	lsls	r3, r3, #25
 8018de0:	f53f af2c 	bmi.w	8018c3c <_svfiprintf_r+0x28>
 8018de4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018de6:	b01d      	add	sp, #116	; 0x74
 8018de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018dec:	ab03      	add	r3, sp, #12
 8018dee:	9300      	str	r3, [sp, #0]
 8018df0:	462a      	mov	r2, r5
 8018df2:	4b06      	ldr	r3, [pc, #24]	; (8018e0c <_svfiprintf_r+0x1f8>)
 8018df4:	a904      	add	r1, sp, #16
 8018df6:	4638      	mov	r0, r7
 8018df8:	f000 f9d4 	bl	80191a4 <_printf_i>
 8018dfc:	e7eb      	b.n	8018dd6 <_svfiprintf_r+0x1c2>
 8018dfe:	bf00      	nop
 8018e00:	0801d960 	.word	0x0801d960
 8018e04:	0801d96a 	.word	0x0801d96a
 8018e08:	00000000 	.word	0x00000000
 8018e0c:	08018b5d 	.word	0x08018b5d
 8018e10:	0801d966 	.word	0x0801d966

08018e14 <__sfputc_r>:
 8018e14:	6893      	ldr	r3, [r2, #8]
 8018e16:	3b01      	subs	r3, #1
 8018e18:	2b00      	cmp	r3, #0
 8018e1a:	b410      	push	{r4}
 8018e1c:	6093      	str	r3, [r2, #8]
 8018e1e:	da08      	bge.n	8018e32 <__sfputc_r+0x1e>
 8018e20:	6994      	ldr	r4, [r2, #24]
 8018e22:	42a3      	cmp	r3, r4
 8018e24:	db01      	blt.n	8018e2a <__sfputc_r+0x16>
 8018e26:	290a      	cmp	r1, #10
 8018e28:	d103      	bne.n	8018e32 <__sfputc_r+0x1e>
 8018e2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018e2e:	f000 bb33 	b.w	8019498 <__swbuf_r>
 8018e32:	6813      	ldr	r3, [r2, #0]
 8018e34:	1c58      	adds	r0, r3, #1
 8018e36:	6010      	str	r0, [r2, #0]
 8018e38:	7019      	strb	r1, [r3, #0]
 8018e3a:	4608      	mov	r0, r1
 8018e3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018e40:	4770      	bx	lr

08018e42 <__sfputs_r>:
 8018e42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e44:	4606      	mov	r6, r0
 8018e46:	460f      	mov	r7, r1
 8018e48:	4614      	mov	r4, r2
 8018e4a:	18d5      	adds	r5, r2, r3
 8018e4c:	42ac      	cmp	r4, r5
 8018e4e:	d101      	bne.n	8018e54 <__sfputs_r+0x12>
 8018e50:	2000      	movs	r0, #0
 8018e52:	e007      	b.n	8018e64 <__sfputs_r+0x22>
 8018e54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018e58:	463a      	mov	r2, r7
 8018e5a:	4630      	mov	r0, r6
 8018e5c:	f7ff ffda 	bl	8018e14 <__sfputc_r>
 8018e60:	1c43      	adds	r3, r0, #1
 8018e62:	d1f3      	bne.n	8018e4c <__sfputs_r+0xa>
 8018e64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018e68 <_vfiprintf_r>:
 8018e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e6c:	460d      	mov	r5, r1
 8018e6e:	b09d      	sub	sp, #116	; 0x74
 8018e70:	4614      	mov	r4, r2
 8018e72:	4698      	mov	r8, r3
 8018e74:	4606      	mov	r6, r0
 8018e76:	b118      	cbz	r0, 8018e80 <_vfiprintf_r+0x18>
 8018e78:	6983      	ldr	r3, [r0, #24]
 8018e7a:	b90b      	cbnz	r3, 8018e80 <_vfiprintf_r+0x18>
 8018e7c:	f7ff fcd4 	bl	8018828 <__sinit>
 8018e80:	4b89      	ldr	r3, [pc, #548]	; (80190a8 <_vfiprintf_r+0x240>)
 8018e82:	429d      	cmp	r5, r3
 8018e84:	d11b      	bne.n	8018ebe <_vfiprintf_r+0x56>
 8018e86:	6875      	ldr	r5, [r6, #4]
 8018e88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018e8a:	07d9      	lsls	r1, r3, #31
 8018e8c:	d405      	bmi.n	8018e9a <_vfiprintf_r+0x32>
 8018e8e:	89ab      	ldrh	r3, [r5, #12]
 8018e90:	059a      	lsls	r2, r3, #22
 8018e92:	d402      	bmi.n	8018e9a <_vfiprintf_r+0x32>
 8018e94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018e96:	f7ff fd77 	bl	8018988 <__retarget_lock_acquire_recursive>
 8018e9a:	89ab      	ldrh	r3, [r5, #12]
 8018e9c:	071b      	lsls	r3, r3, #28
 8018e9e:	d501      	bpl.n	8018ea4 <_vfiprintf_r+0x3c>
 8018ea0:	692b      	ldr	r3, [r5, #16]
 8018ea2:	b9eb      	cbnz	r3, 8018ee0 <_vfiprintf_r+0x78>
 8018ea4:	4629      	mov	r1, r5
 8018ea6:	4630      	mov	r0, r6
 8018ea8:	f000 fb5a 	bl	8019560 <__swsetup_r>
 8018eac:	b1c0      	cbz	r0, 8018ee0 <_vfiprintf_r+0x78>
 8018eae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018eb0:	07dc      	lsls	r4, r3, #31
 8018eb2:	d50e      	bpl.n	8018ed2 <_vfiprintf_r+0x6a>
 8018eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8018eb8:	b01d      	add	sp, #116	; 0x74
 8018eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ebe:	4b7b      	ldr	r3, [pc, #492]	; (80190ac <_vfiprintf_r+0x244>)
 8018ec0:	429d      	cmp	r5, r3
 8018ec2:	d101      	bne.n	8018ec8 <_vfiprintf_r+0x60>
 8018ec4:	68b5      	ldr	r5, [r6, #8]
 8018ec6:	e7df      	b.n	8018e88 <_vfiprintf_r+0x20>
 8018ec8:	4b79      	ldr	r3, [pc, #484]	; (80190b0 <_vfiprintf_r+0x248>)
 8018eca:	429d      	cmp	r5, r3
 8018ecc:	bf08      	it	eq
 8018ece:	68f5      	ldreq	r5, [r6, #12]
 8018ed0:	e7da      	b.n	8018e88 <_vfiprintf_r+0x20>
 8018ed2:	89ab      	ldrh	r3, [r5, #12]
 8018ed4:	0598      	lsls	r0, r3, #22
 8018ed6:	d4ed      	bmi.n	8018eb4 <_vfiprintf_r+0x4c>
 8018ed8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018eda:	f7ff fd56 	bl	801898a <__retarget_lock_release_recursive>
 8018ede:	e7e9      	b.n	8018eb4 <_vfiprintf_r+0x4c>
 8018ee0:	2300      	movs	r3, #0
 8018ee2:	9309      	str	r3, [sp, #36]	; 0x24
 8018ee4:	2320      	movs	r3, #32
 8018ee6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018eea:	f8cd 800c 	str.w	r8, [sp, #12]
 8018eee:	2330      	movs	r3, #48	; 0x30
 8018ef0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80190b4 <_vfiprintf_r+0x24c>
 8018ef4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018ef8:	f04f 0901 	mov.w	r9, #1
 8018efc:	4623      	mov	r3, r4
 8018efe:	469a      	mov	sl, r3
 8018f00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018f04:	b10a      	cbz	r2, 8018f0a <_vfiprintf_r+0xa2>
 8018f06:	2a25      	cmp	r2, #37	; 0x25
 8018f08:	d1f9      	bne.n	8018efe <_vfiprintf_r+0x96>
 8018f0a:	ebba 0b04 	subs.w	fp, sl, r4
 8018f0e:	d00b      	beq.n	8018f28 <_vfiprintf_r+0xc0>
 8018f10:	465b      	mov	r3, fp
 8018f12:	4622      	mov	r2, r4
 8018f14:	4629      	mov	r1, r5
 8018f16:	4630      	mov	r0, r6
 8018f18:	f7ff ff93 	bl	8018e42 <__sfputs_r>
 8018f1c:	3001      	adds	r0, #1
 8018f1e:	f000 80aa 	beq.w	8019076 <_vfiprintf_r+0x20e>
 8018f22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018f24:	445a      	add	r2, fp
 8018f26:	9209      	str	r2, [sp, #36]	; 0x24
 8018f28:	f89a 3000 	ldrb.w	r3, [sl]
 8018f2c:	2b00      	cmp	r3, #0
 8018f2e:	f000 80a2 	beq.w	8019076 <_vfiprintf_r+0x20e>
 8018f32:	2300      	movs	r3, #0
 8018f34:	f04f 32ff 	mov.w	r2, #4294967295
 8018f38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018f3c:	f10a 0a01 	add.w	sl, sl, #1
 8018f40:	9304      	str	r3, [sp, #16]
 8018f42:	9307      	str	r3, [sp, #28]
 8018f44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018f48:	931a      	str	r3, [sp, #104]	; 0x68
 8018f4a:	4654      	mov	r4, sl
 8018f4c:	2205      	movs	r2, #5
 8018f4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018f52:	4858      	ldr	r0, [pc, #352]	; (80190b4 <_vfiprintf_r+0x24c>)
 8018f54:	f7e7 f98c 	bl	8000270 <memchr>
 8018f58:	9a04      	ldr	r2, [sp, #16]
 8018f5a:	b9d8      	cbnz	r0, 8018f94 <_vfiprintf_r+0x12c>
 8018f5c:	06d1      	lsls	r1, r2, #27
 8018f5e:	bf44      	itt	mi
 8018f60:	2320      	movmi	r3, #32
 8018f62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018f66:	0713      	lsls	r3, r2, #28
 8018f68:	bf44      	itt	mi
 8018f6a:	232b      	movmi	r3, #43	; 0x2b
 8018f6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018f70:	f89a 3000 	ldrb.w	r3, [sl]
 8018f74:	2b2a      	cmp	r3, #42	; 0x2a
 8018f76:	d015      	beq.n	8018fa4 <_vfiprintf_r+0x13c>
 8018f78:	9a07      	ldr	r2, [sp, #28]
 8018f7a:	4654      	mov	r4, sl
 8018f7c:	2000      	movs	r0, #0
 8018f7e:	f04f 0c0a 	mov.w	ip, #10
 8018f82:	4621      	mov	r1, r4
 8018f84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018f88:	3b30      	subs	r3, #48	; 0x30
 8018f8a:	2b09      	cmp	r3, #9
 8018f8c:	d94e      	bls.n	801902c <_vfiprintf_r+0x1c4>
 8018f8e:	b1b0      	cbz	r0, 8018fbe <_vfiprintf_r+0x156>
 8018f90:	9207      	str	r2, [sp, #28]
 8018f92:	e014      	b.n	8018fbe <_vfiprintf_r+0x156>
 8018f94:	eba0 0308 	sub.w	r3, r0, r8
 8018f98:	fa09 f303 	lsl.w	r3, r9, r3
 8018f9c:	4313      	orrs	r3, r2
 8018f9e:	9304      	str	r3, [sp, #16]
 8018fa0:	46a2      	mov	sl, r4
 8018fa2:	e7d2      	b.n	8018f4a <_vfiprintf_r+0xe2>
 8018fa4:	9b03      	ldr	r3, [sp, #12]
 8018fa6:	1d19      	adds	r1, r3, #4
 8018fa8:	681b      	ldr	r3, [r3, #0]
 8018faa:	9103      	str	r1, [sp, #12]
 8018fac:	2b00      	cmp	r3, #0
 8018fae:	bfbb      	ittet	lt
 8018fb0:	425b      	neglt	r3, r3
 8018fb2:	f042 0202 	orrlt.w	r2, r2, #2
 8018fb6:	9307      	strge	r3, [sp, #28]
 8018fb8:	9307      	strlt	r3, [sp, #28]
 8018fba:	bfb8      	it	lt
 8018fbc:	9204      	strlt	r2, [sp, #16]
 8018fbe:	7823      	ldrb	r3, [r4, #0]
 8018fc0:	2b2e      	cmp	r3, #46	; 0x2e
 8018fc2:	d10c      	bne.n	8018fde <_vfiprintf_r+0x176>
 8018fc4:	7863      	ldrb	r3, [r4, #1]
 8018fc6:	2b2a      	cmp	r3, #42	; 0x2a
 8018fc8:	d135      	bne.n	8019036 <_vfiprintf_r+0x1ce>
 8018fca:	9b03      	ldr	r3, [sp, #12]
 8018fcc:	1d1a      	adds	r2, r3, #4
 8018fce:	681b      	ldr	r3, [r3, #0]
 8018fd0:	9203      	str	r2, [sp, #12]
 8018fd2:	2b00      	cmp	r3, #0
 8018fd4:	bfb8      	it	lt
 8018fd6:	f04f 33ff 	movlt.w	r3, #4294967295
 8018fda:	3402      	adds	r4, #2
 8018fdc:	9305      	str	r3, [sp, #20]
 8018fde:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80190c4 <_vfiprintf_r+0x25c>
 8018fe2:	7821      	ldrb	r1, [r4, #0]
 8018fe4:	2203      	movs	r2, #3
 8018fe6:	4650      	mov	r0, sl
 8018fe8:	f7e7 f942 	bl	8000270 <memchr>
 8018fec:	b140      	cbz	r0, 8019000 <_vfiprintf_r+0x198>
 8018fee:	2340      	movs	r3, #64	; 0x40
 8018ff0:	eba0 000a 	sub.w	r0, r0, sl
 8018ff4:	fa03 f000 	lsl.w	r0, r3, r0
 8018ff8:	9b04      	ldr	r3, [sp, #16]
 8018ffa:	4303      	orrs	r3, r0
 8018ffc:	3401      	adds	r4, #1
 8018ffe:	9304      	str	r3, [sp, #16]
 8019000:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019004:	482c      	ldr	r0, [pc, #176]	; (80190b8 <_vfiprintf_r+0x250>)
 8019006:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801900a:	2206      	movs	r2, #6
 801900c:	f7e7 f930 	bl	8000270 <memchr>
 8019010:	2800      	cmp	r0, #0
 8019012:	d03f      	beq.n	8019094 <_vfiprintf_r+0x22c>
 8019014:	4b29      	ldr	r3, [pc, #164]	; (80190bc <_vfiprintf_r+0x254>)
 8019016:	bb1b      	cbnz	r3, 8019060 <_vfiprintf_r+0x1f8>
 8019018:	9b03      	ldr	r3, [sp, #12]
 801901a:	3307      	adds	r3, #7
 801901c:	f023 0307 	bic.w	r3, r3, #7
 8019020:	3308      	adds	r3, #8
 8019022:	9303      	str	r3, [sp, #12]
 8019024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019026:	443b      	add	r3, r7
 8019028:	9309      	str	r3, [sp, #36]	; 0x24
 801902a:	e767      	b.n	8018efc <_vfiprintf_r+0x94>
 801902c:	fb0c 3202 	mla	r2, ip, r2, r3
 8019030:	460c      	mov	r4, r1
 8019032:	2001      	movs	r0, #1
 8019034:	e7a5      	b.n	8018f82 <_vfiprintf_r+0x11a>
 8019036:	2300      	movs	r3, #0
 8019038:	3401      	adds	r4, #1
 801903a:	9305      	str	r3, [sp, #20]
 801903c:	4619      	mov	r1, r3
 801903e:	f04f 0c0a 	mov.w	ip, #10
 8019042:	4620      	mov	r0, r4
 8019044:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019048:	3a30      	subs	r2, #48	; 0x30
 801904a:	2a09      	cmp	r2, #9
 801904c:	d903      	bls.n	8019056 <_vfiprintf_r+0x1ee>
 801904e:	2b00      	cmp	r3, #0
 8019050:	d0c5      	beq.n	8018fde <_vfiprintf_r+0x176>
 8019052:	9105      	str	r1, [sp, #20]
 8019054:	e7c3      	b.n	8018fde <_vfiprintf_r+0x176>
 8019056:	fb0c 2101 	mla	r1, ip, r1, r2
 801905a:	4604      	mov	r4, r0
 801905c:	2301      	movs	r3, #1
 801905e:	e7f0      	b.n	8019042 <_vfiprintf_r+0x1da>
 8019060:	ab03      	add	r3, sp, #12
 8019062:	9300      	str	r3, [sp, #0]
 8019064:	462a      	mov	r2, r5
 8019066:	4b16      	ldr	r3, [pc, #88]	; (80190c0 <_vfiprintf_r+0x258>)
 8019068:	a904      	add	r1, sp, #16
 801906a:	4630      	mov	r0, r6
 801906c:	f3af 8000 	nop.w
 8019070:	4607      	mov	r7, r0
 8019072:	1c78      	adds	r0, r7, #1
 8019074:	d1d6      	bne.n	8019024 <_vfiprintf_r+0x1bc>
 8019076:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019078:	07d9      	lsls	r1, r3, #31
 801907a:	d405      	bmi.n	8019088 <_vfiprintf_r+0x220>
 801907c:	89ab      	ldrh	r3, [r5, #12]
 801907e:	059a      	lsls	r2, r3, #22
 8019080:	d402      	bmi.n	8019088 <_vfiprintf_r+0x220>
 8019082:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019084:	f7ff fc81 	bl	801898a <__retarget_lock_release_recursive>
 8019088:	89ab      	ldrh	r3, [r5, #12]
 801908a:	065b      	lsls	r3, r3, #25
 801908c:	f53f af12 	bmi.w	8018eb4 <_vfiprintf_r+0x4c>
 8019090:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019092:	e711      	b.n	8018eb8 <_vfiprintf_r+0x50>
 8019094:	ab03      	add	r3, sp, #12
 8019096:	9300      	str	r3, [sp, #0]
 8019098:	462a      	mov	r2, r5
 801909a:	4b09      	ldr	r3, [pc, #36]	; (80190c0 <_vfiprintf_r+0x258>)
 801909c:	a904      	add	r1, sp, #16
 801909e:	4630      	mov	r0, r6
 80190a0:	f000 f880 	bl	80191a4 <_printf_i>
 80190a4:	e7e4      	b.n	8019070 <_vfiprintf_r+0x208>
 80190a6:	bf00      	nop
 80190a8:	0801d920 	.word	0x0801d920
 80190ac:	0801d940 	.word	0x0801d940
 80190b0:	0801d900 	.word	0x0801d900
 80190b4:	0801d960 	.word	0x0801d960
 80190b8:	0801d96a 	.word	0x0801d96a
 80190bc:	00000000 	.word	0x00000000
 80190c0:	08018e43 	.word	0x08018e43
 80190c4:	0801d966 	.word	0x0801d966

080190c8 <_printf_common>:
 80190c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80190cc:	4616      	mov	r6, r2
 80190ce:	4699      	mov	r9, r3
 80190d0:	688a      	ldr	r2, [r1, #8]
 80190d2:	690b      	ldr	r3, [r1, #16]
 80190d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80190d8:	4293      	cmp	r3, r2
 80190da:	bfb8      	it	lt
 80190dc:	4613      	movlt	r3, r2
 80190de:	6033      	str	r3, [r6, #0]
 80190e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80190e4:	4607      	mov	r7, r0
 80190e6:	460c      	mov	r4, r1
 80190e8:	b10a      	cbz	r2, 80190ee <_printf_common+0x26>
 80190ea:	3301      	adds	r3, #1
 80190ec:	6033      	str	r3, [r6, #0]
 80190ee:	6823      	ldr	r3, [r4, #0]
 80190f0:	0699      	lsls	r1, r3, #26
 80190f2:	bf42      	ittt	mi
 80190f4:	6833      	ldrmi	r3, [r6, #0]
 80190f6:	3302      	addmi	r3, #2
 80190f8:	6033      	strmi	r3, [r6, #0]
 80190fa:	6825      	ldr	r5, [r4, #0]
 80190fc:	f015 0506 	ands.w	r5, r5, #6
 8019100:	d106      	bne.n	8019110 <_printf_common+0x48>
 8019102:	f104 0a19 	add.w	sl, r4, #25
 8019106:	68e3      	ldr	r3, [r4, #12]
 8019108:	6832      	ldr	r2, [r6, #0]
 801910a:	1a9b      	subs	r3, r3, r2
 801910c:	42ab      	cmp	r3, r5
 801910e:	dc26      	bgt.n	801915e <_printf_common+0x96>
 8019110:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019114:	1e13      	subs	r3, r2, #0
 8019116:	6822      	ldr	r2, [r4, #0]
 8019118:	bf18      	it	ne
 801911a:	2301      	movne	r3, #1
 801911c:	0692      	lsls	r2, r2, #26
 801911e:	d42b      	bmi.n	8019178 <_printf_common+0xb0>
 8019120:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019124:	4649      	mov	r1, r9
 8019126:	4638      	mov	r0, r7
 8019128:	47c0      	blx	r8
 801912a:	3001      	adds	r0, #1
 801912c:	d01e      	beq.n	801916c <_printf_common+0xa4>
 801912e:	6823      	ldr	r3, [r4, #0]
 8019130:	68e5      	ldr	r5, [r4, #12]
 8019132:	6832      	ldr	r2, [r6, #0]
 8019134:	f003 0306 	and.w	r3, r3, #6
 8019138:	2b04      	cmp	r3, #4
 801913a:	bf08      	it	eq
 801913c:	1aad      	subeq	r5, r5, r2
 801913e:	68a3      	ldr	r3, [r4, #8]
 8019140:	6922      	ldr	r2, [r4, #16]
 8019142:	bf0c      	ite	eq
 8019144:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019148:	2500      	movne	r5, #0
 801914a:	4293      	cmp	r3, r2
 801914c:	bfc4      	itt	gt
 801914e:	1a9b      	subgt	r3, r3, r2
 8019150:	18ed      	addgt	r5, r5, r3
 8019152:	2600      	movs	r6, #0
 8019154:	341a      	adds	r4, #26
 8019156:	42b5      	cmp	r5, r6
 8019158:	d11a      	bne.n	8019190 <_printf_common+0xc8>
 801915a:	2000      	movs	r0, #0
 801915c:	e008      	b.n	8019170 <_printf_common+0xa8>
 801915e:	2301      	movs	r3, #1
 8019160:	4652      	mov	r2, sl
 8019162:	4649      	mov	r1, r9
 8019164:	4638      	mov	r0, r7
 8019166:	47c0      	blx	r8
 8019168:	3001      	adds	r0, #1
 801916a:	d103      	bne.n	8019174 <_printf_common+0xac>
 801916c:	f04f 30ff 	mov.w	r0, #4294967295
 8019170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019174:	3501      	adds	r5, #1
 8019176:	e7c6      	b.n	8019106 <_printf_common+0x3e>
 8019178:	18e1      	adds	r1, r4, r3
 801917a:	1c5a      	adds	r2, r3, #1
 801917c:	2030      	movs	r0, #48	; 0x30
 801917e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019182:	4422      	add	r2, r4
 8019184:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019188:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801918c:	3302      	adds	r3, #2
 801918e:	e7c7      	b.n	8019120 <_printf_common+0x58>
 8019190:	2301      	movs	r3, #1
 8019192:	4622      	mov	r2, r4
 8019194:	4649      	mov	r1, r9
 8019196:	4638      	mov	r0, r7
 8019198:	47c0      	blx	r8
 801919a:	3001      	adds	r0, #1
 801919c:	d0e6      	beq.n	801916c <_printf_common+0xa4>
 801919e:	3601      	adds	r6, #1
 80191a0:	e7d9      	b.n	8019156 <_printf_common+0x8e>
	...

080191a4 <_printf_i>:
 80191a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80191a8:	7e0f      	ldrb	r7, [r1, #24]
 80191aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80191ac:	2f78      	cmp	r7, #120	; 0x78
 80191ae:	4691      	mov	r9, r2
 80191b0:	4680      	mov	r8, r0
 80191b2:	460c      	mov	r4, r1
 80191b4:	469a      	mov	sl, r3
 80191b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80191ba:	d807      	bhi.n	80191cc <_printf_i+0x28>
 80191bc:	2f62      	cmp	r7, #98	; 0x62
 80191be:	d80a      	bhi.n	80191d6 <_printf_i+0x32>
 80191c0:	2f00      	cmp	r7, #0
 80191c2:	f000 80d8 	beq.w	8019376 <_printf_i+0x1d2>
 80191c6:	2f58      	cmp	r7, #88	; 0x58
 80191c8:	f000 80a3 	beq.w	8019312 <_printf_i+0x16e>
 80191cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80191d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80191d4:	e03a      	b.n	801924c <_printf_i+0xa8>
 80191d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80191da:	2b15      	cmp	r3, #21
 80191dc:	d8f6      	bhi.n	80191cc <_printf_i+0x28>
 80191de:	a101      	add	r1, pc, #4	; (adr r1, 80191e4 <_printf_i+0x40>)
 80191e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80191e4:	0801923d 	.word	0x0801923d
 80191e8:	08019251 	.word	0x08019251
 80191ec:	080191cd 	.word	0x080191cd
 80191f0:	080191cd 	.word	0x080191cd
 80191f4:	080191cd 	.word	0x080191cd
 80191f8:	080191cd 	.word	0x080191cd
 80191fc:	08019251 	.word	0x08019251
 8019200:	080191cd 	.word	0x080191cd
 8019204:	080191cd 	.word	0x080191cd
 8019208:	080191cd 	.word	0x080191cd
 801920c:	080191cd 	.word	0x080191cd
 8019210:	0801935d 	.word	0x0801935d
 8019214:	08019281 	.word	0x08019281
 8019218:	0801933f 	.word	0x0801933f
 801921c:	080191cd 	.word	0x080191cd
 8019220:	080191cd 	.word	0x080191cd
 8019224:	0801937f 	.word	0x0801937f
 8019228:	080191cd 	.word	0x080191cd
 801922c:	08019281 	.word	0x08019281
 8019230:	080191cd 	.word	0x080191cd
 8019234:	080191cd 	.word	0x080191cd
 8019238:	08019347 	.word	0x08019347
 801923c:	682b      	ldr	r3, [r5, #0]
 801923e:	1d1a      	adds	r2, r3, #4
 8019240:	681b      	ldr	r3, [r3, #0]
 8019242:	602a      	str	r2, [r5, #0]
 8019244:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019248:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801924c:	2301      	movs	r3, #1
 801924e:	e0a3      	b.n	8019398 <_printf_i+0x1f4>
 8019250:	6820      	ldr	r0, [r4, #0]
 8019252:	6829      	ldr	r1, [r5, #0]
 8019254:	0606      	lsls	r6, r0, #24
 8019256:	f101 0304 	add.w	r3, r1, #4
 801925a:	d50a      	bpl.n	8019272 <_printf_i+0xce>
 801925c:	680e      	ldr	r6, [r1, #0]
 801925e:	602b      	str	r3, [r5, #0]
 8019260:	2e00      	cmp	r6, #0
 8019262:	da03      	bge.n	801926c <_printf_i+0xc8>
 8019264:	232d      	movs	r3, #45	; 0x2d
 8019266:	4276      	negs	r6, r6
 8019268:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801926c:	485e      	ldr	r0, [pc, #376]	; (80193e8 <_printf_i+0x244>)
 801926e:	230a      	movs	r3, #10
 8019270:	e019      	b.n	80192a6 <_printf_i+0x102>
 8019272:	680e      	ldr	r6, [r1, #0]
 8019274:	602b      	str	r3, [r5, #0]
 8019276:	f010 0f40 	tst.w	r0, #64	; 0x40
 801927a:	bf18      	it	ne
 801927c:	b236      	sxthne	r6, r6
 801927e:	e7ef      	b.n	8019260 <_printf_i+0xbc>
 8019280:	682b      	ldr	r3, [r5, #0]
 8019282:	6820      	ldr	r0, [r4, #0]
 8019284:	1d19      	adds	r1, r3, #4
 8019286:	6029      	str	r1, [r5, #0]
 8019288:	0601      	lsls	r1, r0, #24
 801928a:	d501      	bpl.n	8019290 <_printf_i+0xec>
 801928c:	681e      	ldr	r6, [r3, #0]
 801928e:	e002      	b.n	8019296 <_printf_i+0xf2>
 8019290:	0646      	lsls	r6, r0, #25
 8019292:	d5fb      	bpl.n	801928c <_printf_i+0xe8>
 8019294:	881e      	ldrh	r6, [r3, #0]
 8019296:	4854      	ldr	r0, [pc, #336]	; (80193e8 <_printf_i+0x244>)
 8019298:	2f6f      	cmp	r7, #111	; 0x6f
 801929a:	bf0c      	ite	eq
 801929c:	2308      	moveq	r3, #8
 801929e:	230a      	movne	r3, #10
 80192a0:	2100      	movs	r1, #0
 80192a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80192a6:	6865      	ldr	r5, [r4, #4]
 80192a8:	60a5      	str	r5, [r4, #8]
 80192aa:	2d00      	cmp	r5, #0
 80192ac:	bfa2      	ittt	ge
 80192ae:	6821      	ldrge	r1, [r4, #0]
 80192b0:	f021 0104 	bicge.w	r1, r1, #4
 80192b4:	6021      	strge	r1, [r4, #0]
 80192b6:	b90e      	cbnz	r6, 80192bc <_printf_i+0x118>
 80192b8:	2d00      	cmp	r5, #0
 80192ba:	d04d      	beq.n	8019358 <_printf_i+0x1b4>
 80192bc:	4615      	mov	r5, r2
 80192be:	fbb6 f1f3 	udiv	r1, r6, r3
 80192c2:	fb03 6711 	mls	r7, r3, r1, r6
 80192c6:	5dc7      	ldrb	r7, [r0, r7]
 80192c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80192cc:	4637      	mov	r7, r6
 80192ce:	42bb      	cmp	r3, r7
 80192d0:	460e      	mov	r6, r1
 80192d2:	d9f4      	bls.n	80192be <_printf_i+0x11a>
 80192d4:	2b08      	cmp	r3, #8
 80192d6:	d10b      	bne.n	80192f0 <_printf_i+0x14c>
 80192d8:	6823      	ldr	r3, [r4, #0]
 80192da:	07de      	lsls	r6, r3, #31
 80192dc:	d508      	bpl.n	80192f0 <_printf_i+0x14c>
 80192de:	6923      	ldr	r3, [r4, #16]
 80192e0:	6861      	ldr	r1, [r4, #4]
 80192e2:	4299      	cmp	r1, r3
 80192e4:	bfde      	ittt	le
 80192e6:	2330      	movle	r3, #48	; 0x30
 80192e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80192ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80192f0:	1b52      	subs	r2, r2, r5
 80192f2:	6122      	str	r2, [r4, #16]
 80192f4:	f8cd a000 	str.w	sl, [sp]
 80192f8:	464b      	mov	r3, r9
 80192fa:	aa03      	add	r2, sp, #12
 80192fc:	4621      	mov	r1, r4
 80192fe:	4640      	mov	r0, r8
 8019300:	f7ff fee2 	bl	80190c8 <_printf_common>
 8019304:	3001      	adds	r0, #1
 8019306:	d14c      	bne.n	80193a2 <_printf_i+0x1fe>
 8019308:	f04f 30ff 	mov.w	r0, #4294967295
 801930c:	b004      	add	sp, #16
 801930e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019312:	4835      	ldr	r0, [pc, #212]	; (80193e8 <_printf_i+0x244>)
 8019314:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8019318:	6829      	ldr	r1, [r5, #0]
 801931a:	6823      	ldr	r3, [r4, #0]
 801931c:	f851 6b04 	ldr.w	r6, [r1], #4
 8019320:	6029      	str	r1, [r5, #0]
 8019322:	061d      	lsls	r5, r3, #24
 8019324:	d514      	bpl.n	8019350 <_printf_i+0x1ac>
 8019326:	07df      	lsls	r7, r3, #31
 8019328:	bf44      	itt	mi
 801932a:	f043 0320 	orrmi.w	r3, r3, #32
 801932e:	6023      	strmi	r3, [r4, #0]
 8019330:	b91e      	cbnz	r6, 801933a <_printf_i+0x196>
 8019332:	6823      	ldr	r3, [r4, #0]
 8019334:	f023 0320 	bic.w	r3, r3, #32
 8019338:	6023      	str	r3, [r4, #0]
 801933a:	2310      	movs	r3, #16
 801933c:	e7b0      	b.n	80192a0 <_printf_i+0xfc>
 801933e:	6823      	ldr	r3, [r4, #0]
 8019340:	f043 0320 	orr.w	r3, r3, #32
 8019344:	6023      	str	r3, [r4, #0]
 8019346:	2378      	movs	r3, #120	; 0x78
 8019348:	4828      	ldr	r0, [pc, #160]	; (80193ec <_printf_i+0x248>)
 801934a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801934e:	e7e3      	b.n	8019318 <_printf_i+0x174>
 8019350:	0659      	lsls	r1, r3, #25
 8019352:	bf48      	it	mi
 8019354:	b2b6      	uxthmi	r6, r6
 8019356:	e7e6      	b.n	8019326 <_printf_i+0x182>
 8019358:	4615      	mov	r5, r2
 801935a:	e7bb      	b.n	80192d4 <_printf_i+0x130>
 801935c:	682b      	ldr	r3, [r5, #0]
 801935e:	6826      	ldr	r6, [r4, #0]
 8019360:	6961      	ldr	r1, [r4, #20]
 8019362:	1d18      	adds	r0, r3, #4
 8019364:	6028      	str	r0, [r5, #0]
 8019366:	0635      	lsls	r5, r6, #24
 8019368:	681b      	ldr	r3, [r3, #0]
 801936a:	d501      	bpl.n	8019370 <_printf_i+0x1cc>
 801936c:	6019      	str	r1, [r3, #0]
 801936e:	e002      	b.n	8019376 <_printf_i+0x1d2>
 8019370:	0670      	lsls	r0, r6, #25
 8019372:	d5fb      	bpl.n	801936c <_printf_i+0x1c8>
 8019374:	8019      	strh	r1, [r3, #0]
 8019376:	2300      	movs	r3, #0
 8019378:	6123      	str	r3, [r4, #16]
 801937a:	4615      	mov	r5, r2
 801937c:	e7ba      	b.n	80192f4 <_printf_i+0x150>
 801937e:	682b      	ldr	r3, [r5, #0]
 8019380:	1d1a      	adds	r2, r3, #4
 8019382:	602a      	str	r2, [r5, #0]
 8019384:	681d      	ldr	r5, [r3, #0]
 8019386:	6862      	ldr	r2, [r4, #4]
 8019388:	2100      	movs	r1, #0
 801938a:	4628      	mov	r0, r5
 801938c:	f7e6 ff70 	bl	8000270 <memchr>
 8019390:	b108      	cbz	r0, 8019396 <_printf_i+0x1f2>
 8019392:	1b40      	subs	r0, r0, r5
 8019394:	6060      	str	r0, [r4, #4]
 8019396:	6863      	ldr	r3, [r4, #4]
 8019398:	6123      	str	r3, [r4, #16]
 801939a:	2300      	movs	r3, #0
 801939c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80193a0:	e7a8      	b.n	80192f4 <_printf_i+0x150>
 80193a2:	6923      	ldr	r3, [r4, #16]
 80193a4:	462a      	mov	r2, r5
 80193a6:	4649      	mov	r1, r9
 80193a8:	4640      	mov	r0, r8
 80193aa:	47d0      	blx	sl
 80193ac:	3001      	adds	r0, #1
 80193ae:	d0ab      	beq.n	8019308 <_printf_i+0x164>
 80193b0:	6823      	ldr	r3, [r4, #0]
 80193b2:	079b      	lsls	r3, r3, #30
 80193b4:	d413      	bmi.n	80193de <_printf_i+0x23a>
 80193b6:	68e0      	ldr	r0, [r4, #12]
 80193b8:	9b03      	ldr	r3, [sp, #12]
 80193ba:	4298      	cmp	r0, r3
 80193bc:	bfb8      	it	lt
 80193be:	4618      	movlt	r0, r3
 80193c0:	e7a4      	b.n	801930c <_printf_i+0x168>
 80193c2:	2301      	movs	r3, #1
 80193c4:	4632      	mov	r2, r6
 80193c6:	4649      	mov	r1, r9
 80193c8:	4640      	mov	r0, r8
 80193ca:	47d0      	blx	sl
 80193cc:	3001      	adds	r0, #1
 80193ce:	d09b      	beq.n	8019308 <_printf_i+0x164>
 80193d0:	3501      	adds	r5, #1
 80193d2:	68e3      	ldr	r3, [r4, #12]
 80193d4:	9903      	ldr	r1, [sp, #12]
 80193d6:	1a5b      	subs	r3, r3, r1
 80193d8:	42ab      	cmp	r3, r5
 80193da:	dcf2      	bgt.n	80193c2 <_printf_i+0x21e>
 80193dc:	e7eb      	b.n	80193b6 <_printf_i+0x212>
 80193de:	2500      	movs	r5, #0
 80193e0:	f104 0619 	add.w	r6, r4, #25
 80193e4:	e7f5      	b.n	80193d2 <_printf_i+0x22e>
 80193e6:	bf00      	nop
 80193e8:	0801d971 	.word	0x0801d971
 80193ec:	0801d982 	.word	0x0801d982

080193f0 <_sbrk_r>:
 80193f0:	b538      	push	{r3, r4, r5, lr}
 80193f2:	4d06      	ldr	r5, [pc, #24]	; (801940c <_sbrk_r+0x1c>)
 80193f4:	2300      	movs	r3, #0
 80193f6:	4604      	mov	r4, r0
 80193f8:	4608      	mov	r0, r1
 80193fa:	602b      	str	r3, [r5, #0]
 80193fc:	f7e7 ff72 	bl	80012e4 <_sbrk>
 8019400:	1c43      	adds	r3, r0, #1
 8019402:	d102      	bne.n	801940a <_sbrk_r+0x1a>
 8019404:	682b      	ldr	r3, [r5, #0]
 8019406:	b103      	cbz	r3, 801940a <_sbrk_r+0x1a>
 8019408:	6023      	str	r3, [r4, #0]
 801940a:	bd38      	pop	{r3, r4, r5, pc}
 801940c:	2000d3a8 	.word	0x2000d3a8

08019410 <__sread>:
 8019410:	b510      	push	{r4, lr}
 8019412:	460c      	mov	r4, r1
 8019414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019418:	f000 fa9e 	bl	8019958 <_read_r>
 801941c:	2800      	cmp	r0, #0
 801941e:	bfab      	itete	ge
 8019420:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019422:	89a3      	ldrhlt	r3, [r4, #12]
 8019424:	181b      	addge	r3, r3, r0
 8019426:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801942a:	bfac      	ite	ge
 801942c:	6563      	strge	r3, [r4, #84]	; 0x54
 801942e:	81a3      	strhlt	r3, [r4, #12]
 8019430:	bd10      	pop	{r4, pc}

08019432 <__swrite>:
 8019432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019436:	461f      	mov	r7, r3
 8019438:	898b      	ldrh	r3, [r1, #12]
 801943a:	05db      	lsls	r3, r3, #23
 801943c:	4605      	mov	r5, r0
 801943e:	460c      	mov	r4, r1
 8019440:	4616      	mov	r6, r2
 8019442:	d505      	bpl.n	8019450 <__swrite+0x1e>
 8019444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019448:	2302      	movs	r3, #2
 801944a:	2200      	movs	r2, #0
 801944c:	f000 f9d0 	bl	80197f0 <_lseek_r>
 8019450:	89a3      	ldrh	r3, [r4, #12]
 8019452:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019456:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801945a:	81a3      	strh	r3, [r4, #12]
 801945c:	4632      	mov	r2, r6
 801945e:	463b      	mov	r3, r7
 8019460:	4628      	mov	r0, r5
 8019462:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019466:	f000 b869 	b.w	801953c <_write_r>

0801946a <__sseek>:
 801946a:	b510      	push	{r4, lr}
 801946c:	460c      	mov	r4, r1
 801946e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019472:	f000 f9bd 	bl	80197f0 <_lseek_r>
 8019476:	1c43      	adds	r3, r0, #1
 8019478:	89a3      	ldrh	r3, [r4, #12]
 801947a:	bf15      	itete	ne
 801947c:	6560      	strne	r0, [r4, #84]	; 0x54
 801947e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019482:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019486:	81a3      	strheq	r3, [r4, #12]
 8019488:	bf18      	it	ne
 801948a:	81a3      	strhne	r3, [r4, #12]
 801948c:	bd10      	pop	{r4, pc}

0801948e <__sclose>:
 801948e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019492:	f000 b8db 	b.w	801964c <_close_r>
	...

08019498 <__swbuf_r>:
 8019498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801949a:	460e      	mov	r6, r1
 801949c:	4614      	mov	r4, r2
 801949e:	4605      	mov	r5, r0
 80194a0:	b118      	cbz	r0, 80194aa <__swbuf_r+0x12>
 80194a2:	6983      	ldr	r3, [r0, #24]
 80194a4:	b90b      	cbnz	r3, 80194aa <__swbuf_r+0x12>
 80194a6:	f7ff f9bf 	bl	8018828 <__sinit>
 80194aa:	4b21      	ldr	r3, [pc, #132]	; (8019530 <__swbuf_r+0x98>)
 80194ac:	429c      	cmp	r4, r3
 80194ae:	d12b      	bne.n	8019508 <__swbuf_r+0x70>
 80194b0:	686c      	ldr	r4, [r5, #4]
 80194b2:	69a3      	ldr	r3, [r4, #24]
 80194b4:	60a3      	str	r3, [r4, #8]
 80194b6:	89a3      	ldrh	r3, [r4, #12]
 80194b8:	071a      	lsls	r2, r3, #28
 80194ba:	d52f      	bpl.n	801951c <__swbuf_r+0x84>
 80194bc:	6923      	ldr	r3, [r4, #16]
 80194be:	b36b      	cbz	r3, 801951c <__swbuf_r+0x84>
 80194c0:	6923      	ldr	r3, [r4, #16]
 80194c2:	6820      	ldr	r0, [r4, #0]
 80194c4:	1ac0      	subs	r0, r0, r3
 80194c6:	6963      	ldr	r3, [r4, #20]
 80194c8:	b2f6      	uxtb	r6, r6
 80194ca:	4283      	cmp	r3, r0
 80194cc:	4637      	mov	r7, r6
 80194ce:	dc04      	bgt.n	80194da <__swbuf_r+0x42>
 80194d0:	4621      	mov	r1, r4
 80194d2:	4628      	mov	r0, r5
 80194d4:	f000 f950 	bl	8019778 <_fflush_r>
 80194d8:	bb30      	cbnz	r0, 8019528 <__swbuf_r+0x90>
 80194da:	68a3      	ldr	r3, [r4, #8]
 80194dc:	3b01      	subs	r3, #1
 80194de:	60a3      	str	r3, [r4, #8]
 80194e0:	6823      	ldr	r3, [r4, #0]
 80194e2:	1c5a      	adds	r2, r3, #1
 80194e4:	6022      	str	r2, [r4, #0]
 80194e6:	701e      	strb	r6, [r3, #0]
 80194e8:	6963      	ldr	r3, [r4, #20]
 80194ea:	3001      	adds	r0, #1
 80194ec:	4283      	cmp	r3, r0
 80194ee:	d004      	beq.n	80194fa <__swbuf_r+0x62>
 80194f0:	89a3      	ldrh	r3, [r4, #12]
 80194f2:	07db      	lsls	r3, r3, #31
 80194f4:	d506      	bpl.n	8019504 <__swbuf_r+0x6c>
 80194f6:	2e0a      	cmp	r6, #10
 80194f8:	d104      	bne.n	8019504 <__swbuf_r+0x6c>
 80194fa:	4621      	mov	r1, r4
 80194fc:	4628      	mov	r0, r5
 80194fe:	f000 f93b 	bl	8019778 <_fflush_r>
 8019502:	b988      	cbnz	r0, 8019528 <__swbuf_r+0x90>
 8019504:	4638      	mov	r0, r7
 8019506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019508:	4b0a      	ldr	r3, [pc, #40]	; (8019534 <__swbuf_r+0x9c>)
 801950a:	429c      	cmp	r4, r3
 801950c:	d101      	bne.n	8019512 <__swbuf_r+0x7a>
 801950e:	68ac      	ldr	r4, [r5, #8]
 8019510:	e7cf      	b.n	80194b2 <__swbuf_r+0x1a>
 8019512:	4b09      	ldr	r3, [pc, #36]	; (8019538 <__swbuf_r+0xa0>)
 8019514:	429c      	cmp	r4, r3
 8019516:	bf08      	it	eq
 8019518:	68ec      	ldreq	r4, [r5, #12]
 801951a:	e7ca      	b.n	80194b2 <__swbuf_r+0x1a>
 801951c:	4621      	mov	r1, r4
 801951e:	4628      	mov	r0, r5
 8019520:	f000 f81e 	bl	8019560 <__swsetup_r>
 8019524:	2800      	cmp	r0, #0
 8019526:	d0cb      	beq.n	80194c0 <__swbuf_r+0x28>
 8019528:	f04f 37ff 	mov.w	r7, #4294967295
 801952c:	e7ea      	b.n	8019504 <__swbuf_r+0x6c>
 801952e:	bf00      	nop
 8019530:	0801d920 	.word	0x0801d920
 8019534:	0801d940 	.word	0x0801d940
 8019538:	0801d900 	.word	0x0801d900

0801953c <_write_r>:
 801953c:	b538      	push	{r3, r4, r5, lr}
 801953e:	4d07      	ldr	r5, [pc, #28]	; (801955c <_write_r+0x20>)
 8019540:	4604      	mov	r4, r0
 8019542:	4608      	mov	r0, r1
 8019544:	4611      	mov	r1, r2
 8019546:	2200      	movs	r2, #0
 8019548:	602a      	str	r2, [r5, #0]
 801954a:	461a      	mov	r2, r3
 801954c:	f7e7 fe79 	bl	8001242 <_write>
 8019550:	1c43      	adds	r3, r0, #1
 8019552:	d102      	bne.n	801955a <_write_r+0x1e>
 8019554:	682b      	ldr	r3, [r5, #0]
 8019556:	b103      	cbz	r3, 801955a <_write_r+0x1e>
 8019558:	6023      	str	r3, [r4, #0]
 801955a:	bd38      	pop	{r3, r4, r5, pc}
 801955c:	2000d3a8 	.word	0x2000d3a8

08019560 <__swsetup_r>:
 8019560:	4b32      	ldr	r3, [pc, #200]	; (801962c <__swsetup_r+0xcc>)
 8019562:	b570      	push	{r4, r5, r6, lr}
 8019564:	681d      	ldr	r5, [r3, #0]
 8019566:	4606      	mov	r6, r0
 8019568:	460c      	mov	r4, r1
 801956a:	b125      	cbz	r5, 8019576 <__swsetup_r+0x16>
 801956c:	69ab      	ldr	r3, [r5, #24]
 801956e:	b913      	cbnz	r3, 8019576 <__swsetup_r+0x16>
 8019570:	4628      	mov	r0, r5
 8019572:	f7ff f959 	bl	8018828 <__sinit>
 8019576:	4b2e      	ldr	r3, [pc, #184]	; (8019630 <__swsetup_r+0xd0>)
 8019578:	429c      	cmp	r4, r3
 801957a:	d10f      	bne.n	801959c <__swsetup_r+0x3c>
 801957c:	686c      	ldr	r4, [r5, #4]
 801957e:	89a3      	ldrh	r3, [r4, #12]
 8019580:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019584:	0719      	lsls	r1, r3, #28
 8019586:	d42c      	bmi.n	80195e2 <__swsetup_r+0x82>
 8019588:	06dd      	lsls	r5, r3, #27
 801958a:	d411      	bmi.n	80195b0 <__swsetup_r+0x50>
 801958c:	2309      	movs	r3, #9
 801958e:	6033      	str	r3, [r6, #0]
 8019590:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019594:	81a3      	strh	r3, [r4, #12]
 8019596:	f04f 30ff 	mov.w	r0, #4294967295
 801959a:	e03e      	b.n	801961a <__swsetup_r+0xba>
 801959c:	4b25      	ldr	r3, [pc, #148]	; (8019634 <__swsetup_r+0xd4>)
 801959e:	429c      	cmp	r4, r3
 80195a0:	d101      	bne.n	80195a6 <__swsetup_r+0x46>
 80195a2:	68ac      	ldr	r4, [r5, #8]
 80195a4:	e7eb      	b.n	801957e <__swsetup_r+0x1e>
 80195a6:	4b24      	ldr	r3, [pc, #144]	; (8019638 <__swsetup_r+0xd8>)
 80195a8:	429c      	cmp	r4, r3
 80195aa:	bf08      	it	eq
 80195ac:	68ec      	ldreq	r4, [r5, #12]
 80195ae:	e7e6      	b.n	801957e <__swsetup_r+0x1e>
 80195b0:	0758      	lsls	r0, r3, #29
 80195b2:	d512      	bpl.n	80195da <__swsetup_r+0x7a>
 80195b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80195b6:	b141      	cbz	r1, 80195ca <__swsetup_r+0x6a>
 80195b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80195bc:	4299      	cmp	r1, r3
 80195be:	d002      	beq.n	80195c6 <__swsetup_r+0x66>
 80195c0:	4630      	mov	r0, r6
 80195c2:	f7ff f9eb 	bl	801899c <_free_r>
 80195c6:	2300      	movs	r3, #0
 80195c8:	6363      	str	r3, [r4, #52]	; 0x34
 80195ca:	89a3      	ldrh	r3, [r4, #12]
 80195cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80195d0:	81a3      	strh	r3, [r4, #12]
 80195d2:	2300      	movs	r3, #0
 80195d4:	6063      	str	r3, [r4, #4]
 80195d6:	6923      	ldr	r3, [r4, #16]
 80195d8:	6023      	str	r3, [r4, #0]
 80195da:	89a3      	ldrh	r3, [r4, #12]
 80195dc:	f043 0308 	orr.w	r3, r3, #8
 80195e0:	81a3      	strh	r3, [r4, #12]
 80195e2:	6923      	ldr	r3, [r4, #16]
 80195e4:	b94b      	cbnz	r3, 80195fa <__swsetup_r+0x9a>
 80195e6:	89a3      	ldrh	r3, [r4, #12]
 80195e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80195ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80195f0:	d003      	beq.n	80195fa <__swsetup_r+0x9a>
 80195f2:	4621      	mov	r1, r4
 80195f4:	4630      	mov	r0, r6
 80195f6:	f000 f933 	bl	8019860 <__smakebuf_r>
 80195fa:	89a0      	ldrh	r0, [r4, #12]
 80195fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019600:	f010 0301 	ands.w	r3, r0, #1
 8019604:	d00a      	beq.n	801961c <__swsetup_r+0xbc>
 8019606:	2300      	movs	r3, #0
 8019608:	60a3      	str	r3, [r4, #8]
 801960a:	6963      	ldr	r3, [r4, #20]
 801960c:	425b      	negs	r3, r3
 801960e:	61a3      	str	r3, [r4, #24]
 8019610:	6923      	ldr	r3, [r4, #16]
 8019612:	b943      	cbnz	r3, 8019626 <__swsetup_r+0xc6>
 8019614:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019618:	d1ba      	bne.n	8019590 <__swsetup_r+0x30>
 801961a:	bd70      	pop	{r4, r5, r6, pc}
 801961c:	0781      	lsls	r1, r0, #30
 801961e:	bf58      	it	pl
 8019620:	6963      	ldrpl	r3, [r4, #20]
 8019622:	60a3      	str	r3, [r4, #8]
 8019624:	e7f4      	b.n	8019610 <__swsetup_r+0xb0>
 8019626:	2000      	movs	r0, #0
 8019628:	e7f7      	b.n	801961a <__swsetup_r+0xba>
 801962a:	bf00      	nop
 801962c:	2000001c 	.word	0x2000001c
 8019630:	0801d920 	.word	0x0801d920
 8019634:	0801d940 	.word	0x0801d940
 8019638:	0801d900 	.word	0x0801d900

0801963c <abort>:
 801963c:	b508      	push	{r3, lr}
 801963e:	2006      	movs	r0, #6
 8019640:	f000 f9c4 	bl	80199cc <raise>
 8019644:	2001      	movs	r0, #1
 8019646:	f7e7 fdd5 	bl	80011f4 <_exit>
	...

0801964c <_close_r>:
 801964c:	b538      	push	{r3, r4, r5, lr}
 801964e:	4d06      	ldr	r5, [pc, #24]	; (8019668 <_close_r+0x1c>)
 8019650:	2300      	movs	r3, #0
 8019652:	4604      	mov	r4, r0
 8019654:	4608      	mov	r0, r1
 8019656:	602b      	str	r3, [r5, #0]
 8019658:	f7e7 fe0f 	bl	800127a <_close>
 801965c:	1c43      	adds	r3, r0, #1
 801965e:	d102      	bne.n	8019666 <_close_r+0x1a>
 8019660:	682b      	ldr	r3, [r5, #0]
 8019662:	b103      	cbz	r3, 8019666 <_close_r+0x1a>
 8019664:	6023      	str	r3, [r4, #0]
 8019666:	bd38      	pop	{r3, r4, r5, pc}
 8019668:	2000d3a8 	.word	0x2000d3a8

0801966c <__sflush_r>:
 801966c:	898a      	ldrh	r2, [r1, #12]
 801966e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019672:	4605      	mov	r5, r0
 8019674:	0710      	lsls	r0, r2, #28
 8019676:	460c      	mov	r4, r1
 8019678:	d458      	bmi.n	801972c <__sflush_r+0xc0>
 801967a:	684b      	ldr	r3, [r1, #4]
 801967c:	2b00      	cmp	r3, #0
 801967e:	dc05      	bgt.n	801968c <__sflush_r+0x20>
 8019680:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019682:	2b00      	cmp	r3, #0
 8019684:	dc02      	bgt.n	801968c <__sflush_r+0x20>
 8019686:	2000      	movs	r0, #0
 8019688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801968c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801968e:	2e00      	cmp	r6, #0
 8019690:	d0f9      	beq.n	8019686 <__sflush_r+0x1a>
 8019692:	2300      	movs	r3, #0
 8019694:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019698:	682f      	ldr	r7, [r5, #0]
 801969a:	602b      	str	r3, [r5, #0]
 801969c:	d032      	beq.n	8019704 <__sflush_r+0x98>
 801969e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80196a0:	89a3      	ldrh	r3, [r4, #12]
 80196a2:	075a      	lsls	r2, r3, #29
 80196a4:	d505      	bpl.n	80196b2 <__sflush_r+0x46>
 80196a6:	6863      	ldr	r3, [r4, #4]
 80196a8:	1ac0      	subs	r0, r0, r3
 80196aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80196ac:	b10b      	cbz	r3, 80196b2 <__sflush_r+0x46>
 80196ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80196b0:	1ac0      	subs	r0, r0, r3
 80196b2:	2300      	movs	r3, #0
 80196b4:	4602      	mov	r2, r0
 80196b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80196b8:	6a21      	ldr	r1, [r4, #32]
 80196ba:	4628      	mov	r0, r5
 80196bc:	47b0      	blx	r6
 80196be:	1c43      	adds	r3, r0, #1
 80196c0:	89a3      	ldrh	r3, [r4, #12]
 80196c2:	d106      	bne.n	80196d2 <__sflush_r+0x66>
 80196c4:	6829      	ldr	r1, [r5, #0]
 80196c6:	291d      	cmp	r1, #29
 80196c8:	d82c      	bhi.n	8019724 <__sflush_r+0xb8>
 80196ca:	4a2a      	ldr	r2, [pc, #168]	; (8019774 <__sflush_r+0x108>)
 80196cc:	40ca      	lsrs	r2, r1
 80196ce:	07d6      	lsls	r6, r2, #31
 80196d0:	d528      	bpl.n	8019724 <__sflush_r+0xb8>
 80196d2:	2200      	movs	r2, #0
 80196d4:	6062      	str	r2, [r4, #4]
 80196d6:	04d9      	lsls	r1, r3, #19
 80196d8:	6922      	ldr	r2, [r4, #16]
 80196da:	6022      	str	r2, [r4, #0]
 80196dc:	d504      	bpl.n	80196e8 <__sflush_r+0x7c>
 80196de:	1c42      	adds	r2, r0, #1
 80196e0:	d101      	bne.n	80196e6 <__sflush_r+0x7a>
 80196e2:	682b      	ldr	r3, [r5, #0]
 80196e4:	b903      	cbnz	r3, 80196e8 <__sflush_r+0x7c>
 80196e6:	6560      	str	r0, [r4, #84]	; 0x54
 80196e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80196ea:	602f      	str	r7, [r5, #0]
 80196ec:	2900      	cmp	r1, #0
 80196ee:	d0ca      	beq.n	8019686 <__sflush_r+0x1a>
 80196f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80196f4:	4299      	cmp	r1, r3
 80196f6:	d002      	beq.n	80196fe <__sflush_r+0x92>
 80196f8:	4628      	mov	r0, r5
 80196fa:	f7ff f94f 	bl	801899c <_free_r>
 80196fe:	2000      	movs	r0, #0
 8019700:	6360      	str	r0, [r4, #52]	; 0x34
 8019702:	e7c1      	b.n	8019688 <__sflush_r+0x1c>
 8019704:	6a21      	ldr	r1, [r4, #32]
 8019706:	2301      	movs	r3, #1
 8019708:	4628      	mov	r0, r5
 801970a:	47b0      	blx	r6
 801970c:	1c41      	adds	r1, r0, #1
 801970e:	d1c7      	bne.n	80196a0 <__sflush_r+0x34>
 8019710:	682b      	ldr	r3, [r5, #0]
 8019712:	2b00      	cmp	r3, #0
 8019714:	d0c4      	beq.n	80196a0 <__sflush_r+0x34>
 8019716:	2b1d      	cmp	r3, #29
 8019718:	d001      	beq.n	801971e <__sflush_r+0xb2>
 801971a:	2b16      	cmp	r3, #22
 801971c:	d101      	bne.n	8019722 <__sflush_r+0xb6>
 801971e:	602f      	str	r7, [r5, #0]
 8019720:	e7b1      	b.n	8019686 <__sflush_r+0x1a>
 8019722:	89a3      	ldrh	r3, [r4, #12]
 8019724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019728:	81a3      	strh	r3, [r4, #12]
 801972a:	e7ad      	b.n	8019688 <__sflush_r+0x1c>
 801972c:	690f      	ldr	r7, [r1, #16]
 801972e:	2f00      	cmp	r7, #0
 8019730:	d0a9      	beq.n	8019686 <__sflush_r+0x1a>
 8019732:	0793      	lsls	r3, r2, #30
 8019734:	680e      	ldr	r6, [r1, #0]
 8019736:	bf08      	it	eq
 8019738:	694b      	ldreq	r3, [r1, #20]
 801973a:	600f      	str	r7, [r1, #0]
 801973c:	bf18      	it	ne
 801973e:	2300      	movne	r3, #0
 8019740:	eba6 0807 	sub.w	r8, r6, r7
 8019744:	608b      	str	r3, [r1, #8]
 8019746:	f1b8 0f00 	cmp.w	r8, #0
 801974a:	dd9c      	ble.n	8019686 <__sflush_r+0x1a>
 801974c:	6a21      	ldr	r1, [r4, #32]
 801974e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019750:	4643      	mov	r3, r8
 8019752:	463a      	mov	r2, r7
 8019754:	4628      	mov	r0, r5
 8019756:	47b0      	blx	r6
 8019758:	2800      	cmp	r0, #0
 801975a:	dc06      	bgt.n	801976a <__sflush_r+0xfe>
 801975c:	89a3      	ldrh	r3, [r4, #12]
 801975e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019762:	81a3      	strh	r3, [r4, #12]
 8019764:	f04f 30ff 	mov.w	r0, #4294967295
 8019768:	e78e      	b.n	8019688 <__sflush_r+0x1c>
 801976a:	4407      	add	r7, r0
 801976c:	eba8 0800 	sub.w	r8, r8, r0
 8019770:	e7e9      	b.n	8019746 <__sflush_r+0xda>
 8019772:	bf00      	nop
 8019774:	20400001 	.word	0x20400001

08019778 <_fflush_r>:
 8019778:	b538      	push	{r3, r4, r5, lr}
 801977a:	690b      	ldr	r3, [r1, #16]
 801977c:	4605      	mov	r5, r0
 801977e:	460c      	mov	r4, r1
 8019780:	b913      	cbnz	r3, 8019788 <_fflush_r+0x10>
 8019782:	2500      	movs	r5, #0
 8019784:	4628      	mov	r0, r5
 8019786:	bd38      	pop	{r3, r4, r5, pc}
 8019788:	b118      	cbz	r0, 8019792 <_fflush_r+0x1a>
 801978a:	6983      	ldr	r3, [r0, #24]
 801978c:	b90b      	cbnz	r3, 8019792 <_fflush_r+0x1a>
 801978e:	f7ff f84b 	bl	8018828 <__sinit>
 8019792:	4b14      	ldr	r3, [pc, #80]	; (80197e4 <_fflush_r+0x6c>)
 8019794:	429c      	cmp	r4, r3
 8019796:	d11b      	bne.n	80197d0 <_fflush_r+0x58>
 8019798:	686c      	ldr	r4, [r5, #4]
 801979a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801979e:	2b00      	cmp	r3, #0
 80197a0:	d0ef      	beq.n	8019782 <_fflush_r+0xa>
 80197a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80197a4:	07d0      	lsls	r0, r2, #31
 80197a6:	d404      	bmi.n	80197b2 <_fflush_r+0x3a>
 80197a8:	0599      	lsls	r1, r3, #22
 80197aa:	d402      	bmi.n	80197b2 <_fflush_r+0x3a>
 80197ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80197ae:	f7ff f8eb 	bl	8018988 <__retarget_lock_acquire_recursive>
 80197b2:	4628      	mov	r0, r5
 80197b4:	4621      	mov	r1, r4
 80197b6:	f7ff ff59 	bl	801966c <__sflush_r>
 80197ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80197bc:	07da      	lsls	r2, r3, #31
 80197be:	4605      	mov	r5, r0
 80197c0:	d4e0      	bmi.n	8019784 <_fflush_r+0xc>
 80197c2:	89a3      	ldrh	r3, [r4, #12]
 80197c4:	059b      	lsls	r3, r3, #22
 80197c6:	d4dd      	bmi.n	8019784 <_fflush_r+0xc>
 80197c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80197ca:	f7ff f8de 	bl	801898a <__retarget_lock_release_recursive>
 80197ce:	e7d9      	b.n	8019784 <_fflush_r+0xc>
 80197d0:	4b05      	ldr	r3, [pc, #20]	; (80197e8 <_fflush_r+0x70>)
 80197d2:	429c      	cmp	r4, r3
 80197d4:	d101      	bne.n	80197da <_fflush_r+0x62>
 80197d6:	68ac      	ldr	r4, [r5, #8]
 80197d8:	e7df      	b.n	801979a <_fflush_r+0x22>
 80197da:	4b04      	ldr	r3, [pc, #16]	; (80197ec <_fflush_r+0x74>)
 80197dc:	429c      	cmp	r4, r3
 80197de:	bf08      	it	eq
 80197e0:	68ec      	ldreq	r4, [r5, #12]
 80197e2:	e7da      	b.n	801979a <_fflush_r+0x22>
 80197e4:	0801d920 	.word	0x0801d920
 80197e8:	0801d940 	.word	0x0801d940
 80197ec:	0801d900 	.word	0x0801d900

080197f0 <_lseek_r>:
 80197f0:	b538      	push	{r3, r4, r5, lr}
 80197f2:	4d07      	ldr	r5, [pc, #28]	; (8019810 <_lseek_r+0x20>)
 80197f4:	4604      	mov	r4, r0
 80197f6:	4608      	mov	r0, r1
 80197f8:	4611      	mov	r1, r2
 80197fa:	2200      	movs	r2, #0
 80197fc:	602a      	str	r2, [r5, #0]
 80197fe:	461a      	mov	r2, r3
 8019800:	f7e7 fd62 	bl	80012c8 <_lseek>
 8019804:	1c43      	adds	r3, r0, #1
 8019806:	d102      	bne.n	801980e <_lseek_r+0x1e>
 8019808:	682b      	ldr	r3, [r5, #0]
 801980a:	b103      	cbz	r3, 801980e <_lseek_r+0x1e>
 801980c:	6023      	str	r3, [r4, #0]
 801980e:	bd38      	pop	{r3, r4, r5, pc}
 8019810:	2000d3a8 	.word	0x2000d3a8

08019814 <__swhatbuf_r>:
 8019814:	b570      	push	{r4, r5, r6, lr}
 8019816:	460e      	mov	r6, r1
 8019818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801981c:	2900      	cmp	r1, #0
 801981e:	b096      	sub	sp, #88	; 0x58
 8019820:	4614      	mov	r4, r2
 8019822:	461d      	mov	r5, r3
 8019824:	da08      	bge.n	8019838 <__swhatbuf_r+0x24>
 8019826:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801982a:	2200      	movs	r2, #0
 801982c:	602a      	str	r2, [r5, #0]
 801982e:	061a      	lsls	r2, r3, #24
 8019830:	d410      	bmi.n	8019854 <__swhatbuf_r+0x40>
 8019832:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019836:	e00e      	b.n	8019856 <__swhatbuf_r+0x42>
 8019838:	466a      	mov	r2, sp
 801983a:	f000 f8e3 	bl	8019a04 <_fstat_r>
 801983e:	2800      	cmp	r0, #0
 8019840:	dbf1      	blt.n	8019826 <__swhatbuf_r+0x12>
 8019842:	9a01      	ldr	r2, [sp, #4]
 8019844:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019848:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801984c:	425a      	negs	r2, r3
 801984e:	415a      	adcs	r2, r3
 8019850:	602a      	str	r2, [r5, #0]
 8019852:	e7ee      	b.n	8019832 <__swhatbuf_r+0x1e>
 8019854:	2340      	movs	r3, #64	; 0x40
 8019856:	2000      	movs	r0, #0
 8019858:	6023      	str	r3, [r4, #0]
 801985a:	b016      	add	sp, #88	; 0x58
 801985c:	bd70      	pop	{r4, r5, r6, pc}
	...

08019860 <__smakebuf_r>:
 8019860:	898b      	ldrh	r3, [r1, #12]
 8019862:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019864:	079d      	lsls	r5, r3, #30
 8019866:	4606      	mov	r6, r0
 8019868:	460c      	mov	r4, r1
 801986a:	d507      	bpl.n	801987c <__smakebuf_r+0x1c>
 801986c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019870:	6023      	str	r3, [r4, #0]
 8019872:	6123      	str	r3, [r4, #16]
 8019874:	2301      	movs	r3, #1
 8019876:	6163      	str	r3, [r4, #20]
 8019878:	b002      	add	sp, #8
 801987a:	bd70      	pop	{r4, r5, r6, pc}
 801987c:	ab01      	add	r3, sp, #4
 801987e:	466a      	mov	r2, sp
 8019880:	f7ff ffc8 	bl	8019814 <__swhatbuf_r>
 8019884:	9900      	ldr	r1, [sp, #0]
 8019886:	4605      	mov	r5, r0
 8019888:	4630      	mov	r0, r6
 801988a:	f7ff f8f3 	bl	8018a74 <_malloc_r>
 801988e:	b948      	cbnz	r0, 80198a4 <__smakebuf_r+0x44>
 8019890:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019894:	059a      	lsls	r2, r3, #22
 8019896:	d4ef      	bmi.n	8019878 <__smakebuf_r+0x18>
 8019898:	f023 0303 	bic.w	r3, r3, #3
 801989c:	f043 0302 	orr.w	r3, r3, #2
 80198a0:	81a3      	strh	r3, [r4, #12]
 80198a2:	e7e3      	b.n	801986c <__smakebuf_r+0xc>
 80198a4:	4b0d      	ldr	r3, [pc, #52]	; (80198dc <__smakebuf_r+0x7c>)
 80198a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80198a8:	89a3      	ldrh	r3, [r4, #12]
 80198aa:	6020      	str	r0, [r4, #0]
 80198ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80198b0:	81a3      	strh	r3, [r4, #12]
 80198b2:	9b00      	ldr	r3, [sp, #0]
 80198b4:	6163      	str	r3, [r4, #20]
 80198b6:	9b01      	ldr	r3, [sp, #4]
 80198b8:	6120      	str	r0, [r4, #16]
 80198ba:	b15b      	cbz	r3, 80198d4 <__smakebuf_r+0x74>
 80198bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80198c0:	4630      	mov	r0, r6
 80198c2:	f000 f8b1 	bl	8019a28 <_isatty_r>
 80198c6:	b128      	cbz	r0, 80198d4 <__smakebuf_r+0x74>
 80198c8:	89a3      	ldrh	r3, [r4, #12]
 80198ca:	f023 0303 	bic.w	r3, r3, #3
 80198ce:	f043 0301 	orr.w	r3, r3, #1
 80198d2:	81a3      	strh	r3, [r4, #12]
 80198d4:	89a0      	ldrh	r0, [r4, #12]
 80198d6:	4305      	orrs	r5, r0
 80198d8:	81a5      	strh	r5, [r4, #12]
 80198da:	e7cd      	b.n	8019878 <__smakebuf_r+0x18>
 80198dc:	080187c1 	.word	0x080187c1

080198e0 <__malloc_lock>:
 80198e0:	4801      	ldr	r0, [pc, #4]	; (80198e8 <__malloc_lock+0x8>)
 80198e2:	f7ff b851 	b.w	8018988 <__retarget_lock_acquire_recursive>
 80198e6:	bf00      	nop
 80198e8:	2000d3b0 	.word	0x2000d3b0

080198ec <__malloc_unlock>:
 80198ec:	4801      	ldr	r0, [pc, #4]	; (80198f4 <__malloc_unlock+0x8>)
 80198ee:	f7ff b84c 	b.w	801898a <__retarget_lock_release_recursive>
 80198f2:	bf00      	nop
 80198f4:	2000d3b0 	.word	0x2000d3b0

080198f8 <_realloc_r>:
 80198f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80198fc:	4680      	mov	r8, r0
 80198fe:	4614      	mov	r4, r2
 8019900:	460e      	mov	r6, r1
 8019902:	b921      	cbnz	r1, 801990e <_realloc_r+0x16>
 8019904:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019908:	4611      	mov	r1, r2
 801990a:	f7ff b8b3 	b.w	8018a74 <_malloc_r>
 801990e:	b92a      	cbnz	r2, 801991c <_realloc_r+0x24>
 8019910:	f7ff f844 	bl	801899c <_free_r>
 8019914:	4625      	mov	r5, r4
 8019916:	4628      	mov	r0, r5
 8019918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801991c:	f000 f894 	bl	8019a48 <_malloc_usable_size_r>
 8019920:	4284      	cmp	r4, r0
 8019922:	4607      	mov	r7, r0
 8019924:	d802      	bhi.n	801992c <_realloc_r+0x34>
 8019926:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801992a:	d812      	bhi.n	8019952 <_realloc_r+0x5a>
 801992c:	4621      	mov	r1, r4
 801992e:	4640      	mov	r0, r8
 8019930:	f7ff f8a0 	bl	8018a74 <_malloc_r>
 8019934:	4605      	mov	r5, r0
 8019936:	2800      	cmp	r0, #0
 8019938:	d0ed      	beq.n	8019916 <_realloc_r+0x1e>
 801993a:	42bc      	cmp	r4, r7
 801993c:	4622      	mov	r2, r4
 801993e:	4631      	mov	r1, r6
 8019940:	bf28      	it	cs
 8019942:	463a      	movcs	r2, r7
 8019944:	f7fe fe54 	bl	80185f0 <memcpy>
 8019948:	4631      	mov	r1, r6
 801994a:	4640      	mov	r0, r8
 801994c:	f7ff f826 	bl	801899c <_free_r>
 8019950:	e7e1      	b.n	8019916 <_realloc_r+0x1e>
 8019952:	4635      	mov	r5, r6
 8019954:	e7df      	b.n	8019916 <_realloc_r+0x1e>
	...

08019958 <_read_r>:
 8019958:	b538      	push	{r3, r4, r5, lr}
 801995a:	4d07      	ldr	r5, [pc, #28]	; (8019978 <_read_r+0x20>)
 801995c:	4604      	mov	r4, r0
 801995e:	4608      	mov	r0, r1
 8019960:	4611      	mov	r1, r2
 8019962:	2200      	movs	r2, #0
 8019964:	602a      	str	r2, [r5, #0]
 8019966:	461a      	mov	r2, r3
 8019968:	f7e7 fc4e 	bl	8001208 <_read>
 801996c:	1c43      	adds	r3, r0, #1
 801996e:	d102      	bne.n	8019976 <_read_r+0x1e>
 8019970:	682b      	ldr	r3, [r5, #0]
 8019972:	b103      	cbz	r3, 8019976 <_read_r+0x1e>
 8019974:	6023      	str	r3, [r4, #0]
 8019976:	bd38      	pop	{r3, r4, r5, pc}
 8019978:	2000d3a8 	.word	0x2000d3a8

0801997c <_raise_r>:
 801997c:	291f      	cmp	r1, #31
 801997e:	b538      	push	{r3, r4, r5, lr}
 8019980:	4604      	mov	r4, r0
 8019982:	460d      	mov	r5, r1
 8019984:	d904      	bls.n	8019990 <_raise_r+0x14>
 8019986:	2316      	movs	r3, #22
 8019988:	6003      	str	r3, [r0, #0]
 801998a:	f04f 30ff 	mov.w	r0, #4294967295
 801998e:	bd38      	pop	{r3, r4, r5, pc}
 8019990:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8019992:	b112      	cbz	r2, 801999a <_raise_r+0x1e>
 8019994:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019998:	b94b      	cbnz	r3, 80199ae <_raise_r+0x32>
 801999a:	4620      	mov	r0, r4
 801999c:	f000 f830 	bl	8019a00 <_getpid_r>
 80199a0:	462a      	mov	r2, r5
 80199a2:	4601      	mov	r1, r0
 80199a4:	4620      	mov	r0, r4
 80199a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80199aa:	f000 b817 	b.w	80199dc <_kill_r>
 80199ae:	2b01      	cmp	r3, #1
 80199b0:	d00a      	beq.n	80199c8 <_raise_r+0x4c>
 80199b2:	1c59      	adds	r1, r3, #1
 80199b4:	d103      	bne.n	80199be <_raise_r+0x42>
 80199b6:	2316      	movs	r3, #22
 80199b8:	6003      	str	r3, [r0, #0]
 80199ba:	2001      	movs	r0, #1
 80199bc:	e7e7      	b.n	801998e <_raise_r+0x12>
 80199be:	2400      	movs	r4, #0
 80199c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80199c4:	4628      	mov	r0, r5
 80199c6:	4798      	blx	r3
 80199c8:	2000      	movs	r0, #0
 80199ca:	e7e0      	b.n	801998e <_raise_r+0x12>

080199cc <raise>:
 80199cc:	4b02      	ldr	r3, [pc, #8]	; (80199d8 <raise+0xc>)
 80199ce:	4601      	mov	r1, r0
 80199d0:	6818      	ldr	r0, [r3, #0]
 80199d2:	f7ff bfd3 	b.w	801997c <_raise_r>
 80199d6:	bf00      	nop
 80199d8:	2000001c 	.word	0x2000001c

080199dc <_kill_r>:
 80199dc:	b538      	push	{r3, r4, r5, lr}
 80199de:	4d07      	ldr	r5, [pc, #28]	; (80199fc <_kill_r+0x20>)
 80199e0:	2300      	movs	r3, #0
 80199e2:	4604      	mov	r4, r0
 80199e4:	4608      	mov	r0, r1
 80199e6:	4611      	mov	r1, r2
 80199e8:	602b      	str	r3, [r5, #0]
 80199ea:	f7e7 fbf1 	bl	80011d0 <_kill>
 80199ee:	1c43      	adds	r3, r0, #1
 80199f0:	d102      	bne.n	80199f8 <_kill_r+0x1c>
 80199f2:	682b      	ldr	r3, [r5, #0]
 80199f4:	b103      	cbz	r3, 80199f8 <_kill_r+0x1c>
 80199f6:	6023      	str	r3, [r4, #0]
 80199f8:	bd38      	pop	{r3, r4, r5, pc}
 80199fa:	bf00      	nop
 80199fc:	2000d3a8 	.word	0x2000d3a8

08019a00 <_getpid_r>:
 8019a00:	f7e7 bbde 	b.w	80011c0 <_getpid>

08019a04 <_fstat_r>:
 8019a04:	b538      	push	{r3, r4, r5, lr}
 8019a06:	4d07      	ldr	r5, [pc, #28]	; (8019a24 <_fstat_r+0x20>)
 8019a08:	2300      	movs	r3, #0
 8019a0a:	4604      	mov	r4, r0
 8019a0c:	4608      	mov	r0, r1
 8019a0e:	4611      	mov	r1, r2
 8019a10:	602b      	str	r3, [r5, #0]
 8019a12:	f7e7 fc3e 	bl	8001292 <_fstat>
 8019a16:	1c43      	adds	r3, r0, #1
 8019a18:	d102      	bne.n	8019a20 <_fstat_r+0x1c>
 8019a1a:	682b      	ldr	r3, [r5, #0]
 8019a1c:	b103      	cbz	r3, 8019a20 <_fstat_r+0x1c>
 8019a1e:	6023      	str	r3, [r4, #0]
 8019a20:	bd38      	pop	{r3, r4, r5, pc}
 8019a22:	bf00      	nop
 8019a24:	2000d3a8 	.word	0x2000d3a8

08019a28 <_isatty_r>:
 8019a28:	b538      	push	{r3, r4, r5, lr}
 8019a2a:	4d06      	ldr	r5, [pc, #24]	; (8019a44 <_isatty_r+0x1c>)
 8019a2c:	2300      	movs	r3, #0
 8019a2e:	4604      	mov	r4, r0
 8019a30:	4608      	mov	r0, r1
 8019a32:	602b      	str	r3, [r5, #0]
 8019a34:	f7e7 fc3d 	bl	80012b2 <_isatty>
 8019a38:	1c43      	adds	r3, r0, #1
 8019a3a:	d102      	bne.n	8019a42 <_isatty_r+0x1a>
 8019a3c:	682b      	ldr	r3, [r5, #0]
 8019a3e:	b103      	cbz	r3, 8019a42 <_isatty_r+0x1a>
 8019a40:	6023      	str	r3, [r4, #0]
 8019a42:	bd38      	pop	{r3, r4, r5, pc}
 8019a44:	2000d3a8 	.word	0x2000d3a8

08019a48 <_malloc_usable_size_r>:
 8019a48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019a4c:	1f18      	subs	r0, r3, #4
 8019a4e:	2b00      	cmp	r3, #0
 8019a50:	bfbc      	itt	lt
 8019a52:	580b      	ldrlt	r3, [r1, r0]
 8019a54:	18c0      	addlt	r0, r0, r3
 8019a56:	4770      	bx	lr

08019a58 <_init>:
 8019a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a5a:	bf00      	nop
 8019a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019a5e:	bc08      	pop	{r3}
 8019a60:	469e      	mov	lr, r3
 8019a62:	4770      	bx	lr

08019a64 <_fini>:
 8019a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a66:	bf00      	nop
 8019a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019a6a:	bc08      	pop	{r3}
 8019a6c:	469e      	mov	lr, r3
 8019a6e:	4770      	bx	lr
