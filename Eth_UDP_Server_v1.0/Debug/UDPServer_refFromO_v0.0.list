
UDPServer_refFromO_v0.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018220  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003e20  08018420  08018420  00028420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c240  0801c240  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  0801c240  0801c240  0002c240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c248  0801c248  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c248  0801c248  0002c248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c24c  0801c24c  0002c24c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0801c250  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d234  20000080  0801c2d0  00030080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000d2b4  0801c2d0  0003d2b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000311ea  00000000  00000000  000300ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000079eb  00000000  00000000  00061298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002360  00000000  00000000  00068c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002220  00000000  00000000  0006afe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a100  00000000  00000000  0006d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00038533  00000000  00000000  000a7308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00123235  00000000  00000000  000df83b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00202a70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009b0c  00000000  00000000  00202ac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	08018408 	.word	0x08018408

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	08018408 	.word	0x08018408

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
	...

08000624 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	60f8      	str	r0, [r7, #12]
 800062c:	60b9      	str	r1, [r7, #8]
 800062e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	4a07      	ldr	r2, [pc, #28]	; (8000650 <vApplicationGetIdleTaskMemory+0x2c>)
 8000634:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	4a06      	ldr	r2, [pc, #24]	; (8000654 <vApplicationGetIdleTaskMemory+0x30>)
 800063a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2280      	movs	r2, #128	; 0x80
 8000640:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000642:	bf00      	nop
 8000644:	3714      	adds	r7, #20
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	2000009c 	.word	0x2000009c
 8000654:	20000100 	.word	0x20000100

08000658 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	4a07      	ldr	r2, [pc, #28]	; (8000684 <vApplicationGetTimerTaskMemory+0x2c>)
 8000668:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	4a06      	ldr	r2, [pc, #24]	; (8000688 <vApplicationGetTimerTaskMemory+0x30>)
 800066e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000676:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000678:	bf00      	nop
 800067a:	3714      	adds	r7, #20
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	20000300 	.word	0x20000300
 8000688:	20000364 	.word	0x20000364

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000692:	f000 fccc 	bl	800102e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000696:	f000 f85d 	bl	8000754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069a:	f000 f91d 	bl	80008d8 <MX_GPIO_Init>
  MX_ADC1_Init();
 800069e:	f000 f8c7 	bl	8000830 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  MX_LWIP_Init();
 80006a2:	f003 fd93 	bl	80041cc <MX_LWIP_Init>
  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  Own_Queue = xQueueCreate(3,sizeof(struct queue_struct));
 80006a6:	2200      	movs	r2, #0
 80006a8:	2130      	movs	r1, #48	; 0x30
 80006aa:	2003      	movs	r0, #3
 80006ac:	f004 ffba 	bl	8005624 <xQueueGenericCreate>
 80006b0:	4603      	mov	r3, r0
 80006b2:	4a1f      	ldr	r2, [pc, #124]	; (8000730 <main+0xa4>)
 80006b4:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  HeartBeat_Timer = xTimerCreate("HeartBeat", pdMS_TO_TICKS(HEART_BEAT_RATE), pdTRUE, 0, HeartBeatCallback);
 80006b6:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <main+0xa8>)
 80006b8:	9300      	str	r3, [sp, #0]
 80006ba:	2300      	movs	r3, #0
 80006bc:	2201      	movs	r2, #1
 80006be:	21fa      	movs	r1, #250	; 0xfa
 80006c0:	481d      	ldr	r0, [pc, #116]	; (8000738 <main+0xac>)
 80006c2:	f007 f879 	bl	80077b8 <xTimerCreate>
 80006c6:	6078      	str	r0, [r7, #4]
//  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
//  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(vTemp_Task, "Temperature",configMINIMAL_STACK_SIZE, NULL,1, NULL);		// Stacksize 128kB
 80006c8:	2300      	movs	r3, #0
 80006ca:	9301      	str	r3, [sp, #4]
 80006cc:	2301      	movs	r3, #1
 80006ce:	9300      	str	r3, [sp, #0]
 80006d0:	2300      	movs	r3, #0
 80006d2:	2280      	movs	r2, #128	; 0x80
 80006d4:	4919      	ldr	r1, [pc, #100]	; (800073c <main+0xb0>)
 80006d6:	481a      	ldr	r0, [pc, #104]	; (8000740 <main+0xb4>)
 80006d8:	f005 ff87 	bl	80065ea <xTaskCreate>
  xTaskCreate(vGateKeeper_Task,"GateKeeper",4*configMINIMAL_STACK_SIZE,NULL,2,NULL);	// Stacksize 4*128kB
 80006dc:	2300      	movs	r3, #0
 80006de:	9301      	str	r3, [sp, #4]
 80006e0:	2302      	movs	r3, #2
 80006e2:	9300      	str	r3, [sp, #0]
 80006e4:	2300      	movs	r3, #0
 80006e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ea:	4916      	ldr	r1, [pc, #88]	; (8000744 <main+0xb8>)
 80006ec:	4816      	ldr	r0, [pc, #88]	; (8000748 <main+0xbc>)
 80006ee:	f005 ff7c 	bl	80065ea <xTaskCreate>
  xTaskCreate(vUDP_Task,"UDP",4*configMINIMAL_STACK_SIZE,NULL,1,NULL);					// Stacksize 4*128kB
 80006f2:	2300      	movs	r3, #0
 80006f4:	9301      	str	r3, [sp, #4]
 80006f6:	2301      	movs	r3, #1
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	2300      	movs	r3, #0
 80006fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000700:	4912      	ldr	r1, [pc, #72]	; (800074c <main+0xc0>)
 8000702:	4813      	ldr	r0, [pc, #76]	; (8000750 <main+0xc4>)
 8000704:	f005 ff71 	bl	80065ea <xTaskCreate>

  if(HeartBeat_Timer != NULL){
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d00f      	beq.n	800072e <main+0xa2>
	  Timer_State = xTimerStart(HeartBeat_Timer,0);
 800070e:	f006 fa75 	bl	8006bfc <xTaskGetTickCount>
 8000712:	4602      	mov	r2, r0
 8000714:	2300      	movs	r3, #0
 8000716:	9300      	str	r3, [sp, #0]
 8000718:	2300      	movs	r3, #0
 800071a:	2101      	movs	r1, #1
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f007 f8a9 	bl	8007874 <xTimerGenericCommand>
 8000722:	6038      	str	r0, [r7, #0]
	  if(Timer_State == pdPASS){
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	2b01      	cmp	r3, #1
 8000728:	d101      	bne.n	800072e <main+0xa2>
		  vTaskStartScheduler();
 800072a:	f006 f951 	bl	80069d0 <vTaskStartScheduler>
//  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800072e:	e7fe      	b.n	800072e <main+0xa2>
 8000730:	200007ac 	.word	0x200007ac
 8000734:	080009a1 	.word	0x080009a1
 8000738:	08018420 	.word	0x08018420
 800073c:	0801842c 	.word	0x0801842c
 8000740:	080009bd 	.word	0x080009bd
 8000744:	08018438 	.word	0x08018438
 8000748:	08000bd9 	.word	0x08000bd9
 800074c:	08018444 	.word	0x08018444
 8000750:	08000a91 	.word	0x08000a91

08000754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b094      	sub	sp, #80	; 0x50
 8000758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	f107 031c 	add.w	r3, r7, #28
 800075e:	2234      	movs	r2, #52	; 0x34
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f016 fc44 	bl	8016ff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000768:	f107 0308 	add.w	r3, r7, #8
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000778:	4b2b      	ldr	r3, [pc, #172]	; (8000828 <SystemClock_Config+0xd4>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077c:	4a2a      	ldr	r2, [pc, #168]	; (8000828 <SystemClock_Config+0xd4>)
 800077e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000782:	6413      	str	r3, [r2, #64]	; 0x40
 8000784:	4b28      	ldr	r3, [pc, #160]	; (8000828 <SystemClock_Config+0xd4>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000790:	4b26      	ldr	r3, [pc, #152]	; (800082c <SystemClock_Config+0xd8>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a25      	ldr	r2, [pc, #148]	; (800082c <SystemClock_Config+0xd8>)
 8000796:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800079a:	6013      	str	r3, [r2, #0]
 800079c:	4b23      	ldr	r3, [pc, #140]	; (800082c <SystemClock_Config+0xd8>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007a8:	2301      	movs	r3, #1
 80007aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b2:	2302      	movs	r3, #2
 80007b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007bc:	2304      	movs	r3, #4
 80007be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80007c0:	23d8      	movs	r3, #216	; 0xd8
 80007c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c4:	2302      	movs	r3, #2
 80007c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007c8:	2302      	movs	r3, #2
 80007ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007cc:	2302      	movs	r3, #2
 80007ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d0:	f107 031c 	add.w	r3, r7, #28
 80007d4:	4618      	mov	r0, r3
 80007d6:	f002 fd27 	bl	8003228 <HAL_RCC_OscConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80007e0:	f000 fa40 	bl	8000c64 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007e4:	f002 fcd0 	bl	8003188 <HAL_PWREx_EnableOverDrive>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007ee:	f000 fa39 	bl	8000c64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f2:	230f      	movs	r3, #15
 80007f4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f6:	2302      	movs	r3, #2
 80007f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000802:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000808:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800080a:	f107 0308 	add.w	r3, r7, #8
 800080e:	2107      	movs	r1, #7
 8000810:	4618      	mov	r0, r3
 8000812:	f002 ffb7 	bl	8003784 <HAL_RCC_ClockConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800081c:	f000 fa22 	bl	8000c64 <Error_Handler>
  }
}
 8000820:	bf00      	nop
 8000822:	3750      	adds	r7, #80	; 0x50
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40023800 	.word	0x40023800
 800082c:	40007000 	.word	0x40007000

08000830 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000836:	463b      	mov	r3, r7
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000842:	4b21      	ldr	r3, [pc, #132]	; (80008c8 <MX_ADC1_Init+0x98>)
 8000844:	4a21      	ldr	r2, [pc, #132]	; (80008cc <MX_ADC1_Init+0x9c>)
 8000846:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000848:	4b1f      	ldr	r3, [pc, #124]	; (80008c8 <MX_ADC1_Init+0x98>)
 800084a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800084e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000850:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <MX_ADC1_Init+0x98>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000856:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <MX_ADC1_Init+0x98>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800085c:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <MX_ADC1_Init+0x98>)
 800085e:	2201      	movs	r2, #1
 8000860:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000862:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <MX_ADC1_Init+0x98>)
 8000864:	2200      	movs	r2, #0
 8000866:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800086a:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <MX_ADC1_Init+0x98>)
 800086c:	2200      	movs	r2, #0
 800086e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <MX_ADC1_Init+0x98>)
 8000872:	4a17      	ldr	r2, [pc, #92]	; (80008d0 <MX_ADC1_Init+0xa0>)
 8000874:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_ADC1_Init+0x98>)
 8000878:	2200      	movs	r2, #0
 800087a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_ADC1_Init+0x98>)
 800087e:	2201      	movs	r2, #1
 8000880:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_ADC1_Init+0x98>)
 8000884:	2200      	movs	r2, #0
 8000886:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_ADC1_Init+0x98>)
 800088c:	2201      	movs	r2, #1
 800088e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000890:	480d      	ldr	r0, [pc, #52]	; (80008c8 <MX_ADC1_Init+0x98>)
 8000892:	f000 fc1d 	bl	80010d0 <HAL_ADC_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800089c:	f000 f9e2 	bl	8000c64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_ADC1_Init+0xa4>)
 80008a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008a4:	2301      	movs	r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80008a8:	2306      	movs	r3, #6
 80008aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ac:	463b      	mov	r3, r7
 80008ae:	4619      	mov	r1, r3
 80008b0:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_ADC1_Init+0x98>)
 80008b2:	f000 fdeb 	bl	800148c <HAL_ADC_ConfigChannel>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008bc:	f000 f9d2 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008c0:	bf00      	nop
 80008c2:	3710      	adds	r7, #16
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000764 	.word	0x20000764
 80008cc:	40012000 	.word	0x40012000
 80008d0:	0f000001 	.word	0x0f000001
 80008d4:	10000012 	.word	0x10000012

080008d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	; 0x28
 80008dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
 80008ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ee:	4b2a      	ldr	r3, [pc, #168]	; (8000998 <MX_GPIO_Init+0xc0>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a29      	ldr	r2, [pc, #164]	; (8000998 <MX_GPIO_Init+0xc0>)
 80008f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b27      	ldr	r3, [pc, #156]	; (8000998 <MX_GPIO_Init+0xc0>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000906:	4b24      	ldr	r3, [pc, #144]	; (8000998 <MX_GPIO_Init+0xc0>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a23      	ldr	r2, [pc, #140]	; (8000998 <MX_GPIO_Init+0xc0>)
 800090c:	f043 0304 	orr.w	r3, r3, #4
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b21      	ldr	r3, [pc, #132]	; (8000998 <MX_GPIO_Init+0xc0>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0304 	and.w	r3, r3, #4
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	4b1e      	ldr	r3, [pc, #120]	; (8000998 <MX_GPIO_Init+0xc0>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a1d      	ldr	r2, [pc, #116]	; (8000998 <MX_GPIO_Init+0xc0>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b1b      	ldr	r3, [pc, #108]	; (8000998 <MX_GPIO_Init+0xc0>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	4b18      	ldr	r3, [pc, #96]	; (8000998 <MX_GPIO_Init+0xc0>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a17      	ldr	r2, [pc, #92]	; (8000998 <MX_GPIO_Init+0xc0>)
 800093c:	f043 0302 	orr.w	r3, r3, #2
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <MX_GPIO_Init+0xc0>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800094e:	4b12      	ldr	r3, [pc, #72]	; (8000998 <MX_GPIO_Init+0xc0>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a11      	ldr	r2, [pc, #68]	; (8000998 <MX_GPIO_Init+0xc0>)
 8000954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_GPIO_Init+0xc0>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Green_LED_Pin|Red_LED_Pin|Blue_LED_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	f244 0181 	movw	r1, #16513	; 0x4081
 800096c:	480b      	ldr	r0, [pc, #44]	; (800099c <MX_GPIO_Init+0xc4>)
 800096e:	f002 fbd7 	bl	8003120 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Green_LED_Pin Red_LED_Pin Blue_LED_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Red_LED_Pin|Blue_LED_Pin;
 8000972:	f244 0381 	movw	r3, #16513	; 0x4081
 8000976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000978:	2301      	movs	r3, #1
 800097a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2300      	movs	r3, #0
 8000982:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4619      	mov	r1, r3
 800098a:	4804      	ldr	r0, [pc, #16]	; (800099c <MX_GPIO_Init+0xc4>)
 800098c:	f002 fa1c 	bl	8002dc8 <HAL_GPIO_Init>

}
 8000990:	bf00      	nop
 8000992:	3728      	adds	r7, #40	; 0x28
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40023800 	.word	0x40023800
 800099c:	40020400 	.word	0x40020400

080009a0 <HeartBeatCallback>:
void vAplicationIdleHook(void){
	__WFI();
}

/* Timer callback function */
void HeartBeatCallback(TimerHandle_t xTimer){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, Green_LED_Pin);
 80009a8:	2101      	movs	r1, #1
 80009aa:	4803      	ldr	r0, [pc, #12]	; (80009b8 <HeartBeatCallback+0x18>)
 80009ac:	f002 fbd1 	bl	8003152 <HAL_GPIO_TogglePin>
}
 80009b0:	bf00      	nop
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40020400 	.word	0x40020400

080009bc <vTemp_Task>:

/* Temperature reading task */
void vTemp_Task(void *pvParameters){
 80009bc:	b580      	push	{r7, lr}
 80009be:	b092      	sub	sp, #72	; 0x48
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	static uint16_t counter = 0; // Counter variable to count tempr. reading
	static uint32_t temp_sum = 0; // variable to store sum of temp. value
	uint32_t temp = 0;			// variable to store current temp. value
 80009c4:	2300      	movs	r3, #0
 80009c6:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t temp_avr = 0;		// variable to store average temp. value
 80009c8:	2300      	movs	r3, #0
 80009ca:	643b      	str	r3, [r7, #64]	; 0x40
	queue_struct from_temp_task; // structure variable to store data for gate keeper task
	from_temp_task.port = htons(CLIENT_PORT);	// port for client
 80009cc:	f641 305b 	movw	r0, #7003	; 0x1b5b
 80009d0:	f00b f824 	bl	800ba1c <lwip_htons>
 80009d4:	4603      	mov	r3, r0
 80009d6:	823b      	strh	r3, [r7, #16]
	from_temp_task.addr = IPADDR_BROADCAST;	// client address
 80009d8:	f04f 33ff 	mov.w	r3, #4294967295
 80009dc:	60fb      	str	r3, [r7, #12]

	xLastWakeTime = xTaskGetTickCount();
 80009de:	f006 f90d 	bl	8006bfc <xTaskGetTickCount>
 80009e2:	4603      	mov	r3, r0
 80009e4:	63fb      	str	r3, [r7, #60]	; 0x3c

	while(1){

		/* Read temp. adc value */
		HAL_ADC_Start(&hadc1);
 80009e6:	4824      	ldr	r0, [pc, #144]	; (8000a78 <vTemp_Task+0xbc>)
 80009e8:	f000 fbb6 	bl	8001158 <HAL_ADC_Start>
		while(HAL_ADC_PollForConversion(&hadc1,1) != HAL_OK){}
 80009ec:	bf00      	nop
 80009ee:	2101      	movs	r1, #1
 80009f0:	4821      	ldr	r0, [pc, #132]	; (8000a78 <vTemp_Task+0xbc>)
 80009f2:	f000 fcb3 	bl	800135c <HAL_ADC_PollForConversion>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d1f8      	bne.n	80009ee <vTemp_Task+0x32>
		temp = HAL_ADC_GetValue(&hadc1);
 80009fc:	481e      	ldr	r0, [pc, #120]	; (8000a78 <vTemp_Task+0xbc>)
 80009fe:	f000 fd38 	bl	8001472 <HAL_ADC_GetValue>
 8000a02:	6478      	str	r0, [r7, #68]	; 0x44
		temp_sum += temp;
 8000a04:	4b1d      	ldr	r3, [pc, #116]	; (8000a7c <vTemp_Task+0xc0>)
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a0a:	4413      	add	r3, r2
 8000a0c:	4a1b      	ldr	r2, [pc, #108]	; (8000a7c <vTemp_Task+0xc0>)
 8000a0e:	6013      	str	r3, [r2, #0]
		counter++;
 8000a10:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <vTemp_Task+0xc4>)
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	3301      	adds	r3, #1
 8000a16:	b29a      	uxth	r2, r3
 8000a18:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <vTemp_Task+0xc4>)
 8000a1a:	801a      	strh	r2, [r3, #0]
		temp_avr = temp_sum / counter;	// get average value
 8000a1c:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <vTemp_Task+0xc0>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a17      	ldr	r2, [pc, #92]	; (8000a80 <vTemp_Task+0xc4>)
 8000a22:	8812      	ldrh	r2, [r2, #0]
 8000a24:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a28:	643b      	str	r3, [r7, #64]	; 0x40
		HAL_ADC_Stop(&hadc1);
 8000a2a:	4813      	ldr	r0, [pc, #76]	; (8000a78 <vTemp_Task+0xbc>)
 8000a2c:	f000 fc62 	bl	80012f4 <HAL_ADC_Stop>

		memset(&from_temp_task.msg_buffer,0,BUFFER_LENGTH); // clear the character buffer
 8000a30:	f107 030c 	add.w	r3, r7, #12
 8000a34:	3306      	adds	r3, #6
 8000a36:	2228      	movs	r2, #40	; 0x28
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f016 fad8 	bl	8016ff0 <memset>
		/* make a string */
		sprintf(from_temp_task.msg_buffer,"Cur_Temp= %lu , Avr_Temp= %lu\n",(unsigned long)temp,(unsigned long)temp_avr);
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	1d98      	adds	r0, r3, #6
 8000a46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000a4a:	490e      	ldr	r1, [pc, #56]	; (8000a84 <vTemp_Task+0xc8>)
 8000a4c:	f016 fb2e 	bl	80170ac <siprintf>

		HAL_GPIO_TogglePin(GPIOB, Blue_LED_Pin);	// toggel blue led
 8000a50:	2180      	movs	r1, #128	; 0x80
 8000a52:	480d      	ldr	r0, [pc, #52]	; (8000a88 <vTemp_Task+0xcc>)
 8000a54:	f002 fb7d 	bl	8003152 <HAL_GPIO_TogglePin>

		xQueueSendToBack(Own_Queue, &from_temp_task, 10);	// send message to gatekeeper task
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <vTemp_Task+0xd0>)
 8000a5a:	6818      	ldr	r0, [r3, #0]
 8000a5c:	f107 010c 	add.w	r1, r7, #12
 8000a60:	2300      	movs	r3, #0
 8000a62:	220a      	movs	r2, #10
 8000a64:	f004 fe8c 	bl	8005780 <xQueueGenericSend>

		vTaskDelayUntil(&xLastWakeTime, TEMP_READING_RATE); // wait till timeout
 8000a68:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000a6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a70:	4618      	mov	r0, r3
 8000a72:	f005 fef3 	bl	800685c <vTaskDelayUntil>
		HAL_ADC_Start(&hadc1);
 8000a76:	e7b6      	b.n	80009e6 <vTemp_Task+0x2a>
 8000a78:	20000764 	.word	0x20000764
 8000a7c:	200007b4 	.word	0x200007b4
 8000a80:	200007b8 	.word	0x200007b8
 8000a84:	08018448 	.word	0x08018448
 8000a88:	40020400 	.word	0x40020400
 8000a8c:	200007ac 	.word	0x200007ac

08000a90 <vUDP_Task>:
	}
}

/* UDP task */
void vUDP_Task(void *pvParameters){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b09a      	sub	sp, #104	; 0x68
 8000a94:	af02      	add	r7, sp, #8
 8000a96:	6078      	str	r0, [r7, #4]
	struct sockaddr_in client_addr; // struct variable for udp client
	struct sockaddr_in server_addr; // struct variable for udp server
	queue_struct from_udp_task;		// struct variable to pass through gate keeper
	uint8_t echo_flag = FALSE;		// echo flag
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	/*
	 * Create socket descriptor : "Domain=AF_INET","Type=SOCK_DGRAM","Protocol=0"
	 *  AF_INET= Connect with different machine, SOCK_DGRAM= UDP, 0=No additional protocol
	 *  */
	socket_id = socket(AF_INET,SOCK_DGRAM,0);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2102      	movs	r1, #2
 8000aa2:	2002      	movs	r0, #2
 8000aa4:	f00a fc04 	bl	800b2b0 <lwip_socket>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	4a44      	ldr	r2, [pc, #272]	; (8000bbc <vUDP_Task+0x12c>)
 8000aac:	6013      	str	r3, [r2, #0]

//	Reset structure variable
	memset(&server_addr, 0, sizeof(server_addr));
 8000aae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ab2:	2210      	movs	r2, #16
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f016 fa9a 	bl	8016ff0 <memset>
	memset(&client_addr, 0, sizeof(client_addr));
 8000abc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ac0:	2210      	movs	r2, #16
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f016 fa93 	bl	8016ff0 <memset>

// Initialize port
	server_addr.sin_family = AF_INET;	// Domain used in socket descriptor
 8000aca:	2302      	movs	r3, #2
 8000acc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	server_addr.sin_addr.s_addr = inet_addr(OWN_IP_ADDR); // Permit given IP Address
 8000ad0:	483b      	ldr	r0, [pc, #236]	; (8000bc0 <vUDP_Task+0x130>)
 8000ad2:	f014 fffc 	bl	8015ace <ipaddr_addr>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	643b      	str	r3, [r7, #64]	; 0x40
//	server_addr.sin_addr.s_addr = htonl(INADDR_ANY);
	server_addr.sin_port = htons(OWN_PORT);	// Permit given Port
 8000ada:	f641 208f 	movw	r0, #6799	; 0x1a8f
 8000ade:	f00a ff9d 	bl	800ba1c <lwip_htons>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	87fb      	strh	r3, [r7, #62]	; 0x3e

//	Bind the socket to a defined port
	if (bind(socket_id,(struct sockaddr *) &server_addr, sizeof(server_addr)) == -1){
 8000ae6:	4b35      	ldr	r3, [pc, #212]	; (8000bbc <vUDP_Task+0x12c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000aee:	2210      	movs	r2, #16
 8000af0:	4618      	mov	r0, r3
 8000af2:	f009 ff49 	bl	800a988 <lwip_bind>
 8000af6:	4603      	mov	r3, r0
 8000af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000afc:	d101      	bne.n	8000b02 <vUDP_Task+0x72>
		Error_Handler();
 8000afe:	f000 f8b1 	bl	8000c64 <Error_Handler>
	}

	from_len = sizeof(client_addr);
 8000b02:	2310      	movs	r3, #16
 8000b04:	60bb      	str	r3, [r7, #8]

//	Endlos loop
	while(1){
//	Clear recv_data array
		memset(&from_udp_task.msg_buffer,0,BUFFER_LENGTH);
 8000b06:	f107 030c 	add.w	r3, r7, #12
 8000b0a:	3306      	adds	r3, #6
 8000b0c:	2228      	movs	r2, #40	; 0x28
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4618      	mov	r0, r3
 8000b12:	f016 fa6d 	bl	8016ff0 <memset>
//	Receive data from server
		recvfrom(socket_id,from_udp_task.msg_buffer,sizeof(from_udp_task.msg_buffer),0,(struct sockaddr *)&client_addr,&from_len);
 8000b16:	4b29      	ldr	r3, [pc, #164]	; (8000bbc <vUDP_Task+0x12c>)
 8000b18:	6818      	ldr	r0, [r3, #0]
 8000b1a:	f107 030c 	add.w	r3, r7, #12
 8000b1e:	1d99      	adds	r1, r3, #6
 8000b20:	f107 0308 	add.w	r3, r7, #8
 8000b24:	9301      	str	r3, [sp, #4]
 8000b26:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b2a:	9300      	str	r3, [sp, #0]
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	2228      	movs	r2, #40	; 0x28
 8000b30:	f00a fa1c 	bl	800af6c <lwip_recvfrom>

// Set flag according received message
		if(strcmp(from_udp_task.msg_buffer,"ECHO_ON") == 0){
 8000b34:	f107 030c 	add.w	r3, r7, #12
 8000b38:	3306      	adds	r3, #6
 8000b3a:	4922      	ldr	r1, [pc, #136]	; (8000bc4 <vUDP_Task+0x134>)
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff fb7f 	bl	8000240 <strcmp>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d109      	bne.n	8000b5c <vUDP_Task+0xcc>
			HAL_GPIO_WritePin(GPIOB, Red_LED_Pin,GPIO_PIN_SET);
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b4e:	481e      	ldr	r0, [pc, #120]	; (8000bc8 <vUDP_Task+0x138>)
 8000b50:	f002 fae6 	bl	8003120 <HAL_GPIO_WritePin>
			echo_flag = TRUE;
 8000b54:	2301      	movs	r3, #1
 8000b56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8000b5a:	e012      	b.n	8000b82 <vUDP_Task+0xf2>
		}
		else if(strcmp(from_udp_task.msg_buffer,"ECHO_OFF")== 0){
 8000b5c:	f107 030c 	add.w	r3, r7, #12
 8000b60:	3306      	adds	r3, #6
 8000b62:	491a      	ldr	r1, [pc, #104]	; (8000bcc <vUDP_Task+0x13c>)
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fb6b 	bl	8000240 <strcmp>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d108      	bne.n	8000b82 <vUDP_Task+0xf2>
			HAL_GPIO_WritePin(GPIOB, Red_LED_Pin,GPIO_PIN_RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b76:	4814      	ldr	r0, [pc, #80]	; (8000bc8 <vUDP_Task+0x138>)
 8000b78:	f002 fad2 	bl	8003120 <HAL_GPIO_WritePin>
			echo_flag = FALSE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		if (echo_flag == TRUE){
 8000b82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d1bd      	bne.n	8000b06 <vUDP_Task+0x76>
			from_udp_task.addr = client_addr.sin_addr.s_addr;
 8000b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b8c:	60fb      	str	r3, [r7, #12]
			from_udp_task.port = client_addr.sin_port;
 8000b8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000b92:	823b      	strh	r3, [r7, #16]
			/* Make string */
			sprintf(from_udp_task.msg_buffer, "%s\n", from_udp_task.msg_buffer);
 8000b94:	f107 030c 	add.w	r3, r7, #12
 8000b98:	1d9a      	adds	r2, r3, #6
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	3306      	adds	r3, #6
 8000ba0:	490b      	ldr	r1, [pc, #44]	; (8000bd0 <vUDP_Task+0x140>)
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f016 fa82 	bl	80170ac <siprintf>
			xQueueSend(Own_Queue,&from_udp_task,10); // send to gatekeeper task
 8000ba8:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <vUDP_Task+0x144>)
 8000baa:	6818      	ldr	r0, [r3, #0]
 8000bac:	f107 010c 	add.w	r1, r7, #12
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	220a      	movs	r2, #10
 8000bb4:	f004 fde4 	bl	8005780 <xQueueGenericSend>
		memset(&from_udp_task.msg_buffer,0,BUFFER_LENGTH);
 8000bb8:	e7a5      	b.n	8000b06 <vUDP_Task+0x76>
 8000bba:	bf00      	nop
 8000bbc:	200007b0 	.word	0x200007b0
 8000bc0:	08018468 	.word	0x08018468
 8000bc4:	08018478 	.word	0x08018478
 8000bc8:	40020400 	.word	0x40020400
 8000bcc:	08018480 	.word	0x08018480
 8000bd0:	0801848c 	.word	0x0801848c
 8000bd4:	200007ac 	.word	0x200007ac

08000bd8 <vGateKeeper_Task>:
		}
	}
}

/* Gatekeeper task */
void vGateKeeper_Task(void *pvParameters){
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b097      	sub	sp, #92	; 0x5c
 8000bdc:	af02      	add	r7, sp, #8
 8000bde:	6078      	str	r0, [r7, #4]
	queue_struct recv_from; // struct variable to store received message from queue
	struct sockaddr_in client_addr; // struct variable for udp client

	while(1){
		memset(&recv_from,0,sizeof(recv_from)); // reset the struct variable
 8000be0:	f107 031c 	add.w	r3, r7, #28
 8000be4:	2230      	movs	r2, #48	; 0x30
 8000be6:	2100      	movs	r1, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f016 fa01 	bl	8016ff0 <memset>
		xQueueReceive(Own_Queue, &recv_from, portMAX_DELAY); // receive message
 8000bee:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <vGateKeeper_Task+0x5c>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f107 011c 	add.w	r1, r7, #28
 8000bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f004 fffc 	bl	8005bf8 <xQueueReceive>

		/* UDP client initialization */
		client_addr.sin_family = AF_INET;
 8000c00:	2302      	movs	r3, #2
 8000c02:	737b      	strb	r3, [r7, #13]
		client_addr.sin_addr.s_addr = recv_from.addr;
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	613b      	str	r3, [r7, #16]
		client_addr.sin_port = recv_from.port;
 8000c08:	8c3b      	ldrh	r3, [r7, #32]
 8000c0a:	81fb      	strh	r3, [r7, #14]

		/* Send message via UDP interface */
//		sendto(socket_id,recv_from.msg_buffer,sizeof(recv_from.msg_buffer),0,(struct sockaddr *)&client_addr,sizeof(client_addr));

		char *hello = "Hello from server";
 8000c0c:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <vGateKeeper_Task+0x60>)
 8000c0e:	64fb      	str	r3, [r7, #76]	; 0x4c

		sendto(socket_id, (const char *)hello, strlen(hello), 0, (const struct sockaddr *) &client_addr, sizeof(client_addr));
 8000c10:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <vGateKeeper_Task+0x64>)
 8000c12:	681c      	ldr	r4, [r3, #0]
 8000c14:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000c16:	f7ff fb1d 	bl	8000254 <strlen>
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	2310      	movs	r3, #16
 8000c1e:	9301      	str	r3, [sp, #4]
 8000c20:	f107 030c 	add.w	r3, r7, #12
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	2300      	movs	r3, #0
 8000c28:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000c2a:	4620      	mov	r0, r4
 8000c2c:	f00a fa8e 	bl	800b14c <lwip_sendto>
	while(1){
 8000c30:	e7d6      	b.n	8000be0 <vGateKeeper_Task+0x8>
 8000c32:	bf00      	nop
 8000c34:	200007ac 	.word	0x200007ac
 8000c38:	08018490 	.word	0x08018490
 8000c3c:	200007b0 	.word	0x200007b0

08000c40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a04      	ldr	r2, [pc, #16]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d101      	bne.n	8000c56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c52:	f000 f9f9 	bl	8001048 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40014400 	.word	0x40014400

08000c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
	...

08000c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <HAL_MspInit+0x4c>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7e:	4a10      	ldr	r2, [pc, #64]	; (8000cc0 <HAL_MspInit+0x4c>)
 8000c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c84:	6413      	str	r3, [r2, #64]	; 0x40
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <HAL_MspInit+0x4c>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <HAL_MspInit+0x4c>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <HAL_MspInit+0x4c>)
 8000c98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <HAL_MspInit+0x4c>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca6:	603b      	str	r3, [r7, #0]
 8000ca8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	210f      	movs	r1, #15
 8000cae:	f06f 0001 	mvn.w	r0, #1
 8000cb2:	f000 fef3 	bl	8001a9c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40023800 	.word	0x40023800

08000cc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <HAL_ADC_MspInit+0x38>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d10b      	bne.n	8000cee <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <HAL_ADC_MspInit+0x3c>)
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cda:	4a09      	ldr	r2, [pc, #36]	; (8000d00 <HAL_ADC_MspInit+0x3c>)
 8000cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce2:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <HAL_ADC_MspInit+0x3c>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cee:	bf00      	nop
 8000cf0:	3714      	adds	r7, #20
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	40012000 	.word	0x40012000
 8000d00:	40023800 	.word	0x40023800

08000d04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08c      	sub	sp, #48	; 0x30
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000d14:	2200      	movs	r2, #0
 8000d16:	6879      	ldr	r1, [r7, #4]
 8000d18:	2019      	movs	r0, #25
 8000d1a:	f000 febf 	bl	8001a9c <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d1e:	2019      	movs	r0, #25
 8000d20:	f000 fed8 	bl	8001ad4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000d24:	4b1f      	ldr	r3, [pc, #124]	; (8000da4 <HAL_InitTick+0xa0>)
 8000d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d28:	4a1e      	ldr	r2, [pc, #120]	; (8000da4 <HAL_InitTick+0xa0>)
 8000d2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d2e:	6453      	str	r3, [r2, #68]	; 0x44
 8000d30:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <HAL_InitTick+0xa0>)
 8000d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d3c:	f107 0210 	add.w	r2, r7, #16
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4611      	mov	r1, r2
 8000d46:	4618      	mov	r0, r3
 8000d48:	f002 ff2e 	bl	8003ba8 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000d4c:	f002 ff18 	bl	8003b80 <HAL_RCC_GetPCLK2Freq>
 8000d50:	4603      	mov	r3, r0
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d58:	4a13      	ldr	r2, [pc, #76]	; (8000da8 <HAL_InitTick+0xa4>)
 8000d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d5e:	0c9b      	lsrs	r3, r3, #18
 8000d60:	3b01      	subs	r3, #1
 8000d62:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000d64:	4b11      	ldr	r3, [pc, #68]	; (8000dac <HAL_InitTick+0xa8>)
 8000d66:	4a12      	ldr	r2, [pc, #72]	; (8000db0 <HAL_InitTick+0xac>)
 8000d68:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000d6a:	4b10      	ldr	r3, [pc, #64]	; (8000dac <HAL_InitTick+0xa8>)
 8000d6c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d70:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000d72:	4a0e      	ldr	r2, [pc, #56]	; (8000dac <HAL_InitTick+0xa8>)
 8000d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d76:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <HAL_InitTick+0xa8>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <HAL_InitTick+0xa8>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8000d84:	4809      	ldr	r0, [pc, #36]	; (8000dac <HAL_InitTick+0xa8>)
 8000d86:	f002 ff41 	bl	8003c0c <HAL_TIM_Base_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d104      	bne.n	8000d9a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8000d90:	4806      	ldr	r0, [pc, #24]	; (8000dac <HAL_InitTick+0xa8>)
 8000d92:	f002 ff9d 	bl	8003cd0 <HAL_TIM_Base_Start_IT>
 8000d96:	4603      	mov	r3, r0
 8000d98:	e000      	b.n	8000d9c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3730      	adds	r7, #48	; 0x30
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40023800 	.word	0x40023800
 8000da8:	431bde83 	.word	0x431bde83
 8000dac:	200007bc 	.word	0x200007bc
 8000db0:	40014400 	.word	0x40014400

08000db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <HardFault_Handler+0x4>

08000dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <MemManage_Handler+0x4>

08000dce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <BusFault_Handler+0x4>

08000dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <UsageFault_Handler+0x4>

08000dda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000dec:	4802      	ldr	r0, [pc, #8]	; (8000df8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000dee:	f002 ffe7 	bl	8003dc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200007bc 	.word	0x200007bc

08000dfc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000e00:	4802      	ldr	r0, [pc, #8]	; (8000e0c <ETH_IRQHandler+0x10>)
 8000e02:	f001 fa53 	bl	80022ac <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	2000390c 	.word	0x2000390c

08000e10 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000e14:	4802      	ldr	r0, [pc, #8]	; (8000e20 <ETH_WKUP_IRQHandler+0x10>)
 8000e16:	f001 fa49 	bl	80022ac <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	2000390c 	.word	0x2000390c

08000e24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
	return 1;
 8000e28:	2301      	movs	r3, #1
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <_kill>:

int _kill(int pid, int sig)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000e3e:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <_kill+0x20>)
 8000e40:	2216      	movs	r2, #22
 8000e42:	601a      	str	r2, [r3, #0]
	return -1;
 8000e44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	2000d2a0 	.word	0x2000d2a0

08000e58 <_exit>:

void _exit (int status)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000e60:	f04f 31ff 	mov.w	r1, #4294967295
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff ffe5 	bl	8000e34 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e6a:	e7fe      	b.n	8000e6a <_exit+0x12>

08000e6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
 8000e7c:	e00a      	b.n	8000e94 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e7e:	f3af 8000 	nop.w
 8000e82:	4601      	mov	r1, r0
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	1c5a      	adds	r2, r3, #1
 8000e88:	60ba      	str	r2, [r7, #8]
 8000e8a:	b2ca      	uxtb	r2, r1
 8000e8c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	3301      	adds	r3, #1
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	697a      	ldr	r2, [r7, #20]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	dbf0      	blt.n	8000e7e <_read+0x12>
	}

return len;
 8000e9c:	687b      	ldr	r3, [r7, #4]
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b086      	sub	sp, #24
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	60f8      	str	r0, [r7, #12]
 8000eae:	60b9      	str	r1, [r7, #8]
 8000eb0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
 8000eb6:	e009      	b.n	8000ecc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	1c5a      	adds	r2, r3, #1
 8000ebc:	60ba      	str	r2, [r7, #8]
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	617b      	str	r3, [r7, #20]
 8000ecc:	697a      	ldr	r2, [r7, #20]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	dbf1      	blt.n	8000eb8 <_write+0x12>
	}
	return len;
 8000ed4:	687b      	ldr	r3, [r7, #4]
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <_close>:

int _close(int file)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
	return -1;
 8000ee6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b083      	sub	sp, #12
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
 8000efe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f06:	605a      	str	r2, [r3, #4]
	return 0;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <_isatty>:

int _isatty(int file)
{
 8000f16:	b480      	push	{r7}
 8000f18:	b083      	sub	sp, #12
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
	return 1;
 8000f1e:	2301      	movs	r3, #1
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
	return 0;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
	...

08000f48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b087      	sub	sp, #28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f50:	4a14      	ldr	r2, [pc, #80]	; (8000fa4 <_sbrk+0x5c>)
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <_sbrk+0x60>)
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f5c:	4b13      	ldr	r3, [pc, #76]	; (8000fac <_sbrk+0x64>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d102      	bne.n	8000f6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f64:	4b11      	ldr	r3, [pc, #68]	; (8000fac <_sbrk+0x64>)
 8000f66:	4a12      	ldr	r2, [pc, #72]	; (8000fb0 <_sbrk+0x68>)
 8000f68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f6a:	4b10      	ldr	r3, [pc, #64]	; (8000fac <_sbrk+0x64>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d205      	bcs.n	8000f84 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000f78:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <_sbrk+0x6c>)
 8000f7a:	220c      	movs	r2, #12
 8000f7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f82:	e009      	b.n	8000f98 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f84:	4b09      	ldr	r3, [pc, #36]	; (8000fac <_sbrk+0x64>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f8a:	4b08      	ldr	r3, [pc, #32]	; (8000fac <_sbrk+0x64>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4413      	add	r3, r2
 8000f92:	4a06      	ldr	r2, [pc, #24]	; (8000fac <_sbrk+0x64>)
 8000f94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f96:	68fb      	ldr	r3, [r7, #12]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	371c      	adds	r7, #28
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	20080000 	.word	0x20080000
 8000fa8:	00000400 	.word	0x00000400
 8000fac:	20000808 	.word	0x20000808
 8000fb0:	2000d2b8 	.word	0x2000d2b8
 8000fb4:	2000d2a0 	.word	0x2000d2a0

08000fb8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <SystemInit+0x20>)
 8000fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fc2:	4a05      	ldr	r2, [pc, #20]	; (8000fd8 <SystemInit+0x20>)
 8000fc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001014 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fe0:	480d      	ldr	r0, [pc, #52]	; (8001018 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fe2:	490e      	ldr	r1, [pc, #56]	; (800101c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fe4:	4a0e      	ldr	r2, [pc, #56]	; (8001020 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fe6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe8:	e002      	b.n	8000ff0 <LoopCopyDataInit>

08000fea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fee:	3304      	adds	r3, #4

08000ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ff2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff4:	d3f9      	bcc.n	8000fea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ff6:	4a0b      	ldr	r2, [pc, #44]	; (8001024 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ff8:	4c0b      	ldr	r4, [pc, #44]	; (8001028 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ffa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ffc:	e001      	b.n	8001002 <LoopFillZerobss>

08000ffe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ffe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001000:	3204      	adds	r2, #4

08001002 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001002:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001004:	d3fb      	bcc.n	8000ffe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001006:	f7ff ffd7 	bl	8000fb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800100a:	f015 ff95 	bl	8016f38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800100e:	f7ff fb3d 	bl	800068c <main>
  bx  lr    
 8001012:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001014:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001018:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800101c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001020:	0801c250 	.word	0x0801c250
  ldr r2, =_sbss
 8001024:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001028:	2000d2b4 	.word	0x2000d2b4

0800102c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800102c:	e7fe      	b.n	800102c <ADC_IRQHandler>

0800102e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001032:	2003      	movs	r0, #3
 8001034:	f000 fd27 	bl	8001a86 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001038:	2000      	movs	r0, #0
 800103a:	f7ff fe63 	bl	8000d04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800103e:	f7ff fe19 	bl	8000c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001042:	2300      	movs	r3, #0
}
 8001044:	4618      	mov	r0, r3
 8001046:	bd80      	pop	{r7, pc}

08001048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_IncTick+0x20>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_IncTick+0x24>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4413      	add	r3, r2
 8001058:	4a04      	ldr	r2, [pc, #16]	; (800106c <HAL_IncTick+0x24>)
 800105a:	6013      	str	r3, [r2, #0]
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000008 	.word	0x20000008
 800106c:	2000080c 	.word	0x2000080c

08001070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return uwTick;
 8001074:	4b03      	ldr	r3, [pc, #12]	; (8001084 <HAL_GetTick+0x14>)
 8001076:	681b      	ldr	r3, [r3, #0]
}
 8001078:	4618      	mov	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	2000080c 	.word	0x2000080c

08001088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001090:	f7ff ffee 	bl	8001070 <HAL_GetTick>
 8001094:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a0:	d005      	beq.n	80010ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <HAL_Delay+0x44>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	461a      	mov	r2, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4413      	add	r3, r2
 80010ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ae:	bf00      	nop
 80010b0:	f7ff ffde 	bl	8001070 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d8f7      	bhi.n	80010b0 <HAL_Delay+0x28>
  {
  }
}
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000008 	.word	0x20000008

080010d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010d8:	2300      	movs	r3, #0
 80010da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e031      	b.n	800114a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d109      	bne.n	8001102 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff fde8 	bl	8000cc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	f003 0310 	and.w	r3, r3, #16
 800110a:	2b00      	cmp	r3, #0
 800110c:	d116      	bne.n	800113c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <HAL_ADC_Init+0x84>)
 8001114:	4013      	ands	r3, r2
 8001116:	f043 0202 	orr.w	r2, r3, #2
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f000 fb0a 	bl	8001738 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	f023 0303 	bic.w	r3, r3, #3
 8001132:	f043 0201 	orr.w	r2, r3, #1
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	641a      	str	r2, [r3, #64]	; 0x40
 800113a:	e001      	b.n	8001140 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001148:	7bfb      	ldrb	r3, [r7, #15]
}
 800114a:	4618      	mov	r0, r3
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	ffffeefd 	.word	0xffffeefd

08001158 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800116a:	2b01      	cmp	r3, #1
 800116c:	d101      	bne.n	8001172 <HAL_ADC_Start+0x1a>
 800116e:	2302      	movs	r3, #2
 8001170:	e0ad      	b.n	80012ce <HAL_ADC_Start+0x176>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2201      	movs	r2, #1
 8001176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	2b01      	cmp	r3, #1
 8001186:	d018      	beq.n	80011ba <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	689a      	ldr	r2, [r3, #8]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f042 0201 	orr.w	r2, r2, #1
 8001196:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001198:	4b50      	ldr	r3, [pc, #320]	; (80012dc <HAL_ADC_Start+0x184>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a50      	ldr	r2, [pc, #320]	; (80012e0 <HAL_ADC_Start+0x188>)
 800119e:	fba2 2303 	umull	r2, r3, r2, r3
 80011a2:	0c9a      	lsrs	r2, r3, #18
 80011a4:	4613      	mov	r3, r2
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	4413      	add	r3, r2
 80011aa:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80011ac:	e002      	b.n	80011b4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	3b01      	subs	r3, #1
 80011b2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f9      	bne.n	80011ae <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d175      	bne.n	80012b4 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011cc:	4b45      	ldr	r3, [pc, #276]	; (80012e4 <HAL_ADC_Start+0x18c>)
 80011ce:	4013      	ands	r3, r2
 80011d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d007      	beq.n	80011f6 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001202:	d106      	bne.n	8001212 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001208:	f023 0206 	bic.w	r2, r3, #6
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	645a      	str	r2, [r3, #68]	; 0x44
 8001210:	e002      	b.n	8001218 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001228:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800122a:	4b2f      	ldr	r3, [pc, #188]	; (80012e8 <HAL_ADC_Start+0x190>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f003 031f 	and.w	r3, r3, #31
 8001232:	2b00      	cmp	r3, #0
 8001234:	d10f      	bne.n	8001256 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d143      	bne.n	80012cc <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	689a      	ldr	r2, [r3, #8]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	e03a      	b.n	80012cc <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a24      	ldr	r2, [pc, #144]	; (80012ec <HAL_ADC_Start+0x194>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d10e      	bne.n	800127e <HAL_ADC_Start+0x126>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d107      	bne.n	800127e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	689a      	ldr	r2, [r3, #8]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800127c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800127e:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <HAL_ADC_Start+0x190>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f003 0310 	and.w	r3, r3, #16
 8001286:	2b00      	cmp	r3, #0
 8001288:	d120      	bne.n	80012cc <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a18      	ldr	r2, [pc, #96]	; (80012f0 <HAL_ADC_Start+0x198>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d11b      	bne.n	80012cc <HAL_ADC_Start+0x174>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d114      	bne.n	80012cc <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	689a      	ldr	r2, [r3, #8]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	e00b      	b.n	80012cc <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	f043 0210 	orr.w	r2, r3, #16
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c4:	f043 0201 	orr.w	r2, r3, #1
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3714      	adds	r7, #20
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	20000000 	.word	0x20000000
 80012e0:	431bde83 	.word	0x431bde83
 80012e4:	fffff8fe 	.word	0xfffff8fe
 80012e8:	40012300 	.word	0x40012300
 80012ec:	40012000 	.word	0x40012000
 80012f0:	40012200 	.word	0x40012200

080012f4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001302:	2b01      	cmp	r3, #1
 8001304:	d101      	bne.n	800130a <HAL_ADC_Stop+0x16>
 8001306:	2302      	movs	r3, #2
 8001308:	e01f      	b.n	800134a <HAL_ADC_Stop+0x56>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	689a      	ldr	r2, [r3, #8]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 0201 	bic.w	r2, r2, #1
 8001320:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	2b00      	cmp	r3, #0
 800132e:	d107      	bne.n	8001340 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <HAL_ADC_Stop+0x64>)
 8001336:	4013      	ands	r3, r2
 8001338:	f043 0201 	orr.w	r2, r3, #1
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	ffffeefe 	.word	0xffffeefe

0800135c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001378:	d113      	bne.n	80013a2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001384:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001388:	d10b      	bne.n	80013a2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f043 0220 	orr.w	r2, r3, #32
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e063      	b.n	800146a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80013a2:	f7ff fe65 	bl	8001070 <HAL_GetTick>
 80013a6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013a8:	e021      	b.n	80013ee <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b0:	d01d      	beq.n	80013ee <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d007      	beq.n	80013c8 <HAL_ADC_PollForConversion+0x6c>
 80013b8:	f7ff fe5a 	bl	8001070 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d212      	bcs.n	80013ee <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d00b      	beq.n	80013ee <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f043 0204 	orr.w	r2, r3, #4
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e03d      	b.n	800146a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d1d6      	bne.n	80013aa <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f06f 0212 	mvn.w	r2, #18
 8001404:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d123      	bne.n	8001468 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001424:	2b00      	cmp	r3, #0
 8001426:	d11f      	bne.n	8001468 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001432:	2b00      	cmp	r3, #0
 8001434:	d006      	beq.n	8001444 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001440:	2b00      	cmp	r3, #0
 8001442:	d111      	bne.n	8001468 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001448:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d105      	bne.n	8001468 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	f043 0201 	orr.w	r2, r3, #1
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001480:	4618      	mov	r0, r3
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d101      	bne.n	80014a8 <HAL_ADC_ConfigChannel+0x1c>
 80014a4:	2302      	movs	r3, #2
 80014a6:	e136      	b.n	8001716 <HAL_ADC_ConfigChannel+0x28a>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2201      	movs	r2, #1
 80014ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b09      	cmp	r3, #9
 80014b6:	d93a      	bls.n	800152e <HAL_ADC_ConfigChannel+0xa2>
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014c0:	d035      	beq.n	800152e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	68d9      	ldr	r1, [r3, #12]
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	461a      	mov	r2, r3
 80014d0:	4613      	mov	r3, r2
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	4413      	add	r3, r2
 80014d6:	3b1e      	subs	r3, #30
 80014d8:	2207      	movs	r2, #7
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43da      	mvns	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	400a      	ands	r2, r1
 80014e6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a8d      	ldr	r2, [pc, #564]	; (8001724 <HAL_ADC_ConfigChannel+0x298>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d10a      	bne.n	8001508 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	68d9      	ldr	r1, [r3, #12]
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	061a      	lsls	r2, r3, #24
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	430a      	orrs	r2, r1
 8001504:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001506:	e035      	b.n	8001574 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68d9      	ldr	r1, [r3, #12]
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	689a      	ldr	r2, [r3, #8]
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	b29b      	uxth	r3, r3
 8001518:	4618      	mov	r0, r3
 800151a:	4603      	mov	r3, r0
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	4403      	add	r3, r0
 8001520:	3b1e      	subs	r3, #30
 8001522:	409a      	lsls	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	430a      	orrs	r2, r1
 800152a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800152c:	e022      	b.n	8001574 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6919      	ldr	r1, [r3, #16]
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	b29b      	uxth	r3, r3
 800153a:	461a      	mov	r2, r3
 800153c:	4613      	mov	r3, r2
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	4413      	add	r3, r2
 8001542:	2207      	movs	r2, #7
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43da      	mvns	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	400a      	ands	r2, r1
 8001550:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6919      	ldr	r1, [r3, #16]
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	689a      	ldr	r2, [r3, #8]
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	b29b      	uxth	r3, r3
 8001562:	4618      	mov	r0, r3
 8001564:	4603      	mov	r3, r0
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	4403      	add	r3, r0
 800156a:	409a      	lsls	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	430a      	orrs	r2, r1
 8001572:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2b06      	cmp	r3, #6
 800157a:	d824      	bhi.n	80015c6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685a      	ldr	r2, [r3, #4]
 8001586:	4613      	mov	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	4413      	add	r3, r2
 800158c:	3b05      	subs	r3, #5
 800158e:	221f      	movs	r2, #31
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43da      	mvns	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	400a      	ands	r2, r1
 800159c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	4618      	mov	r0, r3
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685a      	ldr	r2, [r3, #4]
 80015b0:	4613      	mov	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4413      	add	r3, r2
 80015b6:	3b05      	subs	r3, #5
 80015b8:	fa00 f203 	lsl.w	r2, r0, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	430a      	orrs	r2, r1
 80015c2:	635a      	str	r2, [r3, #52]	; 0x34
 80015c4:	e04c      	b.n	8001660 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b0c      	cmp	r3, #12
 80015cc:	d824      	bhi.n	8001618 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	4613      	mov	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4413      	add	r3, r2
 80015de:	3b23      	subs	r3, #35	; 0x23
 80015e0:	221f      	movs	r2, #31
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43da      	mvns	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	400a      	ands	r2, r1
 80015ee:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	4618      	mov	r0, r3
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685a      	ldr	r2, [r3, #4]
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	3b23      	subs	r3, #35	; 0x23
 800160a:	fa00 f203 	lsl.w	r2, r0, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	430a      	orrs	r2, r1
 8001614:	631a      	str	r2, [r3, #48]	; 0x30
 8001616:	e023      	b.n	8001660 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	4613      	mov	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4413      	add	r3, r2
 8001628:	3b41      	subs	r3, #65	; 0x41
 800162a:	221f      	movs	r2, #31
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	43da      	mvns	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	400a      	ands	r2, r1
 8001638:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	b29b      	uxth	r3, r3
 8001646:	4618      	mov	r0, r3
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685a      	ldr	r2, [r3, #4]
 800164c:	4613      	mov	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	3b41      	subs	r3, #65	; 0x41
 8001654:	fa00 f203 	lsl.w	r2, r0, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	430a      	orrs	r2, r1
 800165e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a30      	ldr	r2, [pc, #192]	; (8001728 <HAL_ADC_ConfigChannel+0x29c>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d10a      	bne.n	8001680 <HAL_ADC_ConfigChannel+0x1f4>
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001672:	d105      	bne.n	8001680 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001674:	4b2d      	ldr	r3, [pc, #180]	; (800172c <HAL_ADC_ConfigChannel+0x2a0>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	4a2c      	ldr	r2, [pc, #176]	; (800172c <HAL_ADC_ConfigChannel+0x2a0>)
 800167a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800167e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a28      	ldr	r2, [pc, #160]	; (8001728 <HAL_ADC_ConfigChannel+0x29c>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d10f      	bne.n	80016aa <HAL_ADC_ConfigChannel+0x21e>
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b12      	cmp	r3, #18
 8001690:	d10b      	bne.n	80016aa <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001692:	4b26      	ldr	r3, [pc, #152]	; (800172c <HAL_ADC_ConfigChannel+0x2a0>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	4a25      	ldr	r2, [pc, #148]	; (800172c <HAL_ADC_ConfigChannel+0x2a0>)
 8001698:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800169c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800169e:	4b23      	ldr	r3, [pc, #140]	; (800172c <HAL_ADC_ConfigChannel+0x2a0>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	4a22      	ldr	r2, [pc, #136]	; (800172c <HAL_ADC_ConfigChannel+0x2a0>)
 80016a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016a8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a1e      	ldr	r2, [pc, #120]	; (8001728 <HAL_ADC_ConfigChannel+0x29c>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d12b      	bne.n	800170c <HAL_ADC_ConfigChannel+0x280>
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a1a      	ldr	r2, [pc, #104]	; (8001724 <HAL_ADC_ConfigChannel+0x298>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d003      	beq.n	80016c6 <HAL_ADC_ConfigChannel+0x23a>
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2b11      	cmp	r3, #17
 80016c4:	d122      	bne.n	800170c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80016c6:	4b19      	ldr	r3, [pc, #100]	; (800172c <HAL_ADC_ConfigChannel+0x2a0>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	4a18      	ldr	r2, [pc, #96]	; (800172c <HAL_ADC_ConfigChannel+0x2a0>)
 80016cc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80016d0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80016d2:	4b16      	ldr	r3, [pc, #88]	; (800172c <HAL_ADC_ConfigChannel+0x2a0>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	4a15      	ldr	r2, [pc, #84]	; (800172c <HAL_ADC_ConfigChannel+0x2a0>)
 80016d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016dc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a10      	ldr	r2, [pc, #64]	; (8001724 <HAL_ADC_ConfigChannel+0x298>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d111      	bne.n	800170c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <HAL_ADC_ConfigChannel+0x2a4>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a11      	ldr	r2, [pc, #68]	; (8001734 <HAL_ADC_ConfigChannel+0x2a8>)
 80016ee:	fba2 2303 	umull	r2, r3, r2, r3
 80016f2:	0c9a      	lsrs	r2, r3, #18
 80016f4:	4613      	mov	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80016fe:	e002      	b.n	8001706 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	3b01      	subs	r3, #1
 8001704:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1f9      	bne.n	8001700 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	10000012 	.word	0x10000012
 8001728:	40012000 	.word	0x40012000
 800172c:	40012300 	.word	0x40012300
 8001730:	20000000 	.word	0x20000000
 8001734:	431bde83 	.word	0x431bde83

08001738 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001740:	4b78      	ldr	r3, [pc, #480]	; (8001924 <ADC_Init+0x1ec>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	4a77      	ldr	r2, [pc, #476]	; (8001924 <ADC_Init+0x1ec>)
 8001746:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800174a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800174c:	4b75      	ldr	r3, [pc, #468]	; (8001924 <ADC_Init+0x1ec>)
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	4973      	ldr	r1, [pc, #460]	; (8001924 <ADC_Init+0x1ec>)
 8001756:	4313      	orrs	r3, r2
 8001758:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001768:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6859      	ldr	r1, [r3, #4]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	021a      	lsls	r2, r3, #8
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	430a      	orrs	r2, r1
 800177c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800178c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6859      	ldr	r1, [r3, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	430a      	orrs	r2, r1
 800179e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	689a      	ldr	r2, [r3, #8]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6899      	ldr	r1, [r3, #8]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	68da      	ldr	r2, [r3, #12]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	430a      	orrs	r2, r1
 80017c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c6:	4a58      	ldr	r2, [pc, #352]	; (8001928 <ADC_Init+0x1f0>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d022      	beq.n	8001812 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689a      	ldr	r2, [r3, #8]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6899      	ldr	r1, [r3, #8]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	430a      	orrs	r2, r1
 80017ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6899      	ldr	r1, [r3, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	430a      	orrs	r2, r1
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	e00f      	b.n	8001832 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001820:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001830:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 0202 	bic.w	r2, r2, #2
 8001840:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6899      	ldr	r1, [r3, #8]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	005a      	lsls	r2, r3, #1
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	430a      	orrs	r2, r1
 8001854:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f893 3020 	ldrb.w	r3, [r3, #32]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d01b      	beq.n	8001898 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800186e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800187e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6859      	ldr	r1, [r3, #4]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188a:	3b01      	subs	r3, #1
 800188c:	035a      	lsls	r2, r3, #13
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	430a      	orrs	r2, r1
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	e007      	b.n	80018a8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80018b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	051a      	lsls	r2, r3, #20
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	430a      	orrs	r2, r1
 80018cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6899      	ldr	r1, [r3, #8]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018ea:	025a      	lsls	r2, r3, #9
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689a      	ldr	r2, [r3, #8]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001902:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6899      	ldr	r1, [r3, #8]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	029a      	lsls	r2, r3, #10
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	430a      	orrs	r2, r1
 8001916:	609a      	str	r2, [r3, #8]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	40012300 	.word	0x40012300
 8001928:	0f000001 	.word	0x0f000001

0800192c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800193c:	4b0b      	ldr	r3, [pc, #44]	; (800196c <__NVIC_SetPriorityGrouping+0x40>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001948:	4013      	ands	r3, r2
 800194a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001954:	4b06      	ldr	r3, [pc, #24]	; (8001970 <__NVIC_SetPriorityGrouping+0x44>)
 8001956:	4313      	orrs	r3, r2
 8001958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800195a:	4a04      	ldr	r2, [pc, #16]	; (800196c <__NVIC_SetPriorityGrouping+0x40>)
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	60d3      	str	r3, [r2, #12]
}
 8001960:	bf00      	nop
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	e000ed00 	.word	0xe000ed00
 8001970:	05fa0000 	.word	0x05fa0000

08001974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001978:	4b04      	ldr	r3, [pc, #16]	; (800198c <__NVIC_GetPriorityGrouping+0x18>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	0a1b      	lsrs	r3, r3, #8
 800197e:	f003 0307 	and.w	r3, r3, #7
}
 8001982:	4618      	mov	r0, r3
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	db0b      	blt.n	80019ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	f003 021f 	and.w	r2, r3, #31
 80019a8:	4907      	ldr	r1, [pc, #28]	; (80019c8 <__NVIC_EnableIRQ+0x38>)
 80019aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ae:	095b      	lsrs	r3, r3, #5
 80019b0:	2001      	movs	r0, #1
 80019b2:	fa00 f202 	lsl.w	r2, r0, r2
 80019b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	e000e100 	.word	0xe000e100

080019cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	6039      	str	r1, [r7, #0]
 80019d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	db0a      	blt.n	80019f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	490c      	ldr	r1, [pc, #48]	; (8001a18 <__NVIC_SetPriority+0x4c>)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	0112      	lsls	r2, r2, #4
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	440b      	add	r3, r1
 80019f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f4:	e00a      	b.n	8001a0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	4908      	ldr	r1, [pc, #32]	; (8001a1c <__NVIC_SetPriority+0x50>)
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	3b04      	subs	r3, #4
 8001a04:	0112      	lsls	r2, r2, #4
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	440b      	add	r3, r1
 8001a0a:	761a      	strb	r2, [r3, #24]
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	e000e100 	.word	0xe000e100
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b089      	sub	sp, #36	; 0x24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f1c3 0307 	rsb	r3, r3, #7
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	bf28      	it	cs
 8001a3e:	2304      	movcs	r3, #4
 8001a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	3304      	adds	r3, #4
 8001a46:	2b06      	cmp	r3, #6
 8001a48:	d902      	bls.n	8001a50 <NVIC_EncodePriority+0x30>
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3b03      	subs	r3, #3
 8001a4e:	e000      	b.n	8001a52 <NVIC_EncodePriority+0x32>
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a54:	f04f 32ff 	mov.w	r2, #4294967295
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43da      	mvns	r2, r3
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	401a      	ands	r2, r3
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a68:	f04f 31ff 	mov.w	r1, #4294967295
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a72:	43d9      	mvns	r1, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a78:	4313      	orrs	r3, r2
         );
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3724      	adds	r7, #36	; 0x24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff ff4c 	bl	800192c <__NVIC_SetPriorityGrouping>
}
 8001a94:	bf00      	nop
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
 8001aa8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aae:	f7ff ff61 	bl	8001974 <__NVIC_GetPriorityGrouping>
 8001ab2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	68b9      	ldr	r1, [r7, #8]
 8001ab8:	6978      	ldr	r0, [r7, #20]
 8001aba:	f7ff ffb1 	bl	8001a20 <NVIC_EncodePriority>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ac4:	4611      	mov	r1, r2
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff ff80 	bl	80019cc <__NVIC_SetPriority>
}
 8001acc:	bf00      	nop
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff ff54 	bl	8001990 <__NVIC_EnableIRQ>
}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b088      	sub	sp, #32
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	61fb      	str	r3, [r7, #28]
 8001afc:	2300      	movs	r3, #0
 8001afe:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001b00:	4ba0      	ldr	r3, [pc, #640]	; (8001d84 <HAL_ETH_Init+0x294>)
 8001b02:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e180      	b.n	8001e18 <HAL_ETH_Init+0x328>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d106      	bne.n	8001b30 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f002 fcac 	bl	8004488 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b30:	4b95      	ldr	r3, [pc, #596]	; (8001d88 <HAL_ETH_Init+0x298>)
 8001b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b34:	4a94      	ldr	r2, [pc, #592]	; (8001d88 <HAL_ETH_Init+0x298>)
 8001b36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b3a:	6453      	str	r3, [r2, #68]	; 0x44
 8001b3c:	4b92      	ldr	r3, [pc, #584]	; (8001d88 <HAL_ETH_Init+0x298>)
 8001b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b44:	60bb      	str	r3, [r7, #8]
 8001b46:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001b48:	4b90      	ldr	r3, [pc, #576]	; (8001d8c <HAL_ETH_Init+0x29c>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	4a8f      	ldr	r2, [pc, #572]	; (8001d8c <HAL_ETH_Init+0x29c>)
 8001b4e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001b52:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001b54:	4b8d      	ldr	r3, [pc, #564]	; (8001d8c <HAL_ETH_Init+0x29c>)
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	498b      	ldr	r1, [pc, #556]	; (8001d8c <HAL_ETH_Init+0x29c>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6812      	ldr	r2, [r2, #0]
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b78:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001b7a:	f7ff fa79 	bl	8001070 <HAL_GetTick>
 8001b7e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001b80:	e011      	b.n	8001ba6 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001b82:	f7ff fa75 	bl	8001070 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001b90:	d909      	bls.n	8001ba6 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2203      	movs	r2, #3
 8001b96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e138      	b.n	8001e18 <HAL_ETH_Init+0x328>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1e4      	bne.n	8001b82 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	f023 031c 	bic.w	r3, r3, #28
 8001bc6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001bc8:	f001 ffce 	bl	8003b68 <HAL_RCC_GetHCLKFreq>
 8001bcc:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	4a6f      	ldr	r2, [pc, #444]	; (8001d90 <HAL_ETH_Init+0x2a0>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d908      	bls.n	8001be8 <HAL_ETH_Init+0xf8>
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	4a6e      	ldr	r2, [pc, #440]	; (8001d94 <HAL_ETH_Init+0x2a4>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d804      	bhi.n	8001be8 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	f043 0308 	orr.w	r3, r3, #8
 8001be4:	61fb      	str	r3, [r7, #28]
 8001be6:	e027      	b.n	8001c38 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	4a6a      	ldr	r2, [pc, #424]	; (8001d94 <HAL_ETH_Init+0x2a4>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d908      	bls.n	8001c02 <HAL_ETH_Init+0x112>
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	4a64      	ldr	r2, [pc, #400]	; (8001d84 <HAL_ETH_Init+0x294>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d204      	bcs.n	8001c02 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f043 030c 	orr.w	r3, r3, #12
 8001bfe:	61fb      	str	r3, [r7, #28]
 8001c00:	e01a      	b.n	8001c38 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	4a5f      	ldr	r2, [pc, #380]	; (8001d84 <HAL_ETH_Init+0x294>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d303      	bcc.n	8001c12 <HAL_ETH_Init+0x122>
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	4a62      	ldr	r2, [pc, #392]	; (8001d98 <HAL_ETH_Init+0x2a8>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d911      	bls.n	8001c36 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	4a60      	ldr	r2, [pc, #384]	; (8001d98 <HAL_ETH_Init+0x2a8>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d908      	bls.n	8001c2c <HAL_ETH_Init+0x13c>
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	4a5f      	ldr	r2, [pc, #380]	; (8001d9c <HAL_ETH_Init+0x2ac>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d804      	bhi.n	8001c2c <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	f043 0304 	orr.w	r3, r3, #4
 8001c28:	61fb      	str	r3, [r7, #28]
 8001c2a:	e005      	b.n	8001c38 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f043 0310 	orr.w	r3, r3, #16
 8001c32:	61fb      	str	r3, [r7, #28]
 8001c34:	e000      	b.n	8001c38 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001c36:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	69fa      	ldr	r2, [r7, #28]
 8001c3e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001c40:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c44:	2100      	movs	r1, #0
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 fc10 	bl	800246c <HAL_ETH_WritePHYRegister>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00b      	beq.n	8001c6a <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001c56:	6939      	ldr	r1, [r7, #16]
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 fdc5 	bl	80027e8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e0d6      	b.n	8001e18 <HAL_ETH_Init+0x328>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001c6a:	20ff      	movs	r0, #255	; 0xff
 8001c6c:	f7ff fa0c 	bl	8001088 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f000 80a4 	beq.w	8001dc2 <HAL_ETH_Init+0x2d2>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c7a:	f7ff f9f9 	bl	8001070 <HAL_GetTick>
 8001c7e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001c80:	f107 030c 	add.w	r3, r7, #12
 8001c84:	461a      	mov	r2, r3
 8001c86:	2101      	movs	r1, #1
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 fb87 	bl	800239c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001c8e:	f7ff f9ef 	bl	8001070 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d90f      	bls.n	8001cc0 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001ca4:	6939      	ldr	r1, [r7, #16]
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 fd9e 	bl	80027e8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e0ab      	b.n	8001e18 <HAL_ETH_Init+0x328>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f003 0304 	and.w	r3, r3, #4
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0da      	beq.n	8001c80 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001cca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cce:	2100      	movs	r1, #0
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 fbcb 	bl	800246c <HAL_ETH_WritePHYRegister>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d00b      	beq.n	8001cf4 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001ce0:	6939      	ldr	r1, [r7, #16]
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 fd80 	bl	80027e8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e091      	b.n	8001e18 <HAL_ETH_Init+0x328>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001cf4:	f7ff f9bc 	bl	8001070 <HAL_GetTick>
 8001cf8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001cfa:	f107 030c 	add.w	r3, r7, #12
 8001cfe:	461a      	mov	r2, r3
 8001d00:	2101      	movs	r1, #1
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 fb4a 	bl	800239c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001d08:	f7ff f9b2 	bl	8001070 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d90f      	bls.n	8001d3a <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001d1e:	6939      	ldr	r1, [r7, #16]
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 fd61 	bl	80027e8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e06e      	b.n	8001e18 <HAL_ETH_Init+0x328>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f003 0320 	and.w	r3, r3, #32
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d0da      	beq.n	8001cfa <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001d44:	f107 030c 	add.w	r3, r7, #12
 8001d48:	461a      	mov	r2, r3
 8001d4a:	2110      	movs	r1, #16
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 fb25 	bl	800239c <HAL_ETH_ReadPHYRegister>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00b      	beq.n	8001d70 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001d5c:	6939      	ldr	r1, [r7, #16]
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 fd42 	bl	80027e8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e053      	b.n	8001e18 <HAL_ETH_Init+0x328>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f003 0304 	and.w	r3, r3, #4
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d012      	beq.n	8001da0 <HAL_ETH_Init+0x2b0>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	e010      	b.n	8001da6 <HAL_ETH_Init+0x2b6>
 8001d84:	03938700 	.word	0x03938700
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40013800 	.word	0x40013800
 8001d90:	01312cff 	.word	0x01312cff
 8001d94:	02160ebf 	.word	0x02160ebf
 8001d98:	05f5e0ff 	.word	0x05f5e0ff
 8001d9c:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_ETH_Init+0x2c8>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	609a      	str	r2, [r3, #8]
 8001db6:	e026      	b.n	8001e06 <HAL_ETH_Init+0x316>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	e021      	b.n	8001e06 <HAL_ETH_Init+0x316>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	08db      	lsrs	r3, r3, #3
 8001dc8:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	085b      	lsrs	r3, r3, #1
 8001dd0:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	2100      	movs	r1, #0
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 fb46 	bl	800246c <HAL_ETH_WritePHYRegister>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00b      	beq.n	8001dfe <HAL_ETH_Init+0x30e>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001dea:	6939      	ldr	r1, [r7, #16]
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 fcfb 	bl	80027e8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e00c      	b.n	8001e18 <HAL_ETH_Init+0x328>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001dfe:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001e02:	f7ff f941 	bl	8001088 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001e06:	6939      	ldr	r1, [r7, #16]
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 fced 	bl	80027e8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3720      	adds	r7, #32
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b087      	sub	sp, #28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
 8001e2c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d101      	bne.n	8001e40 <HAL_ETH_DMATxDescListInit+0x20>
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	e051      	b.n	8001ee4 <HAL_ETH_DMATxDescListInit+0xc4>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8001e56:	2300      	movs	r3, #0
 8001e58:	617b      	str	r3, [r7, #20]
 8001e5a:	e030      	b.n	8001ebe <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	015b      	lsls	r3, r3, #5
 8001e60:	68ba      	ldr	r2, [r7, #8]
 8001e62:	4413      	add	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e6c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001e74:	fb02 f303 	mul.w	r3, r2, r3
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d105      	bne.n	8001e96 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d208      	bcs.n	8001eb2 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	015b      	lsls	r3, r3, #5
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	461a      	mov	r2, r3
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	60da      	str	r2, [r3, #12]
 8001eb0:	e002      	b.n	8001eb8 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	617b      	str	r3, [r7, #20]
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d3ca      	bcc.n	8001e5c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ed0:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	371c      	adds	r7, #28
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b087      	sub	sp, #28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
 8001efc:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001efe:	2300      	movs	r3, #0
 8001f00:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d101      	bne.n	8001f10 <HAL_ETH_DMARxDescListInit+0x20>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	e055      	b.n	8001fbc <HAL_ETH_DMARxDescListInit+0xcc>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	e034      	b.n	8001f96 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	015b      	lsls	r3, r3, #5
 8001f30:	68ba      	ldr	r2, [r7, #8]
 8001f32:	4413      	add	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001f3c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001f44:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001f4c:	fb02 f303 	mul.w	r3, r2, r3
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	4413      	add	r3, r2
 8001f54:	461a      	mov	r2, r3
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d105      	bne.n	8001f6e <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	3b01      	subs	r3, #1
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d208      	bcs.n	8001f8a <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	015b      	lsls	r3, r3, #5
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	4413      	add	r3, r2
 8001f82:	461a      	mov	r2, r3
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	60da      	str	r2, [r3, #12]
 8001f88:	e002      	b.n	8001f90 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001f8a:	68ba      	ldr	r2, [r7, #8]
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	3301      	adds	r3, #1
 8001f94:	617b      	str	r3, [r7, #20]
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d3c6      	bcc.n	8001f2c <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001fa8:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	371c      	adds	r7, #28
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b087      	sub	sp, #28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	2300      	movs	r3, #0
 8001fdc:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d101      	bne.n	8001fec <HAL_ETH_TransmitFrame+0x24>
 8001fe8:	2302      	movs	r3, #2
 8001fea:	e0cc      	b.n	8002186 <HAL_ETH_TransmitFrame+0x1be>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d109      	bne.n	8002016 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8002012:	2301      	movs	r3, #1
 8002014:	e0b7      	b.n	8002186 <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	da09      	bge.n	8002034 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2212      	movs	r2, #18
 8002024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e0a8      	b.n	8002186 <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800203a:	4293      	cmp	r3, r2
 800203c:	d915      	bls.n	800206a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	4a54      	ldr	r2, [pc, #336]	; (8002194 <HAL_ETH_TransmitFrame+0x1cc>)
 8002042:	fba2 2303 	umull	r2, r3, r2, r3
 8002046:	0a9b      	lsrs	r3, r3, #10
 8002048:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	4b51      	ldr	r3, [pc, #324]	; (8002194 <HAL_ETH_TransmitFrame+0x1cc>)
 800204e:	fba3 1302 	umull	r1, r3, r3, r2
 8002052:	0a9b      	lsrs	r3, r3, #10
 8002054:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8002058:	fb01 f303 	mul.w	r3, r1, r3
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d005      	beq.n	800206e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	3301      	adds	r3, #1
 8002066:	617b      	str	r3, [r7, #20]
 8002068:	e001      	b.n	800206e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 800206a:	2301      	movs	r3, #1
 800206c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d11c      	bne.n	80020ae <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8002082:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800208e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800209e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	461a      	mov	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80020ac:	e04b      	b.n	8002146 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80020ae:	2300      	movs	r3, #0
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	e044      	b.n	800213e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020be:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020c2:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d107      	bne.n	80020da <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80020d8:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020de:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80020e2:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d116      	bne.n	800211c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80020fc:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	4a25      	ldr	r2, [pc, #148]	; (8002198 <HAL_ETH_TransmitFrame+0x1d0>)
 8002102:	fb03 f202 	mul.w	r2, r3, r2
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	4413      	add	r3, r2
 800210a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800210e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800211a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002126:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800212a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	461a      	mov	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	3301      	adds	r3, #1
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	429a      	cmp	r2, r3
 8002144:	d3b6      	bcc.n	80020b4 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00d      	beq.n	8002174 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002160:	461a      	mov	r2, r3
 8002162:	2304      	movs	r3, #4
 8002164:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800216e:	461a      	mov	r2, r3
 8002170:	2300      	movs	r3, #0
 8002172:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	371c      	adds	r7, #28
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	ac02b00b 	.word	0xac02b00b
 8002198:	fffffa0c 	.word	0xfffffa0c

0800219c <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d101      	bne.n	80021b6 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80021b2:	2302      	movs	r3, #2
 80021b4:	e074      	b.n	80022a0 <HAL_ETH_GetReceivedFrame_IT+0x104>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2202      	movs	r2, #2
 80021c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80021c6:	e05a      	b.n	800227e <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	3301      	adds	r3, #1
 80021cc:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021dc:	d10d      	bne.n	80021fa <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	461a      	mov	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	629a      	str	r2, [r3, #40]	; 0x28
 80021f8:	e041      	b.n	800227e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002204:	2b00      	cmp	r3, #0
 8002206:	d10b      	bne.n	8002220 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220c:	1c5a      	adds	r2, r3, #1
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	461a      	mov	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	629a      	str	r2, [r3, #40]	; 0x28
 800221e:	e02e      	b.n	800227e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800222c:	1c5a      	adds	r2, r3, #1
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002236:	2b01      	cmp	r3, #1
 8002238:	d103      	bne.n	8002242 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	0c1b      	lsrs	r3, r3, #16
 800224a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800224e:	1f1a      	subs	r2, r3, #4
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	461a      	mov	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 800227a:	2300      	movs	r3, #0
 800227c:	e010      	b.n	80022a0 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	db02      	blt.n	800228e <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2b03      	cmp	r3, #3
 800228c:	d99c      	bls.n	80021c8 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c2:	2b40      	cmp	r3, #64	; 0x40
 80022c4:	d112      	bne.n	80022ec <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f002 f9a6 	bl	8004618 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022d4:	461a      	mov	r2, r3
 80022d6:	2340      	movs	r3, #64	; 0x40
 80022d8:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022ea:	e01a      	b.n	8002322 <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d111      	bne.n	8002322 <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f838 	bl	8002374 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800230c:	461a      	mov	r2, r3
 800230e:	2301      	movs	r3, #1
 8002310:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800232a:	461a      	mov	r2, r3
 800232c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002330:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002340:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002344:	d112      	bne.n	800236c <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f81e 	bl	8002388 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002354:	461a      	mov	r2, r3
 8002356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800235a:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 800236c:	bf00      	nop
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	460b      	mov	r3, r1
 80023a6:	607a      	str	r2, [r7, #4]
 80023a8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80023aa:	2300      	movs	r3, #0
 80023ac:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b82      	cmp	r3, #130	; 0x82
 80023bc:	d101      	bne.n	80023c2 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80023be:	2302      	movs	r3, #2
 80023c0:	e050      	b.n	8002464 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2282      	movs	r2, #130	; 0x82
 80023c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f003 031c 	and.w	r3, r3, #28
 80023d8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8a1b      	ldrh	r3, [r3, #16]
 80023de:	02db      	lsls	r3, r3, #11
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80023e8:	897b      	ldrh	r3, [r7, #10]
 80023ea:	019b      	lsls	r3, r3, #6
 80023ec:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	f023 0302 	bic.w	r3, r3, #2
 80023fc:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f043 0301 	orr.w	r3, r3, #1
 8002404:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800240e:	f7fe fe2f 	bl	8001070 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002414:	e015      	b.n	8002442 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002416:	f7fe fe2b 	bl	8001070 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002424:	d309      	bcc.n	800243a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e014      	b.n	8002464 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1e4      	bne.n	8002416 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	b29b      	uxth	r3, r3
 8002454:	461a      	mov	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3718      	adds	r7, #24
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	460b      	mov	r3, r1
 8002476:	607a      	str	r2, [r7, #4]
 8002478:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800247a:	2300      	movs	r3, #0
 800247c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800247e:	2300      	movs	r3, #0
 8002480:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b42      	cmp	r3, #66	; 0x42
 800248c:	d101      	bne.n	8002492 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800248e:	2302      	movs	r3, #2
 8002490:	e04e      	b.n	8002530 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2242      	movs	r2, #66	; 0x42
 8002496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	f003 031c 	and.w	r3, r3, #28
 80024a8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8a1b      	ldrh	r3, [r3, #16]
 80024ae:	02db      	lsls	r3, r3, #11
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80024b8:	897b      	ldrh	r3, [r7, #10]
 80024ba:	019b      	lsls	r3, r3, #6
 80024bc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80024c0:	697a      	ldr	r2, [r7, #20]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	f043 0302 	orr.w	r3, r3, #2
 80024cc:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f043 0301 	orr.w	r3, r3, #1
 80024d4:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	b29a      	uxth	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80024e8:	f7fe fdc2 	bl	8001070 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80024ee:	e015      	b.n	800251c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80024f0:	f7fe fdbe 	bl	8001070 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024fe:	d309      	bcc.n	8002514 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e00d      	b.n	8002530 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1e4      	bne.n	80024f0 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3718      	adds	r7, #24
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002546:	2b01      	cmp	r3, #1
 8002548:	d101      	bne.n	800254e <HAL_ETH_Start+0x16>
 800254a:	2302      	movs	r3, #2
 800254c:	e01f      	b.n	800258e <HAL_ETH_Start+0x56>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2202      	movs	r2, #2
 800255a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 fb40 	bl	8002be4 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 fb77 	bl	8002c58 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 fc06 	bl	8002d7c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 fbab 	bl	8002ccc <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 fbd4 	bl	8002d24 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8002596:	b580      	push	{r7, lr}
 8002598:	b082      	sub	sp, #8
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d101      	bne.n	80025ac <HAL_ETH_Stop+0x16>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e01f      	b.n	80025ec <HAL_ETH_Stop+0x56>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2202      	movs	r2, #2
 80025b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 fb9b 	bl	8002cf8 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 fbc4 	bl	8002d50 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 fb62 	bl	8002c92 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 fbd4 	bl	8002d7c <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 fb22 	bl	8002c1e <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80025fe:	2300      	movs	r3, #0
 8002600:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002608:	2b01      	cmp	r3, #1
 800260a:	d101      	bne.n	8002610 <HAL_ETH_ConfigMAC+0x1c>
 800260c:	2302      	movs	r3, #2
 800260e:	e0e4      	b.n	80027da <HAL_ETH_ConfigMAC+0x1e6>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2202      	movs	r2, #2
 800261c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	f000 80b1 	beq.w	800278a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	4b6c      	ldr	r3, [pc, #432]	; (80027e4 <HAL_ETH_ConfigMAC+0x1f0>)
 8002634:	4013      	ands	r3, r2
 8002636:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002640:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8002646:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 800264c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8002652:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8002658:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800265e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002664:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800266a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8002670:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8002676:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 800267c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8002682:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	4313      	orrs	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800269a:	2001      	movs	r0, #1
 800269c:	f7fe fcf4 	bl	8001088 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80026b0:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80026b6:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80026bc:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80026c2:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80026c8:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80026ce:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80026da:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80026dc:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80026e6:	2001      	movs	r0, #1
 80026e8:	f7fe fcce 	bl	8001088 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80026fc:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002706:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002716:	4013      	ands	r3, r2
 8002718:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002724:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800272a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002730:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8002736:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 800273c:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	4313      	orrs	r3, r2
 8002742:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002754:	2001      	movs	r0, #1
 8002756:	f7fe fc97 	bl	8001088 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	69db      	ldr	r3, [r3, #28]
 8002778:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800277a:	2001      	movs	r0, #1
 800277c:	f7fe fc84 	bl	8001088 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	61da      	str	r2, [r3, #28]
 8002788:	e01e      	b.n	80027c8 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002798:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80027ba:	2001      	movs	r0, #1
 80027bc:	f7fe fc64 	bl	8001088 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	ff20810f 	.word	0xff20810f

080027e8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b0b0      	sub	sp, #192	; 0xc0
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80027f2:	2300      	movs	r3, #0
 80027f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d007      	beq.n	800280e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002804:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800280c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800280e:	2300      	movs	r3, #0
 8002810:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002812:	2300      	movs	r3, #0
 8002814:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002816:	2300      	movs	r3, #0
 8002818:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800281a:	2300      	movs	r3, #0
 800281c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800281e:	2300      	movs	r3, #0
 8002820:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002822:	2300      	movs	r3, #0
 8002824:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d103      	bne.n	8002836 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800282e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002832:	663b      	str	r3, [r7, #96]	; 0x60
 8002834:	e001      	b.n	800283a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002836:	2300      	movs	r3, #0
 8002838:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800283a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800283e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002840:	2300      	movs	r3, #0
 8002842:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002844:	2300      	movs	r3, #0
 8002846:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002848:	2300      	movs	r3, #0
 800284a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800284c:	2300      	movs	r3, #0
 800284e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002850:	2300      	movs	r3, #0
 8002852:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002854:	2340      	movs	r3, #64	; 0x40
 8002856:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002858:	2300      	movs	r3, #0
 800285a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800285e:	2300      	movs	r3, #0
 8002860:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002864:	2300      	movs	r3, #0
 8002866:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800286a:	2300      	movs	r3, #0
 800286c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002870:	2300      	movs	r3, #0
 8002872:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8002876:	2300      	movs	r3, #0
 8002878:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 800287c:	2300      	movs	r3, #0
 800287e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8002882:	2300      	movs	r3, #0
 8002884:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002888:	2380      	movs	r3, #128	; 0x80
 800288a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800288e:	2300      	movs	r3, #0
 8002890:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002894:	2300      	movs	r3, #0
 8002896:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800289a:	2300      	movs	r3, #0
 800289c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80028a0:	2300      	movs	r3, #0
 80028a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80028a6:	2300      	movs	r3, #0
 80028a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80028ac:	2300      	movs	r3, #0
 80028ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80028bc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80028c0:	4ba9      	ldr	r3, [pc, #676]	; (8002b68 <ETH_MACDMAConfig+0x380>)
 80028c2:	4013      	ands	r3, r2
 80028c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80028c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80028ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80028cc:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80028ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80028d0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80028d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80028d4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80028da:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80028dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80028de:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80028e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80028e2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80028e8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80028ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80028ec:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80028ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80028f0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80028f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80028f4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80028f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80028f8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80028fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80028fc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80028fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002902:	4313      	orrs	r3, r2
 8002904:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002910:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800291c:	2001      	movs	r0, #1
 800291e:	f7fe fbb3 	bl	8001088 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800292a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800292c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800292e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002930:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002932:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002934:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002936:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800293a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800293c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002940:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002942:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002946:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002948:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800294c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002950:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002958:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800295a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002966:	2001      	movs	r0, #1
 8002968:	f7fe fb8e 	bl	8001088 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002974:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800297e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002988:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002994:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002998:	f64f 7341 	movw	r3, #65345	; 0xff41
 800299c:	4013      	ands	r3, r2
 800299e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80029a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029a6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80029a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80029ac:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80029ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80029b2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80029b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80029b8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80029ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80029be:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80029c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80029c4:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80029c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80029ca:	4313      	orrs	r3, r2
 80029cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80029d8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80029e4:	2001      	movs	r0, #1
 80029e6:	f7fe fb4f 	bl	8001088 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80029f2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80029f4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80029f8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a0e:	2001      	movs	r0, #1
 8002a10:	f7fe fb3a 	bl	8001088 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a1c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002a22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a26:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002a2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a30:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002a32:	2300      	movs	r3, #0
 8002a34:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002a36:	2300      	movs	r3, #0
 8002a38:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002a42:	2304      	movs	r3, #4
 8002a44:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002a46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002a4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a50:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002a52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a56:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002a58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a5c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002a5e:	2380      	movs	r3, #128	; 0x80
 8002a60:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002a66:	2300      	movs	r3, #0
 8002a68:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002a78:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a7c:	4b3b      	ldr	r3, [pc, #236]	; (8002b6c <ETH_MACDMAConfig+0x384>)
 8002a7e:	4013      	ands	r3, r2
 8002a80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002a84:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002a86:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002a88:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002a8a:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002a8c:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002a8e:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002a90:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002a92:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002a94:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002a96:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002a98:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002a9a:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002a9c:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002aa0:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002aa4:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002aa6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ab8:	461a      	mov	r2, r3
 8002aba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002abe:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ace:	2001      	movs	r0, #1
 8002ad0:	f7fe fada 	bl	8001088 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002adc:	461a      	mov	r2, r3
 8002ade:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ae2:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002ae4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002ae8:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002aec:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002af0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002af4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002af6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002af8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002afa:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002afe:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6812      	ldr	r2, [r2, #0]
 8002b04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b08:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b0c:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b1c:	2001      	movs	r0, #1
 8002b1e:	f7fe fab3 	bl	8001088 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b30:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d10b      	bne.n	8002b52 <ETH_MACDMAConfig+0x36a>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b42:	69d9      	ldr	r1, [r3, #28]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <ETH_MACDMAConfig+0x388>)
 8002b4a:	430b      	orrs	r3, r1
 8002b4c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b50:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	461a      	mov	r2, r3
 8002b58:	2100      	movs	r1, #0
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f80a 	bl	8002b74 <ETH_MACAddressConfig>
}
 8002b60:	bf00      	nop
 8002b62:	37c0      	adds	r7, #192	; 0xc0
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	ff20810f 	.word	0xff20810f
 8002b6c:	f8de3f23 	.word	0xf8de3f23
 8002b70:	00010040 	.word	0x00010040

08002b74 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b087      	sub	sp, #28
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3305      	adds	r3, #5
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	021b      	lsls	r3, r3, #8
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	3204      	adds	r2, #4
 8002b8c:	7812      	ldrb	r2, [r2, #0]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	4b11      	ldr	r3, [pc, #68]	; (8002bdc <ETH_MACAddressConfig+0x68>)
 8002b96:	4413      	add	r3, r2
 8002b98:	461a      	mov	r2, r3
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	3303      	adds	r3, #3
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	061a      	lsls	r2, r3, #24
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	3302      	adds	r3, #2
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	041b      	lsls	r3, r3, #16
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	021b      	lsls	r3, r3, #8
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	7812      	ldrb	r2, [r2, #0]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <ETH_MACAddressConfig+0x6c>)
 8002bc6:	4413      	add	r3, r2
 8002bc8:	461a      	mov	r2, r3
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	6013      	str	r3, [r2, #0]
}
 8002bce:	bf00      	nop
 8002bd0:	371c      	adds	r7, #28
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	40028040 	.word	0x40028040
 8002be0:	40028044 	.word	0x40028044

08002be4 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002bec:	2300      	movs	r3, #0
 8002bee:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f042 0208 	orr.w	r2, r2, #8
 8002bfe:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c08:	2001      	movs	r0, #1
 8002c0a:	f7fe fa3d 	bl	8001088 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	601a      	str	r2, [r3, #0]
}
 8002c16:	bf00      	nop
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b084      	sub	sp, #16
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 0208 	bic.w	r2, r2, #8
 8002c38:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c42:	2001      	movs	r0, #1
 8002c44:	f7fe fa20 	bl	8001088 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	601a      	str	r2, [r3, #0]
}
 8002c50:	bf00      	nop
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002c60:	2300      	movs	r3, #0
 8002c62:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 0204 	orr.w	r2, r2, #4
 8002c72:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c7c:	2001      	movs	r0, #1
 8002c7e:	f7fe fa03 	bl	8001088 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	601a      	str	r2, [r3, #0]
}
 8002c8a:	bf00      	nop
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b084      	sub	sp, #16
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0204 	bic.w	r2, r2, #4
 8002cac:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cb6:	2001      	movs	r0, #1
 8002cb8:	f7fe f9e6 	bl	8001088 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	601a      	str	r2, [r3, #0]
}
 8002cc4:	bf00      	nop
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	6812      	ldr	r2, [r2, #0]
 8002ce2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ce6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002cea:	6193      	str	r3, [r2, #24]
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	6812      	ldr	r2, [r2, #0]
 8002d0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d16:	6193      	str	r3, [r2, #24]
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6812      	ldr	r2, [r2, #0]
 8002d3a:	f043 0302 	orr.w	r3, r3, #2
 8002d3e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d42:	6193      	str	r3, [r2, #24]
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6812      	ldr	r2, [r2, #0]
 8002d66:	f023 0302 	bic.w	r3, r3, #2
 8002d6a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d6e:	6193      	str	r3, [r2, #24]
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002d84:	2300      	movs	r3, #0
 8002d86:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6812      	ldr	r2, [r2, #0]
 8002d96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d9a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d9e:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002dac:	2001      	movs	r0, #1
 8002dae:	f7fe f96b 	bl	8001088 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002dbc:	6193      	str	r3, [r2, #24]
}
 8002dbe:	bf00      	nop
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
	...

08002dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b089      	sub	sp, #36	; 0x24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002dde:	2300      	movs	r3, #0
 8002de0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002de2:	2300      	movs	r3, #0
 8002de4:	61fb      	str	r3, [r7, #28]
 8002de6:	e175      	b.n	80030d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002de8:	2201      	movs	r2, #1
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	f040 8164 	bne.w	80030ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d005      	beq.n	8002e1e <HAL_GPIO_Init+0x56>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f003 0303 	and.w	r3, r3, #3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d130      	bne.n	8002e80 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	2203      	movs	r2, #3
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4013      	ands	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e54:	2201      	movs	r2, #1
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	4013      	ands	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	091b      	lsrs	r3, r3, #4
 8002e6a:	f003 0201 	and.w	r2, r3, #1
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f003 0303 	and.w	r3, r3, #3
 8002e88:	2b03      	cmp	r3, #3
 8002e8a:	d017      	beq.n	8002ebc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	2203      	movs	r2, #3
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f003 0303 	and.w	r3, r3, #3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d123      	bne.n	8002f10 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	08da      	lsrs	r2, r3, #3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3208      	adds	r2, #8
 8002ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	220f      	movs	r2, #15
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	691a      	ldr	r2, [r3, #16]
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	08da      	lsrs	r2, r3, #3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	3208      	adds	r2, #8
 8002f0a:	69b9      	ldr	r1, [r7, #24]
 8002f0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	2203      	movs	r2, #3
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	43db      	mvns	r3, r3
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	4013      	ands	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f003 0203 	and.w	r2, r3, #3
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 80be 	beq.w	80030ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f52:	4b66      	ldr	r3, [pc, #408]	; (80030ec <HAL_GPIO_Init+0x324>)
 8002f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f56:	4a65      	ldr	r2, [pc, #404]	; (80030ec <HAL_GPIO_Init+0x324>)
 8002f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f5e:	4b63      	ldr	r3, [pc, #396]	; (80030ec <HAL_GPIO_Init+0x324>)
 8002f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f6a:	4a61      	ldr	r2, [pc, #388]	; (80030f0 <HAL_GPIO_Init+0x328>)
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	089b      	lsrs	r3, r3, #2
 8002f70:	3302      	adds	r3, #2
 8002f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	220f      	movs	r2, #15
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	43db      	mvns	r3, r3
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a58      	ldr	r2, [pc, #352]	; (80030f4 <HAL_GPIO_Init+0x32c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d037      	beq.n	8003006 <HAL_GPIO_Init+0x23e>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a57      	ldr	r2, [pc, #348]	; (80030f8 <HAL_GPIO_Init+0x330>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d031      	beq.n	8003002 <HAL_GPIO_Init+0x23a>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a56      	ldr	r2, [pc, #344]	; (80030fc <HAL_GPIO_Init+0x334>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d02b      	beq.n	8002ffe <HAL_GPIO_Init+0x236>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a55      	ldr	r2, [pc, #340]	; (8003100 <HAL_GPIO_Init+0x338>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d025      	beq.n	8002ffa <HAL_GPIO_Init+0x232>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a54      	ldr	r2, [pc, #336]	; (8003104 <HAL_GPIO_Init+0x33c>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d01f      	beq.n	8002ff6 <HAL_GPIO_Init+0x22e>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a53      	ldr	r2, [pc, #332]	; (8003108 <HAL_GPIO_Init+0x340>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d019      	beq.n	8002ff2 <HAL_GPIO_Init+0x22a>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a52      	ldr	r2, [pc, #328]	; (800310c <HAL_GPIO_Init+0x344>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d013      	beq.n	8002fee <HAL_GPIO_Init+0x226>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a51      	ldr	r2, [pc, #324]	; (8003110 <HAL_GPIO_Init+0x348>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d00d      	beq.n	8002fea <HAL_GPIO_Init+0x222>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a50      	ldr	r2, [pc, #320]	; (8003114 <HAL_GPIO_Init+0x34c>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d007      	beq.n	8002fe6 <HAL_GPIO_Init+0x21e>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a4f      	ldr	r2, [pc, #316]	; (8003118 <HAL_GPIO_Init+0x350>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d101      	bne.n	8002fe2 <HAL_GPIO_Init+0x21a>
 8002fde:	2309      	movs	r3, #9
 8002fe0:	e012      	b.n	8003008 <HAL_GPIO_Init+0x240>
 8002fe2:	230a      	movs	r3, #10
 8002fe4:	e010      	b.n	8003008 <HAL_GPIO_Init+0x240>
 8002fe6:	2308      	movs	r3, #8
 8002fe8:	e00e      	b.n	8003008 <HAL_GPIO_Init+0x240>
 8002fea:	2307      	movs	r3, #7
 8002fec:	e00c      	b.n	8003008 <HAL_GPIO_Init+0x240>
 8002fee:	2306      	movs	r3, #6
 8002ff0:	e00a      	b.n	8003008 <HAL_GPIO_Init+0x240>
 8002ff2:	2305      	movs	r3, #5
 8002ff4:	e008      	b.n	8003008 <HAL_GPIO_Init+0x240>
 8002ff6:	2304      	movs	r3, #4
 8002ff8:	e006      	b.n	8003008 <HAL_GPIO_Init+0x240>
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e004      	b.n	8003008 <HAL_GPIO_Init+0x240>
 8002ffe:	2302      	movs	r3, #2
 8003000:	e002      	b.n	8003008 <HAL_GPIO_Init+0x240>
 8003002:	2301      	movs	r3, #1
 8003004:	e000      	b.n	8003008 <HAL_GPIO_Init+0x240>
 8003006:	2300      	movs	r3, #0
 8003008:	69fa      	ldr	r2, [r7, #28]
 800300a:	f002 0203 	and.w	r2, r2, #3
 800300e:	0092      	lsls	r2, r2, #2
 8003010:	4093      	lsls	r3, r2
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	4313      	orrs	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003018:	4935      	ldr	r1, [pc, #212]	; (80030f0 <HAL_GPIO_Init+0x328>)
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	089b      	lsrs	r3, r3, #2
 800301e:	3302      	adds	r3, #2
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003026:	4b3d      	ldr	r3, [pc, #244]	; (800311c <HAL_GPIO_Init+0x354>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	43db      	mvns	r3, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	4013      	ands	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	4313      	orrs	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800304a:	4a34      	ldr	r2, [pc, #208]	; (800311c <HAL_GPIO_Init+0x354>)
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003050:	4b32      	ldr	r3, [pc, #200]	; (800311c <HAL_GPIO_Init+0x354>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	43db      	mvns	r3, r3
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	4013      	ands	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d003      	beq.n	8003074 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	4313      	orrs	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003074:	4a29      	ldr	r2, [pc, #164]	; (800311c <HAL_GPIO_Init+0x354>)
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800307a:	4b28      	ldr	r3, [pc, #160]	; (800311c <HAL_GPIO_Init+0x354>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	43db      	mvns	r3, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4013      	ands	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	4313      	orrs	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800309e:	4a1f      	ldr	r2, [pc, #124]	; (800311c <HAL_GPIO_Init+0x354>)
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030a4:	4b1d      	ldr	r3, [pc, #116]	; (800311c <HAL_GPIO_Init+0x354>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	43db      	mvns	r3, r3
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	4013      	ands	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d003      	beq.n	80030c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030c8:	4a14      	ldr	r2, [pc, #80]	; (800311c <HAL_GPIO_Init+0x354>)
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	3301      	adds	r3, #1
 80030d2:	61fb      	str	r3, [r7, #28]
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	2b0f      	cmp	r3, #15
 80030d8:	f67f ae86 	bls.w	8002de8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80030dc:	bf00      	nop
 80030de:	bf00      	nop
 80030e0:	3724      	adds	r7, #36	; 0x24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	40023800 	.word	0x40023800
 80030f0:	40013800 	.word	0x40013800
 80030f4:	40020000 	.word	0x40020000
 80030f8:	40020400 	.word	0x40020400
 80030fc:	40020800 	.word	0x40020800
 8003100:	40020c00 	.word	0x40020c00
 8003104:	40021000 	.word	0x40021000
 8003108:	40021400 	.word	0x40021400
 800310c:	40021800 	.word	0x40021800
 8003110:	40021c00 	.word	0x40021c00
 8003114:	40022000 	.word	0x40022000
 8003118:	40022400 	.word	0x40022400
 800311c:	40013c00 	.word	0x40013c00

08003120 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	460b      	mov	r3, r1
 800312a:	807b      	strh	r3, [r7, #2]
 800312c:	4613      	mov	r3, r2
 800312e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003130:	787b      	ldrb	r3, [r7, #1]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003136:	887a      	ldrh	r2, [r7, #2]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800313c:	e003      	b.n	8003146 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800313e:	887b      	ldrh	r3, [r7, #2]
 8003140:	041a      	lsls	r2, r3, #16
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	619a      	str	r2, [r3, #24]
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr

08003152 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003152:	b480      	push	{r7}
 8003154:	b085      	sub	sp, #20
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
 800315a:	460b      	mov	r3, r1
 800315c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003164:	887a      	ldrh	r2, [r7, #2]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	4013      	ands	r3, r2
 800316a:	041a      	lsls	r2, r3, #16
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	43d9      	mvns	r1, r3
 8003170:	887b      	ldrh	r3, [r7, #2]
 8003172:	400b      	ands	r3, r1
 8003174:	431a      	orrs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	619a      	str	r2, [r3, #24]
}
 800317a:	bf00      	nop
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
	...

08003188 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800318e:	2300      	movs	r3, #0
 8003190:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003192:	4b23      	ldr	r3, [pc, #140]	; (8003220 <HAL_PWREx_EnableOverDrive+0x98>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	4a22      	ldr	r2, [pc, #136]	; (8003220 <HAL_PWREx_EnableOverDrive+0x98>)
 8003198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800319c:	6413      	str	r3, [r2, #64]	; 0x40
 800319e:	4b20      	ldr	r3, [pc, #128]	; (8003220 <HAL_PWREx_EnableOverDrive+0x98>)
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a6:	603b      	str	r3, [r7, #0]
 80031a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80031aa:	4b1e      	ldr	r3, [pc, #120]	; (8003224 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a1d      	ldr	r2, [pc, #116]	; (8003224 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031b4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031b6:	f7fd ff5b 	bl	8001070 <HAL_GetTick>
 80031ba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80031bc:	e009      	b.n	80031d2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80031be:	f7fd ff57 	bl	8001070 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031cc:	d901      	bls.n	80031d2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e022      	b.n	8003218 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80031d2:	4b14      	ldr	r3, [pc, #80]	; (8003224 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031de:	d1ee      	bne.n	80031be <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80031e0:	4b10      	ldr	r3, [pc, #64]	; (8003224 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a0f      	ldr	r2, [pc, #60]	; (8003224 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031ec:	f7fd ff40 	bl	8001070 <HAL_GetTick>
 80031f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80031f2:	e009      	b.n	8003208 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80031f4:	f7fd ff3c 	bl	8001070 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003202:	d901      	bls.n	8003208 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e007      	b.n	8003218 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003208:	4b06      	ldr	r3, [pc, #24]	; (8003224 <HAL_PWREx_EnableOverDrive+0x9c>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003210:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003214:	d1ee      	bne.n	80031f4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3708      	adds	r7, #8
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40023800 	.word	0x40023800
 8003224:	40007000 	.word	0x40007000

08003228 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003230:	2300      	movs	r3, #0
 8003232:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e29b      	b.n	8003776 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 8087 	beq.w	800335a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800324c:	4b96      	ldr	r3, [pc, #600]	; (80034a8 <HAL_RCC_OscConfig+0x280>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 030c 	and.w	r3, r3, #12
 8003254:	2b04      	cmp	r3, #4
 8003256:	d00c      	beq.n	8003272 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003258:	4b93      	ldr	r3, [pc, #588]	; (80034a8 <HAL_RCC_OscConfig+0x280>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f003 030c 	and.w	r3, r3, #12
 8003260:	2b08      	cmp	r3, #8
 8003262:	d112      	bne.n	800328a <HAL_RCC_OscConfig+0x62>
 8003264:	4b90      	ldr	r3, [pc, #576]	; (80034a8 <HAL_RCC_OscConfig+0x280>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800326c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003270:	d10b      	bne.n	800328a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003272:	4b8d      	ldr	r3, [pc, #564]	; (80034a8 <HAL_RCC_OscConfig+0x280>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d06c      	beq.n	8003358 <HAL_RCC_OscConfig+0x130>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d168      	bne.n	8003358 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e275      	b.n	8003776 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003292:	d106      	bne.n	80032a2 <HAL_RCC_OscConfig+0x7a>
 8003294:	4b84      	ldr	r3, [pc, #528]	; (80034a8 <HAL_RCC_OscConfig+0x280>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a83      	ldr	r2, [pc, #524]	; (80034a8 <HAL_RCC_OscConfig+0x280>)
 800329a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800329e:	6013      	str	r3, [r2, #0]
 80032a0:	e02e      	b.n	8003300 <HAL_RCC_OscConfig+0xd8>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10c      	bne.n	80032c4 <HAL_RCC_OscConfig+0x9c>
 80032aa:	4b7f      	ldr	r3, [pc, #508]	; (80034a8 <HAL_RCC_OscConfig+0x280>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a7e      	ldr	r2, [pc, #504]	; (80034a8 <HAL_RCC_OscConfig+0x280>)
 80032b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	4b7c      	ldr	r3, [pc, #496]	; (80034a8 <HAL_RCC_OscConfig+0x280>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a7b      	ldr	r2, [pc, #492]	; (80034a8 <HAL_RCC_OscConfig+0x280>)
 80032bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032c0:	6013      	str	r3, [r2, #0]
 80032c2:	e01d      	b.n	8003300 <HAL_RCC_OscConfig+0xd8>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032cc:	d10c      	bne.n	80032e8 <HAL_RCC_OscConfig+0xc0>
 80032ce:	4b76      	ldr	r3, [pc, #472]	; (80034a8 <HAL_RCC_OscConfig+0x280>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a75      	ldr	r2, [pc, #468]	; (80034a8 <HAL_RCC_OscConfig+0x280>)
 80032d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	4b73      	ldr	r3, [pc, #460]	; (80034a8 <HAL_RCC_OscConfig+0x280>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a72      	ldr	r2, [pc, #456]	; (80034a8 <HAL_RCC_OscConfig+0x280>)
 80032e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	e00b      	b.n	8003300 <HAL_RCC_OscConfig+0xd8>
 80032e8:	4b6f      	ldr	r3, [pc, #444]	; (80034a8 <HAL_RCC_OscConfig+0x280>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a6e      	ldr	r2, [pc, #440]	; (80034a8 <HAL_RCC_OscConfig+0x280>)
 80032ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032f2:	6013      	str	r3, [r2, #0]
 80032f4:	4b6c      	ldr	r3, [pc, #432]	; (80034a8 <HAL_RCC_OscConfig+0x280>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a6b      	ldr	r2, [pc, #428]	; (80034a8 <HAL_RCC_OscConfig+0x280>)
 80032fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d013      	beq.n	8003330 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003308:	f7fd feb2 	bl	8001070 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003310:	f7fd feae 	bl	8001070 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b64      	cmp	r3, #100	; 0x64
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e229      	b.n	8003776 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003322:	4b61      	ldr	r3, [pc, #388]	; (80034a8 <HAL_RCC_OscConfig+0x280>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d0f0      	beq.n	8003310 <HAL_RCC_OscConfig+0xe8>
 800332e:	e014      	b.n	800335a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003330:	f7fd fe9e 	bl	8001070 <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003338:	f7fd fe9a 	bl	8001070 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b64      	cmp	r3, #100	; 0x64
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e215      	b.n	8003776 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800334a:	4b57      	ldr	r3, [pc, #348]	; (80034a8 <HAL_RCC_OscConfig+0x280>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1f0      	bne.n	8003338 <HAL_RCC_OscConfig+0x110>
 8003356:	e000      	b.n	800335a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d069      	beq.n	800343a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003366:	4b50      	ldr	r3, [pc, #320]	; (80034a8 <HAL_RCC_OscConfig+0x280>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 030c 	and.w	r3, r3, #12
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00b      	beq.n	800338a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003372:	4b4d      	ldr	r3, [pc, #308]	; (80034a8 <HAL_RCC_OscConfig+0x280>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 030c 	and.w	r3, r3, #12
 800337a:	2b08      	cmp	r3, #8
 800337c:	d11c      	bne.n	80033b8 <HAL_RCC_OscConfig+0x190>
 800337e:	4b4a      	ldr	r3, [pc, #296]	; (80034a8 <HAL_RCC_OscConfig+0x280>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d116      	bne.n	80033b8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800338a:	4b47      	ldr	r3, [pc, #284]	; (80034a8 <HAL_RCC_OscConfig+0x280>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d005      	beq.n	80033a2 <HAL_RCC_OscConfig+0x17a>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d001      	beq.n	80033a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e1e9      	b.n	8003776 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a2:	4b41      	ldr	r3, [pc, #260]	; (80034a8 <HAL_RCC_OscConfig+0x280>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	493d      	ldr	r1, [pc, #244]	; (80034a8 <HAL_RCC_OscConfig+0x280>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033b6:	e040      	b.n	800343a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d023      	beq.n	8003408 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033c0:	4b39      	ldr	r3, [pc, #228]	; (80034a8 <HAL_RCC_OscConfig+0x280>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a38      	ldr	r2, [pc, #224]	; (80034a8 <HAL_RCC_OscConfig+0x280>)
 80033c6:	f043 0301 	orr.w	r3, r3, #1
 80033ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033cc:	f7fd fe50 	bl	8001070 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033d4:	f7fd fe4c 	bl	8001070 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e1c7      	b.n	8003776 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e6:	4b30      	ldr	r3, [pc, #192]	; (80034a8 <HAL_RCC_OscConfig+0x280>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0f0      	beq.n	80033d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f2:	4b2d      	ldr	r3, [pc, #180]	; (80034a8 <HAL_RCC_OscConfig+0x280>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	4929      	ldr	r1, [pc, #164]	; (80034a8 <HAL_RCC_OscConfig+0x280>)
 8003402:	4313      	orrs	r3, r2
 8003404:	600b      	str	r3, [r1, #0]
 8003406:	e018      	b.n	800343a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003408:	4b27      	ldr	r3, [pc, #156]	; (80034a8 <HAL_RCC_OscConfig+0x280>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a26      	ldr	r2, [pc, #152]	; (80034a8 <HAL_RCC_OscConfig+0x280>)
 800340e:	f023 0301 	bic.w	r3, r3, #1
 8003412:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003414:	f7fd fe2c 	bl	8001070 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800341c:	f7fd fe28 	bl	8001070 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e1a3      	b.n	8003776 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800342e:	4b1e      	ldr	r3, [pc, #120]	; (80034a8 <HAL_RCC_OscConfig+0x280>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1f0      	bne.n	800341c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0308 	and.w	r3, r3, #8
 8003442:	2b00      	cmp	r3, #0
 8003444:	d038      	beq.n	80034b8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d019      	beq.n	8003482 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800344e:	4b16      	ldr	r3, [pc, #88]	; (80034a8 <HAL_RCC_OscConfig+0x280>)
 8003450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003452:	4a15      	ldr	r2, [pc, #84]	; (80034a8 <HAL_RCC_OscConfig+0x280>)
 8003454:	f043 0301 	orr.w	r3, r3, #1
 8003458:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800345a:	f7fd fe09 	bl	8001070 <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003462:	f7fd fe05 	bl	8001070 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e180      	b.n	8003776 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003474:	4b0c      	ldr	r3, [pc, #48]	; (80034a8 <HAL_RCC_OscConfig+0x280>)
 8003476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0f0      	beq.n	8003462 <HAL_RCC_OscConfig+0x23a>
 8003480:	e01a      	b.n	80034b8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003482:	4b09      	ldr	r3, [pc, #36]	; (80034a8 <HAL_RCC_OscConfig+0x280>)
 8003484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003486:	4a08      	ldr	r2, [pc, #32]	; (80034a8 <HAL_RCC_OscConfig+0x280>)
 8003488:	f023 0301 	bic.w	r3, r3, #1
 800348c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800348e:	f7fd fdef 	bl	8001070 <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003494:	e00a      	b.n	80034ac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003496:	f7fd fdeb 	bl	8001070 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d903      	bls.n	80034ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e166      	b.n	8003776 <HAL_RCC_OscConfig+0x54e>
 80034a8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034ac:	4b92      	ldr	r3, [pc, #584]	; (80036f8 <HAL_RCC_OscConfig+0x4d0>)
 80034ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1ee      	bne.n	8003496 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0304 	and.w	r3, r3, #4
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f000 80a4 	beq.w	800360e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034c6:	4b8c      	ldr	r3, [pc, #560]	; (80036f8 <HAL_RCC_OscConfig+0x4d0>)
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10d      	bne.n	80034ee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80034d2:	4b89      	ldr	r3, [pc, #548]	; (80036f8 <HAL_RCC_OscConfig+0x4d0>)
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	4a88      	ldr	r2, [pc, #544]	; (80036f8 <HAL_RCC_OscConfig+0x4d0>)
 80034d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034dc:	6413      	str	r3, [r2, #64]	; 0x40
 80034de:	4b86      	ldr	r3, [pc, #536]	; (80036f8 <HAL_RCC_OscConfig+0x4d0>)
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e6:	60bb      	str	r3, [r7, #8]
 80034e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ea:	2301      	movs	r3, #1
 80034ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ee:	4b83      	ldr	r3, [pc, #524]	; (80036fc <HAL_RCC_OscConfig+0x4d4>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d118      	bne.n	800352c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80034fa:	4b80      	ldr	r3, [pc, #512]	; (80036fc <HAL_RCC_OscConfig+0x4d4>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a7f      	ldr	r2, [pc, #508]	; (80036fc <HAL_RCC_OscConfig+0x4d4>)
 8003500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003504:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003506:	f7fd fdb3 	bl	8001070 <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800350e:	f7fd fdaf 	bl	8001070 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b64      	cmp	r3, #100	; 0x64
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e12a      	b.n	8003776 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003520:	4b76      	ldr	r3, [pc, #472]	; (80036fc <HAL_RCC_OscConfig+0x4d4>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0f0      	beq.n	800350e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d106      	bne.n	8003542 <HAL_RCC_OscConfig+0x31a>
 8003534:	4b70      	ldr	r3, [pc, #448]	; (80036f8 <HAL_RCC_OscConfig+0x4d0>)
 8003536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003538:	4a6f      	ldr	r2, [pc, #444]	; (80036f8 <HAL_RCC_OscConfig+0x4d0>)
 800353a:	f043 0301 	orr.w	r3, r3, #1
 800353e:	6713      	str	r3, [r2, #112]	; 0x70
 8003540:	e02d      	b.n	800359e <HAL_RCC_OscConfig+0x376>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10c      	bne.n	8003564 <HAL_RCC_OscConfig+0x33c>
 800354a:	4b6b      	ldr	r3, [pc, #428]	; (80036f8 <HAL_RCC_OscConfig+0x4d0>)
 800354c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354e:	4a6a      	ldr	r2, [pc, #424]	; (80036f8 <HAL_RCC_OscConfig+0x4d0>)
 8003550:	f023 0301 	bic.w	r3, r3, #1
 8003554:	6713      	str	r3, [r2, #112]	; 0x70
 8003556:	4b68      	ldr	r3, [pc, #416]	; (80036f8 <HAL_RCC_OscConfig+0x4d0>)
 8003558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355a:	4a67      	ldr	r2, [pc, #412]	; (80036f8 <HAL_RCC_OscConfig+0x4d0>)
 800355c:	f023 0304 	bic.w	r3, r3, #4
 8003560:	6713      	str	r3, [r2, #112]	; 0x70
 8003562:	e01c      	b.n	800359e <HAL_RCC_OscConfig+0x376>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	2b05      	cmp	r3, #5
 800356a:	d10c      	bne.n	8003586 <HAL_RCC_OscConfig+0x35e>
 800356c:	4b62      	ldr	r3, [pc, #392]	; (80036f8 <HAL_RCC_OscConfig+0x4d0>)
 800356e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003570:	4a61      	ldr	r2, [pc, #388]	; (80036f8 <HAL_RCC_OscConfig+0x4d0>)
 8003572:	f043 0304 	orr.w	r3, r3, #4
 8003576:	6713      	str	r3, [r2, #112]	; 0x70
 8003578:	4b5f      	ldr	r3, [pc, #380]	; (80036f8 <HAL_RCC_OscConfig+0x4d0>)
 800357a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357c:	4a5e      	ldr	r2, [pc, #376]	; (80036f8 <HAL_RCC_OscConfig+0x4d0>)
 800357e:	f043 0301 	orr.w	r3, r3, #1
 8003582:	6713      	str	r3, [r2, #112]	; 0x70
 8003584:	e00b      	b.n	800359e <HAL_RCC_OscConfig+0x376>
 8003586:	4b5c      	ldr	r3, [pc, #368]	; (80036f8 <HAL_RCC_OscConfig+0x4d0>)
 8003588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358a:	4a5b      	ldr	r2, [pc, #364]	; (80036f8 <HAL_RCC_OscConfig+0x4d0>)
 800358c:	f023 0301 	bic.w	r3, r3, #1
 8003590:	6713      	str	r3, [r2, #112]	; 0x70
 8003592:	4b59      	ldr	r3, [pc, #356]	; (80036f8 <HAL_RCC_OscConfig+0x4d0>)
 8003594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003596:	4a58      	ldr	r2, [pc, #352]	; (80036f8 <HAL_RCC_OscConfig+0x4d0>)
 8003598:	f023 0304 	bic.w	r3, r3, #4
 800359c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d015      	beq.n	80035d2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a6:	f7fd fd63 	bl	8001070 <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ac:	e00a      	b.n	80035c4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ae:	f7fd fd5f 	bl	8001070 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035bc:	4293      	cmp	r3, r2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e0d8      	b.n	8003776 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c4:	4b4c      	ldr	r3, [pc, #304]	; (80036f8 <HAL_RCC_OscConfig+0x4d0>)
 80035c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d0ee      	beq.n	80035ae <HAL_RCC_OscConfig+0x386>
 80035d0:	e014      	b.n	80035fc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d2:	f7fd fd4d 	bl	8001070 <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035d8:	e00a      	b.n	80035f0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035da:	f7fd fd49 	bl	8001070 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d901      	bls.n	80035f0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e0c2      	b.n	8003776 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035f0:	4b41      	ldr	r3, [pc, #260]	; (80036f8 <HAL_RCC_OscConfig+0x4d0>)
 80035f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1ee      	bne.n	80035da <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035fc:	7dfb      	ldrb	r3, [r7, #23]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d105      	bne.n	800360e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003602:	4b3d      	ldr	r3, [pc, #244]	; (80036f8 <HAL_RCC_OscConfig+0x4d0>)
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	4a3c      	ldr	r2, [pc, #240]	; (80036f8 <HAL_RCC_OscConfig+0x4d0>)
 8003608:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800360c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 80ae 	beq.w	8003774 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003618:	4b37      	ldr	r3, [pc, #220]	; (80036f8 <HAL_RCC_OscConfig+0x4d0>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f003 030c 	and.w	r3, r3, #12
 8003620:	2b08      	cmp	r3, #8
 8003622:	d06d      	beq.n	8003700 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	2b02      	cmp	r3, #2
 800362a:	d14b      	bne.n	80036c4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800362c:	4b32      	ldr	r3, [pc, #200]	; (80036f8 <HAL_RCC_OscConfig+0x4d0>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a31      	ldr	r2, [pc, #196]	; (80036f8 <HAL_RCC_OscConfig+0x4d0>)
 8003632:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003636:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003638:	f7fd fd1a 	bl	8001070 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003640:	f7fd fd16 	bl	8001070 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e091      	b.n	8003776 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003652:	4b29      	ldr	r3, [pc, #164]	; (80036f8 <HAL_RCC_OscConfig+0x4d0>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1f0      	bne.n	8003640 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	69da      	ldr	r2, [r3, #28]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	431a      	orrs	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366c:	019b      	lsls	r3, r3, #6
 800366e:	431a      	orrs	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003674:	085b      	lsrs	r3, r3, #1
 8003676:	3b01      	subs	r3, #1
 8003678:	041b      	lsls	r3, r3, #16
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003680:	061b      	lsls	r3, r3, #24
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003688:	071b      	lsls	r3, r3, #28
 800368a:	491b      	ldr	r1, [pc, #108]	; (80036f8 <HAL_RCC_OscConfig+0x4d0>)
 800368c:	4313      	orrs	r3, r2
 800368e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003690:	4b19      	ldr	r3, [pc, #100]	; (80036f8 <HAL_RCC_OscConfig+0x4d0>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a18      	ldr	r2, [pc, #96]	; (80036f8 <HAL_RCC_OscConfig+0x4d0>)
 8003696:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800369a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369c:	f7fd fce8 	bl	8001070 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a4:	f7fd fce4 	bl	8001070 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e05f      	b.n	8003776 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b6:	4b10      	ldr	r3, [pc, #64]	; (80036f8 <HAL_RCC_OscConfig+0x4d0>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0f0      	beq.n	80036a4 <HAL_RCC_OscConfig+0x47c>
 80036c2:	e057      	b.n	8003774 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c4:	4b0c      	ldr	r3, [pc, #48]	; (80036f8 <HAL_RCC_OscConfig+0x4d0>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a0b      	ldr	r2, [pc, #44]	; (80036f8 <HAL_RCC_OscConfig+0x4d0>)
 80036ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d0:	f7fd fcce 	bl	8001070 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d8:	f7fd fcca 	bl	8001070 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e045      	b.n	8003776 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ea:	4b03      	ldr	r3, [pc, #12]	; (80036f8 <HAL_RCC_OscConfig+0x4d0>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1f0      	bne.n	80036d8 <HAL_RCC_OscConfig+0x4b0>
 80036f6:	e03d      	b.n	8003774 <HAL_RCC_OscConfig+0x54c>
 80036f8:	40023800 	.word	0x40023800
 80036fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003700:	4b1f      	ldr	r3, [pc, #124]	; (8003780 <HAL_RCC_OscConfig+0x558>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d030      	beq.n	8003770 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003718:	429a      	cmp	r2, r3
 800371a:	d129      	bne.n	8003770 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003726:	429a      	cmp	r2, r3
 8003728:	d122      	bne.n	8003770 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003730:	4013      	ands	r3, r2
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003736:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003738:	4293      	cmp	r3, r2
 800373a:	d119      	bne.n	8003770 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003746:	085b      	lsrs	r3, r3, #1
 8003748:	3b01      	subs	r3, #1
 800374a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800374c:	429a      	cmp	r2, r3
 800374e:	d10f      	bne.n	8003770 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800375c:	429a      	cmp	r2, r3
 800375e:	d107      	bne.n	8003770 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800376c:	429a      	cmp	r2, r3
 800376e:	d001      	beq.n	8003774 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e000      	b.n	8003776 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3718      	adds	r7, #24
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	40023800 	.word	0x40023800

08003784 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800378e:	2300      	movs	r3, #0
 8003790:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e0d0      	b.n	800393e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800379c:	4b6a      	ldr	r3, [pc, #424]	; (8003948 <HAL_RCC_ClockConfig+0x1c4>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 030f 	and.w	r3, r3, #15
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d910      	bls.n	80037cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037aa:	4b67      	ldr	r3, [pc, #412]	; (8003948 <HAL_RCC_ClockConfig+0x1c4>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f023 020f 	bic.w	r2, r3, #15
 80037b2:	4965      	ldr	r1, [pc, #404]	; (8003948 <HAL_RCC_ClockConfig+0x1c4>)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ba:	4b63      	ldr	r3, [pc, #396]	; (8003948 <HAL_RCC_ClockConfig+0x1c4>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d001      	beq.n	80037cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e0b8      	b.n	800393e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d020      	beq.n	800381a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d005      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037e4:	4b59      	ldr	r3, [pc, #356]	; (800394c <HAL_RCC_ClockConfig+0x1c8>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	4a58      	ldr	r2, [pc, #352]	; (800394c <HAL_RCC_ClockConfig+0x1c8>)
 80037ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0308 	and.w	r3, r3, #8
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d005      	beq.n	8003808 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037fc:	4b53      	ldr	r3, [pc, #332]	; (800394c <HAL_RCC_ClockConfig+0x1c8>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	4a52      	ldr	r2, [pc, #328]	; (800394c <HAL_RCC_ClockConfig+0x1c8>)
 8003802:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003806:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003808:	4b50      	ldr	r3, [pc, #320]	; (800394c <HAL_RCC_ClockConfig+0x1c8>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	494d      	ldr	r1, [pc, #308]	; (800394c <HAL_RCC_ClockConfig+0x1c8>)
 8003816:	4313      	orrs	r3, r2
 8003818:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b00      	cmp	r3, #0
 8003824:	d040      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d107      	bne.n	800383e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800382e:	4b47      	ldr	r3, [pc, #284]	; (800394c <HAL_RCC_ClockConfig+0x1c8>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d115      	bne.n	8003866 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e07f      	b.n	800393e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b02      	cmp	r3, #2
 8003844:	d107      	bne.n	8003856 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003846:	4b41      	ldr	r3, [pc, #260]	; (800394c <HAL_RCC_ClockConfig+0x1c8>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d109      	bne.n	8003866 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e073      	b.n	800393e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003856:	4b3d      	ldr	r3, [pc, #244]	; (800394c <HAL_RCC_ClockConfig+0x1c8>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e06b      	b.n	800393e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003866:	4b39      	ldr	r3, [pc, #228]	; (800394c <HAL_RCC_ClockConfig+0x1c8>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f023 0203 	bic.w	r2, r3, #3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	4936      	ldr	r1, [pc, #216]	; (800394c <HAL_RCC_ClockConfig+0x1c8>)
 8003874:	4313      	orrs	r3, r2
 8003876:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003878:	f7fd fbfa 	bl	8001070 <HAL_GetTick>
 800387c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800387e:	e00a      	b.n	8003896 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003880:	f7fd fbf6 	bl	8001070 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	f241 3288 	movw	r2, #5000	; 0x1388
 800388e:	4293      	cmp	r3, r2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e053      	b.n	800393e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003896:	4b2d      	ldr	r3, [pc, #180]	; (800394c <HAL_RCC_ClockConfig+0x1c8>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 020c 	and.w	r2, r3, #12
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d1eb      	bne.n	8003880 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038a8:	4b27      	ldr	r3, [pc, #156]	; (8003948 <HAL_RCC_ClockConfig+0x1c4>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 030f 	and.w	r3, r3, #15
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d210      	bcs.n	80038d8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038b6:	4b24      	ldr	r3, [pc, #144]	; (8003948 <HAL_RCC_ClockConfig+0x1c4>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f023 020f 	bic.w	r2, r3, #15
 80038be:	4922      	ldr	r1, [pc, #136]	; (8003948 <HAL_RCC_ClockConfig+0x1c4>)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c6:	4b20      	ldr	r3, [pc, #128]	; (8003948 <HAL_RCC_ClockConfig+0x1c4>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d001      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e032      	b.n	800393e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d008      	beq.n	80038f6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038e4:	4b19      	ldr	r3, [pc, #100]	; (800394c <HAL_RCC_ClockConfig+0x1c8>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	4916      	ldr	r1, [pc, #88]	; (800394c <HAL_RCC_ClockConfig+0x1c8>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d009      	beq.n	8003916 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003902:	4b12      	ldr	r3, [pc, #72]	; (800394c <HAL_RCC_ClockConfig+0x1c8>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	490e      	ldr	r1, [pc, #56]	; (800394c <HAL_RCC_ClockConfig+0x1c8>)
 8003912:	4313      	orrs	r3, r2
 8003914:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003916:	f000 f821 	bl	800395c <HAL_RCC_GetSysClockFreq>
 800391a:	4602      	mov	r2, r0
 800391c:	4b0b      	ldr	r3, [pc, #44]	; (800394c <HAL_RCC_ClockConfig+0x1c8>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	091b      	lsrs	r3, r3, #4
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	490a      	ldr	r1, [pc, #40]	; (8003950 <HAL_RCC_ClockConfig+0x1cc>)
 8003928:	5ccb      	ldrb	r3, [r1, r3]
 800392a:	fa22 f303 	lsr.w	r3, r2, r3
 800392e:	4a09      	ldr	r2, [pc, #36]	; (8003954 <HAL_RCC_ClockConfig+0x1d0>)
 8003930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003932:	4b09      	ldr	r3, [pc, #36]	; (8003958 <HAL_RCC_ClockConfig+0x1d4>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f7fd f9e4 	bl	8000d04 <HAL_InitTick>

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	40023c00 	.word	0x40023c00
 800394c:	40023800 	.word	0x40023800
 8003950:	0801be68 	.word	0x0801be68
 8003954:	20000000 	.word	0x20000000
 8003958:	20000004 	.word	0x20000004

0800395c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800395c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003960:	b094      	sub	sp, #80	; 0x50
 8003962:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003964:	2300      	movs	r3, #0
 8003966:	647b      	str	r3, [r7, #68]	; 0x44
 8003968:	2300      	movs	r3, #0
 800396a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800396c:	2300      	movs	r3, #0
 800396e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003970:	2300      	movs	r3, #0
 8003972:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003974:	4b79      	ldr	r3, [pc, #484]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f003 030c 	and.w	r3, r3, #12
 800397c:	2b08      	cmp	r3, #8
 800397e:	d00d      	beq.n	800399c <HAL_RCC_GetSysClockFreq+0x40>
 8003980:	2b08      	cmp	r3, #8
 8003982:	f200 80e1 	bhi.w	8003b48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003986:	2b00      	cmp	r3, #0
 8003988:	d002      	beq.n	8003990 <HAL_RCC_GetSysClockFreq+0x34>
 800398a:	2b04      	cmp	r3, #4
 800398c:	d003      	beq.n	8003996 <HAL_RCC_GetSysClockFreq+0x3a>
 800398e:	e0db      	b.n	8003b48 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003990:	4b73      	ldr	r3, [pc, #460]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x204>)
 8003992:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003994:	e0db      	b.n	8003b4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003996:	4b73      	ldr	r3, [pc, #460]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x208>)
 8003998:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800399a:	e0d8      	b.n	8003b4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800399c:	4b6f      	ldr	r3, [pc, #444]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x200>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039a4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80039a6:	4b6d      	ldr	r3, [pc, #436]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x200>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d063      	beq.n	8003a7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039b2:	4b6a      	ldr	r3, [pc, #424]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x200>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	099b      	lsrs	r3, r3, #6
 80039b8:	2200      	movs	r2, #0
 80039ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80039bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80039be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039c4:	633b      	str	r3, [r7, #48]	; 0x30
 80039c6:	2300      	movs	r3, #0
 80039c8:	637b      	str	r3, [r7, #52]	; 0x34
 80039ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80039ce:	4622      	mov	r2, r4
 80039d0:	462b      	mov	r3, r5
 80039d2:	f04f 0000 	mov.w	r0, #0
 80039d6:	f04f 0100 	mov.w	r1, #0
 80039da:	0159      	lsls	r1, r3, #5
 80039dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039e0:	0150      	lsls	r0, r2, #5
 80039e2:	4602      	mov	r2, r0
 80039e4:	460b      	mov	r3, r1
 80039e6:	4621      	mov	r1, r4
 80039e8:	1a51      	subs	r1, r2, r1
 80039ea:	6139      	str	r1, [r7, #16]
 80039ec:	4629      	mov	r1, r5
 80039ee:	eb63 0301 	sbc.w	r3, r3, r1
 80039f2:	617b      	str	r3, [r7, #20]
 80039f4:	f04f 0200 	mov.w	r2, #0
 80039f8:	f04f 0300 	mov.w	r3, #0
 80039fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a00:	4659      	mov	r1, fp
 8003a02:	018b      	lsls	r3, r1, #6
 8003a04:	4651      	mov	r1, sl
 8003a06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a0a:	4651      	mov	r1, sl
 8003a0c:	018a      	lsls	r2, r1, #6
 8003a0e:	4651      	mov	r1, sl
 8003a10:	ebb2 0801 	subs.w	r8, r2, r1
 8003a14:	4659      	mov	r1, fp
 8003a16:	eb63 0901 	sbc.w	r9, r3, r1
 8003a1a:	f04f 0200 	mov.w	r2, #0
 8003a1e:	f04f 0300 	mov.w	r3, #0
 8003a22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a2e:	4690      	mov	r8, r2
 8003a30:	4699      	mov	r9, r3
 8003a32:	4623      	mov	r3, r4
 8003a34:	eb18 0303 	adds.w	r3, r8, r3
 8003a38:	60bb      	str	r3, [r7, #8]
 8003a3a:	462b      	mov	r3, r5
 8003a3c:	eb49 0303 	adc.w	r3, r9, r3
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	f04f 0200 	mov.w	r2, #0
 8003a46:	f04f 0300 	mov.w	r3, #0
 8003a4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a4e:	4629      	mov	r1, r5
 8003a50:	024b      	lsls	r3, r1, #9
 8003a52:	4621      	mov	r1, r4
 8003a54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a58:	4621      	mov	r1, r4
 8003a5a:	024a      	lsls	r2, r1, #9
 8003a5c:	4610      	mov	r0, r2
 8003a5e:	4619      	mov	r1, r3
 8003a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a62:	2200      	movs	r2, #0
 8003a64:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a6c:	f7fc fc50 	bl	8000310 <__aeabi_uldivmod>
 8003a70:	4602      	mov	r2, r0
 8003a72:	460b      	mov	r3, r1
 8003a74:	4613      	mov	r3, r2
 8003a76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a78:	e058      	b.n	8003b2c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a7a:	4b38      	ldr	r3, [pc, #224]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	099b      	lsrs	r3, r3, #6
 8003a80:	2200      	movs	r2, #0
 8003a82:	4618      	mov	r0, r3
 8003a84:	4611      	mov	r1, r2
 8003a86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a8a:	623b      	str	r3, [r7, #32]
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a94:	4642      	mov	r2, r8
 8003a96:	464b      	mov	r3, r9
 8003a98:	f04f 0000 	mov.w	r0, #0
 8003a9c:	f04f 0100 	mov.w	r1, #0
 8003aa0:	0159      	lsls	r1, r3, #5
 8003aa2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aa6:	0150      	lsls	r0, r2, #5
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4641      	mov	r1, r8
 8003aae:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ab2:	4649      	mov	r1, r9
 8003ab4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ab8:	f04f 0200 	mov.w	r2, #0
 8003abc:	f04f 0300 	mov.w	r3, #0
 8003ac0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ac4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ac8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003acc:	ebb2 040a 	subs.w	r4, r2, sl
 8003ad0:	eb63 050b 	sbc.w	r5, r3, fp
 8003ad4:	f04f 0200 	mov.w	r2, #0
 8003ad8:	f04f 0300 	mov.w	r3, #0
 8003adc:	00eb      	lsls	r3, r5, #3
 8003ade:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ae2:	00e2      	lsls	r2, r4, #3
 8003ae4:	4614      	mov	r4, r2
 8003ae6:	461d      	mov	r5, r3
 8003ae8:	4643      	mov	r3, r8
 8003aea:	18e3      	adds	r3, r4, r3
 8003aec:	603b      	str	r3, [r7, #0]
 8003aee:	464b      	mov	r3, r9
 8003af0:	eb45 0303 	adc.w	r3, r5, r3
 8003af4:	607b      	str	r3, [r7, #4]
 8003af6:	f04f 0200 	mov.w	r2, #0
 8003afa:	f04f 0300 	mov.w	r3, #0
 8003afe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b02:	4629      	mov	r1, r5
 8003b04:	028b      	lsls	r3, r1, #10
 8003b06:	4621      	mov	r1, r4
 8003b08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b0c:	4621      	mov	r1, r4
 8003b0e:	028a      	lsls	r2, r1, #10
 8003b10:	4610      	mov	r0, r2
 8003b12:	4619      	mov	r1, r3
 8003b14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b16:	2200      	movs	r2, #0
 8003b18:	61bb      	str	r3, [r7, #24]
 8003b1a:	61fa      	str	r2, [r7, #28]
 8003b1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b20:	f7fc fbf6 	bl	8000310 <__aeabi_uldivmod>
 8003b24:	4602      	mov	r2, r0
 8003b26:	460b      	mov	r3, r1
 8003b28:	4613      	mov	r3, r2
 8003b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003b2c:	4b0b      	ldr	r3, [pc, #44]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	0c1b      	lsrs	r3, r3, #16
 8003b32:	f003 0303 	and.w	r3, r3, #3
 8003b36:	3301      	adds	r3, #1
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003b3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b46:	e002      	b.n	8003b4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b48:	4b05      	ldr	r3, [pc, #20]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b4a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3750      	adds	r7, #80	; 0x50
 8003b54:	46bd      	mov	sp, r7
 8003b56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b5a:	bf00      	nop
 8003b5c:	40023800 	.word	0x40023800
 8003b60:	00f42400 	.word	0x00f42400
 8003b64:	007a1200 	.word	0x007a1200

08003b68 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b6c:	4b03      	ldr	r3, [pc, #12]	; (8003b7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	20000000 	.word	0x20000000

08003b80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b84:	f7ff fff0 	bl	8003b68 <HAL_RCC_GetHCLKFreq>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	4b05      	ldr	r3, [pc, #20]	; (8003ba0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	0b5b      	lsrs	r3, r3, #13
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	4903      	ldr	r1, [pc, #12]	; (8003ba4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b96:	5ccb      	ldrb	r3, [r1, r3]
 8003b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	0801be78 	.word	0x0801be78

08003ba8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	220f      	movs	r2, #15
 8003bb6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003bb8:	4b12      	ldr	r3, [pc, #72]	; (8003c04 <HAL_RCC_GetClockConfig+0x5c>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f003 0203 	and.w	r2, r3, #3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003bc4:	4b0f      	ldr	r3, [pc, #60]	; (8003c04 <HAL_RCC_GetClockConfig+0x5c>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003bd0:	4b0c      	ldr	r3, [pc, #48]	; (8003c04 <HAL_RCC_GetClockConfig+0x5c>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003bdc:	4b09      	ldr	r3, [pc, #36]	; (8003c04 <HAL_RCC_GetClockConfig+0x5c>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	08db      	lsrs	r3, r3, #3
 8003be2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003bea:	4b07      	ldr	r3, [pc, #28]	; (8003c08 <HAL_RCC_GetClockConfig+0x60>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 020f 	and.w	r2, r3, #15
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	601a      	str	r2, [r3, #0]
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	40023800 	.word	0x40023800
 8003c08:	40023c00 	.word	0x40023c00

08003c0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e049      	b.n	8003cb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d106      	bne.n	8003c38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f841 	bl	8003cba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3304      	adds	r3, #4
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4610      	mov	r0, r2
 8003c4c:	f000 fa00 	bl	8004050 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
	...

08003cd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d001      	beq.n	8003ce8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e054      	b.n	8003d92 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2202      	movs	r2, #2
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68da      	ldr	r2, [r3, #12]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f042 0201 	orr.w	r2, r2, #1
 8003cfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a26      	ldr	r2, [pc, #152]	; (8003da0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d022      	beq.n	8003d50 <HAL_TIM_Base_Start_IT+0x80>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d12:	d01d      	beq.n	8003d50 <HAL_TIM_Base_Start_IT+0x80>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a22      	ldr	r2, [pc, #136]	; (8003da4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d018      	beq.n	8003d50 <HAL_TIM_Base_Start_IT+0x80>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a21      	ldr	r2, [pc, #132]	; (8003da8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d013      	beq.n	8003d50 <HAL_TIM_Base_Start_IT+0x80>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a1f      	ldr	r2, [pc, #124]	; (8003dac <HAL_TIM_Base_Start_IT+0xdc>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d00e      	beq.n	8003d50 <HAL_TIM_Base_Start_IT+0x80>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a1e      	ldr	r2, [pc, #120]	; (8003db0 <HAL_TIM_Base_Start_IT+0xe0>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d009      	beq.n	8003d50 <HAL_TIM_Base_Start_IT+0x80>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a1c      	ldr	r2, [pc, #112]	; (8003db4 <HAL_TIM_Base_Start_IT+0xe4>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d004      	beq.n	8003d50 <HAL_TIM_Base_Start_IT+0x80>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a1b      	ldr	r2, [pc, #108]	; (8003db8 <HAL_TIM_Base_Start_IT+0xe8>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d115      	bne.n	8003d7c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689a      	ldr	r2, [r3, #8]
 8003d56:	4b19      	ldr	r3, [pc, #100]	; (8003dbc <HAL_TIM_Base_Start_IT+0xec>)
 8003d58:	4013      	ands	r3, r2
 8003d5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2b06      	cmp	r3, #6
 8003d60:	d015      	beq.n	8003d8e <HAL_TIM_Base_Start_IT+0xbe>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d68:	d011      	beq.n	8003d8e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f042 0201 	orr.w	r2, r2, #1
 8003d78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d7a:	e008      	b.n	8003d8e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 0201 	orr.w	r2, r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	e000      	b.n	8003d90 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	40010000 	.word	0x40010000
 8003da4:	40000400 	.word	0x40000400
 8003da8:	40000800 	.word	0x40000800
 8003dac:	40000c00 	.word	0x40000c00
 8003db0:	40010400 	.word	0x40010400
 8003db4:	40014000 	.word	0x40014000
 8003db8:	40001800 	.word	0x40001800
 8003dbc:	00010007 	.word	0x00010007

08003dc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d122      	bne.n	8003e1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d11b      	bne.n	8003e1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f06f 0202 	mvn.w	r2, #2
 8003dec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	f003 0303 	and.w	r3, r3, #3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f905 	bl	8004012 <HAL_TIM_IC_CaptureCallback>
 8003e08:	e005      	b.n	8003e16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f8f7 	bl	8003ffe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f908 	bl	8004026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	f003 0304 	and.w	r3, r3, #4
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d122      	bne.n	8003e70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f003 0304 	and.w	r3, r3, #4
 8003e34:	2b04      	cmp	r3, #4
 8003e36:	d11b      	bne.n	8003e70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f06f 0204 	mvn.w	r2, #4
 8003e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2202      	movs	r2, #2
 8003e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 f8db 	bl	8004012 <HAL_TIM_IC_CaptureCallback>
 8003e5c:	e005      	b.n	8003e6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f8cd 	bl	8003ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 f8de 	bl	8004026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	f003 0308 	and.w	r3, r3, #8
 8003e7a:	2b08      	cmp	r3, #8
 8003e7c:	d122      	bne.n	8003ec4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	f003 0308 	and.w	r3, r3, #8
 8003e88:	2b08      	cmp	r3, #8
 8003e8a:	d11b      	bne.n	8003ec4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f06f 0208 	mvn.w	r2, #8
 8003e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2204      	movs	r2, #4
 8003e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	69db      	ldr	r3, [r3, #28]
 8003ea2:	f003 0303 	and.w	r3, r3, #3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d003      	beq.n	8003eb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 f8b1 	bl	8004012 <HAL_TIM_IC_CaptureCallback>
 8003eb0:	e005      	b.n	8003ebe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f8a3 	bl	8003ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 f8b4 	bl	8004026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	f003 0310 	and.w	r3, r3, #16
 8003ece:	2b10      	cmp	r3, #16
 8003ed0:	d122      	bne.n	8003f18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f003 0310 	and.w	r3, r3, #16
 8003edc:	2b10      	cmp	r3, #16
 8003ede:	d11b      	bne.n	8003f18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f06f 0210 	mvn.w	r2, #16
 8003ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2208      	movs	r2, #8
 8003eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d003      	beq.n	8003f06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f887 	bl	8004012 <HAL_TIM_IC_CaptureCallback>
 8003f04:	e005      	b.n	8003f12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f879 	bl	8003ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f88a 	bl	8004026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d10e      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d107      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f06f 0201 	mvn.w	r2, #1
 8003f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7fc fe7e 	bl	8000c40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f4e:	2b80      	cmp	r3, #128	; 0x80
 8003f50:	d10e      	bne.n	8003f70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5c:	2b80      	cmp	r3, #128	; 0x80
 8003f5e:	d107      	bne.n	8003f70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f91a 	bl	80041a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f7e:	d10e      	bne.n	8003f9e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f8a:	2b80      	cmp	r3, #128	; 0x80
 8003f8c:	d107      	bne.n	8003f9e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 f90d 	bl	80041b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa8:	2b40      	cmp	r3, #64	; 0x40
 8003faa:	d10e      	bne.n	8003fca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb6:	2b40      	cmp	r3, #64	; 0x40
 8003fb8:	d107      	bne.n	8003fca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f838 	bl	800403a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	f003 0320 	and.w	r3, r3, #32
 8003fd4:	2b20      	cmp	r3, #32
 8003fd6:	d10e      	bne.n	8003ff6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	f003 0320 	and.w	r3, r3, #32
 8003fe2:	2b20      	cmp	r3, #32
 8003fe4:	d107      	bne.n	8003ff6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f06f 0220 	mvn.w	r2, #32
 8003fee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f8cd 	bl	8004190 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ff6:	bf00      	nop
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ffe:	b480      	push	{r7}
 8004000:	b083      	sub	sp, #12
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004006:	bf00      	nop
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004012:	b480      	push	{r7}
 8004014:	b083      	sub	sp, #12
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800401a:	bf00      	nop
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004042:	bf00      	nop
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
	...

08004050 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a40      	ldr	r2, [pc, #256]	; (8004164 <TIM_Base_SetConfig+0x114>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d013      	beq.n	8004090 <TIM_Base_SetConfig+0x40>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800406e:	d00f      	beq.n	8004090 <TIM_Base_SetConfig+0x40>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a3d      	ldr	r2, [pc, #244]	; (8004168 <TIM_Base_SetConfig+0x118>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d00b      	beq.n	8004090 <TIM_Base_SetConfig+0x40>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a3c      	ldr	r2, [pc, #240]	; (800416c <TIM_Base_SetConfig+0x11c>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d007      	beq.n	8004090 <TIM_Base_SetConfig+0x40>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a3b      	ldr	r2, [pc, #236]	; (8004170 <TIM_Base_SetConfig+0x120>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d003      	beq.n	8004090 <TIM_Base_SetConfig+0x40>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a3a      	ldr	r2, [pc, #232]	; (8004174 <TIM_Base_SetConfig+0x124>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d108      	bne.n	80040a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004096:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	4313      	orrs	r3, r2
 80040a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a2f      	ldr	r2, [pc, #188]	; (8004164 <TIM_Base_SetConfig+0x114>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d02b      	beq.n	8004102 <TIM_Base_SetConfig+0xb2>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b0:	d027      	beq.n	8004102 <TIM_Base_SetConfig+0xb2>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a2c      	ldr	r2, [pc, #176]	; (8004168 <TIM_Base_SetConfig+0x118>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d023      	beq.n	8004102 <TIM_Base_SetConfig+0xb2>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a2b      	ldr	r2, [pc, #172]	; (800416c <TIM_Base_SetConfig+0x11c>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d01f      	beq.n	8004102 <TIM_Base_SetConfig+0xb2>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a2a      	ldr	r2, [pc, #168]	; (8004170 <TIM_Base_SetConfig+0x120>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d01b      	beq.n	8004102 <TIM_Base_SetConfig+0xb2>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a29      	ldr	r2, [pc, #164]	; (8004174 <TIM_Base_SetConfig+0x124>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d017      	beq.n	8004102 <TIM_Base_SetConfig+0xb2>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a28      	ldr	r2, [pc, #160]	; (8004178 <TIM_Base_SetConfig+0x128>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d013      	beq.n	8004102 <TIM_Base_SetConfig+0xb2>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a27      	ldr	r2, [pc, #156]	; (800417c <TIM_Base_SetConfig+0x12c>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d00f      	beq.n	8004102 <TIM_Base_SetConfig+0xb2>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a26      	ldr	r2, [pc, #152]	; (8004180 <TIM_Base_SetConfig+0x130>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d00b      	beq.n	8004102 <TIM_Base_SetConfig+0xb2>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a25      	ldr	r2, [pc, #148]	; (8004184 <TIM_Base_SetConfig+0x134>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d007      	beq.n	8004102 <TIM_Base_SetConfig+0xb2>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a24      	ldr	r2, [pc, #144]	; (8004188 <TIM_Base_SetConfig+0x138>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d003      	beq.n	8004102 <TIM_Base_SetConfig+0xb2>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a23      	ldr	r2, [pc, #140]	; (800418c <TIM_Base_SetConfig+0x13c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d108      	bne.n	8004114 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004108:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	4313      	orrs	r3, r2
 8004112:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	4313      	orrs	r3, r2
 8004120:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a0a      	ldr	r2, [pc, #40]	; (8004164 <TIM_Base_SetConfig+0x114>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d003      	beq.n	8004148 <TIM_Base_SetConfig+0xf8>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a0c      	ldr	r2, [pc, #48]	; (8004174 <TIM_Base_SetConfig+0x124>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d103      	bne.n	8004150 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	691a      	ldr	r2, [r3, #16]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	615a      	str	r2, [r3, #20]
}
 8004156:	bf00      	nop
 8004158:	3714      	adds	r7, #20
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	40010000 	.word	0x40010000
 8004168:	40000400 	.word	0x40000400
 800416c:	40000800 	.word	0x40000800
 8004170:	40000c00 	.word	0x40000c00
 8004174:	40010400 	.word	0x40010400
 8004178:	40014000 	.word	0x40014000
 800417c:	40014400 	.word	0x40014400
 8004180:	40014800 	.word	0x40014800
 8004184:	40001800 	.word	0x40001800
 8004188:	40001c00 	.word	0x40001c00
 800418c:	40002000 	.word	0x40002000

08004190 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80041cc:	b5b0      	push	{r4, r5, r7, lr}
 80041ce:	b08e      	sub	sp, #56	; 0x38
 80041d0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80041d2:	4ba0      	ldr	r3, [pc, #640]	; (8004454 <MX_LWIP_Init+0x288>)
 80041d4:	22c0      	movs	r2, #192	; 0xc0
 80041d6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80041d8:	4b9e      	ldr	r3, [pc, #632]	; (8004454 <MX_LWIP_Init+0x288>)
 80041da:	22a8      	movs	r2, #168	; 0xa8
 80041dc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 178;
 80041de:	4b9d      	ldr	r3, [pc, #628]	; (8004454 <MX_LWIP_Init+0x288>)
 80041e0:	22b2      	movs	r2, #178	; 0xb2
 80041e2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 31;
 80041e4:	4b9b      	ldr	r3, [pc, #620]	; (8004454 <MX_LWIP_Init+0x288>)
 80041e6:	221f      	movs	r2, #31
 80041e8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80041ea:	4b9b      	ldr	r3, [pc, #620]	; (8004458 <MX_LWIP_Init+0x28c>)
 80041ec:	22ff      	movs	r2, #255	; 0xff
 80041ee:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80041f0:	4b99      	ldr	r3, [pc, #612]	; (8004458 <MX_LWIP_Init+0x28c>)
 80041f2:	22ff      	movs	r2, #255	; 0xff
 80041f4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80041f6:	4b98      	ldr	r3, [pc, #608]	; (8004458 <MX_LWIP_Init+0x28c>)
 80041f8:	22ff      	movs	r2, #255	; 0xff
 80041fa:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80041fc:	4b96      	ldr	r3, [pc, #600]	; (8004458 <MX_LWIP_Init+0x28c>)
 80041fe:	2200      	movs	r2, #0
 8004200:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004202:	4b96      	ldr	r3, [pc, #600]	; (800445c <MX_LWIP_Init+0x290>)
 8004204:	22c0      	movs	r2, #192	; 0xc0
 8004206:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004208:	4b94      	ldr	r3, [pc, #592]	; (800445c <MX_LWIP_Init+0x290>)
 800420a:	22a8      	movs	r2, #168	; 0xa8
 800420c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 178;
 800420e:	4b93      	ldr	r3, [pc, #588]	; (800445c <MX_LWIP_Init+0x290>)
 8004210:	22b2      	movs	r2, #178	; 0xb2
 8004212:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004214:	4b91      	ldr	r3, [pc, #580]	; (800445c <MX_LWIP_Init+0x290>)
 8004216:	2201      	movs	r2, #1
 8004218:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800421a:	2100      	movs	r1, #0
 800421c:	2000      	movs	r0, #0
 800421e:	f007 fbb3 	bl	800b988 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004222:	4b8c      	ldr	r3, [pc, #560]	; (8004454 <MX_LWIP_Init+0x288>)
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	061a      	lsls	r2, r3, #24
 8004228:	4b8a      	ldr	r3, [pc, #552]	; (8004454 <MX_LWIP_Init+0x288>)
 800422a:	785b      	ldrb	r3, [r3, #1]
 800422c:	041b      	lsls	r3, r3, #16
 800422e:	431a      	orrs	r2, r3
 8004230:	4b88      	ldr	r3, [pc, #544]	; (8004454 <MX_LWIP_Init+0x288>)
 8004232:	789b      	ldrb	r3, [r3, #2]
 8004234:	021b      	lsls	r3, r3, #8
 8004236:	4313      	orrs	r3, r2
 8004238:	4a86      	ldr	r2, [pc, #536]	; (8004454 <MX_LWIP_Init+0x288>)
 800423a:	78d2      	ldrb	r2, [r2, #3]
 800423c:	4313      	orrs	r3, r2
 800423e:	061a      	lsls	r2, r3, #24
 8004240:	4b84      	ldr	r3, [pc, #528]	; (8004454 <MX_LWIP_Init+0x288>)
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	0619      	lsls	r1, r3, #24
 8004246:	4b83      	ldr	r3, [pc, #524]	; (8004454 <MX_LWIP_Init+0x288>)
 8004248:	785b      	ldrb	r3, [r3, #1]
 800424a:	041b      	lsls	r3, r3, #16
 800424c:	4319      	orrs	r1, r3
 800424e:	4b81      	ldr	r3, [pc, #516]	; (8004454 <MX_LWIP_Init+0x288>)
 8004250:	789b      	ldrb	r3, [r3, #2]
 8004252:	021b      	lsls	r3, r3, #8
 8004254:	430b      	orrs	r3, r1
 8004256:	497f      	ldr	r1, [pc, #508]	; (8004454 <MX_LWIP_Init+0x288>)
 8004258:	78c9      	ldrb	r1, [r1, #3]
 800425a:	430b      	orrs	r3, r1
 800425c:	021b      	lsls	r3, r3, #8
 800425e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004262:	431a      	orrs	r2, r3
 8004264:	4b7b      	ldr	r3, [pc, #492]	; (8004454 <MX_LWIP_Init+0x288>)
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	0619      	lsls	r1, r3, #24
 800426a:	4b7a      	ldr	r3, [pc, #488]	; (8004454 <MX_LWIP_Init+0x288>)
 800426c:	785b      	ldrb	r3, [r3, #1]
 800426e:	041b      	lsls	r3, r3, #16
 8004270:	4319      	orrs	r1, r3
 8004272:	4b78      	ldr	r3, [pc, #480]	; (8004454 <MX_LWIP_Init+0x288>)
 8004274:	789b      	ldrb	r3, [r3, #2]
 8004276:	021b      	lsls	r3, r3, #8
 8004278:	430b      	orrs	r3, r1
 800427a:	4976      	ldr	r1, [pc, #472]	; (8004454 <MX_LWIP_Init+0x288>)
 800427c:	78c9      	ldrb	r1, [r1, #3]
 800427e:	430b      	orrs	r3, r1
 8004280:	0a1b      	lsrs	r3, r3, #8
 8004282:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004286:	431a      	orrs	r2, r3
 8004288:	4b72      	ldr	r3, [pc, #456]	; (8004454 <MX_LWIP_Init+0x288>)
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	0619      	lsls	r1, r3, #24
 800428e:	4b71      	ldr	r3, [pc, #452]	; (8004454 <MX_LWIP_Init+0x288>)
 8004290:	785b      	ldrb	r3, [r3, #1]
 8004292:	041b      	lsls	r3, r3, #16
 8004294:	4319      	orrs	r1, r3
 8004296:	4b6f      	ldr	r3, [pc, #444]	; (8004454 <MX_LWIP_Init+0x288>)
 8004298:	789b      	ldrb	r3, [r3, #2]
 800429a:	021b      	lsls	r3, r3, #8
 800429c:	430b      	orrs	r3, r1
 800429e:	496d      	ldr	r1, [pc, #436]	; (8004454 <MX_LWIP_Init+0x288>)
 80042a0:	78c9      	ldrb	r1, [r1, #3]
 80042a2:	430b      	orrs	r3, r1
 80042a4:	0e1b      	lsrs	r3, r3, #24
 80042a6:	4313      	orrs	r3, r2
 80042a8:	4a6d      	ldr	r2, [pc, #436]	; (8004460 <MX_LWIP_Init+0x294>)
 80042aa:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80042ac:	4b6a      	ldr	r3, [pc, #424]	; (8004458 <MX_LWIP_Init+0x28c>)
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	061a      	lsls	r2, r3, #24
 80042b2:	4b69      	ldr	r3, [pc, #420]	; (8004458 <MX_LWIP_Init+0x28c>)
 80042b4:	785b      	ldrb	r3, [r3, #1]
 80042b6:	041b      	lsls	r3, r3, #16
 80042b8:	431a      	orrs	r2, r3
 80042ba:	4b67      	ldr	r3, [pc, #412]	; (8004458 <MX_LWIP_Init+0x28c>)
 80042bc:	789b      	ldrb	r3, [r3, #2]
 80042be:	021b      	lsls	r3, r3, #8
 80042c0:	4313      	orrs	r3, r2
 80042c2:	4a65      	ldr	r2, [pc, #404]	; (8004458 <MX_LWIP_Init+0x28c>)
 80042c4:	78d2      	ldrb	r2, [r2, #3]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	061a      	lsls	r2, r3, #24
 80042ca:	4b63      	ldr	r3, [pc, #396]	; (8004458 <MX_LWIP_Init+0x28c>)
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	0619      	lsls	r1, r3, #24
 80042d0:	4b61      	ldr	r3, [pc, #388]	; (8004458 <MX_LWIP_Init+0x28c>)
 80042d2:	785b      	ldrb	r3, [r3, #1]
 80042d4:	041b      	lsls	r3, r3, #16
 80042d6:	4319      	orrs	r1, r3
 80042d8:	4b5f      	ldr	r3, [pc, #380]	; (8004458 <MX_LWIP_Init+0x28c>)
 80042da:	789b      	ldrb	r3, [r3, #2]
 80042dc:	021b      	lsls	r3, r3, #8
 80042de:	430b      	orrs	r3, r1
 80042e0:	495d      	ldr	r1, [pc, #372]	; (8004458 <MX_LWIP_Init+0x28c>)
 80042e2:	78c9      	ldrb	r1, [r1, #3]
 80042e4:	430b      	orrs	r3, r1
 80042e6:	021b      	lsls	r3, r3, #8
 80042e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80042ec:	431a      	orrs	r2, r3
 80042ee:	4b5a      	ldr	r3, [pc, #360]	; (8004458 <MX_LWIP_Init+0x28c>)
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	0619      	lsls	r1, r3, #24
 80042f4:	4b58      	ldr	r3, [pc, #352]	; (8004458 <MX_LWIP_Init+0x28c>)
 80042f6:	785b      	ldrb	r3, [r3, #1]
 80042f8:	041b      	lsls	r3, r3, #16
 80042fa:	4319      	orrs	r1, r3
 80042fc:	4b56      	ldr	r3, [pc, #344]	; (8004458 <MX_LWIP_Init+0x28c>)
 80042fe:	789b      	ldrb	r3, [r3, #2]
 8004300:	021b      	lsls	r3, r3, #8
 8004302:	430b      	orrs	r3, r1
 8004304:	4954      	ldr	r1, [pc, #336]	; (8004458 <MX_LWIP_Init+0x28c>)
 8004306:	78c9      	ldrb	r1, [r1, #3]
 8004308:	430b      	orrs	r3, r1
 800430a:	0a1b      	lsrs	r3, r3, #8
 800430c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004310:	431a      	orrs	r2, r3
 8004312:	4b51      	ldr	r3, [pc, #324]	; (8004458 <MX_LWIP_Init+0x28c>)
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	0619      	lsls	r1, r3, #24
 8004318:	4b4f      	ldr	r3, [pc, #316]	; (8004458 <MX_LWIP_Init+0x28c>)
 800431a:	785b      	ldrb	r3, [r3, #1]
 800431c:	041b      	lsls	r3, r3, #16
 800431e:	4319      	orrs	r1, r3
 8004320:	4b4d      	ldr	r3, [pc, #308]	; (8004458 <MX_LWIP_Init+0x28c>)
 8004322:	789b      	ldrb	r3, [r3, #2]
 8004324:	021b      	lsls	r3, r3, #8
 8004326:	430b      	orrs	r3, r1
 8004328:	494b      	ldr	r1, [pc, #300]	; (8004458 <MX_LWIP_Init+0x28c>)
 800432a:	78c9      	ldrb	r1, [r1, #3]
 800432c:	430b      	orrs	r3, r1
 800432e:	0e1b      	lsrs	r3, r3, #24
 8004330:	4313      	orrs	r3, r2
 8004332:	4a4c      	ldr	r2, [pc, #304]	; (8004464 <MX_LWIP_Init+0x298>)
 8004334:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004336:	4b49      	ldr	r3, [pc, #292]	; (800445c <MX_LWIP_Init+0x290>)
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	061a      	lsls	r2, r3, #24
 800433c:	4b47      	ldr	r3, [pc, #284]	; (800445c <MX_LWIP_Init+0x290>)
 800433e:	785b      	ldrb	r3, [r3, #1]
 8004340:	041b      	lsls	r3, r3, #16
 8004342:	431a      	orrs	r2, r3
 8004344:	4b45      	ldr	r3, [pc, #276]	; (800445c <MX_LWIP_Init+0x290>)
 8004346:	789b      	ldrb	r3, [r3, #2]
 8004348:	021b      	lsls	r3, r3, #8
 800434a:	4313      	orrs	r3, r2
 800434c:	4a43      	ldr	r2, [pc, #268]	; (800445c <MX_LWIP_Init+0x290>)
 800434e:	78d2      	ldrb	r2, [r2, #3]
 8004350:	4313      	orrs	r3, r2
 8004352:	061a      	lsls	r2, r3, #24
 8004354:	4b41      	ldr	r3, [pc, #260]	; (800445c <MX_LWIP_Init+0x290>)
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	0619      	lsls	r1, r3, #24
 800435a:	4b40      	ldr	r3, [pc, #256]	; (800445c <MX_LWIP_Init+0x290>)
 800435c:	785b      	ldrb	r3, [r3, #1]
 800435e:	041b      	lsls	r3, r3, #16
 8004360:	4319      	orrs	r1, r3
 8004362:	4b3e      	ldr	r3, [pc, #248]	; (800445c <MX_LWIP_Init+0x290>)
 8004364:	789b      	ldrb	r3, [r3, #2]
 8004366:	021b      	lsls	r3, r3, #8
 8004368:	430b      	orrs	r3, r1
 800436a:	493c      	ldr	r1, [pc, #240]	; (800445c <MX_LWIP_Init+0x290>)
 800436c:	78c9      	ldrb	r1, [r1, #3]
 800436e:	430b      	orrs	r3, r1
 8004370:	021b      	lsls	r3, r3, #8
 8004372:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004376:	431a      	orrs	r2, r3
 8004378:	4b38      	ldr	r3, [pc, #224]	; (800445c <MX_LWIP_Init+0x290>)
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	0619      	lsls	r1, r3, #24
 800437e:	4b37      	ldr	r3, [pc, #220]	; (800445c <MX_LWIP_Init+0x290>)
 8004380:	785b      	ldrb	r3, [r3, #1]
 8004382:	041b      	lsls	r3, r3, #16
 8004384:	4319      	orrs	r1, r3
 8004386:	4b35      	ldr	r3, [pc, #212]	; (800445c <MX_LWIP_Init+0x290>)
 8004388:	789b      	ldrb	r3, [r3, #2]
 800438a:	021b      	lsls	r3, r3, #8
 800438c:	430b      	orrs	r3, r1
 800438e:	4933      	ldr	r1, [pc, #204]	; (800445c <MX_LWIP_Init+0x290>)
 8004390:	78c9      	ldrb	r1, [r1, #3]
 8004392:	430b      	orrs	r3, r1
 8004394:	0a1b      	lsrs	r3, r3, #8
 8004396:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800439a:	431a      	orrs	r2, r3
 800439c:	4b2f      	ldr	r3, [pc, #188]	; (800445c <MX_LWIP_Init+0x290>)
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	0619      	lsls	r1, r3, #24
 80043a2:	4b2e      	ldr	r3, [pc, #184]	; (800445c <MX_LWIP_Init+0x290>)
 80043a4:	785b      	ldrb	r3, [r3, #1]
 80043a6:	041b      	lsls	r3, r3, #16
 80043a8:	4319      	orrs	r1, r3
 80043aa:	4b2c      	ldr	r3, [pc, #176]	; (800445c <MX_LWIP_Init+0x290>)
 80043ac:	789b      	ldrb	r3, [r3, #2]
 80043ae:	021b      	lsls	r3, r3, #8
 80043b0:	430b      	orrs	r3, r1
 80043b2:	492a      	ldr	r1, [pc, #168]	; (800445c <MX_LWIP_Init+0x290>)
 80043b4:	78c9      	ldrb	r1, [r1, #3]
 80043b6:	430b      	orrs	r3, r1
 80043b8:	0e1b      	lsrs	r3, r3, #24
 80043ba:	4313      	orrs	r3, r2
 80043bc:	4a2a      	ldr	r2, [pc, #168]	; (8004468 <MX_LWIP_Init+0x29c>)
 80043be:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80043c0:	4b2a      	ldr	r3, [pc, #168]	; (800446c <MX_LWIP_Init+0x2a0>)
 80043c2:	9302      	str	r3, [sp, #8]
 80043c4:	4b2a      	ldr	r3, [pc, #168]	; (8004470 <MX_LWIP_Init+0x2a4>)
 80043c6:	9301      	str	r3, [sp, #4]
 80043c8:	2300      	movs	r3, #0
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	4b26      	ldr	r3, [pc, #152]	; (8004468 <MX_LWIP_Init+0x29c>)
 80043ce:	4a25      	ldr	r2, [pc, #148]	; (8004464 <MX_LWIP_Init+0x298>)
 80043d0:	4923      	ldr	r1, [pc, #140]	; (8004460 <MX_LWIP_Init+0x294>)
 80043d2:	4828      	ldr	r0, [pc, #160]	; (8004474 <MX_LWIP_Init+0x2a8>)
 80043d4:	f008 f85c 	bl	800c490 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80043d8:	4826      	ldr	r0, [pc, #152]	; (8004474 <MX_LWIP_Init+0x2a8>)
 80043da:	f008 fa0b 	bl	800c7f4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80043de:	4b25      	ldr	r3, [pc, #148]	; (8004474 <MX_LWIP_Init+0x2a8>)
 80043e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80043e4:	089b      	lsrs	r3, r3, #2
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d003      	beq.n	80043f8 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80043f0:	4820      	ldr	r0, [pc, #128]	; (8004474 <MX_LWIP_Init+0x2a8>)
 80043f2:	f008 fa0f 	bl	800c814 <netif_set_up>
 80043f6:	e002      	b.n	80043fe <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80043f8:	481e      	ldr	r0, [pc, #120]	; (8004474 <MX_LWIP_Init+0x2a8>)
 80043fa:	f008 fa77 	bl	800c8ec <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80043fe:	491e      	ldr	r1, [pc, #120]	; (8004478 <MX_LWIP_Init+0x2ac>)
 8004400:	481c      	ldr	r0, [pc, #112]	; (8004474 <MX_LWIP_Init+0x2a8>)
 8004402:	f008 fb09 	bl	800ca18 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8004406:	2300      	movs	r3, #0
 8004408:	623b      	str	r3, [r7, #32]
 800440a:	2300      	movs	r3, #0
 800440c:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 800440e:	f107 0320 	add.w	r3, r7, #32
 8004412:	2101      	movs	r1, #1
 8004414:	4618      	mov	r0, r3
 8004416:	f000 fd95 	bl	8004f44 <osSemaphoreCreate>
 800441a:	4603      	mov	r3, r0
 800441c:	4a17      	ldr	r2, [pc, #92]	; (800447c <MX_LWIP_Init+0x2b0>)
 800441e:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8004420:	4b17      	ldr	r3, [pc, #92]	; (8004480 <MX_LWIP_Init+0x2b4>)
 8004422:	4a14      	ldr	r2, [pc, #80]	; (8004474 <MX_LWIP_Init+0x2a8>)
 8004424:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8004426:	4b15      	ldr	r3, [pc, #84]	; (800447c <MX_LWIP_Init+0x2b0>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a15      	ldr	r2, [pc, #84]	; (8004480 <MX_LWIP_Init+0x2b4>)
 800442c:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 800442e:	4b15      	ldr	r3, [pc, #84]	; (8004484 <MX_LWIP_Init+0x2b8>)
 8004430:	1d3c      	adds	r4, r7, #4
 8004432:	461d      	mov	r5, r3
 8004434:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004436:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004438:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800443c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8004440:	1d3b      	adds	r3, r7, #4
 8004442:	490f      	ldr	r1, [pc, #60]	; (8004480 <MX_LWIP_Init+0x2b4>)
 8004444:	4618      	mov	r0, r3
 8004446:	f000 fc81 	bl	8004d4c <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800444a:	bf00      	nop
 800444c:	3728      	adds	r7, #40	; 0x28
 800444e:	46bd      	mov	sp, r7
 8004450:	bdb0      	pop	{r4, r5, r7, pc}
 8004452:	bf00      	nop
 8004454:	2000085c 	.word	0x2000085c
 8004458:	20000860 	.word	0x20000860
 800445c:	20000864 	.word	0x20000864
 8004460:	20000850 	.word	0x20000850
 8004464:	20000854 	.word	0x20000854
 8004468:	20000858 	.word	0x20000858
 800446c:	0800b899 	.word	0x0800b899
 8004470:	08004ae9 	.word	0x08004ae9
 8004474:	2000081c 	.word	0x2000081c
 8004478:	08004bcd 	.word	0x08004bcd
 800447c:	20000810 	.word	0x20000810
 8004480:	20000814 	.word	0x20000814
 8004484:	080184ac 	.word	0x080184ac

08004488 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b08e      	sub	sp, #56	; 0x38
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]
 8004498:	605a      	str	r2, [r3, #4]
 800449a:	609a      	str	r2, [r3, #8]
 800449c:	60da      	str	r2, [r3, #12]
 800449e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a56      	ldr	r2, [pc, #344]	; (8004600 <HAL_ETH_MspInit+0x178>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	f040 80a6 	bne.w	80045f8 <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80044ac:	4b55      	ldr	r3, [pc, #340]	; (8004604 <HAL_ETH_MspInit+0x17c>)
 80044ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b0:	4a54      	ldr	r2, [pc, #336]	; (8004604 <HAL_ETH_MspInit+0x17c>)
 80044b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80044b6:	6313      	str	r3, [r2, #48]	; 0x30
 80044b8:	4b52      	ldr	r3, [pc, #328]	; (8004604 <HAL_ETH_MspInit+0x17c>)
 80044ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c0:	623b      	str	r3, [r7, #32]
 80044c2:	6a3b      	ldr	r3, [r7, #32]
 80044c4:	4b4f      	ldr	r3, [pc, #316]	; (8004604 <HAL_ETH_MspInit+0x17c>)
 80044c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c8:	4a4e      	ldr	r2, [pc, #312]	; (8004604 <HAL_ETH_MspInit+0x17c>)
 80044ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044ce:	6313      	str	r3, [r2, #48]	; 0x30
 80044d0:	4b4c      	ldr	r3, [pc, #304]	; (8004604 <HAL_ETH_MspInit+0x17c>)
 80044d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044d8:	61fb      	str	r3, [r7, #28]
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	4b49      	ldr	r3, [pc, #292]	; (8004604 <HAL_ETH_MspInit+0x17c>)
 80044de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e0:	4a48      	ldr	r2, [pc, #288]	; (8004604 <HAL_ETH_MspInit+0x17c>)
 80044e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044e6:	6313      	str	r3, [r2, #48]	; 0x30
 80044e8:	4b46      	ldr	r3, [pc, #280]	; (8004604 <HAL_ETH_MspInit+0x17c>)
 80044ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044f0:	61bb      	str	r3, [r7, #24]
 80044f2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044f4:	4b43      	ldr	r3, [pc, #268]	; (8004604 <HAL_ETH_MspInit+0x17c>)
 80044f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f8:	4a42      	ldr	r2, [pc, #264]	; (8004604 <HAL_ETH_MspInit+0x17c>)
 80044fa:	f043 0304 	orr.w	r3, r3, #4
 80044fe:	6313      	str	r3, [r2, #48]	; 0x30
 8004500:	4b40      	ldr	r3, [pc, #256]	; (8004604 <HAL_ETH_MspInit+0x17c>)
 8004502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	617b      	str	r3, [r7, #20]
 800450a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800450c:	4b3d      	ldr	r3, [pc, #244]	; (8004604 <HAL_ETH_MspInit+0x17c>)
 800450e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004510:	4a3c      	ldr	r2, [pc, #240]	; (8004604 <HAL_ETH_MspInit+0x17c>)
 8004512:	f043 0301 	orr.w	r3, r3, #1
 8004516:	6313      	str	r3, [r2, #48]	; 0x30
 8004518:	4b3a      	ldr	r3, [pc, #232]	; (8004604 <HAL_ETH_MspInit+0x17c>)
 800451a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	613b      	str	r3, [r7, #16]
 8004522:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004524:	4b37      	ldr	r3, [pc, #220]	; (8004604 <HAL_ETH_MspInit+0x17c>)
 8004526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004528:	4a36      	ldr	r2, [pc, #216]	; (8004604 <HAL_ETH_MspInit+0x17c>)
 800452a:	f043 0302 	orr.w	r3, r3, #2
 800452e:	6313      	str	r3, [r2, #48]	; 0x30
 8004530:	4b34      	ldr	r3, [pc, #208]	; (8004604 <HAL_ETH_MspInit+0x17c>)
 8004532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	60fb      	str	r3, [r7, #12]
 800453a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800453c:	4b31      	ldr	r3, [pc, #196]	; (8004604 <HAL_ETH_MspInit+0x17c>)
 800453e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004540:	4a30      	ldr	r2, [pc, #192]	; (8004604 <HAL_ETH_MspInit+0x17c>)
 8004542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004546:	6313      	str	r3, [r2, #48]	; 0x30
 8004548:	4b2e      	ldr	r3, [pc, #184]	; (8004604 <HAL_ETH_MspInit+0x17c>)
 800454a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004550:	60bb      	str	r3, [r7, #8]
 8004552:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004554:	2332      	movs	r3, #50	; 0x32
 8004556:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004558:	2302      	movs	r3, #2
 800455a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800455c:	2300      	movs	r3, #0
 800455e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004560:	2303      	movs	r3, #3
 8004562:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004564:	230b      	movs	r3, #11
 8004566:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004568:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800456c:	4619      	mov	r1, r3
 800456e:	4826      	ldr	r0, [pc, #152]	; (8004608 <HAL_ETH_MspInit+0x180>)
 8004570:	f7fe fc2a 	bl	8002dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004574:	2386      	movs	r3, #134	; 0x86
 8004576:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004578:	2302      	movs	r3, #2
 800457a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800457c:	2300      	movs	r3, #0
 800457e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004580:	2303      	movs	r3, #3
 8004582:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004584:	230b      	movs	r3, #11
 8004586:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800458c:	4619      	mov	r1, r3
 800458e:	481f      	ldr	r0, [pc, #124]	; (800460c <HAL_ETH_MspInit+0x184>)
 8004590:	f7fe fc1a 	bl	8002dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004594:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004598:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800459a:	2302      	movs	r3, #2
 800459c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800459e:	2300      	movs	r3, #0
 80045a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045a2:	2303      	movs	r3, #3
 80045a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80045a6:	230b      	movs	r3, #11
 80045a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045ae:	4619      	mov	r1, r3
 80045b0:	4817      	ldr	r0, [pc, #92]	; (8004610 <HAL_ETH_MspInit+0x188>)
 80045b2:	f7fe fc09 	bl	8002dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80045b6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80045ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045bc:	2302      	movs	r3, #2
 80045be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c0:	2300      	movs	r3, #0
 80045c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045c4:	2303      	movs	r3, #3
 80045c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80045c8:	230b      	movs	r3, #11
 80045ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80045cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045d0:	4619      	mov	r1, r3
 80045d2:	4810      	ldr	r0, [pc, #64]	; (8004614 <HAL_ETH_MspInit+0x18c>)
 80045d4:	f7fe fbf8 	bl	8002dc8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80045d8:	2200      	movs	r2, #0
 80045da:	2105      	movs	r1, #5
 80045dc:	203d      	movs	r0, #61	; 0x3d
 80045de:	f7fd fa5d 	bl	8001a9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80045e2:	203d      	movs	r0, #61	; 0x3d
 80045e4:	f7fd fa76 	bl	8001ad4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 80045e8:	2200      	movs	r2, #0
 80045ea:	2105      	movs	r1, #5
 80045ec:	203e      	movs	r0, #62	; 0x3e
 80045ee:	f7fd fa55 	bl	8001a9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 80045f2:	203e      	movs	r0, #62	; 0x3e
 80045f4:	f7fd fa6e 	bl	8001ad4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80045f8:	bf00      	nop
 80045fa:	3738      	adds	r7, #56	; 0x38
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	40028000 	.word	0x40028000
 8004604:	40023800 	.word	0x40023800
 8004608:	40020800 	.word	0x40020800
 800460c:	40020000 	.word	0x40020000
 8004610:	40020400 	.word	0x40020400
 8004614:	40021800 	.word	0x40021800

08004618 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8004620:	4b04      	ldr	r3, [pc, #16]	; (8004634 <HAL_ETH_RxCpltCallback+0x1c>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4618      	mov	r0, r3
 8004626:	f000 fd0d 	bl	8005044 <osSemaphoreRelease>
}
 800462a:	bf00      	nop
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	20003908 	.word	0x20003908

08004638 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004638:	b5b0      	push	{r4, r5, r7, lr}
 800463a:	b090      	sub	sp, #64	; 0x40
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004640:	2300      	movs	r3, #0
 8004642:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004644:	4b60      	ldr	r3, [pc, #384]	; (80047c8 <low_level_init+0x190>)
 8004646:	4a61      	ldr	r2, [pc, #388]	; (80047cc <low_level_init+0x194>)
 8004648:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800464a:	4b5f      	ldr	r3, [pc, #380]	; (80047c8 <low_level_init+0x190>)
 800464c:	2201      	movs	r2, #1
 800464e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8004650:	4b5d      	ldr	r3, [pc, #372]	; (80047c8 <low_level_init+0x190>)
 8004652:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004656:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004658:	4b5b      	ldr	r3, [pc, #364]	; (80047c8 <low_level_init+0x190>)
 800465a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800465e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004660:	4b59      	ldr	r3, [pc, #356]	; (80047c8 <low_level_init+0x190>)
 8004662:	2200      	movs	r2, #0
 8004664:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8004666:	2300      	movs	r3, #0
 8004668:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800466c:	2380      	movs	r3, #128	; 0x80
 800466e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8004672:	23e1      	movs	r3, #225	; 0xe1
 8004674:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8004678:	2300      	movs	r3, #0
 800467a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800467e:	2300      	movs	r3, #0
 8004680:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x01;
 8004684:	2301      	movs	r3, #1
 8004686:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800468a:	4a4f      	ldr	r2, [pc, #316]	; (80047c8 <low_level_init+0x190>)
 800468c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004690:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8004692:	4b4d      	ldr	r3, [pc, #308]	; (80047c8 <low_level_init+0x190>)
 8004694:	2201      	movs	r2, #1
 8004696:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004698:	4b4b      	ldr	r3, [pc, #300]	; (80047c8 <low_level_init+0x190>)
 800469a:	2200      	movs	r2, #0
 800469c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800469e:	4b4a      	ldr	r3, [pc, #296]	; (80047c8 <low_level_init+0x190>)
 80046a0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80046a4:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80046a6:	4848      	ldr	r0, [pc, #288]	; (80047c8 <low_level_init+0x190>)
 80046a8:	f7fd fa22 	bl	8001af0 <HAL_ETH_Init>
 80046ac:	4603      	mov	r3, r0
 80046ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 80046b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d108      	bne.n	80046cc <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80046c0:	f043 0304 	orr.w	r3, r3, #4
 80046c4:	b2da      	uxtb	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80046cc:	2304      	movs	r3, #4
 80046ce:	4a40      	ldr	r2, [pc, #256]	; (80047d0 <low_level_init+0x198>)
 80046d0:	4940      	ldr	r1, [pc, #256]	; (80047d4 <low_level_init+0x19c>)
 80046d2:	483d      	ldr	r0, [pc, #244]	; (80047c8 <low_level_init+0x190>)
 80046d4:	f7fd fba4 	bl	8001e20 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80046d8:	2304      	movs	r3, #4
 80046da:	4a3f      	ldr	r2, [pc, #252]	; (80047d8 <low_level_init+0x1a0>)
 80046dc:	493f      	ldr	r1, [pc, #252]	; (80047dc <low_level_init+0x1a4>)
 80046de:	483a      	ldr	r0, [pc, #232]	; (80047c8 <low_level_init+0x190>)
 80046e0:	f7fd fc06 	bl	8001ef0 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2206      	movs	r2, #6
 80046e8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80046ec:	4b36      	ldr	r3, [pc, #216]	; (80047c8 <low_level_init+0x190>)
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	781a      	ldrb	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80046f8:	4b33      	ldr	r3, [pc, #204]	; (80047c8 <low_level_init+0x190>)
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	785a      	ldrb	r2, [r3, #1]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004704:	4b30      	ldr	r3, [pc, #192]	; (80047c8 <low_level_init+0x190>)
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	789a      	ldrb	r2, [r3, #2]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004710:	4b2d      	ldr	r3, [pc, #180]	; (80047c8 <low_level_init+0x190>)
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	78da      	ldrb	r2, [r3, #3]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800471c:	4b2a      	ldr	r3, [pc, #168]	; (80047c8 <low_level_init+0x190>)
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	791a      	ldrb	r2, [r3, #4]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004728:	4b27      	ldr	r3, [pc, #156]	; (80047c8 <low_level_init+0x190>)
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	795a      	ldrb	r2, [r3, #5]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800473a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004742:	f043 030a 	orr.w	r3, r3, #10
 8004746:	b2da      	uxtb	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800474e:	2300      	movs	r3, #0
 8004750:	62bb      	str	r3, [r7, #40]	; 0x28
 8004752:	2300      	movs	r3, #0
 8004754:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8004756:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800475a:	2101      	movs	r1, #1
 800475c:	4618      	mov	r0, r3
 800475e:	f000 fbf1 	bl	8004f44 <osSemaphoreCreate>
 8004762:	4603      	mov	r3, r0
 8004764:	4a1e      	ldr	r2, [pc, #120]	; (80047e0 <low_level_init+0x1a8>)
 8004766:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8004768:	4b1e      	ldr	r3, [pc, #120]	; (80047e4 <low_level_init+0x1ac>)
 800476a:	f107 040c 	add.w	r4, r7, #12
 800476e:	461d      	mov	r5, r3
 8004770:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004772:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004774:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004778:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800477c:	f107 030c 	add.w	r3, r7, #12
 8004780:	6879      	ldr	r1, [r7, #4]
 8004782:	4618      	mov	r0, r3
 8004784:	f000 fae2 	bl	8004d4c <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004788:	480f      	ldr	r0, [pc, #60]	; (80047c8 <low_level_init+0x190>)
 800478a:	f7fd fed5 	bl	8002538 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800478e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004792:	461a      	mov	r2, r3
 8004794:	211d      	movs	r1, #29
 8004796:	480c      	ldr	r0, [pc, #48]	; (80047c8 <low_level_init+0x190>)
 8004798:	f7fd fe00 	bl	800239c <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800479c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800479e:	f043 030b 	orr.w	r3, r3, #11
 80047a2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80047a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a6:	461a      	mov	r2, r3
 80047a8:	211d      	movs	r1, #29
 80047aa:	4807      	ldr	r0, [pc, #28]	; (80047c8 <low_level_init+0x190>)
 80047ac:	f7fd fe5e 	bl	800246c <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80047b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80047b4:	461a      	mov	r2, r3
 80047b6:	211d      	movs	r1, #29
 80047b8:	4803      	ldr	r0, [pc, #12]	; (80047c8 <low_level_init+0x190>)
 80047ba:	f7fd fdef 	bl	800239c <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80047be:	bf00      	nop
 80047c0:	3740      	adds	r7, #64	; 0x40
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bdb0      	pop	{r4, r5, r7, pc}
 80047c6:	bf00      	nop
 80047c8:	2000390c 	.word	0x2000390c
 80047cc:	40028000 	.word	0x40028000
 80047d0:	20002138 	.word	0x20002138
 80047d4:	200008e8 	.word	0x200008e8
 80047d8:	20000968 	.word	0x20000968
 80047dc:	20000868 	.word	0x20000868
 80047e0:	20003908 	.word	0x20003908
 80047e4:	080184d0 	.word	0x080184d0

080047e8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b08a      	sub	sp, #40	; 0x28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80047f2:	4b4b      	ldr	r3, [pc, #300]	; (8004920 <low_level_output+0x138>)
 80047f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80047fa:	2300      	movs	r3, #0
 80047fc:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80047fe:	2300      	movs	r3, #0
 8004800:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8004802:	2300      	movs	r3, #0
 8004804:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8004806:	2300      	movs	r3, #0
 8004808:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800480a:	4b45      	ldr	r3, [pc, #276]	; (8004920 <low_level_output+0x138>)
 800480c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004810:	2300      	movs	r3, #0
 8004812:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	623b      	str	r3, [r7, #32]
 8004818:	e05a      	b.n	80048d0 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	da03      	bge.n	800482a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8004822:	23f8      	movs	r3, #248	; 0xf8
 8004824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8004828:	e05c      	b.n	80048e4 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800482a:	6a3b      	ldr	r3, [r7, #32]
 800482c:	895b      	ldrh	r3, [r3, #10]
 800482e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8004830:	2300      	movs	r3, #0
 8004832:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004834:	e02f      	b.n	8004896 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8004836:	69fa      	ldr	r2, [r7, #28]
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	18d0      	adds	r0, r2, r3
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	18d1      	adds	r1, r2, r3
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800484a:	1a9b      	subs	r3, r3, r2
 800484c:	461a      	mov	r2, r3
 800484e:	f012 fba7 	bl	8016fa0 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	da03      	bge.n	8004868 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8004860:	23f8      	movs	r3, #248	; 0xf8
 8004862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8004866:	e03d      	b.n	80048e4 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4413      	add	r3, r2
 8004874:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004878:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004884:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004890:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8004892:	2300      	movs	r3, #0
 8004894:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	4413      	add	r3, r2
 800489c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d8c8      	bhi.n	8004836 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80048a4:	69fa      	ldr	r2, [r7, #28]
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	18d0      	adds	r0, r2, r3
 80048aa:	6a3b      	ldr	r3, [r7, #32]
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	4413      	add	r3, r2
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	4619      	mov	r1, r3
 80048b6:	f012 fb73 	bl	8016fa0 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4413      	add	r3, r2
 80048c0:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4413      	add	r3, r2
 80048c8:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80048ca:	6a3b      	ldr	r3, [r7, #32]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	623b      	str	r3, [r7, #32]
 80048d0:	6a3b      	ldr	r3, [r7, #32]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1a1      	bne.n	800481a <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80048d6:	6979      	ldr	r1, [r7, #20]
 80048d8:	4811      	ldr	r0, [pc, #68]	; (8004920 <low_level_output+0x138>)
 80048da:	f7fd fb75 	bl	8001fc8 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80048de:	2300      	movs	r3, #0
 80048e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80048e4:	4b0e      	ldr	r3, [pc, #56]	; (8004920 <low_level_output+0x138>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	f003 0320 	and.w	r3, r3, #32
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00d      	beq.n	8004912 <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80048f6:	4b0a      	ldr	r3, [pc, #40]	; (8004920 <low_level_output+0x138>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048fe:	461a      	mov	r2, r3
 8004900:	2320      	movs	r3, #32
 8004902:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8004904:	4b06      	ldr	r3, [pc, #24]	; (8004920 <low_level_output+0x138>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800490c:	461a      	mov	r2, r3
 800490e:	2300      	movs	r3, #0
 8004910:	6053      	str	r3, [r2, #4]
  }
  return errval;
 8004912:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004916:	4618      	mov	r0, r3
 8004918:	3728      	adds	r7, #40	; 0x28
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	2000390c 	.word	0x2000390c

08004924 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b08c      	sub	sp, #48	; 0x30
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800492c:	2300      	movs	r3, #0
 800492e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8004930:	2300      	movs	r3, #0
 8004932:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8004934:	2300      	movs	r3, #0
 8004936:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8004938:	2300      	movs	r3, #0
 800493a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800493c:	2300      	movs	r3, #0
 800493e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8004940:	2300      	movs	r3, #0
 8004942:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8004944:	2300      	movs	r3, #0
 8004946:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8004948:	484e      	ldr	r0, [pc, #312]	; (8004a84 <low_level_input+0x160>)
 800494a:	f7fd fc27 	bl	800219c <HAL_ETH_GetReceivedFrame_IT>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <low_level_input+0x34>

    return NULL;
 8004954:	2300      	movs	r3, #0
 8004956:	e091      	b.n	8004a7c <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8004958:	4b4a      	ldr	r3, [pc, #296]	; (8004a84 <low_level_input+0x160>)
 800495a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800495c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800495e:	4b49      	ldr	r3, [pc, #292]	; (8004a84 <low_level_input+0x160>)
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8004964:	89fb      	ldrh	r3, [r7, #14]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d007      	beq.n	800497a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800496a:	89fb      	ldrh	r3, [r7, #14]
 800496c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8004970:	4619      	mov	r1, r3
 8004972:	2000      	movs	r0, #0
 8004974:	f008 f91a 	bl	800cbac <pbuf_alloc>
 8004978:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800497a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497c:	2b00      	cmp	r3, #0
 800497e:	d04b      	beq.n	8004a18 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004980:	4b40      	ldr	r3, [pc, #256]	; (8004a84 <low_level_input+0x160>)
 8004982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004984:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8004986:	2300      	movs	r3, #0
 8004988:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800498a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498c:	62bb      	str	r3, [r7, #40]	; 0x28
 800498e:	e040      	b.n	8004a12 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8004990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004992:	895b      	ldrh	r3, [r3, #10]
 8004994:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8004996:	2300      	movs	r3, #0
 8004998:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800499a:	e021      	b.n	80049e0 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800499c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	18d0      	adds	r0, r2, r3
 80049a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	18d1      	adds	r1, r2, r3
 80049aa:	69fa      	ldr	r2, [r7, #28]
 80049ac:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80049b0:	1a9b      	subs	r3, r3, r2
 80049b2:	461a      	mov	r2, r3
 80049b4:	f012 faf4 	bl	8016fa0 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80049b8:	6a3b      	ldr	r3, [r7, #32]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80049be:	6a3b      	ldr	r3, [r7, #32]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80049c4:	69fa      	ldr	r2, [r7, #28]
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	4413      	add	r3, r2
 80049ca:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80049ce:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80049d0:	69ba      	ldr	r2, [r7, #24]
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80049da:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80049dc:	2300      	movs	r3, #0
 80049de:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	4413      	add	r3, r2
 80049e6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d8d6      	bhi.n	800499c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80049ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f0:	685a      	ldr	r2, [r3, #4]
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	18d0      	adds	r0, r2, r3
 80049f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	4413      	add	r3, r2
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	4619      	mov	r1, r3
 8004a00:	f012 face 	bl	8016fa0 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004a04:	69fa      	ldr	r2, [r7, #28]
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	4413      	add	r3, r2
 8004a0a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1bb      	bne.n	8004990 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004a18:	4b1a      	ldr	r3, [pc, #104]	; (8004a84 <low_level_input+0x160>)
 8004a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1c:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004a1e:	2300      	movs	r3, #0
 8004a20:	613b      	str	r3, [r7, #16]
 8004a22:	e00b      	b.n	8004a3c <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8004a24:	6a3b      	ldr	r3, [r7, #32]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004a2c:	6a3b      	ldr	r3, [r7, #32]
 8004a2e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004a30:	6a3b      	ldr	r3, [r7, #32]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	613b      	str	r3, [r7, #16]
 8004a3c:	4b11      	ldr	r3, [pc, #68]	; (8004a84 <low_level_input+0x160>)
 8004a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d3ee      	bcc.n	8004a24 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8004a46:	4b0f      	ldr	r3, [pc, #60]	; (8004a84 <low_level_input+0x160>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8004a4c:	4b0d      	ldr	r3, [pc, #52]	; (8004a84 <low_level_input+0x160>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00d      	beq.n	8004a7a <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8004a5e:	4b09      	ldr	r3, [pc, #36]	; (8004a84 <low_level_input+0x160>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a66:	461a      	mov	r2, r3
 8004a68:	2380      	movs	r3, #128	; 0x80
 8004a6a:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8004a6c:	4b05      	ldr	r3, [pc, #20]	; (8004a84 <low_level_input+0x160>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a74:	461a      	mov	r2, r3
 8004a76:	2300      	movs	r3, #0
 8004a78:	6093      	str	r3, [r2, #8]
  }
  return p;
 8004a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3730      	adds	r7, #48	; 0x30
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	2000390c 	.word	0x2000390c

08004a88 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004a94:	4b12      	ldr	r3, [pc, #72]	; (8004ae0 <ethernetif_input+0x58>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f04f 31ff 	mov.w	r1, #4294967295
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 fa83 	bl	8004fa8 <osSemaphoreWait>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1f5      	bne.n	8004a94 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8004aa8:	480e      	ldr	r0, [pc, #56]	; (8004ae4 <ethernetif_input+0x5c>)
 8004aaa:	f012 f9e5 	bl	8016e78 <sys_mutex_lock>
        p = low_level_input( netif );
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f7ff ff38 	bl	8004924 <low_level_input>
 8004ab4:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00a      	beq.n	8004ad2 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	68f9      	ldr	r1, [r7, #12]
 8004ac2:	68b8      	ldr	r0, [r7, #8]
 8004ac4:	4798      	blx	r3
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d002      	beq.n	8004ad2 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8004acc:	68b8      	ldr	r0, [r7, #8]
 8004ace:	f008 fb83 	bl	800d1d8 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8004ad2:	4804      	ldr	r0, [pc, #16]	; (8004ae4 <ethernetif_input+0x5c>)
 8004ad4:	f012 f9df 	bl	8016e96 <sys_mutex_unlock>
      } while(p!=NULL);
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1e4      	bne.n	8004aa8 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004ade:	e7d9      	b.n	8004a94 <ethernetif_input+0xc>
 8004ae0:	20003908 	.word	0x20003908
 8004ae4:	2000782c 	.word	0x2000782c

08004ae8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d106      	bne.n	8004b04 <ethernetif_init+0x1c>
 8004af6:	4b0e      	ldr	r3, [pc, #56]	; (8004b30 <ethernetif_init+0x48>)
 8004af8:	f240 223a 	movw	r2, #570	; 0x23a
 8004afc:	490d      	ldr	r1, [pc, #52]	; (8004b34 <ethernetif_init+0x4c>)
 8004afe:	480e      	ldr	r0, [pc, #56]	; (8004b38 <ethernetif_init+0x50>)
 8004b00:	f012 fa7e 	bl	8017000 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2273      	movs	r2, #115	; 0x73
 8004b08:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2274      	movs	r2, #116	; 0x74
 8004b10:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a09      	ldr	r2, [pc, #36]	; (8004b3c <ethernetif_init+0x54>)
 8004b18:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a08      	ldr	r2, [pc, #32]	; (8004b40 <ethernetif_init+0x58>)
 8004b1e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f7ff fd89 	bl	8004638 <low_level_init>

  return ERR_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3708      	adds	r7, #8
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	080184ec 	.word	0x080184ec
 8004b34:	08018508 	.word	0x08018508
 8004b38:	08018518 	.word	0x08018518
 8004b3c:	08014c05 	.word	0x08014c05
 8004b40:	080047e9 	.word	0x080047e9

08004b44 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004b48:	f7fc fa92 	bl	8001070 <HAL_GetTick>
 8004b4c:	4603      	mov	r3, r0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	bd80      	pop	{r7, pc}
	...

08004b54 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004b64:	f107 0308 	add.w	r3, r7, #8
 8004b68:	461a      	mov	r2, r3
 8004b6a:	2101      	movs	r1, #1
 8004b6c:	4816      	ldr	r0, [pc, #88]	; (8004bc8 <ethernetif_set_link+0x74>)
 8004b6e:	f7fd fc15 	bl	800239c <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	f003 0304 	and.w	r3, r3, #4
 8004b78:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004b82:	f003 0304 	and.w	r3, r3, #4
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d108      	bne.n	8004b9c <ethernetif_set_link+0x48>
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d005      	beq.n	8004b9c <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4618      	mov	r0, r3
 8004b96:	f007 fedb 	bl	800c950 <netif_set_link_up>
 8004b9a:	e011      	b.n	8004bc0 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004ba4:	089b      	lsrs	r3, r3, #2
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d007      	beq.n	8004bc0 <ethernetif_set_link+0x6c>
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d104      	bne.n	8004bc0 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f007 fefc 	bl	800c9b8 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8004bc0:	20c8      	movs	r0, #200	; 0xc8
 8004bc2:	f000 f90f 	bl	8004de4 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004bc6:	e7cd      	b.n	8004b64 <ethernetif_set_link+0x10>
 8004bc8:	2000390c 	.word	0x2000390c

08004bcc <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004be2:	089b      	lsrs	r3, r3, #2
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d05d      	beq.n	8004caa <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004bee:	4b34      	ldr	r3, [pc, #208]	; (8004cc0 <ethernetif_update_config+0xf4>)
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d03f      	beq.n	8004c76 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8004bf6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	4830      	ldr	r0, [pc, #192]	; (8004cc0 <ethernetif_update_config+0xf4>)
 8004bfe:	f7fd fc35 	bl	800246c <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8004c02:	f7fc fa35 	bl	8001070 <HAL_GetTick>
 8004c06:	4603      	mov	r3, r0
 8004c08:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004c0a:	f107 0308 	add.w	r3, r7, #8
 8004c0e:	461a      	mov	r2, r3
 8004c10:	2101      	movs	r1, #1
 8004c12:	482b      	ldr	r0, [pc, #172]	; (8004cc0 <ethernetif_update_config+0xf4>)
 8004c14:	f7fd fbc2 	bl	800239c <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8004c18:	f7fc fa2a 	bl	8001070 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c26:	d828      	bhi.n	8004c7a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	f003 0320 	and.w	r3, r3, #32
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d0eb      	beq.n	8004c0a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8004c32:	f107 0308 	add.w	r3, r7, #8
 8004c36:	461a      	mov	r2, r3
 8004c38:	2110      	movs	r1, #16
 8004c3a:	4821      	ldr	r0, [pc, #132]	; (8004cc0 <ethernetif_update_config+0xf4>)
 8004c3c:	f7fd fbae 	bl	800239c <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	f003 0304 	and.w	r3, r3, #4
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d004      	beq.n	8004c54 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004c4a:	4b1d      	ldr	r3, [pc, #116]	; (8004cc0 <ethernetif_update_config+0xf4>)
 8004c4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c50:	60da      	str	r2, [r3, #12]
 8004c52:	e002      	b.n	8004c5a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8004c54:	4b1a      	ldr	r3, [pc, #104]	; (8004cc0 <ethernetif_update_config+0xf4>)
 8004c56:	2200      	movs	r2, #0
 8004c58:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d003      	beq.n	8004c6c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8004c64:	4b16      	ldr	r3, [pc, #88]	; (8004cc0 <ethernetif_update_config+0xf4>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	609a      	str	r2, [r3, #8]
 8004c6a:	e016      	b.n	8004c9a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8004c6c:	4b14      	ldr	r3, [pc, #80]	; (8004cc0 <ethernetif_update_config+0xf4>)
 8004c6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004c72:	609a      	str	r2, [r3, #8]
 8004c74:	e011      	b.n	8004c9a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8004c76:	bf00      	nop
 8004c78:	e000      	b.n	8004c7c <ethernetif_update_config+0xb0>
          goto error;
 8004c7a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004c7c:	4b10      	ldr	r3, [pc, #64]	; (8004cc0 <ethernetif_update_config+0xf4>)
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	08db      	lsrs	r3, r3, #3
 8004c82:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8004c84:	4b0e      	ldr	r3, [pc, #56]	; (8004cc0 <ethernetif_update_config+0xf4>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	085b      	lsrs	r3, r3, #1
 8004c8a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	461a      	mov	r2, r3
 8004c92:	2100      	movs	r1, #0
 8004c94:	480a      	ldr	r0, [pc, #40]	; (8004cc0 <ethernetif_update_config+0xf4>)
 8004c96:	f7fd fbe9 	bl	800246c <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8004c9a:	2100      	movs	r1, #0
 8004c9c:	4808      	ldr	r0, [pc, #32]	; (8004cc0 <ethernetif_update_config+0xf4>)
 8004c9e:	f7fd fca9 	bl	80025f4 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8004ca2:	4807      	ldr	r0, [pc, #28]	; (8004cc0 <ethernetif_update_config+0xf4>)
 8004ca4:	f7fd fc48 	bl	8002538 <HAL_ETH_Start>
 8004ca8:	e002      	b.n	8004cb0 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8004caa:	4805      	ldr	r0, [pc, #20]	; (8004cc0 <ethernetif_update_config+0xf4>)
 8004cac:	f7fd fc73 	bl	8002596 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f807 	bl	8004cc4 <ethernetif_notify_conn_changed>
}
 8004cb6:	bf00      	nop
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	2000390c 	.word	0x2000390c

08004cc4 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	4603      	mov	r3, r0
 8004ce0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004ce6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cea:	2b84      	cmp	r3, #132	; 0x84
 8004cec:	d005      	beq.n	8004cfa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004cee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	3303      	adds	r3, #3
 8004cf8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3714      	adds	r7, #20
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d0e:	f3ef 8305 	mrs	r3, IPSR
 8004d12:	607b      	str	r3, [r7, #4]
  return(result);
 8004d14:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	bf14      	ite	ne
 8004d1a:	2301      	movne	r3, #1
 8004d1c:	2300      	moveq	r3, #0
 8004d1e:	b2db      	uxtb	r3, r3
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8004d30:	f7ff ffea 	bl	8004d08 <inHandlerMode>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d003      	beq.n	8004d42 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8004d3a:	f001 ff6f 	bl	8006c1c <xTaskGetTickCountFromISR>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	e002      	b.n	8004d48 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8004d42:	f001 ff5b 	bl	8006bfc <xTaskGetTickCount>
 8004d46:	4603      	mov	r3, r0
  }
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d4e:	b089      	sub	sp, #36	; 0x24
 8004d50:	af04      	add	r7, sp, #16
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d020      	beq.n	8004da0 <osThreadCreate+0x54>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d01c      	beq.n	8004da0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685c      	ldr	r4, [r3, #4]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681d      	ldr	r5, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	691e      	ldr	r6, [r3, #16]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7ff ffad 	bl	8004cd8 <makeFreeRtosPriority>
 8004d7e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d88:	9202      	str	r2, [sp, #8]
 8004d8a:	9301      	str	r3, [sp, #4]
 8004d8c:	9100      	str	r1, [sp, #0]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	4632      	mov	r2, r6
 8004d92:	4629      	mov	r1, r5
 8004d94:	4620      	mov	r0, r4
 8004d96:	f001 fbc5 	bl	8006524 <xTaskCreateStatic>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	60fb      	str	r3, [r7, #12]
 8004d9e:	e01c      	b.n	8004dda <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685c      	ldr	r4, [r3, #4]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004dac:	b29e      	uxth	r6, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7ff ff8f 	bl	8004cd8 <makeFreeRtosPriority>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	f107 030c 	add.w	r3, r7, #12
 8004dc0:	9301      	str	r3, [sp, #4]
 8004dc2:	9200      	str	r2, [sp, #0]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	4632      	mov	r2, r6
 8004dc8:	4629      	mov	r1, r5
 8004dca:	4620      	mov	r0, r4
 8004dcc:	f001 fc0d 	bl	80065ea <xTaskCreate>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d001      	beq.n	8004dda <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	e000      	b.n	8004ddc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004dda:	68fb      	ldr	r3, [r7, #12]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3714      	adds	r7, #20
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004de4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <osDelay+0x16>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	e000      	b.n	8004dfc <osDelay+0x18>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f001 fdb1 	bl	8006964 <vTaskDelay>
  
  return osOK;
 8004e02:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d007      	beq.n	8004e2c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	4619      	mov	r1, r3
 8004e22:	2001      	movs	r0, #1
 8004e24:	f000 fc91 	bl	800574a <xQueueCreateMutexStatic>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	e003      	b.n	8004e34 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004e2c:	2001      	movs	r0, #1
 8004e2e:	f000 fc74 	bl	800571a <xQueueCreateMutex>
 8004e32:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3708      	adds	r7, #8
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004e46:	2300      	movs	r3, #0
 8004e48:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d101      	bne.n	8004e54 <osMutexWait+0x18>
    return osErrorParameter;
 8004e50:	2380      	movs	r3, #128	; 0x80
 8004e52:	e03a      	b.n	8004eca <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8004e54:	2300      	movs	r3, #0
 8004e56:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5e:	d103      	bne.n	8004e68 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8004e60:	f04f 33ff 	mov.w	r3, #4294967295
 8004e64:	60fb      	str	r3, [r7, #12]
 8004e66:	e009      	b.n	8004e7c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d006      	beq.n	8004e7c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <osMutexWait+0x40>
      ticks = 1;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004e7c:	f7ff ff44 	bl	8004d08 <inHandlerMode>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d017      	beq.n	8004eb6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004e86:	f107 0308 	add.w	r3, r7, #8
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f001 f8ac 	bl	8005fec <xQueueReceiveFromISR>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d001      	beq.n	8004e9e <osMutexWait+0x62>
      return osErrorOS;
 8004e9a:	23ff      	movs	r3, #255	; 0xff
 8004e9c:	e015      	b.n	8004eca <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d011      	beq.n	8004ec8 <osMutexWait+0x8c>
 8004ea4:	4b0b      	ldr	r3, [pc, #44]	; (8004ed4 <osMutexWait+0x98>)
 8004ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eaa:	601a      	str	r2, [r3, #0]
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	f3bf 8f6f 	isb	sy
 8004eb4:	e008      	b.n	8004ec8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004eb6:	68f9      	ldr	r1, [r7, #12]
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 ff83 	bl	8005dc4 <xQueueSemaphoreTake>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d001      	beq.n	8004ec8 <osMutexWait+0x8c>
    return osErrorOS;
 8004ec4:	23ff      	movs	r3, #255	; 0xff
 8004ec6:	e000      	b.n	8004eca <osMutexWait+0x8e>
  }
  
  return osOK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	e000ed04 	.word	0xe000ed04

08004ed8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004ee8:	f7ff ff0e 	bl	8004d08 <inHandlerMode>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d016      	beq.n	8004f20 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004ef2:	f107 0308 	add.w	r3, r7, #8
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 fde7 	bl	8005acc <xQueueGiveFromISR>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d001      	beq.n	8004f08 <osMutexRelease+0x30>
      return osErrorOS;
 8004f04:	23ff      	movs	r3, #255	; 0xff
 8004f06:	e017      	b.n	8004f38 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d013      	beq.n	8004f36 <osMutexRelease+0x5e>
 8004f0e:	4b0c      	ldr	r3, [pc, #48]	; (8004f40 <osMutexRelease+0x68>)
 8004f10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f14:	601a      	str	r2, [r3, #0]
 8004f16:	f3bf 8f4f 	dsb	sy
 8004f1a:	f3bf 8f6f 	isb	sy
 8004f1e:	e00a      	b.n	8004f36 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004f20:	2300      	movs	r3, #0
 8004f22:	2200      	movs	r2, #0
 8004f24:	2100      	movs	r1, #0
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 fc2a 	bl	8005780 <xQueueGenericSend>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d001      	beq.n	8004f36 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8004f32:	23ff      	movs	r3, #255	; 0xff
 8004f34:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8004f36:	68fb      	ldr	r3, [r7, #12]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	e000ed04 	.word	0xe000ed04

08004f44 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b086      	sub	sp, #24
 8004f48:	af02      	add	r7, sp, #8
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00f      	beq.n	8004f76 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d10a      	bne.n	8004f72 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	2203      	movs	r2, #3
 8004f62:	9200      	str	r2, [sp, #0]
 8004f64:	2200      	movs	r2, #0
 8004f66:	2100      	movs	r1, #0
 8004f68:	2001      	movs	r0, #1
 8004f6a:	f000 fad9 	bl	8005520 <xQueueGenericCreateStatic>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	e016      	b.n	8004fa0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8004f72:	2300      	movs	r3, #0
 8004f74:	e014      	b.n	8004fa0 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d110      	bne.n	8004f9e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8004f7c:	2203      	movs	r2, #3
 8004f7e:	2100      	movs	r1, #0
 8004f80:	2001      	movs	r0, #1
 8004f82:	f000 fb4f 	bl	8005624 <xQueueGenericCreate>
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d005      	beq.n	8004f9a <osSemaphoreCreate+0x56>
 8004f8e:	2300      	movs	r3, #0
 8004f90:	2200      	movs	r2, #0
 8004f92:	2100      	movs	r1, #0
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f000 fbf3 	bl	8005780 <xQueueGenericSend>
      return sema;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	e000      	b.n	8004fa0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004f9e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004fbc:	2380      	movs	r3, #128	; 0x80
 8004fbe:	e03a      	b.n	8005036 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fca:	d103      	bne.n	8004fd4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8004fd0:	60fb      	str	r3, [r7, #12]
 8004fd2:	e009      	b.n	8004fe8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d006      	beq.n	8004fe8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d101      	bne.n	8004fe8 <osSemaphoreWait+0x40>
      ticks = 1;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004fe8:	f7ff fe8e 	bl	8004d08 <inHandlerMode>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d017      	beq.n	8005022 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004ff2:	f107 0308 	add.w	r3, r7, #8
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 fff6 	bl	8005fec <xQueueReceiveFromISR>
 8005000:	4603      	mov	r3, r0
 8005002:	2b01      	cmp	r3, #1
 8005004:	d001      	beq.n	800500a <osSemaphoreWait+0x62>
      return osErrorOS;
 8005006:	23ff      	movs	r3, #255	; 0xff
 8005008:	e015      	b.n	8005036 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d011      	beq.n	8005034 <osSemaphoreWait+0x8c>
 8005010:	4b0b      	ldr	r3, [pc, #44]	; (8005040 <osSemaphoreWait+0x98>)
 8005012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005016:	601a      	str	r2, [r3, #0]
 8005018:	f3bf 8f4f 	dsb	sy
 800501c:	f3bf 8f6f 	isb	sy
 8005020:	e008      	b.n	8005034 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005022:	68f9      	ldr	r1, [r7, #12]
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 fecd 	bl	8005dc4 <xQueueSemaphoreTake>
 800502a:	4603      	mov	r3, r0
 800502c:	2b01      	cmp	r3, #1
 800502e:	d001      	beq.n	8005034 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005030:	23ff      	movs	r3, #255	; 0xff
 8005032:	e000      	b.n	8005036 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	e000ed04 	.word	0xe000ed04

08005044 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800504c:	2300      	movs	r3, #0
 800504e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005050:	2300      	movs	r3, #0
 8005052:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005054:	f7ff fe58 	bl	8004d08 <inHandlerMode>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d016      	beq.n	800508c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800505e:	f107 0308 	add.w	r3, r7, #8
 8005062:	4619      	mov	r1, r3
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 fd31 	bl	8005acc <xQueueGiveFromISR>
 800506a:	4603      	mov	r3, r0
 800506c:	2b01      	cmp	r3, #1
 800506e:	d001      	beq.n	8005074 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005070:	23ff      	movs	r3, #255	; 0xff
 8005072:	e017      	b.n	80050a4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d013      	beq.n	80050a2 <osSemaphoreRelease+0x5e>
 800507a:	4b0c      	ldr	r3, [pc, #48]	; (80050ac <osSemaphoreRelease+0x68>)
 800507c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005080:	601a      	str	r2, [r3, #0]
 8005082:	f3bf 8f4f 	dsb	sy
 8005086:	f3bf 8f6f 	isb	sy
 800508a:	e00a      	b.n	80050a2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800508c:	2300      	movs	r3, #0
 800508e:	2200      	movs	r2, #0
 8005090:	2100      	movs	r1, #0
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 fb74 	bl	8005780 <xQueueGenericSend>
 8005098:	4603      	mov	r3, r0
 800509a:	2b01      	cmp	r3, #1
 800509c:	d001      	beq.n	80050a2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800509e:	23ff      	movs	r3, #255	; 0xff
 80050a0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80050a2:	68fb      	ldr	r3, [r7, #12]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	e000ed04 	.word	0xe000ed04

080050b0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80050b8:	f7ff fe26 	bl	8004d08 <inHandlerMode>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d001      	beq.n	80050c6 <osSemaphoreDelete+0x16>
    return osErrorISR;
 80050c2:	2382      	movs	r3, #130	; 0x82
 80050c4:	e003      	b.n	80050ce <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f001 f856 	bl	8006178 <vQueueDelete>

  return osOK; 
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3708      	adds	r7, #8
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80050d6:	b590      	push	{r4, r7, lr}
 80050d8:	b085      	sub	sp, #20
 80050da:	af02      	add	r7, sp, #8
 80050dc:	6078      	str	r0, [r7, #4]
 80050de:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d011      	beq.n	800510c <osMessageCreate+0x36>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00d      	beq.n	800510c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6818      	ldr	r0, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6859      	ldr	r1, [r3, #4]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689a      	ldr	r2, [r3, #8]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	2400      	movs	r4, #0
 8005102:	9400      	str	r4, [sp, #0]
 8005104:	f000 fa0c 	bl	8005520 <xQueueGenericCreateStatic>
 8005108:	4603      	mov	r3, r0
 800510a:	e008      	b.n	800511e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6818      	ldr	r0, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	4619      	mov	r1, r3
 8005118:	f000 fa84 	bl	8005624 <xQueueGenericCreate>
 800511c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800511e:	4618      	mov	r0, r3
 8005120:	370c      	adds	r7, #12
 8005122:	46bd      	mov	sp, r7
 8005124:	bd90      	pop	{r4, r7, pc}
	...

08005128 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005134:	2300      	movs	r3, #0
 8005136:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <osMessagePut+0x1e>
    ticks = 1;
 8005142:	2301      	movs	r3, #1
 8005144:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8005146:	f7ff fddf 	bl	8004d08 <inHandlerMode>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d018      	beq.n	8005182 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005150:	f107 0210 	add.w	r2, r7, #16
 8005154:	f107 0108 	add.w	r1, r7, #8
 8005158:	2300      	movs	r3, #0
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f000 fc16 	bl	800598c <xQueueGenericSendFromISR>
 8005160:	4603      	mov	r3, r0
 8005162:	2b01      	cmp	r3, #1
 8005164:	d001      	beq.n	800516a <osMessagePut+0x42>
      return osErrorOS;
 8005166:	23ff      	movs	r3, #255	; 0xff
 8005168:	e018      	b.n	800519c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d014      	beq.n	800519a <osMessagePut+0x72>
 8005170:	4b0c      	ldr	r3, [pc, #48]	; (80051a4 <osMessagePut+0x7c>)
 8005172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005176:	601a      	str	r2, [r3, #0]
 8005178:	f3bf 8f4f 	dsb	sy
 800517c:	f3bf 8f6f 	isb	sy
 8005180:	e00b      	b.n	800519a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005182:	f107 0108 	add.w	r1, r7, #8
 8005186:	2300      	movs	r3, #0
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	f000 faf8 	bl	8005780 <xQueueGenericSend>
 8005190:	4603      	mov	r3, r0
 8005192:	2b01      	cmp	r3, #1
 8005194:	d001      	beq.n	800519a <osMessagePut+0x72>
      return osErrorOS;
 8005196:	23ff      	movs	r3, #255	; 0xff
 8005198:	e000      	b.n	800519c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3718      	adds	r7, #24
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	e000ed04 	.word	0xe000ed04

080051a8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80051a8:	b590      	push	{r4, r7, lr}
 80051aa:	b08b      	sub	sp, #44	; 0x2c
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80051b8:	2300      	movs	r3, #0
 80051ba:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10a      	bne.n	80051d8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80051c2:	2380      	movs	r3, #128	; 0x80
 80051c4:	617b      	str	r3, [r7, #20]
    return event;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	461c      	mov	r4, r3
 80051ca:	f107 0314 	add.w	r3, r7, #20
 80051ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80051d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80051d6:	e054      	b.n	8005282 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80051d8:	2300      	movs	r3, #0
 80051da:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80051dc:	2300      	movs	r3, #0
 80051de:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e6:	d103      	bne.n	80051f0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80051e8:	f04f 33ff 	mov.w	r3, #4294967295
 80051ec:	627b      	str	r3, [r7, #36]	; 0x24
 80051ee:	e009      	b.n	8005204 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d006      	beq.n	8005204 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d101      	bne.n	8005204 <osMessageGet+0x5c>
      ticks = 1;
 8005200:	2301      	movs	r3, #1
 8005202:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005204:	f7ff fd80 	bl	8004d08 <inHandlerMode>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d01c      	beq.n	8005248 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800520e:	f107 0220 	add.w	r2, r7, #32
 8005212:	f107 0314 	add.w	r3, r7, #20
 8005216:	3304      	adds	r3, #4
 8005218:	4619      	mov	r1, r3
 800521a:	68b8      	ldr	r0, [r7, #8]
 800521c:	f000 fee6 	bl	8005fec <xQueueReceiveFromISR>
 8005220:	4603      	mov	r3, r0
 8005222:	2b01      	cmp	r3, #1
 8005224:	d102      	bne.n	800522c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005226:	2310      	movs	r3, #16
 8005228:	617b      	str	r3, [r7, #20]
 800522a:	e001      	b.n	8005230 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800522c:	2300      	movs	r3, #0
 800522e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005230:	6a3b      	ldr	r3, [r7, #32]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d01d      	beq.n	8005272 <osMessageGet+0xca>
 8005236:	4b15      	ldr	r3, [pc, #84]	; (800528c <osMessageGet+0xe4>)
 8005238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800523c:	601a      	str	r2, [r3, #0]
 800523e:	f3bf 8f4f 	dsb	sy
 8005242:	f3bf 8f6f 	isb	sy
 8005246:	e014      	b.n	8005272 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005248:	f107 0314 	add.w	r3, r7, #20
 800524c:	3304      	adds	r3, #4
 800524e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005250:	4619      	mov	r1, r3
 8005252:	68b8      	ldr	r0, [r7, #8]
 8005254:	f000 fcd0 	bl	8005bf8 <xQueueReceive>
 8005258:	4603      	mov	r3, r0
 800525a:	2b01      	cmp	r3, #1
 800525c:	d102      	bne.n	8005264 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800525e:	2310      	movs	r3, #16
 8005260:	617b      	str	r3, [r7, #20]
 8005262:	e006      	b.n	8005272 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <osMessageGet+0xc6>
 800526a:	2300      	movs	r3, #0
 800526c:	e000      	b.n	8005270 <osMessageGet+0xc8>
 800526e:	2340      	movs	r3, #64	; 0x40
 8005270:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	461c      	mov	r4, r3
 8005276:	f107 0314 	add.w	r3, r7, #20
 800527a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800527e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	372c      	adds	r7, #44	; 0x2c
 8005286:	46bd      	mov	sp, r7
 8005288:	bd90      	pop	{r4, r7, pc}
 800528a:	bf00      	nop
 800528c:	e000ed04 	.word	0xe000ed04

08005290 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005298:	f7ff fd36 	bl	8004d08 <inHandlerMode>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d004      	beq.n	80052ac <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 ff48 	bl	8006138 <uxQueueMessagesWaitingFromISR>
 80052a8:	4603      	mov	r3, r0
 80052aa:	e003      	b.n	80052b4 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 ff23 	bl	80060f8 <uxQueueMessagesWaiting>
 80052b2:	4603      	mov	r3, r0
  }
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3708      	adds	r7, #8
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80052c4:	f7ff fd20 	bl	8004d08 <inHandlerMode>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <osMessageDelete+0x16>
    return osErrorISR;
 80052ce:	2382      	movs	r3, #130	; 0x82
 80052d0:	e003      	b.n	80052da <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 ff50 	bl	8006178 <vQueueDelete>

  return osOK; 
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80052e2:	b480      	push	{r7}
 80052e4:	b083      	sub	sp, #12
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f103 0208 	add.w	r2, r3, #8
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f04f 32ff 	mov.w	r2, #4294967295
 80052fa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f103 0208 	add.w	r2, r3, #8
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f103 0208 	add.w	r2, r3, #8
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005316:	bf00      	nop
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005322:	b480      	push	{r7}
 8005324:	b083      	sub	sp, #12
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	689a      	ldr	r2, [r3, #8]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	683a      	ldr	r2, [r7, #0]
 8005360:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	683a      	ldr	r2, [r7, #0]
 8005366:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	1c5a      	adds	r2, r3, #1
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	601a      	str	r2, [r3, #0]
}
 8005378:	bf00      	nop
 800537a:	3714      	adds	r7, #20
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800539a:	d103      	bne.n	80053a4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	60fb      	str	r3, [r7, #12]
 80053a2:	e00c      	b.n	80053be <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	3308      	adds	r3, #8
 80053a8:	60fb      	str	r3, [r7, #12]
 80053aa:	e002      	b.n	80053b2 <vListInsert+0x2e>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	60fb      	str	r3, [r7, #12]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d2f6      	bcs.n	80053ac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	683a      	ldr	r2, [r7, #0]
 80053d8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	1c5a      	adds	r2, r3, #1
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	601a      	str	r2, [r3, #0]
}
 80053ea:	bf00      	nop
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80053f6:	b480      	push	{r7}
 80053f8:	b085      	sub	sp, #20
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	6892      	ldr	r2, [r2, #8]
 800540c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	6852      	ldr	r2, [r2, #4]
 8005416:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	429a      	cmp	r2, r3
 8005420:	d103      	bne.n	800542a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	689a      	ldr	r2, [r3, #8]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	1e5a      	subs	r2, r3, #1
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
}
 800543e:	4618      	mov	r0, r3
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
	...

0800544c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d10c      	bne.n	800547a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005464:	b672      	cpsid	i
 8005466:	f383 8811 	msr	BASEPRI, r3
 800546a:	f3bf 8f6f 	isb	sy
 800546e:	f3bf 8f4f 	dsb	sy
 8005472:	b662      	cpsie	i
 8005474:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005476:	bf00      	nop
 8005478:	e7fe      	b.n	8005478 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800547a:	f002 fdff 	bl	800807c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005486:	68f9      	ldr	r1, [r7, #12]
 8005488:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800548a:	fb01 f303 	mul.w	r3, r1, r3
 800548e:	441a      	add	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054aa:	3b01      	subs	r3, #1
 80054ac:	68f9      	ldr	r1, [r7, #12]
 80054ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054b0:	fb01 f303 	mul.w	r3, r1, r3
 80054b4:	441a      	add	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	22ff      	movs	r2, #255	; 0xff
 80054be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	22ff      	movs	r2, #255	; 0xff
 80054c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d114      	bne.n	80054fa <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d01a      	beq.n	800550e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	3310      	adds	r3, #16
 80054dc:	4618      	mov	r0, r3
 80054de:	f001 fd1b 	bl	8006f18 <xTaskRemoveFromEventList>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d012      	beq.n	800550e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80054e8:	4b0c      	ldr	r3, [pc, #48]	; (800551c <xQueueGenericReset+0xd0>)
 80054ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	f3bf 8f4f 	dsb	sy
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	e009      	b.n	800550e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	3310      	adds	r3, #16
 80054fe:	4618      	mov	r0, r3
 8005500:	f7ff feef 	bl	80052e2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	3324      	adds	r3, #36	; 0x24
 8005508:	4618      	mov	r0, r3
 800550a:	f7ff feea 	bl	80052e2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800550e:	f002 fde9 	bl	80080e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005512:	2301      	movs	r3, #1
}
 8005514:	4618      	mov	r0, r3
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	e000ed04 	.word	0xe000ed04

08005520 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005520:	b580      	push	{r7, lr}
 8005522:	b08e      	sub	sp, #56	; 0x38
 8005524:	af02      	add	r7, sp, #8
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
 800552c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10c      	bne.n	800554e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8005534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005538:	b672      	cpsid	i
 800553a:	f383 8811 	msr	BASEPRI, r3
 800553e:	f3bf 8f6f 	isb	sy
 8005542:	f3bf 8f4f 	dsb	sy
 8005546:	b662      	cpsie	i
 8005548:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800554a:	bf00      	nop
 800554c:	e7fe      	b.n	800554c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10c      	bne.n	800556e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8005554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005558:	b672      	cpsid	i
 800555a:	f383 8811 	msr	BASEPRI, r3
 800555e:	f3bf 8f6f 	isb	sy
 8005562:	f3bf 8f4f 	dsb	sy
 8005566:	b662      	cpsie	i
 8005568:	627b      	str	r3, [r7, #36]	; 0x24
}
 800556a:	bf00      	nop
 800556c:	e7fe      	b.n	800556c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d002      	beq.n	800557a <xQueueGenericCreateStatic+0x5a>
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <xQueueGenericCreateStatic+0x5e>
 800557a:	2301      	movs	r3, #1
 800557c:	e000      	b.n	8005580 <xQueueGenericCreateStatic+0x60>
 800557e:	2300      	movs	r3, #0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10c      	bne.n	800559e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8005584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005588:	b672      	cpsid	i
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	b662      	cpsie	i
 8005598:	623b      	str	r3, [r7, #32]
}
 800559a:	bf00      	nop
 800559c:	e7fe      	b.n	800559c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d102      	bne.n	80055aa <xQueueGenericCreateStatic+0x8a>
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <xQueueGenericCreateStatic+0x8e>
 80055aa:	2301      	movs	r3, #1
 80055ac:	e000      	b.n	80055b0 <xQueueGenericCreateStatic+0x90>
 80055ae:	2300      	movs	r3, #0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d10c      	bne.n	80055ce <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80055b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b8:	b672      	cpsid	i
 80055ba:	f383 8811 	msr	BASEPRI, r3
 80055be:	f3bf 8f6f 	isb	sy
 80055c2:	f3bf 8f4f 	dsb	sy
 80055c6:	b662      	cpsie	i
 80055c8:	61fb      	str	r3, [r7, #28]
}
 80055ca:	bf00      	nop
 80055cc:	e7fe      	b.n	80055cc <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80055ce:	2348      	movs	r3, #72	; 0x48
 80055d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	2b48      	cmp	r3, #72	; 0x48
 80055d6:	d00c      	beq.n	80055f2 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80055d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055dc:	b672      	cpsid	i
 80055de:	f383 8811 	msr	BASEPRI, r3
 80055e2:	f3bf 8f6f 	isb	sy
 80055e6:	f3bf 8f4f 	dsb	sy
 80055ea:	b662      	cpsie	i
 80055ec:	61bb      	str	r3, [r7, #24]
}
 80055ee:	bf00      	nop
 80055f0:	e7fe      	b.n	80055f0 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80055f2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80055f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00d      	beq.n	800561a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80055fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005600:	2201      	movs	r2, #1
 8005602:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005606:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800560a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560c:	9300      	str	r3, [sp, #0]
 800560e:	4613      	mov	r3, r2
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	68b9      	ldr	r1, [r7, #8]
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f000 f847 	bl	80056a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800561a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800561c:	4618      	mov	r0, r3
 800561e:	3730      	adds	r7, #48	; 0x30
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005624:	b580      	push	{r7, lr}
 8005626:	b08a      	sub	sp, #40	; 0x28
 8005628:	af02      	add	r7, sp, #8
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	4613      	mov	r3, r2
 8005630:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10c      	bne.n	8005652 <xQueueGenericCreate+0x2e>
	__asm volatile
 8005638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563c:	b672      	cpsid	i
 800563e:	f383 8811 	msr	BASEPRI, r3
 8005642:	f3bf 8f6f 	isb	sy
 8005646:	f3bf 8f4f 	dsb	sy
 800564a:	b662      	cpsie	i
 800564c:	613b      	str	r3, [r7, #16]
}
 800564e:	bf00      	nop
 8005650:	e7fe      	b.n	8005650 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d102      	bne.n	800565e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005658:	2300      	movs	r3, #0
 800565a:	61fb      	str	r3, [r7, #28]
 800565c:	e004      	b.n	8005668 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	fb02 f303 	mul.w	r3, r2, r3
 8005666:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	3348      	adds	r3, #72	; 0x48
 800566c:	4618      	mov	r0, r3
 800566e:	f002 fe31 	bl	80082d4 <pvPortMalloc>
 8005672:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d011      	beq.n	800569e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	3348      	adds	r3, #72	; 0x48
 8005682:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800568c:	79fa      	ldrb	r2, [r7, #7]
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	4613      	mov	r3, r2
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	68b9      	ldr	r1, [r7, #8]
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f000 f805 	bl	80056a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800569e:	69bb      	ldr	r3, [r7, #24]
	}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3720      	adds	r7, #32
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
 80056b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d103      	bne.n	80056c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	69ba      	ldr	r2, [r7, #24]
 80056c0:	601a      	str	r2, [r3, #0]
 80056c2:	e002      	b.n	80056ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	68ba      	ldr	r2, [r7, #8]
 80056d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80056d6:	2101      	movs	r1, #1
 80056d8:	69b8      	ldr	r0, [r7, #24]
 80056da:	f7ff feb7 	bl	800544c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80056de:	bf00      	nop
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b082      	sub	sp, #8
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00e      	beq.n	8005712 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005706:	2300      	movs	r3, #0
 8005708:	2200      	movs	r2, #0
 800570a:	2100      	movs	r1, #0
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 f837 	bl	8005780 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005712:	bf00      	nop
 8005714:	3708      	adds	r7, #8
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800571a:	b580      	push	{r7, lr}
 800571c:	b086      	sub	sp, #24
 800571e:	af00      	add	r7, sp, #0
 8005720:	4603      	mov	r3, r0
 8005722:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005724:	2301      	movs	r3, #1
 8005726:	617b      	str	r3, [r7, #20]
 8005728:	2300      	movs	r3, #0
 800572a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800572c:	79fb      	ldrb	r3, [r7, #7]
 800572e:	461a      	mov	r2, r3
 8005730:	6939      	ldr	r1, [r7, #16]
 8005732:	6978      	ldr	r0, [r7, #20]
 8005734:	f7ff ff76 	bl	8005624 <xQueueGenericCreate>
 8005738:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f7ff ffd3 	bl	80056e6 <prvInitialiseMutex>

		return xNewQueue;
 8005740:	68fb      	ldr	r3, [r7, #12]
	}
 8005742:	4618      	mov	r0, r3
 8005744:	3718      	adds	r7, #24
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800574a:	b580      	push	{r7, lr}
 800574c:	b088      	sub	sp, #32
 800574e:	af02      	add	r7, sp, #8
 8005750:	4603      	mov	r3, r0
 8005752:	6039      	str	r1, [r7, #0]
 8005754:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005756:	2301      	movs	r3, #1
 8005758:	617b      	str	r3, [r7, #20]
 800575a:	2300      	movs	r3, #0
 800575c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800575e:	79fb      	ldrb	r3, [r7, #7]
 8005760:	9300      	str	r3, [sp, #0]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2200      	movs	r2, #0
 8005766:	6939      	ldr	r1, [r7, #16]
 8005768:	6978      	ldr	r0, [r7, #20]
 800576a:	f7ff fed9 	bl	8005520 <xQueueGenericCreateStatic>
 800576e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f7ff ffb8 	bl	80056e6 <prvInitialiseMutex>

		return xNewQueue;
 8005776:	68fb      	ldr	r3, [r7, #12]
	}
 8005778:	4618      	mov	r0, r3
 800577a:	3718      	adds	r7, #24
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b08e      	sub	sp, #56	; 0x38
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]
 800578c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800578e:	2300      	movs	r3, #0
 8005790:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005798:	2b00      	cmp	r3, #0
 800579a:	d10c      	bne.n	80057b6 <xQueueGenericSend+0x36>
	__asm volatile
 800579c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a0:	b672      	cpsid	i
 80057a2:	f383 8811 	msr	BASEPRI, r3
 80057a6:	f3bf 8f6f 	isb	sy
 80057aa:	f3bf 8f4f 	dsb	sy
 80057ae:	b662      	cpsie	i
 80057b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80057b2:	bf00      	nop
 80057b4:	e7fe      	b.n	80057b4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d103      	bne.n	80057c4 <xQueueGenericSend+0x44>
 80057bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d101      	bne.n	80057c8 <xQueueGenericSend+0x48>
 80057c4:	2301      	movs	r3, #1
 80057c6:	e000      	b.n	80057ca <xQueueGenericSend+0x4a>
 80057c8:	2300      	movs	r3, #0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d10c      	bne.n	80057e8 <xQueueGenericSend+0x68>
	__asm volatile
 80057ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d2:	b672      	cpsid	i
 80057d4:	f383 8811 	msr	BASEPRI, r3
 80057d8:	f3bf 8f6f 	isb	sy
 80057dc:	f3bf 8f4f 	dsb	sy
 80057e0:	b662      	cpsie	i
 80057e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80057e4:	bf00      	nop
 80057e6:	e7fe      	b.n	80057e6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d103      	bne.n	80057f6 <xQueueGenericSend+0x76>
 80057ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d101      	bne.n	80057fa <xQueueGenericSend+0x7a>
 80057f6:	2301      	movs	r3, #1
 80057f8:	e000      	b.n	80057fc <xQueueGenericSend+0x7c>
 80057fa:	2300      	movs	r3, #0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10c      	bne.n	800581a <xQueueGenericSend+0x9a>
	__asm volatile
 8005800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005804:	b672      	cpsid	i
 8005806:	f383 8811 	msr	BASEPRI, r3
 800580a:	f3bf 8f6f 	isb	sy
 800580e:	f3bf 8f4f 	dsb	sy
 8005812:	b662      	cpsie	i
 8005814:	623b      	str	r3, [r7, #32]
}
 8005816:	bf00      	nop
 8005818:	e7fe      	b.n	8005818 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800581a:	f001 fd43 	bl	80072a4 <xTaskGetSchedulerState>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d102      	bne.n	800582a <xQueueGenericSend+0xaa>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <xQueueGenericSend+0xae>
 800582a:	2301      	movs	r3, #1
 800582c:	e000      	b.n	8005830 <xQueueGenericSend+0xb0>
 800582e:	2300      	movs	r3, #0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10c      	bne.n	800584e <xQueueGenericSend+0xce>
	__asm volatile
 8005834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005838:	b672      	cpsid	i
 800583a:	f383 8811 	msr	BASEPRI, r3
 800583e:	f3bf 8f6f 	isb	sy
 8005842:	f3bf 8f4f 	dsb	sy
 8005846:	b662      	cpsie	i
 8005848:	61fb      	str	r3, [r7, #28]
}
 800584a:	bf00      	nop
 800584c:	e7fe      	b.n	800584c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800584e:	f002 fc15 	bl	800807c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005854:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800585a:	429a      	cmp	r2, r3
 800585c:	d302      	bcc.n	8005864 <xQueueGenericSend+0xe4>
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	2b02      	cmp	r3, #2
 8005862:	d129      	bne.n	80058b8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005864:	683a      	ldr	r2, [r7, #0]
 8005866:	68b9      	ldr	r1, [r7, #8]
 8005868:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800586a:	f000 fcc2 	bl	80061f2 <prvCopyDataToQueue>
 800586e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005874:	2b00      	cmp	r3, #0
 8005876:	d010      	beq.n	800589a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587a:	3324      	adds	r3, #36	; 0x24
 800587c:	4618      	mov	r0, r3
 800587e:	f001 fb4b 	bl	8006f18 <xTaskRemoveFromEventList>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d013      	beq.n	80058b0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005888:	4b3f      	ldr	r3, [pc, #252]	; (8005988 <xQueueGenericSend+0x208>)
 800588a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800588e:	601a      	str	r2, [r3, #0]
 8005890:	f3bf 8f4f 	dsb	sy
 8005894:	f3bf 8f6f 	isb	sy
 8005898:	e00a      	b.n	80058b0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800589a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589c:	2b00      	cmp	r3, #0
 800589e:	d007      	beq.n	80058b0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80058a0:	4b39      	ldr	r3, [pc, #228]	; (8005988 <xQueueGenericSend+0x208>)
 80058a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058a6:	601a      	str	r2, [r3, #0]
 80058a8:	f3bf 8f4f 	dsb	sy
 80058ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80058b0:	f002 fc18 	bl	80080e4 <vPortExitCritical>
				return pdPASS;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e063      	b.n	8005980 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d103      	bne.n	80058c6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80058be:	f002 fc11 	bl	80080e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80058c2:	2300      	movs	r3, #0
 80058c4:	e05c      	b.n	8005980 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d106      	bne.n	80058da <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058cc:	f107 0314 	add.w	r3, r7, #20
 80058d0:	4618      	mov	r0, r3
 80058d2:	f001 fb85 	bl	8006fe0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058d6:	2301      	movs	r3, #1
 80058d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058da:	f002 fc03 	bl	80080e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80058de:	f001 f8e1 	bl	8006aa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058e2:	f002 fbcb 	bl	800807c <vPortEnterCritical>
 80058e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058ec:	b25b      	sxtb	r3, r3
 80058ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f2:	d103      	bne.n	80058fc <xQueueGenericSend+0x17c>
 80058f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005902:	b25b      	sxtb	r3, r3
 8005904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005908:	d103      	bne.n	8005912 <xQueueGenericSend+0x192>
 800590a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590c:	2200      	movs	r2, #0
 800590e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005912:	f002 fbe7 	bl	80080e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005916:	1d3a      	adds	r2, r7, #4
 8005918:	f107 0314 	add.w	r3, r7, #20
 800591c:	4611      	mov	r1, r2
 800591e:	4618      	mov	r0, r3
 8005920:	f001 fb74 	bl	800700c <xTaskCheckForTimeOut>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d124      	bne.n	8005974 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800592a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800592c:	f000 fd59 	bl	80063e2 <prvIsQueueFull>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d018      	beq.n	8005968 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005938:	3310      	adds	r3, #16
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	4611      	mov	r1, r2
 800593e:	4618      	mov	r0, r3
 8005940:	f001 fa96 	bl	8006e70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005944:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005946:	f000 fce4 	bl	8006312 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800594a:	f001 f8b9 	bl	8006ac0 <xTaskResumeAll>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	f47f af7c 	bne.w	800584e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8005956:	4b0c      	ldr	r3, [pc, #48]	; (8005988 <xQueueGenericSend+0x208>)
 8005958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800595c:	601a      	str	r2, [r3, #0]
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	f3bf 8f6f 	isb	sy
 8005966:	e772      	b.n	800584e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005968:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800596a:	f000 fcd2 	bl	8006312 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800596e:	f001 f8a7 	bl	8006ac0 <xTaskResumeAll>
 8005972:	e76c      	b.n	800584e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005974:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005976:	f000 fccc 	bl	8006312 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800597a:	f001 f8a1 	bl	8006ac0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800597e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005980:	4618      	mov	r0, r3
 8005982:	3738      	adds	r7, #56	; 0x38
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	e000ed04 	.word	0xe000ed04

0800598c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b08e      	sub	sp, #56	; 0x38
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
 8005998:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800599e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d10c      	bne.n	80059be <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80059a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a8:	b672      	cpsid	i
 80059aa:	f383 8811 	msr	BASEPRI, r3
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	b662      	cpsie	i
 80059b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80059ba:	bf00      	nop
 80059bc:	e7fe      	b.n	80059bc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d103      	bne.n	80059cc <xQueueGenericSendFromISR+0x40>
 80059c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d101      	bne.n	80059d0 <xQueueGenericSendFromISR+0x44>
 80059cc:	2301      	movs	r3, #1
 80059ce:	e000      	b.n	80059d2 <xQueueGenericSendFromISR+0x46>
 80059d0:	2300      	movs	r3, #0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d10c      	bne.n	80059f0 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80059d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059da:	b672      	cpsid	i
 80059dc:	f383 8811 	msr	BASEPRI, r3
 80059e0:	f3bf 8f6f 	isb	sy
 80059e4:	f3bf 8f4f 	dsb	sy
 80059e8:	b662      	cpsie	i
 80059ea:	623b      	str	r3, [r7, #32]
}
 80059ec:	bf00      	nop
 80059ee:	e7fe      	b.n	80059ee <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d103      	bne.n	80059fe <xQueueGenericSendFromISR+0x72>
 80059f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d101      	bne.n	8005a02 <xQueueGenericSendFromISR+0x76>
 80059fe:	2301      	movs	r3, #1
 8005a00:	e000      	b.n	8005a04 <xQueueGenericSendFromISR+0x78>
 8005a02:	2300      	movs	r3, #0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d10c      	bne.n	8005a22 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8005a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0c:	b672      	cpsid	i
 8005a0e:	f383 8811 	msr	BASEPRI, r3
 8005a12:	f3bf 8f6f 	isb	sy
 8005a16:	f3bf 8f4f 	dsb	sy
 8005a1a:	b662      	cpsie	i
 8005a1c:	61fb      	str	r3, [r7, #28]
}
 8005a1e:	bf00      	nop
 8005a20:	e7fe      	b.n	8005a20 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a22:	f002 fc13 	bl	800824c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005a26:	f3ef 8211 	mrs	r2, BASEPRI
 8005a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2e:	b672      	cpsid	i
 8005a30:	f383 8811 	msr	BASEPRI, r3
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	b662      	cpsie	i
 8005a3e:	61ba      	str	r2, [r7, #24]
 8005a40:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005a42:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a44:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d302      	bcc.n	8005a58 <xQueueGenericSendFromISR+0xcc>
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d12c      	bne.n	8005ab2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a62:	683a      	ldr	r2, [r7, #0]
 8005a64:	68b9      	ldr	r1, [r7, #8]
 8005a66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a68:	f000 fbc3 	bl	80061f2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005a6c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a74:	d112      	bne.n	8005a9c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d016      	beq.n	8005aac <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a80:	3324      	adds	r3, #36	; 0x24
 8005a82:	4618      	mov	r0, r3
 8005a84:	f001 fa48 	bl	8006f18 <xTaskRemoveFromEventList>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00e      	beq.n	8005aac <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00b      	beq.n	8005aac <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	601a      	str	r2, [r3, #0]
 8005a9a:	e007      	b.n	8005aac <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005a9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	b25a      	sxtb	r2, r3
 8005aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005aac:	2301      	movs	r3, #1
 8005aae:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005ab0:	e001      	b.n	8005ab6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005ac0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3738      	adds	r7, #56	; 0x38
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b08e      	sub	sp, #56	; 0x38
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10c      	bne.n	8005afa <xQueueGiveFromISR+0x2e>
	__asm volatile
 8005ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae4:	b672      	cpsid	i
 8005ae6:	f383 8811 	msr	BASEPRI, r3
 8005aea:	f3bf 8f6f 	isb	sy
 8005aee:	f3bf 8f4f 	dsb	sy
 8005af2:	b662      	cpsie	i
 8005af4:	623b      	str	r3, [r7, #32]
}
 8005af6:	bf00      	nop
 8005af8:	e7fe      	b.n	8005af8 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00c      	beq.n	8005b1c <xQueueGiveFromISR+0x50>
	__asm volatile
 8005b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b06:	b672      	cpsid	i
 8005b08:	f383 8811 	msr	BASEPRI, r3
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	f3bf 8f4f 	dsb	sy
 8005b14:	b662      	cpsie	i
 8005b16:	61fb      	str	r3, [r7, #28]
}
 8005b18:	bf00      	nop
 8005b1a:	e7fe      	b.n	8005b1a <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d103      	bne.n	8005b2c <xQueueGiveFromISR+0x60>
 8005b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d101      	bne.n	8005b30 <xQueueGiveFromISR+0x64>
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e000      	b.n	8005b32 <xQueueGiveFromISR+0x66>
 8005b30:	2300      	movs	r3, #0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10c      	bne.n	8005b50 <xQueueGiveFromISR+0x84>
	__asm volatile
 8005b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3a:	b672      	cpsid	i
 8005b3c:	f383 8811 	msr	BASEPRI, r3
 8005b40:	f3bf 8f6f 	isb	sy
 8005b44:	f3bf 8f4f 	dsb	sy
 8005b48:	b662      	cpsie	i
 8005b4a:	61bb      	str	r3, [r7, #24]
}
 8005b4c:	bf00      	nop
 8005b4e:	e7fe      	b.n	8005b4e <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b50:	f002 fb7c 	bl	800824c <vPortValidateInterruptPriority>
	__asm volatile
 8005b54:	f3ef 8211 	mrs	r2, BASEPRI
 8005b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5c:	b672      	cpsid	i
 8005b5e:	f383 8811 	msr	BASEPRI, r3
 8005b62:	f3bf 8f6f 	isb	sy
 8005b66:	f3bf 8f4f 	dsb	sy
 8005b6a:	b662      	cpsie	i
 8005b6c:	617a      	str	r2, [r7, #20]
 8005b6e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005b70:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b72:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b78:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d22b      	bcs.n	8005bdc <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b90:	1c5a      	adds	r2, r3, #1
 8005b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b94:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005b96:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b9e:	d112      	bne.n	8005bc6 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d016      	beq.n	8005bd6 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005baa:	3324      	adds	r3, #36	; 0x24
 8005bac:	4618      	mov	r0, r3
 8005bae:	f001 f9b3 	bl	8006f18 <xTaskRemoveFromEventList>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00e      	beq.n	8005bd6 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00b      	beq.n	8005bd6 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	e007      	b.n	8005bd6 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005bc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005bca:	3301      	adds	r3, #1
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	b25a      	sxtb	r2, r3
 8005bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	637b      	str	r3, [r7, #52]	; 0x34
 8005bda:	e001      	b.n	8005be0 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	637b      	str	r3, [r7, #52]	; 0x34
 8005be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f383 8811 	msr	BASEPRI, r3
}
 8005bea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3738      	adds	r7, #56	; 0x38
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
	...

08005bf8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b08c      	sub	sp, #48	; 0x30
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c04:	2300      	movs	r3, #0
 8005c06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10c      	bne.n	8005c2c <xQueueReceive+0x34>
	__asm volatile
 8005c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c16:	b672      	cpsid	i
 8005c18:	f383 8811 	msr	BASEPRI, r3
 8005c1c:	f3bf 8f6f 	isb	sy
 8005c20:	f3bf 8f4f 	dsb	sy
 8005c24:	b662      	cpsie	i
 8005c26:	623b      	str	r3, [r7, #32]
}
 8005c28:	bf00      	nop
 8005c2a:	e7fe      	b.n	8005c2a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d103      	bne.n	8005c3a <xQueueReceive+0x42>
 8005c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d101      	bne.n	8005c3e <xQueueReceive+0x46>
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e000      	b.n	8005c40 <xQueueReceive+0x48>
 8005c3e:	2300      	movs	r3, #0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d10c      	bne.n	8005c5e <xQueueReceive+0x66>
	__asm volatile
 8005c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c48:	b672      	cpsid	i
 8005c4a:	f383 8811 	msr	BASEPRI, r3
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f3bf 8f4f 	dsb	sy
 8005c56:	b662      	cpsie	i
 8005c58:	61fb      	str	r3, [r7, #28]
}
 8005c5a:	bf00      	nop
 8005c5c:	e7fe      	b.n	8005c5c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c5e:	f001 fb21 	bl	80072a4 <xTaskGetSchedulerState>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d102      	bne.n	8005c6e <xQueueReceive+0x76>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d101      	bne.n	8005c72 <xQueueReceive+0x7a>
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e000      	b.n	8005c74 <xQueueReceive+0x7c>
 8005c72:	2300      	movs	r3, #0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10c      	bne.n	8005c92 <xQueueReceive+0x9a>
	__asm volatile
 8005c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7c:	b672      	cpsid	i
 8005c7e:	f383 8811 	msr	BASEPRI, r3
 8005c82:	f3bf 8f6f 	isb	sy
 8005c86:	f3bf 8f4f 	dsb	sy
 8005c8a:	b662      	cpsie	i
 8005c8c:	61bb      	str	r3, [r7, #24]
}
 8005c8e:	bf00      	nop
 8005c90:	e7fe      	b.n	8005c90 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c92:	f002 f9f3 	bl	800807c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d01f      	beq.n	8005ce2 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ca2:	68b9      	ldr	r1, [r7, #8]
 8005ca4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ca6:	f000 fb0e 	bl	80062c6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	1e5a      	subs	r2, r3, #1
 8005cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00f      	beq.n	8005cda <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cbc:	3310      	adds	r3, #16
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f001 f92a 	bl	8006f18 <xTaskRemoveFromEventList>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d007      	beq.n	8005cda <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005cca:	4b3d      	ldr	r3, [pc, #244]	; (8005dc0 <xQueueReceive+0x1c8>)
 8005ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cd0:	601a      	str	r2, [r3, #0]
 8005cd2:	f3bf 8f4f 	dsb	sy
 8005cd6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005cda:	f002 fa03 	bl	80080e4 <vPortExitCritical>
				return pdPASS;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e069      	b.n	8005db6 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d103      	bne.n	8005cf0 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ce8:	f002 f9fc 	bl	80080e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005cec:	2300      	movs	r3, #0
 8005cee:	e062      	b.n	8005db6 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d106      	bne.n	8005d04 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005cf6:	f107 0310 	add.w	r3, r7, #16
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f001 f970 	bl	8006fe0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d00:	2301      	movs	r3, #1
 8005d02:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d04:	f002 f9ee 	bl	80080e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d08:	f000 fecc 	bl	8006aa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d0c:	f002 f9b6 	bl	800807c <vPortEnterCritical>
 8005d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d16:	b25b      	sxtb	r3, r3
 8005d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1c:	d103      	bne.n	8005d26 <xQueueReceive+0x12e>
 8005d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d2c:	b25b      	sxtb	r3, r3
 8005d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d32:	d103      	bne.n	8005d3c <xQueueReceive+0x144>
 8005d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d3c:	f002 f9d2 	bl	80080e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d40:	1d3a      	adds	r2, r7, #4
 8005d42:	f107 0310 	add.w	r3, r7, #16
 8005d46:	4611      	mov	r1, r2
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f001 f95f 	bl	800700c <xTaskCheckForTimeOut>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d123      	bne.n	8005d9c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d56:	f000 fb2e 	bl	80063b6 <prvIsQueueEmpty>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d017      	beq.n	8005d90 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d62:	3324      	adds	r3, #36	; 0x24
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	4611      	mov	r1, r2
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f001 f881 	bl	8006e70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d70:	f000 facf 	bl	8006312 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d74:	f000 fea4 	bl	8006ac0 <xTaskResumeAll>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d189      	bne.n	8005c92 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8005d7e:	4b10      	ldr	r3, [pc, #64]	; (8005dc0 <xQueueReceive+0x1c8>)
 8005d80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d84:	601a      	str	r2, [r3, #0]
 8005d86:	f3bf 8f4f 	dsb	sy
 8005d8a:	f3bf 8f6f 	isb	sy
 8005d8e:	e780      	b.n	8005c92 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005d90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d92:	f000 fabe 	bl	8006312 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d96:	f000 fe93 	bl	8006ac0 <xTaskResumeAll>
 8005d9a:	e77a      	b.n	8005c92 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005d9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d9e:	f000 fab8 	bl	8006312 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005da2:	f000 fe8d 	bl	8006ac0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005da6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005da8:	f000 fb05 	bl	80063b6 <prvIsQueueEmpty>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	f43f af6f 	beq.w	8005c92 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005db4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3730      	adds	r7, #48	; 0x30
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	e000ed04 	.word	0xe000ed04

08005dc4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b08e      	sub	sp, #56	; 0x38
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10c      	bne.n	8005dfa <xQueueSemaphoreTake+0x36>
	__asm volatile
 8005de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de4:	b672      	cpsid	i
 8005de6:	f383 8811 	msr	BASEPRI, r3
 8005dea:	f3bf 8f6f 	isb	sy
 8005dee:	f3bf 8f4f 	dsb	sy
 8005df2:	b662      	cpsie	i
 8005df4:	623b      	str	r3, [r7, #32]
}
 8005df6:	bf00      	nop
 8005df8:	e7fe      	b.n	8005df8 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00c      	beq.n	8005e1c <xQueueSemaphoreTake+0x58>
	__asm volatile
 8005e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e06:	b672      	cpsid	i
 8005e08:	f383 8811 	msr	BASEPRI, r3
 8005e0c:	f3bf 8f6f 	isb	sy
 8005e10:	f3bf 8f4f 	dsb	sy
 8005e14:	b662      	cpsie	i
 8005e16:	61fb      	str	r3, [r7, #28]
}
 8005e18:	bf00      	nop
 8005e1a:	e7fe      	b.n	8005e1a <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e1c:	f001 fa42 	bl	80072a4 <xTaskGetSchedulerState>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d102      	bne.n	8005e2c <xQueueSemaphoreTake+0x68>
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d101      	bne.n	8005e30 <xQueueSemaphoreTake+0x6c>
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e000      	b.n	8005e32 <xQueueSemaphoreTake+0x6e>
 8005e30:	2300      	movs	r3, #0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10c      	bne.n	8005e50 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8005e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3a:	b672      	cpsid	i
 8005e3c:	f383 8811 	msr	BASEPRI, r3
 8005e40:	f3bf 8f6f 	isb	sy
 8005e44:	f3bf 8f4f 	dsb	sy
 8005e48:	b662      	cpsie	i
 8005e4a:	61bb      	str	r3, [r7, #24]
}
 8005e4c:	bf00      	nop
 8005e4e:	e7fe      	b.n	8005e4e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e50:	f002 f914 	bl	800807c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e58:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d024      	beq.n	8005eaa <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e62:	1e5a      	subs	r2, r3, #1
 8005e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e66:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d104      	bne.n	8005e7a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005e70:	f001 fbde 	bl	8007630 <pvTaskIncrementMutexHeldCount>
 8005e74:	4602      	mov	r2, r0
 8005e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e78:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00f      	beq.n	8005ea2 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e84:	3310      	adds	r3, #16
 8005e86:	4618      	mov	r0, r3
 8005e88:	f001 f846 	bl	8006f18 <xTaskRemoveFromEventList>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d007      	beq.n	8005ea2 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005e92:	4b55      	ldr	r3, [pc, #340]	; (8005fe8 <xQueueSemaphoreTake+0x224>)
 8005e94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e98:	601a      	str	r2, [r3, #0]
 8005e9a:	f3bf 8f4f 	dsb	sy
 8005e9e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ea2:	f002 f91f 	bl	80080e4 <vPortExitCritical>
				return pdPASS;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e099      	b.n	8005fde <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d113      	bne.n	8005ed8 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00c      	beq.n	8005ed0 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8005eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eba:	b672      	cpsid	i
 8005ebc:	f383 8811 	msr	BASEPRI, r3
 8005ec0:	f3bf 8f6f 	isb	sy
 8005ec4:	f3bf 8f4f 	dsb	sy
 8005ec8:	b662      	cpsie	i
 8005eca:	617b      	str	r3, [r7, #20]
}
 8005ecc:	bf00      	nop
 8005ece:	e7fe      	b.n	8005ece <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005ed0:	f002 f908 	bl	80080e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	e082      	b.n	8005fde <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d106      	bne.n	8005eec <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ede:	f107 030c 	add.w	r3, r7, #12
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f001 f87c 	bl	8006fe0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005eec:	f002 f8fa 	bl	80080e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ef0:	f000 fdd8 	bl	8006aa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ef4:	f002 f8c2 	bl	800807c <vPortEnterCritical>
 8005ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005efe:	b25b      	sxtb	r3, r3
 8005f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f04:	d103      	bne.n	8005f0e <xQueueSemaphoreTake+0x14a>
 8005f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f14:	b25b      	sxtb	r3, r3
 8005f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f1a:	d103      	bne.n	8005f24 <xQueueSemaphoreTake+0x160>
 8005f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f24:	f002 f8de 	bl	80080e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f28:	463a      	mov	r2, r7
 8005f2a:	f107 030c 	add.w	r3, r7, #12
 8005f2e:	4611      	mov	r1, r2
 8005f30:	4618      	mov	r0, r3
 8005f32:	f001 f86b 	bl	800700c <xTaskCheckForTimeOut>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d132      	bne.n	8005fa2 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f3e:	f000 fa3a 	bl	80063b6 <prvIsQueueEmpty>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d026      	beq.n	8005f96 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d109      	bne.n	8005f64 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8005f50:	f002 f894 	bl	800807c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f001 f9c1 	bl	80072e0 <xTaskPriorityInherit>
 8005f5e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005f60:	f002 f8c0 	bl	80080e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f66:	3324      	adds	r3, #36	; 0x24
 8005f68:	683a      	ldr	r2, [r7, #0]
 8005f6a:	4611      	mov	r1, r2
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f000 ff7f 	bl	8006e70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005f72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f74:	f000 f9cd 	bl	8006312 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005f78:	f000 fda2 	bl	8006ac0 <xTaskResumeAll>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f47f af66 	bne.w	8005e50 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8005f84:	4b18      	ldr	r3, [pc, #96]	; (8005fe8 <xQueueSemaphoreTake+0x224>)
 8005f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f8a:	601a      	str	r2, [r3, #0]
 8005f8c:	f3bf 8f4f 	dsb	sy
 8005f90:	f3bf 8f6f 	isb	sy
 8005f94:	e75c      	b.n	8005e50 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005f96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f98:	f000 f9bb 	bl	8006312 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f9c:	f000 fd90 	bl	8006ac0 <xTaskResumeAll>
 8005fa0:	e756      	b.n	8005e50 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005fa2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005fa4:	f000 f9b5 	bl	8006312 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005fa8:	f000 fd8a 	bl	8006ac0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005fae:	f000 fa02 	bl	80063b6 <prvIsQueueEmpty>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f43f af4b 	beq.w	8005e50 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00d      	beq.n	8005fdc <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8005fc0:	f002 f85c 	bl	800807c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005fc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005fc6:	f000 f8fc 	bl	80061c2 <prvGetDisinheritPriorityAfterTimeout>
 8005fca:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f001 fa8e 	bl	80074f4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005fd8:	f002 f884 	bl	80080e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005fdc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3738      	adds	r7, #56	; 0x38
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	e000ed04 	.word	0xe000ed04

08005fec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b08e      	sub	sp, #56	; 0x38
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d10c      	bne.n	800601c <xQueueReceiveFromISR+0x30>
	__asm volatile
 8006002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006006:	b672      	cpsid	i
 8006008:	f383 8811 	msr	BASEPRI, r3
 800600c:	f3bf 8f6f 	isb	sy
 8006010:	f3bf 8f4f 	dsb	sy
 8006014:	b662      	cpsie	i
 8006016:	623b      	str	r3, [r7, #32]
}
 8006018:	bf00      	nop
 800601a:	e7fe      	b.n	800601a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d103      	bne.n	800602a <xQueueReceiveFromISR+0x3e>
 8006022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006026:	2b00      	cmp	r3, #0
 8006028:	d101      	bne.n	800602e <xQueueReceiveFromISR+0x42>
 800602a:	2301      	movs	r3, #1
 800602c:	e000      	b.n	8006030 <xQueueReceiveFromISR+0x44>
 800602e:	2300      	movs	r3, #0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d10c      	bne.n	800604e <xQueueReceiveFromISR+0x62>
	__asm volatile
 8006034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006038:	b672      	cpsid	i
 800603a:	f383 8811 	msr	BASEPRI, r3
 800603e:	f3bf 8f6f 	isb	sy
 8006042:	f3bf 8f4f 	dsb	sy
 8006046:	b662      	cpsie	i
 8006048:	61fb      	str	r3, [r7, #28]
}
 800604a:	bf00      	nop
 800604c:	e7fe      	b.n	800604c <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800604e:	f002 f8fd 	bl	800824c <vPortValidateInterruptPriority>
	__asm volatile
 8006052:	f3ef 8211 	mrs	r2, BASEPRI
 8006056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605a:	b672      	cpsid	i
 800605c:	f383 8811 	msr	BASEPRI, r3
 8006060:	f3bf 8f6f 	isb	sy
 8006064:	f3bf 8f4f 	dsb	sy
 8006068:	b662      	cpsie	i
 800606a:	61ba      	str	r2, [r7, #24]
 800606c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800606e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006070:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006076:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607a:	2b00      	cmp	r3, #0
 800607c:	d02f      	beq.n	80060de <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800607e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006080:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006084:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006088:	68b9      	ldr	r1, [r7, #8]
 800608a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800608c:	f000 f91b 	bl	80062c6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006092:	1e5a      	subs	r2, r3, #1
 8006094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006096:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006098:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800609c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a0:	d112      	bne.n	80060c8 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d016      	beq.n	80060d8 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ac:	3310      	adds	r3, #16
 80060ae:	4618      	mov	r0, r3
 80060b0:	f000 ff32 	bl	8006f18 <xTaskRemoveFromEventList>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00e      	beq.n	80060d8 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00b      	beq.n	80060d8 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	601a      	str	r2, [r3, #0]
 80060c6:	e007      	b.n	80060d8 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80060c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060cc:	3301      	adds	r3, #1
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	b25a      	sxtb	r2, r3
 80060d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80060d8:	2301      	movs	r3, #1
 80060da:	637b      	str	r3, [r7, #52]	; 0x34
 80060dc:	e001      	b.n	80060e2 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 80060de:	2300      	movs	r3, #0
 80060e0:	637b      	str	r3, [r7, #52]	; 0x34
 80060e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	f383 8811 	msr	BASEPRI, r3
}
 80060ec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80060ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3738      	adds	r7, #56	; 0x38
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10c      	bne.n	8006120 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 8006106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610a:	b672      	cpsid	i
 800610c:	f383 8811 	msr	BASEPRI, r3
 8006110:	f3bf 8f6f 	isb	sy
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	b662      	cpsie	i
 800611a:	60bb      	str	r3, [r7, #8]
}
 800611c:	bf00      	nop
 800611e:	e7fe      	b.n	800611e <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8006120:	f001 ffac 	bl	800807c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006128:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800612a:	f001 ffdb 	bl	80080e4 <vPortExitCritical>

	return uxReturn;
 800612e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006130:	4618      	mov	r0, r3
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006138:	b480      	push	{r7}
 800613a:	b087      	sub	sp, #28
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10c      	bne.n	8006164 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 800614a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614e:	b672      	cpsid	i
 8006150:	f383 8811 	msr	BASEPRI, r3
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	b662      	cpsie	i
 800615e:	60fb      	str	r3, [r7, #12]
}
 8006160:	bf00      	nop
 8006162:	e7fe      	b.n	8006162 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006168:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800616a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800616c:	4618      	mov	r0, r3
 800616e:	371c      	adds	r7, #28
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10c      	bne.n	80061a4 <vQueueDelete+0x2c>
	__asm volatile
 800618a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618e:	b672      	cpsid	i
 8006190:	f383 8811 	msr	BASEPRI, r3
 8006194:	f3bf 8f6f 	isb	sy
 8006198:	f3bf 8f4f 	dsb	sy
 800619c:	b662      	cpsie	i
 800619e:	60bb      	str	r3, [r7, #8]
}
 80061a0:	bf00      	nop
 80061a2:	e7fe      	b.n	80061a2 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	f000 f95f 	bl	8006468 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d102      	bne.n	80061ba <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f002 f957 	bl	8008468 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80061ba:	bf00      	nop
 80061bc:	3710      	adds	r7, #16
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80061c2:	b480      	push	{r7}
 80061c4:	b085      	sub	sp, #20
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d006      	beq.n	80061e0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f1c3 0307 	rsb	r3, r3, #7
 80061dc:	60fb      	str	r3, [r7, #12]
 80061de:	e001      	b.n	80061e4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80061e0:	2300      	movs	r3, #0
 80061e2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80061e4:	68fb      	ldr	r3, [r7, #12]
	}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b086      	sub	sp, #24
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	60f8      	str	r0, [r7, #12]
 80061fa:	60b9      	str	r1, [r7, #8]
 80061fc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80061fe:	2300      	movs	r3, #0
 8006200:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006206:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10d      	bne.n	800622c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d14d      	bne.n	80062b4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	4618      	mov	r0, r3
 800621e:	f001 f8df 	bl	80073e0 <xTaskPriorityDisinherit>
 8006222:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	609a      	str	r2, [r3, #8]
 800622a:	e043      	b.n	80062b4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d119      	bne.n	8006266 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6858      	ldr	r0, [r3, #4]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623a:	461a      	mov	r2, r3
 800623c:	68b9      	ldr	r1, [r7, #8]
 800623e:	f010 feaf 	bl	8016fa0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	685a      	ldr	r2, [r3, #4]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624a:	441a      	add	r2, r3
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	685a      	ldr	r2, [r3, #4]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	429a      	cmp	r2, r3
 800625a:	d32b      	bcc.n	80062b4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	605a      	str	r2, [r3, #4]
 8006264:	e026      	b.n	80062b4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	68d8      	ldr	r0, [r3, #12]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626e:	461a      	mov	r2, r3
 8006270:	68b9      	ldr	r1, [r7, #8]
 8006272:	f010 fe95 	bl	8016fa0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	68da      	ldr	r2, [r3, #12]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627e:	425b      	negs	r3, r3
 8006280:	441a      	add	r2, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	68da      	ldr	r2, [r3, #12]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	429a      	cmp	r2, r3
 8006290:	d207      	bcs.n	80062a2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	689a      	ldr	r2, [r3, #8]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629a:	425b      	negs	r3, r3
 800629c:	441a      	add	r2, r3
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d105      	bne.n	80062b4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d002      	beq.n	80062b4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	3b01      	subs	r3, #1
 80062b2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	1c5a      	adds	r2, r3, #1
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80062bc:	697b      	ldr	r3, [r7, #20]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3718      	adds	r7, #24
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b082      	sub	sp, #8
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
 80062ce:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d018      	beq.n	800630a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	68da      	ldr	r2, [r3, #12]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e0:	441a      	add	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	68da      	ldr	r2, [r3, #12]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d303      	bcc.n	80062fa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	68d9      	ldr	r1, [r3, #12]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006302:	461a      	mov	r2, r3
 8006304:	6838      	ldr	r0, [r7, #0]
 8006306:	f010 fe4b 	bl	8016fa0 <memcpy>
	}
}
 800630a:	bf00      	nop
 800630c:	3708      	adds	r7, #8
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b084      	sub	sp, #16
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800631a:	f001 feaf 	bl	800807c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006324:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006326:	e011      	b.n	800634c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632c:	2b00      	cmp	r3, #0
 800632e:	d012      	beq.n	8006356 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	3324      	adds	r3, #36	; 0x24
 8006334:	4618      	mov	r0, r3
 8006336:	f000 fdef 	bl	8006f18 <xTaskRemoveFromEventList>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d001      	beq.n	8006344 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006340:	f000 feca 	bl	80070d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006344:	7bfb      	ldrb	r3, [r7, #15]
 8006346:	3b01      	subs	r3, #1
 8006348:	b2db      	uxtb	r3, r3
 800634a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800634c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006350:	2b00      	cmp	r3, #0
 8006352:	dce9      	bgt.n	8006328 <prvUnlockQueue+0x16>
 8006354:	e000      	b.n	8006358 <prvUnlockQueue+0x46>
					break;
 8006356:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	22ff      	movs	r2, #255	; 0xff
 800635c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006360:	f001 fec0 	bl	80080e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006364:	f001 fe8a 	bl	800807c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800636e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006370:	e011      	b.n	8006396 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d012      	beq.n	80063a0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	3310      	adds	r3, #16
 800637e:	4618      	mov	r0, r3
 8006380:	f000 fdca 	bl	8006f18 <xTaskRemoveFromEventList>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d001      	beq.n	800638e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800638a:	f000 fea5 	bl	80070d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800638e:	7bbb      	ldrb	r3, [r7, #14]
 8006390:	3b01      	subs	r3, #1
 8006392:	b2db      	uxtb	r3, r3
 8006394:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006396:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800639a:	2b00      	cmp	r3, #0
 800639c:	dce9      	bgt.n	8006372 <prvUnlockQueue+0x60>
 800639e:	e000      	b.n	80063a2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80063a0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	22ff      	movs	r2, #255	; 0xff
 80063a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80063aa:	f001 fe9b 	bl	80080e4 <vPortExitCritical>
}
 80063ae:	bf00      	nop
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b084      	sub	sp, #16
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80063be:	f001 fe5d 	bl	800807c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d102      	bne.n	80063d0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80063ca:	2301      	movs	r3, #1
 80063cc:	60fb      	str	r3, [r7, #12]
 80063ce:	e001      	b.n	80063d4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80063d0:	2300      	movs	r3, #0
 80063d2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80063d4:	f001 fe86 	bl	80080e4 <vPortExitCritical>

	return xReturn;
 80063d8:	68fb      	ldr	r3, [r7, #12]
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b084      	sub	sp, #16
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80063ea:	f001 fe47 	bl	800807c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d102      	bne.n	8006400 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80063fa:	2301      	movs	r3, #1
 80063fc:	60fb      	str	r3, [r7, #12]
 80063fe:	e001      	b.n	8006404 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006400:	2300      	movs	r3, #0
 8006402:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006404:	f001 fe6e 	bl	80080e4 <vPortExitCritical>

	return xReturn;
 8006408:	68fb      	ldr	r3, [r7, #12]
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
	...

08006414 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800641e:	2300      	movs	r3, #0
 8006420:	60fb      	str	r3, [r7, #12]
 8006422:	e014      	b.n	800644e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006424:	4a0f      	ldr	r2, [pc, #60]	; (8006464 <vQueueAddToRegistry+0x50>)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d10b      	bne.n	8006448 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006430:	490c      	ldr	r1, [pc, #48]	; (8006464 <vQueueAddToRegistry+0x50>)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	683a      	ldr	r2, [r7, #0]
 8006436:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800643a:	4a0a      	ldr	r2, [pc, #40]	; (8006464 <vQueueAddToRegistry+0x50>)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	00db      	lsls	r3, r3, #3
 8006440:	4413      	add	r3, r2
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006446:	e006      	b.n	8006456 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	3301      	adds	r3, #1
 800644c:	60fb      	str	r3, [r7, #12]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2b07      	cmp	r3, #7
 8006452:	d9e7      	bls.n	8006424 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006454:	bf00      	nop
 8006456:	bf00      	nop
 8006458:	3714      	adds	r7, #20
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	20003954 	.word	0x20003954

08006468 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006470:	2300      	movs	r3, #0
 8006472:	60fb      	str	r3, [r7, #12]
 8006474:	e016      	b.n	80064a4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006476:	4a10      	ldr	r2, [pc, #64]	; (80064b8 <vQueueUnregisterQueue+0x50>)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	00db      	lsls	r3, r3, #3
 800647c:	4413      	add	r3, r2
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	429a      	cmp	r2, r3
 8006484:	d10b      	bne.n	800649e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006486:	4a0c      	ldr	r2, [pc, #48]	; (80064b8 <vQueueUnregisterQueue+0x50>)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2100      	movs	r1, #0
 800648c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006490:	4a09      	ldr	r2, [pc, #36]	; (80064b8 <vQueueUnregisterQueue+0x50>)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	00db      	lsls	r3, r3, #3
 8006496:	4413      	add	r3, r2
 8006498:	2200      	movs	r2, #0
 800649a:	605a      	str	r2, [r3, #4]
				break;
 800649c:	e006      	b.n	80064ac <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	3301      	adds	r3, #1
 80064a2:	60fb      	str	r3, [r7, #12]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2b07      	cmp	r3, #7
 80064a8:	d9e5      	bls.n	8006476 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80064aa:	bf00      	nop
 80064ac:	bf00      	nop
 80064ae:	3714      	adds	r7, #20
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr
 80064b8:	20003954 	.word	0x20003954

080064bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80064cc:	f001 fdd6 	bl	800807c <vPortEnterCritical>
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064d6:	b25b      	sxtb	r3, r3
 80064d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064dc:	d103      	bne.n	80064e6 <vQueueWaitForMessageRestricted+0x2a>
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064ec:	b25b      	sxtb	r3, r3
 80064ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f2:	d103      	bne.n	80064fc <vQueueWaitForMessageRestricted+0x40>
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064fc:	f001 fdf2 	bl	80080e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006504:	2b00      	cmp	r3, #0
 8006506:	d106      	bne.n	8006516 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	3324      	adds	r3, #36	; 0x24
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	68b9      	ldr	r1, [r7, #8]
 8006510:	4618      	mov	r0, r3
 8006512:	f000 fcd3 	bl	8006ebc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006516:	6978      	ldr	r0, [r7, #20]
 8006518:	f7ff fefb 	bl	8006312 <prvUnlockQueue>
	}
 800651c:	bf00      	nop
 800651e:	3718      	adds	r7, #24
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006524:	b580      	push	{r7, lr}
 8006526:	b08e      	sub	sp, #56	; 0x38
 8006528:	af04      	add	r7, sp, #16
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]
 8006530:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006534:	2b00      	cmp	r3, #0
 8006536:	d10c      	bne.n	8006552 <xTaskCreateStatic+0x2e>
	__asm volatile
 8006538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653c:	b672      	cpsid	i
 800653e:	f383 8811 	msr	BASEPRI, r3
 8006542:	f3bf 8f6f 	isb	sy
 8006546:	f3bf 8f4f 	dsb	sy
 800654a:	b662      	cpsie	i
 800654c:	623b      	str	r3, [r7, #32]
}
 800654e:	bf00      	nop
 8006550:	e7fe      	b.n	8006550 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006554:	2b00      	cmp	r3, #0
 8006556:	d10c      	bne.n	8006572 <xTaskCreateStatic+0x4e>
	__asm volatile
 8006558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655c:	b672      	cpsid	i
 800655e:	f383 8811 	msr	BASEPRI, r3
 8006562:	f3bf 8f6f 	isb	sy
 8006566:	f3bf 8f4f 	dsb	sy
 800656a:	b662      	cpsie	i
 800656c:	61fb      	str	r3, [r7, #28]
}
 800656e:	bf00      	nop
 8006570:	e7fe      	b.n	8006570 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006572:	2364      	movs	r3, #100	; 0x64
 8006574:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	2b64      	cmp	r3, #100	; 0x64
 800657a:	d00c      	beq.n	8006596 <xTaskCreateStatic+0x72>
	__asm volatile
 800657c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006580:	b672      	cpsid	i
 8006582:	f383 8811 	msr	BASEPRI, r3
 8006586:	f3bf 8f6f 	isb	sy
 800658a:	f3bf 8f4f 	dsb	sy
 800658e:	b662      	cpsie	i
 8006590:	61bb      	str	r3, [r7, #24]
}
 8006592:	bf00      	nop
 8006594:	e7fe      	b.n	8006594 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006596:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800659a:	2b00      	cmp	r3, #0
 800659c:	d01e      	beq.n	80065dc <xTaskCreateStatic+0xb8>
 800659e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d01b      	beq.n	80065dc <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80065a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80065a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065ac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80065ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b0:	2202      	movs	r2, #2
 80065b2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80065b6:	2300      	movs	r3, #0
 80065b8:	9303      	str	r3, [sp, #12]
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	9302      	str	r3, [sp, #8]
 80065be:	f107 0314 	add.w	r3, r7, #20
 80065c2:	9301      	str	r3, [sp, #4]
 80065c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	68b9      	ldr	r1, [r7, #8]
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f000 f850 	bl	8006674 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80065d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065d6:	f000 f8d7 	bl	8006788 <prvAddNewTaskToReadyList>
 80065da:	e001      	b.n	80065e0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80065dc:	2300      	movs	r3, #0
 80065de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80065e0:	697b      	ldr	r3, [r7, #20]
	}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3728      	adds	r7, #40	; 0x28
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b08c      	sub	sp, #48	; 0x30
 80065ee:	af04      	add	r7, sp, #16
 80065f0:	60f8      	str	r0, [r7, #12]
 80065f2:	60b9      	str	r1, [r7, #8]
 80065f4:	603b      	str	r3, [r7, #0]
 80065f6:	4613      	mov	r3, r2
 80065f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80065fa:	88fb      	ldrh	r3, [r7, #6]
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	4618      	mov	r0, r3
 8006600:	f001 fe68 	bl	80082d4 <pvPortMalloc>
 8006604:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00e      	beq.n	800662a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800660c:	2064      	movs	r0, #100	; 0x64
 800660e:	f001 fe61 	bl	80082d4 <pvPortMalloc>
 8006612:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d003      	beq.n	8006622 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	631a      	str	r2, [r3, #48]	; 0x30
 8006620:	e005      	b.n	800662e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006622:	6978      	ldr	r0, [r7, #20]
 8006624:	f001 ff20 	bl	8008468 <vPortFree>
 8006628:	e001      	b.n	800662e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800662a:	2300      	movs	r3, #0
 800662c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d017      	beq.n	8006664 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800663c:	88fa      	ldrh	r2, [r7, #6]
 800663e:	2300      	movs	r3, #0
 8006640:	9303      	str	r3, [sp, #12]
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	9302      	str	r3, [sp, #8]
 8006646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006648:	9301      	str	r3, [sp, #4]
 800664a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664c:	9300      	str	r3, [sp, #0]
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	68b9      	ldr	r1, [r7, #8]
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f000 f80e 	bl	8006674 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006658:	69f8      	ldr	r0, [r7, #28]
 800665a:	f000 f895 	bl	8006788 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800665e:	2301      	movs	r3, #1
 8006660:	61bb      	str	r3, [r7, #24]
 8006662:	e002      	b.n	800666a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006664:	f04f 33ff 	mov.w	r3, #4294967295
 8006668:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800666a:	69bb      	ldr	r3, [r7, #24]
	}
 800666c:	4618      	mov	r0, r3
 800666e:	3720      	adds	r7, #32
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b088      	sub	sp, #32
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	607a      	str	r2, [r7, #4]
 8006680:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006686:	6879      	ldr	r1, [r7, #4]
 8006688:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800668c:	440b      	add	r3, r1
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4413      	add	r3, r2
 8006692:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	f023 0307 	bic.w	r3, r3, #7
 800669a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	f003 0307 	and.w	r3, r3, #7
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00c      	beq.n	80066c0 <prvInitialiseNewTask+0x4c>
	__asm volatile
 80066a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066aa:	b672      	cpsid	i
 80066ac:	f383 8811 	msr	BASEPRI, r3
 80066b0:	f3bf 8f6f 	isb	sy
 80066b4:	f3bf 8f4f 	dsb	sy
 80066b8:	b662      	cpsie	i
 80066ba:	617b      	str	r3, [r7, #20]
}
 80066bc:	bf00      	nop
 80066be:	e7fe      	b.n	80066be <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d01f      	beq.n	8006706 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066c6:	2300      	movs	r3, #0
 80066c8:	61fb      	str	r3, [r7, #28]
 80066ca:	e012      	b.n	80066f2 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	4413      	add	r3, r2
 80066d2:	7819      	ldrb	r1, [r3, #0]
 80066d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	4413      	add	r3, r2
 80066da:	3334      	adds	r3, #52	; 0x34
 80066dc:	460a      	mov	r2, r1
 80066de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80066e0:	68ba      	ldr	r2, [r7, #8]
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	4413      	add	r3, r2
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d006      	beq.n	80066fa <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	3301      	adds	r3, #1
 80066f0:	61fb      	str	r3, [r7, #28]
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	2b1e      	cmp	r3, #30
 80066f6:	d9e9      	bls.n	80066cc <prvInitialiseNewTask+0x58>
 80066f8:	e000      	b.n	80066fc <prvInitialiseNewTask+0x88>
			{
				break;
 80066fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80066fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8006704:	e003      	b.n	800670e <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006708:	2200      	movs	r2, #0
 800670a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800670e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006710:	2b06      	cmp	r3, #6
 8006712:	d901      	bls.n	8006718 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006714:	2306      	movs	r3, #6
 8006716:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800671c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800671e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006720:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006722:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 8006724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006726:	2200      	movs	r2, #0
 8006728:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800672a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672c:	3304      	adds	r3, #4
 800672e:	4618      	mov	r0, r3
 8006730:	f7fe fdf7 	bl	8005322 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006736:	3318      	adds	r3, #24
 8006738:	4618      	mov	r0, r3
 800673a:	f7fe fdf2 	bl	8005322 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800673e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006742:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006746:	f1c3 0207 	rsb	r2, r3, #7
 800674a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800674e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006752:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006756:	2200      	movs	r2, #0
 8006758:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800675a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675c:	2200      	movs	r2, #0
 800675e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006762:	683a      	ldr	r2, [r7, #0]
 8006764:	68f9      	ldr	r1, [r7, #12]
 8006766:	69b8      	ldr	r0, [r7, #24]
 8006768:	f001 fb78 	bl	8007e5c <pxPortInitialiseStack>
 800676c:	4602      	mov	r2, r0
 800676e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006770:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006774:	2b00      	cmp	r3, #0
 8006776:	d002      	beq.n	800677e <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800677c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800677e:	bf00      	nop
 8006780:	3720      	adds	r7, #32
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
	...

08006788 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006790:	f001 fc74 	bl	800807c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006794:	4b2a      	ldr	r3, [pc, #168]	; (8006840 <prvAddNewTaskToReadyList+0xb8>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	3301      	adds	r3, #1
 800679a:	4a29      	ldr	r2, [pc, #164]	; (8006840 <prvAddNewTaskToReadyList+0xb8>)
 800679c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800679e:	4b29      	ldr	r3, [pc, #164]	; (8006844 <prvAddNewTaskToReadyList+0xbc>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d109      	bne.n	80067ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80067a6:	4a27      	ldr	r2, [pc, #156]	; (8006844 <prvAddNewTaskToReadyList+0xbc>)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80067ac:	4b24      	ldr	r3, [pc, #144]	; (8006840 <prvAddNewTaskToReadyList+0xb8>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d110      	bne.n	80067d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80067b4:	f000 fcb6 	bl	8007124 <prvInitialiseTaskLists>
 80067b8:	e00d      	b.n	80067d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80067ba:	4b23      	ldr	r3, [pc, #140]	; (8006848 <prvAddNewTaskToReadyList+0xc0>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d109      	bne.n	80067d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80067c2:	4b20      	ldr	r3, [pc, #128]	; (8006844 <prvAddNewTaskToReadyList+0xbc>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d802      	bhi.n	80067d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80067d0:	4a1c      	ldr	r2, [pc, #112]	; (8006844 <prvAddNewTaskToReadyList+0xbc>)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80067d6:	4b1d      	ldr	r3, [pc, #116]	; (800684c <prvAddNewTaskToReadyList+0xc4>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	3301      	adds	r3, #1
 80067dc:	4a1b      	ldr	r2, [pc, #108]	; (800684c <prvAddNewTaskToReadyList+0xc4>)
 80067de:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e4:	2201      	movs	r2, #1
 80067e6:	409a      	lsls	r2, r3
 80067e8:	4b19      	ldr	r3, [pc, #100]	; (8006850 <prvAddNewTaskToReadyList+0xc8>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	4a18      	ldr	r2, [pc, #96]	; (8006850 <prvAddNewTaskToReadyList+0xc8>)
 80067f0:	6013      	str	r3, [r2, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067f6:	4613      	mov	r3, r2
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	4413      	add	r3, r2
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	4a15      	ldr	r2, [pc, #84]	; (8006854 <prvAddNewTaskToReadyList+0xcc>)
 8006800:	441a      	add	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	3304      	adds	r3, #4
 8006806:	4619      	mov	r1, r3
 8006808:	4610      	mov	r0, r2
 800680a:	f7fe fd97 	bl	800533c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800680e:	f001 fc69 	bl	80080e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006812:	4b0d      	ldr	r3, [pc, #52]	; (8006848 <prvAddNewTaskToReadyList+0xc0>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00e      	beq.n	8006838 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800681a:	4b0a      	ldr	r3, [pc, #40]	; (8006844 <prvAddNewTaskToReadyList+0xbc>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006824:	429a      	cmp	r2, r3
 8006826:	d207      	bcs.n	8006838 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006828:	4b0b      	ldr	r3, [pc, #44]	; (8006858 <prvAddNewTaskToReadyList+0xd0>)
 800682a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800682e:	601a      	str	r2, [r3, #0]
 8006830:	f3bf 8f4f 	dsb	sy
 8006834:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006838:	bf00      	nop
 800683a:	3708      	adds	r7, #8
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	20003a94 	.word	0x20003a94
 8006844:	20003994 	.word	0x20003994
 8006848:	20003aa0 	.word	0x20003aa0
 800684c:	20003ab0 	.word	0x20003ab0
 8006850:	20003a9c 	.word	0x20003a9c
 8006854:	20003998 	.word	0x20003998
 8006858:	e000ed04 	.word	0xe000ed04

0800685c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800685c:	b580      	push	{r7, lr}
 800685e:	b08a      	sub	sp, #40	; 0x28
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006866:	2300      	movs	r3, #0
 8006868:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d10c      	bne.n	800688a <vTaskDelayUntil+0x2e>
	__asm volatile
 8006870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006874:	b672      	cpsid	i
 8006876:	f383 8811 	msr	BASEPRI, r3
 800687a:	f3bf 8f6f 	isb	sy
 800687e:	f3bf 8f4f 	dsb	sy
 8006882:	b662      	cpsie	i
 8006884:	617b      	str	r3, [r7, #20]
}
 8006886:	bf00      	nop
 8006888:	e7fe      	b.n	8006888 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d10c      	bne.n	80068aa <vTaskDelayUntil+0x4e>
	__asm volatile
 8006890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006894:	b672      	cpsid	i
 8006896:	f383 8811 	msr	BASEPRI, r3
 800689a:	f3bf 8f6f 	isb	sy
 800689e:	f3bf 8f4f 	dsb	sy
 80068a2:	b662      	cpsie	i
 80068a4:	613b      	str	r3, [r7, #16]
}
 80068a6:	bf00      	nop
 80068a8:	e7fe      	b.n	80068a8 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 80068aa:	4b2b      	ldr	r3, [pc, #172]	; (8006958 <vTaskDelayUntil+0xfc>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00c      	beq.n	80068cc <vTaskDelayUntil+0x70>
	__asm volatile
 80068b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b6:	b672      	cpsid	i
 80068b8:	f383 8811 	msr	BASEPRI, r3
 80068bc:	f3bf 8f6f 	isb	sy
 80068c0:	f3bf 8f4f 	dsb	sy
 80068c4:	b662      	cpsie	i
 80068c6:	60fb      	str	r3, [r7, #12]
}
 80068c8:	bf00      	nop
 80068ca:	e7fe      	b.n	80068ca <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 80068cc:	f000 f8ea 	bl	8006aa4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80068d0:	4b22      	ldr	r3, [pc, #136]	; (800695c <vTaskDelayUntil+0x100>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	683a      	ldr	r2, [r7, #0]
 80068dc:	4413      	add	r3, r2
 80068de:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	6a3a      	ldr	r2, [r7, #32]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d20b      	bcs.n	8006902 <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	69fa      	ldr	r2, [r7, #28]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d211      	bcs.n	8006918 <vTaskDelayUntil+0xbc>
 80068f4:	69fa      	ldr	r2, [r7, #28]
 80068f6:	6a3b      	ldr	r3, [r7, #32]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d90d      	bls.n	8006918 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 80068fc:	2301      	movs	r3, #1
 80068fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006900:	e00a      	b.n	8006918 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	69fa      	ldr	r2, [r7, #28]
 8006908:	429a      	cmp	r2, r3
 800690a:	d303      	bcc.n	8006914 <vTaskDelayUntil+0xb8>
 800690c:	69fa      	ldr	r2, [r7, #28]
 800690e:	6a3b      	ldr	r3, [r7, #32]
 8006910:	429a      	cmp	r2, r3
 8006912:	d901      	bls.n	8006918 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 8006914:	2301      	movs	r3, #1
 8006916:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	69fa      	ldr	r2, [r7, #28]
 800691c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800691e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006920:	2b00      	cmp	r3, #0
 8006922:	d006      	beq.n	8006932 <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006924:	69fa      	ldr	r2, [r7, #28]
 8006926:	6a3b      	ldr	r3, [r7, #32]
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	2100      	movs	r1, #0
 800692c:	4618      	mov	r0, r3
 800692e:	f000 fe93 	bl	8007658 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006932:	f000 f8c5 	bl	8006ac0 <xTaskResumeAll>
 8006936:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d107      	bne.n	800694e <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 800693e:	4b08      	ldr	r3, [pc, #32]	; (8006960 <vTaskDelayUntil+0x104>)
 8006940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006944:	601a      	str	r2, [r3, #0]
 8006946:	f3bf 8f4f 	dsb	sy
 800694a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800694e:	bf00      	nop
 8006950:	3728      	adds	r7, #40	; 0x28
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	20003abc 	.word	0x20003abc
 800695c:	20003a98 	.word	0x20003a98
 8006960:	e000ed04 	.word	0xe000ed04

08006964 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800696c:	2300      	movs	r3, #0
 800696e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d019      	beq.n	80069aa <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006976:	4b14      	ldr	r3, [pc, #80]	; (80069c8 <vTaskDelay+0x64>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00c      	beq.n	8006998 <vTaskDelay+0x34>
	__asm volatile
 800697e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006982:	b672      	cpsid	i
 8006984:	f383 8811 	msr	BASEPRI, r3
 8006988:	f3bf 8f6f 	isb	sy
 800698c:	f3bf 8f4f 	dsb	sy
 8006990:	b662      	cpsie	i
 8006992:	60bb      	str	r3, [r7, #8]
}
 8006994:	bf00      	nop
 8006996:	e7fe      	b.n	8006996 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006998:	f000 f884 	bl	8006aa4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800699c:	2100      	movs	r1, #0
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 fe5a 	bl	8007658 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80069a4:	f000 f88c 	bl	8006ac0 <xTaskResumeAll>
 80069a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d107      	bne.n	80069c0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80069b0:	4b06      	ldr	r3, [pc, #24]	; (80069cc <vTaskDelay+0x68>)
 80069b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069b6:	601a      	str	r2, [r3, #0]
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80069c0:	bf00      	nop
 80069c2:	3710      	adds	r7, #16
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	20003abc 	.word	0x20003abc
 80069cc:	e000ed04 	.word	0xe000ed04

080069d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b08a      	sub	sp, #40	; 0x28
 80069d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80069d6:	2300      	movs	r3, #0
 80069d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80069da:	2300      	movs	r3, #0
 80069dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80069de:	463a      	mov	r2, r7
 80069e0:	1d39      	adds	r1, r7, #4
 80069e2:	f107 0308 	add.w	r3, r7, #8
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7f9 fe1c 	bl	8000624 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80069ec:	6839      	ldr	r1, [r7, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	68ba      	ldr	r2, [r7, #8]
 80069f2:	9202      	str	r2, [sp, #8]
 80069f4:	9301      	str	r3, [sp, #4]
 80069f6:	2300      	movs	r3, #0
 80069f8:	9300      	str	r3, [sp, #0]
 80069fa:	2300      	movs	r3, #0
 80069fc:	460a      	mov	r2, r1
 80069fe:	4923      	ldr	r1, [pc, #140]	; (8006a8c <vTaskStartScheduler+0xbc>)
 8006a00:	4823      	ldr	r0, [pc, #140]	; (8006a90 <vTaskStartScheduler+0xc0>)
 8006a02:	f7ff fd8f 	bl	8006524 <xTaskCreateStatic>
 8006a06:	4603      	mov	r3, r0
 8006a08:	4a22      	ldr	r2, [pc, #136]	; (8006a94 <vTaskStartScheduler+0xc4>)
 8006a0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006a0c:	4b21      	ldr	r3, [pc, #132]	; (8006a94 <vTaskStartScheduler+0xc4>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d002      	beq.n	8006a1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006a14:	2301      	movs	r3, #1
 8006a16:	617b      	str	r3, [r7, #20]
 8006a18:	e001      	b.n	8006a1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d102      	bne.n	8006a2a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006a24:	f000 fe7e 	bl	8007724 <xTimerCreateTimerTask>
 8006a28:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d118      	bne.n	8006a62 <vTaskStartScheduler+0x92>
	__asm volatile
 8006a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a34:	b672      	cpsid	i
 8006a36:	f383 8811 	msr	BASEPRI, r3
 8006a3a:	f3bf 8f6f 	isb	sy
 8006a3e:	f3bf 8f4f 	dsb	sy
 8006a42:	b662      	cpsie	i
 8006a44:	613b      	str	r3, [r7, #16]
}
 8006a46:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006a48:	4b13      	ldr	r3, [pc, #76]	; (8006a98 <vTaskStartScheduler+0xc8>)
 8006a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a4e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006a50:	4b12      	ldr	r3, [pc, #72]	; (8006a9c <vTaskStartScheduler+0xcc>)
 8006a52:	2201      	movs	r2, #1
 8006a54:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006a56:	4b12      	ldr	r3, [pc, #72]	; (8006aa0 <vTaskStartScheduler+0xd0>)
 8006a58:	2200      	movs	r2, #0
 8006a5a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006a5c:	f001 fa90 	bl	8007f80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006a60:	e010      	b.n	8006a84 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a68:	d10c      	bne.n	8006a84 <vTaskStartScheduler+0xb4>
	__asm volatile
 8006a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6e:	b672      	cpsid	i
 8006a70:	f383 8811 	msr	BASEPRI, r3
 8006a74:	f3bf 8f6f 	isb	sy
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	b662      	cpsie	i
 8006a7e:	60fb      	str	r3, [r7, #12]
}
 8006a80:	bf00      	nop
 8006a82:	e7fe      	b.n	8006a82 <vTaskStartScheduler+0xb2>
}
 8006a84:	bf00      	nop
 8006a86:	3718      	adds	r7, #24
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	08018540 	.word	0x08018540
 8006a90:	080070f1 	.word	0x080070f1
 8006a94:	20003ab8 	.word	0x20003ab8
 8006a98:	20003ab4 	.word	0x20003ab4
 8006a9c:	20003aa0 	.word	0x20003aa0
 8006aa0:	20003a98 	.word	0x20003a98

08006aa4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006aa8:	4b04      	ldr	r3, [pc, #16]	; (8006abc <vTaskSuspendAll+0x18>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	3301      	adds	r3, #1
 8006aae:	4a03      	ldr	r2, [pc, #12]	; (8006abc <vTaskSuspendAll+0x18>)
 8006ab0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006ab2:	bf00      	nop
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr
 8006abc:	20003abc 	.word	0x20003abc

08006ac0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006aca:	2300      	movs	r3, #0
 8006acc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006ace:	4b42      	ldr	r3, [pc, #264]	; (8006bd8 <xTaskResumeAll+0x118>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d10c      	bne.n	8006af0 <xTaskResumeAll+0x30>
	__asm volatile
 8006ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ada:	b672      	cpsid	i
 8006adc:	f383 8811 	msr	BASEPRI, r3
 8006ae0:	f3bf 8f6f 	isb	sy
 8006ae4:	f3bf 8f4f 	dsb	sy
 8006ae8:	b662      	cpsie	i
 8006aea:	603b      	str	r3, [r7, #0]
}
 8006aec:	bf00      	nop
 8006aee:	e7fe      	b.n	8006aee <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006af0:	f001 fac4 	bl	800807c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006af4:	4b38      	ldr	r3, [pc, #224]	; (8006bd8 <xTaskResumeAll+0x118>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	3b01      	subs	r3, #1
 8006afa:	4a37      	ldr	r2, [pc, #220]	; (8006bd8 <xTaskResumeAll+0x118>)
 8006afc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006afe:	4b36      	ldr	r3, [pc, #216]	; (8006bd8 <xTaskResumeAll+0x118>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d161      	bne.n	8006bca <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b06:	4b35      	ldr	r3, [pc, #212]	; (8006bdc <xTaskResumeAll+0x11c>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d05d      	beq.n	8006bca <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b0e:	e02e      	b.n	8006b6e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b10:	4b33      	ldr	r3, [pc, #204]	; (8006be0 <xTaskResumeAll+0x120>)
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	3318      	adds	r3, #24
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7fe fc6a 	bl	80053f6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	3304      	adds	r3, #4
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7fe fc65 	bl	80053f6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b30:	2201      	movs	r2, #1
 8006b32:	409a      	lsls	r2, r3
 8006b34:	4b2b      	ldr	r3, [pc, #172]	; (8006be4 <xTaskResumeAll+0x124>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	4a2a      	ldr	r2, [pc, #168]	; (8006be4 <xTaskResumeAll+0x124>)
 8006b3c:	6013      	str	r3, [r2, #0]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b42:	4613      	mov	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4413      	add	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	4a27      	ldr	r2, [pc, #156]	; (8006be8 <xTaskResumeAll+0x128>)
 8006b4c:	441a      	add	r2, r3
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	3304      	adds	r3, #4
 8006b52:	4619      	mov	r1, r3
 8006b54:	4610      	mov	r0, r2
 8006b56:	f7fe fbf1 	bl	800533c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b5e:	4b23      	ldr	r3, [pc, #140]	; (8006bec <xTaskResumeAll+0x12c>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d302      	bcc.n	8006b6e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006b68:	4b21      	ldr	r3, [pc, #132]	; (8006bf0 <xTaskResumeAll+0x130>)
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b6e:	4b1c      	ldr	r3, [pc, #112]	; (8006be0 <xTaskResumeAll+0x120>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1cc      	bne.n	8006b10 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d001      	beq.n	8006b80 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006b7c:	f000 fb72 	bl	8007264 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006b80:	4b1c      	ldr	r3, [pc, #112]	; (8006bf4 <xTaskResumeAll+0x134>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d010      	beq.n	8006bae <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006b8c:	f000 f858 	bl	8006c40 <xTaskIncrementTick>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d002      	beq.n	8006b9c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006b96:	4b16      	ldr	r3, [pc, #88]	; (8006bf0 <xTaskResumeAll+0x130>)
 8006b98:	2201      	movs	r2, #1
 8006b9a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	3b01      	subs	r3, #1
 8006ba0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d1f1      	bne.n	8006b8c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8006ba8:	4b12      	ldr	r3, [pc, #72]	; (8006bf4 <xTaskResumeAll+0x134>)
 8006baa:	2200      	movs	r2, #0
 8006bac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006bae:	4b10      	ldr	r3, [pc, #64]	; (8006bf0 <xTaskResumeAll+0x130>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d009      	beq.n	8006bca <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006bba:	4b0f      	ldr	r3, [pc, #60]	; (8006bf8 <xTaskResumeAll+0x138>)
 8006bbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bc0:	601a      	str	r2, [r3, #0]
 8006bc2:	f3bf 8f4f 	dsb	sy
 8006bc6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006bca:	f001 fa8b 	bl	80080e4 <vPortExitCritical>

	return xAlreadyYielded;
 8006bce:	68bb      	ldr	r3, [r7, #8]
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3710      	adds	r7, #16
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	20003abc 	.word	0x20003abc
 8006bdc:	20003a94 	.word	0x20003a94
 8006be0:	20003a54 	.word	0x20003a54
 8006be4:	20003a9c 	.word	0x20003a9c
 8006be8:	20003998 	.word	0x20003998
 8006bec:	20003994 	.word	0x20003994
 8006bf0:	20003aa8 	.word	0x20003aa8
 8006bf4:	20003aa4 	.word	0x20003aa4
 8006bf8:	e000ed04 	.word	0xe000ed04

08006bfc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006c02:	4b05      	ldr	r3, [pc, #20]	; (8006c18 <xTaskGetTickCount+0x1c>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006c08:	687b      	ldr	r3, [r7, #4]
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	20003a98 	.word	0x20003a98

08006c1c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c22:	f001 fb13 	bl	800824c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006c26:	2300      	movs	r3, #0
 8006c28:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006c2a:	4b04      	ldr	r3, [pc, #16]	; (8006c3c <xTaskGetTickCountFromISR+0x20>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c30:	683b      	ldr	r3, [r7, #0]
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3708      	adds	r7, #8
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	20003a98 	.word	0x20003a98

08006c40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b086      	sub	sp, #24
 8006c44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006c46:	2300      	movs	r3, #0
 8006c48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c4a:	4b4f      	ldr	r3, [pc, #316]	; (8006d88 <xTaskIncrementTick+0x148>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f040 808a 	bne.w	8006d68 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006c54:	4b4d      	ldr	r3, [pc, #308]	; (8006d8c <xTaskIncrementTick+0x14c>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	3301      	adds	r3, #1
 8006c5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006c5c:	4a4b      	ldr	r2, [pc, #300]	; (8006d8c <xTaskIncrementTick+0x14c>)
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d122      	bne.n	8006cae <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8006c68:	4b49      	ldr	r3, [pc, #292]	; (8006d90 <xTaskIncrementTick+0x150>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00c      	beq.n	8006c8c <xTaskIncrementTick+0x4c>
	__asm volatile
 8006c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c76:	b672      	cpsid	i
 8006c78:	f383 8811 	msr	BASEPRI, r3
 8006c7c:	f3bf 8f6f 	isb	sy
 8006c80:	f3bf 8f4f 	dsb	sy
 8006c84:	b662      	cpsie	i
 8006c86:	603b      	str	r3, [r7, #0]
}
 8006c88:	bf00      	nop
 8006c8a:	e7fe      	b.n	8006c8a <xTaskIncrementTick+0x4a>
 8006c8c:	4b40      	ldr	r3, [pc, #256]	; (8006d90 <xTaskIncrementTick+0x150>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	60fb      	str	r3, [r7, #12]
 8006c92:	4b40      	ldr	r3, [pc, #256]	; (8006d94 <xTaskIncrementTick+0x154>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a3e      	ldr	r2, [pc, #248]	; (8006d90 <xTaskIncrementTick+0x150>)
 8006c98:	6013      	str	r3, [r2, #0]
 8006c9a:	4a3e      	ldr	r2, [pc, #248]	; (8006d94 <xTaskIncrementTick+0x154>)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6013      	str	r3, [r2, #0]
 8006ca0:	4b3d      	ldr	r3, [pc, #244]	; (8006d98 <xTaskIncrementTick+0x158>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	4a3c      	ldr	r2, [pc, #240]	; (8006d98 <xTaskIncrementTick+0x158>)
 8006ca8:	6013      	str	r3, [r2, #0]
 8006caa:	f000 fadb 	bl	8007264 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006cae:	4b3b      	ldr	r3, [pc, #236]	; (8006d9c <xTaskIncrementTick+0x15c>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d348      	bcc.n	8006d4a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cb8:	4b35      	ldr	r3, [pc, #212]	; (8006d90 <xTaskIncrementTick+0x150>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d104      	bne.n	8006ccc <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cc2:	4b36      	ldr	r3, [pc, #216]	; (8006d9c <xTaskIncrementTick+0x15c>)
 8006cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8006cc8:	601a      	str	r2, [r3, #0]
					break;
 8006cca:	e03e      	b.n	8006d4a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ccc:	4b30      	ldr	r3, [pc, #192]	; (8006d90 <xTaskIncrementTick+0x150>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006cdc:	693a      	ldr	r2, [r7, #16]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d203      	bcs.n	8006cec <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ce4:	4a2d      	ldr	r2, [pc, #180]	; (8006d9c <xTaskIncrementTick+0x15c>)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006cea:	e02e      	b.n	8006d4a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	3304      	adds	r3, #4
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7fe fb80 	bl	80053f6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d004      	beq.n	8006d08 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	3318      	adds	r3, #24
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7fe fb77 	bl	80053f6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	409a      	lsls	r2, r3
 8006d10:	4b23      	ldr	r3, [pc, #140]	; (8006da0 <xTaskIncrementTick+0x160>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	4a22      	ldr	r2, [pc, #136]	; (8006da0 <xTaskIncrementTick+0x160>)
 8006d18:	6013      	str	r3, [r2, #0]
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d1e:	4613      	mov	r3, r2
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	4413      	add	r3, r2
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	4a1f      	ldr	r2, [pc, #124]	; (8006da4 <xTaskIncrementTick+0x164>)
 8006d28:	441a      	add	r2, r3
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	3304      	adds	r3, #4
 8006d2e:	4619      	mov	r1, r3
 8006d30:	4610      	mov	r0, r2
 8006d32:	f7fe fb03 	bl	800533c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d3a:	4b1b      	ldr	r3, [pc, #108]	; (8006da8 <xTaskIncrementTick+0x168>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d3b9      	bcc.n	8006cb8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8006d44:	2301      	movs	r3, #1
 8006d46:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d48:	e7b6      	b.n	8006cb8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006d4a:	4b17      	ldr	r3, [pc, #92]	; (8006da8 <xTaskIncrementTick+0x168>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d50:	4914      	ldr	r1, [pc, #80]	; (8006da4 <xTaskIncrementTick+0x164>)
 8006d52:	4613      	mov	r3, r2
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4413      	add	r3, r2
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	440b      	add	r3, r1
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d907      	bls.n	8006d72 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8006d62:	2301      	movs	r3, #1
 8006d64:	617b      	str	r3, [r7, #20]
 8006d66:	e004      	b.n	8006d72 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006d68:	4b10      	ldr	r3, [pc, #64]	; (8006dac <xTaskIncrementTick+0x16c>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	4a0f      	ldr	r2, [pc, #60]	; (8006dac <xTaskIncrementTick+0x16c>)
 8006d70:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006d72:	4b0f      	ldr	r3, [pc, #60]	; (8006db0 <xTaskIncrementTick+0x170>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d001      	beq.n	8006d7e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006d7e:	697b      	ldr	r3, [r7, #20]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3718      	adds	r7, #24
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	20003abc 	.word	0x20003abc
 8006d8c:	20003a98 	.word	0x20003a98
 8006d90:	20003a4c 	.word	0x20003a4c
 8006d94:	20003a50 	.word	0x20003a50
 8006d98:	20003aac 	.word	0x20003aac
 8006d9c:	20003ab4 	.word	0x20003ab4
 8006da0:	20003a9c 	.word	0x20003a9c
 8006da4:	20003998 	.word	0x20003998
 8006da8:	20003994 	.word	0x20003994
 8006dac:	20003aa4 	.word	0x20003aa4
 8006db0:	20003aa8 	.word	0x20003aa8

08006db4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006db4:	b480      	push	{r7}
 8006db6:	b087      	sub	sp, #28
 8006db8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006dba:	4b28      	ldr	r3, [pc, #160]	; (8006e5c <vTaskSwitchContext+0xa8>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d003      	beq.n	8006dca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006dc2:	4b27      	ldr	r3, [pc, #156]	; (8006e60 <vTaskSwitchContext+0xac>)
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006dc8:	e041      	b.n	8006e4e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006dca:	4b25      	ldr	r3, [pc, #148]	; (8006e60 <vTaskSwitchContext+0xac>)
 8006dcc:	2200      	movs	r2, #0
 8006dce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dd0:	4b24      	ldr	r3, [pc, #144]	; (8006e64 <vTaskSwitchContext+0xb0>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	fab3 f383 	clz	r3, r3
 8006ddc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006dde:	7afb      	ldrb	r3, [r7, #11]
 8006de0:	f1c3 031f 	rsb	r3, r3, #31
 8006de4:	617b      	str	r3, [r7, #20]
 8006de6:	4920      	ldr	r1, [pc, #128]	; (8006e68 <vTaskSwitchContext+0xb4>)
 8006de8:	697a      	ldr	r2, [r7, #20]
 8006dea:	4613      	mov	r3, r2
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	4413      	add	r3, r2
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	440b      	add	r3, r1
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10c      	bne.n	8006e14 <vTaskSwitchContext+0x60>
	__asm volatile
 8006dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfe:	b672      	cpsid	i
 8006e00:	f383 8811 	msr	BASEPRI, r3
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	b662      	cpsie	i
 8006e0e:	607b      	str	r3, [r7, #4]
}
 8006e10:	bf00      	nop
 8006e12:	e7fe      	b.n	8006e12 <vTaskSwitchContext+0x5e>
 8006e14:	697a      	ldr	r2, [r7, #20]
 8006e16:	4613      	mov	r3, r2
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	4413      	add	r3, r2
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	4a12      	ldr	r2, [pc, #72]	; (8006e68 <vTaskSwitchContext+0xb4>)
 8006e20:	4413      	add	r3, r2
 8006e22:	613b      	str	r3, [r7, #16]
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	685a      	ldr	r2, [r3, #4]
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	605a      	str	r2, [r3, #4]
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	685a      	ldr	r2, [r3, #4]
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	3308      	adds	r3, #8
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d104      	bne.n	8006e44 <vTaskSwitchContext+0x90>
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	685a      	ldr	r2, [r3, #4]
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	605a      	str	r2, [r3, #4]
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	4a08      	ldr	r2, [pc, #32]	; (8006e6c <vTaskSwitchContext+0xb8>)
 8006e4c:	6013      	str	r3, [r2, #0]
}
 8006e4e:	bf00      	nop
 8006e50:	371c      	adds	r7, #28
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	20003abc 	.word	0x20003abc
 8006e60:	20003aa8 	.word	0x20003aa8
 8006e64:	20003a9c 	.word	0x20003a9c
 8006e68:	20003998 	.word	0x20003998
 8006e6c:	20003994 	.word	0x20003994

08006e70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d10c      	bne.n	8006e9a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8006e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e84:	b672      	cpsid	i
 8006e86:	f383 8811 	msr	BASEPRI, r3
 8006e8a:	f3bf 8f6f 	isb	sy
 8006e8e:	f3bf 8f4f 	dsb	sy
 8006e92:	b662      	cpsie	i
 8006e94:	60fb      	str	r3, [r7, #12]
}
 8006e96:	bf00      	nop
 8006e98:	e7fe      	b.n	8006e98 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e9a:	4b07      	ldr	r3, [pc, #28]	; (8006eb8 <vTaskPlaceOnEventList+0x48>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	3318      	adds	r3, #24
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f7fe fa6e 	bl	8005384 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ea8:	2101      	movs	r1, #1
 8006eaa:	6838      	ldr	r0, [r7, #0]
 8006eac:	f000 fbd4 	bl	8007658 <prvAddCurrentTaskToDelayedList>
}
 8006eb0:	bf00      	nop
 8006eb2:	3710      	adds	r7, #16
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	20003994 	.word	0x20003994

08006ebc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b086      	sub	sp, #24
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10c      	bne.n	8006ee8 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8006ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed2:	b672      	cpsid	i
 8006ed4:	f383 8811 	msr	BASEPRI, r3
 8006ed8:	f3bf 8f6f 	isb	sy
 8006edc:	f3bf 8f4f 	dsb	sy
 8006ee0:	b662      	cpsie	i
 8006ee2:	617b      	str	r3, [r7, #20]
}
 8006ee4:	bf00      	nop
 8006ee6:	e7fe      	b.n	8006ee6 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ee8:	4b0a      	ldr	r3, [pc, #40]	; (8006f14 <vTaskPlaceOnEventListRestricted+0x58>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	3318      	adds	r3, #24
 8006eee:	4619      	mov	r1, r3
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f7fe fa23 	bl	800533c <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d002      	beq.n	8006f02 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8006efc:	f04f 33ff 	mov.w	r3, #4294967295
 8006f00:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006f02:	6879      	ldr	r1, [r7, #4]
 8006f04:	68b8      	ldr	r0, [r7, #8]
 8006f06:	f000 fba7 	bl	8007658 <prvAddCurrentTaskToDelayedList>
	}
 8006f0a:	bf00      	nop
 8006f0c:	3718      	adds	r7, #24
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	20003994 	.word	0x20003994

08006f18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b086      	sub	sp, #24
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d10c      	bne.n	8006f48 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8006f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f32:	b672      	cpsid	i
 8006f34:	f383 8811 	msr	BASEPRI, r3
 8006f38:	f3bf 8f6f 	isb	sy
 8006f3c:	f3bf 8f4f 	dsb	sy
 8006f40:	b662      	cpsie	i
 8006f42:	60fb      	str	r3, [r7, #12]
}
 8006f44:	bf00      	nop
 8006f46:	e7fe      	b.n	8006f46 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	3318      	adds	r3, #24
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f7fe fa52 	bl	80053f6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f52:	4b1d      	ldr	r3, [pc, #116]	; (8006fc8 <xTaskRemoveFromEventList+0xb0>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d11c      	bne.n	8006f94 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	3304      	adds	r3, #4
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7fe fa49 	bl	80053f6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f68:	2201      	movs	r2, #1
 8006f6a:	409a      	lsls	r2, r3
 8006f6c:	4b17      	ldr	r3, [pc, #92]	; (8006fcc <xTaskRemoveFromEventList+0xb4>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	4a16      	ldr	r2, [pc, #88]	; (8006fcc <xTaskRemoveFromEventList+0xb4>)
 8006f74:	6013      	str	r3, [r2, #0]
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	4413      	add	r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	4a13      	ldr	r2, [pc, #76]	; (8006fd0 <xTaskRemoveFromEventList+0xb8>)
 8006f84:	441a      	add	r2, r3
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	3304      	adds	r3, #4
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	4610      	mov	r0, r2
 8006f8e:	f7fe f9d5 	bl	800533c <vListInsertEnd>
 8006f92:	e005      	b.n	8006fa0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	3318      	adds	r3, #24
 8006f98:	4619      	mov	r1, r3
 8006f9a:	480e      	ldr	r0, [pc, #56]	; (8006fd4 <xTaskRemoveFromEventList+0xbc>)
 8006f9c:	f7fe f9ce 	bl	800533c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa4:	4b0c      	ldr	r3, [pc, #48]	; (8006fd8 <xTaskRemoveFromEventList+0xc0>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d905      	bls.n	8006fba <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006fb2:	4b0a      	ldr	r3, [pc, #40]	; (8006fdc <xTaskRemoveFromEventList+0xc4>)
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	601a      	str	r2, [r3, #0]
 8006fb8:	e001      	b.n	8006fbe <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006fbe:	697b      	ldr	r3, [r7, #20]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3718      	adds	r7, #24
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	20003abc 	.word	0x20003abc
 8006fcc:	20003a9c 	.word	0x20003a9c
 8006fd0:	20003998 	.word	0x20003998
 8006fd4:	20003a54 	.word	0x20003a54
 8006fd8:	20003994 	.word	0x20003994
 8006fdc:	20003aa8 	.word	0x20003aa8

08006fe0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006fe8:	4b06      	ldr	r3, [pc, #24]	; (8007004 <vTaskInternalSetTimeOutState+0x24>)
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006ff0:	4b05      	ldr	r3, [pc, #20]	; (8007008 <vTaskInternalSetTimeOutState+0x28>)
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	605a      	str	r2, [r3, #4]
}
 8006ff8:	bf00      	nop
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr
 8007004:	20003aac 	.word	0x20003aac
 8007008:	20003a98 	.word	0x20003a98

0800700c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b088      	sub	sp, #32
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d10c      	bne.n	8007036 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800701c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007020:	b672      	cpsid	i
 8007022:	f383 8811 	msr	BASEPRI, r3
 8007026:	f3bf 8f6f 	isb	sy
 800702a:	f3bf 8f4f 	dsb	sy
 800702e:	b662      	cpsie	i
 8007030:	613b      	str	r3, [r7, #16]
}
 8007032:	bf00      	nop
 8007034:	e7fe      	b.n	8007034 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10c      	bne.n	8007056 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800703c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007040:	b672      	cpsid	i
 8007042:	f383 8811 	msr	BASEPRI, r3
 8007046:	f3bf 8f6f 	isb	sy
 800704a:	f3bf 8f4f 	dsb	sy
 800704e:	b662      	cpsie	i
 8007050:	60fb      	str	r3, [r7, #12]
}
 8007052:	bf00      	nop
 8007054:	e7fe      	b.n	8007054 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8007056:	f001 f811 	bl	800807c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800705a:	4b1d      	ldr	r3, [pc, #116]	; (80070d0 <xTaskCheckForTimeOut+0xc4>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	69ba      	ldr	r2, [r7, #24]
 8007066:	1ad3      	subs	r3, r2, r3
 8007068:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007072:	d102      	bne.n	800707a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007074:	2300      	movs	r3, #0
 8007076:	61fb      	str	r3, [r7, #28]
 8007078:	e023      	b.n	80070c2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	4b15      	ldr	r3, [pc, #84]	; (80070d4 <xTaskCheckForTimeOut+0xc8>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	429a      	cmp	r2, r3
 8007084:	d007      	beq.n	8007096 <xTaskCheckForTimeOut+0x8a>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	69ba      	ldr	r2, [r7, #24]
 800708c:	429a      	cmp	r2, r3
 800708e:	d302      	bcc.n	8007096 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007090:	2301      	movs	r3, #1
 8007092:	61fb      	str	r3, [r7, #28]
 8007094:	e015      	b.n	80070c2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	697a      	ldr	r2, [r7, #20]
 800709c:	429a      	cmp	r2, r3
 800709e:	d20b      	bcs.n	80070b8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	1ad2      	subs	r2, r2, r3
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f7ff ff97 	bl	8006fe0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80070b2:	2300      	movs	r3, #0
 80070b4:	61fb      	str	r3, [r7, #28]
 80070b6:	e004      	b.n	80070c2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	2200      	movs	r2, #0
 80070bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80070be:	2301      	movs	r3, #1
 80070c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80070c2:	f001 f80f 	bl	80080e4 <vPortExitCritical>

	return xReturn;
 80070c6:	69fb      	ldr	r3, [r7, #28]
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3720      	adds	r7, #32
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	20003a98 	.word	0x20003a98
 80070d4:	20003aac 	.word	0x20003aac

080070d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80070d8:	b480      	push	{r7}
 80070da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80070dc:	4b03      	ldr	r3, [pc, #12]	; (80070ec <vTaskMissedYield+0x14>)
 80070de:	2201      	movs	r2, #1
 80070e0:	601a      	str	r2, [r3, #0]
}
 80070e2:	bf00      	nop
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr
 80070ec:	20003aa8 	.word	0x20003aa8

080070f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80070f8:	f000 f854 	bl	80071a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80070fc:	4b07      	ldr	r3, [pc, #28]	; (800711c <prvIdleTask+0x2c>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2b01      	cmp	r3, #1
 8007102:	d907      	bls.n	8007114 <prvIdleTask+0x24>
			{
				taskYIELD();
 8007104:	4b06      	ldr	r3, [pc, #24]	; (8007120 <prvIdleTask+0x30>)
 8007106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800710a:	601a      	str	r2, [r3, #0]
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8007114:	f7f9 fa7e 	bl	8000614 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8007118:	e7ee      	b.n	80070f8 <prvIdleTask+0x8>
 800711a:	bf00      	nop
 800711c:	20003998 	.word	0x20003998
 8007120:	e000ed04 	.word	0xe000ed04

08007124 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800712a:	2300      	movs	r3, #0
 800712c:	607b      	str	r3, [r7, #4]
 800712e:	e00c      	b.n	800714a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	4613      	mov	r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	4413      	add	r3, r2
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4a12      	ldr	r2, [pc, #72]	; (8007184 <prvInitialiseTaskLists+0x60>)
 800713c:	4413      	add	r3, r2
 800713e:	4618      	mov	r0, r3
 8007140:	f7fe f8cf 	bl	80052e2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	3301      	adds	r3, #1
 8007148:	607b      	str	r3, [r7, #4]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2b06      	cmp	r3, #6
 800714e:	d9ef      	bls.n	8007130 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007150:	480d      	ldr	r0, [pc, #52]	; (8007188 <prvInitialiseTaskLists+0x64>)
 8007152:	f7fe f8c6 	bl	80052e2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007156:	480d      	ldr	r0, [pc, #52]	; (800718c <prvInitialiseTaskLists+0x68>)
 8007158:	f7fe f8c3 	bl	80052e2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800715c:	480c      	ldr	r0, [pc, #48]	; (8007190 <prvInitialiseTaskLists+0x6c>)
 800715e:	f7fe f8c0 	bl	80052e2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007162:	480c      	ldr	r0, [pc, #48]	; (8007194 <prvInitialiseTaskLists+0x70>)
 8007164:	f7fe f8bd 	bl	80052e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007168:	480b      	ldr	r0, [pc, #44]	; (8007198 <prvInitialiseTaskLists+0x74>)
 800716a:	f7fe f8ba 	bl	80052e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800716e:	4b0b      	ldr	r3, [pc, #44]	; (800719c <prvInitialiseTaskLists+0x78>)
 8007170:	4a05      	ldr	r2, [pc, #20]	; (8007188 <prvInitialiseTaskLists+0x64>)
 8007172:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007174:	4b0a      	ldr	r3, [pc, #40]	; (80071a0 <prvInitialiseTaskLists+0x7c>)
 8007176:	4a05      	ldr	r2, [pc, #20]	; (800718c <prvInitialiseTaskLists+0x68>)
 8007178:	601a      	str	r2, [r3, #0]
}
 800717a:	bf00      	nop
 800717c:	3708      	adds	r7, #8
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	20003998 	.word	0x20003998
 8007188:	20003a24 	.word	0x20003a24
 800718c:	20003a38 	.word	0x20003a38
 8007190:	20003a54 	.word	0x20003a54
 8007194:	20003a68 	.word	0x20003a68
 8007198:	20003a80 	.word	0x20003a80
 800719c:	20003a4c 	.word	0x20003a4c
 80071a0:	20003a50 	.word	0x20003a50

080071a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071aa:	e019      	b.n	80071e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80071ac:	f000 ff66 	bl	800807c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071b0:	4b10      	ldr	r3, [pc, #64]	; (80071f4 <prvCheckTasksWaitingTermination+0x50>)
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	3304      	adds	r3, #4
 80071bc:	4618      	mov	r0, r3
 80071be:	f7fe f91a 	bl	80053f6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80071c2:	4b0d      	ldr	r3, [pc, #52]	; (80071f8 <prvCheckTasksWaitingTermination+0x54>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	3b01      	subs	r3, #1
 80071c8:	4a0b      	ldr	r2, [pc, #44]	; (80071f8 <prvCheckTasksWaitingTermination+0x54>)
 80071ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80071cc:	4b0b      	ldr	r3, [pc, #44]	; (80071fc <prvCheckTasksWaitingTermination+0x58>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	3b01      	subs	r3, #1
 80071d2:	4a0a      	ldr	r2, [pc, #40]	; (80071fc <prvCheckTasksWaitingTermination+0x58>)
 80071d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80071d6:	f000 ff85 	bl	80080e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 f810 	bl	8007200 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071e0:	4b06      	ldr	r3, [pc, #24]	; (80071fc <prvCheckTasksWaitingTermination+0x58>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d1e1      	bne.n	80071ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80071e8:	bf00      	nop
 80071ea:	bf00      	nop
 80071ec:	3708      	adds	r7, #8
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	20003a68 	.word	0x20003a68
 80071f8:	20003a94 	.word	0x20003a94
 80071fc:	20003a7c 	.word	0x20003a7c

08007200 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800720e:	2b00      	cmp	r3, #0
 8007210:	d108      	bne.n	8007224 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007216:	4618      	mov	r0, r3
 8007218:	f001 f926 	bl	8008468 <vPortFree>
				vPortFree( pxTCB );
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f001 f923 	bl	8008468 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007222:	e01a      	b.n	800725a <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800722a:	2b01      	cmp	r3, #1
 800722c:	d103      	bne.n	8007236 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f001 f91a 	bl	8008468 <vPortFree>
	}
 8007234:	e011      	b.n	800725a <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800723c:	2b02      	cmp	r3, #2
 800723e:	d00c      	beq.n	800725a <prvDeleteTCB+0x5a>
	__asm volatile
 8007240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007244:	b672      	cpsid	i
 8007246:	f383 8811 	msr	BASEPRI, r3
 800724a:	f3bf 8f6f 	isb	sy
 800724e:	f3bf 8f4f 	dsb	sy
 8007252:	b662      	cpsie	i
 8007254:	60fb      	str	r3, [r7, #12]
}
 8007256:	bf00      	nop
 8007258:	e7fe      	b.n	8007258 <prvDeleteTCB+0x58>
	}
 800725a:	bf00      	nop
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
	...

08007264 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800726a:	4b0c      	ldr	r3, [pc, #48]	; (800729c <prvResetNextTaskUnblockTime+0x38>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d104      	bne.n	800727e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007274:	4b0a      	ldr	r3, [pc, #40]	; (80072a0 <prvResetNextTaskUnblockTime+0x3c>)
 8007276:	f04f 32ff 	mov.w	r2, #4294967295
 800727a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800727c:	e008      	b.n	8007290 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800727e:	4b07      	ldr	r3, [pc, #28]	; (800729c <prvResetNextTaskUnblockTime+0x38>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	4a04      	ldr	r2, [pc, #16]	; (80072a0 <prvResetNextTaskUnblockTime+0x3c>)
 800728e:	6013      	str	r3, [r2, #0]
}
 8007290:	bf00      	nop
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr
 800729c:	20003a4c 	.word	0x20003a4c
 80072a0:	20003ab4 	.word	0x20003ab4

080072a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80072aa:	4b0b      	ldr	r3, [pc, #44]	; (80072d8 <xTaskGetSchedulerState+0x34>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d102      	bne.n	80072b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80072b2:	2301      	movs	r3, #1
 80072b4:	607b      	str	r3, [r7, #4]
 80072b6:	e008      	b.n	80072ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072b8:	4b08      	ldr	r3, [pc, #32]	; (80072dc <xTaskGetSchedulerState+0x38>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d102      	bne.n	80072c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80072c0:	2302      	movs	r3, #2
 80072c2:	607b      	str	r3, [r7, #4]
 80072c4:	e001      	b.n	80072ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80072c6:	2300      	movs	r3, #0
 80072c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80072ca:	687b      	ldr	r3, [r7, #4]
	}
 80072cc:	4618      	mov	r0, r3
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr
 80072d8:	20003aa0 	.word	0x20003aa0
 80072dc:	20003abc 	.word	0x20003abc

080072e0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80072ec:	2300      	movs	r3, #0
 80072ee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d069      	beq.n	80073ca <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072fa:	4b36      	ldr	r3, [pc, #216]	; (80073d4 <xTaskPriorityInherit+0xf4>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007300:	429a      	cmp	r2, r3
 8007302:	d259      	bcs.n	80073b8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	699b      	ldr	r3, [r3, #24]
 8007308:	2b00      	cmp	r3, #0
 800730a:	db06      	blt.n	800731a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800730c:	4b31      	ldr	r3, [pc, #196]	; (80073d4 <xTaskPriorityInherit+0xf4>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007312:	f1c3 0207 	rsb	r2, r3, #7
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	6959      	ldr	r1, [r3, #20]
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007322:	4613      	mov	r3, r2
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	4413      	add	r3, r2
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	4a2b      	ldr	r2, [pc, #172]	; (80073d8 <xTaskPriorityInherit+0xf8>)
 800732c:	4413      	add	r3, r2
 800732e:	4299      	cmp	r1, r3
 8007330:	d13a      	bne.n	80073a8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	3304      	adds	r3, #4
 8007336:	4618      	mov	r0, r3
 8007338:	f7fe f85d 	bl	80053f6 <uxListRemove>
 800733c:	4603      	mov	r3, r0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d115      	bne.n	800736e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007346:	4924      	ldr	r1, [pc, #144]	; (80073d8 <xTaskPriorityInherit+0xf8>)
 8007348:	4613      	mov	r3, r2
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	4413      	add	r3, r2
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	440b      	add	r3, r1
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d10a      	bne.n	800736e <xTaskPriorityInherit+0x8e>
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735c:	2201      	movs	r2, #1
 800735e:	fa02 f303 	lsl.w	r3, r2, r3
 8007362:	43da      	mvns	r2, r3
 8007364:	4b1d      	ldr	r3, [pc, #116]	; (80073dc <xTaskPriorityInherit+0xfc>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4013      	ands	r3, r2
 800736a:	4a1c      	ldr	r2, [pc, #112]	; (80073dc <xTaskPriorityInherit+0xfc>)
 800736c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800736e:	4b19      	ldr	r3, [pc, #100]	; (80073d4 <xTaskPriorityInherit+0xf4>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737c:	2201      	movs	r2, #1
 800737e:	409a      	lsls	r2, r3
 8007380:	4b16      	ldr	r3, [pc, #88]	; (80073dc <xTaskPriorityInherit+0xfc>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4313      	orrs	r3, r2
 8007386:	4a15      	ldr	r2, [pc, #84]	; (80073dc <xTaskPriorityInherit+0xfc>)
 8007388:	6013      	str	r3, [r2, #0]
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800738e:	4613      	mov	r3, r2
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	4413      	add	r3, r2
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	4a10      	ldr	r2, [pc, #64]	; (80073d8 <xTaskPriorityInherit+0xf8>)
 8007398:	441a      	add	r2, r3
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	3304      	adds	r3, #4
 800739e:	4619      	mov	r1, r3
 80073a0:	4610      	mov	r0, r2
 80073a2:	f7fd ffcb 	bl	800533c <vListInsertEnd>
 80073a6:	e004      	b.n	80073b2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80073a8:	4b0a      	ldr	r3, [pc, #40]	; (80073d4 <xTaskPriorityInherit+0xf4>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80073b2:	2301      	movs	r3, #1
 80073b4:	60fb      	str	r3, [r7, #12]
 80073b6:	e008      	b.n	80073ca <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073bc:	4b05      	ldr	r3, [pc, #20]	; (80073d4 <xTaskPriorityInherit+0xf4>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d201      	bcs.n	80073ca <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80073c6:	2301      	movs	r3, #1
 80073c8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80073ca:	68fb      	ldr	r3, [r7, #12]
	}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3710      	adds	r7, #16
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	20003994 	.word	0x20003994
 80073d8:	20003998 	.word	0x20003998
 80073dc:	20003a9c 	.word	0x20003a9c

080073e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b086      	sub	sp, #24
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80073ec:	2300      	movs	r3, #0
 80073ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d072      	beq.n	80074dc <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80073f6:	4b3c      	ldr	r3, [pc, #240]	; (80074e8 <xTaskPriorityDisinherit+0x108>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	693a      	ldr	r2, [r7, #16]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d00c      	beq.n	800741a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8007400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007404:	b672      	cpsid	i
 8007406:	f383 8811 	msr	BASEPRI, r3
 800740a:	f3bf 8f6f 	isb	sy
 800740e:	f3bf 8f4f 	dsb	sy
 8007412:	b662      	cpsie	i
 8007414:	60fb      	str	r3, [r7, #12]
}
 8007416:	bf00      	nop
 8007418:	e7fe      	b.n	8007418 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800741e:	2b00      	cmp	r3, #0
 8007420:	d10c      	bne.n	800743c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8007422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007426:	b672      	cpsid	i
 8007428:	f383 8811 	msr	BASEPRI, r3
 800742c:	f3bf 8f6f 	isb	sy
 8007430:	f3bf 8f4f 	dsb	sy
 8007434:	b662      	cpsie	i
 8007436:	60bb      	str	r3, [r7, #8]
}
 8007438:	bf00      	nop
 800743a:	e7fe      	b.n	800743a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007440:	1e5a      	subs	r2, r3, #1
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	659a      	str	r2, [r3, #88]	; 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800744e:	429a      	cmp	r2, r3
 8007450:	d044      	beq.n	80074dc <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007456:	2b00      	cmp	r3, #0
 8007458:	d140      	bne.n	80074dc <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	3304      	adds	r3, #4
 800745e:	4618      	mov	r0, r3
 8007460:	f7fd ffc9 	bl	80053f6 <uxListRemove>
 8007464:	4603      	mov	r3, r0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d115      	bne.n	8007496 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800746e:	491f      	ldr	r1, [pc, #124]	; (80074ec <xTaskPriorityDisinherit+0x10c>)
 8007470:	4613      	mov	r3, r2
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	4413      	add	r3, r2
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	440b      	add	r3, r1
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d10a      	bne.n	8007496 <xTaskPriorityDisinherit+0xb6>
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007484:	2201      	movs	r2, #1
 8007486:	fa02 f303 	lsl.w	r3, r2, r3
 800748a:	43da      	mvns	r2, r3
 800748c:	4b18      	ldr	r3, [pc, #96]	; (80074f0 <xTaskPriorityDisinherit+0x110>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4013      	ands	r3, r2
 8007492:	4a17      	ldr	r2, [pc, #92]	; (80074f0 <xTaskPriorityDisinherit+0x110>)
 8007494:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a2:	f1c3 0207 	rsb	r2, r3, #7
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ae:	2201      	movs	r2, #1
 80074b0:	409a      	lsls	r2, r3
 80074b2:	4b0f      	ldr	r3, [pc, #60]	; (80074f0 <xTaskPriorityDisinherit+0x110>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	4a0d      	ldr	r2, [pc, #52]	; (80074f0 <xTaskPriorityDisinherit+0x110>)
 80074ba:	6013      	str	r3, [r2, #0]
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074c0:	4613      	mov	r3, r2
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	4413      	add	r3, r2
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	4a08      	ldr	r2, [pc, #32]	; (80074ec <xTaskPriorityDisinherit+0x10c>)
 80074ca:	441a      	add	r2, r3
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	3304      	adds	r3, #4
 80074d0:	4619      	mov	r1, r3
 80074d2:	4610      	mov	r0, r2
 80074d4:	f7fd ff32 	bl	800533c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80074d8:	2301      	movs	r3, #1
 80074da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80074dc:	697b      	ldr	r3, [r7, #20]
	}
 80074de:	4618      	mov	r0, r3
 80074e0:	3718      	adds	r7, #24
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	20003994 	.word	0x20003994
 80074ec:	20003998 	.word	0x20003998
 80074f0:	20003a9c 	.word	0x20003a9c

080074f4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b088      	sub	sp, #32
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007502:	2301      	movs	r3, #1
 8007504:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2b00      	cmp	r3, #0
 800750a:	f000 8087 	beq.w	800761c <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007512:	2b00      	cmp	r3, #0
 8007514:	d10c      	bne.n	8007530 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8007516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751a:	b672      	cpsid	i
 800751c:	f383 8811 	msr	BASEPRI, r3
 8007520:	f3bf 8f6f 	isb	sy
 8007524:	f3bf 8f4f 	dsb	sy
 8007528:	b662      	cpsie	i
 800752a:	60fb      	str	r3, [r7, #12]
}
 800752c:	bf00      	nop
 800752e:	e7fe      	b.n	800752e <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007534:	683a      	ldr	r2, [r7, #0]
 8007536:	429a      	cmp	r2, r3
 8007538:	d902      	bls.n	8007540 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	61fb      	str	r3, [r7, #28]
 800753e:	e002      	b.n	8007546 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007544:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800754a:	69fa      	ldr	r2, [r7, #28]
 800754c:	429a      	cmp	r2, r3
 800754e:	d065      	beq.n	800761c <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007554:	697a      	ldr	r2, [r7, #20]
 8007556:	429a      	cmp	r2, r3
 8007558:	d160      	bne.n	800761c <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800755a:	4b32      	ldr	r3, [pc, #200]	; (8007624 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	69ba      	ldr	r2, [r7, #24]
 8007560:	429a      	cmp	r2, r3
 8007562:	d10c      	bne.n	800757e <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8007564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007568:	b672      	cpsid	i
 800756a:	f383 8811 	msr	BASEPRI, r3
 800756e:	f3bf 8f6f 	isb	sy
 8007572:	f3bf 8f4f 	dsb	sy
 8007576:	b662      	cpsie	i
 8007578:	60bb      	str	r3, [r7, #8]
}
 800757a:	bf00      	nop
 800757c:	e7fe      	b.n	800757c <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800757e:	69bb      	ldr	r3, [r7, #24]
 8007580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007582:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	69fa      	ldr	r2, [r7, #28]
 8007588:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	699b      	ldr	r3, [r3, #24]
 800758e:	2b00      	cmp	r3, #0
 8007590:	db04      	blt.n	800759c <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	f1c3 0207 	rsb	r2, r3, #7
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	6959      	ldr	r1, [r3, #20]
 80075a0:	693a      	ldr	r2, [r7, #16]
 80075a2:	4613      	mov	r3, r2
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	4413      	add	r3, r2
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	4a1f      	ldr	r2, [pc, #124]	; (8007628 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80075ac:	4413      	add	r3, r2
 80075ae:	4299      	cmp	r1, r3
 80075b0:	d134      	bne.n	800761c <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	3304      	adds	r3, #4
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7fd ff1d 	bl	80053f6 <uxListRemove>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d115      	bne.n	80075ee <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075c6:	4918      	ldr	r1, [pc, #96]	; (8007628 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80075c8:	4613      	mov	r3, r2
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	4413      	add	r3, r2
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	440b      	add	r3, r1
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d10a      	bne.n	80075ee <vTaskPriorityDisinheritAfterTimeout+0xfa>
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075dc:	2201      	movs	r2, #1
 80075de:	fa02 f303 	lsl.w	r3, r2, r3
 80075e2:	43da      	mvns	r2, r3
 80075e4:	4b11      	ldr	r3, [pc, #68]	; (800762c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4013      	ands	r3, r2
 80075ea:	4a10      	ldr	r2, [pc, #64]	; (800762c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80075ec:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f2:	2201      	movs	r2, #1
 80075f4:	409a      	lsls	r2, r3
 80075f6:	4b0d      	ldr	r3, [pc, #52]	; (800762c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	4a0b      	ldr	r2, [pc, #44]	; (800762c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80075fe:	6013      	str	r3, [r2, #0]
 8007600:	69bb      	ldr	r3, [r7, #24]
 8007602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007604:	4613      	mov	r3, r2
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	4413      	add	r3, r2
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	4a06      	ldr	r2, [pc, #24]	; (8007628 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800760e:	441a      	add	r2, r3
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	3304      	adds	r3, #4
 8007614:	4619      	mov	r1, r3
 8007616:	4610      	mov	r0, r2
 8007618:	f7fd fe90 	bl	800533c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800761c:	bf00      	nop
 800761e:	3720      	adds	r7, #32
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	20003994 	.word	0x20003994
 8007628:	20003998 	.word	0x20003998
 800762c:	20003a9c 	.word	0x20003a9c

08007630 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007630:	b480      	push	{r7}
 8007632:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007634:	4b07      	ldr	r3, [pc, #28]	; (8007654 <pvTaskIncrementMutexHeldCount+0x24>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d004      	beq.n	8007646 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800763c:	4b05      	ldr	r3, [pc, #20]	; (8007654 <pvTaskIncrementMutexHeldCount+0x24>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007642:	3201      	adds	r2, #1
 8007644:	659a      	str	r2, [r3, #88]	; 0x58
		}

		return pxCurrentTCB;
 8007646:	4b03      	ldr	r3, [pc, #12]	; (8007654 <pvTaskIncrementMutexHeldCount+0x24>)
 8007648:	681b      	ldr	r3, [r3, #0]
	}
 800764a:	4618      	mov	r0, r3
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr
 8007654:	20003994 	.word	0x20003994

08007658 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007662:	4b29      	ldr	r3, [pc, #164]	; (8007708 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007668:	4b28      	ldr	r3, [pc, #160]	; (800770c <prvAddCurrentTaskToDelayedList+0xb4>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	3304      	adds	r3, #4
 800766e:	4618      	mov	r0, r3
 8007670:	f7fd fec1 	bl	80053f6 <uxListRemove>
 8007674:	4603      	mov	r3, r0
 8007676:	2b00      	cmp	r3, #0
 8007678:	d10b      	bne.n	8007692 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800767a:	4b24      	ldr	r3, [pc, #144]	; (800770c <prvAddCurrentTaskToDelayedList+0xb4>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007680:	2201      	movs	r2, #1
 8007682:	fa02 f303 	lsl.w	r3, r2, r3
 8007686:	43da      	mvns	r2, r3
 8007688:	4b21      	ldr	r3, [pc, #132]	; (8007710 <prvAddCurrentTaskToDelayedList+0xb8>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4013      	ands	r3, r2
 800768e:	4a20      	ldr	r2, [pc, #128]	; (8007710 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007690:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007698:	d10a      	bne.n	80076b0 <prvAddCurrentTaskToDelayedList+0x58>
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d007      	beq.n	80076b0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076a0:	4b1a      	ldr	r3, [pc, #104]	; (800770c <prvAddCurrentTaskToDelayedList+0xb4>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	3304      	adds	r3, #4
 80076a6:	4619      	mov	r1, r3
 80076a8:	481a      	ldr	r0, [pc, #104]	; (8007714 <prvAddCurrentTaskToDelayedList+0xbc>)
 80076aa:	f7fd fe47 	bl	800533c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80076ae:	e026      	b.n	80076fe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80076b0:	68fa      	ldr	r2, [r7, #12]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4413      	add	r3, r2
 80076b6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80076b8:	4b14      	ldr	r3, [pc, #80]	; (800770c <prvAddCurrentTaskToDelayedList+0xb4>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80076c0:	68ba      	ldr	r2, [r7, #8]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d209      	bcs.n	80076dc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076c8:	4b13      	ldr	r3, [pc, #76]	; (8007718 <prvAddCurrentTaskToDelayedList+0xc0>)
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	4b0f      	ldr	r3, [pc, #60]	; (800770c <prvAddCurrentTaskToDelayedList+0xb4>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	3304      	adds	r3, #4
 80076d2:	4619      	mov	r1, r3
 80076d4:	4610      	mov	r0, r2
 80076d6:	f7fd fe55 	bl	8005384 <vListInsert>
}
 80076da:	e010      	b.n	80076fe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076dc:	4b0f      	ldr	r3, [pc, #60]	; (800771c <prvAddCurrentTaskToDelayedList+0xc4>)
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	4b0a      	ldr	r3, [pc, #40]	; (800770c <prvAddCurrentTaskToDelayedList+0xb4>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	3304      	adds	r3, #4
 80076e6:	4619      	mov	r1, r3
 80076e8:	4610      	mov	r0, r2
 80076ea:	f7fd fe4b 	bl	8005384 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80076ee:	4b0c      	ldr	r3, [pc, #48]	; (8007720 <prvAddCurrentTaskToDelayedList+0xc8>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68ba      	ldr	r2, [r7, #8]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d202      	bcs.n	80076fe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80076f8:	4a09      	ldr	r2, [pc, #36]	; (8007720 <prvAddCurrentTaskToDelayedList+0xc8>)
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	6013      	str	r3, [r2, #0]
}
 80076fe:	bf00      	nop
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	20003a98 	.word	0x20003a98
 800770c:	20003994 	.word	0x20003994
 8007710:	20003a9c 	.word	0x20003a9c
 8007714:	20003a80 	.word	0x20003a80
 8007718:	20003a50 	.word	0x20003a50
 800771c:	20003a4c 	.word	0x20003a4c
 8007720:	20003ab4 	.word	0x20003ab4

08007724 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b08a      	sub	sp, #40	; 0x28
 8007728:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800772a:	2300      	movs	r3, #0
 800772c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800772e:	f000 fb55 	bl	8007ddc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007732:	4b1d      	ldr	r3, [pc, #116]	; (80077a8 <xTimerCreateTimerTask+0x84>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d021      	beq.n	800777e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800773a:	2300      	movs	r3, #0
 800773c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800773e:	2300      	movs	r3, #0
 8007740:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007742:	1d3a      	adds	r2, r7, #4
 8007744:	f107 0108 	add.w	r1, r7, #8
 8007748:	f107 030c 	add.w	r3, r7, #12
 800774c:	4618      	mov	r0, r3
 800774e:	f7f8 ff83 	bl	8000658 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007752:	6879      	ldr	r1, [r7, #4]
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	9202      	str	r2, [sp, #8]
 800775a:	9301      	str	r3, [sp, #4]
 800775c:	2302      	movs	r3, #2
 800775e:	9300      	str	r3, [sp, #0]
 8007760:	2300      	movs	r3, #0
 8007762:	460a      	mov	r2, r1
 8007764:	4911      	ldr	r1, [pc, #68]	; (80077ac <xTimerCreateTimerTask+0x88>)
 8007766:	4812      	ldr	r0, [pc, #72]	; (80077b0 <xTimerCreateTimerTask+0x8c>)
 8007768:	f7fe fedc 	bl	8006524 <xTaskCreateStatic>
 800776c:	4603      	mov	r3, r0
 800776e:	4a11      	ldr	r2, [pc, #68]	; (80077b4 <xTimerCreateTimerTask+0x90>)
 8007770:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007772:	4b10      	ldr	r3, [pc, #64]	; (80077b4 <xTimerCreateTimerTask+0x90>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d001      	beq.n	800777e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800777a:	2301      	movs	r3, #1
 800777c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d10c      	bne.n	800779e <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8007784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007788:	b672      	cpsid	i
 800778a:	f383 8811 	msr	BASEPRI, r3
 800778e:	f3bf 8f6f 	isb	sy
 8007792:	f3bf 8f4f 	dsb	sy
 8007796:	b662      	cpsie	i
 8007798:	613b      	str	r3, [r7, #16]
}
 800779a:	bf00      	nop
 800779c:	e7fe      	b.n	800779c <xTimerCreateTimerTask+0x78>
	return xReturn;
 800779e:	697b      	ldr	r3, [r7, #20]
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3718      	adds	r7, #24
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	20003af0 	.word	0x20003af0
 80077ac:	08018548 	.word	0x08018548
 80077b0:	080079b1 	.word	0x080079b1
 80077b4:	20003af4 	.word	0x20003af4

080077b8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b088      	sub	sp, #32
 80077bc:	af02      	add	r7, sp, #8
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	607a      	str	r2, [r7, #4]
 80077c4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80077c6:	2028      	movs	r0, #40	; 0x28
 80077c8:	f000 fd84 	bl	80082d4 <pvPortMalloc>
 80077cc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d00d      	beq.n	80077f0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	9301      	str	r3, [sp, #4]
 80077e0:	6a3b      	ldr	r3, [r7, #32]
 80077e2:	9300      	str	r3, [sp, #0]
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	68b9      	ldr	r1, [r7, #8]
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	f000 f805 	bl	80077fa <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80077f0:	697b      	ldr	r3, [r7, #20]
	}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3718      	adds	r7, #24
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b086      	sub	sp, #24
 80077fe:	af00      	add	r7, sp, #0
 8007800:	60f8      	str	r0, [r7, #12]
 8007802:	60b9      	str	r1, [r7, #8]
 8007804:	607a      	str	r2, [r7, #4]
 8007806:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d10c      	bne.n	8007828 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 800780e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007812:	b672      	cpsid	i
 8007814:	f383 8811 	msr	BASEPRI, r3
 8007818:	f3bf 8f6f 	isb	sy
 800781c:	f3bf 8f4f 	dsb	sy
 8007820:	b662      	cpsie	i
 8007822:	617b      	str	r3, [r7, #20]
}
 8007824:	bf00      	nop
 8007826:	e7fe      	b.n	8007826 <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 8007828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782a:	2b00      	cmp	r3, #0
 800782c:	d01e      	beq.n	800786c <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800782e:	f000 fad5 	bl	8007ddc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783a:	68ba      	ldr	r2, [r7, #8]
 800783c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800783e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007840:	683a      	ldr	r2, [r7, #0]
 8007842:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007846:	6a3a      	ldr	r2, [r7, #32]
 8007848:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800784a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784c:	3304      	adds	r3, #4
 800784e:	4618      	mov	r0, r3
 8007850:	f7fd fd67 	bl	8005322 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d008      	beq.n	800786c <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007860:	f043 0304 	orr.w	r3, r3, #4
 8007864:	b2da      	uxtb	r2, r3
 8007866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007868:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800786c:	bf00      	nop
 800786e:	3718      	adds	r7, #24
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b08a      	sub	sp, #40	; 0x28
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	607a      	str	r2, [r7, #4]
 8007880:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007882:	2300      	movs	r3, #0
 8007884:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d10c      	bne.n	80078a6 <xTimerGenericCommand+0x32>
	__asm volatile
 800788c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007890:	b672      	cpsid	i
 8007892:	f383 8811 	msr	BASEPRI, r3
 8007896:	f3bf 8f6f 	isb	sy
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	b662      	cpsie	i
 80078a0:	623b      	str	r3, [r7, #32]
}
 80078a2:	bf00      	nop
 80078a4:	e7fe      	b.n	80078a4 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80078a6:	4b1a      	ldr	r3, [pc, #104]	; (8007910 <xTimerGenericCommand+0x9c>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d02a      	beq.n	8007904 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	2b05      	cmp	r3, #5
 80078be:	dc18      	bgt.n	80078f2 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80078c0:	f7ff fcf0 	bl	80072a4 <xTaskGetSchedulerState>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d109      	bne.n	80078de <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80078ca:	4b11      	ldr	r3, [pc, #68]	; (8007910 <xTimerGenericCommand+0x9c>)
 80078cc:	6818      	ldr	r0, [r3, #0]
 80078ce:	f107 0114 	add.w	r1, r7, #20
 80078d2:	2300      	movs	r3, #0
 80078d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078d6:	f7fd ff53 	bl	8005780 <xQueueGenericSend>
 80078da:	6278      	str	r0, [r7, #36]	; 0x24
 80078dc:	e012      	b.n	8007904 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80078de:	4b0c      	ldr	r3, [pc, #48]	; (8007910 <xTimerGenericCommand+0x9c>)
 80078e0:	6818      	ldr	r0, [r3, #0]
 80078e2:	f107 0114 	add.w	r1, r7, #20
 80078e6:	2300      	movs	r3, #0
 80078e8:	2200      	movs	r2, #0
 80078ea:	f7fd ff49 	bl	8005780 <xQueueGenericSend>
 80078ee:	6278      	str	r0, [r7, #36]	; 0x24
 80078f0:	e008      	b.n	8007904 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80078f2:	4b07      	ldr	r3, [pc, #28]	; (8007910 <xTimerGenericCommand+0x9c>)
 80078f4:	6818      	ldr	r0, [r3, #0]
 80078f6:	f107 0114 	add.w	r1, r7, #20
 80078fa:	2300      	movs	r3, #0
 80078fc:	683a      	ldr	r2, [r7, #0]
 80078fe:	f7fe f845 	bl	800598c <xQueueGenericSendFromISR>
 8007902:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007906:	4618      	mov	r0, r3
 8007908:	3728      	adds	r7, #40	; 0x28
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	20003af0 	.word	0x20003af0

08007914 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b088      	sub	sp, #32
 8007918:	af02      	add	r7, sp, #8
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800791e:	4b23      	ldr	r3, [pc, #140]	; (80079ac <prvProcessExpiredTimer+0x98>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	68db      	ldr	r3, [r3, #12]
 8007926:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	3304      	adds	r3, #4
 800792c:	4618      	mov	r0, r3
 800792e:	f7fd fd62 	bl	80053f6 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007938:	f003 0304 	and.w	r3, r3, #4
 800793c:	2b00      	cmp	r3, #0
 800793e:	d024      	beq.n	800798a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	699a      	ldr	r2, [r3, #24]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	18d1      	adds	r1, r2, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	683a      	ldr	r2, [r7, #0]
 800794c:	6978      	ldr	r0, [r7, #20]
 800794e:	f000 f8d3 	bl	8007af8 <prvInsertTimerInActiveList>
 8007952:	4603      	mov	r3, r0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d021      	beq.n	800799c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007958:	2300      	movs	r3, #0
 800795a:	9300      	str	r3, [sp, #0]
 800795c:	2300      	movs	r3, #0
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	2100      	movs	r1, #0
 8007962:	6978      	ldr	r0, [r7, #20]
 8007964:	f7ff ff86 	bl	8007874 <xTimerGenericCommand>
 8007968:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d115      	bne.n	800799c <prvProcessExpiredTimer+0x88>
	__asm volatile
 8007970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007974:	b672      	cpsid	i
 8007976:	f383 8811 	msr	BASEPRI, r3
 800797a:	f3bf 8f6f 	isb	sy
 800797e:	f3bf 8f4f 	dsb	sy
 8007982:	b662      	cpsie	i
 8007984:	60fb      	str	r3, [r7, #12]
}
 8007986:	bf00      	nop
 8007988:	e7fe      	b.n	8007988 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007990:	f023 0301 	bic.w	r3, r3, #1
 8007994:	b2da      	uxtb	r2, r3
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	6a1b      	ldr	r3, [r3, #32]
 80079a0:	6978      	ldr	r0, [r7, #20]
 80079a2:	4798      	blx	r3
}
 80079a4:	bf00      	nop
 80079a6:	3718      	adds	r7, #24
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	20003ae8 	.word	0x20003ae8

080079b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80079b8:	f107 0308 	add.w	r3, r7, #8
 80079bc:	4618      	mov	r0, r3
 80079be:	f000 f857 	bl	8007a70 <prvGetNextExpireTime>
 80079c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	4619      	mov	r1, r3
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	f000 f803 	bl	80079d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80079ce:	f000 f8d5 	bl	8007b7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80079d2:	e7f1      	b.n	80079b8 <prvTimerTask+0x8>

080079d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80079de:	f7ff f861 	bl	8006aa4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80079e2:	f107 0308 	add.w	r3, r7, #8
 80079e6:	4618      	mov	r0, r3
 80079e8:	f000 f866 	bl	8007ab8 <prvSampleTimeNow>
 80079ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d130      	bne.n	8007a56 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d10a      	bne.n	8007a10 <prvProcessTimerOrBlockTask+0x3c>
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d806      	bhi.n	8007a10 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007a02:	f7ff f85d 	bl	8006ac0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007a06:	68f9      	ldr	r1, [r7, #12]
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f7ff ff83 	bl	8007914 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007a0e:	e024      	b.n	8007a5a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d008      	beq.n	8007a28 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007a16:	4b13      	ldr	r3, [pc, #76]	; (8007a64 <prvProcessTimerOrBlockTask+0x90>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d101      	bne.n	8007a24 <prvProcessTimerOrBlockTask+0x50>
 8007a20:	2301      	movs	r3, #1
 8007a22:	e000      	b.n	8007a26 <prvProcessTimerOrBlockTask+0x52>
 8007a24:	2300      	movs	r3, #0
 8007a26:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007a28:	4b0f      	ldr	r3, [pc, #60]	; (8007a68 <prvProcessTimerOrBlockTask+0x94>)
 8007a2a:	6818      	ldr	r0, [r3, #0]
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	1ad3      	subs	r3, r2, r3
 8007a32:	683a      	ldr	r2, [r7, #0]
 8007a34:	4619      	mov	r1, r3
 8007a36:	f7fe fd41 	bl	80064bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007a3a:	f7ff f841 	bl	8006ac0 <xTaskResumeAll>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d10a      	bne.n	8007a5a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007a44:	4b09      	ldr	r3, [pc, #36]	; (8007a6c <prvProcessTimerOrBlockTask+0x98>)
 8007a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a4a:	601a      	str	r2, [r3, #0]
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	f3bf 8f6f 	isb	sy
}
 8007a54:	e001      	b.n	8007a5a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007a56:	f7ff f833 	bl	8006ac0 <xTaskResumeAll>
}
 8007a5a:	bf00      	nop
 8007a5c:	3710      	adds	r7, #16
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	20003aec 	.word	0x20003aec
 8007a68:	20003af0 	.word	0x20003af0
 8007a6c:	e000ed04 	.word	0xe000ed04

08007a70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007a70:	b480      	push	{r7}
 8007a72:	b085      	sub	sp, #20
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007a78:	4b0e      	ldr	r3, [pc, #56]	; (8007ab4 <prvGetNextExpireTime+0x44>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d101      	bne.n	8007a86 <prvGetNextExpireTime+0x16>
 8007a82:	2201      	movs	r2, #1
 8007a84:	e000      	b.n	8007a88 <prvGetNextExpireTime+0x18>
 8007a86:	2200      	movs	r2, #0
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d105      	bne.n	8007aa0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a94:	4b07      	ldr	r3, [pc, #28]	; (8007ab4 <prvGetNextExpireTime+0x44>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	60fb      	str	r3, [r7, #12]
 8007a9e:	e001      	b.n	8007aa4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3714      	adds	r7, #20
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop
 8007ab4:	20003ae8 	.word	0x20003ae8

08007ab8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007ac0:	f7ff f89c 	bl	8006bfc <xTaskGetTickCount>
 8007ac4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007ac6:	4b0b      	ldr	r3, [pc, #44]	; (8007af4 <prvSampleTimeNow+0x3c>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68fa      	ldr	r2, [r7, #12]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d205      	bcs.n	8007adc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007ad0:	f000 f91e 	bl	8007d10 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	601a      	str	r2, [r3, #0]
 8007ada:	e002      	b.n	8007ae2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007ae2:	4a04      	ldr	r2, [pc, #16]	; (8007af4 <prvSampleTimeNow+0x3c>)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3710      	adds	r7, #16
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	20003af8 	.word	0x20003af8

08007af8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b086      	sub	sp, #24
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	607a      	str	r2, [r7, #4]
 8007b04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007b06:	2300      	movs	r3, #0
 8007b08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	68ba      	ldr	r2, [r7, #8]
 8007b0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	68fa      	ldr	r2, [r7, #12]
 8007b14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007b16:	68ba      	ldr	r2, [r7, #8]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d812      	bhi.n	8007b44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	1ad2      	subs	r2, r2, r3
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	699b      	ldr	r3, [r3, #24]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d302      	bcc.n	8007b32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	617b      	str	r3, [r7, #20]
 8007b30:	e01b      	b.n	8007b6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007b32:	4b10      	ldr	r3, [pc, #64]	; (8007b74 <prvInsertTimerInActiveList+0x7c>)
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	3304      	adds	r3, #4
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	4610      	mov	r0, r2
 8007b3e:	f7fd fc21 	bl	8005384 <vListInsert>
 8007b42:	e012      	b.n	8007b6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d206      	bcs.n	8007b5a <prvInsertTimerInActiveList+0x62>
 8007b4c:	68ba      	ldr	r2, [r7, #8]
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d302      	bcc.n	8007b5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007b54:	2301      	movs	r3, #1
 8007b56:	617b      	str	r3, [r7, #20]
 8007b58:	e007      	b.n	8007b6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b5a:	4b07      	ldr	r3, [pc, #28]	; (8007b78 <prvInsertTimerInActiveList+0x80>)
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	3304      	adds	r3, #4
 8007b62:	4619      	mov	r1, r3
 8007b64:	4610      	mov	r0, r2
 8007b66:	f7fd fc0d 	bl	8005384 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007b6a:	697b      	ldr	r3, [r7, #20]
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3718      	adds	r7, #24
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	20003aec 	.word	0x20003aec
 8007b78:	20003ae8 	.word	0x20003ae8

08007b7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b08c      	sub	sp, #48	; 0x30
 8007b80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b82:	e0b2      	b.n	8007cea <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	f2c0 80ae 	blt.w	8007ce8 <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b92:	695b      	ldr	r3, [r3, #20]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d004      	beq.n	8007ba2 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9a:	3304      	adds	r3, #4
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f7fd fc2a 	bl	80053f6 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007ba2:	1d3b      	adds	r3, r7, #4
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f7ff ff87 	bl	8007ab8 <prvSampleTimeNow>
 8007baa:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	2b09      	cmp	r3, #9
 8007bb0:	f200 809b 	bhi.w	8007cea <prvProcessReceivedCommands+0x16e>
 8007bb4:	a201      	add	r2, pc, #4	; (adr r2, 8007bbc <prvProcessReceivedCommands+0x40>)
 8007bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bba:	bf00      	nop
 8007bbc:	08007be5 	.word	0x08007be5
 8007bc0:	08007be5 	.word	0x08007be5
 8007bc4:	08007be5 	.word	0x08007be5
 8007bc8:	08007c5d 	.word	0x08007c5d
 8007bcc:	08007c71 	.word	0x08007c71
 8007bd0:	08007cbf 	.word	0x08007cbf
 8007bd4:	08007be5 	.word	0x08007be5
 8007bd8:	08007be5 	.word	0x08007be5
 8007bdc:	08007c5d 	.word	0x08007c5d
 8007be0:	08007c71 	.word	0x08007c71
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007bea:	f043 0301 	orr.w	r3, r3, #1
 8007bee:	b2da      	uxtb	r2, r3
 8007bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfa:	699b      	ldr	r3, [r3, #24]
 8007bfc:	18d1      	adds	r1, r2, r3
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6a3a      	ldr	r2, [r7, #32]
 8007c02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c04:	f7ff ff78 	bl	8007af8 <prvInsertTimerInActiveList>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d06d      	beq.n	8007cea <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c10:	6a1b      	ldr	r3, [r3, #32]
 8007c12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c14:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c1c:	f003 0304 	and.w	r3, r3, #4
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d062      	beq.n	8007cea <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c28:	699b      	ldr	r3, [r3, #24]
 8007c2a:	441a      	add	r2, r3
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	9300      	str	r3, [sp, #0]
 8007c30:	2300      	movs	r3, #0
 8007c32:	2100      	movs	r1, #0
 8007c34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c36:	f7ff fe1d 	bl	8007874 <xTimerGenericCommand>
 8007c3a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d153      	bne.n	8007cea <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8007c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c46:	b672      	cpsid	i
 8007c48:	f383 8811 	msr	BASEPRI, r3
 8007c4c:	f3bf 8f6f 	isb	sy
 8007c50:	f3bf 8f4f 	dsb	sy
 8007c54:	b662      	cpsie	i
 8007c56:	61bb      	str	r3, [r7, #24]
}
 8007c58:	bf00      	nop
 8007c5a:	e7fe      	b.n	8007c5a <prvProcessReceivedCommands+0xde>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c62:	f023 0301 	bic.w	r3, r3, #1
 8007c66:	b2da      	uxtb	r2, r3
 8007c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8007c6e:	e03c      	b.n	8007cea <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c76:	f043 0301 	orr.w	r3, r3, #1
 8007c7a:	b2da      	uxtb	r2, r3
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c86:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8a:	699b      	ldr	r3, [r3, #24]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d10c      	bne.n	8007caa <prvProcessReceivedCommands+0x12e>
	__asm volatile
 8007c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c94:	b672      	cpsid	i
 8007c96:	f383 8811 	msr	BASEPRI, r3
 8007c9a:	f3bf 8f6f 	isb	sy
 8007c9e:	f3bf 8f4f 	dsb	sy
 8007ca2:	b662      	cpsie	i
 8007ca4:	617b      	str	r3, [r7, #20]
}
 8007ca6:	bf00      	nop
 8007ca8:	e7fe      	b.n	8007ca8 <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cac:	699a      	ldr	r2, [r3, #24]
 8007cae:	6a3b      	ldr	r3, [r7, #32]
 8007cb0:	18d1      	adds	r1, r2, r3
 8007cb2:	6a3b      	ldr	r3, [r7, #32]
 8007cb4:	6a3a      	ldr	r2, [r7, #32]
 8007cb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007cb8:	f7ff ff1e 	bl	8007af8 <prvInsertTimerInActiveList>
					break;
 8007cbc:	e015      	b.n	8007cea <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007cc4:	f003 0302 	and.w	r3, r3, #2
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d103      	bne.n	8007cd4 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 8007ccc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007cce:	f000 fbcb 	bl	8008468 <vPortFree>
 8007cd2:	e00a      	b.n	8007cea <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007cda:	f023 0301 	bic.w	r3, r3, #1
 8007cde:	b2da      	uxtb	r2, r3
 8007ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007ce6:	e000      	b.n	8007cea <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007ce8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007cea:	4b08      	ldr	r3, [pc, #32]	; (8007d0c <prvProcessReceivedCommands+0x190>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f107 0108 	add.w	r1, r7, #8
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7fd ff7f 	bl	8005bf8 <xQueueReceive>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	f47f af41 	bne.w	8007b84 <prvProcessReceivedCommands+0x8>
	}
}
 8007d02:	bf00      	nop
 8007d04:	bf00      	nop
 8007d06:	3728      	adds	r7, #40	; 0x28
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	20003af0 	.word	0x20003af0

08007d10 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b088      	sub	sp, #32
 8007d14:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d16:	e04a      	b.n	8007dae <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d18:	4b2e      	ldr	r3, [pc, #184]	; (8007dd4 <prvSwitchTimerLists+0xc4>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d22:	4b2c      	ldr	r3, [pc, #176]	; (8007dd4 <prvSwitchTimerLists+0xc4>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	68db      	ldr	r3, [r3, #12]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	3304      	adds	r3, #4
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7fd fb60 	bl	80053f6 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6a1b      	ldr	r3, [r3, #32]
 8007d3a:	68f8      	ldr	r0, [r7, #12]
 8007d3c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007d44:	f003 0304 	and.w	r3, r3, #4
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d030      	beq.n	8007dae <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	699b      	ldr	r3, [r3, #24]
 8007d50:	693a      	ldr	r2, [r7, #16]
 8007d52:	4413      	add	r3, r2
 8007d54:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007d56:	68ba      	ldr	r2, [r7, #8]
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d90e      	bls.n	8007d7c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	68ba      	ldr	r2, [r7, #8]
 8007d62:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d6a:	4b1a      	ldr	r3, [pc, #104]	; (8007dd4 <prvSwitchTimerLists+0xc4>)
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	3304      	adds	r3, #4
 8007d72:	4619      	mov	r1, r3
 8007d74:	4610      	mov	r0, r2
 8007d76:	f7fd fb05 	bl	8005384 <vListInsert>
 8007d7a:	e018      	b.n	8007dae <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	9300      	str	r3, [sp, #0]
 8007d80:	2300      	movs	r3, #0
 8007d82:	693a      	ldr	r2, [r7, #16]
 8007d84:	2100      	movs	r1, #0
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f7ff fd74 	bl	8007874 <xTimerGenericCommand>
 8007d8c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d10c      	bne.n	8007dae <prvSwitchTimerLists+0x9e>
	__asm volatile
 8007d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d98:	b672      	cpsid	i
 8007d9a:	f383 8811 	msr	BASEPRI, r3
 8007d9e:	f3bf 8f6f 	isb	sy
 8007da2:	f3bf 8f4f 	dsb	sy
 8007da6:	b662      	cpsie	i
 8007da8:	603b      	str	r3, [r7, #0]
}
 8007daa:	bf00      	nop
 8007dac:	e7fe      	b.n	8007dac <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007dae:	4b09      	ldr	r3, [pc, #36]	; (8007dd4 <prvSwitchTimerLists+0xc4>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d1af      	bne.n	8007d18 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007db8:	4b06      	ldr	r3, [pc, #24]	; (8007dd4 <prvSwitchTimerLists+0xc4>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007dbe:	4b06      	ldr	r3, [pc, #24]	; (8007dd8 <prvSwitchTimerLists+0xc8>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a04      	ldr	r2, [pc, #16]	; (8007dd4 <prvSwitchTimerLists+0xc4>)
 8007dc4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007dc6:	4a04      	ldr	r2, [pc, #16]	; (8007dd8 <prvSwitchTimerLists+0xc8>)
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	6013      	str	r3, [r2, #0]
}
 8007dcc:	bf00      	nop
 8007dce:	3718      	adds	r7, #24
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	20003ae8 	.word	0x20003ae8
 8007dd8:	20003aec 	.word	0x20003aec

08007ddc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007de2:	f000 f94b 	bl	800807c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007de6:	4b15      	ldr	r3, [pc, #84]	; (8007e3c <prvCheckForValidListAndQueue+0x60>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d120      	bne.n	8007e30 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007dee:	4814      	ldr	r0, [pc, #80]	; (8007e40 <prvCheckForValidListAndQueue+0x64>)
 8007df0:	f7fd fa77 	bl	80052e2 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007df4:	4813      	ldr	r0, [pc, #76]	; (8007e44 <prvCheckForValidListAndQueue+0x68>)
 8007df6:	f7fd fa74 	bl	80052e2 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007dfa:	4b13      	ldr	r3, [pc, #76]	; (8007e48 <prvCheckForValidListAndQueue+0x6c>)
 8007dfc:	4a10      	ldr	r2, [pc, #64]	; (8007e40 <prvCheckForValidListAndQueue+0x64>)
 8007dfe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007e00:	4b12      	ldr	r3, [pc, #72]	; (8007e4c <prvCheckForValidListAndQueue+0x70>)
 8007e02:	4a10      	ldr	r2, [pc, #64]	; (8007e44 <prvCheckForValidListAndQueue+0x68>)
 8007e04:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007e06:	2300      	movs	r3, #0
 8007e08:	9300      	str	r3, [sp, #0]
 8007e0a:	4b11      	ldr	r3, [pc, #68]	; (8007e50 <prvCheckForValidListAndQueue+0x74>)
 8007e0c:	4a11      	ldr	r2, [pc, #68]	; (8007e54 <prvCheckForValidListAndQueue+0x78>)
 8007e0e:	210c      	movs	r1, #12
 8007e10:	200a      	movs	r0, #10
 8007e12:	f7fd fb85 	bl	8005520 <xQueueGenericCreateStatic>
 8007e16:	4603      	mov	r3, r0
 8007e18:	4a08      	ldr	r2, [pc, #32]	; (8007e3c <prvCheckForValidListAndQueue+0x60>)
 8007e1a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007e1c:	4b07      	ldr	r3, [pc, #28]	; (8007e3c <prvCheckForValidListAndQueue+0x60>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d005      	beq.n	8007e30 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007e24:	4b05      	ldr	r3, [pc, #20]	; (8007e3c <prvCheckForValidListAndQueue+0x60>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	490b      	ldr	r1, [pc, #44]	; (8007e58 <prvCheckForValidListAndQueue+0x7c>)
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7fe faf2 	bl	8006414 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e30:	f000 f958 	bl	80080e4 <vPortExitCritical>
}
 8007e34:	bf00      	nop
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	20003af0 	.word	0x20003af0
 8007e40:	20003ac0 	.word	0x20003ac0
 8007e44:	20003ad4 	.word	0x20003ad4
 8007e48:	20003ae8 	.word	0x20003ae8
 8007e4c:	20003aec 	.word	0x20003aec
 8007e50:	20003b74 	.word	0x20003b74
 8007e54:	20003afc 	.word	0x20003afc
 8007e58:	08018550 	.word	0x08018550

08007e5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b085      	sub	sp, #20
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	60b9      	str	r1, [r7, #8]
 8007e66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	3b04      	subs	r3, #4
 8007e6c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007e74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	3b04      	subs	r3, #4
 8007e7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	f023 0201 	bic.w	r2, r3, #1
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	3b04      	subs	r3, #4
 8007e8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007e8c:	4a0c      	ldr	r2, [pc, #48]	; (8007ec0 <pxPortInitialiseStack+0x64>)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	3b14      	subs	r3, #20
 8007e96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	3b04      	subs	r3, #4
 8007ea2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f06f 0202 	mvn.w	r2, #2
 8007eaa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	3b20      	subs	r3, #32
 8007eb0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3714      	adds	r7, #20
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr
 8007ec0:	08007ec5 	.word	0x08007ec5

08007ec4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007ece:	4b14      	ldr	r3, [pc, #80]	; (8007f20 <prvTaskExitError+0x5c>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed6:	d00c      	beq.n	8007ef2 <prvTaskExitError+0x2e>
	__asm volatile
 8007ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007edc:	b672      	cpsid	i
 8007ede:	f383 8811 	msr	BASEPRI, r3
 8007ee2:	f3bf 8f6f 	isb	sy
 8007ee6:	f3bf 8f4f 	dsb	sy
 8007eea:	b662      	cpsie	i
 8007eec:	60fb      	str	r3, [r7, #12]
}
 8007eee:	bf00      	nop
 8007ef0:	e7fe      	b.n	8007ef0 <prvTaskExitError+0x2c>
	__asm volatile
 8007ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef6:	b672      	cpsid	i
 8007ef8:	f383 8811 	msr	BASEPRI, r3
 8007efc:	f3bf 8f6f 	isb	sy
 8007f00:	f3bf 8f4f 	dsb	sy
 8007f04:	b662      	cpsie	i
 8007f06:	60bb      	str	r3, [r7, #8]
}
 8007f08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f0a:	bf00      	nop
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d0fc      	beq.n	8007f0c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f12:	bf00      	nop
 8007f14:	bf00      	nop
 8007f16:	3714      	adds	r7, #20
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr
 8007f20:	2000000c 	.word	0x2000000c
	...

08007f30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f30:	4b07      	ldr	r3, [pc, #28]	; (8007f50 <pxCurrentTCBConst2>)
 8007f32:	6819      	ldr	r1, [r3, #0]
 8007f34:	6808      	ldr	r0, [r1, #0]
 8007f36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f3a:	f380 8809 	msr	PSP, r0
 8007f3e:	f3bf 8f6f 	isb	sy
 8007f42:	f04f 0000 	mov.w	r0, #0
 8007f46:	f380 8811 	msr	BASEPRI, r0
 8007f4a:	4770      	bx	lr
 8007f4c:	f3af 8000 	nop.w

08007f50 <pxCurrentTCBConst2>:
 8007f50:	20003994 	.word	0x20003994
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f54:	bf00      	nop
 8007f56:	bf00      	nop

08007f58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f58:	4808      	ldr	r0, [pc, #32]	; (8007f7c <prvPortStartFirstTask+0x24>)
 8007f5a:	6800      	ldr	r0, [r0, #0]
 8007f5c:	6800      	ldr	r0, [r0, #0]
 8007f5e:	f380 8808 	msr	MSP, r0
 8007f62:	f04f 0000 	mov.w	r0, #0
 8007f66:	f380 8814 	msr	CONTROL, r0
 8007f6a:	b662      	cpsie	i
 8007f6c:	b661      	cpsie	f
 8007f6e:	f3bf 8f4f 	dsb	sy
 8007f72:	f3bf 8f6f 	isb	sy
 8007f76:	df00      	svc	0
 8007f78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f7a:	bf00      	nop
 8007f7c:	e000ed08 	.word	0xe000ed08

08007f80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007f86:	4b37      	ldr	r3, [pc, #220]	; (8008064 <xPortStartScheduler+0xe4>)
 8007f88:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	22ff      	movs	r2, #255	; 0xff
 8007f96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007fa0:	78fb      	ldrb	r3, [r7, #3]
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007fa8:	b2da      	uxtb	r2, r3
 8007faa:	4b2f      	ldr	r3, [pc, #188]	; (8008068 <xPortStartScheduler+0xe8>)
 8007fac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007fae:	4b2f      	ldr	r3, [pc, #188]	; (800806c <xPortStartScheduler+0xec>)
 8007fb0:	2207      	movs	r2, #7
 8007fb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fb4:	e009      	b.n	8007fca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007fb6:	4b2d      	ldr	r3, [pc, #180]	; (800806c <xPortStartScheduler+0xec>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	4a2b      	ldr	r2, [pc, #172]	; (800806c <xPortStartScheduler+0xec>)
 8007fbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007fc0:	78fb      	ldrb	r3, [r7, #3]
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	005b      	lsls	r3, r3, #1
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fca:	78fb      	ldrb	r3, [r7, #3]
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fd2:	2b80      	cmp	r3, #128	; 0x80
 8007fd4:	d0ef      	beq.n	8007fb6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007fd6:	4b25      	ldr	r3, [pc, #148]	; (800806c <xPortStartScheduler+0xec>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f1c3 0307 	rsb	r3, r3, #7
 8007fde:	2b04      	cmp	r3, #4
 8007fe0:	d00c      	beq.n	8007ffc <xPortStartScheduler+0x7c>
	__asm volatile
 8007fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe6:	b672      	cpsid	i
 8007fe8:	f383 8811 	msr	BASEPRI, r3
 8007fec:	f3bf 8f6f 	isb	sy
 8007ff0:	f3bf 8f4f 	dsb	sy
 8007ff4:	b662      	cpsie	i
 8007ff6:	60bb      	str	r3, [r7, #8]
}
 8007ff8:	bf00      	nop
 8007ffa:	e7fe      	b.n	8007ffa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ffc:	4b1b      	ldr	r3, [pc, #108]	; (800806c <xPortStartScheduler+0xec>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	021b      	lsls	r3, r3, #8
 8008002:	4a1a      	ldr	r2, [pc, #104]	; (800806c <xPortStartScheduler+0xec>)
 8008004:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008006:	4b19      	ldr	r3, [pc, #100]	; (800806c <xPortStartScheduler+0xec>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800800e:	4a17      	ldr	r2, [pc, #92]	; (800806c <xPortStartScheduler+0xec>)
 8008010:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	b2da      	uxtb	r2, r3
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800801a:	4b15      	ldr	r3, [pc, #84]	; (8008070 <xPortStartScheduler+0xf0>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a14      	ldr	r2, [pc, #80]	; (8008070 <xPortStartScheduler+0xf0>)
 8008020:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008024:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008026:	4b12      	ldr	r3, [pc, #72]	; (8008070 <xPortStartScheduler+0xf0>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a11      	ldr	r2, [pc, #68]	; (8008070 <xPortStartScheduler+0xf0>)
 800802c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008030:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008032:	f000 f8dd 	bl	80081f0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008036:	4b0f      	ldr	r3, [pc, #60]	; (8008074 <xPortStartScheduler+0xf4>)
 8008038:	2200      	movs	r2, #0
 800803a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800803c:	f000 f8fc 	bl	8008238 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008040:	4b0d      	ldr	r3, [pc, #52]	; (8008078 <xPortStartScheduler+0xf8>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a0c      	ldr	r2, [pc, #48]	; (8008078 <xPortStartScheduler+0xf8>)
 8008046:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800804a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800804c:	f7ff ff84 	bl	8007f58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008050:	f7fe feb0 	bl	8006db4 <vTaskSwitchContext>
	prvTaskExitError();
 8008054:	f7ff ff36 	bl	8007ec4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	e000e400 	.word	0xe000e400
 8008068:	20003bbc 	.word	0x20003bbc
 800806c:	20003bc0 	.word	0x20003bc0
 8008070:	e000ed20 	.word	0xe000ed20
 8008074:	2000000c 	.word	0x2000000c
 8008078:	e000ef34 	.word	0xe000ef34

0800807c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
	__asm volatile
 8008082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008086:	b672      	cpsid	i
 8008088:	f383 8811 	msr	BASEPRI, r3
 800808c:	f3bf 8f6f 	isb	sy
 8008090:	f3bf 8f4f 	dsb	sy
 8008094:	b662      	cpsie	i
 8008096:	607b      	str	r3, [r7, #4]
}
 8008098:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800809a:	4b10      	ldr	r3, [pc, #64]	; (80080dc <vPortEnterCritical+0x60>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	3301      	adds	r3, #1
 80080a0:	4a0e      	ldr	r2, [pc, #56]	; (80080dc <vPortEnterCritical+0x60>)
 80080a2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80080a4:	4b0d      	ldr	r3, [pc, #52]	; (80080dc <vPortEnterCritical+0x60>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d111      	bne.n	80080d0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80080ac:	4b0c      	ldr	r3, [pc, #48]	; (80080e0 <vPortEnterCritical+0x64>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00c      	beq.n	80080d0 <vPortEnterCritical+0x54>
	__asm volatile
 80080b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ba:	b672      	cpsid	i
 80080bc:	f383 8811 	msr	BASEPRI, r3
 80080c0:	f3bf 8f6f 	isb	sy
 80080c4:	f3bf 8f4f 	dsb	sy
 80080c8:	b662      	cpsie	i
 80080ca:	603b      	str	r3, [r7, #0]
}
 80080cc:	bf00      	nop
 80080ce:	e7fe      	b.n	80080ce <vPortEnterCritical+0x52>
	}
}
 80080d0:	bf00      	nop
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr
 80080dc:	2000000c 	.word	0x2000000c
 80080e0:	e000ed04 	.word	0xe000ed04

080080e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80080ea:	4b13      	ldr	r3, [pc, #76]	; (8008138 <vPortExitCritical+0x54>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d10c      	bne.n	800810c <vPortExitCritical+0x28>
	__asm volatile
 80080f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f6:	b672      	cpsid	i
 80080f8:	f383 8811 	msr	BASEPRI, r3
 80080fc:	f3bf 8f6f 	isb	sy
 8008100:	f3bf 8f4f 	dsb	sy
 8008104:	b662      	cpsie	i
 8008106:	607b      	str	r3, [r7, #4]
}
 8008108:	bf00      	nop
 800810a:	e7fe      	b.n	800810a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800810c:	4b0a      	ldr	r3, [pc, #40]	; (8008138 <vPortExitCritical+0x54>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	3b01      	subs	r3, #1
 8008112:	4a09      	ldr	r2, [pc, #36]	; (8008138 <vPortExitCritical+0x54>)
 8008114:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008116:	4b08      	ldr	r3, [pc, #32]	; (8008138 <vPortExitCritical+0x54>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d105      	bne.n	800812a <vPortExitCritical+0x46>
 800811e:	2300      	movs	r3, #0
 8008120:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	f383 8811 	msr	BASEPRI, r3
}
 8008128:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800812a:	bf00      	nop
 800812c:	370c      	adds	r7, #12
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr
 8008136:	bf00      	nop
 8008138:	2000000c 	.word	0x2000000c
 800813c:	00000000 	.word	0x00000000

08008140 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008140:	f3ef 8009 	mrs	r0, PSP
 8008144:	f3bf 8f6f 	isb	sy
 8008148:	4b15      	ldr	r3, [pc, #84]	; (80081a0 <pxCurrentTCBConst>)
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	f01e 0f10 	tst.w	lr, #16
 8008150:	bf08      	it	eq
 8008152:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008156:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800815a:	6010      	str	r0, [r2, #0]
 800815c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008160:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008164:	b672      	cpsid	i
 8008166:	f380 8811 	msr	BASEPRI, r0
 800816a:	f3bf 8f4f 	dsb	sy
 800816e:	f3bf 8f6f 	isb	sy
 8008172:	b662      	cpsie	i
 8008174:	f7fe fe1e 	bl	8006db4 <vTaskSwitchContext>
 8008178:	f04f 0000 	mov.w	r0, #0
 800817c:	f380 8811 	msr	BASEPRI, r0
 8008180:	bc09      	pop	{r0, r3}
 8008182:	6819      	ldr	r1, [r3, #0]
 8008184:	6808      	ldr	r0, [r1, #0]
 8008186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800818a:	f01e 0f10 	tst.w	lr, #16
 800818e:	bf08      	it	eq
 8008190:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008194:	f380 8809 	msr	PSP, r0
 8008198:	f3bf 8f6f 	isb	sy
 800819c:	4770      	bx	lr
 800819e:	bf00      	nop

080081a0 <pxCurrentTCBConst>:
 80081a0:	20003994 	.word	0x20003994
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80081a4:	bf00      	nop
 80081a6:	bf00      	nop

080081a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
	__asm volatile
 80081ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b2:	b672      	cpsid	i
 80081b4:	f383 8811 	msr	BASEPRI, r3
 80081b8:	f3bf 8f6f 	isb	sy
 80081bc:	f3bf 8f4f 	dsb	sy
 80081c0:	b662      	cpsie	i
 80081c2:	607b      	str	r3, [r7, #4]
}
 80081c4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80081c6:	f7fe fd3b 	bl	8006c40 <xTaskIncrementTick>
 80081ca:	4603      	mov	r3, r0
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d003      	beq.n	80081d8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80081d0:	4b06      	ldr	r3, [pc, #24]	; (80081ec <SysTick_Handler+0x44>)
 80081d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081d6:	601a      	str	r2, [r3, #0]
 80081d8:	2300      	movs	r3, #0
 80081da:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	f383 8811 	msr	BASEPRI, r3
}
 80081e2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80081e4:	bf00      	nop
 80081e6:	3708      	adds	r7, #8
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	e000ed04 	.word	0xe000ed04

080081f0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80081f0:	b480      	push	{r7}
 80081f2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80081f4:	4b0b      	ldr	r3, [pc, #44]	; (8008224 <vPortSetupTimerInterrupt+0x34>)
 80081f6:	2200      	movs	r2, #0
 80081f8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80081fa:	4b0b      	ldr	r3, [pc, #44]	; (8008228 <vPortSetupTimerInterrupt+0x38>)
 80081fc:	2200      	movs	r2, #0
 80081fe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008200:	4b0a      	ldr	r3, [pc, #40]	; (800822c <vPortSetupTimerInterrupt+0x3c>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a0a      	ldr	r2, [pc, #40]	; (8008230 <vPortSetupTimerInterrupt+0x40>)
 8008206:	fba2 2303 	umull	r2, r3, r2, r3
 800820a:	099b      	lsrs	r3, r3, #6
 800820c:	4a09      	ldr	r2, [pc, #36]	; (8008234 <vPortSetupTimerInterrupt+0x44>)
 800820e:	3b01      	subs	r3, #1
 8008210:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008212:	4b04      	ldr	r3, [pc, #16]	; (8008224 <vPortSetupTimerInterrupt+0x34>)
 8008214:	2207      	movs	r2, #7
 8008216:	601a      	str	r2, [r3, #0]
}
 8008218:	bf00      	nop
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	e000e010 	.word	0xe000e010
 8008228:	e000e018 	.word	0xe000e018
 800822c:	20000000 	.word	0x20000000
 8008230:	10624dd3 	.word	0x10624dd3
 8008234:	e000e014 	.word	0xe000e014

08008238 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008238:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008248 <vPortEnableVFP+0x10>
 800823c:	6801      	ldr	r1, [r0, #0]
 800823e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008242:	6001      	str	r1, [r0, #0]
 8008244:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008246:	bf00      	nop
 8008248:	e000ed88 	.word	0xe000ed88

0800824c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800824c:	b480      	push	{r7}
 800824e:	b085      	sub	sp, #20
 8008250:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008252:	f3ef 8305 	mrs	r3, IPSR
 8008256:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2b0f      	cmp	r3, #15
 800825c:	d916      	bls.n	800828c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800825e:	4a19      	ldr	r2, [pc, #100]	; (80082c4 <vPortValidateInterruptPriority+0x78>)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	4413      	add	r3, r2
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008268:	4b17      	ldr	r3, [pc, #92]	; (80082c8 <vPortValidateInterruptPriority+0x7c>)
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	7afa      	ldrb	r2, [r7, #11]
 800826e:	429a      	cmp	r2, r3
 8008270:	d20c      	bcs.n	800828c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8008272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008276:	b672      	cpsid	i
 8008278:	f383 8811 	msr	BASEPRI, r3
 800827c:	f3bf 8f6f 	isb	sy
 8008280:	f3bf 8f4f 	dsb	sy
 8008284:	b662      	cpsie	i
 8008286:	607b      	str	r3, [r7, #4]
}
 8008288:	bf00      	nop
 800828a:	e7fe      	b.n	800828a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800828c:	4b0f      	ldr	r3, [pc, #60]	; (80082cc <vPortValidateInterruptPriority+0x80>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008294:	4b0e      	ldr	r3, [pc, #56]	; (80082d0 <vPortValidateInterruptPriority+0x84>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	429a      	cmp	r2, r3
 800829a:	d90c      	bls.n	80082b6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800829c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a0:	b672      	cpsid	i
 80082a2:	f383 8811 	msr	BASEPRI, r3
 80082a6:	f3bf 8f6f 	isb	sy
 80082aa:	f3bf 8f4f 	dsb	sy
 80082ae:	b662      	cpsie	i
 80082b0:	603b      	str	r3, [r7, #0]
}
 80082b2:	bf00      	nop
 80082b4:	e7fe      	b.n	80082b4 <vPortValidateInterruptPriority+0x68>
	}
 80082b6:	bf00      	nop
 80082b8:	3714      	adds	r7, #20
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	e000e3f0 	.word	0xe000e3f0
 80082c8:	20003bbc 	.word	0x20003bbc
 80082cc:	e000ed0c 	.word	0xe000ed0c
 80082d0:	20003bc0 	.word	0x20003bc0

080082d4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b08a      	sub	sp, #40	; 0x28
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80082dc:	2300      	movs	r3, #0
 80082de:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80082e0:	f7fe fbe0 	bl	8006aa4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80082e4:	4b5b      	ldr	r3, [pc, #364]	; (8008454 <pvPortMalloc+0x180>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d101      	bne.n	80082f0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80082ec:	f000 f91a 	bl	8008524 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80082f0:	4b59      	ldr	r3, [pc, #356]	; (8008458 <pvPortMalloc+0x184>)
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4013      	ands	r3, r2
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	f040 8092 	bne.w	8008422 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d01f      	beq.n	8008344 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8008304:	2208      	movs	r2, #8
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	4413      	add	r3, r2
 800830a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f003 0307 	and.w	r3, r3, #7
 8008312:	2b00      	cmp	r3, #0
 8008314:	d016      	beq.n	8008344 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f023 0307 	bic.w	r3, r3, #7
 800831c:	3308      	adds	r3, #8
 800831e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f003 0307 	and.w	r3, r3, #7
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00c      	beq.n	8008344 <pvPortMalloc+0x70>
	__asm volatile
 800832a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832e:	b672      	cpsid	i
 8008330:	f383 8811 	msr	BASEPRI, r3
 8008334:	f3bf 8f6f 	isb	sy
 8008338:	f3bf 8f4f 	dsb	sy
 800833c:	b662      	cpsie	i
 800833e:	617b      	str	r3, [r7, #20]
}
 8008340:	bf00      	nop
 8008342:	e7fe      	b.n	8008342 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d06b      	beq.n	8008422 <pvPortMalloc+0x14e>
 800834a:	4b44      	ldr	r3, [pc, #272]	; (800845c <pvPortMalloc+0x188>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	429a      	cmp	r2, r3
 8008352:	d866      	bhi.n	8008422 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008354:	4b42      	ldr	r3, [pc, #264]	; (8008460 <pvPortMalloc+0x18c>)
 8008356:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008358:	4b41      	ldr	r3, [pc, #260]	; (8008460 <pvPortMalloc+0x18c>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800835e:	e004      	b.n	800836a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8008360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008362:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800836a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	429a      	cmp	r2, r3
 8008372:	d903      	bls.n	800837c <pvPortMalloc+0xa8>
 8008374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1f1      	bne.n	8008360 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800837c:	4b35      	ldr	r3, [pc, #212]	; (8008454 <pvPortMalloc+0x180>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008382:	429a      	cmp	r2, r3
 8008384:	d04d      	beq.n	8008422 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008386:	6a3b      	ldr	r3, [r7, #32]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2208      	movs	r2, #8
 800838c:	4413      	add	r3, r2
 800838e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	6a3b      	ldr	r3, [r7, #32]
 8008396:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839a:	685a      	ldr	r2, [r3, #4]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	1ad2      	subs	r2, r2, r3
 80083a0:	2308      	movs	r3, #8
 80083a2:	005b      	lsls	r3, r3, #1
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d921      	bls.n	80083ec <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80083a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4413      	add	r3, r2
 80083ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083b0:	69bb      	ldr	r3, [r7, #24]
 80083b2:	f003 0307 	and.w	r3, r3, #7
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00c      	beq.n	80083d4 <pvPortMalloc+0x100>
	__asm volatile
 80083ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083be:	b672      	cpsid	i
 80083c0:	f383 8811 	msr	BASEPRI, r3
 80083c4:	f3bf 8f6f 	isb	sy
 80083c8:	f3bf 8f4f 	dsb	sy
 80083cc:	b662      	cpsie	i
 80083ce:	613b      	str	r3, [r7, #16]
}
 80083d0:	bf00      	nop
 80083d2:	e7fe      	b.n	80083d2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80083d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d6:	685a      	ldr	r2, [r3, #4]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	1ad2      	subs	r2, r2, r3
 80083dc:	69bb      	ldr	r3, [r7, #24]
 80083de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80083e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80083e6:	69b8      	ldr	r0, [r7, #24]
 80083e8:	f000 f8fe 	bl	80085e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80083ec:	4b1b      	ldr	r3, [pc, #108]	; (800845c <pvPortMalloc+0x188>)
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	1ad3      	subs	r3, r2, r3
 80083f6:	4a19      	ldr	r2, [pc, #100]	; (800845c <pvPortMalloc+0x188>)
 80083f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80083fa:	4b18      	ldr	r3, [pc, #96]	; (800845c <pvPortMalloc+0x188>)
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	4b19      	ldr	r3, [pc, #100]	; (8008464 <pvPortMalloc+0x190>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	429a      	cmp	r2, r3
 8008404:	d203      	bcs.n	800840e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008406:	4b15      	ldr	r3, [pc, #84]	; (800845c <pvPortMalloc+0x188>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a16      	ldr	r2, [pc, #88]	; (8008464 <pvPortMalloc+0x190>)
 800840c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800840e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008410:	685a      	ldr	r2, [r3, #4]
 8008412:	4b11      	ldr	r3, [pc, #68]	; (8008458 <pvPortMalloc+0x184>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	431a      	orrs	r2, r3
 8008418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800841c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841e:	2200      	movs	r2, #0
 8008420:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008422:	f7fe fb4d 	bl	8006ac0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008426:	69fb      	ldr	r3, [r7, #28]
 8008428:	f003 0307 	and.w	r3, r3, #7
 800842c:	2b00      	cmp	r3, #0
 800842e:	d00c      	beq.n	800844a <pvPortMalloc+0x176>
	__asm volatile
 8008430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008434:	b672      	cpsid	i
 8008436:	f383 8811 	msr	BASEPRI, r3
 800843a:	f3bf 8f6f 	isb	sy
 800843e:	f3bf 8f4f 	dsb	sy
 8008442:	b662      	cpsie	i
 8008444:	60fb      	str	r3, [r7, #12]
}
 8008446:	bf00      	nop
 8008448:	e7fe      	b.n	8008448 <pvPortMalloc+0x174>
	return pvReturn;
 800844a:	69fb      	ldr	r3, [r7, #28]
}
 800844c:	4618      	mov	r0, r3
 800844e:	3728      	adds	r7, #40	; 0x28
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}
 8008454:	200077cc 	.word	0x200077cc
 8008458:	200077d8 	.word	0x200077d8
 800845c:	200077d0 	.word	0x200077d0
 8008460:	200077c4 	.word	0x200077c4
 8008464:	200077d4 	.word	0x200077d4

08008468 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b086      	sub	sp, #24
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d04c      	beq.n	8008514 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800847a:	2308      	movs	r3, #8
 800847c:	425b      	negs	r3, r3
 800847e:	697a      	ldr	r2, [r7, #20]
 8008480:	4413      	add	r3, r2
 8008482:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	685a      	ldr	r2, [r3, #4]
 800848c:	4b23      	ldr	r3, [pc, #140]	; (800851c <vPortFree+0xb4>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4013      	ands	r3, r2
 8008492:	2b00      	cmp	r3, #0
 8008494:	d10c      	bne.n	80084b0 <vPortFree+0x48>
	__asm volatile
 8008496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800849a:	b672      	cpsid	i
 800849c:	f383 8811 	msr	BASEPRI, r3
 80084a0:	f3bf 8f6f 	isb	sy
 80084a4:	f3bf 8f4f 	dsb	sy
 80084a8:	b662      	cpsie	i
 80084aa:	60fb      	str	r3, [r7, #12]
}
 80084ac:	bf00      	nop
 80084ae:	e7fe      	b.n	80084ae <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00c      	beq.n	80084d2 <vPortFree+0x6a>
	__asm volatile
 80084b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084bc:	b672      	cpsid	i
 80084be:	f383 8811 	msr	BASEPRI, r3
 80084c2:	f3bf 8f6f 	isb	sy
 80084c6:	f3bf 8f4f 	dsb	sy
 80084ca:	b662      	cpsie	i
 80084cc:	60bb      	str	r3, [r7, #8]
}
 80084ce:	bf00      	nop
 80084d0:	e7fe      	b.n	80084d0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	685a      	ldr	r2, [r3, #4]
 80084d6:	4b11      	ldr	r3, [pc, #68]	; (800851c <vPortFree+0xb4>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4013      	ands	r3, r2
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d019      	beq.n	8008514 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d115      	bne.n	8008514 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	685a      	ldr	r2, [r3, #4]
 80084ec:	4b0b      	ldr	r3, [pc, #44]	; (800851c <vPortFree+0xb4>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	43db      	mvns	r3, r3
 80084f2:	401a      	ands	r2, r3
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80084f8:	f7fe fad4 	bl	8006aa4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	685a      	ldr	r2, [r3, #4]
 8008500:	4b07      	ldr	r3, [pc, #28]	; (8008520 <vPortFree+0xb8>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4413      	add	r3, r2
 8008506:	4a06      	ldr	r2, [pc, #24]	; (8008520 <vPortFree+0xb8>)
 8008508:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800850a:	6938      	ldr	r0, [r7, #16]
 800850c:	f000 f86c 	bl	80085e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008510:	f7fe fad6 	bl	8006ac0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008514:	bf00      	nop
 8008516:	3718      	adds	r7, #24
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}
 800851c:	200077d8 	.word	0x200077d8
 8008520:	200077d0 	.word	0x200077d0

08008524 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008524:	b480      	push	{r7}
 8008526:	b085      	sub	sp, #20
 8008528:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800852a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800852e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008530:	4b27      	ldr	r3, [pc, #156]	; (80085d0 <prvHeapInit+0xac>)
 8008532:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f003 0307 	and.w	r3, r3, #7
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00c      	beq.n	8008558 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	3307      	adds	r3, #7
 8008542:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f023 0307 	bic.w	r3, r3, #7
 800854a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800854c:	68ba      	ldr	r2, [r7, #8]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	1ad3      	subs	r3, r2, r3
 8008552:	4a1f      	ldr	r2, [pc, #124]	; (80085d0 <prvHeapInit+0xac>)
 8008554:	4413      	add	r3, r2
 8008556:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800855c:	4a1d      	ldr	r2, [pc, #116]	; (80085d4 <prvHeapInit+0xb0>)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008562:	4b1c      	ldr	r3, [pc, #112]	; (80085d4 <prvHeapInit+0xb0>)
 8008564:	2200      	movs	r2, #0
 8008566:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	68ba      	ldr	r2, [r7, #8]
 800856c:	4413      	add	r3, r2
 800856e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008570:	2208      	movs	r2, #8
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	1a9b      	subs	r3, r3, r2
 8008576:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f023 0307 	bic.w	r3, r3, #7
 800857e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	4a15      	ldr	r2, [pc, #84]	; (80085d8 <prvHeapInit+0xb4>)
 8008584:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008586:	4b14      	ldr	r3, [pc, #80]	; (80085d8 <prvHeapInit+0xb4>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2200      	movs	r2, #0
 800858c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800858e:	4b12      	ldr	r3, [pc, #72]	; (80085d8 <prvHeapInit+0xb4>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2200      	movs	r2, #0
 8008594:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	1ad2      	subs	r2, r2, r3
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80085a4:	4b0c      	ldr	r3, [pc, #48]	; (80085d8 <prvHeapInit+0xb4>)
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	4a0a      	ldr	r2, [pc, #40]	; (80085dc <prvHeapInit+0xb8>)
 80085b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	4a09      	ldr	r2, [pc, #36]	; (80085e0 <prvHeapInit+0xbc>)
 80085ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80085bc:	4b09      	ldr	r3, [pc, #36]	; (80085e4 <prvHeapInit+0xc0>)
 80085be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80085c2:	601a      	str	r2, [r3, #0]
}
 80085c4:	bf00      	nop
 80085c6:	3714      	adds	r7, #20
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr
 80085d0:	20003bc4 	.word	0x20003bc4
 80085d4:	200077c4 	.word	0x200077c4
 80085d8:	200077cc 	.word	0x200077cc
 80085dc:	200077d4 	.word	0x200077d4
 80085e0:	200077d0 	.word	0x200077d0
 80085e4:	200077d8 	.word	0x200077d8

080085e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80085e8:	b480      	push	{r7}
 80085ea:	b085      	sub	sp, #20
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80085f0:	4b28      	ldr	r3, [pc, #160]	; (8008694 <prvInsertBlockIntoFreeList+0xac>)
 80085f2:	60fb      	str	r3, [r7, #12]
 80085f4:	e002      	b.n	80085fc <prvInsertBlockIntoFreeList+0x14>
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	60fb      	str	r3, [r7, #12]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	429a      	cmp	r2, r3
 8008604:	d8f7      	bhi.n	80085f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	68ba      	ldr	r2, [r7, #8]
 8008610:	4413      	add	r3, r2
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	429a      	cmp	r2, r3
 8008616:	d108      	bne.n	800862a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	685a      	ldr	r2, [r3, #4]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	441a      	add	r2, r3
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	68ba      	ldr	r2, [r7, #8]
 8008634:	441a      	add	r2, r3
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	429a      	cmp	r2, r3
 800863c:	d118      	bne.n	8008670 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	4b15      	ldr	r3, [pc, #84]	; (8008698 <prvInsertBlockIntoFreeList+0xb0>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	429a      	cmp	r2, r3
 8008648:	d00d      	beq.n	8008666 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	685a      	ldr	r2, [r3, #4]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	441a      	add	r2, r3
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	601a      	str	r2, [r3, #0]
 8008664:	e008      	b.n	8008678 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008666:	4b0c      	ldr	r3, [pc, #48]	; (8008698 <prvInsertBlockIntoFreeList+0xb0>)
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	601a      	str	r2, [r3, #0]
 800866e:	e003      	b.n	8008678 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	429a      	cmp	r2, r3
 800867e:	d002      	beq.n	8008686 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008686:	bf00      	nop
 8008688:	3714      	adds	r7, #20
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr
 8008692:	bf00      	nop
 8008694:	200077c4 	.word	0x200077c4
 8008698:	200077cc 	.word	0x200077cc

0800869c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	330c      	adds	r3, #12
 80086ac:	461a      	mov	r2, r3
 80086ae:	6839      	ldr	r1, [r7, #0]
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f003 f953 	bl	800b95c <tcpip_send_msg_wait_sem>
 80086b6:	4603      	mov	r3, r0
 80086b8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80086ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d103      	bne.n	80086ca <netconn_apimsg+0x2e>
    return apimsg->err;
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80086c8:	e001      	b.n	80086ce <netconn_apimsg+0x32>
  }
  return err;
 80086ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3710      	adds	r7, #16
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
	...

080086d8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b08c      	sub	sp, #48	; 0x30
 80086dc:	af00      	add	r7, sp, #0
 80086de:	4603      	mov	r3, r0
 80086e0:	603a      	str	r2, [r7, #0]
 80086e2:	71fb      	strb	r3, [r7, #7]
 80086e4:	460b      	mov	r3, r1
 80086e6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 80086e8:	79fb      	ldrb	r3, [r7, #7]
 80086ea:	6839      	ldr	r1, [r7, #0]
 80086ec:	4618      	mov	r0, r3
 80086ee:	f001 f82f 	bl	8009750 <netconn_alloc>
 80086f2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 80086f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d054      	beq.n	80087a4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 80086fa:	79bb      	ldrb	r3, [r7, #6]
 80086fc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 80086fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008700:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8008702:	f107 0308 	add.w	r3, r7, #8
 8008706:	4619      	mov	r1, r3
 8008708:	4829      	ldr	r0, [pc, #164]	; (80087b0 <netconn_new_with_proto_and_callback+0xd8>)
 800870a:	f7ff ffc7 	bl	800869c <netconn_apimsg>
 800870e:	4603      	mov	r3, r0
 8008710:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8008714:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008718:	2b00      	cmp	r3, #0
 800871a:	d043      	beq.n	80087a4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800871c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d005      	beq.n	8008730 <netconn_new_with_proto_and_callback+0x58>
 8008724:	4b23      	ldr	r3, [pc, #140]	; (80087b4 <netconn_new_with_proto_and_callback+0xdc>)
 8008726:	22a3      	movs	r2, #163	; 0xa3
 8008728:	4923      	ldr	r1, [pc, #140]	; (80087b8 <netconn_new_with_proto_and_callback+0xe0>)
 800872a:	4824      	ldr	r0, [pc, #144]	; (80087bc <netconn_new_with_proto_and_callback+0xe4>)
 800872c:	f00e fc68 	bl	8017000 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8008730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008732:	3310      	adds	r3, #16
 8008734:	4618      	mov	r0, r3
 8008736:	f00e fac6 	bl	8016cc6 <sys_mbox_valid>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	d105      	bne.n	800874c <netconn_new_with_proto_and_callback+0x74>
 8008740:	4b1c      	ldr	r3, [pc, #112]	; (80087b4 <netconn_new_with_proto_and_callback+0xdc>)
 8008742:	22a4      	movs	r2, #164	; 0xa4
 8008744:	491e      	ldr	r1, [pc, #120]	; (80087c0 <netconn_new_with_proto_and_callback+0xe8>)
 8008746:	481d      	ldr	r0, [pc, #116]	; (80087bc <netconn_new_with_proto_and_callback+0xe4>)
 8008748:	f00e fc5a 	bl	8017000 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800874c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800874e:	3314      	adds	r3, #20
 8008750:	4618      	mov	r0, r3
 8008752:	f00e fab8 	bl	8016cc6 <sys_mbox_valid>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d005      	beq.n	8008768 <netconn_new_with_proto_and_callback+0x90>
 800875c:	4b15      	ldr	r3, [pc, #84]	; (80087b4 <netconn_new_with_proto_and_callback+0xdc>)
 800875e:	22a6      	movs	r2, #166	; 0xa6
 8008760:	4918      	ldr	r1, [pc, #96]	; (80087c4 <netconn_new_with_proto_and_callback+0xec>)
 8008762:	4816      	ldr	r0, [pc, #88]	; (80087bc <netconn_new_with_proto_and_callback+0xe4>)
 8008764:	f00e fc4c 	bl	8017000 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8008768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800876a:	330c      	adds	r3, #12
 800876c:	4618      	mov	r0, r3
 800876e:	f00e fb3b 	bl	8016de8 <sys_sem_valid>
 8008772:	4603      	mov	r3, r0
 8008774:	2b00      	cmp	r3, #0
 8008776:	d105      	bne.n	8008784 <netconn_new_with_proto_and_callback+0xac>
 8008778:	4b0e      	ldr	r3, [pc, #56]	; (80087b4 <netconn_new_with_proto_and_callback+0xdc>)
 800877a:	22a9      	movs	r2, #169	; 0xa9
 800877c:	4912      	ldr	r1, [pc, #72]	; (80087c8 <netconn_new_with_proto_and_callback+0xf0>)
 800877e:	480f      	ldr	r0, [pc, #60]	; (80087bc <netconn_new_with_proto_and_callback+0xe4>)
 8008780:	f00e fc3e 	bl	8017000 <iprintf>
      sys_sem_free(&conn->op_completed);
 8008784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008786:	330c      	adds	r3, #12
 8008788:	4618      	mov	r0, r3
 800878a:	f00e fb20 	bl	8016dce <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800878e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008790:	3310      	adds	r3, #16
 8008792:	4618      	mov	r0, r3
 8008794:	f00e fa10 	bl	8016bb8 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8008798:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800879a:	2007      	movs	r0, #7
 800879c:	f003 fe46 	bl	800c42c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 80087a0:	2300      	movs	r3, #0
 80087a2:	e000      	b.n	80087a6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 80087a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3730      	adds	r7, #48	; 0x30
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	08009725 	.word	0x08009725
 80087b4:	08018558 	.word	0x08018558
 80087b8:	0801858c 	.word	0x0801858c
 80087bc:	080185b0 	.word	0x080185b0
 80087c0:	080185d8 	.word	0x080185d8
 80087c4:	080185f0 	.word	0x080185f0
 80087c8:	08018614 	.word	0x08018614

080087cc <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b08c      	sub	sp, #48	; 0x30
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d101      	bne.n	80087de <netconn_prepare_delete+0x12>
    return ERR_OK;
 80087da:	2300      	movs	r3, #0
 80087dc:	e014      	b.n	8008808 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80087e2:	2329      	movs	r3, #41	; 0x29
 80087e4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 80087e6:	f107 030c 	add.w	r3, r7, #12
 80087ea:	4619      	mov	r1, r3
 80087ec:	4808      	ldr	r0, [pc, #32]	; (8008810 <netconn_prepare_delete+0x44>)
 80087ee:	f7ff ff55 	bl	800869c <netconn_apimsg>
 80087f2:	4603      	mov	r3, r0
 80087f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 80087f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d002      	beq.n	8008806 <netconn_prepare_delete+0x3a>
    return err;
 8008800:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008804:	e000      	b.n	8008808 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8008806:	2300      	movs	r3, #0
}
 8008808:	4618      	mov	r0, r3
 800880a:	3730      	adds	r7, #48	; 0x30
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}
 8008810:	08009c91 	.word	0x08009c91

08008814 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d101      	bne.n	8008826 <netconn_delete+0x12>
    return ERR_OK;
 8008822:	2300      	movs	r3, #0
 8008824:	e00d      	b.n	8008842 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f7ff ffd0 	bl	80087cc <netconn_prepare_delete>
 800882c:	4603      	mov	r3, r0
 800882e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8008830:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d102      	bne.n	800883e <netconn_delete+0x2a>
    netconn_free(conn);
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 fff7 	bl	800982c <netconn_free>
  }
  return err;
 800883e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008842:	4618      	mov	r0, r3
 8008844:	3710      	adds	r7, #16
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
	...

0800884c <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b08e      	sub	sp, #56	; 0x38
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	607a      	str	r2, [r7, #4]
 8008858:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d109      	bne.n	8008874 <netconn_getaddr+0x28>
 8008860:	4b1d      	ldr	r3, [pc, #116]	; (80088d8 <netconn_getaddr+0x8c>)
 8008862:	f44f 7289 	mov.w	r2, #274	; 0x112
 8008866:	491d      	ldr	r1, [pc, #116]	; (80088dc <netconn_getaddr+0x90>)
 8008868:	481d      	ldr	r0, [pc, #116]	; (80088e0 <netconn_getaddr+0x94>)
 800886a:	f00e fbc9 	bl	8017000 <iprintf>
 800886e:	f06f 030f 	mvn.w	r3, #15
 8008872:	e02d      	b.n	80088d0 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d109      	bne.n	800888e <netconn_getaddr+0x42>
 800887a:	4b17      	ldr	r3, [pc, #92]	; (80088d8 <netconn_getaddr+0x8c>)
 800887c:	f240 1213 	movw	r2, #275	; 0x113
 8008880:	4918      	ldr	r1, [pc, #96]	; (80088e4 <netconn_getaddr+0x98>)
 8008882:	4817      	ldr	r0, [pc, #92]	; (80088e0 <netconn_getaddr+0x94>)
 8008884:	f00e fbbc 	bl	8017000 <iprintf>
 8008888:	f06f 030f 	mvn.w	r3, #15
 800888c:	e020      	b.n	80088d0 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d109      	bne.n	80088a8 <netconn_getaddr+0x5c>
 8008894:	4b10      	ldr	r3, [pc, #64]	; (80088d8 <netconn_getaddr+0x8c>)
 8008896:	f44f 728a 	mov.w	r2, #276	; 0x114
 800889a:	4913      	ldr	r1, [pc, #76]	; (80088e8 <netconn_getaddr+0x9c>)
 800889c:	4810      	ldr	r0, [pc, #64]	; (80088e0 <netconn_getaddr+0x94>)
 800889e:	f00e fbaf 	bl	8017000 <iprintf>
 80088a2:	f06f 030f 	mvn.w	r3, #15
 80088a6:	e013      	b.n	80088d0 <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 80088ac:	78fb      	ldrb	r3, [r7, #3]
 80088ae:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 80088ba:	f107 0314 	add.w	r3, r7, #20
 80088be:	4619      	mov	r1, r3
 80088c0:	480a      	ldr	r0, [pc, #40]	; (80088ec <netconn_getaddr+0xa0>)
 80088c2:	f7ff feeb 	bl	800869c <netconn_apimsg>
 80088c6:	4603      	mov	r3, r0
 80088c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 80088cc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3738      	adds	r7, #56	; 0x38
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	08018558 	.word	0x08018558
 80088dc:	08018630 	.word	0x08018630
 80088e0:	080185b0 	.word	0x080185b0
 80088e4:	08018650 	.word	0x08018650
 80088e8:	08018670 	.word	0x08018670
 80088ec:	0800a481 	.word	0x0800a481

080088f0 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b08e      	sub	sp, #56	; 0x38
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	60f8      	str	r0, [r7, #12]
 80088f8:	60b9      	str	r1, [r7, #8]
 80088fa:	4613      	mov	r3, r2
 80088fc:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d109      	bne.n	8008918 <netconn_bind+0x28>
 8008904:	4b11      	ldr	r3, [pc, #68]	; (800894c <netconn_bind+0x5c>)
 8008906:	f44f 729c 	mov.w	r2, #312	; 0x138
 800890a:	4911      	ldr	r1, [pc, #68]	; (8008950 <netconn_bind+0x60>)
 800890c:	4811      	ldr	r0, [pc, #68]	; (8008954 <netconn_bind+0x64>)
 800890e:	f00e fb77 	bl	8017000 <iprintf>
 8008912:	f06f 030f 	mvn.w	r3, #15
 8008916:	e015      	b.n	8008944 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d101      	bne.n	8008922 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800891e:	4b0e      	ldr	r3, [pc, #56]	; (8008958 <netconn_bind+0x68>)
 8008920:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800892a:	88fb      	ldrh	r3, [r7, #6]
 800892c:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800892e:	f107 0314 	add.w	r3, r7, #20
 8008932:	4619      	mov	r1, r3
 8008934:	4809      	ldr	r0, [pc, #36]	; (800895c <netconn_bind+0x6c>)
 8008936:	f7ff feb1 	bl	800869c <netconn_apimsg>
 800893a:	4603      	mov	r3, r0
 800893c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8008940:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008944:	4618      	mov	r0, r3
 8008946:	3738      	adds	r7, #56	; 0x38
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}
 800894c:	08018558 	.word	0x08018558
 8008950:	08018690 	.word	0x08018690
 8008954:	080185b0 	.word	0x080185b0
 8008958:	0801bfd8 	.word	0x0801bfd8
 800895c:	08009e59 	.word	0x08009e59

08008960 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b088      	sub	sp, #32
 8008964:	af00      	add	r7, sp, #0
 8008966:	60f8      	str	r0, [r7, #12]
 8008968:	60b9      	str	r1, [r7, #8]
 800896a:	4613      	mov	r3, r2
 800896c:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800896e:	2300      	movs	r3, #0
 8008970:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d109      	bne.n	800898c <netconn_recv_data+0x2c>
 8008978:	4b58      	ldr	r3, [pc, #352]	; (8008adc <netconn_recv_data+0x17c>)
 800897a:	f44f 7212 	mov.w	r2, #584	; 0x248
 800897e:	4958      	ldr	r1, [pc, #352]	; (8008ae0 <netconn_recv_data+0x180>)
 8008980:	4858      	ldr	r0, [pc, #352]	; (8008ae4 <netconn_recv_data+0x184>)
 8008982:	f00e fb3d 	bl	8017000 <iprintf>
 8008986:	f06f 030f 	mvn.w	r3, #15
 800898a:	e0a2      	b.n	8008ad2 <netconn_recv_data+0x172>
  *new_buf = NULL;
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	2200      	movs	r2, #0
 8008990:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d109      	bne.n	80089ac <netconn_recv_data+0x4c>
 8008998:	4b50      	ldr	r3, [pc, #320]	; (8008adc <netconn_recv_data+0x17c>)
 800899a:	f240 224a 	movw	r2, #586	; 0x24a
 800899e:	4952      	ldr	r1, [pc, #328]	; (8008ae8 <netconn_recv_data+0x188>)
 80089a0:	4850      	ldr	r0, [pc, #320]	; (8008ae4 <netconn_recv_data+0x184>)
 80089a2:	f00e fb2d 	bl	8017000 <iprintf>
 80089a6:	f06f 030f 	mvn.w	r3, #15
 80089aa:	e092      	b.n	8008ad2 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	3310      	adds	r3, #16
 80089b0:	4618      	mov	r0, r3
 80089b2:	f00e f988 	bl	8016cc6 <sys_mbox_valid>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d10e      	bne.n	80089da <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 80089bc:	68f8      	ldr	r0, [r7, #12]
 80089be:	f000 fb01 	bl	8008fc4 <netconn_err>
 80089c2:	4603      	mov	r3, r0
 80089c4:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 80089c6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d002      	beq.n	80089d4 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 80089ce:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80089d2:	e07e      	b.n	8008ad2 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 80089d4:	f06f 030a 	mvn.w	r3, #10
 80089d8:	e07b      	b.n	8008ad2 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	7f1b      	ldrb	r3, [r3, #28]
 80089de:	f003 0302 	and.w	r3, r3, #2
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d10f      	bne.n	8008a06 <netconn_recv_data+0xa6>
 80089e6:	79fb      	ldrb	r3, [r7, #7]
 80089e8:	f003 0304 	and.w	r3, r3, #4
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d10a      	bne.n	8008a06 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	7f1b      	ldrb	r3, [r3, #28]
 80089f4:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d104      	bne.n	8008a06 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d023      	beq.n	8008a4e <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	3310      	adds	r3, #16
 8008a0a:	f107 0218 	add.w	r2, r7, #24
 8008a0e:	4611      	mov	r1, r2
 8008a10:	4618      	mov	r0, r3
 8008a12:	f00e f93c 	bl	8016c8e <sys_arch_mbox_tryfetch>
 8008a16:	4603      	mov	r3, r0
 8008a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a1c:	d11f      	bne.n	8008a5e <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8008a1e:	68f8      	ldr	r0, [r7, #12]
 8008a20:	f000 fad0 	bl	8008fc4 <netconn_err>
 8008a24:	4603      	mov	r3, r0
 8008a26:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8008a28:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d002      	beq.n	8008a36 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8008a30:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008a34:	e04d      	b.n	8008ad2 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	7f1b      	ldrb	r3, [r3, #28]
 8008a3a:	f003 0301 	and.w	r3, r3, #1
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d002      	beq.n	8008a48 <netconn_recv_data+0xe8>
        return ERR_CONN;
 8008a42:	f06f 030a 	mvn.w	r3, #10
 8008a46:	e044      	b.n	8008ad2 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8008a48:	f06f 0306 	mvn.w	r3, #6
 8008a4c:	e041      	b.n	8008ad2 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	3310      	adds	r3, #16
 8008a52:	f107 0118 	add.w	r1, r7, #24
 8008a56:	2200      	movs	r2, #0
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f00e f8d9 	bl	8016c10 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a66:	2b10      	cmp	r3, #16
 8008a68:	d117      	bne.n	8008a9a <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8008a6a:	69bb      	ldr	r3, [r7, #24]
 8008a6c:	f107 0217 	add.w	r2, r7, #23
 8008a70:	4611      	mov	r1, r2
 8008a72:	4618      	mov	r0, r3
 8008a74:	f000 faf8 	bl	8009068 <lwip_netconn_is_err_msg>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d009      	beq.n	8008a92 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8008a7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008a82:	f113 0f0f 	cmn.w	r3, #15
 8008a86:	d101      	bne.n	8008a8c <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	e022      	b.n	8008ad2 <netconn_recv_data+0x172>
      }
      return err;
 8008a8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008a90:	e01f      	b.n	8008ad2 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	891b      	ldrh	r3, [r3, #8]
 8008a96:	83fb      	strh	r3, [r7, #30]
 8008a98:	e00d      	b.n	8008ab6 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d106      	bne.n	8008aae <netconn_recv_data+0x14e>
 8008aa0:	4b0e      	ldr	r3, [pc, #56]	; (8008adc <netconn_recv_data+0x17c>)
 8008aa2:	f240 2291 	movw	r2, #657	; 0x291
 8008aa6:	4911      	ldr	r1, [pc, #68]	; (8008aec <netconn_recv_data+0x18c>)
 8008aa8:	480e      	ldr	r0, [pc, #56]	; (8008ae4 <netconn_recv_data+0x184>)
 8008aaa:	f00e faa9 	bl	8017000 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	891b      	ldrh	r3, [r3, #8]
 8008ab4:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d005      	beq.n	8008aca <netconn_recv_data+0x16a>
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac2:	8bfa      	ldrh	r2, [r7, #30]
 8008ac4:	2101      	movs	r1, #1
 8008ac6:	68f8      	ldr	r0, [r7, #12]
 8008ac8:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8008aca:	69ba      	ldr	r2, [r7, #24]
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008ad0:	2300      	movs	r3, #0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3720      	adds	r7, #32
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	08018558 	.word	0x08018558
 8008ae0:	08018770 	.word	0x08018770
 8008ae4:	080185b0 	.word	0x080185b0
 8008ae8:	08018790 	.word	0x08018790
 8008aec:	080187ac 	.word	0x080187ac

08008af0 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	60b9      	str	r1, [r7, #8]
 8008afa:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d005      	beq.n	8008b0e <netconn_tcp_recvd_msg+0x1e>
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b0a:	2b10      	cmp	r3, #16
 8008b0c:	d009      	beq.n	8008b22 <netconn_tcp_recvd_msg+0x32>
 8008b0e:	4b0c      	ldr	r3, [pc, #48]	; (8008b40 <netconn_tcp_recvd_msg+0x50>)
 8008b10:	f240 22a7 	movw	r2, #679	; 0x2a7
 8008b14:	490b      	ldr	r1, [pc, #44]	; (8008b44 <netconn_tcp_recvd_msg+0x54>)
 8008b16:	480c      	ldr	r0, [pc, #48]	; (8008b48 <netconn_tcp_recvd_msg+0x58>)
 8008b18:	f00e fa72 	bl	8017000 <iprintf>
 8008b1c:	f06f 030f 	mvn.w	r3, #15
 8008b20:	e00a      	b.n	8008b38 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	68fa      	ldr	r2, [r7, #12]
 8008b26:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	68ba      	ldr	r2, [r7, #8]
 8008b2c:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8008b2e:	6879      	ldr	r1, [r7, #4]
 8008b30:	4806      	ldr	r0, [pc, #24]	; (8008b4c <netconn_tcp_recvd_msg+0x5c>)
 8008b32:	f7ff fdb3 	bl	800869c <netconn_apimsg>
 8008b36:	4603      	mov	r3, r0
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3710      	adds	r7, #16
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	08018558 	.word	0x08018558
 8008b44:	080187b8 	.word	0x080187b8
 8008b48:	080185b0 	.word	0x080185b0
 8008b4c:	08009f67 	.word	0x08009f67

08008b50 <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b08c      	sub	sp, #48	; 0x30
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d005      	beq.n	8008b6c <netconn_tcp_recvd+0x1c>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b68:	2b10      	cmp	r3, #16
 8008b6a:	d009      	beq.n	8008b80 <netconn_tcp_recvd+0x30>
 8008b6c:	4b0c      	ldr	r3, [pc, #48]	; (8008ba0 <netconn_tcp_recvd+0x50>)
 8008b6e:	f240 22b5 	movw	r2, #693	; 0x2b5
 8008b72:	490c      	ldr	r1, [pc, #48]	; (8008ba4 <netconn_tcp_recvd+0x54>)
 8008b74:	480c      	ldr	r0, [pc, #48]	; (8008ba8 <netconn_tcp_recvd+0x58>)
 8008b76:	f00e fa43 	bl	8017000 <iprintf>
 8008b7a:	f06f 030f 	mvn.w	r3, #15
 8008b7e:	e00b      	b.n	8008b98 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 8008b80:	f107 030c 	add.w	r3, r7, #12
 8008b84:	461a      	mov	r2, r3
 8008b86:	6839      	ldr	r1, [r7, #0]
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f7ff ffb1 	bl	8008af0 <netconn_tcp_recvd_msg>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 8008b94:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3730      	adds	r7, #48	; 0x30
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}
 8008ba0:	08018558 	.word	0x08018558
 8008ba4:	080187b8 	.word	0x080187b8
 8008ba8:	080185b0 	.word	0x080185b0

08008bac <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b090      	sub	sp, #64	; 0x40
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	4613      	mov	r3, r2
 8008bb8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	3310      	adds	r3, #16
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f00e f881 	bl	8016cc6 <sys_mbox_valid>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d102      	bne.n	8008bd0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8008bca:	f06f 030a 	mvn.w	r3, #10
 8008bce:	e06d      	b.n	8008cac <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	7f1b      	ldrb	r3, [r3, #28]
 8008bd4:	b25b      	sxtb	r3, r3
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	da07      	bge.n	8008bea <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	7f1b      	ldrb	r3, [r3, #28]
 8008bde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008be2:	b2da      	uxtb	r2, r3
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8008be8:	e039      	b.n	8008c5e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8008bea:	79fb      	ldrb	r3, [r7, #7]
 8008bec:	461a      	mov	r2, r3
 8008bee:	68b9      	ldr	r1, [r7, #8]
 8008bf0:	68f8      	ldr	r0, [r7, #12]
 8008bf2:	f7ff feb5 	bl	8008960 <netconn_recv_data>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8008bfc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d002      	beq.n	8008c0a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8008c04:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008c08:	e050      	b.n	8008cac <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8008c10:	79fb      	ldrb	r3, [r7, #7]
 8008c12:	f003 0308 	and.w	r3, r3, #8
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d10e      	bne.n	8008c38 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8008c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d002      	beq.n	8008c26 <netconn_recv_data_tcp+0x7a>
 8008c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c22:	891b      	ldrh	r3, [r3, #8]
 8008c24:	e000      	b.n	8008c28 <netconn_recv_data_tcp+0x7c>
 8008c26:	2301      	movs	r3, #1
 8008c28:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8008c2a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008c2c:	f107 0214 	add.w	r2, r7, #20
 8008c30:	4619      	mov	r1, r3
 8008c32:	68f8      	ldr	r0, [r7, #12]
 8008c34:	f7ff ff5c 	bl	8008af0 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8008c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d134      	bne.n	8008ca8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8008c3e:	79fb      	ldrb	r3, [r7, #7]
 8008c40:	f003 0310 	and.w	r3, r3, #16
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d009      	beq.n	8008c5c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	7f1b      	ldrb	r3, [r3, #28]
 8008c4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008c50:	b2da      	uxtb	r2, r3
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8008c56:	f06f 0306 	mvn.w	r3, #6
 8008c5a:	e027      	b.n	8008cac <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8008c5c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d005      	beq.n	8008c72 <netconn_recv_data_tcp+0xc6>
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	2101      	movs	r1, #1
 8008c6e:	68f8      	ldr	r0, [r7, #12]
 8008c70:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d10f      	bne.n	8008c9a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8008c7a:	68f8      	ldr	r0, [r7, #12]
 8008c7c:	f000 f9a2 	bl	8008fc4 <netconn_err>
 8008c80:	4603      	mov	r3, r0
 8008c82:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8008c86:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d002      	beq.n	8008c94 <netconn_recv_data_tcp+0xe8>
          return err;
 8008c8e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008c92:	e00b      	b.n	8008cac <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8008c94:	f06f 030d 	mvn.w	r3, #13
 8008c98:	e008      	b.n	8008cac <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8008c9a:	2101      	movs	r1, #1
 8008c9c:	68f8      	ldr	r0, [r7, #12]
 8008c9e:	f000 f961 	bl	8008f64 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8008ca2:	f06f 030e 	mvn.w	r3, #14
 8008ca6:	e001      	b.n	8008cac <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8008ca8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3740      	adds	r7, #64	; 0x40
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	4613      	mov	r3, r2
 8008cc0:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d005      	beq.n	8008cd4 <netconn_recv_tcp_pbuf_flags+0x20>
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008cd0:	2b10      	cmp	r3, #16
 8008cd2:	d009      	beq.n	8008ce8 <netconn_recv_tcp_pbuf_flags+0x34>
 8008cd4:	4b0a      	ldr	r3, [pc, #40]	; (8008d00 <netconn_recv_tcp_pbuf_flags+0x4c>)
 8008cd6:	f240 3225 	movw	r2, #805	; 0x325
 8008cda:	490a      	ldr	r1, [pc, #40]	; (8008d04 <netconn_recv_tcp_pbuf_flags+0x50>)
 8008cdc:	480a      	ldr	r0, [pc, #40]	; (8008d08 <netconn_recv_tcp_pbuf_flags+0x54>)
 8008cde:	f00e f98f 	bl	8017000 <iprintf>
 8008ce2:	f06f 030f 	mvn.w	r3, #15
 8008ce6:	e006      	b.n	8008cf6 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 8008ce8:	79fb      	ldrb	r3, [r7, #7]
 8008cea:	461a      	mov	r2, r3
 8008cec:	68b9      	ldr	r1, [r7, #8]
 8008cee:	68f8      	ldr	r0, [r7, #12]
 8008cf0:	f7ff ff5c 	bl	8008bac <netconn_recv_data_tcp>
 8008cf4:	4603      	mov	r3, r0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3710      	adds	r7, #16
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	08018558 	.word	0x08018558
 8008d04:	080187b8 	.word	0x080187b8
 8008d08:	080185b0 	.word	0x080185b0

08008d0c <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	60f8      	str	r0, [r7, #12]
 8008d14:	60b9      	str	r1, [r7, #8]
 8008d16:	4613      	mov	r3, r2
 8008d18:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d005      	beq.n	8008d2c <netconn_recv_udp_raw_netbuf_flags+0x20>
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d28:	2b10      	cmp	r3, #16
 8008d2a:	d109      	bne.n	8008d40 <netconn_recv_udp_raw_netbuf_flags+0x34>
 8008d2c:	4b0a      	ldr	r3, [pc, #40]	; (8008d58 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 8008d2e:	f44f 7253 	mov.w	r2, #844	; 0x34c
 8008d32:	490a      	ldr	r1, [pc, #40]	; (8008d5c <netconn_recv_udp_raw_netbuf_flags+0x50>)
 8008d34:	480a      	ldr	r0, [pc, #40]	; (8008d60 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 8008d36:	f00e f963 	bl	8017000 <iprintf>
 8008d3a:	f06f 030f 	mvn.w	r3, #15
 8008d3e:	e006      	b.n	8008d4e <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 8008d40:	79fb      	ldrb	r3, [r7, #7]
 8008d42:	461a      	mov	r2, r3
 8008d44:	68b9      	ldr	r1, [r7, #8]
 8008d46:	68f8      	ldr	r0, [r7, #12]
 8008d48:	f7ff fe0a 	bl	8008960 <netconn_recv_data>
 8008d4c:	4603      	mov	r3, r0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	08018558 	.word	0x08018558
 8008d5c:	080187dc 	.word	0x080187dc
 8008d60:	080185b0 	.word	0x080185b0

08008d64 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b08c      	sub	sp, #48	; 0x30
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d109      	bne.n	8008d88 <netconn_send+0x24>
 8008d74:	4b0e      	ldr	r3, [pc, #56]	; (8008db0 <netconn_send+0x4c>)
 8008d76:	f240 32b2 	movw	r2, #946	; 0x3b2
 8008d7a:	490e      	ldr	r1, [pc, #56]	; (8008db4 <netconn_send+0x50>)
 8008d7c:	480e      	ldr	r0, [pc, #56]	; (8008db8 <netconn_send+0x54>)
 8008d7e:	f00e f93f 	bl	8017000 <iprintf>
 8008d82:	f06f 030f 	mvn.w	r3, #15
 8008d86:	e00e      	b.n	8008da6 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8008d90:	f107 030c 	add.w	r3, r7, #12
 8008d94:	4619      	mov	r1, r3
 8008d96:	4809      	ldr	r0, [pc, #36]	; (8008dbc <netconn_send+0x58>)
 8008d98:	f7ff fc80 	bl	800869c <netconn_apimsg>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008da2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3730      	adds	r7, #48	; 0x30
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	08018558 	.word	0x08018558
 8008db4:	08018814 	.word	0x08018814
 8008db8:	080185b0 	.word	0x080185b0
 8008dbc:	08009ecd 	.word	0x08009ecd

08008dc0 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b088      	sub	sp, #32
 8008dc4:	af02      	add	r7, sp, #8
 8008dc6:	60f8      	str	r0, [r7, #12]
 8008dc8:	60b9      	str	r1, [r7, #8]
 8008dca:	607a      	str	r2, [r7, #4]
 8008dcc:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8008dd6:	78fa      	ldrb	r2, [r7, #3]
 8008dd8:	f107 0110 	add.w	r1, r7, #16
 8008ddc:	6a3b      	ldr	r3, [r7, #32]
 8008dde:	9300      	str	r3, [sp, #0]
 8008de0:	4613      	mov	r3, r2
 8008de2:	2201      	movs	r2, #1
 8008de4:	68f8      	ldr	r0, [r7, #12]
 8008de6:	f000 f805 	bl	8008df4 <netconn_write_vectors_partly>
 8008dea:	4603      	mov	r3, r0
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3718      	adds	r7, #24
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b092      	sub	sp, #72	; 0x48
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	4611      	mov	r1, r2
 8008e00:	461a      	mov	r2, r3
 8008e02:	460b      	mov	r3, r1
 8008e04:	80fb      	strh	r3, [r7, #6]
 8008e06:	4613      	mov	r3, r2
 8008e08:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d109      	bne.n	8008e24 <netconn_write_vectors_partly+0x30>
 8008e10:	4b4e      	ldr	r3, [pc, #312]	; (8008f4c <netconn_write_vectors_partly+0x158>)
 8008e12:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8008e16:	494e      	ldr	r1, [pc, #312]	; (8008f50 <netconn_write_vectors_partly+0x15c>)
 8008e18:	484e      	ldr	r0, [pc, #312]	; (8008f54 <netconn_write_vectors_partly+0x160>)
 8008e1a:	f00e f8f1 	bl	8017000 <iprintf>
 8008e1e:	f06f 030f 	mvn.w	r3, #15
 8008e22:	e08e      	b.n	8008f42 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e2c:	2b10      	cmp	r3, #16
 8008e2e:	d009      	beq.n	8008e44 <netconn_write_vectors_partly+0x50>
 8008e30:	4b46      	ldr	r3, [pc, #280]	; (8008f4c <netconn_write_vectors_partly+0x158>)
 8008e32:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8008e36:	4948      	ldr	r1, [pc, #288]	; (8008f58 <netconn_write_vectors_partly+0x164>)
 8008e38:	4846      	ldr	r0, [pc, #280]	; (8008f54 <netconn_write_vectors_partly+0x160>)
 8008e3a:	f00e f8e1 	bl	8017000 <iprintf>
 8008e3e:	f06f 0305 	mvn.w	r3, #5
 8008e42:	e07e      	b.n	8008f42 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	7f1b      	ldrb	r3, [r3, #28]
 8008e48:	f003 0302 	and.w	r3, r3, #2
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d104      	bne.n	8008e5a <netconn_write_vectors_partly+0x66>
 8008e50:	797b      	ldrb	r3, [r7, #5]
 8008e52:	f003 0304 	and.w	r3, r3, #4
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d001      	beq.n	8008e5e <netconn_write_vectors_partly+0x6a>
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	e000      	b.n	8008e60 <netconn_write_vectors_partly+0x6c>
 8008e5e:	2300      	movs	r3, #0
 8008e60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8008e64:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d005      	beq.n	8008e78 <netconn_write_vectors_partly+0x84>
 8008e6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d102      	bne.n	8008e78 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8008e72:	f06f 0305 	mvn.w	r3, #5
 8008e76:	e064      	b.n	8008f42 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	643b      	str	r3, [r7, #64]	; 0x40
 8008e80:	e015      	b.n	8008eae <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8008e82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e84:	00db      	lsls	r3, r3, #3
 8008e86:	68ba      	ldr	r2, [r7, #8]
 8008e88:	4413      	add	r3, r2
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e8e:	4413      	add	r3, r2
 8008e90:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8008e92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e94:	00db      	lsls	r3, r3, #3
 8008e96:	68ba      	ldr	r2, [r7, #8]
 8008e98:	4413      	add	r3, r2
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d202      	bcs.n	8008ea8 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8008ea2:	f06f 0305 	mvn.w	r3, #5
 8008ea6:	e04c      	b.n	8008f42 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8008ea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008eaa:	3301      	adds	r3, #1
 8008eac:	643b      	str	r3, [r7, #64]	; 0x40
 8008eae:	88fb      	ldrh	r3, [r7, #6]
 8008eb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	dbe5      	blt.n	8008e82 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8008eb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d101      	bne.n	8008ec0 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	e040      	b.n	8008f42 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8008ec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	da0a      	bge.n	8008edc <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8008ec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d102      	bne.n	8008ed2 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8008ecc:	f06f 0305 	mvn.w	r3, #5
 8008ed0:	e037      	b.n	8008f42 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8008ed2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008ed6:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8008ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eda:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8008ee4:	88fb      	ldrh	r3, [r7, #6]
 8008ee6:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8008eec:	797b      	ldrb	r3, [r7, #5]
 8008eee:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8008ef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8008efa:	f107 0314 	add.w	r3, r7, #20
 8008efe:	4619      	mov	r1, r3
 8008f00:	4816      	ldr	r0, [pc, #88]	; (8008f5c <netconn_write_vectors_partly+0x168>)
 8008f02:	f7ff fbcb 	bl	800869c <netconn_apimsg>
 8008f06:	4603      	mov	r3, r0
 8008f08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8008f0c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d114      	bne.n	8008f3e <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8008f14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d002      	beq.n	8008f20 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8008f1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f1e:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8008f20:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d10a      	bne.n	8008f3e <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8008f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d006      	beq.n	8008f3e <netconn_write_vectors_partly+0x14a>
 8008f30:	4b06      	ldr	r3, [pc, #24]	; (8008f4c <netconn_write_vectors_partly+0x158>)
 8008f32:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008f36:	490a      	ldr	r1, [pc, #40]	; (8008f60 <netconn_write_vectors_partly+0x16c>)
 8008f38:	4806      	ldr	r0, [pc, #24]	; (8008f54 <netconn_write_vectors_partly+0x160>)
 8008f3a:	f00e f861 	bl	8017000 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8008f3e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3748      	adds	r7, #72	; 0x48
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	08018558 	.word	0x08018558
 8008f50:	08018830 	.word	0x08018830
 8008f54:	080185b0 	.word	0x080185b0
 8008f58:	0801884c 	.word	0x0801884c
 8008f5c:	0800a369 	.word	0x0800a369
 8008f60:	08018870 	.word	0x08018870

08008f64 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b08c      	sub	sp, #48	; 0x30
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d109      	bne.n	8008f8a <netconn_close_shutdown+0x26>
 8008f76:	4b0f      	ldr	r3, [pc, #60]	; (8008fb4 <netconn_close_shutdown+0x50>)
 8008f78:	f240 4247 	movw	r2, #1095	; 0x447
 8008f7c:	490e      	ldr	r1, [pc, #56]	; (8008fb8 <netconn_close_shutdown+0x54>)
 8008f7e:	480f      	ldr	r0, [pc, #60]	; (8008fbc <netconn_close_shutdown+0x58>)
 8008f80:	f00e f83e 	bl	8017000 <iprintf>
 8008f84:	f06f 030f 	mvn.w	r3, #15
 8008f88:	e010      	b.n	8008fac <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8008f8e:	78fb      	ldrb	r3, [r7, #3]
 8008f90:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008f92:	2329      	movs	r3, #41	; 0x29
 8008f94:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8008f96:	f107 030c 	add.w	r3, r7, #12
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	4808      	ldr	r0, [pc, #32]	; (8008fc0 <netconn_close_shutdown+0x5c>)
 8008f9e:	f7ff fb7d 	bl	800869c <netconn_apimsg>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008fa8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3730      	adds	r7, #48	; 0x30
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}
 8008fb4:	08018558 	.word	0x08018558
 8008fb8:	08018894 	.word	0x08018894
 8008fbc:	080185b0 	.word	0x080185b0
 8008fc0:	0800a58d 	.word	0x0800a58d

08008fc4 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d101      	bne.n	8008fd6 <netconn_err+0x12>
    return ERR_OK;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	e00d      	b.n	8008ff2 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8008fd6:	f00d ff91 	bl	8016efc <sys_arch_protect>
 8008fda:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	7a1b      	ldrb	r3, [r3, #8]
 8008fe0:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8008fe8:	68f8      	ldr	r0, [r7, #12]
 8008fea:	f00d ff95 	bl	8016f18 <sys_arch_unprotect>
  return err;
 8008fee:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3710      	adds	r7, #16
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
	...

08008ffc <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
 8009002:	4603      	mov	r3, r0
 8009004:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8009006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800900a:	f113 0f0d 	cmn.w	r3, #13
 800900e:	d009      	beq.n	8009024 <lwip_netconn_err_to_msg+0x28>
 8009010:	f113 0f0d 	cmn.w	r3, #13
 8009014:	dc0c      	bgt.n	8009030 <lwip_netconn_err_to_msg+0x34>
 8009016:	f113 0f0f 	cmn.w	r3, #15
 800901a:	d007      	beq.n	800902c <lwip_netconn_err_to_msg+0x30>
 800901c:	f113 0f0e 	cmn.w	r3, #14
 8009020:	d002      	beq.n	8009028 <lwip_netconn_err_to_msg+0x2c>
 8009022:	e005      	b.n	8009030 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8009024:	4b0a      	ldr	r3, [pc, #40]	; (8009050 <lwip_netconn_err_to_msg+0x54>)
 8009026:	e00e      	b.n	8009046 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8009028:	4b0a      	ldr	r3, [pc, #40]	; (8009054 <lwip_netconn_err_to_msg+0x58>)
 800902a:	e00c      	b.n	8009046 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800902c:	4b0a      	ldr	r3, [pc, #40]	; (8009058 <lwip_netconn_err_to_msg+0x5c>)
 800902e:	e00a      	b.n	8009046 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8009030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d005      	beq.n	8009044 <lwip_netconn_err_to_msg+0x48>
 8009038:	4b08      	ldr	r3, [pc, #32]	; (800905c <lwip_netconn_err_to_msg+0x60>)
 800903a:	227d      	movs	r2, #125	; 0x7d
 800903c:	4908      	ldr	r1, [pc, #32]	; (8009060 <lwip_netconn_err_to_msg+0x64>)
 800903e:	4809      	ldr	r0, [pc, #36]	; (8009064 <lwip_netconn_err_to_msg+0x68>)
 8009040:	f00d ffde 	bl	8017000 <iprintf>
      return NULL;
 8009044:	2300      	movs	r3, #0
  }
}
 8009046:	4618      	mov	r0, r3
 8009048:	3708      	adds	r7, #8
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	0801be80 	.word	0x0801be80
 8009054:	0801be81 	.word	0x0801be81
 8009058:	0801be82 	.word	0x0801be82
 800905c:	080188b0 	.word	0x080188b0
 8009060:	080188e4 	.word	0x080188e4
 8009064:	080188f4 	.word	0x080188f4

08009068 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b082      	sub	sp, #8
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d105      	bne.n	8009084 <lwip_netconn_is_err_msg+0x1c>
 8009078:	4b12      	ldr	r3, [pc, #72]	; (80090c4 <lwip_netconn_is_err_msg+0x5c>)
 800907a:	2285      	movs	r2, #133	; 0x85
 800907c:	4912      	ldr	r1, [pc, #72]	; (80090c8 <lwip_netconn_is_err_msg+0x60>)
 800907e:	4813      	ldr	r0, [pc, #76]	; (80090cc <lwip_netconn_is_err_msg+0x64>)
 8009080:	f00d ffbe 	bl	8017000 <iprintf>

  if (msg == &netconn_aborted) {
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4a12      	ldr	r2, [pc, #72]	; (80090d0 <lwip_netconn_is_err_msg+0x68>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d104      	bne.n	8009096 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	22f3      	movs	r2, #243	; 0xf3
 8009090:	701a      	strb	r2, [r3, #0]
    return 1;
 8009092:	2301      	movs	r3, #1
 8009094:	e012      	b.n	80090bc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	4a0e      	ldr	r2, [pc, #56]	; (80090d4 <lwip_netconn_is_err_msg+0x6c>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d104      	bne.n	80090a8 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	22f2      	movs	r2, #242	; 0xf2
 80090a2:	701a      	strb	r2, [r3, #0]
    return 1;
 80090a4:	2301      	movs	r3, #1
 80090a6:	e009      	b.n	80090bc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	4a0b      	ldr	r2, [pc, #44]	; (80090d8 <lwip_netconn_is_err_msg+0x70>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d104      	bne.n	80090ba <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	22f1      	movs	r2, #241	; 0xf1
 80090b4:	701a      	strb	r2, [r3, #0]
    return 1;
 80090b6:	2301      	movs	r3, #1
 80090b8:	e000      	b.n	80090bc <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 80090ba:	2300      	movs	r3, #0
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3708      	adds	r7, #8
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}
 80090c4:	080188b0 	.word	0x080188b0
 80090c8:	0801891c 	.word	0x0801891c
 80090cc:	080188f4 	.word	0x080188f4
 80090d0:	0801be80 	.word	0x0801be80
 80090d4:	0801be81 	.word	0x0801be81
 80090d8:	0801be82 	.word	0x0801be82

080090dc <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b088      	sub	sp, #32
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	60b9      	str	r1, [r7, #8]
 80090e6:	607a      	str	r2, [r7, #4]
 80090e8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d105      	bne.n	80090fc <recv_udp+0x20>
 80090f0:	4b34      	ldr	r3, [pc, #208]	; (80091c4 <recv_udp+0xe8>)
 80090f2:	22e5      	movs	r2, #229	; 0xe5
 80090f4:	4934      	ldr	r1, [pc, #208]	; (80091c8 <recv_udp+0xec>)
 80090f6:	4835      	ldr	r0, [pc, #212]	; (80091cc <recv_udp+0xf0>)
 80090f8:	f00d ff82 	bl	8017000 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d105      	bne.n	800910e <recv_udp+0x32>
 8009102:	4b30      	ldr	r3, [pc, #192]	; (80091c4 <recv_udp+0xe8>)
 8009104:	22e6      	movs	r2, #230	; 0xe6
 8009106:	4932      	ldr	r1, [pc, #200]	; (80091d0 <recv_udp+0xf4>)
 8009108:	4830      	ldr	r0, [pc, #192]	; (80091cc <recv_udp+0xf0>)
 800910a:	f00d ff79 	bl	8017000 <iprintf>
  conn = (struct netconn *)arg;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009112:	69fb      	ldr	r3, [r7, #28]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d103      	bne.n	8009120 <recv_udp+0x44>
    pbuf_free(p);
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f004 f85d 	bl	800d1d8 <pbuf_free>
    return;
 800911e:	e04d      	b.n	80091bc <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8009120:	69fb      	ldr	r3, [r7, #28]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	68ba      	ldr	r2, [r7, #8]
 8009126:	429a      	cmp	r2, r3
 8009128:	d005      	beq.n	8009136 <recv_udp+0x5a>
 800912a:	4b26      	ldr	r3, [pc, #152]	; (80091c4 <recv_udp+0xe8>)
 800912c:	22ee      	movs	r2, #238	; 0xee
 800912e:	4929      	ldr	r1, [pc, #164]	; (80091d4 <recv_udp+0xf8>)
 8009130:	4826      	ldr	r0, [pc, #152]	; (80091cc <recv_udp+0xf0>)
 8009132:	f00d ff65 	bl	8017000 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	3310      	adds	r3, #16
 800913a:	4618      	mov	r0, r3
 800913c:	f00d fdc3 	bl	8016cc6 <sys_mbox_valid>
 8009140:	4603      	mov	r3, r0
 8009142:	2b00      	cmp	r3, #0
 8009144:	d103      	bne.n	800914e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f004 f846 	bl	800d1d8 <pbuf_free>
    return;
 800914c:	e036      	b.n	80091bc <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800914e:	2006      	movs	r0, #6
 8009150:	f003 f91a 	bl	800c388 <memp_malloc>
 8009154:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8009156:	69bb      	ldr	r3, [r7, #24]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d103      	bne.n	8009164 <recv_udp+0x88>
    pbuf_free(p);
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f004 f83b 	bl	800d1d8 <pbuf_free>
    return;
 8009162:	e02b      	b.n	80091bc <recv_udp+0xe0>
  } else {
    buf->p = p;
 8009164:	69bb      	ldr	r3, [r7, #24]
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800916a:	69bb      	ldr	r3, [r7, #24]
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d002      	beq.n	800917c <recv_udp+0xa0>
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	e000      	b.n	800917e <recv_udp+0xa2>
 800917c:	2300      	movs	r3, #0
 800917e:	69ba      	ldr	r2, [r7, #24]
 8009180:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8009182:	69bb      	ldr	r3, [r7, #24]
 8009184:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009186:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	891b      	ldrh	r3, [r3, #8]
 800918c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800918e:	69fb      	ldr	r3, [r7, #28]
 8009190:	3310      	adds	r3, #16
 8009192:	69b9      	ldr	r1, [r7, #24]
 8009194:	4618      	mov	r0, r3
 8009196:	f00d fd21 	bl	8016bdc <sys_mbox_trypost>
 800919a:	4603      	mov	r3, r0
 800919c:	2b00      	cmp	r3, #0
 800919e:	d003      	beq.n	80091a8 <recv_udp+0xcc>
    netbuf_delete(buf);
 80091a0:	69b8      	ldr	r0, [r7, #24]
 80091a2:	f001 fa9d 	bl	800a6e0 <netbuf_delete>
    return;
 80091a6:	e009      	b.n	80091bc <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d005      	beq.n	80091bc <recv_udp+0xe0>
 80091b0:	69fb      	ldr	r3, [r7, #28]
 80091b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b4:	8afa      	ldrh	r2, [r7, #22]
 80091b6:	2100      	movs	r1, #0
 80091b8:	69f8      	ldr	r0, [r7, #28]
 80091ba:	4798      	blx	r3
  }
}
 80091bc:	3720      	adds	r7, #32
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	080188b0 	.word	0x080188b0
 80091c8:	08018928 	.word	0x08018928
 80091cc:	080188f4 	.word	0x080188f4
 80091d0:	0801894c 	.word	0x0801894c
 80091d4:	0801896c 	.word	0x0801896c

080091d8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b088      	sub	sp, #32
 80091dc:	af00      	add	r7, sp, #0
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	60b9      	str	r1, [r7, #8]
 80091e2:	607a      	str	r2, [r7, #4]
 80091e4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d106      	bne.n	80091fa <recv_tcp+0x22>
 80091ec:	4b36      	ldr	r3, [pc, #216]	; (80092c8 <recv_tcp+0xf0>)
 80091ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80091f2:	4936      	ldr	r1, [pc, #216]	; (80092cc <recv_tcp+0xf4>)
 80091f4:	4836      	ldr	r0, [pc, #216]	; (80092d0 <recv_tcp+0xf8>)
 80091f6:	f00d ff03 	bl	8017000 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d106      	bne.n	800920e <recv_tcp+0x36>
 8009200:	4b31      	ldr	r3, [pc, #196]	; (80092c8 <recv_tcp+0xf0>)
 8009202:	f240 122d 	movw	r2, #301	; 0x12d
 8009206:	4933      	ldr	r1, [pc, #204]	; (80092d4 <recv_tcp+0xfc>)
 8009208:	4831      	ldr	r0, [pc, #196]	; (80092d0 <recv_tcp+0xf8>)
 800920a:	f00d fef9 	bl	8017000 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800920e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d006      	beq.n	8009224 <recv_tcp+0x4c>
 8009216:	4b2c      	ldr	r3, [pc, #176]	; (80092c8 <recv_tcp+0xf0>)
 8009218:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800921c:	492e      	ldr	r1, [pc, #184]	; (80092d8 <recv_tcp+0x100>)
 800921e:	482c      	ldr	r0, [pc, #176]	; (80092d0 <recv_tcp+0xf8>)
 8009220:	f00d feee 	bl	8017000 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d102      	bne.n	8009234 <recv_tcp+0x5c>
    return ERR_VAL;
 800922e:	f06f 0305 	mvn.w	r3, #5
 8009232:	e045      	b.n	80092c0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	68ba      	ldr	r2, [r7, #8]
 800923a:	429a      	cmp	r2, r3
 800923c:	d006      	beq.n	800924c <recv_tcp+0x74>
 800923e:	4b22      	ldr	r3, [pc, #136]	; (80092c8 <recv_tcp+0xf0>)
 8009240:	f240 1235 	movw	r2, #309	; 0x135
 8009244:	4925      	ldr	r1, [pc, #148]	; (80092dc <recv_tcp+0x104>)
 8009246:	4822      	ldr	r0, [pc, #136]	; (80092d0 <recv_tcp+0xf8>)
 8009248:	f00d feda 	bl	8017000 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	3310      	adds	r3, #16
 8009250:	4618      	mov	r0, r3
 8009252:	f00d fd38 	bl	8016cc6 <sys_mbox_valid>
 8009256:	4603      	mov	r3, r0
 8009258:	2b00      	cmp	r3, #0
 800925a:	d10d      	bne.n	8009278 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d008      	beq.n	8009274 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	891b      	ldrh	r3, [r3, #8]
 8009266:	4619      	mov	r1, r3
 8009268:	68b8      	ldr	r0, [r7, #8]
 800926a:	f004 feb3 	bl	800dfd4 <tcp_recved>
      pbuf_free(p);
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f003 ffb2 	bl	800d1d8 <pbuf_free>
    }
    return ERR_OK;
 8009274:	2300      	movs	r3, #0
 8009276:	e023      	b.n	80092c0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d005      	beq.n	800928a <recv_tcp+0xb2>
    msg = p;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	891b      	ldrh	r3, [r3, #8]
 8009286:	83fb      	strh	r3, [r7, #30]
 8009288:	e003      	b.n	8009292 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800928a:	4b15      	ldr	r3, [pc, #84]	; (80092e0 <recv_tcp+0x108>)
 800928c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800928e:	2300      	movs	r3, #0
 8009290:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	3310      	adds	r3, #16
 8009296:	69b9      	ldr	r1, [r7, #24]
 8009298:	4618      	mov	r0, r3
 800929a:	f00d fc9f 	bl	8016bdc <sys_mbox_trypost>
 800929e:	4603      	mov	r3, r0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d002      	beq.n	80092aa <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 80092a4:	f04f 33ff 	mov.w	r3, #4294967295
 80092a8:	e00a      	b.n	80092c0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d005      	beq.n	80092be <recv_tcp+0xe6>
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b6:	8bfa      	ldrh	r2, [r7, #30]
 80092b8:	2100      	movs	r1, #0
 80092ba:	6978      	ldr	r0, [r7, #20]
 80092bc:	4798      	blx	r3
  }

  return ERR_OK;
 80092be:	2300      	movs	r3, #0
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3720      	adds	r7, #32
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	080188b0 	.word	0x080188b0
 80092cc:	0801898c 	.word	0x0801898c
 80092d0:	080188f4 	.word	0x080188f4
 80092d4:	080189b0 	.word	0x080189b0
 80092d8:	080189d0 	.word	0x080189d0
 80092dc:	080189e8 	.word	0x080189e8
 80092e0:	0801be82 	.word	0x0801be82

080092e4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b084      	sub	sp, #16
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d106      	bne.n	8009306 <poll_tcp+0x22>
 80092f8:	4b29      	ldr	r3, [pc, #164]	; (80093a0 <poll_tcp+0xbc>)
 80092fa:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 80092fe:	4929      	ldr	r1, [pc, #164]	; (80093a4 <poll_tcp+0xc0>)
 8009300:	4829      	ldr	r0, [pc, #164]	; (80093a8 <poll_tcp+0xc4>)
 8009302:	f00d fe7d 	bl	8017000 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	785b      	ldrb	r3, [r3, #1]
 800930a:	2b01      	cmp	r3, #1
 800930c:	d104      	bne.n	8009318 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800930e:	2101      	movs	r1, #1
 8009310:	68f8      	ldr	r0, [r7, #12]
 8009312:	f000 fe5d 	bl	8009fd0 <lwip_netconn_do_writemore>
 8009316:	e016      	b.n	8009346 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	785b      	ldrb	r3, [r3, #1]
 800931c:	2b04      	cmp	r3, #4
 800931e:	d112      	bne.n	8009346 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	6a1b      	ldr	r3, [r3, #32]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d00a      	beq.n	800933e <poll_tcp+0x5a>
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	6a1b      	ldr	r3, [r3, #32]
 800932c:	7a5b      	ldrb	r3, [r3, #9]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d005      	beq.n	800933e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	6a1b      	ldr	r3, [r3, #32]
 8009336:	7a5a      	ldrb	r2, [r3, #9]
 8009338:	3a01      	subs	r2, #1
 800933a:	b2d2      	uxtb	r2, r2
 800933c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800933e:	2101      	movs	r1, #1
 8009340:	68f8      	ldr	r0, [r7, #12]
 8009342:	f000 fb3b 	bl	80099bc <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	7f1b      	ldrb	r3, [r3, #28]
 800934a:	f003 0310 	and.w	r3, r3, #16
 800934e:	2b00      	cmp	r3, #0
 8009350:	d021      	beq.n	8009396 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d01d      	beq.n	8009396 <poll_tcp+0xb2>
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009362:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009366:	d316      	bcc.n	8009396 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009370:	2b04      	cmp	r3, #4
 8009372:	d810      	bhi.n	8009396 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	7f1b      	ldrb	r3, [r3, #28]
 8009378:	f023 0310 	bic.w	r3, r3, #16
 800937c:	b2da      	uxtb	r2, r3
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009386:	2b00      	cmp	r3, #0
 8009388:	d005      	beq.n	8009396 <poll_tcp+0xb2>
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800938e:	2200      	movs	r2, #0
 8009390:	2102      	movs	r1, #2
 8009392:	68f8      	ldr	r0, [r7, #12]
 8009394:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009396:	2300      	movs	r3, #0
}
 8009398:	4618      	mov	r0, r3
 800939a:	3710      	adds	r7, #16
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}
 80093a0:	080188b0 	.word	0x080188b0
 80093a4:	08018a08 	.word	0x08018a08
 80093a8:	080188f4 	.word	0x080188f4

080093ac <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b086      	sub	sp, #24
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	60f8      	str	r0, [r7, #12]
 80093b4:	60b9      	str	r1, [r7, #8]
 80093b6:	4613      	mov	r3, r2
 80093b8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d106      	bne.n	80093d2 <sent_tcp+0x26>
 80093c4:	4b20      	ldr	r3, [pc, #128]	; (8009448 <sent_tcp+0x9c>)
 80093c6:	f240 1293 	movw	r2, #403	; 0x193
 80093ca:	4920      	ldr	r1, [pc, #128]	; (800944c <sent_tcp+0xa0>)
 80093cc:	4820      	ldr	r0, [pc, #128]	; (8009450 <sent_tcp+0xa4>)
 80093ce:	f00d fe17 	bl	8017000 <iprintf>

  if (conn) {
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d032      	beq.n	800943e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	785b      	ldrb	r3, [r3, #1]
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d104      	bne.n	80093ea <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80093e0:	2101      	movs	r1, #1
 80093e2:	6978      	ldr	r0, [r7, #20]
 80093e4:	f000 fdf4 	bl	8009fd0 <lwip_netconn_do_writemore>
 80093e8:	e007      	b.n	80093fa <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	785b      	ldrb	r3, [r3, #1]
 80093ee:	2b04      	cmp	r3, #4
 80093f0:	d103      	bne.n	80093fa <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80093f2:	2101      	movs	r1, #1
 80093f4:	6978      	ldr	r0, [r7, #20]
 80093f6:	f000 fae1 	bl	80099bc <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d01d      	beq.n	800943e <sent_tcp+0x92>
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800940a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800940e:	d316      	bcc.n	800943e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009418:	2b04      	cmp	r3, #4
 800941a:	d810      	bhi.n	800943e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	7f1b      	ldrb	r3, [r3, #28]
 8009420:	f023 0310 	bic.w	r3, r3, #16
 8009424:	b2da      	uxtb	r2, r3
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800942e:	2b00      	cmp	r3, #0
 8009430:	d005      	beq.n	800943e <sent_tcp+0x92>
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009436:	88fa      	ldrh	r2, [r7, #6]
 8009438:	2102      	movs	r1, #2
 800943a:	6978      	ldr	r0, [r7, #20]
 800943c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800943e:	2300      	movs	r3, #0
}
 8009440:	4618      	mov	r0, r3
 8009442:	3718      	adds	r7, #24
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}
 8009448:	080188b0 	.word	0x080188b0
 800944c:	08018a08 	.word	0x08018a08
 8009450:	080188f4 	.word	0x080188f4

08009454 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b088      	sub	sp, #32
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	460b      	mov	r3, r1
 800945e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009464:	69fb      	ldr	r3, [r7, #28]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d106      	bne.n	8009478 <err_tcp+0x24>
 800946a:	4b5f      	ldr	r3, [pc, #380]	; (80095e8 <err_tcp+0x194>)
 800946c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8009470:	495e      	ldr	r1, [pc, #376]	; (80095ec <err_tcp+0x198>)
 8009472:	485f      	ldr	r0, [pc, #380]	; (80095f0 <err_tcp+0x19c>)
 8009474:	f00d fdc4 	bl	8017000 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8009478:	f00d fd40 	bl	8016efc <sys_arch_protect>
 800947c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800947e:	69fb      	ldr	r3, [r7, #28]
 8009480:	2200      	movs	r2, #0
 8009482:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8009484:	69fb      	ldr	r3, [r7, #28]
 8009486:	78fa      	ldrb	r2, [r7, #3]
 8009488:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800948a:	69fb      	ldr	r3, [r7, #28]
 800948c:	7f1b      	ldrb	r3, [r3, #28]
 800948e:	f043 0301 	orr.w	r3, r3, #1
 8009492:	b2da      	uxtb	r2, r3
 8009494:	69fb      	ldr	r3, [r7, #28]
 8009496:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8009498:	69fb      	ldr	r3, [r7, #28]
 800949a:	785b      	ldrb	r3, [r3, #1]
 800949c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800949e:	69fb      	ldr	r3, [r7, #28]
 80094a0:	2200      	movs	r2, #0
 80094a2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 80094a4:	69b8      	ldr	r0, [r7, #24]
 80094a6:	f00d fd37 	bl	8016f18 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80094aa:	69fb      	ldr	r3, [r7, #28]
 80094ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d005      	beq.n	80094be <err_tcp+0x6a>
 80094b2:	69fb      	ldr	r3, [r7, #28]
 80094b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b6:	2200      	movs	r2, #0
 80094b8:	2104      	movs	r1, #4
 80094ba:	69f8      	ldr	r0, [r7, #28]
 80094bc:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80094be:	69fb      	ldr	r3, [r7, #28]
 80094c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d005      	beq.n	80094d2 <err_tcp+0x7e>
 80094c6:	69fb      	ldr	r3, [r7, #28]
 80094c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ca:	2200      	movs	r2, #0
 80094cc:	2100      	movs	r1, #0
 80094ce:	69f8      	ldr	r0, [r7, #28]
 80094d0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80094d2:	69fb      	ldr	r3, [r7, #28]
 80094d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d005      	beq.n	80094e6 <err_tcp+0x92>
 80094da:	69fb      	ldr	r3, [r7, #28]
 80094dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094de:	2200      	movs	r2, #0
 80094e0:	2102      	movs	r1, #2
 80094e2:	69f8      	ldr	r0, [r7, #28]
 80094e4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 80094e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7ff fd86 	bl	8008ffc <lwip_netconn_err_to_msg>
 80094f0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80094f2:	69fb      	ldr	r3, [r7, #28]
 80094f4:	3310      	adds	r3, #16
 80094f6:	4618      	mov	r0, r3
 80094f8:	f00d fbe5 	bl	8016cc6 <sys_mbox_valid>
 80094fc:	4603      	mov	r3, r0
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d005      	beq.n	800950e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8009502:	69fb      	ldr	r3, [r7, #28]
 8009504:	3310      	adds	r3, #16
 8009506:	6939      	ldr	r1, [r7, #16]
 8009508:	4618      	mov	r0, r3
 800950a:	f00d fb67 	bl	8016bdc <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800950e:	69fb      	ldr	r3, [r7, #28]
 8009510:	3314      	adds	r3, #20
 8009512:	4618      	mov	r0, r3
 8009514:	f00d fbd7 	bl	8016cc6 <sys_mbox_valid>
 8009518:	4603      	mov	r3, r0
 800951a:	2b00      	cmp	r3, #0
 800951c:	d005      	beq.n	800952a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800951e:	69fb      	ldr	r3, [r7, #28]
 8009520:	3314      	adds	r3, #20
 8009522:	6939      	ldr	r1, [r7, #16]
 8009524:	4618      	mov	r0, r3
 8009526:	f00d fb59 	bl	8016bdc <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800952a:	7dfb      	ldrb	r3, [r7, #23]
 800952c:	2b01      	cmp	r3, #1
 800952e:	d005      	beq.n	800953c <err_tcp+0xe8>
 8009530:	7dfb      	ldrb	r3, [r7, #23]
 8009532:	2b04      	cmp	r3, #4
 8009534:	d002      	beq.n	800953c <err_tcp+0xe8>
 8009536:	7dfb      	ldrb	r3, [r7, #23]
 8009538:	2b03      	cmp	r3, #3
 800953a:	d143      	bne.n	80095c4 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	7f1b      	ldrb	r3, [r3, #28]
 8009540:	f003 0304 	and.w	r3, r3, #4
 8009544:	2b00      	cmp	r3, #0
 8009546:	bf14      	ite	ne
 8009548:	2301      	movne	r3, #1
 800954a:	2300      	moveq	r3, #0
 800954c:	b2db      	uxtb	r3, r3
 800954e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8009550:	69fb      	ldr	r3, [r7, #28]
 8009552:	7f1b      	ldrb	r3, [r3, #28]
 8009554:	f023 0304 	bic.w	r3, r3, #4
 8009558:	b2da      	uxtb	r2, r3
 800955a:	69fb      	ldr	r3, [r7, #28]
 800955c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d13b      	bne.n	80095dc <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009564:	69fb      	ldr	r3, [r7, #28]
 8009566:	6a1b      	ldr	r3, [r3, #32]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d106      	bne.n	800957a <err_tcp+0x126>
 800956c:	4b1e      	ldr	r3, [pc, #120]	; (80095e8 <err_tcp+0x194>)
 800956e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009572:	4920      	ldr	r1, [pc, #128]	; (80095f4 <err_tcp+0x1a0>)
 8009574:	481e      	ldr	r0, [pc, #120]	; (80095f0 <err_tcp+0x19c>)
 8009576:	f00d fd43 	bl	8017000 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800957a:	7dfb      	ldrb	r3, [r7, #23]
 800957c:	2b04      	cmp	r3, #4
 800957e:	d104      	bne.n	800958a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8009580:	69fb      	ldr	r3, [r7, #28]
 8009582:	6a1b      	ldr	r3, [r3, #32]
 8009584:	2200      	movs	r2, #0
 8009586:	711a      	strb	r2, [r3, #4]
 8009588:	e003      	b.n	8009592 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800958a:	69fb      	ldr	r3, [r7, #28]
 800958c:	6a1b      	ldr	r3, [r3, #32]
 800958e:	78fa      	ldrb	r2, [r7, #3]
 8009590:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009592:	69fb      	ldr	r3, [r7, #28]
 8009594:	6a1b      	ldr	r3, [r3, #32]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	330c      	adds	r3, #12
 800959a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800959c:	68b8      	ldr	r0, [r7, #8]
 800959e:	f00d fc23 	bl	8016de8 <sys_sem_valid>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d106      	bne.n	80095b6 <err_tcp+0x162>
 80095a8:	4b0f      	ldr	r3, [pc, #60]	; (80095e8 <err_tcp+0x194>)
 80095aa:	f240 12ef 	movw	r2, #495	; 0x1ef
 80095ae:	4912      	ldr	r1, [pc, #72]	; (80095f8 <err_tcp+0x1a4>)
 80095b0:	480f      	ldr	r0, [pc, #60]	; (80095f0 <err_tcp+0x19c>)
 80095b2:	f00d fd25 	bl	8017000 <iprintf>
      conn->current_msg = NULL;
 80095b6:	69fb      	ldr	r3, [r7, #28]
 80095b8:	2200      	movs	r2, #0
 80095ba:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 80095bc:	68b8      	ldr	r0, [r7, #8]
 80095be:	f00d fbf9 	bl	8016db4 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 80095c2:	e00b      	b.n	80095dc <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	6a1b      	ldr	r3, [r3, #32]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d008      	beq.n	80095de <err_tcp+0x18a>
 80095cc:	4b06      	ldr	r3, [pc, #24]	; (80095e8 <err_tcp+0x194>)
 80095ce:	f240 12f7 	movw	r2, #503	; 0x1f7
 80095d2:	490a      	ldr	r1, [pc, #40]	; (80095fc <err_tcp+0x1a8>)
 80095d4:	4806      	ldr	r0, [pc, #24]	; (80095f0 <err_tcp+0x19c>)
 80095d6:	f00d fd13 	bl	8017000 <iprintf>
  }
}
 80095da:	e000      	b.n	80095de <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 80095dc:	bf00      	nop
}
 80095de:	bf00      	nop
 80095e0:	3720      	adds	r7, #32
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	080188b0 	.word	0x080188b0
 80095ec:	08018a08 	.word	0x08018a08
 80095f0:	080188f4 	.word	0x080188f4
 80095f4:	08018a18 	.word	0x08018a18
 80095f8:	08018a34 	.word	0x08018a34
 80095fc:	08018a50 	.word	0x08018a50

08009600 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800960e:	6879      	ldr	r1, [r7, #4]
 8009610:	68f8      	ldr	r0, [r7, #12]
 8009612:	f005 fba5 	bl	800ed60 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8009616:	490a      	ldr	r1, [pc, #40]	; (8009640 <setup_tcp+0x40>)
 8009618:	68f8      	ldr	r0, [r7, #12]
 800961a:	f005 fbb3 	bl	800ed84 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800961e:	4909      	ldr	r1, [pc, #36]	; (8009644 <setup_tcp+0x44>)
 8009620:	68f8      	ldr	r0, [r7, #12]
 8009622:	f005 fbd1 	bl	800edc8 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8009626:	2202      	movs	r2, #2
 8009628:	4907      	ldr	r1, [pc, #28]	; (8009648 <setup_tcp+0x48>)
 800962a:	68f8      	ldr	r0, [r7, #12]
 800962c:	f005 fc28 	bl	800ee80 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8009630:	4906      	ldr	r1, [pc, #24]	; (800964c <setup_tcp+0x4c>)
 8009632:	68f8      	ldr	r0, [r7, #12]
 8009634:	f005 fbea 	bl	800ee0c <tcp_err>
}
 8009638:	bf00      	nop
 800963a:	3710      	adds	r7, #16
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	080091d9 	.word	0x080091d9
 8009644:	080093ad 	.word	0x080093ad
 8009648:	080092e5 	.word	0x080092e5
 800964c:	08009455 	.word	0x08009455

08009650 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8009650:	b590      	push	{r4, r7, lr}
 8009652:	b085      	sub	sp, #20
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8009658:	2300      	movs	r3, #0
 800965a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d006      	beq.n	8009674 <pcb_new+0x24>
 8009666:	4b2b      	ldr	r3, [pc, #172]	; (8009714 <pcb_new+0xc4>)
 8009668:	f240 2265 	movw	r2, #613	; 0x265
 800966c:	492a      	ldr	r1, [pc, #168]	; (8009718 <pcb_new+0xc8>)
 800966e:	482b      	ldr	r0, [pc, #172]	; (800971c <pcb_new+0xcc>)
 8009670:	f00d fcc6 	bl	8017000 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800967e:	2b10      	cmp	r3, #16
 8009680:	d022      	beq.n	80096c8 <pcb_new+0x78>
 8009682:	2b20      	cmp	r3, #32
 8009684:	d133      	bne.n	80096ee <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681c      	ldr	r4, [r3, #0]
 800968a:	7bfb      	ldrb	r3, [r7, #15]
 800968c:	4618      	mov	r0, r3
 800968e:	f00a fe30 	bl	80142f2 <udp_new_ip_type>
 8009692:	4603      	mov	r3, r0
 8009694:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d02a      	beq.n	80096f6 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	2b22      	cmp	r3, #34	; 0x22
 80096a8:	d104      	bne.n	80096b4 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	2201      	movs	r2, #1
 80096b2:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	6858      	ldr	r0, [r3, #4]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	461a      	mov	r2, r3
 80096c0:	4917      	ldr	r1, [pc, #92]	; (8009720 <pcb_new+0xd0>)
 80096c2:	f00a fd9d 	bl	8014200 <udp_recv>
      }
      break;
 80096c6:	e016      	b.n	80096f6 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681c      	ldr	r4, [r3, #0]
 80096cc:	7bfb      	ldrb	r3, [r7, #15]
 80096ce:	4618      	mov	r0, r3
 80096d0:	f005 fb38 	bl	800ed44 <tcp_new_ip_type>
 80096d4:	4603      	mov	r3, r0
 80096d6:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d00b      	beq.n	80096fa <pcb_new+0xaa>
        setup_tcp(msg->conn);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7ff ff8a 	bl	8009600 <setup_tcp>
      }
      break;
 80096ec:	e005      	b.n	80096fa <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	22fa      	movs	r2, #250	; 0xfa
 80096f2:	711a      	strb	r2, [r3, #4]
      return;
 80096f4:	e00a      	b.n	800970c <pcb_new+0xbc>
      break;
 80096f6:	bf00      	nop
 80096f8:	e000      	b.n	80096fc <pcb_new+0xac>
      break;
 80096fa:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d102      	bne.n	800970c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	22ff      	movs	r2, #255	; 0xff
 800970a:	711a      	strb	r2, [r3, #4]
  }
}
 800970c:	3714      	adds	r7, #20
 800970e:	46bd      	mov	sp, r7
 8009710:	bd90      	pop	{r4, r7, pc}
 8009712:	bf00      	nop
 8009714:	080188b0 	.word	0x080188b0
 8009718:	08018a94 	.word	0x08018a94
 800971c:	080188f4 	.word	0x080188f4
 8009720:	080090dd 	.word	0x080090dd

08009724 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b084      	sub	sp, #16
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2200      	movs	r2, #0
 8009734:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d102      	bne.n	8009746 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8009740:	68f8      	ldr	r0, [r7, #12]
 8009742:	f7ff ff85 	bl	8009650 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8009746:	bf00      	nop
 8009748:	3710      	adds	r7, #16
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
	...

08009750 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b086      	sub	sp, #24
 8009754:	af00      	add	r7, sp, #0
 8009756:	4603      	mov	r3, r0
 8009758:	6039      	str	r1, [r7, #0]
 800975a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800975c:	2300      	movs	r3, #0
 800975e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8009760:	2007      	movs	r0, #7
 8009762:	f002 fe11 	bl	800c388 <memp_malloc>
 8009766:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d101      	bne.n	8009772 <netconn_alloc+0x22>
    return NULL;
 800976e:	2300      	movs	r3, #0
 8009770:	e052      	b.n	8009818 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2200      	movs	r2, #0
 8009776:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	79fa      	ldrb	r2, [r7, #7]
 800977c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2200      	movs	r2, #0
 8009782:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8009784:	79fb      	ldrb	r3, [r7, #7]
 8009786:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800978a:	2b10      	cmp	r3, #16
 800978c:	d004      	beq.n	8009798 <netconn_alloc+0x48>
 800978e:	2b20      	cmp	r3, #32
 8009790:	d105      	bne.n	800979e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8009792:	2306      	movs	r3, #6
 8009794:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8009796:	e00a      	b.n	80097ae <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8009798:	2306      	movs	r3, #6
 800979a:	617b      	str	r3, [r7, #20]
      break;
 800979c:	e007      	b.n	80097ae <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800979e:	4b20      	ldr	r3, [pc, #128]	; (8009820 <netconn_alloc+0xd0>)
 80097a0:	f240 22e5 	movw	r2, #741	; 0x2e5
 80097a4:	491f      	ldr	r1, [pc, #124]	; (8009824 <netconn_alloc+0xd4>)
 80097a6:	4820      	ldr	r0, [pc, #128]	; (8009828 <netconn_alloc+0xd8>)
 80097a8:	f00d fc2a 	bl	8017000 <iprintf>
      goto free_and_return;
 80097ac:	e02f      	b.n	800980e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	3310      	adds	r3, #16
 80097b2:	6979      	ldr	r1, [r7, #20]
 80097b4:	4618      	mov	r0, r3
 80097b6:	f00d f9dd 	bl	8016b74 <sys_mbox_new>
 80097ba:	4603      	mov	r3, r0
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d125      	bne.n	800980c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	330c      	adds	r3, #12
 80097c4:	2100      	movs	r1, #0
 80097c6:	4618      	mov	r0, r3
 80097c8:	f00d fa9b 	bl	8016d02 <sys_sem_new>
 80097cc:	4603      	mov	r3, r0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d005      	beq.n	80097de <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	3310      	adds	r3, #16
 80097d6:	4618      	mov	r0, r3
 80097d8:	f00d f9ee 	bl	8016bb8 <sys_mbox_free>
    goto free_and_return;
 80097dc:	e017      	b.n	800980e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	3314      	adds	r3, #20
 80097e2:	4618      	mov	r0, r3
 80097e4:	f00d fa80 	bl	8016ce8 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2200      	movs	r2, #0
 80097ec:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f04f 32ff 	mov.w	r2, #4294967295
 80097f4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	683a      	ldr	r2, [r7, #0]
 80097fa:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2200      	movs	r2, #0
 8009800:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	7cfa      	ldrb	r2, [r7, #19]
 8009806:	771a      	strb	r2, [r3, #28]
  return conn;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	e005      	b.n	8009818 <netconn_alloc+0xc8>
    goto free_and_return;
 800980c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800980e:	68f9      	ldr	r1, [r7, #12]
 8009810:	2007      	movs	r0, #7
 8009812:	f002 fe0b 	bl	800c42c <memp_free>
  return NULL;
 8009816:	2300      	movs	r3, #0
}
 8009818:	4618      	mov	r0, r3
 800981a:	3718      	adds	r7, #24
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}
 8009820:	080188b0 	.word	0x080188b0
 8009824:	08018ab4 	.word	0x08018ab4
 8009828:	080188f4 	.word	0x080188f4

0800982c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d006      	beq.n	800984a <netconn_free+0x1e>
 800983c:	4b1b      	ldr	r3, [pc, #108]	; (80098ac <netconn_free+0x80>)
 800983e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8009842:	491b      	ldr	r1, [pc, #108]	; (80098b0 <netconn_free+0x84>)
 8009844:	481b      	ldr	r0, [pc, #108]	; (80098b4 <netconn_free+0x88>)
 8009846:	f00d fbdb 	bl	8017000 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	3310      	adds	r3, #16
 800984e:	4618      	mov	r0, r3
 8009850:	f00d fa39 	bl	8016cc6 <sys_mbox_valid>
 8009854:	4603      	mov	r3, r0
 8009856:	2b00      	cmp	r3, #0
 8009858:	d006      	beq.n	8009868 <netconn_free+0x3c>
 800985a:	4b14      	ldr	r3, [pc, #80]	; (80098ac <netconn_free+0x80>)
 800985c:	f240 3223 	movw	r2, #803	; 0x323
 8009860:	4915      	ldr	r1, [pc, #84]	; (80098b8 <netconn_free+0x8c>)
 8009862:	4814      	ldr	r0, [pc, #80]	; (80098b4 <netconn_free+0x88>)
 8009864:	f00d fbcc 	bl	8017000 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	3314      	adds	r3, #20
 800986c:	4618      	mov	r0, r3
 800986e:	f00d fa2a 	bl	8016cc6 <sys_mbox_valid>
 8009872:	4603      	mov	r3, r0
 8009874:	2b00      	cmp	r3, #0
 8009876:	d006      	beq.n	8009886 <netconn_free+0x5a>
 8009878:	4b0c      	ldr	r3, [pc, #48]	; (80098ac <netconn_free+0x80>)
 800987a:	f240 3226 	movw	r2, #806	; 0x326
 800987e:	490f      	ldr	r1, [pc, #60]	; (80098bc <netconn_free+0x90>)
 8009880:	480c      	ldr	r0, [pc, #48]	; (80098b4 <netconn_free+0x88>)
 8009882:	f00d fbbd 	bl	8017000 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	330c      	adds	r3, #12
 800988a:	4618      	mov	r0, r3
 800988c:	f00d fa9f 	bl	8016dce <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	330c      	adds	r3, #12
 8009894:	4618      	mov	r0, r3
 8009896:	f00d fab8 	bl	8016e0a <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800989a:	6879      	ldr	r1, [r7, #4]
 800989c:	2007      	movs	r0, #7
 800989e:	f002 fdc5 	bl	800c42c <memp_free>
}
 80098a2:	bf00      	nop
 80098a4:	3708      	adds	r7, #8
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
 80098aa:	bf00      	nop
 80098ac:	080188b0 	.word	0x080188b0
 80098b0:	08018adc 	.word	0x08018adc
 80098b4:	080188f4 	.word	0x080188f4
 80098b8:	08018b0c 	.word	0x08018b0c
 80098bc:	08018b48 	.word	0x08018b48

080098c0 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b086      	sub	sp, #24
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	3310      	adds	r3, #16
 80098cc:	4618      	mov	r0, r3
 80098ce:	f00d f9fa 	bl	8016cc6 <sys_mbox_valid>
 80098d2:	4603      	mov	r3, r0
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d02f      	beq.n	8009938 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80098d8:	e018      	b.n	800990c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80098e2:	2b10      	cmp	r3, #16
 80098e4:	d10e      	bne.n	8009904 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	f107 020f 	add.w	r2, r7, #15
 80098ec:	4611      	mov	r1, r2
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7ff fbba 	bl	8009068 <lwip_netconn_is_err_msg>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d108      	bne.n	800990c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	4618      	mov	r0, r3
 80098fe:	f003 fc6b 	bl	800d1d8 <pbuf_free>
 8009902:	e003      	b.n	800990c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	4618      	mov	r0, r3
 8009908:	f000 feea 	bl	800a6e0 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	3310      	adds	r3, #16
 8009910:	f107 0210 	add.w	r2, r7, #16
 8009914:	4611      	mov	r1, r2
 8009916:	4618      	mov	r0, r3
 8009918:	f00d f9b9 	bl	8016c8e <sys_arch_mbox_tryfetch>
 800991c:	4603      	mov	r3, r0
 800991e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009922:	d1da      	bne.n	80098da <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	3310      	adds	r3, #16
 8009928:	4618      	mov	r0, r3
 800992a:	f00d f945 	bl	8016bb8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	3310      	adds	r3, #16
 8009932:	4618      	mov	r0, r3
 8009934:	f00d f9d8 	bl	8016ce8 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	3314      	adds	r3, #20
 800993c:	4618      	mov	r0, r3
 800993e:	f00d f9c2 	bl	8016cc6 <sys_mbox_valid>
 8009942:	4603      	mov	r3, r0
 8009944:	2b00      	cmp	r3, #0
 8009946:	d034      	beq.n	80099b2 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009948:	e01d      	b.n	8009986 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	f107 020e 	add.w	r2, r7, #14
 8009950:	4611      	mov	r1, r2
 8009952:	4618      	mov	r0, r3
 8009954:	f7ff fb88 	bl	8009068 <lwip_netconn_is_err_msg>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	d113      	bne.n	8009986 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8009962:	6978      	ldr	r0, [r7, #20]
 8009964:	f7ff ffac 	bl	80098c0 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d007      	beq.n	8009980 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	4618      	mov	r0, r3
 8009976:	f004 fa2f 	bl	800ddd8 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	2200      	movs	r2, #0
 800997e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8009980:	6978      	ldr	r0, [r7, #20]
 8009982:	f7ff ff53 	bl	800982c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	3314      	adds	r3, #20
 800998a:	f107 0210 	add.w	r2, r7, #16
 800998e:	4611      	mov	r1, r2
 8009990:	4618      	mov	r0, r3
 8009992:	f00d f97c 	bl	8016c8e <sys_arch_mbox_tryfetch>
 8009996:	4603      	mov	r3, r0
 8009998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800999c:	d1d5      	bne.n	800994a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	3314      	adds	r3, #20
 80099a2:	4618      	mov	r0, r3
 80099a4:	f00d f908 	bl	8016bb8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	3314      	adds	r3, #20
 80099ac:	4618      	mov	r0, r3
 80099ae:	f00d f99b 	bl	8016ce8 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 80099b2:	bf00      	nop
 80099b4:	3718      	adds	r7, #24
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
	...

080099bc <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b086      	sub	sp, #24
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	460b      	mov	r3, r1
 80099c6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 80099c8:	2300      	movs	r3, #0
 80099ca:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d106      	bne.n	80099e0 <lwip_netconn_do_close_internal+0x24>
 80099d2:	4b87      	ldr	r3, [pc, #540]	; (8009bf0 <lwip_netconn_do_close_internal+0x234>)
 80099d4:	f240 32a2 	movw	r2, #930	; 0x3a2
 80099d8:	4986      	ldr	r1, [pc, #536]	; (8009bf4 <lwip_netconn_do_close_internal+0x238>)
 80099da:	4887      	ldr	r0, [pc, #540]	; (8009bf8 <lwip_netconn_do_close_internal+0x23c>)
 80099dc:	f00d fb10 	bl	8017000 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099e8:	2b10      	cmp	r3, #16
 80099ea:	d006      	beq.n	80099fa <lwip_netconn_do_close_internal+0x3e>
 80099ec:	4b80      	ldr	r3, [pc, #512]	; (8009bf0 <lwip_netconn_do_close_internal+0x234>)
 80099ee:	f240 32a3 	movw	r2, #931	; 0x3a3
 80099f2:	4982      	ldr	r1, [pc, #520]	; (8009bfc <lwip_netconn_do_close_internal+0x240>)
 80099f4:	4880      	ldr	r0, [pc, #512]	; (8009bf8 <lwip_netconn_do_close_internal+0x23c>)
 80099f6:	f00d fb03 	bl	8017000 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	785b      	ldrb	r3, [r3, #1]
 80099fe:	2b04      	cmp	r3, #4
 8009a00:	d006      	beq.n	8009a10 <lwip_netconn_do_close_internal+0x54>
 8009a02:	4b7b      	ldr	r3, [pc, #492]	; (8009bf0 <lwip_netconn_do_close_internal+0x234>)
 8009a04:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8009a08:	497d      	ldr	r1, [pc, #500]	; (8009c00 <lwip_netconn_do_close_internal+0x244>)
 8009a0a:	487b      	ldr	r0, [pc, #492]	; (8009bf8 <lwip_netconn_do_close_internal+0x23c>)
 8009a0c:	f00d faf8 	bl	8017000 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d106      	bne.n	8009a26 <lwip_netconn_do_close_internal+0x6a>
 8009a18:	4b75      	ldr	r3, [pc, #468]	; (8009bf0 <lwip_netconn_do_close_internal+0x234>)
 8009a1a:	f240 32a5 	movw	r2, #933	; 0x3a5
 8009a1e:	4979      	ldr	r1, [pc, #484]	; (8009c04 <lwip_netconn_do_close_internal+0x248>)
 8009a20:	4875      	ldr	r0, [pc, #468]	; (8009bf8 <lwip_netconn_do_close_internal+0x23c>)
 8009a22:	f00d faed 	bl	8017000 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6a1b      	ldr	r3, [r3, #32]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d106      	bne.n	8009a3c <lwip_netconn_do_close_internal+0x80>
 8009a2e:	4b70      	ldr	r3, [pc, #448]	; (8009bf0 <lwip_netconn_do_close_internal+0x234>)
 8009a30:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009a34:	4974      	ldr	r1, [pc, #464]	; (8009c08 <lwip_netconn_do_close_internal+0x24c>)
 8009a36:	4870      	ldr	r0, [pc, #448]	; (8009bf8 <lwip_netconn_do_close_internal+0x23c>)
 8009a38:	f00d fae2 	bl	8017000 <iprintf>

  tpcb = conn->pcb.tcp;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6a1b      	ldr	r3, [r3, #32]
 8009a46:	7a1b      	ldrb	r3, [r3, #8]
 8009a48:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8009a4a:	7bfb      	ldrb	r3, [r7, #15]
 8009a4c:	f003 0301 	and.w	r3, r3, #1
 8009a50:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8009a52:	7bfb      	ldrb	r3, [r7, #15]
 8009a54:	f003 0302 	and.w	r3, r3, #2
 8009a58:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8009a5a:	7bfb      	ldrb	r3, [r7, #15]
 8009a5c:	2b03      	cmp	r3, #3
 8009a5e:	d102      	bne.n	8009a66 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8009a60:	2301      	movs	r3, #1
 8009a62:	75bb      	strb	r3, [r7, #22]
 8009a64:	e01f      	b.n	8009aa6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8009a66:	7bbb      	ldrb	r3, [r7, #14]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d00e      	beq.n	8009a8a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8009a70:	2b05      	cmp	r3, #5
 8009a72:	d007      	beq.n	8009a84 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8009a78:	2b06      	cmp	r3, #6
 8009a7a:	d003      	beq.n	8009a84 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8009a80:	2b08      	cmp	r3, #8
 8009a82:	d102      	bne.n	8009a8a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8009a84:	2301      	movs	r3, #1
 8009a86:	75bb      	strb	r3, [r7, #22]
 8009a88:	e00d      	b.n	8009aa6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8009a8a:	7b7b      	ldrb	r3, [r7, #13]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d008      	beq.n	8009aa2 <lwip_netconn_do_close_internal+0xe6>
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	8b5b      	ldrh	r3, [r3, #26]
 8009a94:	f003 0310 	and.w	r3, r3, #16
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d002      	beq.n	8009aa2 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	75bb      	strb	r3, [r7, #22]
 8009aa0:	e001      	b.n	8009aa6 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8009aa6:	7dbb      	ldrb	r3, [r7, #22]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d003      	beq.n	8009ab4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8009aac:	2100      	movs	r1, #0
 8009aae:	6938      	ldr	r0, [r7, #16]
 8009ab0:	f005 f956 	bl	800ed60 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	7d1b      	ldrb	r3, [r3, #20]
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d104      	bne.n	8009ac6 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8009abc:	2100      	movs	r1, #0
 8009abe:	6938      	ldr	r0, [r7, #16]
 8009ac0:	f005 f9c6 	bl	800ee50 <tcp_accept>
 8009ac4:	e01d      	b.n	8009b02 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8009ac6:	7bbb      	ldrb	r3, [r7, #14]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d007      	beq.n	8009adc <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8009acc:	2100      	movs	r1, #0
 8009ace:	6938      	ldr	r0, [r7, #16]
 8009ad0:	f005 f958 	bl	800ed84 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8009ad4:	2100      	movs	r1, #0
 8009ad6:	6938      	ldr	r0, [r7, #16]
 8009ad8:	f005 f9ba 	bl	800ee50 <tcp_accept>
    }
    if (shut_tx) {
 8009adc:	7b7b      	ldrb	r3, [r7, #13]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d003      	beq.n	8009aea <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8009ae2:	2100      	movs	r1, #0
 8009ae4:	6938      	ldr	r0, [r7, #16]
 8009ae6:	f005 f96f 	bl	800edc8 <tcp_sent>
    }
    if (shut_close) {
 8009aea:	7dbb      	ldrb	r3, [r7, #22]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d008      	beq.n	8009b02 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8009af0:	2200      	movs	r2, #0
 8009af2:	2100      	movs	r1, #0
 8009af4:	6938      	ldr	r0, [r7, #16]
 8009af6:	f005 f9c3 	bl	800ee80 <tcp_poll>
      tcp_err(tpcb, NULL);
 8009afa:	2100      	movs	r1, #0
 8009afc:	6938      	ldr	r0, [r7, #16]
 8009afe:	f005 f985 	bl	800ee0c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8009b02:	7dbb      	ldrb	r3, [r7, #22]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d005      	beq.n	8009b14 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8009b08:	6938      	ldr	r0, [r7, #16]
 8009b0a:	f004 f81f 	bl	800db4c <tcp_close>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	75fb      	strb	r3, [r7, #23]
 8009b12:	e007      	b.n	8009b24 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8009b14:	7bbb      	ldrb	r3, [r7, #14]
 8009b16:	7b7a      	ldrb	r2, [r7, #13]
 8009b18:	4619      	mov	r1, r3
 8009b1a:	6938      	ldr	r0, [r7, #16]
 8009b1c:	f004 f842 	bl	800dba4 <tcp_shutdown>
 8009b20:	4603      	mov	r3, r0
 8009b22:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8009b24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d102      	bne.n	8009b32 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	757b      	strb	r3, [r7, #21]
 8009b30:	e016      	b.n	8009b60 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8009b32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b3a:	d10f      	bne.n	8009b5c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6a1b      	ldr	r3, [r3, #32]
 8009b40:	7a5b      	ldrb	r3, [r3, #9]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d10c      	bne.n	8009b60 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8009b46:	2301      	movs	r3, #1
 8009b48:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8009b4a:	7dbb      	ldrb	r3, [r7, #22]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d007      	beq.n	8009b60 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8009b50:	6938      	ldr	r0, [r7, #16]
 8009b52:	f004 f941 	bl	800ddd8 <tcp_abort>
          err = ERR_OK;
 8009b56:	2300      	movs	r3, #0
 8009b58:	75fb      	strb	r3, [r7, #23]
 8009b5a:	e001      	b.n	8009b60 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8009b60:	7d7b      	ldrb	r3, [r7, #21]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d052      	beq.n	8009c0c <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6a1b      	ldr	r3, [r3, #32]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	330c      	adds	r3, #12
 8009b6e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6a1b      	ldr	r3, [r3, #32]
 8009b74:	7dfa      	ldrb	r2, [r7, #23]
 8009b76:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2200      	movs	r2, #0
 8009b82:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8009b84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d129      	bne.n	8009be0 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8009b8c:	7dbb      	ldrb	r3, [r7, #22]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d00c      	beq.n	8009bac <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2200      	movs	r2, #0
 8009b96:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d005      	beq.n	8009bac <lwip_netconn_do_close_internal+0x1f0>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	2104      	movs	r1, #4
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	4798      	blx	r3
      }
      if (shut_rx) {
 8009bac:	7bbb      	ldrb	r3, [r7, #14]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d009      	beq.n	8009bc6 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d005      	beq.n	8009bc6 <lwip_netconn_do_close_internal+0x20a>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	2100      	movs	r1, #0
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	4798      	blx	r3
      }
      if (shut_tx) {
 8009bc6:	7b7b      	ldrb	r3, [r7, #13]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d009      	beq.n	8009be0 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d005      	beq.n	8009be0 <lwip_netconn_do_close_internal+0x224>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd8:	2200      	movs	r2, #0
 8009bda:	2102      	movs	r1, #2
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009be0:	78fb      	ldrb	r3, [r7, #3]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d002      	beq.n	8009bec <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8009be6:	68b8      	ldr	r0, [r7, #8]
 8009be8:	f00d f8e4 	bl	8016db4 <sys_sem_signal>
    }
    return ERR_OK;
 8009bec:	2300      	movs	r3, #0
 8009bee:	e03c      	b.n	8009c6a <lwip_netconn_do_close_internal+0x2ae>
 8009bf0:	080188b0 	.word	0x080188b0
 8009bf4:	08018b84 	.word	0x08018b84
 8009bf8:	080188f4 	.word	0x080188f4
 8009bfc:	08018b94 	.word	0x08018b94
 8009c00:	08018bb4 	.word	0x08018bb4
 8009c04:	08018bd8 	.word	0x08018bd8
 8009c08:	08018a18 	.word	0x08018a18
  }
  if (!close_finished) {
 8009c0c:	7d7b      	ldrb	r3, [r7, #21]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d11e      	bne.n	8009c50 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	7d1b      	ldrb	r3, [r3, #20]
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d106      	bne.n	8009c28 <lwip_netconn_do_close_internal+0x26c>
 8009c1a:	4b16      	ldr	r3, [pc, #88]	; (8009c74 <lwip_netconn_do_close_internal+0x2b8>)
 8009c1c:	f240 4241 	movw	r2, #1089	; 0x441
 8009c20:	4915      	ldr	r1, [pc, #84]	; (8009c78 <lwip_netconn_do_close_internal+0x2bc>)
 8009c22:	4816      	ldr	r0, [pc, #88]	; (8009c7c <lwip_netconn_do_close_internal+0x2c0>)
 8009c24:	f00d f9ec 	bl	8017000 <iprintf>
    if (shut_tx) {
 8009c28:	7b7b      	ldrb	r3, [r7, #13]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d003      	beq.n	8009c36 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8009c2e:	4914      	ldr	r1, [pc, #80]	; (8009c80 <lwip_netconn_do_close_internal+0x2c4>)
 8009c30:	6938      	ldr	r0, [r7, #16]
 8009c32:	f005 f8c9 	bl	800edc8 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8009c36:	2201      	movs	r2, #1
 8009c38:	4912      	ldr	r1, [pc, #72]	; (8009c84 <lwip_netconn_do_close_internal+0x2c8>)
 8009c3a:	6938      	ldr	r0, [r7, #16]
 8009c3c:	f005 f920 	bl	800ee80 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8009c40:	4911      	ldr	r1, [pc, #68]	; (8009c88 <lwip_netconn_do_close_internal+0x2cc>)
 8009c42:	6938      	ldr	r0, [r7, #16]
 8009c44:	f005 f8e2 	bl	800ee0c <tcp_err>
    tcp_arg(tpcb, conn);
 8009c48:	6879      	ldr	r1, [r7, #4]
 8009c4a:	6938      	ldr	r0, [r7, #16]
 8009c4c:	f005 f888 	bl	800ed60 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8009c50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d106      	bne.n	8009c66 <lwip_netconn_do_close_internal+0x2aa>
 8009c58:	4b06      	ldr	r3, [pc, #24]	; (8009c74 <lwip_netconn_do_close_internal+0x2b8>)
 8009c5a:	f240 424d 	movw	r2, #1101	; 0x44d
 8009c5e:	490b      	ldr	r1, [pc, #44]	; (8009c8c <lwip_netconn_do_close_internal+0x2d0>)
 8009c60:	4806      	ldr	r0, [pc, #24]	; (8009c7c <lwip_netconn_do_close_internal+0x2c0>)
 8009c62:	f00d f9cd 	bl	8017000 <iprintf>
  return err;
 8009c66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3718      	adds	r7, #24
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	080188b0 	.word	0x080188b0
 8009c78:	08018bec 	.word	0x08018bec
 8009c7c:	080188f4 	.word	0x080188f4
 8009c80:	080093ad 	.word	0x080093ad
 8009c84:	080092e5 	.word	0x080092e5
 8009c88:	08009455 	.word	0x08009455
 8009c8c:	08018c10 	.word	0x08018c10

08009c90 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	785b      	ldrb	r3, [r3, #1]
 8009ca2:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8009ca4:	7afb      	ldrb	r3, [r7, #11]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d00d      	beq.n	8009cc6 <lwip_netconn_do_delconn+0x36>
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009cb4:	2b10      	cmp	r3, #16
 8009cb6:	d006      	beq.n	8009cc6 <lwip_netconn_do_delconn+0x36>
 8009cb8:	4b60      	ldr	r3, [pc, #384]	; (8009e3c <lwip_netconn_do_delconn+0x1ac>)
 8009cba:	f240 425e 	movw	r2, #1118	; 0x45e
 8009cbe:	4960      	ldr	r1, [pc, #384]	; (8009e40 <lwip_netconn_do_delconn+0x1b0>)
 8009cc0:	4860      	ldr	r0, [pc, #384]	; (8009e44 <lwip_netconn_do_delconn+0x1b4>)
 8009cc2:	f00d f99d 	bl	8017000 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8009cc6:	7afb      	ldrb	r3, [r7, #11]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d005      	beq.n	8009cd8 <lwip_netconn_do_delconn+0x48>
 8009ccc:	7afb      	ldrb	r3, [r7, #11]
 8009cce:	2b02      	cmp	r3, #2
 8009cd0:	d002      	beq.n	8009cd8 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8009cd2:	7afb      	ldrb	r3, [r7, #11]
 8009cd4:	2b03      	cmp	r3, #3
 8009cd6:	d109      	bne.n	8009cec <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8009cd8:	7afb      	ldrb	r3, [r7, #11]
 8009cda:	2b03      	cmp	r3, #3
 8009cdc:	d10a      	bne.n	8009cf4 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	7f1b      	ldrb	r3, [r3, #28]
 8009ce4:	f003 0304 	and.w	r3, r3, #4
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d103      	bne.n	8009cf4 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	22fb      	movs	r2, #251	; 0xfb
 8009cf0:	711a      	strb	r2, [r3, #4]
 8009cf2:	e097      	b.n	8009e24 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8009cf4:	7afb      	ldrb	r3, [r7, #11]
 8009cf6:	2b03      	cmp	r3, #3
 8009cf8:	d10d      	bne.n	8009d16 <lwip_netconn_do_delconn+0x86>
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	7f1b      	ldrb	r3, [r3, #28]
 8009d00:	f003 0304 	and.w	r3, r3, #4
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d106      	bne.n	8009d16 <lwip_netconn_do_delconn+0x86>
 8009d08:	4b4c      	ldr	r3, [pc, #304]	; (8009e3c <lwip_netconn_do_delconn+0x1ac>)
 8009d0a:	f240 427a 	movw	r2, #1146	; 0x47a
 8009d0e:	494e      	ldr	r1, [pc, #312]	; (8009e48 <lwip_netconn_do_delconn+0x1b8>)
 8009d10:	484c      	ldr	r0, [pc, #304]	; (8009e44 <lwip_netconn_do_delconn+0x1b4>)
 8009d12:	f00d f975 	bl	8017000 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4618      	mov	r0, r3
 8009d22:	f7ff fdcd 	bl	80098c0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d05f      	beq.n	8009df0 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d3a:	2b10      	cmp	r3, #16
 8009d3c:	d00d      	beq.n	8009d5a <lwip_netconn_do_delconn+0xca>
 8009d3e:	2b20      	cmp	r3, #32
 8009d40:	d151      	bne.n	8009de6 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	4618      	mov	r0, r3
 8009d54:	f00a fa74 	bl	8014240 <udp_remove>
          break;
 8009d58:	e046      	b.n	8009de8 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	6a1b      	ldr	r3, [r3, #32]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d006      	beq.n	8009d72 <lwip_netconn_do_delconn+0xe2>
 8009d64:	4b35      	ldr	r3, [pc, #212]	; (8009e3c <lwip_netconn_do_delconn+0x1ac>)
 8009d66:	f240 4294 	movw	r2, #1172	; 0x494
 8009d6a:	4938      	ldr	r1, [pc, #224]	; (8009e4c <lwip_netconn_do_delconn+0x1bc>)
 8009d6c:	4835      	ldr	r0, [pc, #212]	; (8009e44 <lwip_netconn_do_delconn+0x1b4>)
 8009d6e:	f00d f947 	bl	8017000 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	2204      	movs	r2, #4
 8009d78:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2203      	movs	r2, #3
 8009d7e:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	68fa      	ldr	r2, [r7, #12]
 8009d86:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	2100      	movs	r1, #0
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f7ff fe14 	bl	80099bc <lwip_netconn_do_close_internal>
 8009d94:	4603      	mov	r3, r0
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d04b      	beq.n	8009e32 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	785b      	ldrb	r3, [r3, #1]
 8009da0:	2b04      	cmp	r3, #4
 8009da2:	d006      	beq.n	8009db2 <lwip_netconn_do_delconn+0x122>
 8009da4:	4b25      	ldr	r3, [pc, #148]	; (8009e3c <lwip_netconn_do_delconn+0x1ac>)
 8009da6:	f240 429a 	movw	r2, #1178	; 0x49a
 8009daa:	4929      	ldr	r1, [pc, #164]	; (8009e50 <lwip_netconn_do_delconn+0x1c0>)
 8009dac:	4825      	ldr	r0, [pc, #148]	; (8009e44 <lwip_netconn_do_delconn+0x1b4>)
 8009dae:	f00d f927 	bl	8017000 <iprintf>
            UNLOCK_TCPIP_CORE();
 8009db2:	4828      	ldr	r0, [pc, #160]	; (8009e54 <lwip_netconn_do_delconn+0x1c4>)
 8009db4:	f00d f86f 	bl	8016e96 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	330c      	adds	r3, #12
 8009dbe:	2100      	movs	r1, #0
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f00c ffc6 	bl	8016d52 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8009dc6:	4823      	ldr	r0, [pc, #140]	; (8009e54 <lwip_netconn_do_delconn+0x1c4>)
 8009dc8:	f00d f856 	bl	8016e78 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	785b      	ldrb	r3, [r3, #1]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d02d      	beq.n	8009e32 <lwip_netconn_do_delconn+0x1a2>
 8009dd6:	4b19      	ldr	r3, [pc, #100]	; (8009e3c <lwip_netconn_do_delconn+0x1ac>)
 8009dd8:	f240 429e 	movw	r2, #1182	; 0x49e
 8009ddc:	491c      	ldr	r1, [pc, #112]	; (8009e50 <lwip_netconn_do_delconn+0x1c0>)
 8009dde:	4819      	ldr	r0, [pc, #100]	; (8009e44 <lwip_netconn_do_delconn+0x1b4>)
 8009de0:	f00d f90e 	bl	8017000 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8009de4:	e025      	b.n	8009e32 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8009de6:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	2200      	movs	r2, #0
 8009dee:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d007      	beq.n	8009e0a <lwip_netconn_do_delconn+0x17a>
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e00:	68fa      	ldr	r2, [r7, #12]
 8009e02:	6810      	ldr	r0, [r2, #0]
 8009e04:	2200      	movs	r2, #0
 8009e06:	2100      	movs	r1, #0
 8009e08:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d007      	beq.n	8009e24 <lwip_netconn_do_delconn+0x194>
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1a:	68fa      	ldr	r2, [r7, #12]
 8009e1c:	6810      	ldr	r0, [r2, #0]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	2102      	movs	r1, #2
 8009e22:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	330c      	adds	r3, #12
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f00c ffdc 	bl	8016de8 <sys_sem_valid>
 8009e30:	e000      	b.n	8009e34 <lwip_netconn_do_delconn+0x1a4>
          return;
 8009e32:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8009e34:	3710      	adds	r7, #16
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}
 8009e3a:	bf00      	nop
 8009e3c:	080188b0 	.word	0x080188b0
 8009e40:	08018c20 	.word	0x08018c20
 8009e44:	080188f4 	.word	0x080188f4
 8009e48:	08018c34 	.word	0x08018c34
 8009e4c:	08018c54 	.word	0x08018c54
 8009e50:	08018c70 	.word	0x08018c70
 8009e54:	2000782c 	.word	0x2000782c

08009e58 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d025      	beq.n	8009eba <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	781b      	ldrb	r3, [r3, #0]
 8009e74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e78:	2b10      	cmp	r3, #16
 8009e7a:	d00e      	beq.n	8009e9a <lwip_netconn_do_bind+0x42>
 8009e7c:	2b20      	cmp	r3, #32
 8009e7e:	d119      	bne.n	8009eb4 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	6858      	ldr	r0, [r3, #4]
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	6899      	ldr	r1, [r3, #8]
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	899b      	ldrh	r3, [r3, #12]
 8009e8e:	461a      	mov	r2, r3
 8009e90:	f00a f92e 	bl	80140f0 <udp_bind>
 8009e94:	4603      	mov	r3, r0
 8009e96:	73fb      	strb	r3, [r7, #15]
        break;
 8009e98:	e011      	b.n	8009ebe <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	6858      	ldr	r0, [r3, #4]
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	6899      	ldr	r1, [r3, #8]
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	899b      	ldrh	r3, [r3, #12]
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	f003 ffa1 	bl	800ddf0 <tcp_bind>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	73fb      	strb	r3, [r7, #15]
        break;
 8009eb2:	e004      	b.n	8009ebe <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8009eb4:	23fa      	movs	r3, #250	; 0xfa
 8009eb6:	73fb      	strb	r3, [r7, #15]
        break;
 8009eb8:	e001      	b.n	8009ebe <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8009eba:	23fa      	movs	r3, #250	; 0xfa
 8009ebc:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	7bfa      	ldrb	r2, [r7, #15]
 8009ec2:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009ec4:	bf00      	nop
 8009ec6:	3710      	adds	r7, #16
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b084      	sub	sp, #16
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4618      	mov	r0, r3
 8009ede:	f7ff f871 	bl	8008fc4 <netconn_err>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8009ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d134      	bne.n	8009f58 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d02d      	beq.n	8009f54 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f02:	2b20      	cmp	r3, #32
 8009f04:	d123      	bne.n	8009f4e <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	689b      	ldr	r3, [r3, #8]
 8009f0a:	689b      	ldr	r3, [r3, #8]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d10c      	bne.n	8009f2a <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	685a      	ldr	r2, [r3, #4]
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	689b      	ldr	r3, [r3, #8]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	4610      	mov	r0, r2
 8009f20:	f009 fefc 	bl	8013d1c <udp_send>
 8009f24:	4603      	mov	r3, r0
 8009f26:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 8009f28:	e016      	b.n	8009f58 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	6858      	ldr	r0, [r3, #4]
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	689b      	ldr	r3, [r3, #8]
 8009f34:	6819      	ldr	r1, [r3, #0]
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	689b      	ldr	r3, [r3, #8]
 8009f3a:	f103 0208 	add.w	r2, r3, #8
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	689b      	ldr	r3, [r3, #8]
 8009f42:	899b      	ldrh	r3, [r3, #12]
 8009f44:	f009 ff1e 	bl	8013d84 <udp_sendto>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	73fb      	strb	r3, [r7, #15]
          break;
 8009f4c:	e004      	b.n	8009f58 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 8009f4e:	23f5      	movs	r3, #245	; 0xf5
 8009f50:	73fb      	strb	r3, [r7, #15]
          break;
 8009f52:	e001      	b.n	8009f58 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 8009f54:	23f5      	movs	r3, #245	; 0xf5
 8009f56:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	7bfa      	ldrb	r2, [r7, #15]
 8009f5c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009f5e:	bf00      	nop
 8009f60:	3710      	adds	r7, #16
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}

08009f66 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8009f66:	b580      	push	{r7, lr}
 8009f68:	b086      	sub	sp, #24
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	2200      	movs	r2, #0
 8009f76:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d022      	beq.n	8009fc8 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	781b      	ldrb	r3, [r3, #0]
 8009f88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f8c:	2b10      	cmp	r3, #16
 8009f8e:	d11b      	bne.n	8009fc8 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	689b      	ldr	r3, [r3, #8]
 8009f94:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f9c:	d202      	bcs.n	8009fa4 <lwip_netconn_do_recv+0x3e>
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	b29b      	uxth	r3, r3
 8009fa2:	e001      	b.n	8009fa8 <lwip_netconn_do_recv+0x42>
 8009fa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009fa8:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	89fa      	ldrh	r2, [r7, #14]
 8009fb2:	4611      	mov	r1, r2
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f004 f80d 	bl	800dfd4 <tcp_recved>
        remaining -= recved;
 8009fba:	89fb      	ldrh	r3, [r7, #14]
 8009fbc:	697a      	ldr	r2, [r7, #20]
 8009fbe:	1ad3      	subs	r3, r2, r3
 8009fc0:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d1e6      	bne.n	8009f96 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009fc8:	bf00      	nop
 8009fca:	3718      	adds	r7, #24
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}

08009fd0 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b088      	sub	sp, #32
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	460b      	mov	r3, r1
 8009fda:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d106      	bne.n	8009ff4 <lwip_netconn_do_writemore+0x24>
 8009fe6:	4b96      	ldr	r3, [pc, #600]	; (800a240 <lwip_netconn_do_writemore+0x270>)
 8009fe8:	f240 6273 	movw	r2, #1651	; 0x673
 8009fec:	4995      	ldr	r1, [pc, #596]	; (800a244 <lwip_netconn_do_writemore+0x274>)
 8009fee:	4896      	ldr	r0, [pc, #600]	; (800a248 <lwip_netconn_do_writemore+0x278>)
 8009ff0:	f00d f806 	bl	8017000 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	785b      	ldrb	r3, [r3, #1]
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d006      	beq.n	800a00a <lwip_netconn_do_writemore+0x3a>
 8009ffc:	4b90      	ldr	r3, [pc, #576]	; (800a240 <lwip_netconn_do_writemore+0x270>)
 8009ffe:	f240 6274 	movw	r2, #1652	; 0x674
 800a002:	4992      	ldr	r1, [pc, #584]	; (800a24c <lwip_netconn_do_writemore+0x27c>)
 800a004:	4890      	ldr	r0, [pc, #576]	; (800a248 <lwip_netconn_do_writemore+0x278>)
 800a006:	f00c fffb 	bl	8017000 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6a1b      	ldr	r3, [r3, #32]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d106      	bne.n	800a020 <lwip_netconn_do_writemore+0x50>
 800a012:	4b8b      	ldr	r3, [pc, #556]	; (800a240 <lwip_netconn_do_writemore+0x270>)
 800a014:	f240 6275 	movw	r2, #1653	; 0x675
 800a018:	498d      	ldr	r1, [pc, #564]	; (800a250 <lwip_netconn_do_writemore+0x280>)
 800a01a:	488b      	ldr	r0, [pc, #556]	; (800a248 <lwip_netconn_do_writemore+0x278>)
 800a01c:	f00c fff0 	bl	8017000 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d106      	bne.n	800a036 <lwip_netconn_do_writemore+0x66>
 800a028:	4b85      	ldr	r3, [pc, #532]	; (800a240 <lwip_netconn_do_writemore+0x270>)
 800a02a:	f240 6276 	movw	r2, #1654	; 0x676
 800a02e:	4989      	ldr	r1, [pc, #548]	; (800a254 <lwip_netconn_do_writemore+0x284>)
 800a030:	4885      	ldr	r0, [pc, #532]	; (800a248 <lwip_netconn_do_writemore+0x278>)
 800a032:	f00c ffe5 	bl	8017000 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6a1b      	ldr	r3, [r3, #32]
 800a03a:	699a      	ldr	r2, [r3, #24]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6a1b      	ldr	r3, [r3, #32]
 800a040:	695b      	ldr	r3, [r3, #20]
 800a042:	429a      	cmp	r2, r3
 800a044:	d306      	bcc.n	800a054 <lwip_netconn_do_writemore+0x84>
 800a046:	4b7e      	ldr	r3, [pc, #504]	; (800a240 <lwip_netconn_do_writemore+0x270>)
 800a048:	f240 6277 	movw	r2, #1655	; 0x677
 800a04c:	4982      	ldr	r1, [pc, #520]	; (800a258 <lwip_netconn_do_writemore+0x288>)
 800a04e:	487e      	ldr	r0, [pc, #504]	; (800a248 <lwip_netconn_do_writemore+0x278>)
 800a050:	f00c ffd6 	bl	8017000 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6a1b      	ldr	r3, [r3, #32]
 800a058:	899b      	ldrh	r3, [r3, #12]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d106      	bne.n	800a06c <lwip_netconn_do_writemore+0x9c>
 800a05e:	4b78      	ldr	r3, [pc, #480]	; (800a240 <lwip_netconn_do_writemore+0x270>)
 800a060:	f240 6279 	movw	r2, #1657	; 0x679
 800a064:	497d      	ldr	r1, [pc, #500]	; (800a25c <lwip_netconn_do_writemore+0x28c>)
 800a066:	4878      	ldr	r0, [pc, #480]	; (800a248 <lwip_netconn_do_writemore+0x278>)
 800a068:	f00c ffca 	bl	8017000 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6a1b      	ldr	r3, [r3, #32]
 800a070:	7f1b      	ldrb	r3, [r3, #28]
 800a072:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	7f1b      	ldrb	r3, [r3, #28]
 800a078:	f003 0302 	and.w	r3, r3, #2
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d104      	bne.n	800a08a <lwip_netconn_do_writemore+0xba>
 800a080:	7ebb      	ldrb	r3, [r7, #26]
 800a082:	f003 0304 	and.w	r3, r3, #4
 800a086:	2b00      	cmp	r3, #0
 800a088:	d001      	beq.n	800a08e <lwip_netconn_do_writemore+0xbe>
 800a08a:	2301      	movs	r3, #1
 800a08c:	e000      	b.n	800a090 <lwip_netconn_do_writemore+0xc0>
 800a08e:	2300      	movs	r3, #0
 800a090:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6a1b      	ldr	r3, [r3, #32]
 800a096:	689b      	ldr	r3, [r3, #8]
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6a1b      	ldr	r3, [r3, #32]
 800a09e:	691b      	ldr	r3, [r3, #16]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6a1b      	ldr	r3, [r3, #32]
 800a0a8:	689b      	ldr	r3, [r3, #8]
 800a0aa:	685a      	ldr	r2, [r3, #4]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6a1b      	ldr	r3, [r3, #32]
 800a0b0:	691b      	ldr	r3, [r3, #16]
 800a0b2:	1ad3      	subs	r3, r2, r3
 800a0b4:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0bc:	d307      	bcc.n	800a0ce <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800a0be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a0c2:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a0c4:	7ebb      	ldrb	r3, [r7, #26]
 800a0c6:	f043 0302 	orr.w	r3, r3, #2
 800a0ca:	76bb      	strb	r3, [r7, #26]
 800a0cc:	e001      	b.n	800a0d2 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a0da:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800a0dc:	89fa      	ldrh	r2, [r7, #14]
 800a0de:	8bbb      	ldrh	r3, [r7, #28]
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	d216      	bcs.n	800a112 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800a0e4:	89fb      	ldrh	r3, [r7, #14]
 800a0e6:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800a0e8:	7e3b      	ldrb	r3, [r7, #24]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d00d      	beq.n	800a10a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800a0ee:	8bbb      	ldrh	r3, [r7, #28]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d10e      	bne.n	800a112 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6a1b      	ldr	r3, [r3, #32]
 800a0f8:	699b      	ldr	r3, [r3, #24]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d102      	bne.n	800a104 <lwip_netconn_do_writemore+0x134>
 800a0fe:	f06f 0306 	mvn.w	r3, #6
 800a102:	e000      	b.n	800a106 <lwip_netconn_do_writemore+0x136>
 800a104:	2300      	movs	r3, #0
 800a106:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800a108:	e07d      	b.n	800a206 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800a10a:	7ebb      	ldrb	r3, [r7, #26]
 800a10c:	f043 0302 	orr.w	r3, r3, #2
 800a110:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6a1b      	ldr	r3, [r3, #32]
 800a116:	691a      	ldr	r2, [r3, #16]
 800a118:	8bbb      	ldrh	r3, [r7, #28]
 800a11a:	441a      	add	r2, r3
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6a1b      	ldr	r3, [r3, #32]
 800a120:	689b      	ldr	r3, [r3, #8]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	429a      	cmp	r2, r3
 800a126:	d906      	bls.n	800a136 <lwip_netconn_do_writemore+0x166>
 800a128:	4b45      	ldr	r3, [pc, #276]	; (800a240 <lwip_netconn_do_writemore+0x270>)
 800a12a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800a12e:	494c      	ldr	r1, [pc, #304]	; (800a260 <lwip_netconn_do_writemore+0x290>)
 800a130:	4845      	ldr	r0, [pc, #276]	; (800a248 <lwip_netconn_do_writemore+0x278>)
 800a132:	f00c ff65 	bl	8017000 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a136:	8bbb      	ldrh	r3, [r7, #28]
 800a138:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d103      	bne.n	800a148 <lwip_netconn_do_writemore+0x178>
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a146:	d209      	bcs.n	800a15c <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a14c:	8bba      	ldrh	r2, [r7, #28]
 800a14e:	429a      	cmp	r2, r3
 800a150:	d10b      	bne.n	800a16a <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6a1b      	ldr	r3, [r3, #32]
 800a156:	899b      	ldrh	r3, [r3, #12]
 800a158:	2b01      	cmp	r3, #1
 800a15a:	d906      	bls.n	800a16a <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800a15c:	2301      	movs	r3, #1
 800a15e:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a160:	7ebb      	ldrb	r3, [r7, #26]
 800a162:	f043 0302 	orr.w	r3, r3, #2
 800a166:	76bb      	strb	r3, [r7, #26]
 800a168:	e001      	b.n	800a16e <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800a16a:	2300      	movs	r3, #0
 800a16c:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6858      	ldr	r0, [r3, #4]
 800a172:	7ebb      	ldrb	r3, [r7, #26]
 800a174:	8bba      	ldrh	r2, [r7, #28]
 800a176:	6979      	ldr	r1, [r7, #20]
 800a178:	f007 fd34 	bl	8011be4 <tcp_write>
 800a17c:	4603      	mov	r3, r0
 800a17e:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800a180:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d12c      	bne.n	800a1e2 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6a1b      	ldr	r3, [r3, #32]
 800a18c:	6999      	ldr	r1, [r3, #24]
 800a18e:	8bba      	ldrh	r2, [r7, #28]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6a1b      	ldr	r3, [r3, #32]
 800a194:	440a      	add	r2, r1
 800a196:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6a1b      	ldr	r3, [r3, #32]
 800a19c:	6919      	ldr	r1, [r3, #16]
 800a19e:	8bba      	ldrh	r2, [r7, #28]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6a1b      	ldr	r3, [r3, #32]
 800a1a4:	440a      	add	r2, r1
 800a1a6:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6a1b      	ldr	r3, [r3, #32]
 800a1ac:	691a      	ldr	r2, [r3, #16]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6a1b      	ldr	r3, [r3, #32]
 800a1b2:	689b      	ldr	r3, [r3, #8]
 800a1b4:	685b      	ldr	r3, [r3, #4]
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	d113      	bne.n	800a1e2 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6a1b      	ldr	r3, [r3, #32]
 800a1be:	899a      	ldrh	r2, [r3, #12]
 800a1c0:	3a01      	subs	r2, #1
 800a1c2:	b292      	uxth	r2, r2
 800a1c4:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6a1b      	ldr	r3, [r3, #32]
 800a1ca:	899b      	ldrh	r3, [r3, #12]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d008      	beq.n	800a1e2 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6a1b      	ldr	r3, [r3, #32]
 800a1d4:	689a      	ldr	r2, [r3, #8]
 800a1d6:	3208      	adds	r2, #8
 800a1d8:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6a1b      	ldr	r3, [r3, #32]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800a1e2:	7e7b      	ldrb	r3, [r7, #25]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d004      	beq.n	800a1f2 <lwip_netconn_do_writemore+0x222>
 800a1e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	f43f af50 	beq.w	800a092 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800a1f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d004      	beq.n	800a204 <lwip_netconn_do_writemore+0x234>
 800a1fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a1fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a202:	d146      	bne.n	800a292 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800a204:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800a206:	7e3b      	ldrb	r3, [r7, #24]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d02b      	beq.n	800a264 <lwip_netconn_do_writemore+0x294>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6a1b      	ldr	r3, [r3, #32]
 800a210:	699a      	ldr	r2, [r3, #24]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6a1b      	ldr	r3, [r3, #32]
 800a216:	695b      	ldr	r3, [r3, #20]
 800a218:	429a      	cmp	r2, r3
 800a21a:	d223      	bcs.n	800a264 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a220:	2b00      	cmp	r3, #0
 800a222:	d005      	beq.n	800a230 <lwip_netconn_do_writemore+0x260>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a228:	2200      	movs	r2, #0
 800a22a:	2103      	movs	r1, #3
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	7f1b      	ldrb	r3, [r3, #28]
 800a234:	f043 0310 	orr.w	r3, r3, #16
 800a238:	b2da      	uxtb	r2, r3
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	771a      	strb	r2, [r3, #28]
 800a23e:	e028      	b.n	800a292 <lwip_netconn_do_writemore+0x2c2>
 800a240:	080188b0 	.word	0x080188b0
 800a244:	08018a08 	.word	0x08018a08
 800a248:	080188f4 	.word	0x080188f4
 800a24c:	08018d10 	.word	0x08018d10
 800a250:	08018a18 	.word	0x08018a18
 800a254:	08018d30 	.word	0x08018d30
 800a258:	08018d48 	.word	0x08018d48
 800a25c:	08018d88 	.word	0x08018d88
 800a260:	08018db0 	.word	0x08018db0
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a26c:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a270:	d305      	bcc.n	800a27e <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a27a:	2b04      	cmp	r3, #4
 800a27c:	d909      	bls.n	800a292 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a282:	2b00      	cmp	r3, #0
 800a284:	d005      	beq.n	800a292 <lwip_netconn_do_writemore+0x2c2>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28a:	2200      	movs	r2, #0
 800a28c:	2103      	movs	r1, #3
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800a292:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d11d      	bne.n	800a2d6 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6a1b      	ldr	r3, [r3, #32]
 800a29e:	699a      	ldr	r2, [r3, #24]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6a1b      	ldr	r3, [r3, #32]
 800a2a4:	695b      	ldr	r3, [r3, #20]
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	d002      	beq.n	800a2b0 <lwip_netconn_do_writemore+0x2e0>
 800a2aa:	7e3b      	ldrb	r3, [r7, #24]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d001      	beq.n	800a2b4 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	685b      	ldr	r3, [r3, #4]
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f008 fa7d 	bl	80127b8 <tcp_output>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800a2c2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800a2c6:	f113 0f04 	cmn.w	r3, #4
 800a2ca:	d12c      	bne.n	800a326 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a2cc:	7b3b      	ldrb	r3, [r7, #12]
 800a2ce:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	76fb      	strb	r3, [r7, #27]
 800a2d4:	e027      	b.n	800a326 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800a2d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a2da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2de:	d120      	bne.n	800a322 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f008 fa67 	bl	80127b8 <tcp_output>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800a2ee:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a2f2:	f113 0f04 	cmn.w	r3, #4
 800a2f6:	d104      	bne.n	800a302 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a2f8:	7b7b      	ldrb	r3, [r7, #13]
 800a2fa:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	76fb      	strb	r3, [r7, #27]
 800a300:	e011      	b.n	800a326 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800a302:	7e3b      	ldrb	r3, [r7, #24]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d00e      	beq.n	800a326 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6a1b      	ldr	r3, [r3, #32]
 800a30c:	699b      	ldr	r3, [r3, #24]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d102      	bne.n	800a318 <lwip_netconn_do_writemore+0x348>
 800a312:	f06f 0306 	mvn.w	r3, #6
 800a316:	e000      	b.n	800a31a <lwip_netconn_do_writemore+0x34a>
 800a318:	2300      	movs	r3, #0
 800a31a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a31c:	2301      	movs	r3, #1
 800a31e:	76fb      	strb	r3, [r7, #27]
 800a320:	e001      	b.n	800a326 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800a322:	2301      	movs	r3, #1
 800a324:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800a326:	7efb      	ldrb	r3, [r7, #27]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d015      	beq.n	800a358 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6a1b      	ldr	r3, [r3, #32]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	330c      	adds	r3, #12
 800a334:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6a1b      	ldr	r3, [r3, #32]
 800a33a:	7ffa      	ldrb	r2, [r7, #31]
 800a33c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2200      	movs	r2, #0
 800a342:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2200      	movs	r2, #0
 800a348:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a34a:	78fb      	ldrb	r3, [r7, #3]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d006      	beq.n	800a35e <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800a350:	68b8      	ldr	r0, [r7, #8]
 800a352:	f00c fd2f 	bl	8016db4 <sys_sem_signal>
 800a356:	e002      	b.n	800a35e <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800a358:	f04f 33ff 	mov.w	r3, #4294967295
 800a35c:	e000      	b.n	800a360 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800a35e:	2300      	movs	r3, #0
}
 800a360:	4618      	mov	r0, r3
 800a362:	3720      	adds	r7, #32
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}

0800a368 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b084      	sub	sp, #16
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4618      	mov	r0, r3
 800a37a:	f7fe fe23 	bl	8008fc4 <netconn_err>
 800a37e:	4603      	mov	r3, r0
 800a380:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d166      	bne.n	800a458 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	781b      	ldrb	r3, [r3, #0]
 800a390:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a394:	2b10      	cmp	r3, #16
 800a396:	d15d      	bne.n	800a454 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	785b      	ldrb	r3, [r3, #1]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d002      	beq.n	800a3a8 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800a3a2:	23fb      	movs	r3, #251	; 0xfb
 800a3a4:	73fb      	strb	r3, [r7, #15]
 800a3a6:	e057      	b.n	800a458 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d04d      	beq.n	800a44e <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	6a1b      	ldr	r3, [r3, #32]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d006      	beq.n	800a3d2 <lwip_netconn_do_write+0x6a>
 800a3c4:	4b28      	ldr	r3, [pc, #160]	; (800a468 <lwip_netconn_do_write+0x100>)
 800a3c6:	f240 7223 	movw	r2, #1827	; 0x723
 800a3ca:	4928      	ldr	r1, [pc, #160]	; (800a46c <lwip_netconn_do_write+0x104>)
 800a3cc:	4828      	ldr	r0, [pc, #160]	; (800a470 <lwip_netconn_do_write+0x108>)
 800a3ce:	f00c fe17 	bl	8017000 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	695b      	ldr	r3, [r3, #20]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d106      	bne.n	800a3e8 <lwip_netconn_do_write+0x80>
 800a3da:	4b23      	ldr	r3, [pc, #140]	; (800a468 <lwip_netconn_do_write+0x100>)
 800a3dc:	f240 7224 	movw	r2, #1828	; 0x724
 800a3e0:	4924      	ldr	r1, [pc, #144]	; (800a474 <lwip_netconn_do_write+0x10c>)
 800a3e2:	4823      	ldr	r0, [pc, #140]	; (800a470 <lwip_netconn_do_write+0x108>)
 800a3e4:	f00c fe0c 	bl	8017000 <iprintf>
        msg->conn->current_msg = msg;
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	68ba      	ldr	r2, [r7, #8]
 800a3ee:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	2100      	movs	r1, #0
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7ff fdea 	bl	8009fd0 <lwip_netconn_do_writemore>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d02e      	beq.n	800a460 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	785b      	ldrb	r3, [r3, #1]
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d006      	beq.n	800a41a <lwip_netconn_do_write+0xb2>
 800a40c:	4b16      	ldr	r3, [pc, #88]	; (800a468 <lwip_netconn_do_write+0x100>)
 800a40e:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800a412:	4919      	ldr	r1, [pc, #100]	; (800a478 <lwip_netconn_do_write+0x110>)
 800a414:	4816      	ldr	r0, [pc, #88]	; (800a470 <lwip_netconn_do_write+0x108>)
 800a416:	f00c fdf3 	bl	8017000 <iprintf>
          UNLOCK_TCPIP_CORE();
 800a41a:	4818      	ldr	r0, [pc, #96]	; (800a47c <lwip_netconn_do_write+0x114>)
 800a41c:	f00c fd3b 	bl	8016e96 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	330c      	adds	r3, #12
 800a426:	2100      	movs	r1, #0
 800a428:	4618      	mov	r0, r3
 800a42a:	f00c fc92 	bl	8016d52 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800a42e:	4813      	ldr	r0, [pc, #76]	; (800a47c <lwip_netconn_do_write+0x114>)
 800a430:	f00c fd22 	bl	8016e78 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	785b      	ldrb	r3, [r3, #1]
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d110      	bne.n	800a460 <lwip_netconn_do_write+0xf8>
 800a43e:	4b0a      	ldr	r3, [pc, #40]	; (800a468 <lwip_netconn_do_write+0x100>)
 800a440:	f240 722c 	movw	r2, #1836	; 0x72c
 800a444:	490c      	ldr	r1, [pc, #48]	; (800a478 <lwip_netconn_do_write+0x110>)
 800a446:	480a      	ldr	r0, [pc, #40]	; (800a470 <lwip_netconn_do_write+0x108>)
 800a448:	f00c fdda 	bl	8017000 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800a44c:	e008      	b.n	800a460 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800a44e:	23f5      	movs	r3, #245	; 0xf5
 800a450:	73fb      	strb	r3, [r7, #15]
 800a452:	e001      	b.n	800a458 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800a454:	23fa      	movs	r3, #250	; 0xfa
 800a456:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	7bfa      	ldrb	r2, [r7, #15]
 800a45c:	711a      	strb	r2, [r3, #4]
 800a45e:	e000      	b.n	800a462 <lwip_netconn_do_write+0xfa>
        return;
 800a460:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800a462:	3710      	adds	r7, #16
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}
 800a468:	080188b0 	.word	0x080188b0
 800a46c:	08018c54 	.word	0x08018c54
 800a470:	080188f4 	.word	0x080188f4
 800a474:	08018ddc 	.word	0x08018ddc
 800a478:	08018c70 	.word	0x08018c70
 800a47c:	2000782c 	.word	0x2000782c

0800a480 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b084      	sub	sp, #16
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d06b      	beq.n	800a56e <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	7c1b      	ldrb	r3, [r3, #16]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d007      	beq.n	800a4ae <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	685a      	ldr	r2, [r3, #4]
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	6812      	ldr	r2, [r2, #0]
 800a4aa:	601a      	str	r2, [r3, #0]
 800a4ac:	e006      	b.n	800a4bc <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	685a      	ldr	r2, [r3, #4]
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	689b      	ldr	r3, [r3, #8]
 800a4b8:	6852      	ldr	r2, [r2, #4]
 800a4ba:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a4cc:	2b10      	cmp	r3, #16
 800a4ce:	d021      	beq.n	800a514 <lwip_netconn_do_getaddr+0x94>
 800a4d0:	2b20      	cmp	r3, #32
 800a4d2:	d144      	bne.n	800a55e <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	7c1b      	ldrb	r3, [r3, #16]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d007      	beq.n	800a4ec <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	685a      	ldr	r2, [r3, #4]
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	68db      	ldr	r3, [r3, #12]
 800a4e6:	8a52      	ldrh	r2, [r2, #18]
 800a4e8:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 800a4ea:	e044      	b.n	800a576 <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	7c1b      	ldrb	r3, [r3, #16]
 800a4f4:	f003 0304 	and.w	r3, r3, #4
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d103      	bne.n	800a504 <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	22f5      	movs	r2, #245	; 0xf5
 800a500:	711a      	strb	r2, [r3, #4]
        break;
 800a502:	e038      	b.n	800a576 <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	685a      	ldr	r2, [r3, #4]
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	68db      	ldr	r3, [r3, #12]
 800a50e:	8a92      	ldrh	r2, [r2, #20]
 800a510:	801a      	strh	r2, [r3, #0]
        break;
 800a512:	e030      	b.n	800a576 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	7c1b      	ldrb	r3, [r3, #16]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d10f      	bne.n	800a53c <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	685b      	ldr	r3, [r3, #4]
 800a522:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 800a524:	2b00      	cmp	r3, #0
 800a526:	d005      	beq.n	800a534 <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	7d1b      	ldrb	r3, [r3, #20]
 800a530:	2b01      	cmp	r3, #1
 800a532:	d103      	bne.n	800a53c <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	22f5      	movs	r2, #245	; 0xf5
 800a538:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 800a53a:	e01c      	b.n	800a576 <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	7c1b      	ldrb	r3, [r3, #16]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d004      	beq.n	800a54e <lwip_netconn_do_getaddr+0xce>
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	685b      	ldr	r3, [r3, #4]
 800a54a:	8adb      	ldrh	r3, [r3, #22]
 800a54c:	e003      	b.n	800a556 <lwip_netconn_do_getaddr+0xd6>
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	8b1b      	ldrh	r3, [r3, #24]
 800a556:	68fa      	ldr	r2, [r7, #12]
 800a558:	68d2      	ldr	r2, [r2, #12]
 800a55a:	8013      	strh	r3, [r2, #0]
        break;
 800a55c:	e00b      	b.n	800a576 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 800a55e:	4b08      	ldr	r3, [pc, #32]	; (800a580 <lwip_netconn_do_getaddr+0x100>)
 800a560:	f240 727d 	movw	r2, #1917	; 0x77d
 800a564:	4907      	ldr	r1, [pc, #28]	; (800a584 <lwip_netconn_do_getaddr+0x104>)
 800a566:	4808      	ldr	r0, [pc, #32]	; (800a588 <lwip_netconn_do_getaddr+0x108>)
 800a568:	f00c fd4a 	bl	8017000 <iprintf>
        break;
 800a56c:	e003      	b.n	800a576 <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	22f5      	movs	r2, #245	; 0xf5
 800a572:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a574:	bf00      	nop
 800a576:	bf00      	nop
 800a578:	3710      	adds	r7, #16
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
 800a57e:	bf00      	nop
 800a580:	080188b0 	.word	0x080188b0
 800a584:	08018df0 	.word	0x08018df0
 800a588:	080188f4 	.word	0x080188f4

0800a58c <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b084      	sub	sp, #16
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	785b      	ldrb	r3, [r3, #1]
 800a59e:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d069      	beq.n	800a67e <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800a5b4:	2b10      	cmp	r3, #16
 800a5b6:	d162      	bne.n	800a67e <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a5bc:	2b03      	cmp	r3, #3
 800a5be:	d002      	beq.n	800a5c6 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a5c0:	7afb      	ldrb	r3, [r7, #11]
 800a5c2:	2b02      	cmp	r3, #2
 800a5c4:	d05b      	beq.n	800a67e <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800a5c6:	7afb      	ldrb	r3, [r7, #11]
 800a5c8:	2b03      	cmp	r3, #3
 800a5ca:	d103      	bne.n	800a5d4 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	22f5      	movs	r2, #245	; 0xf5
 800a5d0:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a5d2:	e059      	b.n	800a688 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800a5d4:	7afb      	ldrb	r3, [r7, #11]
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	d103      	bne.n	800a5e2 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	22fb      	movs	r2, #251	; 0xfb
 800a5de:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a5e0:	e052      	b.n	800a688 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	7a1b      	ldrb	r3, [r3, #8]
 800a5e6:	f003 0301 	and.w	r3, r3, #1
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d004      	beq.n	800a5f8 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f7ff f964 	bl	80098c0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	6a1b      	ldr	r3, [r3, #32]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d006      	beq.n	800a610 <lwip_netconn_do_close+0x84>
 800a602:	4b23      	ldr	r3, [pc, #140]	; (800a690 <lwip_netconn_do_close+0x104>)
 800a604:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800a608:	4922      	ldr	r1, [pc, #136]	; (800a694 <lwip_netconn_do_close+0x108>)
 800a60a:	4823      	ldr	r0, [pc, #140]	; (800a698 <lwip_netconn_do_close+0x10c>)
 800a60c:	f00c fcf8 	bl	8017000 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	2204      	movs	r2, #4
 800a616:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	68fa      	ldr	r2, [r7, #12]
 800a61e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	2100      	movs	r1, #0
 800a626:	4618      	mov	r0, r3
 800a628:	f7ff f9c8 	bl	80099bc <lwip_netconn_do_close_internal>
 800a62c:	4603      	mov	r3, r0
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d029      	beq.n	800a686 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	785b      	ldrb	r3, [r3, #1]
 800a638:	2b04      	cmp	r3, #4
 800a63a:	d006      	beq.n	800a64a <lwip_netconn_do_close+0xbe>
 800a63c:	4b14      	ldr	r3, [pc, #80]	; (800a690 <lwip_netconn_do_close+0x104>)
 800a63e:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800a642:	4916      	ldr	r1, [pc, #88]	; (800a69c <lwip_netconn_do_close+0x110>)
 800a644:	4814      	ldr	r0, [pc, #80]	; (800a698 <lwip_netconn_do_close+0x10c>)
 800a646:	f00c fcdb 	bl	8017000 <iprintf>
        UNLOCK_TCPIP_CORE();
 800a64a:	4815      	ldr	r0, [pc, #84]	; (800a6a0 <lwip_netconn_do_close+0x114>)
 800a64c:	f00c fc23 	bl	8016e96 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	330c      	adds	r3, #12
 800a656:	2100      	movs	r1, #0
 800a658:	4618      	mov	r0, r3
 800a65a:	f00c fb7a 	bl	8016d52 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800a65e:	4810      	ldr	r0, [pc, #64]	; (800a6a0 <lwip_netconn_do_close+0x114>)
 800a660:	f00c fc0a 	bl	8016e78 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	785b      	ldrb	r3, [r3, #1]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d00b      	beq.n	800a686 <lwip_netconn_do_close+0xfa>
 800a66e:	4b08      	ldr	r3, [pc, #32]	; (800a690 <lwip_netconn_do_close+0x104>)
 800a670:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800a674:	4909      	ldr	r1, [pc, #36]	; (800a69c <lwip_netconn_do_close+0x110>)
 800a676:	4808      	ldr	r0, [pc, #32]	; (800a698 <lwip_netconn_do_close+0x10c>)
 800a678:	f00c fcc2 	bl	8017000 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800a67c:	e003      	b.n	800a686 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	22f5      	movs	r2, #245	; 0xf5
 800a682:	711a      	strb	r2, [r3, #4]
 800a684:	e000      	b.n	800a688 <lwip_netconn_do_close+0xfc>
      return;
 800a686:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a688:	3710      	adds	r7, #16
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}
 800a68e:	bf00      	nop
 800a690:	080188b0 	.word	0x080188b0
 800a694:	08018c54 	.word	0x08018c54
 800a698:	080188f4 	.word	0x080188f4
 800a69c:	08018c70 	.word	0x08018c70
 800a6a0:	2000782c 	.word	0x2000782c

0800a6a4 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b083      	sub	sp, #12
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800a6ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	dc04      	bgt.n	800a6c0 <err_to_errno+0x1c>
 800a6b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6ba:	f113 0f10 	cmn.w	r3, #16
 800a6be:	da01      	bge.n	800a6c4 <err_to_errno+0x20>
    return EIO;
 800a6c0:	2305      	movs	r3, #5
 800a6c2:	e005      	b.n	800a6d0 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800a6c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6c8:	425b      	negs	r3, r3
 800a6ca:	4a04      	ldr	r2, [pc, #16]	; (800a6dc <err_to_errno+0x38>)
 800a6cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	370c      	adds	r7, #12
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr
 800a6dc:	0801be84 	.word	0x0801be84

0800a6e0 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b082      	sub	sp, #8
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d013      	beq.n	800a716 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d00b      	beq.n	800a70e <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f002 fd6c 	bl	800d1d8 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2200      	movs	r2, #0
 800a704:	605a      	str	r2, [r3, #4]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	685a      	ldr	r2, [r3, #4]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800a70e:	6879      	ldr	r1, [r7, #4]
 800a710:	2006      	movs	r0, #6
 800a712:	f001 fe8b 	bl	800c42c <memp_free>
  }
}
 800a716:	bf00      	nop
 800a718:	3708      	adds	r7, #8
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}
	...

0800a720 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b082      	sub	sp, #8
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d106      	bne.n	800a73c <netbuf_free+0x1c>
 800a72e:	4b0d      	ldr	r3, [pc, #52]	; (800a764 <netbuf_free+0x44>)
 800a730:	2281      	movs	r2, #129	; 0x81
 800a732:	490d      	ldr	r1, [pc, #52]	; (800a768 <netbuf_free+0x48>)
 800a734:	480d      	ldr	r0, [pc, #52]	; (800a76c <netbuf_free+0x4c>)
 800a736:	f00c fc63 	bl	8017000 <iprintf>
 800a73a:	e00f      	b.n	800a75c <netbuf_free+0x3c>
  if (buf->p != NULL) {
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d004      	beq.n	800a74e <netbuf_free+0x2e>
    pbuf_free(buf->p);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4618      	mov	r0, r3
 800a74a:	f002 fd45 	bl	800d1d8 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2200      	movs	r2, #0
 800a752:	605a      	str	r2, [r3, #4]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	685a      	ldr	r2, [r3, #4]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 800a75c:	3708      	adds	r7, #8
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}
 800a762:	bf00      	nop
 800a764:	08018e08 	.word	0x08018e08
 800a768:	08018ea4 	.word	0x08018ea4
 800a76c:	08018e58 	.word	0x08018e58

0800a770 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b084      	sub	sp, #16
 800a774:	af00      	add	r7, sp, #0
 800a776:	60f8      	str	r0, [r7, #12]
 800a778:	60b9      	str	r1, [r7, #8]
 800a77a:	4613      	mov	r3, r2
 800a77c:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d108      	bne.n	800a796 <netbuf_ref+0x26>
 800a784:	4b1c      	ldr	r3, [pc, #112]	; (800a7f8 <netbuf_ref+0x88>)
 800a786:	2299      	movs	r2, #153	; 0x99
 800a788:	491c      	ldr	r1, [pc, #112]	; (800a7fc <netbuf_ref+0x8c>)
 800a78a:	481d      	ldr	r0, [pc, #116]	; (800a800 <netbuf_ref+0x90>)
 800a78c:	f00c fc38 	bl	8017000 <iprintf>
 800a790:	f06f 030f 	mvn.w	r3, #15
 800a794:	e02b      	b.n	800a7ee <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d004      	beq.n	800a7a8 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f002 fd18 	bl	800d1d8 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800a7a8:	2241      	movs	r2, #65	; 0x41
 800a7aa:	2100      	movs	r1, #0
 800a7ac:	2036      	movs	r0, #54	; 0x36
 800a7ae:	f002 f9fd 	bl	800cbac <pbuf_alloc>
 800a7b2:	4602      	mov	r2, r0
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d105      	bne.n	800a7cc <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800a7c6:	f04f 33ff 	mov.w	r3, #4294967295
 800a7ca:	e010      	b.n	800a7ee <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	68ba      	ldr	r2, [r7, #8]
 800a7d2:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	88fa      	ldrh	r2, [r7, #6]
 800a7da:	811a      	strh	r2, [r3, #8]
 800a7dc:	68fa      	ldr	r2, [r7, #12]
 800a7de:	6812      	ldr	r2, [r2, #0]
 800a7e0:	891b      	ldrh	r3, [r3, #8]
 800a7e2:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681a      	ldr	r2, [r3, #0]
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800a7ec:	2300      	movs	r3, #0
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3710      	adds	r7, #16
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	08018e08 	.word	0x08018e08
 800a7fc:	08018ec0 	.word	0x08018ec0
 800a800:	08018e58 	.word	0x08018e58

0800a804 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800a804:	b480      	push	{r7}
 800a806:	b085      	sub	sp, #20
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	2b00      	cmp	r3, #0
 800a814:	db02      	blt.n	800a81c <tryget_socket_unconn_nouse+0x18>
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2b03      	cmp	r3, #3
 800a81a:	dd01      	ble.n	800a820 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800a81c:	2300      	movs	r3, #0
 800a81e:	e003      	b.n	800a828 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	011b      	lsls	r3, r3, #4
 800a824:	4a03      	ldr	r2, [pc, #12]	; (800a834 <tryget_socket_unconn_nouse+0x30>)
 800a826:	4413      	add	r3, r2
}
 800a828:	4618      	mov	r0, r3
 800a82a:	3714      	adds	r7, #20
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr
 800a834:	200077dc 	.word	0x200077dc

0800a838 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b084      	sub	sp, #16
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f7ff ffdf 	bl	800a804 <tryget_socket_unconn_nouse>
 800a846:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800a848:	68fb      	ldr	r3, [r7, #12]
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3710      	adds	r7, #16
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}

0800a852 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800a852:	b580      	push	{r7, lr}
 800a854:	b084      	sub	sp, #16
 800a856:	af00      	add	r7, sp, #0
 800a858:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f7ff ffec 	bl	800a838 <tryget_socket_unconn>
 800a860:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d005      	beq.n	800a874 <tryget_socket+0x22>
    if (sock->conn) {
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d001      	beq.n	800a874 <tryget_socket+0x22>
      return sock;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	e000      	b.n	800a876 <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800a874:	2300      	movs	r3, #0
}
 800a876:	4618      	mov	r0, r3
 800a878:	3710      	adds	r7, #16
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}
	...

0800a880 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b084      	sub	sp, #16
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f7ff ffe2 	bl	800a852 <tryget_socket>
 800a88e:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d104      	bne.n	800a8a0 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800a896:	4b05      	ldr	r3, [pc, #20]	; (800a8ac <get_socket+0x2c>)
 800a898:	2209      	movs	r2, #9
 800a89a:	601a      	str	r2, [r3, #0]
    return NULL;
 800a89c:	2300      	movs	r3, #0
 800a89e:	e000      	b.n	800a8a2 <get_socket+0x22>
  }
  return sock;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3710      	adds	r7, #16
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}
 800a8aa:	bf00      	nop
 800a8ac:	2000d2a0 	.word	0x2000d2a0

0800a8b0 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b084      	sub	sp, #16
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	60fb      	str	r3, [r7, #12]
 800a8be:	e052      	b.n	800a966 <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800a8c0:	f00c fb1c 	bl	8016efc <sys_arch_protect>
 800a8c4:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800a8c6:	4a2c      	ldr	r2, [pc, #176]	; (800a978 <alloc_socket+0xc8>)
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	011b      	lsls	r3, r3, #4
 800a8cc:	4413      	add	r3, r2
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d142      	bne.n	800a95a <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800a8d4:	4a28      	ldr	r2, [pc, #160]	; (800a978 <alloc_socket+0xc8>)
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	011b      	lsls	r3, r3, #4
 800a8da:	4413      	add	r3, r2
 800a8dc:	687a      	ldr	r2, [r7, #4]
 800a8de:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800a8e0:	68b8      	ldr	r0, [r7, #8]
 800a8e2:	f00c fb19 	bl	8016f18 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800a8e6:	4a24      	ldr	r2, [pc, #144]	; (800a978 <alloc_socket+0xc8>)
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	011b      	lsls	r3, r3, #4
 800a8ec:	4413      	add	r3, r2
 800a8ee:	3304      	adds	r3, #4
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800a8f4:	4a20      	ldr	r2, [pc, #128]	; (800a978 <alloc_socket+0xc8>)
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	011b      	lsls	r3, r3, #4
 800a8fa:	4413      	add	r3, r2
 800a8fc:	330e      	adds	r3, #14
 800a8fe:	781b      	ldrb	r3, [r3, #0]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d006      	beq.n	800a912 <alloc_socket+0x62>
 800a904:	4b1d      	ldr	r3, [pc, #116]	; (800a97c <alloc_socket+0xcc>)
 800a906:	f240 220e 	movw	r2, #526	; 0x20e
 800a90a:	491d      	ldr	r1, [pc, #116]	; (800a980 <alloc_socket+0xd0>)
 800a90c:	481d      	ldr	r0, [pc, #116]	; (800a984 <alloc_socket+0xd4>)
 800a90e:	f00c fb77 	bl	8017000 <iprintf>
      sockets[i].rcvevent   = 0;
 800a912:	4a19      	ldr	r2, [pc, #100]	; (800a978 <alloc_socket+0xc8>)
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	011b      	lsls	r3, r3, #4
 800a918:	4413      	add	r3, r2
 800a91a:	3308      	adds	r3, #8
 800a91c:	2200      	movs	r2, #0
 800a91e:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	781b      	ldrb	r3, [r3, #0]
 800a924:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a928:	2b10      	cmp	r3, #16
 800a92a:	d102      	bne.n	800a932 <alloc_socket+0x82>
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d001      	beq.n	800a936 <alloc_socket+0x86>
 800a932:	2301      	movs	r3, #1
 800a934:	e000      	b.n	800a938 <alloc_socket+0x88>
 800a936:	2300      	movs	r3, #0
 800a938:	b299      	uxth	r1, r3
 800a93a:	4a0f      	ldr	r2, [pc, #60]	; (800a978 <alloc_socket+0xc8>)
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	011b      	lsls	r3, r3, #4
 800a940:	4413      	add	r3, r2
 800a942:	330a      	adds	r3, #10
 800a944:	460a      	mov	r2, r1
 800a946:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800a948:	4a0b      	ldr	r2, [pc, #44]	; (800a978 <alloc_socket+0xc8>)
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	011b      	lsls	r3, r3, #4
 800a94e:	4413      	add	r3, r2
 800a950:	330c      	adds	r3, #12
 800a952:	2200      	movs	r2, #0
 800a954:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	e00a      	b.n	800a970 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800a95a:	68b8      	ldr	r0, [r7, #8]
 800a95c:	f00c fadc 	bl	8016f18 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	3301      	adds	r3, #1
 800a964:	60fb      	str	r3, [r7, #12]
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2b03      	cmp	r3, #3
 800a96a:	dda9      	ble.n	800a8c0 <alloc_socket+0x10>
  }
  return -1;
 800a96c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a970:	4618      	mov	r0, r3
 800a972:	3710      	adds	r7, #16
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}
 800a978:	200077dc 	.word	0x200077dc
 800a97c:	08018fa0 	.word	0x08018fa0
 800a980:	08018fd4 	.word	0x08018fd4
 800a984:	08018ff4 	.word	0x08018ff4

0800a988 <lwip_bind>:
  return newsock;
}

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b08a      	sub	sp, #40	; 0x28
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	60f8      	str	r0, [r7, #12]
 800a990:	60b9      	str	r1, [r7, #8]
 800a992:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 800a994:	68f8      	ldr	r0, [r7, #12]
 800a996:	f7ff ff73 	bl	800a880 <get_socket>
 800a99a:	6278      	str	r0, [r7, #36]	; 0x24
  if (!sock) {
 800a99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d102      	bne.n	800a9a8 <lwip_bind+0x20>
    return -1;
 800a9a2:	f04f 33ff 	mov.w	r3, #4294967295
 800a9a6:	e051      	b.n	800aa4c <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2b10      	cmp	r3, #16
 800a9ac:	d108      	bne.n	800a9c0 <lwip_bind+0x38>
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	785b      	ldrb	r3, [r3, #1]
 800a9b2:	2b02      	cmp	r3, #2
 800a9b4:	d104      	bne.n	800a9c0 <lwip_bind+0x38>
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	f003 0303 	and.w	r3, r3, #3
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d014      	beq.n	800a9ea <lwip_bind+0x62>
 800a9c0:	4b24      	ldr	r3, [pc, #144]	; (800aa54 <lwip_bind+0xcc>)
 800a9c2:	f240 22e2 	movw	r2, #738	; 0x2e2
 800a9c6:	4924      	ldr	r1, [pc, #144]	; (800aa58 <lwip_bind+0xd0>)
 800a9c8:	4824      	ldr	r0, [pc, #144]	; (800aa5c <lwip_bind+0xd4>)
 800a9ca:	f00c fb19 	bl	8017000 <iprintf>
 800a9ce:	f06f 000f 	mvn.w	r0, #15
 800a9d2:	f7ff fe67 	bl	800a6a4 <err_to_errno>
 800a9d6:	6178      	str	r0, [r7, #20]
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d002      	beq.n	800a9e4 <lwip_bind+0x5c>
 800a9de:	4a20      	ldr	r2, [pc, #128]	; (800aa60 <lwip_bind+0xd8>)
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	6013      	str	r3, [r2, #0]
 800a9e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a9e8:	e030      	b.n	800aa4c <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	613b      	str	r3, [r7, #16]
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	885b      	ldrh	r3, [r3, #2]
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f001 f811 	bl	800ba1c <lwip_htons>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	847b      	strh	r3, [r7, #34]	; 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 800a9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800aa04:	f107 0110 	add.w	r1, r7, #16
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f7fd ff71 	bl	80088f0 <netconn_bind>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  if (err != ERR_OK) {
 800aa14:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d00e      	beq.n	800aa3a <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800aa1c:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800aa20:	4618      	mov	r0, r3
 800aa22:	f7ff fe3f 	bl	800a6a4 <err_to_errno>
 800aa26:	61b8      	str	r0, [r7, #24]
 800aa28:	69bb      	ldr	r3, [r7, #24]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d002      	beq.n	800aa34 <lwip_bind+0xac>
 800aa2e:	4a0c      	ldr	r2, [pc, #48]	; (800aa60 <lwip_bind+0xd8>)
 800aa30:	69bb      	ldr	r3, [r7, #24]
 800aa32:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800aa34:	f04f 33ff 	mov.w	r3, #4294967295
 800aa38:	e008      	b.n	800aa4c <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	61fb      	str	r3, [r7, #28]
 800aa3e:	69fb      	ldr	r3, [r7, #28]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d002      	beq.n	800aa4a <lwip_bind+0xc2>
 800aa44:	4a06      	ldr	r2, [pc, #24]	; (800aa60 <lwip_bind+0xd8>)
 800aa46:	69fb      	ldr	r3, [r7, #28]
 800aa48:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800aa4a:	2300      	movs	r3, #0
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3728      	adds	r7, #40	; 0x28
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}
 800aa54:	08018fa0 	.word	0x08018fa0
 800aa58:	08019044 	.word	0x08019044
 800aa5c:	08018ff4 	.word	0x08018ff4
 800aa60:	2000d2a0 	.word	0x2000d2a0

0800aa64 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b08c      	sub	sp, #48	; 0x30
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	60f8      	str	r0, [r7, #12]
 800aa6c:	60b9      	str	r1, [r7, #8]
 800aa6e:	607a      	str	r2, [r7, #4]
 800aa70:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 800aa72:	2308      	movs	r3, #8
 800aa74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  ssize_t recvd = 0;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	62bb      	str	r3, [r7, #40]	; 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	db01      	blt.n	800aa86 <lwip_recv_tcp+0x22>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	e001      	b.n	800aa8a <lwip_recv_tcp+0x26>
 800aa86:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800aa8a:	627b      	str	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d106      	bne.n	800aaa0 <lwip_recv_tcp+0x3c>
 800aa92:	4b74      	ldr	r3, [pc, #464]	; (800ac64 <lwip_recv_tcp+0x200>)
 800aa94:	f240 329e 	movw	r2, #926	; 0x39e
 800aa98:	4973      	ldr	r1, [pc, #460]	; (800ac68 <lwip_recv_tcp+0x204>)
 800aa9a:	4874      	ldr	r0, [pc, #464]	; (800ac6c <lwip_recv_tcp+0x208>)
 800aa9c:	f00c fab0 	bl	8017000 <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aaaa:	2b10      	cmp	r3, #16
 800aaac:	d006      	beq.n	800aabc <lwip_recv_tcp+0x58>
 800aaae:	4b6d      	ldr	r3, [pc, #436]	; (800ac64 <lwip_recv_tcp+0x200>)
 800aab0:	f240 329f 	movw	r2, #927	; 0x39f
 800aab4:	496e      	ldr	r1, [pc, #440]	; (800ac70 <lwip_recv_tcp+0x20c>)
 800aab6:	486d      	ldr	r0, [pc, #436]	; (800ac6c <lwip_recv_tcp+0x208>)
 800aab8:	f00c faa2 	bl	8017000 <iprintf>

  if (flags & MSG_DONTWAIT) {
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	f003 0308 	and.w	r3, r3, #8
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d005      	beq.n	800aad2 <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 800aac6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aaca:	f043 0304 	orr.w	r3, r3, #4
 800aace:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	685b      	ldr	r3, [r3, #4]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d003      	beq.n	800aae2 <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	685b      	ldr	r3, [r3, #4]
 800aade:	617b      	str	r3, [r7, #20]
 800aae0:	e036      	b.n	800ab50 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800aaea:	f107 0114 	add.w	r1, r7, #20
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f7fe f8e0 	bl	8008cb4 <netconn_recv_tcp_pbuf_flags>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 800aafa:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d019      	beq.n	800ab36 <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 800ab02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	f300 808d 	bgt.w	800ac24 <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 800ab0a:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f7ff fdc8 	bl	800a6a4 <err_to_errno>
 800ab14:	61f8      	str	r0, [r7, #28]
 800ab16:	69fb      	ldr	r3, [r7, #28]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d002      	beq.n	800ab22 <lwip_recv_tcp+0xbe>
 800ab1c:	4a55      	ldr	r2, [pc, #340]	; (800ac74 <lwip_recv_tcp+0x210>)
 800ab1e:	69fb      	ldr	r3, [r7, #28]
 800ab20:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 800ab22:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800ab26:	f113 0f0f 	cmn.w	r3, #15
 800ab2a:	d101      	bne.n	800ab30 <lwip_recv_tcp+0xcc>
          return 0;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	e094      	b.n	800ac5a <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 800ab30:	f04f 33ff 	mov.w	r3, #4294967295
 800ab34:	e091      	b.n	800ac5a <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d106      	bne.n	800ab4a <lwip_recv_tcp+0xe6>
 800ab3c:	4b49      	ldr	r3, [pc, #292]	; (800ac64 <lwip_recv_tcp+0x200>)
 800ab3e:	f240 32c5 	movw	r2, #965	; 0x3c5
 800ab42:	494d      	ldr	r1, [pc, #308]	; (800ac78 <lwip_recv_tcp+0x214>)
 800ab44:	4849      	ldr	r0, [pc, #292]	; (800ac6c <lwip_recv_tcp+0x208>)
 800ab46:	f00c fa5b 	bl	8017000 <iprintf>
      sock->lastdata.pbuf = p;
 800ab4a:	697a      	ldr	r2, [r7, #20]
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	891b      	ldrh	r3, [r3, #8]
 800ab54:	461a      	mov	r2, r3
 800ab56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	dd03      	ble.n	800ab64 <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	891b      	ldrh	r3, [r3, #8]
 800ab60:	847b      	strh	r3, [r7, #34]	; 0x22
 800ab62:	e001      	b.n	800ab68 <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 800ab64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab66:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    if (recvd + copylen < recvd) {
 800ab68:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ab6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab6c:	4413      	add	r3, r2
 800ab6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab70:	429a      	cmp	r2, r3
 800ab72:	dd03      	ble.n	800ab7c <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 800ab74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	43db      	mvns	r3, r3
 800ab7a:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 800ab7c:	6978      	ldr	r0, [r7, #20]
 800ab7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab80:	68ba      	ldr	r2, [r7, #8]
 800ab82:	18d1      	adds	r1, r2, r3
 800ab84:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ab86:	2300      	movs	r3, #0
 800ab88:	f002 fd2c 	bl	800d5e4 <pbuf_copy_partial>

    recvd += copylen;
 800ab8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ab8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab90:	4413      	add	r3, r2
 800ab92:	62bb      	str	r3, [r7, #40]	; 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 800ab94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ab96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	da06      	bge.n	800abaa <lwip_recv_tcp+0x146>
 800ab9c:	4b31      	ldr	r3, [pc, #196]	; (800ac64 <lwip_recv_tcp+0x200>)
 800ab9e:	f240 32dd 	movw	r2, #989	; 0x3dd
 800aba2:	4936      	ldr	r1, [pc, #216]	; (800ac7c <lwip_recv_tcp+0x218>)
 800aba4:	4831      	ldr	r0, [pc, #196]	; (800ac6c <lwip_recv_tcp+0x208>)
 800aba6:	f00c fa2b 	bl	8017000 <iprintf>
    recv_left -= copylen;
 800abaa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800abac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abae:	1ad3      	subs	r3, r2, r3
 800abb0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	f003 0301 	and.w	r3, r3, #1
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d123      	bne.n	800ac04 <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	891b      	ldrh	r3, [r3, #8]
 800abc0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d906      	bls.n	800abd4 <lwip_recv_tcp+0x170>
 800abc6:	4b27      	ldr	r3, [pc, #156]	; (800ac64 <lwip_recv_tcp+0x200>)
 800abc8:	f240 32e3 	movw	r2, #995	; 0x3e3
 800abcc:	492c      	ldr	r1, [pc, #176]	; (800ac80 <lwip_recv_tcp+0x21c>)
 800abce:	4827      	ldr	r0, [pc, #156]	; (800ac6c <lwip_recv_tcp+0x208>)
 800abd0:	f00c fa16 	bl	8017000 <iprintf>
      if (p->tot_len - copylen > 0) {
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	891b      	ldrh	r3, [r3, #8]
 800abd8:	461a      	mov	r2, r3
 800abda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800abdc:	1ad3      	subs	r3, r2, r3
 800abde:	2b00      	cmp	r3, #0
 800abe0:	dd09      	ble.n	800abf6 <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800abe6:	4611      	mov	r1, r2
 800abe8:	4618      	mov	r0, r3
 800abea:	f002 fac2 	bl	800d172 <pbuf_free_header>
 800abee:	4602      	mov	r2, r0
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	605a      	str	r2, [r3, #4]
 800abf4:	e006      	b.n	800ac04 <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2200      	movs	r2, #0
 800abfa:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	4618      	mov	r0, r3
 800ac00:	f002 faea 	bl	800d1d8 <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 800ac04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac08:	f043 0314 	orr.w	r3, r3, #20
 800ac0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 800ac10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	dd08      	ble.n	800ac28 <lwip_recv_tcp+0x1c4>
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	f003 0301 	and.w	r3, r3, #1
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	f43f af58 	beq.w	800aad2 <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 800ac22:	e001      	b.n	800ac28 <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 800ac24:	bf00      	nop
 800ac26:	e000      	b.n	800ac2a <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 800ac28:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 800ac2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	dd0b      	ble.n	800ac48 <lwip_recv_tcp+0x1e4>
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	f003 0301 	and.w	r3, r3, #1
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d106      	bne.n	800ac48 <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac40:	4611      	mov	r1, r2
 800ac42:	4618      	mov	r0, r3
 800ac44:	f7fd ff84 	bl	8008b50 <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 800ac48:	2300      	movs	r3, #0
 800ac4a:	61bb      	str	r3, [r7, #24]
 800ac4c:	69bb      	ldr	r3, [r7, #24]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d002      	beq.n	800ac58 <lwip_recv_tcp+0x1f4>
 800ac52:	4a08      	ldr	r2, [pc, #32]	; (800ac74 <lwip_recv_tcp+0x210>)
 800ac54:	69bb      	ldr	r3, [r7, #24]
 800ac56:	6013      	str	r3, [r2, #0]
  return recvd;
 800ac58:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3730      	adds	r7, #48	; 0x30
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}
 800ac62:	bf00      	nop
 800ac64:	08018fa0 	.word	0x08018fa0
 800ac68:	08019098 	.word	0x08019098
 800ac6c:	08018ff4 	.word	0x08018ff4
 800ac70:	080190a8 	.word	0x080190a8
 800ac74:	2000d2a0 	.word	0x2000d2a0
 800ac78:	080190cc 	.word	0x080190cc
 800ac7c:	080190d8 	.word	0x080190d8
 800ac80:	08019100 	.word	0x08019100

0800ac84 <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 800ac84:	b590      	push	{r4, r7, lr}
 800ac86:	b08b      	sub	sp, #44	; 0x2c
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	60f8      	str	r0, [r7, #12]
 800ac8c:	60b9      	str	r1, [r7, #8]
 800ac8e:	603b      	str	r3, [r7, #0]
 800ac90:	4613      	mov	r3, r2
 800ac92:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 800ac94:	2300      	movs	r3, #0
 800ac96:	627b      	str	r3, [r7, #36]	; 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d106      	bne.n	800acac <lwip_sock_make_addr+0x28>
 800ac9e:	4b2b      	ldr	r3, [pc, #172]	; (800ad4c <lwip_sock_make_addr+0xc8>)
 800aca0:	f240 4207 	movw	r2, #1031	; 0x407
 800aca4:	492a      	ldr	r1, [pc, #168]	; (800ad50 <lwip_sock_make_addr+0xcc>)
 800aca6:	482b      	ldr	r0, [pc, #172]	; (800ad54 <lwip_sock_make_addr+0xd0>)
 800aca8:	f00c f9aa 	bl	8017000 <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d106      	bne.n	800acc0 <lwip_sock_make_addr+0x3c>
 800acb2:	4b26      	ldr	r3, [pc, #152]	; (800ad4c <lwip_sock_make_addr+0xc8>)
 800acb4:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800acb8:	4927      	ldr	r1, [pc, #156]	; (800ad58 <lwip_sock_make_addr+0xd4>)
 800acba:	4826      	ldr	r0, [pc, #152]	; (800ad54 <lwip_sock_make_addr+0xd0>)
 800acbc:	f00c f9a0 	bl	8017000 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 800acc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d106      	bne.n	800acd4 <lwip_sock_make_addr+0x50>
 800acc6:	4b21      	ldr	r3, [pc, #132]	; (800ad4c <lwip_sock_make_addr+0xc8>)
 800acc8:	f240 4209 	movw	r2, #1033	; 0x409
 800accc:	4923      	ldr	r1, [pc, #140]	; (800ad5c <lwip_sock_make_addr+0xd8>)
 800acce:	4821      	ldr	r0, [pc, #132]	; (800ad54 <lwip_sock_make_addr+0xd0>)
 800acd0:	f00c f996 	bl	8017000 <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800acd4:	f107 0314 	add.w	r3, r7, #20
 800acd8:	2210      	movs	r2, #16
 800acda:	701a      	strb	r2, [r3, #0]
 800acdc:	f107 0314 	add.w	r3, r7, #20
 800ace0:	2202      	movs	r2, #2
 800ace2:	705a      	strb	r2, [r3, #1]
 800ace4:	f107 0414 	add.w	r4, r7, #20
 800ace8:	88fb      	ldrh	r3, [r7, #6]
 800acea:	4618      	mov	r0, r3
 800acec:	f000 fe96 	bl	800ba1c <lwip_htons>
 800acf0:	4603      	mov	r3, r0
 800acf2:	8063      	strh	r3, [r4, #2]
 800acf4:	f107 0314 	add.w	r3, r7, #20
 800acf8:	68ba      	ldr	r2, [r7, #8]
 800acfa:	6812      	ldr	r2, [r2, #0]
 800acfc:	605a      	str	r2, [r3, #4]
 800acfe:	f107 0314 	add.w	r3, r7, #20
 800ad02:	3308      	adds	r3, #8
 800ad04:	2208      	movs	r2, #8
 800ad06:	2100      	movs	r1, #0
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f00c f971 	bl	8016ff0 <memset>
  if (*fromlen < saddr.sa.sa_len) {
 800ad0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	7d3a      	ldrb	r2, [r7, #20]
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d202      	bcs.n	800ad1e <lwip_sock_make_addr+0x9a>
    truncated = 1;
 800ad18:	2301      	movs	r3, #1
 800ad1a:	627b      	str	r3, [r7, #36]	; 0x24
 800ad1c:	e008      	b.n	800ad30 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 800ad1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	7d3a      	ldrb	r2, [r7, #20]
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d903      	bls.n	800ad30 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 800ad28:	7d3b      	ldrb	r3, [r7, #20]
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad2e:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 800ad30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad32:	681a      	ldr	r2, [r3, #0]
 800ad34:	f107 0314 	add.w	r3, r7, #20
 800ad38:	4619      	mov	r1, r3
 800ad3a:	6838      	ldr	r0, [r7, #0]
 800ad3c:	f00c f930 	bl	8016fa0 <memcpy>
  return truncated;
 800ad40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	372c      	adds	r7, #44	; 0x2c
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd90      	pop	{r4, r7, pc}
 800ad4a:	bf00      	nop
 800ad4c:	08018fa0 	.word	0x08018fa0
 800ad50:	08019110 	.word	0x08019110
 800ad54:	08018ff4 	.word	0x08018ff4
 800ad58:	08019124 	.word	0x08019124
 800ad5c:	08019134 	.word	0x08019134

0800ad60 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b088      	sub	sp, #32
 800ad64:	af02      	add	r7, sp, #8
 800ad66:	60f8      	str	r0, [r7, #12]
 800ad68:	60b9      	str	r1, [r7, #8]
 800ad6a:	607a      	str	r2, [r7, #4]
 800ad6c:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d101      	bne.n	800ad78 <lwip_recv_tcp_from+0x18>
    return 0;
 800ad74:	2300      	movs	r3, #0
 800ad76:	e021      	b.n	800adbc <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d01d      	beq.n	800adba <lwip_recv_tcp_from+0x5a>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d01a      	beq.n	800adba <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	6818      	ldr	r0, [r3, #0]
 800ad88:	f107 0216 	add.w	r2, r7, #22
 800ad8c:	f107 0110 	add.w	r1, r7, #16
 800ad90:	2300      	movs	r3, #0
 800ad92:	f7fd fd5b 	bl	800884c <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d00e      	beq.n	800adba <lwip_recv_tcp_from+0x5a>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d00b      	beq.n	800adba <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	6818      	ldr	r0, [r3, #0]
 800ada6:	8afa      	ldrh	r2, [r7, #22]
 800ada8:	f107 0110 	add.w	r1, r7, #16
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	9300      	str	r3, [sp, #0]
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	f7ff ff67 	bl	800ac84 <lwip_sock_make_addr>
 800adb6:	4603      	mov	r3, r0
 800adb8:	e000      	b.n	800adbc <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 800adba:	2300      	movs	r3, #0
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	3718      	adds	r7, #24
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}

0800adc4 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 800adc4:	b590      	push	{r4, r7, lr}
 800adc6:	b08d      	sub	sp, #52	; 0x34
 800adc8:	af02      	add	r7, sp, #8
 800adca:	60f8      	str	r0, [r7, #12]
 800adcc:	60b9      	str	r1, [r7, #8]
 800adce:	607a      	str	r2, [r7, #4]
 800add0:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	689b      	ldr	r3, [r3, #8]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d10d      	bne.n	800adf6 <lwip_recvfrom_udp_raw+0x32>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	68db      	ldr	r3, [r3, #12]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	dd09      	ble.n	800adf6 <lwip_recvfrom_udp_raw+0x32>
 800ade2:	4b5e      	ldr	r3, [pc, #376]	; (800af5c <lwip_recvfrom_udp_raw+0x198>)
 800ade4:	f240 4249 	movw	r2, #1097	; 0x449
 800ade8:	495d      	ldr	r1, [pc, #372]	; (800af60 <lwip_recvfrom_udp_raw+0x19c>)
 800adea:	485e      	ldr	r0, [pc, #376]	; (800af64 <lwip_recvfrom_udp_raw+0x1a0>)
 800adec:	f00c f908 	bl	8017000 <iprintf>
 800adf0:	f06f 030f 	mvn.w	r3, #15
 800adf4:	e0ad      	b.n	800af52 <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	f003 0308 	and.w	r3, r3, #8
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d003      	beq.n	800ae08 <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 800ae00:	2304      	movs	r3, #4
 800ae02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ae06:	e002      	b.n	800ae0e <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	685b      	ldr	r3, [r3, #4]
 800ae12:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d11e      	bne.n	800ae58 <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ae22:	f107 0110 	add.w	r1, r7, #16
 800ae26:	4618      	mov	r0, r3
 800ae28:	f7fd ff70 	bl	8008d0c <netconn_recv_udp_raw_netbuf_flags>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 800ae30:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d002      	beq.n	800ae3e <lwip_recvfrom_udp_raw+0x7a>
      return err;
 800ae38:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ae3c:	e089      	b.n	800af52 <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d106      	bne.n	800ae52 <lwip_recvfrom_udp_raw+0x8e>
 800ae44:	4b45      	ldr	r3, [pc, #276]	; (800af5c <lwip_recvfrom_udp_raw+0x198>)
 800ae46:	f240 425e 	movw	r2, #1118	; 0x45e
 800ae4a:	4947      	ldr	r1, [pc, #284]	; (800af68 <lwip_recvfrom_udp_raw+0x1a4>)
 800ae4c:	4845      	ldr	r0, [pc, #276]	; (800af64 <lwip_recvfrom_udp_raw+0x1a0>)
 800ae4e:	f00c f8d7 	bl	8017000 <iprintf>
    sock->lastdata.netbuf = buf;
 800ae52:	693a      	ldr	r2, [r7, #16]
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	891b      	ldrh	r3, [r3, #8]
 800ae5e:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 800ae60:	2300      	movs	r3, #0
 800ae62:	847b      	strh	r3, [r7, #34]	; 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800ae64:	2300      	movs	r3, #0
 800ae66:	61fb      	str	r3, [r7, #28]
 800ae68:	e029      	b.n	800aebe <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 800ae6a:	8b3a      	ldrh	r2, [r7, #24]
 800ae6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ae6e:	1ad3      	subs	r3, r2, r3
 800ae70:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	689a      	ldr	r2, [r3, #8]
 800ae76:	69fb      	ldr	r3, [r7, #28]
 800ae78:	00db      	lsls	r3, r3, #3
 800ae7a:	4413      	add	r3, r2
 800ae7c:	685a      	ldr	r2, [r3, #4]
 800ae7e:	8afb      	ldrh	r3, [r7, #22]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d902      	bls.n	800ae8a <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 800ae84:	8afb      	ldrh	r3, [r7, #22]
 800ae86:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ae88:	e006      	b.n	800ae98 <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	689a      	ldr	r2, [r3, #8]
 800ae8e:	69fb      	ldr	r3, [r7, #28]
 800ae90:	00db      	lsls	r3, r3, #3
 800ae92:	4413      	add	r3, r2
 800ae94:	685b      	ldr	r3, [r3, #4]
 800ae96:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	6818      	ldr	r0, [r3, #0]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	689a      	ldr	r2, [r3, #8]
 800aea0:	69fb      	ldr	r3, [r7, #28]
 800aea2:	00db      	lsls	r3, r3, #3
 800aea4:	4413      	add	r3, r2
 800aea6:	6819      	ldr	r1, [r3, #0]
 800aea8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aeaa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800aeac:	f002 fb9a 	bl	800d5e4 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 800aeb0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800aeb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aeb4:	4413      	add	r3, r2
 800aeb6:	847b      	strh	r3, [r7, #34]	; 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800aeb8:	69fb      	ldr	r3, [r7, #28]
 800aeba:	3301      	adds	r3, #1
 800aebc:	61fb      	str	r3, [r7, #28]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	68db      	ldr	r3, [r3, #12]
 800aec2:	69fa      	ldr	r2, [r7, #28]
 800aec4:	429a      	cmp	r2, r3
 800aec6:	da03      	bge.n	800aed0 <lwip_recvfrom_udp_raw+0x10c>
 800aec8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800aeca:	8b3b      	ldrh	r3, [r7, #24]
 800aecc:	429a      	cmp	r2, r3
 800aece:	d3cc      	bcc.n	800ae6a <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d01a      	beq.n	800af0e <lwip_recvfrom_udp_raw+0x14a>
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d016      	beq.n	800af0e <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d012      	beq.n	800af0e <lwip_recvfrom_udp_raw+0x14a>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	685b      	ldr	r3, [r3, #4]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d00e      	beq.n	800af0e <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	6818      	ldr	r0, [r3, #0]
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	f103 0108 	add.w	r1, r3, #8
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	3304      	adds	r3, #4
 800af06:	9300      	str	r3, [sp, #0]
 800af08:	4623      	mov	r3, r4
 800af0a:	f7ff febb 	bl	800ac84 <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2200      	movs	r2, #0
 800af12:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	691b      	ldr	r3, [r3, #16]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d007      	beq.n	800af2c <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 800af1c:	2300      	movs	r3, #0
 800af1e:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 800af20:	7d7b      	ldrb	r3, [r7, #21]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d102      	bne.n	800af2c <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2200      	movs	r2, #0
 800af2a:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	f003 0301 	and.w	r3, r3, #1
 800af32:	2b00      	cmp	r3, #0
 800af34:	d106      	bne.n	800af44 <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	2200      	movs	r2, #0
 800af3a:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	4618      	mov	r0, r3
 800af40:	f7ff fbce 	bl	800a6e0 <netbuf_delete>
  }
  if (datagram_len) {
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d002      	beq.n	800af50 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	8b3a      	ldrh	r2, [r7, #24]
 800af4e:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 800af50:	2300      	movs	r3, #0
}
 800af52:	4618      	mov	r0, r3
 800af54:	372c      	adds	r7, #44	; 0x2c
 800af56:	46bd      	mov	sp, r7
 800af58:	bd90      	pop	{r4, r7, pc}
 800af5a:	bf00      	nop
 800af5c:	08018fa0 	.word	0x08018fa0
 800af60:	08019144 	.word	0x08019144
 800af64:	08018ff4 	.word	0x08018ff4
 800af68:	08019170 	.word	0x08019170

0800af6c <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b096      	sub	sp, #88	; 0x58
 800af70:	af02      	add	r7, sp, #8
 800af72:	60f8      	str	r0, [r7, #12]
 800af74:	60b9      	str	r1, [r7, #8]
 800af76:	607a      	str	r2, [r7, #4]
 800af78:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 800af7a:	68f8      	ldr	r0, [r7, #12]
 800af7c:	f7ff fc80 	bl	800a880 <get_socket>
 800af80:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (!sock) {
 800af82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af84:	2b00      	cmp	r3, #0
 800af86:	d102      	bne.n	800af8e <lwip_recvfrom+0x22>
    return -1;
 800af88:	f04f 33ff 	mov.w	r3, #4294967295
 800af8c:	e078      	b.n	800b080 <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800af8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800af98:	2b10      	cmp	r3, #16
 800af9a:	d112      	bne.n	800afc2 <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	687a      	ldr	r2, [r7, #4]
 800afa0:	68b9      	ldr	r1, [r7, #8]
 800afa2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800afa4:	f7ff fd5e 	bl	800aa64 <lwip_recv_tcp>
 800afa8:	6478      	str	r0, [r7, #68]	; 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 800afaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800afac:	9301      	str	r3, [sp, #4]
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	9300      	str	r3, [sp, #0]
 800afb2:	4b35      	ldr	r3, [pc, #212]	; (800b088 <lwip_recvfrom+0x11c>)
 800afb4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800afb6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800afb8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800afba:	f7ff fed1 	bl	800ad60 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 800afbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800afc0:	e05e      	b.n	800b080 <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 800afc2:	2300      	movs	r3, #0
 800afc4:	877b      	strh	r3, [r7, #58]	; 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	633b      	str	r3, [r7, #48]	; 0x30
    vec.iov_len = len;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	637b      	str	r3, [r7, #52]	; 0x34
    msg.msg_control = NULL;
 800afce:	2300      	movs	r3, #0
 800afd0:	627b      	str	r3, [r7, #36]	; 0x24
    msg.msg_controllen = 0;
 800afd2:	2300      	movs	r3, #0
 800afd4:	62bb      	str	r3, [r7, #40]	; 0x28
    msg.msg_flags = 0;
 800afd6:	2300      	movs	r3, #0
 800afd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg.msg_iov = &vec;
 800afda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800afde:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 800afe0:	2301      	movs	r3, #1
 800afe2:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 800afe4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800afe6:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800afe8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800afea:	2b00      	cmp	r3, #0
 800afec:	d002      	beq.n	800aff4 <lwip_recvfrom+0x88>
 800afee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	e000      	b.n	800aff6 <lwip_recvfrom+0x8a>
 800aff4:	2300      	movs	r3, #0
 800aff6:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800aff8:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 800affc:	f107 0214 	add.w	r2, r7, #20
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	9300      	str	r3, [sp, #0]
 800b004:	460b      	mov	r3, r1
 800b006:	6839      	ldr	r1, [r7, #0]
 800b008:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b00a:	f7ff fedb 	bl	800adc4 <lwip_recvfrom_udp_raw>
 800b00e:	4603      	mov	r3, r0
 800b010:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (err != ERR_OK) {
 800b014:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d00e      	beq.n	800b03a <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 800b01c:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800b020:	4618      	mov	r0, r3
 800b022:	f7ff fb3f 	bl	800a6a4 <err_to_errno>
 800b026:	63f8      	str	r0, [r7, #60]	; 0x3c
 800b028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d002      	beq.n	800b034 <lwip_recvfrom+0xc8>
 800b02e:	4a17      	ldr	r2, [pc, #92]	; (800b08c <lwip_recvfrom+0x120>)
 800b030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b032:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800b034:	f04f 33ff 	mov.w	r3, #4294967295
 800b038:	e022      	b.n	800b080 <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800b03a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b03c:	461a      	mov	r2, r3
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	4293      	cmp	r3, r2
 800b042:	bf28      	it	cs
 800b044:	4613      	movcs	r3, r2
 800b046:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d206      	bcs.n	800b05c <lwip_recvfrom+0xf0>
 800b04e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b050:	461a      	mov	r2, r3
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	4293      	cmp	r3, r2
 800b056:	bf28      	it	cs
 800b058:	4613      	movcs	r3, r2
 800b05a:	e001      	b.n	800b060 <lwip_recvfrom+0xf4>
 800b05c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b060:	647b      	str	r3, [r7, #68]	; 0x44
    if (fromlen) {
 800b062:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b064:	2b00      	cmp	r3, #0
 800b066:	d002      	beq.n	800b06e <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 800b068:	69ba      	ldr	r2, [r7, #24]
 800b06a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b06c:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 800b06e:	2300      	movs	r3, #0
 800b070:	643b      	str	r3, [r7, #64]	; 0x40
 800b072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b074:	2b00      	cmp	r3, #0
 800b076:	d002      	beq.n	800b07e <lwip_recvfrom+0x112>
 800b078:	4a04      	ldr	r2, [pc, #16]	; (800b08c <lwip_recvfrom+0x120>)
 800b07a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b07c:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 800b07e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800b080:	4618      	mov	r0, r3
 800b082:	3750      	adds	r7, #80	; 0x50
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}
 800b088:	0801917c 	.word	0x0801917c
 800b08c:	2000d2a0 	.word	0x2000d2a0

0800b090 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b08a      	sub	sp, #40	; 0x28
 800b094:	af02      	add	r7, sp, #8
 800b096:	60f8      	str	r0, [r7, #12]
 800b098:	60b9      	str	r1, [r7, #8]
 800b09a:	607a      	str	r2, [r7, #4]
 800b09c:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 800b09e:	68f8      	ldr	r0, [r7, #12]
 800b0a0:	f7ff fbee 	bl	800a880 <get_socket>
 800b0a4:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800b0a6:	69fb      	ldr	r3, [r7, #28]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d102      	bne.n	800b0b2 <lwip_send+0x22>
    return -1;
 800b0ac:	f04f 33ff 	mov.w	r3, #4294967295
 800b0b0:	e046      	b.n	800b140 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800b0b2:	69fb      	ldr	r3, [r7, #28]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b0bc:	2b10      	cmp	r3, #16
 800b0be:	d00b      	beq.n	800b0d8 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	9301      	str	r3, [sp, #4]
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	9300      	str	r3, [sp, #0]
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	687a      	ldr	r2, [r7, #4]
 800b0cc:	68b9      	ldr	r1, [r7, #8]
 800b0ce:	68f8      	ldr	r0, [r7, #12]
 800b0d0:	f000 f83c 	bl	800b14c <lwip_sendto>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	e033      	b.n	800b140 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d001      	beq.n	800b0e6 <lwip_send+0x56>
 800b0e2:	2203      	movs	r2, #3
 800b0e4:	e000      	b.n	800b0e8 <lwip_send+0x58>
 800b0e6:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	105b      	asrs	r3, r3, #1
 800b0ec:	b25b      	sxtb	r3, r3
 800b0ee:	f003 0304 	and.w	r3, r3, #4
 800b0f2:	b25b      	sxtb	r3, r3
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 800b0f8:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800b0fe:	69fb      	ldr	r3, [r7, #28]
 800b100:	6818      	ldr	r0, [r3, #0]
 800b102:	7efa      	ldrb	r2, [r7, #27]
 800b104:	f107 0310 	add.w	r3, r7, #16
 800b108:	9300      	str	r3, [sp, #0]
 800b10a:	4613      	mov	r3, r2
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	68b9      	ldr	r1, [r7, #8]
 800b110:	f7fd fe56 	bl	8008dc0 <netconn_write_partly>
 800b114:	4603      	mov	r3, r0
 800b116:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800b118:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b11c:	4618      	mov	r0, r3
 800b11e:	f7ff fac1 	bl	800a6a4 <err_to_errno>
 800b122:	6178      	str	r0, [r7, #20]
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d002      	beq.n	800b130 <lwip_send+0xa0>
 800b12a:	4a07      	ldr	r2, [pc, #28]	; (800b148 <lwip_send+0xb8>)
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 800b130:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d101      	bne.n	800b13c <lwip_send+0xac>
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	e001      	b.n	800b140 <lwip_send+0xb0>
 800b13c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b140:	4618      	mov	r0, r3
 800b142:	3720      	adds	r7, #32
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}
 800b148:	2000d2a0 	.word	0x2000d2a0

0800b14c <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b08e      	sub	sp, #56	; 0x38
 800b150:	af00      	add	r7, sp, #0
 800b152:	60f8      	str	r0, [r7, #12]
 800b154:	60b9      	str	r1, [r7, #8]
 800b156:	607a      	str	r2, [r7, #4]
 800b158:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800b15a:	68f8      	ldr	r0, [r7, #12]
 800b15c:	f7ff fb90 	bl	800a880 <get_socket>
 800b160:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 800b162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b164:	2b00      	cmp	r3, #0
 800b166:	d102      	bne.n	800b16e <lwip_sendto+0x22>
    return -1;
 800b168:	f04f 33ff 	mov.w	r3, #4294967295
 800b16c:	e093      	b.n	800b296 <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800b16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b178:	2b10      	cmp	r3, #16
 800b17a:	d107      	bne.n	800b18c <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	687a      	ldr	r2, [r7, #4]
 800b180:	68b9      	ldr	r1, [r7, #8]
 800b182:	68f8      	ldr	r0, [r7, #12]
 800b184:	f7ff ff84 	bl	800b090 <lwip_send>
 800b188:	4603      	mov	r3, r0
 800b18a:	e084      	b.n	800b296 <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b192:	d30a      	bcc.n	800b1aa <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 800b194:	235a      	movs	r3, #90	; 0x5a
 800b196:	623b      	str	r3, [r7, #32]
 800b198:	6a3b      	ldr	r3, [r7, #32]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d002      	beq.n	800b1a4 <lwip_sendto+0x58>
 800b19e:	4a40      	ldr	r2, [pc, #256]	; (800b2a0 <lwip_sendto+0x154>)
 800b1a0:	6a3b      	ldr	r3, [r7, #32]
 800b1a2:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800b1a4:	f04f 33ff 	mov.w	r3, #4294967295
 800b1a8:	e075      	b.n	800b296 <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800b1ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d102      	bne.n	800b1ba <lwip_sendto+0x6e>
 800b1b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d023      	beq.n	800b202 <lwip_sendto+0xb6>
 800b1ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1bc:	2b10      	cmp	r3, #16
 800b1be:	d10b      	bne.n	800b1d8 <lwip_sendto+0x8c>
 800b1c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d008      	beq.n	800b1d8 <lwip_sendto+0x8c>
 800b1c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1c8:	785b      	ldrb	r3, [r3, #1]
 800b1ca:	2b02      	cmp	r3, #2
 800b1cc:	d104      	bne.n	800b1d8 <lwip_sendto+0x8c>
 800b1ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1d0:	f003 0303 	and.w	r3, r3, #3
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d014      	beq.n	800b202 <lwip_sendto+0xb6>
 800b1d8:	4b32      	ldr	r3, [pc, #200]	; (800b2a4 <lwip_sendto+0x158>)
 800b1da:	f240 6252 	movw	r2, #1618	; 0x652
 800b1de:	4932      	ldr	r1, [pc, #200]	; (800b2a8 <lwip_sendto+0x15c>)
 800b1e0:	4832      	ldr	r0, [pc, #200]	; (800b2ac <lwip_sendto+0x160>)
 800b1e2:	f00b ff0d 	bl	8017000 <iprintf>
 800b1e6:	f06f 000f 	mvn.w	r0, #15
 800b1ea:	f7ff fa5b 	bl	800a6a4 <err_to_errno>
 800b1ee:	62b8      	str	r0, [r7, #40]	; 0x28
 800b1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d002      	beq.n	800b1fc <lwip_sendto+0xb0>
 800b1f6:	4a2a      	ldr	r2, [pc, #168]	; (800b2a0 <lwip_sendto+0x154>)
 800b1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1fa:	6013      	str	r3, [r2, #0]
 800b1fc:	f04f 33ff 	mov.w	r3, #4294967295
 800b200:	e049      	b.n	800b296 <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800b202:	2300      	movs	r3, #0
 800b204:	617b      	str	r3, [r7, #20]
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 800b20a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d00a      	beq.n	800b226 <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800b210:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	61bb      	str	r3, [r7, #24]
 800b216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b218:	885b      	ldrh	r3, [r3, #2]
 800b21a:	4618      	mov	r0, r3
 800b21c:	f000 fbfe 	bl	800ba1c <lwip_htons>
 800b220:	4603      	mov	r3, r0
 800b222:	86bb      	strh	r3, [r7, #52]	; 0x34
 800b224:	e003      	b.n	800b22e <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 800b226:	2300      	movs	r3, #0
 800b228:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800b22a:	2300      	movs	r3, #0
 800b22c:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 800b22e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b230:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800b232:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b234:	f107 0310 	add.w	r3, r7, #16
 800b238:	68b9      	ldr	r1, [r7, #8]
 800b23a:	4618      	mov	r0, r3
 800b23c:	f7ff fa98 	bl	800a770 <netbuf_ref>
 800b240:	4603      	mov	r3, r0
 800b242:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800b246:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d10a      	bne.n	800b264 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 800b24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f107 0210 	add.w	r2, r7, #16
 800b256:	4611      	mov	r1, r2
 800b258:	4618      	mov	r0, r3
 800b25a:	f7fd fd83 	bl	8008d64 <netconn_send>
 800b25e:	4603      	mov	r3, r0
 800b260:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800b264:	f107 0310 	add.w	r3, r7, #16
 800b268:	4618      	mov	r0, r3
 800b26a:	f7ff fa59 	bl	800a720 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 800b26e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800b272:	4618      	mov	r0, r3
 800b274:	f7ff fa16 	bl	800a6a4 <err_to_errno>
 800b278:	6278      	str	r0, [r7, #36]	; 0x24
 800b27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d002      	beq.n	800b286 <lwip_sendto+0x13a>
 800b280:	4a07      	ldr	r2, [pc, #28]	; (800b2a0 <lwip_sendto+0x154>)
 800b282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b284:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 800b286:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d101      	bne.n	800b292 <lwip_sendto+0x146>
 800b28e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b290:	e001      	b.n	800b296 <lwip_sendto+0x14a>
 800b292:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b296:	4618      	mov	r0, r3
 800b298:	3738      	adds	r7, #56	; 0x38
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}
 800b29e:	bf00      	nop
 800b2a0:	2000d2a0 	.word	0x2000d2a0
 800b2a4:	08018fa0 	.word	0x08018fa0
 800b2a8:	08019280 	.word	0x08019280
 800b2ac:	08018ff4 	.word	0x08018ff4

0800b2b0 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b086      	sub	sp, #24
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	60f8      	str	r0, [r7, #12]
 800b2b8:	60b9      	str	r1, [r7, #8]
 800b2ba:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	2b03      	cmp	r3, #3
 800b2c0:	d009      	beq.n	800b2d6 <lwip_socket+0x26>
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	2b03      	cmp	r3, #3
 800b2c6:	dc23      	bgt.n	800b310 <lwip_socket+0x60>
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	2b01      	cmp	r3, #1
 800b2cc:	d019      	beq.n	800b302 <lwip_socket+0x52>
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	2b02      	cmp	r3, #2
 800b2d2:	d009      	beq.n	800b2e8 <lwip_socket+0x38>
 800b2d4:	e01c      	b.n	800b310 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	b2db      	uxtb	r3, r3
 800b2da:	4a22      	ldr	r2, [pc, #136]	; (800b364 <lwip_socket+0xb4>)
 800b2dc:	4619      	mov	r1, r3
 800b2de:	2040      	movs	r0, #64	; 0x40
 800b2e0:	f7fd f9fa 	bl	80086d8 <netconn_new_with_proto_and_callback>
 800b2e4:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800b2e6:	e019      	b.n	800b31c <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2b88      	cmp	r3, #136	; 0x88
 800b2ec:	d101      	bne.n	800b2f2 <lwip_socket+0x42>
 800b2ee:	2321      	movs	r3, #33	; 0x21
 800b2f0:	e000      	b.n	800b2f4 <lwip_socket+0x44>
 800b2f2:	2320      	movs	r3, #32
 800b2f4:	4a1b      	ldr	r2, [pc, #108]	; (800b364 <lwip_socket+0xb4>)
 800b2f6:	2100      	movs	r1, #0
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f7fd f9ed 	bl	80086d8 <netconn_new_with_proto_and_callback>
 800b2fe:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800b300:	e00c      	b.n	800b31c <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800b302:	4a18      	ldr	r2, [pc, #96]	; (800b364 <lwip_socket+0xb4>)
 800b304:	2100      	movs	r1, #0
 800b306:	2010      	movs	r0, #16
 800b308:	f7fd f9e6 	bl	80086d8 <netconn_new_with_proto_and_callback>
 800b30c:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800b30e:	e005      	b.n	800b31c <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800b310:	4b15      	ldr	r3, [pc, #84]	; (800b368 <lwip_socket+0xb8>)
 800b312:	2216      	movs	r2, #22
 800b314:	601a      	str	r2, [r3, #0]
      return -1;
 800b316:	f04f 33ff 	mov.w	r3, #4294967295
 800b31a:	e01e      	b.n	800b35a <lwip_socket+0xaa>
  }

  if (!conn) {
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d105      	bne.n	800b32e <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800b322:	4b11      	ldr	r3, [pc, #68]	; (800b368 <lwip_socket+0xb8>)
 800b324:	2269      	movs	r2, #105	; 0x69
 800b326:	601a      	str	r2, [r3, #0]
    return -1;
 800b328:	f04f 33ff 	mov.w	r3, #4294967295
 800b32c:	e015      	b.n	800b35a <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 800b32e:	2100      	movs	r1, #0
 800b330:	6978      	ldr	r0, [r7, #20]
 800b332:	f7ff fabd 	bl	800a8b0 <alloc_socket>
 800b336:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b33e:	d108      	bne.n	800b352 <lwip_socket+0xa2>
    netconn_delete(conn);
 800b340:	6978      	ldr	r0, [r7, #20]
 800b342:	f7fd fa67 	bl	8008814 <netconn_delete>
    set_errno(ENFILE);
 800b346:	4b08      	ldr	r3, [pc, #32]	; (800b368 <lwip_socket+0xb8>)
 800b348:	2217      	movs	r2, #23
 800b34a:	601a      	str	r2, [r3, #0]
    return -1;
 800b34c:	f04f 33ff 	mov.w	r3, #4294967295
 800b350:	e003      	b.n	800b35a <lwip_socket+0xaa>
  }
  conn->socket = i;
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	693a      	ldr	r2, [r7, #16]
 800b356:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800b358:	693b      	ldr	r3, [r7, #16]
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3718      	adds	r7, #24
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}
 800b362:	bf00      	nop
 800b364:	0800b3f5 	.word	0x0800b3f5
 800b368:	2000d2a0 	.word	0x2000d2a0

0800b36c <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b087      	sub	sp, #28
 800b370:	af00      	add	r7, sp, #0
 800b372:	60f8      	str	r0, [r7, #12]
 800b374:	60b9      	str	r1, [r7, #8]
 800b376:	607a      	str	r2, [r7, #4]
 800b378:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800b37a:	2300      	movs	r3, #0
 800b37c:	617b      	str	r3, [r7, #20]
 800b37e:	e02c      	b.n	800b3da <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	695a      	ldr	r2, [r3, #20]
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	00db      	lsls	r3, r3, #3
 800b388:	4413      	add	r3, r2
 800b38a:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	68ba      	ldr	r2, [r7, #8]
 800b392:	429a      	cmp	r2, r3
 800b394:	d11e      	bne.n	800b3d4 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d009      	beq.n	800b3b0 <lwip_poll_should_wake+0x44>
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b3a2:	b29b      	uxth	r3, r3
 800b3a4:	f003 0301 	and.w	r3, r3, #1
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d001      	beq.n	800b3b0 <lwip_poll_should_wake+0x44>
        return 1;
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	e01a      	b.n	800b3e6 <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d009      	beq.n	800b3ca <lwip_poll_should_wake+0x5e>
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b3bc:	b29b      	uxth	r3, r3
 800b3be:	f003 0302 	and.w	r3, r3, #2
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d001      	beq.n	800b3ca <lwip_poll_should_wake+0x5e>
        return 1;
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	e00d      	b.n	800b3e6 <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800b3ca:	6a3b      	ldr	r3, [r7, #32]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d001      	beq.n	800b3d4 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	e008      	b.n	800b3e6 <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	617b      	str	r3, [r7, #20]
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	699b      	ldr	r3, [r3, #24]
 800b3de:	697a      	ldr	r2, [r7, #20]
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d3cd      	bcc.n	800b380 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800b3e4:	2300      	movs	r3, #0
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	371c      	adds	r7, #28
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f0:	4770      	bx	lr
	...

0800b3f4 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b08a      	sub	sp, #40	; 0x28
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	460b      	mov	r3, r1
 800b3fe:	70fb      	strb	r3, [r7, #3]
 800b400:	4613      	mov	r3, r2
 800b402:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2b00      	cmp	r3, #0
 800b408:	f000 80a4 	beq.w	800b554 <event_callback+0x160>
    s = conn->socket;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	699b      	ldr	r3, [r3, #24]
 800b410:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 800b412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b414:	2b00      	cmp	r3, #0
 800b416:	da18      	bge.n	800b44a <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800b418:	f00b fd70 	bl	8016efc <sys_arch_protect>
 800b41c:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	699b      	ldr	r3, [r3, #24]
 800b422:	2b00      	cmp	r3, #0
 800b424:	da0b      	bge.n	800b43e <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800b426:	78fb      	ldrb	r3, [r7, #3]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d104      	bne.n	800b436 <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	699b      	ldr	r3, [r3, #24]
 800b430:	1e5a      	subs	r2, r3, #1
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800b436:	69f8      	ldr	r0, [r7, #28]
 800b438:	f00b fd6e 	bl	8016f18 <sys_arch_unprotect>
        return;
 800b43c:	e08d      	b.n	800b55a <event_callback+0x166>
      }
      s = conn->socket;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	699b      	ldr	r3, [r3, #24]
 800b442:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 800b444:	69f8      	ldr	r0, [r7, #28]
 800b446:	f00b fd67 	bl	8016f18 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800b44a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b44c:	f7ff fa18 	bl	800a880 <get_socket>
 800b450:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800b452:	69bb      	ldr	r3, [r7, #24]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d07f      	beq.n	800b558 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800b458:	2301      	movs	r3, #1
 800b45a:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800b45c:	f00b fd4e 	bl	8016efc <sys_arch_protect>
 800b460:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800b462:	78fb      	ldrb	r3, [r7, #3]
 800b464:	2b04      	cmp	r3, #4
 800b466:	d83e      	bhi.n	800b4e6 <event_callback+0xf2>
 800b468:	a201      	add	r2, pc, #4	; (adr r2, 800b470 <event_callback+0x7c>)
 800b46a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b46e:	bf00      	nop
 800b470:	0800b485 	.word	0x0800b485
 800b474:	0800b4a7 	.word	0x0800b4a7
 800b478:	0800b4bf 	.word	0x0800b4bf
 800b47c:	0800b4d3 	.word	0x0800b4d3
 800b480:	0800b4df 	.word	0x0800b4df
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800b484:	69bb      	ldr	r3, [r7, #24]
 800b486:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b48a:	b29b      	uxth	r3, r3
 800b48c:	3301      	adds	r3, #1
 800b48e:	b29b      	uxth	r3, r3
 800b490:	b21a      	sxth	r2, r3
 800b492:	69bb      	ldr	r3, [r7, #24]
 800b494:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800b496:	69bb      	ldr	r3, [r7, #24]
 800b498:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b49c:	2b01      	cmp	r3, #1
 800b49e:	dd2a      	ble.n	800b4f6 <event_callback+0x102>
        check_waiters = 0;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	623b      	str	r3, [r7, #32]
      }
      break;
 800b4a4:	e027      	b.n	800b4f6 <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800b4a6:	69bb      	ldr	r3, [r7, #24]
 800b4a8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b4ac:	b29b      	uxth	r3, r3
 800b4ae:	3b01      	subs	r3, #1
 800b4b0:	b29b      	uxth	r3, r3
 800b4b2:	b21a      	sxth	r2, r3
 800b4b4:	69bb      	ldr	r3, [r7, #24]
 800b4b6:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	623b      	str	r3, [r7, #32]
      break;
 800b4bc:	e01c      	b.n	800b4f8 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800b4be:	69bb      	ldr	r3, [r7, #24]
 800b4c0:	895b      	ldrh	r3, [r3, #10]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d001      	beq.n	800b4ca <event_callback+0xd6>
        check_waiters = 0;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800b4ca:	69bb      	ldr	r3, [r7, #24]
 800b4cc:	2201      	movs	r2, #1
 800b4ce:	815a      	strh	r2, [r3, #10]
      break;
 800b4d0:	e012      	b.n	800b4f8 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800b4d2:	69bb      	ldr	r3, [r7, #24]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	623b      	str	r3, [r7, #32]
      break;
 800b4dc:	e00c      	b.n	800b4f8 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800b4de:	69bb      	ldr	r3, [r7, #24]
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	819a      	strh	r2, [r3, #12]
      break;
 800b4e4:	e008      	b.n	800b4f8 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800b4e6:	4b1e      	ldr	r3, [pc, #120]	; (800b560 <event_callback+0x16c>)
 800b4e8:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 800b4ec:	491d      	ldr	r1, [pc, #116]	; (800b564 <event_callback+0x170>)
 800b4ee:	481e      	ldr	r0, [pc, #120]	; (800b568 <event_callback+0x174>)
 800b4f0:	f00b fd86 	bl	8017000 <iprintf>
      break;
 800b4f4:	e000      	b.n	800b4f8 <event_callback+0x104>
      break;
 800b4f6:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800b4f8:	69bb      	ldr	r3, [r7, #24]
 800b4fa:	7b9b      	ldrb	r3, [r3, #14]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d025      	beq.n	800b54c <event_callback+0x158>
 800b500:	6a3b      	ldr	r3, [r7, #32]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d022      	beq.n	800b54c <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800b506:	69bb      	ldr	r3, [r7, #24]
 800b508:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	bfcc      	ite	gt
 800b510:	2301      	movgt	r3, #1
 800b512:	2300      	movle	r3, #0
 800b514:	b2db      	uxtb	r3, r3
 800b516:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800b518:	69bb      	ldr	r3, [r7, #24]
 800b51a:	895b      	ldrh	r3, [r3, #10]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	bf14      	ite	ne
 800b520:	2301      	movne	r3, #1
 800b522:	2300      	moveq	r3, #0
 800b524:	b2db      	uxtb	r3, r3
 800b526:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800b528:	69bb      	ldr	r3, [r7, #24]
 800b52a:	899b      	ldrh	r3, [r3, #12]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	bf14      	ite	ne
 800b530:	2301      	movne	r3, #1
 800b532:	2300      	moveq	r3, #0
 800b534:	b2db      	uxtb	r3, r3
 800b536:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800b538:	69f8      	ldr	r0, [r7, #28]
 800b53a:	f00b fced 	bl	8016f18 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	693a      	ldr	r2, [r7, #16]
 800b542:	6979      	ldr	r1, [r7, #20]
 800b544:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b546:	f000 f811 	bl	800b56c <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800b54a:	e006      	b.n	800b55a <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800b54c:	69f8      	ldr	r0, [r7, #28]
 800b54e:	f00b fce3 	bl	8016f18 <sys_arch_unprotect>
 800b552:	e002      	b.n	800b55a <event_callback+0x166>
    return;
 800b554:	bf00      	nop
 800b556:	e000      	b.n	800b55a <event_callback+0x166>
      return;
 800b558:	bf00      	nop
  }
  done_socket(sock);
}
 800b55a:	3728      	adds	r7, #40	; 0x28
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}
 800b560:	08018fa0 	.word	0x08018fa0
 800b564:	0801931c 	.word	0x0801931c
 800b568:	08018ff4 	.word	0x08018ff4

0800b56c <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b088      	sub	sp, #32
 800b570:	af02      	add	r7, sp, #8
 800b572:	60f8      	str	r0, [r7, #12]
 800b574:	60b9      	str	r1, [r7, #8]
 800b576:	607a      	str	r2, [r7, #4]
 800b578:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800b57a:	4b4b      	ldr	r3, [pc, #300]	; (800b6a8 <select_check_waiters+0x13c>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	617b      	str	r3, [r7, #20]
 800b580:	e088      	b.n	800b694 <select_check_waiters+0x128>
    if (scb->sem_signalled == 0) {
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	69db      	ldr	r3, [r3, #28]
 800b586:	2b00      	cmp	r3, #0
 800b588:	f040 8081 	bne.w	800b68e <select_check_waiters+0x122>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800b58c:	2300      	movs	r3, #0
 800b58e:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	695b      	ldr	r3, [r3, #20]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d009      	beq.n	800b5ac <select_check_waiters+0x40>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	9300      	str	r3, [sp, #0]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	68ba      	ldr	r2, [r7, #8]
 800b5a0:	68f9      	ldr	r1, [r7, #12]
 800b5a2:	6978      	ldr	r0, [r7, #20]
 800b5a4:	f7ff fee2 	bl	800b36c <lwip_poll_should_wake>
 800b5a8:	6138      	str	r0, [r7, #16]
 800b5aa:	e065      	b.n	800b678 <select_check_waiters+0x10c>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d01c      	beq.n	800b5ec <select_check_waiters+0x80>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	689b      	ldr	r3, [r3, #8]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d018      	beq.n	800b5ec <select_check_waiters+0x80>
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	689a      	ldr	r2, [r3, #8]
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	da00      	bge.n	800b5c6 <select_check_waiters+0x5a>
 800b5c4:	331f      	adds	r3, #31
 800b5c6:	115b      	asrs	r3, r3, #5
 800b5c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	4259      	negs	r1, r3
 800b5d0:	f003 031f 	and.w	r3, r3, #31
 800b5d4:	f001 011f 	and.w	r1, r1, #31
 800b5d8:	bf58      	it	pl
 800b5da:	424b      	negpl	r3, r1
 800b5dc:	fa22 f303 	lsr.w	r3, r2, r3
 800b5e0:	f003 0301 	and.w	r3, r3, #1
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d001      	beq.n	800b5ec <select_check_waiters+0x80>
            do_signal = 1;
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d01f      	beq.n	800b632 <select_check_waiters+0xc6>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d11c      	bne.n	800b632 <select_check_waiters+0xc6>
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	68db      	ldr	r3, [r3, #12]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d018      	beq.n	800b632 <select_check_waiters+0xc6>
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	68da      	ldr	r2, [r3, #12]
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2b00      	cmp	r3, #0
 800b608:	da00      	bge.n	800b60c <select_check_waiters+0xa0>
 800b60a:	331f      	adds	r3, #31
 800b60c:	115b      	asrs	r3, r3, #5
 800b60e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	4259      	negs	r1, r3
 800b616:	f003 031f 	and.w	r3, r3, #31
 800b61a:	f001 011f 	and.w	r1, r1, #31
 800b61e:	bf58      	it	pl
 800b620:	424b      	negpl	r3, r1
 800b622:	fa22 f303 	lsr.w	r3, r2, r3
 800b626:	f003 0301 	and.w	r3, r3, #1
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d001      	beq.n	800b632 <select_check_waiters+0xc6>
            do_signal = 1;
 800b62e:	2301      	movs	r3, #1
 800b630:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d01f      	beq.n	800b678 <select_check_waiters+0x10c>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d11c      	bne.n	800b678 <select_check_waiters+0x10c>
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	691b      	ldr	r3, [r3, #16]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d018      	beq.n	800b678 <select_check_waiters+0x10c>
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	691a      	ldr	r2, [r3, #16]
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	da00      	bge.n	800b652 <select_check_waiters+0xe6>
 800b650:	331f      	adds	r3, #31
 800b652:	115b      	asrs	r3, r3, #5
 800b654:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	4259      	negs	r1, r3
 800b65c:	f003 031f 	and.w	r3, r3, #31
 800b660:	f001 011f 	and.w	r1, r1, #31
 800b664:	bf58      	it	pl
 800b666:	424b      	negpl	r3, r1
 800b668:	fa22 f303 	lsr.w	r3, r2, r3
 800b66c:	f003 0301 	and.w	r3, r3, #1
 800b670:	2b00      	cmp	r3, #0
 800b672:	d001      	beq.n	800b678 <select_check_waiters+0x10c>
            do_signal = 1;
 800b674:	2301      	movs	r3, #1
 800b676:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d007      	beq.n	800b68e <select_check_waiters+0x122>
        scb->sem_signalled = 1;
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	2201      	movs	r2, #1
 800b682:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	3320      	adds	r3, #32
 800b688:	4618      	mov	r0, r3
 800b68a:	f00b fb93 	bl	8016db4 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800b68e:	697b      	ldr	r3, [r7, #20]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	617b      	str	r3, [r7, #20]
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	2b00      	cmp	r3, #0
 800b698:	f47f af73 	bne.w	800b582 <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800b69c:	bf00      	nop
 800b69e:	bf00      	nop
 800b6a0:	3718      	adds	r7, #24
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
 800b6a6:	bf00      	nop
 800b6a8:	2000781c 	.word	0x2000781c

0800b6ac <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b084      	sub	sp, #16
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800b6b6:	f008 f937 	bl	8013928 <sys_timeouts_sleeptime>
 800b6ba:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6c2:	d10b      	bne.n	800b6dc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800b6c4:	4813      	ldr	r0, [pc, #76]	; (800b714 <tcpip_timeouts_mbox_fetch+0x68>)
 800b6c6:	f00b fbe6 	bl	8016e96 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	6839      	ldr	r1, [r7, #0]
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f00b fa9e 	bl	8016c10 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800b6d4:	480f      	ldr	r0, [pc, #60]	; (800b714 <tcpip_timeouts_mbox_fetch+0x68>)
 800b6d6:	f00b fbcf 	bl	8016e78 <sys_mutex_lock>
    return;
 800b6da:	e018      	b.n	800b70e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d102      	bne.n	800b6e8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800b6e2:	f008 f8e7 	bl	80138b4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b6e6:	e7e6      	b.n	800b6b6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800b6e8:	480a      	ldr	r0, [pc, #40]	; (800b714 <tcpip_timeouts_mbox_fetch+0x68>)
 800b6ea:	f00b fbd4 	bl	8016e96 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800b6ee:	68fa      	ldr	r2, [r7, #12]
 800b6f0:	6839      	ldr	r1, [r7, #0]
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f00b fa8c 	bl	8016c10 <sys_arch_mbox_fetch>
 800b6f8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800b6fa:	4806      	ldr	r0, [pc, #24]	; (800b714 <tcpip_timeouts_mbox_fetch+0x68>)
 800b6fc:	f00b fbbc 	bl	8016e78 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b706:	d102      	bne.n	800b70e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800b708:	f008 f8d4 	bl	80138b4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b70c:	e7d3      	b.n	800b6b6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800b70e:	3710      	adds	r7, #16
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}
 800b714:	2000782c 	.word	0x2000782c

0800b718 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b084      	sub	sp, #16
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800b720:	4810      	ldr	r0, [pc, #64]	; (800b764 <tcpip_thread+0x4c>)
 800b722:	f00b fba9 	bl	8016e78 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800b726:	4b10      	ldr	r3, [pc, #64]	; (800b768 <tcpip_thread+0x50>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d005      	beq.n	800b73a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800b72e:	4b0e      	ldr	r3, [pc, #56]	; (800b768 <tcpip_thread+0x50>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	4a0e      	ldr	r2, [pc, #56]	; (800b76c <tcpip_thread+0x54>)
 800b734:	6812      	ldr	r2, [r2, #0]
 800b736:	4610      	mov	r0, r2
 800b738:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b73a:	f107 030c 	add.w	r3, r7, #12
 800b73e:	4619      	mov	r1, r3
 800b740:	480b      	ldr	r0, [pc, #44]	; (800b770 <tcpip_thread+0x58>)
 800b742:	f7ff ffb3 	bl	800b6ac <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d106      	bne.n	800b75a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b74c:	4b09      	ldr	r3, [pc, #36]	; (800b774 <tcpip_thread+0x5c>)
 800b74e:	2291      	movs	r2, #145	; 0x91
 800b750:	4909      	ldr	r1, [pc, #36]	; (800b778 <tcpip_thread+0x60>)
 800b752:	480a      	ldr	r0, [pc, #40]	; (800b77c <tcpip_thread+0x64>)
 800b754:	f00b fc54 	bl	8017000 <iprintf>
      continue;
 800b758:	e003      	b.n	800b762 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	4618      	mov	r0, r3
 800b75e:	f000 f80f 	bl	800b780 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b762:	e7ea      	b.n	800b73a <tcpip_thread+0x22>
 800b764:	2000782c 	.word	0x2000782c
 800b768:	20007820 	.word	0x20007820
 800b76c:	20007824 	.word	0x20007824
 800b770:	20007828 	.word	0x20007828
 800b774:	08019370 	.word	0x08019370
 800b778:	080193a0 	.word	0x080193a0
 800b77c:	080193c0 	.word	0x080193c0

0800b780 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b082      	sub	sp, #8
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	781b      	ldrb	r3, [r3, #0]
 800b78c:	2b02      	cmp	r3, #2
 800b78e:	d026      	beq.n	800b7de <tcpip_thread_handle_msg+0x5e>
 800b790:	2b02      	cmp	r3, #2
 800b792:	dc2b      	bgt.n	800b7ec <tcpip_thread_handle_msg+0x6c>
 800b794:	2b00      	cmp	r3, #0
 800b796:	d002      	beq.n	800b79e <tcpip_thread_handle_msg+0x1e>
 800b798:	2b01      	cmp	r3, #1
 800b79a:	d015      	beq.n	800b7c8 <tcpip_thread_handle_msg+0x48>
 800b79c:	e026      	b.n	800b7ec <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	68db      	ldr	r3, [r3, #12]
 800b7a2:	687a      	ldr	r2, [r7, #4]
 800b7a4:	6850      	ldr	r0, [r2, #4]
 800b7a6:	687a      	ldr	r2, [r7, #4]
 800b7a8:	6892      	ldr	r2, [r2, #8]
 800b7aa:	4611      	mov	r1, r2
 800b7ac:	4798      	blx	r3
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d004      	beq.n	800b7be <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	685b      	ldr	r3, [r3, #4]
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f001 fd0d 	bl	800d1d8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b7be:	6879      	ldr	r1, [r7, #4]
 800b7c0:	2009      	movs	r0, #9
 800b7c2:	f000 fe33 	bl	800c42c <memp_free>
      break;
 800b7c6:	e018      	b.n	800b7fa <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	687a      	ldr	r2, [r7, #4]
 800b7ce:	6892      	ldr	r2, [r2, #8]
 800b7d0:	4610      	mov	r0, r2
 800b7d2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b7d4:	6879      	ldr	r1, [r7, #4]
 800b7d6:	2008      	movs	r0, #8
 800b7d8:	f000 fe28 	bl	800c42c <memp_free>
      break;
 800b7dc:	e00d      	b.n	800b7fa <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	685b      	ldr	r3, [r3, #4]
 800b7e2:	687a      	ldr	r2, [r7, #4]
 800b7e4:	6892      	ldr	r2, [r2, #8]
 800b7e6:	4610      	mov	r0, r2
 800b7e8:	4798      	blx	r3
      break;
 800b7ea:	e006      	b.n	800b7fa <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b7ec:	4b05      	ldr	r3, [pc, #20]	; (800b804 <tcpip_thread_handle_msg+0x84>)
 800b7ee:	22cf      	movs	r2, #207	; 0xcf
 800b7f0:	4905      	ldr	r1, [pc, #20]	; (800b808 <tcpip_thread_handle_msg+0x88>)
 800b7f2:	4806      	ldr	r0, [pc, #24]	; (800b80c <tcpip_thread_handle_msg+0x8c>)
 800b7f4:	f00b fc04 	bl	8017000 <iprintf>
      break;
 800b7f8:	bf00      	nop
  }
}
 800b7fa:	bf00      	nop
 800b7fc:	3708      	adds	r7, #8
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}
 800b802:	bf00      	nop
 800b804:	08019370 	.word	0x08019370
 800b808:	080193a0 	.word	0x080193a0
 800b80c:	080193c0 	.word	0x080193c0

0800b810 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b086      	sub	sp, #24
 800b814:	af00      	add	r7, sp, #0
 800b816:	60f8      	str	r0, [r7, #12]
 800b818:	60b9      	str	r1, [r7, #8]
 800b81a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b81c:	481a      	ldr	r0, [pc, #104]	; (800b888 <tcpip_inpkt+0x78>)
 800b81e:	f00b fa52 	bl	8016cc6 <sys_mbox_valid>
 800b822:	4603      	mov	r3, r0
 800b824:	2b00      	cmp	r3, #0
 800b826:	d105      	bne.n	800b834 <tcpip_inpkt+0x24>
 800b828:	4b18      	ldr	r3, [pc, #96]	; (800b88c <tcpip_inpkt+0x7c>)
 800b82a:	22fc      	movs	r2, #252	; 0xfc
 800b82c:	4918      	ldr	r1, [pc, #96]	; (800b890 <tcpip_inpkt+0x80>)
 800b82e:	4819      	ldr	r0, [pc, #100]	; (800b894 <tcpip_inpkt+0x84>)
 800b830:	f00b fbe6 	bl	8017000 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800b834:	2009      	movs	r0, #9
 800b836:	f000 fda7 	bl	800c388 <memp_malloc>
 800b83a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d102      	bne.n	800b848 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800b842:	f04f 33ff 	mov.w	r3, #4294967295
 800b846:	e01a      	b.n	800b87e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	2200      	movs	r2, #0
 800b84c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	68fa      	ldr	r2, [r7, #12]
 800b852:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	68ba      	ldr	r2, [r7, #8]
 800b858:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	687a      	ldr	r2, [r7, #4]
 800b85e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b860:	6979      	ldr	r1, [r7, #20]
 800b862:	4809      	ldr	r0, [pc, #36]	; (800b888 <tcpip_inpkt+0x78>)
 800b864:	f00b f9ba 	bl	8016bdc <sys_mbox_trypost>
 800b868:	4603      	mov	r3, r0
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d006      	beq.n	800b87c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b86e:	6979      	ldr	r1, [r7, #20]
 800b870:	2009      	movs	r0, #9
 800b872:	f000 fddb 	bl	800c42c <memp_free>
    return ERR_MEM;
 800b876:	f04f 33ff 	mov.w	r3, #4294967295
 800b87a:	e000      	b.n	800b87e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800b87c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800b87e:	4618      	mov	r0, r3
 800b880:	3718      	adds	r7, #24
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}
 800b886:	bf00      	nop
 800b888:	20007828 	.word	0x20007828
 800b88c:	08019370 	.word	0x08019370
 800b890:	080193e8 	.word	0x080193e8
 800b894:	080193c0 	.word	0x080193c0

0800b898 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b082      	sub	sp, #8
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b8a8:	f003 0318 	and.w	r3, r3, #24
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d006      	beq.n	800b8be <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800b8b0:	4a08      	ldr	r2, [pc, #32]	; (800b8d4 <tcpip_input+0x3c>)
 800b8b2:	6839      	ldr	r1, [r7, #0]
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f7ff ffab 	bl	800b810 <tcpip_inpkt>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	e005      	b.n	800b8ca <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800b8be:	4a06      	ldr	r2, [pc, #24]	; (800b8d8 <tcpip_input+0x40>)
 800b8c0:	6839      	ldr	r1, [r7, #0]
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f7ff ffa4 	bl	800b810 <tcpip_inpkt>
 800b8c8:	4603      	mov	r3, r0
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3708      	adds	r7, #8
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}
 800b8d2:	bf00      	nop
 800b8d4:	080169c9 	.word	0x080169c9
 800b8d8:	08015655 	.word	0x08015655

0800b8dc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b084      	sub	sp, #16
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
 800b8e4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b8e6:	4819      	ldr	r0, [pc, #100]	; (800b94c <tcpip_try_callback+0x70>)
 800b8e8:	f00b f9ed 	bl	8016cc6 <sys_mbox_valid>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d106      	bne.n	800b900 <tcpip_try_callback+0x24>
 800b8f2:	4b17      	ldr	r3, [pc, #92]	; (800b950 <tcpip_try_callback+0x74>)
 800b8f4:	f240 125d 	movw	r2, #349	; 0x15d
 800b8f8:	4916      	ldr	r1, [pc, #88]	; (800b954 <tcpip_try_callback+0x78>)
 800b8fa:	4817      	ldr	r0, [pc, #92]	; (800b958 <tcpip_try_callback+0x7c>)
 800b8fc:	f00b fb80 	bl	8017000 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800b900:	2008      	movs	r0, #8
 800b902:	f000 fd41 	bl	800c388 <memp_malloc>
 800b906:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d102      	bne.n	800b914 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800b90e:	f04f 33ff 	mov.w	r3, #4294967295
 800b912:	e017      	b.n	800b944 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2201      	movs	r2, #1
 800b918:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	687a      	ldr	r2, [r7, #4]
 800b91e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	683a      	ldr	r2, [r7, #0]
 800b924:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b926:	68f9      	ldr	r1, [r7, #12]
 800b928:	4808      	ldr	r0, [pc, #32]	; (800b94c <tcpip_try_callback+0x70>)
 800b92a:	f00b f957 	bl	8016bdc <sys_mbox_trypost>
 800b92e:	4603      	mov	r3, r0
 800b930:	2b00      	cmp	r3, #0
 800b932:	d006      	beq.n	800b942 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800b934:	68f9      	ldr	r1, [r7, #12]
 800b936:	2008      	movs	r0, #8
 800b938:	f000 fd78 	bl	800c42c <memp_free>
    return ERR_MEM;
 800b93c:	f04f 33ff 	mov.w	r3, #4294967295
 800b940:	e000      	b.n	800b944 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800b942:	2300      	movs	r3, #0
}
 800b944:	4618      	mov	r0, r3
 800b946:	3710      	adds	r7, #16
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}
 800b94c:	20007828 	.word	0x20007828
 800b950:	08019370 	.word	0x08019370
 800b954:	080193e8 	.word	0x080193e8
 800b958:	080193c0 	.word	0x080193c0

0800b95c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b084      	sub	sp, #16
 800b960:	af00      	add	r7, sp, #0
 800b962:	60f8      	str	r0, [r7, #12]
 800b964:	60b9      	str	r1, [r7, #8]
 800b966:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800b968:	4806      	ldr	r0, [pc, #24]	; (800b984 <tcpip_send_msg_wait_sem+0x28>)
 800b96a:	f00b fa85 	bl	8016e78 <sys_mutex_lock>
  fn(apimsg);
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	68b8      	ldr	r0, [r7, #8]
 800b972:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800b974:	4803      	ldr	r0, [pc, #12]	; (800b984 <tcpip_send_msg_wait_sem+0x28>)
 800b976:	f00b fa8e 	bl	8016e96 <sys_mutex_unlock>
  return ERR_OK;
 800b97a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3710      	adds	r7, #16
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}
 800b984:	2000782c 	.word	0x2000782c

0800b988 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b084      	sub	sp, #16
 800b98c:	af02      	add	r7, sp, #8
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	6039      	str	r1, [r7, #0]
  lwip_init();
 800b992:	f000 f871 	bl	800ba78 <lwip_init>

  tcpip_init_done = initfunc;
 800b996:	4a17      	ldr	r2, [pc, #92]	; (800b9f4 <tcpip_init+0x6c>)
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800b99c:	4a16      	ldr	r2, [pc, #88]	; (800b9f8 <tcpip_init+0x70>)
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b9a2:	2106      	movs	r1, #6
 800b9a4:	4815      	ldr	r0, [pc, #84]	; (800b9fc <tcpip_init+0x74>)
 800b9a6:	f00b f8e5 	bl	8016b74 <sys_mbox_new>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d006      	beq.n	800b9be <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800b9b0:	4b13      	ldr	r3, [pc, #76]	; (800ba00 <tcpip_init+0x78>)
 800b9b2:	f240 2261 	movw	r2, #609	; 0x261
 800b9b6:	4913      	ldr	r1, [pc, #76]	; (800ba04 <tcpip_init+0x7c>)
 800b9b8:	4813      	ldr	r0, [pc, #76]	; (800ba08 <tcpip_init+0x80>)
 800b9ba:	f00b fb21 	bl	8017000 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800b9be:	4813      	ldr	r0, [pc, #76]	; (800ba0c <tcpip_init+0x84>)
 800b9c0:	f00b fa3e 	bl	8016e40 <sys_mutex_new>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d006      	beq.n	800b9d8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800b9ca:	4b0d      	ldr	r3, [pc, #52]	; (800ba00 <tcpip_init+0x78>)
 800b9cc:	f240 2265 	movw	r2, #613	; 0x265
 800b9d0:	490f      	ldr	r1, [pc, #60]	; (800ba10 <tcpip_init+0x88>)
 800b9d2:	480d      	ldr	r0, [pc, #52]	; (800ba08 <tcpip_init+0x80>)
 800b9d4:	f00b fb14 	bl	8017000 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800b9d8:	2300      	movs	r3, #0
 800b9da:	9300      	str	r3, [sp, #0]
 800b9dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	490c      	ldr	r1, [pc, #48]	; (800ba14 <tcpip_init+0x8c>)
 800b9e4:	480c      	ldr	r0, [pc, #48]	; (800ba18 <tcpip_init+0x90>)
 800b9e6:	f00b fa63 	bl	8016eb0 <sys_thread_new>
}
 800b9ea:	bf00      	nop
 800b9ec:	3708      	adds	r7, #8
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
 800b9f2:	bf00      	nop
 800b9f4:	20007820 	.word	0x20007820
 800b9f8:	20007824 	.word	0x20007824
 800b9fc:	20007828 	.word	0x20007828
 800ba00:	08019370 	.word	0x08019370
 800ba04:	080193f8 	.word	0x080193f8
 800ba08:	080193c0 	.word	0x080193c0
 800ba0c:	2000782c 	.word	0x2000782c
 800ba10:	0801941c 	.word	0x0801941c
 800ba14:	0800b719 	.word	0x0800b719
 800ba18:	08019440 	.word	0x08019440

0800ba1c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b083      	sub	sp, #12
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	4603      	mov	r3, r0
 800ba24:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800ba26:	88fb      	ldrh	r3, [r7, #6]
 800ba28:	021b      	lsls	r3, r3, #8
 800ba2a:	b21a      	sxth	r2, r3
 800ba2c:	88fb      	ldrh	r3, [r7, #6]
 800ba2e:	0a1b      	lsrs	r3, r3, #8
 800ba30:	b29b      	uxth	r3, r3
 800ba32:	b21b      	sxth	r3, r3
 800ba34:	4313      	orrs	r3, r2
 800ba36:	b21b      	sxth	r3, r3
 800ba38:	b29b      	uxth	r3, r3
}
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	370c      	adds	r7, #12
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba44:	4770      	bx	lr

0800ba46 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ba46:	b480      	push	{r7}
 800ba48:	b083      	sub	sp, #12
 800ba4a:	af00      	add	r7, sp, #0
 800ba4c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	061a      	lsls	r2, r3, #24
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	021b      	lsls	r3, r3, #8
 800ba56:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ba5a:	431a      	orrs	r2, r3
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	0a1b      	lsrs	r3, r3, #8
 800ba60:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ba64:	431a      	orrs	r2, r3
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	0e1b      	lsrs	r3, r3, #24
 800ba6a:	4313      	orrs	r3, r2
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	370c      	adds	r7, #12
 800ba70:	46bd      	mov	sp, r7
 800ba72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba76:	4770      	bx	lr

0800ba78 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b082      	sub	sp, #8
 800ba7c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800ba82:	f00b f9cf 	bl	8016e24 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800ba86:	f000 f8d5 	bl	800bc34 <mem_init>
  memp_init();
 800ba8a:	f000 fc31 	bl	800c2f0 <memp_init>
  pbuf_init();
  netif_init();
 800ba8e:	f000 fcf7 	bl	800c480 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ba92:	f007 ff81 	bl	8013998 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ba96:	f001 fe49 	bl	800d72c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ba9a:	f007 fec3 	bl	8013824 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ba9e:	bf00      	nop
 800baa0:	3708      	adds	r7, #8
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
	...

0800baa8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800baa8:	b480      	push	{r7}
 800baaa:	b083      	sub	sp, #12
 800baac:	af00      	add	r7, sp, #0
 800baae:	4603      	mov	r3, r0
 800bab0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800bab2:	4b05      	ldr	r3, [pc, #20]	; (800bac8 <ptr_to_mem+0x20>)
 800bab4:	681a      	ldr	r2, [r3, #0]
 800bab6:	88fb      	ldrh	r3, [r7, #6]
 800bab8:	4413      	add	r3, r2
}
 800baba:	4618      	mov	r0, r3
 800babc:	370c      	adds	r7, #12
 800babe:	46bd      	mov	sp, r7
 800bac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac4:	4770      	bx	lr
 800bac6:	bf00      	nop
 800bac8:	2000a05c 	.word	0x2000a05c

0800bacc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800bacc:	b480      	push	{r7}
 800bace:	b083      	sub	sp, #12
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800bad4:	4b05      	ldr	r3, [pc, #20]	; (800baec <mem_to_ptr+0x20>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	687a      	ldr	r2, [r7, #4]
 800bada:	1ad3      	subs	r3, r2, r3
 800badc:	b29b      	uxth	r3, r3
}
 800bade:	4618      	mov	r0, r3
 800bae0:	370c      	adds	r7, #12
 800bae2:	46bd      	mov	sp, r7
 800bae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae8:	4770      	bx	lr
 800baea:	bf00      	nop
 800baec:	2000a05c 	.word	0x2000a05c

0800baf0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800baf0:	b590      	push	{r4, r7, lr}
 800baf2:	b085      	sub	sp, #20
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800baf8:	4b45      	ldr	r3, [pc, #276]	; (800bc10 <plug_holes+0x120>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	687a      	ldr	r2, [r7, #4]
 800bafe:	429a      	cmp	r2, r3
 800bb00:	d206      	bcs.n	800bb10 <plug_holes+0x20>
 800bb02:	4b44      	ldr	r3, [pc, #272]	; (800bc14 <plug_holes+0x124>)
 800bb04:	f240 12df 	movw	r2, #479	; 0x1df
 800bb08:	4943      	ldr	r1, [pc, #268]	; (800bc18 <plug_holes+0x128>)
 800bb0a:	4844      	ldr	r0, [pc, #272]	; (800bc1c <plug_holes+0x12c>)
 800bb0c:	f00b fa78 	bl	8017000 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800bb10:	4b43      	ldr	r3, [pc, #268]	; (800bc20 <plug_holes+0x130>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	687a      	ldr	r2, [r7, #4]
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d306      	bcc.n	800bb28 <plug_holes+0x38>
 800bb1a:	4b3e      	ldr	r3, [pc, #248]	; (800bc14 <plug_holes+0x124>)
 800bb1c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800bb20:	4940      	ldr	r1, [pc, #256]	; (800bc24 <plug_holes+0x134>)
 800bb22:	483e      	ldr	r0, [pc, #248]	; (800bc1c <plug_holes+0x12c>)
 800bb24:	f00b fa6c 	bl	8017000 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	791b      	ldrb	r3, [r3, #4]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d006      	beq.n	800bb3e <plug_holes+0x4e>
 800bb30:	4b38      	ldr	r3, [pc, #224]	; (800bc14 <plug_holes+0x124>)
 800bb32:	f240 12e1 	movw	r2, #481	; 0x1e1
 800bb36:	493c      	ldr	r1, [pc, #240]	; (800bc28 <plug_holes+0x138>)
 800bb38:	4838      	ldr	r0, [pc, #224]	; (800bc1c <plug_holes+0x12c>)
 800bb3a:	f00b fa61 	bl	8017000 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	881b      	ldrh	r3, [r3, #0]
 800bb42:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800bb46:	d906      	bls.n	800bb56 <plug_holes+0x66>
 800bb48:	4b32      	ldr	r3, [pc, #200]	; (800bc14 <plug_holes+0x124>)
 800bb4a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800bb4e:	4937      	ldr	r1, [pc, #220]	; (800bc2c <plug_holes+0x13c>)
 800bb50:	4832      	ldr	r0, [pc, #200]	; (800bc1c <plug_holes+0x12c>)
 800bb52:	f00b fa55 	bl	8017000 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	881b      	ldrh	r3, [r3, #0]
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f7ff ffa4 	bl	800baa8 <ptr_to_mem>
 800bb60:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800bb62:	687a      	ldr	r2, [r7, #4]
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	429a      	cmp	r2, r3
 800bb68:	d024      	beq.n	800bbb4 <plug_holes+0xc4>
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	791b      	ldrb	r3, [r3, #4]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d120      	bne.n	800bbb4 <plug_holes+0xc4>
 800bb72:	4b2b      	ldr	r3, [pc, #172]	; (800bc20 <plug_holes+0x130>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	68fa      	ldr	r2, [r7, #12]
 800bb78:	429a      	cmp	r2, r3
 800bb7a:	d01b      	beq.n	800bbb4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800bb7c:	4b2c      	ldr	r3, [pc, #176]	; (800bc30 <plug_holes+0x140>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	68fa      	ldr	r2, [r7, #12]
 800bb82:	429a      	cmp	r2, r3
 800bb84:	d102      	bne.n	800bb8c <plug_holes+0x9c>
      lfree = mem;
 800bb86:	4a2a      	ldr	r2, [pc, #168]	; (800bc30 <plug_holes+0x140>)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	881a      	ldrh	r2, [r3, #0]
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	881b      	ldrh	r3, [r3, #0]
 800bb98:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800bb9c:	d00a      	beq.n	800bbb4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	881b      	ldrh	r3, [r3, #0]
 800bba2:	4618      	mov	r0, r3
 800bba4:	f7ff ff80 	bl	800baa8 <ptr_to_mem>
 800bba8:	4604      	mov	r4, r0
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f7ff ff8e 	bl	800bacc <mem_to_ptr>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	885b      	ldrh	r3, [r3, #2]
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f7ff ff75 	bl	800baa8 <ptr_to_mem>
 800bbbe:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800bbc0:	68ba      	ldr	r2, [r7, #8]
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d01f      	beq.n	800bc08 <plug_holes+0x118>
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	791b      	ldrb	r3, [r3, #4]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d11b      	bne.n	800bc08 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800bbd0:	4b17      	ldr	r3, [pc, #92]	; (800bc30 <plug_holes+0x140>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	687a      	ldr	r2, [r7, #4]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d102      	bne.n	800bbe0 <plug_holes+0xf0>
      lfree = pmem;
 800bbda:	4a15      	ldr	r2, [pc, #84]	; (800bc30 <plug_holes+0x140>)
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	881a      	ldrh	r2, [r3, #0]
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	881b      	ldrh	r3, [r3, #0]
 800bbec:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800bbf0:	d00a      	beq.n	800bc08 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	881b      	ldrh	r3, [r3, #0]
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f7ff ff56 	bl	800baa8 <ptr_to_mem>
 800bbfc:	4604      	mov	r4, r0
 800bbfe:	68b8      	ldr	r0, [r7, #8]
 800bc00:	f7ff ff64 	bl	800bacc <mem_to_ptr>
 800bc04:	4603      	mov	r3, r0
 800bc06:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800bc08:	bf00      	nop
 800bc0a:	3714      	adds	r7, #20
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd90      	pop	{r4, r7, pc}
 800bc10:	2000a05c 	.word	0x2000a05c
 800bc14:	08019450 	.word	0x08019450
 800bc18:	08019480 	.word	0x08019480
 800bc1c:	08019498 	.word	0x08019498
 800bc20:	2000a060 	.word	0x2000a060
 800bc24:	080194c0 	.word	0x080194c0
 800bc28:	080194dc 	.word	0x080194dc
 800bc2c:	080194f8 	.word	0x080194f8
 800bc30:	2000a068 	.word	0x2000a068

0800bc34 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b082      	sub	sp, #8
 800bc38:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800bc3a:	4b1f      	ldr	r3, [pc, #124]	; (800bcb8 <mem_init+0x84>)
 800bc3c:	3303      	adds	r3, #3
 800bc3e:	f023 0303 	bic.w	r3, r3, #3
 800bc42:	461a      	mov	r2, r3
 800bc44:	4b1d      	ldr	r3, [pc, #116]	; (800bcbc <mem_init+0x88>)
 800bc46:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800bc48:	4b1c      	ldr	r3, [pc, #112]	; (800bcbc <mem_init+0x88>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800bc54:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2200      	movs	r2, #0
 800bc5a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800bc62:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800bc66:	f7ff ff1f 	bl	800baa8 <ptr_to_mem>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	4a14      	ldr	r2, [pc, #80]	; (800bcc0 <mem_init+0x8c>)
 800bc6e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800bc70:	4b13      	ldr	r3, [pc, #76]	; (800bcc0 <mem_init+0x8c>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	2201      	movs	r2, #1
 800bc76:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800bc78:	4b11      	ldr	r3, [pc, #68]	; (800bcc0 <mem_init+0x8c>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800bc80:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800bc82:	4b0f      	ldr	r3, [pc, #60]	; (800bcc0 <mem_init+0x8c>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800bc8a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800bc8c:	4b0b      	ldr	r3, [pc, #44]	; (800bcbc <mem_init+0x88>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	4a0c      	ldr	r2, [pc, #48]	; (800bcc4 <mem_init+0x90>)
 800bc92:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800bc94:	480c      	ldr	r0, [pc, #48]	; (800bcc8 <mem_init+0x94>)
 800bc96:	f00b f8d3 	bl	8016e40 <sys_mutex_new>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d006      	beq.n	800bcae <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800bca0:	4b0a      	ldr	r3, [pc, #40]	; (800bccc <mem_init+0x98>)
 800bca2:	f240 221f 	movw	r2, #543	; 0x21f
 800bca6:	490a      	ldr	r1, [pc, #40]	; (800bcd0 <mem_init+0x9c>)
 800bca8:	480a      	ldr	r0, [pc, #40]	; (800bcd4 <mem_init+0xa0>)
 800bcaa:	f00b f9a9 	bl	8017000 <iprintf>
  }
}
 800bcae:	bf00      	nop
 800bcb0:	3708      	adds	r7, #8
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}
 800bcb6:	bf00      	nop
 800bcb8:	20007848 	.word	0x20007848
 800bcbc:	2000a05c 	.word	0x2000a05c
 800bcc0:	2000a060 	.word	0x2000a060
 800bcc4:	2000a068 	.word	0x2000a068
 800bcc8:	2000a064 	.word	0x2000a064
 800bccc:	08019450 	.word	0x08019450
 800bcd0:	08019524 	.word	0x08019524
 800bcd4:	08019498 	.word	0x08019498

0800bcd8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b086      	sub	sp, #24
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f7ff fef3 	bl	800bacc <mem_to_ptr>
 800bce6:	4603      	mov	r3, r0
 800bce8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	881b      	ldrh	r3, [r3, #0]
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f7ff feda 	bl	800baa8 <ptr_to_mem>
 800bcf4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	885b      	ldrh	r3, [r3, #2]
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f7ff fed4 	bl	800baa8 <ptr_to_mem>
 800bd00:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	881b      	ldrh	r3, [r3, #0]
 800bd06:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800bd0a:	d818      	bhi.n	800bd3e <mem_link_valid+0x66>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	885b      	ldrh	r3, [r3, #2]
 800bd10:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800bd14:	d813      	bhi.n	800bd3e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bd1a:	8afa      	ldrh	r2, [r7, #22]
 800bd1c:	429a      	cmp	r2, r3
 800bd1e:	d004      	beq.n	800bd2a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	881b      	ldrh	r3, [r3, #0]
 800bd24:	8afa      	ldrh	r2, [r7, #22]
 800bd26:	429a      	cmp	r2, r3
 800bd28:	d109      	bne.n	800bd3e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bd2a:	4b08      	ldr	r3, [pc, #32]	; (800bd4c <mem_link_valid+0x74>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bd2e:	693a      	ldr	r2, [r7, #16]
 800bd30:	429a      	cmp	r2, r3
 800bd32:	d006      	beq.n	800bd42 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	885b      	ldrh	r3, [r3, #2]
 800bd38:	8afa      	ldrh	r2, [r7, #22]
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d001      	beq.n	800bd42 <mem_link_valid+0x6a>
    return 0;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	e000      	b.n	800bd44 <mem_link_valid+0x6c>
  }
  return 1;
 800bd42:	2301      	movs	r3, #1
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3718      	adds	r7, #24
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}
 800bd4c:	2000a060 	.word	0x2000a060

0800bd50 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b088      	sub	sp, #32
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d070      	beq.n	800be40 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f003 0303 	and.w	r3, r3, #3
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d00d      	beq.n	800bd84 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800bd68:	4b37      	ldr	r3, [pc, #220]	; (800be48 <mem_free+0xf8>)
 800bd6a:	f240 2273 	movw	r2, #627	; 0x273
 800bd6e:	4937      	ldr	r1, [pc, #220]	; (800be4c <mem_free+0xfc>)
 800bd70:	4837      	ldr	r0, [pc, #220]	; (800be50 <mem_free+0x100>)
 800bd72:	f00b f945 	bl	8017000 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bd76:	f00b f8c1 	bl	8016efc <sys_arch_protect>
 800bd7a:	60f8      	str	r0, [r7, #12]
 800bd7c:	68f8      	ldr	r0, [r7, #12]
 800bd7e:	f00b f8cb 	bl	8016f18 <sys_arch_unprotect>
    return;
 800bd82:	e05e      	b.n	800be42 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	3b08      	subs	r3, #8
 800bd88:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800bd8a:	4b32      	ldr	r3, [pc, #200]	; (800be54 <mem_free+0x104>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	69fa      	ldr	r2, [r7, #28]
 800bd90:	429a      	cmp	r2, r3
 800bd92:	d306      	bcc.n	800bda2 <mem_free+0x52>
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f103 020c 	add.w	r2, r3, #12
 800bd9a:	4b2f      	ldr	r3, [pc, #188]	; (800be58 <mem_free+0x108>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	429a      	cmp	r2, r3
 800bda0:	d90d      	bls.n	800bdbe <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800bda2:	4b29      	ldr	r3, [pc, #164]	; (800be48 <mem_free+0xf8>)
 800bda4:	f240 227f 	movw	r2, #639	; 0x27f
 800bda8:	492c      	ldr	r1, [pc, #176]	; (800be5c <mem_free+0x10c>)
 800bdaa:	4829      	ldr	r0, [pc, #164]	; (800be50 <mem_free+0x100>)
 800bdac:	f00b f928 	bl	8017000 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bdb0:	f00b f8a4 	bl	8016efc <sys_arch_protect>
 800bdb4:	6138      	str	r0, [r7, #16]
 800bdb6:	6938      	ldr	r0, [r7, #16]
 800bdb8:	f00b f8ae 	bl	8016f18 <sys_arch_unprotect>
    return;
 800bdbc:	e041      	b.n	800be42 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bdbe:	4828      	ldr	r0, [pc, #160]	; (800be60 <mem_free+0x110>)
 800bdc0:	f00b f85a 	bl	8016e78 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800bdc4:	69fb      	ldr	r3, [r7, #28]
 800bdc6:	791b      	ldrb	r3, [r3, #4]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d110      	bne.n	800bdee <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800bdcc:	4b1e      	ldr	r3, [pc, #120]	; (800be48 <mem_free+0xf8>)
 800bdce:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800bdd2:	4924      	ldr	r1, [pc, #144]	; (800be64 <mem_free+0x114>)
 800bdd4:	481e      	ldr	r0, [pc, #120]	; (800be50 <mem_free+0x100>)
 800bdd6:	f00b f913 	bl	8017000 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bdda:	4821      	ldr	r0, [pc, #132]	; (800be60 <mem_free+0x110>)
 800bddc:	f00b f85b 	bl	8016e96 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bde0:	f00b f88c 	bl	8016efc <sys_arch_protect>
 800bde4:	6178      	str	r0, [r7, #20]
 800bde6:	6978      	ldr	r0, [r7, #20]
 800bde8:	f00b f896 	bl	8016f18 <sys_arch_unprotect>
    return;
 800bdec:	e029      	b.n	800be42 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800bdee:	69f8      	ldr	r0, [r7, #28]
 800bdf0:	f7ff ff72 	bl	800bcd8 <mem_link_valid>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d110      	bne.n	800be1c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800bdfa:	4b13      	ldr	r3, [pc, #76]	; (800be48 <mem_free+0xf8>)
 800bdfc:	f240 2295 	movw	r2, #661	; 0x295
 800be00:	4919      	ldr	r1, [pc, #100]	; (800be68 <mem_free+0x118>)
 800be02:	4813      	ldr	r0, [pc, #76]	; (800be50 <mem_free+0x100>)
 800be04:	f00b f8fc 	bl	8017000 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800be08:	4815      	ldr	r0, [pc, #84]	; (800be60 <mem_free+0x110>)
 800be0a:	f00b f844 	bl	8016e96 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800be0e:	f00b f875 	bl	8016efc <sys_arch_protect>
 800be12:	61b8      	str	r0, [r7, #24]
 800be14:	69b8      	ldr	r0, [r7, #24]
 800be16:	f00b f87f 	bl	8016f18 <sys_arch_unprotect>
    return;
 800be1a:	e012      	b.n	800be42 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800be1c:	69fb      	ldr	r3, [r7, #28]
 800be1e:	2200      	movs	r2, #0
 800be20:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800be22:	4b12      	ldr	r3, [pc, #72]	; (800be6c <mem_free+0x11c>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	69fa      	ldr	r2, [r7, #28]
 800be28:	429a      	cmp	r2, r3
 800be2a:	d202      	bcs.n	800be32 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800be2c:	4a0f      	ldr	r2, [pc, #60]	; (800be6c <mem_free+0x11c>)
 800be2e:	69fb      	ldr	r3, [r7, #28]
 800be30:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800be32:	69f8      	ldr	r0, [r7, #28]
 800be34:	f7ff fe5c 	bl	800baf0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800be38:	4809      	ldr	r0, [pc, #36]	; (800be60 <mem_free+0x110>)
 800be3a:	f00b f82c 	bl	8016e96 <sys_mutex_unlock>
 800be3e:	e000      	b.n	800be42 <mem_free+0xf2>
    return;
 800be40:	bf00      	nop
}
 800be42:	3720      	adds	r7, #32
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}
 800be48:	08019450 	.word	0x08019450
 800be4c:	08019540 	.word	0x08019540
 800be50:	08019498 	.word	0x08019498
 800be54:	2000a05c 	.word	0x2000a05c
 800be58:	2000a060 	.word	0x2000a060
 800be5c:	08019564 	.word	0x08019564
 800be60:	2000a064 	.word	0x2000a064
 800be64:	08019580 	.word	0x08019580
 800be68:	080195a8 	.word	0x080195a8
 800be6c:	2000a068 	.word	0x2000a068

0800be70 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b088      	sub	sp, #32
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	460b      	mov	r3, r1
 800be7a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800be7c:	887b      	ldrh	r3, [r7, #2]
 800be7e:	3303      	adds	r3, #3
 800be80:	b29b      	uxth	r3, r3
 800be82:	f023 0303 	bic.w	r3, r3, #3
 800be86:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800be88:	8bfb      	ldrh	r3, [r7, #30]
 800be8a:	2b0b      	cmp	r3, #11
 800be8c:	d801      	bhi.n	800be92 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800be8e:	230c      	movs	r3, #12
 800be90:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800be92:	8bfb      	ldrh	r3, [r7, #30]
 800be94:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800be98:	d803      	bhi.n	800bea2 <mem_trim+0x32>
 800be9a:	8bfa      	ldrh	r2, [r7, #30]
 800be9c:	887b      	ldrh	r3, [r7, #2]
 800be9e:	429a      	cmp	r2, r3
 800bea0:	d201      	bcs.n	800bea6 <mem_trim+0x36>
    return NULL;
 800bea2:	2300      	movs	r3, #0
 800bea4:	e0d8      	b.n	800c058 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800bea6:	4b6e      	ldr	r3, [pc, #440]	; (800c060 <mem_trim+0x1f0>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	687a      	ldr	r2, [r7, #4]
 800beac:	429a      	cmp	r2, r3
 800beae:	d304      	bcc.n	800beba <mem_trim+0x4a>
 800beb0:	4b6c      	ldr	r3, [pc, #432]	; (800c064 <mem_trim+0x1f4>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	687a      	ldr	r2, [r7, #4]
 800beb6:	429a      	cmp	r2, r3
 800beb8:	d306      	bcc.n	800bec8 <mem_trim+0x58>
 800beba:	4b6b      	ldr	r3, [pc, #428]	; (800c068 <mem_trim+0x1f8>)
 800bebc:	f240 22d1 	movw	r2, #721	; 0x2d1
 800bec0:	496a      	ldr	r1, [pc, #424]	; (800c06c <mem_trim+0x1fc>)
 800bec2:	486b      	ldr	r0, [pc, #428]	; (800c070 <mem_trim+0x200>)
 800bec4:	f00b f89c 	bl	8017000 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800bec8:	4b65      	ldr	r3, [pc, #404]	; (800c060 <mem_trim+0x1f0>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	687a      	ldr	r2, [r7, #4]
 800bece:	429a      	cmp	r2, r3
 800bed0:	d304      	bcc.n	800bedc <mem_trim+0x6c>
 800bed2:	4b64      	ldr	r3, [pc, #400]	; (800c064 <mem_trim+0x1f4>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	687a      	ldr	r2, [r7, #4]
 800bed8:	429a      	cmp	r2, r3
 800beda:	d307      	bcc.n	800beec <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bedc:	f00b f80e 	bl	8016efc <sys_arch_protect>
 800bee0:	60b8      	str	r0, [r7, #8]
 800bee2:	68b8      	ldr	r0, [r7, #8]
 800bee4:	f00b f818 	bl	8016f18 <sys_arch_unprotect>
    return rmem;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	e0b5      	b.n	800c058 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	3b08      	subs	r3, #8
 800bef0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800bef2:	69b8      	ldr	r0, [r7, #24]
 800bef4:	f7ff fdea 	bl	800bacc <mem_to_ptr>
 800bef8:	4603      	mov	r3, r0
 800befa:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800befc:	69bb      	ldr	r3, [r7, #24]
 800befe:	881a      	ldrh	r2, [r3, #0]
 800bf00:	8afb      	ldrh	r3, [r7, #22]
 800bf02:	1ad3      	subs	r3, r2, r3
 800bf04:	b29b      	uxth	r3, r3
 800bf06:	3b08      	subs	r3, #8
 800bf08:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800bf0a:	8bfa      	ldrh	r2, [r7, #30]
 800bf0c:	8abb      	ldrh	r3, [r7, #20]
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d906      	bls.n	800bf20 <mem_trim+0xb0>
 800bf12:	4b55      	ldr	r3, [pc, #340]	; (800c068 <mem_trim+0x1f8>)
 800bf14:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800bf18:	4956      	ldr	r1, [pc, #344]	; (800c074 <mem_trim+0x204>)
 800bf1a:	4855      	ldr	r0, [pc, #340]	; (800c070 <mem_trim+0x200>)
 800bf1c:	f00b f870 	bl	8017000 <iprintf>
  if (newsize > size) {
 800bf20:	8bfa      	ldrh	r2, [r7, #30]
 800bf22:	8abb      	ldrh	r3, [r7, #20]
 800bf24:	429a      	cmp	r2, r3
 800bf26:	d901      	bls.n	800bf2c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	e095      	b.n	800c058 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800bf2c:	8bfa      	ldrh	r2, [r7, #30]
 800bf2e:	8abb      	ldrh	r3, [r7, #20]
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d101      	bne.n	800bf38 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	e08f      	b.n	800c058 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bf38:	484f      	ldr	r0, [pc, #316]	; (800c078 <mem_trim+0x208>)
 800bf3a:	f00a ff9d 	bl	8016e78 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800bf3e:	69bb      	ldr	r3, [r7, #24]
 800bf40:	881b      	ldrh	r3, [r3, #0]
 800bf42:	4618      	mov	r0, r3
 800bf44:	f7ff fdb0 	bl	800baa8 <ptr_to_mem>
 800bf48:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	791b      	ldrb	r3, [r3, #4]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d13f      	bne.n	800bfd2 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bf52:	69bb      	ldr	r3, [r7, #24]
 800bf54:	881b      	ldrh	r3, [r3, #0]
 800bf56:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800bf5a:	d106      	bne.n	800bf6a <mem_trim+0xfa>
 800bf5c:	4b42      	ldr	r3, [pc, #264]	; (800c068 <mem_trim+0x1f8>)
 800bf5e:	f240 22f5 	movw	r2, #757	; 0x2f5
 800bf62:	4946      	ldr	r1, [pc, #280]	; (800c07c <mem_trim+0x20c>)
 800bf64:	4842      	ldr	r0, [pc, #264]	; (800c070 <mem_trim+0x200>)
 800bf66:	f00b f84b 	bl	8017000 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800bf6a:	693b      	ldr	r3, [r7, #16]
 800bf6c:	881b      	ldrh	r3, [r3, #0]
 800bf6e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bf70:	8afa      	ldrh	r2, [r7, #22]
 800bf72:	8bfb      	ldrh	r3, [r7, #30]
 800bf74:	4413      	add	r3, r2
 800bf76:	b29b      	uxth	r3, r3
 800bf78:	3308      	adds	r3, #8
 800bf7a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800bf7c:	4b40      	ldr	r3, [pc, #256]	; (800c080 <mem_trim+0x210>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	693a      	ldr	r2, [r7, #16]
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d106      	bne.n	800bf94 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800bf86:	89fb      	ldrh	r3, [r7, #14]
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f7ff fd8d 	bl	800baa8 <ptr_to_mem>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	4a3b      	ldr	r2, [pc, #236]	; (800c080 <mem_trim+0x210>)
 800bf92:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800bf94:	89fb      	ldrh	r3, [r7, #14]
 800bf96:	4618      	mov	r0, r3
 800bf98:	f7ff fd86 	bl	800baa8 <ptr_to_mem>
 800bf9c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	89ba      	ldrh	r2, [r7, #12]
 800bfa8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	8afa      	ldrh	r2, [r7, #22]
 800bfae:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800bfb0:	69bb      	ldr	r3, [r7, #24]
 800bfb2:	89fa      	ldrh	r2, [r7, #14]
 800bfb4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	881b      	ldrh	r3, [r3, #0]
 800bfba:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800bfbe:	d047      	beq.n	800c050 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bfc0:	693b      	ldr	r3, [r7, #16]
 800bfc2:	881b      	ldrh	r3, [r3, #0]
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f7ff fd6f 	bl	800baa8 <ptr_to_mem>
 800bfca:	4602      	mov	r2, r0
 800bfcc:	89fb      	ldrh	r3, [r7, #14]
 800bfce:	8053      	strh	r3, [r2, #2]
 800bfd0:	e03e      	b.n	800c050 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800bfd2:	8bfb      	ldrh	r3, [r7, #30]
 800bfd4:	f103 0214 	add.w	r2, r3, #20
 800bfd8:	8abb      	ldrh	r3, [r7, #20]
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	d838      	bhi.n	800c050 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bfde:	8afa      	ldrh	r2, [r7, #22]
 800bfe0:	8bfb      	ldrh	r3, [r7, #30]
 800bfe2:	4413      	add	r3, r2
 800bfe4:	b29b      	uxth	r3, r3
 800bfe6:	3308      	adds	r3, #8
 800bfe8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bfea:	69bb      	ldr	r3, [r7, #24]
 800bfec:	881b      	ldrh	r3, [r3, #0]
 800bfee:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800bff2:	d106      	bne.n	800c002 <mem_trim+0x192>
 800bff4:	4b1c      	ldr	r3, [pc, #112]	; (800c068 <mem_trim+0x1f8>)
 800bff6:	f240 3216 	movw	r2, #790	; 0x316
 800bffa:	4920      	ldr	r1, [pc, #128]	; (800c07c <mem_trim+0x20c>)
 800bffc:	481c      	ldr	r0, [pc, #112]	; (800c070 <mem_trim+0x200>)
 800bffe:	f00a ffff 	bl	8017000 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c002:	89fb      	ldrh	r3, [r7, #14]
 800c004:	4618      	mov	r0, r3
 800c006:	f7ff fd4f 	bl	800baa8 <ptr_to_mem>
 800c00a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c00c:	4b1c      	ldr	r3, [pc, #112]	; (800c080 <mem_trim+0x210>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	693a      	ldr	r2, [r7, #16]
 800c012:	429a      	cmp	r2, r3
 800c014:	d202      	bcs.n	800c01c <mem_trim+0x1ac>
      lfree = mem2;
 800c016:	4a1a      	ldr	r2, [pc, #104]	; (800c080 <mem_trim+0x210>)
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	2200      	movs	r2, #0
 800c020:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c022:	69bb      	ldr	r3, [r7, #24]
 800c024:	881a      	ldrh	r2, [r3, #0]
 800c026:	693b      	ldr	r3, [r7, #16]
 800c028:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c02a:	693b      	ldr	r3, [r7, #16]
 800c02c:	8afa      	ldrh	r2, [r7, #22]
 800c02e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c030:	69bb      	ldr	r3, [r7, #24]
 800c032:	89fa      	ldrh	r2, [r7, #14]
 800c034:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	881b      	ldrh	r3, [r3, #0]
 800c03a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c03e:	d007      	beq.n	800c050 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c040:	693b      	ldr	r3, [r7, #16]
 800c042:	881b      	ldrh	r3, [r3, #0]
 800c044:	4618      	mov	r0, r3
 800c046:	f7ff fd2f 	bl	800baa8 <ptr_to_mem>
 800c04a:	4602      	mov	r2, r0
 800c04c:	89fb      	ldrh	r3, [r7, #14]
 800c04e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c050:	4809      	ldr	r0, [pc, #36]	; (800c078 <mem_trim+0x208>)
 800c052:	f00a ff20 	bl	8016e96 <sys_mutex_unlock>
  return rmem;
 800c056:	687b      	ldr	r3, [r7, #4]
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3720      	adds	r7, #32
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}
 800c060:	2000a05c 	.word	0x2000a05c
 800c064:	2000a060 	.word	0x2000a060
 800c068:	08019450 	.word	0x08019450
 800c06c:	080195dc 	.word	0x080195dc
 800c070:	08019498 	.word	0x08019498
 800c074:	080195f4 	.word	0x080195f4
 800c078:	2000a064 	.word	0x2000a064
 800c07c:	08019614 	.word	0x08019614
 800c080:	2000a068 	.word	0x2000a068

0800c084 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b088      	sub	sp, #32
 800c088:	af00      	add	r7, sp, #0
 800c08a:	4603      	mov	r3, r0
 800c08c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c08e:	88fb      	ldrh	r3, [r7, #6]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d101      	bne.n	800c098 <mem_malloc+0x14>
    return NULL;
 800c094:	2300      	movs	r3, #0
 800c096:	e0e2      	b.n	800c25e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c098:	88fb      	ldrh	r3, [r7, #6]
 800c09a:	3303      	adds	r3, #3
 800c09c:	b29b      	uxth	r3, r3
 800c09e:	f023 0303 	bic.w	r3, r3, #3
 800c0a2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c0a4:	8bbb      	ldrh	r3, [r7, #28]
 800c0a6:	2b0b      	cmp	r3, #11
 800c0a8:	d801      	bhi.n	800c0ae <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c0aa:	230c      	movs	r3, #12
 800c0ac:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c0ae:	8bbb      	ldrh	r3, [r7, #28]
 800c0b0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c0b4:	d803      	bhi.n	800c0be <mem_malloc+0x3a>
 800c0b6:	8bba      	ldrh	r2, [r7, #28]
 800c0b8:	88fb      	ldrh	r3, [r7, #6]
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	d201      	bcs.n	800c0c2 <mem_malloc+0x3e>
    return NULL;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	e0cd      	b.n	800c25e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800c0c2:	4869      	ldr	r0, [pc, #420]	; (800c268 <mem_malloc+0x1e4>)
 800c0c4:	f00a fed8 	bl	8016e78 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c0c8:	4b68      	ldr	r3, [pc, #416]	; (800c26c <mem_malloc+0x1e8>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f7ff fcfd 	bl	800bacc <mem_to_ptr>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	83fb      	strh	r3, [r7, #30]
 800c0d6:	e0b7      	b.n	800c248 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c0d8:	8bfb      	ldrh	r3, [r7, #30]
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f7ff fce4 	bl	800baa8 <ptr_to_mem>
 800c0e0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	791b      	ldrb	r3, [r3, #4]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	f040 80a7 	bne.w	800c23a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c0ec:	697b      	ldr	r3, [r7, #20]
 800c0ee:	881b      	ldrh	r3, [r3, #0]
 800c0f0:	461a      	mov	r2, r3
 800c0f2:	8bfb      	ldrh	r3, [r7, #30]
 800c0f4:	1ad3      	subs	r3, r2, r3
 800c0f6:	f1a3 0208 	sub.w	r2, r3, #8
 800c0fa:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c0fc:	429a      	cmp	r2, r3
 800c0fe:	f0c0 809c 	bcc.w	800c23a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	881b      	ldrh	r3, [r3, #0]
 800c106:	461a      	mov	r2, r3
 800c108:	8bfb      	ldrh	r3, [r7, #30]
 800c10a:	1ad3      	subs	r3, r2, r3
 800c10c:	f1a3 0208 	sub.w	r2, r3, #8
 800c110:	8bbb      	ldrh	r3, [r7, #28]
 800c112:	3314      	adds	r3, #20
 800c114:	429a      	cmp	r2, r3
 800c116:	d333      	bcc.n	800c180 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c118:	8bfa      	ldrh	r2, [r7, #30]
 800c11a:	8bbb      	ldrh	r3, [r7, #28]
 800c11c:	4413      	add	r3, r2
 800c11e:	b29b      	uxth	r3, r3
 800c120:	3308      	adds	r3, #8
 800c122:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c124:	8a7b      	ldrh	r3, [r7, #18]
 800c126:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c12a:	d106      	bne.n	800c13a <mem_malloc+0xb6>
 800c12c:	4b50      	ldr	r3, [pc, #320]	; (800c270 <mem_malloc+0x1ec>)
 800c12e:	f240 3287 	movw	r2, #903	; 0x387
 800c132:	4950      	ldr	r1, [pc, #320]	; (800c274 <mem_malloc+0x1f0>)
 800c134:	4850      	ldr	r0, [pc, #320]	; (800c278 <mem_malloc+0x1f4>)
 800c136:	f00a ff63 	bl	8017000 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c13a:	8a7b      	ldrh	r3, [r7, #18]
 800c13c:	4618      	mov	r0, r3
 800c13e:	f7ff fcb3 	bl	800baa8 <ptr_to_mem>
 800c142:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2200      	movs	r2, #0
 800c148:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	881a      	ldrh	r2, [r3, #0]
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	8bfa      	ldrh	r2, [r7, #30]
 800c156:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	8a7a      	ldrh	r2, [r7, #18]
 800c15c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	2201      	movs	r2, #1
 800c162:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	881b      	ldrh	r3, [r3, #0]
 800c168:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c16c:	d00b      	beq.n	800c186 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	881b      	ldrh	r3, [r3, #0]
 800c172:	4618      	mov	r0, r3
 800c174:	f7ff fc98 	bl	800baa8 <ptr_to_mem>
 800c178:	4602      	mov	r2, r0
 800c17a:	8a7b      	ldrh	r3, [r7, #18]
 800c17c:	8053      	strh	r3, [r2, #2]
 800c17e:	e002      	b.n	800c186 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	2201      	movs	r2, #1
 800c184:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c186:	4b39      	ldr	r3, [pc, #228]	; (800c26c <mem_malloc+0x1e8>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	697a      	ldr	r2, [r7, #20]
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d127      	bne.n	800c1e0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800c190:	4b36      	ldr	r3, [pc, #216]	; (800c26c <mem_malloc+0x1e8>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c196:	e005      	b.n	800c1a4 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c198:	69bb      	ldr	r3, [r7, #24]
 800c19a:	881b      	ldrh	r3, [r3, #0]
 800c19c:	4618      	mov	r0, r3
 800c19e:	f7ff fc83 	bl	800baa8 <ptr_to_mem>
 800c1a2:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c1a4:	69bb      	ldr	r3, [r7, #24]
 800c1a6:	791b      	ldrb	r3, [r3, #4]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d004      	beq.n	800c1b6 <mem_malloc+0x132>
 800c1ac:	4b33      	ldr	r3, [pc, #204]	; (800c27c <mem_malloc+0x1f8>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	69ba      	ldr	r2, [r7, #24]
 800c1b2:	429a      	cmp	r2, r3
 800c1b4:	d1f0      	bne.n	800c198 <mem_malloc+0x114>
          }
          lfree = cur;
 800c1b6:	4a2d      	ldr	r2, [pc, #180]	; (800c26c <mem_malloc+0x1e8>)
 800c1b8:	69bb      	ldr	r3, [r7, #24]
 800c1ba:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c1bc:	4b2b      	ldr	r3, [pc, #172]	; (800c26c <mem_malloc+0x1e8>)
 800c1be:	681a      	ldr	r2, [r3, #0]
 800c1c0:	4b2e      	ldr	r3, [pc, #184]	; (800c27c <mem_malloc+0x1f8>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	429a      	cmp	r2, r3
 800c1c6:	d00b      	beq.n	800c1e0 <mem_malloc+0x15c>
 800c1c8:	4b28      	ldr	r3, [pc, #160]	; (800c26c <mem_malloc+0x1e8>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	791b      	ldrb	r3, [r3, #4]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d006      	beq.n	800c1e0 <mem_malloc+0x15c>
 800c1d2:	4b27      	ldr	r3, [pc, #156]	; (800c270 <mem_malloc+0x1ec>)
 800c1d4:	f240 32b5 	movw	r2, #949	; 0x3b5
 800c1d8:	4929      	ldr	r1, [pc, #164]	; (800c280 <mem_malloc+0x1fc>)
 800c1da:	4827      	ldr	r0, [pc, #156]	; (800c278 <mem_malloc+0x1f4>)
 800c1dc:	f00a ff10 	bl	8017000 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c1e0:	4821      	ldr	r0, [pc, #132]	; (800c268 <mem_malloc+0x1e4>)
 800c1e2:	f00a fe58 	bl	8016e96 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c1e6:	8bba      	ldrh	r2, [r7, #28]
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	4413      	add	r3, r2
 800c1ec:	3308      	adds	r3, #8
 800c1ee:	4a23      	ldr	r2, [pc, #140]	; (800c27c <mem_malloc+0x1f8>)
 800c1f0:	6812      	ldr	r2, [r2, #0]
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	d906      	bls.n	800c204 <mem_malloc+0x180>
 800c1f6:	4b1e      	ldr	r3, [pc, #120]	; (800c270 <mem_malloc+0x1ec>)
 800c1f8:	f240 32b9 	movw	r2, #953	; 0x3b9
 800c1fc:	4921      	ldr	r1, [pc, #132]	; (800c284 <mem_malloc+0x200>)
 800c1fe:	481e      	ldr	r0, [pc, #120]	; (800c278 <mem_malloc+0x1f4>)
 800c200:	f00a fefe 	bl	8017000 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	f003 0303 	and.w	r3, r3, #3
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d006      	beq.n	800c21c <mem_malloc+0x198>
 800c20e:	4b18      	ldr	r3, [pc, #96]	; (800c270 <mem_malloc+0x1ec>)
 800c210:	f240 32bb 	movw	r2, #955	; 0x3bb
 800c214:	491c      	ldr	r1, [pc, #112]	; (800c288 <mem_malloc+0x204>)
 800c216:	4818      	ldr	r0, [pc, #96]	; (800c278 <mem_malloc+0x1f4>)
 800c218:	f00a fef2 	bl	8017000 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	f003 0303 	and.w	r3, r3, #3
 800c222:	2b00      	cmp	r3, #0
 800c224:	d006      	beq.n	800c234 <mem_malloc+0x1b0>
 800c226:	4b12      	ldr	r3, [pc, #72]	; (800c270 <mem_malloc+0x1ec>)
 800c228:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c22c:	4917      	ldr	r1, [pc, #92]	; (800c28c <mem_malloc+0x208>)
 800c22e:	4812      	ldr	r0, [pc, #72]	; (800c278 <mem_malloc+0x1f4>)
 800c230:	f00a fee6 	bl	8017000 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c234:	697b      	ldr	r3, [r7, #20]
 800c236:	3308      	adds	r3, #8
 800c238:	e011      	b.n	800c25e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800c23a:	8bfb      	ldrh	r3, [r7, #30]
 800c23c:	4618      	mov	r0, r3
 800c23e:	f7ff fc33 	bl	800baa8 <ptr_to_mem>
 800c242:	4603      	mov	r3, r0
 800c244:	881b      	ldrh	r3, [r3, #0]
 800c246:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c248:	8bfa      	ldrh	r2, [r7, #30]
 800c24a:	8bbb      	ldrh	r3, [r7, #28]
 800c24c:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 800c250:	429a      	cmp	r2, r3
 800c252:	f4ff af41 	bcc.w	800c0d8 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c256:	4804      	ldr	r0, [pc, #16]	; (800c268 <mem_malloc+0x1e4>)
 800c258:	f00a fe1d 	bl	8016e96 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c25c:	2300      	movs	r3, #0
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3720      	adds	r7, #32
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
 800c266:	bf00      	nop
 800c268:	2000a064 	.word	0x2000a064
 800c26c:	2000a068 	.word	0x2000a068
 800c270:	08019450 	.word	0x08019450
 800c274:	08019614 	.word	0x08019614
 800c278:	08019498 	.word	0x08019498
 800c27c:	2000a060 	.word	0x2000a060
 800c280:	08019628 	.word	0x08019628
 800c284:	08019644 	.word	0x08019644
 800c288:	08019674 	.word	0x08019674
 800c28c:	080196a4 	.word	0x080196a4

0800c290 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c290:	b480      	push	{r7}
 800c292:	b085      	sub	sp, #20
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	689b      	ldr	r3, [r3, #8]
 800c29c:	2200      	movs	r2, #0
 800c29e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	685b      	ldr	r3, [r3, #4]
 800c2a4:	3303      	adds	r3, #3
 800c2a6:	f023 0303 	bic.w	r3, r3, #3
 800c2aa:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	60fb      	str	r3, [r7, #12]
 800c2b0:	e011      	b.n	800c2d6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	689b      	ldr	r3, [r3, #8]
 800c2b6:	681a      	ldr	r2, [r3, #0]
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	689b      	ldr	r3, [r3, #8]
 800c2c0:	68ba      	ldr	r2, [r7, #8]
 800c2c2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	881b      	ldrh	r3, [r3, #0]
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	4413      	add	r3, r2
 800c2ce:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	3301      	adds	r3, #1
 800c2d4:	60fb      	str	r3, [r7, #12]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	885b      	ldrh	r3, [r3, #2]
 800c2da:	461a      	mov	r2, r3
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	dbe7      	blt.n	800c2b2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c2e2:	bf00      	nop
 800c2e4:	bf00      	nop
 800c2e6:	3714      	adds	r7, #20
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ee:	4770      	bx	lr

0800c2f0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b082      	sub	sp, #8
 800c2f4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	80fb      	strh	r3, [r7, #6]
 800c2fa:	e009      	b.n	800c310 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c2fc:	88fb      	ldrh	r3, [r7, #6]
 800c2fe:	4a08      	ldr	r2, [pc, #32]	; (800c320 <memp_init+0x30>)
 800c300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c304:	4618      	mov	r0, r3
 800c306:	f7ff ffc3 	bl	800c290 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c30a:	88fb      	ldrh	r3, [r7, #6]
 800c30c:	3301      	adds	r3, #1
 800c30e:	80fb      	strh	r3, [r7, #6]
 800c310:	88fb      	ldrh	r3, [r7, #6]
 800c312:	2b0c      	cmp	r3, #12
 800c314:	d9f2      	bls.n	800c2fc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c316:	bf00      	nop
 800c318:	bf00      	nop
 800c31a:	3708      	adds	r7, #8
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}
 800c320:	0801bf64 	.word	0x0801bf64

0800c324 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b084      	sub	sp, #16
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c32c:	f00a fde6 	bl	8016efc <sys_arch_protect>
 800c330:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	689b      	ldr	r3, [r3, #8]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d015      	beq.n	800c36c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	689b      	ldr	r3, [r3, #8]
 800c344:	68ba      	ldr	r2, [r7, #8]
 800c346:	6812      	ldr	r2, [r2, #0]
 800c348:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c34a:	68bb      	ldr	r3, [r7, #8]
 800c34c:	f003 0303 	and.w	r3, r3, #3
 800c350:	2b00      	cmp	r3, #0
 800c352:	d006      	beq.n	800c362 <do_memp_malloc_pool+0x3e>
 800c354:	4b09      	ldr	r3, [pc, #36]	; (800c37c <do_memp_malloc_pool+0x58>)
 800c356:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c35a:	4909      	ldr	r1, [pc, #36]	; (800c380 <do_memp_malloc_pool+0x5c>)
 800c35c:	4809      	ldr	r0, [pc, #36]	; (800c384 <do_memp_malloc_pool+0x60>)
 800c35e:	f00a fe4f 	bl	8017000 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c362:	68f8      	ldr	r0, [r7, #12]
 800c364:	f00a fdd8 	bl	8016f18 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	e003      	b.n	800c374 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c36c:	68f8      	ldr	r0, [r7, #12]
 800c36e:	f00a fdd3 	bl	8016f18 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c372:	2300      	movs	r3, #0
}
 800c374:	4618      	mov	r0, r3
 800c376:	3710      	adds	r7, #16
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}
 800c37c:	080196c8 	.word	0x080196c8
 800c380:	080196f8 	.word	0x080196f8
 800c384:	0801971c 	.word	0x0801971c

0800c388 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b084      	sub	sp, #16
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	4603      	mov	r3, r0
 800c390:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c392:	79fb      	ldrb	r3, [r7, #7]
 800c394:	2b0c      	cmp	r3, #12
 800c396:	d908      	bls.n	800c3aa <memp_malloc+0x22>
 800c398:	4b0a      	ldr	r3, [pc, #40]	; (800c3c4 <memp_malloc+0x3c>)
 800c39a:	f240 1257 	movw	r2, #343	; 0x157
 800c39e:	490a      	ldr	r1, [pc, #40]	; (800c3c8 <memp_malloc+0x40>)
 800c3a0:	480a      	ldr	r0, [pc, #40]	; (800c3cc <memp_malloc+0x44>)
 800c3a2:	f00a fe2d 	bl	8017000 <iprintf>
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	e008      	b.n	800c3bc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c3aa:	79fb      	ldrb	r3, [r7, #7]
 800c3ac:	4a08      	ldr	r2, [pc, #32]	; (800c3d0 <memp_malloc+0x48>)
 800c3ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f7ff ffb6 	bl	800c324 <do_memp_malloc_pool>
 800c3b8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	3710      	adds	r7, #16
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}
 800c3c4:	080196c8 	.word	0x080196c8
 800c3c8:	08019758 	.word	0x08019758
 800c3cc:	0801971c 	.word	0x0801971c
 800c3d0:	0801bf64 	.word	0x0801bf64

0800c3d4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b084      	sub	sp, #16
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
 800c3dc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	f003 0303 	and.w	r3, r3, #3
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d006      	beq.n	800c3f6 <do_memp_free_pool+0x22>
 800c3e8:	4b0d      	ldr	r3, [pc, #52]	; (800c420 <do_memp_free_pool+0x4c>)
 800c3ea:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c3ee:	490d      	ldr	r1, [pc, #52]	; (800c424 <do_memp_free_pool+0x50>)
 800c3f0:	480d      	ldr	r0, [pc, #52]	; (800c428 <do_memp_free_pool+0x54>)
 800c3f2:	f00a fe05 	bl	8017000 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c3fa:	f00a fd7f 	bl	8016efc <sys_arch_protect>
 800c3fe:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	689b      	ldr	r3, [r3, #8]
 800c404:	681a      	ldr	r2, [r3, #0]
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	689b      	ldr	r3, [r3, #8]
 800c40e:	68fa      	ldr	r2, [r7, #12]
 800c410:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c412:	68b8      	ldr	r0, [r7, #8]
 800c414:	f00a fd80 	bl	8016f18 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c418:	bf00      	nop
 800c41a:	3710      	adds	r7, #16
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}
 800c420:	080196c8 	.word	0x080196c8
 800c424:	08019778 	.word	0x08019778
 800c428:	0801971c 	.word	0x0801971c

0800c42c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b082      	sub	sp, #8
 800c430:	af00      	add	r7, sp, #0
 800c432:	4603      	mov	r3, r0
 800c434:	6039      	str	r1, [r7, #0]
 800c436:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c438:	79fb      	ldrb	r3, [r7, #7]
 800c43a:	2b0c      	cmp	r3, #12
 800c43c:	d907      	bls.n	800c44e <memp_free+0x22>
 800c43e:	4b0c      	ldr	r3, [pc, #48]	; (800c470 <memp_free+0x44>)
 800c440:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c444:	490b      	ldr	r1, [pc, #44]	; (800c474 <memp_free+0x48>)
 800c446:	480c      	ldr	r0, [pc, #48]	; (800c478 <memp_free+0x4c>)
 800c448:	f00a fdda 	bl	8017000 <iprintf>
 800c44c:	e00c      	b.n	800c468 <memp_free+0x3c>

  if (mem == NULL) {
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d008      	beq.n	800c466 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c454:	79fb      	ldrb	r3, [r7, #7]
 800c456:	4a09      	ldr	r2, [pc, #36]	; (800c47c <memp_free+0x50>)
 800c458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c45c:	6839      	ldr	r1, [r7, #0]
 800c45e:	4618      	mov	r0, r3
 800c460:	f7ff ffb8 	bl	800c3d4 <do_memp_free_pool>
 800c464:	e000      	b.n	800c468 <memp_free+0x3c>
    return;
 800c466:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c468:	3708      	adds	r7, #8
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}
 800c46e:	bf00      	nop
 800c470:	080196c8 	.word	0x080196c8
 800c474:	08019798 	.word	0x08019798
 800c478:	0801971c 	.word	0x0801971c
 800c47c:	0801bf64 	.word	0x0801bf64

0800c480 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c480:	b480      	push	{r7}
 800c482:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c484:	bf00      	nop
 800c486:	46bd      	mov	sp, r7
 800c488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48c:	4770      	bx	lr
	...

0800c490 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b086      	sub	sp, #24
 800c494:	af00      	add	r7, sp, #0
 800c496:	60f8      	str	r0, [r7, #12]
 800c498:	60b9      	str	r1, [r7, #8]
 800c49a:	607a      	str	r2, [r7, #4]
 800c49c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d108      	bne.n	800c4b6 <netif_add+0x26>
 800c4a4:	4b57      	ldr	r3, [pc, #348]	; (800c604 <netif_add+0x174>)
 800c4a6:	f240 1227 	movw	r2, #295	; 0x127
 800c4aa:	4957      	ldr	r1, [pc, #348]	; (800c608 <netif_add+0x178>)
 800c4ac:	4857      	ldr	r0, [pc, #348]	; (800c60c <netif_add+0x17c>)
 800c4ae:	f00a fda7 	bl	8017000 <iprintf>
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	e0a2      	b.n	800c5fc <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d108      	bne.n	800c4ce <netif_add+0x3e>
 800c4bc:	4b51      	ldr	r3, [pc, #324]	; (800c604 <netif_add+0x174>)
 800c4be:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c4c2:	4953      	ldr	r1, [pc, #332]	; (800c610 <netif_add+0x180>)
 800c4c4:	4851      	ldr	r0, [pc, #324]	; (800c60c <netif_add+0x17c>)
 800c4c6:	f00a fd9b 	bl	8017000 <iprintf>
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	e096      	b.n	800c5fc <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d101      	bne.n	800c4d8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c4d4:	4b4f      	ldr	r3, [pc, #316]	; (800c614 <netif_add+0x184>)
 800c4d6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d101      	bne.n	800c4e2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c4de:	4b4d      	ldr	r3, [pc, #308]	; (800c614 <netif_add+0x184>)
 800c4e0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d101      	bne.n	800c4ec <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c4e8:	4b4a      	ldr	r3, [pc, #296]	; (800c614 <netif_add+0x184>)
 800c4ea:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	4a45      	ldr	r2, [pc, #276]	; (800c618 <netif_add+0x188>)
 800c502:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	2200      	movs	r2, #0
 800c508:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	2200      	movs	r2, #0
 800c50e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	2200      	movs	r2, #0
 800c516:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	6a3a      	ldr	r2, [r7, #32]
 800c51c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c51e:	4b3f      	ldr	r3, [pc, #252]	; (800c61c <netif_add+0x18c>)
 800c520:	781a      	ldrb	r2, [r3, #0]
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c52c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	687a      	ldr	r2, [r7, #4]
 800c532:	68b9      	ldr	r1, [r7, #8]
 800c534:	68f8      	ldr	r0, [r7, #12]
 800c536:	f000 f913 	bl	800c760 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c53c:	68f8      	ldr	r0, [r7, #12]
 800c53e:	4798      	blx	r3
 800c540:	4603      	mov	r3, r0
 800c542:	2b00      	cmp	r3, #0
 800c544:	d001      	beq.n	800c54a <netif_add+0xba>
    return NULL;
 800c546:	2300      	movs	r3, #0
 800c548:	e058      	b.n	800c5fc <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c550:	2bff      	cmp	r3, #255	; 0xff
 800c552:	d103      	bne.n	800c55c <netif_add+0xcc>
        netif->num = 0;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	2200      	movs	r2, #0
 800c558:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800c55c:	2300      	movs	r3, #0
 800c55e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c560:	4b2f      	ldr	r3, [pc, #188]	; (800c620 <netif_add+0x190>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	617b      	str	r3, [r7, #20]
 800c566:	e02b      	b.n	800c5c0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c568:	697a      	ldr	r2, [r7, #20]
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d106      	bne.n	800c57e <netif_add+0xee>
 800c570:	4b24      	ldr	r3, [pc, #144]	; (800c604 <netif_add+0x174>)
 800c572:	f240 128b 	movw	r2, #395	; 0x18b
 800c576:	492b      	ldr	r1, [pc, #172]	; (800c624 <netif_add+0x194>)
 800c578:	4824      	ldr	r0, [pc, #144]	; (800c60c <netif_add+0x17c>)
 800c57a:	f00a fd41 	bl	8017000 <iprintf>
        num_netifs++;
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	3301      	adds	r3, #1
 800c582:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	2bff      	cmp	r3, #255	; 0xff
 800c588:	dd06      	ble.n	800c598 <netif_add+0x108>
 800c58a:	4b1e      	ldr	r3, [pc, #120]	; (800c604 <netif_add+0x174>)
 800c58c:	f240 128d 	movw	r2, #397	; 0x18d
 800c590:	4925      	ldr	r1, [pc, #148]	; (800c628 <netif_add+0x198>)
 800c592:	481e      	ldr	r0, [pc, #120]	; (800c60c <netif_add+0x17c>)
 800c594:	f00a fd34 	bl	8017000 <iprintf>
        if (netif2->num == netif->num) {
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d108      	bne.n	800c5ba <netif_add+0x12a>
          netif->num++;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c5ae:	3301      	adds	r3, #1
 800c5b0:	b2da      	uxtb	r2, r3
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800c5b8:	e005      	b.n	800c5c6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c5ba:	697b      	ldr	r3, [r7, #20]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	617b      	str	r3, [r7, #20]
 800c5c0:	697b      	ldr	r3, [r7, #20]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d1d0      	bne.n	800c568 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800c5c6:	697b      	ldr	r3, [r7, #20]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d1be      	bne.n	800c54a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c5d2:	2bfe      	cmp	r3, #254	; 0xfe
 800c5d4:	d103      	bne.n	800c5de <netif_add+0x14e>
    netif_num = 0;
 800c5d6:	4b11      	ldr	r3, [pc, #68]	; (800c61c <netif_add+0x18c>)
 800c5d8:	2200      	movs	r2, #0
 800c5da:	701a      	strb	r2, [r3, #0]
 800c5dc:	e006      	b.n	800c5ec <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c5e4:	3301      	adds	r3, #1
 800c5e6:	b2da      	uxtb	r2, r3
 800c5e8:	4b0c      	ldr	r3, [pc, #48]	; (800c61c <netif_add+0x18c>)
 800c5ea:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c5ec:	4b0c      	ldr	r3, [pc, #48]	; (800c620 <netif_add+0x190>)
 800c5ee:	681a      	ldr	r2, [r3, #0]
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c5f4:	4a0a      	ldr	r2, [pc, #40]	; (800c620 <netif_add+0x190>)
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3718      	adds	r7, #24
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}
 800c604:	080197b4 	.word	0x080197b4
 800c608:	08019848 	.word	0x08019848
 800c60c:	08019804 	.word	0x08019804
 800c610:	08019864 	.word	0x08019864
 800c614:	0801bfd8 	.word	0x0801bfd8
 800c618:	0800ca3b 	.word	0x0800ca3b
 800c61c:	2000d140 	.word	0x2000d140
 800c620:	2000d138 	.word	0x2000d138
 800c624:	08019888 	.word	0x08019888
 800c628:	0801989c 	.word	0x0801989c

0800c62c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b082      	sub	sp, #8
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
 800c634:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c636:	6839      	ldr	r1, [r7, #0]
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f002 fdc7 	bl	800f1cc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c63e:	6839      	ldr	r1, [r7, #0]
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f007 fe63 	bl	801430c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c646:	bf00      	nop
 800c648:	3708      	adds	r7, #8
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}
	...

0800c650 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b086      	sub	sp, #24
 800c654:	af00      	add	r7, sp, #0
 800c656:	60f8      	str	r0, [r7, #12]
 800c658:	60b9      	str	r1, [r7, #8]
 800c65a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d106      	bne.n	800c670 <netif_do_set_ipaddr+0x20>
 800c662:	4b1d      	ldr	r3, [pc, #116]	; (800c6d8 <netif_do_set_ipaddr+0x88>)
 800c664:	f240 12cb 	movw	r2, #459	; 0x1cb
 800c668:	491c      	ldr	r1, [pc, #112]	; (800c6dc <netif_do_set_ipaddr+0x8c>)
 800c66a:	481d      	ldr	r0, [pc, #116]	; (800c6e0 <netif_do_set_ipaddr+0x90>)
 800c66c:	f00a fcc8 	bl	8017000 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d106      	bne.n	800c684 <netif_do_set_ipaddr+0x34>
 800c676:	4b18      	ldr	r3, [pc, #96]	; (800c6d8 <netif_do_set_ipaddr+0x88>)
 800c678:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c67c:	4917      	ldr	r1, [pc, #92]	; (800c6dc <netif_do_set_ipaddr+0x8c>)
 800c67e:	4818      	ldr	r0, [pc, #96]	; (800c6e0 <netif_do_set_ipaddr+0x90>)
 800c680:	f00a fcbe 	bl	8017000 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	681a      	ldr	r2, [r3, #0]
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	3304      	adds	r3, #4
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	429a      	cmp	r2, r3
 800c690:	d01c      	beq.n	800c6cc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	3304      	adds	r3, #4
 800c69c:	681a      	ldr	r2, [r3, #0]
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c6a2:	f107 0314 	add.w	r3, r7, #20
 800c6a6:	4619      	mov	r1, r3
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f7ff ffbf 	bl	800c62c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d002      	beq.n	800c6ba <netif_do_set_ipaddr+0x6a>
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	e000      	b.n	800c6bc <netif_do_set_ipaddr+0x6c>
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	68fa      	ldr	r2, [r7, #12]
 800c6be:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c6c0:	2101      	movs	r1, #1
 800c6c2:	68f8      	ldr	r0, [r7, #12]
 800c6c4:	f000 f8d2 	bl	800c86c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	e000      	b.n	800c6ce <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c6cc:	2300      	movs	r3, #0
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	3718      	adds	r7, #24
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}
 800c6d6:	bf00      	nop
 800c6d8:	080197b4 	.word	0x080197b4
 800c6dc:	080198cc 	.word	0x080198cc
 800c6e0:	08019804 	.word	0x08019804

0800c6e4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c6e4:	b480      	push	{r7}
 800c6e6:	b085      	sub	sp, #20
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	60f8      	str	r0, [r7, #12]
 800c6ec:	60b9      	str	r1, [r7, #8]
 800c6ee:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	681a      	ldr	r2, [r3, #0]
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	3308      	adds	r3, #8
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	429a      	cmp	r2, r3
 800c6fc:	d00a      	beq.n	800c714 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d002      	beq.n	800c70a <netif_do_set_netmask+0x26>
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	e000      	b.n	800c70c <netif_do_set_netmask+0x28>
 800c70a:	2300      	movs	r3, #0
 800c70c:	68fa      	ldr	r2, [r7, #12]
 800c70e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c710:	2301      	movs	r3, #1
 800c712:	e000      	b.n	800c716 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c714:	2300      	movs	r3, #0
}
 800c716:	4618      	mov	r0, r3
 800c718:	3714      	adds	r7, #20
 800c71a:	46bd      	mov	sp, r7
 800c71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c720:	4770      	bx	lr

0800c722 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c722:	b480      	push	{r7}
 800c724:	b085      	sub	sp, #20
 800c726:	af00      	add	r7, sp, #0
 800c728:	60f8      	str	r0, [r7, #12]
 800c72a:	60b9      	str	r1, [r7, #8]
 800c72c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	681a      	ldr	r2, [r3, #0]
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	330c      	adds	r3, #12
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	429a      	cmp	r2, r3
 800c73a:	d00a      	beq.n	800c752 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d002      	beq.n	800c748 <netif_do_set_gw+0x26>
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	e000      	b.n	800c74a <netif_do_set_gw+0x28>
 800c748:	2300      	movs	r3, #0
 800c74a:	68fa      	ldr	r2, [r7, #12]
 800c74c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c74e:	2301      	movs	r3, #1
 800c750:	e000      	b.n	800c754 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c752:	2300      	movs	r3, #0
}
 800c754:	4618      	mov	r0, r3
 800c756:	3714      	adds	r7, #20
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr

0800c760 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b088      	sub	sp, #32
 800c764:	af00      	add	r7, sp, #0
 800c766:	60f8      	str	r0, [r7, #12]
 800c768:	60b9      	str	r1, [r7, #8]
 800c76a:	607a      	str	r2, [r7, #4]
 800c76c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c76e:	2300      	movs	r3, #0
 800c770:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c772:	2300      	movs	r3, #0
 800c774:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d101      	bne.n	800c780 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c77c:	4b1c      	ldr	r3, [pc, #112]	; (800c7f0 <netif_set_addr+0x90>)
 800c77e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d101      	bne.n	800c78a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c786:	4b1a      	ldr	r3, [pc, #104]	; (800c7f0 <netif_set_addr+0x90>)
 800c788:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d101      	bne.n	800c794 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c790:	4b17      	ldr	r3, [pc, #92]	; (800c7f0 <netif_set_addr+0x90>)
 800c792:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d003      	beq.n	800c7a2 <netif_set_addr+0x42>
 800c79a:	68bb      	ldr	r3, [r7, #8]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d101      	bne.n	800c7a6 <netif_set_addr+0x46>
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	e000      	b.n	800c7a8 <netif_set_addr+0x48>
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d006      	beq.n	800c7be <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c7b0:	f107 0310 	add.w	r3, r7, #16
 800c7b4:	461a      	mov	r2, r3
 800c7b6:	68b9      	ldr	r1, [r7, #8]
 800c7b8:	68f8      	ldr	r0, [r7, #12]
 800c7ba:	f7ff ff49 	bl	800c650 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c7be:	69fa      	ldr	r2, [r7, #28]
 800c7c0:	6879      	ldr	r1, [r7, #4]
 800c7c2:	68f8      	ldr	r0, [r7, #12]
 800c7c4:	f7ff ff8e 	bl	800c6e4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c7c8:	69ba      	ldr	r2, [r7, #24]
 800c7ca:	6839      	ldr	r1, [r7, #0]
 800c7cc:	68f8      	ldr	r0, [r7, #12]
 800c7ce:	f7ff ffa8 	bl	800c722 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c7d2:	697b      	ldr	r3, [r7, #20]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d106      	bne.n	800c7e6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c7d8:	f107 0310 	add.w	r3, r7, #16
 800c7dc:	461a      	mov	r2, r3
 800c7de:	68b9      	ldr	r1, [r7, #8]
 800c7e0:	68f8      	ldr	r0, [r7, #12]
 800c7e2:	f7ff ff35 	bl	800c650 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c7e6:	bf00      	nop
 800c7e8:	3720      	adds	r7, #32
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}
 800c7ee:	bf00      	nop
 800c7f0:	0801bfd8 	.word	0x0801bfd8

0800c7f4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c7f4:	b480      	push	{r7}
 800c7f6:	b083      	sub	sp, #12
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c7fc:	4a04      	ldr	r2, [pc, #16]	; (800c810 <netif_set_default+0x1c>)
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c802:	bf00      	nop
 800c804:	370c      	adds	r7, #12
 800c806:	46bd      	mov	sp, r7
 800c808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80c:	4770      	bx	lr
 800c80e:	bf00      	nop
 800c810:	2000d13c 	.word	0x2000d13c

0800c814 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b082      	sub	sp, #8
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d107      	bne.n	800c832 <netif_set_up+0x1e>
 800c822:	4b0f      	ldr	r3, [pc, #60]	; (800c860 <netif_set_up+0x4c>)
 800c824:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c828:	490e      	ldr	r1, [pc, #56]	; (800c864 <netif_set_up+0x50>)
 800c82a:	480f      	ldr	r0, [pc, #60]	; (800c868 <netif_set_up+0x54>)
 800c82c:	f00a fbe8 	bl	8017000 <iprintf>
 800c830:	e013      	b.n	800c85a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c838:	f003 0301 	and.w	r3, r3, #1
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d10c      	bne.n	800c85a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c846:	f043 0301 	orr.w	r3, r3, #1
 800c84a:	b2da      	uxtb	r2, r3
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c852:	2103      	movs	r1, #3
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f000 f809 	bl	800c86c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c85a:	3708      	adds	r7, #8
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}
 800c860:	080197b4 	.word	0x080197b4
 800c864:	0801993c 	.word	0x0801993c
 800c868:	08019804 	.word	0x08019804

0800c86c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b082      	sub	sp, #8
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
 800c874:	460b      	mov	r3, r1
 800c876:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d106      	bne.n	800c88c <netif_issue_reports+0x20>
 800c87e:	4b18      	ldr	r3, [pc, #96]	; (800c8e0 <netif_issue_reports+0x74>)
 800c880:	f240 326d 	movw	r2, #877	; 0x36d
 800c884:	4917      	ldr	r1, [pc, #92]	; (800c8e4 <netif_issue_reports+0x78>)
 800c886:	4818      	ldr	r0, [pc, #96]	; (800c8e8 <netif_issue_reports+0x7c>)
 800c888:	f00a fbba 	bl	8017000 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c892:	f003 0304 	and.w	r3, r3, #4
 800c896:	2b00      	cmp	r3, #0
 800c898:	d01e      	beq.n	800c8d8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c8a0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d017      	beq.n	800c8d8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c8a8:	78fb      	ldrb	r3, [r7, #3]
 800c8aa:	f003 0301 	and.w	r3, r3, #1
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d013      	beq.n	800c8da <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	3304      	adds	r3, #4
 800c8b6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d00e      	beq.n	800c8da <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c8c2:	f003 0308 	and.w	r3, r3, #8
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d007      	beq.n	800c8da <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	3304      	adds	r3, #4
 800c8ce:	4619      	mov	r1, r3
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	f008 fc85 	bl	80151e0 <etharp_request>
 800c8d6:	e000      	b.n	800c8da <netif_issue_reports+0x6e>
    return;
 800c8d8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c8da:	3708      	adds	r7, #8
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}
 800c8e0:	080197b4 	.word	0x080197b4
 800c8e4:	08019958 	.word	0x08019958
 800c8e8:	08019804 	.word	0x08019804

0800c8ec <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b082      	sub	sp, #8
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d107      	bne.n	800c90a <netif_set_down+0x1e>
 800c8fa:	4b12      	ldr	r3, [pc, #72]	; (800c944 <netif_set_down+0x58>)
 800c8fc:	f240 329b 	movw	r2, #923	; 0x39b
 800c900:	4911      	ldr	r1, [pc, #68]	; (800c948 <netif_set_down+0x5c>)
 800c902:	4812      	ldr	r0, [pc, #72]	; (800c94c <netif_set_down+0x60>)
 800c904:	f00a fb7c 	bl	8017000 <iprintf>
 800c908:	e019      	b.n	800c93e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c910:	f003 0301 	and.w	r3, r3, #1
 800c914:	2b00      	cmp	r3, #0
 800c916:	d012      	beq.n	800c93e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c91e:	f023 0301 	bic.w	r3, r3, #1
 800c922:	b2da      	uxtb	r2, r3
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c930:	f003 0308 	and.w	r3, r3, #8
 800c934:	2b00      	cmp	r3, #0
 800c936:	d002      	beq.n	800c93e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f008 f80f 	bl	801495c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c93e:	3708      	adds	r7, #8
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}
 800c944:	080197b4 	.word	0x080197b4
 800c948:	0801997c 	.word	0x0801997c
 800c94c:	08019804 	.word	0x08019804

0800c950 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b082      	sub	sp, #8
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d107      	bne.n	800c96e <netif_set_link_up+0x1e>
 800c95e:	4b13      	ldr	r3, [pc, #76]	; (800c9ac <netif_set_link_up+0x5c>)
 800c960:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800c964:	4912      	ldr	r1, [pc, #72]	; (800c9b0 <netif_set_link_up+0x60>)
 800c966:	4813      	ldr	r0, [pc, #76]	; (800c9b4 <netif_set_link_up+0x64>)
 800c968:	f00a fb4a 	bl	8017000 <iprintf>
 800c96c:	e01b      	b.n	800c9a6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c974:	f003 0304 	and.w	r3, r3, #4
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d114      	bne.n	800c9a6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c982:	f043 0304 	orr.w	r3, r3, #4
 800c986:	b2da      	uxtb	r2, r3
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c98e:	2103      	movs	r1, #3
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f7ff ff6b 	bl	800c86c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	69db      	ldr	r3, [r3, #28]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d003      	beq.n	800c9a6 <netif_set_link_up+0x56>
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	69db      	ldr	r3, [r3, #28]
 800c9a2:	6878      	ldr	r0, [r7, #4]
 800c9a4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c9a6:	3708      	adds	r7, #8
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bd80      	pop	{r7, pc}
 800c9ac:	080197b4 	.word	0x080197b4
 800c9b0:	0801999c 	.word	0x0801999c
 800c9b4:	08019804 	.word	0x08019804

0800c9b8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b082      	sub	sp, #8
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d107      	bne.n	800c9d6 <netif_set_link_down+0x1e>
 800c9c6:	4b11      	ldr	r3, [pc, #68]	; (800ca0c <netif_set_link_down+0x54>)
 800c9c8:	f240 4206 	movw	r2, #1030	; 0x406
 800c9cc:	4910      	ldr	r1, [pc, #64]	; (800ca10 <netif_set_link_down+0x58>)
 800c9ce:	4811      	ldr	r0, [pc, #68]	; (800ca14 <netif_set_link_down+0x5c>)
 800c9d0:	f00a fb16 	bl	8017000 <iprintf>
 800c9d4:	e017      	b.n	800ca06 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c9dc:	f003 0304 	and.w	r3, r3, #4
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d010      	beq.n	800ca06 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c9ea:	f023 0304 	bic.w	r3, r3, #4
 800c9ee:	b2da      	uxtb	r2, r3
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	69db      	ldr	r3, [r3, #28]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d003      	beq.n	800ca06 <netif_set_link_down+0x4e>
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	69db      	ldr	r3, [r3, #28]
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ca06:	3708      	adds	r7, #8
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}
 800ca0c:	080197b4 	.word	0x080197b4
 800ca10:	080199c0 	.word	0x080199c0
 800ca14:	08019804 	.word	0x08019804

0800ca18 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800ca18:	b480      	push	{r7}
 800ca1a:	b083      	sub	sp, #12
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
 800ca20:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d002      	beq.n	800ca2e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	683a      	ldr	r2, [r7, #0]
 800ca2c:	61da      	str	r2, [r3, #28]
  }
}
 800ca2e:	bf00      	nop
 800ca30:	370c      	adds	r7, #12
 800ca32:	46bd      	mov	sp, r7
 800ca34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca38:	4770      	bx	lr

0800ca3a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800ca3a:	b480      	push	{r7}
 800ca3c:	b085      	sub	sp, #20
 800ca3e:	af00      	add	r7, sp, #0
 800ca40:	60f8      	str	r0, [r7, #12]
 800ca42:	60b9      	str	r1, [r7, #8]
 800ca44:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800ca46:	f06f 030b 	mvn.w	r3, #11
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	3714      	adds	r7, #20
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca54:	4770      	bx	lr
	...

0800ca58 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b085      	sub	sp, #20
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	4603      	mov	r3, r0
 800ca60:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800ca62:	79fb      	ldrb	r3, [r7, #7]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d013      	beq.n	800ca90 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800ca68:	4b0d      	ldr	r3, [pc, #52]	; (800caa0 <netif_get_by_index+0x48>)
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	60fb      	str	r3, [r7, #12]
 800ca6e:	e00c      	b.n	800ca8a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ca76:	3301      	adds	r3, #1
 800ca78:	b2db      	uxtb	r3, r3
 800ca7a:	79fa      	ldrb	r2, [r7, #7]
 800ca7c:	429a      	cmp	r2, r3
 800ca7e:	d101      	bne.n	800ca84 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	e006      	b.n	800ca92 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	60fb      	str	r3, [r7, #12]
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d1ef      	bne.n	800ca70 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800ca90:	2300      	movs	r3, #0
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	3714      	adds	r7, #20
 800ca96:	46bd      	mov	sp, r7
 800ca98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9c:	4770      	bx	lr
 800ca9e:	bf00      	nop
 800caa0:	2000d138 	.word	0x2000d138

0800caa4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b082      	sub	sp, #8
 800caa8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800caaa:	f00a fa27 	bl	8016efc <sys_arch_protect>
 800caae:	6038      	str	r0, [r7, #0]
 800cab0:	4b0d      	ldr	r3, [pc, #52]	; (800cae8 <pbuf_free_ooseq+0x44>)
 800cab2:	2200      	movs	r2, #0
 800cab4:	701a      	strb	r2, [r3, #0]
 800cab6:	6838      	ldr	r0, [r7, #0]
 800cab8:	f00a fa2e 	bl	8016f18 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cabc:	4b0b      	ldr	r3, [pc, #44]	; (800caec <pbuf_free_ooseq+0x48>)
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	607b      	str	r3, [r7, #4]
 800cac2:	e00a      	b.n	800cada <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d003      	beq.n	800cad4 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f002 fbbb 	bl	800f248 <tcp_free_ooseq>
      return;
 800cad2:	e005      	b.n	800cae0 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	68db      	ldr	r3, [r3, #12]
 800cad8:	607b      	str	r3, [r7, #4]
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d1f1      	bne.n	800cac4 <pbuf_free_ooseq+0x20>
    }
  }
}
 800cae0:	3708      	adds	r7, #8
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}
 800cae6:	bf00      	nop
 800cae8:	2000d141 	.word	0x2000d141
 800caec:	2000d150 	.word	0x2000d150

0800caf0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b082      	sub	sp, #8
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800caf8:	f7ff ffd4 	bl	800caa4 <pbuf_free_ooseq>
}
 800cafc:	bf00      	nop
 800cafe:	3708      	adds	r7, #8
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b082      	sub	sp, #8
 800cb08:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800cb0a:	f00a f9f7 	bl	8016efc <sys_arch_protect>
 800cb0e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800cb10:	4b0f      	ldr	r3, [pc, #60]	; (800cb50 <pbuf_pool_is_empty+0x4c>)
 800cb12:	781b      	ldrb	r3, [r3, #0]
 800cb14:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800cb16:	4b0e      	ldr	r3, [pc, #56]	; (800cb50 <pbuf_pool_is_empty+0x4c>)
 800cb18:	2201      	movs	r2, #1
 800cb1a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	f00a f9fb 	bl	8016f18 <sys_arch_unprotect>

  if (!queued) {
 800cb22:	78fb      	ldrb	r3, [r7, #3]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d10f      	bne.n	800cb48 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800cb28:	2100      	movs	r1, #0
 800cb2a:	480a      	ldr	r0, [pc, #40]	; (800cb54 <pbuf_pool_is_empty+0x50>)
 800cb2c:	f7fe fed6 	bl	800b8dc <tcpip_try_callback>
 800cb30:	4603      	mov	r3, r0
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d008      	beq.n	800cb48 <pbuf_pool_is_empty+0x44>
 800cb36:	f00a f9e1 	bl	8016efc <sys_arch_protect>
 800cb3a:	6078      	str	r0, [r7, #4]
 800cb3c:	4b04      	ldr	r3, [pc, #16]	; (800cb50 <pbuf_pool_is_empty+0x4c>)
 800cb3e:	2200      	movs	r2, #0
 800cb40:	701a      	strb	r2, [r3, #0]
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f00a f9e8 	bl	8016f18 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800cb48:	bf00      	nop
 800cb4a:	3708      	adds	r7, #8
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}
 800cb50:	2000d141 	.word	0x2000d141
 800cb54:	0800caf1 	.word	0x0800caf1

0800cb58 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800cb58:	b480      	push	{r7}
 800cb5a:	b085      	sub	sp, #20
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	60f8      	str	r0, [r7, #12]
 800cb60:	60b9      	str	r1, [r7, #8]
 800cb62:	4611      	mov	r1, r2
 800cb64:	461a      	mov	r2, r3
 800cb66:	460b      	mov	r3, r1
 800cb68:	80fb      	strh	r3, [r7, #6]
 800cb6a:	4613      	mov	r3, r2
 800cb6c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	2200      	movs	r2, #0
 800cb72:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	68ba      	ldr	r2, [r7, #8]
 800cb78:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	88fa      	ldrh	r2, [r7, #6]
 800cb7e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	88ba      	ldrh	r2, [r7, #4]
 800cb84:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800cb86:	8b3b      	ldrh	r3, [r7, #24]
 800cb88:	b2da      	uxtb	r2, r3
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	7f3a      	ldrb	r2, [r7, #28]
 800cb92:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	2201      	movs	r2, #1
 800cb98:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	73da      	strb	r2, [r3, #15]
}
 800cba0:	bf00      	nop
 800cba2:	3714      	adds	r7, #20
 800cba4:	46bd      	mov	sp, r7
 800cba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbaa:	4770      	bx	lr

0800cbac <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b08c      	sub	sp, #48	; 0x30
 800cbb0:	af02      	add	r7, sp, #8
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	71fb      	strb	r3, [r7, #7]
 800cbb6:	460b      	mov	r3, r1
 800cbb8:	80bb      	strh	r3, [r7, #4]
 800cbba:	4613      	mov	r3, r2
 800cbbc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800cbbe:	79fb      	ldrb	r3, [r7, #7]
 800cbc0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800cbc2:	887b      	ldrh	r3, [r7, #2]
 800cbc4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800cbc8:	d07f      	beq.n	800ccca <pbuf_alloc+0x11e>
 800cbca:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800cbce:	f300 80c8 	bgt.w	800cd62 <pbuf_alloc+0x1b6>
 800cbd2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800cbd6:	d010      	beq.n	800cbfa <pbuf_alloc+0x4e>
 800cbd8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800cbdc:	f300 80c1 	bgt.w	800cd62 <pbuf_alloc+0x1b6>
 800cbe0:	2b01      	cmp	r3, #1
 800cbe2:	d002      	beq.n	800cbea <pbuf_alloc+0x3e>
 800cbe4:	2b41      	cmp	r3, #65	; 0x41
 800cbe6:	f040 80bc 	bne.w	800cd62 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800cbea:	887a      	ldrh	r2, [r7, #2]
 800cbec:	88bb      	ldrh	r3, [r7, #4]
 800cbee:	4619      	mov	r1, r3
 800cbf0:	2000      	movs	r0, #0
 800cbf2:	f000 f8d1 	bl	800cd98 <pbuf_alloc_reference>
 800cbf6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800cbf8:	e0bd      	b.n	800cd76 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800cc02:	88bb      	ldrh	r3, [r7, #4]
 800cc04:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800cc06:	200c      	movs	r0, #12
 800cc08:	f7ff fbbe 	bl	800c388 <memp_malloc>
 800cc0c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800cc0e:	693b      	ldr	r3, [r7, #16]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d109      	bne.n	800cc28 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800cc14:	f7ff ff76 	bl	800cb04 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800cc18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d002      	beq.n	800cc24 <pbuf_alloc+0x78>
            pbuf_free(p);
 800cc1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc20:	f000 fada 	bl	800d1d8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800cc24:	2300      	movs	r3, #0
 800cc26:	e0a7      	b.n	800cd78 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800cc28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc2a:	3303      	adds	r3, #3
 800cc2c:	b29b      	uxth	r3, r3
 800cc2e:	f023 0303 	bic.w	r3, r3, #3
 800cc32:	b29b      	uxth	r3, r3
 800cc34:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800cc38:	b29b      	uxth	r3, r3
 800cc3a:	8b7a      	ldrh	r2, [r7, #26]
 800cc3c:	4293      	cmp	r3, r2
 800cc3e:	bf28      	it	cs
 800cc40:	4613      	movcs	r3, r2
 800cc42:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800cc44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc46:	3310      	adds	r3, #16
 800cc48:	693a      	ldr	r2, [r7, #16]
 800cc4a:	4413      	add	r3, r2
 800cc4c:	3303      	adds	r3, #3
 800cc4e:	f023 0303 	bic.w	r3, r3, #3
 800cc52:	4618      	mov	r0, r3
 800cc54:	89f9      	ldrh	r1, [r7, #14]
 800cc56:	8b7a      	ldrh	r2, [r7, #26]
 800cc58:	2300      	movs	r3, #0
 800cc5a:	9301      	str	r3, [sp, #4]
 800cc5c:	887b      	ldrh	r3, [r7, #2]
 800cc5e:	9300      	str	r3, [sp, #0]
 800cc60:	460b      	mov	r3, r1
 800cc62:	4601      	mov	r1, r0
 800cc64:	6938      	ldr	r0, [r7, #16]
 800cc66:	f7ff ff77 	bl	800cb58 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	685b      	ldr	r3, [r3, #4]
 800cc6e:	f003 0303 	and.w	r3, r3, #3
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d006      	beq.n	800cc84 <pbuf_alloc+0xd8>
 800cc76:	4b42      	ldr	r3, [pc, #264]	; (800cd80 <pbuf_alloc+0x1d4>)
 800cc78:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cc7c:	4941      	ldr	r1, [pc, #260]	; (800cd84 <pbuf_alloc+0x1d8>)
 800cc7e:	4842      	ldr	r0, [pc, #264]	; (800cd88 <pbuf_alloc+0x1dc>)
 800cc80:	f00a f9be 	bl	8017000 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800cc84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc86:	3303      	adds	r3, #3
 800cc88:	f023 0303 	bic.w	r3, r3, #3
 800cc8c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800cc90:	d106      	bne.n	800cca0 <pbuf_alloc+0xf4>
 800cc92:	4b3b      	ldr	r3, [pc, #236]	; (800cd80 <pbuf_alloc+0x1d4>)
 800cc94:	f44f 7281 	mov.w	r2, #258	; 0x102
 800cc98:	493c      	ldr	r1, [pc, #240]	; (800cd8c <pbuf_alloc+0x1e0>)
 800cc9a:	483b      	ldr	r0, [pc, #236]	; (800cd88 <pbuf_alloc+0x1dc>)
 800cc9c:	f00a f9b0 	bl	8017000 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800cca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d102      	bne.n	800ccac <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800cca6:	693b      	ldr	r3, [r7, #16]
 800cca8:	627b      	str	r3, [r7, #36]	; 0x24
 800ccaa:	e002      	b.n	800ccb2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800ccac:	69fb      	ldr	r3, [r7, #28]
 800ccae:	693a      	ldr	r2, [r7, #16]
 800ccb0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800ccb2:	693b      	ldr	r3, [r7, #16]
 800ccb4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800ccb6:	8b7a      	ldrh	r2, [r7, #26]
 800ccb8:	89fb      	ldrh	r3, [r7, #14]
 800ccba:	1ad3      	subs	r3, r2, r3
 800ccbc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800ccc2:	8b7b      	ldrh	r3, [r7, #26]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d19e      	bne.n	800cc06 <pbuf_alloc+0x5a>
      break;
 800ccc8:	e055      	b.n	800cd76 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800ccca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cccc:	3303      	adds	r3, #3
 800ccce:	b29b      	uxth	r3, r3
 800ccd0:	f023 0303 	bic.w	r3, r3, #3
 800ccd4:	b29a      	uxth	r2, r3
 800ccd6:	88bb      	ldrh	r3, [r7, #4]
 800ccd8:	3303      	adds	r3, #3
 800ccda:	b29b      	uxth	r3, r3
 800ccdc:	f023 0303 	bic.w	r3, r3, #3
 800cce0:	b29b      	uxth	r3, r3
 800cce2:	4413      	add	r3, r2
 800cce4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800cce6:	8b3b      	ldrh	r3, [r7, #24]
 800cce8:	3310      	adds	r3, #16
 800ccea:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ccec:	8b3a      	ldrh	r2, [r7, #24]
 800ccee:	88bb      	ldrh	r3, [r7, #4]
 800ccf0:	3303      	adds	r3, #3
 800ccf2:	f023 0303 	bic.w	r3, r3, #3
 800ccf6:	429a      	cmp	r2, r3
 800ccf8:	d306      	bcc.n	800cd08 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800ccfa:	8afa      	ldrh	r2, [r7, #22]
 800ccfc:	88bb      	ldrh	r3, [r7, #4]
 800ccfe:	3303      	adds	r3, #3
 800cd00:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d201      	bcs.n	800cd0c <pbuf_alloc+0x160>
        return NULL;
 800cd08:	2300      	movs	r3, #0
 800cd0a:	e035      	b.n	800cd78 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800cd0c:	8afb      	ldrh	r3, [r7, #22]
 800cd0e:	4618      	mov	r0, r3
 800cd10:	f7ff f9b8 	bl	800c084 <mem_malloc>
 800cd14:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800cd16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d101      	bne.n	800cd20 <pbuf_alloc+0x174>
        return NULL;
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	e02b      	b.n	800cd78 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800cd20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd22:	3310      	adds	r3, #16
 800cd24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd26:	4413      	add	r3, r2
 800cd28:	3303      	adds	r3, #3
 800cd2a:	f023 0303 	bic.w	r3, r3, #3
 800cd2e:	4618      	mov	r0, r3
 800cd30:	88b9      	ldrh	r1, [r7, #4]
 800cd32:	88ba      	ldrh	r2, [r7, #4]
 800cd34:	2300      	movs	r3, #0
 800cd36:	9301      	str	r3, [sp, #4]
 800cd38:	887b      	ldrh	r3, [r7, #2]
 800cd3a:	9300      	str	r3, [sp, #0]
 800cd3c:	460b      	mov	r3, r1
 800cd3e:	4601      	mov	r1, r0
 800cd40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cd42:	f7ff ff09 	bl	800cb58 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800cd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd48:	685b      	ldr	r3, [r3, #4]
 800cd4a:	f003 0303 	and.w	r3, r3, #3
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d010      	beq.n	800cd74 <pbuf_alloc+0x1c8>
 800cd52:	4b0b      	ldr	r3, [pc, #44]	; (800cd80 <pbuf_alloc+0x1d4>)
 800cd54:	f44f 7291 	mov.w	r2, #290	; 0x122
 800cd58:	490d      	ldr	r1, [pc, #52]	; (800cd90 <pbuf_alloc+0x1e4>)
 800cd5a:	480b      	ldr	r0, [pc, #44]	; (800cd88 <pbuf_alloc+0x1dc>)
 800cd5c:	f00a f950 	bl	8017000 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800cd60:	e008      	b.n	800cd74 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800cd62:	4b07      	ldr	r3, [pc, #28]	; (800cd80 <pbuf_alloc+0x1d4>)
 800cd64:	f240 1227 	movw	r2, #295	; 0x127
 800cd68:	490a      	ldr	r1, [pc, #40]	; (800cd94 <pbuf_alloc+0x1e8>)
 800cd6a:	4807      	ldr	r0, [pc, #28]	; (800cd88 <pbuf_alloc+0x1dc>)
 800cd6c:	f00a f948 	bl	8017000 <iprintf>
      return NULL;
 800cd70:	2300      	movs	r3, #0
 800cd72:	e001      	b.n	800cd78 <pbuf_alloc+0x1cc>
      break;
 800cd74:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800cd76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cd78:	4618      	mov	r0, r3
 800cd7a:	3728      	adds	r7, #40	; 0x28
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}
 800cd80:	080199e4 	.word	0x080199e4
 800cd84:	08019a14 	.word	0x08019a14
 800cd88:	08019a44 	.word	0x08019a44
 800cd8c:	08019a6c 	.word	0x08019a6c
 800cd90:	08019aa0 	.word	0x08019aa0
 800cd94:	08019acc 	.word	0x08019acc

0800cd98 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b086      	sub	sp, #24
 800cd9c:	af02      	add	r7, sp, #8
 800cd9e:	6078      	str	r0, [r7, #4]
 800cda0:	460b      	mov	r3, r1
 800cda2:	807b      	strh	r3, [r7, #2]
 800cda4:	4613      	mov	r3, r2
 800cda6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800cda8:	883b      	ldrh	r3, [r7, #0]
 800cdaa:	2b41      	cmp	r3, #65	; 0x41
 800cdac:	d009      	beq.n	800cdc2 <pbuf_alloc_reference+0x2a>
 800cdae:	883b      	ldrh	r3, [r7, #0]
 800cdb0:	2b01      	cmp	r3, #1
 800cdb2:	d006      	beq.n	800cdc2 <pbuf_alloc_reference+0x2a>
 800cdb4:	4b0f      	ldr	r3, [pc, #60]	; (800cdf4 <pbuf_alloc_reference+0x5c>)
 800cdb6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800cdba:	490f      	ldr	r1, [pc, #60]	; (800cdf8 <pbuf_alloc_reference+0x60>)
 800cdbc:	480f      	ldr	r0, [pc, #60]	; (800cdfc <pbuf_alloc_reference+0x64>)
 800cdbe:	f00a f91f 	bl	8017000 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800cdc2:	200b      	movs	r0, #11
 800cdc4:	f7ff fae0 	bl	800c388 <memp_malloc>
 800cdc8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d101      	bne.n	800cdd4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	e00b      	b.n	800cdec <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800cdd4:	8879      	ldrh	r1, [r7, #2]
 800cdd6:	887a      	ldrh	r2, [r7, #2]
 800cdd8:	2300      	movs	r3, #0
 800cdda:	9301      	str	r3, [sp, #4]
 800cddc:	883b      	ldrh	r3, [r7, #0]
 800cdde:	9300      	str	r3, [sp, #0]
 800cde0:	460b      	mov	r3, r1
 800cde2:	6879      	ldr	r1, [r7, #4]
 800cde4:	68f8      	ldr	r0, [r7, #12]
 800cde6:	f7ff feb7 	bl	800cb58 <pbuf_init_alloced_pbuf>
  return p;
 800cdea:	68fb      	ldr	r3, [r7, #12]
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3710      	adds	r7, #16
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}
 800cdf4:	080199e4 	.word	0x080199e4
 800cdf8:	08019ae8 	.word	0x08019ae8
 800cdfc:	08019a44 	.word	0x08019a44

0800ce00 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b088      	sub	sp, #32
 800ce04:	af02      	add	r7, sp, #8
 800ce06:	607b      	str	r3, [r7, #4]
 800ce08:	4603      	mov	r3, r0
 800ce0a:	73fb      	strb	r3, [r7, #15]
 800ce0c:	460b      	mov	r3, r1
 800ce0e:	81bb      	strh	r3, [r7, #12]
 800ce10:	4613      	mov	r3, r2
 800ce12:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800ce14:	7bfb      	ldrb	r3, [r7, #15]
 800ce16:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ce18:	8a7b      	ldrh	r3, [r7, #18]
 800ce1a:	3303      	adds	r3, #3
 800ce1c:	f023 0203 	bic.w	r2, r3, #3
 800ce20:	89bb      	ldrh	r3, [r7, #12]
 800ce22:	441a      	add	r2, r3
 800ce24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce26:	429a      	cmp	r2, r3
 800ce28:	d901      	bls.n	800ce2e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	e018      	b.n	800ce60 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800ce2e:	6a3b      	ldr	r3, [r7, #32]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d007      	beq.n	800ce44 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800ce34:	8a7b      	ldrh	r3, [r7, #18]
 800ce36:	3303      	adds	r3, #3
 800ce38:	f023 0303 	bic.w	r3, r3, #3
 800ce3c:	6a3a      	ldr	r2, [r7, #32]
 800ce3e:	4413      	add	r3, r2
 800ce40:	617b      	str	r3, [r7, #20]
 800ce42:	e001      	b.n	800ce48 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800ce44:	2300      	movs	r3, #0
 800ce46:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	89b9      	ldrh	r1, [r7, #12]
 800ce4c:	89ba      	ldrh	r2, [r7, #12]
 800ce4e:	2302      	movs	r3, #2
 800ce50:	9301      	str	r3, [sp, #4]
 800ce52:	897b      	ldrh	r3, [r7, #10]
 800ce54:	9300      	str	r3, [sp, #0]
 800ce56:	460b      	mov	r3, r1
 800ce58:	6979      	ldr	r1, [r7, #20]
 800ce5a:	f7ff fe7d 	bl	800cb58 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800ce5e:	687b      	ldr	r3, [r7, #4]
}
 800ce60:	4618      	mov	r0, r3
 800ce62:	3718      	adds	r7, #24
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}

0800ce68 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b084      	sub	sp, #16
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
 800ce70:	460b      	mov	r3, r1
 800ce72:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d106      	bne.n	800ce88 <pbuf_realloc+0x20>
 800ce7a:	4b3a      	ldr	r3, [pc, #232]	; (800cf64 <pbuf_realloc+0xfc>)
 800ce7c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800ce80:	4939      	ldr	r1, [pc, #228]	; (800cf68 <pbuf_realloc+0x100>)
 800ce82:	483a      	ldr	r0, [pc, #232]	; (800cf6c <pbuf_realloc+0x104>)
 800ce84:	f00a f8bc 	bl	8017000 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	891b      	ldrh	r3, [r3, #8]
 800ce8c:	887a      	ldrh	r2, [r7, #2]
 800ce8e:	429a      	cmp	r2, r3
 800ce90:	d263      	bcs.n	800cf5a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	891a      	ldrh	r2, [r3, #8]
 800ce96:	887b      	ldrh	r3, [r7, #2]
 800ce98:	1ad3      	subs	r3, r2, r3
 800ce9a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800ce9c:	887b      	ldrh	r3, [r7, #2]
 800ce9e:	817b      	strh	r3, [r7, #10]
  q = p;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800cea4:	e018      	b.n	800ced8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	895b      	ldrh	r3, [r3, #10]
 800ceaa:	897a      	ldrh	r2, [r7, #10]
 800ceac:	1ad3      	subs	r3, r2, r3
 800ceae:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	891a      	ldrh	r2, [r3, #8]
 800ceb4:	893b      	ldrh	r3, [r7, #8]
 800ceb6:	1ad3      	subs	r3, r2, r3
 800ceb8:	b29a      	uxth	r2, r3
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d106      	bne.n	800ced8 <pbuf_realloc+0x70>
 800ceca:	4b26      	ldr	r3, [pc, #152]	; (800cf64 <pbuf_realloc+0xfc>)
 800cecc:	f240 12af 	movw	r2, #431	; 0x1af
 800ced0:	4927      	ldr	r1, [pc, #156]	; (800cf70 <pbuf_realloc+0x108>)
 800ced2:	4826      	ldr	r0, [pc, #152]	; (800cf6c <pbuf_realloc+0x104>)
 800ced4:	f00a f894 	bl	8017000 <iprintf>
  while (rem_len > q->len) {
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	895b      	ldrh	r3, [r3, #10]
 800cedc:	897a      	ldrh	r2, [r7, #10]
 800cede:	429a      	cmp	r2, r3
 800cee0:	d8e1      	bhi.n	800cea6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	7b1b      	ldrb	r3, [r3, #12]
 800cee6:	f003 030f 	and.w	r3, r3, #15
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d121      	bne.n	800cf32 <pbuf_realloc+0xca>
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	895b      	ldrh	r3, [r3, #10]
 800cef2:	897a      	ldrh	r2, [r7, #10]
 800cef4:	429a      	cmp	r2, r3
 800cef6:	d01c      	beq.n	800cf32 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	7b5b      	ldrb	r3, [r3, #13]
 800cefc:	f003 0302 	and.w	r3, r3, #2
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d116      	bne.n	800cf32 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	685a      	ldr	r2, [r3, #4]
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	1ad3      	subs	r3, r2, r3
 800cf0c:	b29a      	uxth	r2, r3
 800cf0e:	897b      	ldrh	r3, [r7, #10]
 800cf10:	4413      	add	r3, r2
 800cf12:	b29b      	uxth	r3, r3
 800cf14:	4619      	mov	r1, r3
 800cf16:	68f8      	ldr	r0, [r7, #12]
 800cf18:	f7fe ffaa 	bl	800be70 <mem_trim>
 800cf1c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d106      	bne.n	800cf32 <pbuf_realloc+0xca>
 800cf24:	4b0f      	ldr	r3, [pc, #60]	; (800cf64 <pbuf_realloc+0xfc>)
 800cf26:	f240 12bd 	movw	r2, #445	; 0x1bd
 800cf2a:	4912      	ldr	r1, [pc, #72]	; (800cf74 <pbuf_realloc+0x10c>)
 800cf2c:	480f      	ldr	r0, [pc, #60]	; (800cf6c <pbuf_realloc+0x104>)
 800cf2e:	f00a f867 	bl	8017000 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	897a      	ldrh	r2, [r7, #10]
 800cf36:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	895a      	ldrh	r2, [r3, #10]
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d004      	beq.n	800cf52 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	f000 f943 	bl	800d1d8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	2200      	movs	r2, #0
 800cf56:	601a      	str	r2, [r3, #0]
 800cf58:	e000      	b.n	800cf5c <pbuf_realloc+0xf4>
    return;
 800cf5a:	bf00      	nop

}
 800cf5c:	3710      	adds	r7, #16
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}
 800cf62:	bf00      	nop
 800cf64:	080199e4 	.word	0x080199e4
 800cf68:	08019afc 	.word	0x08019afc
 800cf6c:	08019a44 	.word	0x08019a44
 800cf70:	08019b14 	.word	0x08019b14
 800cf74:	08019b2c 	.word	0x08019b2c

0800cf78 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b086      	sub	sp, #24
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	60f8      	str	r0, [r7, #12]
 800cf80:	60b9      	str	r1, [r7, #8]
 800cf82:	4613      	mov	r3, r2
 800cf84:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d106      	bne.n	800cf9a <pbuf_add_header_impl+0x22>
 800cf8c:	4b2b      	ldr	r3, [pc, #172]	; (800d03c <pbuf_add_header_impl+0xc4>)
 800cf8e:	f240 12df 	movw	r2, #479	; 0x1df
 800cf92:	492b      	ldr	r1, [pc, #172]	; (800d040 <pbuf_add_header_impl+0xc8>)
 800cf94:	482b      	ldr	r0, [pc, #172]	; (800d044 <pbuf_add_header_impl+0xcc>)
 800cf96:	f00a f833 	bl	8017000 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d003      	beq.n	800cfa8 <pbuf_add_header_impl+0x30>
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cfa6:	d301      	bcc.n	800cfac <pbuf_add_header_impl+0x34>
    return 1;
 800cfa8:	2301      	movs	r3, #1
 800cfaa:	e043      	b.n	800d034 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d101      	bne.n	800cfb6 <pbuf_add_header_impl+0x3e>
    return 0;
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	e03e      	b.n	800d034 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	891a      	ldrh	r2, [r3, #8]
 800cfbe:	8a7b      	ldrh	r3, [r7, #18]
 800cfc0:	4413      	add	r3, r2
 800cfc2:	b29b      	uxth	r3, r3
 800cfc4:	8a7a      	ldrh	r2, [r7, #18]
 800cfc6:	429a      	cmp	r2, r3
 800cfc8:	d901      	bls.n	800cfce <pbuf_add_header_impl+0x56>
    return 1;
 800cfca:	2301      	movs	r3, #1
 800cfcc:	e032      	b.n	800d034 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	7b1b      	ldrb	r3, [r3, #12]
 800cfd2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800cfd4:	8a3b      	ldrh	r3, [r7, #16]
 800cfd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d00c      	beq.n	800cff8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	685a      	ldr	r2, [r3, #4]
 800cfe2:	68bb      	ldr	r3, [r7, #8]
 800cfe4:	425b      	negs	r3, r3
 800cfe6:	4413      	add	r3, r2
 800cfe8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	3310      	adds	r3, #16
 800cfee:	697a      	ldr	r2, [r7, #20]
 800cff0:	429a      	cmp	r2, r3
 800cff2:	d20d      	bcs.n	800d010 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800cff4:	2301      	movs	r3, #1
 800cff6:	e01d      	b.n	800d034 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800cff8:	79fb      	ldrb	r3, [r7, #7]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d006      	beq.n	800d00c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	685a      	ldr	r2, [r3, #4]
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	425b      	negs	r3, r3
 800d006:	4413      	add	r3, r2
 800d008:	617b      	str	r3, [r7, #20]
 800d00a:	e001      	b.n	800d010 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d00c:	2301      	movs	r3, #1
 800d00e:	e011      	b.n	800d034 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	697a      	ldr	r2, [r7, #20]
 800d014:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	895a      	ldrh	r2, [r3, #10]
 800d01a:	8a7b      	ldrh	r3, [r7, #18]
 800d01c:	4413      	add	r3, r2
 800d01e:	b29a      	uxth	r2, r3
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	891a      	ldrh	r2, [r3, #8]
 800d028:	8a7b      	ldrh	r3, [r7, #18]
 800d02a:	4413      	add	r3, r2
 800d02c:	b29a      	uxth	r2, r3
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	811a      	strh	r2, [r3, #8]


  return 0;
 800d032:	2300      	movs	r3, #0
}
 800d034:	4618      	mov	r0, r3
 800d036:	3718      	adds	r7, #24
 800d038:	46bd      	mov	sp, r7
 800d03a:	bd80      	pop	{r7, pc}
 800d03c:	080199e4 	.word	0x080199e4
 800d040:	08019b48 	.word	0x08019b48
 800d044:	08019a44 	.word	0x08019a44

0800d048 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b082      	sub	sp, #8
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
 800d050:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d052:	2200      	movs	r2, #0
 800d054:	6839      	ldr	r1, [r7, #0]
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f7ff ff8e 	bl	800cf78 <pbuf_add_header_impl>
 800d05c:	4603      	mov	r3, r0
}
 800d05e:	4618      	mov	r0, r3
 800d060:	3708      	adds	r7, #8
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}
	...

0800d068 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b084      	sub	sp, #16
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
 800d070:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d106      	bne.n	800d086 <pbuf_remove_header+0x1e>
 800d078:	4b20      	ldr	r3, [pc, #128]	; (800d0fc <pbuf_remove_header+0x94>)
 800d07a:	f240 224b 	movw	r2, #587	; 0x24b
 800d07e:	4920      	ldr	r1, [pc, #128]	; (800d100 <pbuf_remove_header+0x98>)
 800d080:	4820      	ldr	r0, [pc, #128]	; (800d104 <pbuf_remove_header+0x9c>)
 800d082:	f009 ffbd 	bl	8017000 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d003      	beq.n	800d094 <pbuf_remove_header+0x2c>
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d092:	d301      	bcc.n	800d098 <pbuf_remove_header+0x30>
    return 1;
 800d094:	2301      	movs	r3, #1
 800d096:	e02c      	b.n	800d0f2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d101      	bne.n	800d0a2 <pbuf_remove_header+0x3a>
    return 0;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	e027      	b.n	800d0f2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	895b      	ldrh	r3, [r3, #10]
 800d0aa:	89fa      	ldrh	r2, [r7, #14]
 800d0ac:	429a      	cmp	r2, r3
 800d0ae:	d908      	bls.n	800d0c2 <pbuf_remove_header+0x5a>
 800d0b0:	4b12      	ldr	r3, [pc, #72]	; (800d0fc <pbuf_remove_header+0x94>)
 800d0b2:	f240 2255 	movw	r2, #597	; 0x255
 800d0b6:	4914      	ldr	r1, [pc, #80]	; (800d108 <pbuf_remove_header+0xa0>)
 800d0b8:	4812      	ldr	r0, [pc, #72]	; (800d104 <pbuf_remove_header+0x9c>)
 800d0ba:	f009 ffa1 	bl	8017000 <iprintf>
 800d0be:	2301      	movs	r3, #1
 800d0c0:	e017      	b.n	800d0f2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	685b      	ldr	r3, [r3, #4]
 800d0c6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	685a      	ldr	r2, [r3, #4]
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	441a      	add	r2, r3
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	895a      	ldrh	r2, [r3, #10]
 800d0d8:	89fb      	ldrh	r3, [r7, #14]
 800d0da:	1ad3      	subs	r3, r2, r3
 800d0dc:	b29a      	uxth	r2, r3
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	891a      	ldrh	r2, [r3, #8]
 800d0e6:	89fb      	ldrh	r3, [r7, #14]
 800d0e8:	1ad3      	subs	r3, r2, r3
 800d0ea:	b29a      	uxth	r2, r3
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d0f0:	2300      	movs	r3, #0
}
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	3710      	adds	r7, #16
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd80      	pop	{r7, pc}
 800d0fa:	bf00      	nop
 800d0fc:	080199e4 	.word	0x080199e4
 800d100:	08019b48 	.word	0x08019b48
 800d104:	08019a44 	.word	0x08019a44
 800d108:	08019b54 	.word	0x08019b54

0800d10c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b082      	sub	sp, #8
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
 800d114:	460b      	mov	r3, r1
 800d116:	807b      	strh	r3, [r7, #2]
 800d118:	4613      	mov	r3, r2
 800d11a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d11c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d120:	2b00      	cmp	r3, #0
 800d122:	da08      	bge.n	800d136 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d124:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d128:	425b      	negs	r3, r3
 800d12a:	4619      	mov	r1, r3
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f7ff ff9b 	bl	800d068 <pbuf_remove_header>
 800d132:	4603      	mov	r3, r0
 800d134:	e007      	b.n	800d146 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d136:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d13a:	787a      	ldrb	r2, [r7, #1]
 800d13c:	4619      	mov	r1, r3
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	f7ff ff1a 	bl	800cf78 <pbuf_add_header_impl>
 800d144:	4603      	mov	r3, r0
  }
}
 800d146:	4618      	mov	r0, r3
 800d148:	3708      	adds	r7, #8
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}

0800d14e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d14e:	b580      	push	{r7, lr}
 800d150:	b082      	sub	sp, #8
 800d152:	af00      	add	r7, sp, #0
 800d154:	6078      	str	r0, [r7, #4]
 800d156:	460b      	mov	r3, r1
 800d158:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d15a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d15e:	2201      	movs	r2, #1
 800d160:	4619      	mov	r1, r3
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f7ff ffd2 	bl	800d10c <pbuf_header_impl>
 800d168:	4603      	mov	r3, r0
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	3708      	adds	r7, #8
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}

0800d172 <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 800d172:	b580      	push	{r7, lr}
 800d174:	b086      	sub	sp, #24
 800d176:	af00      	add	r7, sp, #0
 800d178:	6078      	str	r0, [r7, #4]
 800d17a:	460b      	mov	r3, r1
 800d17c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 800d182:	887b      	ldrh	r3, [r7, #2]
 800d184:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800d186:	e01c      	b.n	800d1c2 <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 800d188:	697b      	ldr	r3, [r7, #20]
 800d18a:	895b      	ldrh	r3, [r3, #10]
 800d18c:	8a7a      	ldrh	r2, [r7, #18]
 800d18e:	429a      	cmp	r2, r3
 800d190:	d310      	bcc.n	800d1b4 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	895b      	ldrh	r3, [r3, #10]
 800d19a:	8a7a      	ldrh	r2, [r7, #18]
 800d19c:	1ad3      	subs	r3, r2, r3
 800d19e:	827b      	strh	r3, [r7, #18]
      p = p->next;
 800d1a0:	697b      	ldr	r3, [r7, #20]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	617b      	str	r3, [r7, #20]
      f->next = 0;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 800d1ac:	68f8      	ldr	r0, [r7, #12]
 800d1ae:	f000 f813 	bl	800d1d8 <pbuf_free>
 800d1b2:	e006      	b.n	800d1c2 <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 800d1b4:	8a7b      	ldrh	r3, [r7, #18]
 800d1b6:	4619      	mov	r1, r3
 800d1b8:	6978      	ldr	r0, [r7, #20]
 800d1ba:	f7ff ff55 	bl	800d068 <pbuf_remove_header>
      free_left = 0;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800d1c2:	8a7b      	ldrh	r3, [r7, #18]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d002      	beq.n	800d1ce <pbuf_free_header+0x5c>
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d1dc      	bne.n	800d188 <pbuf_free_header+0x16>
    }
  }
  return p;
 800d1ce:	697b      	ldr	r3, [r7, #20]
}
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	3718      	adds	r7, #24
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bd80      	pop	{r7, pc}

0800d1d8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b088      	sub	sp, #32
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d10b      	bne.n	800d1fe <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d106      	bne.n	800d1fa <pbuf_free+0x22>
 800d1ec:	4b3b      	ldr	r3, [pc, #236]	; (800d2dc <pbuf_free+0x104>)
 800d1ee:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d1f2:	493b      	ldr	r1, [pc, #236]	; (800d2e0 <pbuf_free+0x108>)
 800d1f4:	483b      	ldr	r0, [pc, #236]	; (800d2e4 <pbuf_free+0x10c>)
 800d1f6:	f009 ff03 	bl	8017000 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	e069      	b.n	800d2d2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d1fe:	2300      	movs	r3, #0
 800d200:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d202:	e062      	b.n	800d2ca <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d204:	f009 fe7a 	bl	8016efc <sys_arch_protect>
 800d208:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	7b9b      	ldrb	r3, [r3, #14]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d106      	bne.n	800d220 <pbuf_free+0x48>
 800d212:	4b32      	ldr	r3, [pc, #200]	; (800d2dc <pbuf_free+0x104>)
 800d214:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d218:	4933      	ldr	r1, [pc, #204]	; (800d2e8 <pbuf_free+0x110>)
 800d21a:	4832      	ldr	r0, [pc, #200]	; (800d2e4 <pbuf_free+0x10c>)
 800d21c:	f009 fef0 	bl	8017000 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	7b9b      	ldrb	r3, [r3, #14]
 800d224:	3b01      	subs	r3, #1
 800d226:	b2da      	uxtb	r2, r3
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	739a      	strb	r2, [r3, #14]
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	7b9b      	ldrb	r3, [r3, #14]
 800d230:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800d232:	69b8      	ldr	r0, [r7, #24]
 800d234:	f009 fe70 	bl	8016f18 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d238:	7dfb      	ldrb	r3, [r7, #23]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d143      	bne.n	800d2c6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	7b1b      	ldrb	r3, [r3, #12]
 800d248:	f003 030f 	and.w	r3, r3, #15
 800d24c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	7b5b      	ldrb	r3, [r3, #13]
 800d252:	f003 0302 	and.w	r3, r3, #2
 800d256:	2b00      	cmp	r3, #0
 800d258:	d011      	beq.n	800d27e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	691b      	ldr	r3, [r3, #16]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d106      	bne.n	800d274 <pbuf_free+0x9c>
 800d266:	4b1d      	ldr	r3, [pc, #116]	; (800d2dc <pbuf_free+0x104>)
 800d268:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d26c:	491f      	ldr	r1, [pc, #124]	; (800d2ec <pbuf_free+0x114>)
 800d26e:	481d      	ldr	r0, [pc, #116]	; (800d2e4 <pbuf_free+0x10c>)
 800d270:	f009 fec6 	bl	8017000 <iprintf>
        pc->custom_free_function(p);
 800d274:	68bb      	ldr	r3, [r7, #8]
 800d276:	691b      	ldr	r3, [r3, #16]
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	4798      	blx	r3
 800d27c:	e01d      	b.n	800d2ba <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d27e:	7bfb      	ldrb	r3, [r7, #15]
 800d280:	2b02      	cmp	r3, #2
 800d282:	d104      	bne.n	800d28e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800d284:	6879      	ldr	r1, [r7, #4]
 800d286:	200c      	movs	r0, #12
 800d288:	f7ff f8d0 	bl	800c42c <memp_free>
 800d28c:	e015      	b.n	800d2ba <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d28e:	7bfb      	ldrb	r3, [r7, #15]
 800d290:	2b01      	cmp	r3, #1
 800d292:	d104      	bne.n	800d29e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800d294:	6879      	ldr	r1, [r7, #4]
 800d296:	200b      	movs	r0, #11
 800d298:	f7ff f8c8 	bl	800c42c <memp_free>
 800d29c:	e00d      	b.n	800d2ba <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d29e:	7bfb      	ldrb	r3, [r7, #15]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d103      	bne.n	800d2ac <pbuf_free+0xd4>
          mem_free(p);
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f7fe fd53 	bl	800bd50 <mem_free>
 800d2aa:	e006      	b.n	800d2ba <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d2ac:	4b0b      	ldr	r3, [pc, #44]	; (800d2dc <pbuf_free+0x104>)
 800d2ae:	f240 320f 	movw	r2, #783	; 0x30f
 800d2b2:	490f      	ldr	r1, [pc, #60]	; (800d2f0 <pbuf_free+0x118>)
 800d2b4:	480b      	ldr	r0, [pc, #44]	; (800d2e4 <pbuf_free+0x10c>)
 800d2b6:	f009 fea3 	bl	8017000 <iprintf>
        }
      }
      count++;
 800d2ba:	7ffb      	ldrb	r3, [r7, #31]
 800d2bc:	3301      	adds	r3, #1
 800d2be:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d2c0:	693b      	ldr	r3, [r7, #16]
 800d2c2:	607b      	str	r3, [r7, #4]
 800d2c4:	e001      	b.n	800d2ca <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d199      	bne.n	800d204 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d2d0:	7ffb      	ldrb	r3, [r7, #31]
}
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	3720      	adds	r7, #32
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bd80      	pop	{r7, pc}
 800d2da:	bf00      	nop
 800d2dc:	080199e4 	.word	0x080199e4
 800d2e0:	08019b48 	.word	0x08019b48
 800d2e4:	08019a44 	.word	0x08019a44
 800d2e8:	08019b74 	.word	0x08019b74
 800d2ec:	08019b8c 	.word	0x08019b8c
 800d2f0:	08019bb0 	.word	0x08019bb0

0800d2f4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d2f4:	b480      	push	{r7}
 800d2f6:	b085      	sub	sp, #20
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d300:	e005      	b.n	800d30e <pbuf_clen+0x1a>
    ++len;
 800d302:	89fb      	ldrh	r3, [r7, #14]
 800d304:	3301      	adds	r3, #1
 800d306:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d1f6      	bne.n	800d302 <pbuf_clen+0xe>
  }
  return len;
 800d314:	89fb      	ldrh	r3, [r7, #14]
}
 800d316:	4618      	mov	r0, r3
 800d318:	3714      	adds	r7, #20
 800d31a:	46bd      	mov	sp, r7
 800d31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d320:	4770      	bx	lr
	...

0800d324 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b084      	sub	sp, #16
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d016      	beq.n	800d360 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d332:	f009 fde3 	bl	8016efc <sys_arch_protect>
 800d336:	60f8      	str	r0, [r7, #12]
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	7b9b      	ldrb	r3, [r3, #14]
 800d33c:	3301      	adds	r3, #1
 800d33e:	b2da      	uxtb	r2, r3
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	739a      	strb	r2, [r3, #14]
 800d344:	68f8      	ldr	r0, [r7, #12]
 800d346:	f009 fde7 	bl	8016f18 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	7b9b      	ldrb	r3, [r3, #14]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d106      	bne.n	800d360 <pbuf_ref+0x3c>
 800d352:	4b05      	ldr	r3, [pc, #20]	; (800d368 <pbuf_ref+0x44>)
 800d354:	f240 3242 	movw	r2, #834	; 0x342
 800d358:	4904      	ldr	r1, [pc, #16]	; (800d36c <pbuf_ref+0x48>)
 800d35a:	4805      	ldr	r0, [pc, #20]	; (800d370 <pbuf_ref+0x4c>)
 800d35c:	f009 fe50 	bl	8017000 <iprintf>
  }
}
 800d360:	bf00      	nop
 800d362:	3710      	adds	r7, #16
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}
 800d368:	080199e4 	.word	0x080199e4
 800d36c:	08019bc4 	.word	0x08019bc4
 800d370:	08019a44 	.word	0x08019a44

0800d374 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b084      	sub	sp, #16
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
 800d37c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d002      	beq.n	800d38a <pbuf_cat+0x16>
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d107      	bne.n	800d39a <pbuf_cat+0x26>
 800d38a:	4b20      	ldr	r3, [pc, #128]	; (800d40c <pbuf_cat+0x98>)
 800d38c:	f240 3259 	movw	r2, #857	; 0x359
 800d390:	491f      	ldr	r1, [pc, #124]	; (800d410 <pbuf_cat+0x9c>)
 800d392:	4820      	ldr	r0, [pc, #128]	; (800d414 <pbuf_cat+0xa0>)
 800d394:	f009 fe34 	bl	8017000 <iprintf>
 800d398:	e034      	b.n	800d404 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	60fb      	str	r3, [r7, #12]
 800d39e:	e00a      	b.n	800d3b6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	891a      	ldrh	r2, [r3, #8]
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	891b      	ldrh	r3, [r3, #8]
 800d3a8:	4413      	add	r3, r2
 800d3aa:	b29a      	uxth	r2, r3
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	60fb      	str	r3, [r7, #12]
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d1f0      	bne.n	800d3a0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	891a      	ldrh	r2, [r3, #8]
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	895b      	ldrh	r3, [r3, #10]
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d006      	beq.n	800d3d8 <pbuf_cat+0x64>
 800d3ca:	4b10      	ldr	r3, [pc, #64]	; (800d40c <pbuf_cat+0x98>)
 800d3cc:	f240 3262 	movw	r2, #866	; 0x362
 800d3d0:	4911      	ldr	r1, [pc, #68]	; (800d418 <pbuf_cat+0xa4>)
 800d3d2:	4810      	ldr	r0, [pc, #64]	; (800d414 <pbuf_cat+0xa0>)
 800d3d4:	f009 fe14 	bl	8017000 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d006      	beq.n	800d3ee <pbuf_cat+0x7a>
 800d3e0:	4b0a      	ldr	r3, [pc, #40]	; (800d40c <pbuf_cat+0x98>)
 800d3e2:	f240 3263 	movw	r2, #867	; 0x363
 800d3e6:	490d      	ldr	r1, [pc, #52]	; (800d41c <pbuf_cat+0xa8>)
 800d3e8:	480a      	ldr	r0, [pc, #40]	; (800d414 <pbuf_cat+0xa0>)
 800d3ea:	f009 fe09 	bl	8017000 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	891a      	ldrh	r2, [r3, #8]
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	891b      	ldrh	r3, [r3, #8]
 800d3f6:	4413      	add	r3, r2
 800d3f8:	b29a      	uxth	r2, r3
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	683a      	ldr	r2, [r7, #0]
 800d402:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d404:	3710      	adds	r7, #16
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}
 800d40a:	bf00      	nop
 800d40c:	080199e4 	.word	0x080199e4
 800d410:	08019bd8 	.word	0x08019bd8
 800d414:	08019a44 	.word	0x08019a44
 800d418:	08019c10 	.word	0x08019c10
 800d41c:	08019c40 	.word	0x08019c40

0800d420 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b082      	sub	sp, #8
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
 800d428:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800d42a:	6839      	ldr	r1, [r7, #0]
 800d42c:	6878      	ldr	r0, [r7, #4]
 800d42e:	f7ff ffa1 	bl	800d374 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800d432:	6838      	ldr	r0, [r7, #0]
 800d434:	f7ff ff76 	bl	800d324 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800d438:	bf00      	nop
 800d43a:	3708      	adds	r7, #8
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}

0800d440 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b086      	sub	sp, #24
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
 800d448:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d44a:	2300      	movs	r3, #0
 800d44c:	617b      	str	r3, [r7, #20]
 800d44e:	2300      	movs	r3, #0
 800d450:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d008      	beq.n	800d46a <pbuf_copy+0x2a>
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d005      	beq.n	800d46a <pbuf_copy+0x2a>
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	891a      	ldrh	r2, [r3, #8]
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	891b      	ldrh	r3, [r3, #8]
 800d466:	429a      	cmp	r2, r3
 800d468:	d209      	bcs.n	800d47e <pbuf_copy+0x3e>
 800d46a:	4b57      	ldr	r3, [pc, #348]	; (800d5c8 <pbuf_copy+0x188>)
 800d46c:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d470:	4956      	ldr	r1, [pc, #344]	; (800d5cc <pbuf_copy+0x18c>)
 800d472:	4857      	ldr	r0, [pc, #348]	; (800d5d0 <pbuf_copy+0x190>)
 800d474:	f009 fdc4 	bl	8017000 <iprintf>
 800d478:	f06f 030f 	mvn.w	r3, #15
 800d47c:	e09f      	b.n	800d5be <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	895b      	ldrh	r3, [r3, #10]
 800d482:	461a      	mov	r2, r3
 800d484:	697b      	ldr	r3, [r7, #20]
 800d486:	1ad2      	subs	r2, r2, r3
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	895b      	ldrh	r3, [r3, #10]
 800d48c:	4619      	mov	r1, r3
 800d48e:	693b      	ldr	r3, [r7, #16]
 800d490:	1acb      	subs	r3, r1, r3
 800d492:	429a      	cmp	r2, r3
 800d494:	d306      	bcc.n	800d4a4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	895b      	ldrh	r3, [r3, #10]
 800d49a:	461a      	mov	r2, r3
 800d49c:	693b      	ldr	r3, [r7, #16]
 800d49e:	1ad3      	subs	r3, r2, r3
 800d4a0:	60fb      	str	r3, [r7, #12]
 800d4a2:	e005      	b.n	800d4b0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	895b      	ldrh	r3, [r3, #10]
 800d4a8:	461a      	mov	r2, r3
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	1ad3      	subs	r3, r2, r3
 800d4ae:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	685a      	ldr	r2, [r3, #4]
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	18d0      	adds	r0, r2, r3
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	685a      	ldr	r2, [r3, #4]
 800d4bc:	693b      	ldr	r3, [r7, #16]
 800d4be:	4413      	add	r3, r2
 800d4c0:	68fa      	ldr	r2, [r7, #12]
 800d4c2:	4619      	mov	r1, r3
 800d4c4:	f009 fd6c 	bl	8016fa0 <memcpy>
    offset_to += len;
 800d4c8:	697a      	ldr	r2, [r7, #20]
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	4413      	add	r3, r2
 800d4ce:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d4d0:	693a      	ldr	r2, [r7, #16]
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	4413      	add	r3, r2
 800d4d6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	895b      	ldrh	r3, [r3, #10]
 800d4dc:	461a      	mov	r2, r3
 800d4de:	697b      	ldr	r3, [r7, #20]
 800d4e0:	4293      	cmp	r3, r2
 800d4e2:	d906      	bls.n	800d4f2 <pbuf_copy+0xb2>
 800d4e4:	4b38      	ldr	r3, [pc, #224]	; (800d5c8 <pbuf_copy+0x188>)
 800d4e6:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d4ea:	493a      	ldr	r1, [pc, #232]	; (800d5d4 <pbuf_copy+0x194>)
 800d4ec:	4838      	ldr	r0, [pc, #224]	; (800d5d0 <pbuf_copy+0x190>)
 800d4ee:	f009 fd87 	bl	8017000 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	895b      	ldrh	r3, [r3, #10]
 800d4f6:	461a      	mov	r2, r3
 800d4f8:	693b      	ldr	r3, [r7, #16]
 800d4fa:	4293      	cmp	r3, r2
 800d4fc:	d906      	bls.n	800d50c <pbuf_copy+0xcc>
 800d4fe:	4b32      	ldr	r3, [pc, #200]	; (800d5c8 <pbuf_copy+0x188>)
 800d500:	f240 32da 	movw	r2, #986	; 0x3da
 800d504:	4934      	ldr	r1, [pc, #208]	; (800d5d8 <pbuf_copy+0x198>)
 800d506:	4832      	ldr	r0, [pc, #200]	; (800d5d0 <pbuf_copy+0x190>)
 800d508:	f009 fd7a 	bl	8017000 <iprintf>
    if (offset_from >= p_from->len) {
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	895b      	ldrh	r3, [r3, #10]
 800d510:	461a      	mov	r2, r3
 800d512:	693b      	ldr	r3, [r7, #16]
 800d514:	4293      	cmp	r3, r2
 800d516:	d304      	bcc.n	800d522 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d518:	2300      	movs	r3, #0
 800d51a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	895b      	ldrh	r3, [r3, #10]
 800d526:	461a      	mov	r2, r3
 800d528:	697b      	ldr	r3, [r7, #20]
 800d52a:	4293      	cmp	r3, r2
 800d52c:	d114      	bne.n	800d558 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d52e:	2300      	movs	r3, #0
 800d530:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d10c      	bne.n	800d558 <pbuf_copy+0x118>
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d009      	beq.n	800d558 <pbuf_copy+0x118>
 800d544:	4b20      	ldr	r3, [pc, #128]	; (800d5c8 <pbuf_copy+0x188>)
 800d546:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d54a:	4924      	ldr	r1, [pc, #144]	; (800d5dc <pbuf_copy+0x19c>)
 800d54c:	4820      	ldr	r0, [pc, #128]	; (800d5d0 <pbuf_copy+0x190>)
 800d54e:	f009 fd57 	bl	8017000 <iprintf>
 800d552:	f06f 030f 	mvn.w	r3, #15
 800d556:	e032      	b.n	800d5be <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d013      	beq.n	800d586 <pbuf_copy+0x146>
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	895a      	ldrh	r2, [r3, #10]
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	891b      	ldrh	r3, [r3, #8]
 800d566:	429a      	cmp	r2, r3
 800d568:	d10d      	bne.n	800d586 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d009      	beq.n	800d586 <pbuf_copy+0x146>
 800d572:	4b15      	ldr	r3, [pc, #84]	; (800d5c8 <pbuf_copy+0x188>)
 800d574:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800d578:	4919      	ldr	r1, [pc, #100]	; (800d5e0 <pbuf_copy+0x1a0>)
 800d57a:	4815      	ldr	r0, [pc, #84]	; (800d5d0 <pbuf_copy+0x190>)
 800d57c:	f009 fd40 	bl	8017000 <iprintf>
 800d580:	f06f 0305 	mvn.w	r3, #5
 800d584:	e01b      	b.n	800d5be <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d013      	beq.n	800d5b4 <pbuf_copy+0x174>
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	895a      	ldrh	r2, [r3, #10]
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	891b      	ldrh	r3, [r3, #8]
 800d594:	429a      	cmp	r2, r3
 800d596:	d10d      	bne.n	800d5b4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d009      	beq.n	800d5b4 <pbuf_copy+0x174>
 800d5a0:	4b09      	ldr	r3, [pc, #36]	; (800d5c8 <pbuf_copy+0x188>)
 800d5a2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800d5a6:	490e      	ldr	r1, [pc, #56]	; (800d5e0 <pbuf_copy+0x1a0>)
 800d5a8:	4809      	ldr	r0, [pc, #36]	; (800d5d0 <pbuf_copy+0x190>)
 800d5aa:	f009 fd29 	bl	8017000 <iprintf>
 800d5ae:	f06f 0305 	mvn.w	r3, #5
 800d5b2:	e004      	b.n	800d5be <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	f47f af61 	bne.w	800d47e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d5bc:	2300      	movs	r3, #0
}
 800d5be:	4618      	mov	r0, r3
 800d5c0:	3718      	adds	r7, #24
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}
 800d5c6:	bf00      	nop
 800d5c8:	080199e4 	.word	0x080199e4
 800d5cc:	08019c8c 	.word	0x08019c8c
 800d5d0:	08019a44 	.word	0x08019a44
 800d5d4:	08019cbc 	.word	0x08019cbc
 800d5d8:	08019cd4 	.word	0x08019cd4
 800d5dc:	08019cf0 	.word	0x08019cf0
 800d5e0:	08019d00 	.word	0x08019d00

0800d5e4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b088      	sub	sp, #32
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	60f8      	str	r0, [r7, #12]
 800d5ec:	60b9      	str	r1, [r7, #8]
 800d5ee:	4611      	mov	r1, r2
 800d5f0:	461a      	mov	r2, r3
 800d5f2:	460b      	mov	r3, r1
 800d5f4:	80fb      	strh	r3, [r7, #6]
 800d5f6:	4613      	mov	r3, r2
 800d5f8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d5fe:	2300      	movs	r3, #0
 800d600:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d108      	bne.n	800d61a <pbuf_copy_partial+0x36>
 800d608:	4b2b      	ldr	r3, [pc, #172]	; (800d6b8 <pbuf_copy_partial+0xd4>)
 800d60a:	f240 420a 	movw	r2, #1034	; 0x40a
 800d60e:	492b      	ldr	r1, [pc, #172]	; (800d6bc <pbuf_copy_partial+0xd8>)
 800d610:	482b      	ldr	r0, [pc, #172]	; (800d6c0 <pbuf_copy_partial+0xdc>)
 800d612:	f009 fcf5 	bl	8017000 <iprintf>
 800d616:	2300      	movs	r3, #0
 800d618:	e04a      	b.n	800d6b0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d108      	bne.n	800d632 <pbuf_copy_partial+0x4e>
 800d620:	4b25      	ldr	r3, [pc, #148]	; (800d6b8 <pbuf_copy_partial+0xd4>)
 800d622:	f240 420b 	movw	r2, #1035	; 0x40b
 800d626:	4927      	ldr	r1, [pc, #156]	; (800d6c4 <pbuf_copy_partial+0xe0>)
 800d628:	4825      	ldr	r0, [pc, #148]	; (800d6c0 <pbuf_copy_partial+0xdc>)
 800d62a:	f009 fce9 	bl	8017000 <iprintf>
 800d62e:	2300      	movs	r3, #0
 800d630:	e03e      	b.n	800d6b0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	61fb      	str	r3, [r7, #28]
 800d636:	e034      	b.n	800d6a2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d638:	88bb      	ldrh	r3, [r7, #4]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d00a      	beq.n	800d654 <pbuf_copy_partial+0x70>
 800d63e:	69fb      	ldr	r3, [r7, #28]
 800d640:	895b      	ldrh	r3, [r3, #10]
 800d642:	88ba      	ldrh	r2, [r7, #4]
 800d644:	429a      	cmp	r2, r3
 800d646:	d305      	bcc.n	800d654 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d648:	69fb      	ldr	r3, [r7, #28]
 800d64a:	895b      	ldrh	r3, [r3, #10]
 800d64c:	88ba      	ldrh	r2, [r7, #4]
 800d64e:	1ad3      	subs	r3, r2, r3
 800d650:	80bb      	strh	r3, [r7, #4]
 800d652:	e023      	b.n	800d69c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d654:	69fb      	ldr	r3, [r7, #28]
 800d656:	895a      	ldrh	r2, [r3, #10]
 800d658:	88bb      	ldrh	r3, [r7, #4]
 800d65a:	1ad3      	subs	r3, r2, r3
 800d65c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d65e:	8b3a      	ldrh	r2, [r7, #24]
 800d660:	88fb      	ldrh	r3, [r7, #6]
 800d662:	429a      	cmp	r2, r3
 800d664:	d901      	bls.n	800d66a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d666:	88fb      	ldrh	r3, [r7, #6]
 800d668:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d66a:	8b7b      	ldrh	r3, [r7, #26]
 800d66c:	68ba      	ldr	r2, [r7, #8]
 800d66e:	18d0      	adds	r0, r2, r3
 800d670:	69fb      	ldr	r3, [r7, #28]
 800d672:	685a      	ldr	r2, [r3, #4]
 800d674:	88bb      	ldrh	r3, [r7, #4]
 800d676:	4413      	add	r3, r2
 800d678:	8b3a      	ldrh	r2, [r7, #24]
 800d67a:	4619      	mov	r1, r3
 800d67c:	f009 fc90 	bl	8016fa0 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d680:	8afa      	ldrh	r2, [r7, #22]
 800d682:	8b3b      	ldrh	r3, [r7, #24]
 800d684:	4413      	add	r3, r2
 800d686:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d688:	8b7a      	ldrh	r2, [r7, #26]
 800d68a:	8b3b      	ldrh	r3, [r7, #24]
 800d68c:	4413      	add	r3, r2
 800d68e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d690:	88fa      	ldrh	r2, [r7, #6]
 800d692:	8b3b      	ldrh	r3, [r7, #24]
 800d694:	1ad3      	subs	r3, r2, r3
 800d696:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d698:	2300      	movs	r3, #0
 800d69a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d69c:	69fb      	ldr	r3, [r7, #28]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	61fb      	str	r3, [r7, #28]
 800d6a2:	88fb      	ldrh	r3, [r7, #6]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d002      	beq.n	800d6ae <pbuf_copy_partial+0xca>
 800d6a8:	69fb      	ldr	r3, [r7, #28]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d1c4      	bne.n	800d638 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d6ae:	8afb      	ldrh	r3, [r7, #22]
}
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	3720      	adds	r7, #32
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}
 800d6b8:	080199e4 	.word	0x080199e4
 800d6bc:	08019d2c 	.word	0x08019d2c
 800d6c0:	08019a44 	.word	0x08019a44
 800d6c4:	08019d4c 	.word	0x08019d4c

0800d6c8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b084      	sub	sp, #16
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	603a      	str	r2, [r7, #0]
 800d6d2:	71fb      	strb	r3, [r7, #7]
 800d6d4:	460b      	mov	r3, r1
 800d6d6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	8919      	ldrh	r1, [r3, #8]
 800d6dc:	88ba      	ldrh	r2, [r7, #4]
 800d6de:	79fb      	ldrb	r3, [r7, #7]
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f7ff fa63 	bl	800cbac <pbuf_alloc>
 800d6e6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d101      	bne.n	800d6f2 <pbuf_clone+0x2a>
    return NULL;
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	e011      	b.n	800d716 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d6f2:	6839      	ldr	r1, [r7, #0]
 800d6f4:	68f8      	ldr	r0, [r7, #12]
 800d6f6:	f7ff fea3 	bl	800d440 <pbuf_copy>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d6fe:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d006      	beq.n	800d714 <pbuf_clone+0x4c>
 800d706:	4b06      	ldr	r3, [pc, #24]	; (800d720 <pbuf_clone+0x58>)
 800d708:	f240 5224 	movw	r2, #1316	; 0x524
 800d70c:	4905      	ldr	r1, [pc, #20]	; (800d724 <pbuf_clone+0x5c>)
 800d70e:	4806      	ldr	r0, [pc, #24]	; (800d728 <pbuf_clone+0x60>)
 800d710:	f009 fc76 	bl	8017000 <iprintf>
  return q;
 800d714:	68fb      	ldr	r3, [r7, #12]
}
 800d716:	4618      	mov	r0, r3
 800d718:	3710      	adds	r7, #16
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}
 800d71e:	bf00      	nop
 800d720:	080199e4 	.word	0x080199e4
 800d724:	08019e58 	.word	0x08019e58
 800d728:	08019a44 	.word	0x08019a44

0800d72c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d730:	f009 fc7e 	bl	8017030 <rand>
 800d734:	4603      	mov	r3, r0
 800d736:	b29b      	uxth	r3, r3
 800d738:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d73c:	b29b      	uxth	r3, r3
 800d73e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d742:	b29a      	uxth	r2, r3
 800d744:	4b01      	ldr	r3, [pc, #4]	; (800d74c <tcp_init+0x20>)
 800d746:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d748:	bf00      	nop
 800d74a:	bd80      	pop	{r7, pc}
 800d74c:	20000010 	.word	0x20000010

0800d750 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b082      	sub	sp, #8
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	7d1b      	ldrb	r3, [r3, #20]
 800d75c:	2b01      	cmp	r3, #1
 800d75e:	d105      	bne.n	800d76c <tcp_free+0x1c>
 800d760:	4b06      	ldr	r3, [pc, #24]	; (800d77c <tcp_free+0x2c>)
 800d762:	22d4      	movs	r2, #212	; 0xd4
 800d764:	4906      	ldr	r1, [pc, #24]	; (800d780 <tcp_free+0x30>)
 800d766:	4807      	ldr	r0, [pc, #28]	; (800d784 <tcp_free+0x34>)
 800d768:	f009 fc4a 	bl	8017000 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d76c:	6879      	ldr	r1, [r7, #4]
 800d76e:	2001      	movs	r0, #1
 800d770:	f7fe fe5c 	bl	800c42c <memp_free>
}
 800d774:	bf00      	nop
 800d776:	3708      	adds	r7, #8
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}
 800d77c:	08019ee4 	.word	0x08019ee4
 800d780:	08019f14 	.word	0x08019f14
 800d784:	08019f28 	.word	0x08019f28

0800d788 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b082      	sub	sp, #8
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	7d1b      	ldrb	r3, [r3, #20]
 800d794:	2b01      	cmp	r3, #1
 800d796:	d105      	bne.n	800d7a4 <tcp_free_listen+0x1c>
 800d798:	4b06      	ldr	r3, [pc, #24]	; (800d7b4 <tcp_free_listen+0x2c>)
 800d79a:	22df      	movs	r2, #223	; 0xdf
 800d79c:	4906      	ldr	r1, [pc, #24]	; (800d7b8 <tcp_free_listen+0x30>)
 800d79e:	4807      	ldr	r0, [pc, #28]	; (800d7bc <tcp_free_listen+0x34>)
 800d7a0:	f009 fc2e 	bl	8017000 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d7a4:	6879      	ldr	r1, [r7, #4]
 800d7a6:	2002      	movs	r0, #2
 800d7a8:	f7fe fe40 	bl	800c42c <memp_free>
}
 800d7ac:	bf00      	nop
 800d7ae:	3708      	adds	r7, #8
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}
 800d7b4:	08019ee4 	.word	0x08019ee4
 800d7b8:	08019f50 	.word	0x08019f50
 800d7bc:	08019f28 	.word	0x08019f28

0800d7c0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d7c4:	f000 ffdc 	bl	800e780 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d7c8:	4b07      	ldr	r3, [pc, #28]	; (800d7e8 <tcp_tmr+0x28>)
 800d7ca:	781b      	ldrb	r3, [r3, #0]
 800d7cc:	3301      	adds	r3, #1
 800d7ce:	b2da      	uxtb	r2, r3
 800d7d0:	4b05      	ldr	r3, [pc, #20]	; (800d7e8 <tcp_tmr+0x28>)
 800d7d2:	701a      	strb	r2, [r3, #0]
 800d7d4:	4b04      	ldr	r3, [pc, #16]	; (800d7e8 <tcp_tmr+0x28>)
 800d7d6:	781b      	ldrb	r3, [r3, #0]
 800d7d8:	f003 0301 	and.w	r3, r3, #1
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d001      	beq.n	800d7e4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d7e0:	f000 fc8e 	bl	800e100 <tcp_slowtmr>
  }
}
 800d7e4:	bf00      	nop
 800d7e6:	bd80      	pop	{r7, pc}
 800d7e8:	2000d159 	.word	0x2000d159

0800d7ec <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b084      	sub	sp, #16
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
 800d7f4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d105      	bne.n	800d808 <tcp_remove_listener+0x1c>
 800d7fc:	4b0d      	ldr	r3, [pc, #52]	; (800d834 <tcp_remove_listener+0x48>)
 800d7fe:	22ff      	movs	r2, #255	; 0xff
 800d800:	490d      	ldr	r1, [pc, #52]	; (800d838 <tcp_remove_listener+0x4c>)
 800d802:	480e      	ldr	r0, [pc, #56]	; (800d83c <tcp_remove_listener+0x50>)
 800d804:	f009 fbfc 	bl	8017000 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	60fb      	str	r3, [r7, #12]
 800d80c:	e00a      	b.n	800d824 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d812:	683a      	ldr	r2, [r7, #0]
 800d814:	429a      	cmp	r2, r3
 800d816:	d102      	bne.n	800d81e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	2200      	movs	r2, #0
 800d81c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	68db      	ldr	r3, [r3, #12]
 800d822:	60fb      	str	r3, [r7, #12]
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d1f1      	bne.n	800d80e <tcp_remove_listener+0x22>
    }
  }
}
 800d82a:	bf00      	nop
 800d82c:	bf00      	nop
 800d82e:	3710      	adds	r7, #16
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}
 800d834:	08019ee4 	.word	0x08019ee4
 800d838:	08019f6c 	.word	0x08019f6c
 800d83c:	08019f28 	.word	0x08019f28

0800d840 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b084      	sub	sp, #16
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d106      	bne.n	800d85c <tcp_listen_closed+0x1c>
 800d84e:	4b14      	ldr	r3, [pc, #80]	; (800d8a0 <tcp_listen_closed+0x60>)
 800d850:	f240 1211 	movw	r2, #273	; 0x111
 800d854:	4913      	ldr	r1, [pc, #76]	; (800d8a4 <tcp_listen_closed+0x64>)
 800d856:	4814      	ldr	r0, [pc, #80]	; (800d8a8 <tcp_listen_closed+0x68>)
 800d858:	f009 fbd2 	bl	8017000 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	7d1b      	ldrb	r3, [r3, #20]
 800d860:	2b01      	cmp	r3, #1
 800d862:	d006      	beq.n	800d872 <tcp_listen_closed+0x32>
 800d864:	4b0e      	ldr	r3, [pc, #56]	; (800d8a0 <tcp_listen_closed+0x60>)
 800d866:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d86a:	4910      	ldr	r1, [pc, #64]	; (800d8ac <tcp_listen_closed+0x6c>)
 800d86c:	480e      	ldr	r0, [pc, #56]	; (800d8a8 <tcp_listen_closed+0x68>)
 800d86e:	f009 fbc7 	bl	8017000 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d872:	2301      	movs	r3, #1
 800d874:	60fb      	str	r3, [r7, #12]
 800d876:	e00b      	b.n	800d890 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d878:	4a0d      	ldr	r2, [pc, #52]	; (800d8b0 <tcp_listen_closed+0x70>)
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	6879      	ldr	r1, [r7, #4]
 800d884:	4618      	mov	r0, r3
 800d886:	f7ff ffb1 	bl	800d7ec <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	3301      	adds	r3, #1
 800d88e:	60fb      	str	r3, [r7, #12]
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	2b03      	cmp	r3, #3
 800d894:	d9f0      	bls.n	800d878 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d896:	bf00      	nop
 800d898:	bf00      	nop
 800d89a:	3710      	adds	r7, #16
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}
 800d8a0:	08019ee4 	.word	0x08019ee4
 800d8a4:	08019f94 	.word	0x08019f94
 800d8a8:	08019f28 	.word	0x08019f28
 800d8ac:	08019fa0 	.word	0x08019fa0
 800d8b0:	0801bfb0 	.word	0x0801bfb0

0800d8b4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d8b4:	b5b0      	push	{r4, r5, r7, lr}
 800d8b6:	b088      	sub	sp, #32
 800d8b8:	af04      	add	r7, sp, #16
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	460b      	mov	r3, r1
 800d8be:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d106      	bne.n	800d8d4 <tcp_close_shutdown+0x20>
 800d8c6:	4b63      	ldr	r3, [pc, #396]	; (800da54 <tcp_close_shutdown+0x1a0>)
 800d8c8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800d8cc:	4962      	ldr	r1, [pc, #392]	; (800da58 <tcp_close_shutdown+0x1a4>)
 800d8ce:	4863      	ldr	r0, [pc, #396]	; (800da5c <tcp_close_shutdown+0x1a8>)
 800d8d0:	f009 fb96 	bl	8017000 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d8d4:	78fb      	ldrb	r3, [r7, #3]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d066      	beq.n	800d9a8 <tcp_close_shutdown+0xf4>
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	7d1b      	ldrb	r3, [r3, #20]
 800d8de:	2b04      	cmp	r3, #4
 800d8e0:	d003      	beq.n	800d8ea <tcp_close_shutdown+0x36>
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	7d1b      	ldrb	r3, [r3, #20]
 800d8e6:	2b07      	cmp	r3, #7
 800d8e8:	d15e      	bne.n	800d9a8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d104      	bne.n	800d8fc <tcp_close_shutdown+0x48>
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d8f6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d8fa:	d055      	beq.n	800d9a8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	8b5b      	ldrh	r3, [r3, #26]
 800d900:	f003 0310 	and.w	r3, r3, #16
 800d904:	2b00      	cmp	r3, #0
 800d906:	d106      	bne.n	800d916 <tcp_close_shutdown+0x62>
 800d908:	4b52      	ldr	r3, [pc, #328]	; (800da54 <tcp_close_shutdown+0x1a0>)
 800d90a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800d90e:	4954      	ldr	r1, [pc, #336]	; (800da60 <tcp_close_shutdown+0x1ac>)
 800d910:	4852      	ldr	r0, [pc, #328]	; (800da5c <tcp_close_shutdown+0x1a8>)
 800d912:	f009 fb75 	bl	8017000 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d91e:	687d      	ldr	r5, [r7, #4]
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	3304      	adds	r3, #4
 800d924:	687a      	ldr	r2, [r7, #4]
 800d926:	8ad2      	ldrh	r2, [r2, #22]
 800d928:	6879      	ldr	r1, [r7, #4]
 800d92a:	8b09      	ldrh	r1, [r1, #24]
 800d92c:	9102      	str	r1, [sp, #8]
 800d92e:	9201      	str	r2, [sp, #4]
 800d930:	9300      	str	r3, [sp, #0]
 800d932:	462b      	mov	r3, r5
 800d934:	4622      	mov	r2, r4
 800d936:	4601      	mov	r1, r0
 800d938:	6878      	ldr	r0, [r7, #4]
 800d93a:	f005 fcf1 	bl	8013320 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d93e:	6878      	ldr	r0, [r7, #4]
 800d940:	f001 face 	bl	800eee0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d944:	4b47      	ldr	r3, [pc, #284]	; (800da64 <tcp_close_shutdown+0x1b0>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	687a      	ldr	r2, [r7, #4]
 800d94a:	429a      	cmp	r2, r3
 800d94c:	d105      	bne.n	800d95a <tcp_close_shutdown+0xa6>
 800d94e:	4b45      	ldr	r3, [pc, #276]	; (800da64 <tcp_close_shutdown+0x1b0>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	68db      	ldr	r3, [r3, #12]
 800d954:	4a43      	ldr	r2, [pc, #268]	; (800da64 <tcp_close_shutdown+0x1b0>)
 800d956:	6013      	str	r3, [r2, #0]
 800d958:	e013      	b.n	800d982 <tcp_close_shutdown+0xce>
 800d95a:	4b42      	ldr	r3, [pc, #264]	; (800da64 <tcp_close_shutdown+0x1b0>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	60fb      	str	r3, [r7, #12]
 800d960:	e00c      	b.n	800d97c <tcp_close_shutdown+0xc8>
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	68db      	ldr	r3, [r3, #12]
 800d966:	687a      	ldr	r2, [r7, #4]
 800d968:	429a      	cmp	r2, r3
 800d96a:	d104      	bne.n	800d976 <tcp_close_shutdown+0xc2>
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	68da      	ldr	r2, [r3, #12]
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	60da      	str	r2, [r3, #12]
 800d974:	e005      	b.n	800d982 <tcp_close_shutdown+0xce>
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	68db      	ldr	r3, [r3, #12]
 800d97a:	60fb      	str	r3, [r7, #12]
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d1ef      	bne.n	800d962 <tcp_close_shutdown+0xae>
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2200      	movs	r2, #0
 800d986:	60da      	str	r2, [r3, #12]
 800d988:	4b37      	ldr	r3, [pc, #220]	; (800da68 <tcp_close_shutdown+0x1b4>)
 800d98a:	2201      	movs	r2, #1
 800d98c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d98e:	4b37      	ldr	r3, [pc, #220]	; (800da6c <tcp_close_shutdown+0x1b8>)
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	687a      	ldr	r2, [r7, #4]
 800d994:	429a      	cmp	r2, r3
 800d996:	d102      	bne.n	800d99e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d998:	f003 ff66 	bl	8011868 <tcp_trigger_input_pcb_close>
 800d99c:	e002      	b.n	800d9a4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f7ff fed6 	bl	800d750 <tcp_free>
      }
      return ERR_OK;
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	e050      	b.n	800da4a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	7d1b      	ldrb	r3, [r3, #20]
 800d9ac:	2b02      	cmp	r3, #2
 800d9ae:	d03b      	beq.n	800da28 <tcp_close_shutdown+0x174>
 800d9b0:	2b02      	cmp	r3, #2
 800d9b2:	dc44      	bgt.n	800da3e <tcp_close_shutdown+0x18a>
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d002      	beq.n	800d9be <tcp_close_shutdown+0x10a>
 800d9b8:	2b01      	cmp	r3, #1
 800d9ba:	d02a      	beq.n	800da12 <tcp_close_shutdown+0x15e>
 800d9bc:	e03f      	b.n	800da3e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	8adb      	ldrh	r3, [r3, #22]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d021      	beq.n	800da0a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d9c6:	4b2a      	ldr	r3, [pc, #168]	; (800da70 <tcp_close_shutdown+0x1bc>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	687a      	ldr	r2, [r7, #4]
 800d9cc:	429a      	cmp	r2, r3
 800d9ce:	d105      	bne.n	800d9dc <tcp_close_shutdown+0x128>
 800d9d0:	4b27      	ldr	r3, [pc, #156]	; (800da70 <tcp_close_shutdown+0x1bc>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	68db      	ldr	r3, [r3, #12]
 800d9d6:	4a26      	ldr	r2, [pc, #152]	; (800da70 <tcp_close_shutdown+0x1bc>)
 800d9d8:	6013      	str	r3, [r2, #0]
 800d9da:	e013      	b.n	800da04 <tcp_close_shutdown+0x150>
 800d9dc:	4b24      	ldr	r3, [pc, #144]	; (800da70 <tcp_close_shutdown+0x1bc>)
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	60bb      	str	r3, [r7, #8]
 800d9e2:	e00c      	b.n	800d9fe <tcp_close_shutdown+0x14a>
 800d9e4:	68bb      	ldr	r3, [r7, #8]
 800d9e6:	68db      	ldr	r3, [r3, #12]
 800d9e8:	687a      	ldr	r2, [r7, #4]
 800d9ea:	429a      	cmp	r2, r3
 800d9ec:	d104      	bne.n	800d9f8 <tcp_close_shutdown+0x144>
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	68da      	ldr	r2, [r3, #12]
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	60da      	str	r2, [r3, #12]
 800d9f6:	e005      	b.n	800da04 <tcp_close_shutdown+0x150>
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	68db      	ldr	r3, [r3, #12]
 800d9fc:	60bb      	str	r3, [r7, #8]
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d1ef      	bne.n	800d9e4 <tcp_close_shutdown+0x130>
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2200      	movs	r2, #0
 800da08:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f7ff fea0 	bl	800d750 <tcp_free>
      break;
 800da10:	e01a      	b.n	800da48 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800da12:	6878      	ldr	r0, [r7, #4]
 800da14:	f7ff ff14 	bl	800d840 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800da18:	6879      	ldr	r1, [r7, #4]
 800da1a:	4816      	ldr	r0, [pc, #88]	; (800da74 <tcp_close_shutdown+0x1c0>)
 800da1c:	f001 fab0 	bl	800ef80 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	f7ff feb1 	bl	800d788 <tcp_free_listen>
      break;
 800da26:	e00f      	b.n	800da48 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800da28:	6879      	ldr	r1, [r7, #4]
 800da2a:	480e      	ldr	r0, [pc, #56]	; (800da64 <tcp_close_shutdown+0x1b0>)
 800da2c:	f001 faa8 	bl	800ef80 <tcp_pcb_remove>
 800da30:	4b0d      	ldr	r3, [pc, #52]	; (800da68 <tcp_close_shutdown+0x1b4>)
 800da32:	2201      	movs	r2, #1
 800da34:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800da36:	6878      	ldr	r0, [r7, #4]
 800da38:	f7ff fe8a 	bl	800d750 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800da3c:	e004      	b.n	800da48 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	f000 f81a 	bl	800da78 <tcp_close_shutdown_fin>
 800da44:	4603      	mov	r3, r0
 800da46:	e000      	b.n	800da4a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800da48:	2300      	movs	r3, #0
}
 800da4a:	4618      	mov	r0, r3
 800da4c:	3710      	adds	r7, #16
 800da4e:	46bd      	mov	sp, r7
 800da50:	bdb0      	pop	{r4, r5, r7, pc}
 800da52:	bf00      	nop
 800da54:	08019ee4 	.word	0x08019ee4
 800da58:	08019fb8 	.word	0x08019fb8
 800da5c:	08019f28 	.word	0x08019f28
 800da60:	08019fd8 	.word	0x08019fd8
 800da64:	2000d150 	.word	0x2000d150
 800da68:	2000d158 	.word	0x2000d158
 800da6c:	2000d190 	.word	0x2000d190
 800da70:	2000d148 	.word	0x2000d148
 800da74:	2000d14c 	.word	0x2000d14c

0800da78 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b084      	sub	sp, #16
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d106      	bne.n	800da94 <tcp_close_shutdown_fin+0x1c>
 800da86:	4b2e      	ldr	r3, [pc, #184]	; (800db40 <tcp_close_shutdown_fin+0xc8>)
 800da88:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800da8c:	492d      	ldr	r1, [pc, #180]	; (800db44 <tcp_close_shutdown_fin+0xcc>)
 800da8e:	482e      	ldr	r0, [pc, #184]	; (800db48 <tcp_close_shutdown_fin+0xd0>)
 800da90:	f009 fab6 	bl	8017000 <iprintf>

  switch (pcb->state) {
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	7d1b      	ldrb	r3, [r3, #20]
 800da98:	2b07      	cmp	r3, #7
 800da9a:	d020      	beq.n	800dade <tcp_close_shutdown_fin+0x66>
 800da9c:	2b07      	cmp	r3, #7
 800da9e:	dc2b      	bgt.n	800daf8 <tcp_close_shutdown_fin+0x80>
 800daa0:	2b03      	cmp	r3, #3
 800daa2:	d002      	beq.n	800daaa <tcp_close_shutdown_fin+0x32>
 800daa4:	2b04      	cmp	r3, #4
 800daa6:	d00d      	beq.n	800dac4 <tcp_close_shutdown_fin+0x4c>
 800daa8:	e026      	b.n	800daf8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800daaa:	6878      	ldr	r0, [r7, #4]
 800daac:	f004 fd46 	bl	801253c <tcp_send_fin>
 800dab0:	4603      	mov	r3, r0
 800dab2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dab4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d11f      	bne.n	800dafc <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2205      	movs	r2, #5
 800dac0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dac2:	e01b      	b.n	800dafc <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800dac4:	6878      	ldr	r0, [r7, #4]
 800dac6:	f004 fd39 	bl	801253c <tcp_send_fin>
 800daca:	4603      	mov	r3, r0
 800dacc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d114      	bne.n	800db00 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	2205      	movs	r2, #5
 800dada:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dadc:	e010      	b.n	800db00 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800dade:	6878      	ldr	r0, [r7, #4]
 800dae0:	f004 fd2c 	bl	801253c <tcp_send_fin>
 800dae4:	4603      	mov	r3, r0
 800dae6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dae8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d109      	bne.n	800db04 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2209      	movs	r2, #9
 800daf4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800daf6:	e005      	b.n	800db04 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800daf8:	2300      	movs	r3, #0
 800dafa:	e01c      	b.n	800db36 <tcp_close_shutdown_fin+0xbe>
      break;
 800dafc:	bf00      	nop
 800dafe:	e002      	b.n	800db06 <tcp_close_shutdown_fin+0x8e>
      break;
 800db00:	bf00      	nop
 800db02:	e000      	b.n	800db06 <tcp_close_shutdown_fin+0x8e>
      break;
 800db04:	bf00      	nop
  }

  if (err == ERR_OK) {
 800db06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d103      	bne.n	800db16 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	f004 fe52 	bl	80127b8 <tcp_output>
 800db14:	e00d      	b.n	800db32 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800db16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db1e:	d108      	bne.n	800db32 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	8b5b      	ldrh	r3, [r3, #26]
 800db24:	f043 0308 	orr.w	r3, r3, #8
 800db28:	b29a      	uxth	r2, r3
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800db2e:	2300      	movs	r3, #0
 800db30:	e001      	b.n	800db36 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800db32:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800db36:	4618      	mov	r0, r3
 800db38:	3710      	adds	r7, #16
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}
 800db3e:	bf00      	nop
 800db40:	08019ee4 	.word	0x08019ee4
 800db44:	08019f94 	.word	0x08019f94
 800db48:	08019f28 	.word	0x08019f28

0800db4c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b082      	sub	sp, #8
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d109      	bne.n	800db6e <tcp_close+0x22>
 800db5a:	4b0f      	ldr	r3, [pc, #60]	; (800db98 <tcp_close+0x4c>)
 800db5c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800db60:	490e      	ldr	r1, [pc, #56]	; (800db9c <tcp_close+0x50>)
 800db62:	480f      	ldr	r0, [pc, #60]	; (800dba0 <tcp_close+0x54>)
 800db64:	f009 fa4c 	bl	8017000 <iprintf>
 800db68:	f06f 030f 	mvn.w	r3, #15
 800db6c:	e00f      	b.n	800db8e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	7d1b      	ldrb	r3, [r3, #20]
 800db72:	2b01      	cmp	r3, #1
 800db74:	d006      	beq.n	800db84 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	8b5b      	ldrh	r3, [r3, #26]
 800db7a:	f043 0310 	orr.w	r3, r3, #16
 800db7e:	b29a      	uxth	r2, r3
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800db84:	2101      	movs	r1, #1
 800db86:	6878      	ldr	r0, [r7, #4]
 800db88:	f7ff fe94 	bl	800d8b4 <tcp_close_shutdown>
 800db8c:	4603      	mov	r3, r0
}
 800db8e:	4618      	mov	r0, r3
 800db90:	3708      	adds	r7, #8
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}
 800db96:	bf00      	nop
 800db98:	08019ee4 	.word	0x08019ee4
 800db9c:	08019ff4 	.word	0x08019ff4
 800dba0:	08019f28 	.word	0x08019f28

0800dba4 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b084      	sub	sp, #16
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	60f8      	str	r0, [r7, #12]
 800dbac:	60b9      	str	r1, [r7, #8]
 800dbae:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d109      	bne.n	800dbca <tcp_shutdown+0x26>
 800dbb6:	4b26      	ldr	r3, [pc, #152]	; (800dc50 <tcp_shutdown+0xac>)
 800dbb8:	f240 2207 	movw	r2, #519	; 0x207
 800dbbc:	4925      	ldr	r1, [pc, #148]	; (800dc54 <tcp_shutdown+0xb0>)
 800dbbe:	4826      	ldr	r0, [pc, #152]	; (800dc58 <tcp_shutdown+0xb4>)
 800dbc0:	f009 fa1e 	bl	8017000 <iprintf>
 800dbc4:	f06f 030f 	mvn.w	r3, #15
 800dbc8:	e03d      	b.n	800dc46 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	7d1b      	ldrb	r3, [r3, #20]
 800dbce:	2b01      	cmp	r3, #1
 800dbd0:	d102      	bne.n	800dbd8 <tcp_shutdown+0x34>
    return ERR_CONN;
 800dbd2:	f06f 030a 	mvn.w	r3, #10
 800dbd6:	e036      	b.n	800dc46 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d01b      	beq.n	800dc16 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	8b5b      	ldrh	r3, [r3, #26]
 800dbe2:	f043 0310 	orr.w	r3, r3, #16
 800dbe6:	b29a      	uxth	r2, r3
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d005      	beq.n	800dbfe <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800dbf2:	2101      	movs	r1, #1
 800dbf4:	68f8      	ldr	r0, [r7, #12]
 800dbf6:	f7ff fe5d 	bl	800d8b4 <tcp_close_shutdown>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	e023      	b.n	800dc46 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d007      	beq.n	800dc16 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f7ff fae4 	bl	800d1d8 <pbuf_free>
      pcb->refused_data = NULL;
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	2200      	movs	r2, #0
 800dc14:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d013      	beq.n	800dc44 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	7d1b      	ldrb	r3, [r3, #20]
 800dc20:	2b04      	cmp	r3, #4
 800dc22:	dc02      	bgt.n	800dc2a <tcp_shutdown+0x86>
 800dc24:	2b03      	cmp	r3, #3
 800dc26:	da02      	bge.n	800dc2e <tcp_shutdown+0x8a>
 800dc28:	e009      	b.n	800dc3e <tcp_shutdown+0x9a>
 800dc2a:	2b07      	cmp	r3, #7
 800dc2c:	d107      	bne.n	800dc3e <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800dc2e:	68bb      	ldr	r3, [r7, #8]
 800dc30:	b2db      	uxtb	r3, r3
 800dc32:	4619      	mov	r1, r3
 800dc34:	68f8      	ldr	r0, [r7, #12]
 800dc36:	f7ff fe3d 	bl	800d8b4 <tcp_close_shutdown>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	e003      	b.n	800dc46 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800dc3e:	f06f 030a 	mvn.w	r3, #10
 800dc42:	e000      	b.n	800dc46 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800dc44:	2300      	movs	r3, #0
}
 800dc46:	4618      	mov	r0, r3
 800dc48:	3710      	adds	r7, #16
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bd80      	pop	{r7, pc}
 800dc4e:	bf00      	nop
 800dc50:	08019ee4 	.word	0x08019ee4
 800dc54:	0801a00c 	.word	0x0801a00c
 800dc58:	08019f28 	.word	0x08019f28

0800dc5c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b08e      	sub	sp, #56	; 0x38
 800dc60:	af04      	add	r7, sp, #16
 800dc62:	6078      	str	r0, [r7, #4]
 800dc64:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d107      	bne.n	800dc7c <tcp_abandon+0x20>
 800dc6c:	4b52      	ldr	r3, [pc, #328]	; (800ddb8 <tcp_abandon+0x15c>)
 800dc6e:	f240 223d 	movw	r2, #573	; 0x23d
 800dc72:	4952      	ldr	r1, [pc, #328]	; (800ddbc <tcp_abandon+0x160>)
 800dc74:	4852      	ldr	r0, [pc, #328]	; (800ddc0 <tcp_abandon+0x164>)
 800dc76:	f009 f9c3 	bl	8017000 <iprintf>
 800dc7a:	e099      	b.n	800ddb0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	7d1b      	ldrb	r3, [r3, #20]
 800dc80:	2b01      	cmp	r3, #1
 800dc82:	d106      	bne.n	800dc92 <tcp_abandon+0x36>
 800dc84:	4b4c      	ldr	r3, [pc, #304]	; (800ddb8 <tcp_abandon+0x15c>)
 800dc86:	f44f 7210 	mov.w	r2, #576	; 0x240
 800dc8a:	494e      	ldr	r1, [pc, #312]	; (800ddc4 <tcp_abandon+0x168>)
 800dc8c:	484c      	ldr	r0, [pc, #304]	; (800ddc0 <tcp_abandon+0x164>)
 800dc8e:	f009 f9b7 	bl	8017000 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	7d1b      	ldrb	r3, [r3, #20]
 800dc96:	2b0a      	cmp	r3, #10
 800dc98:	d107      	bne.n	800dcaa <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800dc9a:	6879      	ldr	r1, [r7, #4]
 800dc9c:	484a      	ldr	r0, [pc, #296]	; (800ddc8 <tcp_abandon+0x16c>)
 800dc9e:	f001 f96f 	bl	800ef80 <tcp_pcb_remove>
    tcp_free(pcb);
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f7ff fd54 	bl	800d750 <tcp_free>
 800dca8:	e082      	b.n	800ddb0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800dcaa:	2300      	movs	r3, #0
 800dcac:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800dcae:	2300      	movs	r3, #0
 800dcb0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcb6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcbc:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dcc4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	691b      	ldr	r3, [r3, #16]
 800dcca:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	7d1b      	ldrb	r3, [r3, #20]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d126      	bne.n	800dd22 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	8adb      	ldrh	r3, [r3, #22]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d02e      	beq.n	800dd3a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dcdc:	4b3b      	ldr	r3, [pc, #236]	; (800ddcc <tcp_abandon+0x170>)
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	687a      	ldr	r2, [r7, #4]
 800dce2:	429a      	cmp	r2, r3
 800dce4:	d105      	bne.n	800dcf2 <tcp_abandon+0x96>
 800dce6:	4b39      	ldr	r3, [pc, #228]	; (800ddcc <tcp_abandon+0x170>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	68db      	ldr	r3, [r3, #12]
 800dcec:	4a37      	ldr	r2, [pc, #220]	; (800ddcc <tcp_abandon+0x170>)
 800dcee:	6013      	str	r3, [r2, #0]
 800dcf0:	e013      	b.n	800dd1a <tcp_abandon+0xbe>
 800dcf2:	4b36      	ldr	r3, [pc, #216]	; (800ddcc <tcp_abandon+0x170>)
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	61fb      	str	r3, [r7, #28]
 800dcf8:	e00c      	b.n	800dd14 <tcp_abandon+0xb8>
 800dcfa:	69fb      	ldr	r3, [r7, #28]
 800dcfc:	68db      	ldr	r3, [r3, #12]
 800dcfe:	687a      	ldr	r2, [r7, #4]
 800dd00:	429a      	cmp	r2, r3
 800dd02:	d104      	bne.n	800dd0e <tcp_abandon+0xb2>
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	68da      	ldr	r2, [r3, #12]
 800dd08:	69fb      	ldr	r3, [r7, #28]
 800dd0a:	60da      	str	r2, [r3, #12]
 800dd0c:	e005      	b.n	800dd1a <tcp_abandon+0xbe>
 800dd0e:	69fb      	ldr	r3, [r7, #28]
 800dd10:	68db      	ldr	r3, [r3, #12]
 800dd12:	61fb      	str	r3, [r7, #28]
 800dd14:	69fb      	ldr	r3, [r7, #28]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d1ef      	bne.n	800dcfa <tcp_abandon+0x9e>
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	60da      	str	r2, [r3, #12]
 800dd20:	e00b      	b.n	800dd3a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	8adb      	ldrh	r3, [r3, #22]
 800dd2a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800dd2c:	6879      	ldr	r1, [r7, #4]
 800dd2e:	4828      	ldr	r0, [pc, #160]	; (800ddd0 <tcp_abandon+0x174>)
 800dd30:	f001 f926 	bl	800ef80 <tcp_pcb_remove>
 800dd34:	4b27      	ldr	r3, [pc, #156]	; (800ddd4 <tcp_abandon+0x178>)
 800dd36:	2201      	movs	r2, #1
 800dd38:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d004      	beq.n	800dd4c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd46:	4618      	mov	r0, r3
 800dd48:	f000 fdfa 	bl	800e940 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d004      	beq.n	800dd5e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd58:	4618      	mov	r0, r3
 800dd5a:	f000 fdf1 	bl	800e940 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d004      	beq.n	800dd70 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f000 fde8 	bl	800e940 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800dd70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d00e      	beq.n	800dd94 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800dd76:	6879      	ldr	r1, [r7, #4]
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	3304      	adds	r3, #4
 800dd7c:	687a      	ldr	r2, [r7, #4]
 800dd7e:	8b12      	ldrh	r2, [r2, #24]
 800dd80:	9202      	str	r2, [sp, #8]
 800dd82:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800dd84:	9201      	str	r2, [sp, #4]
 800dd86:	9300      	str	r3, [sp, #0]
 800dd88:	460b      	mov	r3, r1
 800dd8a:	697a      	ldr	r2, [r7, #20]
 800dd8c:	69b9      	ldr	r1, [r7, #24]
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f005 fac6 	bl	8013320 <tcp_rst>
    }
    last_state = pcb->state;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	7d1b      	ldrb	r3, [r3, #20]
 800dd98:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f7ff fcd8 	bl	800d750 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800dda0:	693b      	ldr	r3, [r7, #16]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d004      	beq.n	800ddb0 <tcp_abandon+0x154>
 800dda6:	693b      	ldr	r3, [r7, #16]
 800dda8:	f06f 010c 	mvn.w	r1, #12
 800ddac:	68f8      	ldr	r0, [r7, #12]
 800ddae:	4798      	blx	r3
  }
}
 800ddb0:	3728      	adds	r7, #40	; 0x28
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}
 800ddb6:	bf00      	nop
 800ddb8:	08019ee4 	.word	0x08019ee4
 800ddbc:	0801a028 	.word	0x0801a028
 800ddc0:	08019f28 	.word	0x08019f28
 800ddc4:	0801a044 	.word	0x0801a044
 800ddc8:	2000d154 	.word	0x2000d154
 800ddcc:	2000d148 	.word	0x2000d148
 800ddd0:	2000d150 	.word	0x2000d150
 800ddd4:	2000d158 	.word	0x2000d158

0800ddd8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b082      	sub	sp, #8
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800dde0:	2101      	movs	r1, #1
 800dde2:	6878      	ldr	r0, [r7, #4]
 800dde4:	f7ff ff3a 	bl	800dc5c <tcp_abandon>
}
 800dde8:	bf00      	nop
 800ddea:	3708      	adds	r7, #8
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}

0800ddf0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b088      	sub	sp, #32
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	60f8      	str	r0, [r7, #12]
 800ddf8:	60b9      	str	r1, [r7, #8]
 800ddfa:	4613      	mov	r3, r2
 800ddfc:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800ddfe:	2304      	movs	r3, #4
 800de00:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d101      	bne.n	800de0c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800de08:	4b3e      	ldr	r3, [pc, #248]	; (800df04 <tcp_bind+0x114>)
 800de0a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d109      	bne.n	800de26 <tcp_bind+0x36>
 800de12:	4b3d      	ldr	r3, [pc, #244]	; (800df08 <tcp_bind+0x118>)
 800de14:	f240 22a9 	movw	r2, #681	; 0x2a9
 800de18:	493c      	ldr	r1, [pc, #240]	; (800df0c <tcp_bind+0x11c>)
 800de1a:	483d      	ldr	r0, [pc, #244]	; (800df10 <tcp_bind+0x120>)
 800de1c:	f009 f8f0 	bl	8017000 <iprintf>
 800de20:	f06f 030f 	mvn.w	r3, #15
 800de24:	e06a      	b.n	800defc <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	7d1b      	ldrb	r3, [r3, #20]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d009      	beq.n	800de42 <tcp_bind+0x52>
 800de2e:	4b36      	ldr	r3, [pc, #216]	; (800df08 <tcp_bind+0x118>)
 800de30:	f240 22ab 	movw	r2, #683	; 0x2ab
 800de34:	4937      	ldr	r1, [pc, #220]	; (800df14 <tcp_bind+0x124>)
 800de36:	4836      	ldr	r0, [pc, #216]	; (800df10 <tcp_bind+0x120>)
 800de38:	f009 f8e2 	bl	8017000 <iprintf>
 800de3c:	f06f 0305 	mvn.w	r3, #5
 800de40:	e05c      	b.n	800defc <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800de42:	88fb      	ldrh	r3, [r7, #6]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d109      	bne.n	800de5c <tcp_bind+0x6c>
    port = tcp_new_port();
 800de48:	f000 f914 	bl	800e074 <tcp_new_port>
 800de4c:	4603      	mov	r3, r0
 800de4e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800de50:	88fb      	ldrh	r3, [r7, #6]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d135      	bne.n	800dec2 <tcp_bind+0xd2>
      return ERR_BUF;
 800de56:	f06f 0301 	mvn.w	r3, #1
 800de5a:	e04f      	b.n	800defc <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800de5c:	2300      	movs	r3, #0
 800de5e:	61fb      	str	r3, [r7, #28]
 800de60:	e02b      	b.n	800deba <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800de62:	4a2d      	ldr	r2, [pc, #180]	; (800df18 <tcp_bind+0x128>)
 800de64:	69fb      	ldr	r3, [r7, #28]
 800de66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	61bb      	str	r3, [r7, #24]
 800de6e:	e01e      	b.n	800deae <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800de70:	69bb      	ldr	r3, [r7, #24]
 800de72:	8adb      	ldrh	r3, [r3, #22]
 800de74:	88fa      	ldrh	r2, [r7, #6]
 800de76:	429a      	cmp	r2, r3
 800de78:	d116      	bne.n	800dea8 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800de7a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d010      	beq.n	800dea2 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800de80:	69bb      	ldr	r3, [r7, #24]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d00c      	beq.n	800dea2 <tcp_bind+0xb2>
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d009      	beq.n	800dea2 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800de8e:	68bb      	ldr	r3, [r7, #8]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d005      	beq.n	800dea2 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800de96:	69bb      	ldr	r3, [r7, #24]
 800de98:	681a      	ldr	r2, [r3, #0]
 800de9a:	68bb      	ldr	r3, [r7, #8]
 800de9c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800de9e:	429a      	cmp	r2, r3
 800dea0:	d102      	bne.n	800dea8 <tcp_bind+0xb8>
              return ERR_USE;
 800dea2:	f06f 0307 	mvn.w	r3, #7
 800dea6:	e029      	b.n	800defc <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800dea8:	69bb      	ldr	r3, [r7, #24]
 800deaa:	68db      	ldr	r3, [r3, #12]
 800deac:	61bb      	str	r3, [r7, #24]
 800deae:	69bb      	ldr	r3, [r7, #24]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d1dd      	bne.n	800de70 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800deb4:	69fb      	ldr	r3, [r7, #28]
 800deb6:	3301      	adds	r3, #1
 800deb8:	61fb      	str	r3, [r7, #28]
 800deba:	69fa      	ldr	r2, [r7, #28]
 800debc:	697b      	ldr	r3, [r7, #20]
 800debe:	429a      	cmp	r2, r3
 800dec0:	dbcf      	blt.n	800de62 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800dec2:	68bb      	ldr	r3, [r7, #8]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d00c      	beq.n	800dee2 <tcp_bind+0xf2>
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d008      	beq.n	800dee2 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800ded0:	68bb      	ldr	r3, [r7, #8]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d002      	beq.n	800dedc <tcp_bind+0xec>
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	e000      	b.n	800dede <tcp_bind+0xee>
 800dedc:	2300      	movs	r3, #0
 800dede:	68fa      	ldr	r2, [r7, #12]
 800dee0:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	88fa      	ldrh	r2, [r7, #6]
 800dee6:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800dee8:	4b0c      	ldr	r3, [pc, #48]	; (800df1c <tcp_bind+0x12c>)
 800deea:	681a      	ldr	r2, [r3, #0]
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	60da      	str	r2, [r3, #12]
 800def0:	4a0a      	ldr	r2, [pc, #40]	; (800df1c <tcp_bind+0x12c>)
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	6013      	str	r3, [r2, #0]
 800def6:	f005 fbd5 	bl	80136a4 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800defa:	2300      	movs	r3, #0
}
 800defc:	4618      	mov	r0, r3
 800defe:	3720      	adds	r7, #32
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}
 800df04:	0801bfd8 	.word	0x0801bfd8
 800df08:	08019ee4 	.word	0x08019ee4
 800df0c:	0801a078 	.word	0x0801a078
 800df10:	08019f28 	.word	0x08019f28
 800df14:	0801a090 	.word	0x0801a090
 800df18:	0801bfb0 	.word	0x0801bfb0
 800df1c:	2000d148 	.word	0x2000d148

0800df20 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b084      	sub	sp, #16
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d106      	bne.n	800df3c <tcp_update_rcv_ann_wnd+0x1c>
 800df2e:	4b25      	ldr	r3, [pc, #148]	; (800dfc4 <tcp_update_rcv_ann_wnd+0xa4>)
 800df30:	f240 32a6 	movw	r2, #934	; 0x3a6
 800df34:	4924      	ldr	r1, [pc, #144]	; (800dfc8 <tcp_update_rcv_ann_wnd+0xa8>)
 800df36:	4825      	ldr	r0, [pc, #148]	; (800dfcc <tcp_update_rcv_ann_wnd+0xac>)
 800df38:	f009 f862 	bl	8017000 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df40:	687a      	ldr	r2, [r7, #4]
 800df42:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800df44:	4413      	add	r3, r2
 800df46:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df4c:	687a      	ldr	r2, [r7, #4]
 800df4e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800df50:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800df54:	bf28      	it	cs
 800df56:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800df5a:	b292      	uxth	r2, r2
 800df5c:	4413      	add	r3, r2
 800df5e:	68fa      	ldr	r2, [r7, #12]
 800df60:	1ad3      	subs	r3, r2, r3
 800df62:	2b00      	cmp	r3, #0
 800df64:	db08      	blt.n	800df78 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df72:	68fa      	ldr	r2, [r7, #12]
 800df74:	1ad3      	subs	r3, r2, r3
 800df76:	e020      	b.n	800dfba <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df80:	1ad3      	subs	r3, r2, r3
 800df82:	2b00      	cmp	r3, #0
 800df84:	dd03      	ble.n	800df8e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	2200      	movs	r2, #0
 800df8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800df8c:	e014      	b.n	800dfb8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df96:	1ad3      	subs	r3, r2, r3
 800df98:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dfa0:	d306      	bcc.n	800dfb0 <tcp_update_rcv_ann_wnd+0x90>
 800dfa2:	4b08      	ldr	r3, [pc, #32]	; (800dfc4 <tcp_update_rcv_ann_wnd+0xa4>)
 800dfa4:	f240 32b6 	movw	r2, #950	; 0x3b6
 800dfa8:	4909      	ldr	r1, [pc, #36]	; (800dfd0 <tcp_update_rcv_ann_wnd+0xb0>)
 800dfaa:	4808      	ldr	r0, [pc, #32]	; (800dfcc <tcp_update_rcv_ann_wnd+0xac>)
 800dfac:	f009 f828 	bl	8017000 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800dfb0:	68bb      	ldr	r3, [r7, #8]
 800dfb2:	b29a      	uxth	r2, r3
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800dfb8:	2300      	movs	r3, #0
  }
}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	3710      	adds	r7, #16
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}
 800dfc2:	bf00      	nop
 800dfc4:	08019ee4 	.word	0x08019ee4
 800dfc8:	0801a140 	.word	0x0801a140
 800dfcc:	08019f28 	.word	0x08019f28
 800dfd0:	0801a164 	.word	0x0801a164

0800dfd4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b084      	sub	sp, #16
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
 800dfdc:	460b      	mov	r3, r1
 800dfde:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d107      	bne.n	800dff6 <tcp_recved+0x22>
 800dfe6:	4b1f      	ldr	r3, [pc, #124]	; (800e064 <tcp_recved+0x90>)
 800dfe8:	f240 32cf 	movw	r2, #975	; 0x3cf
 800dfec:	491e      	ldr	r1, [pc, #120]	; (800e068 <tcp_recved+0x94>)
 800dfee:	481f      	ldr	r0, [pc, #124]	; (800e06c <tcp_recved+0x98>)
 800dff0:	f009 f806 	bl	8017000 <iprintf>
 800dff4:	e032      	b.n	800e05c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	7d1b      	ldrb	r3, [r3, #20]
 800dffa:	2b01      	cmp	r3, #1
 800dffc:	d106      	bne.n	800e00c <tcp_recved+0x38>
 800dffe:	4b19      	ldr	r3, [pc, #100]	; (800e064 <tcp_recved+0x90>)
 800e000:	f240 32d2 	movw	r2, #978	; 0x3d2
 800e004:	491a      	ldr	r1, [pc, #104]	; (800e070 <tcp_recved+0x9c>)
 800e006:	4819      	ldr	r0, [pc, #100]	; (800e06c <tcp_recved+0x98>)
 800e008:	f008 fffa 	bl	8017000 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e010:	887b      	ldrh	r3, [r7, #2]
 800e012:	4413      	add	r3, r2
 800e014:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e016:	89fb      	ldrh	r3, [r7, #14]
 800e018:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e01c:	d804      	bhi.n	800e028 <tcp_recved+0x54>
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e022:	89fa      	ldrh	r2, [r7, #14]
 800e024:	429a      	cmp	r2, r3
 800e026:	d204      	bcs.n	800e032 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e02e:	851a      	strh	r2, [r3, #40]	; 0x28
 800e030:	e002      	b.n	800e038 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	89fa      	ldrh	r2, [r7, #14]
 800e036:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e038:	6878      	ldr	r0, [r7, #4]
 800e03a:	f7ff ff71 	bl	800df20 <tcp_update_rcv_ann_wnd>
 800e03e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e040:	68bb      	ldr	r3, [r7, #8]
 800e042:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e046:	d309      	bcc.n	800e05c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	8b5b      	ldrh	r3, [r3, #26]
 800e04c:	f043 0302 	orr.w	r3, r3, #2
 800e050:	b29a      	uxth	r2, r3
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f004 fbae 	bl	80127b8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e05c:	3710      	adds	r7, #16
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}
 800e062:	bf00      	nop
 800e064:	08019ee4 	.word	0x08019ee4
 800e068:	0801a180 	.word	0x0801a180
 800e06c:	08019f28 	.word	0x08019f28
 800e070:	0801a198 	.word	0x0801a198

0800e074 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800e074:	b480      	push	{r7}
 800e076:	b083      	sub	sp, #12
 800e078:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800e07a:	2300      	movs	r3, #0
 800e07c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800e07e:	4b1e      	ldr	r3, [pc, #120]	; (800e0f8 <tcp_new_port+0x84>)
 800e080:	881b      	ldrh	r3, [r3, #0]
 800e082:	3301      	adds	r3, #1
 800e084:	b29a      	uxth	r2, r3
 800e086:	4b1c      	ldr	r3, [pc, #112]	; (800e0f8 <tcp_new_port+0x84>)
 800e088:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800e08a:	4b1b      	ldr	r3, [pc, #108]	; (800e0f8 <tcp_new_port+0x84>)
 800e08c:	881b      	ldrh	r3, [r3, #0]
 800e08e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e092:	4293      	cmp	r3, r2
 800e094:	d103      	bne.n	800e09e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800e096:	4b18      	ldr	r3, [pc, #96]	; (800e0f8 <tcp_new_port+0x84>)
 800e098:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e09c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e09e:	2300      	movs	r3, #0
 800e0a0:	71fb      	strb	r3, [r7, #7]
 800e0a2:	e01e      	b.n	800e0e2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e0a4:	79fb      	ldrb	r3, [r7, #7]
 800e0a6:	4a15      	ldr	r2, [pc, #84]	; (800e0fc <tcp_new_port+0x88>)
 800e0a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	603b      	str	r3, [r7, #0]
 800e0b0:	e011      	b.n	800e0d6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800e0b2:	683b      	ldr	r3, [r7, #0]
 800e0b4:	8ada      	ldrh	r2, [r3, #22]
 800e0b6:	4b10      	ldr	r3, [pc, #64]	; (800e0f8 <tcp_new_port+0x84>)
 800e0b8:	881b      	ldrh	r3, [r3, #0]
 800e0ba:	429a      	cmp	r2, r3
 800e0bc:	d108      	bne.n	800e0d0 <tcp_new_port+0x5c>
        n++;
 800e0be:	88bb      	ldrh	r3, [r7, #4]
 800e0c0:	3301      	adds	r3, #1
 800e0c2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800e0c4:	88bb      	ldrh	r3, [r7, #4]
 800e0c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e0ca:	d3d8      	bcc.n	800e07e <tcp_new_port+0xa>
          return 0;
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	e00d      	b.n	800e0ec <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	68db      	ldr	r3, [r3, #12]
 800e0d4:	603b      	str	r3, [r7, #0]
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d1ea      	bne.n	800e0b2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e0dc:	79fb      	ldrb	r3, [r7, #7]
 800e0de:	3301      	adds	r3, #1
 800e0e0:	71fb      	strb	r3, [r7, #7]
 800e0e2:	79fb      	ldrb	r3, [r7, #7]
 800e0e4:	2b03      	cmp	r3, #3
 800e0e6:	d9dd      	bls.n	800e0a4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800e0e8:	4b03      	ldr	r3, [pc, #12]	; (800e0f8 <tcp_new_port+0x84>)
 800e0ea:	881b      	ldrh	r3, [r3, #0]
}
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	370c      	adds	r7, #12
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f6:	4770      	bx	lr
 800e0f8:	20000010 	.word	0x20000010
 800e0fc:	0801bfb0 	.word	0x0801bfb0

0800e100 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e100:	b5b0      	push	{r4, r5, r7, lr}
 800e102:	b090      	sub	sp, #64	; 0x40
 800e104:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e106:	2300      	movs	r3, #0
 800e108:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e10c:	4b94      	ldr	r3, [pc, #592]	; (800e360 <tcp_slowtmr+0x260>)
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	3301      	adds	r3, #1
 800e112:	4a93      	ldr	r2, [pc, #588]	; (800e360 <tcp_slowtmr+0x260>)
 800e114:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e116:	4b93      	ldr	r3, [pc, #588]	; (800e364 <tcp_slowtmr+0x264>)
 800e118:	781b      	ldrb	r3, [r3, #0]
 800e11a:	3301      	adds	r3, #1
 800e11c:	b2da      	uxtb	r2, r3
 800e11e:	4b91      	ldr	r3, [pc, #580]	; (800e364 <tcp_slowtmr+0x264>)
 800e120:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e122:	2300      	movs	r3, #0
 800e124:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e126:	4b90      	ldr	r3, [pc, #576]	; (800e368 <tcp_slowtmr+0x268>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e12c:	e29d      	b.n	800e66a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e130:	7d1b      	ldrb	r3, [r3, #20]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d106      	bne.n	800e144 <tcp_slowtmr+0x44>
 800e136:	4b8d      	ldr	r3, [pc, #564]	; (800e36c <tcp_slowtmr+0x26c>)
 800e138:	f240 42be 	movw	r2, #1214	; 0x4be
 800e13c:	498c      	ldr	r1, [pc, #560]	; (800e370 <tcp_slowtmr+0x270>)
 800e13e:	488d      	ldr	r0, [pc, #564]	; (800e374 <tcp_slowtmr+0x274>)
 800e140:	f008 ff5e 	bl	8017000 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e146:	7d1b      	ldrb	r3, [r3, #20]
 800e148:	2b01      	cmp	r3, #1
 800e14a:	d106      	bne.n	800e15a <tcp_slowtmr+0x5a>
 800e14c:	4b87      	ldr	r3, [pc, #540]	; (800e36c <tcp_slowtmr+0x26c>)
 800e14e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e152:	4989      	ldr	r1, [pc, #548]	; (800e378 <tcp_slowtmr+0x278>)
 800e154:	4887      	ldr	r0, [pc, #540]	; (800e374 <tcp_slowtmr+0x274>)
 800e156:	f008 ff53 	bl	8017000 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e15c:	7d1b      	ldrb	r3, [r3, #20]
 800e15e:	2b0a      	cmp	r3, #10
 800e160:	d106      	bne.n	800e170 <tcp_slowtmr+0x70>
 800e162:	4b82      	ldr	r3, [pc, #520]	; (800e36c <tcp_slowtmr+0x26c>)
 800e164:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e168:	4984      	ldr	r1, [pc, #528]	; (800e37c <tcp_slowtmr+0x27c>)
 800e16a:	4882      	ldr	r0, [pc, #520]	; (800e374 <tcp_slowtmr+0x274>)
 800e16c:	f008 ff48 	bl	8017000 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e172:	7f9a      	ldrb	r2, [r3, #30]
 800e174:	4b7b      	ldr	r3, [pc, #492]	; (800e364 <tcp_slowtmr+0x264>)
 800e176:	781b      	ldrb	r3, [r3, #0]
 800e178:	429a      	cmp	r2, r3
 800e17a:	d105      	bne.n	800e188 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e17e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e182:	68db      	ldr	r3, [r3, #12]
 800e184:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e186:	e270      	b.n	800e66a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e188:	4b76      	ldr	r3, [pc, #472]	; (800e364 <tcp_slowtmr+0x264>)
 800e18a:	781a      	ldrb	r2, [r3, #0]
 800e18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e18e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e190:	2300      	movs	r3, #0
 800e192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e196:	2300      	movs	r3, #0
 800e198:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e19e:	7d1b      	ldrb	r3, [r3, #20]
 800e1a0:	2b02      	cmp	r3, #2
 800e1a2:	d10a      	bne.n	800e1ba <tcp_slowtmr+0xba>
 800e1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e1aa:	2b05      	cmp	r3, #5
 800e1ac:	d905      	bls.n	800e1ba <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e1ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1b2:	3301      	adds	r3, #1
 800e1b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e1b8:	e11e      	b.n	800e3f8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e1c0:	2b0b      	cmp	r3, #11
 800e1c2:	d905      	bls.n	800e1d0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e1c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1c8:	3301      	adds	r3, #1
 800e1ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e1ce:	e113      	b.n	800e3f8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1d2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d075      	beq.n	800e2c6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d006      	beq.n	800e1f0 <tcp_slowtmr+0xf0>
 800e1e2:	4b62      	ldr	r3, [pc, #392]	; (800e36c <tcp_slowtmr+0x26c>)
 800e1e4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e1e8:	4965      	ldr	r1, [pc, #404]	; (800e380 <tcp_slowtmr+0x280>)
 800e1ea:	4862      	ldr	r0, [pc, #392]	; (800e374 <tcp_slowtmr+0x274>)
 800e1ec:	f008 ff08 	bl	8017000 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d106      	bne.n	800e206 <tcp_slowtmr+0x106>
 800e1f8:	4b5c      	ldr	r3, [pc, #368]	; (800e36c <tcp_slowtmr+0x26c>)
 800e1fa:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e1fe:	4961      	ldr	r1, [pc, #388]	; (800e384 <tcp_slowtmr+0x284>)
 800e200:	485c      	ldr	r0, [pc, #368]	; (800e374 <tcp_slowtmr+0x274>)
 800e202:	f008 fefd 	bl	8017000 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e208:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e20c:	2b0b      	cmp	r3, #11
 800e20e:	d905      	bls.n	800e21c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e210:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e214:	3301      	adds	r3, #1
 800e216:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e21a:	e0ed      	b.n	800e3f8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e21e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e222:	3b01      	subs	r3, #1
 800e224:	4a58      	ldr	r2, [pc, #352]	; (800e388 <tcp_slowtmr+0x288>)
 800e226:	5cd3      	ldrb	r3, [r2, r3]
 800e228:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e22c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e230:	7c7a      	ldrb	r2, [r7, #17]
 800e232:	429a      	cmp	r2, r3
 800e234:	d907      	bls.n	800e246 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e238:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e23c:	3301      	adds	r3, #1
 800e23e:	b2da      	uxtb	r2, r3
 800e240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e242:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e248:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e24c:	7c7a      	ldrb	r2, [r7, #17]
 800e24e:	429a      	cmp	r2, r3
 800e250:	f200 80d2 	bhi.w	800e3f8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e254:	2301      	movs	r3, #1
 800e256:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e25a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d108      	bne.n	800e274 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e262:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e264:	f005 f950 	bl	8013508 <tcp_zero_window_probe>
 800e268:	4603      	mov	r3, r0
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d014      	beq.n	800e298 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e26e:	2300      	movs	r3, #0
 800e270:	623b      	str	r3, [r7, #32]
 800e272:	e011      	b.n	800e298 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e276:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e27a:	4619      	mov	r1, r3
 800e27c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e27e:	f004 f815 	bl	80122ac <tcp_split_unsent_seg>
 800e282:	4603      	mov	r3, r0
 800e284:	2b00      	cmp	r3, #0
 800e286:	d107      	bne.n	800e298 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e288:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e28a:	f004 fa95 	bl	80127b8 <tcp_output>
 800e28e:	4603      	mov	r3, r0
 800e290:	2b00      	cmp	r3, #0
 800e292:	d101      	bne.n	800e298 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e294:	2300      	movs	r3, #0
 800e296:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e298:	6a3b      	ldr	r3, [r7, #32]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	f000 80ac 	beq.w	800e3f8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2aa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e2ae:	2b06      	cmp	r3, #6
 800e2b0:	f200 80a2 	bhi.w	800e3f8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2b6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e2ba:	3301      	adds	r3, #1
 800e2bc:	b2da      	uxtb	r2, r3
 800e2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2c0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e2c4:	e098      	b.n	800e3f8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2c8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	db0f      	blt.n	800e2f0 <tcp_slowtmr+0x1f0>
 800e2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2d2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e2d6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e2da:	4293      	cmp	r3, r2
 800e2dc:	d008      	beq.n	800e2f0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e2de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2e0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e2e4:	b29b      	uxth	r3, r3
 800e2e6:	3301      	adds	r3, #1
 800e2e8:	b29b      	uxth	r3, r3
 800e2ea:	b21a      	sxth	r2, r3
 800e2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ee:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e2fc:	429a      	cmp	r2, r3
 800e2fe:	db7b      	blt.n	800e3f8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e300:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e302:	f004 fd4b 	bl	8012d9c <tcp_rexmit_rto_prepare>
 800e306:	4603      	mov	r3, r0
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d007      	beq.n	800e31c <tcp_slowtmr+0x21c>
 800e30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e30e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e310:	2b00      	cmp	r3, #0
 800e312:	d171      	bne.n	800e3f8 <tcp_slowtmr+0x2f8>
 800e314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d06d      	beq.n	800e3f8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e31e:	7d1b      	ldrb	r3, [r3, #20]
 800e320:	2b02      	cmp	r3, #2
 800e322:	d03a      	beq.n	800e39a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e326:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e32a:	2b0c      	cmp	r3, #12
 800e32c:	bf28      	it	cs
 800e32e:	230c      	movcs	r3, #12
 800e330:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e334:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e338:	10db      	asrs	r3, r3, #3
 800e33a:	b21b      	sxth	r3, r3
 800e33c:	461a      	mov	r2, r3
 800e33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e340:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e344:	4413      	add	r3, r2
 800e346:	7efa      	ldrb	r2, [r7, #27]
 800e348:	4910      	ldr	r1, [pc, #64]	; (800e38c <tcp_slowtmr+0x28c>)
 800e34a:	5c8a      	ldrb	r2, [r1, r2]
 800e34c:	4093      	lsls	r3, r2
 800e34e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e350:	697b      	ldr	r3, [r7, #20]
 800e352:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e356:	4293      	cmp	r3, r2
 800e358:	dc1a      	bgt.n	800e390 <tcp_slowtmr+0x290>
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	b21a      	sxth	r2, r3
 800e35e:	e019      	b.n	800e394 <tcp_slowtmr+0x294>
 800e360:	2000d144 	.word	0x2000d144
 800e364:	2000d15a 	.word	0x2000d15a
 800e368:	2000d150 	.word	0x2000d150
 800e36c:	08019ee4 	.word	0x08019ee4
 800e370:	0801a228 	.word	0x0801a228
 800e374:	08019f28 	.word	0x08019f28
 800e378:	0801a254 	.word	0x0801a254
 800e37c:	0801a280 	.word	0x0801a280
 800e380:	0801a2b0 	.word	0x0801a2b0
 800e384:	0801a2e4 	.word	0x0801a2e4
 800e388:	0801bfa8 	.word	0x0801bfa8
 800e38c:	0801bf98 	.word	0x0801bf98
 800e390:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e396:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e39c:	2200      	movs	r2, #0
 800e39e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e3ac:	4293      	cmp	r3, r2
 800e3ae:	bf28      	it	cs
 800e3b0:	4613      	movcs	r3, r2
 800e3b2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e3b4:	8a7b      	ldrh	r3, [r7, #18]
 800e3b6:	085b      	lsrs	r3, r3, #1
 800e3b8:	b29a      	uxth	r2, r3
 800e3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3bc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3c2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e3ca:	005b      	lsls	r3, r3, #1
 800e3cc:	b29b      	uxth	r3, r3
 800e3ce:	429a      	cmp	r2, r3
 800e3d0:	d206      	bcs.n	800e3e0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e3d6:	005b      	lsls	r3, r3, #1
 800e3d8:	b29a      	uxth	r2, r3
 800e3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3dc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800e3f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e3f4:	f004 fd42 	bl	8012e7c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3fa:	7d1b      	ldrb	r3, [r3, #20]
 800e3fc:	2b06      	cmp	r3, #6
 800e3fe:	d111      	bne.n	800e424 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e402:	8b5b      	ldrh	r3, [r3, #26]
 800e404:	f003 0310 	and.w	r3, r3, #16
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d00b      	beq.n	800e424 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e40c:	4b9c      	ldr	r3, [pc, #624]	; (800e680 <tcp_slowtmr+0x580>)
 800e40e:	681a      	ldr	r2, [r3, #0]
 800e410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e412:	6a1b      	ldr	r3, [r3, #32]
 800e414:	1ad3      	subs	r3, r2, r3
 800e416:	2b28      	cmp	r3, #40	; 0x28
 800e418:	d904      	bls.n	800e424 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e41a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e41e:	3301      	adds	r3, #1
 800e420:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e426:	7a5b      	ldrb	r3, [r3, #9]
 800e428:	f003 0308 	and.w	r3, r3, #8
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d04a      	beq.n	800e4c6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800e430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e432:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e434:	2b04      	cmp	r3, #4
 800e436:	d003      	beq.n	800e440 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800e438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e43a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e43c:	2b07      	cmp	r3, #7
 800e43e:	d142      	bne.n	800e4c6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e440:	4b8f      	ldr	r3, [pc, #572]	; (800e680 <tcp_slowtmr+0x580>)
 800e442:	681a      	ldr	r2, [r3, #0]
 800e444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e446:	6a1b      	ldr	r3, [r3, #32]
 800e448:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e44c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e450:	4b8c      	ldr	r3, [pc, #560]	; (800e684 <tcp_slowtmr+0x584>)
 800e452:	440b      	add	r3, r1
 800e454:	498c      	ldr	r1, [pc, #560]	; (800e688 <tcp_slowtmr+0x588>)
 800e456:	fba1 1303 	umull	r1, r3, r1, r3
 800e45a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e45c:	429a      	cmp	r2, r3
 800e45e:	d90a      	bls.n	800e476 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e460:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e464:	3301      	adds	r3, #1
 800e466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800e46a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e46e:	3301      	adds	r3, #1
 800e470:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e474:	e027      	b.n	800e4c6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e476:	4b82      	ldr	r3, [pc, #520]	; (800e680 <tcp_slowtmr+0x580>)
 800e478:	681a      	ldr	r2, [r3, #0]
 800e47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e47c:	6a1b      	ldr	r3, [r3, #32]
 800e47e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e482:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e488:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e48c:	4618      	mov	r0, r3
 800e48e:	4b7f      	ldr	r3, [pc, #508]	; (800e68c <tcp_slowtmr+0x58c>)
 800e490:	fb00 f303 	mul.w	r3, r0, r3
 800e494:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e496:	497c      	ldr	r1, [pc, #496]	; (800e688 <tcp_slowtmr+0x588>)
 800e498:	fba1 1303 	umull	r1, r3, r1, r3
 800e49c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e49e:	429a      	cmp	r2, r3
 800e4a0:	d911      	bls.n	800e4c6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800e4a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e4a4:	f004 fff0 	bl	8013488 <tcp_keepalive>
 800e4a8:	4603      	mov	r3, r0
 800e4aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800e4ae:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d107      	bne.n	800e4c6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800e4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4b8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e4bc:	3301      	adds	r3, #1
 800e4be:	b2da      	uxtb	r2, r3
 800e4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d011      	beq.n	800e4f2 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e4ce:	4b6c      	ldr	r3, [pc, #432]	; (800e680 <tcp_slowtmr+0x580>)
 800e4d0:	681a      	ldr	r2, [r3, #0]
 800e4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d4:	6a1b      	ldr	r3, [r3, #32]
 800e4d6:	1ad2      	subs	r2, r2, r3
 800e4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4da:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e4de:	4619      	mov	r1, r3
 800e4e0:	460b      	mov	r3, r1
 800e4e2:	005b      	lsls	r3, r3, #1
 800e4e4:	440b      	add	r3, r1
 800e4e6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e4e8:	429a      	cmp	r2, r3
 800e4ea:	d302      	bcc.n	800e4f2 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e4ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e4ee:	f000 feab 	bl	800f248 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f4:	7d1b      	ldrb	r3, [r3, #20]
 800e4f6:	2b03      	cmp	r3, #3
 800e4f8:	d10b      	bne.n	800e512 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e4fa:	4b61      	ldr	r3, [pc, #388]	; (800e680 <tcp_slowtmr+0x580>)
 800e4fc:	681a      	ldr	r2, [r3, #0]
 800e4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e500:	6a1b      	ldr	r3, [r3, #32]
 800e502:	1ad3      	subs	r3, r2, r3
 800e504:	2b28      	cmp	r3, #40	; 0x28
 800e506:	d904      	bls.n	800e512 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e508:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e50c:	3301      	adds	r3, #1
 800e50e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e514:	7d1b      	ldrb	r3, [r3, #20]
 800e516:	2b09      	cmp	r3, #9
 800e518:	d10b      	bne.n	800e532 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e51a:	4b59      	ldr	r3, [pc, #356]	; (800e680 <tcp_slowtmr+0x580>)
 800e51c:	681a      	ldr	r2, [r3, #0]
 800e51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e520:	6a1b      	ldr	r3, [r3, #32]
 800e522:	1ad3      	subs	r3, r2, r3
 800e524:	2bf0      	cmp	r3, #240	; 0xf0
 800e526:	d904      	bls.n	800e532 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800e528:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e52c:	3301      	adds	r3, #1
 800e52e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e532:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e536:	2b00      	cmp	r3, #0
 800e538:	d060      	beq.n	800e5fc <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e53c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e540:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e542:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e544:	f000 fccc 	bl	800eee0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d010      	beq.n	800e570 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e54e:	4b50      	ldr	r3, [pc, #320]	; (800e690 <tcp_slowtmr+0x590>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e554:	429a      	cmp	r2, r3
 800e556:	d106      	bne.n	800e566 <tcp_slowtmr+0x466>
 800e558:	4b4e      	ldr	r3, [pc, #312]	; (800e694 <tcp_slowtmr+0x594>)
 800e55a:	f240 526d 	movw	r2, #1389	; 0x56d
 800e55e:	494e      	ldr	r1, [pc, #312]	; (800e698 <tcp_slowtmr+0x598>)
 800e560:	484e      	ldr	r0, [pc, #312]	; (800e69c <tcp_slowtmr+0x59c>)
 800e562:	f008 fd4d 	bl	8017000 <iprintf>
        prev->next = pcb->next;
 800e566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e568:	68da      	ldr	r2, [r3, #12]
 800e56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e56c:	60da      	str	r2, [r3, #12]
 800e56e:	e00f      	b.n	800e590 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e570:	4b47      	ldr	r3, [pc, #284]	; (800e690 <tcp_slowtmr+0x590>)
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e576:	429a      	cmp	r2, r3
 800e578:	d006      	beq.n	800e588 <tcp_slowtmr+0x488>
 800e57a:	4b46      	ldr	r3, [pc, #280]	; (800e694 <tcp_slowtmr+0x594>)
 800e57c:	f240 5271 	movw	r2, #1393	; 0x571
 800e580:	4947      	ldr	r1, [pc, #284]	; (800e6a0 <tcp_slowtmr+0x5a0>)
 800e582:	4846      	ldr	r0, [pc, #280]	; (800e69c <tcp_slowtmr+0x59c>)
 800e584:	f008 fd3c 	bl	8017000 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e58a:	68db      	ldr	r3, [r3, #12]
 800e58c:	4a40      	ldr	r2, [pc, #256]	; (800e690 <tcp_slowtmr+0x590>)
 800e58e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e590:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e594:	2b00      	cmp	r3, #0
 800e596:	d013      	beq.n	800e5c0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e59a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e59e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e5a0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5a4:	3304      	adds	r3, #4
 800e5a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e5a8:	8ad2      	ldrh	r2, [r2, #22]
 800e5aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e5ac:	8b09      	ldrh	r1, [r1, #24]
 800e5ae:	9102      	str	r1, [sp, #8]
 800e5b0:	9201      	str	r2, [sp, #4]
 800e5b2:	9300      	str	r3, [sp, #0]
 800e5b4:	462b      	mov	r3, r5
 800e5b6:	4622      	mov	r2, r4
 800e5b8:	4601      	mov	r1, r0
 800e5ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5bc:	f004 feb0 	bl	8013320 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e5c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c2:	691b      	ldr	r3, [r3, #16]
 800e5c4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c8:	7d1b      	ldrb	r3, [r3, #20]
 800e5ca:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ce:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5d2:	68db      	ldr	r3, [r3, #12]
 800e5d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e5d6:	6838      	ldr	r0, [r7, #0]
 800e5d8:	f7ff f8ba 	bl	800d750 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e5dc:	4b31      	ldr	r3, [pc, #196]	; (800e6a4 <tcp_slowtmr+0x5a4>)
 800e5de:	2200      	movs	r2, #0
 800e5e0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d004      	beq.n	800e5f2 <tcp_slowtmr+0x4f2>
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	f06f 010c 	mvn.w	r1, #12
 800e5ee:	68b8      	ldr	r0, [r7, #8]
 800e5f0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e5f2:	4b2c      	ldr	r3, [pc, #176]	; (800e6a4 <tcp_slowtmr+0x5a4>)
 800e5f4:	781b      	ldrb	r3, [r3, #0]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d037      	beq.n	800e66a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800e5fa:	e592      	b.n	800e122 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5fe:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e602:	68db      	ldr	r3, [r3, #12]
 800e604:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e608:	7f1b      	ldrb	r3, [r3, #28]
 800e60a:	3301      	adds	r3, #1
 800e60c:	b2da      	uxtb	r2, r3
 800e60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e610:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e614:	7f1a      	ldrb	r2, [r3, #28]
 800e616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e618:	7f5b      	ldrb	r3, [r3, #29]
 800e61a:	429a      	cmp	r2, r3
 800e61c:	d325      	bcc.n	800e66a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800e61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e620:	2200      	movs	r2, #0
 800e622:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e624:	4b1f      	ldr	r3, [pc, #124]	; (800e6a4 <tcp_slowtmr+0x5a4>)
 800e626:	2200      	movs	r2, #0
 800e628:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e62c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e630:	2b00      	cmp	r3, #0
 800e632:	d00b      	beq.n	800e64c <tcp_slowtmr+0x54c>
 800e634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e636:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e63a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e63c:	6912      	ldr	r2, [r2, #16]
 800e63e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e640:	4610      	mov	r0, r2
 800e642:	4798      	blx	r3
 800e644:	4603      	mov	r3, r0
 800e646:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e64a:	e002      	b.n	800e652 <tcp_slowtmr+0x552>
 800e64c:	2300      	movs	r3, #0
 800e64e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e652:	4b14      	ldr	r3, [pc, #80]	; (800e6a4 <tcp_slowtmr+0x5a4>)
 800e654:	781b      	ldrb	r3, [r3, #0]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d000      	beq.n	800e65c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800e65a:	e562      	b.n	800e122 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e65c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e660:	2b00      	cmp	r3, #0
 800e662:	d102      	bne.n	800e66a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800e664:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e666:	f004 f8a7 	bl	80127b8 <tcp_output>
  while (pcb != NULL) {
 800e66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	f47f ad5e 	bne.w	800e12e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e672:	2300      	movs	r3, #0
 800e674:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e676:	4b0c      	ldr	r3, [pc, #48]	; (800e6a8 <tcp_slowtmr+0x5a8>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e67c:	e069      	b.n	800e752 <tcp_slowtmr+0x652>
 800e67e:	bf00      	nop
 800e680:	2000d144 	.word	0x2000d144
 800e684:	000a4cb8 	.word	0x000a4cb8
 800e688:	10624dd3 	.word	0x10624dd3
 800e68c:	000124f8 	.word	0x000124f8
 800e690:	2000d150 	.word	0x2000d150
 800e694:	08019ee4 	.word	0x08019ee4
 800e698:	0801a31c 	.word	0x0801a31c
 800e69c:	08019f28 	.word	0x08019f28
 800e6a0:	0801a348 	.word	0x0801a348
 800e6a4:	2000d158 	.word	0x2000d158
 800e6a8:	2000d154 	.word	0x2000d154
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ae:	7d1b      	ldrb	r3, [r3, #20]
 800e6b0:	2b0a      	cmp	r3, #10
 800e6b2:	d006      	beq.n	800e6c2 <tcp_slowtmr+0x5c2>
 800e6b4:	4b2b      	ldr	r3, [pc, #172]	; (800e764 <tcp_slowtmr+0x664>)
 800e6b6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800e6ba:	492b      	ldr	r1, [pc, #172]	; (800e768 <tcp_slowtmr+0x668>)
 800e6bc:	482b      	ldr	r0, [pc, #172]	; (800e76c <tcp_slowtmr+0x66c>)
 800e6be:	f008 fc9f 	bl	8017000 <iprintf>
    pcb_remove = 0;
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e6c8:	4b29      	ldr	r3, [pc, #164]	; (800e770 <tcp_slowtmr+0x670>)
 800e6ca:	681a      	ldr	r2, [r3, #0]
 800e6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ce:	6a1b      	ldr	r3, [r3, #32]
 800e6d0:	1ad3      	subs	r3, r2, r3
 800e6d2:	2bf0      	cmp	r3, #240	; 0xf0
 800e6d4:	d904      	bls.n	800e6e0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800e6d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6da:	3301      	adds	r3, #1
 800e6dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e6e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d02f      	beq.n	800e748 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e6e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e6ea:	f000 fbf9 	bl	800eee0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d010      	beq.n	800e716 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e6f4:	4b1f      	ldr	r3, [pc, #124]	; (800e774 <tcp_slowtmr+0x674>)
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6fa:	429a      	cmp	r2, r3
 800e6fc:	d106      	bne.n	800e70c <tcp_slowtmr+0x60c>
 800e6fe:	4b19      	ldr	r3, [pc, #100]	; (800e764 <tcp_slowtmr+0x664>)
 800e700:	f240 52af 	movw	r2, #1455	; 0x5af
 800e704:	491c      	ldr	r1, [pc, #112]	; (800e778 <tcp_slowtmr+0x678>)
 800e706:	4819      	ldr	r0, [pc, #100]	; (800e76c <tcp_slowtmr+0x66c>)
 800e708:	f008 fc7a 	bl	8017000 <iprintf>
        prev->next = pcb->next;
 800e70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e70e:	68da      	ldr	r2, [r3, #12]
 800e710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e712:	60da      	str	r2, [r3, #12]
 800e714:	e00f      	b.n	800e736 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e716:	4b17      	ldr	r3, [pc, #92]	; (800e774 <tcp_slowtmr+0x674>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e71c:	429a      	cmp	r2, r3
 800e71e:	d006      	beq.n	800e72e <tcp_slowtmr+0x62e>
 800e720:	4b10      	ldr	r3, [pc, #64]	; (800e764 <tcp_slowtmr+0x664>)
 800e722:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e726:	4915      	ldr	r1, [pc, #84]	; (800e77c <tcp_slowtmr+0x67c>)
 800e728:	4810      	ldr	r0, [pc, #64]	; (800e76c <tcp_slowtmr+0x66c>)
 800e72a:	f008 fc69 	bl	8017000 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e730:	68db      	ldr	r3, [r3, #12]
 800e732:	4a10      	ldr	r2, [pc, #64]	; (800e774 <tcp_slowtmr+0x674>)
 800e734:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e738:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e73c:	68db      	ldr	r3, [r3, #12]
 800e73e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e740:	69f8      	ldr	r0, [r7, #28]
 800e742:	f7ff f805 	bl	800d750 <tcp_free>
 800e746:	e004      	b.n	800e752 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800e748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e74a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e74e:	68db      	ldr	r3, [r3, #12]
 800e750:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e754:	2b00      	cmp	r3, #0
 800e756:	d1a9      	bne.n	800e6ac <tcp_slowtmr+0x5ac>
    }
  }
}
 800e758:	bf00      	nop
 800e75a:	bf00      	nop
 800e75c:	3730      	adds	r7, #48	; 0x30
 800e75e:	46bd      	mov	sp, r7
 800e760:	bdb0      	pop	{r4, r5, r7, pc}
 800e762:	bf00      	nop
 800e764:	08019ee4 	.word	0x08019ee4
 800e768:	0801a374 	.word	0x0801a374
 800e76c:	08019f28 	.word	0x08019f28
 800e770:	2000d144 	.word	0x2000d144
 800e774:	2000d154 	.word	0x2000d154
 800e778:	0801a3a4 	.word	0x0801a3a4
 800e77c:	0801a3cc 	.word	0x0801a3cc

0800e780 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b082      	sub	sp, #8
 800e784:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e786:	4b2d      	ldr	r3, [pc, #180]	; (800e83c <tcp_fasttmr+0xbc>)
 800e788:	781b      	ldrb	r3, [r3, #0]
 800e78a:	3301      	adds	r3, #1
 800e78c:	b2da      	uxtb	r2, r3
 800e78e:	4b2b      	ldr	r3, [pc, #172]	; (800e83c <tcp_fasttmr+0xbc>)
 800e790:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e792:	4b2b      	ldr	r3, [pc, #172]	; (800e840 <tcp_fasttmr+0xc0>)
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e798:	e048      	b.n	800e82c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	7f9a      	ldrb	r2, [r3, #30]
 800e79e:	4b27      	ldr	r3, [pc, #156]	; (800e83c <tcp_fasttmr+0xbc>)
 800e7a0:	781b      	ldrb	r3, [r3, #0]
 800e7a2:	429a      	cmp	r2, r3
 800e7a4:	d03f      	beq.n	800e826 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e7a6:	4b25      	ldr	r3, [pc, #148]	; (800e83c <tcp_fasttmr+0xbc>)
 800e7a8:	781a      	ldrb	r2, [r3, #0]
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	8b5b      	ldrh	r3, [r3, #26]
 800e7b2:	f003 0301 	and.w	r3, r3, #1
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d010      	beq.n	800e7dc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	8b5b      	ldrh	r3, [r3, #26]
 800e7be:	f043 0302 	orr.w	r3, r3, #2
 800e7c2:	b29a      	uxth	r2, r3
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e7c8:	6878      	ldr	r0, [r7, #4]
 800e7ca:	f003 fff5 	bl	80127b8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	8b5b      	ldrh	r3, [r3, #26]
 800e7d2:	f023 0303 	bic.w	r3, r3, #3
 800e7d6:	b29a      	uxth	r2, r3
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	8b5b      	ldrh	r3, [r3, #26]
 800e7e0:	f003 0308 	and.w	r3, r3, #8
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d009      	beq.n	800e7fc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	8b5b      	ldrh	r3, [r3, #26]
 800e7ec:	f023 0308 	bic.w	r3, r3, #8
 800e7f0:	b29a      	uxth	r2, r3
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e7f6:	6878      	ldr	r0, [r7, #4]
 800e7f8:	f7ff f93e 	bl	800da78 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	68db      	ldr	r3, [r3, #12]
 800e800:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e806:	2b00      	cmp	r3, #0
 800e808:	d00a      	beq.n	800e820 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e80a:	4b0e      	ldr	r3, [pc, #56]	; (800e844 <tcp_fasttmr+0xc4>)
 800e80c:	2200      	movs	r2, #0
 800e80e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e810:	6878      	ldr	r0, [r7, #4]
 800e812:	f000 f819 	bl	800e848 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e816:	4b0b      	ldr	r3, [pc, #44]	; (800e844 <tcp_fasttmr+0xc4>)
 800e818:	781b      	ldrb	r3, [r3, #0]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d000      	beq.n	800e820 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e81e:	e7b8      	b.n	800e792 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	607b      	str	r3, [r7, #4]
 800e824:	e002      	b.n	800e82c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	68db      	ldr	r3, [r3, #12]
 800e82a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d1b3      	bne.n	800e79a <tcp_fasttmr+0x1a>
    }
  }
}
 800e832:	bf00      	nop
 800e834:	bf00      	nop
 800e836:	3708      	adds	r7, #8
 800e838:	46bd      	mov	sp, r7
 800e83a:	bd80      	pop	{r7, pc}
 800e83c:	2000d15a 	.word	0x2000d15a
 800e840:	2000d150 	.word	0x2000d150
 800e844:	2000d158 	.word	0x2000d158

0800e848 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e848:	b590      	push	{r4, r7, lr}
 800e84a:	b085      	sub	sp, #20
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d109      	bne.n	800e86a <tcp_process_refused_data+0x22>
 800e856:	4b37      	ldr	r3, [pc, #220]	; (800e934 <tcp_process_refused_data+0xec>)
 800e858:	f240 6209 	movw	r2, #1545	; 0x609
 800e85c:	4936      	ldr	r1, [pc, #216]	; (800e938 <tcp_process_refused_data+0xf0>)
 800e85e:	4837      	ldr	r0, [pc, #220]	; (800e93c <tcp_process_refused_data+0xf4>)
 800e860:	f008 fbce 	bl	8017000 <iprintf>
 800e864:	f06f 030f 	mvn.w	r3, #15
 800e868:	e060      	b.n	800e92c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e86e:	7b5b      	ldrb	r3, [r3, #13]
 800e870:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e876:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2200      	movs	r2, #0
 800e87c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e884:	2b00      	cmp	r3, #0
 800e886:	d00b      	beq.n	800e8a0 <tcp_process_refused_data+0x58>
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	6918      	ldr	r0, [r3, #16]
 800e892:	2300      	movs	r3, #0
 800e894:	68ba      	ldr	r2, [r7, #8]
 800e896:	6879      	ldr	r1, [r7, #4]
 800e898:	47a0      	blx	r4
 800e89a:	4603      	mov	r3, r0
 800e89c:	73fb      	strb	r3, [r7, #15]
 800e89e:	e007      	b.n	800e8b0 <tcp_process_refused_data+0x68>
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	68ba      	ldr	r2, [r7, #8]
 800e8a4:	6879      	ldr	r1, [r7, #4]
 800e8a6:	2000      	movs	r0, #0
 800e8a8:	f000 f8a4 	bl	800e9f4 <tcp_recv_null>
 800e8ac:	4603      	mov	r3, r0
 800e8ae:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e8b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d12a      	bne.n	800e90e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e8b8:	7bbb      	ldrb	r3, [r7, #14]
 800e8ba:	f003 0320 	and.w	r3, r3, #32
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d033      	beq.n	800e92a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e8c6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e8ca:	d005      	beq.n	800e8d8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e8d0:	3301      	adds	r3, #1
 800e8d2:	b29a      	uxth	r2, r3
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d00b      	beq.n	800e8fa <tcp_process_refused_data+0xb2>
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	6918      	ldr	r0, [r3, #16]
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	6879      	ldr	r1, [r7, #4]
 800e8f2:	47a0      	blx	r4
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	73fb      	strb	r3, [r7, #15]
 800e8f8:	e001      	b.n	800e8fe <tcp_process_refused_data+0xb6>
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e8fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e902:	f113 0f0d 	cmn.w	r3, #13
 800e906:	d110      	bne.n	800e92a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e908:	f06f 030c 	mvn.w	r3, #12
 800e90c:	e00e      	b.n	800e92c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e90e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e912:	f113 0f0d 	cmn.w	r3, #13
 800e916:	d102      	bne.n	800e91e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e918:	f06f 030c 	mvn.w	r3, #12
 800e91c:	e006      	b.n	800e92c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	68ba      	ldr	r2, [r7, #8]
 800e922:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800e924:	f06f 0304 	mvn.w	r3, #4
 800e928:	e000      	b.n	800e92c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e92a:	2300      	movs	r3, #0
}
 800e92c:	4618      	mov	r0, r3
 800e92e:	3714      	adds	r7, #20
 800e930:	46bd      	mov	sp, r7
 800e932:	bd90      	pop	{r4, r7, pc}
 800e934:	08019ee4 	.word	0x08019ee4
 800e938:	0801a3f4 	.word	0x0801a3f4
 800e93c:	08019f28 	.word	0x08019f28

0800e940 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b084      	sub	sp, #16
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e948:	e007      	b.n	800e95a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e950:	6878      	ldr	r0, [r7, #4]
 800e952:	f000 f80a 	bl	800e96a <tcp_seg_free>
    seg = next;
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d1f4      	bne.n	800e94a <tcp_segs_free+0xa>
  }
}
 800e960:	bf00      	nop
 800e962:	bf00      	nop
 800e964:	3710      	adds	r7, #16
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}

0800e96a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e96a:	b580      	push	{r7, lr}
 800e96c:	b082      	sub	sp, #8
 800e96e:	af00      	add	r7, sp, #0
 800e970:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d00c      	beq.n	800e992 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	685b      	ldr	r3, [r3, #4]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d004      	beq.n	800e98a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	685b      	ldr	r3, [r3, #4]
 800e984:	4618      	mov	r0, r3
 800e986:	f7fe fc27 	bl	800d1d8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e98a:	6879      	ldr	r1, [r7, #4]
 800e98c:	2003      	movs	r0, #3
 800e98e:	f7fd fd4d 	bl	800c42c <memp_free>
  }
}
 800e992:	bf00      	nop
 800e994:	3708      	adds	r7, #8
 800e996:	46bd      	mov	sp, r7
 800e998:	bd80      	pop	{r7, pc}
	...

0800e99c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b084      	sub	sp, #16
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d106      	bne.n	800e9b8 <tcp_seg_copy+0x1c>
 800e9aa:	4b0f      	ldr	r3, [pc, #60]	; (800e9e8 <tcp_seg_copy+0x4c>)
 800e9ac:	f240 6282 	movw	r2, #1666	; 0x682
 800e9b0:	490e      	ldr	r1, [pc, #56]	; (800e9ec <tcp_seg_copy+0x50>)
 800e9b2:	480f      	ldr	r0, [pc, #60]	; (800e9f0 <tcp_seg_copy+0x54>)
 800e9b4:	f008 fb24 	bl	8017000 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e9b8:	2003      	movs	r0, #3
 800e9ba:	f7fd fce5 	bl	800c388 <memp_malloc>
 800e9be:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d101      	bne.n	800e9ca <tcp_seg_copy+0x2e>
    return NULL;
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	e00a      	b.n	800e9e0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e9ca:	2210      	movs	r2, #16
 800e9cc:	6879      	ldr	r1, [r7, #4]
 800e9ce:	68f8      	ldr	r0, [r7, #12]
 800e9d0:	f008 fae6 	bl	8016fa0 <memcpy>
  pbuf_ref(cseg->p);
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	685b      	ldr	r3, [r3, #4]
 800e9d8:	4618      	mov	r0, r3
 800e9da:	f7fe fca3 	bl	800d324 <pbuf_ref>
  return cseg;
 800e9de:	68fb      	ldr	r3, [r7, #12]
}
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	3710      	adds	r7, #16
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}
 800e9e8:	08019ee4 	.word	0x08019ee4
 800e9ec:	0801a438 	.word	0x0801a438
 800e9f0:	08019f28 	.word	0x08019f28

0800e9f4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b084      	sub	sp, #16
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	60f8      	str	r0, [r7, #12]
 800e9fc:	60b9      	str	r1, [r7, #8]
 800e9fe:	607a      	str	r2, [r7, #4]
 800ea00:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ea02:	68bb      	ldr	r3, [r7, #8]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d109      	bne.n	800ea1c <tcp_recv_null+0x28>
 800ea08:	4b12      	ldr	r3, [pc, #72]	; (800ea54 <tcp_recv_null+0x60>)
 800ea0a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ea0e:	4912      	ldr	r1, [pc, #72]	; (800ea58 <tcp_recv_null+0x64>)
 800ea10:	4812      	ldr	r0, [pc, #72]	; (800ea5c <tcp_recv_null+0x68>)
 800ea12:	f008 faf5 	bl	8017000 <iprintf>
 800ea16:	f06f 030f 	mvn.w	r3, #15
 800ea1a:	e016      	b.n	800ea4a <tcp_recv_null+0x56>

  if (p != NULL) {
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d009      	beq.n	800ea36 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	891b      	ldrh	r3, [r3, #8]
 800ea26:	4619      	mov	r1, r3
 800ea28:	68b8      	ldr	r0, [r7, #8]
 800ea2a:	f7ff fad3 	bl	800dfd4 <tcp_recved>
    pbuf_free(p);
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	f7fe fbd2 	bl	800d1d8 <pbuf_free>
 800ea34:	e008      	b.n	800ea48 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ea36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d104      	bne.n	800ea48 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ea3e:	68b8      	ldr	r0, [r7, #8]
 800ea40:	f7ff f884 	bl	800db4c <tcp_close>
 800ea44:	4603      	mov	r3, r0
 800ea46:	e000      	b.n	800ea4a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ea48:	2300      	movs	r3, #0
}
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	3710      	adds	r7, #16
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}
 800ea52:	bf00      	nop
 800ea54:	08019ee4 	.word	0x08019ee4
 800ea58:	0801a454 	.word	0x0801a454
 800ea5c:	08019f28 	.word	0x08019f28

0800ea60 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b086      	sub	sp, #24
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	4603      	mov	r3, r0
 800ea68:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ea6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	db01      	blt.n	800ea76 <tcp_kill_prio+0x16>
 800ea72:	79fb      	ldrb	r3, [r7, #7]
 800ea74:	e000      	b.n	800ea78 <tcp_kill_prio+0x18>
 800ea76:	237f      	movs	r3, #127	; 0x7f
 800ea78:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ea7a:	7afb      	ldrb	r3, [r7, #11]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d034      	beq.n	800eaea <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ea80:	7afb      	ldrb	r3, [r7, #11]
 800ea82:	3b01      	subs	r3, #1
 800ea84:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ea86:	2300      	movs	r3, #0
 800ea88:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ea8e:	4b19      	ldr	r3, [pc, #100]	; (800eaf4 <tcp_kill_prio+0x94>)
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	617b      	str	r3, [r7, #20]
 800ea94:	e01f      	b.n	800ead6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ea96:	697b      	ldr	r3, [r7, #20]
 800ea98:	7d5b      	ldrb	r3, [r3, #21]
 800ea9a:	7afa      	ldrb	r2, [r7, #11]
 800ea9c:	429a      	cmp	r2, r3
 800ea9e:	d80c      	bhi.n	800eaba <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800eaa0:	697b      	ldr	r3, [r7, #20]
 800eaa2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800eaa4:	7afa      	ldrb	r2, [r7, #11]
 800eaa6:	429a      	cmp	r2, r3
 800eaa8:	d112      	bne.n	800ead0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800eaaa:	4b13      	ldr	r3, [pc, #76]	; (800eaf8 <tcp_kill_prio+0x98>)
 800eaac:	681a      	ldr	r2, [r3, #0]
 800eaae:	697b      	ldr	r3, [r7, #20]
 800eab0:	6a1b      	ldr	r3, [r3, #32]
 800eab2:	1ad3      	subs	r3, r2, r3
 800eab4:	68fa      	ldr	r2, [r7, #12]
 800eab6:	429a      	cmp	r2, r3
 800eab8:	d80a      	bhi.n	800ead0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800eaba:	4b0f      	ldr	r3, [pc, #60]	; (800eaf8 <tcp_kill_prio+0x98>)
 800eabc:	681a      	ldr	r2, [r3, #0]
 800eabe:	697b      	ldr	r3, [r7, #20]
 800eac0:	6a1b      	ldr	r3, [r3, #32]
 800eac2:	1ad3      	subs	r3, r2, r3
 800eac4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800eac6:	697b      	ldr	r3, [r7, #20]
 800eac8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800eaca:	697b      	ldr	r3, [r7, #20]
 800eacc:	7d5b      	ldrb	r3, [r3, #21]
 800eace:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ead0:	697b      	ldr	r3, [r7, #20]
 800ead2:	68db      	ldr	r3, [r3, #12]
 800ead4:	617b      	str	r3, [r7, #20]
 800ead6:	697b      	ldr	r3, [r7, #20]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d1dc      	bne.n	800ea96 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800eadc:	693b      	ldr	r3, [r7, #16]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d004      	beq.n	800eaec <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800eae2:	6938      	ldr	r0, [r7, #16]
 800eae4:	f7ff f978 	bl	800ddd8 <tcp_abort>
 800eae8:	e000      	b.n	800eaec <tcp_kill_prio+0x8c>
    return;
 800eaea:	bf00      	nop
  }
}
 800eaec:	3718      	adds	r7, #24
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bd80      	pop	{r7, pc}
 800eaf2:	bf00      	nop
 800eaf4:	2000d150 	.word	0x2000d150
 800eaf8:	2000d144 	.word	0x2000d144

0800eafc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b086      	sub	sp, #24
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	4603      	mov	r3, r0
 800eb04:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800eb06:	79fb      	ldrb	r3, [r7, #7]
 800eb08:	2b08      	cmp	r3, #8
 800eb0a:	d009      	beq.n	800eb20 <tcp_kill_state+0x24>
 800eb0c:	79fb      	ldrb	r3, [r7, #7]
 800eb0e:	2b09      	cmp	r3, #9
 800eb10:	d006      	beq.n	800eb20 <tcp_kill_state+0x24>
 800eb12:	4b1a      	ldr	r3, [pc, #104]	; (800eb7c <tcp_kill_state+0x80>)
 800eb14:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800eb18:	4919      	ldr	r1, [pc, #100]	; (800eb80 <tcp_kill_state+0x84>)
 800eb1a:	481a      	ldr	r0, [pc, #104]	; (800eb84 <tcp_kill_state+0x88>)
 800eb1c:	f008 fa70 	bl	8017000 <iprintf>

  inactivity = 0;
 800eb20:	2300      	movs	r3, #0
 800eb22:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800eb24:	2300      	movs	r3, #0
 800eb26:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb28:	4b17      	ldr	r3, [pc, #92]	; (800eb88 <tcp_kill_state+0x8c>)
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	617b      	str	r3, [r7, #20]
 800eb2e:	e017      	b.n	800eb60 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800eb30:	697b      	ldr	r3, [r7, #20]
 800eb32:	7d1b      	ldrb	r3, [r3, #20]
 800eb34:	79fa      	ldrb	r2, [r7, #7]
 800eb36:	429a      	cmp	r2, r3
 800eb38:	d10f      	bne.n	800eb5a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800eb3a:	4b14      	ldr	r3, [pc, #80]	; (800eb8c <tcp_kill_state+0x90>)
 800eb3c:	681a      	ldr	r2, [r3, #0]
 800eb3e:	697b      	ldr	r3, [r7, #20]
 800eb40:	6a1b      	ldr	r3, [r3, #32]
 800eb42:	1ad3      	subs	r3, r2, r3
 800eb44:	68fa      	ldr	r2, [r7, #12]
 800eb46:	429a      	cmp	r2, r3
 800eb48:	d807      	bhi.n	800eb5a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800eb4a:	4b10      	ldr	r3, [pc, #64]	; (800eb8c <tcp_kill_state+0x90>)
 800eb4c:	681a      	ldr	r2, [r3, #0]
 800eb4e:	697b      	ldr	r3, [r7, #20]
 800eb50:	6a1b      	ldr	r3, [r3, #32]
 800eb52:	1ad3      	subs	r3, r2, r3
 800eb54:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800eb56:	697b      	ldr	r3, [r7, #20]
 800eb58:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb5a:	697b      	ldr	r3, [r7, #20]
 800eb5c:	68db      	ldr	r3, [r3, #12]
 800eb5e:	617b      	str	r3, [r7, #20]
 800eb60:	697b      	ldr	r3, [r7, #20]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d1e4      	bne.n	800eb30 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800eb66:	693b      	ldr	r3, [r7, #16]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d003      	beq.n	800eb74 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800eb6c:	2100      	movs	r1, #0
 800eb6e:	6938      	ldr	r0, [r7, #16]
 800eb70:	f7ff f874 	bl	800dc5c <tcp_abandon>
  }
}
 800eb74:	bf00      	nop
 800eb76:	3718      	adds	r7, #24
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	bd80      	pop	{r7, pc}
 800eb7c:	08019ee4 	.word	0x08019ee4
 800eb80:	0801a470 	.word	0x0801a470
 800eb84:	08019f28 	.word	0x08019f28
 800eb88:	2000d150 	.word	0x2000d150
 800eb8c:	2000d144 	.word	0x2000d144

0800eb90 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b084      	sub	sp, #16
 800eb94:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800eb96:	2300      	movs	r3, #0
 800eb98:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb9e:	4b12      	ldr	r3, [pc, #72]	; (800ebe8 <tcp_kill_timewait+0x58>)
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	60fb      	str	r3, [r7, #12]
 800eba4:	e012      	b.n	800ebcc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800eba6:	4b11      	ldr	r3, [pc, #68]	; (800ebec <tcp_kill_timewait+0x5c>)
 800eba8:	681a      	ldr	r2, [r3, #0]
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	6a1b      	ldr	r3, [r3, #32]
 800ebae:	1ad3      	subs	r3, r2, r3
 800ebb0:	687a      	ldr	r2, [r7, #4]
 800ebb2:	429a      	cmp	r2, r3
 800ebb4:	d807      	bhi.n	800ebc6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ebb6:	4b0d      	ldr	r3, [pc, #52]	; (800ebec <tcp_kill_timewait+0x5c>)
 800ebb8:	681a      	ldr	r2, [r3, #0]
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	6a1b      	ldr	r3, [r3, #32]
 800ebbe:	1ad3      	subs	r3, r2, r3
 800ebc0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	68db      	ldr	r3, [r3, #12]
 800ebca:	60fb      	str	r3, [r7, #12]
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d1e9      	bne.n	800eba6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ebd2:	68bb      	ldr	r3, [r7, #8]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d002      	beq.n	800ebde <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ebd8:	68b8      	ldr	r0, [r7, #8]
 800ebda:	f7ff f8fd 	bl	800ddd8 <tcp_abort>
  }
}
 800ebde:	bf00      	nop
 800ebe0:	3710      	adds	r7, #16
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	bd80      	pop	{r7, pc}
 800ebe6:	bf00      	nop
 800ebe8:	2000d154 	.word	0x2000d154
 800ebec:	2000d144 	.word	0x2000d144

0800ebf0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b082      	sub	sp, #8
 800ebf4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800ebf6:	4b10      	ldr	r3, [pc, #64]	; (800ec38 <tcp_handle_closepend+0x48>)
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ebfc:	e014      	b.n	800ec28 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	68db      	ldr	r3, [r3, #12]
 800ec02:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	8b5b      	ldrh	r3, [r3, #26]
 800ec08:	f003 0308 	and.w	r3, r3, #8
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d009      	beq.n	800ec24 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	8b5b      	ldrh	r3, [r3, #26]
 800ec14:	f023 0308 	bic.w	r3, r3, #8
 800ec18:	b29a      	uxth	r2, r3
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800ec1e:	6878      	ldr	r0, [r7, #4]
 800ec20:	f7fe ff2a 	bl	800da78 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800ec24:	683b      	ldr	r3, [r7, #0]
 800ec26:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d1e7      	bne.n	800ebfe <tcp_handle_closepend+0xe>
  }
}
 800ec2e:	bf00      	nop
 800ec30:	bf00      	nop
 800ec32:	3708      	adds	r7, #8
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}
 800ec38:	2000d150 	.word	0x2000d150

0800ec3c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b084      	sub	sp, #16
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	4603      	mov	r3, r0
 800ec44:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ec46:	2001      	movs	r0, #1
 800ec48:	f7fd fb9e 	bl	800c388 <memp_malloc>
 800ec4c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d126      	bne.n	800eca2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ec54:	f7ff ffcc 	bl	800ebf0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ec58:	f7ff ff9a 	bl	800eb90 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ec5c:	2001      	movs	r0, #1
 800ec5e:	f7fd fb93 	bl	800c388 <memp_malloc>
 800ec62:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d11b      	bne.n	800eca2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ec6a:	2009      	movs	r0, #9
 800ec6c:	f7ff ff46 	bl	800eafc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ec70:	2001      	movs	r0, #1
 800ec72:	f7fd fb89 	bl	800c388 <memp_malloc>
 800ec76:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d111      	bne.n	800eca2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ec7e:	2008      	movs	r0, #8
 800ec80:	f7ff ff3c 	bl	800eafc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ec84:	2001      	movs	r0, #1
 800ec86:	f7fd fb7f 	bl	800c388 <memp_malloc>
 800ec8a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d107      	bne.n	800eca2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ec92:	79fb      	ldrb	r3, [r7, #7]
 800ec94:	4618      	mov	r0, r3
 800ec96:	f7ff fee3 	bl	800ea60 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ec9a:	2001      	movs	r0, #1
 800ec9c:	f7fd fb74 	bl	800c388 <memp_malloc>
 800eca0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d03f      	beq.n	800ed28 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800eca8:	229c      	movs	r2, #156	; 0x9c
 800ecaa:	2100      	movs	r1, #0
 800ecac:	68f8      	ldr	r0, [r7, #12]
 800ecae:	f008 f99f 	bl	8016ff0 <memset>
    pcb->prio = prio;
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	79fa      	ldrb	r2, [r7, #7]
 800ecb6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ecbe:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ecc8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	22ff      	movs	r2, #255	; 0xff
 800ecd6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ecde:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	2206      	movs	r2, #6
 800ece4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	2206      	movs	r2, #6
 800ecec:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ecf4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	2201      	movs	r2, #1
 800ecfa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ecfe:	4b0d      	ldr	r3, [pc, #52]	; (800ed34 <tcp_alloc+0xf8>)
 800ed00:	681a      	ldr	r2, [r3, #0]
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ed06:	4b0c      	ldr	r3, [pc, #48]	; (800ed38 <tcp_alloc+0xfc>)
 800ed08:	781a      	ldrb	r2, [r3, #0]
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ed14:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	4a08      	ldr	r2, [pc, #32]	; (800ed3c <tcp_alloc+0x100>)
 800ed1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	4a07      	ldr	r2, [pc, #28]	; (800ed40 <tcp_alloc+0x104>)
 800ed24:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ed28:	68fb      	ldr	r3, [r7, #12]
}
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	3710      	adds	r7, #16
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	bd80      	pop	{r7, pc}
 800ed32:	bf00      	nop
 800ed34:	2000d144 	.word	0x2000d144
 800ed38:	2000d15a 	.word	0x2000d15a
 800ed3c:	0800e9f5 	.word	0x0800e9f5
 800ed40:	006ddd00 	.word	0x006ddd00

0800ed44 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b084      	sub	sp, #16
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800ed4e:	2040      	movs	r0, #64	; 0x40
 800ed50:	f7ff ff74 	bl	800ec3c <tcp_alloc>
 800ed54:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800ed56:	68fb      	ldr	r3, [r7, #12]
}
 800ed58:	4618      	mov	r0, r3
 800ed5a:	3710      	adds	r7, #16
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bd80      	pop	{r7, pc}

0800ed60 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800ed60:	b480      	push	{r7}
 800ed62:	b083      	sub	sp, #12
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
 800ed68:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d002      	beq.n	800ed76 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	683a      	ldr	r2, [r7, #0]
 800ed74:	611a      	str	r2, [r3, #16]
  }
}
 800ed76:	bf00      	nop
 800ed78:	370c      	adds	r7, #12
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed80:	4770      	bx	lr
	...

0800ed84 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b082      	sub	sp, #8
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
 800ed8c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d00e      	beq.n	800edb2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	7d1b      	ldrb	r3, [r3, #20]
 800ed98:	2b01      	cmp	r3, #1
 800ed9a:	d106      	bne.n	800edaa <tcp_recv+0x26>
 800ed9c:	4b07      	ldr	r3, [pc, #28]	; (800edbc <tcp_recv+0x38>)
 800ed9e:	f240 72df 	movw	r2, #2015	; 0x7df
 800eda2:	4907      	ldr	r1, [pc, #28]	; (800edc0 <tcp_recv+0x3c>)
 800eda4:	4807      	ldr	r0, [pc, #28]	; (800edc4 <tcp_recv+0x40>)
 800eda6:	f008 f92b 	bl	8017000 <iprintf>
    pcb->recv = recv;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	683a      	ldr	r2, [r7, #0]
 800edae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800edb2:	bf00      	nop
 800edb4:	3708      	adds	r7, #8
 800edb6:	46bd      	mov	sp, r7
 800edb8:	bd80      	pop	{r7, pc}
 800edba:	bf00      	nop
 800edbc:	08019ee4 	.word	0x08019ee4
 800edc0:	0801a480 	.word	0x0801a480
 800edc4:	08019f28 	.word	0x08019f28

0800edc8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b082      	sub	sp, #8
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
 800edd0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d00e      	beq.n	800edf6 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	7d1b      	ldrb	r3, [r3, #20]
 800eddc:	2b01      	cmp	r3, #1
 800edde:	d106      	bne.n	800edee <tcp_sent+0x26>
 800ede0:	4b07      	ldr	r3, [pc, #28]	; (800ee00 <tcp_sent+0x38>)
 800ede2:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800ede6:	4907      	ldr	r1, [pc, #28]	; (800ee04 <tcp_sent+0x3c>)
 800ede8:	4807      	ldr	r0, [pc, #28]	; (800ee08 <tcp_sent+0x40>)
 800edea:	f008 f909 	bl	8017000 <iprintf>
    pcb->sent = sent;
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	683a      	ldr	r2, [r7, #0]
 800edf2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800edf6:	bf00      	nop
 800edf8:	3708      	adds	r7, #8
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}
 800edfe:	bf00      	nop
 800ee00:	08019ee4 	.word	0x08019ee4
 800ee04:	0801a4a8 	.word	0x0801a4a8
 800ee08:	08019f28 	.word	0x08019f28

0800ee0c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b082      	sub	sp, #8
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
 800ee14:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d00e      	beq.n	800ee3a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	7d1b      	ldrb	r3, [r3, #20]
 800ee20:	2b01      	cmp	r3, #1
 800ee22:	d106      	bne.n	800ee32 <tcp_err+0x26>
 800ee24:	4b07      	ldr	r3, [pc, #28]	; (800ee44 <tcp_err+0x38>)
 800ee26:	f640 020d 	movw	r2, #2061	; 0x80d
 800ee2a:	4907      	ldr	r1, [pc, #28]	; (800ee48 <tcp_err+0x3c>)
 800ee2c:	4807      	ldr	r0, [pc, #28]	; (800ee4c <tcp_err+0x40>)
 800ee2e:	f008 f8e7 	bl	8017000 <iprintf>
    pcb->errf = err;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	683a      	ldr	r2, [r7, #0]
 800ee36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800ee3a:	bf00      	nop
 800ee3c:	3708      	adds	r7, #8
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bd80      	pop	{r7, pc}
 800ee42:	bf00      	nop
 800ee44:	08019ee4 	.word	0x08019ee4
 800ee48:	0801a4d0 	.word	0x0801a4d0
 800ee4c:	08019f28 	.word	0x08019f28

0800ee50 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800ee50:	b480      	push	{r7}
 800ee52:	b085      	sub	sp, #20
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
 800ee58:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d008      	beq.n	800ee72 <tcp_accept+0x22>
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	7d1b      	ldrb	r3, [r3, #20]
 800ee64:	2b01      	cmp	r3, #1
 800ee66:	d104      	bne.n	800ee72 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	683a      	ldr	r2, [r7, #0]
 800ee70:	619a      	str	r2, [r3, #24]
  }
}
 800ee72:	bf00      	nop
 800ee74:	3714      	adds	r7, #20
 800ee76:	46bd      	mov	sp, r7
 800ee78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7c:	4770      	bx	lr
	...

0800ee80 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b084      	sub	sp, #16
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	60f8      	str	r0, [r7, #12]
 800ee88:	60b9      	str	r1, [r7, #8]
 800ee8a:	4613      	mov	r3, r2
 800ee8c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d107      	bne.n	800eea4 <tcp_poll+0x24>
 800ee94:	4b0e      	ldr	r3, [pc, #56]	; (800eed0 <tcp_poll+0x50>)
 800ee96:	f640 023d 	movw	r2, #2109	; 0x83d
 800ee9a:	490e      	ldr	r1, [pc, #56]	; (800eed4 <tcp_poll+0x54>)
 800ee9c:	480e      	ldr	r0, [pc, #56]	; (800eed8 <tcp_poll+0x58>)
 800ee9e:	f008 f8af 	bl	8017000 <iprintf>
 800eea2:	e011      	b.n	800eec8 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	7d1b      	ldrb	r3, [r3, #20]
 800eea8:	2b01      	cmp	r3, #1
 800eeaa:	d106      	bne.n	800eeba <tcp_poll+0x3a>
 800eeac:	4b08      	ldr	r3, [pc, #32]	; (800eed0 <tcp_poll+0x50>)
 800eeae:	f640 023e 	movw	r2, #2110	; 0x83e
 800eeb2:	490a      	ldr	r1, [pc, #40]	; (800eedc <tcp_poll+0x5c>)
 800eeb4:	4808      	ldr	r0, [pc, #32]	; (800eed8 <tcp_poll+0x58>)
 800eeb6:	f008 f8a3 	bl	8017000 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	68ba      	ldr	r2, [r7, #8]
 800eebe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	79fa      	ldrb	r2, [r7, #7]
 800eec6:	775a      	strb	r2, [r3, #29]
}
 800eec8:	3710      	adds	r7, #16
 800eeca:	46bd      	mov	sp, r7
 800eecc:	bd80      	pop	{r7, pc}
 800eece:	bf00      	nop
 800eed0:	08019ee4 	.word	0x08019ee4
 800eed4:	0801a4f8 	.word	0x0801a4f8
 800eed8:	08019f28 	.word	0x08019f28
 800eedc:	0801a510 	.word	0x0801a510

0800eee0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b082      	sub	sp, #8
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d107      	bne.n	800eefe <tcp_pcb_purge+0x1e>
 800eeee:	4b21      	ldr	r3, [pc, #132]	; (800ef74 <tcp_pcb_purge+0x94>)
 800eef0:	f640 0251 	movw	r2, #2129	; 0x851
 800eef4:	4920      	ldr	r1, [pc, #128]	; (800ef78 <tcp_pcb_purge+0x98>)
 800eef6:	4821      	ldr	r0, [pc, #132]	; (800ef7c <tcp_pcb_purge+0x9c>)
 800eef8:	f008 f882 	bl	8017000 <iprintf>
 800eefc:	e037      	b.n	800ef6e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	7d1b      	ldrb	r3, [r3, #20]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d033      	beq.n	800ef6e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800ef0a:	2b0a      	cmp	r3, #10
 800ef0c:	d02f      	beq.n	800ef6e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800ef12:	2b01      	cmp	r3, #1
 800ef14:	d02b      	beq.n	800ef6e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d007      	beq.n	800ef2e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ef22:	4618      	mov	r0, r3
 800ef24:	f7fe f958 	bl	800d1d8 <pbuf_free>
      pcb->refused_data = NULL;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d002      	beq.n	800ef3c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800ef36:	6878      	ldr	r0, [r7, #4]
 800ef38:	f000 f986 	bl	800f248 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef42:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f7ff fcf9 	bl	800e940 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef52:	4618      	mov	r0, r3
 800ef54:	f7ff fcf4 	bl	800e940 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	66da      	str	r2, [r3, #108]	; 0x6c
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	2200      	movs	r2, #0
 800ef6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ef6e:	3708      	adds	r7, #8
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bd80      	pop	{r7, pc}
 800ef74:	08019ee4 	.word	0x08019ee4
 800ef78:	0801a530 	.word	0x0801a530
 800ef7c:	08019f28 	.word	0x08019f28

0800ef80 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b084      	sub	sp, #16
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
 800ef88:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ef8a:	683b      	ldr	r3, [r7, #0]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d106      	bne.n	800ef9e <tcp_pcb_remove+0x1e>
 800ef90:	4b3e      	ldr	r3, [pc, #248]	; (800f08c <tcp_pcb_remove+0x10c>)
 800ef92:	f640 0283 	movw	r2, #2179	; 0x883
 800ef96:	493e      	ldr	r1, [pc, #248]	; (800f090 <tcp_pcb_remove+0x110>)
 800ef98:	483e      	ldr	r0, [pc, #248]	; (800f094 <tcp_pcb_remove+0x114>)
 800ef9a:	f008 f831 	bl	8017000 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d106      	bne.n	800efb2 <tcp_pcb_remove+0x32>
 800efa4:	4b39      	ldr	r3, [pc, #228]	; (800f08c <tcp_pcb_remove+0x10c>)
 800efa6:	f640 0284 	movw	r2, #2180	; 0x884
 800efaa:	493b      	ldr	r1, [pc, #236]	; (800f098 <tcp_pcb_remove+0x118>)
 800efac:	4839      	ldr	r0, [pc, #228]	; (800f094 <tcp_pcb_remove+0x114>)
 800efae:	f008 f827 	bl	8017000 <iprintf>

  TCP_RMV(pcblist, pcb);
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	683a      	ldr	r2, [r7, #0]
 800efb8:	429a      	cmp	r2, r3
 800efba:	d105      	bne.n	800efc8 <tcp_pcb_remove+0x48>
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	68da      	ldr	r2, [r3, #12]
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	601a      	str	r2, [r3, #0]
 800efc6:	e013      	b.n	800eff0 <tcp_pcb_remove+0x70>
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	60fb      	str	r3, [r7, #12]
 800efce:	e00c      	b.n	800efea <tcp_pcb_remove+0x6a>
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	68db      	ldr	r3, [r3, #12]
 800efd4:	683a      	ldr	r2, [r7, #0]
 800efd6:	429a      	cmp	r2, r3
 800efd8:	d104      	bne.n	800efe4 <tcp_pcb_remove+0x64>
 800efda:	683b      	ldr	r3, [r7, #0]
 800efdc:	68da      	ldr	r2, [r3, #12]
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	60da      	str	r2, [r3, #12]
 800efe2:	e005      	b.n	800eff0 <tcp_pcb_remove+0x70>
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	68db      	ldr	r3, [r3, #12]
 800efe8:	60fb      	str	r3, [r7, #12]
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d1ef      	bne.n	800efd0 <tcp_pcb_remove+0x50>
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	2200      	movs	r2, #0
 800eff4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800eff6:	6838      	ldr	r0, [r7, #0]
 800eff8:	f7ff ff72 	bl	800eee0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800effc:	683b      	ldr	r3, [r7, #0]
 800effe:	7d1b      	ldrb	r3, [r3, #20]
 800f000:	2b0a      	cmp	r3, #10
 800f002:	d013      	beq.n	800f02c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f008:	2b01      	cmp	r3, #1
 800f00a:	d00f      	beq.n	800f02c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	8b5b      	ldrh	r3, [r3, #26]
 800f010:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f014:	2b00      	cmp	r3, #0
 800f016:	d009      	beq.n	800f02c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f018:	683b      	ldr	r3, [r7, #0]
 800f01a:	8b5b      	ldrh	r3, [r3, #26]
 800f01c:	f043 0302 	orr.w	r3, r3, #2
 800f020:	b29a      	uxth	r2, r3
 800f022:	683b      	ldr	r3, [r7, #0]
 800f024:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f026:	6838      	ldr	r0, [r7, #0]
 800f028:	f003 fbc6 	bl	80127b8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f02c:	683b      	ldr	r3, [r7, #0]
 800f02e:	7d1b      	ldrb	r3, [r3, #20]
 800f030:	2b01      	cmp	r3, #1
 800f032:	d020      	beq.n	800f076 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f034:	683b      	ldr	r3, [r7, #0]
 800f036:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d006      	beq.n	800f04a <tcp_pcb_remove+0xca>
 800f03c:	4b13      	ldr	r3, [pc, #76]	; (800f08c <tcp_pcb_remove+0x10c>)
 800f03e:	f640 0293 	movw	r2, #2195	; 0x893
 800f042:	4916      	ldr	r1, [pc, #88]	; (800f09c <tcp_pcb_remove+0x11c>)
 800f044:	4813      	ldr	r0, [pc, #76]	; (800f094 <tcp_pcb_remove+0x114>)
 800f046:	f007 ffdb 	bl	8017000 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f04a:	683b      	ldr	r3, [r7, #0]
 800f04c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d006      	beq.n	800f060 <tcp_pcb_remove+0xe0>
 800f052:	4b0e      	ldr	r3, [pc, #56]	; (800f08c <tcp_pcb_remove+0x10c>)
 800f054:	f640 0294 	movw	r2, #2196	; 0x894
 800f058:	4911      	ldr	r1, [pc, #68]	; (800f0a0 <tcp_pcb_remove+0x120>)
 800f05a:	480e      	ldr	r0, [pc, #56]	; (800f094 <tcp_pcb_remove+0x114>)
 800f05c:	f007 ffd0 	bl	8017000 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f064:	2b00      	cmp	r3, #0
 800f066:	d006      	beq.n	800f076 <tcp_pcb_remove+0xf6>
 800f068:	4b08      	ldr	r3, [pc, #32]	; (800f08c <tcp_pcb_remove+0x10c>)
 800f06a:	f640 0296 	movw	r2, #2198	; 0x896
 800f06e:	490d      	ldr	r1, [pc, #52]	; (800f0a4 <tcp_pcb_remove+0x124>)
 800f070:	4808      	ldr	r0, [pc, #32]	; (800f094 <tcp_pcb_remove+0x114>)
 800f072:	f007 ffc5 	bl	8017000 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f076:	683b      	ldr	r3, [r7, #0]
 800f078:	2200      	movs	r2, #0
 800f07a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f07c:	683b      	ldr	r3, [r7, #0]
 800f07e:	2200      	movs	r2, #0
 800f080:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f082:	bf00      	nop
 800f084:	3710      	adds	r7, #16
 800f086:	46bd      	mov	sp, r7
 800f088:	bd80      	pop	{r7, pc}
 800f08a:	bf00      	nop
 800f08c:	08019ee4 	.word	0x08019ee4
 800f090:	0801a54c 	.word	0x0801a54c
 800f094:	08019f28 	.word	0x08019f28
 800f098:	0801a568 	.word	0x0801a568
 800f09c:	0801a588 	.word	0x0801a588
 800f0a0:	0801a5a0 	.word	0x0801a5a0
 800f0a4:	0801a5bc 	.word	0x0801a5bc

0800f0a8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b082      	sub	sp, #8
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d106      	bne.n	800f0c4 <tcp_next_iss+0x1c>
 800f0b6:	4b0a      	ldr	r3, [pc, #40]	; (800f0e0 <tcp_next_iss+0x38>)
 800f0b8:	f640 02af 	movw	r2, #2223	; 0x8af
 800f0bc:	4909      	ldr	r1, [pc, #36]	; (800f0e4 <tcp_next_iss+0x3c>)
 800f0be:	480a      	ldr	r0, [pc, #40]	; (800f0e8 <tcp_next_iss+0x40>)
 800f0c0:	f007 ff9e 	bl	8017000 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f0c4:	4b09      	ldr	r3, [pc, #36]	; (800f0ec <tcp_next_iss+0x44>)
 800f0c6:	681a      	ldr	r2, [r3, #0]
 800f0c8:	4b09      	ldr	r3, [pc, #36]	; (800f0f0 <tcp_next_iss+0x48>)
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	4413      	add	r3, r2
 800f0ce:	4a07      	ldr	r2, [pc, #28]	; (800f0ec <tcp_next_iss+0x44>)
 800f0d0:	6013      	str	r3, [r2, #0]
  return iss;
 800f0d2:	4b06      	ldr	r3, [pc, #24]	; (800f0ec <tcp_next_iss+0x44>)
 800f0d4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	3708      	adds	r7, #8
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	bd80      	pop	{r7, pc}
 800f0de:	bf00      	nop
 800f0e0:	08019ee4 	.word	0x08019ee4
 800f0e4:	0801a5d4 	.word	0x0801a5d4
 800f0e8:	08019f28 	.word	0x08019f28
 800f0ec:	20000014 	.word	0x20000014
 800f0f0:	2000d144 	.word	0x2000d144

0800f0f4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b086      	sub	sp, #24
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	60b9      	str	r1, [r7, #8]
 800f0fe:	607a      	str	r2, [r7, #4]
 800f100:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d106      	bne.n	800f116 <tcp_eff_send_mss_netif+0x22>
 800f108:	4b14      	ldr	r3, [pc, #80]	; (800f15c <tcp_eff_send_mss_netif+0x68>)
 800f10a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f10e:	4914      	ldr	r1, [pc, #80]	; (800f160 <tcp_eff_send_mss_netif+0x6c>)
 800f110:	4814      	ldr	r0, [pc, #80]	; (800f164 <tcp_eff_send_mss_netif+0x70>)
 800f112:	f007 ff75 	bl	8017000 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f116:	68bb      	ldr	r3, [r7, #8]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d101      	bne.n	800f120 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f11c:	89fb      	ldrh	r3, [r7, #14]
 800f11e:	e019      	b.n	800f154 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f120:	68bb      	ldr	r3, [r7, #8]
 800f122:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f124:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f126:	8afb      	ldrh	r3, [r7, #22]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d012      	beq.n	800f152 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f12c:	2328      	movs	r3, #40	; 0x28
 800f12e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f130:	8afa      	ldrh	r2, [r7, #22]
 800f132:	8abb      	ldrh	r3, [r7, #20]
 800f134:	429a      	cmp	r2, r3
 800f136:	d904      	bls.n	800f142 <tcp_eff_send_mss_netif+0x4e>
 800f138:	8afa      	ldrh	r2, [r7, #22]
 800f13a:	8abb      	ldrh	r3, [r7, #20]
 800f13c:	1ad3      	subs	r3, r2, r3
 800f13e:	b29b      	uxth	r3, r3
 800f140:	e000      	b.n	800f144 <tcp_eff_send_mss_netif+0x50>
 800f142:	2300      	movs	r3, #0
 800f144:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f146:	8a7a      	ldrh	r2, [r7, #18]
 800f148:	89fb      	ldrh	r3, [r7, #14]
 800f14a:	4293      	cmp	r3, r2
 800f14c:	bf28      	it	cs
 800f14e:	4613      	movcs	r3, r2
 800f150:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f152:	89fb      	ldrh	r3, [r7, #14]
}
 800f154:	4618      	mov	r0, r3
 800f156:	3718      	adds	r7, #24
 800f158:	46bd      	mov	sp, r7
 800f15a:	bd80      	pop	{r7, pc}
 800f15c:	08019ee4 	.word	0x08019ee4
 800f160:	0801a5f0 	.word	0x0801a5f0
 800f164:	08019f28 	.word	0x08019f28

0800f168 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b084      	sub	sp, #16
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
 800f170:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f172:	683b      	ldr	r3, [r7, #0]
 800f174:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d119      	bne.n	800f1b0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f17c:	4b10      	ldr	r3, [pc, #64]	; (800f1c0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f17e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f182:	4910      	ldr	r1, [pc, #64]	; (800f1c4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f184:	4810      	ldr	r0, [pc, #64]	; (800f1c8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f186:	f007 ff3b 	bl	8017000 <iprintf>

  while (pcb != NULL) {
 800f18a:	e011      	b.n	800f1b0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	681a      	ldr	r2, [r3, #0]
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	429a      	cmp	r2, r3
 800f196:	d108      	bne.n	800f1aa <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	68db      	ldr	r3, [r3, #12]
 800f19c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f19e:	68f8      	ldr	r0, [r7, #12]
 800f1a0:	f7fe fe1a 	bl	800ddd8 <tcp_abort>
      pcb = next;
 800f1a4:	68bb      	ldr	r3, [r7, #8]
 800f1a6:	60fb      	str	r3, [r7, #12]
 800f1a8:	e002      	b.n	800f1b0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	68db      	ldr	r3, [r3, #12]
 800f1ae:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d1ea      	bne.n	800f18c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f1b6:	bf00      	nop
 800f1b8:	bf00      	nop
 800f1ba:	3710      	adds	r7, #16
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	bd80      	pop	{r7, pc}
 800f1c0:	08019ee4 	.word	0x08019ee4
 800f1c4:	0801a618 	.word	0x0801a618
 800f1c8:	08019f28 	.word	0x08019f28

0800f1cc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b084      	sub	sp, #16
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
 800f1d4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d02a      	beq.n	800f232 <tcp_netif_ip_addr_changed+0x66>
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d026      	beq.n	800f232 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f1e4:	4b15      	ldr	r3, [pc, #84]	; (800f23c <tcp_netif_ip_addr_changed+0x70>)
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	4619      	mov	r1, r3
 800f1ea:	6878      	ldr	r0, [r7, #4]
 800f1ec:	f7ff ffbc 	bl	800f168 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f1f0:	4b13      	ldr	r3, [pc, #76]	; (800f240 <tcp_netif_ip_addr_changed+0x74>)
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	4619      	mov	r1, r3
 800f1f6:	6878      	ldr	r0, [r7, #4]
 800f1f8:	f7ff ffb6 	bl	800f168 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d017      	beq.n	800f232 <tcp_netif_ip_addr_changed+0x66>
 800f202:	683b      	ldr	r3, [r7, #0]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d013      	beq.n	800f232 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f20a:	4b0e      	ldr	r3, [pc, #56]	; (800f244 <tcp_netif_ip_addr_changed+0x78>)
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	60fb      	str	r3, [r7, #12]
 800f210:	e00c      	b.n	800f22c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	681a      	ldr	r2, [r3, #0]
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	429a      	cmp	r2, r3
 800f21c:	d103      	bne.n	800f226 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	681a      	ldr	r2, [r3, #0]
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	68db      	ldr	r3, [r3, #12]
 800f22a:	60fb      	str	r3, [r7, #12]
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d1ef      	bne.n	800f212 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f232:	bf00      	nop
 800f234:	3710      	adds	r7, #16
 800f236:	46bd      	mov	sp, r7
 800f238:	bd80      	pop	{r7, pc}
 800f23a:	bf00      	nop
 800f23c:	2000d150 	.word	0x2000d150
 800f240:	2000d148 	.word	0x2000d148
 800f244:	2000d14c 	.word	0x2000d14c

0800f248 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b082      	sub	sp, #8
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f254:	2b00      	cmp	r3, #0
 800f256:	d007      	beq.n	800f268 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f25c:	4618      	mov	r0, r3
 800f25e:	f7ff fb6f 	bl	800e940 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	2200      	movs	r2, #0
 800f266:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f268:	bf00      	nop
 800f26a:	3708      	adds	r7, #8
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bd80      	pop	{r7, pc}

0800f270 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f270:	b590      	push	{r4, r7, lr}
 800f272:	b08d      	sub	sp, #52	; 0x34
 800f274:	af04      	add	r7, sp, #16
 800f276:	6078      	str	r0, [r7, #4]
 800f278:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d105      	bne.n	800f28c <tcp_input+0x1c>
 800f280:	4b9b      	ldr	r3, [pc, #620]	; (800f4f0 <tcp_input+0x280>)
 800f282:	2283      	movs	r2, #131	; 0x83
 800f284:	499b      	ldr	r1, [pc, #620]	; (800f4f4 <tcp_input+0x284>)
 800f286:	489c      	ldr	r0, [pc, #624]	; (800f4f8 <tcp_input+0x288>)
 800f288:	f007 feba 	bl	8017000 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	685b      	ldr	r3, [r3, #4]
 800f290:	4a9a      	ldr	r2, [pc, #616]	; (800f4fc <tcp_input+0x28c>)
 800f292:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	895b      	ldrh	r3, [r3, #10]
 800f298:	2b13      	cmp	r3, #19
 800f29a:	f240 83d1 	bls.w	800fa40 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f29e:	4b98      	ldr	r3, [pc, #608]	; (800f500 <tcp_input+0x290>)
 800f2a0:	695b      	ldr	r3, [r3, #20]
 800f2a2:	4a97      	ldr	r2, [pc, #604]	; (800f500 <tcp_input+0x290>)
 800f2a4:	6812      	ldr	r2, [r2, #0]
 800f2a6:	4611      	mov	r1, r2
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	f006 fbcf 	bl	8015a4c <ip4_addr_isbroadcast_u32>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	f040 83c7 	bne.w	800fa44 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f2b6:	4b92      	ldr	r3, [pc, #584]	; (800f500 <tcp_input+0x290>)
 800f2b8:	695b      	ldr	r3, [r3, #20]
 800f2ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f2be:	2be0      	cmp	r3, #224	; 0xe0
 800f2c0:	f000 83c0 	beq.w	800fa44 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f2c4:	4b8d      	ldr	r3, [pc, #564]	; (800f4fc <tcp_input+0x28c>)
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	899b      	ldrh	r3, [r3, #12]
 800f2ca:	b29b      	uxth	r3, r3
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	f7fc fba5 	bl	800ba1c <lwip_htons>
 800f2d2:	4603      	mov	r3, r0
 800f2d4:	0b1b      	lsrs	r3, r3, #12
 800f2d6:	b29b      	uxth	r3, r3
 800f2d8:	b2db      	uxtb	r3, r3
 800f2da:	009b      	lsls	r3, r3, #2
 800f2dc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f2de:	7cbb      	ldrb	r3, [r7, #18]
 800f2e0:	2b13      	cmp	r3, #19
 800f2e2:	f240 83b1 	bls.w	800fa48 <tcp_input+0x7d8>
 800f2e6:	7cbb      	ldrb	r3, [r7, #18]
 800f2e8:	b29a      	uxth	r2, r3
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	891b      	ldrh	r3, [r3, #8]
 800f2ee:	429a      	cmp	r2, r3
 800f2f0:	f200 83aa 	bhi.w	800fa48 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f2f4:	7cbb      	ldrb	r3, [r7, #18]
 800f2f6:	b29b      	uxth	r3, r3
 800f2f8:	3b14      	subs	r3, #20
 800f2fa:	b29a      	uxth	r2, r3
 800f2fc:	4b81      	ldr	r3, [pc, #516]	; (800f504 <tcp_input+0x294>)
 800f2fe:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f300:	4b81      	ldr	r3, [pc, #516]	; (800f508 <tcp_input+0x298>)
 800f302:	2200      	movs	r2, #0
 800f304:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	895a      	ldrh	r2, [r3, #10]
 800f30a:	7cbb      	ldrb	r3, [r7, #18]
 800f30c:	b29b      	uxth	r3, r3
 800f30e:	429a      	cmp	r2, r3
 800f310:	d309      	bcc.n	800f326 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f312:	4b7c      	ldr	r3, [pc, #496]	; (800f504 <tcp_input+0x294>)
 800f314:	881a      	ldrh	r2, [r3, #0]
 800f316:	4b7d      	ldr	r3, [pc, #500]	; (800f50c <tcp_input+0x29c>)
 800f318:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f31a:	7cbb      	ldrb	r3, [r7, #18]
 800f31c:	4619      	mov	r1, r3
 800f31e:	6878      	ldr	r0, [r7, #4]
 800f320:	f7fd fea2 	bl	800d068 <pbuf_remove_header>
 800f324:	e04e      	b.n	800f3c4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d105      	bne.n	800f33a <tcp_input+0xca>
 800f32e:	4b70      	ldr	r3, [pc, #448]	; (800f4f0 <tcp_input+0x280>)
 800f330:	22c2      	movs	r2, #194	; 0xc2
 800f332:	4977      	ldr	r1, [pc, #476]	; (800f510 <tcp_input+0x2a0>)
 800f334:	4870      	ldr	r0, [pc, #448]	; (800f4f8 <tcp_input+0x288>)
 800f336:	f007 fe63 	bl	8017000 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f33a:	2114      	movs	r1, #20
 800f33c:	6878      	ldr	r0, [r7, #4]
 800f33e:	f7fd fe93 	bl	800d068 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	895a      	ldrh	r2, [r3, #10]
 800f346:	4b71      	ldr	r3, [pc, #452]	; (800f50c <tcp_input+0x29c>)
 800f348:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f34a:	4b6e      	ldr	r3, [pc, #440]	; (800f504 <tcp_input+0x294>)
 800f34c:	881a      	ldrh	r2, [r3, #0]
 800f34e:	4b6f      	ldr	r3, [pc, #444]	; (800f50c <tcp_input+0x29c>)
 800f350:	881b      	ldrh	r3, [r3, #0]
 800f352:	1ad3      	subs	r3, r2, r3
 800f354:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f356:	4b6d      	ldr	r3, [pc, #436]	; (800f50c <tcp_input+0x29c>)
 800f358:	881b      	ldrh	r3, [r3, #0]
 800f35a:	4619      	mov	r1, r3
 800f35c:	6878      	ldr	r0, [r7, #4]
 800f35e:	f7fd fe83 	bl	800d068 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	895b      	ldrh	r3, [r3, #10]
 800f368:	8a3a      	ldrh	r2, [r7, #16]
 800f36a:	429a      	cmp	r2, r3
 800f36c:	f200 836e 	bhi.w	800fa4c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	685b      	ldr	r3, [r3, #4]
 800f376:	4a64      	ldr	r2, [pc, #400]	; (800f508 <tcp_input+0x298>)
 800f378:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	8a3a      	ldrh	r2, [r7, #16]
 800f380:	4611      	mov	r1, r2
 800f382:	4618      	mov	r0, r3
 800f384:	f7fd fe70 	bl	800d068 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	891a      	ldrh	r2, [r3, #8]
 800f38c:	8a3b      	ldrh	r3, [r7, #16]
 800f38e:	1ad3      	subs	r3, r2, r3
 800f390:	b29a      	uxth	r2, r3
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	895b      	ldrh	r3, [r3, #10]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d005      	beq.n	800f3aa <tcp_input+0x13a>
 800f39e:	4b54      	ldr	r3, [pc, #336]	; (800f4f0 <tcp_input+0x280>)
 800f3a0:	22df      	movs	r2, #223	; 0xdf
 800f3a2:	495c      	ldr	r1, [pc, #368]	; (800f514 <tcp_input+0x2a4>)
 800f3a4:	4854      	ldr	r0, [pc, #336]	; (800f4f8 <tcp_input+0x288>)
 800f3a6:	f007 fe2b 	bl	8017000 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	891a      	ldrh	r2, [r3, #8]
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	891b      	ldrh	r3, [r3, #8]
 800f3b4:	429a      	cmp	r2, r3
 800f3b6:	d005      	beq.n	800f3c4 <tcp_input+0x154>
 800f3b8:	4b4d      	ldr	r3, [pc, #308]	; (800f4f0 <tcp_input+0x280>)
 800f3ba:	22e0      	movs	r2, #224	; 0xe0
 800f3bc:	4956      	ldr	r1, [pc, #344]	; (800f518 <tcp_input+0x2a8>)
 800f3be:	484e      	ldr	r0, [pc, #312]	; (800f4f8 <tcp_input+0x288>)
 800f3c0:	f007 fe1e 	bl	8017000 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f3c4:	4b4d      	ldr	r3, [pc, #308]	; (800f4fc <tcp_input+0x28c>)
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	881b      	ldrh	r3, [r3, #0]
 800f3ca:	b29b      	uxth	r3, r3
 800f3cc:	4a4b      	ldr	r2, [pc, #300]	; (800f4fc <tcp_input+0x28c>)
 800f3ce:	6814      	ldr	r4, [r2, #0]
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	f7fc fb23 	bl	800ba1c <lwip_htons>
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f3da:	4b48      	ldr	r3, [pc, #288]	; (800f4fc <tcp_input+0x28c>)
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	885b      	ldrh	r3, [r3, #2]
 800f3e0:	b29b      	uxth	r3, r3
 800f3e2:	4a46      	ldr	r2, [pc, #280]	; (800f4fc <tcp_input+0x28c>)
 800f3e4:	6814      	ldr	r4, [r2, #0]
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	f7fc fb18 	bl	800ba1c <lwip_htons>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f3f0:	4b42      	ldr	r3, [pc, #264]	; (800f4fc <tcp_input+0x28c>)
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	685b      	ldr	r3, [r3, #4]
 800f3f6:	4a41      	ldr	r2, [pc, #260]	; (800f4fc <tcp_input+0x28c>)
 800f3f8:	6814      	ldr	r4, [r2, #0]
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	f7fc fb23 	bl	800ba46 <lwip_htonl>
 800f400:	4603      	mov	r3, r0
 800f402:	6063      	str	r3, [r4, #4]
 800f404:	6863      	ldr	r3, [r4, #4]
 800f406:	4a45      	ldr	r2, [pc, #276]	; (800f51c <tcp_input+0x2ac>)
 800f408:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f40a:	4b3c      	ldr	r3, [pc, #240]	; (800f4fc <tcp_input+0x28c>)
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	689b      	ldr	r3, [r3, #8]
 800f410:	4a3a      	ldr	r2, [pc, #232]	; (800f4fc <tcp_input+0x28c>)
 800f412:	6814      	ldr	r4, [r2, #0]
 800f414:	4618      	mov	r0, r3
 800f416:	f7fc fb16 	bl	800ba46 <lwip_htonl>
 800f41a:	4603      	mov	r3, r0
 800f41c:	60a3      	str	r3, [r4, #8]
 800f41e:	68a3      	ldr	r3, [r4, #8]
 800f420:	4a3f      	ldr	r2, [pc, #252]	; (800f520 <tcp_input+0x2b0>)
 800f422:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f424:	4b35      	ldr	r3, [pc, #212]	; (800f4fc <tcp_input+0x28c>)
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	89db      	ldrh	r3, [r3, #14]
 800f42a:	b29b      	uxth	r3, r3
 800f42c:	4a33      	ldr	r2, [pc, #204]	; (800f4fc <tcp_input+0x28c>)
 800f42e:	6814      	ldr	r4, [r2, #0]
 800f430:	4618      	mov	r0, r3
 800f432:	f7fc faf3 	bl	800ba1c <lwip_htons>
 800f436:	4603      	mov	r3, r0
 800f438:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f43a:	4b30      	ldr	r3, [pc, #192]	; (800f4fc <tcp_input+0x28c>)
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	899b      	ldrh	r3, [r3, #12]
 800f440:	b29b      	uxth	r3, r3
 800f442:	4618      	mov	r0, r3
 800f444:	f7fc faea 	bl	800ba1c <lwip_htons>
 800f448:	4603      	mov	r3, r0
 800f44a:	b2db      	uxtb	r3, r3
 800f44c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f450:	b2da      	uxtb	r2, r3
 800f452:	4b34      	ldr	r3, [pc, #208]	; (800f524 <tcp_input+0x2b4>)
 800f454:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	891a      	ldrh	r2, [r3, #8]
 800f45a:	4b33      	ldr	r3, [pc, #204]	; (800f528 <tcp_input+0x2b8>)
 800f45c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f45e:	4b31      	ldr	r3, [pc, #196]	; (800f524 <tcp_input+0x2b4>)
 800f460:	781b      	ldrb	r3, [r3, #0]
 800f462:	f003 0303 	and.w	r3, r3, #3
 800f466:	2b00      	cmp	r3, #0
 800f468:	d00c      	beq.n	800f484 <tcp_input+0x214>
    tcplen++;
 800f46a:	4b2f      	ldr	r3, [pc, #188]	; (800f528 <tcp_input+0x2b8>)
 800f46c:	881b      	ldrh	r3, [r3, #0]
 800f46e:	3301      	adds	r3, #1
 800f470:	b29a      	uxth	r2, r3
 800f472:	4b2d      	ldr	r3, [pc, #180]	; (800f528 <tcp_input+0x2b8>)
 800f474:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	891a      	ldrh	r2, [r3, #8]
 800f47a:	4b2b      	ldr	r3, [pc, #172]	; (800f528 <tcp_input+0x2b8>)
 800f47c:	881b      	ldrh	r3, [r3, #0]
 800f47e:	429a      	cmp	r2, r3
 800f480:	f200 82e6 	bhi.w	800fa50 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f484:	2300      	movs	r3, #0
 800f486:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f488:	4b28      	ldr	r3, [pc, #160]	; (800f52c <tcp_input+0x2bc>)
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	61fb      	str	r3, [r7, #28]
 800f48e:	e09d      	b.n	800f5cc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f490:	69fb      	ldr	r3, [r7, #28]
 800f492:	7d1b      	ldrb	r3, [r3, #20]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d105      	bne.n	800f4a4 <tcp_input+0x234>
 800f498:	4b15      	ldr	r3, [pc, #84]	; (800f4f0 <tcp_input+0x280>)
 800f49a:	22fb      	movs	r2, #251	; 0xfb
 800f49c:	4924      	ldr	r1, [pc, #144]	; (800f530 <tcp_input+0x2c0>)
 800f49e:	4816      	ldr	r0, [pc, #88]	; (800f4f8 <tcp_input+0x288>)
 800f4a0:	f007 fdae 	bl	8017000 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f4a4:	69fb      	ldr	r3, [r7, #28]
 800f4a6:	7d1b      	ldrb	r3, [r3, #20]
 800f4a8:	2b0a      	cmp	r3, #10
 800f4aa:	d105      	bne.n	800f4b8 <tcp_input+0x248>
 800f4ac:	4b10      	ldr	r3, [pc, #64]	; (800f4f0 <tcp_input+0x280>)
 800f4ae:	22fc      	movs	r2, #252	; 0xfc
 800f4b0:	4920      	ldr	r1, [pc, #128]	; (800f534 <tcp_input+0x2c4>)
 800f4b2:	4811      	ldr	r0, [pc, #68]	; (800f4f8 <tcp_input+0x288>)
 800f4b4:	f007 fda4 	bl	8017000 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f4b8:	69fb      	ldr	r3, [r7, #28]
 800f4ba:	7d1b      	ldrb	r3, [r3, #20]
 800f4bc:	2b01      	cmp	r3, #1
 800f4be:	d105      	bne.n	800f4cc <tcp_input+0x25c>
 800f4c0:	4b0b      	ldr	r3, [pc, #44]	; (800f4f0 <tcp_input+0x280>)
 800f4c2:	22fd      	movs	r2, #253	; 0xfd
 800f4c4:	491c      	ldr	r1, [pc, #112]	; (800f538 <tcp_input+0x2c8>)
 800f4c6:	480c      	ldr	r0, [pc, #48]	; (800f4f8 <tcp_input+0x288>)
 800f4c8:	f007 fd9a 	bl	8017000 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f4cc:	69fb      	ldr	r3, [r7, #28]
 800f4ce:	7a1b      	ldrb	r3, [r3, #8]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d033      	beq.n	800f53c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f4d4:	69fb      	ldr	r3, [r7, #28]
 800f4d6:	7a1a      	ldrb	r2, [r3, #8]
 800f4d8:	4b09      	ldr	r3, [pc, #36]	; (800f500 <tcp_input+0x290>)
 800f4da:	685b      	ldr	r3, [r3, #4]
 800f4dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f4e0:	3301      	adds	r3, #1
 800f4e2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f4e4:	429a      	cmp	r2, r3
 800f4e6:	d029      	beq.n	800f53c <tcp_input+0x2cc>
      prev = pcb;
 800f4e8:	69fb      	ldr	r3, [r7, #28]
 800f4ea:	61bb      	str	r3, [r7, #24]
      continue;
 800f4ec:	e06b      	b.n	800f5c6 <tcp_input+0x356>
 800f4ee:	bf00      	nop
 800f4f0:	0801a64c 	.word	0x0801a64c
 800f4f4:	0801a680 	.word	0x0801a680
 800f4f8:	0801a698 	.word	0x0801a698
 800f4fc:	2000d16c 	.word	0x2000d16c
 800f500:	20007830 	.word	0x20007830
 800f504:	2000d170 	.word	0x2000d170
 800f508:	2000d174 	.word	0x2000d174
 800f50c:	2000d172 	.word	0x2000d172
 800f510:	0801a6c0 	.word	0x0801a6c0
 800f514:	0801a6d0 	.word	0x0801a6d0
 800f518:	0801a6dc 	.word	0x0801a6dc
 800f51c:	2000d17c 	.word	0x2000d17c
 800f520:	2000d180 	.word	0x2000d180
 800f524:	2000d188 	.word	0x2000d188
 800f528:	2000d186 	.word	0x2000d186
 800f52c:	2000d150 	.word	0x2000d150
 800f530:	0801a6fc 	.word	0x0801a6fc
 800f534:	0801a724 	.word	0x0801a724
 800f538:	0801a750 	.word	0x0801a750
    }

    if (pcb->remote_port == tcphdr->src &&
 800f53c:	69fb      	ldr	r3, [r7, #28]
 800f53e:	8b1a      	ldrh	r2, [r3, #24]
 800f540:	4b72      	ldr	r3, [pc, #456]	; (800f70c <tcp_input+0x49c>)
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	881b      	ldrh	r3, [r3, #0]
 800f546:	b29b      	uxth	r3, r3
 800f548:	429a      	cmp	r2, r3
 800f54a:	d13a      	bne.n	800f5c2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f54c:	69fb      	ldr	r3, [r7, #28]
 800f54e:	8ada      	ldrh	r2, [r3, #22]
 800f550:	4b6e      	ldr	r3, [pc, #440]	; (800f70c <tcp_input+0x49c>)
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	885b      	ldrh	r3, [r3, #2]
 800f556:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f558:	429a      	cmp	r2, r3
 800f55a:	d132      	bne.n	800f5c2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f55c:	69fb      	ldr	r3, [r7, #28]
 800f55e:	685a      	ldr	r2, [r3, #4]
 800f560:	4b6b      	ldr	r3, [pc, #428]	; (800f710 <tcp_input+0x4a0>)
 800f562:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f564:	429a      	cmp	r2, r3
 800f566:	d12c      	bne.n	800f5c2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f568:	69fb      	ldr	r3, [r7, #28]
 800f56a:	681a      	ldr	r2, [r3, #0]
 800f56c:	4b68      	ldr	r3, [pc, #416]	; (800f710 <tcp_input+0x4a0>)
 800f56e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f570:	429a      	cmp	r2, r3
 800f572:	d126      	bne.n	800f5c2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f574:	69fb      	ldr	r3, [r7, #28]
 800f576:	68db      	ldr	r3, [r3, #12]
 800f578:	69fa      	ldr	r2, [r7, #28]
 800f57a:	429a      	cmp	r2, r3
 800f57c:	d106      	bne.n	800f58c <tcp_input+0x31c>
 800f57e:	4b65      	ldr	r3, [pc, #404]	; (800f714 <tcp_input+0x4a4>)
 800f580:	f240 120d 	movw	r2, #269	; 0x10d
 800f584:	4964      	ldr	r1, [pc, #400]	; (800f718 <tcp_input+0x4a8>)
 800f586:	4865      	ldr	r0, [pc, #404]	; (800f71c <tcp_input+0x4ac>)
 800f588:	f007 fd3a 	bl	8017000 <iprintf>
      if (prev != NULL) {
 800f58c:	69bb      	ldr	r3, [r7, #24]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d00a      	beq.n	800f5a8 <tcp_input+0x338>
        prev->next = pcb->next;
 800f592:	69fb      	ldr	r3, [r7, #28]
 800f594:	68da      	ldr	r2, [r3, #12]
 800f596:	69bb      	ldr	r3, [r7, #24]
 800f598:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f59a:	4b61      	ldr	r3, [pc, #388]	; (800f720 <tcp_input+0x4b0>)
 800f59c:	681a      	ldr	r2, [r3, #0]
 800f59e:	69fb      	ldr	r3, [r7, #28]
 800f5a0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f5a2:	4a5f      	ldr	r2, [pc, #380]	; (800f720 <tcp_input+0x4b0>)
 800f5a4:	69fb      	ldr	r3, [r7, #28]
 800f5a6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f5a8:	69fb      	ldr	r3, [r7, #28]
 800f5aa:	68db      	ldr	r3, [r3, #12]
 800f5ac:	69fa      	ldr	r2, [r7, #28]
 800f5ae:	429a      	cmp	r2, r3
 800f5b0:	d111      	bne.n	800f5d6 <tcp_input+0x366>
 800f5b2:	4b58      	ldr	r3, [pc, #352]	; (800f714 <tcp_input+0x4a4>)
 800f5b4:	f240 1215 	movw	r2, #277	; 0x115
 800f5b8:	495a      	ldr	r1, [pc, #360]	; (800f724 <tcp_input+0x4b4>)
 800f5ba:	4858      	ldr	r0, [pc, #352]	; (800f71c <tcp_input+0x4ac>)
 800f5bc:	f007 fd20 	bl	8017000 <iprintf>
      break;
 800f5c0:	e009      	b.n	800f5d6 <tcp_input+0x366>
    }
    prev = pcb;
 800f5c2:	69fb      	ldr	r3, [r7, #28]
 800f5c4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f5c6:	69fb      	ldr	r3, [r7, #28]
 800f5c8:	68db      	ldr	r3, [r3, #12]
 800f5ca:	61fb      	str	r3, [r7, #28]
 800f5cc:	69fb      	ldr	r3, [r7, #28]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	f47f af5e 	bne.w	800f490 <tcp_input+0x220>
 800f5d4:	e000      	b.n	800f5d8 <tcp_input+0x368>
      break;
 800f5d6:	bf00      	nop
  }

  if (pcb == NULL) {
 800f5d8:	69fb      	ldr	r3, [r7, #28]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	f040 80aa 	bne.w	800f734 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f5e0:	4b51      	ldr	r3, [pc, #324]	; (800f728 <tcp_input+0x4b8>)
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	61fb      	str	r3, [r7, #28]
 800f5e6:	e03f      	b.n	800f668 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f5e8:	69fb      	ldr	r3, [r7, #28]
 800f5ea:	7d1b      	ldrb	r3, [r3, #20]
 800f5ec:	2b0a      	cmp	r3, #10
 800f5ee:	d006      	beq.n	800f5fe <tcp_input+0x38e>
 800f5f0:	4b48      	ldr	r3, [pc, #288]	; (800f714 <tcp_input+0x4a4>)
 800f5f2:	f240 121f 	movw	r2, #287	; 0x11f
 800f5f6:	494d      	ldr	r1, [pc, #308]	; (800f72c <tcp_input+0x4bc>)
 800f5f8:	4848      	ldr	r0, [pc, #288]	; (800f71c <tcp_input+0x4ac>)
 800f5fa:	f007 fd01 	bl	8017000 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f5fe:	69fb      	ldr	r3, [r7, #28]
 800f600:	7a1b      	ldrb	r3, [r3, #8]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d009      	beq.n	800f61a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f606:	69fb      	ldr	r3, [r7, #28]
 800f608:	7a1a      	ldrb	r2, [r3, #8]
 800f60a:	4b41      	ldr	r3, [pc, #260]	; (800f710 <tcp_input+0x4a0>)
 800f60c:	685b      	ldr	r3, [r3, #4]
 800f60e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f612:	3301      	adds	r3, #1
 800f614:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f616:	429a      	cmp	r2, r3
 800f618:	d122      	bne.n	800f660 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f61a:	69fb      	ldr	r3, [r7, #28]
 800f61c:	8b1a      	ldrh	r2, [r3, #24]
 800f61e:	4b3b      	ldr	r3, [pc, #236]	; (800f70c <tcp_input+0x49c>)
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	881b      	ldrh	r3, [r3, #0]
 800f624:	b29b      	uxth	r3, r3
 800f626:	429a      	cmp	r2, r3
 800f628:	d11b      	bne.n	800f662 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f62a:	69fb      	ldr	r3, [r7, #28]
 800f62c:	8ada      	ldrh	r2, [r3, #22]
 800f62e:	4b37      	ldr	r3, [pc, #220]	; (800f70c <tcp_input+0x49c>)
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	885b      	ldrh	r3, [r3, #2]
 800f634:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f636:	429a      	cmp	r2, r3
 800f638:	d113      	bne.n	800f662 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f63a:	69fb      	ldr	r3, [r7, #28]
 800f63c:	685a      	ldr	r2, [r3, #4]
 800f63e:	4b34      	ldr	r3, [pc, #208]	; (800f710 <tcp_input+0x4a0>)
 800f640:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f642:	429a      	cmp	r2, r3
 800f644:	d10d      	bne.n	800f662 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f646:	69fb      	ldr	r3, [r7, #28]
 800f648:	681a      	ldr	r2, [r3, #0]
 800f64a:	4b31      	ldr	r3, [pc, #196]	; (800f710 <tcp_input+0x4a0>)
 800f64c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f64e:	429a      	cmp	r2, r3
 800f650:	d107      	bne.n	800f662 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f652:	69f8      	ldr	r0, [r7, #28]
 800f654:	f000 fb56 	bl	800fd04 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f658:	6878      	ldr	r0, [r7, #4]
 800f65a:	f7fd fdbd 	bl	800d1d8 <pbuf_free>
        return;
 800f65e:	e1fd      	b.n	800fa5c <tcp_input+0x7ec>
        continue;
 800f660:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f662:	69fb      	ldr	r3, [r7, #28]
 800f664:	68db      	ldr	r3, [r3, #12]
 800f666:	61fb      	str	r3, [r7, #28]
 800f668:	69fb      	ldr	r3, [r7, #28]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d1bc      	bne.n	800f5e8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f66e:	2300      	movs	r3, #0
 800f670:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f672:	4b2f      	ldr	r3, [pc, #188]	; (800f730 <tcp_input+0x4c0>)
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	617b      	str	r3, [r7, #20]
 800f678:	e02a      	b.n	800f6d0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f67a:	697b      	ldr	r3, [r7, #20]
 800f67c:	7a1b      	ldrb	r3, [r3, #8]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d00c      	beq.n	800f69c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f682:	697b      	ldr	r3, [r7, #20]
 800f684:	7a1a      	ldrb	r2, [r3, #8]
 800f686:	4b22      	ldr	r3, [pc, #136]	; (800f710 <tcp_input+0x4a0>)
 800f688:	685b      	ldr	r3, [r3, #4]
 800f68a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f68e:	3301      	adds	r3, #1
 800f690:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f692:	429a      	cmp	r2, r3
 800f694:	d002      	beq.n	800f69c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f696:	697b      	ldr	r3, [r7, #20]
 800f698:	61bb      	str	r3, [r7, #24]
        continue;
 800f69a:	e016      	b.n	800f6ca <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f69c:	697b      	ldr	r3, [r7, #20]
 800f69e:	8ada      	ldrh	r2, [r3, #22]
 800f6a0:	4b1a      	ldr	r3, [pc, #104]	; (800f70c <tcp_input+0x49c>)
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	885b      	ldrh	r3, [r3, #2]
 800f6a6:	b29b      	uxth	r3, r3
 800f6a8:	429a      	cmp	r2, r3
 800f6aa:	d10c      	bne.n	800f6c6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f6ac:	697b      	ldr	r3, [r7, #20]
 800f6ae:	681a      	ldr	r2, [r3, #0]
 800f6b0:	4b17      	ldr	r3, [pc, #92]	; (800f710 <tcp_input+0x4a0>)
 800f6b2:	695b      	ldr	r3, [r3, #20]
 800f6b4:	429a      	cmp	r2, r3
 800f6b6:	d00f      	beq.n	800f6d8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f6b8:	697b      	ldr	r3, [r7, #20]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d00d      	beq.n	800f6da <tcp_input+0x46a>
 800f6be:	697b      	ldr	r3, [r7, #20]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d009      	beq.n	800f6da <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f6c6:	697b      	ldr	r3, [r7, #20]
 800f6c8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f6ca:	697b      	ldr	r3, [r7, #20]
 800f6cc:	68db      	ldr	r3, [r3, #12]
 800f6ce:	617b      	str	r3, [r7, #20]
 800f6d0:	697b      	ldr	r3, [r7, #20]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d1d1      	bne.n	800f67a <tcp_input+0x40a>
 800f6d6:	e000      	b.n	800f6da <tcp_input+0x46a>
            break;
 800f6d8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f6da:	697b      	ldr	r3, [r7, #20]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d029      	beq.n	800f734 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f6e0:	69bb      	ldr	r3, [r7, #24]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d00a      	beq.n	800f6fc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f6e6:	697b      	ldr	r3, [r7, #20]
 800f6e8:	68da      	ldr	r2, [r3, #12]
 800f6ea:	69bb      	ldr	r3, [r7, #24]
 800f6ec:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f6ee:	4b10      	ldr	r3, [pc, #64]	; (800f730 <tcp_input+0x4c0>)
 800f6f0:	681a      	ldr	r2, [r3, #0]
 800f6f2:	697b      	ldr	r3, [r7, #20]
 800f6f4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f6f6:	4a0e      	ldr	r2, [pc, #56]	; (800f730 <tcp_input+0x4c0>)
 800f6f8:	697b      	ldr	r3, [r7, #20]
 800f6fa:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f6fc:	6978      	ldr	r0, [r7, #20]
 800f6fe:	f000 fa03 	bl	800fb08 <tcp_listen_input>
      }
      pbuf_free(p);
 800f702:	6878      	ldr	r0, [r7, #4]
 800f704:	f7fd fd68 	bl	800d1d8 <pbuf_free>
      return;
 800f708:	e1a8      	b.n	800fa5c <tcp_input+0x7ec>
 800f70a:	bf00      	nop
 800f70c:	2000d16c 	.word	0x2000d16c
 800f710:	20007830 	.word	0x20007830
 800f714:	0801a64c 	.word	0x0801a64c
 800f718:	0801a778 	.word	0x0801a778
 800f71c:	0801a698 	.word	0x0801a698
 800f720:	2000d150 	.word	0x2000d150
 800f724:	0801a7a4 	.word	0x0801a7a4
 800f728:	2000d154 	.word	0x2000d154
 800f72c:	0801a7d0 	.word	0x0801a7d0
 800f730:	2000d14c 	.word	0x2000d14c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f734:	69fb      	ldr	r3, [r7, #28]
 800f736:	2b00      	cmp	r3, #0
 800f738:	f000 8158 	beq.w	800f9ec <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f73c:	4b95      	ldr	r3, [pc, #596]	; (800f994 <tcp_input+0x724>)
 800f73e:	2200      	movs	r2, #0
 800f740:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	891a      	ldrh	r2, [r3, #8]
 800f746:	4b93      	ldr	r3, [pc, #588]	; (800f994 <tcp_input+0x724>)
 800f748:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f74a:	4a92      	ldr	r2, [pc, #584]	; (800f994 <tcp_input+0x724>)
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f750:	4b91      	ldr	r3, [pc, #580]	; (800f998 <tcp_input+0x728>)
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	4a8f      	ldr	r2, [pc, #572]	; (800f994 <tcp_input+0x724>)
 800f756:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f758:	4b90      	ldr	r3, [pc, #576]	; (800f99c <tcp_input+0x72c>)
 800f75a:	2200      	movs	r2, #0
 800f75c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f75e:	4b90      	ldr	r3, [pc, #576]	; (800f9a0 <tcp_input+0x730>)
 800f760:	2200      	movs	r2, #0
 800f762:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f764:	4b8f      	ldr	r3, [pc, #572]	; (800f9a4 <tcp_input+0x734>)
 800f766:	2200      	movs	r2, #0
 800f768:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f76a:	4b8f      	ldr	r3, [pc, #572]	; (800f9a8 <tcp_input+0x738>)
 800f76c:	781b      	ldrb	r3, [r3, #0]
 800f76e:	f003 0308 	and.w	r3, r3, #8
 800f772:	2b00      	cmp	r3, #0
 800f774:	d006      	beq.n	800f784 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	7b5b      	ldrb	r3, [r3, #13]
 800f77a:	f043 0301 	orr.w	r3, r3, #1
 800f77e:	b2da      	uxtb	r2, r3
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f784:	69fb      	ldr	r3, [r7, #28]
 800f786:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d017      	beq.n	800f7bc <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f78c:	69f8      	ldr	r0, [r7, #28]
 800f78e:	f7ff f85b 	bl	800e848 <tcp_process_refused_data>
 800f792:	4603      	mov	r3, r0
 800f794:	f113 0f0d 	cmn.w	r3, #13
 800f798:	d007      	beq.n	800f7aa <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f79a:	69fb      	ldr	r3, [r7, #28]
 800f79c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d00c      	beq.n	800f7bc <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f7a2:	4b82      	ldr	r3, [pc, #520]	; (800f9ac <tcp_input+0x73c>)
 800f7a4:	881b      	ldrh	r3, [r3, #0]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d008      	beq.n	800f7bc <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f7aa:	69fb      	ldr	r3, [r7, #28]
 800f7ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	f040 80e3 	bne.w	800f97a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f7b4:	69f8      	ldr	r0, [r7, #28]
 800f7b6:	f003 fe05 	bl	80133c4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f7ba:	e0de      	b.n	800f97a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800f7bc:	4a7c      	ldr	r2, [pc, #496]	; (800f9b0 <tcp_input+0x740>)
 800f7be:	69fb      	ldr	r3, [r7, #28]
 800f7c0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f7c2:	69f8      	ldr	r0, [r7, #28]
 800f7c4:	f000 fb18 	bl	800fdf8 <tcp_process>
 800f7c8:	4603      	mov	r3, r0
 800f7ca:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f7cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f7d0:	f113 0f0d 	cmn.w	r3, #13
 800f7d4:	f000 80d3 	beq.w	800f97e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800f7d8:	4b71      	ldr	r3, [pc, #452]	; (800f9a0 <tcp_input+0x730>)
 800f7da:	781b      	ldrb	r3, [r3, #0]
 800f7dc:	f003 0308 	and.w	r3, r3, #8
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d015      	beq.n	800f810 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f7e4:	69fb      	ldr	r3, [r7, #28]
 800f7e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d008      	beq.n	800f800 <tcp_input+0x590>
 800f7ee:	69fb      	ldr	r3, [r7, #28]
 800f7f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f7f4:	69fa      	ldr	r2, [r7, #28]
 800f7f6:	6912      	ldr	r2, [r2, #16]
 800f7f8:	f06f 010d 	mvn.w	r1, #13
 800f7fc:	4610      	mov	r0, r2
 800f7fe:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f800:	69f9      	ldr	r1, [r7, #28]
 800f802:	486c      	ldr	r0, [pc, #432]	; (800f9b4 <tcp_input+0x744>)
 800f804:	f7ff fbbc 	bl	800ef80 <tcp_pcb_remove>
        tcp_free(pcb);
 800f808:	69f8      	ldr	r0, [r7, #28]
 800f80a:	f7fd ffa1 	bl	800d750 <tcp_free>
 800f80e:	e0da      	b.n	800f9c6 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800f810:	2300      	movs	r3, #0
 800f812:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f814:	4b63      	ldr	r3, [pc, #396]	; (800f9a4 <tcp_input+0x734>)
 800f816:	881b      	ldrh	r3, [r3, #0]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d01d      	beq.n	800f858 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f81c:	4b61      	ldr	r3, [pc, #388]	; (800f9a4 <tcp_input+0x734>)
 800f81e:	881b      	ldrh	r3, [r3, #0]
 800f820:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f822:	69fb      	ldr	r3, [r7, #28]
 800f824:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d00a      	beq.n	800f842 <tcp_input+0x5d2>
 800f82c:	69fb      	ldr	r3, [r7, #28]
 800f82e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f832:	69fa      	ldr	r2, [r7, #28]
 800f834:	6910      	ldr	r0, [r2, #16]
 800f836:	89fa      	ldrh	r2, [r7, #14]
 800f838:	69f9      	ldr	r1, [r7, #28]
 800f83a:	4798      	blx	r3
 800f83c:	4603      	mov	r3, r0
 800f83e:	74fb      	strb	r3, [r7, #19]
 800f840:	e001      	b.n	800f846 <tcp_input+0x5d6>
 800f842:	2300      	movs	r3, #0
 800f844:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f846:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f84a:	f113 0f0d 	cmn.w	r3, #13
 800f84e:	f000 8098 	beq.w	800f982 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f852:	4b54      	ldr	r3, [pc, #336]	; (800f9a4 <tcp_input+0x734>)
 800f854:	2200      	movs	r2, #0
 800f856:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f858:	69f8      	ldr	r0, [r7, #28]
 800f85a:	f000 f915 	bl	800fa88 <tcp_input_delayed_close>
 800f85e:	4603      	mov	r3, r0
 800f860:	2b00      	cmp	r3, #0
 800f862:	f040 8090 	bne.w	800f986 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f866:	4b4d      	ldr	r3, [pc, #308]	; (800f99c <tcp_input+0x72c>)
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d041      	beq.n	800f8f2 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f86e:	69fb      	ldr	r3, [r7, #28]
 800f870:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f872:	2b00      	cmp	r3, #0
 800f874:	d006      	beq.n	800f884 <tcp_input+0x614>
 800f876:	4b50      	ldr	r3, [pc, #320]	; (800f9b8 <tcp_input+0x748>)
 800f878:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f87c:	494f      	ldr	r1, [pc, #316]	; (800f9bc <tcp_input+0x74c>)
 800f87e:	4850      	ldr	r0, [pc, #320]	; (800f9c0 <tcp_input+0x750>)
 800f880:	f007 fbbe 	bl	8017000 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f884:	69fb      	ldr	r3, [r7, #28]
 800f886:	8b5b      	ldrh	r3, [r3, #26]
 800f888:	f003 0310 	and.w	r3, r3, #16
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d008      	beq.n	800f8a2 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f890:	4b42      	ldr	r3, [pc, #264]	; (800f99c <tcp_input+0x72c>)
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	4618      	mov	r0, r3
 800f896:	f7fd fc9f 	bl	800d1d8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f89a:	69f8      	ldr	r0, [r7, #28]
 800f89c:	f7fe fa9c 	bl	800ddd8 <tcp_abort>
            goto aborted;
 800f8a0:	e091      	b.n	800f9c6 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f8a2:	69fb      	ldr	r3, [r7, #28]
 800f8a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d00c      	beq.n	800f8c6 <tcp_input+0x656>
 800f8ac:	69fb      	ldr	r3, [r7, #28]
 800f8ae:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f8b2:	69fb      	ldr	r3, [r7, #28]
 800f8b4:	6918      	ldr	r0, [r3, #16]
 800f8b6:	4b39      	ldr	r3, [pc, #228]	; (800f99c <tcp_input+0x72c>)
 800f8b8:	681a      	ldr	r2, [r3, #0]
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	69f9      	ldr	r1, [r7, #28]
 800f8be:	47a0      	blx	r4
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	74fb      	strb	r3, [r7, #19]
 800f8c4:	e008      	b.n	800f8d8 <tcp_input+0x668>
 800f8c6:	4b35      	ldr	r3, [pc, #212]	; (800f99c <tcp_input+0x72c>)
 800f8c8:	681a      	ldr	r2, [r3, #0]
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	69f9      	ldr	r1, [r7, #28]
 800f8ce:	2000      	movs	r0, #0
 800f8d0:	f7ff f890 	bl	800e9f4 <tcp_recv_null>
 800f8d4:	4603      	mov	r3, r0
 800f8d6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f8d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f8dc:	f113 0f0d 	cmn.w	r3, #13
 800f8e0:	d053      	beq.n	800f98a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f8e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d003      	beq.n	800f8f2 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f8ea:	4b2c      	ldr	r3, [pc, #176]	; (800f99c <tcp_input+0x72c>)
 800f8ec:	681a      	ldr	r2, [r3, #0]
 800f8ee:	69fb      	ldr	r3, [r7, #28]
 800f8f0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f8f2:	4b2b      	ldr	r3, [pc, #172]	; (800f9a0 <tcp_input+0x730>)
 800f8f4:	781b      	ldrb	r3, [r3, #0]
 800f8f6:	f003 0320 	and.w	r3, r3, #32
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d030      	beq.n	800f960 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800f8fe:	69fb      	ldr	r3, [r7, #28]
 800f900:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f902:	2b00      	cmp	r3, #0
 800f904:	d009      	beq.n	800f91a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f906:	69fb      	ldr	r3, [r7, #28]
 800f908:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f90a:	7b5a      	ldrb	r2, [r3, #13]
 800f90c:	69fb      	ldr	r3, [r7, #28]
 800f90e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f910:	f042 0220 	orr.w	r2, r2, #32
 800f914:	b2d2      	uxtb	r2, r2
 800f916:	735a      	strb	r2, [r3, #13]
 800f918:	e022      	b.n	800f960 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f91a:	69fb      	ldr	r3, [r7, #28]
 800f91c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f91e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f922:	d005      	beq.n	800f930 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800f924:	69fb      	ldr	r3, [r7, #28]
 800f926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f928:	3301      	adds	r3, #1
 800f92a:	b29a      	uxth	r2, r3
 800f92c:	69fb      	ldr	r3, [r7, #28]
 800f92e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f930:	69fb      	ldr	r3, [r7, #28]
 800f932:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f936:	2b00      	cmp	r3, #0
 800f938:	d00b      	beq.n	800f952 <tcp_input+0x6e2>
 800f93a:	69fb      	ldr	r3, [r7, #28]
 800f93c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f940:	69fb      	ldr	r3, [r7, #28]
 800f942:	6918      	ldr	r0, [r3, #16]
 800f944:	2300      	movs	r3, #0
 800f946:	2200      	movs	r2, #0
 800f948:	69f9      	ldr	r1, [r7, #28]
 800f94a:	47a0      	blx	r4
 800f94c:	4603      	mov	r3, r0
 800f94e:	74fb      	strb	r3, [r7, #19]
 800f950:	e001      	b.n	800f956 <tcp_input+0x6e6>
 800f952:	2300      	movs	r3, #0
 800f954:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f956:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f95a:	f113 0f0d 	cmn.w	r3, #13
 800f95e:	d016      	beq.n	800f98e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f960:	4b13      	ldr	r3, [pc, #76]	; (800f9b0 <tcp_input+0x740>)
 800f962:	2200      	movs	r2, #0
 800f964:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f966:	69f8      	ldr	r0, [r7, #28]
 800f968:	f000 f88e 	bl	800fa88 <tcp_input_delayed_close>
 800f96c:	4603      	mov	r3, r0
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d128      	bne.n	800f9c4 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f972:	69f8      	ldr	r0, [r7, #28]
 800f974:	f002 ff20 	bl	80127b8 <tcp_output>
 800f978:	e025      	b.n	800f9c6 <tcp_input+0x756>
        goto aborted;
 800f97a:	bf00      	nop
 800f97c:	e023      	b.n	800f9c6 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f97e:	bf00      	nop
 800f980:	e021      	b.n	800f9c6 <tcp_input+0x756>
              goto aborted;
 800f982:	bf00      	nop
 800f984:	e01f      	b.n	800f9c6 <tcp_input+0x756>
          goto aborted;
 800f986:	bf00      	nop
 800f988:	e01d      	b.n	800f9c6 <tcp_input+0x756>
            goto aborted;
 800f98a:	bf00      	nop
 800f98c:	e01b      	b.n	800f9c6 <tcp_input+0x756>
              goto aborted;
 800f98e:	bf00      	nop
 800f990:	e019      	b.n	800f9c6 <tcp_input+0x756>
 800f992:	bf00      	nop
 800f994:	2000d15c 	.word	0x2000d15c
 800f998:	2000d16c 	.word	0x2000d16c
 800f99c:	2000d18c 	.word	0x2000d18c
 800f9a0:	2000d189 	.word	0x2000d189
 800f9a4:	2000d184 	.word	0x2000d184
 800f9a8:	2000d188 	.word	0x2000d188
 800f9ac:	2000d186 	.word	0x2000d186
 800f9b0:	2000d190 	.word	0x2000d190
 800f9b4:	2000d150 	.word	0x2000d150
 800f9b8:	0801a64c 	.word	0x0801a64c
 800f9bc:	0801a800 	.word	0x0801a800
 800f9c0:	0801a698 	.word	0x0801a698
          goto aborted;
 800f9c4:	bf00      	nop
    tcp_input_pcb = NULL;
 800f9c6:	4b27      	ldr	r3, [pc, #156]	; (800fa64 <tcp_input+0x7f4>)
 800f9c8:	2200      	movs	r2, #0
 800f9ca:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f9cc:	4b26      	ldr	r3, [pc, #152]	; (800fa68 <tcp_input+0x7f8>)
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f9d2:	4b26      	ldr	r3, [pc, #152]	; (800fa6c <tcp_input+0x7fc>)
 800f9d4:	685b      	ldr	r3, [r3, #4]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d03f      	beq.n	800fa5a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800f9da:	4b24      	ldr	r3, [pc, #144]	; (800fa6c <tcp_input+0x7fc>)
 800f9dc:	685b      	ldr	r3, [r3, #4]
 800f9de:	4618      	mov	r0, r3
 800f9e0:	f7fd fbfa 	bl	800d1d8 <pbuf_free>
      inseg.p = NULL;
 800f9e4:	4b21      	ldr	r3, [pc, #132]	; (800fa6c <tcp_input+0x7fc>)
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f9ea:	e036      	b.n	800fa5a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f9ec:	4b20      	ldr	r3, [pc, #128]	; (800fa70 <tcp_input+0x800>)
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	899b      	ldrh	r3, [r3, #12]
 800f9f2:	b29b      	uxth	r3, r3
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	f7fc f811 	bl	800ba1c <lwip_htons>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	b2db      	uxtb	r3, r3
 800f9fe:	f003 0304 	and.w	r3, r3, #4
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d118      	bne.n	800fa38 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa06:	4b1b      	ldr	r3, [pc, #108]	; (800fa74 <tcp_input+0x804>)
 800fa08:	6819      	ldr	r1, [r3, #0]
 800fa0a:	4b1b      	ldr	r3, [pc, #108]	; (800fa78 <tcp_input+0x808>)
 800fa0c:	881b      	ldrh	r3, [r3, #0]
 800fa0e:	461a      	mov	r2, r3
 800fa10:	4b1a      	ldr	r3, [pc, #104]	; (800fa7c <tcp_input+0x80c>)
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fa16:	4b16      	ldr	r3, [pc, #88]	; (800fa70 <tcp_input+0x800>)
 800fa18:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa1a:	885b      	ldrh	r3, [r3, #2]
 800fa1c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fa1e:	4a14      	ldr	r2, [pc, #80]	; (800fa70 <tcp_input+0x800>)
 800fa20:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa22:	8812      	ldrh	r2, [r2, #0]
 800fa24:	b292      	uxth	r2, r2
 800fa26:	9202      	str	r2, [sp, #8]
 800fa28:	9301      	str	r3, [sp, #4]
 800fa2a:	4b15      	ldr	r3, [pc, #84]	; (800fa80 <tcp_input+0x810>)
 800fa2c:	9300      	str	r3, [sp, #0]
 800fa2e:	4b15      	ldr	r3, [pc, #84]	; (800fa84 <tcp_input+0x814>)
 800fa30:	4602      	mov	r2, r0
 800fa32:	2000      	movs	r0, #0
 800fa34:	f003 fc74 	bl	8013320 <tcp_rst>
    pbuf_free(p);
 800fa38:	6878      	ldr	r0, [r7, #4]
 800fa3a:	f7fd fbcd 	bl	800d1d8 <pbuf_free>
  return;
 800fa3e:	e00c      	b.n	800fa5a <tcp_input+0x7ea>
    goto dropped;
 800fa40:	bf00      	nop
 800fa42:	e006      	b.n	800fa52 <tcp_input+0x7e2>
    goto dropped;
 800fa44:	bf00      	nop
 800fa46:	e004      	b.n	800fa52 <tcp_input+0x7e2>
    goto dropped;
 800fa48:	bf00      	nop
 800fa4a:	e002      	b.n	800fa52 <tcp_input+0x7e2>
      goto dropped;
 800fa4c:	bf00      	nop
 800fa4e:	e000      	b.n	800fa52 <tcp_input+0x7e2>
      goto dropped;
 800fa50:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800fa52:	6878      	ldr	r0, [r7, #4]
 800fa54:	f7fd fbc0 	bl	800d1d8 <pbuf_free>
 800fa58:	e000      	b.n	800fa5c <tcp_input+0x7ec>
  return;
 800fa5a:	bf00      	nop
}
 800fa5c:	3724      	adds	r7, #36	; 0x24
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	bd90      	pop	{r4, r7, pc}
 800fa62:	bf00      	nop
 800fa64:	2000d190 	.word	0x2000d190
 800fa68:	2000d18c 	.word	0x2000d18c
 800fa6c:	2000d15c 	.word	0x2000d15c
 800fa70:	2000d16c 	.word	0x2000d16c
 800fa74:	2000d180 	.word	0x2000d180
 800fa78:	2000d186 	.word	0x2000d186
 800fa7c:	2000d17c 	.word	0x2000d17c
 800fa80:	20007840 	.word	0x20007840
 800fa84:	20007844 	.word	0x20007844

0800fa88 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b082      	sub	sp, #8
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d106      	bne.n	800faa4 <tcp_input_delayed_close+0x1c>
 800fa96:	4b17      	ldr	r3, [pc, #92]	; (800faf4 <tcp_input_delayed_close+0x6c>)
 800fa98:	f240 225a 	movw	r2, #602	; 0x25a
 800fa9c:	4916      	ldr	r1, [pc, #88]	; (800faf8 <tcp_input_delayed_close+0x70>)
 800fa9e:	4817      	ldr	r0, [pc, #92]	; (800fafc <tcp_input_delayed_close+0x74>)
 800faa0:	f007 faae 	bl	8017000 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800faa4:	4b16      	ldr	r3, [pc, #88]	; (800fb00 <tcp_input_delayed_close+0x78>)
 800faa6:	781b      	ldrb	r3, [r3, #0]
 800faa8:	f003 0310 	and.w	r3, r3, #16
 800faac:	2b00      	cmp	r3, #0
 800faae:	d01c      	beq.n	800faea <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	8b5b      	ldrh	r3, [r3, #26]
 800fab4:	f003 0310 	and.w	r3, r3, #16
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d10d      	bne.n	800fad8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d008      	beq.n	800fad8 <tcp_input_delayed_close+0x50>
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800facc:	687a      	ldr	r2, [r7, #4]
 800face:	6912      	ldr	r2, [r2, #16]
 800fad0:	f06f 010e 	mvn.w	r1, #14
 800fad4:	4610      	mov	r0, r2
 800fad6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fad8:	6879      	ldr	r1, [r7, #4]
 800fada:	480a      	ldr	r0, [pc, #40]	; (800fb04 <tcp_input_delayed_close+0x7c>)
 800fadc:	f7ff fa50 	bl	800ef80 <tcp_pcb_remove>
    tcp_free(pcb);
 800fae0:	6878      	ldr	r0, [r7, #4]
 800fae2:	f7fd fe35 	bl	800d750 <tcp_free>
    return 1;
 800fae6:	2301      	movs	r3, #1
 800fae8:	e000      	b.n	800faec <tcp_input_delayed_close+0x64>
  }
  return 0;
 800faea:	2300      	movs	r3, #0
}
 800faec:	4618      	mov	r0, r3
 800faee:	3708      	adds	r7, #8
 800faf0:	46bd      	mov	sp, r7
 800faf2:	bd80      	pop	{r7, pc}
 800faf4:	0801a64c 	.word	0x0801a64c
 800faf8:	0801a81c 	.word	0x0801a81c
 800fafc:	0801a698 	.word	0x0801a698
 800fb00:	2000d189 	.word	0x2000d189
 800fb04:	2000d150 	.word	0x2000d150

0800fb08 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fb08:	b590      	push	{r4, r7, lr}
 800fb0a:	b08b      	sub	sp, #44	; 0x2c
 800fb0c:	af04      	add	r7, sp, #16
 800fb0e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800fb10:	4b6f      	ldr	r3, [pc, #444]	; (800fcd0 <tcp_listen_input+0x1c8>)
 800fb12:	781b      	ldrb	r3, [r3, #0]
 800fb14:	f003 0304 	and.w	r3, r3, #4
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	f040 80d2 	bne.w	800fcc2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d106      	bne.n	800fb32 <tcp_listen_input+0x2a>
 800fb24:	4b6b      	ldr	r3, [pc, #428]	; (800fcd4 <tcp_listen_input+0x1cc>)
 800fb26:	f240 2281 	movw	r2, #641	; 0x281
 800fb2a:	496b      	ldr	r1, [pc, #428]	; (800fcd8 <tcp_listen_input+0x1d0>)
 800fb2c:	486b      	ldr	r0, [pc, #428]	; (800fcdc <tcp_listen_input+0x1d4>)
 800fb2e:	f007 fa67 	bl	8017000 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800fb32:	4b67      	ldr	r3, [pc, #412]	; (800fcd0 <tcp_listen_input+0x1c8>)
 800fb34:	781b      	ldrb	r3, [r3, #0]
 800fb36:	f003 0310 	and.w	r3, r3, #16
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d019      	beq.n	800fb72 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb3e:	4b68      	ldr	r3, [pc, #416]	; (800fce0 <tcp_listen_input+0x1d8>)
 800fb40:	6819      	ldr	r1, [r3, #0]
 800fb42:	4b68      	ldr	r3, [pc, #416]	; (800fce4 <tcp_listen_input+0x1dc>)
 800fb44:	881b      	ldrh	r3, [r3, #0]
 800fb46:	461a      	mov	r2, r3
 800fb48:	4b67      	ldr	r3, [pc, #412]	; (800fce8 <tcp_listen_input+0x1e0>)
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb4e:	4b67      	ldr	r3, [pc, #412]	; (800fcec <tcp_listen_input+0x1e4>)
 800fb50:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb52:	885b      	ldrh	r3, [r3, #2]
 800fb54:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb56:	4a65      	ldr	r2, [pc, #404]	; (800fcec <tcp_listen_input+0x1e4>)
 800fb58:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb5a:	8812      	ldrh	r2, [r2, #0]
 800fb5c:	b292      	uxth	r2, r2
 800fb5e:	9202      	str	r2, [sp, #8]
 800fb60:	9301      	str	r3, [sp, #4]
 800fb62:	4b63      	ldr	r3, [pc, #396]	; (800fcf0 <tcp_listen_input+0x1e8>)
 800fb64:	9300      	str	r3, [sp, #0]
 800fb66:	4b63      	ldr	r3, [pc, #396]	; (800fcf4 <tcp_listen_input+0x1ec>)
 800fb68:	4602      	mov	r2, r0
 800fb6a:	6878      	ldr	r0, [r7, #4]
 800fb6c:	f003 fbd8 	bl	8013320 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fb70:	e0a9      	b.n	800fcc6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800fb72:	4b57      	ldr	r3, [pc, #348]	; (800fcd0 <tcp_listen_input+0x1c8>)
 800fb74:	781b      	ldrb	r3, [r3, #0]
 800fb76:	f003 0302 	and.w	r3, r3, #2
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	f000 80a3 	beq.w	800fcc6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	7d5b      	ldrb	r3, [r3, #21]
 800fb84:	4618      	mov	r0, r3
 800fb86:	f7ff f859 	bl	800ec3c <tcp_alloc>
 800fb8a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800fb8c:	697b      	ldr	r3, [r7, #20]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d111      	bne.n	800fbb6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	699b      	ldr	r3, [r3, #24]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d00a      	beq.n	800fbb0 <tcp_listen_input+0xa8>
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	699b      	ldr	r3, [r3, #24]
 800fb9e:	687a      	ldr	r2, [r7, #4]
 800fba0:	6910      	ldr	r0, [r2, #16]
 800fba2:	f04f 32ff 	mov.w	r2, #4294967295
 800fba6:	2100      	movs	r1, #0
 800fba8:	4798      	blx	r3
 800fbaa:	4603      	mov	r3, r0
 800fbac:	73bb      	strb	r3, [r7, #14]
      return;
 800fbae:	e08b      	b.n	800fcc8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fbb0:	23f0      	movs	r3, #240	; 0xf0
 800fbb2:	73bb      	strb	r3, [r7, #14]
      return;
 800fbb4:	e088      	b.n	800fcc8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fbb6:	4b50      	ldr	r3, [pc, #320]	; (800fcf8 <tcp_listen_input+0x1f0>)
 800fbb8:	695a      	ldr	r2, [r3, #20]
 800fbba:	697b      	ldr	r3, [r7, #20]
 800fbbc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800fbbe:	4b4e      	ldr	r3, [pc, #312]	; (800fcf8 <tcp_listen_input+0x1f0>)
 800fbc0:	691a      	ldr	r2, [r3, #16]
 800fbc2:	697b      	ldr	r3, [r7, #20]
 800fbc4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	8ada      	ldrh	r2, [r3, #22]
 800fbca:	697b      	ldr	r3, [r7, #20]
 800fbcc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800fbce:	4b47      	ldr	r3, [pc, #284]	; (800fcec <tcp_listen_input+0x1e4>)
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	881b      	ldrh	r3, [r3, #0]
 800fbd4:	b29a      	uxth	r2, r3
 800fbd6:	697b      	ldr	r3, [r7, #20]
 800fbd8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800fbda:	697b      	ldr	r3, [r7, #20]
 800fbdc:	2203      	movs	r2, #3
 800fbde:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800fbe0:	4b41      	ldr	r3, [pc, #260]	; (800fce8 <tcp_listen_input+0x1e0>)
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	1c5a      	adds	r2, r3, #1
 800fbe6:	697b      	ldr	r3, [r7, #20]
 800fbe8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800fbea:	697b      	ldr	r3, [r7, #20]
 800fbec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fbee:	697b      	ldr	r3, [r7, #20]
 800fbf0:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800fbf2:	6978      	ldr	r0, [r7, #20]
 800fbf4:	f7ff fa58 	bl	800f0a8 <tcp_next_iss>
 800fbf8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800fbfa:	697b      	ldr	r3, [r7, #20]
 800fbfc:	693a      	ldr	r2, [r7, #16]
 800fbfe:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800fc00:	697b      	ldr	r3, [r7, #20]
 800fc02:	693a      	ldr	r2, [r7, #16]
 800fc04:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800fc06:	697b      	ldr	r3, [r7, #20]
 800fc08:	693a      	ldr	r2, [r7, #16]
 800fc0a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800fc0c:	697b      	ldr	r3, [r7, #20]
 800fc0e:	693a      	ldr	r2, [r7, #16]
 800fc10:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800fc12:	4b35      	ldr	r3, [pc, #212]	; (800fce8 <tcp_listen_input+0x1e0>)
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	1e5a      	subs	r2, r3, #1
 800fc18:	697b      	ldr	r3, [r7, #20]
 800fc1a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	691a      	ldr	r2, [r3, #16]
 800fc20:	697b      	ldr	r3, [r7, #20]
 800fc22:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800fc24:	697b      	ldr	r3, [r7, #20]
 800fc26:	687a      	ldr	r2, [r7, #4]
 800fc28:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	7a5b      	ldrb	r3, [r3, #9]
 800fc2e:	f003 030c 	and.w	r3, r3, #12
 800fc32:	b2da      	uxtb	r2, r3
 800fc34:	697b      	ldr	r3, [r7, #20]
 800fc36:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	7a1a      	ldrb	r2, [r3, #8]
 800fc3c:	697b      	ldr	r3, [r7, #20]
 800fc3e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800fc40:	4b2e      	ldr	r3, [pc, #184]	; (800fcfc <tcp_listen_input+0x1f4>)
 800fc42:	681a      	ldr	r2, [r3, #0]
 800fc44:	697b      	ldr	r3, [r7, #20]
 800fc46:	60da      	str	r2, [r3, #12]
 800fc48:	4a2c      	ldr	r2, [pc, #176]	; (800fcfc <tcp_listen_input+0x1f4>)
 800fc4a:	697b      	ldr	r3, [r7, #20]
 800fc4c:	6013      	str	r3, [r2, #0]
 800fc4e:	f003 fd29 	bl	80136a4 <tcp_timer_needed>
 800fc52:	4b2b      	ldr	r3, [pc, #172]	; (800fd00 <tcp_listen_input+0x1f8>)
 800fc54:	2201      	movs	r2, #1
 800fc56:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800fc58:	6978      	ldr	r0, [r7, #20]
 800fc5a:	f001 fd8f 	bl	801177c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800fc5e:	4b23      	ldr	r3, [pc, #140]	; (800fcec <tcp_listen_input+0x1e4>)
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	89db      	ldrh	r3, [r3, #14]
 800fc64:	b29a      	uxth	r2, r3
 800fc66:	697b      	ldr	r3, [r7, #20]
 800fc68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800fc6c:	697b      	ldr	r3, [r7, #20]
 800fc6e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fc72:	697b      	ldr	r3, [r7, #20]
 800fc74:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800fc78:	697b      	ldr	r3, [r7, #20]
 800fc7a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800fc7c:	697b      	ldr	r3, [r7, #20]
 800fc7e:	3304      	adds	r3, #4
 800fc80:	4618      	mov	r0, r3
 800fc82:	f005 fc4d 	bl	8015520 <ip4_route>
 800fc86:	4601      	mov	r1, r0
 800fc88:	697b      	ldr	r3, [r7, #20]
 800fc8a:	3304      	adds	r3, #4
 800fc8c:	461a      	mov	r2, r3
 800fc8e:	4620      	mov	r0, r4
 800fc90:	f7ff fa30 	bl	800f0f4 <tcp_eff_send_mss_netif>
 800fc94:	4603      	mov	r3, r0
 800fc96:	461a      	mov	r2, r3
 800fc98:	697b      	ldr	r3, [r7, #20]
 800fc9a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800fc9c:	2112      	movs	r1, #18
 800fc9e:	6978      	ldr	r0, [r7, #20]
 800fca0:	f002 fc9c 	bl	80125dc <tcp_enqueue_flags>
 800fca4:	4603      	mov	r3, r0
 800fca6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800fca8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d004      	beq.n	800fcba <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800fcb0:	2100      	movs	r1, #0
 800fcb2:	6978      	ldr	r0, [r7, #20]
 800fcb4:	f7fd ffd2 	bl	800dc5c <tcp_abandon>
      return;
 800fcb8:	e006      	b.n	800fcc8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800fcba:	6978      	ldr	r0, [r7, #20]
 800fcbc:	f002 fd7c 	bl	80127b8 <tcp_output>
  return;
 800fcc0:	e001      	b.n	800fcc6 <tcp_listen_input+0x1be>
    return;
 800fcc2:	bf00      	nop
 800fcc4:	e000      	b.n	800fcc8 <tcp_listen_input+0x1c0>
  return;
 800fcc6:	bf00      	nop
}
 800fcc8:	371c      	adds	r7, #28
 800fcca:	46bd      	mov	sp, r7
 800fccc:	bd90      	pop	{r4, r7, pc}
 800fcce:	bf00      	nop
 800fcd0:	2000d188 	.word	0x2000d188
 800fcd4:	0801a64c 	.word	0x0801a64c
 800fcd8:	0801a844 	.word	0x0801a844
 800fcdc:	0801a698 	.word	0x0801a698
 800fce0:	2000d180 	.word	0x2000d180
 800fce4:	2000d186 	.word	0x2000d186
 800fce8:	2000d17c 	.word	0x2000d17c
 800fcec:	2000d16c 	.word	0x2000d16c
 800fcf0:	20007840 	.word	0x20007840
 800fcf4:	20007844 	.word	0x20007844
 800fcf8:	20007830 	.word	0x20007830
 800fcfc:	2000d150 	.word	0x2000d150
 800fd00:	2000d158 	.word	0x2000d158

0800fd04 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b086      	sub	sp, #24
 800fd08:	af04      	add	r7, sp, #16
 800fd0a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800fd0c:	4b2f      	ldr	r3, [pc, #188]	; (800fdcc <tcp_timewait_input+0xc8>)
 800fd0e:	781b      	ldrb	r3, [r3, #0]
 800fd10:	f003 0304 	and.w	r3, r3, #4
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d153      	bne.n	800fdc0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d106      	bne.n	800fd2c <tcp_timewait_input+0x28>
 800fd1e:	4b2c      	ldr	r3, [pc, #176]	; (800fdd0 <tcp_timewait_input+0xcc>)
 800fd20:	f240 22ee 	movw	r2, #750	; 0x2ee
 800fd24:	492b      	ldr	r1, [pc, #172]	; (800fdd4 <tcp_timewait_input+0xd0>)
 800fd26:	482c      	ldr	r0, [pc, #176]	; (800fdd8 <tcp_timewait_input+0xd4>)
 800fd28:	f007 f96a 	bl	8017000 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800fd2c:	4b27      	ldr	r3, [pc, #156]	; (800fdcc <tcp_timewait_input+0xc8>)
 800fd2e:	781b      	ldrb	r3, [r3, #0]
 800fd30:	f003 0302 	and.w	r3, r3, #2
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d02a      	beq.n	800fd8e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800fd38:	4b28      	ldr	r3, [pc, #160]	; (800fddc <tcp_timewait_input+0xd8>)
 800fd3a:	681a      	ldr	r2, [r3, #0]
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd40:	1ad3      	subs	r3, r2, r3
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	db2d      	blt.n	800fda2 <tcp_timewait_input+0x9e>
 800fd46:	4b25      	ldr	r3, [pc, #148]	; (800fddc <tcp_timewait_input+0xd8>)
 800fd48:	681a      	ldr	r2, [r3, #0]
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd4e:	6879      	ldr	r1, [r7, #4]
 800fd50:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fd52:	440b      	add	r3, r1
 800fd54:	1ad3      	subs	r3, r2, r3
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	dc23      	bgt.n	800fda2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd5a:	4b21      	ldr	r3, [pc, #132]	; (800fde0 <tcp_timewait_input+0xdc>)
 800fd5c:	6819      	ldr	r1, [r3, #0]
 800fd5e:	4b21      	ldr	r3, [pc, #132]	; (800fde4 <tcp_timewait_input+0xe0>)
 800fd60:	881b      	ldrh	r3, [r3, #0]
 800fd62:	461a      	mov	r2, r3
 800fd64:	4b1d      	ldr	r3, [pc, #116]	; (800fddc <tcp_timewait_input+0xd8>)
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd6a:	4b1f      	ldr	r3, [pc, #124]	; (800fde8 <tcp_timewait_input+0xe4>)
 800fd6c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd6e:	885b      	ldrh	r3, [r3, #2]
 800fd70:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd72:	4a1d      	ldr	r2, [pc, #116]	; (800fde8 <tcp_timewait_input+0xe4>)
 800fd74:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd76:	8812      	ldrh	r2, [r2, #0]
 800fd78:	b292      	uxth	r2, r2
 800fd7a:	9202      	str	r2, [sp, #8]
 800fd7c:	9301      	str	r3, [sp, #4]
 800fd7e:	4b1b      	ldr	r3, [pc, #108]	; (800fdec <tcp_timewait_input+0xe8>)
 800fd80:	9300      	str	r3, [sp, #0]
 800fd82:	4b1b      	ldr	r3, [pc, #108]	; (800fdf0 <tcp_timewait_input+0xec>)
 800fd84:	4602      	mov	r2, r0
 800fd86:	6878      	ldr	r0, [r7, #4]
 800fd88:	f003 faca 	bl	8013320 <tcp_rst>
      return;
 800fd8c:	e01b      	b.n	800fdc6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800fd8e:	4b0f      	ldr	r3, [pc, #60]	; (800fdcc <tcp_timewait_input+0xc8>)
 800fd90:	781b      	ldrb	r3, [r3, #0]
 800fd92:	f003 0301 	and.w	r3, r3, #1
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d003      	beq.n	800fda2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800fd9a:	4b16      	ldr	r3, [pc, #88]	; (800fdf4 <tcp_timewait_input+0xf0>)
 800fd9c:	681a      	ldr	r2, [r3, #0]
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800fda2:	4b10      	ldr	r3, [pc, #64]	; (800fde4 <tcp_timewait_input+0xe0>)
 800fda4:	881b      	ldrh	r3, [r3, #0]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d00c      	beq.n	800fdc4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	8b5b      	ldrh	r3, [r3, #26]
 800fdae:	f043 0302 	orr.w	r3, r3, #2
 800fdb2:	b29a      	uxth	r2, r3
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fdb8:	6878      	ldr	r0, [r7, #4]
 800fdba:	f002 fcfd 	bl	80127b8 <tcp_output>
  }
  return;
 800fdbe:	e001      	b.n	800fdc4 <tcp_timewait_input+0xc0>
    return;
 800fdc0:	bf00      	nop
 800fdc2:	e000      	b.n	800fdc6 <tcp_timewait_input+0xc2>
  return;
 800fdc4:	bf00      	nop
}
 800fdc6:	3708      	adds	r7, #8
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	bd80      	pop	{r7, pc}
 800fdcc:	2000d188 	.word	0x2000d188
 800fdd0:	0801a64c 	.word	0x0801a64c
 800fdd4:	0801a864 	.word	0x0801a864
 800fdd8:	0801a698 	.word	0x0801a698
 800fddc:	2000d17c 	.word	0x2000d17c
 800fde0:	2000d180 	.word	0x2000d180
 800fde4:	2000d186 	.word	0x2000d186
 800fde8:	2000d16c 	.word	0x2000d16c
 800fdec:	20007840 	.word	0x20007840
 800fdf0:	20007844 	.word	0x20007844
 800fdf4:	2000d144 	.word	0x2000d144

0800fdf8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800fdf8:	b590      	push	{r4, r7, lr}
 800fdfa:	b08d      	sub	sp, #52	; 0x34
 800fdfc:	af04      	add	r7, sp, #16
 800fdfe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800fe00:	2300      	movs	r3, #0
 800fe02:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800fe04:	2300      	movs	r3, #0
 800fe06:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d106      	bne.n	800fe1c <tcp_process+0x24>
 800fe0e:	4b9d      	ldr	r3, [pc, #628]	; (8010084 <tcp_process+0x28c>)
 800fe10:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800fe14:	499c      	ldr	r1, [pc, #624]	; (8010088 <tcp_process+0x290>)
 800fe16:	489d      	ldr	r0, [pc, #628]	; (801008c <tcp_process+0x294>)
 800fe18:	f007 f8f2 	bl	8017000 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800fe1c:	4b9c      	ldr	r3, [pc, #624]	; (8010090 <tcp_process+0x298>)
 800fe1e:	781b      	ldrb	r3, [r3, #0]
 800fe20:	f003 0304 	and.w	r3, r3, #4
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d04e      	beq.n	800fec6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	7d1b      	ldrb	r3, [r3, #20]
 800fe2c:	2b02      	cmp	r3, #2
 800fe2e:	d108      	bne.n	800fe42 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fe34:	4b97      	ldr	r3, [pc, #604]	; (8010094 <tcp_process+0x29c>)
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	429a      	cmp	r2, r3
 800fe3a:	d123      	bne.n	800fe84 <tcp_process+0x8c>
        acceptable = 1;
 800fe3c:	2301      	movs	r3, #1
 800fe3e:	76fb      	strb	r3, [r7, #27]
 800fe40:	e020      	b.n	800fe84 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe46:	4b94      	ldr	r3, [pc, #592]	; (8010098 <tcp_process+0x2a0>)
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	429a      	cmp	r2, r3
 800fe4c:	d102      	bne.n	800fe54 <tcp_process+0x5c>
        acceptable = 1;
 800fe4e:	2301      	movs	r3, #1
 800fe50:	76fb      	strb	r3, [r7, #27]
 800fe52:	e017      	b.n	800fe84 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fe54:	4b90      	ldr	r3, [pc, #576]	; (8010098 <tcp_process+0x2a0>)
 800fe56:	681a      	ldr	r2, [r3, #0]
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe5c:	1ad3      	subs	r3, r2, r3
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	db10      	blt.n	800fe84 <tcp_process+0x8c>
 800fe62:	4b8d      	ldr	r3, [pc, #564]	; (8010098 <tcp_process+0x2a0>)
 800fe64:	681a      	ldr	r2, [r3, #0]
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe6a:	6879      	ldr	r1, [r7, #4]
 800fe6c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fe6e:	440b      	add	r3, r1
 800fe70:	1ad3      	subs	r3, r2, r3
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	dc06      	bgt.n	800fe84 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	8b5b      	ldrh	r3, [r3, #26]
 800fe7a:	f043 0302 	orr.w	r3, r3, #2
 800fe7e:	b29a      	uxth	r2, r3
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800fe84:	7efb      	ldrb	r3, [r7, #27]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d01b      	beq.n	800fec2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	7d1b      	ldrb	r3, [r3, #20]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d106      	bne.n	800fea0 <tcp_process+0xa8>
 800fe92:	4b7c      	ldr	r3, [pc, #496]	; (8010084 <tcp_process+0x28c>)
 800fe94:	f44f 724e 	mov.w	r2, #824	; 0x338
 800fe98:	4980      	ldr	r1, [pc, #512]	; (801009c <tcp_process+0x2a4>)
 800fe9a:	487c      	ldr	r0, [pc, #496]	; (801008c <tcp_process+0x294>)
 800fe9c:	f007 f8b0 	bl	8017000 <iprintf>
      recv_flags |= TF_RESET;
 800fea0:	4b7f      	ldr	r3, [pc, #508]	; (80100a0 <tcp_process+0x2a8>)
 800fea2:	781b      	ldrb	r3, [r3, #0]
 800fea4:	f043 0308 	orr.w	r3, r3, #8
 800fea8:	b2da      	uxtb	r2, r3
 800feaa:	4b7d      	ldr	r3, [pc, #500]	; (80100a0 <tcp_process+0x2a8>)
 800feac:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	8b5b      	ldrh	r3, [r3, #26]
 800feb2:	f023 0301 	bic.w	r3, r3, #1
 800feb6:	b29a      	uxth	r2, r3
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800febc:	f06f 030d 	mvn.w	r3, #13
 800fec0:	e37a      	b.n	80105b8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800fec2:	2300      	movs	r3, #0
 800fec4:	e378      	b.n	80105b8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800fec6:	4b72      	ldr	r3, [pc, #456]	; (8010090 <tcp_process+0x298>)
 800fec8:	781b      	ldrb	r3, [r3, #0]
 800feca:	f003 0302 	and.w	r3, r3, #2
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d010      	beq.n	800fef4 <tcp_process+0xfc>
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	7d1b      	ldrb	r3, [r3, #20]
 800fed6:	2b02      	cmp	r3, #2
 800fed8:	d00c      	beq.n	800fef4 <tcp_process+0xfc>
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	7d1b      	ldrb	r3, [r3, #20]
 800fede:	2b03      	cmp	r3, #3
 800fee0:	d008      	beq.n	800fef4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	8b5b      	ldrh	r3, [r3, #26]
 800fee6:	f043 0302 	orr.w	r3, r3, #2
 800feea:	b29a      	uxth	r2, r3
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800fef0:	2300      	movs	r3, #0
 800fef2:	e361      	b.n	80105b8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	8b5b      	ldrh	r3, [r3, #26]
 800fef8:	f003 0310 	and.w	r3, r3, #16
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d103      	bne.n	800ff08 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ff00:	4b68      	ldr	r3, [pc, #416]	; (80100a4 <tcp_process+0x2ac>)
 800ff02:	681a      	ldr	r2, [r3, #0]
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	2200      	movs	r2, #0
 800ff14:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800ff18:	6878      	ldr	r0, [r7, #4]
 800ff1a:	f001 fc2f 	bl	801177c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	7d1b      	ldrb	r3, [r3, #20]
 800ff22:	3b02      	subs	r3, #2
 800ff24:	2b07      	cmp	r3, #7
 800ff26:	f200 8337 	bhi.w	8010598 <tcp_process+0x7a0>
 800ff2a:	a201      	add	r2, pc, #4	; (adr r2, 800ff30 <tcp_process+0x138>)
 800ff2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff30:	0800ff51 	.word	0x0800ff51
 800ff34:	08010181 	.word	0x08010181
 800ff38:	080102f9 	.word	0x080102f9
 800ff3c:	08010323 	.word	0x08010323
 800ff40:	08010447 	.word	0x08010447
 800ff44:	080102f9 	.word	0x080102f9
 800ff48:	080104d3 	.word	0x080104d3
 800ff4c:	08010563 	.word	0x08010563
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ff50:	4b4f      	ldr	r3, [pc, #316]	; (8010090 <tcp_process+0x298>)
 800ff52:	781b      	ldrb	r3, [r3, #0]
 800ff54:	f003 0310 	and.w	r3, r3, #16
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	f000 80e4 	beq.w	8010126 <tcp_process+0x32e>
 800ff5e:	4b4c      	ldr	r3, [pc, #304]	; (8010090 <tcp_process+0x298>)
 800ff60:	781b      	ldrb	r3, [r3, #0]
 800ff62:	f003 0302 	and.w	r3, r3, #2
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	f000 80dd 	beq.w	8010126 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff70:	1c5a      	adds	r2, r3, #1
 800ff72:	4b48      	ldr	r3, [pc, #288]	; (8010094 <tcp_process+0x29c>)
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	429a      	cmp	r2, r3
 800ff78:	f040 80d5 	bne.w	8010126 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800ff7c:	4b46      	ldr	r3, [pc, #280]	; (8010098 <tcp_process+0x2a0>)
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	1c5a      	adds	r2, r3, #1
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800ff8e:	4b41      	ldr	r3, [pc, #260]	; (8010094 <tcp_process+0x29c>)
 800ff90:	681a      	ldr	r2, [r3, #0]
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800ff96:	4b44      	ldr	r3, [pc, #272]	; (80100a8 <tcp_process+0x2b0>)
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	89db      	ldrh	r3, [r3, #14]
 800ff9c:	b29a      	uxth	r2, r3
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ffb0:	4b39      	ldr	r3, [pc, #228]	; (8010098 <tcp_process+0x2a0>)
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	1e5a      	subs	r2, r3, #1
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	2204      	movs	r2, #4
 800ffbe:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	3304      	adds	r3, #4
 800ffc8:	4618      	mov	r0, r3
 800ffca:	f005 faa9 	bl	8015520 <ip4_route>
 800ffce:	4601      	mov	r1, r0
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	3304      	adds	r3, #4
 800ffd4:	461a      	mov	r2, r3
 800ffd6:	4620      	mov	r0, r4
 800ffd8:	f7ff f88c 	bl	800f0f4 <tcp_eff_send_mss_netif>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	461a      	mov	r2, r3
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ffe8:	009a      	lsls	r2, r3, #2
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ffee:	005b      	lsls	r3, r3, #1
 800fff0:	f241 111c 	movw	r1, #4380	; 0x111c
 800fff4:	428b      	cmp	r3, r1
 800fff6:	bf38      	it	cc
 800fff8:	460b      	movcc	r3, r1
 800fffa:	429a      	cmp	r2, r3
 800fffc:	d204      	bcs.n	8010008 <tcp_process+0x210>
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010002:	009b      	lsls	r3, r3, #2
 8010004:	b29b      	uxth	r3, r3
 8010006:	e00d      	b.n	8010024 <tcp_process+0x22c>
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801000c:	005b      	lsls	r3, r3, #1
 801000e:	f241 121c 	movw	r2, #4380	; 0x111c
 8010012:	4293      	cmp	r3, r2
 8010014:	d904      	bls.n	8010020 <tcp_process+0x228>
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801001a:	005b      	lsls	r3, r3, #1
 801001c:	b29b      	uxth	r3, r3
 801001e:	e001      	b.n	8010024 <tcp_process+0x22c>
 8010020:	f241 131c 	movw	r3, #4380	; 0x111c
 8010024:	687a      	ldr	r2, [r7, #4]
 8010026:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010030:	2b00      	cmp	r3, #0
 8010032:	d106      	bne.n	8010042 <tcp_process+0x24a>
 8010034:	4b13      	ldr	r3, [pc, #76]	; (8010084 <tcp_process+0x28c>)
 8010036:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801003a:	491c      	ldr	r1, [pc, #112]	; (80100ac <tcp_process+0x2b4>)
 801003c:	4813      	ldr	r0, [pc, #76]	; (801008c <tcp_process+0x294>)
 801003e:	f006 ffdf 	bl	8017000 <iprintf>
        --pcb->snd_queuelen;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010048:	3b01      	subs	r3, #1
 801004a:	b29a      	uxth	r2, r3
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010056:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010058:	69fb      	ldr	r3, [r7, #28]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d12a      	bne.n	80100b4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010062:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010064:	69fb      	ldr	r3, [r7, #28]
 8010066:	2b00      	cmp	r3, #0
 8010068:	d106      	bne.n	8010078 <tcp_process+0x280>
 801006a:	4b06      	ldr	r3, [pc, #24]	; (8010084 <tcp_process+0x28c>)
 801006c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010070:	490f      	ldr	r1, [pc, #60]	; (80100b0 <tcp_process+0x2b8>)
 8010072:	4806      	ldr	r0, [pc, #24]	; (801008c <tcp_process+0x294>)
 8010074:	f006 ffc4 	bl	8017000 <iprintf>
          pcb->unsent = rseg->next;
 8010078:	69fb      	ldr	r3, [r7, #28]
 801007a:	681a      	ldr	r2, [r3, #0]
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	66da      	str	r2, [r3, #108]	; 0x6c
 8010080:	e01c      	b.n	80100bc <tcp_process+0x2c4>
 8010082:	bf00      	nop
 8010084:	0801a64c 	.word	0x0801a64c
 8010088:	0801a884 	.word	0x0801a884
 801008c:	0801a698 	.word	0x0801a698
 8010090:	2000d188 	.word	0x2000d188
 8010094:	2000d180 	.word	0x2000d180
 8010098:	2000d17c 	.word	0x2000d17c
 801009c:	0801a8a0 	.word	0x0801a8a0
 80100a0:	2000d189 	.word	0x2000d189
 80100a4:	2000d144 	.word	0x2000d144
 80100a8:	2000d16c 	.word	0x2000d16c
 80100ac:	0801a8c0 	.word	0x0801a8c0
 80100b0:	0801a8d8 	.word	0x0801a8d8
        } else {
          pcb->unacked = rseg->next;
 80100b4:	69fb      	ldr	r3, [r7, #28]
 80100b6:	681a      	ldr	r2, [r3, #0]
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80100bc:	69f8      	ldr	r0, [r7, #28]
 80100be:	f7fe fc54 	bl	800e96a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d104      	bne.n	80100d4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80100d0:	861a      	strh	r2, [r3, #48]	; 0x30
 80100d2:	e006      	b.n	80100e2 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	2200      	movs	r2, #0
 80100d8:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	2200      	movs	r2, #0
 80100de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d00a      	beq.n	8010102 <tcp_process+0x30a>
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80100f2:	687a      	ldr	r2, [r7, #4]
 80100f4:	6910      	ldr	r0, [r2, #16]
 80100f6:	2200      	movs	r2, #0
 80100f8:	6879      	ldr	r1, [r7, #4]
 80100fa:	4798      	blx	r3
 80100fc:	4603      	mov	r3, r0
 80100fe:	76bb      	strb	r3, [r7, #26]
 8010100:	e001      	b.n	8010106 <tcp_process+0x30e>
 8010102:	2300      	movs	r3, #0
 8010104:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010106:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801010a:	f113 0f0d 	cmn.w	r3, #13
 801010e:	d102      	bne.n	8010116 <tcp_process+0x31e>
          return ERR_ABRT;
 8010110:	f06f 030c 	mvn.w	r3, #12
 8010114:	e250      	b.n	80105b8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	8b5b      	ldrh	r3, [r3, #26]
 801011a:	f043 0302 	orr.w	r3, r3, #2
 801011e:	b29a      	uxth	r2, r3
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010124:	e23a      	b.n	801059c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010126:	4b98      	ldr	r3, [pc, #608]	; (8010388 <tcp_process+0x590>)
 8010128:	781b      	ldrb	r3, [r3, #0]
 801012a:	f003 0310 	and.w	r3, r3, #16
 801012e:	2b00      	cmp	r3, #0
 8010130:	f000 8234 	beq.w	801059c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010134:	4b95      	ldr	r3, [pc, #596]	; (801038c <tcp_process+0x594>)
 8010136:	6819      	ldr	r1, [r3, #0]
 8010138:	4b95      	ldr	r3, [pc, #596]	; (8010390 <tcp_process+0x598>)
 801013a:	881b      	ldrh	r3, [r3, #0]
 801013c:	461a      	mov	r2, r3
 801013e:	4b95      	ldr	r3, [pc, #596]	; (8010394 <tcp_process+0x59c>)
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010144:	4b94      	ldr	r3, [pc, #592]	; (8010398 <tcp_process+0x5a0>)
 8010146:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010148:	885b      	ldrh	r3, [r3, #2]
 801014a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801014c:	4a92      	ldr	r2, [pc, #584]	; (8010398 <tcp_process+0x5a0>)
 801014e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010150:	8812      	ldrh	r2, [r2, #0]
 8010152:	b292      	uxth	r2, r2
 8010154:	9202      	str	r2, [sp, #8]
 8010156:	9301      	str	r3, [sp, #4]
 8010158:	4b90      	ldr	r3, [pc, #576]	; (801039c <tcp_process+0x5a4>)
 801015a:	9300      	str	r3, [sp, #0]
 801015c:	4b90      	ldr	r3, [pc, #576]	; (80103a0 <tcp_process+0x5a8>)
 801015e:	4602      	mov	r2, r0
 8010160:	6878      	ldr	r0, [r7, #4]
 8010162:	f003 f8dd 	bl	8013320 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801016c:	2b05      	cmp	r3, #5
 801016e:	f200 8215 	bhi.w	801059c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	2200      	movs	r2, #0
 8010176:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010178:	6878      	ldr	r0, [r7, #4]
 801017a:	f002 fea7 	bl	8012ecc <tcp_rexmit_rto>
      break;
 801017e:	e20d      	b.n	801059c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010180:	4b81      	ldr	r3, [pc, #516]	; (8010388 <tcp_process+0x590>)
 8010182:	781b      	ldrb	r3, [r3, #0]
 8010184:	f003 0310 	and.w	r3, r3, #16
 8010188:	2b00      	cmp	r3, #0
 801018a:	f000 80a1 	beq.w	80102d0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801018e:	4b7f      	ldr	r3, [pc, #508]	; (801038c <tcp_process+0x594>)
 8010190:	681a      	ldr	r2, [r3, #0]
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010196:	1ad3      	subs	r3, r2, r3
 8010198:	3b01      	subs	r3, #1
 801019a:	2b00      	cmp	r3, #0
 801019c:	db7e      	blt.n	801029c <tcp_process+0x4a4>
 801019e:	4b7b      	ldr	r3, [pc, #492]	; (801038c <tcp_process+0x594>)
 80101a0:	681a      	ldr	r2, [r3, #0]
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80101a6:	1ad3      	subs	r3, r2, r3
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	dc77      	bgt.n	801029c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	2204      	movs	r2, #4
 80101b0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d102      	bne.n	80101c0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80101ba:	23fa      	movs	r3, #250	; 0xfa
 80101bc:	76bb      	strb	r3, [r7, #26]
 80101be:	e01d      	b.n	80101fc <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80101c4:	699b      	ldr	r3, [r3, #24]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d106      	bne.n	80101d8 <tcp_process+0x3e0>
 80101ca:	4b76      	ldr	r3, [pc, #472]	; (80103a4 <tcp_process+0x5ac>)
 80101cc:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80101d0:	4975      	ldr	r1, [pc, #468]	; (80103a8 <tcp_process+0x5b0>)
 80101d2:	4876      	ldr	r0, [pc, #472]	; (80103ac <tcp_process+0x5b4>)
 80101d4:	f006 ff14 	bl	8017000 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80101dc:	699b      	ldr	r3, [r3, #24]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d00a      	beq.n	80101f8 <tcp_process+0x400>
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80101e6:	699b      	ldr	r3, [r3, #24]
 80101e8:	687a      	ldr	r2, [r7, #4]
 80101ea:	6910      	ldr	r0, [r2, #16]
 80101ec:	2200      	movs	r2, #0
 80101ee:	6879      	ldr	r1, [r7, #4]
 80101f0:	4798      	blx	r3
 80101f2:	4603      	mov	r3, r0
 80101f4:	76bb      	strb	r3, [r7, #26]
 80101f6:	e001      	b.n	80101fc <tcp_process+0x404>
 80101f8:	23f0      	movs	r3, #240	; 0xf0
 80101fa:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80101fc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d00a      	beq.n	801021a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010204:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010208:	f113 0f0d 	cmn.w	r3, #13
 801020c:	d002      	beq.n	8010214 <tcp_process+0x41c>
              tcp_abort(pcb);
 801020e:	6878      	ldr	r0, [r7, #4]
 8010210:	f7fd fde2 	bl	800ddd8 <tcp_abort>
            }
            return ERR_ABRT;
 8010214:	f06f 030c 	mvn.w	r3, #12
 8010218:	e1ce      	b.n	80105b8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801021a:	6878      	ldr	r0, [r7, #4]
 801021c:	f000 fae0 	bl	80107e0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010220:	4b63      	ldr	r3, [pc, #396]	; (80103b0 <tcp_process+0x5b8>)
 8010222:	881b      	ldrh	r3, [r3, #0]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d005      	beq.n	8010234 <tcp_process+0x43c>
            recv_acked--;
 8010228:	4b61      	ldr	r3, [pc, #388]	; (80103b0 <tcp_process+0x5b8>)
 801022a:	881b      	ldrh	r3, [r3, #0]
 801022c:	3b01      	subs	r3, #1
 801022e:	b29a      	uxth	r2, r3
 8010230:	4b5f      	ldr	r3, [pc, #380]	; (80103b0 <tcp_process+0x5b8>)
 8010232:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010238:	009a      	lsls	r2, r3, #2
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801023e:	005b      	lsls	r3, r3, #1
 8010240:	f241 111c 	movw	r1, #4380	; 0x111c
 8010244:	428b      	cmp	r3, r1
 8010246:	bf38      	it	cc
 8010248:	460b      	movcc	r3, r1
 801024a:	429a      	cmp	r2, r3
 801024c:	d204      	bcs.n	8010258 <tcp_process+0x460>
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010252:	009b      	lsls	r3, r3, #2
 8010254:	b29b      	uxth	r3, r3
 8010256:	e00d      	b.n	8010274 <tcp_process+0x47c>
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801025c:	005b      	lsls	r3, r3, #1
 801025e:	f241 121c 	movw	r2, #4380	; 0x111c
 8010262:	4293      	cmp	r3, r2
 8010264:	d904      	bls.n	8010270 <tcp_process+0x478>
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801026a:	005b      	lsls	r3, r3, #1
 801026c:	b29b      	uxth	r3, r3
 801026e:	e001      	b.n	8010274 <tcp_process+0x47c>
 8010270:	f241 131c 	movw	r3, #4380	; 0x111c
 8010274:	687a      	ldr	r2, [r7, #4]
 8010276:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801027a:	4b4e      	ldr	r3, [pc, #312]	; (80103b4 <tcp_process+0x5bc>)
 801027c:	781b      	ldrb	r3, [r3, #0]
 801027e:	f003 0320 	and.w	r3, r3, #32
 8010282:	2b00      	cmp	r3, #0
 8010284:	d037      	beq.n	80102f6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	8b5b      	ldrh	r3, [r3, #26]
 801028a:	f043 0302 	orr.w	r3, r3, #2
 801028e:	b29a      	uxth	r2, r3
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	2207      	movs	r2, #7
 8010298:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801029a:	e02c      	b.n	80102f6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801029c:	4b3b      	ldr	r3, [pc, #236]	; (801038c <tcp_process+0x594>)
 801029e:	6819      	ldr	r1, [r3, #0]
 80102a0:	4b3b      	ldr	r3, [pc, #236]	; (8010390 <tcp_process+0x598>)
 80102a2:	881b      	ldrh	r3, [r3, #0]
 80102a4:	461a      	mov	r2, r3
 80102a6:	4b3b      	ldr	r3, [pc, #236]	; (8010394 <tcp_process+0x59c>)
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80102ac:	4b3a      	ldr	r3, [pc, #232]	; (8010398 <tcp_process+0x5a0>)
 80102ae:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102b0:	885b      	ldrh	r3, [r3, #2]
 80102b2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80102b4:	4a38      	ldr	r2, [pc, #224]	; (8010398 <tcp_process+0x5a0>)
 80102b6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102b8:	8812      	ldrh	r2, [r2, #0]
 80102ba:	b292      	uxth	r2, r2
 80102bc:	9202      	str	r2, [sp, #8]
 80102be:	9301      	str	r3, [sp, #4]
 80102c0:	4b36      	ldr	r3, [pc, #216]	; (801039c <tcp_process+0x5a4>)
 80102c2:	9300      	str	r3, [sp, #0]
 80102c4:	4b36      	ldr	r3, [pc, #216]	; (80103a0 <tcp_process+0x5a8>)
 80102c6:	4602      	mov	r2, r0
 80102c8:	6878      	ldr	r0, [r7, #4]
 80102ca:	f003 f829 	bl	8013320 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80102ce:	e167      	b.n	80105a0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80102d0:	4b2d      	ldr	r3, [pc, #180]	; (8010388 <tcp_process+0x590>)
 80102d2:	781b      	ldrb	r3, [r3, #0]
 80102d4:	f003 0302 	and.w	r3, r3, #2
 80102d8:	2b00      	cmp	r3, #0
 80102da:	f000 8161 	beq.w	80105a0 <tcp_process+0x7a8>
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102e2:	1e5a      	subs	r2, r3, #1
 80102e4:	4b2b      	ldr	r3, [pc, #172]	; (8010394 <tcp_process+0x59c>)
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	429a      	cmp	r2, r3
 80102ea:	f040 8159 	bne.w	80105a0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80102ee:	6878      	ldr	r0, [r7, #4]
 80102f0:	f002 fe0e 	bl	8012f10 <tcp_rexmit>
      break;
 80102f4:	e154      	b.n	80105a0 <tcp_process+0x7a8>
 80102f6:	e153      	b.n	80105a0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80102f8:	6878      	ldr	r0, [r7, #4]
 80102fa:	f000 fa71 	bl	80107e0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80102fe:	4b2d      	ldr	r3, [pc, #180]	; (80103b4 <tcp_process+0x5bc>)
 8010300:	781b      	ldrb	r3, [r3, #0]
 8010302:	f003 0320 	and.w	r3, r3, #32
 8010306:	2b00      	cmp	r3, #0
 8010308:	f000 814c 	beq.w	80105a4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	8b5b      	ldrh	r3, [r3, #26]
 8010310:	f043 0302 	orr.w	r3, r3, #2
 8010314:	b29a      	uxth	r2, r3
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	2207      	movs	r2, #7
 801031e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010320:	e140      	b.n	80105a4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010322:	6878      	ldr	r0, [r7, #4]
 8010324:	f000 fa5c 	bl	80107e0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010328:	4b22      	ldr	r3, [pc, #136]	; (80103b4 <tcp_process+0x5bc>)
 801032a:	781b      	ldrb	r3, [r3, #0]
 801032c:	f003 0320 	and.w	r3, r3, #32
 8010330:	2b00      	cmp	r3, #0
 8010332:	d071      	beq.n	8010418 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010334:	4b14      	ldr	r3, [pc, #80]	; (8010388 <tcp_process+0x590>)
 8010336:	781b      	ldrb	r3, [r3, #0]
 8010338:	f003 0310 	and.w	r3, r3, #16
 801033c:	2b00      	cmp	r3, #0
 801033e:	d060      	beq.n	8010402 <tcp_process+0x60a>
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010344:	4b11      	ldr	r3, [pc, #68]	; (801038c <tcp_process+0x594>)
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	429a      	cmp	r2, r3
 801034a:	d15a      	bne.n	8010402 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010350:	2b00      	cmp	r3, #0
 8010352:	d156      	bne.n	8010402 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	8b5b      	ldrh	r3, [r3, #26]
 8010358:	f043 0302 	orr.w	r3, r3, #2
 801035c:	b29a      	uxth	r2, r3
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010362:	6878      	ldr	r0, [r7, #4]
 8010364:	f7fe fdbc 	bl	800eee0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010368:	4b13      	ldr	r3, [pc, #76]	; (80103b8 <tcp_process+0x5c0>)
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	687a      	ldr	r2, [r7, #4]
 801036e:	429a      	cmp	r2, r3
 8010370:	d105      	bne.n	801037e <tcp_process+0x586>
 8010372:	4b11      	ldr	r3, [pc, #68]	; (80103b8 <tcp_process+0x5c0>)
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	68db      	ldr	r3, [r3, #12]
 8010378:	4a0f      	ldr	r2, [pc, #60]	; (80103b8 <tcp_process+0x5c0>)
 801037a:	6013      	str	r3, [r2, #0]
 801037c:	e02e      	b.n	80103dc <tcp_process+0x5e4>
 801037e:	4b0e      	ldr	r3, [pc, #56]	; (80103b8 <tcp_process+0x5c0>)
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	617b      	str	r3, [r7, #20]
 8010384:	e027      	b.n	80103d6 <tcp_process+0x5de>
 8010386:	bf00      	nop
 8010388:	2000d188 	.word	0x2000d188
 801038c:	2000d180 	.word	0x2000d180
 8010390:	2000d186 	.word	0x2000d186
 8010394:	2000d17c 	.word	0x2000d17c
 8010398:	2000d16c 	.word	0x2000d16c
 801039c:	20007840 	.word	0x20007840
 80103a0:	20007844 	.word	0x20007844
 80103a4:	0801a64c 	.word	0x0801a64c
 80103a8:	0801a8ec 	.word	0x0801a8ec
 80103ac:	0801a698 	.word	0x0801a698
 80103b0:	2000d184 	.word	0x2000d184
 80103b4:	2000d189 	.word	0x2000d189
 80103b8:	2000d150 	.word	0x2000d150
 80103bc:	697b      	ldr	r3, [r7, #20]
 80103be:	68db      	ldr	r3, [r3, #12]
 80103c0:	687a      	ldr	r2, [r7, #4]
 80103c2:	429a      	cmp	r2, r3
 80103c4:	d104      	bne.n	80103d0 <tcp_process+0x5d8>
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	68da      	ldr	r2, [r3, #12]
 80103ca:	697b      	ldr	r3, [r7, #20]
 80103cc:	60da      	str	r2, [r3, #12]
 80103ce:	e005      	b.n	80103dc <tcp_process+0x5e4>
 80103d0:	697b      	ldr	r3, [r7, #20]
 80103d2:	68db      	ldr	r3, [r3, #12]
 80103d4:	617b      	str	r3, [r7, #20]
 80103d6:	697b      	ldr	r3, [r7, #20]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d1ef      	bne.n	80103bc <tcp_process+0x5c4>
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	2200      	movs	r2, #0
 80103e0:	60da      	str	r2, [r3, #12]
 80103e2:	4b77      	ldr	r3, [pc, #476]	; (80105c0 <tcp_process+0x7c8>)
 80103e4:	2201      	movs	r2, #1
 80103e6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	220a      	movs	r2, #10
 80103ec:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80103ee:	4b75      	ldr	r3, [pc, #468]	; (80105c4 <tcp_process+0x7cc>)
 80103f0:	681a      	ldr	r2, [r3, #0]
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	60da      	str	r2, [r3, #12]
 80103f6:	4a73      	ldr	r2, [pc, #460]	; (80105c4 <tcp_process+0x7cc>)
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	6013      	str	r3, [r2, #0]
 80103fc:	f003 f952 	bl	80136a4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010400:	e0d2      	b.n	80105a8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	8b5b      	ldrh	r3, [r3, #26]
 8010406:	f043 0302 	orr.w	r3, r3, #2
 801040a:	b29a      	uxth	r2, r3
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	2208      	movs	r2, #8
 8010414:	751a      	strb	r2, [r3, #20]
      break;
 8010416:	e0c7      	b.n	80105a8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010418:	4b6b      	ldr	r3, [pc, #428]	; (80105c8 <tcp_process+0x7d0>)
 801041a:	781b      	ldrb	r3, [r3, #0]
 801041c:	f003 0310 	and.w	r3, r3, #16
 8010420:	2b00      	cmp	r3, #0
 8010422:	f000 80c1 	beq.w	80105a8 <tcp_process+0x7b0>
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801042a:	4b68      	ldr	r3, [pc, #416]	; (80105cc <tcp_process+0x7d4>)
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	429a      	cmp	r2, r3
 8010430:	f040 80ba 	bne.w	80105a8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010438:	2b00      	cmp	r3, #0
 801043a:	f040 80b5 	bne.w	80105a8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	2206      	movs	r2, #6
 8010442:	751a      	strb	r2, [r3, #20]
      break;
 8010444:	e0b0      	b.n	80105a8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8010446:	6878      	ldr	r0, [r7, #4]
 8010448:	f000 f9ca 	bl	80107e0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801044c:	4b60      	ldr	r3, [pc, #384]	; (80105d0 <tcp_process+0x7d8>)
 801044e:	781b      	ldrb	r3, [r3, #0]
 8010450:	f003 0320 	and.w	r3, r3, #32
 8010454:	2b00      	cmp	r3, #0
 8010456:	f000 80a9 	beq.w	80105ac <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	8b5b      	ldrh	r3, [r3, #26]
 801045e:	f043 0302 	orr.w	r3, r3, #2
 8010462:	b29a      	uxth	r2, r3
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010468:	6878      	ldr	r0, [r7, #4]
 801046a:	f7fe fd39 	bl	800eee0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801046e:	4b59      	ldr	r3, [pc, #356]	; (80105d4 <tcp_process+0x7dc>)
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	687a      	ldr	r2, [r7, #4]
 8010474:	429a      	cmp	r2, r3
 8010476:	d105      	bne.n	8010484 <tcp_process+0x68c>
 8010478:	4b56      	ldr	r3, [pc, #344]	; (80105d4 <tcp_process+0x7dc>)
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	68db      	ldr	r3, [r3, #12]
 801047e:	4a55      	ldr	r2, [pc, #340]	; (80105d4 <tcp_process+0x7dc>)
 8010480:	6013      	str	r3, [r2, #0]
 8010482:	e013      	b.n	80104ac <tcp_process+0x6b4>
 8010484:	4b53      	ldr	r3, [pc, #332]	; (80105d4 <tcp_process+0x7dc>)
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	613b      	str	r3, [r7, #16]
 801048a:	e00c      	b.n	80104a6 <tcp_process+0x6ae>
 801048c:	693b      	ldr	r3, [r7, #16]
 801048e:	68db      	ldr	r3, [r3, #12]
 8010490:	687a      	ldr	r2, [r7, #4]
 8010492:	429a      	cmp	r2, r3
 8010494:	d104      	bne.n	80104a0 <tcp_process+0x6a8>
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	68da      	ldr	r2, [r3, #12]
 801049a:	693b      	ldr	r3, [r7, #16]
 801049c:	60da      	str	r2, [r3, #12]
 801049e:	e005      	b.n	80104ac <tcp_process+0x6b4>
 80104a0:	693b      	ldr	r3, [r7, #16]
 80104a2:	68db      	ldr	r3, [r3, #12]
 80104a4:	613b      	str	r3, [r7, #16]
 80104a6:	693b      	ldr	r3, [r7, #16]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d1ef      	bne.n	801048c <tcp_process+0x694>
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	2200      	movs	r2, #0
 80104b0:	60da      	str	r2, [r3, #12]
 80104b2:	4b43      	ldr	r3, [pc, #268]	; (80105c0 <tcp_process+0x7c8>)
 80104b4:	2201      	movs	r2, #1
 80104b6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	220a      	movs	r2, #10
 80104bc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80104be:	4b41      	ldr	r3, [pc, #260]	; (80105c4 <tcp_process+0x7cc>)
 80104c0:	681a      	ldr	r2, [r3, #0]
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	60da      	str	r2, [r3, #12]
 80104c6:	4a3f      	ldr	r2, [pc, #252]	; (80105c4 <tcp_process+0x7cc>)
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	6013      	str	r3, [r2, #0]
 80104cc:	f003 f8ea 	bl	80136a4 <tcp_timer_needed>
      }
      break;
 80104d0:	e06c      	b.n	80105ac <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80104d2:	6878      	ldr	r0, [r7, #4]
 80104d4:	f000 f984 	bl	80107e0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80104d8:	4b3b      	ldr	r3, [pc, #236]	; (80105c8 <tcp_process+0x7d0>)
 80104da:	781b      	ldrb	r3, [r3, #0]
 80104dc:	f003 0310 	and.w	r3, r3, #16
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d065      	beq.n	80105b0 <tcp_process+0x7b8>
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80104e8:	4b38      	ldr	r3, [pc, #224]	; (80105cc <tcp_process+0x7d4>)
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	429a      	cmp	r2, r3
 80104ee:	d15f      	bne.n	80105b0 <tcp_process+0x7b8>
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d15b      	bne.n	80105b0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80104f8:	6878      	ldr	r0, [r7, #4]
 80104fa:	f7fe fcf1 	bl	800eee0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80104fe:	4b35      	ldr	r3, [pc, #212]	; (80105d4 <tcp_process+0x7dc>)
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	687a      	ldr	r2, [r7, #4]
 8010504:	429a      	cmp	r2, r3
 8010506:	d105      	bne.n	8010514 <tcp_process+0x71c>
 8010508:	4b32      	ldr	r3, [pc, #200]	; (80105d4 <tcp_process+0x7dc>)
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	68db      	ldr	r3, [r3, #12]
 801050e:	4a31      	ldr	r2, [pc, #196]	; (80105d4 <tcp_process+0x7dc>)
 8010510:	6013      	str	r3, [r2, #0]
 8010512:	e013      	b.n	801053c <tcp_process+0x744>
 8010514:	4b2f      	ldr	r3, [pc, #188]	; (80105d4 <tcp_process+0x7dc>)
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	60fb      	str	r3, [r7, #12]
 801051a:	e00c      	b.n	8010536 <tcp_process+0x73e>
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	68db      	ldr	r3, [r3, #12]
 8010520:	687a      	ldr	r2, [r7, #4]
 8010522:	429a      	cmp	r2, r3
 8010524:	d104      	bne.n	8010530 <tcp_process+0x738>
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	68da      	ldr	r2, [r3, #12]
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	60da      	str	r2, [r3, #12]
 801052e:	e005      	b.n	801053c <tcp_process+0x744>
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	68db      	ldr	r3, [r3, #12]
 8010534:	60fb      	str	r3, [r7, #12]
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d1ef      	bne.n	801051c <tcp_process+0x724>
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	2200      	movs	r2, #0
 8010540:	60da      	str	r2, [r3, #12]
 8010542:	4b1f      	ldr	r3, [pc, #124]	; (80105c0 <tcp_process+0x7c8>)
 8010544:	2201      	movs	r2, #1
 8010546:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	220a      	movs	r2, #10
 801054c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801054e:	4b1d      	ldr	r3, [pc, #116]	; (80105c4 <tcp_process+0x7cc>)
 8010550:	681a      	ldr	r2, [r3, #0]
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	60da      	str	r2, [r3, #12]
 8010556:	4a1b      	ldr	r2, [pc, #108]	; (80105c4 <tcp_process+0x7cc>)
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	6013      	str	r3, [r2, #0]
 801055c:	f003 f8a2 	bl	80136a4 <tcp_timer_needed>
      }
      break;
 8010560:	e026      	b.n	80105b0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010562:	6878      	ldr	r0, [r7, #4]
 8010564:	f000 f93c 	bl	80107e0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010568:	4b17      	ldr	r3, [pc, #92]	; (80105c8 <tcp_process+0x7d0>)
 801056a:	781b      	ldrb	r3, [r3, #0]
 801056c:	f003 0310 	and.w	r3, r3, #16
 8010570:	2b00      	cmp	r3, #0
 8010572:	d01f      	beq.n	80105b4 <tcp_process+0x7bc>
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010578:	4b14      	ldr	r3, [pc, #80]	; (80105cc <tcp_process+0x7d4>)
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	429a      	cmp	r2, r3
 801057e:	d119      	bne.n	80105b4 <tcp_process+0x7bc>
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010584:	2b00      	cmp	r3, #0
 8010586:	d115      	bne.n	80105b4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010588:	4b11      	ldr	r3, [pc, #68]	; (80105d0 <tcp_process+0x7d8>)
 801058a:	781b      	ldrb	r3, [r3, #0]
 801058c:	f043 0310 	orr.w	r3, r3, #16
 8010590:	b2da      	uxtb	r2, r3
 8010592:	4b0f      	ldr	r3, [pc, #60]	; (80105d0 <tcp_process+0x7d8>)
 8010594:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010596:	e00d      	b.n	80105b4 <tcp_process+0x7bc>
    default:
      break;
 8010598:	bf00      	nop
 801059a:	e00c      	b.n	80105b6 <tcp_process+0x7be>
      break;
 801059c:	bf00      	nop
 801059e:	e00a      	b.n	80105b6 <tcp_process+0x7be>
      break;
 80105a0:	bf00      	nop
 80105a2:	e008      	b.n	80105b6 <tcp_process+0x7be>
      break;
 80105a4:	bf00      	nop
 80105a6:	e006      	b.n	80105b6 <tcp_process+0x7be>
      break;
 80105a8:	bf00      	nop
 80105aa:	e004      	b.n	80105b6 <tcp_process+0x7be>
      break;
 80105ac:	bf00      	nop
 80105ae:	e002      	b.n	80105b6 <tcp_process+0x7be>
      break;
 80105b0:	bf00      	nop
 80105b2:	e000      	b.n	80105b6 <tcp_process+0x7be>
      break;
 80105b4:	bf00      	nop
  }
  return ERR_OK;
 80105b6:	2300      	movs	r3, #0
}
 80105b8:	4618      	mov	r0, r3
 80105ba:	3724      	adds	r7, #36	; 0x24
 80105bc:	46bd      	mov	sp, r7
 80105be:	bd90      	pop	{r4, r7, pc}
 80105c0:	2000d158 	.word	0x2000d158
 80105c4:	2000d154 	.word	0x2000d154
 80105c8:	2000d188 	.word	0x2000d188
 80105cc:	2000d180 	.word	0x2000d180
 80105d0:	2000d189 	.word	0x2000d189
 80105d4:	2000d150 	.word	0x2000d150

080105d8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80105d8:	b590      	push	{r4, r7, lr}
 80105da:	b085      	sub	sp, #20
 80105dc:	af00      	add	r7, sp, #0
 80105de:	6078      	str	r0, [r7, #4]
 80105e0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d106      	bne.n	80105f6 <tcp_oos_insert_segment+0x1e>
 80105e8:	4b3b      	ldr	r3, [pc, #236]	; (80106d8 <tcp_oos_insert_segment+0x100>)
 80105ea:	f240 421f 	movw	r2, #1055	; 0x41f
 80105ee:	493b      	ldr	r1, [pc, #236]	; (80106dc <tcp_oos_insert_segment+0x104>)
 80105f0:	483b      	ldr	r0, [pc, #236]	; (80106e0 <tcp_oos_insert_segment+0x108>)
 80105f2:	f006 fd05 	bl	8017000 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	68db      	ldr	r3, [r3, #12]
 80105fa:	899b      	ldrh	r3, [r3, #12]
 80105fc:	b29b      	uxth	r3, r3
 80105fe:	4618      	mov	r0, r3
 8010600:	f7fb fa0c 	bl	800ba1c <lwip_htons>
 8010604:	4603      	mov	r3, r0
 8010606:	b2db      	uxtb	r3, r3
 8010608:	f003 0301 	and.w	r3, r3, #1
 801060c:	2b00      	cmp	r3, #0
 801060e:	d028      	beq.n	8010662 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010610:	6838      	ldr	r0, [r7, #0]
 8010612:	f7fe f995 	bl	800e940 <tcp_segs_free>
    next = NULL;
 8010616:	2300      	movs	r3, #0
 8010618:	603b      	str	r3, [r7, #0]
 801061a:	e056      	b.n	80106ca <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801061c:	683b      	ldr	r3, [r7, #0]
 801061e:	68db      	ldr	r3, [r3, #12]
 8010620:	899b      	ldrh	r3, [r3, #12]
 8010622:	b29b      	uxth	r3, r3
 8010624:	4618      	mov	r0, r3
 8010626:	f7fb f9f9 	bl	800ba1c <lwip_htons>
 801062a:	4603      	mov	r3, r0
 801062c:	b2db      	uxtb	r3, r3
 801062e:	f003 0301 	and.w	r3, r3, #1
 8010632:	2b00      	cmp	r3, #0
 8010634:	d00d      	beq.n	8010652 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	68db      	ldr	r3, [r3, #12]
 801063a:	899b      	ldrh	r3, [r3, #12]
 801063c:	b29c      	uxth	r4, r3
 801063e:	2001      	movs	r0, #1
 8010640:	f7fb f9ec 	bl	800ba1c <lwip_htons>
 8010644:	4603      	mov	r3, r0
 8010646:	461a      	mov	r2, r3
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	68db      	ldr	r3, [r3, #12]
 801064c:	4322      	orrs	r2, r4
 801064e:	b292      	uxth	r2, r2
 8010650:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010652:	683b      	ldr	r3, [r7, #0]
 8010654:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010656:	683b      	ldr	r3, [r7, #0]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801065c:	68f8      	ldr	r0, [r7, #12]
 801065e:	f7fe f984 	bl	800e96a <tcp_seg_free>
    while (next &&
 8010662:	683b      	ldr	r3, [r7, #0]
 8010664:	2b00      	cmp	r3, #0
 8010666:	d00e      	beq.n	8010686 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	891b      	ldrh	r3, [r3, #8]
 801066c:	461a      	mov	r2, r3
 801066e:	4b1d      	ldr	r3, [pc, #116]	; (80106e4 <tcp_oos_insert_segment+0x10c>)
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	441a      	add	r2, r3
 8010674:	683b      	ldr	r3, [r7, #0]
 8010676:	68db      	ldr	r3, [r3, #12]
 8010678:	685b      	ldr	r3, [r3, #4]
 801067a:	6839      	ldr	r1, [r7, #0]
 801067c:	8909      	ldrh	r1, [r1, #8]
 801067e:	440b      	add	r3, r1
 8010680:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010682:	2b00      	cmp	r3, #0
 8010684:	daca      	bge.n	801061c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010686:	683b      	ldr	r3, [r7, #0]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d01e      	beq.n	80106ca <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	891b      	ldrh	r3, [r3, #8]
 8010690:	461a      	mov	r2, r3
 8010692:	4b14      	ldr	r3, [pc, #80]	; (80106e4 <tcp_oos_insert_segment+0x10c>)
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	441a      	add	r2, r3
 8010698:	683b      	ldr	r3, [r7, #0]
 801069a:	68db      	ldr	r3, [r3, #12]
 801069c:	685b      	ldr	r3, [r3, #4]
 801069e:	1ad3      	subs	r3, r2, r3
    if (next &&
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	dd12      	ble.n	80106ca <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80106a4:	683b      	ldr	r3, [r7, #0]
 80106a6:	68db      	ldr	r3, [r3, #12]
 80106a8:	685b      	ldr	r3, [r3, #4]
 80106aa:	b29a      	uxth	r2, r3
 80106ac:	4b0d      	ldr	r3, [pc, #52]	; (80106e4 <tcp_oos_insert_segment+0x10c>)
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	b29b      	uxth	r3, r3
 80106b2:	1ad3      	subs	r3, r2, r3
 80106b4:	b29a      	uxth	r2, r3
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	685a      	ldr	r2, [r3, #4]
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	891b      	ldrh	r3, [r3, #8]
 80106c2:	4619      	mov	r1, r3
 80106c4:	4610      	mov	r0, r2
 80106c6:	f7fc fbcf 	bl	800ce68 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	683a      	ldr	r2, [r7, #0]
 80106ce:	601a      	str	r2, [r3, #0]
}
 80106d0:	bf00      	nop
 80106d2:	3714      	adds	r7, #20
 80106d4:	46bd      	mov	sp, r7
 80106d6:	bd90      	pop	{r4, r7, pc}
 80106d8:	0801a64c 	.word	0x0801a64c
 80106dc:	0801a90c 	.word	0x0801a90c
 80106e0:	0801a698 	.word	0x0801a698
 80106e4:	2000d17c 	.word	0x2000d17c

080106e8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80106e8:	b5b0      	push	{r4, r5, r7, lr}
 80106ea:	b086      	sub	sp, #24
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	60f8      	str	r0, [r7, #12]
 80106f0:	60b9      	str	r1, [r7, #8]
 80106f2:	607a      	str	r2, [r7, #4]
 80106f4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80106f6:	e03e      	b.n	8010776 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80106f8:	68bb      	ldr	r3, [r7, #8]
 80106fa:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80106fc:	68bb      	ldr	r3, [r7, #8]
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010702:	697b      	ldr	r3, [r7, #20]
 8010704:	685b      	ldr	r3, [r3, #4]
 8010706:	4618      	mov	r0, r3
 8010708:	f7fc fdf4 	bl	800d2f4 <pbuf_clen>
 801070c:	4603      	mov	r3, r0
 801070e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010716:	8a7a      	ldrh	r2, [r7, #18]
 8010718:	429a      	cmp	r2, r3
 801071a:	d906      	bls.n	801072a <tcp_free_acked_segments+0x42>
 801071c:	4b2a      	ldr	r3, [pc, #168]	; (80107c8 <tcp_free_acked_segments+0xe0>)
 801071e:	f240 4257 	movw	r2, #1111	; 0x457
 8010722:	492a      	ldr	r1, [pc, #168]	; (80107cc <tcp_free_acked_segments+0xe4>)
 8010724:	482a      	ldr	r0, [pc, #168]	; (80107d0 <tcp_free_acked_segments+0xe8>)
 8010726:	f006 fc6b 	bl	8017000 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8010730:	8a7b      	ldrh	r3, [r7, #18]
 8010732:	1ad3      	subs	r3, r2, r3
 8010734:	b29a      	uxth	r2, r3
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801073c:	697b      	ldr	r3, [r7, #20]
 801073e:	891a      	ldrh	r2, [r3, #8]
 8010740:	4b24      	ldr	r3, [pc, #144]	; (80107d4 <tcp_free_acked_segments+0xec>)
 8010742:	881b      	ldrh	r3, [r3, #0]
 8010744:	4413      	add	r3, r2
 8010746:	b29a      	uxth	r2, r3
 8010748:	4b22      	ldr	r3, [pc, #136]	; (80107d4 <tcp_free_acked_segments+0xec>)
 801074a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801074c:	6978      	ldr	r0, [r7, #20]
 801074e:	f7fe f90c 	bl	800e96a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010758:	2b00      	cmp	r3, #0
 801075a:	d00c      	beq.n	8010776 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801075c:	68bb      	ldr	r3, [r7, #8]
 801075e:	2b00      	cmp	r3, #0
 8010760:	d109      	bne.n	8010776 <tcp_free_acked_segments+0x8e>
 8010762:	683b      	ldr	r3, [r7, #0]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d106      	bne.n	8010776 <tcp_free_acked_segments+0x8e>
 8010768:	4b17      	ldr	r3, [pc, #92]	; (80107c8 <tcp_free_acked_segments+0xe0>)
 801076a:	f240 4261 	movw	r2, #1121	; 0x461
 801076e:	491a      	ldr	r1, [pc, #104]	; (80107d8 <tcp_free_acked_segments+0xf0>)
 8010770:	4817      	ldr	r0, [pc, #92]	; (80107d0 <tcp_free_acked_segments+0xe8>)
 8010772:	f006 fc45 	bl	8017000 <iprintf>
  while (seg_list != NULL &&
 8010776:	68bb      	ldr	r3, [r7, #8]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d020      	beq.n	80107be <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801077c:	68bb      	ldr	r3, [r7, #8]
 801077e:	68db      	ldr	r3, [r3, #12]
 8010780:	685b      	ldr	r3, [r3, #4]
 8010782:	4618      	mov	r0, r3
 8010784:	f7fb f95f 	bl	800ba46 <lwip_htonl>
 8010788:	4604      	mov	r4, r0
 801078a:	68bb      	ldr	r3, [r7, #8]
 801078c:	891b      	ldrh	r3, [r3, #8]
 801078e:	461d      	mov	r5, r3
 8010790:	68bb      	ldr	r3, [r7, #8]
 8010792:	68db      	ldr	r3, [r3, #12]
 8010794:	899b      	ldrh	r3, [r3, #12]
 8010796:	b29b      	uxth	r3, r3
 8010798:	4618      	mov	r0, r3
 801079a:	f7fb f93f 	bl	800ba1c <lwip_htons>
 801079e:	4603      	mov	r3, r0
 80107a0:	b2db      	uxtb	r3, r3
 80107a2:	f003 0303 	and.w	r3, r3, #3
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d001      	beq.n	80107ae <tcp_free_acked_segments+0xc6>
 80107aa:	2301      	movs	r3, #1
 80107ac:	e000      	b.n	80107b0 <tcp_free_acked_segments+0xc8>
 80107ae:	2300      	movs	r3, #0
 80107b0:	442b      	add	r3, r5
 80107b2:	18e2      	adds	r2, r4, r3
 80107b4:	4b09      	ldr	r3, [pc, #36]	; (80107dc <tcp_free_acked_segments+0xf4>)
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	dd9c      	ble.n	80106f8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80107be:	68bb      	ldr	r3, [r7, #8]
}
 80107c0:	4618      	mov	r0, r3
 80107c2:	3718      	adds	r7, #24
 80107c4:	46bd      	mov	sp, r7
 80107c6:	bdb0      	pop	{r4, r5, r7, pc}
 80107c8:	0801a64c 	.word	0x0801a64c
 80107cc:	0801a934 	.word	0x0801a934
 80107d0:	0801a698 	.word	0x0801a698
 80107d4:	2000d184 	.word	0x2000d184
 80107d8:	0801a95c 	.word	0x0801a95c
 80107dc:	2000d180 	.word	0x2000d180

080107e0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80107e0:	b5b0      	push	{r4, r5, r7, lr}
 80107e2:	b094      	sub	sp, #80	; 0x50
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80107e8:	2300      	movs	r3, #0
 80107ea:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d106      	bne.n	8010800 <tcp_receive+0x20>
 80107f2:	4b91      	ldr	r3, [pc, #580]	; (8010a38 <tcp_receive+0x258>)
 80107f4:	f240 427b 	movw	r2, #1147	; 0x47b
 80107f8:	4990      	ldr	r1, [pc, #576]	; (8010a3c <tcp_receive+0x25c>)
 80107fa:	4891      	ldr	r0, [pc, #580]	; (8010a40 <tcp_receive+0x260>)
 80107fc:	f006 fc00 	bl	8017000 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	7d1b      	ldrb	r3, [r3, #20]
 8010804:	2b03      	cmp	r3, #3
 8010806:	d806      	bhi.n	8010816 <tcp_receive+0x36>
 8010808:	4b8b      	ldr	r3, [pc, #556]	; (8010a38 <tcp_receive+0x258>)
 801080a:	f240 427c 	movw	r2, #1148	; 0x47c
 801080e:	498d      	ldr	r1, [pc, #564]	; (8010a44 <tcp_receive+0x264>)
 8010810:	488b      	ldr	r0, [pc, #556]	; (8010a40 <tcp_receive+0x260>)
 8010812:	f006 fbf5 	bl	8017000 <iprintf>

  if (flags & TCP_ACK) {
 8010816:	4b8c      	ldr	r3, [pc, #560]	; (8010a48 <tcp_receive+0x268>)
 8010818:	781b      	ldrb	r3, [r3, #0]
 801081a:	f003 0310 	and.w	r3, r3, #16
 801081e:	2b00      	cmp	r3, #0
 8010820:	f000 8264 	beq.w	8010cec <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801082a:	461a      	mov	r2, r3
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010830:	4413      	add	r3, r2
 8010832:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010838:	4b84      	ldr	r3, [pc, #528]	; (8010a4c <tcp_receive+0x26c>)
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	1ad3      	subs	r3, r2, r3
 801083e:	2b00      	cmp	r3, #0
 8010840:	db1b      	blt.n	801087a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010846:	4b81      	ldr	r3, [pc, #516]	; (8010a4c <tcp_receive+0x26c>)
 8010848:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801084a:	429a      	cmp	r2, r3
 801084c:	d106      	bne.n	801085c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010852:	4b7f      	ldr	r3, [pc, #508]	; (8010a50 <tcp_receive+0x270>)
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	1ad3      	subs	r3, r2, r3
 8010858:	2b00      	cmp	r3, #0
 801085a:	db0e      	blt.n	801087a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010860:	4b7b      	ldr	r3, [pc, #492]	; (8010a50 <tcp_receive+0x270>)
 8010862:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010864:	429a      	cmp	r2, r3
 8010866:	d125      	bne.n	80108b4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010868:	4b7a      	ldr	r3, [pc, #488]	; (8010a54 <tcp_receive+0x274>)
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	89db      	ldrh	r3, [r3, #14]
 801086e:	b29a      	uxth	r2, r3
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010876:	429a      	cmp	r2, r3
 8010878:	d91c      	bls.n	80108b4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801087a:	4b76      	ldr	r3, [pc, #472]	; (8010a54 <tcp_receive+0x274>)
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	89db      	ldrh	r3, [r3, #14]
 8010880:	b29a      	uxth	r2, r3
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010894:	429a      	cmp	r2, r3
 8010896:	d205      	bcs.n	80108a4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80108a4:	4b69      	ldr	r3, [pc, #420]	; (8010a4c <tcp_receive+0x26c>)
 80108a6:	681a      	ldr	r2, [r3, #0]
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80108ac:	4b68      	ldr	r3, [pc, #416]	; (8010a50 <tcp_receive+0x270>)
 80108ae:	681a      	ldr	r2, [r3, #0]
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80108b4:	4b66      	ldr	r3, [pc, #408]	; (8010a50 <tcp_receive+0x270>)
 80108b6:	681a      	ldr	r2, [r3, #0]
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80108bc:	1ad3      	subs	r3, r2, r3
 80108be:	2b00      	cmp	r3, #0
 80108c0:	dc58      	bgt.n	8010974 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80108c2:	4b65      	ldr	r3, [pc, #404]	; (8010a58 <tcp_receive+0x278>)
 80108c4:	881b      	ldrh	r3, [r3, #0]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d14b      	bne.n	8010962 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80108ce:	687a      	ldr	r2, [r7, #4]
 80108d0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80108d4:	4413      	add	r3, r2
 80108d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80108d8:	429a      	cmp	r2, r3
 80108da:	d142      	bne.n	8010962 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	db3d      	blt.n	8010962 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80108ea:	4b59      	ldr	r3, [pc, #356]	; (8010a50 <tcp_receive+0x270>)
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	429a      	cmp	r2, r3
 80108f0:	d137      	bne.n	8010962 <tcp_receive+0x182>
              found_dupack = 1;
 80108f2:	2301      	movs	r3, #1
 80108f4:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80108fc:	2bff      	cmp	r3, #255	; 0xff
 80108fe:	d007      	beq.n	8010910 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010906:	3301      	adds	r3, #1
 8010908:	b2da      	uxtb	r2, r3
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010916:	2b03      	cmp	r3, #3
 8010918:	d91b      	bls.n	8010952 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010924:	4413      	add	r3, r2
 8010926:	b29a      	uxth	r2, r3
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801092e:	429a      	cmp	r2, r3
 8010930:	d30a      	bcc.n	8010948 <tcp_receive+0x168>
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801093c:	4413      	add	r3, r2
 801093e:	b29a      	uxth	r2, r3
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010946:	e004      	b.n	8010952 <tcp_receive+0x172>
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801094e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010958:	2b02      	cmp	r3, #2
 801095a:	d902      	bls.n	8010962 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801095c:	6878      	ldr	r0, [r7, #4]
 801095e:	f002 fb43 	bl	8012fe8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010964:	2b00      	cmp	r3, #0
 8010966:	f040 8161 	bne.w	8010c2c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	2200      	movs	r2, #0
 801096e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010972:	e15b      	b.n	8010c2c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010974:	4b36      	ldr	r3, [pc, #216]	; (8010a50 <tcp_receive+0x270>)
 8010976:	681a      	ldr	r2, [r3, #0]
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801097c:	1ad3      	subs	r3, r2, r3
 801097e:	3b01      	subs	r3, #1
 8010980:	2b00      	cmp	r3, #0
 8010982:	f2c0 814e 	blt.w	8010c22 <tcp_receive+0x442>
 8010986:	4b32      	ldr	r3, [pc, #200]	; (8010a50 <tcp_receive+0x270>)
 8010988:	681a      	ldr	r2, [r3, #0]
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801098e:	1ad3      	subs	r3, r2, r3
 8010990:	2b00      	cmp	r3, #0
 8010992:	f300 8146 	bgt.w	8010c22 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	8b5b      	ldrh	r3, [r3, #26]
 801099a:	f003 0304 	and.w	r3, r3, #4
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d010      	beq.n	80109c4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	8b5b      	ldrh	r3, [r3, #26]
 80109a6:	f023 0304 	bic.w	r3, r3, #4
 80109aa:	b29a      	uxth	r2, r3
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	2200      	movs	r2, #0
 80109c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	2200      	movs	r2, #0
 80109c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80109d2:	10db      	asrs	r3, r3, #3
 80109d4:	b21b      	sxth	r3, r3
 80109d6:	b29a      	uxth	r2, r3
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80109de:	b29b      	uxth	r3, r3
 80109e0:	4413      	add	r3, r2
 80109e2:	b29b      	uxth	r3, r3
 80109e4:	b21a      	sxth	r2, r3
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80109ec:	4b18      	ldr	r3, [pc, #96]	; (8010a50 <tcp_receive+0x270>)
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	b29a      	uxth	r2, r3
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109f6:	b29b      	uxth	r3, r3
 80109f8:	1ad3      	subs	r3, r2, r3
 80109fa:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	2200      	movs	r2, #0
 8010a00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010a04:	4b12      	ldr	r3, [pc, #72]	; (8010a50 <tcp_receive+0x270>)
 8010a06:	681a      	ldr	r2, [r3, #0]
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	7d1b      	ldrb	r3, [r3, #20]
 8010a10:	2b03      	cmp	r3, #3
 8010a12:	f240 8097 	bls.w	8010b44 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010a22:	429a      	cmp	r2, r3
 8010a24:	d245      	bcs.n	8010ab2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	8b5b      	ldrh	r3, [r3, #26]
 8010a2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d014      	beq.n	8010a5c <tcp_receive+0x27c>
 8010a32:	2301      	movs	r3, #1
 8010a34:	e013      	b.n	8010a5e <tcp_receive+0x27e>
 8010a36:	bf00      	nop
 8010a38:	0801a64c 	.word	0x0801a64c
 8010a3c:	0801a97c 	.word	0x0801a97c
 8010a40:	0801a698 	.word	0x0801a698
 8010a44:	0801a998 	.word	0x0801a998
 8010a48:	2000d188 	.word	0x2000d188
 8010a4c:	2000d17c 	.word	0x2000d17c
 8010a50:	2000d180 	.word	0x2000d180
 8010a54:	2000d16c 	.word	0x2000d16c
 8010a58:	2000d186 	.word	0x2000d186
 8010a5c:	2302      	movs	r3, #2
 8010a5e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010a62:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010a66:	b29a      	uxth	r2, r3
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a6c:	fb12 f303 	smulbb	r3, r2, r3
 8010a70:	b29b      	uxth	r3, r3
 8010a72:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010a74:	4293      	cmp	r3, r2
 8010a76:	bf28      	it	cs
 8010a78:	4613      	movcs	r3, r2
 8010a7a:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010a82:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010a84:	4413      	add	r3, r2
 8010a86:	b29a      	uxth	r2, r3
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010a8e:	429a      	cmp	r2, r3
 8010a90:	d309      	bcc.n	8010aa6 <tcp_receive+0x2c6>
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010a98:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010a9a:	4413      	add	r3, r2
 8010a9c:	b29a      	uxth	r2, r3
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010aa4:	e04e      	b.n	8010b44 <tcp_receive+0x364>
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010aac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010ab0:	e048      	b.n	8010b44 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010ab8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010aba:	4413      	add	r3, r2
 8010abc:	b29a      	uxth	r2, r3
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010ac4:	429a      	cmp	r2, r3
 8010ac6:	d309      	bcc.n	8010adc <tcp_receive+0x2fc>
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010ace:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010ad0:	4413      	add	r3, r2
 8010ad2:	b29a      	uxth	r2, r3
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010ada:	e004      	b.n	8010ae6 <tcp_receive+0x306>
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010ae2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010af2:	429a      	cmp	r2, r3
 8010af4:	d326      	bcc.n	8010b44 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010b02:	1ad3      	subs	r3, r2, r3
 8010b04:	b29a      	uxth	r2, r3
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b16:	4413      	add	r3, r2
 8010b18:	b29a      	uxth	r2, r3
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010b20:	429a      	cmp	r2, r3
 8010b22:	d30a      	bcc.n	8010b3a <tcp_receive+0x35a>
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b2e:	4413      	add	r3, r2
 8010b30:	b29a      	uxth	r2, r3
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010b38:	e004      	b.n	8010b44 <tcp_receive+0x364>
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b40:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b4c:	4a98      	ldr	r2, [pc, #608]	; (8010db0 <tcp_receive+0x5d0>)
 8010b4e:	6878      	ldr	r0, [r7, #4]
 8010b50:	f7ff fdca 	bl	80106e8 <tcp_free_acked_segments>
 8010b54:	4602      	mov	r2, r0
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b62:	4a94      	ldr	r2, [pc, #592]	; (8010db4 <tcp_receive+0x5d4>)
 8010b64:	6878      	ldr	r0, [r7, #4]
 8010b66:	f7ff fdbf 	bl	80106e8 <tcp_free_acked_segments>
 8010b6a:	4602      	mov	r2, r0
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d104      	bne.n	8010b82 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b7e:	861a      	strh	r2, [r3, #48]	; 0x30
 8010b80:	e002      	b.n	8010b88 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	2200      	movs	r2, #0
 8010b86:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	2200      	movs	r2, #0
 8010b8c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d103      	bne.n	8010b9e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	2200      	movs	r2, #0
 8010b9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010ba4:	4b84      	ldr	r3, [pc, #528]	; (8010db8 <tcp_receive+0x5d8>)
 8010ba6:	881b      	ldrh	r3, [r3, #0]
 8010ba8:	4413      	add	r3, r2
 8010baa:	b29a      	uxth	r2, r3
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	8b5b      	ldrh	r3, [r3, #26]
 8010bb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d035      	beq.n	8010c2a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d118      	bne.n	8010bf8 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d00c      	beq.n	8010be8 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bd6:	68db      	ldr	r3, [r3, #12]
 8010bd8:	685b      	ldr	r3, [r3, #4]
 8010bda:	4618      	mov	r0, r3
 8010bdc:	f7fa ff33 	bl	800ba46 <lwip_htonl>
 8010be0:	4603      	mov	r3, r0
 8010be2:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	dc20      	bgt.n	8010c2a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	8b5b      	ldrh	r3, [r3, #26]
 8010bec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010bf0:	b29a      	uxth	r2, r3
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010bf6:	e018      	b.n	8010c2a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c00:	68db      	ldr	r3, [r3, #12]
 8010c02:	685b      	ldr	r3, [r3, #4]
 8010c04:	4618      	mov	r0, r3
 8010c06:	f7fa ff1e 	bl	800ba46 <lwip_htonl>
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	1ae3      	subs	r3, r4, r3
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	dc0b      	bgt.n	8010c2a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	8b5b      	ldrh	r3, [r3, #26]
 8010c16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010c1a:	b29a      	uxth	r2, r3
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010c20:	e003      	b.n	8010c2a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010c22:	6878      	ldr	r0, [r7, #4]
 8010c24:	f002 fbce 	bl	80133c4 <tcp_send_empty_ack>
 8010c28:	e000      	b.n	8010c2c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010c2a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d05b      	beq.n	8010cec <tcp_receive+0x50c>
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010c38:	4b60      	ldr	r3, [pc, #384]	; (8010dbc <tcp_receive+0x5dc>)
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	1ad3      	subs	r3, r2, r3
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	da54      	bge.n	8010cec <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010c42:	4b5f      	ldr	r3, [pc, #380]	; (8010dc0 <tcp_receive+0x5e0>)
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	b29a      	uxth	r2, r3
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c4c:	b29b      	uxth	r3, r3
 8010c4e:	1ad3      	subs	r3, r2, r3
 8010c50:	b29b      	uxth	r3, r3
 8010c52:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010c56:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010c60:	10db      	asrs	r3, r3, #3
 8010c62:	b21b      	sxth	r3, r3
 8010c64:	b29b      	uxth	r3, r3
 8010c66:	1ad3      	subs	r3, r2, r3
 8010c68:	b29b      	uxth	r3, r3
 8010c6a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010c74:	b29a      	uxth	r2, r3
 8010c76:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010c7a:	4413      	add	r3, r2
 8010c7c:	b29b      	uxth	r3, r3
 8010c7e:	b21a      	sxth	r2, r3
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010c84:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	da05      	bge.n	8010c98 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8010c8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010c90:	425b      	negs	r3, r3
 8010c92:	b29b      	uxth	r3, r3
 8010c94:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010c98:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010ca2:	109b      	asrs	r3, r3, #2
 8010ca4:	b21b      	sxth	r3, r3
 8010ca6:	b29b      	uxth	r3, r3
 8010ca8:	1ad3      	subs	r3, r2, r3
 8010caa:	b29b      	uxth	r3, r3
 8010cac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010cb6:	b29a      	uxth	r2, r3
 8010cb8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010cbc:	4413      	add	r3, r2
 8010cbe:	b29b      	uxth	r3, r3
 8010cc0:	b21a      	sxth	r2, r3
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010ccc:	10db      	asrs	r3, r3, #3
 8010cce:	b21b      	sxth	r3, r3
 8010cd0:	b29a      	uxth	r2, r3
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010cd8:	b29b      	uxth	r3, r3
 8010cda:	4413      	add	r3, r2
 8010cdc:	b29b      	uxth	r3, r3
 8010cde:	b21a      	sxth	r2, r3
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	2200      	movs	r2, #0
 8010cea:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010cec:	4b35      	ldr	r3, [pc, #212]	; (8010dc4 <tcp_receive+0x5e4>)
 8010cee:	881b      	ldrh	r3, [r3, #0]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	f000 84e2 	beq.w	80116ba <tcp_receive+0xeda>
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	7d1b      	ldrb	r3, [r3, #20]
 8010cfa:	2b06      	cmp	r3, #6
 8010cfc:	f200 84dd 	bhi.w	80116ba <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d04:	4b30      	ldr	r3, [pc, #192]	; (8010dc8 <tcp_receive+0x5e8>)
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	1ad3      	subs	r3, r2, r3
 8010d0a:	3b01      	subs	r3, #1
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	f2c0 808f 	blt.w	8010e30 <tcp_receive+0x650>
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d16:	4b2b      	ldr	r3, [pc, #172]	; (8010dc4 <tcp_receive+0x5e4>)
 8010d18:	881b      	ldrh	r3, [r3, #0]
 8010d1a:	4619      	mov	r1, r3
 8010d1c:	4b2a      	ldr	r3, [pc, #168]	; (8010dc8 <tcp_receive+0x5e8>)
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	440b      	add	r3, r1
 8010d22:	1ad3      	subs	r3, r2, r3
 8010d24:	3301      	adds	r3, #1
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	f300 8082 	bgt.w	8010e30 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010d2c:	4b27      	ldr	r3, [pc, #156]	; (8010dcc <tcp_receive+0x5ec>)
 8010d2e:	685b      	ldr	r3, [r3, #4]
 8010d30:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d36:	4b24      	ldr	r3, [pc, #144]	; (8010dc8 <tcp_receive+0x5e8>)
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	1ad3      	subs	r3, r2, r3
 8010d3c:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010d3e:	4b23      	ldr	r3, [pc, #140]	; (8010dcc <tcp_receive+0x5ec>)
 8010d40:	685b      	ldr	r3, [r3, #4]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d106      	bne.n	8010d54 <tcp_receive+0x574>
 8010d46:	4b22      	ldr	r3, [pc, #136]	; (8010dd0 <tcp_receive+0x5f0>)
 8010d48:	f240 5294 	movw	r2, #1428	; 0x594
 8010d4c:	4921      	ldr	r1, [pc, #132]	; (8010dd4 <tcp_receive+0x5f4>)
 8010d4e:	4822      	ldr	r0, [pc, #136]	; (8010dd8 <tcp_receive+0x5f8>)
 8010d50:	f006 f956 	bl	8017000 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d56:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010d5a:	4293      	cmp	r3, r2
 8010d5c:	d906      	bls.n	8010d6c <tcp_receive+0x58c>
 8010d5e:	4b1c      	ldr	r3, [pc, #112]	; (8010dd0 <tcp_receive+0x5f0>)
 8010d60:	f240 5295 	movw	r2, #1429	; 0x595
 8010d64:	491d      	ldr	r1, [pc, #116]	; (8010ddc <tcp_receive+0x5fc>)
 8010d66:	481c      	ldr	r0, [pc, #112]	; (8010dd8 <tcp_receive+0x5f8>)
 8010d68:	f006 f94a 	bl	8017000 <iprintf>
      off = (u16_t)off32;
 8010d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d6e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010d72:	4b16      	ldr	r3, [pc, #88]	; (8010dcc <tcp_receive+0x5ec>)
 8010d74:	685b      	ldr	r3, [r3, #4]
 8010d76:	891b      	ldrh	r3, [r3, #8]
 8010d78:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010d7c:	429a      	cmp	r2, r3
 8010d7e:	d906      	bls.n	8010d8e <tcp_receive+0x5ae>
 8010d80:	4b13      	ldr	r3, [pc, #76]	; (8010dd0 <tcp_receive+0x5f0>)
 8010d82:	f240 5297 	movw	r2, #1431	; 0x597
 8010d86:	4916      	ldr	r1, [pc, #88]	; (8010de0 <tcp_receive+0x600>)
 8010d88:	4813      	ldr	r0, [pc, #76]	; (8010dd8 <tcp_receive+0x5f8>)
 8010d8a:	f006 f939 	bl	8017000 <iprintf>
      inseg.len -= off;
 8010d8e:	4b0f      	ldr	r3, [pc, #60]	; (8010dcc <tcp_receive+0x5ec>)
 8010d90:	891a      	ldrh	r2, [r3, #8]
 8010d92:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010d96:	1ad3      	subs	r3, r2, r3
 8010d98:	b29a      	uxth	r2, r3
 8010d9a:	4b0c      	ldr	r3, [pc, #48]	; (8010dcc <tcp_receive+0x5ec>)
 8010d9c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010d9e:	4b0b      	ldr	r3, [pc, #44]	; (8010dcc <tcp_receive+0x5ec>)
 8010da0:	685b      	ldr	r3, [r3, #4]
 8010da2:	891a      	ldrh	r2, [r3, #8]
 8010da4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010da8:	1ad3      	subs	r3, r2, r3
 8010daa:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8010dac:	e02a      	b.n	8010e04 <tcp_receive+0x624>
 8010dae:	bf00      	nop
 8010db0:	0801a9b4 	.word	0x0801a9b4
 8010db4:	0801a9bc 	.word	0x0801a9bc
 8010db8:	2000d184 	.word	0x2000d184
 8010dbc:	2000d180 	.word	0x2000d180
 8010dc0:	2000d144 	.word	0x2000d144
 8010dc4:	2000d186 	.word	0x2000d186
 8010dc8:	2000d17c 	.word	0x2000d17c
 8010dcc:	2000d15c 	.word	0x2000d15c
 8010dd0:	0801a64c 	.word	0x0801a64c
 8010dd4:	0801a9c4 	.word	0x0801a9c4
 8010dd8:	0801a698 	.word	0x0801a698
 8010ddc:	0801a9d4 	.word	0x0801a9d4
 8010de0:	0801a9e4 	.word	0x0801a9e4
        off -= p->len;
 8010de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010de6:	895b      	ldrh	r3, [r3, #10]
 8010de8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010dec:	1ad3      	subs	r3, r2, r3
 8010dee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010df2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010df4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010df6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010df8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010dfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8010e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e06:	895b      	ldrh	r3, [r3, #10]
 8010e08:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010e0c:	429a      	cmp	r2, r3
 8010e0e:	d8e9      	bhi.n	8010de4 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010e10:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010e14:	4619      	mov	r1, r3
 8010e16:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010e18:	f7fc f926 	bl	800d068 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e20:	4a91      	ldr	r2, [pc, #580]	; (8011068 <tcp_receive+0x888>)
 8010e22:	6013      	str	r3, [r2, #0]
 8010e24:	4b91      	ldr	r3, [pc, #580]	; (801106c <tcp_receive+0x88c>)
 8010e26:	68db      	ldr	r3, [r3, #12]
 8010e28:	4a8f      	ldr	r2, [pc, #572]	; (8011068 <tcp_receive+0x888>)
 8010e2a:	6812      	ldr	r2, [r2, #0]
 8010e2c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010e2e:	e00d      	b.n	8010e4c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010e30:	4b8d      	ldr	r3, [pc, #564]	; (8011068 <tcp_receive+0x888>)
 8010e32:	681a      	ldr	r2, [r3, #0]
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e38:	1ad3      	subs	r3, r2, r3
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	da06      	bge.n	8010e4c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	8b5b      	ldrh	r3, [r3, #26]
 8010e42:	f043 0302 	orr.w	r3, r3, #2
 8010e46:	b29a      	uxth	r2, r3
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010e4c:	4b86      	ldr	r3, [pc, #536]	; (8011068 <tcp_receive+0x888>)
 8010e4e:	681a      	ldr	r2, [r3, #0]
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e54:	1ad3      	subs	r3, r2, r3
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	f2c0 842a 	blt.w	80116b0 <tcp_receive+0xed0>
 8010e5c:	4b82      	ldr	r3, [pc, #520]	; (8011068 <tcp_receive+0x888>)
 8010e5e:	681a      	ldr	r2, [r3, #0]
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e64:	6879      	ldr	r1, [r7, #4]
 8010e66:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010e68:	440b      	add	r3, r1
 8010e6a:	1ad3      	subs	r3, r2, r3
 8010e6c:	3301      	adds	r3, #1
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	f300 841e 	bgt.w	80116b0 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010e78:	4b7b      	ldr	r3, [pc, #492]	; (8011068 <tcp_receive+0x888>)
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	429a      	cmp	r2, r3
 8010e7e:	f040 829a 	bne.w	80113b6 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010e82:	4b7a      	ldr	r3, [pc, #488]	; (801106c <tcp_receive+0x88c>)
 8010e84:	891c      	ldrh	r4, [r3, #8]
 8010e86:	4b79      	ldr	r3, [pc, #484]	; (801106c <tcp_receive+0x88c>)
 8010e88:	68db      	ldr	r3, [r3, #12]
 8010e8a:	899b      	ldrh	r3, [r3, #12]
 8010e8c:	b29b      	uxth	r3, r3
 8010e8e:	4618      	mov	r0, r3
 8010e90:	f7fa fdc4 	bl	800ba1c <lwip_htons>
 8010e94:	4603      	mov	r3, r0
 8010e96:	b2db      	uxtb	r3, r3
 8010e98:	f003 0303 	and.w	r3, r3, #3
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d001      	beq.n	8010ea4 <tcp_receive+0x6c4>
 8010ea0:	2301      	movs	r3, #1
 8010ea2:	e000      	b.n	8010ea6 <tcp_receive+0x6c6>
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	4423      	add	r3, r4
 8010ea8:	b29a      	uxth	r2, r3
 8010eaa:	4b71      	ldr	r3, [pc, #452]	; (8011070 <tcp_receive+0x890>)
 8010eac:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010eb2:	4b6f      	ldr	r3, [pc, #444]	; (8011070 <tcp_receive+0x890>)
 8010eb4:	881b      	ldrh	r3, [r3, #0]
 8010eb6:	429a      	cmp	r2, r3
 8010eb8:	d275      	bcs.n	8010fa6 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010eba:	4b6c      	ldr	r3, [pc, #432]	; (801106c <tcp_receive+0x88c>)
 8010ebc:	68db      	ldr	r3, [r3, #12]
 8010ebe:	899b      	ldrh	r3, [r3, #12]
 8010ec0:	b29b      	uxth	r3, r3
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	f7fa fdaa 	bl	800ba1c <lwip_htons>
 8010ec8:	4603      	mov	r3, r0
 8010eca:	b2db      	uxtb	r3, r3
 8010ecc:	f003 0301 	and.w	r3, r3, #1
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d01f      	beq.n	8010f14 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010ed4:	4b65      	ldr	r3, [pc, #404]	; (801106c <tcp_receive+0x88c>)
 8010ed6:	68db      	ldr	r3, [r3, #12]
 8010ed8:	899b      	ldrh	r3, [r3, #12]
 8010eda:	b29b      	uxth	r3, r3
 8010edc:	b21b      	sxth	r3, r3
 8010ede:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010ee2:	b21c      	sxth	r4, r3
 8010ee4:	4b61      	ldr	r3, [pc, #388]	; (801106c <tcp_receive+0x88c>)
 8010ee6:	68db      	ldr	r3, [r3, #12]
 8010ee8:	899b      	ldrh	r3, [r3, #12]
 8010eea:	b29b      	uxth	r3, r3
 8010eec:	4618      	mov	r0, r3
 8010eee:	f7fa fd95 	bl	800ba1c <lwip_htons>
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	b2db      	uxtb	r3, r3
 8010ef6:	b29b      	uxth	r3, r3
 8010ef8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010efc:	b29b      	uxth	r3, r3
 8010efe:	4618      	mov	r0, r3
 8010f00:	f7fa fd8c 	bl	800ba1c <lwip_htons>
 8010f04:	4603      	mov	r3, r0
 8010f06:	b21b      	sxth	r3, r3
 8010f08:	4323      	orrs	r3, r4
 8010f0a:	b21a      	sxth	r2, r3
 8010f0c:	4b57      	ldr	r3, [pc, #348]	; (801106c <tcp_receive+0x88c>)
 8010f0e:	68db      	ldr	r3, [r3, #12]
 8010f10:	b292      	uxth	r2, r2
 8010f12:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010f18:	4b54      	ldr	r3, [pc, #336]	; (801106c <tcp_receive+0x88c>)
 8010f1a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010f1c:	4b53      	ldr	r3, [pc, #332]	; (801106c <tcp_receive+0x88c>)
 8010f1e:	68db      	ldr	r3, [r3, #12]
 8010f20:	899b      	ldrh	r3, [r3, #12]
 8010f22:	b29b      	uxth	r3, r3
 8010f24:	4618      	mov	r0, r3
 8010f26:	f7fa fd79 	bl	800ba1c <lwip_htons>
 8010f2a:	4603      	mov	r3, r0
 8010f2c:	b2db      	uxtb	r3, r3
 8010f2e:	f003 0302 	and.w	r3, r3, #2
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d005      	beq.n	8010f42 <tcp_receive+0x762>
            inseg.len -= 1;
 8010f36:	4b4d      	ldr	r3, [pc, #308]	; (801106c <tcp_receive+0x88c>)
 8010f38:	891b      	ldrh	r3, [r3, #8]
 8010f3a:	3b01      	subs	r3, #1
 8010f3c:	b29a      	uxth	r2, r3
 8010f3e:	4b4b      	ldr	r3, [pc, #300]	; (801106c <tcp_receive+0x88c>)
 8010f40:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010f42:	4b4a      	ldr	r3, [pc, #296]	; (801106c <tcp_receive+0x88c>)
 8010f44:	685b      	ldr	r3, [r3, #4]
 8010f46:	4a49      	ldr	r2, [pc, #292]	; (801106c <tcp_receive+0x88c>)
 8010f48:	8912      	ldrh	r2, [r2, #8]
 8010f4a:	4611      	mov	r1, r2
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	f7fb ff8b 	bl	800ce68 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010f52:	4b46      	ldr	r3, [pc, #280]	; (801106c <tcp_receive+0x88c>)
 8010f54:	891c      	ldrh	r4, [r3, #8]
 8010f56:	4b45      	ldr	r3, [pc, #276]	; (801106c <tcp_receive+0x88c>)
 8010f58:	68db      	ldr	r3, [r3, #12]
 8010f5a:	899b      	ldrh	r3, [r3, #12]
 8010f5c:	b29b      	uxth	r3, r3
 8010f5e:	4618      	mov	r0, r3
 8010f60:	f7fa fd5c 	bl	800ba1c <lwip_htons>
 8010f64:	4603      	mov	r3, r0
 8010f66:	b2db      	uxtb	r3, r3
 8010f68:	f003 0303 	and.w	r3, r3, #3
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d001      	beq.n	8010f74 <tcp_receive+0x794>
 8010f70:	2301      	movs	r3, #1
 8010f72:	e000      	b.n	8010f76 <tcp_receive+0x796>
 8010f74:	2300      	movs	r3, #0
 8010f76:	4423      	add	r3, r4
 8010f78:	b29a      	uxth	r2, r3
 8010f7a:	4b3d      	ldr	r3, [pc, #244]	; (8011070 <tcp_receive+0x890>)
 8010f7c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010f7e:	4b3c      	ldr	r3, [pc, #240]	; (8011070 <tcp_receive+0x890>)
 8010f80:	881b      	ldrh	r3, [r3, #0]
 8010f82:	461a      	mov	r2, r3
 8010f84:	4b38      	ldr	r3, [pc, #224]	; (8011068 <tcp_receive+0x888>)
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	441a      	add	r2, r3
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f8e:	6879      	ldr	r1, [r7, #4]
 8010f90:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010f92:	440b      	add	r3, r1
 8010f94:	429a      	cmp	r2, r3
 8010f96:	d006      	beq.n	8010fa6 <tcp_receive+0x7c6>
 8010f98:	4b36      	ldr	r3, [pc, #216]	; (8011074 <tcp_receive+0x894>)
 8010f9a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8010f9e:	4936      	ldr	r1, [pc, #216]	; (8011078 <tcp_receive+0x898>)
 8010fa0:	4836      	ldr	r0, [pc, #216]	; (801107c <tcp_receive+0x89c>)
 8010fa2:	f006 f82d 	bl	8017000 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	f000 80e7 	beq.w	801117e <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010fb0:	4b2e      	ldr	r3, [pc, #184]	; (801106c <tcp_receive+0x88c>)
 8010fb2:	68db      	ldr	r3, [r3, #12]
 8010fb4:	899b      	ldrh	r3, [r3, #12]
 8010fb6:	b29b      	uxth	r3, r3
 8010fb8:	4618      	mov	r0, r3
 8010fba:	f7fa fd2f 	bl	800ba1c <lwip_htons>
 8010fbe:	4603      	mov	r3, r0
 8010fc0:	b2db      	uxtb	r3, r3
 8010fc2:	f003 0301 	and.w	r3, r3, #1
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d010      	beq.n	8010fec <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010fca:	e00a      	b.n	8010fe2 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010fd0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010fd6:	681a      	ldr	r2, [r3, #0]
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8010fdc:	68f8      	ldr	r0, [r7, #12]
 8010fde:	f7fd fcc4 	bl	800e96a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d1f0      	bne.n	8010fcc <tcp_receive+0x7ec>
 8010fea:	e0c8      	b.n	801117e <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010ff2:	e052      	b.n	801109a <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ff6:	68db      	ldr	r3, [r3, #12]
 8010ff8:	899b      	ldrh	r3, [r3, #12]
 8010ffa:	b29b      	uxth	r3, r3
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	f7fa fd0d 	bl	800ba1c <lwip_htons>
 8011002:	4603      	mov	r3, r0
 8011004:	b2db      	uxtb	r3, r3
 8011006:	f003 0301 	and.w	r3, r3, #1
 801100a:	2b00      	cmp	r3, #0
 801100c:	d03d      	beq.n	801108a <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801100e:	4b17      	ldr	r3, [pc, #92]	; (801106c <tcp_receive+0x88c>)
 8011010:	68db      	ldr	r3, [r3, #12]
 8011012:	899b      	ldrh	r3, [r3, #12]
 8011014:	b29b      	uxth	r3, r3
 8011016:	4618      	mov	r0, r3
 8011018:	f7fa fd00 	bl	800ba1c <lwip_htons>
 801101c:	4603      	mov	r3, r0
 801101e:	b2db      	uxtb	r3, r3
 8011020:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011024:	2b00      	cmp	r3, #0
 8011026:	d130      	bne.n	801108a <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011028:	4b10      	ldr	r3, [pc, #64]	; (801106c <tcp_receive+0x88c>)
 801102a:	68db      	ldr	r3, [r3, #12]
 801102c:	899b      	ldrh	r3, [r3, #12]
 801102e:	b29c      	uxth	r4, r3
 8011030:	2001      	movs	r0, #1
 8011032:	f7fa fcf3 	bl	800ba1c <lwip_htons>
 8011036:	4603      	mov	r3, r0
 8011038:	461a      	mov	r2, r3
 801103a:	4b0c      	ldr	r3, [pc, #48]	; (801106c <tcp_receive+0x88c>)
 801103c:	68db      	ldr	r3, [r3, #12]
 801103e:	4322      	orrs	r2, r4
 8011040:	b292      	uxth	r2, r2
 8011042:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011044:	4b09      	ldr	r3, [pc, #36]	; (801106c <tcp_receive+0x88c>)
 8011046:	891c      	ldrh	r4, [r3, #8]
 8011048:	4b08      	ldr	r3, [pc, #32]	; (801106c <tcp_receive+0x88c>)
 801104a:	68db      	ldr	r3, [r3, #12]
 801104c:	899b      	ldrh	r3, [r3, #12]
 801104e:	b29b      	uxth	r3, r3
 8011050:	4618      	mov	r0, r3
 8011052:	f7fa fce3 	bl	800ba1c <lwip_htons>
 8011056:	4603      	mov	r3, r0
 8011058:	b2db      	uxtb	r3, r3
 801105a:	f003 0303 	and.w	r3, r3, #3
 801105e:	2b00      	cmp	r3, #0
 8011060:	d00e      	beq.n	8011080 <tcp_receive+0x8a0>
 8011062:	2301      	movs	r3, #1
 8011064:	e00d      	b.n	8011082 <tcp_receive+0x8a2>
 8011066:	bf00      	nop
 8011068:	2000d17c 	.word	0x2000d17c
 801106c:	2000d15c 	.word	0x2000d15c
 8011070:	2000d186 	.word	0x2000d186
 8011074:	0801a64c 	.word	0x0801a64c
 8011078:	0801a9f4 	.word	0x0801a9f4
 801107c:	0801a698 	.word	0x0801a698
 8011080:	2300      	movs	r3, #0
 8011082:	4423      	add	r3, r4
 8011084:	b29a      	uxth	r2, r3
 8011086:	4b98      	ldr	r3, [pc, #608]	; (80112e8 <tcp_receive+0xb08>)
 8011088:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801108a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801108c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801108e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011094:	6938      	ldr	r0, [r7, #16]
 8011096:	f7fd fc68 	bl	800e96a <tcp_seg_free>
            while (next &&
 801109a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801109c:	2b00      	cmp	r3, #0
 801109e:	d00e      	beq.n	80110be <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80110a0:	4b91      	ldr	r3, [pc, #580]	; (80112e8 <tcp_receive+0xb08>)
 80110a2:	881b      	ldrh	r3, [r3, #0]
 80110a4:	461a      	mov	r2, r3
 80110a6:	4b91      	ldr	r3, [pc, #580]	; (80112ec <tcp_receive+0xb0c>)
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	441a      	add	r2, r3
 80110ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110ae:	68db      	ldr	r3, [r3, #12]
 80110b0:	685b      	ldr	r3, [r3, #4]
 80110b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80110b4:	8909      	ldrh	r1, [r1, #8]
 80110b6:	440b      	add	r3, r1
 80110b8:	1ad3      	subs	r3, r2, r3
            while (next &&
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	da9a      	bge.n	8010ff4 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80110be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d059      	beq.n	8011178 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80110c4:	4b88      	ldr	r3, [pc, #544]	; (80112e8 <tcp_receive+0xb08>)
 80110c6:	881b      	ldrh	r3, [r3, #0]
 80110c8:	461a      	mov	r2, r3
 80110ca:	4b88      	ldr	r3, [pc, #544]	; (80112ec <tcp_receive+0xb0c>)
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	441a      	add	r2, r3
 80110d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110d2:	68db      	ldr	r3, [r3, #12]
 80110d4:	685b      	ldr	r3, [r3, #4]
 80110d6:	1ad3      	subs	r3, r2, r3
            if (next &&
 80110d8:	2b00      	cmp	r3, #0
 80110da:	dd4d      	ble.n	8011178 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80110dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110de:	68db      	ldr	r3, [r3, #12]
 80110e0:	685b      	ldr	r3, [r3, #4]
 80110e2:	b29a      	uxth	r2, r3
 80110e4:	4b81      	ldr	r3, [pc, #516]	; (80112ec <tcp_receive+0xb0c>)
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	b29b      	uxth	r3, r3
 80110ea:	1ad3      	subs	r3, r2, r3
 80110ec:	b29a      	uxth	r2, r3
 80110ee:	4b80      	ldr	r3, [pc, #512]	; (80112f0 <tcp_receive+0xb10>)
 80110f0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80110f2:	4b7f      	ldr	r3, [pc, #508]	; (80112f0 <tcp_receive+0xb10>)
 80110f4:	68db      	ldr	r3, [r3, #12]
 80110f6:	899b      	ldrh	r3, [r3, #12]
 80110f8:	b29b      	uxth	r3, r3
 80110fa:	4618      	mov	r0, r3
 80110fc:	f7fa fc8e 	bl	800ba1c <lwip_htons>
 8011100:	4603      	mov	r3, r0
 8011102:	b2db      	uxtb	r3, r3
 8011104:	f003 0302 	and.w	r3, r3, #2
 8011108:	2b00      	cmp	r3, #0
 801110a:	d005      	beq.n	8011118 <tcp_receive+0x938>
                inseg.len -= 1;
 801110c:	4b78      	ldr	r3, [pc, #480]	; (80112f0 <tcp_receive+0xb10>)
 801110e:	891b      	ldrh	r3, [r3, #8]
 8011110:	3b01      	subs	r3, #1
 8011112:	b29a      	uxth	r2, r3
 8011114:	4b76      	ldr	r3, [pc, #472]	; (80112f0 <tcp_receive+0xb10>)
 8011116:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011118:	4b75      	ldr	r3, [pc, #468]	; (80112f0 <tcp_receive+0xb10>)
 801111a:	685b      	ldr	r3, [r3, #4]
 801111c:	4a74      	ldr	r2, [pc, #464]	; (80112f0 <tcp_receive+0xb10>)
 801111e:	8912      	ldrh	r2, [r2, #8]
 8011120:	4611      	mov	r1, r2
 8011122:	4618      	mov	r0, r3
 8011124:	f7fb fea0 	bl	800ce68 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011128:	4b71      	ldr	r3, [pc, #452]	; (80112f0 <tcp_receive+0xb10>)
 801112a:	891c      	ldrh	r4, [r3, #8]
 801112c:	4b70      	ldr	r3, [pc, #448]	; (80112f0 <tcp_receive+0xb10>)
 801112e:	68db      	ldr	r3, [r3, #12]
 8011130:	899b      	ldrh	r3, [r3, #12]
 8011132:	b29b      	uxth	r3, r3
 8011134:	4618      	mov	r0, r3
 8011136:	f7fa fc71 	bl	800ba1c <lwip_htons>
 801113a:	4603      	mov	r3, r0
 801113c:	b2db      	uxtb	r3, r3
 801113e:	f003 0303 	and.w	r3, r3, #3
 8011142:	2b00      	cmp	r3, #0
 8011144:	d001      	beq.n	801114a <tcp_receive+0x96a>
 8011146:	2301      	movs	r3, #1
 8011148:	e000      	b.n	801114c <tcp_receive+0x96c>
 801114a:	2300      	movs	r3, #0
 801114c:	4423      	add	r3, r4
 801114e:	b29a      	uxth	r2, r3
 8011150:	4b65      	ldr	r3, [pc, #404]	; (80112e8 <tcp_receive+0xb08>)
 8011152:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011154:	4b64      	ldr	r3, [pc, #400]	; (80112e8 <tcp_receive+0xb08>)
 8011156:	881b      	ldrh	r3, [r3, #0]
 8011158:	461a      	mov	r2, r3
 801115a:	4b64      	ldr	r3, [pc, #400]	; (80112ec <tcp_receive+0xb0c>)
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	441a      	add	r2, r3
 8011160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011162:	68db      	ldr	r3, [r3, #12]
 8011164:	685b      	ldr	r3, [r3, #4]
 8011166:	429a      	cmp	r2, r3
 8011168:	d006      	beq.n	8011178 <tcp_receive+0x998>
 801116a:	4b62      	ldr	r3, [pc, #392]	; (80112f4 <tcp_receive+0xb14>)
 801116c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8011170:	4961      	ldr	r1, [pc, #388]	; (80112f8 <tcp_receive+0xb18>)
 8011172:	4862      	ldr	r0, [pc, #392]	; (80112fc <tcp_receive+0xb1c>)
 8011174:	f005 ff44 	bl	8017000 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801117c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801117e:	4b5a      	ldr	r3, [pc, #360]	; (80112e8 <tcp_receive+0xb08>)
 8011180:	881b      	ldrh	r3, [r3, #0]
 8011182:	461a      	mov	r2, r3
 8011184:	4b59      	ldr	r3, [pc, #356]	; (80112ec <tcp_receive+0xb0c>)
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	441a      	add	r2, r3
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011192:	4b55      	ldr	r3, [pc, #340]	; (80112e8 <tcp_receive+0xb08>)
 8011194:	881b      	ldrh	r3, [r3, #0]
 8011196:	429a      	cmp	r2, r3
 8011198:	d206      	bcs.n	80111a8 <tcp_receive+0x9c8>
 801119a:	4b56      	ldr	r3, [pc, #344]	; (80112f4 <tcp_receive+0xb14>)
 801119c:	f240 6207 	movw	r2, #1543	; 0x607
 80111a0:	4957      	ldr	r1, [pc, #348]	; (8011300 <tcp_receive+0xb20>)
 80111a2:	4856      	ldr	r0, [pc, #344]	; (80112fc <tcp_receive+0xb1c>)
 80111a4:	f005 ff2c 	bl	8017000 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80111ac:	4b4e      	ldr	r3, [pc, #312]	; (80112e8 <tcp_receive+0xb08>)
 80111ae:	881b      	ldrh	r3, [r3, #0]
 80111b0:	1ad3      	subs	r3, r2, r3
 80111b2:	b29a      	uxth	r2, r3
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80111b8:	6878      	ldr	r0, [r7, #4]
 80111ba:	f7fc feb1 	bl	800df20 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80111be:	4b4c      	ldr	r3, [pc, #304]	; (80112f0 <tcp_receive+0xb10>)
 80111c0:	685b      	ldr	r3, [r3, #4]
 80111c2:	891b      	ldrh	r3, [r3, #8]
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d006      	beq.n	80111d6 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 80111c8:	4b49      	ldr	r3, [pc, #292]	; (80112f0 <tcp_receive+0xb10>)
 80111ca:	685b      	ldr	r3, [r3, #4]
 80111cc:	4a4d      	ldr	r2, [pc, #308]	; (8011304 <tcp_receive+0xb24>)
 80111ce:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80111d0:	4b47      	ldr	r3, [pc, #284]	; (80112f0 <tcp_receive+0xb10>)
 80111d2:	2200      	movs	r2, #0
 80111d4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80111d6:	4b46      	ldr	r3, [pc, #280]	; (80112f0 <tcp_receive+0xb10>)
 80111d8:	68db      	ldr	r3, [r3, #12]
 80111da:	899b      	ldrh	r3, [r3, #12]
 80111dc:	b29b      	uxth	r3, r3
 80111de:	4618      	mov	r0, r3
 80111e0:	f7fa fc1c 	bl	800ba1c <lwip_htons>
 80111e4:	4603      	mov	r3, r0
 80111e6:	b2db      	uxtb	r3, r3
 80111e8:	f003 0301 	and.w	r3, r3, #1
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	f000 80b8 	beq.w	8011362 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80111f2:	4b45      	ldr	r3, [pc, #276]	; (8011308 <tcp_receive+0xb28>)
 80111f4:	781b      	ldrb	r3, [r3, #0]
 80111f6:	f043 0320 	orr.w	r3, r3, #32
 80111fa:	b2da      	uxtb	r2, r3
 80111fc:	4b42      	ldr	r3, [pc, #264]	; (8011308 <tcp_receive+0xb28>)
 80111fe:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011200:	e0af      	b.n	8011362 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011206:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801120c:	68db      	ldr	r3, [r3, #12]
 801120e:	685b      	ldr	r3, [r3, #4]
 8011210:	4a36      	ldr	r2, [pc, #216]	; (80112ec <tcp_receive+0xb0c>)
 8011212:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011214:	68bb      	ldr	r3, [r7, #8]
 8011216:	891b      	ldrh	r3, [r3, #8]
 8011218:	461c      	mov	r4, r3
 801121a:	68bb      	ldr	r3, [r7, #8]
 801121c:	68db      	ldr	r3, [r3, #12]
 801121e:	899b      	ldrh	r3, [r3, #12]
 8011220:	b29b      	uxth	r3, r3
 8011222:	4618      	mov	r0, r3
 8011224:	f7fa fbfa 	bl	800ba1c <lwip_htons>
 8011228:	4603      	mov	r3, r0
 801122a:	b2db      	uxtb	r3, r3
 801122c:	f003 0303 	and.w	r3, r3, #3
 8011230:	2b00      	cmp	r3, #0
 8011232:	d001      	beq.n	8011238 <tcp_receive+0xa58>
 8011234:	2301      	movs	r3, #1
 8011236:	e000      	b.n	801123a <tcp_receive+0xa5a>
 8011238:	2300      	movs	r3, #0
 801123a:	191a      	adds	r2, r3, r4
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011240:	441a      	add	r2, r3
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801124a:	461c      	mov	r4, r3
 801124c:	68bb      	ldr	r3, [r7, #8]
 801124e:	891b      	ldrh	r3, [r3, #8]
 8011250:	461d      	mov	r5, r3
 8011252:	68bb      	ldr	r3, [r7, #8]
 8011254:	68db      	ldr	r3, [r3, #12]
 8011256:	899b      	ldrh	r3, [r3, #12]
 8011258:	b29b      	uxth	r3, r3
 801125a:	4618      	mov	r0, r3
 801125c:	f7fa fbde 	bl	800ba1c <lwip_htons>
 8011260:	4603      	mov	r3, r0
 8011262:	b2db      	uxtb	r3, r3
 8011264:	f003 0303 	and.w	r3, r3, #3
 8011268:	2b00      	cmp	r3, #0
 801126a:	d001      	beq.n	8011270 <tcp_receive+0xa90>
 801126c:	2301      	movs	r3, #1
 801126e:	e000      	b.n	8011272 <tcp_receive+0xa92>
 8011270:	2300      	movs	r3, #0
 8011272:	442b      	add	r3, r5
 8011274:	429c      	cmp	r4, r3
 8011276:	d206      	bcs.n	8011286 <tcp_receive+0xaa6>
 8011278:	4b1e      	ldr	r3, [pc, #120]	; (80112f4 <tcp_receive+0xb14>)
 801127a:	f240 622b 	movw	r2, #1579	; 0x62b
 801127e:	4923      	ldr	r1, [pc, #140]	; (801130c <tcp_receive+0xb2c>)
 8011280:	481e      	ldr	r0, [pc, #120]	; (80112fc <tcp_receive+0xb1c>)
 8011282:	f005 febd 	bl	8017000 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011286:	68bb      	ldr	r3, [r7, #8]
 8011288:	891b      	ldrh	r3, [r3, #8]
 801128a:	461c      	mov	r4, r3
 801128c:	68bb      	ldr	r3, [r7, #8]
 801128e:	68db      	ldr	r3, [r3, #12]
 8011290:	899b      	ldrh	r3, [r3, #12]
 8011292:	b29b      	uxth	r3, r3
 8011294:	4618      	mov	r0, r3
 8011296:	f7fa fbc1 	bl	800ba1c <lwip_htons>
 801129a:	4603      	mov	r3, r0
 801129c:	b2db      	uxtb	r3, r3
 801129e:	f003 0303 	and.w	r3, r3, #3
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d001      	beq.n	80112aa <tcp_receive+0xaca>
 80112a6:	2301      	movs	r3, #1
 80112a8:	e000      	b.n	80112ac <tcp_receive+0xacc>
 80112aa:	2300      	movs	r3, #0
 80112ac:	1919      	adds	r1, r3, r4
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80112b2:	b28b      	uxth	r3, r1
 80112b4:	1ad3      	subs	r3, r2, r3
 80112b6:	b29a      	uxth	r2, r3
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80112bc:	6878      	ldr	r0, [r7, #4]
 80112be:	f7fc fe2f 	bl	800df20 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80112c2:	68bb      	ldr	r3, [r7, #8]
 80112c4:	685b      	ldr	r3, [r3, #4]
 80112c6:	891b      	ldrh	r3, [r3, #8]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d028      	beq.n	801131e <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80112cc:	4b0d      	ldr	r3, [pc, #52]	; (8011304 <tcp_receive+0xb24>)
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d01d      	beq.n	8011310 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80112d4:	4b0b      	ldr	r3, [pc, #44]	; (8011304 <tcp_receive+0xb24>)
 80112d6:	681a      	ldr	r2, [r3, #0]
 80112d8:	68bb      	ldr	r3, [r7, #8]
 80112da:	685b      	ldr	r3, [r3, #4]
 80112dc:	4619      	mov	r1, r3
 80112de:	4610      	mov	r0, r2
 80112e0:	f7fc f848 	bl	800d374 <pbuf_cat>
 80112e4:	e018      	b.n	8011318 <tcp_receive+0xb38>
 80112e6:	bf00      	nop
 80112e8:	2000d186 	.word	0x2000d186
 80112ec:	2000d17c 	.word	0x2000d17c
 80112f0:	2000d15c 	.word	0x2000d15c
 80112f4:	0801a64c 	.word	0x0801a64c
 80112f8:	0801aa2c 	.word	0x0801aa2c
 80112fc:	0801a698 	.word	0x0801a698
 8011300:	0801aa68 	.word	0x0801aa68
 8011304:	2000d18c 	.word	0x2000d18c
 8011308:	2000d189 	.word	0x2000d189
 801130c:	0801aa88 	.word	0x0801aa88
            } else {
              recv_data = cseg->p;
 8011310:	68bb      	ldr	r3, [r7, #8]
 8011312:	685b      	ldr	r3, [r3, #4]
 8011314:	4a70      	ldr	r2, [pc, #448]	; (80114d8 <tcp_receive+0xcf8>)
 8011316:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011318:	68bb      	ldr	r3, [r7, #8]
 801131a:	2200      	movs	r2, #0
 801131c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801131e:	68bb      	ldr	r3, [r7, #8]
 8011320:	68db      	ldr	r3, [r3, #12]
 8011322:	899b      	ldrh	r3, [r3, #12]
 8011324:	b29b      	uxth	r3, r3
 8011326:	4618      	mov	r0, r3
 8011328:	f7fa fb78 	bl	800ba1c <lwip_htons>
 801132c:	4603      	mov	r3, r0
 801132e:	b2db      	uxtb	r3, r3
 8011330:	f003 0301 	and.w	r3, r3, #1
 8011334:	2b00      	cmp	r3, #0
 8011336:	d00d      	beq.n	8011354 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011338:	4b68      	ldr	r3, [pc, #416]	; (80114dc <tcp_receive+0xcfc>)
 801133a:	781b      	ldrb	r3, [r3, #0]
 801133c:	f043 0320 	orr.w	r3, r3, #32
 8011340:	b2da      	uxtb	r2, r3
 8011342:	4b66      	ldr	r3, [pc, #408]	; (80114dc <tcp_receive+0xcfc>)
 8011344:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	7d1b      	ldrb	r3, [r3, #20]
 801134a:	2b04      	cmp	r3, #4
 801134c:	d102      	bne.n	8011354 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	2207      	movs	r2, #7
 8011352:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011354:	68bb      	ldr	r3, [r7, #8]
 8011356:	681a      	ldr	r2, [r3, #0]
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801135c:	68b8      	ldr	r0, [r7, #8]
 801135e:	f7fd fb04 	bl	800e96a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011366:	2b00      	cmp	r3, #0
 8011368:	d008      	beq.n	801137c <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801136e:	68db      	ldr	r3, [r3, #12]
 8011370:	685a      	ldr	r2, [r3, #4]
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8011376:	429a      	cmp	r2, r3
 8011378:	f43f af43 	beq.w	8011202 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	8b5b      	ldrh	r3, [r3, #26]
 8011380:	f003 0301 	and.w	r3, r3, #1
 8011384:	2b00      	cmp	r3, #0
 8011386:	d00e      	beq.n	80113a6 <tcp_receive+0xbc6>
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	8b5b      	ldrh	r3, [r3, #26]
 801138c:	f023 0301 	bic.w	r3, r3, #1
 8011390:	b29a      	uxth	r2, r3
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	835a      	strh	r2, [r3, #26]
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	8b5b      	ldrh	r3, [r3, #26]
 801139a:	f043 0302 	orr.w	r3, r3, #2
 801139e:	b29a      	uxth	r2, r3
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80113a4:	e188      	b.n	80116b8 <tcp_receive+0xed8>
        tcp_ack(pcb);
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	8b5b      	ldrh	r3, [r3, #26]
 80113aa:	f043 0301 	orr.w	r3, r3, #1
 80113ae:	b29a      	uxth	r2, r3
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80113b4:	e180      	b.n	80116b8 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d106      	bne.n	80113cc <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80113be:	4848      	ldr	r0, [pc, #288]	; (80114e0 <tcp_receive+0xd00>)
 80113c0:	f7fd faec 	bl	800e99c <tcp_seg_copy>
 80113c4:	4602      	mov	r2, r0
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	675a      	str	r2, [r3, #116]	; 0x74
 80113ca:	e16d      	b.n	80116a8 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80113cc:	2300      	movs	r3, #0
 80113ce:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80113d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80113d6:	e157      	b.n	8011688 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 80113d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113da:	68db      	ldr	r3, [r3, #12]
 80113dc:	685a      	ldr	r2, [r3, #4]
 80113de:	4b41      	ldr	r3, [pc, #260]	; (80114e4 <tcp_receive+0xd04>)
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	429a      	cmp	r2, r3
 80113e4:	d11d      	bne.n	8011422 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80113e6:	4b3e      	ldr	r3, [pc, #248]	; (80114e0 <tcp_receive+0xd00>)
 80113e8:	891a      	ldrh	r2, [r3, #8]
 80113ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113ec:	891b      	ldrh	r3, [r3, #8]
 80113ee:	429a      	cmp	r2, r3
 80113f0:	f240 814f 	bls.w	8011692 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80113f4:	483a      	ldr	r0, [pc, #232]	; (80114e0 <tcp_receive+0xd00>)
 80113f6:	f7fd fad1 	bl	800e99c <tcp_seg_copy>
 80113fa:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80113fc:	697b      	ldr	r3, [r7, #20]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	f000 8149 	beq.w	8011696 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8011404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011406:	2b00      	cmp	r3, #0
 8011408:	d003      	beq.n	8011412 <tcp_receive+0xc32>
                    prev->next = cseg;
 801140a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801140c:	697a      	ldr	r2, [r7, #20]
 801140e:	601a      	str	r2, [r3, #0]
 8011410:	e002      	b.n	8011418 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	697a      	ldr	r2, [r7, #20]
 8011416:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011418:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801141a:	6978      	ldr	r0, [r7, #20]
 801141c:	f7ff f8dc 	bl	80105d8 <tcp_oos_insert_segment>
                }
                break;
 8011420:	e139      	b.n	8011696 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011424:	2b00      	cmp	r3, #0
 8011426:	d117      	bne.n	8011458 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011428:	4b2e      	ldr	r3, [pc, #184]	; (80114e4 <tcp_receive+0xd04>)
 801142a:	681a      	ldr	r2, [r3, #0]
 801142c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801142e:	68db      	ldr	r3, [r3, #12]
 8011430:	685b      	ldr	r3, [r3, #4]
 8011432:	1ad3      	subs	r3, r2, r3
 8011434:	2b00      	cmp	r3, #0
 8011436:	da57      	bge.n	80114e8 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011438:	4829      	ldr	r0, [pc, #164]	; (80114e0 <tcp_receive+0xd00>)
 801143a:	f7fd faaf 	bl	800e99c <tcp_seg_copy>
 801143e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011440:	69bb      	ldr	r3, [r7, #24]
 8011442:	2b00      	cmp	r3, #0
 8011444:	f000 8129 	beq.w	801169a <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	69ba      	ldr	r2, [r7, #24]
 801144c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801144e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011450:	69b8      	ldr	r0, [r7, #24]
 8011452:	f7ff f8c1 	bl	80105d8 <tcp_oos_insert_segment>
                  }
                  break;
 8011456:	e120      	b.n	801169a <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011458:	4b22      	ldr	r3, [pc, #136]	; (80114e4 <tcp_receive+0xd04>)
 801145a:	681a      	ldr	r2, [r3, #0]
 801145c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801145e:	68db      	ldr	r3, [r3, #12]
 8011460:	685b      	ldr	r3, [r3, #4]
 8011462:	1ad3      	subs	r3, r2, r3
 8011464:	3b01      	subs	r3, #1
 8011466:	2b00      	cmp	r3, #0
 8011468:	db3e      	blt.n	80114e8 <tcp_receive+0xd08>
 801146a:	4b1e      	ldr	r3, [pc, #120]	; (80114e4 <tcp_receive+0xd04>)
 801146c:	681a      	ldr	r2, [r3, #0]
 801146e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011470:	68db      	ldr	r3, [r3, #12]
 8011472:	685b      	ldr	r3, [r3, #4]
 8011474:	1ad3      	subs	r3, r2, r3
 8011476:	3301      	adds	r3, #1
 8011478:	2b00      	cmp	r3, #0
 801147a:	dc35      	bgt.n	80114e8 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801147c:	4818      	ldr	r0, [pc, #96]	; (80114e0 <tcp_receive+0xd00>)
 801147e:	f7fd fa8d 	bl	800e99c <tcp_seg_copy>
 8011482:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011484:	69fb      	ldr	r3, [r7, #28]
 8011486:	2b00      	cmp	r3, #0
 8011488:	f000 8109 	beq.w	801169e <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801148c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801148e:	68db      	ldr	r3, [r3, #12]
 8011490:	685b      	ldr	r3, [r3, #4]
 8011492:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011494:	8912      	ldrh	r2, [r2, #8]
 8011496:	441a      	add	r2, r3
 8011498:	4b12      	ldr	r3, [pc, #72]	; (80114e4 <tcp_receive+0xd04>)
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	1ad3      	subs	r3, r2, r3
 801149e:	2b00      	cmp	r3, #0
 80114a0:	dd12      	ble.n	80114c8 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80114a2:	4b10      	ldr	r3, [pc, #64]	; (80114e4 <tcp_receive+0xd04>)
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	b29a      	uxth	r2, r3
 80114a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114aa:	68db      	ldr	r3, [r3, #12]
 80114ac:	685b      	ldr	r3, [r3, #4]
 80114ae:	b29b      	uxth	r3, r3
 80114b0:	1ad3      	subs	r3, r2, r3
 80114b2:	b29a      	uxth	r2, r3
 80114b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114b6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80114b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114ba:	685a      	ldr	r2, [r3, #4]
 80114bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114be:	891b      	ldrh	r3, [r3, #8]
 80114c0:	4619      	mov	r1, r3
 80114c2:	4610      	mov	r0, r2
 80114c4:	f7fb fcd0 	bl	800ce68 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80114c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114ca:	69fa      	ldr	r2, [r7, #28]
 80114cc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80114ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80114d0:	69f8      	ldr	r0, [r7, #28]
 80114d2:	f7ff f881 	bl	80105d8 <tcp_oos_insert_segment>
                  }
                  break;
 80114d6:	e0e2      	b.n	801169e <tcp_receive+0xebe>
 80114d8:	2000d18c 	.word	0x2000d18c
 80114dc:	2000d189 	.word	0x2000d189
 80114e0:	2000d15c 	.word	0x2000d15c
 80114e4:	2000d17c 	.word	0x2000d17c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80114e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114ea:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80114ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	f040 80c6 	bne.w	8011682 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80114f6:	4b80      	ldr	r3, [pc, #512]	; (80116f8 <tcp_receive+0xf18>)
 80114f8:	681a      	ldr	r2, [r3, #0]
 80114fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114fc:	68db      	ldr	r3, [r3, #12]
 80114fe:	685b      	ldr	r3, [r3, #4]
 8011500:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011502:	2b00      	cmp	r3, #0
 8011504:	f340 80bd 	ble.w	8011682 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801150a:	68db      	ldr	r3, [r3, #12]
 801150c:	899b      	ldrh	r3, [r3, #12]
 801150e:	b29b      	uxth	r3, r3
 8011510:	4618      	mov	r0, r3
 8011512:	f7fa fa83 	bl	800ba1c <lwip_htons>
 8011516:	4603      	mov	r3, r0
 8011518:	b2db      	uxtb	r3, r3
 801151a:	f003 0301 	and.w	r3, r3, #1
 801151e:	2b00      	cmp	r3, #0
 8011520:	f040 80bf 	bne.w	80116a2 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011524:	4875      	ldr	r0, [pc, #468]	; (80116fc <tcp_receive+0xf1c>)
 8011526:	f7fd fa39 	bl	800e99c <tcp_seg_copy>
 801152a:	4602      	mov	r2, r0
 801152c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801152e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	2b00      	cmp	r3, #0
 8011536:	f000 80b6 	beq.w	80116a6 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801153a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801153c:	68db      	ldr	r3, [r3, #12]
 801153e:	685b      	ldr	r3, [r3, #4]
 8011540:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011542:	8912      	ldrh	r2, [r2, #8]
 8011544:	441a      	add	r2, r3
 8011546:	4b6c      	ldr	r3, [pc, #432]	; (80116f8 <tcp_receive+0xf18>)
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	1ad3      	subs	r3, r2, r3
 801154c:	2b00      	cmp	r3, #0
 801154e:	dd12      	ble.n	8011576 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011550:	4b69      	ldr	r3, [pc, #420]	; (80116f8 <tcp_receive+0xf18>)
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	b29a      	uxth	r2, r3
 8011556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011558:	68db      	ldr	r3, [r3, #12]
 801155a:	685b      	ldr	r3, [r3, #4]
 801155c:	b29b      	uxth	r3, r3
 801155e:	1ad3      	subs	r3, r2, r3
 8011560:	b29a      	uxth	r2, r3
 8011562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011564:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011568:	685a      	ldr	r2, [r3, #4]
 801156a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801156c:	891b      	ldrh	r3, [r3, #8]
 801156e:	4619      	mov	r1, r3
 8011570:	4610      	mov	r0, r2
 8011572:	f7fb fc79 	bl	800ce68 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011576:	4b62      	ldr	r3, [pc, #392]	; (8011700 <tcp_receive+0xf20>)
 8011578:	881b      	ldrh	r3, [r3, #0]
 801157a:	461a      	mov	r2, r3
 801157c:	4b5e      	ldr	r3, [pc, #376]	; (80116f8 <tcp_receive+0xf18>)
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	441a      	add	r2, r3
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011586:	6879      	ldr	r1, [r7, #4]
 8011588:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801158a:	440b      	add	r3, r1
 801158c:	1ad3      	subs	r3, r2, r3
 801158e:	2b00      	cmp	r3, #0
 8011590:	f340 8089 	ble.w	80116a6 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	68db      	ldr	r3, [r3, #12]
 801159a:	899b      	ldrh	r3, [r3, #12]
 801159c:	b29b      	uxth	r3, r3
 801159e:	4618      	mov	r0, r3
 80115a0:	f7fa fa3c 	bl	800ba1c <lwip_htons>
 80115a4:	4603      	mov	r3, r0
 80115a6:	b2db      	uxtb	r3, r3
 80115a8:	f003 0301 	and.w	r3, r3, #1
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d022      	beq.n	80115f6 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80115b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	68db      	ldr	r3, [r3, #12]
 80115b6:	899b      	ldrh	r3, [r3, #12]
 80115b8:	b29b      	uxth	r3, r3
 80115ba:	b21b      	sxth	r3, r3
 80115bc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80115c0:	b21c      	sxth	r4, r3
 80115c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	68db      	ldr	r3, [r3, #12]
 80115c8:	899b      	ldrh	r3, [r3, #12]
 80115ca:	b29b      	uxth	r3, r3
 80115cc:	4618      	mov	r0, r3
 80115ce:	f7fa fa25 	bl	800ba1c <lwip_htons>
 80115d2:	4603      	mov	r3, r0
 80115d4:	b2db      	uxtb	r3, r3
 80115d6:	b29b      	uxth	r3, r3
 80115d8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80115dc:	b29b      	uxth	r3, r3
 80115de:	4618      	mov	r0, r3
 80115e0:	f7fa fa1c 	bl	800ba1c <lwip_htons>
 80115e4:	4603      	mov	r3, r0
 80115e6:	b21b      	sxth	r3, r3
 80115e8:	4323      	orrs	r3, r4
 80115ea:	b21a      	sxth	r2, r3
 80115ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	68db      	ldr	r3, [r3, #12]
 80115f2:	b292      	uxth	r2, r2
 80115f4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115fa:	b29a      	uxth	r2, r3
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011600:	4413      	add	r3, r2
 8011602:	b299      	uxth	r1, r3
 8011604:	4b3c      	ldr	r3, [pc, #240]	; (80116f8 <tcp_receive+0xf18>)
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	b29a      	uxth	r2, r3
 801160a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	1a8a      	subs	r2, r1, r2
 8011610:	b292      	uxth	r2, r2
 8011612:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	685a      	ldr	r2, [r3, #4]
 801161a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	891b      	ldrh	r3, [r3, #8]
 8011620:	4619      	mov	r1, r3
 8011622:	4610      	mov	r0, r2
 8011624:	f7fb fc20 	bl	800ce68 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	891c      	ldrh	r4, [r3, #8]
 801162e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	68db      	ldr	r3, [r3, #12]
 8011634:	899b      	ldrh	r3, [r3, #12]
 8011636:	b29b      	uxth	r3, r3
 8011638:	4618      	mov	r0, r3
 801163a:	f7fa f9ef 	bl	800ba1c <lwip_htons>
 801163e:	4603      	mov	r3, r0
 8011640:	b2db      	uxtb	r3, r3
 8011642:	f003 0303 	and.w	r3, r3, #3
 8011646:	2b00      	cmp	r3, #0
 8011648:	d001      	beq.n	801164e <tcp_receive+0xe6e>
 801164a:	2301      	movs	r3, #1
 801164c:	e000      	b.n	8011650 <tcp_receive+0xe70>
 801164e:	2300      	movs	r3, #0
 8011650:	4423      	add	r3, r4
 8011652:	b29a      	uxth	r2, r3
 8011654:	4b2a      	ldr	r3, [pc, #168]	; (8011700 <tcp_receive+0xf20>)
 8011656:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011658:	4b29      	ldr	r3, [pc, #164]	; (8011700 <tcp_receive+0xf20>)
 801165a:	881b      	ldrh	r3, [r3, #0]
 801165c:	461a      	mov	r2, r3
 801165e:	4b26      	ldr	r3, [pc, #152]	; (80116f8 <tcp_receive+0xf18>)
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	441a      	add	r2, r3
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011668:	6879      	ldr	r1, [r7, #4]
 801166a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801166c:	440b      	add	r3, r1
 801166e:	429a      	cmp	r2, r3
 8011670:	d019      	beq.n	80116a6 <tcp_receive+0xec6>
 8011672:	4b24      	ldr	r3, [pc, #144]	; (8011704 <tcp_receive+0xf24>)
 8011674:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8011678:	4923      	ldr	r1, [pc, #140]	; (8011708 <tcp_receive+0xf28>)
 801167a:	4824      	ldr	r0, [pc, #144]	; (801170c <tcp_receive+0xf2c>)
 801167c:	f005 fcc0 	bl	8017000 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011680:	e011      	b.n	80116a6 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	63bb      	str	r3, [r7, #56]	; 0x38
 8011688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801168a:	2b00      	cmp	r3, #0
 801168c:	f47f aea4 	bne.w	80113d8 <tcp_receive+0xbf8>
 8011690:	e00a      	b.n	80116a8 <tcp_receive+0xec8>
                break;
 8011692:	bf00      	nop
 8011694:	e008      	b.n	80116a8 <tcp_receive+0xec8>
                break;
 8011696:	bf00      	nop
 8011698:	e006      	b.n	80116a8 <tcp_receive+0xec8>
                  break;
 801169a:	bf00      	nop
 801169c:	e004      	b.n	80116a8 <tcp_receive+0xec8>
                  break;
 801169e:	bf00      	nop
 80116a0:	e002      	b.n	80116a8 <tcp_receive+0xec8>
                  break;
 80116a2:	bf00      	nop
 80116a4:	e000      	b.n	80116a8 <tcp_receive+0xec8>
                break;
 80116a6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80116a8:	6878      	ldr	r0, [r7, #4]
 80116aa:	f001 fe8b 	bl	80133c4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80116ae:	e003      	b.n	80116b8 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80116b0:	6878      	ldr	r0, [r7, #4]
 80116b2:	f001 fe87 	bl	80133c4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80116b6:	e01a      	b.n	80116ee <tcp_receive+0xf0e>
 80116b8:	e019      	b.n	80116ee <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80116ba:	4b0f      	ldr	r3, [pc, #60]	; (80116f8 <tcp_receive+0xf18>)
 80116bc:	681a      	ldr	r2, [r3, #0]
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116c2:	1ad3      	subs	r3, r2, r3
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	db0a      	blt.n	80116de <tcp_receive+0xefe>
 80116c8:	4b0b      	ldr	r3, [pc, #44]	; (80116f8 <tcp_receive+0xf18>)
 80116ca:	681a      	ldr	r2, [r3, #0]
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116d0:	6879      	ldr	r1, [r7, #4]
 80116d2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80116d4:	440b      	add	r3, r1
 80116d6:	1ad3      	subs	r3, r2, r3
 80116d8:	3301      	adds	r3, #1
 80116da:	2b00      	cmp	r3, #0
 80116dc:	dd07      	ble.n	80116ee <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	8b5b      	ldrh	r3, [r3, #26]
 80116e2:	f043 0302 	orr.w	r3, r3, #2
 80116e6:	b29a      	uxth	r2, r3
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80116ec:	e7ff      	b.n	80116ee <tcp_receive+0xf0e>
 80116ee:	bf00      	nop
 80116f0:	3750      	adds	r7, #80	; 0x50
 80116f2:	46bd      	mov	sp, r7
 80116f4:	bdb0      	pop	{r4, r5, r7, pc}
 80116f6:	bf00      	nop
 80116f8:	2000d17c 	.word	0x2000d17c
 80116fc:	2000d15c 	.word	0x2000d15c
 8011700:	2000d186 	.word	0x2000d186
 8011704:	0801a64c 	.word	0x0801a64c
 8011708:	0801a9f4 	.word	0x0801a9f4
 801170c:	0801a698 	.word	0x0801a698

08011710 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011710:	b480      	push	{r7}
 8011712:	b083      	sub	sp, #12
 8011714:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011716:	4b15      	ldr	r3, [pc, #84]	; (801176c <tcp_get_next_optbyte+0x5c>)
 8011718:	881b      	ldrh	r3, [r3, #0]
 801171a:	1c5a      	adds	r2, r3, #1
 801171c:	b291      	uxth	r1, r2
 801171e:	4a13      	ldr	r2, [pc, #76]	; (801176c <tcp_get_next_optbyte+0x5c>)
 8011720:	8011      	strh	r1, [r2, #0]
 8011722:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011724:	4b12      	ldr	r3, [pc, #72]	; (8011770 <tcp_get_next_optbyte+0x60>)
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	2b00      	cmp	r3, #0
 801172a:	d004      	beq.n	8011736 <tcp_get_next_optbyte+0x26>
 801172c:	4b11      	ldr	r3, [pc, #68]	; (8011774 <tcp_get_next_optbyte+0x64>)
 801172e:	881b      	ldrh	r3, [r3, #0]
 8011730:	88fa      	ldrh	r2, [r7, #6]
 8011732:	429a      	cmp	r2, r3
 8011734:	d208      	bcs.n	8011748 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011736:	4b10      	ldr	r3, [pc, #64]	; (8011778 <tcp_get_next_optbyte+0x68>)
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	3314      	adds	r3, #20
 801173c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801173e:	88fb      	ldrh	r3, [r7, #6]
 8011740:	683a      	ldr	r2, [r7, #0]
 8011742:	4413      	add	r3, r2
 8011744:	781b      	ldrb	r3, [r3, #0]
 8011746:	e00b      	b.n	8011760 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011748:	88fb      	ldrh	r3, [r7, #6]
 801174a:	b2da      	uxtb	r2, r3
 801174c:	4b09      	ldr	r3, [pc, #36]	; (8011774 <tcp_get_next_optbyte+0x64>)
 801174e:	881b      	ldrh	r3, [r3, #0]
 8011750:	b2db      	uxtb	r3, r3
 8011752:	1ad3      	subs	r3, r2, r3
 8011754:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011756:	4b06      	ldr	r3, [pc, #24]	; (8011770 <tcp_get_next_optbyte+0x60>)
 8011758:	681a      	ldr	r2, [r3, #0]
 801175a:	797b      	ldrb	r3, [r7, #5]
 801175c:	4413      	add	r3, r2
 801175e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011760:	4618      	mov	r0, r3
 8011762:	370c      	adds	r7, #12
 8011764:	46bd      	mov	sp, r7
 8011766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801176a:	4770      	bx	lr
 801176c:	2000d178 	.word	0x2000d178
 8011770:	2000d174 	.word	0x2000d174
 8011774:	2000d172 	.word	0x2000d172
 8011778:	2000d16c 	.word	0x2000d16c

0801177c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801177c:	b580      	push	{r7, lr}
 801177e:	b084      	sub	sp, #16
 8011780:	af00      	add	r7, sp, #0
 8011782:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d106      	bne.n	8011798 <tcp_parseopt+0x1c>
 801178a:	4b32      	ldr	r3, [pc, #200]	; (8011854 <tcp_parseopt+0xd8>)
 801178c:	f240 727d 	movw	r2, #1917	; 0x77d
 8011790:	4931      	ldr	r1, [pc, #196]	; (8011858 <tcp_parseopt+0xdc>)
 8011792:	4832      	ldr	r0, [pc, #200]	; (801185c <tcp_parseopt+0xe0>)
 8011794:	f005 fc34 	bl	8017000 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011798:	4b31      	ldr	r3, [pc, #196]	; (8011860 <tcp_parseopt+0xe4>)
 801179a:	881b      	ldrh	r3, [r3, #0]
 801179c:	2b00      	cmp	r3, #0
 801179e:	d055      	beq.n	801184c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80117a0:	4b30      	ldr	r3, [pc, #192]	; (8011864 <tcp_parseopt+0xe8>)
 80117a2:	2200      	movs	r2, #0
 80117a4:	801a      	strh	r2, [r3, #0]
 80117a6:	e045      	b.n	8011834 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80117a8:	f7ff ffb2 	bl	8011710 <tcp_get_next_optbyte>
 80117ac:	4603      	mov	r3, r0
 80117ae:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80117b0:	7bfb      	ldrb	r3, [r7, #15]
 80117b2:	2b02      	cmp	r3, #2
 80117b4:	d006      	beq.n	80117c4 <tcp_parseopt+0x48>
 80117b6:	2b02      	cmp	r3, #2
 80117b8:	dc2b      	bgt.n	8011812 <tcp_parseopt+0x96>
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d041      	beq.n	8011842 <tcp_parseopt+0xc6>
 80117be:	2b01      	cmp	r3, #1
 80117c0:	d127      	bne.n	8011812 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80117c2:	e037      	b.n	8011834 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80117c4:	f7ff ffa4 	bl	8011710 <tcp_get_next_optbyte>
 80117c8:	4603      	mov	r3, r0
 80117ca:	2b04      	cmp	r3, #4
 80117cc:	d13b      	bne.n	8011846 <tcp_parseopt+0xca>
 80117ce:	4b25      	ldr	r3, [pc, #148]	; (8011864 <tcp_parseopt+0xe8>)
 80117d0:	881b      	ldrh	r3, [r3, #0]
 80117d2:	3301      	adds	r3, #1
 80117d4:	4a22      	ldr	r2, [pc, #136]	; (8011860 <tcp_parseopt+0xe4>)
 80117d6:	8812      	ldrh	r2, [r2, #0]
 80117d8:	4293      	cmp	r3, r2
 80117da:	da34      	bge.n	8011846 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80117dc:	f7ff ff98 	bl	8011710 <tcp_get_next_optbyte>
 80117e0:	4603      	mov	r3, r0
 80117e2:	b29b      	uxth	r3, r3
 80117e4:	021b      	lsls	r3, r3, #8
 80117e6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80117e8:	f7ff ff92 	bl	8011710 <tcp_get_next_optbyte>
 80117ec:	4603      	mov	r3, r0
 80117ee:	b29a      	uxth	r2, r3
 80117f0:	89bb      	ldrh	r3, [r7, #12]
 80117f2:	4313      	orrs	r3, r2
 80117f4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80117f6:	89bb      	ldrh	r3, [r7, #12]
 80117f8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80117fc:	d804      	bhi.n	8011808 <tcp_parseopt+0x8c>
 80117fe:	89bb      	ldrh	r3, [r7, #12]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d001      	beq.n	8011808 <tcp_parseopt+0x8c>
 8011804:	89ba      	ldrh	r2, [r7, #12]
 8011806:	e001      	b.n	801180c <tcp_parseopt+0x90>
 8011808:	f44f 7206 	mov.w	r2, #536	; 0x218
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011810:	e010      	b.n	8011834 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011812:	f7ff ff7d 	bl	8011710 <tcp_get_next_optbyte>
 8011816:	4603      	mov	r3, r0
 8011818:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801181a:	7afb      	ldrb	r3, [r7, #11]
 801181c:	2b01      	cmp	r3, #1
 801181e:	d914      	bls.n	801184a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011820:	7afb      	ldrb	r3, [r7, #11]
 8011822:	b29a      	uxth	r2, r3
 8011824:	4b0f      	ldr	r3, [pc, #60]	; (8011864 <tcp_parseopt+0xe8>)
 8011826:	881b      	ldrh	r3, [r3, #0]
 8011828:	4413      	add	r3, r2
 801182a:	b29b      	uxth	r3, r3
 801182c:	3b02      	subs	r3, #2
 801182e:	b29a      	uxth	r2, r3
 8011830:	4b0c      	ldr	r3, [pc, #48]	; (8011864 <tcp_parseopt+0xe8>)
 8011832:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011834:	4b0b      	ldr	r3, [pc, #44]	; (8011864 <tcp_parseopt+0xe8>)
 8011836:	881a      	ldrh	r2, [r3, #0]
 8011838:	4b09      	ldr	r3, [pc, #36]	; (8011860 <tcp_parseopt+0xe4>)
 801183a:	881b      	ldrh	r3, [r3, #0]
 801183c:	429a      	cmp	r2, r3
 801183e:	d3b3      	bcc.n	80117a8 <tcp_parseopt+0x2c>
 8011840:	e004      	b.n	801184c <tcp_parseopt+0xd0>
          return;
 8011842:	bf00      	nop
 8011844:	e002      	b.n	801184c <tcp_parseopt+0xd0>
            return;
 8011846:	bf00      	nop
 8011848:	e000      	b.n	801184c <tcp_parseopt+0xd0>
            return;
 801184a:	bf00      	nop
      }
    }
  }
}
 801184c:	3710      	adds	r7, #16
 801184e:	46bd      	mov	sp, r7
 8011850:	bd80      	pop	{r7, pc}
 8011852:	bf00      	nop
 8011854:	0801a64c 	.word	0x0801a64c
 8011858:	0801aab0 	.word	0x0801aab0
 801185c:	0801a698 	.word	0x0801a698
 8011860:	2000d170 	.word	0x2000d170
 8011864:	2000d178 	.word	0x2000d178

08011868 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011868:	b480      	push	{r7}
 801186a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801186c:	4b05      	ldr	r3, [pc, #20]	; (8011884 <tcp_trigger_input_pcb_close+0x1c>)
 801186e:	781b      	ldrb	r3, [r3, #0]
 8011870:	f043 0310 	orr.w	r3, r3, #16
 8011874:	b2da      	uxtb	r2, r3
 8011876:	4b03      	ldr	r3, [pc, #12]	; (8011884 <tcp_trigger_input_pcb_close+0x1c>)
 8011878:	701a      	strb	r2, [r3, #0]
}
 801187a:	bf00      	nop
 801187c:	46bd      	mov	sp, r7
 801187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011882:	4770      	bx	lr
 8011884:	2000d189 	.word	0x2000d189

08011888 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011888:	b580      	push	{r7, lr}
 801188a:	b084      	sub	sp, #16
 801188c:	af00      	add	r7, sp, #0
 801188e:	60f8      	str	r0, [r7, #12]
 8011890:	60b9      	str	r1, [r7, #8]
 8011892:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d00a      	beq.n	80118b0 <tcp_route+0x28>
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	7a1b      	ldrb	r3, [r3, #8]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d006      	beq.n	80118b0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	7a1b      	ldrb	r3, [r3, #8]
 80118a6:	4618      	mov	r0, r3
 80118a8:	f7fb f8d6 	bl	800ca58 <netif_get_by_index>
 80118ac:	4603      	mov	r3, r0
 80118ae:	e003      	b.n	80118b8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80118b0:	6878      	ldr	r0, [r7, #4]
 80118b2:	f003 fe35 	bl	8015520 <ip4_route>
 80118b6:	4603      	mov	r3, r0
  }
}
 80118b8:	4618      	mov	r0, r3
 80118ba:	3710      	adds	r7, #16
 80118bc:	46bd      	mov	sp, r7
 80118be:	bd80      	pop	{r7, pc}

080118c0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80118c0:	b590      	push	{r4, r7, lr}
 80118c2:	b087      	sub	sp, #28
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	60f8      	str	r0, [r7, #12]
 80118c8:	60b9      	str	r1, [r7, #8]
 80118ca:	603b      	str	r3, [r7, #0]
 80118cc:	4613      	mov	r3, r2
 80118ce:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d105      	bne.n	80118e2 <tcp_create_segment+0x22>
 80118d6:	4b44      	ldr	r3, [pc, #272]	; (80119e8 <tcp_create_segment+0x128>)
 80118d8:	22a3      	movs	r2, #163	; 0xa3
 80118da:	4944      	ldr	r1, [pc, #272]	; (80119ec <tcp_create_segment+0x12c>)
 80118dc:	4844      	ldr	r0, [pc, #272]	; (80119f0 <tcp_create_segment+0x130>)
 80118de:	f005 fb8f 	bl	8017000 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80118e2:	68bb      	ldr	r3, [r7, #8]
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d105      	bne.n	80118f4 <tcp_create_segment+0x34>
 80118e8:	4b3f      	ldr	r3, [pc, #252]	; (80119e8 <tcp_create_segment+0x128>)
 80118ea:	22a4      	movs	r2, #164	; 0xa4
 80118ec:	4941      	ldr	r1, [pc, #260]	; (80119f4 <tcp_create_segment+0x134>)
 80118ee:	4840      	ldr	r0, [pc, #256]	; (80119f0 <tcp_create_segment+0x130>)
 80118f0:	f005 fb86 	bl	8017000 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80118f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80118f8:	009b      	lsls	r3, r3, #2
 80118fa:	b2db      	uxtb	r3, r3
 80118fc:	f003 0304 	and.w	r3, r3, #4
 8011900:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011902:	2003      	movs	r0, #3
 8011904:	f7fa fd40 	bl	800c388 <memp_malloc>
 8011908:	6138      	str	r0, [r7, #16]
 801190a:	693b      	ldr	r3, [r7, #16]
 801190c:	2b00      	cmp	r3, #0
 801190e:	d104      	bne.n	801191a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011910:	68b8      	ldr	r0, [r7, #8]
 8011912:	f7fb fc61 	bl	800d1d8 <pbuf_free>
    return NULL;
 8011916:	2300      	movs	r3, #0
 8011918:	e061      	b.n	80119de <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801191a:	693b      	ldr	r3, [r7, #16]
 801191c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011920:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011922:	693b      	ldr	r3, [r7, #16]
 8011924:	2200      	movs	r2, #0
 8011926:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011928:	693b      	ldr	r3, [r7, #16]
 801192a:	68ba      	ldr	r2, [r7, #8]
 801192c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801192e:	68bb      	ldr	r3, [r7, #8]
 8011930:	891a      	ldrh	r2, [r3, #8]
 8011932:	7dfb      	ldrb	r3, [r7, #23]
 8011934:	b29b      	uxth	r3, r3
 8011936:	429a      	cmp	r2, r3
 8011938:	d205      	bcs.n	8011946 <tcp_create_segment+0x86>
 801193a:	4b2b      	ldr	r3, [pc, #172]	; (80119e8 <tcp_create_segment+0x128>)
 801193c:	22b0      	movs	r2, #176	; 0xb0
 801193e:	492e      	ldr	r1, [pc, #184]	; (80119f8 <tcp_create_segment+0x138>)
 8011940:	482b      	ldr	r0, [pc, #172]	; (80119f0 <tcp_create_segment+0x130>)
 8011942:	f005 fb5d 	bl	8017000 <iprintf>
  seg->len = p->tot_len - optlen;
 8011946:	68bb      	ldr	r3, [r7, #8]
 8011948:	891a      	ldrh	r2, [r3, #8]
 801194a:	7dfb      	ldrb	r3, [r7, #23]
 801194c:	b29b      	uxth	r3, r3
 801194e:	1ad3      	subs	r3, r2, r3
 8011950:	b29a      	uxth	r2, r3
 8011952:	693b      	ldr	r3, [r7, #16]
 8011954:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011956:	2114      	movs	r1, #20
 8011958:	68b8      	ldr	r0, [r7, #8]
 801195a:	f7fb fb75 	bl	800d048 <pbuf_add_header>
 801195e:	4603      	mov	r3, r0
 8011960:	2b00      	cmp	r3, #0
 8011962:	d004      	beq.n	801196e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011964:	6938      	ldr	r0, [r7, #16]
 8011966:	f7fd f800 	bl	800e96a <tcp_seg_free>
    return NULL;
 801196a:	2300      	movs	r3, #0
 801196c:	e037      	b.n	80119de <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801196e:	693b      	ldr	r3, [r7, #16]
 8011970:	685b      	ldr	r3, [r3, #4]
 8011972:	685a      	ldr	r2, [r3, #4]
 8011974:	693b      	ldr	r3, [r7, #16]
 8011976:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	8ada      	ldrh	r2, [r3, #22]
 801197c:	693b      	ldr	r3, [r7, #16]
 801197e:	68dc      	ldr	r4, [r3, #12]
 8011980:	4610      	mov	r0, r2
 8011982:	f7fa f84b 	bl	800ba1c <lwip_htons>
 8011986:	4603      	mov	r3, r0
 8011988:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	8b1a      	ldrh	r2, [r3, #24]
 801198e:	693b      	ldr	r3, [r7, #16]
 8011990:	68dc      	ldr	r4, [r3, #12]
 8011992:	4610      	mov	r0, r2
 8011994:	f7fa f842 	bl	800ba1c <lwip_htons>
 8011998:	4603      	mov	r3, r0
 801199a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801199c:	693b      	ldr	r3, [r7, #16]
 801199e:	68dc      	ldr	r4, [r3, #12]
 80119a0:	6838      	ldr	r0, [r7, #0]
 80119a2:	f7fa f850 	bl	800ba46 <lwip_htonl>
 80119a6:	4603      	mov	r3, r0
 80119a8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80119aa:	7dfb      	ldrb	r3, [r7, #23]
 80119ac:	089b      	lsrs	r3, r3, #2
 80119ae:	b2db      	uxtb	r3, r3
 80119b0:	b29b      	uxth	r3, r3
 80119b2:	3305      	adds	r3, #5
 80119b4:	b29b      	uxth	r3, r3
 80119b6:	031b      	lsls	r3, r3, #12
 80119b8:	b29a      	uxth	r2, r3
 80119ba:	79fb      	ldrb	r3, [r7, #7]
 80119bc:	b29b      	uxth	r3, r3
 80119be:	4313      	orrs	r3, r2
 80119c0:	b29a      	uxth	r2, r3
 80119c2:	693b      	ldr	r3, [r7, #16]
 80119c4:	68dc      	ldr	r4, [r3, #12]
 80119c6:	4610      	mov	r0, r2
 80119c8:	f7fa f828 	bl	800ba1c <lwip_htons>
 80119cc:	4603      	mov	r3, r0
 80119ce:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80119d0:	693b      	ldr	r3, [r7, #16]
 80119d2:	68db      	ldr	r3, [r3, #12]
 80119d4:	2200      	movs	r2, #0
 80119d6:	749a      	strb	r2, [r3, #18]
 80119d8:	2200      	movs	r2, #0
 80119da:	74da      	strb	r2, [r3, #19]
  return seg;
 80119dc:	693b      	ldr	r3, [r7, #16]
}
 80119de:	4618      	mov	r0, r3
 80119e0:	371c      	adds	r7, #28
 80119e2:	46bd      	mov	sp, r7
 80119e4:	bd90      	pop	{r4, r7, pc}
 80119e6:	bf00      	nop
 80119e8:	0801aacc 	.word	0x0801aacc
 80119ec:	0801ab00 	.word	0x0801ab00
 80119f0:	0801ab20 	.word	0x0801ab20
 80119f4:	0801ab48 	.word	0x0801ab48
 80119f8:	0801ab6c 	.word	0x0801ab6c

080119fc <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b086      	sub	sp, #24
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	607b      	str	r3, [r7, #4]
 8011a04:	4603      	mov	r3, r0
 8011a06:	73fb      	strb	r3, [r7, #15]
 8011a08:	460b      	mov	r3, r1
 8011a0a:	81bb      	strh	r3, [r7, #12]
 8011a0c:	4613      	mov	r3, r2
 8011a0e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011a10:	89bb      	ldrh	r3, [r7, #12]
 8011a12:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d105      	bne.n	8011a26 <tcp_pbuf_prealloc+0x2a>
 8011a1a:	4b30      	ldr	r3, [pc, #192]	; (8011adc <tcp_pbuf_prealloc+0xe0>)
 8011a1c:	22e8      	movs	r2, #232	; 0xe8
 8011a1e:	4930      	ldr	r1, [pc, #192]	; (8011ae0 <tcp_pbuf_prealloc+0xe4>)
 8011a20:	4830      	ldr	r0, [pc, #192]	; (8011ae4 <tcp_pbuf_prealloc+0xe8>)
 8011a22:	f005 faed 	bl	8017000 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8011a26:	6a3b      	ldr	r3, [r7, #32]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d105      	bne.n	8011a38 <tcp_pbuf_prealloc+0x3c>
 8011a2c:	4b2b      	ldr	r3, [pc, #172]	; (8011adc <tcp_pbuf_prealloc+0xe0>)
 8011a2e:	22e9      	movs	r2, #233	; 0xe9
 8011a30:	492d      	ldr	r1, [pc, #180]	; (8011ae8 <tcp_pbuf_prealloc+0xec>)
 8011a32:	482c      	ldr	r0, [pc, #176]	; (8011ae4 <tcp_pbuf_prealloc+0xe8>)
 8011a34:	f005 fae4 	bl	8017000 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8011a38:	89ba      	ldrh	r2, [r7, #12]
 8011a3a:	897b      	ldrh	r3, [r7, #10]
 8011a3c:	429a      	cmp	r2, r3
 8011a3e:	d221      	bcs.n	8011a84 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011a40:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011a44:	f003 0302 	and.w	r3, r3, #2
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d111      	bne.n	8011a70 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011a4c:	6a3b      	ldr	r3, [r7, #32]
 8011a4e:	8b5b      	ldrh	r3, [r3, #26]
 8011a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d115      	bne.n	8011a84 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8011a58:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d007      	beq.n	8011a70 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011a60:	6a3b      	ldr	r3, [r7, #32]
 8011a62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d103      	bne.n	8011a70 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8011a68:	6a3b      	ldr	r3, [r7, #32]
 8011a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d009      	beq.n	8011a84 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011a70:	89bb      	ldrh	r3, [r7, #12]
 8011a72:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8011a76:	f023 0203 	bic.w	r2, r3, #3
 8011a7a:	897b      	ldrh	r3, [r7, #10]
 8011a7c:	4293      	cmp	r3, r2
 8011a7e:	bf28      	it	cs
 8011a80:	4613      	movcs	r3, r2
 8011a82:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8011a84:	8af9      	ldrh	r1, [r7, #22]
 8011a86:	7bfb      	ldrb	r3, [r7, #15]
 8011a88:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	f7fb f88d 	bl	800cbac <pbuf_alloc>
 8011a92:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011a94:	693b      	ldr	r3, [r7, #16]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d101      	bne.n	8011a9e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	e019      	b.n	8011ad2 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8011a9e:	693b      	ldr	r3, [r7, #16]
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d006      	beq.n	8011ab4 <tcp_pbuf_prealloc+0xb8>
 8011aa6:	4b0d      	ldr	r3, [pc, #52]	; (8011adc <tcp_pbuf_prealloc+0xe0>)
 8011aa8:	f240 120b 	movw	r2, #267	; 0x10b
 8011aac:	490f      	ldr	r1, [pc, #60]	; (8011aec <tcp_pbuf_prealloc+0xf0>)
 8011aae:	480d      	ldr	r0, [pc, #52]	; (8011ae4 <tcp_pbuf_prealloc+0xe8>)
 8011ab0:	f005 faa6 	bl	8017000 <iprintf>
  *oversize = p->len - length;
 8011ab4:	693b      	ldr	r3, [r7, #16]
 8011ab6:	895a      	ldrh	r2, [r3, #10]
 8011ab8:	89bb      	ldrh	r3, [r7, #12]
 8011aba:	1ad3      	subs	r3, r2, r3
 8011abc:	b29a      	uxth	r2, r3
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8011ac2:	693b      	ldr	r3, [r7, #16]
 8011ac4:	89ba      	ldrh	r2, [r7, #12]
 8011ac6:	811a      	strh	r2, [r3, #8]
 8011ac8:	693b      	ldr	r3, [r7, #16]
 8011aca:	891a      	ldrh	r2, [r3, #8]
 8011acc:	693b      	ldr	r3, [r7, #16]
 8011ace:	815a      	strh	r2, [r3, #10]
  return p;
 8011ad0:	693b      	ldr	r3, [r7, #16]
}
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	3718      	adds	r7, #24
 8011ad6:	46bd      	mov	sp, r7
 8011ad8:	bd80      	pop	{r7, pc}
 8011ada:	bf00      	nop
 8011adc:	0801aacc 	.word	0x0801aacc
 8011ae0:	0801ab84 	.word	0x0801ab84
 8011ae4:	0801ab20 	.word	0x0801ab20
 8011ae8:	0801aba8 	.word	0x0801aba8
 8011aec:	0801abc8 	.word	0x0801abc8

08011af0 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b082      	sub	sp, #8
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	6078      	str	r0, [r7, #4]
 8011af8:	460b      	mov	r3, r1
 8011afa:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d106      	bne.n	8011b10 <tcp_write_checks+0x20>
 8011b02:	4b33      	ldr	r3, [pc, #204]	; (8011bd0 <tcp_write_checks+0xe0>)
 8011b04:	f240 1233 	movw	r2, #307	; 0x133
 8011b08:	4932      	ldr	r1, [pc, #200]	; (8011bd4 <tcp_write_checks+0xe4>)
 8011b0a:	4833      	ldr	r0, [pc, #204]	; (8011bd8 <tcp_write_checks+0xe8>)
 8011b0c:	f005 fa78 	bl	8017000 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	7d1b      	ldrb	r3, [r3, #20]
 8011b14:	2b04      	cmp	r3, #4
 8011b16:	d00e      	beq.n	8011b36 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011b1c:	2b07      	cmp	r3, #7
 8011b1e:	d00a      	beq.n	8011b36 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011b24:	2b02      	cmp	r3, #2
 8011b26:	d006      	beq.n	8011b36 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011b2c:	2b03      	cmp	r3, #3
 8011b2e:	d002      	beq.n	8011b36 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011b30:	f06f 030a 	mvn.w	r3, #10
 8011b34:	e048      	b.n	8011bc8 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8011b36:	887b      	ldrh	r3, [r7, #2]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d101      	bne.n	8011b40 <tcp_write_checks+0x50>
    return ERR_OK;
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	e043      	b.n	8011bc8 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011b46:	887a      	ldrh	r2, [r7, #2]
 8011b48:	429a      	cmp	r2, r3
 8011b4a:	d909      	bls.n	8011b60 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	8b5b      	ldrh	r3, [r3, #26]
 8011b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b54:	b29a      	uxth	r2, r3
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8011b5e:	e033      	b.n	8011bc8 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011b66:	2b08      	cmp	r3, #8
 8011b68:	d909      	bls.n	8011b7e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	8b5b      	ldrh	r3, [r3, #26]
 8011b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b72:	b29a      	uxth	r2, r3
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011b78:	f04f 33ff 	mov.w	r3, #4294967295
 8011b7c:	e024      	b.n	8011bc8 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d00f      	beq.n	8011ba8 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d11a      	bne.n	8011bc6 <tcp_write_checks+0xd6>
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d116      	bne.n	8011bc6 <tcp_write_checks+0xd6>
 8011b98:	4b0d      	ldr	r3, [pc, #52]	; (8011bd0 <tcp_write_checks+0xe0>)
 8011b9a:	f240 1255 	movw	r2, #341	; 0x155
 8011b9e:	490f      	ldr	r1, [pc, #60]	; (8011bdc <tcp_write_checks+0xec>)
 8011ba0:	480d      	ldr	r0, [pc, #52]	; (8011bd8 <tcp_write_checks+0xe8>)
 8011ba2:	f005 fa2d 	bl	8017000 <iprintf>
 8011ba6:	e00e      	b.n	8011bc6 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d103      	bne.n	8011bb8 <tcp_write_checks+0xc8>
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d006      	beq.n	8011bc6 <tcp_write_checks+0xd6>
 8011bb8:	4b05      	ldr	r3, [pc, #20]	; (8011bd0 <tcp_write_checks+0xe0>)
 8011bba:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8011bbe:	4908      	ldr	r1, [pc, #32]	; (8011be0 <tcp_write_checks+0xf0>)
 8011bc0:	4805      	ldr	r0, [pc, #20]	; (8011bd8 <tcp_write_checks+0xe8>)
 8011bc2:	f005 fa1d 	bl	8017000 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8011bc6:	2300      	movs	r3, #0
}
 8011bc8:	4618      	mov	r0, r3
 8011bca:	3708      	adds	r7, #8
 8011bcc:	46bd      	mov	sp, r7
 8011bce:	bd80      	pop	{r7, pc}
 8011bd0:	0801aacc 	.word	0x0801aacc
 8011bd4:	0801abdc 	.word	0x0801abdc
 8011bd8:	0801ab20 	.word	0x0801ab20
 8011bdc:	0801abfc 	.word	0x0801abfc
 8011be0:	0801ac38 	.word	0x0801ac38

08011be4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011be4:	b590      	push	{r4, r7, lr}
 8011be6:	b09b      	sub	sp, #108	; 0x6c
 8011be8:	af04      	add	r7, sp, #16
 8011bea:	60f8      	str	r0, [r7, #12]
 8011bec:	60b9      	str	r1, [r7, #8]
 8011bee:	4611      	mov	r1, r2
 8011bf0:	461a      	mov	r2, r3
 8011bf2:	460b      	mov	r3, r1
 8011bf4:	80fb      	strh	r3, [r7, #6]
 8011bf6:	4613      	mov	r3, r2
 8011bf8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011bfe:	2300      	movs	r3, #0
 8011c00:	653b      	str	r3, [r7, #80]	; 0x50
 8011c02:	2300      	movs	r3, #0
 8011c04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011c06:	2300      	movs	r3, #0
 8011c08:	64bb      	str	r3, [r7, #72]	; 0x48
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011c0e:	2300      	movs	r3, #0
 8011c10:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8011c14:	2300      	movs	r3, #0
 8011c16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011c1e:	2300      	movs	r3, #0
 8011c20:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011c22:	2300      	movs	r3, #0
 8011c24:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d109      	bne.n	8011c40 <tcp_write+0x5c>
 8011c2c:	4ba4      	ldr	r3, [pc, #656]	; (8011ec0 <tcp_write+0x2dc>)
 8011c2e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8011c32:	49a4      	ldr	r1, [pc, #656]	; (8011ec4 <tcp_write+0x2e0>)
 8011c34:	48a4      	ldr	r0, [pc, #656]	; (8011ec8 <tcp_write+0x2e4>)
 8011c36:	f005 f9e3 	bl	8017000 <iprintf>
 8011c3a:	f06f 030f 	mvn.w	r3, #15
 8011c3e:	e32a      	b.n	8012296 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011c46:	085b      	lsrs	r3, r3, #1
 8011c48:	b29a      	uxth	r2, r3
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c4e:	4293      	cmp	r3, r2
 8011c50:	bf28      	it	cs
 8011c52:	4613      	movcs	r3, r2
 8011c54:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8011c56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d102      	bne.n	8011c62 <tcp_write+0x7e>
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c60:	e000      	b.n	8011c64 <tcp_write+0x80>
 8011c62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011c64:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8011c66:	68bb      	ldr	r3, [r7, #8]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d109      	bne.n	8011c80 <tcp_write+0x9c>
 8011c6c:	4b94      	ldr	r3, [pc, #592]	; (8011ec0 <tcp_write+0x2dc>)
 8011c6e:	f240 12ad 	movw	r2, #429	; 0x1ad
 8011c72:	4996      	ldr	r1, [pc, #600]	; (8011ecc <tcp_write+0x2e8>)
 8011c74:	4894      	ldr	r0, [pc, #592]	; (8011ec8 <tcp_write+0x2e4>)
 8011c76:	f005 f9c3 	bl	8017000 <iprintf>
 8011c7a:	f06f 030f 	mvn.w	r3, #15
 8011c7e:	e30a      	b.n	8012296 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011c80:	88fb      	ldrh	r3, [r7, #6]
 8011c82:	4619      	mov	r1, r3
 8011c84:	68f8      	ldr	r0, [r7, #12]
 8011c86:	f7ff ff33 	bl	8011af0 <tcp_write_checks>
 8011c8a:	4603      	mov	r3, r0
 8011c8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8011c90:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d002      	beq.n	8011c9e <tcp_write+0xba>
    return err;
 8011c98:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011c9c:	e2fb      	b.n	8012296 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011ca4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011ca8:	2300      	movs	r3, #0
 8011caa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	f000 80f6 	beq.w	8011ea4 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cbc:	653b      	str	r3, [r7, #80]	; 0x50
 8011cbe:	e002      	b.n	8011cc6 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8011cc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011cc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d1f8      	bne.n	8011cc0 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8011cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011cd0:	7a9b      	ldrb	r3, [r3, #10]
 8011cd2:	009b      	lsls	r3, r3, #2
 8011cd4:	b29b      	uxth	r3, r3
 8011cd6:	f003 0304 	and.w	r3, r3, #4
 8011cda:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011cdc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011cde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ce0:	891b      	ldrh	r3, [r3, #8]
 8011ce2:	4619      	mov	r1, r3
 8011ce4:	8c3b      	ldrh	r3, [r7, #32]
 8011ce6:	440b      	add	r3, r1
 8011ce8:	429a      	cmp	r2, r3
 8011cea:	da06      	bge.n	8011cfa <tcp_write+0x116>
 8011cec:	4b74      	ldr	r3, [pc, #464]	; (8011ec0 <tcp_write+0x2dc>)
 8011cee:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011cf2:	4977      	ldr	r1, [pc, #476]	; (8011ed0 <tcp_write+0x2ec>)
 8011cf4:	4874      	ldr	r0, [pc, #464]	; (8011ec8 <tcp_write+0x2e4>)
 8011cf6:	f005 f983 	bl	8017000 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8011cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011cfc:	891a      	ldrh	r2, [r3, #8]
 8011cfe:	8c3b      	ldrh	r3, [r7, #32]
 8011d00:	4413      	add	r3, r2
 8011d02:	b29b      	uxth	r3, r3
 8011d04:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011d06:	1ad3      	subs	r3, r2, r3
 8011d08:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011d10:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8011d12:	8a7b      	ldrh	r3, [r7, #18]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d026      	beq.n	8011d66 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8011d18:	8a7b      	ldrh	r3, [r7, #18]
 8011d1a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011d1c:	429a      	cmp	r2, r3
 8011d1e:	d206      	bcs.n	8011d2e <tcp_write+0x14a>
 8011d20:	4b67      	ldr	r3, [pc, #412]	; (8011ec0 <tcp_write+0x2dc>)
 8011d22:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8011d26:	496b      	ldr	r1, [pc, #428]	; (8011ed4 <tcp_write+0x2f0>)
 8011d28:	4867      	ldr	r0, [pc, #412]	; (8011ec8 <tcp_write+0x2e4>)
 8011d2a:	f005 f969 	bl	8017000 <iprintf>
      seg = last_unsent;
 8011d2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d30:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8011d32:	8a7b      	ldrh	r3, [r7, #18]
 8011d34:	88fa      	ldrh	r2, [r7, #6]
 8011d36:	4293      	cmp	r3, r2
 8011d38:	bf28      	it	cs
 8011d3a:	4613      	movcs	r3, r2
 8011d3c:	b29b      	uxth	r3, r3
 8011d3e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011d40:	4293      	cmp	r3, r2
 8011d42:	bf28      	it	cs
 8011d44:	4613      	movcs	r3, r2
 8011d46:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8011d48:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011d4c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011d4e:	4413      	add	r3, r2
 8011d50:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8011d54:	8a7a      	ldrh	r2, [r7, #18]
 8011d56:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011d58:	1ad3      	subs	r3, r2, r3
 8011d5a:	b29b      	uxth	r3, r3
 8011d5c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011d5e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011d60:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011d62:	1ad3      	subs	r3, r2, r3
 8011d64:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8011d66:	8a7b      	ldrh	r3, [r7, #18]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d00b      	beq.n	8011d84 <tcp_write+0x1a0>
 8011d6c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011d70:	88fb      	ldrh	r3, [r7, #6]
 8011d72:	429a      	cmp	r2, r3
 8011d74:	d006      	beq.n	8011d84 <tcp_write+0x1a0>
 8011d76:	4b52      	ldr	r3, [pc, #328]	; (8011ec0 <tcp_write+0x2dc>)
 8011d78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011d7c:	4956      	ldr	r1, [pc, #344]	; (8011ed8 <tcp_write+0x2f4>)
 8011d7e:	4852      	ldr	r0, [pc, #328]	; (8011ec8 <tcp_write+0x2e4>)
 8011d80:	f005 f93e 	bl	8017000 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8011d84:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011d88:	88fb      	ldrh	r3, [r7, #6]
 8011d8a:	429a      	cmp	r2, r3
 8011d8c:	f080 8167 	bcs.w	801205e <tcp_write+0x47a>
 8011d90:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	f000 8163 	beq.w	801205e <tcp_write+0x47a>
 8011d98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d9a:	891b      	ldrh	r3, [r3, #8]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	f000 815e 	beq.w	801205e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8011da2:	88fa      	ldrh	r2, [r7, #6]
 8011da4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011da8:	1ad2      	subs	r2, r2, r3
 8011daa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011dac:	4293      	cmp	r3, r2
 8011dae:	bfa8      	it	ge
 8011db0:	4613      	movge	r3, r2
 8011db2:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8011db4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011db6:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011db8:	797b      	ldrb	r3, [r7, #5]
 8011dba:	f003 0301 	and.w	r3, r3, #1
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d027      	beq.n	8011e12 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8011dc2:	f107 0012 	add.w	r0, r7, #18
 8011dc6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011dc8:	8bf9      	ldrh	r1, [r7, #30]
 8011dca:	2301      	movs	r3, #1
 8011dcc:	9302      	str	r3, [sp, #8]
 8011dce:	797b      	ldrb	r3, [r7, #5]
 8011dd0:	9301      	str	r3, [sp, #4]
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	9300      	str	r3, [sp, #0]
 8011dd6:	4603      	mov	r3, r0
 8011dd8:	2000      	movs	r0, #0
 8011dda:	f7ff fe0f 	bl	80119fc <tcp_pbuf_prealloc>
 8011dde:	6578      	str	r0, [r7, #84]	; 0x54
 8011de0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	f000 8225 	beq.w	8012232 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8011de8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011dea:	6858      	ldr	r0, [r3, #4]
 8011dec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011df0:	68ba      	ldr	r2, [r7, #8]
 8011df2:	4413      	add	r3, r2
 8011df4:	8bfa      	ldrh	r2, [r7, #30]
 8011df6:	4619      	mov	r1, r3
 8011df8:	f005 f8d2 	bl	8016fa0 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8011dfc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011dfe:	f7fb fa79 	bl	800d2f4 <pbuf_clen>
 8011e02:	4603      	mov	r3, r0
 8011e04:	461a      	mov	r2, r3
 8011e06:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011e0a:	4413      	add	r3, r2
 8011e0c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8011e10:	e041      	b.n	8011e96 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8011e12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e14:	685b      	ldr	r3, [r3, #4]
 8011e16:	637b      	str	r3, [r7, #52]	; 0x34
 8011e18:	e002      	b.n	8011e20 <tcp_write+0x23c>
 8011e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	637b      	str	r3, [r7, #52]	; 0x34
 8011e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d1f8      	bne.n	8011e1a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e2a:	7b1b      	ldrb	r3, [r3, #12]
 8011e2c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d115      	bne.n	8011e60 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8011e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e36:	685b      	ldr	r3, [r3, #4]
 8011e38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011e3a:	8952      	ldrh	r2, [r2, #10]
 8011e3c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011e3e:	68ba      	ldr	r2, [r7, #8]
 8011e40:	429a      	cmp	r2, r3
 8011e42:	d10d      	bne.n	8011e60 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8011e44:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d006      	beq.n	8011e5a <tcp_write+0x276>
 8011e4c:	4b1c      	ldr	r3, [pc, #112]	; (8011ec0 <tcp_write+0x2dc>)
 8011e4e:	f240 2231 	movw	r2, #561	; 0x231
 8011e52:	4922      	ldr	r1, [pc, #136]	; (8011edc <tcp_write+0x2f8>)
 8011e54:	481c      	ldr	r0, [pc, #112]	; (8011ec8 <tcp_write+0x2e4>)
 8011e56:	f005 f8d3 	bl	8017000 <iprintf>
          extendlen = seglen;
 8011e5a:	8bfb      	ldrh	r3, [r7, #30]
 8011e5c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8011e5e:	e01a      	b.n	8011e96 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011e60:	8bfb      	ldrh	r3, [r7, #30]
 8011e62:	2201      	movs	r2, #1
 8011e64:	4619      	mov	r1, r3
 8011e66:	2000      	movs	r0, #0
 8011e68:	f7fa fea0 	bl	800cbac <pbuf_alloc>
 8011e6c:	6578      	str	r0, [r7, #84]	; 0x54
 8011e6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	f000 81e0 	beq.w	8012236 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8011e76:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011e7a:	68ba      	ldr	r2, [r7, #8]
 8011e7c:	441a      	add	r2, r3
 8011e7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e80:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8011e82:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011e84:	f7fb fa36 	bl	800d2f4 <pbuf_clen>
 8011e88:	4603      	mov	r3, r0
 8011e8a:	461a      	mov	r2, r3
 8011e8c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011e90:	4413      	add	r3, r2
 8011e92:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8011e96:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011e9a:	8bfb      	ldrh	r3, [r7, #30]
 8011e9c:	4413      	add	r3, r2
 8011e9e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011ea2:	e0dc      	b.n	801205e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	f000 80d7 	beq.w	801205e <tcp_write+0x47a>
 8011eb0:	4b03      	ldr	r3, [pc, #12]	; (8011ec0 <tcp_write+0x2dc>)
 8011eb2:	f240 224a 	movw	r2, #586	; 0x24a
 8011eb6:	490a      	ldr	r1, [pc, #40]	; (8011ee0 <tcp_write+0x2fc>)
 8011eb8:	4803      	ldr	r0, [pc, #12]	; (8011ec8 <tcp_write+0x2e4>)
 8011eba:	f005 f8a1 	bl	8017000 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8011ebe:	e0ce      	b.n	801205e <tcp_write+0x47a>
 8011ec0:	0801aacc 	.word	0x0801aacc
 8011ec4:	0801ac6c 	.word	0x0801ac6c
 8011ec8:	0801ab20 	.word	0x0801ab20
 8011ecc:	0801ac84 	.word	0x0801ac84
 8011ed0:	0801acb8 	.word	0x0801acb8
 8011ed4:	0801acd0 	.word	0x0801acd0
 8011ed8:	0801acf0 	.word	0x0801acf0
 8011edc:	0801ad10 	.word	0x0801ad10
 8011ee0:	0801ad3c 	.word	0x0801ad3c
    struct pbuf *p;
    u16_t left = len - pos;
 8011ee4:	88fa      	ldrh	r2, [r7, #6]
 8011ee6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011eea:	1ad3      	subs	r3, r2, r3
 8011eec:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8011eee:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011ef2:	b29b      	uxth	r3, r3
 8011ef4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011ef6:	1ad3      	subs	r3, r2, r3
 8011ef8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8011efa:	8b7a      	ldrh	r2, [r7, #26]
 8011efc:	8bbb      	ldrh	r3, [r7, #28]
 8011efe:	4293      	cmp	r3, r2
 8011f00:	bf28      	it	cs
 8011f02:	4613      	movcs	r3, r2
 8011f04:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011f06:	797b      	ldrb	r3, [r7, #5]
 8011f08:	f003 0301 	and.w	r3, r3, #1
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d036      	beq.n	8011f7e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8011f10:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011f14:	b29a      	uxth	r2, r3
 8011f16:	8b3b      	ldrh	r3, [r7, #24]
 8011f18:	4413      	add	r3, r2
 8011f1a:	b299      	uxth	r1, r3
 8011f1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	bf0c      	ite	eq
 8011f22:	2301      	moveq	r3, #1
 8011f24:	2300      	movne	r3, #0
 8011f26:	b2db      	uxtb	r3, r3
 8011f28:	f107 0012 	add.w	r0, r7, #18
 8011f2c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011f2e:	9302      	str	r3, [sp, #8]
 8011f30:	797b      	ldrb	r3, [r7, #5]
 8011f32:	9301      	str	r3, [sp, #4]
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	9300      	str	r3, [sp, #0]
 8011f38:	4603      	mov	r3, r0
 8011f3a:	2036      	movs	r0, #54	; 0x36
 8011f3c:	f7ff fd5e 	bl	80119fc <tcp_pbuf_prealloc>
 8011f40:	6338      	str	r0, [r7, #48]	; 0x30
 8011f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	f000 8178 	beq.w	801223a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8011f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f4c:	895b      	ldrh	r3, [r3, #10]
 8011f4e:	8b3a      	ldrh	r2, [r7, #24]
 8011f50:	429a      	cmp	r2, r3
 8011f52:	d906      	bls.n	8011f62 <tcp_write+0x37e>
 8011f54:	4b8c      	ldr	r3, [pc, #560]	; (8012188 <tcp_write+0x5a4>)
 8011f56:	f240 2266 	movw	r2, #614	; 0x266
 8011f5a:	498c      	ldr	r1, [pc, #560]	; (801218c <tcp_write+0x5a8>)
 8011f5c:	488c      	ldr	r0, [pc, #560]	; (8012190 <tcp_write+0x5ac>)
 8011f5e:	f005 f84f 	bl	8017000 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8011f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f64:	685a      	ldr	r2, [r3, #4]
 8011f66:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011f6a:	18d0      	adds	r0, r2, r3
 8011f6c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011f70:	68ba      	ldr	r2, [r7, #8]
 8011f72:	4413      	add	r3, r2
 8011f74:	8b3a      	ldrh	r2, [r7, #24]
 8011f76:	4619      	mov	r1, r3
 8011f78:	f005 f812 	bl	8016fa0 <memcpy>
 8011f7c:	e02f      	b.n	8011fde <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8011f7e:	8a7b      	ldrh	r3, [r7, #18]
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d006      	beq.n	8011f92 <tcp_write+0x3ae>
 8011f84:	4b80      	ldr	r3, [pc, #512]	; (8012188 <tcp_write+0x5a4>)
 8011f86:	f240 2271 	movw	r2, #625	; 0x271
 8011f8a:	4982      	ldr	r1, [pc, #520]	; (8012194 <tcp_write+0x5b0>)
 8011f8c:	4880      	ldr	r0, [pc, #512]	; (8012190 <tcp_write+0x5ac>)
 8011f8e:	f005 f837 	bl	8017000 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8011f92:	8b3b      	ldrh	r3, [r7, #24]
 8011f94:	2201      	movs	r2, #1
 8011f96:	4619      	mov	r1, r3
 8011f98:	2036      	movs	r0, #54	; 0x36
 8011f9a:	f7fa fe07 	bl	800cbac <pbuf_alloc>
 8011f9e:	6178      	str	r0, [r7, #20]
 8011fa0:	697b      	ldr	r3, [r7, #20]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	f000 814b 	beq.w	801223e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8011fa8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011fac:	68ba      	ldr	r2, [r7, #8]
 8011fae:	441a      	add	r2, r3
 8011fb0:	697b      	ldr	r3, [r7, #20]
 8011fb2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011fb4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011fb8:	b29b      	uxth	r3, r3
 8011fba:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011fbe:	4619      	mov	r1, r3
 8011fc0:	2036      	movs	r0, #54	; 0x36
 8011fc2:	f7fa fdf3 	bl	800cbac <pbuf_alloc>
 8011fc6:	6338      	str	r0, [r7, #48]	; 0x30
 8011fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d103      	bne.n	8011fd6 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8011fce:	6978      	ldr	r0, [r7, #20]
 8011fd0:	f7fb f902 	bl	800d1d8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8011fd4:	e136      	b.n	8012244 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8011fd6:	6979      	ldr	r1, [r7, #20]
 8011fd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011fda:	f7fb f9cb 	bl	800d374 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8011fde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011fe0:	f7fb f988 	bl	800d2f4 <pbuf_clen>
 8011fe4:	4603      	mov	r3, r0
 8011fe6:	461a      	mov	r2, r3
 8011fe8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011fec:	4413      	add	r3, r2
 8011fee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8011ff2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011ff6:	2b09      	cmp	r3, #9
 8011ff8:	d903      	bls.n	8012002 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8011ffa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ffc:	f7fb f8ec 	bl	800d1d8 <pbuf_free>
      goto memerr;
 8012000:	e120      	b.n	8012244 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012006:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801200a:	441a      	add	r2, r3
 801200c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012010:	9300      	str	r3, [sp, #0]
 8012012:	4613      	mov	r3, r2
 8012014:	2200      	movs	r2, #0
 8012016:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012018:	68f8      	ldr	r0, [r7, #12]
 801201a:	f7ff fc51 	bl	80118c0 <tcp_create_segment>
 801201e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012022:	2b00      	cmp	r3, #0
 8012024:	f000 810d 	beq.w	8012242 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8012028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801202a:	2b00      	cmp	r3, #0
 801202c:	d102      	bne.n	8012034 <tcp_write+0x450>
      queue = seg;
 801202e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012030:	647b      	str	r3, [r7, #68]	; 0x44
 8012032:	e00c      	b.n	801204e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8012034:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012036:	2b00      	cmp	r3, #0
 8012038:	d106      	bne.n	8012048 <tcp_write+0x464>
 801203a:	4b53      	ldr	r3, [pc, #332]	; (8012188 <tcp_write+0x5a4>)
 801203c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012040:	4955      	ldr	r1, [pc, #340]	; (8012198 <tcp_write+0x5b4>)
 8012042:	4853      	ldr	r0, [pc, #332]	; (8012190 <tcp_write+0x5ac>)
 8012044:	f004 ffdc 	bl	8017000 <iprintf>
      prev_seg->next = seg;
 8012048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801204a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801204c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801204e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012050:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8012052:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012056:	8b3b      	ldrh	r3, [r7, #24]
 8012058:	4413      	add	r3, r2
 801205a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801205e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012062:	88fb      	ldrh	r3, [r7, #6]
 8012064:	429a      	cmp	r2, r3
 8012066:	f4ff af3d 	bcc.w	8011ee4 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801206a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801206c:	2b00      	cmp	r3, #0
 801206e:	d02c      	beq.n	80120ca <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8012070:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012072:	685b      	ldr	r3, [r3, #4]
 8012074:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012076:	e01e      	b.n	80120b6 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8012078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801207a:	891a      	ldrh	r2, [r3, #8]
 801207c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801207e:	4413      	add	r3, r2
 8012080:	b29a      	uxth	r2, r3
 8012082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012084:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8012086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d110      	bne.n	80120b0 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801208e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012090:	685b      	ldr	r3, [r3, #4]
 8012092:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012094:	8952      	ldrh	r2, [r2, #10]
 8012096:	4413      	add	r3, r2
 8012098:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801209a:	68b9      	ldr	r1, [r7, #8]
 801209c:	4618      	mov	r0, r3
 801209e:	f004 ff7f 	bl	8016fa0 <memcpy>
        p->len += oversize_used;
 80120a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120a4:	895a      	ldrh	r2, [r3, #10]
 80120a6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80120a8:	4413      	add	r3, r2
 80120aa:	b29a      	uxth	r2, r3
 80120ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120ae:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80120b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80120b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d1dd      	bne.n	8012078 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80120bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120be:	891a      	ldrh	r2, [r3, #8]
 80120c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80120c2:	4413      	add	r3, r2
 80120c4:	b29a      	uxth	r2, r3
 80120c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120c8:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80120ca:	8a7a      	ldrh	r2, [r7, #18]
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80120d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d018      	beq.n	801210a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80120d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d106      	bne.n	80120ec <tcp_write+0x508>
 80120de:	4b2a      	ldr	r3, [pc, #168]	; (8012188 <tcp_write+0x5a4>)
 80120e0:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80120e4:	492d      	ldr	r1, [pc, #180]	; (801219c <tcp_write+0x5b8>)
 80120e6:	482a      	ldr	r0, [pc, #168]	; (8012190 <tcp_write+0x5ac>)
 80120e8:	f004 ff8a 	bl	8017000 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80120ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120ee:	685b      	ldr	r3, [r3, #4]
 80120f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80120f2:	4618      	mov	r0, r3
 80120f4:	f7fb f93e 	bl	800d374 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80120f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120fa:	891a      	ldrh	r2, [r3, #8]
 80120fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80120fe:	891b      	ldrh	r3, [r3, #8]
 8012100:	4413      	add	r3, r2
 8012102:	b29a      	uxth	r2, r3
 8012104:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012106:	811a      	strh	r2, [r3, #8]
 8012108:	e037      	b.n	801217a <tcp_write+0x596>
  } else if (extendlen > 0) {
 801210a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801210c:	2b00      	cmp	r3, #0
 801210e:	d034      	beq.n	801217a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012112:	2b00      	cmp	r3, #0
 8012114:	d003      	beq.n	801211e <tcp_write+0x53a>
 8012116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012118:	685b      	ldr	r3, [r3, #4]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d106      	bne.n	801212c <tcp_write+0x548>
 801211e:	4b1a      	ldr	r3, [pc, #104]	; (8012188 <tcp_write+0x5a4>)
 8012120:	f240 22e6 	movw	r2, #742	; 0x2e6
 8012124:	491e      	ldr	r1, [pc, #120]	; (80121a0 <tcp_write+0x5bc>)
 8012126:	481a      	ldr	r0, [pc, #104]	; (8012190 <tcp_write+0x5ac>)
 8012128:	f004 ff6a 	bl	8017000 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801212c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801212e:	685b      	ldr	r3, [r3, #4]
 8012130:	62bb      	str	r3, [r7, #40]	; 0x28
 8012132:	e009      	b.n	8012148 <tcp_write+0x564>
      p->tot_len += extendlen;
 8012134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012136:	891a      	ldrh	r2, [r3, #8]
 8012138:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801213a:	4413      	add	r3, r2
 801213c:	b29a      	uxth	r2, r3
 801213e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012140:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	62bb      	str	r3, [r7, #40]	; 0x28
 8012148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	2b00      	cmp	r3, #0
 801214e:	d1f1      	bne.n	8012134 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8012150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012152:	891a      	ldrh	r2, [r3, #8]
 8012154:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012156:	4413      	add	r3, r2
 8012158:	b29a      	uxth	r2, r3
 801215a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801215c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801215e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012160:	895a      	ldrh	r2, [r3, #10]
 8012162:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012164:	4413      	add	r3, r2
 8012166:	b29a      	uxth	r2, r3
 8012168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801216a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801216c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801216e:	891a      	ldrh	r2, [r3, #8]
 8012170:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012172:	4413      	add	r3, r2
 8012174:	b29a      	uxth	r2, r3
 8012176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012178:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801217a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801217c:	2b00      	cmp	r3, #0
 801217e:	d111      	bne.n	80121a4 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012184:	66da      	str	r2, [r3, #108]	; 0x6c
 8012186:	e010      	b.n	80121aa <tcp_write+0x5c6>
 8012188:	0801aacc 	.word	0x0801aacc
 801218c:	0801ad6c 	.word	0x0801ad6c
 8012190:	0801ab20 	.word	0x0801ab20
 8012194:	0801adac 	.word	0x0801adac
 8012198:	0801adbc 	.word	0x0801adbc
 801219c:	0801add0 	.word	0x0801add0
 80121a0:	0801ae08 	.word	0x0801ae08
  } else {
    last_unsent->next = queue;
 80121a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80121a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80121a8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80121ae:	88fb      	ldrh	r3, [r7, #6]
 80121b0:	441a      	add	r2, r3
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80121bc:	88fb      	ldrh	r3, [r7, #6]
 80121be:	1ad3      	subs	r3, r2, r3
 80121c0:	b29a      	uxth	r2, r3
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80121ce:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d00e      	beq.n	80121fa <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d10a      	bne.n	80121fa <tcp_write+0x616>
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d106      	bne.n	80121fa <tcp_write+0x616>
 80121ec:	4b2c      	ldr	r3, [pc, #176]	; (80122a0 <tcp_write+0x6bc>)
 80121ee:	f240 3212 	movw	r2, #786	; 0x312
 80121f2:	492c      	ldr	r1, [pc, #176]	; (80122a4 <tcp_write+0x6c0>)
 80121f4:	482c      	ldr	r0, [pc, #176]	; (80122a8 <tcp_write+0x6c4>)
 80121f6:	f004 ff03 	bl	8017000 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80121fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d016      	beq.n	801222e <tcp_write+0x64a>
 8012200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012202:	68db      	ldr	r3, [r3, #12]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d012      	beq.n	801222e <tcp_write+0x64a>
 8012208:	797b      	ldrb	r3, [r7, #5]
 801220a:	f003 0302 	and.w	r3, r3, #2
 801220e:	2b00      	cmp	r3, #0
 8012210:	d10d      	bne.n	801222e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8012212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012214:	68db      	ldr	r3, [r3, #12]
 8012216:	899b      	ldrh	r3, [r3, #12]
 8012218:	b29c      	uxth	r4, r3
 801221a:	2008      	movs	r0, #8
 801221c:	f7f9 fbfe 	bl	800ba1c <lwip_htons>
 8012220:	4603      	mov	r3, r0
 8012222:	461a      	mov	r2, r3
 8012224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012226:	68db      	ldr	r3, [r3, #12]
 8012228:	4322      	orrs	r2, r4
 801222a:	b292      	uxth	r2, r2
 801222c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801222e:	2300      	movs	r3, #0
 8012230:	e031      	b.n	8012296 <tcp_write+0x6b2>
          goto memerr;
 8012232:	bf00      	nop
 8012234:	e006      	b.n	8012244 <tcp_write+0x660>
            goto memerr;
 8012236:	bf00      	nop
 8012238:	e004      	b.n	8012244 <tcp_write+0x660>
        goto memerr;
 801223a:	bf00      	nop
 801223c:	e002      	b.n	8012244 <tcp_write+0x660>
        goto memerr;
 801223e:	bf00      	nop
 8012240:	e000      	b.n	8012244 <tcp_write+0x660>
      goto memerr;
 8012242:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	8b5b      	ldrh	r3, [r3, #26]
 8012248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801224c:	b29a      	uxth	r2, r3
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8012252:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012254:	2b00      	cmp	r3, #0
 8012256:	d002      	beq.n	801225e <tcp_write+0x67a>
    pbuf_free(concat_p);
 8012258:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801225a:	f7fa ffbd 	bl	800d1d8 <pbuf_free>
  }
  if (queue != NULL) {
 801225e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012260:	2b00      	cmp	r3, #0
 8012262:	d002      	beq.n	801226a <tcp_write+0x686>
    tcp_segs_free(queue);
 8012264:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012266:	f7fc fb6b 	bl	800e940 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012270:	2b00      	cmp	r3, #0
 8012272:	d00e      	beq.n	8012292 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012278:	2b00      	cmp	r3, #0
 801227a:	d10a      	bne.n	8012292 <tcp_write+0x6ae>
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012280:	2b00      	cmp	r3, #0
 8012282:	d106      	bne.n	8012292 <tcp_write+0x6ae>
 8012284:	4b06      	ldr	r3, [pc, #24]	; (80122a0 <tcp_write+0x6bc>)
 8012286:	f240 3227 	movw	r2, #807	; 0x327
 801228a:	4906      	ldr	r1, [pc, #24]	; (80122a4 <tcp_write+0x6c0>)
 801228c:	4806      	ldr	r0, [pc, #24]	; (80122a8 <tcp_write+0x6c4>)
 801228e:	f004 feb7 	bl	8017000 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8012292:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012296:	4618      	mov	r0, r3
 8012298:	375c      	adds	r7, #92	; 0x5c
 801229a:	46bd      	mov	sp, r7
 801229c:	bd90      	pop	{r4, r7, pc}
 801229e:	bf00      	nop
 80122a0:	0801aacc 	.word	0x0801aacc
 80122a4:	0801ae40 	.word	0x0801ae40
 80122a8:	0801ab20 	.word	0x0801ab20

080122ac <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80122ac:	b590      	push	{r4, r7, lr}
 80122ae:	b08b      	sub	sp, #44	; 0x2c
 80122b0:	af02      	add	r7, sp, #8
 80122b2:	6078      	str	r0, [r7, #4]
 80122b4:	460b      	mov	r3, r1
 80122b6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80122b8:	2300      	movs	r3, #0
 80122ba:	61fb      	str	r3, [r7, #28]
 80122bc:	2300      	movs	r3, #0
 80122be:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80122c0:	2300      	movs	r3, #0
 80122c2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d106      	bne.n	80122d8 <tcp_split_unsent_seg+0x2c>
 80122ca:	4b95      	ldr	r3, [pc, #596]	; (8012520 <tcp_split_unsent_seg+0x274>)
 80122cc:	f240 324b 	movw	r2, #843	; 0x34b
 80122d0:	4994      	ldr	r1, [pc, #592]	; (8012524 <tcp_split_unsent_seg+0x278>)
 80122d2:	4895      	ldr	r0, [pc, #596]	; (8012528 <tcp_split_unsent_seg+0x27c>)
 80122d4:	f004 fe94 	bl	8017000 <iprintf>

  useg = pcb->unsent;
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80122dc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80122de:	697b      	ldr	r3, [r7, #20]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d102      	bne.n	80122ea <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80122e4:	f04f 33ff 	mov.w	r3, #4294967295
 80122e8:	e116      	b.n	8012518 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80122ea:	887b      	ldrh	r3, [r7, #2]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d109      	bne.n	8012304 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80122f0:	4b8b      	ldr	r3, [pc, #556]	; (8012520 <tcp_split_unsent_seg+0x274>)
 80122f2:	f240 3253 	movw	r2, #851	; 0x353
 80122f6:	498d      	ldr	r1, [pc, #564]	; (801252c <tcp_split_unsent_seg+0x280>)
 80122f8:	488b      	ldr	r0, [pc, #556]	; (8012528 <tcp_split_unsent_seg+0x27c>)
 80122fa:	f004 fe81 	bl	8017000 <iprintf>
    return ERR_VAL;
 80122fe:	f06f 0305 	mvn.w	r3, #5
 8012302:	e109      	b.n	8012518 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012304:	697b      	ldr	r3, [r7, #20]
 8012306:	891b      	ldrh	r3, [r3, #8]
 8012308:	887a      	ldrh	r2, [r7, #2]
 801230a:	429a      	cmp	r2, r3
 801230c:	d301      	bcc.n	8012312 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801230e:	2300      	movs	r3, #0
 8012310:	e102      	b.n	8012518 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012316:	887a      	ldrh	r2, [r7, #2]
 8012318:	429a      	cmp	r2, r3
 801231a:	d906      	bls.n	801232a <tcp_split_unsent_seg+0x7e>
 801231c:	4b80      	ldr	r3, [pc, #512]	; (8012520 <tcp_split_unsent_seg+0x274>)
 801231e:	f240 325b 	movw	r2, #859	; 0x35b
 8012322:	4983      	ldr	r1, [pc, #524]	; (8012530 <tcp_split_unsent_seg+0x284>)
 8012324:	4880      	ldr	r0, [pc, #512]	; (8012528 <tcp_split_unsent_seg+0x27c>)
 8012326:	f004 fe6b 	bl	8017000 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801232a:	697b      	ldr	r3, [r7, #20]
 801232c:	891b      	ldrh	r3, [r3, #8]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d106      	bne.n	8012340 <tcp_split_unsent_seg+0x94>
 8012332:	4b7b      	ldr	r3, [pc, #492]	; (8012520 <tcp_split_unsent_seg+0x274>)
 8012334:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8012338:	497e      	ldr	r1, [pc, #504]	; (8012534 <tcp_split_unsent_seg+0x288>)
 801233a:	487b      	ldr	r0, [pc, #492]	; (8012528 <tcp_split_unsent_seg+0x27c>)
 801233c:	f004 fe60 	bl	8017000 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012340:	697b      	ldr	r3, [r7, #20]
 8012342:	7a9b      	ldrb	r3, [r3, #10]
 8012344:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012346:	7bfb      	ldrb	r3, [r7, #15]
 8012348:	009b      	lsls	r3, r3, #2
 801234a:	b2db      	uxtb	r3, r3
 801234c:	f003 0304 	and.w	r3, r3, #4
 8012350:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8012352:	697b      	ldr	r3, [r7, #20]
 8012354:	891a      	ldrh	r2, [r3, #8]
 8012356:	887b      	ldrh	r3, [r7, #2]
 8012358:	1ad3      	subs	r3, r2, r3
 801235a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801235c:	7bbb      	ldrb	r3, [r7, #14]
 801235e:	b29a      	uxth	r2, r3
 8012360:	89bb      	ldrh	r3, [r7, #12]
 8012362:	4413      	add	r3, r2
 8012364:	b29b      	uxth	r3, r3
 8012366:	f44f 7220 	mov.w	r2, #640	; 0x280
 801236a:	4619      	mov	r1, r3
 801236c:	2036      	movs	r0, #54	; 0x36
 801236e:	f7fa fc1d 	bl	800cbac <pbuf_alloc>
 8012372:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012374:	693b      	ldr	r3, [r7, #16]
 8012376:	2b00      	cmp	r3, #0
 8012378:	f000 80b7 	beq.w	80124ea <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801237c:	697b      	ldr	r3, [r7, #20]
 801237e:	685b      	ldr	r3, [r3, #4]
 8012380:	891a      	ldrh	r2, [r3, #8]
 8012382:	697b      	ldr	r3, [r7, #20]
 8012384:	891b      	ldrh	r3, [r3, #8]
 8012386:	1ad3      	subs	r3, r2, r3
 8012388:	b29a      	uxth	r2, r3
 801238a:	887b      	ldrh	r3, [r7, #2]
 801238c:	4413      	add	r3, r2
 801238e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012390:	697b      	ldr	r3, [r7, #20]
 8012392:	6858      	ldr	r0, [r3, #4]
 8012394:	693b      	ldr	r3, [r7, #16]
 8012396:	685a      	ldr	r2, [r3, #4]
 8012398:	7bbb      	ldrb	r3, [r7, #14]
 801239a:	18d1      	adds	r1, r2, r3
 801239c:	897b      	ldrh	r3, [r7, #10]
 801239e:	89ba      	ldrh	r2, [r7, #12]
 80123a0:	f7fb f920 	bl	800d5e4 <pbuf_copy_partial>
 80123a4:	4603      	mov	r3, r0
 80123a6:	461a      	mov	r2, r3
 80123a8:	89bb      	ldrh	r3, [r7, #12]
 80123aa:	4293      	cmp	r3, r2
 80123ac:	f040 809f 	bne.w	80124ee <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80123b0:	697b      	ldr	r3, [r7, #20]
 80123b2:	68db      	ldr	r3, [r3, #12]
 80123b4:	899b      	ldrh	r3, [r3, #12]
 80123b6:	b29b      	uxth	r3, r3
 80123b8:	4618      	mov	r0, r3
 80123ba:	f7f9 fb2f 	bl	800ba1c <lwip_htons>
 80123be:	4603      	mov	r3, r0
 80123c0:	b2db      	uxtb	r3, r3
 80123c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80123c6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80123c8:	2300      	movs	r3, #0
 80123ca:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80123cc:	7efb      	ldrb	r3, [r7, #27]
 80123ce:	f003 0308 	and.w	r3, r3, #8
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d007      	beq.n	80123e6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80123d6:	7efb      	ldrb	r3, [r7, #27]
 80123d8:	f023 0308 	bic.w	r3, r3, #8
 80123dc:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80123de:	7ebb      	ldrb	r3, [r7, #26]
 80123e0:	f043 0308 	orr.w	r3, r3, #8
 80123e4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80123e6:	7efb      	ldrb	r3, [r7, #27]
 80123e8:	f003 0301 	and.w	r3, r3, #1
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d007      	beq.n	8012400 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80123f0:	7efb      	ldrb	r3, [r7, #27]
 80123f2:	f023 0301 	bic.w	r3, r3, #1
 80123f6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80123f8:	7ebb      	ldrb	r3, [r7, #26]
 80123fa:	f043 0301 	orr.w	r3, r3, #1
 80123fe:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012400:	697b      	ldr	r3, [r7, #20]
 8012402:	68db      	ldr	r3, [r3, #12]
 8012404:	685b      	ldr	r3, [r3, #4]
 8012406:	4618      	mov	r0, r3
 8012408:	f7f9 fb1d 	bl	800ba46 <lwip_htonl>
 801240c:	4602      	mov	r2, r0
 801240e:	887b      	ldrh	r3, [r7, #2]
 8012410:	18d1      	adds	r1, r2, r3
 8012412:	7eba      	ldrb	r2, [r7, #26]
 8012414:	7bfb      	ldrb	r3, [r7, #15]
 8012416:	9300      	str	r3, [sp, #0]
 8012418:	460b      	mov	r3, r1
 801241a:	6939      	ldr	r1, [r7, #16]
 801241c:	6878      	ldr	r0, [r7, #4]
 801241e:	f7ff fa4f 	bl	80118c0 <tcp_create_segment>
 8012422:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012424:	69fb      	ldr	r3, [r7, #28]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d063      	beq.n	80124f2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801242a:	697b      	ldr	r3, [r7, #20]
 801242c:	685b      	ldr	r3, [r3, #4]
 801242e:	4618      	mov	r0, r3
 8012430:	f7fa ff60 	bl	800d2f4 <pbuf_clen>
 8012434:	4603      	mov	r3, r0
 8012436:	461a      	mov	r2, r3
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801243e:	1a9b      	subs	r3, r3, r2
 8012440:	b29a      	uxth	r2, r3
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012448:	697b      	ldr	r3, [r7, #20]
 801244a:	6858      	ldr	r0, [r3, #4]
 801244c:	697b      	ldr	r3, [r7, #20]
 801244e:	685b      	ldr	r3, [r3, #4]
 8012450:	891a      	ldrh	r2, [r3, #8]
 8012452:	89bb      	ldrh	r3, [r7, #12]
 8012454:	1ad3      	subs	r3, r2, r3
 8012456:	b29b      	uxth	r3, r3
 8012458:	4619      	mov	r1, r3
 801245a:	f7fa fd05 	bl	800ce68 <pbuf_realloc>
  useg->len -= remainder;
 801245e:	697b      	ldr	r3, [r7, #20]
 8012460:	891a      	ldrh	r2, [r3, #8]
 8012462:	89bb      	ldrh	r3, [r7, #12]
 8012464:	1ad3      	subs	r3, r2, r3
 8012466:	b29a      	uxth	r2, r3
 8012468:	697b      	ldr	r3, [r7, #20]
 801246a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801246c:	697b      	ldr	r3, [r7, #20]
 801246e:	68db      	ldr	r3, [r3, #12]
 8012470:	899b      	ldrh	r3, [r3, #12]
 8012472:	b29c      	uxth	r4, r3
 8012474:	7efb      	ldrb	r3, [r7, #27]
 8012476:	b29b      	uxth	r3, r3
 8012478:	4618      	mov	r0, r3
 801247a:	f7f9 facf 	bl	800ba1c <lwip_htons>
 801247e:	4603      	mov	r3, r0
 8012480:	461a      	mov	r2, r3
 8012482:	697b      	ldr	r3, [r7, #20]
 8012484:	68db      	ldr	r3, [r3, #12]
 8012486:	4322      	orrs	r2, r4
 8012488:	b292      	uxth	r2, r2
 801248a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801248c:	697b      	ldr	r3, [r7, #20]
 801248e:	685b      	ldr	r3, [r3, #4]
 8012490:	4618      	mov	r0, r3
 8012492:	f7fa ff2f 	bl	800d2f4 <pbuf_clen>
 8012496:	4603      	mov	r3, r0
 8012498:	461a      	mov	r2, r3
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80124a0:	4413      	add	r3, r2
 80124a2:	b29a      	uxth	r2, r3
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80124aa:	69fb      	ldr	r3, [r7, #28]
 80124ac:	685b      	ldr	r3, [r3, #4]
 80124ae:	4618      	mov	r0, r3
 80124b0:	f7fa ff20 	bl	800d2f4 <pbuf_clen>
 80124b4:	4603      	mov	r3, r0
 80124b6:	461a      	mov	r2, r3
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80124be:	4413      	add	r3, r2
 80124c0:	b29a      	uxth	r2, r3
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80124c8:	697b      	ldr	r3, [r7, #20]
 80124ca:	681a      	ldr	r2, [r3, #0]
 80124cc:	69fb      	ldr	r3, [r7, #28]
 80124ce:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80124d0:	697b      	ldr	r3, [r7, #20]
 80124d2:	69fa      	ldr	r2, [r7, #28]
 80124d4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80124d6:	69fb      	ldr	r3, [r7, #28]
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d103      	bne.n	80124e6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	2200      	movs	r2, #0
 80124e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80124e6:	2300      	movs	r3, #0
 80124e8:	e016      	b.n	8012518 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80124ea:	bf00      	nop
 80124ec:	e002      	b.n	80124f4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80124ee:	bf00      	nop
 80124f0:	e000      	b.n	80124f4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80124f2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80124f4:	69fb      	ldr	r3, [r7, #28]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d006      	beq.n	8012508 <tcp_split_unsent_seg+0x25c>
 80124fa:	4b09      	ldr	r3, [pc, #36]	; (8012520 <tcp_split_unsent_seg+0x274>)
 80124fc:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8012500:	490d      	ldr	r1, [pc, #52]	; (8012538 <tcp_split_unsent_seg+0x28c>)
 8012502:	4809      	ldr	r0, [pc, #36]	; (8012528 <tcp_split_unsent_seg+0x27c>)
 8012504:	f004 fd7c 	bl	8017000 <iprintf>
  if (p != NULL) {
 8012508:	693b      	ldr	r3, [r7, #16]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d002      	beq.n	8012514 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801250e:	6938      	ldr	r0, [r7, #16]
 8012510:	f7fa fe62 	bl	800d1d8 <pbuf_free>
  }

  return ERR_MEM;
 8012514:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012518:	4618      	mov	r0, r3
 801251a:	3724      	adds	r7, #36	; 0x24
 801251c:	46bd      	mov	sp, r7
 801251e:	bd90      	pop	{r4, r7, pc}
 8012520:	0801aacc 	.word	0x0801aacc
 8012524:	0801ae60 	.word	0x0801ae60
 8012528:	0801ab20 	.word	0x0801ab20
 801252c:	0801ae84 	.word	0x0801ae84
 8012530:	0801aea8 	.word	0x0801aea8
 8012534:	0801aeb8 	.word	0x0801aeb8
 8012538:	0801aec8 	.word	0x0801aec8

0801253c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801253c:	b590      	push	{r4, r7, lr}
 801253e:	b085      	sub	sp, #20
 8012540:	af00      	add	r7, sp, #0
 8012542:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d106      	bne.n	8012558 <tcp_send_fin+0x1c>
 801254a:	4b21      	ldr	r3, [pc, #132]	; (80125d0 <tcp_send_fin+0x94>)
 801254c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8012550:	4920      	ldr	r1, [pc, #128]	; (80125d4 <tcp_send_fin+0x98>)
 8012552:	4821      	ldr	r0, [pc, #132]	; (80125d8 <tcp_send_fin+0x9c>)
 8012554:	f004 fd54 	bl	8017000 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801255c:	2b00      	cmp	r3, #0
 801255e:	d02e      	beq.n	80125be <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012564:	60fb      	str	r3, [r7, #12]
 8012566:	e002      	b.n	801256e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	681b      	ldr	r3, [r3, #0]
 801256c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	2b00      	cmp	r3, #0
 8012574:	d1f8      	bne.n	8012568 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	68db      	ldr	r3, [r3, #12]
 801257a:	899b      	ldrh	r3, [r3, #12]
 801257c:	b29b      	uxth	r3, r3
 801257e:	4618      	mov	r0, r3
 8012580:	f7f9 fa4c 	bl	800ba1c <lwip_htons>
 8012584:	4603      	mov	r3, r0
 8012586:	b2db      	uxtb	r3, r3
 8012588:	f003 0307 	and.w	r3, r3, #7
 801258c:	2b00      	cmp	r3, #0
 801258e:	d116      	bne.n	80125be <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	68db      	ldr	r3, [r3, #12]
 8012594:	899b      	ldrh	r3, [r3, #12]
 8012596:	b29c      	uxth	r4, r3
 8012598:	2001      	movs	r0, #1
 801259a:	f7f9 fa3f 	bl	800ba1c <lwip_htons>
 801259e:	4603      	mov	r3, r0
 80125a0:	461a      	mov	r2, r3
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	68db      	ldr	r3, [r3, #12]
 80125a6:	4322      	orrs	r2, r4
 80125a8:	b292      	uxth	r2, r2
 80125aa:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	8b5b      	ldrh	r3, [r3, #26]
 80125b0:	f043 0320 	orr.w	r3, r3, #32
 80125b4:	b29a      	uxth	r2, r3
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80125ba:	2300      	movs	r3, #0
 80125bc:	e004      	b.n	80125c8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80125be:	2101      	movs	r1, #1
 80125c0:	6878      	ldr	r0, [r7, #4]
 80125c2:	f000 f80b 	bl	80125dc <tcp_enqueue_flags>
 80125c6:	4603      	mov	r3, r0
}
 80125c8:	4618      	mov	r0, r3
 80125ca:	3714      	adds	r7, #20
 80125cc:	46bd      	mov	sp, r7
 80125ce:	bd90      	pop	{r4, r7, pc}
 80125d0:	0801aacc 	.word	0x0801aacc
 80125d4:	0801aed4 	.word	0x0801aed4
 80125d8:	0801ab20 	.word	0x0801ab20

080125dc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80125dc:	b580      	push	{r7, lr}
 80125de:	b08a      	sub	sp, #40	; 0x28
 80125e0:	af02      	add	r7, sp, #8
 80125e2:	6078      	str	r0, [r7, #4]
 80125e4:	460b      	mov	r3, r1
 80125e6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80125e8:	2300      	movs	r3, #0
 80125ea:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80125ec:	2300      	movs	r3, #0
 80125ee:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80125f0:	78fb      	ldrb	r3, [r7, #3]
 80125f2:	f003 0303 	and.w	r3, r3, #3
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d106      	bne.n	8012608 <tcp_enqueue_flags+0x2c>
 80125fa:	4b67      	ldr	r3, [pc, #412]	; (8012798 <tcp_enqueue_flags+0x1bc>)
 80125fc:	f240 4211 	movw	r2, #1041	; 0x411
 8012600:	4966      	ldr	r1, [pc, #408]	; (801279c <tcp_enqueue_flags+0x1c0>)
 8012602:	4867      	ldr	r0, [pc, #412]	; (80127a0 <tcp_enqueue_flags+0x1c4>)
 8012604:	f004 fcfc 	bl	8017000 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d106      	bne.n	801261c <tcp_enqueue_flags+0x40>
 801260e:	4b62      	ldr	r3, [pc, #392]	; (8012798 <tcp_enqueue_flags+0x1bc>)
 8012610:	f240 4213 	movw	r2, #1043	; 0x413
 8012614:	4963      	ldr	r1, [pc, #396]	; (80127a4 <tcp_enqueue_flags+0x1c8>)
 8012616:	4862      	ldr	r0, [pc, #392]	; (80127a0 <tcp_enqueue_flags+0x1c4>)
 8012618:	f004 fcf2 	bl	8017000 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801261c:	78fb      	ldrb	r3, [r7, #3]
 801261e:	f003 0302 	and.w	r3, r3, #2
 8012622:	2b00      	cmp	r3, #0
 8012624:	d001      	beq.n	801262a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8012626:	2301      	movs	r3, #1
 8012628:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801262a:	7ffb      	ldrb	r3, [r7, #31]
 801262c:	009b      	lsls	r3, r3, #2
 801262e:	b2db      	uxtb	r3, r3
 8012630:	f003 0304 	and.w	r3, r3, #4
 8012634:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012636:	7dfb      	ldrb	r3, [r7, #23]
 8012638:	b29b      	uxth	r3, r3
 801263a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801263e:	4619      	mov	r1, r3
 8012640:	2036      	movs	r0, #54	; 0x36
 8012642:	f7fa fab3 	bl	800cbac <pbuf_alloc>
 8012646:	6138      	str	r0, [r7, #16]
 8012648:	693b      	ldr	r3, [r7, #16]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d109      	bne.n	8012662 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	8b5b      	ldrh	r3, [r3, #26]
 8012652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012656:	b29a      	uxth	r2, r3
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801265c:	f04f 33ff 	mov.w	r3, #4294967295
 8012660:	e095      	b.n	801278e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012662:	693b      	ldr	r3, [r7, #16]
 8012664:	895a      	ldrh	r2, [r3, #10]
 8012666:	7dfb      	ldrb	r3, [r7, #23]
 8012668:	b29b      	uxth	r3, r3
 801266a:	429a      	cmp	r2, r3
 801266c:	d206      	bcs.n	801267c <tcp_enqueue_flags+0xa0>
 801266e:	4b4a      	ldr	r3, [pc, #296]	; (8012798 <tcp_enqueue_flags+0x1bc>)
 8012670:	f240 4239 	movw	r2, #1081	; 0x439
 8012674:	494c      	ldr	r1, [pc, #304]	; (80127a8 <tcp_enqueue_flags+0x1cc>)
 8012676:	484a      	ldr	r0, [pc, #296]	; (80127a0 <tcp_enqueue_flags+0x1c4>)
 8012678:	f004 fcc2 	bl	8017000 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012680:	78fa      	ldrb	r2, [r7, #3]
 8012682:	7ffb      	ldrb	r3, [r7, #31]
 8012684:	9300      	str	r3, [sp, #0]
 8012686:	460b      	mov	r3, r1
 8012688:	6939      	ldr	r1, [r7, #16]
 801268a:	6878      	ldr	r0, [r7, #4]
 801268c:	f7ff f918 	bl	80118c0 <tcp_create_segment>
 8012690:	60f8      	str	r0, [r7, #12]
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d109      	bne.n	80126ac <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	8b5b      	ldrh	r3, [r3, #26]
 801269c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80126a0:	b29a      	uxth	r2, r3
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80126a6:	f04f 33ff 	mov.w	r3, #4294967295
 80126aa:	e070      	b.n	801278e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	68db      	ldr	r3, [r3, #12]
 80126b0:	f003 0303 	and.w	r3, r3, #3
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d006      	beq.n	80126c6 <tcp_enqueue_flags+0xea>
 80126b8:	4b37      	ldr	r3, [pc, #220]	; (8012798 <tcp_enqueue_flags+0x1bc>)
 80126ba:	f240 4242 	movw	r2, #1090	; 0x442
 80126be:	493b      	ldr	r1, [pc, #236]	; (80127ac <tcp_enqueue_flags+0x1d0>)
 80126c0:	4837      	ldr	r0, [pc, #220]	; (80127a0 <tcp_enqueue_flags+0x1c4>)
 80126c2:	f004 fc9d 	bl	8017000 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	891b      	ldrh	r3, [r3, #8]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d006      	beq.n	80126dc <tcp_enqueue_flags+0x100>
 80126ce:	4b32      	ldr	r3, [pc, #200]	; (8012798 <tcp_enqueue_flags+0x1bc>)
 80126d0:	f240 4243 	movw	r2, #1091	; 0x443
 80126d4:	4936      	ldr	r1, [pc, #216]	; (80127b0 <tcp_enqueue_flags+0x1d4>)
 80126d6:	4832      	ldr	r0, [pc, #200]	; (80127a0 <tcp_enqueue_flags+0x1c4>)
 80126d8:	f004 fc92 	bl	8017000 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d103      	bne.n	80126ec <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	68fa      	ldr	r2, [r7, #12]
 80126e8:	66da      	str	r2, [r3, #108]	; 0x6c
 80126ea:	e00d      	b.n	8012708 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80126f0:	61bb      	str	r3, [r7, #24]
 80126f2:	e002      	b.n	80126fa <tcp_enqueue_flags+0x11e>
 80126f4:	69bb      	ldr	r3, [r7, #24]
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	61bb      	str	r3, [r7, #24]
 80126fa:	69bb      	ldr	r3, [r7, #24]
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d1f8      	bne.n	80126f4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012702:	69bb      	ldr	r3, [r7, #24]
 8012704:	68fa      	ldr	r2, [r7, #12]
 8012706:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	2200      	movs	r2, #0
 801270c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012710:	78fb      	ldrb	r3, [r7, #3]
 8012712:	f003 0302 	and.w	r3, r3, #2
 8012716:	2b00      	cmp	r3, #0
 8012718:	d104      	bne.n	8012724 <tcp_enqueue_flags+0x148>
 801271a:	78fb      	ldrb	r3, [r7, #3]
 801271c:	f003 0301 	and.w	r3, r3, #1
 8012720:	2b00      	cmp	r3, #0
 8012722:	d004      	beq.n	801272e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012728:	1c5a      	adds	r2, r3, #1
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801272e:	78fb      	ldrb	r3, [r7, #3]
 8012730:	f003 0301 	and.w	r3, r3, #1
 8012734:	2b00      	cmp	r3, #0
 8012736:	d006      	beq.n	8012746 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	8b5b      	ldrh	r3, [r3, #26]
 801273c:	f043 0320 	orr.w	r3, r3, #32
 8012740:	b29a      	uxth	r2, r3
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	685b      	ldr	r3, [r3, #4]
 801274a:	4618      	mov	r0, r3
 801274c:	f7fa fdd2 	bl	800d2f4 <pbuf_clen>
 8012750:	4603      	mov	r3, r0
 8012752:	461a      	mov	r2, r3
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801275a:	4413      	add	r3, r2
 801275c:	b29a      	uxth	r2, r3
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801276a:	2b00      	cmp	r3, #0
 801276c:	d00e      	beq.n	801278c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012772:	2b00      	cmp	r3, #0
 8012774:	d10a      	bne.n	801278c <tcp_enqueue_flags+0x1b0>
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801277a:	2b00      	cmp	r3, #0
 801277c:	d106      	bne.n	801278c <tcp_enqueue_flags+0x1b0>
 801277e:	4b06      	ldr	r3, [pc, #24]	; (8012798 <tcp_enqueue_flags+0x1bc>)
 8012780:	f240 4265 	movw	r2, #1125	; 0x465
 8012784:	490b      	ldr	r1, [pc, #44]	; (80127b4 <tcp_enqueue_flags+0x1d8>)
 8012786:	4806      	ldr	r0, [pc, #24]	; (80127a0 <tcp_enqueue_flags+0x1c4>)
 8012788:	f004 fc3a 	bl	8017000 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801278c:	2300      	movs	r3, #0
}
 801278e:	4618      	mov	r0, r3
 8012790:	3720      	adds	r7, #32
 8012792:	46bd      	mov	sp, r7
 8012794:	bd80      	pop	{r7, pc}
 8012796:	bf00      	nop
 8012798:	0801aacc 	.word	0x0801aacc
 801279c:	0801aef0 	.word	0x0801aef0
 80127a0:	0801ab20 	.word	0x0801ab20
 80127a4:	0801af48 	.word	0x0801af48
 80127a8:	0801af68 	.word	0x0801af68
 80127ac:	0801afa4 	.word	0x0801afa4
 80127b0:	0801afbc 	.word	0x0801afbc
 80127b4:	0801afe8 	.word	0x0801afe8

080127b8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80127b8:	b5b0      	push	{r4, r5, r7, lr}
 80127ba:	b08a      	sub	sp, #40	; 0x28
 80127bc:	af00      	add	r7, sp, #0
 80127be:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d106      	bne.n	80127d4 <tcp_output+0x1c>
 80127c6:	4b8a      	ldr	r3, [pc, #552]	; (80129f0 <tcp_output+0x238>)
 80127c8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80127cc:	4989      	ldr	r1, [pc, #548]	; (80129f4 <tcp_output+0x23c>)
 80127ce:	488a      	ldr	r0, [pc, #552]	; (80129f8 <tcp_output+0x240>)
 80127d0:	f004 fc16 	bl	8017000 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	7d1b      	ldrb	r3, [r3, #20]
 80127d8:	2b01      	cmp	r3, #1
 80127da:	d106      	bne.n	80127ea <tcp_output+0x32>
 80127dc:	4b84      	ldr	r3, [pc, #528]	; (80129f0 <tcp_output+0x238>)
 80127de:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80127e2:	4986      	ldr	r1, [pc, #536]	; (80129fc <tcp_output+0x244>)
 80127e4:	4884      	ldr	r0, [pc, #528]	; (80129f8 <tcp_output+0x240>)
 80127e6:	f004 fc0b 	bl	8017000 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80127ea:	4b85      	ldr	r3, [pc, #532]	; (8012a00 <tcp_output+0x248>)
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	687a      	ldr	r2, [r7, #4]
 80127f0:	429a      	cmp	r2, r3
 80127f2:	d101      	bne.n	80127f8 <tcp_output+0x40>
    return ERR_OK;
 80127f4:	2300      	movs	r3, #0
 80127f6:	e1ce      	b.n	8012b96 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012804:	4293      	cmp	r3, r2
 8012806:	bf28      	it	cs
 8012808:	4613      	movcs	r3, r2
 801280a:	b29b      	uxth	r3, r3
 801280c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012812:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012816:	2b00      	cmp	r3, #0
 8012818:	d10b      	bne.n	8012832 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	8b5b      	ldrh	r3, [r3, #26]
 801281e:	f003 0302 	and.w	r3, r3, #2
 8012822:	2b00      	cmp	r3, #0
 8012824:	f000 81aa 	beq.w	8012b7c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012828:	6878      	ldr	r0, [r7, #4]
 801282a:	f000 fdcb 	bl	80133c4 <tcp_send_empty_ack>
 801282e:	4603      	mov	r3, r0
 8012830:	e1b1      	b.n	8012b96 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012832:	6879      	ldr	r1, [r7, #4]
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	3304      	adds	r3, #4
 8012838:	461a      	mov	r2, r3
 801283a:	6878      	ldr	r0, [r7, #4]
 801283c:	f7ff f824 	bl	8011888 <tcp_route>
 8012840:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012842:	697b      	ldr	r3, [r7, #20]
 8012844:	2b00      	cmp	r3, #0
 8012846:	d102      	bne.n	801284e <tcp_output+0x96>
    return ERR_RTE;
 8012848:	f06f 0303 	mvn.w	r3, #3
 801284c:	e1a3      	b.n	8012b96 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d003      	beq.n	801285c <tcp_output+0xa4>
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	2b00      	cmp	r3, #0
 801285a:	d111      	bne.n	8012880 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801285c:	697b      	ldr	r3, [r7, #20]
 801285e:	2b00      	cmp	r3, #0
 8012860:	d002      	beq.n	8012868 <tcp_output+0xb0>
 8012862:	697b      	ldr	r3, [r7, #20]
 8012864:	3304      	adds	r3, #4
 8012866:	e000      	b.n	801286a <tcp_output+0xb2>
 8012868:	2300      	movs	r3, #0
 801286a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801286c:	693b      	ldr	r3, [r7, #16]
 801286e:	2b00      	cmp	r3, #0
 8012870:	d102      	bne.n	8012878 <tcp_output+0xc0>
      return ERR_RTE;
 8012872:	f06f 0303 	mvn.w	r3, #3
 8012876:	e18e      	b.n	8012b96 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012878:	693b      	ldr	r3, [r7, #16]
 801287a:	681a      	ldr	r2, [r3, #0]
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012882:	68db      	ldr	r3, [r3, #12]
 8012884:	685b      	ldr	r3, [r3, #4]
 8012886:	4618      	mov	r0, r3
 8012888:	f7f9 f8dd 	bl	800ba46 <lwip_htonl>
 801288c:	4602      	mov	r2, r0
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012892:	1ad3      	subs	r3, r2, r3
 8012894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012896:	8912      	ldrh	r2, [r2, #8]
 8012898:	4413      	add	r3, r2
 801289a:	69ba      	ldr	r2, [r7, #24]
 801289c:	429a      	cmp	r2, r3
 801289e:	d227      	bcs.n	80128f0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80128a6:	461a      	mov	r2, r3
 80128a8:	69bb      	ldr	r3, [r7, #24]
 80128aa:	4293      	cmp	r3, r2
 80128ac:	d114      	bne.n	80128d8 <tcp_output+0x120>
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d110      	bne.n	80128d8 <tcp_output+0x120>
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d10b      	bne.n	80128d8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	2200      	movs	r2, #0
 80128c4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	2201      	movs	r2, #1
 80128cc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	2200      	movs	r2, #0
 80128d4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	8b5b      	ldrh	r3, [r3, #26]
 80128dc:	f003 0302 	and.w	r3, r3, #2
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	f000 814d 	beq.w	8012b80 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80128e6:	6878      	ldr	r0, [r7, #4]
 80128e8:	f000 fd6c 	bl	80133c4 <tcp_send_empty_ack>
 80128ec:	4603      	mov	r3, r0
 80128ee:	e152      	b.n	8012b96 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	2200      	movs	r2, #0
 80128f4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128fc:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80128fe:	6a3b      	ldr	r3, [r7, #32]
 8012900:	2b00      	cmp	r3, #0
 8012902:	f000 811c 	beq.w	8012b3e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8012906:	e002      	b.n	801290e <tcp_output+0x156>
 8012908:	6a3b      	ldr	r3, [r7, #32]
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	623b      	str	r3, [r7, #32]
 801290e:	6a3b      	ldr	r3, [r7, #32]
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d1f8      	bne.n	8012908 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012916:	e112      	b.n	8012b3e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801291a:	68db      	ldr	r3, [r3, #12]
 801291c:	899b      	ldrh	r3, [r3, #12]
 801291e:	b29b      	uxth	r3, r3
 8012920:	4618      	mov	r0, r3
 8012922:	f7f9 f87b 	bl	800ba1c <lwip_htons>
 8012926:	4603      	mov	r3, r0
 8012928:	b2db      	uxtb	r3, r3
 801292a:	f003 0304 	and.w	r3, r3, #4
 801292e:	2b00      	cmp	r3, #0
 8012930:	d006      	beq.n	8012940 <tcp_output+0x188>
 8012932:	4b2f      	ldr	r3, [pc, #188]	; (80129f0 <tcp_output+0x238>)
 8012934:	f240 5236 	movw	r2, #1334	; 0x536
 8012938:	4932      	ldr	r1, [pc, #200]	; (8012a04 <tcp_output+0x24c>)
 801293a:	482f      	ldr	r0, [pc, #188]	; (80129f8 <tcp_output+0x240>)
 801293c:	f004 fb60 	bl	8017000 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012944:	2b00      	cmp	r3, #0
 8012946:	d01f      	beq.n	8012988 <tcp_output+0x1d0>
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	8b5b      	ldrh	r3, [r3, #26]
 801294c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012950:	2b00      	cmp	r3, #0
 8012952:	d119      	bne.n	8012988 <tcp_output+0x1d0>
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012958:	2b00      	cmp	r3, #0
 801295a:	d00b      	beq.n	8012974 <tcp_output+0x1bc>
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	2b00      	cmp	r3, #0
 8012964:	d110      	bne.n	8012988 <tcp_output+0x1d0>
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801296a:	891a      	ldrh	r2, [r3, #8]
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012970:	429a      	cmp	r2, r3
 8012972:	d209      	bcs.n	8012988 <tcp_output+0x1d0>
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801297a:	2b00      	cmp	r3, #0
 801297c:	d004      	beq.n	8012988 <tcp_output+0x1d0>
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012984:	2b08      	cmp	r3, #8
 8012986:	d901      	bls.n	801298c <tcp_output+0x1d4>
 8012988:	2301      	movs	r3, #1
 801298a:	e000      	b.n	801298e <tcp_output+0x1d6>
 801298c:	2300      	movs	r3, #0
 801298e:	2b00      	cmp	r3, #0
 8012990:	d106      	bne.n	80129a0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	8b5b      	ldrh	r3, [r3, #26]
 8012996:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801299a:	2b00      	cmp	r3, #0
 801299c:	f000 80e4 	beq.w	8012b68 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	7d1b      	ldrb	r3, [r3, #20]
 80129a4:	2b02      	cmp	r3, #2
 80129a6:	d00d      	beq.n	80129c4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80129a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129aa:	68db      	ldr	r3, [r3, #12]
 80129ac:	899b      	ldrh	r3, [r3, #12]
 80129ae:	b29c      	uxth	r4, r3
 80129b0:	2010      	movs	r0, #16
 80129b2:	f7f9 f833 	bl	800ba1c <lwip_htons>
 80129b6:	4603      	mov	r3, r0
 80129b8:	461a      	mov	r2, r3
 80129ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129bc:	68db      	ldr	r3, [r3, #12]
 80129be:	4322      	orrs	r2, r4
 80129c0:	b292      	uxth	r2, r2
 80129c2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80129c4:	697a      	ldr	r2, [r7, #20]
 80129c6:	6879      	ldr	r1, [r7, #4]
 80129c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80129ca:	f000 f909 	bl	8012be0 <tcp_output_segment>
 80129ce:	4603      	mov	r3, r0
 80129d0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80129d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d016      	beq.n	8012a08 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	8b5b      	ldrh	r3, [r3, #26]
 80129de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80129e2:	b29a      	uxth	r2, r3
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	835a      	strh	r2, [r3, #26]
      return err;
 80129e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80129ec:	e0d3      	b.n	8012b96 <tcp_output+0x3de>
 80129ee:	bf00      	nop
 80129f0:	0801aacc 	.word	0x0801aacc
 80129f4:	0801b010 	.word	0x0801b010
 80129f8:	0801ab20 	.word	0x0801ab20
 80129fc:	0801b028 	.word	0x0801b028
 8012a00:	2000d190 	.word	0x2000d190
 8012a04:	0801b050 	.word	0x0801b050
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a0a:	681a      	ldr	r2, [r3, #0]
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	7d1b      	ldrb	r3, [r3, #20]
 8012a14:	2b02      	cmp	r3, #2
 8012a16:	d006      	beq.n	8012a26 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	8b5b      	ldrh	r3, [r3, #26]
 8012a1c:	f023 0303 	bic.w	r3, r3, #3
 8012a20:	b29a      	uxth	r2, r3
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a28:	68db      	ldr	r3, [r3, #12]
 8012a2a:	685b      	ldr	r3, [r3, #4]
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	f7f9 f80a 	bl	800ba46 <lwip_htonl>
 8012a32:	4604      	mov	r4, r0
 8012a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a36:	891b      	ldrh	r3, [r3, #8]
 8012a38:	461d      	mov	r5, r3
 8012a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a3c:	68db      	ldr	r3, [r3, #12]
 8012a3e:	899b      	ldrh	r3, [r3, #12]
 8012a40:	b29b      	uxth	r3, r3
 8012a42:	4618      	mov	r0, r3
 8012a44:	f7f8 ffea 	bl	800ba1c <lwip_htons>
 8012a48:	4603      	mov	r3, r0
 8012a4a:	b2db      	uxtb	r3, r3
 8012a4c:	f003 0303 	and.w	r3, r3, #3
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d001      	beq.n	8012a58 <tcp_output+0x2a0>
 8012a54:	2301      	movs	r3, #1
 8012a56:	e000      	b.n	8012a5a <tcp_output+0x2a2>
 8012a58:	2300      	movs	r3, #0
 8012a5a:	442b      	add	r3, r5
 8012a5c:	4423      	add	r3, r4
 8012a5e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012a64:	68bb      	ldr	r3, [r7, #8]
 8012a66:	1ad3      	subs	r3, r2, r3
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	da02      	bge.n	8012a72 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	68ba      	ldr	r2, [r7, #8]
 8012a70:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a74:	891b      	ldrh	r3, [r3, #8]
 8012a76:	461c      	mov	r4, r3
 8012a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a7a:	68db      	ldr	r3, [r3, #12]
 8012a7c:	899b      	ldrh	r3, [r3, #12]
 8012a7e:	b29b      	uxth	r3, r3
 8012a80:	4618      	mov	r0, r3
 8012a82:	f7f8 ffcb 	bl	800ba1c <lwip_htons>
 8012a86:	4603      	mov	r3, r0
 8012a88:	b2db      	uxtb	r3, r3
 8012a8a:	f003 0303 	and.w	r3, r3, #3
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d001      	beq.n	8012a96 <tcp_output+0x2de>
 8012a92:	2301      	movs	r3, #1
 8012a94:	e000      	b.n	8012a98 <tcp_output+0x2e0>
 8012a96:	2300      	movs	r3, #0
 8012a98:	4423      	add	r3, r4
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d049      	beq.n	8012b32 <tcp_output+0x37a>
      seg->next = NULL;
 8012a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aa0:	2200      	movs	r2, #0
 8012aa2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d105      	bne.n	8012ab8 <tcp_output+0x300>
        pcb->unacked = seg;
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ab0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8012ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ab4:	623b      	str	r3, [r7, #32]
 8012ab6:	e03f      	b.n	8012b38 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aba:	68db      	ldr	r3, [r3, #12]
 8012abc:	685b      	ldr	r3, [r3, #4]
 8012abe:	4618      	mov	r0, r3
 8012ac0:	f7f8 ffc1 	bl	800ba46 <lwip_htonl>
 8012ac4:	4604      	mov	r4, r0
 8012ac6:	6a3b      	ldr	r3, [r7, #32]
 8012ac8:	68db      	ldr	r3, [r3, #12]
 8012aca:	685b      	ldr	r3, [r3, #4]
 8012acc:	4618      	mov	r0, r3
 8012ace:	f7f8 ffba 	bl	800ba46 <lwip_htonl>
 8012ad2:	4603      	mov	r3, r0
 8012ad4:	1ae3      	subs	r3, r4, r3
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	da24      	bge.n	8012b24 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	3370      	adds	r3, #112	; 0x70
 8012ade:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012ae0:	e002      	b.n	8012ae8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012ae2:	69fb      	ldr	r3, [r7, #28]
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012ae8:	69fb      	ldr	r3, [r7, #28]
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d011      	beq.n	8012b14 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012af0:	69fb      	ldr	r3, [r7, #28]
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	68db      	ldr	r3, [r3, #12]
 8012af6:	685b      	ldr	r3, [r3, #4]
 8012af8:	4618      	mov	r0, r3
 8012afa:	f7f8 ffa4 	bl	800ba46 <lwip_htonl>
 8012afe:	4604      	mov	r4, r0
 8012b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b02:	68db      	ldr	r3, [r3, #12]
 8012b04:	685b      	ldr	r3, [r3, #4]
 8012b06:	4618      	mov	r0, r3
 8012b08:	f7f8 ff9d 	bl	800ba46 <lwip_htonl>
 8012b0c:	4603      	mov	r3, r0
 8012b0e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	dbe6      	blt.n	8012ae2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012b14:	69fb      	ldr	r3, [r7, #28]
 8012b16:	681a      	ldr	r2, [r3, #0]
 8012b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b1a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012b1c:	69fb      	ldr	r3, [r7, #28]
 8012b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b20:	601a      	str	r2, [r3, #0]
 8012b22:	e009      	b.n	8012b38 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012b24:	6a3b      	ldr	r3, [r7, #32]
 8012b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b28:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012b2a:	6a3b      	ldr	r3, [r7, #32]
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	623b      	str	r3, [r7, #32]
 8012b30:	e002      	b.n	8012b38 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012b32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012b34:	f7fb ff19 	bl	800e96a <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b3c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d012      	beq.n	8012b6a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b46:	68db      	ldr	r3, [r3, #12]
 8012b48:	685b      	ldr	r3, [r3, #4]
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	f7f8 ff7b 	bl	800ba46 <lwip_htonl>
 8012b50:	4602      	mov	r2, r0
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012b56:	1ad3      	subs	r3, r2, r3
 8012b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b5a:	8912      	ldrh	r2, [r2, #8]
 8012b5c:	4413      	add	r3, r2
  while (seg != NULL &&
 8012b5e:	69ba      	ldr	r2, [r7, #24]
 8012b60:	429a      	cmp	r2, r3
 8012b62:	f4bf aed9 	bcs.w	8012918 <tcp_output+0x160>
 8012b66:	e000      	b.n	8012b6a <tcp_output+0x3b2>
      break;
 8012b68:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d108      	bne.n	8012b84 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	2200      	movs	r2, #0
 8012b76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8012b7a:	e004      	b.n	8012b86 <tcp_output+0x3ce>
    goto output_done;
 8012b7c:	bf00      	nop
 8012b7e:	e002      	b.n	8012b86 <tcp_output+0x3ce>
    goto output_done;
 8012b80:	bf00      	nop
 8012b82:	e000      	b.n	8012b86 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012b84:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	8b5b      	ldrh	r3, [r3, #26]
 8012b8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012b8e:	b29a      	uxth	r2, r3
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012b94:	2300      	movs	r3, #0
}
 8012b96:	4618      	mov	r0, r3
 8012b98:	3728      	adds	r7, #40	; 0x28
 8012b9a:	46bd      	mov	sp, r7
 8012b9c:	bdb0      	pop	{r4, r5, r7, pc}
 8012b9e:	bf00      	nop

08012ba0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012ba0:	b580      	push	{r7, lr}
 8012ba2:	b082      	sub	sp, #8
 8012ba4:	af00      	add	r7, sp, #0
 8012ba6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d106      	bne.n	8012bbc <tcp_output_segment_busy+0x1c>
 8012bae:	4b09      	ldr	r3, [pc, #36]	; (8012bd4 <tcp_output_segment_busy+0x34>)
 8012bb0:	f240 529a 	movw	r2, #1434	; 0x59a
 8012bb4:	4908      	ldr	r1, [pc, #32]	; (8012bd8 <tcp_output_segment_busy+0x38>)
 8012bb6:	4809      	ldr	r0, [pc, #36]	; (8012bdc <tcp_output_segment_busy+0x3c>)
 8012bb8:	f004 fa22 	bl	8017000 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	685b      	ldr	r3, [r3, #4]
 8012bc0:	7b9b      	ldrb	r3, [r3, #14]
 8012bc2:	2b01      	cmp	r3, #1
 8012bc4:	d001      	beq.n	8012bca <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012bc6:	2301      	movs	r3, #1
 8012bc8:	e000      	b.n	8012bcc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012bca:	2300      	movs	r3, #0
}
 8012bcc:	4618      	mov	r0, r3
 8012bce:	3708      	adds	r7, #8
 8012bd0:	46bd      	mov	sp, r7
 8012bd2:	bd80      	pop	{r7, pc}
 8012bd4:	0801aacc 	.word	0x0801aacc
 8012bd8:	0801b068 	.word	0x0801b068
 8012bdc:	0801ab20 	.word	0x0801ab20

08012be0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012be0:	b5b0      	push	{r4, r5, r7, lr}
 8012be2:	b08c      	sub	sp, #48	; 0x30
 8012be4:	af04      	add	r7, sp, #16
 8012be6:	60f8      	str	r0, [r7, #12]
 8012be8:	60b9      	str	r1, [r7, #8]
 8012bea:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d106      	bne.n	8012c00 <tcp_output_segment+0x20>
 8012bf2:	4b63      	ldr	r3, [pc, #396]	; (8012d80 <tcp_output_segment+0x1a0>)
 8012bf4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8012bf8:	4962      	ldr	r1, [pc, #392]	; (8012d84 <tcp_output_segment+0x1a4>)
 8012bfa:	4863      	ldr	r0, [pc, #396]	; (8012d88 <tcp_output_segment+0x1a8>)
 8012bfc:	f004 fa00 	bl	8017000 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012c00:	68bb      	ldr	r3, [r7, #8]
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d106      	bne.n	8012c14 <tcp_output_segment+0x34>
 8012c06:	4b5e      	ldr	r3, [pc, #376]	; (8012d80 <tcp_output_segment+0x1a0>)
 8012c08:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012c0c:	495f      	ldr	r1, [pc, #380]	; (8012d8c <tcp_output_segment+0x1ac>)
 8012c0e:	485e      	ldr	r0, [pc, #376]	; (8012d88 <tcp_output_segment+0x1a8>)
 8012c10:	f004 f9f6 	bl	8017000 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d106      	bne.n	8012c28 <tcp_output_segment+0x48>
 8012c1a:	4b59      	ldr	r3, [pc, #356]	; (8012d80 <tcp_output_segment+0x1a0>)
 8012c1c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012c20:	495b      	ldr	r1, [pc, #364]	; (8012d90 <tcp_output_segment+0x1b0>)
 8012c22:	4859      	ldr	r0, [pc, #356]	; (8012d88 <tcp_output_segment+0x1a8>)
 8012c24:	f004 f9ec 	bl	8017000 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012c28:	68f8      	ldr	r0, [r7, #12]
 8012c2a:	f7ff ffb9 	bl	8012ba0 <tcp_output_segment_busy>
 8012c2e:	4603      	mov	r3, r0
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d001      	beq.n	8012c38 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012c34:	2300      	movs	r3, #0
 8012c36:	e09f      	b.n	8012d78 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012c38:	68bb      	ldr	r3, [r7, #8]
 8012c3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	68dc      	ldr	r4, [r3, #12]
 8012c40:	4610      	mov	r0, r2
 8012c42:	f7f8 ff00 	bl	800ba46 <lwip_htonl>
 8012c46:	4603      	mov	r3, r0
 8012c48:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012c4a:	68bb      	ldr	r3, [r7, #8]
 8012c4c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	68dc      	ldr	r4, [r3, #12]
 8012c52:	4610      	mov	r0, r2
 8012c54:	f7f8 fee2 	bl	800ba1c <lwip_htons>
 8012c58:	4603      	mov	r3, r0
 8012c5a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012c5c:	68bb      	ldr	r3, [r7, #8]
 8012c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c60:	68ba      	ldr	r2, [r7, #8]
 8012c62:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012c64:	441a      	add	r2, r3
 8012c66:	68bb      	ldr	r3, [r7, #8]
 8012c68:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	68db      	ldr	r3, [r3, #12]
 8012c6e:	3314      	adds	r3, #20
 8012c70:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	7a9b      	ldrb	r3, [r3, #10]
 8012c76:	f003 0301 	and.w	r3, r3, #1
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d015      	beq.n	8012caa <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012c7e:	68bb      	ldr	r3, [r7, #8]
 8012c80:	3304      	adds	r3, #4
 8012c82:	461a      	mov	r2, r3
 8012c84:	6879      	ldr	r1, [r7, #4]
 8012c86:	f44f 7006 	mov.w	r0, #536	; 0x218
 8012c8a:	f7fc fa33 	bl	800f0f4 <tcp_eff_send_mss_netif>
 8012c8e:	4603      	mov	r3, r0
 8012c90:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012c92:	8b7b      	ldrh	r3, [r7, #26]
 8012c94:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012c98:	4618      	mov	r0, r3
 8012c9a:	f7f8 fed4 	bl	800ba46 <lwip_htonl>
 8012c9e:	4602      	mov	r2, r0
 8012ca0:	69fb      	ldr	r3, [r7, #28]
 8012ca2:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012ca4:	69fb      	ldr	r3, [r7, #28]
 8012ca6:	3304      	adds	r3, #4
 8012ca8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012caa:	68bb      	ldr	r3, [r7, #8]
 8012cac:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	da02      	bge.n	8012cba <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012cb4:	68bb      	ldr	r3, [r7, #8]
 8012cb6:	2200      	movs	r2, #0
 8012cb8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8012cba:	68bb      	ldr	r3, [r7, #8]
 8012cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d10c      	bne.n	8012cdc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012cc2:	4b34      	ldr	r3, [pc, #208]	; (8012d94 <tcp_output_segment+0x1b4>)
 8012cc4:	681a      	ldr	r2, [r3, #0]
 8012cc6:	68bb      	ldr	r3, [r7, #8]
 8012cc8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	68db      	ldr	r3, [r3, #12]
 8012cce:	685b      	ldr	r3, [r3, #4]
 8012cd0:	4618      	mov	r0, r3
 8012cd2:	f7f8 feb8 	bl	800ba46 <lwip_htonl>
 8012cd6:	4602      	mov	r2, r0
 8012cd8:	68bb      	ldr	r3, [r7, #8]
 8012cda:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	68da      	ldr	r2, [r3, #12]
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	685b      	ldr	r3, [r3, #4]
 8012ce4:	685b      	ldr	r3, [r3, #4]
 8012ce6:	1ad3      	subs	r3, r2, r3
 8012ce8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	685b      	ldr	r3, [r3, #4]
 8012cee:	8959      	ldrh	r1, [r3, #10]
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	685b      	ldr	r3, [r3, #4]
 8012cf4:	8b3a      	ldrh	r2, [r7, #24]
 8012cf6:	1a8a      	subs	r2, r1, r2
 8012cf8:	b292      	uxth	r2, r2
 8012cfa:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	685b      	ldr	r3, [r3, #4]
 8012d00:	8919      	ldrh	r1, [r3, #8]
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	685b      	ldr	r3, [r3, #4]
 8012d06:	8b3a      	ldrh	r2, [r7, #24]
 8012d08:	1a8a      	subs	r2, r1, r2
 8012d0a:	b292      	uxth	r2, r2
 8012d0c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	685b      	ldr	r3, [r3, #4]
 8012d12:	68fa      	ldr	r2, [r7, #12]
 8012d14:	68d2      	ldr	r2, [r2, #12]
 8012d16:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	68db      	ldr	r3, [r3, #12]
 8012d1c:	2200      	movs	r2, #0
 8012d1e:	741a      	strb	r2, [r3, #16]
 8012d20:	2200      	movs	r2, #0
 8012d22:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	68db      	ldr	r3, [r3, #12]
 8012d28:	f103 0214 	add.w	r2, r3, #20
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	7a9b      	ldrb	r3, [r3, #10]
 8012d30:	009b      	lsls	r3, r3, #2
 8012d32:	f003 0304 	and.w	r3, r3, #4
 8012d36:	4413      	add	r3, r2
 8012d38:	69fa      	ldr	r2, [r7, #28]
 8012d3a:	429a      	cmp	r2, r3
 8012d3c:	d006      	beq.n	8012d4c <tcp_output_segment+0x16c>
 8012d3e:	4b10      	ldr	r3, [pc, #64]	; (8012d80 <tcp_output_segment+0x1a0>)
 8012d40:	f240 621c 	movw	r2, #1564	; 0x61c
 8012d44:	4914      	ldr	r1, [pc, #80]	; (8012d98 <tcp_output_segment+0x1b8>)
 8012d46:	4810      	ldr	r0, [pc, #64]	; (8012d88 <tcp_output_segment+0x1a8>)
 8012d48:	f004 f95a 	bl	8017000 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	6858      	ldr	r0, [r3, #4]
 8012d50:	68b9      	ldr	r1, [r7, #8]
 8012d52:	68bb      	ldr	r3, [r7, #8]
 8012d54:	1d1c      	adds	r4, r3, #4
 8012d56:	68bb      	ldr	r3, [r7, #8]
 8012d58:	7add      	ldrb	r5, [r3, #11]
 8012d5a:	68bb      	ldr	r3, [r7, #8]
 8012d5c:	7a9b      	ldrb	r3, [r3, #10]
 8012d5e:	687a      	ldr	r2, [r7, #4]
 8012d60:	9202      	str	r2, [sp, #8]
 8012d62:	2206      	movs	r2, #6
 8012d64:	9201      	str	r2, [sp, #4]
 8012d66:	9300      	str	r3, [sp, #0]
 8012d68:	462b      	mov	r3, r5
 8012d6a:	4622      	mov	r2, r4
 8012d6c:	f002 fd96 	bl	801589c <ip4_output_if>
 8012d70:	4603      	mov	r3, r0
 8012d72:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012d74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012d78:	4618      	mov	r0, r3
 8012d7a:	3720      	adds	r7, #32
 8012d7c:	46bd      	mov	sp, r7
 8012d7e:	bdb0      	pop	{r4, r5, r7, pc}
 8012d80:	0801aacc 	.word	0x0801aacc
 8012d84:	0801b090 	.word	0x0801b090
 8012d88:	0801ab20 	.word	0x0801ab20
 8012d8c:	0801b0b0 	.word	0x0801b0b0
 8012d90:	0801b0d0 	.word	0x0801b0d0
 8012d94:	2000d144 	.word	0x2000d144
 8012d98:	0801b0f4 	.word	0x0801b0f4

08012d9c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012d9c:	b5b0      	push	{r4, r5, r7, lr}
 8012d9e:	b084      	sub	sp, #16
 8012da0:	af00      	add	r7, sp, #0
 8012da2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d106      	bne.n	8012db8 <tcp_rexmit_rto_prepare+0x1c>
 8012daa:	4b31      	ldr	r3, [pc, #196]	; (8012e70 <tcp_rexmit_rto_prepare+0xd4>)
 8012dac:	f240 6263 	movw	r2, #1635	; 0x663
 8012db0:	4930      	ldr	r1, [pc, #192]	; (8012e74 <tcp_rexmit_rto_prepare+0xd8>)
 8012db2:	4831      	ldr	r0, [pc, #196]	; (8012e78 <tcp_rexmit_rto_prepare+0xdc>)
 8012db4:	f004 f924 	bl	8017000 <iprintf>

  if (pcb->unacked == NULL) {
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d102      	bne.n	8012dc6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012dc0:	f06f 0305 	mvn.w	r3, #5
 8012dc4:	e050      	b.n	8012e68 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012dca:	60fb      	str	r3, [r7, #12]
 8012dcc:	e00b      	b.n	8012de6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012dce:	68f8      	ldr	r0, [r7, #12]
 8012dd0:	f7ff fee6 	bl	8012ba0 <tcp_output_segment_busy>
 8012dd4:	4603      	mov	r3, r0
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d002      	beq.n	8012de0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012dda:	f06f 0305 	mvn.w	r3, #5
 8012dde:	e043      	b.n	8012e68 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	60fb      	str	r3, [r7, #12]
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d1ef      	bne.n	8012dce <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012dee:	68f8      	ldr	r0, [r7, #12]
 8012df0:	f7ff fed6 	bl	8012ba0 <tcp_output_segment_busy>
 8012df4:	4603      	mov	r3, r0
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d002      	beq.n	8012e00 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012dfa:	f06f 0305 	mvn.w	r3, #5
 8012dfe:	e033      	b.n	8012e68 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	2200      	movs	r2, #0
 8012e14:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	8b5b      	ldrh	r3, [r3, #26]
 8012e1a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012e1e:	b29a      	uxth	r2, r3
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	68db      	ldr	r3, [r3, #12]
 8012e28:	685b      	ldr	r3, [r3, #4]
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	f7f8 fe0b 	bl	800ba46 <lwip_htonl>
 8012e30:	4604      	mov	r4, r0
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	891b      	ldrh	r3, [r3, #8]
 8012e36:	461d      	mov	r5, r3
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	68db      	ldr	r3, [r3, #12]
 8012e3c:	899b      	ldrh	r3, [r3, #12]
 8012e3e:	b29b      	uxth	r3, r3
 8012e40:	4618      	mov	r0, r3
 8012e42:	f7f8 fdeb 	bl	800ba1c <lwip_htons>
 8012e46:	4603      	mov	r3, r0
 8012e48:	b2db      	uxtb	r3, r3
 8012e4a:	f003 0303 	and.w	r3, r3, #3
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d001      	beq.n	8012e56 <tcp_rexmit_rto_prepare+0xba>
 8012e52:	2301      	movs	r3, #1
 8012e54:	e000      	b.n	8012e58 <tcp_rexmit_rto_prepare+0xbc>
 8012e56:	2300      	movs	r3, #0
 8012e58:	442b      	add	r3, r5
 8012e5a:	18e2      	adds	r2, r4, r3
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	2200      	movs	r2, #0
 8012e64:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8012e66:	2300      	movs	r3, #0
}
 8012e68:	4618      	mov	r0, r3
 8012e6a:	3710      	adds	r7, #16
 8012e6c:	46bd      	mov	sp, r7
 8012e6e:	bdb0      	pop	{r4, r5, r7, pc}
 8012e70:	0801aacc 	.word	0x0801aacc
 8012e74:	0801b108 	.word	0x0801b108
 8012e78:	0801ab20 	.word	0x0801ab20

08012e7c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b082      	sub	sp, #8
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d106      	bne.n	8012e98 <tcp_rexmit_rto_commit+0x1c>
 8012e8a:	4b0d      	ldr	r3, [pc, #52]	; (8012ec0 <tcp_rexmit_rto_commit+0x44>)
 8012e8c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012e90:	490c      	ldr	r1, [pc, #48]	; (8012ec4 <tcp_rexmit_rto_commit+0x48>)
 8012e92:	480d      	ldr	r0, [pc, #52]	; (8012ec8 <tcp_rexmit_rto_commit+0x4c>)
 8012e94:	f004 f8b4 	bl	8017000 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012e9e:	2bff      	cmp	r3, #255	; 0xff
 8012ea0:	d007      	beq.n	8012eb2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012ea8:	3301      	adds	r3, #1
 8012eaa:	b2da      	uxtb	r2, r3
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012eb2:	6878      	ldr	r0, [r7, #4]
 8012eb4:	f7ff fc80 	bl	80127b8 <tcp_output>
}
 8012eb8:	bf00      	nop
 8012eba:	3708      	adds	r7, #8
 8012ebc:	46bd      	mov	sp, r7
 8012ebe:	bd80      	pop	{r7, pc}
 8012ec0:	0801aacc 	.word	0x0801aacc
 8012ec4:	0801b12c 	.word	0x0801b12c
 8012ec8:	0801ab20 	.word	0x0801ab20

08012ecc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012ecc:	b580      	push	{r7, lr}
 8012ece:	b082      	sub	sp, #8
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d106      	bne.n	8012ee8 <tcp_rexmit_rto+0x1c>
 8012eda:	4b0a      	ldr	r3, [pc, #40]	; (8012f04 <tcp_rexmit_rto+0x38>)
 8012edc:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8012ee0:	4909      	ldr	r1, [pc, #36]	; (8012f08 <tcp_rexmit_rto+0x3c>)
 8012ee2:	480a      	ldr	r0, [pc, #40]	; (8012f0c <tcp_rexmit_rto+0x40>)
 8012ee4:	f004 f88c 	bl	8017000 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012ee8:	6878      	ldr	r0, [r7, #4]
 8012eea:	f7ff ff57 	bl	8012d9c <tcp_rexmit_rto_prepare>
 8012eee:	4603      	mov	r3, r0
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d102      	bne.n	8012efa <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012ef4:	6878      	ldr	r0, [r7, #4]
 8012ef6:	f7ff ffc1 	bl	8012e7c <tcp_rexmit_rto_commit>
  }
}
 8012efa:	bf00      	nop
 8012efc:	3708      	adds	r7, #8
 8012efe:	46bd      	mov	sp, r7
 8012f00:	bd80      	pop	{r7, pc}
 8012f02:	bf00      	nop
 8012f04:	0801aacc 	.word	0x0801aacc
 8012f08:	0801b150 	.word	0x0801b150
 8012f0c:	0801ab20 	.word	0x0801ab20

08012f10 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012f10:	b590      	push	{r4, r7, lr}
 8012f12:	b085      	sub	sp, #20
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d106      	bne.n	8012f2c <tcp_rexmit+0x1c>
 8012f1e:	4b2f      	ldr	r3, [pc, #188]	; (8012fdc <tcp_rexmit+0xcc>)
 8012f20:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8012f24:	492e      	ldr	r1, [pc, #184]	; (8012fe0 <tcp_rexmit+0xd0>)
 8012f26:	482f      	ldr	r0, [pc, #188]	; (8012fe4 <tcp_rexmit+0xd4>)
 8012f28:	f004 f86a 	bl	8017000 <iprintf>

  if (pcb->unacked == NULL) {
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d102      	bne.n	8012f3a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012f34:	f06f 0305 	mvn.w	r3, #5
 8012f38:	e04c      	b.n	8012fd4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f3e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012f40:	68b8      	ldr	r0, [r7, #8]
 8012f42:	f7ff fe2d 	bl	8012ba0 <tcp_output_segment_busy>
 8012f46:	4603      	mov	r3, r0
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d002      	beq.n	8012f52 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012f4c:	f06f 0305 	mvn.w	r3, #5
 8012f50:	e040      	b.n	8012fd4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012f52:	68bb      	ldr	r3, [r7, #8]
 8012f54:	681a      	ldr	r2, [r3, #0]
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	336c      	adds	r3, #108	; 0x6c
 8012f5e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012f60:	e002      	b.n	8012f68 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d011      	beq.n	8012f94 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	68db      	ldr	r3, [r3, #12]
 8012f76:	685b      	ldr	r3, [r3, #4]
 8012f78:	4618      	mov	r0, r3
 8012f7a:	f7f8 fd64 	bl	800ba46 <lwip_htonl>
 8012f7e:	4604      	mov	r4, r0
 8012f80:	68bb      	ldr	r3, [r7, #8]
 8012f82:	68db      	ldr	r3, [r3, #12]
 8012f84:	685b      	ldr	r3, [r3, #4]
 8012f86:	4618      	mov	r0, r3
 8012f88:	f7f8 fd5d 	bl	800ba46 <lwip_htonl>
 8012f8c:	4603      	mov	r3, r0
 8012f8e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	dbe6      	blt.n	8012f62 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	681a      	ldr	r2, [r3, #0]
 8012f98:	68bb      	ldr	r3, [r7, #8]
 8012f9a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	68ba      	ldr	r2, [r7, #8]
 8012fa0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012fa2:	68bb      	ldr	r3, [r7, #8]
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d103      	bne.n	8012fb2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	2200      	movs	r2, #0
 8012fae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012fb8:	2bff      	cmp	r3, #255	; 0xff
 8012fba:	d007      	beq.n	8012fcc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012fc2:	3301      	adds	r3, #1
 8012fc4:	b2da      	uxtb	r2, r3
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	2200      	movs	r2, #0
 8012fd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012fd2:	2300      	movs	r3, #0
}
 8012fd4:	4618      	mov	r0, r3
 8012fd6:	3714      	adds	r7, #20
 8012fd8:	46bd      	mov	sp, r7
 8012fda:	bd90      	pop	{r4, r7, pc}
 8012fdc:	0801aacc 	.word	0x0801aacc
 8012fe0:	0801b16c 	.word	0x0801b16c
 8012fe4:	0801ab20 	.word	0x0801ab20

08012fe8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012fe8:	b580      	push	{r7, lr}
 8012fea:	b082      	sub	sp, #8
 8012fec:	af00      	add	r7, sp, #0
 8012fee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d106      	bne.n	8013004 <tcp_rexmit_fast+0x1c>
 8012ff6:	4b2a      	ldr	r3, [pc, #168]	; (80130a0 <tcp_rexmit_fast+0xb8>)
 8012ff8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012ffc:	4929      	ldr	r1, [pc, #164]	; (80130a4 <tcp_rexmit_fast+0xbc>)
 8012ffe:	482a      	ldr	r0, [pc, #168]	; (80130a8 <tcp_rexmit_fast+0xc0>)
 8013000:	f003 fffe 	bl	8017000 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013008:	2b00      	cmp	r3, #0
 801300a:	d045      	beq.n	8013098 <tcp_rexmit_fast+0xb0>
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	8b5b      	ldrh	r3, [r3, #26]
 8013010:	f003 0304 	and.w	r3, r3, #4
 8013014:	2b00      	cmp	r3, #0
 8013016:	d13f      	bne.n	8013098 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013018:	6878      	ldr	r0, [r7, #4]
 801301a:	f7ff ff79 	bl	8012f10 <tcp_rexmit>
 801301e:	4603      	mov	r3, r0
 8013020:	2b00      	cmp	r3, #0
 8013022:	d139      	bne.n	8013098 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013030:	4293      	cmp	r3, r2
 8013032:	bf28      	it	cs
 8013034:	4613      	movcs	r3, r2
 8013036:	b29b      	uxth	r3, r3
 8013038:	2b00      	cmp	r3, #0
 801303a:	da00      	bge.n	801303e <tcp_rexmit_fast+0x56>
 801303c:	3301      	adds	r3, #1
 801303e:	105b      	asrs	r3, r3, #1
 8013040:	b29a      	uxth	r2, r3
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801304e:	461a      	mov	r2, r3
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013054:	005b      	lsls	r3, r3, #1
 8013056:	429a      	cmp	r2, r3
 8013058:	d206      	bcs.n	8013068 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801305e:	005b      	lsls	r3, r3, #1
 8013060:	b29a      	uxth	r2, r3
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013072:	4619      	mov	r1, r3
 8013074:	0049      	lsls	r1, r1, #1
 8013076:	440b      	add	r3, r1
 8013078:	b29b      	uxth	r3, r3
 801307a:	4413      	add	r3, r2
 801307c:	b29a      	uxth	r2, r3
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	8b5b      	ldrh	r3, [r3, #26]
 8013088:	f043 0304 	orr.w	r3, r3, #4
 801308c:	b29a      	uxth	r2, r3
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	2200      	movs	r2, #0
 8013096:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8013098:	bf00      	nop
 801309a:	3708      	adds	r7, #8
 801309c:	46bd      	mov	sp, r7
 801309e:	bd80      	pop	{r7, pc}
 80130a0:	0801aacc 	.word	0x0801aacc
 80130a4:	0801b184 	.word	0x0801b184
 80130a8:	0801ab20 	.word	0x0801ab20

080130ac <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80130ac:	b580      	push	{r7, lr}
 80130ae:	b086      	sub	sp, #24
 80130b0:	af00      	add	r7, sp, #0
 80130b2:	60f8      	str	r0, [r7, #12]
 80130b4:	607b      	str	r3, [r7, #4]
 80130b6:	460b      	mov	r3, r1
 80130b8:	817b      	strh	r3, [r7, #10]
 80130ba:	4613      	mov	r3, r2
 80130bc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80130be:	897a      	ldrh	r2, [r7, #10]
 80130c0:	893b      	ldrh	r3, [r7, #8]
 80130c2:	4413      	add	r3, r2
 80130c4:	b29b      	uxth	r3, r3
 80130c6:	3314      	adds	r3, #20
 80130c8:	b29b      	uxth	r3, r3
 80130ca:	f44f 7220 	mov.w	r2, #640	; 0x280
 80130ce:	4619      	mov	r1, r3
 80130d0:	2022      	movs	r0, #34	; 0x22
 80130d2:	f7f9 fd6b 	bl	800cbac <pbuf_alloc>
 80130d6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80130d8:	697b      	ldr	r3, [r7, #20]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d04d      	beq.n	801317a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80130de:	897b      	ldrh	r3, [r7, #10]
 80130e0:	3313      	adds	r3, #19
 80130e2:	697a      	ldr	r2, [r7, #20]
 80130e4:	8952      	ldrh	r2, [r2, #10]
 80130e6:	4293      	cmp	r3, r2
 80130e8:	db06      	blt.n	80130f8 <tcp_output_alloc_header_common+0x4c>
 80130ea:	4b26      	ldr	r3, [pc, #152]	; (8013184 <tcp_output_alloc_header_common+0xd8>)
 80130ec:	f240 7223 	movw	r2, #1827	; 0x723
 80130f0:	4925      	ldr	r1, [pc, #148]	; (8013188 <tcp_output_alloc_header_common+0xdc>)
 80130f2:	4826      	ldr	r0, [pc, #152]	; (801318c <tcp_output_alloc_header_common+0xe0>)
 80130f4:	f003 ff84 	bl	8017000 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80130f8:	697b      	ldr	r3, [r7, #20]
 80130fa:	685b      	ldr	r3, [r3, #4]
 80130fc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80130fe:	8c3b      	ldrh	r3, [r7, #32]
 8013100:	4618      	mov	r0, r3
 8013102:	f7f8 fc8b 	bl	800ba1c <lwip_htons>
 8013106:	4603      	mov	r3, r0
 8013108:	461a      	mov	r2, r3
 801310a:	693b      	ldr	r3, [r7, #16]
 801310c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801310e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013110:	4618      	mov	r0, r3
 8013112:	f7f8 fc83 	bl	800ba1c <lwip_htons>
 8013116:	4603      	mov	r3, r0
 8013118:	461a      	mov	r2, r3
 801311a:	693b      	ldr	r3, [r7, #16]
 801311c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801311e:	693b      	ldr	r3, [r7, #16]
 8013120:	687a      	ldr	r2, [r7, #4]
 8013122:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013124:	68f8      	ldr	r0, [r7, #12]
 8013126:	f7f8 fc8e 	bl	800ba46 <lwip_htonl>
 801312a:	4602      	mov	r2, r0
 801312c:	693b      	ldr	r3, [r7, #16]
 801312e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013130:	897b      	ldrh	r3, [r7, #10]
 8013132:	089b      	lsrs	r3, r3, #2
 8013134:	b29b      	uxth	r3, r3
 8013136:	3305      	adds	r3, #5
 8013138:	b29b      	uxth	r3, r3
 801313a:	031b      	lsls	r3, r3, #12
 801313c:	b29a      	uxth	r2, r3
 801313e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013142:	b29b      	uxth	r3, r3
 8013144:	4313      	orrs	r3, r2
 8013146:	b29b      	uxth	r3, r3
 8013148:	4618      	mov	r0, r3
 801314a:	f7f8 fc67 	bl	800ba1c <lwip_htons>
 801314e:	4603      	mov	r3, r0
 8013150:	461a      	mov	r2, r3
 8013152:	693b      	ldr	r3, [r7, #16]
 8013154:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013156:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013158:	4618      	mov	r0, r3
 801315a:	f7f8 fc5f 	bl	800ba1c <lwip_htons>
 801315e:	4603      	mov	r3, r0
 8013160:	461a      	mov	r2, r3
 8013162:	693b      	ldr	r3, [r7, #16]
 8013164:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8013166:	693b      	ldr	r3, [r7, #16]
 8013168:	2200      	movs	r2, #0
 801316a:	741a      	strb	r2, [r3, #16]
 801316c:	2200      	movs	r2, #0
 801316e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013170:	693b      	ldr	r3, [r7, #16]
 8013172:	2200      	movs	r2, #0
 8013174:	749a      	strb	r2, [r3, #18]
 8013176:	2200      	movs	r2, #0
 8013178:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801317a:	697b      	ldr	r3, [r7, #20]
}
 801317c:	4618      	mov	r0, r3
 801317e:	3718      	adds	r7, #24
 8013180:	46bd      	mov	sp, r7
 8013182:	bd80      	pop	{r7, pc}
 8013184:	0801aacc 	.word	0x0801aacc
 8013188:	0801b1a4 	.word	0x0801b1a4
 801318c:	0801ab20 	.word	0x0801ab20

08013190 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013190:	b5b0      	push	{r4, r5, r7, lr}
 8013192:	b08a      	sub	sp, #40	; 0x28
 8013194:	af04      	add	r7, sp, #16
 8013196:	60f8      	str	r0, [r7, #12]
 8013198:	607b      	str	r3, [r7, #4]
 801319a:	460b      	mov	r3, r1
 801319c:	817b      	strh	r3, [r7, #10]
 801319e:	4613      	mov	r3, r2
 80131a0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d106      	bne.n	80131b6 <tcp_output_alloc_header+0x26>
 80131a8:	4b15      	ldr	r3, [pc, #84]	; (8013200 <tcp_output_alloc_header+0x70>)
 80131aa:	f240 7242 	movw	r2, #1858	; 0x742
 80131ae:	4915      	ldr	r1, [pc, #84]	; (8013204 <tcp_output_alloc_header+0x74>)
 80131b0:	4815      	ldr	r0, [pc, #84]	; (8013208 <tcp_output_alloc_header+0x78>)
 80131b2:	f003 ff25 	bl	8017000 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	8adb      	ldrh	r3, [r3, #22]
 80131be:	68fa      	ldr	r2, [r7, #12]
 80131c0:	8b12      	ldrh	r2, [r2, #24]
 80131c2:	68f9      	ldr	r1, [r7, #12]
 80131c4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80131c6:	893d      	ldrh	r5, [r7, #8]
 80131c8:	897c      	ldrh	r4, [r7, #10]
 80131ca:	9103      	str	r1, [sp, #12]
 80131cc:	2110      	movs	r1, #16
 80131ce:	9102      	str	r1, [sp, #8]
 80131d0:	9201      	str	r2, [sp, #4]
 80131d2:	9300      	str	r3, [sp, #0]
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	462a      	mov	r2, r5
 80131d8:	4621      	mov	r1, r4
 80131da:	f7ff ff67 	bl	80130ac <tcp_output_alloc_header_common>
 80131de:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80131e0:	697b      	ldr	r3, [r7, #20]
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d006      	beq.n	80131f4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131ea:	68fa      	ldr	r2, [r7, #12]
 80131ec:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80131ee:	441a      	add	r2, r3
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80131f4:	697b      	ldr	r3, [r7, #20]
}
 80131f6:	4618      	mov	r0, r3
 80131f8:	3718      	adds	r7, #24
 80131fa:	46bd      	mov	sp, r7
 80131fc:	bdb0      	pop	{r4, r5, r7, pc}
 80131fe:	bf00      	nop
 8013200:	0801aacc 	.word	0x0801aacc
 8013204:	0801b1d4 	.word	0x0801b1d4
 8013208:	0801ab20 	.word	0x0801ab20

0801320c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801320c:	b580      	push	{r7, lr}
 801320e:	b088      	sub	sp, #32
 8013210:	af00      	add	r7, sp, #0
 8013212:	60f8      	str	r0, [r7, #12]
 8013214:	60b9      	str	r1, [r7, #8]
 8013216:	4611      	mov	r1, r2
 8013218:	461a      	mov	r2, r3
 801321a:	460b      	mov	r3, r1
 801321c:	71fb      	strb	r3, [r7, #7]
 801321e:	4613      	mov	r3, r2
 8013220:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013222:	2300      	movs	r3, #0
 8013224:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8013226:	68bb      	ldr	r3, [r7, #8]
 8013228:	2b00      	cmp	r3, #0
 801322a:	d106      	bne.n	801323a <tcp_output_fill_options+0x2e>
 801322c:	4b13      	ldr	r3, [pc, #76]	; (801327c <tcp_output_fill_options+0x70>)
 801322e:	f240 7256 	movw	r2, #1878	; 0x756
 8013232:	4913      	ldr	r1, [pc, #76]	; (8013280 <tcp_output_fill_options+0x74>)
 8013234:	4813      	ldr	r0, [pc, #76]	; (8013284 <tcp_output_fill_options+0x78>)
 8013236:	f003 fee3 	bl	8017000 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801323a:	68bb      	ldr	r3, [r7, #8]
 801323c:	685b      	ldr	r3, [r3, #4]
 801323e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013240:	69bb      	ldr	r3, [r7, #24]
 8013242:	3314      	adds	r3, #20
 8013244:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8013246:	69bb      	ldr	r3, [r7, #24]
 8013248:	f103 0214 	add.w	r2, r3, #20
 801324c:	8bfb      	ldrh	r3, [r7, #30]
 801324e:	009b      	lsls	r3, r3, #2
 8013250:	4619      	mov	r1, r3
 8013252:	79fb      	ldrb	r3, [r7, #7]
 8013254:	009b      	lsls	r3, r3, #2
 8013256:	f003 0304 	and.w	r3, r3, #4
 801325a:	440b      	add	r3, r1
 801325c:	4413      	add	r3, r2
 801325e:	697a      	ldr	r2, [r7, #20]
 8013260:	429a      	cmp	r2, r3
 8013262:	d006      	beq.n	8013272 <tcp_output_fill_options+0x66>
 8013264:	4b05      	ldr	r3, [pc, #20]	; (801327c <tcp_output_fill_options+0x70>)
 8013266:	f240 7275 	movw	r2, #1909	; 0x775
 801326a:	4907      	ldr	r1, [pc, #28]	; (8013288 <tcp_output_fill_options+0x7c>)
 801326c:	4805      	ldr	r0, [pc, #20]	; (8013284 <tcp_output_fill_options+0x78>)
 801326e:	f003 fec7 	bl	8017000 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8013272:	bf00      	nop
 8013274:	3720      	adds	r7, #32
 8013276:	46bd      	mov	sp, r7
 8013278:	bd80      	pop	{r7, pc}
 801327a:	bf00      	nop
 801327c:	0801aacc 	.word	0x0801aacc
 8013280:	0801b1fc 	.word	0x0801b1fc
 8013284:	0801ab20 	.word	0x0801ab20
 8013288:	0801b0f4 	.word	0x0801b0f4

0801328c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801328c:	b580      	push	{r7, lr}
 801328e:	b08a      	sub	sp, #40	; 0x28
 8013290:	af04      	add	r7, sp, #16
 8013292:	60f8      	str	r0, [r7, #12]
 8013294:	60b9      	str	r1, [r7, #8]
 8013296:	607a      	str	r2, [r7, #4]
 8013298:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801329a:	68bb      	ldr	r3, [r7, #8]
 801329c:	2b00      	cmp	r3, #0
 801329e:	d106      	bne.n	80132ae <tcp_output_control_segment+0x22>
 80132a0:	4b1c      	ldr	r3, [pc, #112]	; (8013314 <tcp_output_control_segment+0x88>)
 80132a2:	f240 7287 	movw	r2, #1927	; 0x787
 80132a6:	491c      	ldr	r1, [pc, #112]	; (8013318 <tcp_output_control_segment+0x8c>)
 80132a8:	481c      	ldr	r0, [pc, #112]	; (801331c <tcp_output_control_segment+0x90>)
 80132aa:	f003 fea9 	bl	8017000 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80132ae:	683a      	ldr	r2, [r7, #0]
 80132b0:	6879      	ldr	r1, [r7, #4]
 80132b2:	68f8      	ldr	r0, [r7, #12]
 80132b4:	f7fe fae8 	bl	8011888 <tcp_route>
 80132b8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80132ba:	693b      	ldr	r3, [r7, #16]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d102      	bne.n	80132c6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80132c0:	23fc      	movs	r3, #252	; 0xfc
 80132c2:	75fb      	strb	r3, [r7, #23]
 80132c4:	e01c      	b.n	8013300 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d006      	beq.n	80132da <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	7adb      	ldrb	r3, [r3, #11]
 80132d0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	7a9b      	ldrb	r3, [r3, #10]
 80132d6:	757b      	strb	r3, [r7, #21]
 80132d8:	e003      	b.n	80132e2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80132da:	23ff      	movs	r3, #255	; 0xff
 80132dc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80132de:	2300      	movs	r3, #0
 80132e0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80132e2:	7dba      	ldrb	r2, [r7, #22]
 80132e4:	693b      	ldr	r3, [r7, #16]
 80132e6:	9302      	str	r3, [sp, #8]
 80132e8:	2306      	movs	r3, #6
 80132ea:	9301      	str	r3, [sp, #4]
 80132ec:	7d7b      	ldrb	r3, [r7, #21]
 80132ee:	9300      	str	r3, [sp, #0]
 80132f0:	4613      	mov	r3, r2
 80132f2:	683a      	ldr	r2, [r7, #0]
 80132f4:	6879      	ldr	r1, [r7, #4]
 80132f6:	68b8      	ldr	r0, [r7, #8]
 80132f8:	f002 fad0 	bl	801589c <ip4_output_if>
 80132fc:	4603      	mov	r3, r0
 80132fe:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013300:	68b8      	ldr	r0, [r7, #8]
 8013302:	f7f9 ff69 	bl	800d1d8 <pbuf_free>
  return err;
 8013306:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801330a:	4618      	mov	r0, r3
 801330c:	3718      	adds	r7, #24
 801330e:	46bd      	mov	sp, r7
 8013310:	bd80      	pop	{r7, pc}
 8013312:	bf00      	nop
 8013314:	0801aacc 	.word	0x0801aacc
 8013318:	0801b224 	.word	0x0801b224
 801331c:	0801ab20 	.word	0x0801ab20

08013320 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013320:	b590      	push	{r4, r7, lr}
 8013322:	b08b      	sub	sp, #44	; 0x2c
 8013324:	af04      	add	r7, sp, #16
 8013326:	60f8      	str	r0, [r7, #12]
 8013328:	60b9      	str	r1, [r7, #8]
 801332a:	607a      	str	r2, [r7, #4]
 801332c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801332e:	683b      	ldr	r3, [r7, #0]
 8013330:	2b00      	cmp	r3, #0
 8013332:	d106      	bne.n	8013342 <tcp_rst+0x22>
 8013334:	4b1f      	ldr	r3, [pc, #124]	; (80133b4 <tcp_rst+0x94>)
 8013336:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801333a:	491f      	ldr	r1, [pc, #124]	; (80133b8 <tcp_rst+0x98>)
 801333c:	481f      	ldr	r0, [pc, #124]	; (80133bc <tcp_rst+0x9c>)
 801333e:	f003 fe5f 	bl	8017000 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8013342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013344:	2b00      	cmp	r3, #0
 8013346:	d106      	bne.n	8013356 <tcp_rst+0x36>
 8013348:	4b1a      	ldr	r3, [pc, #104]	; (80133b4 <tcp_rst+0x94>)
 801334a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801334e:	491c      	ldr	r1, [pc, #112]	; (80133c0 <tcp_rst+0xa0>)
 8013350:	481a      	ldr	r0, [pc, #104]	; (80133bc <tcp_rst+0x9c>)
 8013352:	f003 fe55 	bl	8017000 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013356:	2300      	movs	r3, #0
 8013358:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801335a:	f246 0308 	movw	r3, #24584	; 0x6008
 801335e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8013360:	7dfb      	ldrb	r3, [r7, #23]
 8013362:	b29c      	uxth	r4, r3
 8013364:	68b8      	ldr	r0, [r7, #8]
 8013366:	f7f8 fb6e 	bl	800ba46 <lwip_htonl>
 801336a:	4602      	mov	r2, r0
 801336c:	8abb      	ldrh	r3, [r7, #20]
 801336e:	9303      	str	r3, [sp, #12]
 8013370:	2314      	movs	r3, #20
 8013372:	9302      	str	r3, [sp, #8]
 8013374:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013376:	9301      	str	r3, [sp, #4]
 8013378:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801337a:	9300      	str	r3, [sp, #0]
 801337c:	4613      	mov	r3, r2
 801337e:	2200      	movs	r2, #0
 8013380:	4621      	mov	r1, r4
 8013382:	6878      	ldr	r0, [r7, #4]
 8013384:	f7ff fe92 	bl	80130ac <tcp_output_alloc_header_common>
 8013388:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801338a:	693b      	ldr	r3, [r7, #16]
 801338c:	2b00      	cmp	r3, #0
 801338e:	d00c      	beq.n	80133aa <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013390:	7dfb      	ldrb	r3, [r7, #23]
 8013392:	2200      	movs	r2, #0
 8013394:	6939      	ldr	r1, [r7, #16]
 8013396:	68f8      	ldr	r0, [r7, #12]
 8013398:	f7ff ff38 	bl	801320c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801339c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801339e:	683a      	ldr	r2, [r7, #0]
 80133a0:	6939      	ldr	r1, [r7, #16]
 80133a2:	68f8      	ldr	r0, [r7, #12]
 80133a4:	f7ff ff72 	bl	801328c <tcp_output_control_segment>
 80133a8:	e000      	b.n	80133ac <tcp_rst+0x8c>
    return;
 80133aa:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80133ac:	371c      	adds	r7, #28
 80133ae:	46bd      	mov	sp, r7
 80133b0:	bd90      	pop	{r4, r7, pc}
 80133b2:	bf00      	nop
 80133b4:	0801aacc 	.word	0x0801aacc
 80133b8:	0801b250 	.word	0x0801b250
 80133bc:	0801ab20 	.word	0x0801ab20
 80133c0:	0801b26c 	.word	0x0801b26c

080133c4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80133c4:	b590      	push	{r4, r7, lr}
 80133c6:	b087      	sub	sp, #28
 80133c8:	af00      	add	r7, sp, #0
 80133ca:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80133cc:	2300      	movs	r3, #0
 80133ce:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80133d0:	2300      	movs	r3, #0
 80133d2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d106      	bne.n	80133e8 <tcp_send_empty_ack+0x24>
 80133da:	4b28      	ldr	r3, [pc, #160]	; (801347c <tcp_send_empty_ack+0xb8>)
 80133dc:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80133e0:	4927      	ldr	r1, [pc, #156]	; (8013480 <tcp_send_empty_ack+0xbc>)
 80133e2:	4828      	ldr	r0, [pc, #160]	; (8013484 <tcp_send_empty_ack+0xc0>)
 80133e4:	f003 fe0c 	bl	8017000 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80133e8:	7dfb      	ldrb	r3, [r7, #23]
 80133ea:	009b      	lsls	r3, r3, #2
 80133ec:	b2db      	uxtb	r3, r3
 80133ee:	f003 0304 	and.w	r3, r3, #4
 80133f2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80133f4:	7d7b      	ldrb	r3, [r7, #21]
 80133f6:	b29c      	uxth	r4, r3
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80133fc:	4618      	mov	r0, r3
 80133fe:	f7f8 fb22 	bl	800ba46 <lwip_htonl>
 8013402:	4603      	mov	r3, r0
 8013404:	2200      	movs	r2, #0
 8013406:	4621      	mov	r1, r4
 8013408:	6878      	ldr	r0, [r7, #4]
 801340a:	f7ff fec1 	bl	8013190 <tcp_output_alloc_header>
 801340e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013410:	693b      	ldr	r3, [r7, #16]
 8013412:	2b00      	cmp	r3, #0
 8013414:	d109      	bne.n	801342a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	8b5b      	ldrh	r3, [r3, #26]
 801341a:	f043 0303 	orr.w	r3, r3, #3
 801341e:	b29a      	uxth	r2, r3
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013424:	f06f 0301 	mvn.w	r3, #1
 8013428:	e023      	b.n	8013472 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801342a:	7dbb      	ldrb	r3, [r7, #22]
 801342c:	7dfa      	ldrb	r2, [r7, #23]
 801342e:	6939      	ldr	r1, [r7, #16]
 8013430:	6878      	ldr	r0, [r7, #4]
 8013432:	f7ff feeb 	bl	801320c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013436:	687a      	ldr	r2, [r7, #4]
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	3304      	adds	r3, #4
 801343c:	6939      	ldr	r1, [r7, #16]
 801343e:	6878      	ldr	r0, [r7, #4]
 8013440:	f7ff ff24 	bl	801328c <tcp_output_control_segment>
 8013444:	4603      	mov	r3, r0
 8013446:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013448:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801344c:	2b00      	cmp	r3, #0
 801344e:	d007      	beq.n	8013460 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	8b5b      	ldrh	r3, [r3, #26]
 8013454:	f043 0303 	orr.w	r3, r3, #3
 8013458:	b29a      	uxth	r2, r3
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	835a      	strh	r2, [r3, #26]
 801345e:	e006      	b.n	801346e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	8b5b      	ldrh	r3, [r3, #26]
 8013464:	f023 0303 	bic.w	r3, r3, #3
 8013468:	b29a      	uxth	r2, r3
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801346e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013472:	4618      	mov	r0, r3
 8013474:	371c      	adds	r7, #28
 8013476:	46bd      	mov	sp, r7
 8013478:	bd90      	pop	{r4, r7, pc}
 801347a:	bf00      	nop
 801347c:	0801aacc 	.word	0x0801aacc
 8013480:	0801b288 	.word	0x0801b288
 8013484:	0801ab20 	.word	0x0801ab20

08013488 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013488:	b590      	push	{r4, r7, lr}
 801348a:	b087      	sub	sp, #28
 801348c:	af00      	add	r7, sp, #0
 801348e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013490:	2300      	movs	r3, #0
 8013492:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	2b00      	cmp	r3, #0
 8013498:	d106      	bne.n	80134a8 <tcp_keepalive+0x20>
 801349a:	4b18      	ldr	r3, [pc, #96]	; (80134fc <tcp_keepalive+0x74>)
 801349c:	f640 0224 	movw	r2, #2084	; 0x824
 80134a0:	4917      	ldr	r1, [pc, #92]	; (8013500 <tcp_keepalive+0x78>)
 80134a2:	4818      	ldr	r0, [pc, #96]	; (8013504 <tcp_keepalive+0x7c>)
 80134a4:	f003 fdac 	bl	8017000 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80134a8:	7dfb      	ldrb	r3, [r7, #23]
 80134aa:	b29c      	uxth	r4, r3
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80134b0:	3b01      	subs	r3, #1
 80134b2:	4618      	mov	r0, r3
 80134b4:	f7f8 fac7 	bl	800ba46 <lwip_htonl>
 80134b8:	4603      	mov	r3, r0
 80134ba:	2200      	movs	r2, #0
 80134bc:	4621      	mov	r1, r4
 80134be:	6878      	ldr	r0, [r7, #4]
 80134c0:	f7ff fe66 	bl	8013190 <tcp_output_alloc_header>
 80134c4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80134c6:	693b      	ldr	r3, [r7, #16]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d102      	bne.n	80134d2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80134cc:	f04f 33ff 	mov.w	r3, #4294967295
 80134d0:	e010      	b.n	80134f4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80134d2:	7dfb      	ldrb	r3, [r7, #23]
 80134d4:	2200      	movs	r2, #0
 80134d6:	6939      	ldr	r1, [r7, #16]
 80134d8:	6878      	ldr	r0, [r7, #4]
 80134da:	f7ff fe97 	bl	801320c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80134de:	687a      	ldr	r2, [r7, #4]
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	3304      	adds	r3, #4
 80134e4:	6939      	ldr	r1, [r7, #16]
 80134e6:	6878      	ldr	r0, [r7, #4]
 80134e8:	f7ff fed0 	bl	801328c <tcp_output_control_segment>
 80134ec:	4603      	mov	r3, r0
 80134ee:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80134f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80134f4:	4618      	mov	r0, r3
 80134f6:	371c      	adds	r7, #28
 80134f8:	46bd      	mov	sp, r7
 80134fa:	bd90      	pop	{r4, r7, pc}
 80134fc:	0801aacc 	.word	0x0801aacc
 8013500:	0801b2a8 	.word	0x0801b2a8
 8013504:	0801ab20 	.word	0x0801ab20

08013508 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013508:	b590      	push	{r4, r7, lr}
 801350a:	b08b      	sub	sp, #44	; 0x2c
 801350c:	af00      	add	r7, sp, #0
 801350e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013510:	2300      	movs	r3, #0
 8013512:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	2b00      	cmp	r3, #0
 801351a:	d106      	bne.n	801352a <tcp_zero_window_probe+0x22>
 801351c:	4b4c      	ldr	r3, [pc, #304]	; (8013650 <tcp_zero_window_probe+0x148>)
 801351e:	f640 024f 	movw	r2, #2127	; 0x84f
 8013522:	494c      	ldr	r1, [pc, #304]	; (8013654 <tcp_zero_window_probe+0x14c>)
 8013524:	484c      	ldr	r0, [pc, #304]	; (8013658 <tcp_zero_window_probe+0x150>)
 8013526:	f003 fd6b 	bl	8017000 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801352e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013530:	6a3b      	ldr	r3, [r7, #32]
 8013532:	2b00      	cmp	r3, #0
 8013534:	d101      	bne.n	801353a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8013536:	2300      	movs	r3, #0
 8013538:	e086      	b.n	8013648 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013540:	2bff      	cmp	r3, #255	; 0xff
 8013542:	d007      	beq.n	8013554 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801354a:	3301      	adds	r3, #1
 801354c:	b2da      	uxtb	r2, r3
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013554:	6a3b      	ldr	r3, [r7, #32]
 8013556:	68db      	ldr	r3, [r3, #12]
 8013558:	899b      	ldrh	r3, [r3, #12]
 801355a:	b29b      	uxth	r3, r3
 801355c:	4618      	mov	r0, r3
 801355e:	f7f8 fa5d 	bl	800ba1c <lwip_htons>
 8013562:	4603      	mov	r3, r0
 8013564:	b2db      	uxtb	r3, r3
 8013566:	f003 0301 	and.w	r3, r3, #1
 801356a:	2b00      	cmp	r3, #0
 801356c:	d005      	beq.n	801357a <tcp_zero_window_probe+0x72>
 801356e:	6a3b      	ldr	r3, [r7, #32]
 8013570:	891b      	ldrh	r3, [r3, #8]
 8013572:	2b00      	cmp	r3, #0
 8013574:	d101      	bne.n	801357a <tcp_zero_window_probe+0x72>
 8013576:	2301      	movs	r3, #1
 8013578:	e000      	b.n	801357c <tcp_zero_window_probe+0x74>
 801357a:	2300      	movs	r3, #0
 801357c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801357e:	7ffb      	ldrb	r3, [r7, #31]
 8013580:	2b00      	cmp	r3, #0
 8013582:	bf0c      	ite	eq
 8013584:	2301      	moveq	r3, #1
 8013586:	2300      	movne	r3, #0
 8013588:	b2db      	uxtb	r3, r3
 801358a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801358c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013590:	b299      	uxth	r1, r3
 8013592:	6a3b      	ldr	r3, [r7, #32]
 8013594:	68db      	ldr	r3, [r3, #12]
 8013596:	685b      	ldr	r3, [r3, #4]
 8013598:	8bba      	ldrh	r2, [r7, #28]
 801359a:	6878      	ldr	r0, [r7, #4]
 801359c:	f7ff fdf8 	bl	8013190 <tcp_output_alloc_header>
 80135a0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80135a2:	69bb      	ldr	r3, [r7, #24]
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d102      	bne.n	80135ae <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80135a8:	f04f 33ff 	mov.w	r3, #4294967295
 80135ac:	e04c      	b.n	8013648 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80135ae:	69bb      	ldr	r3, [r7, #24]
 80135b0:	685b      	ldr	r3, [r3, #4]
 80135b2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80135b4:	7ffb      	ldrb	r3, [r7, #31]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d011      	beq.n	80135de <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80135ba:	697b      	ldr	r3, [r7, #20]
 80135bc:	899b      	ldrh	r3, [r3, #12]
 80135be:	b29b      	uxth	r3, r3
 80135c0:	b21b      	sxth	r3, r3
 80135c2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80135c6:	b21c      	sxth	r4, r3
 80135c8:	2011      	movs	r0, #17
 80135ca:	f7f8 fa27 	bl	800ba1c <lwip_htons>
 80135ce:	4603      	mov	r3, r0
 80135d0:	b21b      	sxth	r3, r3
 80135d2:	4323      	orrs	r3, r4
 80135d4:	b21b      	sxth	r3, r3
 80135d6:	b29a      	uxth	r2, r3
 80135d8:	697b      	ldr	r3, [r7, #20]
 80135da:	819a      	strh	r2, [r3, #12]
 80135dc:	e010      	b.n	8013600 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80135de:	69bb      	ldr	r3, [r7, #24]
 80135e0:	685b      	ldr	r3, [r3, #4]
 80135e2:	3314      	adds	r3, #20
 80135e4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80135e6:	6a3b      	ldr	r3, [r7, #32]
 80135e8:	6858      	ldr	r0, [r3, #4]
 80135ea:	6a3b      	ldr	r3, [r7, #32]
 80135ec:	685b      	ldr	r3, [r3, #4]
 80135ee:	891a      	ldrh	r2, [r3, #8]
 80135f0:	6a3b      	ldr	r3, [r7, #32]
 80135f2:	891b      	ldrh	r3, [r3, #8]
 80135f4:	1ad3      	subs	r3, r2, r3
 80135f6:	b29b      	uxth	r3, r3
 80135f8:	2201      	movs	r2, #1
 80135fa:	6939      	ldr	r1, [r7, #16]
 80135fc:	f7f9 fff2 	bl	800d5e4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013600:	6a3b      	ldr	r3, [r7, #32]
 8013602:	68db      	ldr	r3, [r3, #12]
 8013604:	685b      	ldr	r3, [r3, #4]
 8013606:	4618      	mov	r0, r3
 8013608:	f7f8 fa1d 	bl	800ba46 <lwip_htonl>
 801360c:	4603      	mov	r3, r0
 801360e:	3301      	adds	r3, #1
 8013610:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	1ad3      	subs	r3, r2, r3
 801361a:	2b00      	cmp	r3, #0
 801361c:	da02      	bge.n	8013624 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	68fa      	ldr	r2, [r7, #12]
 8013622:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013624:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013628:	2200      	movs	r2, #0
 801362a:	69b9      	ldr	r1, [r7, #24]
 801362c:	6878      	ldr	r0, [r7, #4]
 801362e:	f7ff fded 	bl	801320c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013632:	687a      	ldr	r2, [r7, #4]
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	3304      	adds	r3, #4
 8013638:	69b9      	ldr	r1, [r7, #24]
 801363a:	6878      	ldr	r0, [r7, #4]
 801363c:	f7ff fe26 	bl	801328c <tcp_output_control_segment>
 8013640:	4603      	mov	r3, r0
 8013642:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013644:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013648:	4618      	mov	r0, r3
 801364a:	372c      	adds	r7, #44	; 0x2c
 801364c:	46bd      	mov	sp, r7
 801364e:	bd90      	pop	{r4, r7, pc}
 8013650:	0801aacc 	.word	0x0801aacc
 8013654:	0801b2c4 	.word	0x0801b2c4
 8013658:	0801ab20 	.word	0x0801ab20

0801365c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801365c:	b580      	push	{r7, lr}
 801365e:	b082      	sub	sp, #8
 8013660:	af00      	add	r7, sp, #0
 8013662:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013664:	f7fa f8ac 	bl	800d7c0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013668:	4b0a      	ldr	r3, [pc, #40]	; (8013694 <tcpip_tcp_timer+0x38>)
 801366a:	681b      	ldr	r3, [r3, #0]
 801366c:	2b00      	cmp	r3, #0
 801366e:	d103      	bne.n	8013678 <tcpip_tcp_timer+0x1c>
 8013670:	4b09      	ldr	r3, [pc, #36]	; (8013698 <tcpip_tcp_timer+0x3c>)
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	2b00      	cmp	r3, #0
 8013676:	d005      	beq.n	8013684 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013678:	2200      	movs	r2, #0
 801367a:	4908      	ldr	r1, [pc, #32]	; (801369c <tcpip_tcp_timer+0x40>)
 801367c:	20fa      	movs	r0, #250	; 0xfa
 801367e:	f000 f8f3 	bl	8013868 <sys_timeout>
 8013682:	e003      	b.n	801368c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013684:	4b06      	ldr	r3, [pc, #24]	; (80136a0 <tcpip_tcp_timer+0x44>)
 8013686:	2200      	movs	r2, #0
 8013688:	601a      	str	r2, [r3, #0]
  }
}
 801368a:	bf00      	nop
 801368c:	bf00      	nop
 801368e:	3708      	adds	r7, #8
 8013690:	46bd      	mov	sp, r7
 8013692:	bd80      	pop	{r7, pc}
 8013694:	2000d150 	.word	0x2000d150
 8013698:	2000d154 	.word	0x2000d154
 801369c:	0801365d 	.word	0x0801365d
 80136a0:	2000d19c 	.word	0x2000d19c

080136a4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80136a4:	b580      	push	{r7, lr}
 80136a6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80136a8:	4b0a      	ldr	r3, [pc, #40]	; (80136d4 <tcp_timer_needed+0x30>)
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d10f      	bne.n	80136d0 <tcp_timer_needed+0x2c>
 80136b0:	4b09      	ldr	r3, [pc, #36]	; (80136d8 <tcp_timer_needed+0x34>)
 80136b2:	681b      	ldr	r3, [r3, #0]
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d103      	bne.n	80136c0 <tcp_timer_needed+0x1c>
 80136b8:	4b08      	ldr	r3, [pc, #32]	; (80136dc <tcp_timer_needed+0x38>)
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d007      	beq.n	80136d0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80136c0:	4b04      	ldr	r3, [pc, #16]	; (80136d4 <tcp_timer_needed+0x30>)
 80136c2:	2201      	movs	r2, #1
 80136c4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80136c6:	2200      	movs	r2, #0
 80136c8:	4905      	ldr	r1, [pc, #20]	; (80136e0 <tcp_timer_needed+0x3c>)
 80136ca:	20fa      	movs	r0, #250	; 0xfa
 80136cc:	f000 f8cc 	bl	8013868 <sys_timeout>
  }
}
 80136d0:	bf00      	nop
 80136d2:	bd80      	pop	{r7, pc}
 80136d4:	2000d19c 	.word	0x2000d19c
 80136d8:	2000d150 	.word	0x2000d150
 80136dc:	2000d154 	.word	0x2000d154
 80136e0:	0801365d 	.word	0x0801365d

080136e4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80136e4:	b580      	push	{r7, lr}
 80136e6:	b086      	sub	sp, #24
 80136e8:	af00      	add	r7, sp, #0
 80136ea:	60f8      	str	r0, [r7, #12]
 80136ec:	60b9      	str	r1, [r7, #8]
 80136ee:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80136f0:	200a      	movs	r0, #10
 80136f2:	f7f8 fe49 	bl	800c388 <memp_malloc>
 80136f6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80136f8:	693b      	ldr	r3, [r7, #16]
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d109      	bne.n	8013712 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80136fe:	693b      	ldr	r3, [r7, #16]
 8013700:	2b00      	cmp	r3, #0
 8013702:	d151      	bne.n	80137a8 <sys_timeout_abs+0xc4>
 8013704:	4b2a      	ldr	r3, [pc, #168]	; (80137b0 <sys_timeout_abs+0xcc>)
 8013706:	22be      	movs	r2, #190	; 0xbe
 8013708:	492a      	ldr	r1, [pc, #168]	; (80137b4 <sys_timeout_abs+0xd0>)
 801370a:	482b      	ldr	r0, [pc, #172]	; (80137b8 <sys_timeout_abs+0xd4>)
 801370c:	f003 fc78 	bl	8017000 <iprintf>
    return;
 8013710:	e04a      	b.n	80137a8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013712:	693b      	ldr	r3, [r7, #16]
 8013714:	2200      	movs	r2, #0
 8013716:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013718:	693b      	ldr	r3, [r7, #16]
 801371a:	68ba      	ldr	r2, [r7, #8]
 801371c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801371e:	693b      	ldr	r3, [r7, #16]
 8013720:	687a      	ldr	r2, [r7, #4]
 8013722:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013724:	693b      	ldr	r3, [r7, #16]
 8013726:	68fa      	ldr	r2, [r7, #12]
 8013728:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801372a:	4b24      	ldr	r3, [pc, #144]	; (80137bc <sys_timeout_abs+0xd8>)
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	2b00      	cmp	r3, #0
 8013730:	d103      	bne.n	801373a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013732:	4a22      	ldr	r2, [pc, #136]	; (80137bc <sys_timeout_abs+0xd8>)
 8013734:	693b      	ldr	r3, [r7, #16]
 8013736:	6013      	str	r3, [r2, #0]
    return;
 8013738:	e037      	b.n	80137aa <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801373a:	693b      	ldr	r3, [r7, #16]
 801373c:	685a      	ldr	r2, [r3, #4]
 801373e:	4b1f      	ldr	r3, [pc, #124]	; (80137bc <sys_timeout_abs+0xd8>)
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	685b      	ldr	r3, [r3, #4]
 8013744:	1ad3      	subs	r3, r2, r3
 8013746:	0fdb      	lsrs	r3, r3, #31
 8013748:	f003 0301 	and.w	r3, r3, #1
 801374c:	b2db      	uxtb	r3, r3
 801374e:	2b00      	cmp	r3, #0
 8013750:	d007      	beq.n	8013762 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013752:	4b1a      	ldr	r3, [pc, #104]	; (80137bc <sys_timeout_abs+0xd8>)
 8013754:	681a      	ldr	r2, [r3, #0]
 8013756:	693b      	ldr	r3, [r7, #16]
 8013758:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801375a:	4a18      	ldr	r2, [pc, #96]	; (80137bc <sys_timeout_abs+0xd8>)
 801375c:	693b      	ldr	r3, [r7, #16]
 801375e:	6013      	str	r3, [r2, #0]
 8013760:	e023      	b.n	80137aa <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013762:	4b16      	ldr	r3, [pc, #88]	; (80137bc <sys_timeout_abs+0xd8>)
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	617b      	str	r3, [r7, #20]
 8013768:	e01a      	b.n	80137a0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801376a:	697b      	ldr	r3, [r7, #20]
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d00b      	beq.n	801378a <sys_timeout_abs+0xa6>
 8013772:	693b      	ldr	r3, [r7, #16]
 8013774:	685a      	ldr	r2, [r3, #4]
 8013776:	697b      	ldr	r3, [r7, #20]
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	685b      	ldr	r3, [r3, #4]
 801377c:	1ad3      	subs	r3, r2, r3
 801377e:	0fdb      	lsrs	r3, r3, #31
 8013780:	f003 0301 	and.w	r3, r3, #1
 8013784:	b2db      	uxtb	r3, r3
 8013786:	2b00      	cmp	r3, #0
 8013788:	d007      	beq.n	801379a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801378a:	697b      	ldr	r3, [r7, #20]
 801378c:	681a      	ldr	r2, [r3, #0]
 801378e:	693b      	ldr	r3, [r7, #16]
 8013790:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013792:	697b      	ldr	r3, [r7, #20]
 8013794:	693a      	ldr	r2, [r7, #16]
 8013796:	601a      	str	r2, [r3, #0]
        break;
 8013798:	e007      	b.n	80137aa <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801379a:	697b      	ldr	r3, [r7, #20]
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	617b      	str	r3, [r7, #20]
 80137a0:	697b      	ldr	r3, [r7, #20]
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d1e1      	bne.n	801376a <sys_timeout_abs+0x86>
 80137a6:	e000      	b.n	80137aa <sys_timeout_abs+0xc6>
    return;
 80137a8:	bf00      	nop
      }
    }
  }
}
 80137aa:	3718      	adds	r7, #24
 80137ac:	46bd      	mov	sp, r7
 80137ae:	bd80      	pop	{r7, pc}
 80137b0:	0801b2e8 	.word	0x0801b2e8
 80137b4:	0801b31c 	.word	0x0801b31c
 80137b8:	0801b35c 	.word	0x0801b35c
 80137bc:	2000d194 	.word	0x2000d194

080137c0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80137c0:	b580      	push	{r7, lr}
 80137c2:	b086      	sub	sp, #24
 80137c4:	af00      	add	r7, sp, #0
 80137c6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80137cc:	697b      	ldr	r3, [r7, #20]
 80137ce:	685b      	ldr	r3, [r3, #4]
 80137d0:	4798      	blx	r3

  now = sys_now();
 80137d2:	f7f1 f9b7 	bl	8004b44 <sys_now>
 80137d6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80137d8:	697b      	ldr	r3, [r7, #20]
 80137da:	681a      	ldr	r2, [r3, #0]
 80137dc:	4b0f      	ldr	r3, [pc, #60]	; (801381c <lwip_cyclic_timer+0x5c>)
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	4413      	add	r3, r2
 80137e2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80137e4:	68fa      	ldr	r2, [r7, #12]
 80137e6:	693b      	ldr	r3, [r7, #16]
 80137e8:	1ad3      	subs	r3, r2, r3
 80137ea:	0fdb      	lsrs	r3, r3, #31
 80137ec:	f003 0301 	and.w	r3, r3, #1
 80137f0:	b2db      	uxtb	r3, r3
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d009      	beq.n	801380a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80137f6:	697b      	ldr	r3, [r7, #20]
 80137f8:	681a      	ldr	r2, [r3, #0]
 80137fa:	693b      	ldr	r3, [r7, #16]
 80137fc:	4413      	add	r3, r2
 80137fe:	687a      	ldr	r2, [r7, #4]
 8013800:	4907      	ldr	r1, [pc, #28]	; (8013820 <lwip_cyclic_timer+0x60>)
 8013802:	4618      	mov	r0, r3
 8013804:	f7ff ff6e 	bl	80136e4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013808:	e004      	b.n	8013814 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801380a:	687a      	ldr	r2, [r7, #4]
 801380c:	4904      	ldr	r1, [pc, #16]	; (8013820 <lwip_cyclic_timer+0x60>)
 801380e:	68f8      	ldr	r0, [r7, #12]
 8013810:	f7ff ff68 	bl	80136e4 <sys_timeout_abs>
}
 8013814:	bf00      	nop
 8013816:	3718      	adds	r7, #24
 8013818:	46bd      	mov	sp, r7
 801381a:	bd80      	pop	{r7, pc}
 801381c:	2000d198 	.word	0x2000d198
 8013820:	080137c1 	.word	0x080137c1

08013824 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013824:	b580      	push	{r7, lr}
 8013826:	b082      	sub	sp, #8
 8013828:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801382a:	2301      	movs	r3, #1
 801382c:	607b      	str	r3, [r7, #4]
 801382e:	e00e      	b.n	801384e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013830:	4a0b      	ldr	r2, [pc, #44]	; (8013860 <sys_timeouts_init+0x3c>)
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	00db      	lsls	r3, r3, #3
 801383c:	4a08      	ldr	r2, [pc, #32]	; (8013860 <sys_timeouts_init+0x3c>)
 801383e:	4413      	add	r3, r2
 8013840:	461a      	mov	r2, r3
 8013842:	4908      	ldr	r1, [pc, #32]	; (8013864 <sys_timeouts_init+0x40>)
 8013844:	f000 f810 	bl	8013868 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	3301      	adds	r3, #1
 801384c:	607b      	str	r3, [r7, #4]
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	2b02      	cmp	r3, #2
 8013852:	d9ed      	bls.n	8013830 <sys_timeouts_init+0xc>
  }
}
 8013854:	bf00      	nop
 8013856:	bf00      	nop
 8013858:	3708      	adds	r7, #8
 801385a:	46bd      	mov	sp, r7
 801385c:	bd80      	pop	{r7, pc}
 801385e:	bf00      	nop
 8013860:	0801bfc0 	.word	0x0801bfc0
 8013864:	080137c1 	.word	0x080137c1

08013868 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013868:	b580      	push	{r7, lr}
 801386a:	b086      	sub	sp, #24
 801386c:	af00      	add	r7, sp, #0
 801386e:	60f8      	str	r0, [r7, #12]
 8013870:	60b9      	str	r1, [r7, #8]
 8013872:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801387a:	d306      	bcc.n	801388a <sys_timeout+0x22>
 801387c:	4b0a      	ldr	r3, [pc, #40]	; (80138a8 <sys_timeout+0x40>)
 801387e:	f240 1229 	movw	r2, #297	; 0x129
 8013882:	490a      	ldr	r1, [pc, #40]	; (80138ac <sys_timeout+0x44>)
 8013884:	480a      	ldr	r0, [pc, #40]	; (80138b0 <sys_timeout+0x48>)
 8013886:	f003 fbbb 	bl	8017000 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801388a:	f7f1 f95b 	bl	8004b44 <sys_now>
 801388e:	4602      	mov	r2, r0
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	4413      	add	r3, r2
 8013894:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013896:	687a      	ldr	r2, [r7, #4]
 8013898:	68b9      	ldr	r1, [r7, #8]
 801389a:	6978      	ldr	r0, [r7, #20]
 801389c:	f7ff ff22 	bl	80136e4 <sys_timeout_abs>
#endif
}
 80138a0:	bf00      	nop
 80138a2:	3718      	adds	r7, #24
 80138a4:	46bd      	mov	sp, r7
 80138a6:	bd80      	pop	{r7, pc}
 80138a8:	0801b2e8 	.word	0x0801b2e8
 80138ac:	0801b384 	.word	0x0801b384
 80138b0:	0801b35c 	.word	0x0801b35c

080138b4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80138b4:	b580      	push	{r7, lr}
 80138b6:	b084      	sub	sp, #16
 80138b8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80138ba:	f7f1 f943 	bl	8004b44 <sys_now>
 80138be:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80138c0:	4b17      	ldr	r3, [pc, #92]	; (8013920 <sys_check_timeouts+0x6c>)
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80138c6:	68bb      	ldr	r3, [r7, #8]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d022      	beq.n	8013912 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80138cc:	68bb      	ldr	r3, [r7, #8]
 80138ce:	685b      	ldr	r3, [r3, #4]
 80138d0:	68fa      	ldr	r2, [r7, #12]
 80138d2:	1ad3      	subs	r3, r2, r3
 80138d4:	0fdb      	lsrs	r3, r3, #31
 80138d6:	f003 0301 	and.w	r3, r3, #1
 80138da:	b2db      	uxtb	r3, r3
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d11a      	bne.n	8013916 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80138e0:	68bb      	ldr	r3, [r7, #8]
 80138e2:	681b      	ldr	r3, [r3, #0]
 80138e4:	4a0e      	ldr	r2, [pc, #56]	; (8013920 <sys_check_timeouts+0x6c>)
 80138e6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80138e8:	68bb      	ldr	r3, [r7, #8]
 80138ea:	689b      	ldr	r3, [r3, #8]
 80138ec:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80138ee:	68bb      	ldr	r3, [r7, #8]
 80138f0:	68db      	ldr	r3, [r3, #12]
 80138f2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80138f4:	68bb      	ldr	r3, [r7, #8]
 80138f6:	685b      	ldr	r3, [r3, #4]
 80138f8:	4a0a      	ldr	r2, [pc, #40]	; (8013924 <sys_check_timeouts+0x70>)
 80138fa:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80138fc:	68b9      	ldr	r1, [r7, #8]
 80138fe:	200a      	movs	r0, #10
 8013900:	f7f8 fd94 	bl	800c42c <memp_free>
    if (handler != NULL) {
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	2b00      	cmp	r3, #0
 8013908:	d0da      	beq.n	80138c0 <sys_check_timeouts+0xc>
      handler(arg);
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	6838      	ldr	r0, [r7, #0]
 801390e:	4798      	blx	r3
  do {
 8013910:	e7d6      	b.n	80138c0 <sys_check_timeouts+0xc>
      return;
 8013912:	bf00      	nop
 8013914:	e000      	b.n	8013918 <sys_check_timeouts+0x64>
      return;
 8013916:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013918:	3710      	adds	r7, #16
 801391a:	46bd      	mov	sp, r7
 801391c:	bd80      	pop	{r7, pc}
 801391e:	bf00      	nop
 8013920:	2000d194 	.word	0x2000d194
 8013924:	2000d198 	.word	0x2000d198

08013928 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013928:	b580      	push	{r7, lr}
 801392a:	b082      	sub	sp, #8
 801392c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801392e:	4b16      	ldr	r3, [pc, #88]	; (8013988 <sys_timeouts_sleeptime+0x60>)
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	2b00      	cmp	r3, #0
 8013934:	d102      	bne.n	801393c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8013936:	f04f 33ff 	mov.w	r3, #4294967295
 801393a:	e020      	b.n	801397e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801393c:	f7f1 f902 	bl	8004b44 <sys_now>
 8013940:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8013942:	4b11      	ldr	r3, [pc, #68]	; (8013988 <sys_timeouts_sleeptime+0x60>)
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	685a      	ldr	r2, [r3, #4]
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	1ad3      	subs	r3, r2, r3
 801394c:	0fdb      	lsrs	r3, r3, #31
 801394e:	f003 0301 	and.w	r3, r3, #1
 8013952:	b2db      	uxtb	r3, r3
 8013954:	2b00      	cmp	r3, #0
 8013956:	d001      	beq.n	801395c <sys_timeouts_sleeptime+0x34>
    return 0;
 8013958:	2300      	movs	r3, #0
 801395a:	e010      	b.n	801397e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801395c:	4b0a      	ldr	r3, [pc, #40]	; (8013988 <sys_timeouts_sleeptime+0x60>)
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	685a      	ldr	r2, [r3, #4]
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	1ad3      	subs	r3, r2, r3
 8013966:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013968:	683b      	ldr	r3, [r7, #0]
 801396a:	2b00      	cmp	r3, #0
 801396c:	da06      	bge.n	801397c <sys_timeouts_sleeptime+0x54>
 801396e:	4b07      	ldr	r3, [pc, #28]	; (801398c <sys_timeouts_sleeptime+0x64>)
 8013970:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8013974:	4906      	ldr	r1, [pc, #24]	; (8013990 <sys_timeouts_sleeptime+0x68>)
 8013976:	4807      	ldr	r0, [pc, #28]	; (8013994 <sys_timeouts_sleeptime+0x6c>)
 8013978:	f003 fb42 	bl	8017000 <iprintf>
    return ret;
 801397c:	683b      	ldr	r3, [r7, #0]
  }
}
 801397e:	4618      	mov	r0, r3
 8013980:	3708      	adds	r7, #8
 8013982:	46bd      	mov	sp, r7
 8013984:	bd80      	pop	{r7, pc}
 8013986:	bf00      	nop
 8013988:	2000d194 	.word	0x2000d194
 801398c:	0801b2e8 	.word	0x0801b2e8
 8013990:	0801b3bc 	.word	0x0801b3bc
 8013994:	0801b35c 	.word	0x0801b35c

08013998 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013998:	b580      	push	{r7, lr}
 801399a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801399c:	f003 fb48 	bl	8017030 <rand>
 80139a0:	4603      	mov	r3, r0
 80139a2:	b29b      	uxth	r3, r3
 80139a4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80139a8:	b29b      	uxth	r3, r3
 80139aa:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80139ae:	b29a      	uxth	r2, r3
 80139b0:	4b01      	ldr	r3, [pc, #4]	; (80139b8 <udp_init+0x20>)
 80139b2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80139b4:	bf00      	nop
 80139b6:	bd80      	pop	{r7, pc}
 80139b8:	20000018 	.word	0x20000018

080139bc <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80139bc:	b480      	push	{r7}
 80139be:	b083      	sub	sp, #12
 80139c0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80139c2:	2300      	movs	r3, #0
 80139c4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80139c6:	4b17      	ldr	r3, [pc, #92]	; (8013a24 <udp_new_port+0x68>)
 80139c8:	881b      	ldrh	r3, [r3, #0]
 80139ca:	1c5a      	adds	r2, r3, #1
 80139cc:	b291      	uxth	r1, r2
 80139ce:	4a15      	ldr	r2, [pc, #84]	; (8013a24 <udp_new_port+0x68>)
 80139d0:	8011      	strh	r1, [r2, #0]
 80139d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80139d6:	4293      	cmp	r3, r2
 80139d8:	d103      	bne.n	80139e2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80139da:	4b12      	ldr	r3, [pc, #72]	; (8013a24 <udp_new_port+0x68>)
 80139dc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80139e0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80139e2:	4b11      	ldr	r3, [pc, #68]	; (8013a28 <udp_new_port+0x6c>)
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	603b      	str	r3, [r7, #0]
 80139e8:	e011      	b.n	8013a0e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80139ea:	683b      	ldr	r3, [r7, #0]
 80139ec:	8a5a      	ldrh	r2, [r3, #18]
 80139ee:	4b0d      	ldr	r3, [pc, #52]	; (8013a24 <udp_new_port+0x68>)
 80139f0:	881b      	ldrh	r3, [r3, #0]
 80139f2:	429a      	cmp	r2, r3
 80139f4:	d108      	bne.n	8013a08 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80139f6:	88fb      	ldrh	r3, [r7, #6]
 80139f8:	3301      	adds	r3, #1
 80139fa:	80fb      	strh	r3, [r7, #6]
 80139fc:	88fb      	ldrh	r3, [r7, #6]
 80139fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013a02:	d3e0      	bcc.n	80139c6 <udp_new_port+0xa>
        return 0;
 8013a04:	2300      	movs	r3, #0
 8013a06:	e007      	b.n	8013a18 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a08:	683b      	ldr	r3, [r7, #0]
 8013a0a:	68db      	ldr	r3, [r3, #12]
 8013a0c:	603b      	str	r3, [r7, #0]
 8013a0e:	683b      	ldr	r3, [r7, #0]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d1ea      	bne.n	80139ea <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013a14:	4b03      	ldr	r3, [pc, #12]	; (8013a24 <udp_new_port+0x68>)
 8013a16:	881b      	ldrh	r3, [r3, #0]
}
 8013a18:	4618      	mov	r0, r3
 8013a1a:	370c      	adds	r7, #12
 8013a1c:	46bd      	mov	sp, r7
 8013a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a22:	4770      	bx	lr
 8013a24:	20000018 	.word	0x20000018
 8013a28:	2000d1a0 	.word	0x2000d1a0

08013a2c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013a2c:	b580      	push	{r7, lr}
 8013a2e:	b084      	sub	sp, #16
 8013a30:	af00      	add	r7, sp, #0
 8013a32:	60f8      	str	r0, [r7, #12]
 8013a34:	60b9      	str	r1, [r7, #8]
 8013a36:	4613      	mov	r3, r2
 8013a38:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d105      	bne.n	8013a4c <udp_input_local_match+0x20>
 8013a40:	4b27      	ldr	r3, [pc, #156]	; (8013ae0 <udp_input_local_match+0xb4>)
 8013a42:	2287      	movs	r2, #135	; 0x87
 8013a44:	4927      	ldr	r1, [pc, #156]	; (8013ae4 <udp_input_local_match+0xb8>)
 8013a46:	4828      	ldr	r0, [pc, #160]	; (8013ae8 <udp_input_local_match+0xbc>)
 8013a48:	f003 fada 	bl	8017000 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013a4c:	68bb      	ldr	r3, [r7, #8]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d105      	bne.n	8013a5e <udp_input_local_match+0x32>
 8013a52:	4b23      	ldr	r3, [pc, #140]	; (8013ae0 <udp_input_local_match+0xb4>)
 8013a54:	2288      	movs	r2, #136	; 0x88
 8013a56:	4925      	ldr	r1, [pc, #148]	; (8013aec <udp_input_local_match+0xc0>)
 8013a58:	4823      	ldr	r0, [pc, #140]	; (8013ae8 <udp_input_local_match+0xbc>)
 8013a5a:	f003 fad1 	bl	8017000 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	7a1b      	ldrb	r3, [r3, #8]
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d00b      	beq.n	8013a7e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	7a1a      	ldrb	r2, [r3, #8]
 8013a6a:	4b21      	ldr	r3, [pc, #132]	; (8013af0 <udp_input_local_match+0xc4>)
 8013a6c:	685b      	ldr	r3, [r3, #4]
 8013a6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013a72:	3301      	adds	r3, #1
 8013a74:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013a76:	429a      	cmp	r2, r3
 8013a78:	d001      	beq.n	8013a7e <udp_input_local_match+0x52>
    return 0;
 8013a7a:	2300      	movs	r3, #0
 8013a7c:	e02b      	b.n	8013ad6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013a7e:	79fb      	ldrb	r3, [r7, #7]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d018      	beq.n	8013ab6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d013      	beq.n	8013ab2 <udp_input_local_match+0x86>
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d00f      	beq.n	8013ab2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013a92:	4b17      	ldr	r3, [pc, #92]	; (8013af0 <udp_input_local_match+0xc4>)
 8013a94:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a9a:	d00a      	beq.n	8013ab2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	681a      	ldr	r2, [r3, #0]
 8013aa0:	4b13      	ldr	r3, [pc, #76]	; (8013af0 <udp_input_local_match+0xc4>)
 8013aa2:	695b      	ldr	r3, [r3, #20]
 8013aa4:	405a      	eors	r2, r3
 8013aa6:	68bb      	ldr	r3, [r7, #8]
 8013aa8:	3308      	adds	r3, #8
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d110      	bne.n	8013ad4 <udp_input_local_match+0xa8>
          return 1;
 8013ab2:	2301      	movs	r3, #1
 8013ab4:	e00f      	b.n	8013ad6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d009      	beq.n	8013ad0 <udp_input_local_match+0xa4>
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d005      	beq.n	8013ad0 <udp_input_local_match+0xa4>
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	681a      	ldr	r2, [r3, #0]
 8013ac8:	4b09      	ldr	r3, [pc, #36]	; (8013af0 <udp_input_local_match+0xc4>)
 8013aca:	695b      	ldr	r3, [r3, #20]
 8013acc:	429a      	cmp	r2, r3
 8013ace:	d101      	bne.n	8013ad4 <udp_input_local_match+0xa8>
        return 1;
 8013ad0:	2301      	movs	r3, #1
 8013ad2:	e000      	b.n	8013ad6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013ad4:	2300      	movs	r3, #0
}
 8013ad6:	4618      	mov	r0, r3
 8013ad8:	3710      	adds	r7, #16
 8013ada:	46bd      	mov	sp, r7
 8013adc:	bd80      	pop	{r7, pc}
 8013ade:	bf00      	nop
 8013ae0:	0801b3d0 	.word	0x0801b3d0
 8013ae4:	0801b400 	.word	0x0801b400
 8013ae8:	0801b424 	.word	0x0801b424
 8013aec:	0801b44c 	.word	0x0801b44c
 8013af0:	20007830 	.word	0x20007830

08013af4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013af4:	b590      	push	{r4, r7, lr}
 8013af6:	b08d      	sub	sp, #52	; 0x34
 8013af8:	af02      	add	r7, sp, #8
 8013afa:	6078      	str	r0, [r7, #4]
 8013afc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013afe:	2300      	movs	r3, #0
 8013b00:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d105      	bne.n	8013b14 <udp_input+0x20>
 8013b08:	4b7c      	ldr	r3, [pc, #496]	; (8013cfc <udp_input+0x208>)
 8013b0a:	22cf      	movs	r2, #207	; 0xcf
 8013b0c:	497c      	ldr	r1, [pc, #496]	; (8013d00 <udp_input+0x20c>)
 8013b0e:	487d      	ldr	r0, [pc, #500]	; (8013d04 <udp_input+0x210>)
 8013b10:	f003 fa76 	bl	8017000 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013b14:	683b      	ldr	r3, [r7, #0]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d105      	bne.n	8013b26 <udp_input+0x32>
 8013b1a:	4b78      	ldr	r3, [pc, #480]	; (8013cfc <udp_input+0x208>)
 8013b1c:	22d0      	movs	r2, #208	; 0xd0
 8013b1e:	497a      	ldr	r1, [pc, #488]	; (8013d08 <udp_input+0x214>)
 8013b20:	4878      	ldr	r0, [pc, #480]	; (8013d04 <udp_input+0x210>)
 8013b22:	f003 fa6d 	bl	8017000 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	895b      	ldrh	r3, [r3, #10]
 8013b2a:	2b07      	cmp	r3, #7
 8013b2c:	d803      	bhi.n	8013b36 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013b2e:	6878      	ldr	r0, [r7, #4]
 8013b30:	f7f9 fb52 	bl	800d1d8 <pbuf_free>
    goto end;
 8013b34:	e0de      	b.n	8013cf4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	685b      	ldr	r3, [r3, #4]
 8013b3a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013b3c:	4b73      	ldr	r3, [pc, #460]	; (8013d0c <udp_input+0x218>)
 8013b3e:	695b      	ldr	r3, [r3, #20]
 8013b40:	4a72      	ldr	r2, [pc, #456]	; (8013d0c <udp_input+0x218>)
 8013b42:	6812      	ldr	r2, [r2, #0]
 8013b44:	4611      	mov	r1, r2
 8013b46:	4618      	mov	r0, r3
 8013b48:	f001 ff80 	bl	8015a4c <ip4_addr_isbroadcast_u32>
 8013b4c:	4603      	mov	r3, r0
 8013b4e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013b50:	697b      	ldr	r3, [r7, #20]
 8013b52:	881b      	ldrh	r3, [r3, #0]
 8013b54:	b29b      	uxth	r3, r3
 8013b56:	4618      	mov	r0, r3
 8013b58:	f7f7 ff60 	bl	800ba1c <lwip_htons>
 8013b5c:	4603      	mov	r3, r0
 8013b5e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013b60:	697b      	ldr	r3, [r7, #20]
 8013b62:	885b      	ldrh	r3, [r3, #2]
 8013b64:	b29b      	uxth	r3, r3
 8013b66:	4618      	mov	r0, r3
 8013b68:	f7f7 ff58 	bl	800ba1c <lwip_htons>
 8013b6c:	4603      	mov	r3, r0
 8013b6e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013b70:	2300      	movs	r3, #0
 8013b72:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8013b74:	2300      	movs	r3, #0
 8013b76:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013b78:	2300      	movs	r3, #0
 8013b7a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013b7c:	4b64      	ldr	r3, [pc, #400]	; (8013d10 <udp_input+0x21c>)
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	627b      	str	r3, [r7, #36]	; 0x24
 8013b82:	e054      	b.n	8013c2e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b86:	8a5b      	ldrh	r3, [r3, #18]
 8013b88:	89fa      	ldrh	r2, [r7, #14]
 8013b8a:	429a      	cmp	r2, r3
 8013b8c:	d14a      	bne.n	8013c24 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013b8e:	7cfb      	ldrb	r3, [r7, #19]
 8013b90:	461a      	mov	r2, r3
 8013b92:	6839      	ldr	r1, [r7, #0]
 8013b94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013b96:	f7ff ff49 	bl	8013a2c <udp_input_local_match>
 8013b9a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d041      	beq.n	8013c24 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ba2:	7c1b      	ldrb	r3, [r3, #16]
 8013ba4:	f003 0304 	and.w	r3, r3, #4
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d11d      	bne.n	8013be8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013bac:	69fb      	ldr	r3, [r7, #28]
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d102      	bne.n	8013bb8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bb4:	61fb      	str	r3, [r7, #28]
 8013bb6:	e017      	b.n	8013be8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013bb8:	7cfb      	ldrb	r3, [r7, #19]
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d014      	beq.n	8013be8 <udp_input+0xf4>
 8013bbe:	4b53      	ldr	r3, [pc, #332]	; (8013d0c <udp_input+0x218>)
 8013bc0:	695b      	ldr	r3, [r3, #20]
 8013bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bc6:	d10f      	bne.n	8013be8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013bc8:	69fb      	ldr	r3, [r7, #28]
 8013bca:	681a      	ldr	r2, [r3, #0]
 8013bcc:	683b      	ldr	r3, [r7, #0]
 8013bce:	3304      	adds	r3, #4
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	429a      	cmp	r2, r3
 8013bd4:	d008      	beq.n	8013be8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bd8:	681a      	ldr	r2, [r3, #0]
 8013bda:	683b      	ldr	r3, [r7, #0]
 8013bdc:	3304      	adds	r3, #4
 8013bde:	681b      	ldr	r3, [r3, #0]
 8013be0:	429a      	cmp	r2, r3
 8013be2:	d101      	bne.n	8013be8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013be6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bea:	8a9b      	ldrh	r3, [r3, #20]
 8013bec:	8a3a      	ldrh	r2, [r7, #16]
 8013bee:	429a      	cmp	r2, r3
 8013bf0:	d118      	bne.n	8013c24 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bf4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d005      	beq.n	8013c06 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bfc:	685a      	ldr	r2, [r3, #4]
 8013bfe:	4b43      	ldr	r3, [pc, #268]	; (8013d0c <udp_input+0x218>)
 8013c00:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013c02:	429a      	cmp	r2, r3
 8013c04:	d10e      	bne.n	8013c24 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013c06:	6a3b      	ldr	r3, [r7, #32]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d014      	beq.n	8013c36 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c0e:	68da      	ldr	r2, [r3, #12]
 8013c10:	6a3b      	ldr	r3, [r7, #32]
 8013c12:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013c14:	4b3e      	ldr	r3, [pc, #248]	; (8013d10 <udp_input+0x21c>)
 8013c16:	681a      	ldr	r2, [r3, #0]
 8013c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c1a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013c1c:	4a3c      	ldr	r2, [pc, #240]	; (8013d10 <udp_input+0x21c>)
 8013c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c20:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013c22:	e008      	b.n	8013c36 <udp_input+0x142>
      }
    }

    prev = pcb;
 8013c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c26:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c2a:	68db      	ldr	r3, [r3, #12]
 8013c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8013c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d1a7      	bne.n	8013b84 <udp_input+0x90>
 8013c34:	e000      	b.n	8013c38 <udp_input+0x144>
        break;
 8013c36:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d101      	bne.n	8013c42 <udp_input+0x14e>
    pcb = uncon_pcb;
 8013c3e:	69fb      	ldr	r3, [r7, #28]
 8013c40:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d002      	beq.n	8013c4e <udp_input+0x15a>
    for_us = 1;
 8013c48:	2301      	movs	r3, #1
 8013c4a:	76fb      	strb	r3, [r7, #27]
 8013c4c:	e00a      	b.n	8013c64 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013c4e:	683b      	ldr	r3, [r7, #0]
 8013c50:	3304      	adds	r3, #4
 8013c52:	681a      	ldr	r2, [r3, #0]
 8013c54:	4b2d      	ldr	r3, [pc, #180]	; (8013d0c <udp_input+0x218>)
 8013c56:	695b      	ldr	r3, [r3, #20]
 8013c58:	429a      	cmp	r2, r3
 8013c5a:	bf0c      	ite	eq
 8013c5c:	2301      	moveq	r3, #1
 8013c5e:	2300      	movne	r3, #0
 8013c60:	b2db      	uxtb	r3, r3
 8013c62:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013c64:	7efb      	ldrb	r3, [r7, #27]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d041      	beq.n	8013cee <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013c6a:	2108      	movs	r1, #8
 8013c6c:	6878      	ldr	r0, [r7, #4]
 8013c6e:	f7f9 f9fb 	bl	800d068 <pbuf_remove_header>
 8013c72:	4603      	mov	r3, r0
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d00a      	beq.n	8013c8e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013c78:	4b20      	ldr	r3, [pc, #128]	; (8013cfc <udp_input+0x208>)
 8013c7a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8013c7e:	4925      	ldr	r1, [pc, #148]	; (8013d14 <udp_input+0x220>)
 8013c80:	4820      	ldr	r0, [pc, #128]	; (8013d04 <udp_input+0x210>)
 8013c82:	f003 f9bd 	bl	8017000 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013c86:	6878      	ldr	r0, [r7, #4]
 8013c88:	f7f9 faa6 	bl	800d1d8 <pbuf_free>
      goto end;
 8013c8c:	e032      	b.n	8013cf4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d012      	beq.n	8013cba <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c96:	699b      	ldr	r3, [r3, #24]
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d00a      	beq.n	8013cb2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c9e:	699c      	ldr	r4, [r3, #24]
 8013ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ca2:	69d8      	ldr	r0, [r3, #28]
 8013ca4:	8a3b      	ldrh	r3, [r7, #16]
 8013ca6:	9300      	str	r3, [sp, #0]
 8013ca8:	4b1b      	ldr	r3, [pc, #108]	; (8013d18 <udp_input+0x224>)
 8013caa:	687a      	ldr	r2, [r7, #4]
 8013cac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013cae:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013cb0:	e021      	b.n	8013cf6 <udp_input+0x202>
        pbuf_free(p);
 8013cb2:	6878      	ldr	r0, [r7, #4]
 8013cb4:	f7f9 fa90 	bl	800d1d8 <pbuf_free>
        goto end;
 8013cb8:	e01c      	b.n	8013cf4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013cba:	7cfb      	ldrb	r3, [r7, #19]
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d112      	bne.n	8013ce6 <udp_input+0x1f2>
 8013cc0:	4b12      	ldr	r3, [pc, #72]	; (8013d0c <udp_input+0x218>)
 8013cc2:	695b      	ldr	r3, [r3, #20]
 8013cc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013cc8:	2be0      	cmp	r3, #224	; 0xe0
 8013cca:	d00c      	beq.n	8013ce6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013ccc:	4b0f      	ldr	r3, [pc, #60]	; (8013d0c <udp_input+0x218>)
 8013cce:	899b      	ldrh	r3, [r3, #12]
 8013cd0:	3308      	adds	r3, #8
 8013cd2:	b29b      	uxth	r3, r3
 8013cd4:	b21b      	sxth	r3, r3
 8013cd6:	4619      	mov	r1, r3
 8013cd8:	6878      	ldr	r0, [r7, #4]
 8013cda:	f7f9 fa38 	bl	800d14e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013cde:	2103      	movs	r1, #3
 8013ce0:	6878      	ldr	r0, [r7, #4]
 8013ce2:	f001 fb93 	bl	801540c <icmp_dest_unreach>
      pbuf_free(p);
 8013ce6:	6878      	ldr	r0, [r7, #4]
 8013ce8:	f7f9 fa76 	bl	800d1d8 <pbuf_free>
  return;
 8013cec:	e003      	b.n	8013cf6 <udp_input+0x202>
    pbuf_free(p);
 8013cee:	6878      	ldr	r0, [r7, #4]
 8013cf0:	f7f9 fa72 	bl	800d1d8 <pbuf_free>
  return;
 8013cf4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013cf6:	372c      	adds	r7, #44	; 0x2c
 8013cf8:	46bd      	mov	sp, r7
 8013cfa:	bd90      	pop	{r4, r7, pc}
 8013cfc:	0801b3d0 	.word	0x0801b3d0
 8013d00:	0801b474 	.word	0x0801b474
 8013d04:	0801b424 	.word	0x0801b424
 8013d08:	0801b48c 	.word	0x0801b48c
 8013d0c:	20007830 	.word	0x20007830
 8013d10:	2000d1a0 	.word	0x2000d1a0
 8013d14:	0801b4a8 	.word	0x0801b4a8
 8013d18:	20007840 	.word	0x20007840

08013d1c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8013d1c:	b580      	push	{r7, lr}
 8013d1e:	b082      	sub	sp, #8
 8013d20:	af00      	add	r7, sp, #0
 8013d22:	6078      	str	r0, [r7, #4]
 8013d24:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d109      	bne.n	8013d40 <udp_send+0x24>
 8013d2c:	4b11      	ldr	r3, [pc, #68]	; (8013d74 <udp_send+0x58>)
 8013d2e:	f240 12d5 	movw	r2, #469	; 0x1d5
 8013d32:	4911      	ldr	r1, [pc, #68]	; (8013d78 <udp_send+0x5c>)
 8013d34:	4811      	ldr	r0, [pc, #68]	; (8013d7c <udp_send+0x60>)
 8013d36:	f003 f963 	bl	8017000 <iprintf>
 8013d3a:	f06f 030f 	mvn.w	r3, #15
 8013d3e:	e015      	b.n	8013d6c <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8013d40:	683b      	ldr	r3, [r7, #0]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d109      	bne.n	8013d5a <udp_send+0x3e>
 8013d46:	4b0b      	ldr	r3, [pc, #44]	; (8013d74 <udp_send+0x58>)
 8013d48:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8013d4c:	490c      	ldr	r1, [pc, #48]	; (8013d80 <udp_send+0x64>)
 8013d4e:	480b      	ldr	r0, [pc, #44]	; (8013d7c <udp_send+0x60>)
 8013d50:	f003 f956 	bl	8017000 <iprintf>
 8013d54:	f06f 030f 	mvn.w	r3, #15
 8013d58:	e008      	b.n	8013d6c <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	1d1a      	adds	r2, r3, #4
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	8a9b      	ldrh	r3, [r3, #20]
 8013d62:	6839      	ldr	r1, [r7, #0]
 8013d64:	6878      	ldr	r0, [r7, #4]
 8013d66:	f000 f80d 	bl	8013d84 <udp_sendto>
 8013d6a:	4603      	mov	r3, r0
}
 8013d6c:	4618      	mov	r0, r3
 8013d6e:	3708      	adds	r7, #8
 8013d70:	46bd      	mov	sp, r7
 8013d72:	bd80      	pop	{r7, pc}
 8013d74:	0801b3d0 	.word	0x0801b3d0
 8013d78:	0801b4c4 	.word	0x0801b4c4
 8013d7c:	0801b424 	.word	0x0801b424
 8013d80:	0801b4dc 	.word	0x0801b4dc

08013d84 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8013d84:	b580      	push	{r7, lr}
 8013d86:	b088      	sub	sp, #32
 8013d88:	af02      	add	r7, sp, #8
 8013d8a:	60f8      	str	r0, [r7, #12]
 8013d8c:	60b9      	str	r1, [r7, #8]
 8013d8e:	607a      	str	r2, [r7, #4]
 8013d90:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d109      	bne.n	8013dac <udp_sendto+0x28>
 8013d98:	4b23      	ldr	r3, [pc, #140]	; (8013e28 <udp_sendto+0xa4>)
 8013d9a:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013d9e:	4923      	ldr	r1, [pc, #140]	; (8013e2c <udp_sendto+0xa8>)
 8013da0:	4823      	ldr	r0, [pc, #140]	; (8013e30 <udp_sendto+0xac>)
 8013da2:	f003 f92d 	bl	8017000 <iprintf>
 8013da6:	f06f 030f 	mvn.w	r3, #15
 8013daa:	e038      	b.n	8013e1e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8013dac:	68bb      	ldr	r3, [r7, #8]
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d109      	bne.n	8013dc6 <udp_sendto+0x42>
 8013db2:	4b1d      	ldr	r3, [pc, #116]	; (8013e28 <udp_sendto+0xa4>)
 8013db4:	f240 2219 	movw	r2, #537	; 0x219
 8013db8:	491e      	ldr	r1, [pc, #120]	; (8013e34 <udp_sendto+0xb0>)
 8013dba:	481d      	ldr	r0, [pc, #116]	; (8013e30 <udp_sendto+0xac>)
 8013dbc:	f003 f920 	bl	8017000 <iprintf>
 8013dc0:	f06f 030f 	mvn.w	r3, #15
 8013dc4:	e02b      	b.n	8013e1e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d109      	bne.n	8013de0 <udp_sendto+0x5c>
 8013dcc:	4b16      	ldr	r3, [pc, #88]	; (8013e28 <udp_sendto+0xa4>)
 8013dce:	f240 221a 	movw	r2, #538	; 0x21a
 8013dd2:	4919      	ldr	r1, [pc, #100]	; (8013e38 <udp_sendto+0xb4>)
 8013dd4:	4816      	ldr	r0, [pc, #88]	; (8013e30 <udp_sendto+0xac>)
 8013dd6:	f003 f913 	bl	8017000 <iprintf>
 8013dda:	f06f 030f 	mvn.w	r3, #15
 8013dde:	e01e      	b.n	8013e1e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	7a1b      	ldrb	r3, [r3, #8]
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d006      	beq.n	8013df6 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	7a1b      	ldrb	r3, [r3, #8]
 8013dec:	4618      	mov	r0, r3
 8013dee:	f7f8 fe33 	bl	800ca58 <netif_get_by_index>
 8013df2:	6178      	str	r0, [r7, #20]
 8013df4:	e003      	b.n	8013dfe <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8013df6:	6878      	ldr	r0, [r7, #4]
 8013df8:	f001 fb92 	bl	8015520 <ip4_route>
 8013dfc:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8013dfe:	697b      	ldr	r3, [r7, #20]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d102      	bne.n	8013e0a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8013e04:	f06f 0303 	mvn.w	r3, #3
 8013e08:	e009      	b.n	8013e1e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8013e0a:	887a      	ldrh	r2, [r7, #2]
 8013e0c:	697b      	ldr	r3, [r7, #20]
 8013e0e:	9300      	str	r3, [sp, #0]
 8013e10:	4613      	mov	r3, r2
 8013e12:	687a      	ldr	r2, [r7, #4]
 8013e14:	68b9      	ldr	r1, [r7, #8]
 8013e16:	68f8      	ldr	r0, [r7, #12]
 8013e18:	f000 f810 	bl	8013e3c <udp_sendto_if>
 8013e1c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013e1e:	4618      	mov	r0, r3
 8013e20:	3718      	adds	r7, #24
 8013e22:	46bd      	mov	sp, r7
 8013e24:	bd80      	pop	{r7, pc}
 8013e26:	bf00      	nop
 8013e28:	0801b3d0 	.word	0x0801b3d0
 8013e2c:	0801b4f4 	.word	0x0801b4f4
 8013e30:	0801b424 	.word	0x0801b424
 8013e34:	0801b50c 	.word	0x0801b50c
 8013e38:	0801b528 	.word	0x0801b528

08013e3c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8013e3c:	b580      	push	{r7, lr}
 8013e3e:	b088      	sub	sp, #32
 8013e40:	af02      	add	r7, sp, #8
 8013e42:	60f8      	str	r0, [r7, #12]
 8013e44:	60b9      	str	r1, [r7, #8]
 8013e46:	607a      	str	r2, [r7, #4]
 8013e48:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d109      	bne.n	8013e64 <udp_sendto_if+0x28>
 8013e50:	4b2e      	ldr	r3, [pc, #184]	; (8013f0c <udp_sendto_if+0xd0>)
 8013e52:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013e56:	492e      	ldr	r1, [pc, #184]	; (8013f10 <udp_sendto_if+0xd4>)
 8013e58:	482e      	ldr	r0, [pc, #184]	; (8013f14 <udp_sendto_if+0xd8>)
 8013e5a:	f003 f8d1 	bl	8017000 <iprintf>
 8013e5e:	f06f 030f 	mvn.w	r3, #15
 8013e62:	e04f      	b.n	8013f04 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8013e64:	68bb      	ldr	r3, [r7, #8]
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d109      	bne.n	8013e7e <udp_sendto_if+0x42>
 8013e6a:	4b28      	ldr	r3, [pc, #160]	; (8013f0c <udp_sendto_if+0xd0>)
 8013e6c:	f240 2281 	movw	r2, #641	; 0x281
 8013e70:	4929      	ldr	r1, [pc, #164]	; (8013f18 <udp_sendto_if+0xdc>)
 8013e72:	4828      	ldr	r0, [pc, #160]	; (8013f14 <udp_sendto_if+0xd8>)
 8013e74:	f003 f8c4 	bl	8017000 <iprintf>
 8013e78:	f06f 030f 	mvn.w	r3, #15
 8013e7c:	e042      	b.n	8013f04 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d109      	bne.n	8013e98 <udp_sendto_if+0x5c>
 8013e84:	4b21      	ldr	r3, [pc, #132]	; (8013f0c <udp_sendto_if+0xd0>)
 8013e86:	f240 2282 	movw	r2, #642	; 0x282
 8013e8a:	4924      	ldr	r1, [pc, #144]	; (8013f1c <udp_sendto_if+0xe0>)
 8013e8c:	4821      	ldr	r0, [pc, #132]	; (8013f14 <udp_sendto_if+0xd8>)
 8013e8e:	f003 f8b7 	bl	8017000 <iprintf>
 8013e92:	f06f 030f 	mvn.w	r3, #15
 8013e96:	e035      	b.n	8013f04 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8013e98:	6a3b      	ldr	r3, [r7, #32]
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d109      	bne.n	8013eb2 <udp_sendto_if+0x76>
 8013e9e:	4b1b      	ldr	r3, [pc, #108]	; (8013f0c <udp_sendto_if+0xd0>)
 8013ea0:	f240 2283 	movw	r2, #643	; 0x283
 8013ea4:	491e      	ldr	r1, [pc, #120]	; (8013f20 <udp_sendto_if+0xe4>)
 8013ea6:	481b      	ldr	r0, [pc, #108]	; (8013f14 <udp_sendto_if+0xd8>)
 8013ea8:	f003 f8aa 	bl	8017000 <iprintf>
 8013eac:	f06f 030f 	mvn.w	r3, #15
 8013eb0:	e028      	b.n	8013f04 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d009      	beq.n	8013ecc <udp_sendto_if+0x90>
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d005      	beq.n	8013ecc <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013ec8:	2be0      	cmp	r3, #224	; 0xe0
 8013eca:	d103      	bne.n	8013ed4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8013ecc:	6a3b      	ldr	r3, [r7, #32]
 8013ece:	3304      	adds	r3, #4
 8013ed0:	617b      	str	r3, [r7, #20]
 8013ed2:	e00b      	b.n	8013eec <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	681a      	ldr	r2, [r3, #0]
 8013ed8:	6a3b      	ldr	r3, [r7, #32]
 8013eda:	3304      	adds	r3, #4
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	429a      	cmp	r2, r3
 8013ee0:	d002      	beq.n	8013ee8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8013ee2:	f06f 0303 	mvn.w	r3, #3
 8013ee6:	e00d      	b.n	8013f04 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8013eec:	887a      	ldrh	r2, [r7, #2]
 8013eee:	697b      	ldr	r3, [r7, #20]
 8013ef0:	9301      	str	r3, [sp, #4]
 8013ef2:	6a3b      	ldr	r3, [r7, #32]
 8013ef4:	9300      	str	r3, [sp, #0]
 8013ef6:	4613      	mov	r3, r2
 8013ef8:	687a      	ldr	r2, [r7, #4]
 8013efa:	68b9      	ldr	r1, [r7, #8]
 8013efc:	68f8      	ldr	r0, [r7, #12]
 8013efe:	f000 f811 	bl	8013f24 <udp_sendto_if_src>
 8013f02:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013f04:	4618      	mov	r0, r3
 8013f06:	3718      	adds	r7, #24
 8013f08:	46bd      	mov	sp, r7
 8013f0a:	bd80      	pop	{r7, pc}
 8013f0c:	0801b3d0 	.word	0x0801b3d0
 8013f10:	0801b544 	.word	0x0801b544
 8013f14:	0801b424 	.word	0x0801b424
 8013f18:	0801b560 	.word	0x0801b560
 8013f1c:	0801b57c 	.word	0x0801b57c
 8013f20:	0801b59c 	.word	0x0801b59c

08013f24 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013f24:	b580      	push	{r7, lr}
 8013f26:	b08c      	sub	sp, #48	; 0x30
 8013f28:	af04      	add	r7, sp, #16
 8013f2a:	60f8      	str	r0, [r7, #12]
 8013f2c:	60b9      	str	r1, [r7, #8]
 8013f2e:	607a      	str	r2, [r7, #4]
 8013f30:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d109      	bne.n	8013f4c <udp_sendto_if_src+0x28>
 8013f38:	4b65      	ldr	r3, [pc, #404]	; (80140d0 <udp_sendto_if_src+0x1ac>)
 8013f3a:	f240 22d1 	movw	r2, #721	; 0x2d1
 8013f3e:	4965      	ldr	r1, [pc, #404]	; (80140d4 <udp_sendto_if_src+0x1b0>)
 8013f40:	4865      	ldr	r0, [pc, #404]	; (80140d8 <udp_sendto_if_src+0x1b4>)
 8013f42:	f003 f85d 	bl	8017000 <iprintf>
 8013f46:	f06f 030f 	mvn.w	r3, #15
 8013f4a:	e0bc      	b.n	80140c6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8013f4c:	68bb      	ldr	r3, [r7, #8]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d109      	bne.n	8013f66 <udp_sendto_if_src+0x42>
 8013f52:	4b5f      	ldr	r3, [pc, #380]	; (80140d0 <udp_sendto_if_src+0x1ac>)
 8013f54:	f240 22d2 	movw	r2, #722	; 0x2d2
 8013f58:	4960      	ldr	r1, [pc, #384]	; (80140dc <udp_sendto_if_src+0x1b8>)
 8013f5a:	485f      	ldr	r0, [pc, #380]	; (80140d8 <udp_sendto_if_src+0x1b4>)
 8013f5c:	f003 f850 	bl	8017000 <iprintf>
 8013f60:	f06f 030f 	mvn.w	r3, #15
 8013f64:	e0af      	b.n	80140c6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d109      	bne.n	8013f80 <udp_sendto_if_src+0x5c>
 8013f6c:	4b58      	ldr	r3, [pc, #352]	; (80140d0 <udp_sendto_if_src+0x1ac>)
 8013f6e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8013f72:	495b      	ldr	r1, [pc, #364]	; (80140e0 <udp_sendto_if_src+0x1bc>)
 8013f74:	4858      	ldr	r0, [pc, #352]	; (80140d8 <udp_sendto_if_src+0x1b4>)
 8013f76:	f003 f843 	bl	8017000 <iprintf>
 8013f7a:	f06f 030f 	mvn.w	r3, #15
 8013f7e:	e0a2      	b.n	80140c6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8013f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d109      	bne.n	8013f9a <udp_sendto_if_src+0x76>
 8013f86:	4b52      	ldr	r3, [pc, #328]	; (80140d0 <udp_sendto_if_src+0x1ac>)
 8013f88:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8013f8c:	4955      	ldr	r1, [pc, #340]	; (80140e4 <udp_sendto_if_src+0x1c0>)
 8013f8e:	4852      	ldr	r0, [pc, #328]	; (80140d8 <udp_sendto_if_src+0x1b4>)
 8013f90:	f003 f836 	bl	8017000 <iprintf>
 8013f94:	f06f 030f 	mvn.w	r3, #15
 8013f98:	e095      	b.n	80140c6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8013f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d109      	bne.n	8013fb4 <udp_sendto_if_src+0x90>
 8013fa0:	4b4b      	ldr	r3, [pc, #300]	; (80140d0 <udp_sendto_if_src+0x1ac>)
 8013fa2:	f240 22d5 	movw	r2, #725	; 0x2d5
 8013fa6:	4950      	ldr	r1, [pc, #320]	; (80140e8 <udp_sendto_if_src+0x1c4>)
 8013fa8:	484b      	ldr	r0, [pc, #300]	; (80140d8 <udp_sendto_if_src+0x1b4>)
 8013faa:	f003 f829 	bl	8017000 <iprintf>
 8013fae:	f06f 030f 	mvn.w	r3, #15
 8013fb2:	e088      	b.n	80140c6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8013fb4:	68fb      	ldr	r3, [r7, #12]
 8013fb6:	8a5b      	ldrh	r3, [r3, #18]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d10f      	bne.n	8013fdc <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013fbc:	68f9      	ldr	r1, [r7, #12]
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	8a5b      	ldrh	r3, [r3, #18]
 8013fc2:	461a      	mov	r2, r3
 8013fc4:	68f8      	ldr	r0, [r7, #12]
 8013fc6:	f000 f893 	bl	80140f0 <udp_bind>
 8013fca:	4603      	mov	r3, r0
 8013fcc:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8013fce:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d002      	beq.n	8013fdc <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8013fd6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013fda:	e074      	b.n	80140c6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8013fdc:	68bb      	ldr	r3, [r7, #8]
 8013fde:	891b      	ldrh	r3, [r3, #8]
 8013fe0:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8013fe4:	4293      	cmp	r3, r2
 8013fe6:	d902      	bls.n	8013fee <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8013fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8013fec:	e06b      	b.n	80140c6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8013fee:	2108      	movs	r1, #8
 8013ff0:	68b8      	ldr	r0, [r7, #8]
 8013ff2:	f7f9 f829 	bl	800d048 <pbuf_add_header>
 8013ff6:	4603      	mov	r3, r0
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d015      	beq.n	8014028 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8013ffc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014000:	2108      	movs	r1, #8
 8014002:	2022      	movs	r0, #34	; 0x22
 8014004:	f7f8 fdd2 	bl	800cbac <pbuf_alloc>
 8014008:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801400a:	69fb      	ldr	r3, [r7, #28]
 801400c:	2b00      	cmp	r3, #0
 801400e:	d102      	bne.n	8014016 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8014010:	f04f 33ff 	mov.w	r3, #4294967295
 8014014:	e057      	b.n	80140c6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8014016:	68bb      	ldr	r3, [r7, #8]
 8014018:	891b      	ldrh	r3, [r3, #8]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d006      	beq.n	801402c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801401e:	68b9      	ldr	r1, [r7, #8]
 8014020:	69f8      	ldr	r0, [r7, #28]
 8014022:	f7f9 f9fd 	bl	800d420 <pbuf_chain>
 8014026:	e001      	b.n	801402c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8014028:	68bb      	ldr	r3, [r7, #8]
 801402a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801402c:	69fb      	ldr	r3, [r7, #28]
 801402e:	895b      	ldrh	r3, [r3, #10]
 8014030:	2b07      	cmp	r3, #7
 8014032:	d806      	bhi.n	8014042 <udp_sendto_if_src+0x11e>
 8014034:	4b26      	ldr	r3, [pc, #152]	; (80140d0 <udp_sendto_if_src+0x1ac>)
 8014036:	f240 320d 	movw	r2, #781	; 0x30d
 801403a:	492c      	ldr	r1, [pc, #176]	; (80140ec <udp_sendto_if_src+0x1c8>)
 801403c:	4826      	ldr	r0, [pc, #152]	; (80140d8 <udp_sendto_if_src+0x1b4>)
 801403e:	f002 ffdf 	bl	8017000 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8014042:	69fb      	ldr	r3, [r7, #28]
 8014044:	685b      	ldr	r3, [r3, #4]
 8014046:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	8a5b      	ldrh	r3, [r3, #18]
 801404c:	4618      	mov	r0, r3
 801404e:	f7f7 fce5 	bl	800ba1c <lwip_htons>
 8014052:	4603      	mov	r3, r0
 8014054:	461a      	mov	r2, r3
 8014056:	697b      	ldr	r3, [r7, #20]
 8014058:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801405a:	887b      	ldrh	r3, [r7, #2]
 801405c:	4618      	mov	r0, r3
 801405e:	f7f7 fcdd 	bl	800ba1c <lwip_htons>
 8014062:	4603      	mov	r3, r0
 8014064:	461a      	mov	r2, r3
 8014066:	697b      	ldr	r3, [r7, #20]
 8014068:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801406a:	697b      	ldr	r3, [r7, #20]
 801406c:	2200      	movs	r2, #0
 801406e:	719a      	strb	r2, [r3, #6]
 8014070:	2200      	movs	r2, #0
 8014072:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8014074:	69fb      	ldr	r3, [r7, #28]
 8014076:	891b      	ldrh	r3, [r3, #8]
 8014078:	4618      	mov	r0, r3
 801407a:	f7f7 fccf 	bl	800ba1c <lwip_htons>
 801407e:	4603      	mov	r3, r0
 8014080:	461a      	mov	r2, r3
 8014082:	697b      	ldr	r3, [r7, #20]
 8014084:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8014086:	2311      	movs	r3, #17
 8014088:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	7adb      	ldrb	r3, [r3, #11]
 801408e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	7a9b      	ldrb	r3, [r3, #10]
 8014094:	7cb9      	ldrb	r1, [r7, #18]
 8014096:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014098:	9202      	str	r2, [sp, #8]
 801409a:	7cfa      	ldrb	r2, [r7, #19]
 801409c:	9201      	str	r2, [sp, #4]
 801409e:	9300      	str	r3, [sp, #0]
 80140a0:	460b      	mov	r3, r1
 80140a2:	687a      	ldr	r2, [r7, #4]
 80140a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80140a6:	69f8      	ldr	r0, [r7, #28]
 80140a8:	f001 fc22 	bl	80158f0 <ip4_output_if_src>
 80140ac:	4603      	mov	r3, r0
 80140ae:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80140b0:	69fa      	ldr	r2, [r7, #28]
 80140b2:	68bb      	ldr	r3, [r7, #8]
 80140b4:	429a      	cmp	r2, r3
 80140b6:	d004      	beq.n	80140c2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80140b8:	69f8      	ldr	r0, [r7, #28]
 80140ba:	f7f9 f88d 	bl	800d1d8 <pbuf_free>
    q = NULL;
 80140be:	2300      	movs	r3, #0
 80140c0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80140c2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80140c6:	4618      	mov	r0, r3
 80140c8:	3720      	adds	r7, #32
 80140ca:	46bd      	mov	sp, r7
 80140cc:	bd80      	pop	{r7, pc}
 80140ce:	bf00      	nop
 80140d0:	0801b3d0 	.word	0x0801b3d0
 80140d4:	0801b5bc 	.word	0x0801b5bc
 80140d8:	0801b424 	.word	0x0801b424
 80140dc:	0801b5dc 	.word	0x0801b5dc
 80140e0:	0801b5fc 	.word	0x0801b5fc
 80140e4:	0801b620 	.word	0x0801b620
 80140e8:	0801b644 	.word	0x0801b644
 80140ec:	0801b668 	.word	0x0801b668

080140f0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80140f0:	b580      	push	{r7, lr}
 80140f2:	b086      	sub	sp, #24
 80140f4:	af00      	add	r7, sp, #0
 80140f6:	60f8      	str	r0, [r7, #12]
 80140f8:	60b9      	str	r1, [r7, #8]
 80140fa:	4613      	mov	r3, r2
 80140fc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80140fe:	68bb      	ldr	r3, [r7, #8]
 8014100:	2b00      	cmp	r3, #0
 8014102:	d101      	bne.n	8014108 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8014104:	4b39      	ldr	r3, [pc, #228]	; (80141ec <udp_bind+0xfc>)
 8014106:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	2b00      	cmp	r3, #0
 801410c:	d109      	bne.n	8014122 <udp_bind+0x32>
 801410e:	4b38      	ldr	r3, [pc, #224]	; (80141f0 <udp_bind+0x100>)
 8014110:	f240 32b7 	movw	r2, #951	; 0x3b7
 8014114:	4937      	ldr	r1, [pc, #220]	; (80141f4 <udp_bind+0x104>)
 8014116:	4838      	ldr	r0, [pc, #224]	; (80141f8 <udp_bind+0x108>)
 8014118:	f002 ff72 	bl	8017000 <iprintf>
 801411c:	f06f 030f 	mvn.w	r3, #15
 8014120:	e060      	b.n	80141e4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8014122:	2300      	movs	r3, #0
 8014124:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014126:	4b35      	ldr	r3, [pc, #212]	; (80141fc <udp_bind+0x10c>)
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	617b      	str	r3, [r7, #20]
 801412c:	e009      	b.n	8014142 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801412e:	68fa      	ldr	r2, [r7, #12]
 8014130:	697b      	ldr	r3, [r7, #20]
 8014132:	429a      	cmp	r2, r3
 8014134:	d102      	bne.n	801413c <udp_bind+0x4c>
      rebind = 1;
 8014136:	2301      	movs	r3, #1
 8014138:	74fb      	strb	r3, [r7, #19]
      break;
 801413a:	e005      	b.n	8014148 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801413c:	697b      	ldr	r3, [r7, #20]
 801413e:	68db      	ldr	r3, [r3, #12]
 8014140:	617b      	str	r3, [r7, #20]
 8014142:	697b      	ldr	r3, [r7, #20]
 8014144:	2b00      	cmp	r3, #0
 8014146:	d1f2      	bne.n	801412e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8014148:	88fb      	ldrh	r3, [r7, #6]
 801414a:	2b00      	cmp	r3, #0
 801414c:	d109      	bne.n	8014162 <udp_bind+0x72>
    port = udp_new_port();
 801414e:	f7ff fc35 	bl	80139bc <udp_new_port>
 8014152:	4603      	mov	r3, r0
 8014154:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8014156:	88fb      	ldrh	r3, [r7, #6]
 8014158:	2b00      	cmp	r3, #0
 801415a:	d12c      	bne.n	80141b6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801415c:	f06f 0307 	mvn.w	r3, #7
 8014160:	e040      	b.n	80141e4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014162:	4b26      	ldr	r3, [pc, #152]	; (80141fc <udp_bind+0x10c>)
 8014164:	681b      	ldr	r3, [r3, #0]
 8014166:	617b      	str	r3, [r7, #20]
 8014168:	e022      	b.n	80141b0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801416a:	68fa      	ldr	r2, [r7, #12]
 801416c:	697b      	ldr	r3, [r7, #20]
 801416e:	429a      	cmp	r2, r3
 8014170:	d01b      	beq.n	80141aa <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8014172:	697b      	ldr	r3, [r7, #20]
 8014174:	8a5b      	ldrh	r3, [r3, #18]
 8014176:	88fa      	ldrh	r2, [r7, #6]
 8014178:	429a      	cmp	r2, r3
 801417a:	d116      	bne.n	80141aa <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801417c:	697b      	ldr	r3, [r7, #20]
 801417e:	681a      	ldr	r2, [r3, #0]
 8014180:	68bb      	ldr	r3, [r7, #8]
 8014182:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8014184:	429a      	cmp	r2, r3
 8014186:	d00d      	beq.n	80141a4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014188:	68bb      	ldr	r3, [r7, #8]
 801418a:	2b00      	cmp	r3, #0
 801418c:	d00a      	beq.n	80141a4 <udp_bind+0xb4>
 801418e:	68bb      	ldr	r3, [r7, #8]
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	2b00      	cmp	r3, #0
 8014194:	d006      	beq.n	80141a4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014196:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014198:	2b00      	cmp	r3, #0
 801419a:	d003      	beq.n	80141a4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801419c:	697b      	ldr	r3, [r7, #20]
 801419e:	681b      	ldr	r3, [r3, #0]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d102      	bne.n	80141aa <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80141a4:	f06f 0307 	mvn.w	r3, #7
 80141a8:	e01c      	b.n	80141e4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80141aa:	697b      	ldr	r3, [r7, #20]
 80141ac:	68db      	ldr	r3, [r3, #12]
 80141ae:	617b      	str	r3, [r7, #20]
 80141b0:	697b      	ldr	r3, [r7, #20]
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d1d9      	bne.n	801416a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80141b6:	68bb      	ldr	r3, [r7, #8]
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d002      	beq.n	80141c2 <udp_bind+0xd2>
 80141bc:	68bb      	ldr	r3, [r7, #8]
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	e000      	b.n	80141c4 <udp_bind+0xd4>
 80141c2:	2300      	movs	r3, #0
 80141c4:	68fa      	ldr	r2, [r7, #12]
 80141c6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	88fa      	ldrh	r2, [r7, #6]
 80141cc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80141ce:	7cfb      	ldrb	r3, [r7, #19]
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d106      	bne.n	80141e2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80141d4:	4b09      	ldr	r3, [pc, #36]	; (80141fc <udp_bind+0x10c>)
 80141d6:	681a      	ldr	r2, [r3, #0]
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80141dc:	4a07      	ldr	r2, [pc, #28]	; (80141fc <udp_bind+0x10c>)
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80141e2:	2300      	movs	r3, #0
}
 80141e4:	4618      	mov	r0, r3
 80141e6:	3718      	adds	r7, #24
 80141e8:	46bd      	mov	sp, r7
 80141ea:	bd80      	pop	{r7, pc}
 80141ec:	0801bfd8 	.word	0x0801bfd8
 80141f0:	0801b3d0 	.word	0x0801b3d0
 80141f4:	0801b698 	.word	0x0801b698
 80141f8:	0801b424 	.word	0x0801b424
 80141fc:	2000d1a0 	.word	0x2000d1a0

08014200 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8014200:	b580      	push	{r7, lr}
 8014202:	b084      	sub	sp, #16
 8014204:	af00      	add	r7, sp, #0
 8014206:	60f8      	str	r0, [r7, #12]
 8014208:	60b9      	str	r1, [r7, #8]
 801420a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801420c:	68fb      	ldr	r3, [r7, #12]
 801420e:	2b00      	cmp	r3, #0
 8014210:	d107      	bne.n	8014222 <udp_recv+0x22>
 8014212:	4b08      	ldr	r3, [pc, #32]	; (8014234 <udp_recv+0x34>)
 8014214:	f240 428a 	movw	r2, #1162	; 0x48a
 8014218:	4907      	ldr	r1, [pc, #28]	; (8014238 <udp_recv+0x38>)
 801421a:	4808      	ldr	r0, [pc, #32]	; (801423c <udp_recv+0x3c>)
 801421c:	f002 fef0 	bl	8017000 <iprintf>
 8014220:	e005      	b.n	801422e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	68ba      	ldr	r2, [r7, #8]
 8014226:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8014228:	68fb      	ldr	r3, [r7, #12]
 801422a:	687a      	ldr	r2, [r7, #4]
 801422c:	61da      	str	r2, [r3, #28]
}
 801422e:	3710      	adds	r7, #16
 8014230:	46bd      	mov	sp, r7
 8014232:	bd80      	pop	{r7, pc}
 8014234:	0801b3d0 	.word	0x0801b3d0
 8014238:	0801b704 	.word	0x0801b704
 801423c:	0801b424 	.word	0x0801b424

08014240 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8014240:	b580      	push	{r7, lr}
 8014242:	b084      	sub	sp, #16
 8014244:	af00      	add	r7, sp, #0
 8014246:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	2b00      	cmp	r3, #0
 801424c:	d107      	bne.n	801425e <udp_remove+0x1e>
 801424e:	4b19      	ldr	r3, [pc, #100]	; (80142b4 <udp_remove+0x74>)
 8014250:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8014254:	4918      	ldr	r1, [pc, #96]	; (80142b8 <udp_remove+0x78>)
 8014256:	4819      	ldr	r0, [pc, #100]	; (80142bc <udp_remove+0x7c>)
 8014258:	f002 fed2 	bl	8017000 <iprintf>
 801425c:	e026      	b.n	80142ac <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801425e:	4b18      	ldr	r3, [pc, #96]	; (80142c0 <udp_remove+0x80>)
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	687a      	ldr	r2, [r7, #4]
 8014264:	429a      	cmp	r2, r3
 8014266:	d105      	bne.n	8014274 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8014268:	4b15      	ldr	r3, [pc, #84]	; (80142c0 <udp_remove+0x80>)
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	68db      	ldr	r3, [r3, #12]
 801426e:	4a14      	ldr	r2, [pc, #80]	; (80142c0 <udp_remove+0x80>)
 8014270:	6013      	str	r3, [r2, #0]
 8014272:	e017      	b.n	80142a4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014274:	4b12      	ldr	r3, [pc, #72]	; (80142c0 <udp_remove+0x80>)
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	60fb      	str	r3, [r7, #12]
 801427a:	e010      	b.n	801429e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	68db      	ldr	r3, [r3, #12]
 8014280:	2b00      	cmp	r3, #0
 8014282:	d009      	beq.n	8014298 <udp_remove+0x58>
 8014284:	68fb      	ldr	r3, [r7, #12]
 8014286:	68db      	ldr	r3, [r3, #12]
 8014288:	687a      	ldr	r2, [r7, #4]
 801428a:	429a      	cmp	r2, r3
 801428c:	d104      	bne.n	8014298 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	68da      	ldr	r2, [r3, #12]
 8014292:	68fb      	ldr	r3, [r7, #12]
 8014294:	60da      	str	r2, [r3, #12]
        break;
 8014296:	e005      	b.n	80142a4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014298:	68fb      	ldr	r3, [r7, #12]
 801429a:	68db      	ldr	r3, [r3, #12]
 801429c:	60fb      	str	r3, [r7, #12]
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d1eb      	bne.n	801427c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80142a4:	6879      	ldr	r1, [r7, #4]
 80142a6:	2000      	movs	r0, #0
 80142a8:	f7f8 f8c0 	bl	800c42c <memp_free>
}
 80142ac:	3710      	adds	r7, #16
 80142ae:	46bd      	mov	sp, r7
 80142b0:	bd80      	pop	{r7, pc}
 80142b2:	bf00      	nop
 80142b4:	0801b3d0 	.word	0x0801b3d0
 80142b8:	0801b71c 	.word	0x0801b71c
 80142bc:	0801b424 	.word	0x0801b424
 80142c0:	2000d1a0 	.word	0x2000d1a0

080142c4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80142c4:	b580      	push	{r7, lr}
 80142c6:	b082      	sub	sp, #8
 80142c8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80142ca:	2000      	movs	r0, #0
 80142cc:	f7f8 f85c 	bl	800c388 <memp_malloc>
 80142d0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d007      	beq.n	80142e8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80142d8:	2220      	movs	r2, #32
 80142da:	2100      	movs	r1, #0
 80142dc:	6878      	ldr	r0, [r7, #4]
 80142de:	f002 fe87 	bl	8016ff0 <memset>
    pcb->ttl = UDP_TTL;
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	22ff      	movs	r2, #255	; 0xff
 80142e6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80142e8:	687b      	ldr	r3, [r7, #4]
}
 80142ea:	4618      	mov	r0, r3
 80142ec:	3708      	adds	r7, #8
 80142ee:	46bd      	mov	sp, r7
 80142f0:	bd80      	pop	{r7, pc}

080142f2 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80142f2:	b580      	push	{r7, lr}
 80142f4:	b084      	sub	sp, #16
 80142f6:	af00      	add	r7, sp, #0
 80142f8:	4603      	mov	r3, r0
 80142fa:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80142fc:	f7ff ffe2 	bl	80142c4 <udp_new>
 8014300:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8014302:	68fb      	ldr	r3, [r7, #12]
}
 8014304:	4618      	mov	r0, r3
 8014306:	3710      	adds	r7, #16
 8014308:	46bd      	mov	sp, r7
 801430a:	bd80      	pop	{r7, pc}

0801430c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801430c:	b480      	push	{r7}
 801430e:	b085      	sub	sp, #20
 8014310:	af00      	add	r7, sp, #0
 8014312:	6078      	str	r0, [r7, #4]
 8014314:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	2b00      	cmp	r3, #0
 801431a:	d01e      	beq.n	801435a <udp_netif_ip_addr_changed+0x4e>
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	2b00      	cmp	r3, #0
 8014322:	d01a      	beq.n	801435a <udp_netif_ip_addr_changed+0x4e>
 8014324:	683b      	ldr	r3, [r7, #0]
 8014326:	2b00      	cmp	r3, #0
 8014328:	d017      	beq.n	801435a <udp_netif_ip_addr_changed+0x4e>
 801432a:	683b      	ldr	r3, [r7, #0]
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	2b00      	cmp	r3, #0
 8014330:	d013      	beq.n	801435a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014332:	4b0d      	ldr	r3, [pc, #52]	; (8014368 <udp_netif_ip_addr_changed+0x5c>)
 8014334:	681b      	ldr	r3, [r3, #0]
 8014336:	60fb      	str	r3, [r7, #12]
 8014338:	e00c      	b.n	8014354 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	681a      	ldr	r2, [r3, #0]
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	681b      	ldr	r3, [r3, #0]
 8014342:	429a      	cmp	r2, r3
 8014344:	d103      	bne.n	801434e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014346:	683b      	ldr	r3, [r7, #0]
 8014348:	681a      	ldr	r2, [r3, #0]
 801434a:	68fb      	ldr	r3, [r7, #12]
 801434c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801434e:	68fb      	ldr	r3, [r7, #12]
 8014350:	68db      	ldr	r3, [r3, #12]
 8014352:	60fb      	str	r3, [r7, #12]
 8014354:	68fb      	ldr	r3, [r7, #12]
 8014356:	2b00      	cmp	r3, #0
 8014358:	d1ef      	bne.n	801433a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801435a:	bf00      	nop
 801435c:	3714      	adds	r7, #20
 801435e:	46bd      	mov	sp, r7
 8014360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014364:	4770      	bx	lr
 8014366:	bf00      	nop
 8014368:	2000d1a0 	.word	0x2000d1a0

0801436c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801436c:	b580      	push	{r7, lr}
 801436e:	b082      	sub	sp, #8
 8014370:	af00      	add	r7, sp, #0
 8014372:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014374:	4915      	ldr	r1, [pc, #84]	; (80143cc <etharp_free_entry+0x60>)
 8014376:	687a      	ldr	r2, [r7, #4]
 8014378:	4613      	mov	r3, r2
 801437a:	005b      	lsls	r3, r3, #1
 801437c:	4413      	add	r3, r2
 801437e:	00db      	lsls	r3, r3, #3
 8014380:	440b      	add	r3, r1
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	2b00      	cmp	r3, #0
 8014386:	d013      	beq.n	80143b0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014388:	4910      	ldr	r1, [pc, #64]	; (80143cc <etharp_free_entry+0x60>)
 801438a:	687a      	ldr	r2, [r7, #4]
 801438c:	4613      	mov	r3, r2
 801438e:	005b      	lsls	r3, r3, #1
 8014390:	4413      	add	r3, r2
 8014392:	00db      	lsls	r3, r3, #3
 8014394:	440b      	add	r3, r1
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	4618      	mov	r0, r3
 801439a:	f7f8 ff1d 	bl	800d1d8 <pbuf_free>
    arp_table[i].q = NULL;
 801439e:	490b      	ldr	r1, [pc, #44]	; (80143cc <etharp_free_entry+0x60>)
 80143a0:	687a      	ldr	r2, [r7, #4]
 80143a2:	4613      	mov	r3, r2
 80143a4:	005b      	lsls	r3, r3, #1
 80143a6:	4413      	add	r3, r2
 80143a8:	00db      	lsls	r3, r3, #3
 80143aa:	440b      	add	r3, r1
 80143ac:	2200      	movs	r2, #0
 80143ae:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80143b0:	4906      	ldr	r1, [pc, #24]	; (80143cc <etharp_free_entry+0x60>)
 80143b2:	687a      	ldr	r2, [r7, #4]
 80143b4:	4613      	mov	r3, r2
 80143b6:	005b      	lsls	r3, r3, #1
 80143b8:	4413      	add	r3, r2
 80143ba:	00db      	lsls	r3, r3, #3
 80143bc:	440b      	add	r3, r1
 80143be:	3314      	adds	r3, #20
 80143c0:	2200      	movs	r2, #0
 80143c2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80143c4:	bf00      	nop
 80143c6:	3708      	adds	r7, #8
 80143c8:	46bd      	mov	sp, r7
 80143ca:	bd80      	pop	{r7, pc}
 80143cc:	2000d1a4 	.word	0x2000d1a4

080143d0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80143d0:	b580      	push	{r7, lr}
 80143d2:	b082      	sub	sp, #8
 80143d4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80143d6:	2300      	movs	r3, #0
 80143d8:	607b      	str	r3, [r7, #4]
 80143da:	e096      	b.n	801450a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80143dc:	494f      	ldr	r1, [pc, #316]	; (801451c <etharp_tmr+0x14c>)
 80143de:	687a      	ldr	r2, [r7, #4]
 80143e0:	4613      	mov	r3, r2
 80143e2:	005b      	lsls	r3, r3, #1
 80143e4:	4413      	add	r3, r2
 80143e6:	00db      	lsls	r3, r3, #3
 80143e8:	440b      	add	r3, r1
 80143ea:	3314      	adds	r3, #20
 80143ec:	781b      	ldrb	r3, [r3, #0]
 80143ee:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80143f0:	78fb      	ldrb	r3, [r7, #3]
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	f000 8086 	beq.w	8014504 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80143f8:	4948      	ldr	r1, [pc, #288]	; (801451c <etharp_tmr+0x14c>)
 80143fa:	687a      	ldr	r2, [r7, #4]
 80143fc:	4613      	mov	r3, r2
 80143fe:	005b      	lsls	r3, r3, #1
 8014400:	4413      	add	r3, r2
 8014402:	00db      	lsls	r3, r3, #3
 8014404:	440b      	add	r3, r1
 8014406:	3312      	adds	r3, #18
 8014408:	881b      	ldrh	r3, [r3, #0]
 801440a:	3301      	adds	r3, #1
 801440c:	b298      	uxth	r0, r3
 801440e:	4943      	ldr	r1, [pc, #268]	; (801451c <etharp_tmr+0x14c>)
 8014410:	687a      	ldr	r2, [r7, #4]
 8014412:	4613      	mov	r3, r2
 8014414:	005b      	lsls	r3, r3, #1
 8014416:	4413      	add	r3, r2
 8014418:	00db      	lsls	r3, r3, #3
 801441a:	440b      	add	r3, r1
 801441c:	3312      	adds	r3, #18
 801441e:	4602      	mov	r2, r0
 8014420:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014422:	493e      	ldr	r1, [pc, #248]	; (801451c <etharp_tmr+0x14c>)
 8014424:	687a      	ldr	r2, [r7, #4]
 8014426:	4613      	mov	r3, r2
 8014428:	005b      	lsls	r3, r3, #1
 801442a:	4413      	add	r3, r2
 801442c:	00db      	lsls	r3, r3, #3
 801442e:	440b      	add	r3, r1
 8014430:	3312      	adds	r3, #18
 8014432:	881b      	ldrh	r3, [r3, #0]
 8014434:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014438:	d215      	bcs.n	8014466 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801443a:	4938      	ldr	r1, [pc, #224]	; (801451c <etharp_tmr+0x14c>)
 801443c:	687a      	ldr	r2, [r7, #4]
 801443e:	4613      	mov	r3, r2
 8014440:	005b      	lsls	r3, r3, #1
 8014442:	4413      	add	r3, r2
 8014444:	00db      	lsls	r3, r3, #3
 8014446:	440b      	add	r3, r1
 8014448:	3314      	adds	r3, #20
 801444a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801444c:	2b01      	cmp	r3, #1
 801444e:	d10e      	bne.n	801446e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014450:	4932      	ldr	r1, [pc, #200]	; (801451c <etharp_tmr+0x14c>)
 8014452:	687a      	ldr	r2, [r7, #4]
 8014454:	4613      	mov	r3, r2
 8014456:	005b      	lsls	r3, r3, #1
 8014458:	4413      	add	r3, r2
 801445a:	00db      	lsls	r3, r3, #3
 801445c:	440b      	add	r3, r1
 801445e:	3312      	adds	r3, #18
 8014460:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014462:	2b04      	cmp	r3, #4
 8014464:	d903      	bls.n	801446e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014466:	6878      	ldr	r0, [r7, #4]
 8014468:	f7ff ff80 	bl	801436c <etharp_free_entry>
 801446c:	e04a      	b.n	8014504 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801446e:	492b      	ldr	r1, [pc, #172]	; (801451c <etharp_tmr+0x14c>)
 8014470:	687a      	ldr	r2, [r7, #4]
 8014472:	4613      	mov	r3, r2
 8014474:	005b      	lsls	r3, r3, #1
 8014476:	4413      	add	r3, r2
 8014478:	00db      	lsls	r3, r3, #3
 801447a:	440b      	add	r3, r1
 801447c:	3314      	adds	r3, #20
 801447e:	781b      	ldrb	r3, [r3, #0]
 8014480:	2b03      	cmp	r3, #3
 8014482:	d10a      	bne.n	801449a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014484:	4925      	ldr	r1, [pc, #148]	; (801451c <etharp_tmr+0x14c>)
 8014486:	687a      	ldr	r2, [r7, #4]
 8014488:	4613      	mov	r3, r2
 801448a:	005b      	lsls	r3, r3, #1
 801448c:	4413      	add	r3, r2
 801448e:	00db      	lsls	r3, r3, #3
 8014490:	440b      	add	r3, r1
 8014492:	3314      	adds	r3, #20
 8014494:	2204      	movs	r2, #4
 8014496:	701a      	strb	r2, [r3, #0]
 8014498:	e034      	b.n	8014504 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801449a:	4920      	ldr	r1, [pc, #128]	; (801451c <etharp_tmr+0x14c>)
 801449c:	687a      	ldr	r2, [r7, #4]
 801449e:	4613      	mov	r3, r2
 80144a0:	005b      	lsls	r3, r3, #1
 80144a2:	4413      	add	r3, r2
 80144a4:	00db      	lsls	r3, r3, #3
 80144a6:	440b      	add	r3, r1
 80144a8:	3314      	adds	r3, #20
 80144aa:	781b      	ldrb	r3, [r3, #0]
 80144ac:	2b04      	cmp	r3, #4
 80144ae:	d10a      	bne.n	80144c6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80144b0:	491a      	ldr	r1, [pc, #104]	; (801451c <etharp_tmr+0x14c>)
 80144b2:	687a      	ldr	r2, [r7, #4]
 80144b4:	4613      	mov	r3, r2
 80144b6:	005b      	lsls	r3, r3, #1
 80144b8:	4413      	add	r3, r2
 80144ba:	00db      	lsls	r3, r3, #3
 80144bc:	440b      	add	r3, r1
 80144be:	3314      	adds	r3, #20
 80144c0:	2202      	movs	r2, #2
 80144c2:	701a      	strb	r2, [r3, #0]
 80144c4:	e01e      	b.n	8014504 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80144c6:	4915      	ldr	r1, [pc, #84]	; (801451c <etharp_tmr+0x14c>)
 80144c8:	687a      	ldr	r2, [r7, #4]
 80144ca:	4613      	mov	r3, r2
 80144cc:	005b      	lsls	r3, r3, #1
 80144ce:	4413      	add	r3, r2
 80144d0:	00db      	lsls	r3, r3, #3
 80144d2:	440b      	add	r3, r1
 80144d4:	3314      	adds	r3, #20
 80144d6:	781b      	ldrb	r3, [r3, #0]
 80144d8:	2b01      	cmp	r3, #1
 80144da:	d113      	bne.n	8014504 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80144dc:	490f      	ldr	r1, [pc, #60]	; (801451c <etharp_tmr+0x14c>)
 80144de:	687a      	ldr	r2, [r7, #4]
 80144e0:	4613      	mov	r3, r2
 80144e2:	005b      	lsls	r3, r3, #1
 80144e4:	4413      	add	r3, r2
 80144e6:	00db      	lsls	r3, r3, #3
 80144e8:	440b      	add	r3, r1
 80144ea:	3308      	adds	r3, #8
 80144ec:	6818      	ldr	r0, [r3, #0]
 80144ee:	687a      	ldr	r2, [r7, #4]
 80144f0:	4613      	mov	r3, r2
 80144f2:	005b      	lsls	r3, r3, #1
 80144f4:	4413      	add	r3, r2
 80144f6:	00db      	lsls	r3, r3, #3
 80144f8:	4a08      	ldr	r2, [pc, #32]	; (801451c <etharp_tmr+0x14c>)
 80144fa:	4413      	add	r3, r2
 80144fc:	3304      	adds	r3, #4
 80144fe:	4619      	mov	r1, r3
 8014500:	f000 fe6e 	bl	80151e0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	3301      	adds	r3, #1
 8014508:	607b      	str	r3, [r7, #4]
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	2b09      	cmp	r3, #9
 801450e:	f77f af65 	ble.w	80143dc <etharp_tmr+0xc>
      }
    }
  }
}
 8014512:	bf00      	nop
 8014514:	bf00      	nop
 8014516:	3708      	adds	r7, #8
 8014518:	46bd      	mov	sp, r7
 801451a:	bd80      	pop	{r7, pc}
 801451c:	2000d1a4 	.word	0x2000d1a4

08014520 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014520:	b580      	push	{r7, lr}
 8014522:	b08a      	sub	sp, #40	; 0x28
 8014524:	af00      	add	r7, sp, #0
 8014526:	60f8      	str	r0, [r7, #12]
 8014528:	460b      	mov	r3, r1
 801452a:	607a      	str	r2, [r7, #4]
 801452c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801452e:	230a      	movs	r3, #10
 8014530:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014532:	230a      	movs	r3, #10
 8014534:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8014536:	230a      	movs	r3, #10
 8014538:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801453a:	2300      	movs	r3, #0
 801453c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801453e:	230a      	movs	r3, #10
 8014540:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014542:	2300      	movs	r3, #0
 8014544:	83bb      	strh	r3, [r7, #28]
 8014546:	2300      	movs	r3, #0
 8014548:	837b      	strh	r3, [r7, #26]
 801454a:	2300      	movs	r3, #0
 801454c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801454e:	2300      	movs	r3, #0
 8014550:	843b      	strh	r3, [r7, #32]
 8014552:	e0ae      	b.n	80146b2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014554:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014558:	49a6      	ldr	r1, [pc, #664]	; (80147f4 <etharp_find_entry+0x2d4>)
 801455a:	4613      	mov	r3, r2
 801455c:	005b      	lsls	r3, r3, #1
 801455e:	4413      	add	r3, r2
 8014560:	00db      	lsls	r3, r3, #3
 8014562:	440b      	add	r3, r1
 8014564:	3314      	adds	r3, #20
 8014566:	781b      	ldrb	r3, [r3, #0]
 8014568:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801456a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801456e:	2b0a      	cmp	r3, #10
 8014570:	d105      	bne.n	801457e <etharp_find_entry+0x5e>
 8014572:	7dfb      	ldrb	r3, [r7, #23]
 8014574:	2b00      	cmp	r3, #0
 8014576:	d102      	bne.n	801457e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014578:	8c3b      	ldrh	r3, [r7, #32]
 801457a:	847b      	strh	r3, [r7, #34]	; 0x22
 801457c:	e095      	b.n	80146aa <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801457e:	7dfb      	ldrb	r3, [r7, #23]
 8014580:	2b00      	cmp	r3, #0
 8014582:	f000 8092 	beq.w	80146aa <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014586:	7dfb      	ldrb	r3, [r7, #23]
 8014588:	2b01      	cmp	r3, #1
 801458a:	d009      	beq.n	80145a0 <etharp_find_entry+0x80>
 801458c:	7dfb      	ldrb	r3, [r7, #23]
 801458e:	2b01      	cmp	r3, #1
 8014590:	d806      	bhi.n	80145a0 <etharp_find_entry+0x80>
 8014592:	4b99      	ldr	r3, [pc, #612]	; (80147f8 <etharp_find_entry+0x2d8>)
 8014594:	f240 1223 	movw	r2, #291	; 0x123
 8014598:	4998      	ldr	r1, [pc, #608]	; (80147fc <etharp_find_entry+0x2dc>)
 801459a:	4899      	ldr	r0, [pc, #612]	; (8014800 <etharp_find_entry+0x2e0>)
 801459c:	f002 fd30 	bl	8017000 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d020      	beq.n	80145e8 <etharp_find_entry+0xc8>
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	6819      	ldr	r1, [r3, #0]
 80145aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80145ae:	4891      	ldr	r0, [pc, #580]	; (80147f4 <etharp_find_entry+0x2d4>)
 80145b0:	4613      	mov	r3, r2
 80145b2:	005b      	lsls	r3, r3, #1
 80145b4:	4413      	add	r3, r2
 80145b6:	00db      	lsls	r3, r3, #3
 80145b8:	4403      	add	r3, r0
 80145ba:	3304      	adds	r3, #4
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	4299      	cmp	r1, r3
 80145c0:	d112      	bne.n	80145e8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d00c      	beq.n	80145e2 <etharp_find_entry+0xc2>
 80145c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80145cc:	4989      	ldr	r1, [pc, #548]	; (80147f4 <etharp_find_entry+0x2d4>)
 80145ce:	4613      	mov	r3, r2
 80145d0:	005b      	lsls	r3, r3, #1
 80145d2:	4413      	add	r3, r2
 80145d4:	00db      	lsls	r3, r3, #3
 80145d6:	440b      	add	r3, r1
 80145d8:	3308      	adds	r3, #8
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	687a      	ldr	r2, [r7, #4]
 80145de:	429a      	cmp	r2, r3
 80145e0:	d102      	bne.n	80145e8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80145e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80145e6:	e100      	b.n	80147ea <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80145e8:	7dfb      	ldrb	r3, [r7, #23]
 80145ea:	2b01      	cmp	r3, #1
 80145ec:	d140      	bne.n	8014670 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80145ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80145f2:	4980      	ldr	r1, [pc, #512]	; (80147f4 <etharp_find_entry+0x2d4>)
 80145f4:	4613      	mov	r3, r2
 80145f6:	005b      	lsls	r3, r3, #1
 80145f8:	4413      	add	r3, r2
 80145fa:	00db      	lsls	r3, r3, #3
 80145fc:	440b      	add	r3, r1
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	2b00      	cmp	r3, #0
 8014602:	d01a      	beq.n	801463a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014604:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014608:	497a      	ldr	r1, [pc, #488]	; (80147f4 <etharp_find_entry+0x2d4>)
 801460a:	4613      	mov	r3, r2
 801460c:	005b      	lsls	r3, r3, #1
 801460e:	4413      	add	r3, r2
 8014610:	00db      	lsls	r3, r3, #3
 8014612:	440b      	add	r3, r1
 8014614:	3312      	adds	r3, #18
 8014616:	881b      	ldrh	r3, [r3, #0]
 8014618:	8bba      	ldrh	r2, [r7, #28]
 801461a:	429a      	cmp	r2, r3
 801461c:	d845      	bhi.n	80146aa <etharp_find_entry+0x18a>
            old_queue = i;
 801461e:	8c3b      	ldrh	r3, [r7, #32]
 8014620:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8014622:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014626:	4973      	ldr	r1, [pc, #460]	; (80147f4 <etharp_find_entry+0x2d4>)
 8014628:	4613      	mov	r3, r2
 801462a:	005b      	lsls	r3, r3, #1
 801462c:	4413      	add	r3, r2
 801462e:	00db      	lsls	r3, r3, #3
 8014630:	440b      	add	r3, r1
 8014632:	3312      	adds	r3, #18
 8014634:	881b      	ldrh	r3, [r3, #0]
 8014636:	83bb      	strh	r3, [r7, #28]
 8014638:	e037      	b.n	80146aa <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801463a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801463e:	496d      	ldr	r1, [pc, #436]	; (80147f4 <etharp_find_entry+0x2d4>)
 8014640:	4613      	mov	r3, r2
 8014642:	005b      	lsls	r3, r3, #1
 8014644:	4413      	add	r3, r2
 8014646:	00db      	lsls	r3, r3, #3
 8014648:	440b      	add	r3, r1
 801464a:	3312      	adds	r3, #18
 801464c:	881b      	ldrh	r3, [r3, #0]
 801464e:	8b7a      	ldrh	r2, [r7, #26]
 8014650:	429a      	cmp	r2, r3
 8014652:	d82a      	bhi.n	80146aa <etharp_find_entry+0x18a>
            old_pending = i;
 8014654:	8c3b      	ldrh	r3, [r7, #32]
 8014656:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8014658:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801465c:	4965      	ldr	r1, [pc, #404]	; (80147f4 <etharp_find_entry+0x2d4>)
 801465e:	4613      	mov	r3, r2
 8014660:	005b      	lsls	r3, r3, #1
 8014662:	4413      	add	r3, r2
 8014664:	00db      	lsls	r3, r3, #3
 8014666:	440b      	add	r3, r1
 8014668:	3312      	adds	r3, #18
 801466a:	881b      	ldrh	r3, [r3, #0]
 801466c:	837b      	strh	r3, [r7, #26]
 801466e:	e01c      	b.n	80146aa <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014670:	7dfb      	ldrb	r3, [r7, #23]
 8014672:	2b01      	cmp	r3, #1
 8014674:	d919      	bls.n	80146aa <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014676:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801467a:	495e      	ldr	r1, [pc, #376]	; (80147f4 <etharp_find_entry+0x2d4>)
 801467c:	4613      	mov	r3, r2
 801467e:	005b      	lsls	r3, r3, #1
 8014680:	4413      	add	r3, r2
 8014682:	00db      	lsls	r3, r3, #3
 8014684:	440b      	add	r3, r1
 8014686:	3312      	adds	r3, #18
 8014688:	881b      	ldrh	r3, [r3, #0]
 801468a:	8b3a      	ldrh	r2, [r7, #24]
 801468c:	429a      	cmp	r2, r3
 801468e:	d80c      	bhi.n	80146aa <etharp_find_entry+0x18a>
            old_stable = i;
 8014690:	8c3b      	ldrh	r3, [r7, #32]
 8014692:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8014694:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014698:	4956      	ldr	r1, [pc, #344]	; (80147f4 <etharp_find_entry+0x2d4>)
 801469a:	4613      	mov	r3, r2
 801469c:	005b      	lsls	r3, r3, #1
 801469e:	4413      	add	r3, r2
 80146a0:	00db      	lsls	r3, r3, #3
 80146a2:	440b      	add	r3, r1
 80146a4:	3312      	adds	r3, #18
 80146a6:	881b      	ldrh	r3, [r3, #0]
 80146a8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80146aa:	8c3b      	ldrh	r3, [r7, #32]
 80146ac:	3301      	adds	r3, #1
 80146ae:	b29b      	uxth	r3, r3
 80146b0:	843b      	strh	r3, [r7, #32]
 80146b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80146b6:	2b09      	cmp	r3, #9
 80146b8:	f77f af4c 	ble.w	8014554 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80146bc:	7afb      	ldrb	r3, [r7, #11]
 80146be:	f003 0302 	and.w	r3, r3, #2
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d108      	bne.n	80146d8 <etharp_find_entry+0x1b8>
 80146c6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80146ca:	2b0a      	cmp	r3, #10
 80146cc:	d107      	bne.n	80146de <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80146ce:	7afb      	ldrb	r3, [r7, #11]
 80146d0:	f003 0301 	and.w	r3, r3, #1
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d102      	bne.n	80146de <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80146d8:	f04f 33ff 	mov.w	r3, #4294967295
 80146dc:	e085      	b.n	80147ea <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80146de:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80146e2:	2b09      	cmp	r3, #9
 80146e4:	dc02      	bgt.n	80146ec <etharp_find_entry+0x1cc>
    i = empty;
 80146e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80146e8:	843b      	strh	r3, [r7, #32]
 80146ea:	e039      	b.n	8014760 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80146ec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80146f0:	2b09      	cmp	r3, #9
 80146f2:	dc14      	bgt.n	801471e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80146f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80146f6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80146f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80146fc:	493d      	ldr	r1, [pc, #244]	; (80147f4 <etharp_find_entry+0x2d4>)
 80146fe:	4613      	mov	r3, r2
 8014700:	005b      	lsls	r3, r3, #1
 8014702:	4413      	add	r3, r2
 8014704:	00db      	lsls	r3, r3, #3
 8014706:	440b      	add	r3, r1
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	2b00      	cmp	r3, #0
 801470c:	d018      	beq.n	8014740 <etharp_find_entry+0x220>
 801470e:	4b3a      	ldr	r3, [pc, #232]	; (80147f8 <etharp_find_entry+0x2d8>)
 8014710:	f240 126d 	movw	r2, #365	; 0x16d
 8014714:	493b      	ldr	r1, [pc, #236]	; (8014804 <etharp_find_entry+0x2e4>)
 8014716:	483a      	ldr	r0, [pc, #232]	; (8014800 <etharp_find_entry+0x2e0>)
 8014718:	f002 fc72 	bl	8017000 <iprintf>
 801471c:	e010      	b.n	8014740 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801471e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8014722:	2b09      	cmp	r3, #9
 8014724:	dc02      	bgt.n	801472c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8014726:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014728:	843b      	strh	r3, [r7, #32]
 801472a:	e009      	b.n	8014740 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801472c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014730:	2b09      	cmp	r3, #9
 8014732:	dc02      	bgt.n	801473a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014734:	8bfb      	ldrh	r3, [r7, #30]
 8014736:	843b      	strh	r3, [r7, #32]
 8014738:	e002      	b.n	8014740 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801473a:	f04f 33ff 	mov.w	r3, #4294967295
 801473e:	e054      	b.n	80147ea <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014740:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014744:	2b09      	cmp	r3, #9
 8014746:	dd06      	ble.n	8014756 <etharp_find_entry+0x236>
 8014748:	4b2b      	ldr	r3, [pc, #172]	; (80147f8 <etharp_find_entry+0x2d8>)
 801474a:	f240 127f 	movw	r2, #383	; 0x17f
 801474e:	492e      	ldr	r1, [pc, #184]	; (8014808 <etharp_find_entry+0x2e8>)
 8014750:	482b      	ldr	r0, [pc, #172]	; (8014800 <etharp_find_entry+0x2e0>)
 8014752:	f002 fc55 	bl	8017000 <iprintf>
    etharp_free_entry(i);
 8014756:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801475a:	4618      	mov	r0, r3
 801475c:	f7ff fe06 	bl	801436c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014760:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014764:	2b09      	cmp	r3, #9
 8014766:	dd06      	ble.n	8014776 <etharp_find_entry+0x256>
 8014768:	4b23      	ldr	r3, [pc, #140]	; (80147f8 <etharp_find_entry+0x2d8>)
 801476a:	f240 1283 	movw	r2, #387	; 0x183
 801476e:	4926      	ldr	r1, [pc, #152]	; (8014808 <etharp_find_entry+0x2e8>)
 8014770:	4823      	ldr	r0, [pc, #140]	; (8014800 <etharp_find_entry+0x2e0>)
 8014772:	f002 fc45 	bl	8017000 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014776:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801477a:	491e      	ldr	r1, [pc, #120]	; (80147f4 <etharp_find_entry+0x2d4>)
 801477c:	4613      	mov	r3, r2
 801477e:	005b      	lsls	r3, r3, #1
 8014780:	4413      	add	r3, r2
 8014782:	00db      	lsls	r3, r3, #3
 8014784:	440b      	add	r3, r1
 8014786:	3314      	adds	r3, #20
 8014788:	781b      	ldrb	r3, [r3, #0]
 801478a:	2b00      	cmp	r3, #0
 801478c:	d006      	beq.n	801479c <etharp_find_entry+0x27c>
 801478e:	4b1a      	ldr	r3, [pc, #104]	; (80147f8 <etharp_find_entry+0x2d8>)
 8014790:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8014794:	491d      	ldr	r1, [pc, #116]	; (801480c <etharp_find_entry+0x2ec>)
 8014796:	481a      	ldr	r0, [pc, #104]	; (8014800 <etharp_find_entry+0x2e0>)
 8014798:	f002 fc32 	bl	8017000 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d00b      	beq.n	80147ba <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80147a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80147a6:	68fb      	ldr	r3, [r7, #12]
 80147a8:	6819      	ldr	r1, [r3, #0]
 80147aa:	4812      	ldr	r0, [pc, #72]	; (80147f4 <etharp_find_entry+0x2d4>)
 80147ac:	4613      	mov	r3, r2
 80147ae:	005b      	lsls	r3, r3, #1
 80147b0:	4413      	add	r3, r2
 80147b2:	00db      	lsls	r3, r3, #3
 80147b4:	4403      	add	r3, r0
 80147b6:	3304      	adds	r3, #4
 80147b8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80147ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80147be:	490d      	ldr	r1, [pc, #52]	; (80147f4 <etharp_find_entry+0x2d4>)
 80147c0:	4613      	mov	r3, r2
 80147c2:	005b      	lsls	r3, r3, #1
 80147c4:	4413      	add	r3, r2
 80147c6:	00db      	lsls	r3, r3, #3
 80147c8:	440b      	add	r3, r1
 80147ca:	3312      	adds	r3, #18
 80147cc:	2200      	movs	r2, #0
 80147ce:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80147d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80147d4:	4907      	ldr	r1, [pc, #28]	; (80147f4 <etharp_find_entry+0x2d4>)
 80147d6:	4613      	mov	r3, r2
 80147d8:	005b      	lsls	r3, r3, #1
 80147da:	4413      	add	r3, r2
 80147dc:	00db      	lsls	r3, r3, #3
 80147de:	440b      	add	r3, r1
 80147e0:	3308      	adds	r3, #8
 80147e2:	687a      	ldr	r2, [r7, #4]
 80147e4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80147e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80147ea:	4618      	mov	r0, r3
 80147ec:	3728      	adds	r7, #40	; 0x28
 80147ee:	46bd      	mov	sp, r7
 80147f0:	bd80      	pop	{r7, pc}
 80147f2:	bf00      	nop
 80147f4:	2000d1a4 	.word	0x2000d1a4
 80147f8:	0801b734 	.word	0x0801b734
 80147fc:	0801b76c 	.word	0x0801b76c
 8014800:	0801b7ac 	.word	0x0801b7ac
 8014804:	0801b7d4 	.word	0x0801b7d4
 8014808:	0801b7ec 	.word	0x0801b7ec
 801480c:	0801b800 	.word	0x0801b800

08014810 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014810:	b580      	push	{r7, lr}
 8014812:	b088      	sub	sp, #32
 8014814:	af02      	add	r7, sp, #8
 8014816:	60f8      	str	r0, [r7, #12]
 8014818:	60b9      	str	r1, [r7, #8]
 801481a:	607a      	str	r2, [r7, #4]
 801481c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014824:	2b06      	cmp	r3, #6
 8014826:	d006      	beq.n	8014836 <etharp_update_arp_entry+0x26>
 8014828:	4b48      	ldr	r3, [pc, #288]	; (801494c <etharp_update_arp_entry+0x13c>)
 801482a:	f240 12a9 	movw	r2, #425	; 0x1a9
 801482e:	4948      	ldr	r1, [pc, #288]	; (8014950 <etharp_update_arp_entry+0x140>)
 8014830:	4848      	ldr	r0, [pc, #288]	; (8014954 <etharp_update_arp_entry+0x144>)
 8014832:	f002 fbe5 	bl	8017000 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014836:	68bb      	ldr	r3, [r7, #8]
 8014838:	2b00      	cmp	r3, #0
 801483a:	d012      	beq.n	8014862 <etharp_update_arp_entry+0x52>
 801483c:	68bb      	ldr	r3, [r7, #8]
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	2b00      	cmp	r3, #0
 8014842:	d00e      	beq.n	8014862 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014844:	68bb      	ldr	r3, [r7, #8]
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	68f9      	ldr	r1, [r7, #12]
 801484a:	4618      	mov	r0, r3
 801484c:	f001 f8fe 	bl	8015a4c <ip4_addr_isbroadcast_u32>
 8014850:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014852:	2b00      	cmp	r3, #0
 8014854:	d105      	bne.n	8014862 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014856:	68bb      	ldr	r3, [r7, #8]
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801485e:	2be0      	cmp	r3, #224	; 0xe0
 8014860:	d102      	bne.n	8014868 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014862:	f06f 030f 	mvn.w	r3, #15
 8014866:	e06c      	b.n	8014942 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014868:	78fb      	ldrb	r3, [r7, #3]
 801486a:	68fa      	ldr	r2, [r7, #12]
 801486c:	4619      	mov	r1, r3
 801486e:	68b8      	ldr	r0, [r7, #8]
 8014870:	f7ff fe56 	bl	8014520 <etharp_find_entry>
 8014874:	4603      	mov	r3, r0
 8014876:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014878:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801487c:	2b00      	cmp	r3, #0
 801487e:	da02      	bge.n	8014886 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014880:	8afb      	ldrh	r3, [r7, #22]
 8014882:	b25b      	sxtb	r3, r3
 8014884:	e05d      	b.n	8014942 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014886:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801488a:	4933      	ldr	r1, [pc, #204]	; (8014958 <etharp_update_arp_entry+0x148>)
 801488c:	4613      	mov	r3, r2
 801488e:	005b      	lsls	r3, r3, #1
 8014890:	4413      	add	r3, r2
 8014892:	00db      	lsls	r3, r3, #3
 8014894:	440b      	add	r3, r1
 8014896:	3314      	adds	r3, #20
 8014898:	2202      	movs	r2, #2
 801489a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801489c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80148a0:	492d      	ldr	r1, [pc, #180]	; (8014958 <etharp_update_arp_entry+0x148>)
 80148a2:	4613      	mov	r3, r2
 80148a4:	005b      	lsls	r3, r3, #1
 80148a6:	4413      	add	r3, r2
 80148a8:	00db      	lsls	r3, r3, #3
 80148aa:	440b      	add	r3, r1
 80148ac:	3308      	adds	r3, #8
 80148ae:	68fa      	ldr	r2, [r7, #12]
 80148b0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80148b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80148b6:	4613      	mov	r3, r2
 80148b8:	005b      	lsls	r3, r3, #1
 80148ba:	4413      	add	r3, r2
 80148bc:	00db      	lsls	r3, r3, #3
 80148be:	3308      	adds	r3, #8
 80148c0:	4a25      	ldr	r2, [pc, #148]	; (8014958 <etharp_update_arp_entry+0x148>)
 80148c2:	4413      	add	r3, r2
 80148c4:	3304      	adds	r3, #4
 80148c6:	2206      	movs	r2, #6
 80148c8:	6879      	ldr	r1, [r7, #4]
 80148ca:	4618      	mov	r0, r3
 80148cc:	f002 fb68 	bl	8016fa0 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80148d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80148d4:	4920      	ldr	r1, [pc, #128]	; (8014958 <etharp_update_arp_entry+0x148>)
 80148d6:	4613      	mov	r3, r2
 80148d8:	005b      	lsls	r3, r3, #1
 80148da:	4413      	add	r3, r2
 80148dc:	00db      	lsls	r3, r3, #3
 80148de:	440b      	add	r3, r1
 80148e0:	3312      	adds	r3, #18
 80148e2:	2200      	movs	r2, #0
 80148e4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80148e6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80148ea:	491b      	ldr	r1, [pc, #108]	; (8014958 <etharp_update_arp_entry+0x148>)
 80148ec:	4613      	mov	r3, r2
 80148ee:	005b      	lsls	r3, r3, #1
 80148f0:	4413      	add	r3, r2
 80148f2:	00db      	lsls	r3, r3, #3
 80148f4:	440b      	add	r3, r1
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d021      	beq.n	8014940 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80148fc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014900:	4915      	ldr	r1, [pc, #84]	; (8014958 <etharp_update_arp_entry+0x148>)
 8014902:	4613      	mov	r3, r2
 8014904:	005b      	lsls	r3, r3, #1
 8014906:	4413      	add	r3, r2
 8014908:	00db      	lsls	r3, r3, #3
 801490a:	440b      	add	r3, r1
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014910:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014914:	4910      	ldr	r1, [pc, #64]	; (8014958 <etharp_update_arp_entry+0x148>)
 8014916:	4613      	mov	r3, r2
 8014918:	005b      	lsls	r3, r3, #1
 801491a:	4413      	add	r3, r2
 801491c:	00db      	lsls	r3, r3, #3
 801491e:	440b      	add	r3, r1
 8014920:	2200      	movs	r2, #0
 8014922:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801492a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801492e:	9300      	str	r3, [sp, #0]
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	6939      	ldr	r1, [r7, #16]
 8014934:	68f8      	ldr	r0, [r7, #12]
 8014936:	f002 f8d5 	bl	8016ae4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801493a:	6938      	ldr	r0, [r7, #16]
 801493c:	f7f8 fc4c 	bl	800d1d8 <pbuf_free>
  }
  return ERR_OK;
 8014940:	2300      	movs	r3, #0
}
 8014942:	4618      	mov	r0, r3
 8014944:	3718      	adds	r7, #24
 8014946:	46bd      	mov	sp, r7
 8014948:	bd80      	pop	{r7, pc}
 801494a:	bf00      	nop
 801494c:	0801b734 	.word	0x0801b734
 8014950:	0801b82c 	.word	0x0801b82c
 8014954:	0801b7ac 	.word	0x0801b7ac
 8014958:	2000d1a4 	.word	0x2000d1a4

0801495c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801495c:	b580      	push	{r7, lr}
 801495e:	b084      	sub	sp, #16
 8014960:	af00      	add	r7, sp, #0
 8014962:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014964:	2300      	movs	r3, #0
 8014966:	60fb      	str	r3, [r7, #12]
 8014968:	e01e      	b.n	80149a8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801496a:	4913      	ldr	r1, [pc, #76]	; (80149b8 <etharp_cleanup_netif+0x5c>)
 801496c:	68fa      	ldr	r2, [r7, #12]
 801496e:	4613      	mov	r3, r2
 8014970:	005b      	lsls	r3, r3, #1
 8014972:	4413      	add	r3, r2
 8014974:	00db      	lsls	r3, r3, #3
 8014976:	440b      	add	r3, r1
 8014978:	3314      	adds	r3, #20
 801497a:	781b      	ldrb	r3, [r3, #0]
 801497c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801497e:	7afb      	ldrb	r3, [r7, #11]
 8014980:	2b00      	cmp	r3, #0
 8014982:	d00e      	beq.n	80149a2 <etharp_cleanup_netif+0x46>
 8014984:	490c      	ldr	r1, [pc, #48]	; (80149b8 <etharp_cleanup_netif+0x5c>)
 8014986:	68fa      	ldr	r2, [r7, #12]
 8014988:	4613      	mov	r3, r2
 801498a:	005b      	lsls	r3, r3, #1
 801498c:	4413      	add	r3, r2
 801498e:	00db      	lsls	r3, r3, #3
 8014990:	440b      	add	r3, r1
 8014992:	3308      	adds	r3, #8
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	687a      	ldr	r2, [r7, #4]
 8014998:	429a      	cmp	r2, r3
 801499a:	d102      	bne.n	80149a2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801499c:	68f8      	ldr	r0, [r7, #12]
 801499e:	f7ff fce5 	bl	801436c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	3301      	adds	r3, #1
 80149a6:	60fb      	str	r3, [r7, #12]
 80149a8:	68fb      	ldr	r3, [r7, #12]
 80149aa:	2b09      	cmp	r3, #9
 80149ac:	dddd      	ble.n	801496a <etharp_cleanup_netif+0xe>
    }
  }
}
 80149ae:	bf00      	nop
 80149b0:	bf00      	nop
 80149b2:	3710      	adds	r7, #16
 80149b4:	46bd      	mov	sp, r7
 80149b6:	bd80      	pop	{r7, pc}
 80149b8:	2000d1a4 	.word	0x2000d1a4

080149bc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80149bc:	b5b0      	push	{r4, r5, r7, lr}
 80149be:	b08a      	sub	sp, #40	; 0x28
 80149c0:	af04      	add	r7, sp, #16
 80149c2:	6078      	str	r0, [r7, #4]
 80149c4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80149c6:	683b      	ldr	r3, [r7, #0]
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d107      	bne.n	80149dc <etharp_input+0x20>
 80149cc:	4b3d      	ldr	r3, [pc, #244]	; (8014ac4 <etharp_input+0x108>)
 80149ce:	f240 228a 	movw	r2, #650	; 0x28a
 80149d2:	493d      	ldr	r1, [pc, #244]	; (8014ac8 <etharp_input+0x10c>)
 80149d4:	483d      	ldr	r0, [pc, #244]	; (8014acc <etharp_input+0x110>)
 80149d6:	f002 fb13 	bl	8017000 <iprintf>
 80149da:	e06f      	b.n	8014abc <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	685b      	ldr	r3, [r3, #4]
 80149e0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80149e2:	693b      	ldr	r3, [r7, #16]
 80149e4:	881b      	ldrh	r3, [r3, #0]
 80149e6:	b29b      	uxth	r3, r3
 80149e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80149ec:	d10c      	bne.n	8014a08 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80149ee:	693b      	ldr	r3, [r7, #16]
 80149f0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80149f2:	2b06      	cmp	r3, #6
 80149f4:	d108      	bne.n	8014a08 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80149f6:	693b      	ldr	r3, [r7, #16]
 80149f8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80149fa:	2b04      	cmp	r3, #4
 80149fc:	d104      	bne.n	8014a08 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80149fe:	693b      	ldr	r3, [r7, #16]
 8014a00:	885b      	ldrh	r3, [r3, #2]
 8014a02:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014a04:	2b08      	cmp	r3, #8
 8014a06:	d003      	beq.n	8014a10 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014a08:	6878      	ldr	r0, [r7, #4]
 8014a0a:	f7f8 fbe5 	bl	800d1d8 <pbuf_free>
    return;
 8014a0e:	e055      	b.n	8014abc <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014a10:	693b      	ldr	r3, [r7, #16]
 8014a12:	330e      	adds	r3, #14
 8014a14:	681b      	ldr	r3, [r3, #0]
 8014a16:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014a18:	693b      	ldr	r3, [r7, #16]
 8014a1a:	3318      	adds	r3, #24
 8014a1c:	681b      	ldr	r3, [r3, #0]
 8014a1e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014a20:	683b      	ldr	r3, [r7, #0]
 8014a22:	3304      	adds	r3, #4
 8014a24:	681b      	ldr	r3, [r3, #0]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d102      	bne.n	8014a30 <etharp_input+0x74>
    for_us = 0;
 8014a2a:	2300      	movs	r3, #0
 8014a2c:	75fb      	strb	r3, [r7, #23]
 8014a2e:	e009      	b.n	8014a44 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014a30:	68ba      	ldr	r2, [r7, #8]
 8014a32:	683b      	ldr	r3, [r7, #0]
 8014a34:	3304      	adds	r3, #4
 8014a36:	681b      	ldr	r3, [r3, #0]
 8014a38:	429a      	cmp	r2, r3
 8014a3a:	bf0c      	ite	eq
 8014a3c:	2301      	moveq	r3, #1
 8014a3e:	2300      	movne	r3, #0
 8014a40:	b2db      	uxtb	r3, r3
 8014a42:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014a44:	693b      	ldr	r3, [r7, #16]
 8014a46:	f103 0208 	add.w	r2, r3, #8
 8014a4a:	7dfb      	ldrb	r3, [r7, #23]
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d001      	beq.n	8014a54 <etharp_input+0x98>
 8014a50:	2301      	movs	r3, #1
 8014a52:	e000      	b.n	8014a56 <etharp_input+0x9a>
 8014a54:	2302      	movs	r3, #2
 8014a56:	f107 010c 	add.w	r1, r7, #12
 8014a5a:	6838      	ldr	r0, [r7, #0]
 8014a5c:	f7ff fed8 	bl	8014810 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014a60:	693b      	ldr	r3, [r7, #16]
 8014a62:	88db      	ldrh	r3, [r3, #6]
 8014a64:	b29b      	uxth	r3, r3
 8014a66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014a6a:	d003      	beq.n	8014a74 <etharp_input+0xb8>
 8014a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014a70:	d01e      	beq.n	8014ab0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014a72:	e020      	b.n	8014ab6 <etharp_input+0xfa>
      if (for_us) {
 8014a74:	7dfb      	ldrb	r3, [r7, #23]
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d01c      	beq.n	8014ab4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014a7a:	683b      	ldr	r3, [r7, #0]
 8014a7c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014a80:	693b      	ldr	r3, [r7, #16]
 8014a82:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014a86:	683b      	ldr	r3, [r7, #0]
 8014a88:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8014a8c:	683b      	ldr	r3, [r7, #0]
 8014a8e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014a90:	693a      	ldr	r2, [r7, #16]
 8014a92:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014a94:	2102      	movs	r1, #2
 8014a96:	9103      	str	r1, [sp, #12]
 8014a98:	f107 010c 	add.w	r1, r7, #12
 8014a9c:	9102      	str	r1, [sp, #8]
 8014a9e:	9201      	str	r2, [sp, #4]
 8014aa0:	9300      	str	r3, [sp, #0]
 8014aa2:	462b      	mov	r3, r5
 8014aa4:	4622      	mov	r2, r4
 8014aa6:	4601      	mov	r1, r0
 8014aa8:	6838      	ldr	r0, [r7, #0]
 8014aaa:	f000 faeb 	bl	8015084 <etharp_raw>
      break;
 8014aae:	e001      	b.n	8014ab4 <etharp_input+0xf8>
      break;
 8014ab0:	bf00      	nop
 8014ab2:	e000      	b.n	8014ab6 <etharp_input+0xfa>
      break;
 8014ab4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014ab6:	6878      	ldr	r0, [r7, #4]
 8014ab8:	f7f8 fb8e 	bl	800d1d8 <pbuf_free>
}
 8014abc:	3718      	adds	r7, #24
 8014abe:	46bd      	mov	sp, r7
 8014ac0:	bdb0      	pop	{r4, r5, r7, pc}
 8014ac2:	bf00      	nop
 8014ac4:	0801b734 	.word	0x0801b734
 8014ac8:	0801b884 	.word	0x0801b884
 8014acc:	0801b7ac 	.word	0x0801b7ac

08014ad0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014ad0:	b580      	push	{r7, lr}
 8014ad2:	b086      	sub	sp, #24
 8014ad4:	af02      	add	r7, sp, #8
 8014ad6:	60f8      	str	r0, [r7, #12]
 8014ad8:	60b9      	str	r1, [r7, #8]
 8014ada:	4613      	mov	r3, r2
 8014adc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014ade:	79fa      	ldrb	r2, [r7, #7]
 8014ae0:	4944      	ldr	r1, [pc, #272]	; (8014bf4 <etharp_output_to_arp_index+0x124>)
 8014ae2:	4613      	mov	r3, r2
 8014ae4:	005b      	lsls	r3, r3, #1
 8014ae6:	4413      	add	r3, r2
 8014ae8:	00db      	lsls	r3, r3, #3
 8014aea:	440b      	add	r3, r1
 8014aec:	3314      	adds	r3, #20
 8014aee:	781b      	ldrb	r3, [r3, #0]
 8014af0:	2b01      	cmp	r3, #1
 8014af2:	d806      	bhi.n	8014b02 <etharp_output_to_arp_index+0x32>
 8014af4:	4b40      	ldr	r3, [pc, #256]	; (8014bf8 <etharp_output_to_arp_index+0x128>)
 8014af6:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014afa:	4940      	ldr	r1, [pc, #256]	; (8014bfc <etharp_output_to_arp_index+0x12c>)
 8014afc:	4840      	ldr	r0, [pc, #256]	; (8014c00 <etharp_output_to_arp_index+0x130>)
 8014afe:	f002 fa7f 	bl	8017000 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014b02:	79fa      	ldrb	r2, [r7, #7]
 8014b04:	493b      	ldr	r1, [pc, #236]	; (8014bf4 <etharp_output_to_arp_index+0x124>)
 8014b06:	4613      	mov	r3, r2
 8014b08:	005b      	lsls	r3, r3, #1
 8014b0a:	4413      	add	r3, r2
 8014b0c:	00db      	lsls	r3, r3, #3
 8014b0e:	440b      	add	r3, r1
 8014b10:	3314      	adds	r3, #20
 8014b12:	781b      	ldrb	r3, [r3, #0]
 8014b14:	2b02      	cmp	r3, #2
 8014b16:	d153      	bne.n	8014bc0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014b18:	79fa      	ldrb	r2, [r7, #7]
 8014b1a:	4936      	ldr	r1, [pc, #216]	; (8014bf4 <etharp_output_to_arp_index+0x124>)
 8014b1c:	4613      	mov	r3, r2
 8014b1e:	005b      	lsls	r3, r3, #1
 8014b20:	4413      	add	r3, r2
 8014b22:	00db      	lsls	r3, r3, #3
 8014b24:	440b      	add	r3, r1
 8014b26:	3312      	adds	r3, #18
 8014b28:	881b      	ldrh	r3, [r3, #0]
 8014b2a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8014b2e:	d919      	bls.n	8014b64 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014b30:	79fa      	ldrb	r2, [r7, #7]
 8014b32:	4613      	mov	r3, r2
 8014b34:	005b      	lsls	r3, r3, #1
 8014b36:	4413      	add	r3, r2
 8014b38:	00db      	lsls	r3, r3, #3
 8014b3a:	4a2e      	ldr	r2, [pc, #184]	; (8014bf4 <etharp_output_to_arp_index+0x124>)
 8014b3c:	4413      	add	r3, r2
 8014b3e:	3304      	adds	r3, #4
 8014b40:	4619      	mov	r1, r3
 8014b42:	68f8      	ldr	r0, [r7, #12]
 8014b44:	f000 fb4c 	bl	80151e0 <etharp_request>
 8014b48:	4603      	mov	r3, r0
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d138      	bne.n	8014bc0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014b4e:	79fa      	ldrb	r2, [r7, #7]
 8014b50:	4928      	ldr	r1, [pc, #160]	; (8014bf4 <etharp_output_to_arp_index+0x124>)
 8014b52:	4613      	mov	r3, r2
 8014b54:	005b      	lsls	r3, r3, #1
 8014b56:	4413      	add	r3, r2
 8014b58:	00db      	lsls	r3, r3, #3
 8014b5a:	440b      	add	r3, r1
 8014b5c:	3314      	adds	r3, #20
 8014b5e:	2203      	movs	r2, #3
 8014b60:	701a      	strb	r2, [r3, #0]
 8014b62:	e02d      	b.n	8014bc0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014b64:	79fa      	ldrb	r2, [r7, #7]
 8014b66:	4923      	ldr	r1, [pc, #140]	; (8014bf4 <etharp_output_to_arp_index+0x124>)
 8014b68:	4613      	mov	r3, r2
 8014b6a:	005b      	lsls	r3, r3, #1
 8014b6c:	4413      	add	r3, r2
 8014b6e:	00db      	lsls	r3, r3, #3
 8014b70:	440b      	add	r3, r1
 8014b72:	3312      	adds	r3, #18
 8014b74:	881b      	ldrh	r3, [r3, #0]
 8014b76:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8014b7a:	d321      	bcc.n	8014bc0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014b7c:	79fa      	ldrb	r2, [r7, #7]
 8014b7e:	4613      	mov	r3, r2
 8014b80:	005b      	lsls	r3, r3, #1
 8014b82:	4413      	add	r3, r2
 8014b84:	00db      	lsls	r3, r3, #3
 8014b86:	4a1b      	ldr	r2, [pc, #108]	; (8014bf4 <etharp_output_to_arp_index+0x124>)
 8014b88:	4413      	add	r3, r2
 8014b8a:	1d19      	adds	r1, r3, #4
 8014b8c:	79fa      	ldrb	r2, [r7, #7]
 8014b8e:	4613      	mov	r3, r2
 8014b90:	005b      	lsls	r3, r3, #1
 8014b92:	4413      	add	r3, r2
 8014b94:	00db      	lsls	r3, r3, #3
 8014b96:	3308      	adds	r3, #8
 8014b98:	4a16      	ldr	r2, [pc, #88]	; (8014bf4 <etharp_output_to_arp_index+0x124>)
 8014b9a:	4413      	add	r3, r2
 8014b9c:	3304      	adds	r3, #4
 8014b9e:	461a      	mov	r2, r3
 8014ba0:	68f8      	ldr	r0, [r7, #12]
 8014ba2:	f000 fafb 	bl	801519c <etharp_request_dst>
 8014ba6:	4603      	mov	r3, r0
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d109      	bne.n	8014bc0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014bac:	79fa      	ldrb	r2, [r7, #7]
 8014bae:	4911      	ldr	r1, [pc, #68]	; (8014bf4 <etharp_output_to_arp_index+0x124>)
 8014bb0:	4613      	mov	r3, r2
 8014bb2:	005b      	lsls	r3, r3, #1
 8014bb4:	4413      	add	r3, r2
 8014bb6:	00db      	lsls	r3, r3, #3
 8014bb8:	440b      	add	r3, r1
 8014bba:	3314      	adds	r3, #20
 8014bbc:	2203      	movs	r2, #3
 8014bbe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8014bc6:	79fa      	ldrb	r2, [r7, #7]
 8014bc8:	4613      	mov	r3, r2
 8014bca:	005b      	lsls	r3, r3, #1
 8014bcc:	4413      	add	r3, r2
 8014bce:	00db      	lsls	r3, r3, #3
 8014bd0:	3308      	adds	r3, #8
 8014bd2:	4a08      	ldr	r2, [pc, #32]	; (8014bf4 <etharp_output_to_arp_index+0x124>)
 8014bd4:	4413      	add	r3, r2
 8014bd6:	3304      	adds	r3, #4
 8014bd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014bdc:	9200      	str	r2, [sp, #0]
 8014bde:	460a      	mov	r2, r1
 8014be0:	68b9      	ldr	r1, [r7, #8]
 8014be2:	68f8      	ldr	r0, [r7, #12]
 8014be4:	f001 ff7e 	bl	8016ae4 <ethernet_output>
 8014be8:	4603      	mov	r3, r0
}
 8014bea:	4618      	mov	r0, r3
 8014bec:	3710      	adds	r7, #16
 8014bee:	46bd      	mov	sp, r7
 8014bf0:	bd80      	pop	{r7, pc}
 8014bf2:	bf00      	nop
 8014bf4:	2000d1a4 	.word	0x2000d1a4
 8014bf8:	0801b734 	.word	0x0801b734
 8014bfc:	0801b8a4 	.word	0x0801b8a4
 8014c00:	0801b7ac 	.word	0x0801b7ac

08014c04 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014c04:	b580      	push	{r7, lr}
 8014c06:	b08a      	sub	sp, #40	; 0x28
 8014c08:	af02      	add	r7, sp, #8
 8014c0a:	60f8      	str	r0, [r7, #12]
 8014c0c:	60b9      	str	r1, [r7, #8]
 8014c0e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d106      	bne.n	8014c28 <etharp_output+0x24>
 8014c1a:	4b73      	ldr	r3, [pc, #460]	; (8014de8 <etharp_output+0x1e4>)
 8014c1c:	f240 321e 	movw	r2, #798	; 0x31e
 8014c20:	4972      	ldr	r1, [pc, #456]	; (8014dec <etharp_output+0x1e8>)
 8014c22:	4873      	ldr	r0, [pc, #460]	; (8014df0 <etharp_output+0x1ec>)
 8014c24:	f002 f9ec 	bl	8017000 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014c28:	68bb      	ldr	r3, [r7, #8]
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d106      	bne.n	8014c3c <etharp_output+0x38>
 8014c2e:	4b6e      	ldr	r3, [pc, #440]	; (8014de8 <etharp_output+0x1e4>)
 8014c30:	f240 321f 	movw	r2, #799	; 0x31f
 8014c34:	496f      	ldr	r1, [pc, #444]	; (8014df4 <etharp_output+0x1f0>)
 8014c36:	486e      	ldr	r0, [pc, #440]	; (8014df0 <etharp_output+0x1ec>)
 8014c38:	f002 f9e2 	bl	8017000 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d106      	bne.n	8014c50 <etharp_output+0x4c>
 8014c42:	4b69      	ldr	r3, [pc, #420]	; (8014de8 <etharp_output+0x1e4>)
 8014c44:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014c48:	496b      	ldr	r1, [pc, #428]	; (8014df8 <etharp_output+0x1f4>)
 8014c4a:	4869      	ldr	r0, [pc, #420]	; (8014df0 <etharp_output+0x1ec>)
 8014c4c:	f002 f9d8 	bl	8017000 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	681b      	ldr	r3, [r3, #0]
 8014c54:	68f9      	ldr	r1, [r7, #12]
 8014c56:	4618      	mov	r0, r3
 8014c58:	f000 fef8 	bl	8015a4c <ip4_addr_isbroadcast_u32>
 8014c5c:	4603      	mov	r3, r0
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d002      	beq.n	8014c68 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014c62:	4b66      	ldr	r3, [pc, #408]	; (8014dfc <etharp_output+0x1f8>)
 8014c64:	61fb      	str	r3, [r7, #28]
 8014c66:	e0af      	b.n	8014dc8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	681b      	ldr	r3, [r3, #0]
 8014c6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014c70:	2be0      	cmp	r3, #224	; 0xe0
 8014c72:	d118      	bne.n	8014ca6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014c74:	2301      	movs	r3, #1
 8014c76:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014c78:	2300      	movs	r3, #0
 8014c7a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014c7c:	235e      	movs	r3, #94	; 0x5e
 8014c7e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	3301      	adds	r3, #1
 8014c84:	781b      	ldrb	r3, [r3, #0]
 8014c86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014c8a:	b2db      	uxtb	r3, r3
 8014c8c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	3302      	adds	r3, #2
 8014c92:	781b      	ldrb	r3, [r3, #0]
 8014c94:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	3303      	adds	r3, #3
 8014c9a:	781b      	ldrb	r3, [r3, #0]
 8014c9c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014c9e:	f107 0310 	add.w	r3, r7, #16
 8014ca2:	61fb      	str	r3, [r7, #28]
 8014ca4:	e090      	b.n	8014dc8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	681a      	ldr	r2, [r3, #0]
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	3304      	adds	r3, #4
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	405a      	eors	r2, r3
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	3308      	adds	r3, #8
 8014cb6:	681b      	ldr	r3, [r3, #0]
 8014cb8:	4013      	ands	r3, r2
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d012      	beq.n	8014ce4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	681b      	ldr	r3, [r3, #0]
 8014cc2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014cc4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8014cc8:	4293      	cmp	r3, r2
 8014cca:	d00b      	beq.n	8014ce4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	330c      	adds	r3, #12
 8014cd0:	681b      	ldr	r3, [r3, #0]
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d003      	beq.n	8014cde <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	330c      	adds	r3, #12
 8014cda:	61bb      	str	r3, [r7, #24]
 8014cdc:	e002      	b.n	8014ce4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014cde:	f06f 0303 	mvn.w	r3, #3
 8014ce2:	e07d      	b.n	8014de0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014ce4:	4b46      	ldr	r3, [pc, #280]	; (8014e00 <etharp_output+0x1fc>)
 8014ce6:	781b      	ldrb	r3, [r3, #0]
 8014ce8:	4619      	mov	r1, r3
 8014cea:	4a46      	ldr	r2, [pc, #280]	; (8014e04 <etharp_output+0x200>)
 8014cec:	460b      	mov	r3, r1
 8014cee:	005b      	lsls	r3, r3, #1
 8014cf0:	440b      	add	r3, r1
 8014cf2:	00db      	lsls	r3, r3, #3
 8014cf4:	4413      	add	r3, r2
 8014cf6:	3314      	adds	r3, #20
 8014cf8:	781b      	ldrb	r3, [r3, #0]
 8014cfa:	2b01      	cmp	r3, #1
 8014cfc:	d925      	bls.n	8014d4a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014cfe:	4b40      	ldr	r3, [pc, #256]	; (8014e00 <etharp_output+0x1fc>)
 8014d00:	781b      	ldrb	r3, [r3, #0]
 8014d02:	4619      	mov	r1, r3
 8014d04:	4a3f      	ldr	r2, [pc, #252]	; (8014e04 <etharp_output+0x200>)
 8014d06:	460b      	mov	r3, r1
 8014d08:	005b      	lsls	r3, r3, #1
 8014d0a:	440b      	add	r3, r1
 8014d0c:	00db      	lsls	r3, r3, #3
 8014d0e:	4413      	add	r3, r2
 8014d10:	3308      	adds	r3, #8
 8014d12:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014d14:	68fa      	ldr	r2, [r7, #12]
 8014d16:	429a      	cmp	r2, r3
 8014d18:	d117      	bne.n	8014d4a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014d1a:	69bb      	ldr	r3, [r7, #24]
 8014d1c:	681a      	ldr	r2, [r3, #0]
 8014d1e:	4b38      	ldr	r3, [pc, #224]	; (8014e00 <etharp_output+0x1fc>)
 8014d20:	781b      	ldrb	r3, [r3, #0]
 8014d22:	4618      	mov	r0, r3
 8014d24:	4937      	ldr	r1, [pc, #220]	; (8014e04 <etharp_output+0x200>)
 8014d26:	4603      	mov	r3, r0
 8014d28:	005b      	lsls	r3, r3, #1
 8014d2a:	4403      	add	r3, r0
 8014d2c:	00db      	lsls	r3, r3, #3
 8014d2e:	440b      	add	r3, r1
 8014d30:	3304      	adds	r3, #4
 8014d32:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014d34:	429a      	cmp	r2, r3
 8014d36:	d108      	bne.n	8014d4a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014d38:	4b31      	ldr	r3, [pc, #196]	; (8014e00 <etharp_output+0x1fc>)
 8014d3a:	781b      	ldrb	r3, [r3, #0]
 8014d3c:	461a      	mov	r2, r3
 8014d3e:	68b9      	ldr	r1, [r7, #8]
 8014d40:	68f8      	ldr	r0, [r7, #12]
 8014d42:	f7ff fec5 	bl	8014ad0 <etharp_output_to_arp_index>
 8014d46:	4603      	mov	r3, r0
 8014d48:	e04a      	b.n	8014de0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014d4a:	2300      	movs	r3, #0
 8014d4c:	75fb      	strb	r3, [r7, #23]
 8014d4e:	e031      	b.n	8014db4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014d50:	7dfa      	ldrb	r2, [r7, #23]
 8014d52:	492c      	ldr	r1, [pc, #176]	; (8014e04 <etharp_output+0x200>)
 8014d54:	4613      	mov	r3, r2
 8014d56:	005b      	lsls	r3, r3, #1
 8014d58:	4413      	add	r3, r2
 8014d5a:	00db      	lsls	r3, r3, #3
 8014d5c:	440b      	add	r3, r1
 8014d5e:	3314      	adds	r3, #20
 8014d60:	781b      	ldrb	r3, [r3, #0]
 8014d62:	2b01      	cmp	r3, #1
 8014d64:	d923      	bls.n	8014dae <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8014d66:	7dfa      	ldrb	r2, [r7, #23]
 8014d68:	4926      	ldr	r1, [pc, #152]	; (8014e04 <etharp_output+0x200>)
 8014d6a:	4613      	mov	r3, r2
 8014d6c:	005b      	lsls	r3, r3, #1
 8014d6e:	4413      	add	r3, r2
 8014d70:	00db      	lsls	r3, r3, #3
 8014d72:	440b      	add	r3, r1
 8014d74:	3308      	adds	r3, #8
 8014d76:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014d78:	68fa      	ldr	r2, [r7, #12]
 8014d7a:	429a      	cmp	r2, r3
 8014d7c:	d117      	bne.n	8014dae <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014d7e:	69bb      	ldr	r3, [r7, #24]
 8014d80:	6819      	ldr	r1, [r3, #0]
 8014d82:	7dfa      	ldrb	r2, [r7, #23]
 8014d84:	481f      	ldr	r0, [pc, #124]	; (8014e04 <etharp_output+0x200>)
 8014d86:	4613      	mov	r3, r2
 8014d88:	005b      	lsls	r3, r3, #1
 8014d8a:	4413      	add	r3, r2
 8014d8c:	00db      	lsls	r3, r3, #3
 8014d8e:	4403      	add	r3, r0
 8014d90:	3304      	adds	r3, #4
 8014d92:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014d94:	4299      	cmp	r1, r3
 8014d96:	d10a      	bne.n	8014dae <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014d98:	4a19      	ldr	r2, [pc, #100]	; (8014e00 <etharp_output+0x1fc>)
 8014d9a:	7dfb      	ldrb	r3, [r7, #23]
 8014d9c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014d9e:	7dfb      	ldrb	r3, [r7, #23]
 8014da0:	461a      	mov	r2, r3
 8014da2:	68b9      	ldr	r1, [r7, #8]
 8014da4:	68f8      	ldr	r0, [r7, #12]
 8014da6:	f7ff fe93 	bl	8014ad0 <etharp_output_to_arp_index>
 8014daa:	4603      	mov	r3, r0
 8014dac:	e018      	b.n	8014de0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014dae:	7dfb      	ldrb	r3, [r7, #23]
 8014db0:	3301      	adds	r3, #1
 8014db2:	75fb      	strb	r3, [r7, #23]
 8014db4:	7dfb      	ldrb	r3, [r7, #23]
 8014db6:	2b09      	cmp	r3, #9
 8014db8:	d9ca      	bls.n	8014d50 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014dba:	68ba      	ldr	r2, [r7, #8]
 8014dbc:	69b9      	ldr	r1, [r7, #24]
 8014dbe:	68f8      	ldr	r0, [r7, #12]
 8014dc0:	f000 f822 	bl	8014e08 <etharp_query>
 8014dc4:	4603      	mov	r3, r0
 8014dc6:	e00b      	b.n	8014de0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014dce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014dd2:	9300      	str	r3, [sp, #0]
 8014dd4:	69fb      	ldr	r3, [r7, #28]
 8014dd6:	68b9      	ldr	r1, [r7, #8]
 8014dd8:	68f8      	ldr	r0, [r7, #12]
 8014dda:	f001 fe83 	bl	8016ae4 <ethernet_output>
 8014dde:	4603      	mov	r3, r0
}
 8014de0:	4618      	mov	r0, r3
 8014de2:	3720      	adds	r7, #32
 8014de4:	46bd      	mov	sp, r7
 8014de6:	bd80      	pop	{r7, pc}
 8014de8:	0801b734 	.word	0x0801b734
 8014dec:	0801b884 	.word	0x0801b884
 8014df0:	0801b7ac 	.word	0x0801b7ac
 8014df4:	0801b8d4 	.word	0x0801b8d4
 8014df8:	0801b874 	.word	0x0801b874
 8014dfc:	0801bfdc 	.word	0x0801bfdc
 8014e00:	2000d294 	.word	0x2000d294
 8014e04:	2000d1a4 	.word	0x2000d1a4

08014e08 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014e08:	b580      	push	{r7, lr}
 8014e0a:	b08c      	sub	sp, #48	; 0x30
 8014e0c:	af02      	add	r7, sp, #8
 8014e0e:	60f8      	str	r0, [r7, #12]
 8014e10:	60b9      	str	r1, [r7, #8]
 8014e12:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	3326      	adds	r3, #38	; 0x26
 8014e18:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014e1a:	23ff      	movs	r3, #255	; 0xff
 8014e1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8014e20:	2300      	movs	r3, #0
 8014e22:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014e24:	68bb      	ldr	r3, [r7, #8]
 8014e26:	681b      	ldr	r3, [r3, #0]
 8014e28:	68f9      	ldr	r1, [r7, #12]
 8014e2a:	4618      	mov	r0, r3
 8014e2c:	f000 fe0e 	bl	8015a4c <ip4_addr_isbroadcast_u32>
 8014e30:	4603      	mov	r3, r0
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d10c      	bne.n	8014e50 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014e36:	68bb      	ldr	r3, [r7, #8]
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014e3e:	2be0      	cmp	r3, #224	; 0xe0
 8014e40:	d006      	beq.n	8014e50 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014e42:	68bb      	ldr	r3, [r7, #8]
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d003      	beq.n	8014e50 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014e48:	68bb      	ldr	r3, [r7, #8]
 8014e4a:	681b      	ldr	r3, [r3, #0]
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d102      	bne.n	8014e56 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014e50:	f06f 030f 	mvn.w	r3, #15
 8014e54:	e101      	b.n	801505a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014e56:	68fa      	ldr	r2, [r7, #12]
 8014e58:	2101      	movs	r1, #1
 8014e5a:	68b8      	ldr	r0, [r7, #8]
 8014e5c:	f7ff fb60 	bl	8014520 <etharp_find_entry>
 8014e60:	4603      	mov	r3, r0
 8014e62:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014e64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	da02      	bge.n	8014e72 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014e6c:	8a7b      	ldrh	r3, [r7, #18]
 8014e6e:	b25b      	sxtb	r3, r3
 8014e70:	e0f3      	b.n	801505a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014e72:	8a7b      	ldrh	r3, [r7, #18]
 8014e74:	2b7e      	cmp	r3, #126	; 0x7e
 8014e76:	d906      	bls.n	8014e86 <etharp_query+0x7e>
 8014e78:	4b7a      	ldr	r3, [pc, #488]	; (8015064 <etharp_query+0x25c>)
 8014e7a:	f240 32c1 	movw	r2, #961	; 0x3c1
 8014e7e:	497a      	ldr	r1, [pc, #488]	; (8015068 <etharp_query+0x260>)
 8014e80:	487a      	ldr	r0, [pc, #488]	; (801506c <etharp_query+0x264>)
 8014e82:	f002 f8bd 	bl	8017000 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8014e86:	8a7b      	ldrh	r3, [r7, #18]
 8014e88:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014e8a:	7c7a      	ldrb	r2, [r7, #17]
 8014e8c:	4978      	ldr	r1, [pc, #480]	; (8015070 <etharp_query+0x268>)
 8014e8e:	4613      	mov	r3, r2
 8014e90:	005b      	lsls	r3, r3, #1
 8014e92:	4413      	add	r3, r2
 8014e94:	00db      	lsls	r3, r3, #3
 8014e96:	440b      	add	r3, r1
 8014e98:	3314      	adds	r3, #20
 8014e9a:	781b      	ldrb	r3, [r3, #0]
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d115      	bne.n	8014ecc <etharp_query+0xc4>
    is_new_entry = 1;
 8014ea0:	2301      	movs	r3, #1
 8014ea2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014ea4:	7c7a      	ldrb	r2, [r7, #17]
 8014ea6:	4972      	ldr	r1, [pc, #456]	; (8015070 <etharp_query+0x268>)
 8014ea8:	4613      	mov	r3, r2
 8014eaa:	005b      	lsls	r3, r3, #1
 8014eac:	4413      	add	r3, r2
 8014eae:	00db      	lsls	r3, r3, #3
 8014eb0:	440b      	add	r3, r1
 8014eb2:	3314      	adds	r3, #20
 8014eb4:	2201      	movs	r2, #1
 8014eb6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014eb8:	7c7a      	ldrb	r2, [r7, #17]
 8014eba:	496d      	ldr	r1, [pc, #436]	; (8015070 <etharp_query+0x268>)
 8014ebc:	4613      	mov	r3, r2
 8014ebe:	005b      	lsls	r3, r3, #1
 8014ec0:	4413      	add	r3, r2
 8014ec2:	00db      	lsls	r3, r3, #3
 8014ec4:	440b      	add	r3, r1
 8014ec6:	3308      	adds	r3, #8
 8014ec8:	68fa      	ldr	r2, [r7, #12]
 8014eca:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014ecc:	7c7a      	ldrb	r2, [r7, #17]
 8014ece:	4968      	ldr	r1, [pc, #416]	; (8015070 <etharp_query+0x268>)
 8014ed0:	4613      	mov	r3, r2
 8014ed2:	005b      	lsls	r3, r3, #1
 8014ed4:	4413      	add	r3, r2
 8014ed6:	00db      	lsls	r3, r3, #3
 8014ed8:	440b      	add	r3, r1
 8014eda:	3314      	adds	r3, #20
 8014edc:	781b      	ldrb	r3, [r3, #0]
 8014ede:	2b01      	cmp	r3, #1
 8014ee0:	d011      	beq.n	8014f06 <etharp_query+0xfe>
 8014ee2:	7c7a      	ldrb	r2, [r7, #17]
 8014ee4:	4962      	ldr	r1, [pc, #392]	; (8015070 <etharp_query+0x268>)
 8014ee6:	4613      	mov	r3, r2
 8014ee8:	005b      	lsls	r3, r3, #1
 8014eea:	4413      	add	r3, r2
 8014eec:	00db      	lsls	r3, r3, #3
 8014eee:	440b      	add	r3, r1
 8014ef0:	3314      	adds	r3, #20
 8014ef2:	781b      	ldrb	r3, [r3, #0]
 8014ef4:	2b01      	cmp	r3, #1
 8014ef6:	d806      	bhi.n	8014f06 <etharp_query+0xfe>
 8014ef8:	4b5a      	ldr	r3, [pc, #360]	; (8015064 <etharp_query+0x25c>)
 8014efa:	f240 32cd 	movw	r2, #973	; 0x3cd
 8014efe:	495d      	ldr	r1, [pc, #372]	; (8015074 <etharp_query+0x26c>)
 8014f00:	485a      	ldr	r0, [pc, #360]	; (801506c <etharp_query+0x264>)
 8014f02:	f002 f87d 	bl	8017000 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014f06:	6a3b      	ldr	r3, [r7, #32]
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d102      	bne.n	8014f12 <etharp_query+0x10a>
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d10c      	bne.n	8014f2c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014f12:	68b9      	ldr	r1, [r7, #8]
 8014f14:	68f8      	ldr	r0, [r7, #12]
 8014f16:	f000 f963 	bl	80151e0 <etharp_request>
 8014f1a:	4603      	mov	r3, r0
 8014f1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d102      	bne.n	8014f2c <etharp_query+0x124>
      return result;
 8014f26:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014f2a:	e096      	b.n	801505a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d106      	bne.n	8014f40 <etharp_query+0x138>
 8014f32:	4b4c      	ldr	r3, [pc, #304]	; (8015064 <etharp_query+0x25c>)
 8014f34:	f240 32e1 	movw	r2, #993	; 0x3e1
 8014f38:	494f      	ldr	r1, [pc, #316]	; (8015078 <etharp_query+0x270>)
 8014f3a:	484c      	ldr	r0, [pc, #304]	; (801506c <etharp_query+0x264>)
 8014f3c:	f002 f860 	bl	8017000 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014f40:	7c7a      	ldrb	r2, [r7, #17]
 8014f42:	494b      	ldr	r1, [pc, #300]	; (8015070 <etharp_query+0x268>)
 8014f44:	4613      	mov	r3, r2
 8014f46:	005b      	lsls	r3, r3, #1
 8014f48:	4413      	add	r3, r2
 8014f4a:	00db      	lsls	r3, r3, #3
 8014f4c:	440b      	add	r3, r1
 8014f4e:	3314      	adds	r3, #20
 8014f50:	781b      	ldrb	r3, [r3, #0]
 8014f52:	2b01      	cmp	r3, #1
 8014f54:	d917      	bls.n	8014f86 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014f56:	4a49      	ldr	r2, [pc, #292]	; (801507c <etharp_query+0x274>)
 8014f58:	7c7b      	ldrb	r3, [r7, #17]
 8014f5a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014f5c:	7c7a      	ldrb	r2, [r7, #17]
 8014f5e:	4613      	mov	r3, r2
 8014f60:	005b      	lsls	r3, r3, #1
 8014f62:	4413      	add	r3, r2
 8014f64:	00db      	lsls	r3, r3, #3
 8014f66:	3308      	adds	r3, #8
 8014f68:	4a41      	ldr	r2, [pc, #260]	; (8015070 <etharp_query+0x268>)
 8014f6a:	4413      	add	r3, r2
 8014f6c:	3304      	adds	r3, #4
 8014f6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014f72:	9200      	str	r2, [sp, #0]
 8014f74:	697a      	ldr	r2, [r7, #20]
 8014f76:	6879      	ldr	r1, [r7, #4]
 8014f78:	68f8      	ldr	r0, [r7, #12]
 8014f7a:	f001 fdb3 	bl	8016ae4 <ethernet_output>
 8014f7e:	4603      	mov	r3, r0
 8014f80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014f84:	e067      	b.n	8015056 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014f86:	7c7a      	ldrb	r2, [r7, #17]
 8014f88:	4939      	ldr	r1, [pc, #228]	; (8015070 <etharp_query+0x268>)
 8014f8a:	4613      	mov	r3, r2
 8014f8c:	005b      	lsls	r3, r3, #1
 8014f8e:	4413      	add	r3, r2
 8014f90:	00db      	lsls	r3, r3, #3
 8014f92:	440b      	add	r3, r1
 8014f94:	3314      	adds	r3, #20
 8014f96:	781b      	ldrb	r3, [r3, #0]
 8014f98:	2b01      	cmp	r3, #1
 8014f9a:	d15c      	bne.n	8015056 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014f9c:	2300      	movs	r3, #0
 8014f9e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014fa4:	e01c      	b.n	8014fe0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014fa6:	69fb      	ldr	r3, [r7, #28]
 8014fa8:	895a      	ldrh	r2, [r3, #10]
 8014faa:	69fb      	ldr	r3, [r7, #28]
 8014fac:	891b      	ldrh	r3, [r3, #8]
 8014fae:	429a      	cmp	r2, r3
 8014fb0:	d10a      	bne.n	8014fc8 <etharp_query+0x1c0>
 8014fb2:	69fb      	ldr	r3, [r7, #28]
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d006      	beq.n	8014fc8 <etharp_query+0x1c0>
 8014fba:	4b2a      	ldr	r3, [pc, #168]	; (8015064 <etharp_query+0x25c>)
 8014fbc:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8014fc0:	492f      	ldr	r1, [pc, #188]	; (8015080 <etharp_query+0x278>)
 8014fc2:	482a      	ldr	r0, [pc, #168]	; (801506c <etharp_query+0x264>)
 8014fc4:	f002 f81c 	bl	8017000 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014fc8:	69fb      	ldr	r3, [r7, #28]
 8014fca:	7b1b      	ldrb	r3, [r3, #12]
 8014fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d002      	beq.n	8014fda <etharp_query+0x1d2>
        copy_needed = 1;
 8014fd4:	2301      	movs	r3, #1
 8014fd6:	61bb      	str	r3, [r7, #24]
        break;
 8014fd8:	e005      	b.n	8014fe6 <etharp_query+0x1de>
      }
      p = p->next;
 8014fda:	69fb      	ldr	r3, [r7, #28]
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014fe0:	69fb      	ldr	r3, [r7, #28]
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d1df      	bne.n	8014fa6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8014fe6:	69bb      	ldr	r3, [r7, #24]
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d007      	beq.n	8014ffc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014fec:	687a      	ldr	r2, [r7, #4]
 8014fee:	f44f 7120 	mov.w	r1, #640	; 0x280
 8014ff2:	200e      	movs	r0, #14
 8014ff4:	f7f8 fb68 	bl	800d6c8 <pbuf_clone>
 8014ff8:	61f8      	str	r0, [r7, #28]
 8014ffa:	e004      	b.n	8015006 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015000:	69f8      	ldr	r0, [r7, #28]
 8015002:	f7f8 f98f 	bl	800d324 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015006:	69fb      	ldr	r3, [r7, #28]
 8015008:	2b00      	cmp	r3, #0
 801500a:	d021      	beq.n	8015050 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801500c:	7c7a      	ldrb	r2, [r7, #17]
 801500e:	4918      	ldr	r1, [pc, #96]	; (8015070 <etharp_query+0x268>)
 8015010:	4613      	mov	r3, r2
 8015012:	005b      	lsls	r3, r3, #1
 8015014:	4413      	add	r3, r2
 8015016:	00db      	lsls	r3, r3, #3
 8015018:	440b      	add	r3, r1
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	2b00      	cmp	r3, #0
 801501e:	d00a      	beq.n	8015036 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8015020:	7c7a      	ldrb	r2, [r7, #17]
 8015022:	4913      	ldr	r1, [pc, #76]	; (8015070 <etharp_query+0x268>)
 8015024:	4613      	mov	r3, r2
 8015026:	005b      	lsls	r3, r3, #1
 8015028:	4413      	add	r3, r2
 801502a:	00db      	lsls	r3, r3, #3
 801502c:	440b      	add	r3, r1
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	4618      	mov	r0, r3
 8015032:	f7f8 f8d1 	bl	800d1d8 <pbuf_free>
      }
      arp_table[i].q = p;
 8015036:	7c7a      	ldrb	r2, [r7, #17]
 8015038:	490d      	ldr	r1, [pc, #52]	; (8015070 <etharp_query+0x268>)
 801503a:	4613      	mov	r3, r2
 801503c:	005b      	lsls	r3, r3, #1
 801503e:	4413      	add	r3, r2
 8015040:	00db      	lsls	r3, r3, #3
 8015042:	440b      	add	r3, r1
 8015044:	69fa      	ldr	r2, [r7, #28]
 8015046:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015048:	2300      	movs	r3, #0
 801504a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801504e:	e002      	b.n	8015056 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015050:	23ff      	movs	r3, #255	; 0xff
 8015052:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8015056:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801505a:	4618      	mov	r0, r3
 801505c:	3728      	adds	r7, #40	; 0x28
 801505e:	46bd      	mov	sp, r7
 8015060:	bd80      	pop	{r7, pc}
 8015062:	bf00      	nop
 8015064:	0801b734 	.word	0x0801b734
 8015068:	0801b8e0 	.word	0x0801b8e0
 801506c:	0801b7ac 	.word	0x0801b7ac
 8015070:	2000d1a4 	.word	0x2000d1a4
 8015074:	0801b8f0 	.word	0x0801b8f0
 8015078:	0801b8d4 	.word	0x0801b8d4
 801507c:	2000d294 	.word	0x2000d294
 8015080:	0801b918 	.word	0x0801b918

08015084 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015084:	b580      	push	{r7, lr}
 8015086:	b08a      	sub	sp, #40	; 0x28
 8015088:	af02      	add	r7, sp, #8
 801508a:	60f8      	str	r0, [r7, #12]
 801508c:	60b9      	str	r1, [r7, #8]
 801508e:	607a      	str	r2, [r7, #4]
 8015090:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015092:	2300      	movs	r3, #0
 8015094:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	2b00      	cmp	r3, #0
 801509a:	d106      	bne.n	80150aa <etharp_raw+0x26>
 801509c:	4b3a      	ldr	r3, [pc, #232]	; (8015188 <etharp_raw+0x104>)
 801509e:	f240 4257 	movw	r2, #1111	; 0x457
 80150a2:	493a      	ldr	r1, [pc, #232]	; (801518c <etharp_raw+0x108>)
 80150a4:	483a      	ldr	r0, [pc, #232]	; (8015190 <etharp_raw+0x10c>)
 80150a6:	f001 ffab 	bl	8017000 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80150aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80150ae:	211c      	movs	r1, #28
 80150b0:	200e      	movs	r0, #14
 80150b2:	f7f7 fd7b 	bl	800cbac <pbuf_alloc>
 80150b6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80150b8:	69bb      	ldr	r3, [r7, #24]
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d102      	bne.n	80150c4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80150be:	f04f 33ff 	mov.w	r3, #4294967295
 80150c2:	e05d      	b.n	8015180 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80150c4:	69bb      	ldr	r3, [r7, #24]
 80150c6:	895b      	ldrh	r3, [r3, #10]
 80150c8:	2b1b      	cmp	r3, #27
 80150ca:	d806      	bhi.n	80150da <etharp_raw+0x56>
 80150cc:	4b2e      	ldr	r3, [pc, #184]	; (8015188 <etharp_raw+0x104>)
 80150ce:	f240 4262 	movw	r2, #1122	; 0x462
 80150d2:	4930      	ldr	r1, [pc, #192]	; (8015194 <etharp_raw+0x110>)
 80150d4:	482e      	ldr	r0, [pc, #184]	; (8015190 <etharp_raw+0x10c>)
 80150d6:	f001 ff93 	bl	8017000 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80150da:	69bb      	ldr	r3, [r7, #24]
 80150dc:	685b      	ldr	r3, [r3, #4]
 80150de:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80150e0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80150e2:	4618      	mov	r0, r3
 80150e4:	f7f6 fc9a 	bl	800ba1c <lwip_htons>
 80150e8:	4603      	mov	r3, r0
 80150ea:	461a      	mov	r2, r3
 80150ec:	697b      	ldr	r3, [r7, #20]
 80150ee:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80150f6:	2b06      	cmp	r3, #6
 80150f8:	d006      	beq.n	8015108 <etharp_raw+0x84>
 80150fa:	4b23      	ldr	r3, [pc, #140]	; (8015188 <etharp_raw+0x104>)
 80150fc:	f240 4269 	movw	r2, #1129	; 0x469
 8015100:	4925      	ldr	r1, [pc, #148]	; (8015198 <etharp_raw+0x114>)
 8015102:	4823      	ldr	r0, [pc, #140]	; (8015190 <etharp_raw+0x10c>)
 8015104:	f001 ff7c 	bl	8017000 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015108:	697b      	ldr	r3, [r7, #20]
 801510a:	3308      	adds	r3, #8
 801510c:	2206      	movs	r2, #6
 801510e:	6839      	ldr	r1, [r7, #0]
 8015110:	4618      	mov	r0, r3
 8015112:	f001 ff45 	bl	8016fa0 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015116:	697b      	ldr	r3, [r7, #20]
 8015118:	3312      	adds	r3, #18
 801511a:	2206      	movs	r2, #6
 801511c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801511e:	4618      	mov	r0, r3
 8015120:	f001 ff3e 	bl	8016fa0 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015124:	697b      	ldr	r3, [r7, #20]
 8015126:	330e      	adds	r3, #14
 8015128:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801512a:	6812      	ldr	r2, [r2, #0]
 801512c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801512e:	697b      	ldr	r3, [r7, #20]
 8015130:	3318      	adds	r3, #24
 8015132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015134:	6812      	ldr	r2, [r2, #0]
 8015136:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015138:	697b      	ldr	r3, [r7, #20]
 801513a:	2200      	movs	r2, #0
 801513c:	701a      	strb	r2, [r3, #0]
 801513e:	2200      	movs	r2, #0
 8015140:	f042 0201 	orr.w	r2, r2, #1
 8015144:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015146:	697b      	ldr	r3, [r7, #20]
 8015148:	2200      	movs	r2, #0
 801514a:	f042 0208 	orr.w	r2, r2, #8
 801514e:	709a      	strb	r2, [r3, #2]
 8015150:	2200      	movs	r2, #0
 8015152:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015154:	697b      	ldr	r3, [r7, #20]
 8015156:	2206      	movs	r2, #6
 8015158:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801515a:	697b      	ldr	r3, [r7, #20]
 801515c:	2204      	movs	r2, #4
 801515e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015160:	f640 0306 	movw	r3, #2054	; 0x806
 8015164:	9300      	str	r3, [sp, #0]
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	68ba      	ldr	r2, [r7, #8]
 801516a:	69b9      	ldr	r1, [r7, #24]
 801516c:	68f8      	ldr	r0, [r7, #12]
 801516e:	f001 fcb9 	bl	8016ae4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015172:	69b8      	ldr	r0, [r7, #24]
 8015174:	f7f8 f830 	bl	800d1d8 <pbuf_free>
  p = NULL;
 8015178:	2300      	movs	r3, #0
 801517a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801517c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015180:	4618      	mov	r0, r3
 8015182:	3720      	adds	r7, #32
 8015184:	46bd      	mov	sp, r7
 8015186:	bd80      	pop	{r7, pc}
 8015188:	0801b734 	.word	0x0801b734
 801518c:	0801b884 	.word	0x0801b884
 8015190:	0801b7ac 	.word	0x0801b7ac
 8015194:	0801b934 	.word	0x0801b934
 8015198:	0801b968 	.word	0x0801b968

0801519c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801519c:	b580      	push	{r7, lr}
 801519e:	b088      	sub	sp, #32
 80151a0:	af04      	add	r7, sp, #16
 80151a2:	60f8      	str	r0, [r7, #12]
 80151a4:	60b9      	str	r1, [r7, #8]
 80151a6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80151a8:	68fb      	ldr	r3, [r7, #12]
 80151aa:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80151ae:	68fb      	ldr	r3, [r7, #12]
 80151b0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80151b8:	2201      	movs	r2, #1
 80151ba:	9203      	str	r2, [sp, #12]
 80151bc:	68ba      	ldr	r2, [r7, #8]
 80151be:	9202      	str	r2, [sp, #8]
 80151c0:	4a06      	ldr	r2, [pc, #24]	; (80151dc <etharp_request_dst+0x40>)
 80151c2:	9201      	str	r2, [sp, #4]
 80151c4:	9300      	str	r3, [sp, #0]
 80151c6:	4603      	mov	r3, r0
 80151c8:	687a      	ldr	r2, [r7, #4]
 80151ca:	68f8      	ldr	r0, [r7, #12]
 80151cc:	f7ff ff5a 	bl	8015084 <etharp_raw>
 80151d0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80151d2:	4618      	mov	r0, r3
 80151d4:	3710      	adds	r7, #16
 80151d6:	46bd      	mov	sp, r7
 80151d8:	bd80      	pop	{r7, pc}
 80151da:	bf00      	nop
 80151dc:	0801bfe4 	.word	0x0801bfe4

080151e0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80151e0:	b580      	push	{r7, lr}
 80151e2:	b082      	sub	sp, #8
 80151e4:	af00      	add	r7, sp, #0
 80151e6:	6078      	str	r0, [r7, #4]
 80151e8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80151ea:	4a05      	ldr	r2, [pc, #20]	; (8015200 <etharp_request+0x20>)
 80151ec:	6839      	ldr	r1, [r7, #0]
 80151ee:	6878      	ldr	r0, [r7, #4]
 80151f0:	f7ff ffd4 	bl	801519c <etharp_request_dst>
 80151f4:	4603      	mov	r3, r0
}
 80151f6:	4618      	mov	r0, r3
 80151f8:	3708      	adds	r7, #8
 80151fa:	46bd      	mov	sp, r7
 80151fc:	bd80      	pop	{r7, pc}
 80151fe:	bf00      	nop
 8015200:	0801bfdc 	.word	0x0801bfdc

08015204 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015204:	b580      	push	{r7, lr}
 8015206:	b08e      	sub	sp, #56	; 0x38
 8015208:	af04      	add	r7, sp, #16
 801520a:	6078      	str	r0, [r7, #4]
 801520c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801520e:	4b79      	ldr	r3, [pc, #484]	; (80153f4 <icmp_input+0x1f0>)
 8015210:	689b      	ldr	r3, [r3, #8]
 8015212:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015216:	781b      	ldrb	r3, [r3, #0]
 8015218:	f003 030f 	and.w	r3, r3, #15
 801521c:	b2db      	uxtb	r3, r3
 801521e:	009b      	lsls	r3, r3, #2
 8015220:	b2db      	uxtb	r3, r3
 8015222:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8015224:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015226:	2b13      	cmp	r3, #19
 8015228:	f240 80cd 	bls.w	80153c6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	895b      	ldrh	r3, [r3, #10]
 8015230:	2b03      	cmp	r3, #3
 8015232:	f240 80ca 	bls.w	80153ca <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	685b      	ldr	r3, [r3, #4]
 801523a:	781b      	ldrb	r3, [r3, #0]
 801523c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8015240:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015244:	2b00      	cmp	r3, #0
 8015246:	f000 80b7 	beq.w	80153b8 <icmp_input+0x1b4>
 801524a:	2b08      	cmp	r3, #8
 801524c:	f040 80b7 	bne.w	80153be <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8015250:	4b69      	ldr	r3, [pc, #420]	; (80153f8 <icmp_input+0x1f4>)
 8015252:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015254:	4b67      	ldr	r3, [pc, #412]	; (80153f4 <icmp_input+0x1f0>)
 8015256:	695b      	ldr	r3, [r3, #20]
 8015258:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801525c:	2be0      	cmp	r3, #224	; 0xe0
 801525e:	f000 80bb 	beq.w	80153d8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8015262:	4b64      	ldr	r3, [pc, #400]	; (80153f4 <icmp_input+0x1f0>)
 8015264:	695b      	ldr	r3, [r3, #20]
 8015266:	4a63      	ldr	r2, [pc, #396]	; (80153f4 <icmp_input+0x1f0>)
 8015268:	6812      	ldr	r2, [r2, #0]
 801526a:	4611      	mov	r1, r2
 801526c:	4618      	mov	r0, r3
 801526e:	f000 fbed 	bl	8015a4c <ip4_addr_isbroadcast_u32>
 8015272:	4603      	mov	r3, r0
 8015274:	2b00      	cmp	r3, #0
 8015276:	f040 80b1 	bne.w	80153dc <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	891b      	ldrh	r3, [r3, #8]
 801527e:	2b07      	cmp	r3, #7
 8015280:	f240 80a5 	bls.w	80153ce <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015284:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015286:	330e      	adds	r3, #14
 8015288:	4619      	mov	r1, r3
 801528a:	6878      	ldr	r0, [r7, #4]
 801528c:	f7f7 fedc 	bl	800d048 <pbuf_add_header>
 8015290:	4603      	mov	r3, r0
 8015292:	2b00      	cmp	r3, #0
 8015294:	d04b      	beq.n	801532e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	891a      	ldrh	r2, [r3, #8]
 801529a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801529c:	4413      	add	r3, r2
 801529e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	891b      	ldrh	r3, [r3, #8]
 80152a4:	8b7a      	ldrh	r2, [r7, #26]
 80152a6:	429a      	cmp	r2, r3
 80152a8:	f0c0 809a 	bcc.w	80153e0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80152ac:	8b7b      	ldrh	r3, [r7, #26]
 80152ae:	f44f 7220 	mov.w	r2, #640	; 0x280
 80152b2:	4619      	mov	r1, r3
 80152b4:	200e      	movs	r0, #14
 80152b6:	f7f7 fc79 	bl	800cbac <pbuf_alloc>
 80152ba:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80152bc:	697b      	ldr	r3, [r7, #20]
 80152be:	2b00      	cmp	r3, #0
 80152c0:	f000 8090 	beq.w	80153e4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80152c4:	697b      	ldr	r3, [r7, #20]
 80152c6:	895b      	ldrh	r3, [r3, #10]
 80152c8:	461a      	mov	r2, r3
 80152ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80152cc:	3308      	adds	r3, #8
 80152ce:	429a      	cmp	r2, r3
 80152d0:	d203      	bcs.n	80152da <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80152d2:	6978      	ldr	r0, [r7, #20]
 80152d4:	f7f7 ff80 	bl	800d1d8 <pbuf_free>
          goto icmperr;
 80152d8:	e085      	b.n	80153e6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80152da:	697b      	ldr	r3, [r7, #20]
 80152dc:	685b      	ldr	r3, [r3, #4]
 80152de:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80152e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80152e2:	4618      	mov	r0, r3
 80152e4:	f001 fe5c 	bl	8016fa0 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80152e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80152ea:	4619      	mov	r1, r3
 80152ec:	6978      	ldr	r0, [r7, #20]
 80152ee:	f7f7 febb 	bl	800d068 <pbuf_remove_header>
 80152f2:	4603      	mov	r3, r0
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	d009      	beq.n	801530c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80152f8:	4b40      	ldr	r3, [pc, #256]	; (80153fc <icmp_input+0x1f8>)
 80152fa:	22b6      	movs	r2, #182	; 0xb6
 80152fc:	4940      	ldr	r1, [pc, #256]	; (8015400 <icmp_input+0x1fc>)
 80152fe:	4841      	ldr	r0, [pc, #260]	; (8015404 <icmp_input+0x200>)
 8015300:	f001 fe7e 	bl	8017000 <iprintf>
          pbuf_free(r);
 8015304:	6978      	ldr	r0, [r7, #20]
 8015306:	f7f7 ff67 	bl	800d1d8 <pbuf_free>
          goto icmperr;
 801530a:	e06c      	b.n	80153e6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801530c:	6879      	ldr	r1, [r7, #4]
 801530e:	6978      	ldr	r0, [r7, #20]
 8015310:	f7f8 f896 	bl	800d440 <pbuf_copy>
 8015314:	4603      	mov	r3, r0
 8015316:	2b00      	cmp	r3, #0
 8015318:	d003      	beq.n	8015322 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801531a:	6978      	ldr	r0, [r7, #20]
 801531c:	f7f7 ff5c 	bl	800d1d8 <pbuf_free>
          goto icmperr;
 8015320:	e061      	b.n	80153e6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8015322:	6878      	ldr	r0, [r7, #4]
 8015324:	f7f7 ff58 	bl	800d1d8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015328:	697b      	ldr	r3, [r7, #20]
 801532a:	607b      	str	r3, [r7, #4]
 801532c:	e00f      	b.n	801534e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801532e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015330:	330e      	adds	r3, #14
 8015332:	4619      	mov	r1, r3
 8015334:	6878      	ldr	r0, [r7, #4]
 8015336:	f7f7 fe97 	bl	800d068 <pbuf_remove_header>
 801533a:	4603      	mov	r3, r0
 801533c:	2b00      	cmp	r3, #0
 801533e:	d006      	beq.n	801534e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015340:	4b2e      	ldr	r3, [pc, #184]	; (80153fc <icmp_input+0x1f8>)
 8015342:	22c7      	movs	r2, #199	; 0xc7
 8015344:	4930      	ldr	r1, [pc, #192]	; (8015408 <icmp_input+0x204>)
 8015346:	482f      	ldr	r0, [pc, #188]	; (8015404 <icmp_input+0x200>)
 8015348:	f001 fe5a 	bl	8017000 <iprintf>
          goto icmperr;
 801534c:	e04b      	b.n	80153e6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	685b      	ldr	r3, [r3, #4]
 8015352:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015354:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015356:	4619      	mov	r1, r3
 8015358:	6878      	ldr	r0, [r7, #4]
 801535a:	f7f7 fe75 	bl	800d048 <pbuf_add_header>
 801535e:	4603      	mov	r3, r0
 8015360:	2b00      	cmp	r3, #0
 8015362:	d12b      	bne.n	80153bc <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	685b      	ldr	r3, [r3, #4]
 8015368:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801536a:	69fb      	ldr	r3, [r7, #28]
 801536c:	681a      	ldr	r2, [r3, #0]
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015372:	4b20      	ldr	r3, [pc, #128]	; (80153f4 <icmp_input+0x1f0>)
 8015374:	691a      	ldr	r2, [r3, #16]
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801537a:	693b      	ldr	r3, [r7, #16]
 801537c:	2200      	movs	r2, #0
 801537e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8015380:	693b      	ldr	r3, [r7, #16]
 8015382:	2200      	movs	r2, #0
 8015384:	709a      	strb	r2, [r3, #2]
 8015386:	2200      	movs	r2, #0
 8015388:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	22ff      	movs	r2, #255	; 0xff
 801538e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	2200      	movs	r2, #0
 8015394:	729a      	strb	r2, [r3, #10]
 8015396:	2200      	movs	r2, #0
 8015398:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801539a:	683b      	ldr	r3, [r7, #0]
 801539c:	9302      	str	r3, [sp, #8]
 801539e:	2301      	movs	r3, #1
 80153a0:	9301      	str	r3, [sp, #4]
 80153a2:	2300      	movs	r3, #0
 80153a4:	9300      	str	r3, [sp, #0]
 80153a6:	23ff      	movs	r3, #255	; 0xff
 80153a8:	2200      	movs	r2, #0
 80153aa:	69f9      	ldr	r1, [r7, #28]
 80153ac:	6878      	ldr	r0, [r7, #4]
 80153ae:	f000 fa75 	bl	801589c <ip4_output_if>
 80153b2:	4603      	mov	r3, r0
 80153b4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80153b6:	e001      	b.n	80153bc <icmp_input+0x1b8>
      break;
 80153b8:	bf00      	nop
 80153ba:	e000      	b.n	80153be <icmp_input+0x1ba>
      break;
 80153bc:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80153be:	6878      	ldr	r0, [r7, #4]
 80153c0:	f7f7 ff0a 	bl	800d1d8 <pbuf_free>
  return;
 80153c4:	e013      	b.n	80153ee <icmp_input+0x1ea>
    goto lenerr;
 80153c6:	bf00      	nop
 80153c8:	e002      	b.n	80153d0 <icmp_input+0x1cc>
    goto lenerr;
 80153ca:	bf00      	nop
 80153cc:	e000      	b.n	80153d0 <icmp_input+0x1cc>
        goto lenerr;
 80153ce:	bf00      	nop
lenerr:
  pbuf_free(p);
 80153d0:	6878      	ldr	r0, [r7, #4]
 80153d2:	f7f7 ff01 	bl	800d1d8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80153d6:	e00a      	b.n	80153ee <icmp_input+0x1ea>
        goto icmperr;
 80153d8:	bf00      	nop
 80153da:	e004      	b.n	80153e6 <icmp_input+0x1e2>
        goto icmperr;
 80153dc:	bf00      	nop
 80153de:	e002      	b.n	80153e6 <icmp_input+0x1e2>
          goto icmperr;
 80153e0:	bf00      	nop
 80153e2:	e000      	b.n	80153e6 <icmp_input+0x1e2>
          goto icmperr;
 80153e4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80153e6:	6878      	ldr	r0, [r7, #4]
 80153e8:	f7f7 fef6 	bl	800d1d8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80153ec:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80153ee:	3728      	adds	r7, #40	; 0x28
 80153f0:	46bd      	mov	sp, r7
 80153f2:	bd80      	pop	{r7, pc}
 80153f4:	20007830 	.word	0x20007830
 80153f8:	20007844 	.word	0x20007844
 80153fc:	0801b9ac 	.word	0x0801b9ac
 8015400:	0801b9e4 	.word	0x0801b9e4
 8015404:	0801ba1c 	.word	0x0801ba1c
 8015408:	0801ba44 	.word	0x0801ba44

0801540c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801540c:	b580      	push	{r7, lr}
 801540e:	b082      	sub	sp, #8
 8015410:	af00      	add	r7, sp, #0
 8015412:	6078      	str	r0, [r7, #4]
 8015414:	460b      	mov	r3, r1
 8015416:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015418:	78fb      	ldrb	r3, [r7, #3]
 801541a:	461a      	mov	r2, r3
 801541c:	2103      	movs	r1, #3
 801541e:	6878      	ldr	r0, [r7, #4]
 8015420:	f000 f814 	bl	801544c <icmp_send_response>
}
 8015424:	bf00      	nop
 8015426:	3708      	adds	r7, #8
 8015428:	46bd      	mov	sp, r7
 801542a:	bd80      	pop	{r7, pc}

0801542c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801542c:	b580      	push	{r7, lr}
 801542e:	b082      	sub	sp, #8
 8015430:	af00      	add	r7, sp, #0
 8015432:	6078      	str	r0, [r7, #4]
 8015434:	460b      	mov	r3, r1
 8015436:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015438:	78fb      	ldrb	r3, [r7, #3]
 801543a:	461a      	mov	r2, r3
 801543c:	210b      	movs	r1, #11
 801543e:	6878      	ldr	r0, [r7, #4]
 8015440:	f000 f804 	bl	801544c <icmp_send_response>
}
 8015444:	bf00      	nop
 8015446:	3708      	adds	r7, #8
 8015448:	46bd      	mov	sp, r7
 801544a:	bd80      	pop	{r7, pc}

0801544c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801544c:	b580      	push	{r7, lr}
 801544e:	b08c      	sub	sp, #48	; 0x30
 8015450:	af04      	add	r7, sp, #16
 8015452:	6078      	str	r0, [r7, #4]
 8015454:	460b      	mov	r3, r1
 8015456:	70fb      	strb	r3, [r7, #3]
 8015458:	4613      	mov	r3, r2
 801545a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801545c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015460:	2124      	movs	r1, #36	; 0x24
 8015462:	2022      	movs	r0, #34	; 0x22
 8015464:	f7f7 fba2 	bl	800cbac <pbuf_alloc>
 8015468:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801546a:	69fb      	ldr	r3, [r7, #28]
 801546c:	2b00      	cmp	r3, #0
 801546e:	d04c      	beq.n	801550a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015470:	69fb      	ldr	r3, [r7, #28]
 8015472:	895b      	ldrh	r3, [r3, #10]
 8015474:	2b23      	cmp	r3, #35	; 0x23
 8015476:	d806      	bhi.n	8015486 <icmp_send_response+0x3a>
 8015478:	4b26      	ldr	r3, [pc, #152]	; (8015514 <icmp_send_response+0xc8>)
 801547a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801547e:	4926      	ldr	r1, [pc, #152]	; (8015518 <icmp_send_response+0xcc>)
 8015480:	4826      	ldr	r0, [pc, #152]	; (801551c <icmp_send_response+0xd0>)
 8015482:	f001 fdbd 	bl	8017000 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	685b      	ldr	r3, [r3, #4]
 801548a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801548c:	69fb      	ldr	r3, [r7, #28]
 801548e:	685b      	ldr	r3, [r3, #4]
 8015490:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015492:	697b      	ldr	r3, [r7, #20]
 8015494:	78fa      	ldrb	r2, [r7, #3]
 8015496:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015498:	697b      	ldr	r3, [r7, #20]
 801549a:	78ba      	ldrb	r2, [r7, #2]
 801549c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801549e:	697b      	ldr	r3, [r7, #20]
 80154a0:	2200      	movs	r2, #0
 80154a2:	711a      	strb	r2, [r3, #4]
 80154a4:	2200      	movs	r2, #0
 80154a6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80154a8:	697b      	ldr	r3, [r7, #20]
 80154aa:	2200      	movs	r2, #0
 80154ac:	719a      	strb	r2, [r3, #6]
 80154ae:	2200      	movs	r2, #0
 80154b0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80154b2:	69fb      	ldr	r3, [r7, #28]
 80154b4:	685b      	ldr	r3, [r3, #4]
 80154b6:	f103 0008 	add.w	r0, r3, #8
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	685b      	ldr	r3, [r3, #4]
 80154be:	221c      	movs	r2, #28
 80154c0:	4619      	mov	r1, r3
 80154c2:	f001 fd6d 	bl	8016fa0 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80154c6:	69bb      	ldr	r3, [r7, #24]
 80154c8:	68db      	ldr	r3, [r3, #12]
 80154ca:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80154cc:	f107 030c 	add.w	r3, r7, #12
 80154d0:	4618      	mov	r0, r3
 80154d2:	f000 f825 	bl	8015520 <ip4_route>
 80154d6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80154d8:	693b      	ldr	r3, [r7, #16]
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d011      	beq.n	8015502 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80154de:	697b      	ldr	r3, [r7, #20]
 80154e0:	2200      	movs	r2, #0
 80154e2:	709a      	strb	r2, [r3, #2]
 80154e4:	2200      	movs	r2, #0
 80154e6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80154e8:	f107 020c 	add.w	r2, r7, #12
 80154ec:	693b      	ldr	r3, [r7, #16]
 80154ee:	9302      	str	r3, [sp, #8]
 80154f0:	2301      	movs	r3, #1
 80154f2:	9301      	str	r3, [sp, #4]
 80154f4:	2300      	movs	r3, #0
 80154f6:	9300      	str	r3, [sp, #0]
 80154f8:	23ff      	movs	r3, #255	; 0xff
 80154fa:	2100      	movs	r1, #0
 80154fc:	69f8      	ldr	r0, [r7, #28]
 80154fe:	f000 f9cd 	bl	801589c <ip4_output_if>
  }
  pbuf_free(q);
 8015502:	69f8      	ldr	r0, [r7, #28]
 8015504:	f7f7 fe68 	bl	800d1d8 <pbuf_free>
 8015508:	e000      	b.n	801550c <icmp_send_response+0xc0>
    return;
 801550a:	bf00      	nop
}
 801550c:	3720      	adds	r7, #32
 801550e:	46bd      	mov	sp, r7
 8015510:	bd80      	pop	{r7, pc}
 8015512:	bf00      	nop
 8015514:	0801b9ac 	.word	0x0801b9ac
 8015518:	0801ba78 	.word	0x0801ba78
 801551c:	0801ba1c 	.word	0x0801ba1c

08015520 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015520:	b480      	push	{r7}
 8015522:	b085      	sub	sp, #20
 8015524:	af00      	add	r7, sp, #0
 8015526:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015528:	4b33      	ldr	r3, [pc, #204]	; (80155f8 <ip4_route+0xd8>)
 801552a:	681b      	ldr	r3, [r3, #0]
 801552c:	60fb      	str	r3, [r7, #12]
 801552e:	e036      	b.n	801559e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015530:	68fb      	ldr	r3, [r7, #12]
 8015532:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015536:	f003 0301 	and.w	r3, r3, #1
 801553a:	b2db      	uxtb	r3, r3
 801553c:	2b00      	cmp	r3, #0
 801553e:	d02b      	beq.n	8015598 <ip4_route+0x78>
 8015540:	68fb      	ldr	r3, [r7, #12]
 8015542:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015546:	089b      	lsrs	r3, r3, #2
 8015548:	f003 0301 	and.w	r3, r3, #1
 801554c:	b2db      	uxtb	r3, r3
 801554e:	2b00      	cmp	r3, #0
 8015550:	d022      	beq.n	8015598 <ip4_route+0x78>
 8015552:	68fb      	ldr	r3, [r7, #12]
 8015554:	3304      	adds	r3, #4
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	2b00      	cmp	r3, #0
 801555a:	d01d      	beq.n	8015598 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	681a      	ldr	r2, [r3, #0]
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	3304      	adds	r3, #4
 8015564:	681b      	ldr	r3, [r3, #0]
 8015566:	405a      	eors	r2, r3
 8015568:	68fb      	ldr	r3, [r7, #12]
 801556a:	3308      	adds	r3, #8
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	4013      	ands	r3, r2
 8015570:	2b00      	cmp	r3, #0
 8015572:	d101      	bne.n	8015578 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	e038      	b.n	80155ea <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015578:	68fb      	ldr	r3, [r7, #12]
 801557a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801557e:	f003 0302 	and.w	r3, r3, #2
 8015582:	2b00      	cmp	r3, #0
 8015584:	d108      	bne.n	8015598 <ip4_route+0x78>
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	681a      	ldr	r2, [r3, #0]
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	330c      	adds	r3, #12
 801558e:	681b      	ldr	r3, [r3, #0]
 8015590:	429a      	cmp	r2, r3
 8015592:	d101      	bne.n	8015598 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	e028      	b.n	80155ea <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015598:	68fb      	ldr	r3, [r7, #12]
 801559a:	681b      	ldr	r3, [r3, #0]
 801559c:	60fb      	str	r3, [r7, #12]
 801559e:	68fb      	ldr	r3, [r7, #12]
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d1c5      	bne.n	8015530 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80155a4:	4b15      	ldr	r3, [pc, #84]	; (80155fc <ip4_route+0xdc>)
 80155a6:	681b      	ldr	r3, [r3, #0]
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d01a      	beq.n	80155e2 <ip4_route+0xc2>
 80155ac:	4b13      	ldr	r3, [pc, #76]	; (80155fc <ip4_route+0xdc>)
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80155b4:	f003 0301 	and.w	r3, r3, #1
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d012      	beq.n	80155e2 <ip4_route+0xc2>
 80155bc:	4b0f      	ldr	r3, [pc, #60]	; (80155fc <ip4_route+0xdc>)
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80155c4:	f003 0304 	and.w	r3, r3, #4
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	d00a      	beq.n	80155e2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80155cc:	4b0b      	ldr	r3, [pc, #44]	; (80155fc <ip4_route+0xdc>)
 80155ce:	681b      	ldr	r3, [r3, #0]
 80155d0:	3304      	adds	r3, #4
 80155d2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d004      	beq.n	80155e2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	681b      	ldr	r3, [r3, #0]
 80155dc:	b2db      	uxtb	r3, r3
 80155de:	2b7f      	cmp	r3, #127	; 0x7f
 80155e0:	d101      	bne.n	80155e6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80155e2:	2300      	movs	r3, #0
 80155e4:	e001      	b.n	80155ea <ip4_route+0xca>
  }

  return netif_default;
 80155e6:	4b05      	ldr	r3, [pc, #20]	; (80155fc <ip4_route+0xdc>)
 80155e8:	681b      	ldr	r3, [r3, #0]
}
 80155ea:	4618      	mov	r0, r3
 80155ec:	3714      	adds	r7, #20
 80155ee:	46bd      	mov	sp, r7
 80155f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155f4:	4770      	bx	lr
 80155f6:	bf00      	nop
 80155f8:	2000d138 	.word	0x2000d138
 80155fc:	2000d13c 	.word	0x2000d13c

08015600 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015600:	b580      	push	{r7, lr}
 8015602:	b082      	sub	sp, #8
 8015604:	af00      	add	r7, sp, #0
 8015606:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801560e:	f003 0301 	and.w	r3, r3, #1
 8015612:	b2db      	uxtb	r3, r3
 8015614:	2b00      	cmp	r3, #0
 8015616:	d016      	beq.n	8015646 <ip4_input_accept+0x46>
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	3304      	adds	r3, #4
 801561c:	681b      	ldr	r3, [r3, #0]
 801561e:	2b00      	cmp	r3, #0
 8015620:	d011      	beq.n	8015646 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015622:	4b0b      	ldr	r3, [pc, #44]	; (8015650 <ip4_input_accept+0x50>)
 8015624:	695a      	ldr	r2, [r3, #20]
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	3304      	adds	r3, #4
 801562a:	681b      	ldr	r3, [r3, #0]
 801562c:	429a      	cmp	r2, r3
 801562e:	d008      	beq.n	8015642 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015630:	4b07      	ldr	r3, [pc, #28]	; (8015650 <ip4_input_accept+0x50>)
 8015632:	695b      	ldr	r3, [r3, #20]
 8015634:	6879      	ldr	r1, [r7, #4]
 8015636:	4618      	mov	r0, r3
 8015638:	f000 fa08 	bl	8015a4c <ip4_addr_isbroadcast_u32>
 801563c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801563e:	2b00      	cmp	r3, #0
 8015640:	d001      	beq.n	8015646 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015642:	2301      	movs	r3, #1
 8015644:	e000      	b.n	8015648 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015646:	2300      	movs	r3, #0
}
 8015648:	4618      	mov	r0, r3
 801564a:	3708      	adds	r7, #8
 801564c:	46bd      	mov	sp, r7
 801564e:	bd80      	pop	{r7, pc}
 8015650:	20007830 	.word	0x20007830

08015654 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015654:	b580      	push	{r7, lr}
 8015656:	b086      	sub	sp, #24
 8015658:	af00      	add	r7, sp, #0
 801565a:	6078      	str	r0, [r7, #4]
 801565c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	685b      	ldr	r3, [r3, #4]
 8015662:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8015664:	697b      	ldr	r3, [r7, #20]
 8015666:	781b      	ldrb	r3, [r3, #0]
 8015668:	091b      	lsrs	r3, r3, #4
 801566a:	b2db      	uxtb	r3, r3
 801566c:	2b04      	cmp	r3, #4
 801566e:	d004      	beq.n	801567a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015670:	6878      	ldr	r0, [r7, #4]
 8015672:	f7f7 fdb1 	bl	800d1d8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015676:	2300      	movs	r3, #0
 8015678:	e107      	b.n	801588a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801567a:	697b      	ldr	r3, [r7, #20]
 801567c:	781b      	ldrb	r3, [r3, #0]
 801567e:	f003 030f 	and.w	r3, r3, #15
 8015682:	b2db      	uxtb	r3, r3
 8015684:	009b      	lsls	r3, r3, #2
 8015686:	b2db      	uxtb	r3, r3
 8015688:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801568a:	697b      	ldr	r3, [r7, #20]
 801568c:	885b      	ldrh	r3, [r3, #2]
 801568e:	b29b      	uxth	r3, r3
 8015690:	4618      	mov	r0, r3
 8015692:	f7f6 f9c3 	bl	800ba1c <lwip_htons>
 8015696:	4603      	mov	r3, r0
 8015698:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	891b      	ldrh	r3, [r3, #8]
 801569e:	89ba      	ldrh	r2, [r7, #12]
 80156a0:	429a      	cmp	r2, r3
 80156a2:	d204      	bcs.n	80156ae <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80156a4:	89bb      	ldrh	r3, [r7, #12]
 80156a6:	4619      	mov	r1, r3
 80156a8:	6878      	ldr	r0, [r7, #4]
 80156aa:	f7f7 fbdd 	bl	800ce68 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	895b      	ldrh	r3, [r3, #10]
 80156b2:	89fa      	ldrh	r2, [r7, #14]
 80156b4:	429a      	cmp	r2, r3
 80156b6:	d807      	bhi.n	80156c8 <ip4_input+0x74>
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	891b      	ldrh	r3, [r3, #8]
 80156bc:	89ba      	ldrh	r2, [r7, #12]
 80156be:	429a      	cmp	r2, r3
 80156c0:	d802      	bhi.n	80156c8 <ip4_input+0x74>
 80156c2:	89fb      	ldrh	r3, [r7, #14]
 80156c4:	2b13      	cmp	r3, #19
 80156c6:	d804      	bhi.n	80156d2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80156c8:	6878      	ldr	r0, [r7, #4]
 80156ca:	f7f7 fd85 	bl	800d1d8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80156ce:	2300      	movs	r3, #0
 80156d0:	e0db      	b.n	801588a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80156d2:	697b      	ldr	r3, [r7, #20]
 80156d4:	691b      	ldr	r3, [r3, #16]
 80156d6:	4a6f      	ldr	r2, [pc, #444]	; (8015894 <ip4_input+0x240>)
 80156d8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80156da:	697b      	ldr	r3, [r7, #20]
 80156dc:	68db      	ldr	r3, [r3, #12]
 80156de:	4a6d      	ldr	r2, [pc, #436]	; (8015894 <ip4_input+0x240>)
 80156e0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80156e2:	4b6c      	ldr	r3, [pc, #432]	; (8015894 <ip4_input+0x240>)
 80156e4:	695b      	ldr	r3, [r3, #20]
 80156e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80156ea:	2be0      	cmp	r3, #224	; 0xe0
 80156ec:	d112      	bne.n	8015714 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80156ee:	683b      	ldr	r3, [r7, #0]
 80156f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80156f4:	f003 0301 	and.w	r3, r3, #1
 80156f8:	b2db      	uxtb	r3, r3
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d007      	beq.n	801570e <ip4_input+0xba>
 80156fe:	683b      	ldr	r3, [r7, #0]
 8015700:	3304      	adds	r3, #4
 8015702:	681b      	ldr	r3, [r3, #0]
 8015704:	2b00      	cmp	r3, #0
 8015706:	d002      	beq.n	801570e <ip4_input+0xba>
      netif = inp;
 8015708:	683b      	ldr	r3, [r7, #0]
 801570a:	613b      	str	r3, [r7, #16]
 801570c:	e02a      	b.n	8015764 <ip4_input+0x110>
    } else {
      netif = NULL;
 801570e:	2300      	movs	r3, #0
 8015710:	613b      	str	r3, [r7, #16]
 8015712:	e027      	b.n	8015764 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015714:	6838      	ldr	r0, [r7, #0]
 8015716:	f7ff ff73 	bl	8015600 <ip4_input_accept>
 801571a:	4603      	mov	r3, r0
 801571c:	2b00      	cmp	r3, #0
 801571e:	d002      	beq.n	8015726 <ip4_input+0xd2>
      netif = inp;
 8015720:	683b      	ldr	r3, [r7, #0]
 8015722:	613b      	str	r3, [r7, #16]
 8015724:	e01e      	b.n	8015764 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015726:	2300      	movs	r3, #0
 8015728:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801572a:	4b5a      	ldr	r3, [pc, #360]	; (8015894 <ip4_input+0x240>)
 801572c:	695b      	ldr	r3, [r3, #20]
 801572e:	b2db      	uxtb	r3, r3
 8015730:	2b7f      	cmp	r3, #127	; 0x7f
 8015732:	d017      	beq.n	8015764 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015734:	4b58      	ldr	r3, [pc, #352]	; (8015898 <ip4_input+0x244>)
 8015736:	681b      	ldr	r3, [r3, #0]
 8015738:	613b      	str	r3, [r7, #16]
 801573a:	e00e      	b.n	801575a <ip4_input+0x106>
          if (netif == inp) {
 801573c:	693a      	ldr	r2, [r7, #16]
 801573e:	683b      	ldr	r3, [r7, #0]
 8015740:	429a      	cmp	r2, r3
 8015742:	d006      	beq.n	8015752 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015744:	6938      	ldr	r0, [r7, #16]
 8015746:	f7ff ff5b 	bl	8015600 <ip4_input_accept>
 801574a:	4603      	mov	r3, r0
 801574c:	2b00      	cmp	r3, #0
 801574e:	d108      	bne.n	8015762 <ip4_input+0x10e>
 8015750:	e000      	b.n	8015754 <ip4_input+0x100>
            continue;
 8015752:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015754:	693b      	ldr	r3, [r7, #16]
 8015756:	681b      	ldr	r3, [r3, #0]
 8015758:	613b      	str	r3, [r7, #16]
 801575a:	693b      	ldr	r3, [r7, #16]
 801575c:	2b00      	cmp	r3, #0
 801575e:	d1ed      	bne.n	801573c <ip4_input+0xe8>
 8015760:	e000      	b.n	8015764 <ip4_input+0x110>
            break;
 8015762:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015764:	4b4b      	ldr	r3, [pc, #300]	; (8015894 <ip4_input+0x240>)
 8015766:	691b      	ldr	r3, [r3, #16]
 8015768:	6839      	ldr	r1, [r7, #0]
 801576a:	4618      	mov	r0, r3
 801576c:	f000 f96e 	bl	8015a4c <ip4_addr_isbroadcast_u32>
 8015770:	4603      	mov	r3, r0
 8015772:	2b00      	cmp	r3, #0
 8015774:	d105      	bne.n	8015782 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015776:	4b47      	ldr	r3, [pc, #284]	; (8015894 <ip4_input+0x240>)
 8015778:	691b      	ldr	r3, [r3, #16]
 801577a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801577e:	2be0      	cmp	r3, #224	; 0xe0
 8015780:	d104      	bne.n	801578c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015782:	6878      	ldr	r0, [r7, #4]
 8015784:	f7f7 fd28 	bl	800d1d8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015788:	2300      	movs	r3, #0
 801578a:	e07e      	b.n	801588a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801578c:	693b      	ldr	r3, [r7, #16]
 801578e:	2b00      	cmp	r3, #0
 8015790:	d104      	bne.n	801579c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015792:	6878      	ldr	r0, [r7, #4]
 8015794:	f7f7 fd20 	bl	800d1d8 <pbuf_free>
    return ERR_OK;
 8015798:	2300      	movs	r3, #0
 801579a:	e076      	b.n	801588a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801579c:	697b      	ldr	r3, [r7, #20]
 801579e:	88db      	ldrh	r3, [r3, #6]
 80157a0:	b29b      	uxth	r3, r3
 80157a2:	461a      	mov	r2, r3
 80157a4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80157a8:	4013      	ands	r3, r2
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d00b      	beq.n	80157c6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80157ae:	6878      	ldr	r0, [r7, #4]
 80157b0:	f000 fdd0 	bl	8016354 <ip4_reass>
 80157b4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d101      	bne.n	80157c0 <ip4_input+0x16c>
      return ERR_OK;
 80157bc:	2300      	movs	r3, #0
 80157be:	e064      	b.n	801588a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	685b      	ldr	r3, [r3, #4]
 80157c4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80157c6:	4a33      	ldr	r2, [pc, #204]	; (8015894 <ip4_input+0x240>)
 80157c8:	693b      	ldr	r3, [r7, #16]
 80157ca:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80157cc:	4a31      	ldr	r2, [pc, #196]	; (8015894 <ip4_input+0x240>)
 80157ce:	683b      	ldr	r3, [r7, #0]
 80157d0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80157d2:	4a30      	ldr	r2, [pc, #192]	; (8015894 <ip4_input+0x240>)
 80157d4:	697b      	ldr	r3, [r7, #20]
 80157d6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80157d8:	697b      	ldr	r3, [r7, #20]
 80157da:	781b      	ldrb	r3, [r3, #0]
 80157dc:	f003 030f 	and.w	r3, r3, #15
 80157e0:	b2db      	uxtb	r3, r3
 80157e2:	009b      	lsls	r3, r3, #2
 80157e4:	b2db      	uxtb	r3, r3
 80157e6:	b29a      	uxth	r2, r3
 80157e8:	4b2a      	ldr	r3, [pc, #168]	; (8015894 <ip4_input+0x240>)
 80157ea:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80157ec:	89fb      	ldrh	r3, [r7, #14]
 80157ee:	4619      	mov	r1, r3
 80157f0:	6878      	ldr	r0, [r7, #4]
 80157f2:	f7f7 fc39 	bl	800d068 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80157f6:	697b      	ldr	r3, [r7, #20]
 80157f8:	7a5b      	ldrb	r3, [r3, #9]
 80157fa:	2b11      	cmp	r3, #17
 80157fc:	d006      	beq.n	801580c <ip4_input+0x1b8>
 80157fe:	2b11      	cmp	r3, #17
 8015800:	dc13      	bgt.n	801582a <ip4_input+0x1d6>
 8015802:	2b01      	cmp	r3, #1
 8015804:	d00c      	beq.n	8015820 <ip4_input+0x1cc>
 8015806:	2b06      	cmp	r3, #6
 8015808:	d005      	beq.n	8015816 <ip4_input+0x1c2>
 801580a:	e00e      	b.n	801582a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801580c:	6839      	ldr	r1, [r7, #0]
 801580e:	6878      	ldr	r0, [r7, #4]
 8015810:	f7fe f970 	bl	8013af4 <udp_input>
        break;
 8015814:	e026      	b.n	8015864 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015816:	6839      	ldr	r1, [r7, #0]
 8015818:	6878      	ldr	r0, [r7, #4]
 801581a:	f7f9 fd29 	bl	800f270 <tcp_input>
        break;
 801581e:	e021      	b.n	8015864 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015820:	6839      	ldr	r1, [r7, #0]
 8015822:	6878      	ldr	r0, [r7, #4]
 8015824:	f7ff fcee 	bl	8015204 <icmp_input>
        break;
 8015828:	e01c      	b.n	8015864 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801582a:	4b1a      	ldr	r3, [pc, #104]	; (8015894 <ip4_input+0x240>)
 801582c:	695b      	ldr	r3, [r3, #20]
 801582e:	6939      	ldr	r1, [r7, #16]
 8015830:	4618      	mov	r0, r3
 8015832:	f000 f90b 	bl	8015a4c <ip4_addr_isbroadcast_u32>
 8015836:	4603      	mov	r3, r0
 8015838:	2b00      	cmp	r3, #0
 801583a:	d10f      	bne.n	801585c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801583c:	4b15      	ldr	r3, [pc, #84]	; (8015894 <ip4_input+0x240>)
 801583e:	695b      	ldr	r3, [r3, #20]
 8015840:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015844:	2be0      	cmp	r3, #224	; 0xe0
 8015846:	d009      	beq.n	801585c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015848:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801584c:	4619      	mov	r1, r3
 801584e:	6878      	ldr	r0, [r7, #4]
 8015850:	f7f7 fc7d 	bl	800d14e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015854:	2102      	movs	r1, #2
 8015856:	6878      	ldr	r0, [r7, #4]
 8015858:	f7ff fdd8 	bl	801540c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801585c:	6878      	ldr	r0, [r7, #4]
 801585e:	f7f7 fcbb 	bl	800d1d8 <pbuf_free>
        break;
 8015862:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015864:	4b0b      	ldr	r3, [pc, #44]	; (8015894 <ip4_input+0x240>)
 8015866:	2200      	movs	r2, #0
 8015868:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801586a:	4b0a      	ldr	r3, [pc, #40]	; (8015894 <ip4_input+0x240>)
 801586c:	2200      	movs	r2, #0
 801586e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015870:	4b08      	ldr	r3, [pc, #32]	; (8015894 <ip4_input+0x240>)
 8015872:	2200      	movs	r2, #0
 8015874:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015876:	4b07      	ldr	r3, [pc, #28]	; (8015894 <ip4_input+0x240>)
 8015878:	2200      	movs	r2, #0
 801587a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801587c:	4b05      	ldr	r3, [pc, #20]	; (8015894 <ip4_input+0x240>)
 801587e:	2200      	movs	r2, #0
 8015880:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015882:	4b04      	ldr	r3, [pc, #16]	; (8015894 <ip4_input+0x240>)
 8015884:	2200      	movs	r2, #0
 8015886:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015888:	2300      	movs	r3, #0
}
 801588a:	4618      	mov	r0, r3
 801588c:	3718      	adds	r7, #24
 801588e:	46bd      	mov	sp, r7
 8015890:	bd80      	pop	{r7, pc}
 8015892:	bf00      	nop
 8015894:	20007830 	.word	0x20007830
 8015898:	2000d138 	.word	0x2000d138

0801589c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801589c:	b580      	push	{r7, lr}
 801589e:	b08a      	sub	sp, #40	; 0x28
 80158a0:	af04      	add	r7, sp, #16
 80158a2:	60f8      	str	r0, [r7, #12]
 80158a4:	60b9      	str	r1, [r7, #8]
 80158a6:	607a      	str	r2, [r7, #4]
 80158a8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80158aa:	68bb      	ldr	r3, [r7, #8]
 80158ac:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d009      	beq.n	80158c8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80158b4:	68bb      	ldr	r3, [r7, #8]
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d003      	beq.n	80158c2 <ip4_output_if+0x26>
 80158ba:	68bb      	ldr	r3, [r7, #8]
 80158bc:	681b      	ldr	r3, [r3, #0]
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d102      	bne.n	80158c8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80158c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158c4:	3304      	adds	r3, #4
 80158c6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80158c8:	78fa      	ldrb	r2, [r7, #3]
 80158ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158cc:	9302      	str	r3, [sp, #8]
 80158ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80158d2:	9301      	str	r3, [sp, #4]
 80158d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80158d8:	9300      	str	r3, [sp, #0]
 80158da:	4613      	mov	r3, r2
 80158dc:	687a      	ldr	r2, [r7, #4]
 80158de:	6979      	ldr	r1, [r7, #20]
 80158e0:	68f8      	ldr	r0, [r7, #12]
 80158e2:	f000 f805 	bl	80158f0 <ip4_output_if_src>
 80158e6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80158e8:	4618      	mov	r0, r3
 80158ea:	3718      	adds	r7, #24
 80158ec:	46bd      	mov	sp, r7
 80158ee:	bd80      	pop	{r7, pc}

080158f0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80158f0:	b580      	push	{r7, lr}
 80158f2:	b088      	sub	sp, #32
 80158f4:	af00      	add	r7, sp, #0
 80158f6:	60f8      	str	r0, [r7, #12]
 80158f8:	60b9      	str	r1, [r7, #8]
 80158fa:	607a      	str	r2, [r7, #4]
 80158fc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80158fe:	68fb      	ldr	r3, [r7, #12]
 8015900:	7b9b      	ldrb	r3, [r3, #14]
 8015902:	2b01      	cmp	r3, #1
 8015904:	d006      	beq.n	8015914 <ip4_output_if_src+0x24>
 8015906:	4b4b      	ldr	r3, [pc, #300]	; (8015a34 <ip4_output_if_src+0x144>)
 8015908:	f44f 7255 	mov.w	r2, #852	; 0x354
 801590c:	494a      	ldr	r1, [pc, #296]	; (8015a38 <ip4_output_if_src+0x148>)
 801590e:	484b      	ldr	r0, [pc, #300]	; (8015a3c <ip4_output_if_src+0x14c>)
 8015910:	f001 fb76 	bl	8017000 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	2b00      	cmp	r3, #0
 8015918:	d060      	beq.n	80159dc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801591a:	2314      	movs	r3, #20
 801591c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801591e:	2114      	movs	r1, #20
 8015920:	68f8      	ldr	r0, [r7, #12]
 8015922:	f7f7 fb91 	bl	800d048 <pbuf_add_header>
 8015926:	4603      	mov	r3, r0
 8015928:	2b00      	cmp	r3, #0
 801592a:	d002      	beq.n	8015932 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801592c:	f06f 0301 	mvn.w	r3, #1
 8015930:	e07c      	b.n	8015a2c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015932:	68fb      	ldr	r3, [r7, #12]
 8015934:	685b      	ldr	r3, [r3, #4]
 8015936:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	895b      	ldrh	r3, [r3, #10]
 801593c:	2b13      	cmp	r3, #19
 801593e:	d806      	bhi.n	801594e <ip4_output_if_src+0x5e>
 8015940:	4b3c      	ldr	r3, [pc, #240]	; (8015a34 <ip4_output_if_src+0x144>)
 8015942:	f44f 7262 	mov.w	r2, #904	; 0x388
 8015946:	493e      	ldr	r1, [pc, #248]	; (8015a40 <ip4_output_if_src+0x150>)
 8015948:	483c      	ldr	r0, [pc, #240]	; (8015a3c <ip4_output_if_src+0x14c>)
 801594a:	f001 fb59 	bl	8017000 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801594e:	69fb      	ldr	r3, [r7, #28]
 8015950:	78fa      	ldrb	r2, [r7, #3]
 8015952:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015954:	69fb      	ldr	r3, [r7, #28]
 8015956:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801595a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	681a      	ldr	r2, [r3, #0]
 8015960:	69fb      	ldr	r3, [r7, #28]
 8015962:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015964:	8b7b      	ldrh	r3, [r7, #26]
 8015966:	089b      	lsrs	r3, r3, #2
 8015968:	b29b      	uxth	r3, r3
 801596a:	b2db      	uxtb	r3, r3
 801596c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015970:	b2da      	uxtb	r2, r3
 8015972:	69fb      	ldr	r3, [r7, #28]
 8015974:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015976:	69fb      	ldr	r3, [r7, #28]
 8015978:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801597c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801597e:	68fb      	ldr	r3, [r7, #12]
 8015980:	891b      	ldrh	r3, [r3, #8]
 8015982:	4618      	mov	r0, r3
 8015984:	f7f6 f84a 	bl	800ba1c <lwip_htons>
 8015988:	4603      	mov	r3, r0
 801598a:	461a      	mov	r2, r3
 801598c:	69fb      	ldr	r3, [r7, #28]
 801598e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015990:	69fb      	ldr	r3, [r7, #28]
 8015992:	2200      	movs	r2, #0
 8015994:	719a      	strb	r2, [r3, #6]
 8015996:	2200      	movs	r2, #0
 8015998:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801599a:	4b2a      	ldr	r3, [pc, #168]	; (8015a44 <ip4_output_if_src+0x154>)
 801599c:	881b      	ldrh	r3, [r3, #0]
 801599e:	4618      	mov	r0, r3
 80159a0:	f7f6 f83c 	bl	800ba1c <lwip_htons>
 80159a4:	4603      	mov	r3, r0
 80159a6:	461a      	mov	r2, r3
 80159a8:	69fb      	ldr	r3, [r7, #28]
 80159aa:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80159ac:	4b25      	ldr	r3, [pc, #148]	; (8015a44 <ip4_output_if_src+0x154>)
 80159ae:	881b      	ldrh	r3, [r3, #0]
 80159b0:	3301      	adds	r3, #1
 80159b2:	b29a      	uxth	r2, r3
 80159b4:	4b23      	ldr	r3, [pc, #140]	; (8015a44 <ip4_output_if_src+0x154>)
 80159b6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80159b8:	68bb      	ldr	r3, [r7, #8]
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d104      	bne.n	80159c8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80159be:	4b22      	ldr	r3, [pc, #136]	; (8015a48 <ip4_output_if_src+0x158>)
 80159c0:	681a      	ldr	r2, [r3, #0]
 80159c2:	69fb      	ldr	r3, [r7, #28]
 80159c4:	60da      	str	r2, [r3, #12]
 80159c6:	e003      	b.n	80159d0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80159c8:	68bb      	ldr	r3, [r7, #8]
 80159ca:	681a      	ldr	r2, [r3, #0]
 80159cc:	69fb      	ldr	r3, [r7, #28]
 80159ce:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80159d0:	69fb      	ldr	r3, [r7, #28]
 80159d2:	2200      	movs	r2, #0
 80159d4:	729a      	strb	r2, [r3, #10]
 80159d6:	2200      	movs	r2, #0
 80159d8:	72da      	strb	r2, [r3, #11]
 80159da:	e00f      	b.n	80159fc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80159dc:	68fb      	ldr	r3, [r7, #12]
 80159de:	895b      	ldrh	r3, [r3, #10]
 80159e0:	2b13      	cmp	r3, #19
 80159e2:	d802      	bhi.n	80159ea <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80159e4:	f06f 0301 	mvn.w	r3, #1
 80159e8:	e020      	b.n	8015a2c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80159ea:	68fb      	ldr	r3, [r7, #12]
 80159ec:	685b      	ldr	r3, [r3, #4]
 80159ee:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80159f0:	69fb      	ldr	r3, [r7, #28]
 80159f2:	691b      	ldr	r3, [r3, #16]
 80159f4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80159f6:	f107 0314 	add.w	r3, r7, #20
 80159fa:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80159fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d00c      	beq.n	8015a1e <ip4_output_if_src+0x12e>
 8015a04:	68fb      	ldr	r3, [r7, #12]
 8015a06:	891a      	ldrh	r2, [r3, #8]
 8015a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a0a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015a0c:	429a      	cmp	r2, r3
 8015a0e:	d906      	bls.n	8015a1e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8015a10:	687a      	ldr	r2, [r7, #4]
 8015a12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015a14:	68f8      	ldr	r0, [r7, #12]
 8015a16:	f000 fe91 	bl	801673c <ip4_frag>
 8015a1a:	4603      	mov	r3, r0
 8015a1c:	e006      	b.n	8015a2c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a20:	695b      	ldr	r3, [r3, #20]
 8015a22:	687a      	ldr	r2, [r7, #4]
 8015a24:	68f9      	ldr	r1, [r7, #12]
 8015a26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015a28:	4798      	blx	r3
 8015a2a:	4603      	mov	r3, r0
}
 8015a2c:	4618      	mov	r0, r3
 8015a2e:	3720      	adds	r7, #32
 8015a30:	46bd      	mov	sp, r7
 8015a32:	bd80      	pop	{r7, pc}
 8015a34:	0801baa4 	.word	0x0801baa4
 8015a38:	0801bad8 	.word	0x0801bad8
 8015a3c:	0801bae4 	.word	0x0801bae4
 8015a40:	0801bb0c 	.word	0x0801bb0c
 8015a44:	2000d296 	.word	0x2000d296
 8015a48:	0801bfd8 	.word	0x0801bfd8

08015a4c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015a4c:	b480      	push	{r7}
 8015a4e:	b085      	sub	sp, #20
 8015a50:	af00      	add	r7, sp, #0
 8015a52:	6078      	str	r0, [r7, #4]
 8015a54:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a60:	d002      	beq.n	8015a68 <ip4_addr_isbroadcast_u32+0x1c>
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	d101      	bne.n	8015a6c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015a68:	2301      	movs	r3, #1
 8015a6a:	e02a      	b.n	8015ac2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015a6c:	683b      	ldr	r3, [r7, #0]
 8015a6e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015a72:	f003 0302 	and.w	r3, r3, #2
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d101      	bne.n	8015a7e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015a7a:	2300      	movs	r3, #0
 8015a7c:	e021      	b.n	8015ac2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015a7e:	683b      	ldr	r3, [r7, #0]
 8015a80:	3304      	adds	r3, #4
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	687a      	ldr	r2, [r7, #4]
 8015a86:	429a      	cmp	r2, r3
 8015a88:	d101      	bne.n	8015a8e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015a8a:	2300      	movs	r3, #0
 8015a8c:	e019      	b.n	8015ac2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015a8e:	68fa      	ldr	r2, [r7, #12]
 8015a90:	683b      	ldr	r3, [r7, #0]
 8015a92:	3304      	adds	r3, #4
 8015a94:	681b      	ldr	r3, [r3, #0]
 8015a96:	405a      	eors	r2, r3
 8015a98:	683b      	ldr	r3, [r7, #0]
 8015a9a:	3308      	adds	r3, #8
 8015a9c:	681b      	ldr	r3, [r3, #0]
 8015a9e:	4013      	ands	r3, r2
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d10d      	bne.n	8015ac0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015aa4:	683b      	ldr	r3, [r7, #0]
 8015aa6:	3308      	adds	r3, #8
 8015aa8:	681b      	ldr	r3, [r3, #0]
 8015aaa:	43da      	mvns	r2, r3
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015ab0:	683b      	ldr	r3, [r7, #0]
 8015ab2:	3308      	adds	r3, #8
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015ab8:	429a      	cmp	r2, r3
 8015aba:	d101      	bne.n	8015ac0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015abc:	2301      	movs	r3, #1
 8015abe:	e000      	b.n	8015ac2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015ac0:	2300      	movs	r3, #0
  }
}
 8015ac2:	4618      	mov	r0, r3
 8015ac4:	3714      	adds	r7, #20
 8015ac6:	46bd      	mov	sp, r7
 8015ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015acc:	4770      	bx	lr

08015ace <ipaddr_addr>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
 8015ace:	b580      	push	{r7, lr}
 8015ad0:	b084      	sub	sp, #16
 8015ad2:	af00      	add	r7, sp, #0
 8015ad4:	6078      	str	r0, [r7, #4]
  ip4_addr_t val;

  if (ip4addr_aton(cp, &val)) {
 8015ad6:	f107 030c 	add.w	r3, r7, #12
 8015ada:	4619      	mov	r1, r3
 8015adc:	6878      	ldr	r0, [r7, #4]
 8015ade:	f000 f80b 	bl	8015af8 <ip4addr_aton>
 8015ae2:	4603      	mov	r3, r0
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d001      	beq.n	8015aec <ipaddr_addr+0x1e>
    return ip4_addr_get_u32(&val);
 8015ae8:	68fb      	ldr	r3, [r7, #12]
 8015aea:	e001      	b.n	8015af0 <ipaddr_addr+0x22>
  }
  return (IPADDR_NONE);
 8015aec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015af0:	4618      	mov	r0, r3
 8015af2:	3710      	adds	r7, #16
 8015af4:	46bd      	mov	sp, r7
 8015af6:	bd80      	pop	{r7, pc}

08015af8 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8015af8:	b580      	push	{r7, lr}
 8015afa:	b08a      	sub	sp, #40	; 0x28
 8015afc:	af00      	add	r7, sp, #0
 8015afe:	6078      	str	r0, [r7, #4]
 8015b00:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 8015b02:	f107 030c 	add.w	r3, r7, #12
 8015b06:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	781b      	ldrb	r3, [r3, #0]
 8015b0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8015b10:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015b14:	3301      	adds	r3, #1
 8015b16:	4a89      	ldr	r2, [pc, #548]	; (8015d3c <ip4addr_aton+0x244>)
 8015b18:	4413      	add	r3, r2
 8015b1a:	781b      	ldrb	r3, [r3, #0]
 8015b1c:	f003 0304 	and.w	r3, r3, #4
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d101      	bne.n	8015b28 <ip4addr_aton+0x30>
      return 0;
 8015b24:	2300      	movs	r3, #0
 8015b26:	e105      	b.n	8015d34 <ip4addr_aton+0x23c>
    }
    val = 0;
 8015b28:	2300      	movs	r3, #0
 8015b2a:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 8015b2c:	230a      	movs	r3, #10
 8015b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 8015b32:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015b36:	2b30      	cmp	r3, #48	; 0x30
 8015b38:	d11c      	bne.n	8015b74 <ip4addr_aton+0x7c>
      c = *++cp;
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	3301      	adds	r3, #1
 8015b3e:	607b      	str	r3, [r7, #4]
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	781b      	ldrb	r3, [r3, #0]
 8015b44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 8015b48:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015b4c:	2b78      	cmp	r3, #120	; 0x78
 8015b4e:	d003      	beq.n	8015b58 <ip4addr_aton+0x60>
 8015b50:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015b54:	2b58      	cmp	r3, #88	; 0x58
 8015b56:	d10a      	bne.n	8015b6e <ip4addr_aton+0x76>
        base = 16;
 8015b58:	2310      	movs	r3, #16
 8015b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	3301      	adds	r3, #1
 8015b62:	607b      	str	r3, [r7, #4]
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	781b      	ldrb	r3, [r3, #0]
 8015b68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8015b6c:	e002      	b.n	8015b74 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 8015b6e:	2308      	movs	r3, #8
 8015b70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 8015b74:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015b78:	3301      	adds	r3, #1
 8015b7a:	4a70      	ldr	r2, [pc, #448]	; (8015d3c <ip4addr_aton+0x244>)
 8015b7c:	4413      	add	r3, r2
 8015b7e:	781b      	ldrb	r3, [r3, #0]
 8015b80:	f003 0304 	and.w	r3, r3, #4
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d011      	beq.n	8015bac <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 8015b88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015b8e:	fb03 f202 	mul.w	r2, r3, r2
 8015b92:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015b96:	4413      	add	r3, r2
 8015b98:	3b30      	subs	r3, #48	; 0x30
 8015b9a:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	3301      	adds	r3, #1
 8015ba0:	607b      	str	r3, [r7, #4]
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	781b      	ldrb	r3, [r3, #0]
 8015ba6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8015baa:	e7e3      	b.n	8015b74 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8015bac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015bb0:	2b10      	cmp	r3, #16
 8015bb2:	d127      	bne.n	8015c04 <ip4addr_aton+0x10c>
 8015bb4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015bb8:	3301      	adds	r3, #1
 8015bba:	4a60      	ldr	r2, [pc, #384]	; (8015d3c <ip4addr_aton+0x244>)
 8015bbc:	4413      	add	r3, r2
 8015bbe:	781b      	ldrb	r3, [r3, #0]
 8015bc0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	d01d      	beq.n	8015c04 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8015bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bca:	011b      	lsls	r3, r3, #4
 8015bcc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015bd0:	f102 010a 	add.w	r1, r2, #10
 8015bd4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015bd8:	3201      	adds	r2, #1
 8015bda:	4858      	ldr	r0, [pc, #352]	; (8015d3c <ip4addr_aton+0x244>)
 8015bdc:	4402      	add	r2, r0
 8015bde:	7812      	ldrb	r2, [r2, #0]
 8015be0:	f002 0203 	and.w	r2, r2, #3
 8015be4:	2a02      	cmp	r2, #2
 8015be6:	d101      	bne.n	8015bec <ip4addr_aton+0xf4>
 8015be8:	2261      	movs	r2, #97	; 0x61
 8015bea:	e000      	b.n	8015bee <ip4addr_aton+0xf6>
 8015bec:	2241      	movs	r2, #65	; 0x41
 8015bee:	1a8a      	subs	r2, r1, r2
 8015bf0:	4313      	orrs	r3, r2
 8015bf2:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	3301      	adds	r3, #1
 8015bf8:	607b      	str	r3, [r7, #4]
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	781b      	ldrb	r3, [r3, #0]
 8015bfe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 8015c02:	e7b7      	b.n	8015b74 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 8015c04:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015c08:	2b2e      	cmp	r3, #46	; 0x2e
 8015c0a:	d114      	bne.n	8015c36 <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8015c0c:	f107 030c 	add.w	r3, r7, #12
 8015c10:	330c      	adds	r3, #12
 8015c12:	69fa      	ldr	r2, [r7, #28]
 8015c14:	429a      	cmp	r2, r3
 8015c16:	d301      	bcc.n	8015c1c <ip4addr_aton+0x124>
        return 0;
 8015c18:	2300      	movs	r3, #0
 8015c1a:	e08b      	b.n	8015d34 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 8015c1c:	69fb      	ldr	r3, [r7, #28]
 8015c1e:	1d1a      	adds	r2, r3, #4
 8015c20:	61fa      	str	r2, [r7, #28]
 8015c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015c24:	601a      	str	r2, [r3, #0]
      c = *++cp;
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	3301      	adds	r3, #1
 8015c2a:	607b      	str	r3, [r7, #4]
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	781b      	ldrb	r3, [r3, #0]
 8015c30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 8015c34:	e76c      	b.n	8015b10 <ip4addr_aton+0x18>
    } else {
      break;
 8015c36:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 8015c38:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d00b      	beq.n	8015c58 <ip4addr_aton+0x160>
 8015c40:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015c44:	3301      	adds	r3, #1
 8015c46:	4a3d      	ldr	r2, [pc, #244]	; (8015d3c <ip4addr_aton+0x244>)
 8015c48:	4413      	add	r3, r2
 8015c4a:	781b      	ldrb	r3, [r3, #0]
 8015c4c:	f003 0308 	and.w	r3, r3, #8
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d101      	bne.n	8015c58 <ip4addr_aton+0x160>
    return 0;
 8015c54:	2300      	movs	r3, #0
 8015c56:	e06d      	b.n	8015d34 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8015c58:	f107 030c 	add.w	r3, r7, #12
 8015c5c:	69fa      	ldr	r2, [r7, #28]
 8015c5e:	1ad3      	subs	r3, r2, r3
 8015c60:	109b      	asrs	r3, r3, #2
 8015c62:	3301      	adds	r3, #1
 8015c64:	2b04      	cmp	r3, #4
 8015c66:	d853      	bhi.n	8015d10 <ip4addr_aton+0x218>
 8015c68:	a201      	add	r2, pc, #4	; (adr r2, 8015c70 <ip4addr_aton+0x178>)
 8015c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c6e:	bf00      	nop
 8015c70:	08015c85 	.word	0x08015c85
 8015c74:	08015d1f 	.word	0x08015d1f
 8015c78:	08015c89 	.word	0x08015c89
 8015c7c:	08015cab 	.word	0x08015cab
 8015c80:	08015cd9 	.word	0x08015cd9

    case 0:
      return 0;       /* initial nondigit */
 8015c84:	2300      	movs	r3, #0
 8015c86:	e055      	b.n	8015d34 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 8015c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8015c8e:	d301      	bcc.n	8015c94 <ip4addr_aton+0x19c>
        return 0;
 8015c90:	2300      	movs	r3, #0
 8015c92:	e04f      	b.n	8015d34 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 8015c94:	68fb      	ldr	r3, [r7, #12]
 8015c96:	2bff      	cmp	r3, #255	; 0xff
 8015c98:	d901      	bls.n	8015c9e <ip4addr_aton+0x1a6>
        return 0;
 8015c9a:	2300      	movs	r3, #0
 8015c9c:	e04a      	b.n	8015d34 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 8015c9e:	68fb      	ldr	r3, [r7, #12]
 8015ca0:	061b      	lsls	r3, r3, #24
 8015ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015ca4:	4313      	orrs	r3, r2
 8015ca6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8015ca8:	e03a      	b.n	8015d20 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 8015caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015cb0:	d301      	bcc.n	8015cb6 <ip4addr_aton+0x1be>
        return 0;
 8015cb2:	2300      	movs	r3, #0
 8015cb4:	e03e      	b.n	8015d34 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8015cb6:	68fb      	ldr	r3, [r7, #12]
 8015cb8:	2bff      	cmp	r3, #255	; 0xff
 8015cba:	d802      	bhi.n	8015cc2 <ip4addr_aton+0x1ca>
 8015cbc:	693b      	ldr	r3, [r7, #16]
 8015cbe:	2bff      	cmp	r3, #255	; 0xff
 8015cc0:	d901      	bls.n	8015cc6 <ip4addr_aton+0x1ce>
        return 0;
 8015cc2:	2300      	movs	r3, #0
 8015cc4:	e036      	b.n	8015d34 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 8015cc6:	68fb      	ldr	r3, [r7, #12]
 8015cc8:	061a      	lsls	r2, r3, #24
 8015cca:	693b      	ldr	r3, [r7, #16]
 8015ccc:	041b      	lsls	r3, r3, #16
 8015cce:	4313      	orrs	r3, r2
 8015cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015cd2:	4313      	orrs	r3, r2
 8015cd4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8015cd6:	e023      	b.n	8015d20 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 8015cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cda:	2bff      	cmp	r3, #255	; 0xff
 8015cdc:	d901      	bls.n	8015ce2 <ip4addr_aton+0x1ea>
        return 0;
 8015cde:	2300      	movs	r3, #0
 8015ce0:	e028      	b.n	8015d34 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	2bff      	cmp	r3, #255	; 0xff
 8015ce6:	d805      	bhi.n	8015cf4 <ip4addr_aton+0x1fc>
 8015ce8:	693b      	ldr	r3, [r7, #16]
 8015cea:	2bff      	cmp	r3, #255	; 0xff
 8015cec:	d802      	bhi.n	8015cf4 <ip4addr_aton+0x1fc>
 8015cee:	697b      	ldr	r3, [r7, #20]
 8015cf0:	2bff      	cmp	r3, #255	; 0xff
 8015cf2:	d901      	bls.n	8015cf8 <ip4addr_aton+0x200>
        return 0;
 8015cf4:	2300      	movs	r3, #0
 8015cf6:	e01d      	b.n	8015d34 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8015cf8:	68fb      	ldr	r3, [r7, #12]
 8015cfa:	061a      	lsls	r2, r3, #24
 8015cfc:	693b      	ldr	r3, [r7, #16]
 8015cfe:	041b      	lsls	r3, r3, #16
 8015d00:	431a      	orrs	r2, r3
 8015d02:	697b      	ldr	r3, [r7, #20]
 8015d04:	021b      	lsls	r3, r3, #8
 8015d06:	4313      	orrs	r3, r2
 8015d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015d0a:	4313      	orrs	r3, r2
 8015d0c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8015d0e:	e007      	b.n	8015d20 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 8015d10:	4b0b      	ldr	r3, [pc, #44]	; (8015d40 <ip4addr_aton+0x248>)
 8015d12:	22f9      	movs	r2, #249	; 0xf9
 8015d14:	490b      	ldr	r1, [pc, #44]	; (8015d44 <ip4addr_aton+0x24c>)
 8015d16:	480c      	ldr	r0, [pc, #48]	; (8015d48 <ip4addr_aton+0x250>)
 8015d18:	f001 f972 	bl	8017000 <iprintf>
      break;
 8015d1c:	e000      	b.n	8015d20 <ip4addr_aton+0x228>
      break;
 8015d1e:	bf00      	nop
  }
  if (addr) {
 8015d20:	683b      	ldr	r3, [r7, #0]
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d005      	beq.n	8015d32 <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8015d26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015d28:	f7f5 fe8d 	bl	800ba46 <lwip_htonl>
 8015d2c:	4602      	mov	r2, r0
 8015d2e:	683b      	ldr	r3, [r7, #0]
 8015d30:	601a      	str	r2, [r3, #0]
  }
  return 1;
 8015d32:	2301      	movs	r3, #1
}
 8015d34:	4618      	mov	r0, r3
 8015d36:	3728      	adds	r7, #40	; 0x28
 8015d38:	46bd      	mov	sp, r7
 8015d3a:	bd80      	pop	{r7, pc}
 8015d3c:	0801bff4 	.word	0x0801bff4
 8015d40:	0801bb3c 	.word	0x0801bb3c
 8015d44:	0801bb78 	.word	0x0801bb78
 8015d48:	0801bb84 	.word	0x0801bb84

08015d4c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015d4c:	b580      	push	{r7, lr}
 8015d4e:	b084      	sub	sp, #16
 8015d50:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015d52:	2300      	movs	r3, #0
 8015d54:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015d56:	4b12      	ldr	r3, [pc, #72]	; (8015da0 <ip_reass_tmr+0x54>)
 8015d58:	681b      	ldr	r3, [r3, #0]
 8015d5a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015d5c:	e018      	b.n	8015d90 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015d5e:	68fb      	ldr	r3, [r7, #12]
 8015d60:	7fdb      	ldrb	r3, [r3, #31]
 8015d62:	2b00      	cmp	r3, #0
 8015d64:	d00b      	beq.n	8015d7e <ip_reass_tmr+0x32>
      r->timer--;
 8015d66:	68fb      	ldr	r3, [r7, #12]
 8015d68:	7fdb      	ldrb	r3, [r3, #31]
 8015d6a:	3b01      	subs	r3, #1
 8015d6c:	b2da      	uxtb	r2, r3
 8015d6e:	68fb      	ldr	r3, [r7, #12]
 8015d70:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015d72:	68fb      	ldr	r3, [r7, #12]
 8015d74:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015d76:	68fb      	ldr	r3, [r7, #12]
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	60fb      	str	r3, [r7, #12]
 8015d7c:	e008      	b.n	8015d90 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015d7e:	68fb      	ldr	r3, [r7, #12]
 8015d80:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015d82:	68fb      	ldr	r3, [r7, #12]
 8015d84:	681b      	ldr	r3, [r3, #0]
 8015d86:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015d88:	68b9      	ldr	r1, [r7, #8]
 8015d8a:	6878      	ldr	r0, [r7, #4]
 8015d8c:	f000 f80a 	bl	8015da4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015d90:	68fb      	ldr	r3, [r7, #12]
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	d1e3      	bne.n	8015d5e <ip_reass_tmr+0x12>
    }
  }
}
 8015d96:	bf00      	nop
 8015d98:	bf00      	nop
 8015d9a:	3710      	adds	r7, #16
 8015d9c:	46bd      	mov	sp, r7
 8015d9e:	bd80      	pop	{r7, pc}
 8015da0:	2000d298 	.word	0x2000d298

08015da4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015da4:	b580      	push	{r7, lr}
 8015da6:	b088      	sub	sp, #32
 8015da8:	af00      	add	r7, sp, #0
 8015daa:	6078      	str	r0, [r7, #4]
 8015dac:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015dae:	2300      	movs	r3, #0
 8015db0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015db2:	683a      	ldr	r2, [r7, #0]
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	429a      	cmp	r2, r3
 8015db8:	d105      	bne.n	8015dc6 <ip_reass_free_complete_datagram+0x22>
 8015dba:	4b45      	ldr	r3, [pc, #276]	; (8015ed0 <ip_reass_free_complete_datagram+0x12c>)
 8015dbc:	22ab      	movs	r2, #171	; 0xab
 8015dbe:	4945      	ldr	r1, [pc, #276]	; (8015ed4 <ip_reass_free_complete_datagram+0x130>)
 8015dc0:	4845      	ldr	r0, [pc, #276]	; (8015ed8 <ip_reass_free_complete_datagram+0x134>)
 8015dc2:	f001 f91d 	bl	8017000 <iprintf>
  if (prev != NULL) {
 8015dc6:	683b      	ldr	r3, [r7, #0]
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d00a      	beq.n	8015de2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015dcc:	683b      	ldr	r3, [r7, #0]
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	687a      	ldr	r2, [r7, #4]
 8015dd2:	429a      	cmp	r2, r3
 8015dd4:	d005      	beq.n	8015de2 <ip_reass_free_complete_datagram+0x3e>
 8015dd6:	4b3e      	ldr	r3, [pc, #248]	; (8015ed0 <ip_reass_free_complete_datagram+0x12c>)
 8015dd8:	22ad      	movs	r2, #173	; 0xad
 8015dda:	4940      	ldr	r1, [pc, #256]	; (8015edc <ip_reass_free_complete_datagram+0x138>)
 8015ddc:	483e      	ldr	r0, [pc, #248]	; (8015ed8 <ip_reass_free_complete_datagram+0x134>)
 8015dde:	f001 f90f 	bl	8017000 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	685b      	ldr	r3, [r3, #4]
 8015de6:	685b      	ldr	r3, [r3, #4]
 8015de8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015dea:	697b      	ldr	r3, [r7, #20]
 8015dec:	889b      	ldrh	r3, [r3, #4]
 8015dee:	b29b      	uxth	r3, r3
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d12a      	bne.n	8015e4a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	685b      	ldr	r3, [r3, #4]
 8015df8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015dfa:	697b      	ldr	r3, [r7, #20]
 8015dfc:	681a      	ldr	r2, [r3, #0]
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015e02:	69bb      	ldr	r3, [r7, #24]
 8015e04:	6858      	ldr	r0, [r3, #4]
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	3308      	adds	r3, #8
 8015e0a:	2214      	movs	r2, #20
 8015e0c:	4619      	mov	r1, r3
 8015e0e:	f001 f8c7 	bl	8016fa0 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015e12:	2101      	movs	r1, #1
 8015e14:	69b8      	ldr	r0, [r7, #24]
 8015e16:	f7ff fb09 	bl	801542c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015e1a:	69b8      	ldr	r0, [r7, #24]
 8015e1c:	f7f7 fa6a 	bl	800d2f4 <pbuf_clen>
 8015e20:	4603      	mov	r3, r0
 8015e22:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015e24:	8bfa      	ldrh	r2, [r7, #30]
 8015e26:	8a7b      	ldrh	r3, [r7, #18]
 8015e28:	4413      	add	r3, r2
 8015e2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015e2e:	db05      	blt.n	8015e3c <ip_reass_free_complete_datagram+0x98>
 8015e30:	4b27      	ldr	r3, [pc, #156]	; (8015ed0 <ip_reass_free_complete_datagram+0x12c>)
 8015e32:	22bc      	movs	r2, #188	; 0xbc
 8015e34:	492a      	ldr	r1, [pc, #168]	; (8015ee0 <ip_reass_free_complete_datagram+0x13c>)
 8015e36:	4828      	ldr	r0, [pc, #160]	; (8015ed8 <ip_reass_free_complete_datagram+0x134>)
 8015e38:	f001 f8e2 	bl	8017000 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015e3c:	8bfa      	ldrh	r2, [r7, #30]
 8015e3e:	8a7b      	ldrh	r3, [r7, #18]
 8015e40:	4413      	add	r3, r2
 8015e42:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015e44:	69b8      	ldr	r0, [r7, #24]
 8015e46:	f7f7 f9c7 	bl	800d1d8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	685b      	ldr	r3, [r3, #4]
 8015e4e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015e50:	e01f      	b.n	8015e92 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015e52:	69bb      	ldr	r3, [r7, #24]
 8015e54:	685b      	ldr	r3, [r3, #4]
 8015e56:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015e58:	69bb      	ldr	r3, [r7, #24]
 8015e5a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015e5c:	697b      	ldr	r3, [r7, #20]
 8015e5e:	681b      	ldr	r3, [r3, #0]
 8015e60:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015e62:	68f8      	ldr	r0, [r7, #12]
 8015e64:	f7f7 fa46 	bl	800d2f4 <pbuf_clen>
 8015e68:	4603      	mov	r3, r0
 8015e6a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015e6c:	8bfa      	ldrh	r2, [r7, #30]
 8015e6e:	8a7b      	ldrh	r3, [r7, #18]
 8015e70:	4413      	add	r3, r2
 8015e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015e76:	db05      	blt.n	8015e84 <ip_reass_free_complete_datagram+0xe0>
 8015e78:	4b15      	ldr	r3, [pc, #84]	; (8015ed0 <ip_reass_free_complete_datagram+0x12c>)
 8015e7a:	22cc      	movs	r2, #204	; 0xcc
 8015e7c:	4918      	ldr	r1, [pc, #96]	; (8015ee0 <ip_reass_free_complete_datagram+0x13c>)
 8015e7e:	4816      	ldr	r0, [pc, #88]	; (8015ed8 <ip_reass_free_complete_datagram+0x134>)
 8015e80:	f001 f8be 	bl	8017000 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015e84:	8bfa      	ldrh	r2, [r7, #30]
 8015e86:	8a7b      	ldrh	r3, [r7, #18]
 8015e88:	4413      	add	r3, r2
 8015e8a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015e8c:	68f8      	ldr	r0, [r7, #12]
 8015e8e:	f7f7 f9a3 	bl	800d1d8 <pbuf_free>
  while (p != NULL) {
 8015e92:	69bb      	ldr	r3, [r7, #24]
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	d1dc      	bne.n	8015e52 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015e98:	6839      	ldr	r1, [r7, #0]
 8015e9a:	6878      	ldr	r0, [r7, #4]
 8015e9c:	f000 f8c2 	bl	8016024 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015ea0:	4b10      	ldr	r3, [pc, #64]	; (8015ee4 <ip_reass_free_complete_datagram+0x140>)
 8015ea2:	881b      	ldrh	r3, [r3, #0]
 8015ea4:	8bfa      	ldrh	r2, [r7, #30]
 8015ea6:	429a      	cmp	r2, r3
 8015ea8:	d905      	bls.n	8015eb6 <ip_reass_free_complete_datagram+0x112>
 8015eaa:	4b09      	ldr	r3, [pc, #36]	; (8015ed0 <ip_reass_free_complete_datagram+0x12c>)
 8015eac:	22d2      	movs	r2, #210	; 0xd2
 8015eae:	490e      	ldr	r1, [pc, #56]	; (8015ee8 <ip_reass_free_complete_datagram+0x144>)
 8015eb0:	4809      	ldr	r0, [pc, #36]	; (8015ed8 <ip_reass_free_complete_datagram+0x134>)
 8015eb2:	f001 f8a5 	bl	8017000 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015eb6:	4b0b      	ldr	r3, [pc, #44]	; (8015ee4 <ip_reass_free_complete_datagram+0x140>)
 8015eb8:	881a      	ldrh	r2, [r3, #0]
 8015eba:	8bfb      	ldrh	r3, [r7, #30]
 8015ebc:	1ad3      	subs	r3, r2, r3
 8015ebe:	b29a      	uxth	r2, r3
 8015ec0:	4b08      	ldr	r3, [pc, #32]	; (8015ee4 <ip_reass_free_complete_datagram+0x140>)
 8015ec2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015ec4:	8bfb      	ldrh	r3, [r7, #30]
}
 8015ec6:	4618      	mov	r0, r3
 8015ec8:	3720      	adds	r7, #32
 8015eca:	46bd      	mov	sp, r7
 8015ecc:	bd80      	pop	{r7, pc}
 8015ece:	bf00      	nop
 8015ed0:	0801bbac 	.word	0x0801bbac
 8015ed4:	0801bbe8 	.word	0x0801bbe8
 8015ed8:	0801bbf4 	.word	0x0801bbf4
 8015edc:	0801bc1c 	.word	0x0801bc1c
 8015ee0:	0801bc30 	.word	0x0801bc30
 8015ee4:	2000d29c 	.word	0x2000d29c
 8015ee8:	0801bc50 	.word	0x0801bc50

08015eec <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015eec:	b580      	push	{r7, lr}
 8015eee:	b08a      	sub	sp, #40	; 0x28
 8015ef0:	af00      	add	r7, sp, #0
 8015ef2:	6078      	str	r0, [r7, #4]
 8015ef4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015ef6:	2300      	movs	r3, #0
 8015ef8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015efa:	2300      	movs	r3, #0
 8015efc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015efe:	2300      	movs	r3, #0
 8015f00:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015f02:	2300      	movs	r3, #0
 8015f04:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015f06:	2300      	movs	r3, #0
 8015f08:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015f0a:	4b28      	ldr	r3, [pc, #160]	; (8015fac <ip_reass_remove_oldest_datagram+0xc0>)
 8015f0c:	681b      	ldr	r3, [r3, #0]
 8015f0e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015f10:	e030      	b.n	8015f74 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f14:	695a      	ldr	r2, [r3, #20]
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	68db      	ldr	r3, [r3, #12]
 8015f1a:	429a      	cmp	r2, r3
 8015f1c:	d10c      	bne.n	8015f38 <ip_reass_remove_oldest_datagram+0x4c>
 8015f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f20:	699a      	ldr	r2, [r3, #24]
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	691b      	ldr	r3, [r3, #16]
 8015f26:	429a      	cmp	r2, r3
 8015f28:	d106      	bne.n	8015f38 <ip_reass_remove_oldest_datagram+0x4c>
 8015f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f2c:	899a      	ldrh	r2, [r3, #12]
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	889b      	ldrh	r3, [r3, #4]
 8015f32:	b29b      	uxth	r3, r3
 8015f34:	429a      	cmp	r2, r3
 8015f36:	d014      	beq.n	8015f62 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015f38:	693b      	ldr	r3, [r7, #16]
 8015f3a:	3301      	adds	r3, #1
 8015f3c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015f3e:	6a3b      	ldr	r3, [r7, #32]
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d104      	bne.n	8015f4e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f46:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015f48:	69fb      	ldr	r3, [r7, #28]
 8015f4a:	61bb      	str	r3, [r7, #24]
 8015f4c:	e009      	b.n	8015f62 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f50:	7fda      	ldrb	r2, [r3, #31]
 8015f52:	6a3b      	ldr	r3, [r7, #32]
 8015f54:	7fdb      	ldrb	r3, [r3, #31]
 8015f56:	429a      	cmp	r2, r3
 8015f58:	d803      	bhi.n	8015f62 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f5c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015f5e:	69fb      	ldr	r3, [r7, #28]
 8015f60:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f64:	681b      	ldr	r3, [r3, #0]
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d001      	beq.n	8015f6e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f6c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f70:	681b      	ldr	r3, [r3, #0]
 8015f72:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d1cb      	bne.n	8015f12 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015f7a:	6a3b      	ldr	r3, [r7, #32]
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d008      	beq.n	8015f92 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015f80:	69b9      	ldr	r1, [r7, #24]
 8015f82:	6a38      	ldr	r0, [r7, #32]
 8015f84:	f7ff ff0e 	bl	8015da4 <ip_reass_free_complete_datagram>
 8015f88:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015f8a:	697a      	ldr	r2, [r7, #20]
 8015f8c:	68fb      	ldr	r3, [r7, #12]
 8015f8e:	4413      	add	r3, r2
 8015f90:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015f92:	697a      	ldr	r2, [r7, #20]
 8015f94:	683b      	ldr	r3, [r7, #0]
 8015f96:	429a      	cmp	r2, r3
 8015f98:	da02      	bge.n	8015fa0 <ip_reass_remove_oldest_datagram+0xb4>
 8015f9a:	693b      	ldr	r3, [r7, #16]
 8015f9c:	2b01      	cmp	r3, #1
 8015f9e:	dcac      	bgt.n	8015efa <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015fa0:	697b      	ldr	r3, [r7, #20]
}
 8015fa2:	4618      	mov	r0, r3
 8015fa4:	3728      	adds	r7, #40	; 0x28
 8015fa6:	46bd      	mov	sp, r7
 8015fa8:	bd80      	pop	{r7, pc}
 8015faa:	bf00      	nop
 8015fac:	2000d298 	.word	0x2000d298

08015fb0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015fb0:	b580      	push	{r7, lr}
 8015fb2:	b084      	sub	sp, #16
 8015fb4:	af00      	add	r7, sp, #0
 8015fb6:	6078      	str	r0, [r7, #4]
 8015fb8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015fba:	2004      	movs	r0, #4
 8015fbc:	f7f6 f9e4 	bl	800c388 <memp_malloc>
 8015fc0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015fc2:	68fb      	ldr	r3, [r7, #12]
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	d110      	bne.n	8015fea <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015fc8:	6839      	ldr	r1, [r7, #0]
 8015fca:	6878      	ldr	r0, [r7, #4]
 8015fcc:	f7ff ff8e 	bl	8015eec <ip_reass_remove_oldest_datagram>
 8015fd0:	4602      	mov	r2, r0
 8015fd2:	683b      	ldr	r3, [r7, #0]
 8015fd4:	4293      	cmp	r3, r2
 8015fd6:	dc03      	bgt.n	8015fe0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015fd8:	2004      	movs	r0, #4
 8015fda:	f7f6 f9d5 	bl	800c388 <memp_malloc>
 8015fde:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015fe0:	68fb      	ldr	r3, [r7, #12]
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d101      	bne.n	8015fea <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015fe6:	2300      	movs	r3, #0
 8015fe8:	e016      	b.n	8016018 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015fea:	2220      	movs	r2, #32
 8015fec:	2100      	movs	r1, #0
 8015fee:	68f8      	ldr	r0, [r7, #12]
 8015ff0:	f000 fffe 	bl	8016ff0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015ff4:	68fb      	ldr	r3, [r7, #12]
 8015ff6:	220f      	movs	r2, #15
 8015ff8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015ffa:	4b09      	ldr	r3, [pc, #36]	; (8016020 <ip_reass_enqueue_new_datagram+0x70>)
 8015ffc:	681a      	ldr	r2, [r3, #0]
 8015ffe:	68fb      	ldr	r3, [r7, #12]
 8016000:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8016002:	4a07      	ldr	r2, [pc, #28]	; (8016020 <ip_reass_enqueue_new_datagram+0x70>)
 8016004:	68fb      	ldr	r3, [r7, #12]
 8016006:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8016008:	68fb      	ldr	r3, [r7, #12]
 801600a:	3308      	adds	r3, #8
 801600c:	2214      	movs	r2, #20
 801600e:	6879      	ldr	r1, [r7, #4]
 8016010:	4618      	mov	r0, r3
 8016012:	f000 ffc5 	bl	8016fa0 <memcpy>
  return ipr;
 8016016:	68fb      	ldr	r3, [r7, #12]
}
 8016018:	4618      	mov	r0, r3
 801601a:	3710      	adds	r7, #16
 801601c:	46bd      	mov	sp, r7
 801601e:	bd80      	pop	{r7, pc}
 8016020:	2000d298 	.word	0x2000d298

08016024 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016024:	b580      	push	{r7, lr}
 8016026:	b082      	sub	sp, #8
 8016028:	af00      	add	r7, sp, #0
 801602a:	6078      	str	r0, [r7, #4]
 801602c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801602e:	4b10      	ldr	r3, [pc, #64]	; (8016070 <ip_reass_dequeue_datagram+0x4c>)
 8016030:	681b      	ldr	r3, [r3, #0]
 8016032:	687a      	ldr	r2, [r7, #4]
 8016034:	429a      	cmp	r2, r3
 8016036:	d104      	bne.n	8016042 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	681b      	ldr	r3, [r3, #0]
 801603c:	4a0c      	ldr	r2, [pc, #48]	; (8016070 <ip_reass_dequeue_datagram+0x4c>)
 801603e:	6013      	str	r3, [r2, #0]
 8016040:	e00d      	b.n	801605e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8016042:	683b      	ldr	r3, [r7, #0]
 8016044:	2b00      	cmp	r3, #0
 8016046:	d106      	bne.n	8016056 <ip_reass_dequeue_datagram+0x32>
 8016048:	4b0a      	ldr	r3, [pc, #40]	; (8016074 <ip_reass_dequeue_datagram+0x50>)
 801604a:	f240 1245 	movw	r2, #325	; 0x145
 801604e:	490a      	ldr	r1, [pc, #40]	; (8016078 <ip_reass_dequeue_datagram+0x54>)
 8016050:	480a      	ldr	r0, [pc, #40]	; (801607c <ip_reass_dequeue_datagram+0x58>)
 8016052:	f000 ffd5 	bl	8017000 <iprintf>
    prev->next = ipr->next;
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	681a      	ldr	r2, [r3, #0]
 801605a:	683b      	ldr	r3, [r7, #0]
 801605c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801605e:	6879      	ldr	r1, [r7, #4]
 8016060:	2004      	movs	r0, #4
 8016062:	f7f6 f9e3 	bl	800c42c <memp_free>
}
 8016066:	bf00      	nop
 8016068:	3708      	adds	r7, #8
 801606a:	46bd      	mov	sp, r7
 801606c:	bd80      	pop	{r7, pc}
 801606e:	bf00      	nop
 8016070:	2000d298 	.word	0x2000d298
 8016074:	0801bbac 	.word	0x0801bbac
 8016078:	0801bc74 	.word	0x0801bc74
 801607c:	0801bbf4 	.word	0x0801bbf4

08016080 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016080:	b580      	push	{r7, lr}
 8016082:	b08c      	sub	sp, #48	; 0x30
 8016084:	af00      	add	r7, sp, #0
 8016086:	60f8      	str	r0, [r7, #12]
 8016088:	60b9      	str	r1, [r7, #8]
 801608a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801608c:	2300      	movs	r3, #0
 801608e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016090:	2301      	movs	r3, #1
 8016092:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016094:	68bb      	ldr	r3, [r7, #8]
 8016096:	685b      	ldr	r3, [r3, #4]
 8016098:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801609a:	69fb      	ldr	r3, [r7, #28]
 801609c:	885b      	ldrh	r3, [r3, #2]
 801609e:	b29b      	uxth	r3, r3
 80160a0:	4618      	mov	r0, r3
 80160a2:	f7f5 fcbb 	bl	800ba1c <lwip_htons>
 80160a6:	4603      	mov	r3, r0
 80160a8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80160aa:	69fb      	ldr	r3, [r7, #28]
 80160ac:	781b      	ldrb	r3, [r3, #0]
 80160ae:	f003 030f 	and.w	r3, r3, #15
 80160b2:	b2db      	uxtb	r3, r3
 80160b4:	009b      	lsls	r3, r3, #2
 80160b6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80160b8:	7e7b      	ldrb	r3, [r7, #25]
 80160ba:	b29b      	uxth	r3, r3
 80160bc:	8b7a      	ldrh	r2, [r7, #26]
 80160be:	429a      	cmp	r2, r3
 80160c0:	d202      	bcs.n	80160c8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80160c2:	f04f 33ff 	mov.w	r3, #4294967295
 80160c6:	e135      	b.n	8016334 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80160c8:	7e7b      	ldrb	r3, [r7, #25]
 80160ca:	b29b      	uxth	r3, r3
 80160cc:	8b7a      	ldrh	r2, [r7, #26]
 80160ce:	1ad3      	subs	r3, r2, r3
 80160d0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80160d2:	69fb      	ldr	r3, [r7, #28]
 80160d4:	88db      	ldrh	r3, [r3, #6]
 80160d6:	b29b      	uxth	r3, r3
 80160d8:	4618      	mov	r0, r3
 80160da:	f7f5 fc9f 	bl	800ba1c <lwip_htons>
 80160de:	4603      	mov	r3, r0
 80160e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80160e4:	b29b      	uxth	r3, r3
 80160e6:	00db      	lsls	r3, r3, #3
 80160e8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80160ea:	68bb      	ldr	r3, [r7, #8]
 80160ec:	685b      	ldr	r3, [r3, #4]
 80160ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80160f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160f2:	2200      	movs	r2, #0
 80160f4:	701a      	strb	r2, [r3, #0]
 80160f6:	2200      	movs	r2, #0
 80160f8:	705a      	strb	r2, [r3, #1]
 80160fa:	2200      	movs	r2, #0
 80160fc:	709a      	strb	r2, [r3, #2]
 80160fe:	2200      	movs	r2, #0
 8016100:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8016102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016104:	8afa      	ldrh	r2, [r7, #22]
 8016106:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8016108:	8afa      	ldrh	r2, [r7, #22]
 801610a:	8b7b      	ldrh	r3, [r7, #26]
 801610c:	4413      	add	r3, r2
 801610e:	b29a      	uxth	r2, r3
 8016110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016112:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8016114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016116:	88db      	ldrh	r3, [r3, #6]
 8016118:	b29b      	uxth	r3, r3
 801611a:	8afa      	ldrh	r2, [r7, #22]
 801611c:	429a      	cmp	r2, r3
 801611e:	d902      	bls.n	8016126 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016120:	f04f 33ff 	mov.w	r3, #4294967295
 8016124:	e106      	b.n	8016334 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016126:	68fb      	ldr	r3, [r7, #12]
 8016128:	685b      	ldr	r3, [r3, #4]
 801612a:	627b      	str	r3, [r7, #36]	; 0x24
 801612c:	e068      	b.n	8016200 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016130:	685b      	ldr	r3, [r3, #4]
 8016132:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016136:	889b      	ldrh	r3, [r3, #4]
 8016138:	b29a      	uxth	r2, r3
 801613a:	693b      	ldr	r3, [r7, #16]
 801613c:	889b      	ldrh	r3, [r3, #4]
 801613e:	b29b      	uxth	r3, r3
 8016140:	429a      	cmp	r2, r3
 8016142:	d235      	bcs.n	80161b0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016148:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801614a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801614c:	2b00      	cmp	r3, #0
 801614e:	d020      	beq.n	8016192 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016152:	889b      	ldrh	r3, [r3, #4]
 8016154:	b29a      	uxth	r2, r3
 8016156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016158:	88db      	ldrh	r3, [r3, #6]
 801615a:	b29b      	uxth	r3, r3
 801615c:	429a      	cmp	r2, r3
 801615e:	d307      	bcc.n	8016170 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016162:	88db      	ldrh	r3, [r3, #6]
 8016164:	b29a      	uxth	r2, r3
 8016166:	693b      	ldr	r3, [r7, #16]
 8016168:	889b      	ldrh	r3, [r3, #4]
 801616a:	b29b      	uxth	r3, r3
 801616c:	429a      	cmp	r2, r3
 801616e:	d902      	bls.n	8016176 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016170:	f04f 33ff 	mov.w	r3, #4294967295
 8016174:	e0de      	b.n	8016334 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016178:	68ba      	ldr	r2, [r7, #8]
 801617a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801617c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801617e:	88db      	ldrh	r3, [r3, #6]
 8016180:	b29a      	uxth	r2, r3
 8016182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016184:	889b      	ldrh	r3, [r3, #4]
 8016186:	b29b      	uxth	r3, r3
 8016188:	429a      	cmp	r2, r3
 801618a:	d03d      	beq.n	8016208 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801618c:	2300      	movs	r3, #0
 801618e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016190:	e03a      	b.n	8016208 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016194:	88db      	ldrh	r3, [r3, #6]
 8016196:	b29a      	uxth	r2, r3
 8016198:	693b      	ldr	r3, [r7, #16]
 801619a:	889b      	ldrh	r3, [r3, #4]
 801619c:	b29b      	uxth	r3, r3
 801619e:	429a      	cmp	r2, r3
 80161a0:	d902      	bls.n	80161a8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80161a2:	f04f 33ff 	mov.w	r3, #4294967295
 80161a6:	e0c5      	b.n	8016334 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80161a8:	68fb      	ldr	r3, [r7, #12]
 80161aa:	68ba      	ldr	r2, [r7, #8]
 80161ac:	605a      	str	r2, [r3, #4]
      break;
 80161ae:	e02b      	b.n	8016208 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80161b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161b2:	889b      	ldrh	r3, [r3, #4]
 80161b4:	b29a      	uxth	r2, r3
 80161b6:	693b      	ldr	r3, [r7, #16]
 80161b8:	889b      	ldrh	r3, [r3, #4]
 80161ba:	b29b      	uxth	r3, r3
 80161bc:	429a      	cmp	r2, r3
 80161be:	d102      	bne.n	80161c6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80161c0:	f04f 33ff 	mov.w	r3, #4294967295
 80161c4:	e0b6      	b.n	8016334 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80161c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161c8:	889b      	ldrh	r3, [r3, #4]
 80161ca:	b29a      	uxth	r2, r3
 80161cc:	693b      	ldr	r3, [r7, #16]
 80161ce:	88db      	ldrh	r3, [r3, #6]
 80161d0:	b29b      	uxth	r3, r3
 80161d2:	429a      	cmp	r2, r3
 80161d4:	d202      	bcs.n	80161dc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80161d6:	f04f 33ff 	mov.w	r3, #4294967295
 80161da:	e0ab      	b.n	8016334 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80161dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d009      	beq.n	80161f6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80161e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161e4:	88db      	ldrh	r3, [r3, #6]
 80161e6:	b29a      	uxth	r2, r3
 80161e8:	693b      	ldr	r3, [r7, #16]
 80161ea:	889b      	ldrh	r3, [r3, #4]
 80161ec:	b29b      	uxth	r3, r3
 80161ee:	429a      	cmp	r2, r3
 80161f0:	d001      	beq.n	80161f6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80161f2:	2300      	movs	r3, #0
 80161f4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80161f6:	693b      	ldr	r3, [r7, #16]
 80161f8:	681b      	ldr	r3, [r3, #0]
 80161fa:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80161fc:	693b      	ldr	r3, [r7, #16]
 80161fe:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8016200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016202:	2b00      	cmp	r3, #0
 8016204:	d193      	bne.n	801612e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8016206:	e000      	b.n	801620a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8016208:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801620c:	2b00      	cmp	r3, #0
 801620e:	d12d      	bne.n	801626c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016212:	2b00      	cmp	r3, #0
 8016214:	d01c      	beq.n	8016250 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016218:	88db      	ldrh	r3, [r3, #6]
 801621a:	b29a      	uxth	r2, r3
 801621c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801621e:	889b      	ldrh	r3, [r3, #4]
 8016220:	b29b      	uxth	r3, r3
 8016222:	429a      	cmp	r2, r3
 8016224:	d906      	bls.n	8016234 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8016226:	4b45      	ldr	r3, [pc, #276]	; (801633c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016228:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801622c:	4944      	ldr	r1, [pc, #272]	; (8016340 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801622e:	4845      	ldr	r0, [pc, #276]	; (8016344 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016230:	f000 fee6 	bl	8017000 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016236:	68ba      	ldr	r2, [r7, #8]
 8016238:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801623a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801623c:	88db      	ldrh	r3, [r3, #6]
 801623e:	b29a      	uxth	r2, r3
 8016240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016242:	889b      	ldrh	r3, [r3, #4]
 8016244:	b29b      	uxth	r3, r3
 8016246:	429a      	cmp	r2, r3
 8016248:	d010      	beq.n	801626c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801624a:	2300      	movs	r3, #0
 801624c:	623b      	str	r3, [r7, #32]
 801624e:	e00d      	b.n	801626c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	685b      	ldr	r3, [r3, #4]
 8016254:	2b00      	cmp	r3, #0
 8016256:	d006      	beq.n	8016266 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016258:	4b38      	ldr	r3, [pc, #224]	; (801633c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801625a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801625e:	493a      	ldr	r1, [pc, #232]	; (8016348 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016260:	4838      	ldr	r0, [pc, #224]	; (8016344 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016262:	f000 fecd 	bl	8017000 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016266:	68fb      	ldr	r3, [r7, #12]
 8016268:	68ba      	ldr	r2, [r7, #8]
 801626a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	2b00      	cmp	r3, #0
 8016270:	d105      	bne.n	801627e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8016272:	68fb      	ldr	r3, [r7, #12]
 8016274:	7f9b      	ldrb	r3, [r3, #30]
 8016276:	f003 0301 	and.w	r3, r3, #1
 801627a:	2b00      	cmp	r3, #0
 801627c:	d059      	beq.n	8016332 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801627e:	6a3b      	ldr	r3, [r7, #32]
 8016280:	2b00      	cmp	r3, #0
 8016282:	d04f      	beq.n	8016324 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016284:	68fb      	ldr	r3, [r7, #12]
 8016286:	685b      	ldr	r3, [r3, #4]
 8016288:	2b00      	cmp	r3, #0
 801628a:	d006      	beq.n	801629a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	685b      	ldr	r3, [r3, #4]
 8016290:	685b      	ldr	r3, [r3, #4]
 8016292:	889b      	ldrh	r3, [r3, #4]
 8016294:	b29b      	uxth	r3, r3
 8016296:	2b00      	cmp	r3, #0
 8016298:	d002      	beq.n	80162a0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801629a:	2300      	movs	r3, #0
 801629c:	623b      	str	r3, [r7, #32]
 801629e:	e041      	b.n	8016324 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80162a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162a2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80162a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162a6:	681b      	ldr	r3, [r3, #0]
 80162a8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80162aa:	e012      	b.n	80162d2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80162ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162ae:	685b      	ldr	r3, [r3, #4]
 80162b0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80162b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162b4:	88db      	ldrh	r3, [r3, #6]
 80162b6:	b29a      	uxth	r2, r3
 80162b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162ba:	889b      	ldrh	r3, [r3, #4]
 80162bc:	b29b      	uxth	r3, r3
 80162be:	429a      	cmp	r2, r3
 80162c0:	d002      	beq.n	80162c8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80162c2:	2300      	movs	r3, #0
 80162c4:	623b      	str	r3, [r7, #32]
            break;
 80162c6:	e007      	b.n	80162d8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80162c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162ca:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80162cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162ce:	681b      	ldr	r3, [r3, #0]
 80162d0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80162d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	d1e9      	bne.n	80162ac <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80162d8:	6a3b      	ldr	r3, [r7, #32]
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d022      	beq.n	8016324 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80162de:	68fb      	ldr	r3, [r7, #12]
 80162e0:	685b      	ldr	r3, [r3, #4]
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d106      	bne.n	80162f4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80162e6:	4b15      	ldr	r3, [pc, #84]	; (801633c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80162e8:	f240 12df 	movw	r2, #479	; 0x1df
 80162ec:	4917      	ldr	r1, [pc, #92]	; (801634c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80162ee:	4815      	ldr	r0, [pc, #84]	; (8016344 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80162f0:	f000 fe86 	bl	8017000 <iprintf>
          LWIP_ASSERT("sanity check",
 80162f4:	68fb      	ldr	r3, [r7, #12]
 80162f6:	685b      	ldr	r3, [r3, #4]
 80162f8:	685b      	ldr	r3, [r3, #4]
 80162fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80162fc:	429a      	cmp	r2, r3
 80162fe:	d106      	bne.n	801630e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016300:	4b0e      	ldr	r3, [pc, #56]	; (801633c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016302:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8016306:	4911      	ldr	r1, [pc, #68]	; (801634c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016308:	480e      	ldr	r0, [pc, #56]	; (8016344 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801630a:	f000 fe79 	bl	8017000 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801630e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016310:	681b      	ldr	r3, [r3, #0]
 8016312:	2b00      	cmp	r3, #0
 8016314:	d006      	beq.n	8016324 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8016316:	4b09      	ldr	r3, [pc, #36]	; (801633c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016318:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801631c:	490c      	ldr	r1, [pc, #48]	; (8016350 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801631e:	4809      	ldr	r0, [pc, #36]	; (8016344 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016320:	f000 fe6e 	bl	8017000 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016324:	6a3b      	ldr	r3, [r7, #32]
 8016326:	2b00      	cmp	r3, #0
 8016328:	bf14      	ite	ne
 801632a:	2301      	movne	r3, #1
 801632c:	2300      	moveq	r3, #0
 801632e:	b2db      	uxtb	r3, r3
 8016330:	e000      	b.n	8016334 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016332:	2300      	movs	r3, #0
}
 8016334:	4618      	mov	r0, r3
 8016336:	3730      	adds	r7, #48	; 0x30
 8016338:	46bd      	mov	sp, r7
 801633a:	bd80      	pop	{r7, pc}
 801633c:	0801bbac 	.word	0x0801bbac
 8016340:	0801bc90 	.word	0x0801bc90
 8016344:	0801bbf4 	.word	0x0801bbf4
 8016348:	0801bcb0 	.word	0x0801bcb0
 801634c:	0801bce8 	.word	0x0801bce8
 8016350:	0801bcf8 	.word	0x0801bcf8

08016354 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016354:	b580      	push	{r7, lr}
 8016356:	b08e      	sub	sp, #56	; 0x38
 8016358:	af00      	add	r7, sp, #0
 801635a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	685b      	ldr	r3, [r3, #4]
 8016360:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016364:	781b      	ldrb	r3, [r3, #0]
 8016366:	f003 030f 	and.w	r3, r3, #15
 801636a:	b2db      	uxtb	r3, r3
 801636c:	009b      	lsls	r3, r3, #2
 801636e:	b2db      	uxtb	r3, r3
 8016370:	2b14      	cmp	r3, #20
 8016372:	f040 8171 	bne.w	8016658 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8016376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016378:	88db      	ldrh	r3, [r3, #6]
 801637a:	b29b      	uxth	r3, r3
 801637c:	4618      	mov	r0, r3
 801637e:	f7f5 fb4d 	bl	800ba1c <lwip_htons>
 8016382:	4603      	mov	r3, r0
 8016384:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016388:	b29b      	uxth	r3, r3
 801638a:	00db      	lsls	r3, r3, #3
 801638c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801638e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016390:	885b      	ldrh	r3, [r3, #2]
 8016392:	b29b      	uxth	r3, r3
 8016394:	4618      	mov	r0, r3
 8016396:	f7f5 fb41 	bl	800ba1c <lwip_htons>
 801639a:	4603      	mov	r3, r0
 801639c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801639e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163a0:	781b      	ldrb	r3, [r3, #0]
 80163a2:	f003 030f 	and.w	r3, r3, #15
 80163a6:	b2db      	uxtb	r3, r3
 80163a8:	009b      	lsls	r3, r3, #2
 80163aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80163ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80163b2:	b29b      	uxth	r3, r3
 80163b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80163b6:	429a      	cmp	r2, r3
 80163b8:	f0c0 8150 	bcc.w	801665c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80163bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80163c0:	b29b      	uxth	r3, r3
 80163c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80163c4:	1ad3      	subs	r3, r2, r3
 80163c6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80163c8:	6878      	ldr	r0, [r7, #4]
 80163ca:	f7f6 ff93 	bl	800d2f4 <pbuf_clen>
 80163ce:	4603      	mov	r3, r0
 80163d0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80163d2:	4b8c      	ldr	r3, [pc, #560]	; (8016604 <ip4_reass+0x2b0>)
 80163d4:	881b      	ldrh	r3, [r3, #0]
 80163d6:	461a      	mov	r2, r3
 80163d8:	8c3b      	ldrh	r3, [r7, #32]
 80163da:	4413      	add	r3, r2
 80163dc:	2b0a      	cmp	r3, #10
 80163de:	dd10      	ble.n	8016402 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80163e0:	8c3b      	ldrh	r3, [r7, #32]
 80163e2:	4619      	mov	r1, r3
 80163e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80163e6:	f7ff fd81 	bl	8015eec <ip_reass_remove_oldest_datagram>
 80163ea:	4603      	mov	r3, r0
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	f000 8137 	beq.w	8016660 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80163f2:	4b84      	ldr	r3, [pc, #528]	; (8016604 <ip4_reass+0x2b0>)
 80163f4:	881b      	ldrh	r3, [r3, #0]
 80163f6:	461a      	mov	r2, r3
 80163f8:	8c3b      	ldrh	r3, [r7, #32]
 80163fa:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80163fc:	2b0a      	cmp	r3, #10
 80163fe:	f300 812f 	bgt.w	8016660 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016402:	4b81      	ldr	r3, [pc, #516]	; (8016608 <ip4_reass+0x2b4>)
 8016404:	681b      	ldr	r3, [r3, #0]
 8016406:	633b      	str	r3, [r7, #48]	; 0x30
 8016408:	e015      	b.n	8016436 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801640a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801640c:	695a      	ldr	r2, [r3, #20]
 801640e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016410:	68db      	ldr	r3, [r3, #12]
 8016412:	429a      	cmp	r2, r3
 8016414:	d10c      	bne.n	8016430 <ip4_reass+0xdc>
 8016416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016418:	699a      	ldr	r2, [r3, #24]
 801641a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801641c:	691b      	ldr	r3, [r3, #16]
 801641e:	429a      	cmp	r2, r3
 8016420:	d106      	bne.n	8016430 <ip4_reass+0xdc>
 8016422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016424:	899a      	ldrh	r2, [r3, #12]
 8016426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016428:	889b      	ldrh	r3, [r3, #4]
 801642a:	b29b      	uxth	r3, r3
 801642c:	429a      	cmp	r2, r3
 801642e:	d006      	beq.n	801643e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016432:	681b      	ldr	r3, [r3, #0]
 8016434:	633b      	str	r3, [r7, #48]	; 0x30
 8016436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016438:	2b00      	cmp	r3, #0
 801643a:	d1e6      	bne.n	801640a <ip4_reass+0xb6>
 801643c:	e000      	b.n	8016440 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801643e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016442:	2b00      	cmp	r3, #0
 8016444:	d109      	bne.n	801645a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016446:	8c3b      	ldrh	r3, [r7, #32]
 8016448:	4619      	mov	r1, r3
 801644a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801644c:	f7ff fdb0 	bl	8015fb0 <ip_reass_enqueue_new_datagram>
 8016450:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016454:	2b00      	cmp	r3, #0
 8016456:	d11c      	bne.n	8016492 <ip4_reass+0x13e>
      goto nullreturn;
 8016458:	e105      	b.n	8016666 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801645a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801645c:	88db      	ldrh	r3, [r3, #6]
 801645e:	b29b      	uxth	r3, r3
 8016460:	4618      	mov	r0, r3
 8016462:	f7f5 fadb 	bl	800ba1c <lwip_htons>
 8016466:	4603      	mov	r3, r0
 8016468:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801646c:	2b00      	cmp	r3, #0
 801646e:	d110      	bne.n	8016492 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016472:	89db      	ldrh	r3, [r3, #14]
 8016474:	4618      	mov	r0, r3
 8016476:	f7f5 fad1 	bl	800ba1c <lwip_htons>
 801647a:	4603      	mov	r3, r0
 801647c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016480:	2b00      	cmp	r3, #0
 8016482:	d006      	beq.n	8016492 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016486:	3308      	adds	r3, #8
 8016488:	2214      	movs	r2, #20
 801648a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801648c:	4618      	mov	r0, r3
 801648e:	f000 fd87 	bl	8016fa0 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016494:	88db      	ldrh	r3, [r3, #6]
 8016496:	b29b      	uxth	r3, r3
 8016498:	f003 0320 	and.w	r3, r3, #32
 801649c:	2b00      	cmp	r3, #0
 801649e:	bf0c      	ite	eq
 80164a0:	2301      	moveq	r3, #1
 80164a2:	2300      	movne	r3, #0
 80164a4:	b2db      	uxtb	r3, r3
 80164a6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80164a8:	69fb      	ldr	r3, [r7, #28]
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d00e      	beq.n	80164cc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80164ae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80164b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80164b2:	4413      	add	r3, r2
 80164b4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80164b6:	8b7a      	ldrh	r2, [r7, #26]
 80164b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80164ba:	429a      	cmp	r2, r3
 80164bc:	f0c0 80a0 	bcc.w	8016600 <ip4_reass+0x2ac>
 80164c0:	8b7b      	ldrh	r3, [r7, #26]
 80164c2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80164c6:	4293      	cmp	r3, r2
 80164c8:	f200 809a 	bhi.w	8016600 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80164cc:	69fa      	ldr	r2, [r7, #28]
 80164ce:	6879      	ldr	r1, [r7, #4]
 80164d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80164d2:	f7ff fdd5 	bl	8016080 <ip_reass_chain_frag_into_datagram_and_validate>
 80164d6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80164d8:	697b      	ldr	r3, [r7, #20]
 80164da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80164de:	f000 809b 	beq.w	8016618 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80164e2:	4b48      	ldr	r3, [pc, #288]	; (8016604 <ip4_reass+0x2b0>)
 80164e4:	881a      	ldrh	r2, [r3, #0]
 80164e6:	8c3b      	ldrh	r3, [r7, #32]
 80164e8:	4413      	add	r3, r2
 80164ea:	b29a      	uxth	r2, r3
 80164ec:	4b45      	ldr	r3, [pc, #276]	; (8016604 <ip4_reass+0x2b0>)
 80164ee:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80164f0:	69fb      	ldr	r3, [r7, #28]
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	d00d      	beq.n	8016512 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80164f6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80164f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80164fa:	4413      	add	r3, r2
 80164fc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80164fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016500:	8a7a      	ldrh	r2, [r7, #18]
 8016502:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016506:	7f9b      	ldrb	r3, [r3, #30]
 8016508:	f043 0301 	orr.w	r3, r3, #1
 801650c:	b2da      	uxtb	r2, r3
 801650e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016510:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016512:	697b      	ldr	r3, [r7, #20]
 8016514:	2b01      	cmp	r3, #1
 8016516:	d171      	bne.n	80165fc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8016518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801651a:	8b9b      	ldrh	r3, [r3, #28]
 801651c:	3314      	adds	r3, #20
 801651e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016522:	685b      	ldr	r3, [r3, #4]
 8016524:	685b      	ldr	r3, [r3, #4]
 8016526:	681b      	ldr	r3, [r3, #0]
 8016528:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801652a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801652c:	685b      	ldr	r3, [r3, #4]
 801652e:	685b      	ldr	r3, [r3, #4]
 8016530:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8016532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016534:	3308      	adds	r3, #8
 8016536:	2214      	movs	r2, #20
 8016538:	4619      	mov	r1, r3
 801653a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801653c:	f000 fd30 	bl	8016fa0 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016540:	8a3b      	ldrh	r3, [r7, #16]
 8016542:	4618      	mov	r0, r3
 8016544:	f7f5 fa6a 	bl	800ba1c <lwip_htons>
 8016548:	4603      	mov	r3, r0
 801654a:	461a      	mov	r2, r3
 801654c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801654e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016552:	2200      	movs	r2, #0
 8016554:	719a      	strb	r2, [r3, #6]
 8016556:	2200      	movs	r2, #0
 8016558:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801655a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801655c:	2200      	movs	r2, #0
 801655e:	729a      	strb	r2, [r3, #10]
 8016560:	2200      	movs	r2, #0
 8016562:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016566:	685b      	ldr	r3, [r3, #4]
 8016568:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801656a:	e00d      	b.n	8016588 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801656c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801656e:	685b      	ldr	r3, [r3, #4]
 8016570:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016572:	2114      	movs	r1, #20
 8016574:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016576:	f7f6 fd77 	bl	800d068 <pbuf_remove_header>
      pbuf_cat(p, r);
 801657a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801657c:	6878      	ldr	r0, [r7, #4]
 801657e:	f7f6 fef9 	bl	800d374 <pbuf_cat>
      r = iprh->next_pbuf;
 8016582:	68fb      	ldr	r3, [r7, #12]
 8016584:	681b      	ldr	r3, [r3, #0]
 8016586:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8016588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801658a:	2b00      	cmp	r3, #0
 801658c:	d1ee      	bne.n	801656c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801658e:	4b1e      	ldr	r3, [pc, #120]	; (8016608 <ip4_reass+0x2b4>)
 8016590:	681b      	ldr	r3, [r3, #0]
 8016592:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016594:	429a      	cmp	r2, r3
 8016596:	d102      	bne.n	801659e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8016598:	2300      	movs	r3, #0
 801659a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801659c:	e010      	b.n	80165c0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801659e:	4b1a      	ldr	r3, [pc, #104]	; (8016608 <ip4_reass+0x2b4>)
 80165a0:	681b      	ldr	r3, [r3, #0]
 80165a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80165a4:	e007      	b.n	80165b6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80165a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80165ac:	429a      	cmp	r2, r3
 80165ae:	d006      	beq.n	80165be <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80165b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165b2:	681b      	ldr	r3, [r3, #0]
 80165b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80165b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	d1f4      	bne.n	80165a6 <ip4_reass+0x252>
 80165bc:	e000      	b.n	80165c0 <ip4_reass+0x26c>
          break;
 80165be:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80165c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80165c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80165c4:	f7ff fd2e 	bl	8016024 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80165c8:	6878      	ldr	r0, [r7, #4]
 80165ca:	f7f6 fe93 	bl	800d2f4 <pbuf_clen>
 80165ce:	4603      	mov	r3, r0
 80165d0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80165d2:	4b0c      	ldr	r3, [pc, #48]	; (8016604 <ip4_reass+0x2b0>)
 80165d4:	881b      	ldrh	r3, [r3, #0]
 80165d6:	8c3a      	ldrh	r2, [r7, #32]
 80165d8:	429a      	cmp	r2, r3
 80165da:	d906      	bls.n	80165ea <ip4_reass+0x296>
 80165dc:	4b0b      	ldr	r3, [pc, #44]	; (801660c <ip4_reass+0x2b8>)
 80165de:	f240 229b 	movw	r2, #667	; 0x29b
 80165e2:	490b      	ldr	r1, [pc, #44]	; (8016610 <ip4_reass+0x2bc>)
 80165e4:	480b      	ldr	r0, [pc, #44]	; (8016614 <ip4_reass+0x2c0>)
 80165e6:	f000 fd0b 	bl	8017000 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80165ea:	4b06      	ldr	r3, [pc, #24]	; (8016604 <ip4_reass+0x2b0>)
 80165ec:	881a      	ldrh	r2, [r3, #0]
 80165ee:	8c3b      	ldrh	r3, [r7, #32]
 80165f0:	1ad3      	subs	r3, r2, r3
 80165f2:	b29a      	uxth	r2, r3
 80165f4:	4b03      	ldr	r3, [pc, #12]	; (8016604 <ip4_reass+0x2b0>)
 80165f6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	e038      	b.n	801666e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80165fc:	2300      	movs	r3, #0
 80165fe:	e036      	b.n	801666e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8016600:	bf00      	nop
 8016602:	e00a      	b.n	801661a <ip4_reass+0x2c6>
 8016604:	2000d29c 	.word	0x2000d29c
 8016608:	2000d298 	.word	0x2000d298
 801660c:	0801bbac 	.word	0x0801bbac
 8016610:	0801bd1c 	.word	0x0801bd1c
 8016614:	0801bbf4 	.word	0x0801bbf4
    goto nullreturn_ipr;
 8016618:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801661a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801661c:	2b00      	cmp	r3, #0
 801661e:	d106      	bne.n	801662e <ip4_reass+0x2da>
 8016620:	4b15      	ldr	r3, [pc, #84]	; (8016678 <ip4_reass+0x324>)
 8016622:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8016626:	4915      	ldr	r1, [pc, #84]	; (801667c <ip4_reass+0x328>)
 8016628:	4815      	ldr	r0, [pc, #84]	; (8016680 <ip4_reass+0x32c>)
 801662a:	f000 fce9 	bl	8017000 <iprintf>
  if (ipr->p == NULL) {
 801662e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016630:	685b      	ldr	r3, [r3, #4]
 8016632:	2b00      	cmp	r3, #0
 8016634:	d116      	bne.n	8016664 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8016636:	4b13      	ldr	r3, [pc, #76]	; (8016684 <ip4_reass+0x330>)
 8016638:	681b      	ldr	r3, [r3, #0]
 801663a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801663c:	429a      	cmp	r2, r3
 801663e:	d006      	beq.n	801664e <ip4_reass+0x2fa>
 8016640:	4b0d      	ldr	r3, [pc, #52]	; (8016678 <ip4_reass+0x324>)
 8016642:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016646:	4910      	ldr	r1, [pc, #64]	; (8016688 <ip4_reass+0x334>)
 8016648:	480d      	ldr	r0, [pc, #52]	; (8016680 <ip4_reass+0x32c>)
 801664a:	f000 fcd9 	bl	8017000 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801664e:	2100      	movs	r1, #0
 8016650:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016652:	f7ff fce7 	bl	8016024 <ip_reass_dequeue_datagram>
 8016656:	e006      	b.n	8016666 <ip4_reass+0x312>
    goto nullreturn;
 8016658:	bf00      	nop
 801665a:	e004      	b.n	8016666 <ip4_reass+0x312>
    goto nullreturn;
 801665c:	bf00      	nop
 801665e:	e002      	b.n	8016666 <ip4_reass+0x312>
      goto nullreturn;
 8016660:	bf00      	nop
 8016662:	e000      	b.n	8016666 <ip4_reass+0x312>
  }

nullreturn:
 8016664:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8016666:	6878      	ldr	r0, [r7, #4]
 8016668:	f7f6 fdb6 	bl	800d1d8 <pbuf_free>
  return NULL;
 801666c:	2300      	movs	r3, #0
}
 801666e:	4618      	mov	r0, r3
 8016670:	3738      	adds	r7, #56	; 0x38
 8016672:	46bd      	mov	sp, r7
 8016674:	bd80      	pop	{r7, pc}
 8016676:	bf00      	nop
 8016678:	0801bbac 	.word	0x0801bbac
 801667c:	0801bd38 	.word	0x0801bd38
 8016680:	0801bbf4 	.word	0x0801bbf4
 8016684:	2000d298 	.word	0x2000d298
 8016688:	0801bd44 	.word	0x0801bd44

0801668c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801668c:	b580      	push	{r7, lr}
 801668e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016690:	2005      	movs	r0, #5
 8016692:	f7f5 fe79 	bl	800c388 <memp_malloc>
 8016696:	4603      	mov	r3, r0
}
 8016698:	4618      	mov	r0, r3
 801669a:	bd80      	pop	{r7, pc}

0801669c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801669c:	b580      	push	{r7, lr}
 801669e:	b082      	sub	sp, #8
 80166a0:	af00      	add	r7, sp, #0
 80166a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d106      	bne.n	80166b8 <ip_frag_free_pbuf_custom_ref+0x1c>
 80166aa:	4b07      	ldr	r3, [pc, #28]	; (80166c8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80166ac:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80166b0:	4906      	ldr	r1, [pc, #24]	; (80166cc <ip_frag_free_pbuf_custom_ref+0x30>)
 80166b2:	4807      	ldr	r0, [pc, #28]	; (80166d0 <ip_frag_free_pbuf_custom_ref+0x34>)
 80166b4:	f000 fca4 	bl	8017000 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80166b8:	6879      	ldr	r1, [r7, #4]
 80166ba:	2005      	movs	r0, #5
 80166bc:	f7f5 feb6 	bl	800c42c <memp_free>
}
 80166c0:	bf00      	nop
 80166c2:	3708      	adds	r7, #8
 80166c4:	46bd      	mov	sp, r7
 80166c6:	bd80      	pop	{r7, pc}
 80166c8:	0801bbac 	.word	0x0801bbac
 80166cc:	0801bd64 	.word	0x0801bd64
 80166d0:	0801bbf4 	.word	0x0801bbf4

080166d4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80166d4:	b580      	push	{r7, lr}
 80166d6:	b084      	sub	sp, #16
 80166d8:	af00      	add	r7, sp, #0
 80166da:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80166e0:	68fb      	ldr	r3, [r7, #12]
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	d106      	bne.n	80166f4 <ipfrag_free_pbuf_custom+0x20>
 80166e6:	4b11      	ldr	r3, [pc, #68]	; (801672c <ipfrag_free_pbuf_custom+0x58>)
 80166e8:	f240 22ce 	movw	r2, #718	; 0x2ce
 80166ec:	4910      	ldr	r1, [pc, #64]	; (8016730 <ipfrag_free_pbuf_custom+0x5c>)
 80166ee:	4811      	ldr	r0, [pc, #68]	; (8016734 <ipfrag_free_pbuf_custom+0x60>)
 80166f0:	f000 fc86 	bl	8017000 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80166f4:	68fa      	ldr	r2, [r7, #12]
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	429a      	cmp	r2, r3
 80166fa:	d006      	beq.n	801670a <ipfrag_free_pbuf_custom+0x36>
 80166fc:	4b0b      	ldr	r3, [pc, #44]	; (801672c <ipfrag_free_pbuf_custom+0x58>)
 80166fe:	f240 22cf 	movw	r2, #719	; 0x2cf
 8016702:	490d      	ldr	r1, [pc, #52]	; (8016738 <ipfrag_free_pbuf_custom+0x64>)
 8016704:	480b      	ldr	r0, [pc, #44]	; (8016734 <ipfrag_free_pbuf_custom+0x60>)
 8016706:	f000 fc7b 	bl	8017000 <iprintf>
  if (pcr->original != NULL) {
 801670a:	68fb      	ldr	r3, [r7, #12]
 801670c:	695b      	ldr	r3, [r3, #20]
 801670e:	2b00      	cmp	r3, #0
 8016710:	d004      	beq.n	801671c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016712:	68fb      	ldr	r3, [r7, #12]
 8016714:	695b      	ldr	r3, [r3, #20]
 8016716:	4618      	mov	r0, r3
 8016718:	f7f6 fd5e 	bl	800d1d8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801671c:	68f8      	ldr	r0, [r7, #12]
 801671e:	f7ff ffbd 	bl	801669c <ip_frag_free_pbuf_custom_ref>
}
 8016722:	bf00      	nop
 8016724:	3710      	adds	r7, #16
 8016726:	46bd      	mov	sp, r7
 8016728:	bd80      	pop	{r7, pc}
 801672a:	bf00      	nop
 801672c:	0801bbac 	.word	0x0801bbac
 8016730:	0801bd70 	.word	0x0801bd70
 8016734:	0801bbf4 	.word	0x0801bbf4
 8016738:	0801bd7c 	.word	0x0801bd7c

0801673c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801673c:	b580      	push	{r7, lr}
 801673e:	b094      	sub	sp, #80	; 0x50
 8016740:	af02      	add	r7, sp, #8
 8016742:	60f8      	str	r0, [r7, #12]
 8016744:	60b9      	str	r1, [r7, #8]
 8016746:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016748:	2300      	movs	r3, #0
 801674a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801674e:	68bb      	ldr	r3, [r7, #8]
 8016750:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016752:	3b14      	subs	r3, #20
 8016754:	2b00      	cmp	r3, #0
 8016756:	da00      	bge.n	801675a <ip4_frag+0x1e>
 8016758:	3307      	adds	r3, #7
 801675a:	10db      	asrs	r3, r3, #3
 801675c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801675e:	2314      	movs	r3, #20
 8016760:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016762:	68fb      	ldr	r3, [r7, #12]
 8016764:	685b      	ldr	r3, [r3, #4]
 8016766:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8016768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801676a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801676c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801676e:	781b      	ldrb	r3, [r3, #0]
 8016770:	f003 030f 	and.w	r3, r3, #15
 8016774:	b2db      	uxtb	r3, r3
 8016776:	009b      	lsls	r3, r3, #2
 8016778:	b2db      	uxtb	r3, r3
 801677a:	2b14      	cmp	r3, #20
 801677c:	d002      	beq.n	8016784 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801677e:	f06f 0305 	mvn.w	r3, #5
 8016782:	e110      	b.n	80169a6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016784:	68fb      	ldr	r3, [r7, #12]
 8016786:	895b      	ldrh	r3, [r3, #10]
 8016788:	2b13      	cmp	r3, #19
 801678a:	d809      	bhi.n	80167a0 <ip4_frag+0x64>
 801678c:	4b88      	ldr	r3, [pc, #544]	; (80169b0 <ip4_frag+0x274>)
 801678e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8016792:	4988      	ldr	r1, [pc, #544]	; (80169b4 <ip4_frag+0x278>)
 8016794:	4888      	ldr	r0, [pc, #544]	; (80169b8 <ip4_frag+0x27c>)
 8016796:	f000 fc33 	bl	8017000 <iprintf>
 801679a:	f06f 0305 	mvn.w	r3, #5
 801679e:	e102      	b.n	80169a6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80167a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167a2:	88db      	ldrh	r3, [r3, #6]
 80167a4:	b29b      	uxth	r3, r3
 80167a6:	4618      	mov	r0, r3
 80167a8:	f7f5 f938 	bl	800ba1c <lwip_htons>
 80167ac:	4603      	mov	r3, r0
 80167ae:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80167b0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80167b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80167b6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80167ba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80167bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80167c0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80167c2:	68fb      	ldr	r3, [r7, #12]
 80167c4:	891b      	ldrh	r3, [r3, #8]
 80167c6:	3b14      	subs	r3, #20
 80167c8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80167cc:	e0e1      	b.n	8016992 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80167ce:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80167d0:	00db      	lsls	r3, r3, #3
 80167d2:	b29b      	uxth	r3, r3
 80167d4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80167d8:	4293      	cmp	r3, r2
 80167da:	bf28      	it	cs
 80167dc:	4613      	movcs	r3, r2
 80167de:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80167e0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80167e4:	2114      	movs	r1, #20
 80167e6:	200e      	movs	r0, #14
 80167e8:	f7f6 f9e0 	bl	800cbac <pbuf_alloc>
 80167ec:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80167ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	f000 80d5 	beq.w	80169a0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80167f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167f8:	895b      	ldrh	r3, [r3, #10]
 80167fa:	2b13      	cmp	r3, #19
 80167fc:	d806      	bhi.n	801680c <ip4_frag+0xd0>
 80167fe:	4b6c      	ldr	r3, [pc, #432]	; (80169b0 <ip4_frag+0x274>)
 8016800:	f44f 7249 	mov.w	r2, #804	; 0x324
 8016804:	496d      	ldr	r1, [pc, #436]	; (80169bc <ip4_frag+0x280>)
 8016806:	486c      	ldr	r0, [pc, #432]	; (80169b8 <ip4_frag+0x27c>)
 8016808:	f000 fbfa 	bl	8017000 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801680c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801680e:	685b      	ldr	r3, [r3, #4]
 8016810:	2214      	movs	r2, #20
 8016812:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016814:	4618      	mov	r0, r3
 8016816:	f000 fbc3 	bl	8016fa0 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801681a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801681c:	685b      	ldr	r3, [r3, #4]
 801681e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8016820:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016822:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8016826:	e064      	b.n	80168f2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016828:	68fb      	ldr	r3, [r7, #12]
 801682a:	895a      	ldrh	r2, [r3, #10]
 801682c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801682e:	1ad3      	subs	r3, r2, r3
 8016830:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016832:	68fb      	ldr	r3, [r7, #12]
 8016834:	895b      	ldrh	r3, [r3, #10]
 8016836:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016838:	429a      	cmp	r2, r3
 801683a:	d906      	bls.n	801684a <ip4_frag+0x10e>
 801683c:	4b5c      	ldr	r3, [pc, #368]	; (80169b0 <ip4_frag+0x274>)
 801683e:	f240 322d 	movw	r2, #813	; 0x32d
 8016842:	495f      	ldr	r1, [pc, #380]	; (80169c0 <ip4_frag+0x284>)
 8016844:	485c      	ldr	r0, [pc, #368]	; (80169b8 <ip4_frag+0x27c>)
 8016846:	f000 fbdb 	bl	8017000 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801684a:	8bfa      	ldrh	r2, [r7, #30]
 801684c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016850:	4293      	cmp	r3, r2
 8016852:	bf28      	it	cs
 8016854:	4613      	movcs	r3, r2
 8016856:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801685a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801685e:	2b00      	cmp	r3, #0
 8016860:	d105      	bne.n	801686e <ip4_frag+0x132>
        poff = 0;
 8016862:	2300      	movs	r3, #0
 8016864:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016866:	68fb      	ldr	r3, [r7, #12]
 8016868:	681b      	ldr	r3, [r3, #0]
 801686a:	60fb      	str	r3, [r7, #12]
        continue;
 801686c:	e041      	b.n	80168f2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801686e:	f7ff ff0d 	bl	801668c <ip_frag_alloc_pbuf_custom_ref>
 8016872:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016874:	69bb      	ldr	r3, [r7, #24]
 8016876:	2b00      	cmp	r3, #0
 8016878:	d103      	bne.n	8016882 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801687a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801687c:	f7f6 fcac 	bl	800d1d8 <pbuf_free>
        goto memerr;
 8016880:	e08f      	b.n	80169a2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016882:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016888:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801688a:	4413      	add	r3, r2
 801688c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8016890:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016894:	9201      	str	r2, [sp, #4]
 8016896:	9300      	str	r3, [sp, #0]
 8016898:	4603      	mov	r3, r0
 801689a:	2241      	movs	r2, #65	; 0x41
 801689c:	2000      	movs	r0, #0
 801689e:	f7f6 faaf 	bl	800ce00 <pbuf_alloced_custom>
 80168a2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80168a4:	697b      	ldr	r3, [r7, #20]
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	d106      	bne.n	80168b8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80168aa:	69b8      	ldr	r0, [r7, #24]
 80168ac:	f7ff fef6 	bl	801669c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80168b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80168b2:	f7f6 fc91 	bl	800d1d8 <pbuf_free>
        goto memerr;
 80168b6:	e074      	b.n	80169a2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80168b8:	68f8      	ldr	r0, [r7, #12]
 80168ba:	f7f6 fd33 	bl	800d324 <pbuf_ref>
      pcr->original = p;
 80168be:	69bb      	ldr	r3, [r7, #24]
 80168c0:	68fa      	ldr	r2, [r7, #12]
 80168c2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80168c4:	69bb      	ldr	r3, [r7, #24]
 80168c6:	4a3f      	ldr	r2, [pc, #252]	; (80169c4 <ip4_frag+0x288>)
 80168c8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80168ca:	6979      	ldr	r1, [r7, #20]
 80168cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80168ce:	f7f6 fd51 	bl	800d374 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80168d2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80168d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80168da:	1ad3      	subs	r3, r2, r3
 80168dc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80168e0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80168e4:	2b00      	cmp	r3, #0
 80168e6:	d004      	beq.n	80168f2 <ip4_frag+0x1b6>
        poff = 0;
 80168e8:	2300      	movs	r3, #0
 80168ea:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80168ec:	68fb      	ldr	r3, [r7, #12]
 80168ee:	681b      	ldr	r3, [r3, #0]
 80168f0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80168f2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	d196      	bne.n	8016828 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80168fa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80168fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016900:	4413      	add	r3, r2
 8016902:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016904:	68bb      	ldr	r3, [r7, #8]
 8016906:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016908:	f1a3 0213 	sub.w	r2, r3, #19
 801690c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016910:	429a      	cmp	r2, r3
 8016912:	bfcc      	ite	gt
 8016914:	2301      	movgt	r3, #1
 8016916:	2300      	movle	r3, #0
 8016918:	b2db      	uxtb	r3, r3
 801691a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801691c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016920:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016924:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8016926:	6a3b      	ldr	r3, [r7, #32]
 8016928:	2b00      	cmp	r3, #0
 801692a:	d002      	beq.n	8016932 <ip4_frag+0x1f6>
 801692c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801692e:	2b00      	cmp	r3, #0
 8016930:	d003      	beq.n	801693a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016932:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016934:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016938:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801693a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801693c:	4618      	mov	r0, r3
 801693e:	f7f5 f86d 	bl	800ba1c <lwip_htons>
 8016942:	4603      	mov	r3, r0
 8016944:	461a      	mov	r2, r3
 8016946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016948:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801694a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801694c:	3314      	adds	r3, #20
 801694e:	b29b      	uxth	r3, r3
 8016950:	4618      	mov	r0, r3
 8016952:	f7f5 f863 	bl	800ba1c <lwip_htons>
 8016956:	4603      	mov	r3, r0
 8016958:	461a      	mov	r2, r3
 801695a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801695c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801695e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016960:	2200      	movs	r2, #0
 8016962:	729a      	strb	r2, [r3, #10]
 8016964:	2200      	movs	r2, #0
 8016966:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016968:	68bb      	ldr	r3, [r7, #8]
 801696a:	695b      	ldr	r3, [r3, #20]
 801696c:	687a      	ldr	r2, [r7, #4]
 801696e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016970:	68b8      	ldr	r0, [r7, #8]
 8016972:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016974:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016976:	f7f6 fc2f 	bl	800d1d8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801697a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801697e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016980:	1ad3      	subs	r3, r2, r3
 8016982:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8016986:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801698a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801698c:	4413      	add	r3, r2
 801698e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8016992:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016996:	2b00      	cmp	r3, #0
 8016998:	f47f af19 	bne.w	80167ce <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801699c:	2300      	movs	r3, #0
 801699e:	e002      	b.n	80169a6 <ip4_frag+0x26a>
      goto memerr;
 80169a0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80169a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80169a6:	4618      	mov	r0, r3
 80169a8:	3748      	adds	r7, #72	; 0x48
 80169aa:	46bd      	mov	sp, r7
 80169ac:	bd80      	pop	{r7, pc}
 80169ae:	bf00      	nop
 80169b0:	0801bbac 	.word	0x0801bbac
 80169b4:	0801bd88 	.word	0x0801bd88
 80169b8:	0801bbf4 	.word	0x0801bbf4
 80169bc:	0801bda4 	.word	0x0801bda4
 80169c0:	0801bdc4 	.word	0x0801bdc4
 80169c4:	080166d5 	.word	0x080166d5

080169c8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80169c8:	b580      	push	{r7, lr}
 80169ca:	b086      	sub	sp, #24
 80169cc:	af00      	add	r7, sp, #0
 80169ce:	6078      	str	r0, [r7, #4]
 80169d0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80169d2:	230e      	movs	r3, #14
 80169d4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	895b      	ldrh	r3, [r3, #10]
 80169da:	2b0e      	cmp	r3, #14
 80169dc:	d96e      	bls.n	8016abc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	7bdb      	ldrb	r3, [r3, #15]
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	d106      	bne.n	80169f4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80169e6:	683b      	ldr	r3, [r7, #0]
 80169e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80169ec:	3301      	adds	r3, #1
 80169ee:	b2da      	uxtb	r2, r3
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	685b      	ldr	r3, [r3, #4]
 80169f8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80169fa:	693b      	ldr	r3, [r7, #16]
 80169fc:	7b1a      	ldrb	r2, [r3, #12]
 80169fe:	7b5b      	ldrb	r3, [r3, #13]
 8016a00:	021b      	lsls	r3, r3, #8
 8016a02:	4313      	orrs	r3, r2
 8016a04:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016a06:	693b      	ldr	r3, [r7, #16]
 8016a08:	781b      	ldrb	r3, [r3, #0]
 8016a0a:	f003 0301 	and.w	r3, r3, #1
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d023      	beq.n	8016a5a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016a12:	693b      	ldr	r3, [r7, #16]
 8016a14:	781b      	ldrb	r3, [r3, #0]
 8016a16:	2b01      	cmp	r3, #1
 8016a18:	d10f      	bne.n	8016a3a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016a1a:	693b      	ldr	r3, [r7, #16]
 8016a1c:	785b      	ldrb	r3, [r3, #1]
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	d11b      	bne.n	8016a5a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016a22:	693b      	ldr	r3, [r7, #16]
 8016a24:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016a26:	2b5e      	cmp	r3, #94	; 0x5e
 8016a28:	d117      	bne.n	8016a5a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	7b5b      	ldrb	r3, [r3, #13]
 8016a2e:	f043 0310 	orr.w	r3, r3, #16
 8016a32:	b2da      	uxtb	r2, r3
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	735a      	strb	r2, [r3, #13]
 8016a38:	e00f      	b.n	8016a5a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016a3a:	693b      	ldr	r3, [r7, #16]
 8016a3c:	2206      	movs	r2, #6
 8016a3e:	4928      	ldr	r1, [pc, #160]	; (8016ae0 <ethernet_input+0x118>)
 8016a40:	4618      	mov	r0, r3
 8016a42:	f000 fa9d 	bl	8016f80 <memcmp>
 8016a46:	4603      	mov	r3, r0
 8016a48:	2b00      	cmp	r3, #0
 8016a4a:	d106      	bne.n	8016a5a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	7b5b      	ldrb	r3, [r3, #13]
 8016a50:	f043 0308 	orr.w	r3, r3, #8
 8016a54:	b2da      	uxtb	r2, r3
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016a5a:	89fb      	ldrh	r3, [r7, #14]
 8016a5c:	2b08      	cmp	r3, #8
 8016a5e:	d003      	beq.n	8016a68 <ethernet_input+0xa0>
 8016a60:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016a64:	d014      	beq.n	8016a90 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016a66:	e032      	b.n	8016ace <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016a68:	683b      	ldr	r3, [r7, #0]
 8016a6a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016a6e:	f003 0308 	and.w	r3, r3, #8
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d024      	beq.n	8016ac0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016a76:	8afb      	ldrh	r3, [r7, #22]
 8016a78:	4619      	mov	r1, r3
 8016a7a:	6878      	ldr	r0, [r7, #4]
 8016a7c:	f7f6 faf4 	bl	800d068 <pbuf_remove_header>
 8016a80:	4603      	mov	r3, r0
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d11e      	bne.n	8016ac4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016a86:	6839      	ldr	r1, [r7, #0]
 8016a88:	6878      	ldr	r0, [r7, #4]
 8016a8a:	f7fe fde3 	bl	8015654 <ip4_input>
      break;
 8016a8e:	e013      	b.n	8016ab8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016a90:	683b      	ldr	r3, [r7, #0]
 8016a92:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016a96:	f003 0308 	and.w	r3, r3, #8
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d014      	beq.n	8016ac8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016a9e:	8afb      	ldrh	r3, [r7, #22]
 8016aa0:	4619      	mov	r1, r3
 8016aa2:	6878      	ldr	r0, [r7, #4]
 8016aa4:	f7f6 fae0 	bl	800d068 <pbuf_remove_header>
 8016aa8:	4603      	mov	r3, r0
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d10e      	bne.n	8016acc <ethernet_input+0x104>
        etharp_input(p, netif);
 8016aae:	6839      	ldr	r1, [r7, #0]
 8016ab0:	6878      	ldr	r0, [r7, #4]
 8016ab2:	f7fd ff83 	bl	80149bc <etharp_input>
      break;
 8016ab6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016ab8:	2300      	movs	r3, #0
 8016aba:	e00c      	b.n	8016ad6 <ethernet_input+0x10e>
    goto free_and_return;
 8016abc:	bf00      	nop
 8016abe:	e006      	b.n	8016ace <ethernet_input+0x106>
        goto free_and_return;
 8016ac0:	bf00      	nop
 8016ac2:	e004      	b.n	8016ace <ethernet_input+0x106>
        goto free_and_return;
 8016ac4:	bf00      	nop
 8016ac6:	e002      	b.n	8016ace <ethernet_input+0x106>
        goto free_and_return;
 8016ac8:	bf00      	nop
 8016aca:	e000      	b.n	8016ace <ethernet_input+0x106>
        goto free_and_return;
 8016acc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016ace:	6878      	ldr	r0, [r7, #4]
 8016ad0:	f7f6 fb82 	bl	800d1d8 <pbuf_free>
  return ERR_OK;
 8016ad4:	2300      	movs	r3, #0
}
 8016ad6:	4618      	mov	r0, r3
 8016ad8:	3718      	adds	r7, #24
 8016ada:	46bd      	mov	sp, r7
 8016adc:	bd80      	pop	{r7, pc}
 8016ade:	bf00      	nop
 8016ae0:	0801bfdc 	.word	0x0801bfdc

08016ae4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016ae4:	b580      	push	{r7, lr}
 8016ae6:	b086      	sub	sp, #24
 8016ae8:	af00      	add	r7, sp, #0
 8016aea:	60f8      	str	r0, [r7, #12]
 8016aec:	60b9      	str	r1, [r7, #8]
 8016aee:	607a      	str	r2, [r7, #4]
 8016af0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016af2:	8c3b      	ldrh	r3, [r7, #32]
 8016af4:	4618      	mov	r0, r3
 8016af6:	f7f4 ff91 	bl	800ba1c <lwip_htons>
 8016afa:	4603      	mov	r3, r0
 8016afc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016afe:	210e      	movs	r1, #14
 8016b00:	68b8      	ldr	r0, [r7, #8]
 8016b02:	f7f6 faa1 	bl	800d048 <pbuf_add_header>
 8016b06:	4603      	mov	r3, r0
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d125      	bne.n	8016b58 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016b0c:	68bb      	ldr	r3, [r7, #8]
 8016b0e:	685b      	ldr	r3, [r3, #4]
 8016b10:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016b12:	693b      	ldr	r3, [r7, #16]
 8016b14:	8afa      	ldrh	r2, [r7, #22]
 8016b16:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016b18:	693b      	ldr	r3, [r7, #16]
 8016b1a:	2206      	movs	r2, #6
 8016b1c:	6839      	ldr	r1, [r7, #0]
 8016b1e:	4618      	mov	r0, r3
 8016b20:	f000 fa3e 	bl	8016fa0 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016b24:	693b      	ldr	r3, [r7, #16]
 8016b26:	3306      	adds	r3, #6
 8016b28:	2206      	movs	r2, #6
 8016b2a:	6879      	ldr	r1, [r7, #4]
 8016b2c:	4618      	mov	r0, r3
 8016b2e:	f000 fa37 	bl	8016fa0 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016b32:	68fb      	ldr	r3, [r7, #12]
 8016b34:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016b38:	2b06      	cmp	r3, #6
 8016b3a:	d006      	beq.n	8016b4a <ethernet_output+0x66>
 8016b3c:	4b0a      	ldr	r3, [pc, #40]	; (8016b68 <ethernet_output+0x84>)
 8016b3e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8016b42:	490a      	ldr	r1, [pc, #40]	; (8016b6c <ethernet_output+0x88>)
 8016b44:	480a      	ldr	r0, [pc, #40]	; (8016b70 <ethernet_output+0x8c>)
 8016b46:	f000 fa5b 	bl	8017000 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016b4a:	68fb      	ldr	r3, [r7, #12]
 8016b4c:	699b      	ldr	r3, [r3, #24]
 8016b4e:	68b9      	ldr	r1, [r7, #8]
 8016b50:	68f8      	ldr	r0, [r7, #12]
 8016b52:	4798      	blx	r3
 8016b54:	4603      	mov	r3, r0
 8016b56:	e002      	b.n	8016b5e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016b58:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016b5a:	f06f 0301 	mvn.w	r3, #1
}
 8016b5e:	4618      	mov	r0, r3
 8016b60:	3718      	adds	r7, #24
 8016b62:	46bd      	mov	sp, r7
 8016b64:	bd80      	pop	{r7, pc}
 8016b66:	bf00      	nop
 8016b68:	0801bdd4 	.word	0x0801bdd4
 8016b6c:	0801be0c 	.word	0x0801be0c
 8016b70:	0801be40 	.word	0x0801be40

08016b74 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8016b74:	b580      	push	{r7, lr}
 8016b76:	b086      	sub	sp, #24
 8016b78:	af00      	add	r7, sp, #0
 8016b7a:	6078      	str	r0, [r7, #4]
 8016b7c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8016b7e:	683b      	ldr	r3, [r7, #0]
 8016b80:	60bb      	str	r3, [r7, #8]
 8016b82:	2304      	movs	r3, #4
 8016b84:	60fb      	str	r3, [r7, #12]
 8016b86:	2300      	movs	r3, #0
 8016b88:	613b      	str	r3, [r7, #16]
 8016b8a:	2300      	movs	r3, #0
 8016b8c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8016b8e:	f107 0308 	add.w	r3, r7, #8
 8016b92:	2100      	movs	r1, #0
 8016b94:	4618      	mov	r0, r3
 8016b96:	f7ee fa9e 	bl	80050d6 <osMessageCreate>
 8016b9a:	4602      	mov	r2, r0
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	681b      	ldr	r3, [r3, #0]
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d102      	bne.n	8016bae <sys_mbox_new+0x3a>
    return ERR_MEM;
 8016ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8016bac:	e000      	b.n	8016bb0 <sys_mbox_new+0x3c>

  return ERR_OK;
 8016bae:	2300      	movs	r3, #0
}
 8016bb0:	4618      	mov	r0, r3
 8016bb2:	3718      	adds	r7, #24
 8016bb4:	46bd      	mov	sp, r7
 8016bb6:	bd80      	pop	{r7, pc}

08016bb8 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8016bb8:	b580      	push	{r7, lr}
 8016bba:	b082      	sub	sp, #8
 8016bbc:	af00      	add	r7, sp, #0
 8016bbe:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	681b      	ldr	r3, [r3, #0]
 8016bc4:	4618      	mov	r0, r3
 8016bc6:	f7ee fb63 	bl	8005290 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	681b      	ldr	r3, [r3, #0]
 8016bce:	4618      	mov	r0, r3
 8016bd0:	f7ee fb74 	bl	80052bc <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8016bd4:	bf00      	nop
 8016bd6:	3708      	adds	r7, #8
 8016bd8:	46bd      	mov	sp, r7
 8016bda:	bd80      	pop	{r7, pc}

08016bdc <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8016bdc:	b580      	push	{r7, lr}
 8016bde:	b084      	sub	sp, #16
 8016be0:	af00      	add	r7, sp, #0
 8016be2:	6078      	str	r0, [r7, #4]
 8016be4:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	681b      	ldr	r3, [r3, #0]
 8016bea:	6839      	ldr	r1, [r7, #0]
 8016bec:	2200      	movs	r2, #0
 8016bee:	4618      	mov	r0, r3
 8016bf0:	f7ee fa9a 	bl	8005128 <osMessagePut>
 8016bf4:	4603      	mov	r3, r0
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d102      	bne.n	8016c00 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8016bfa:	2300      	movs	r3, #0
 8016bfc:	73fb      	strb	r3, [r7, #15]
 8016bfe:	e001      	b.n	8016c04 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8016c00:	23ff      	movs	r3, #255	; 0xff
 8016c02:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8016c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016c08:	4618      	mov	r0, r3
 8016c0a:	3710      	adds	r7, #16
 8016c0c:	46bd      	mov	sp, r7
 8016c0e:	bd80      	pop	{r7, pc}

08016c10 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8016c10:	b580      	push	{r7, lr}
 8016c12:	b08c      	sub	sp, #48	; 0x30
 8016c14:	af00      	add	r7, sp, #0
 8016c16:	61f8      	str	r0, [r7, #28]
 8016c18:	61b9      	str	r1, [r7, #24]
 8016c1a:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8016c1c:	f7ee f886 	bl	8004d2c <osKernelSysTick>
 8016c20:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8016c22:	697b      	ldr	r3, [r7, #20]
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	d017      	beq.n	8016c58 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8016c28:	69fb      	ldr	r3, [r7, #28]
 8016c2a:	6819      	ldr	r1, [r3, #0]
 8016c2c:	f107 0320 	add.w	r3, r7, #32
 8016c30:	697a      	ldr	r2, [r7, #20]
 8016c32:	4618      	mov	r0, r3
 8016c34:	f7ee fab8 	bl	80051a8 <osMessageGet>

    if(event.status == osEventMessage)
 8016c38:	6a3b      	ldr	r3, [r7, #32]
 8016c3a:	2b10      	cmp	r3, #16
 8016c3c:	d109      	bne.n	8016c52 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8016c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c40:	461a      	mov	r2, r3
 8016c42:	69bb      	ldr	r3, [r7, #24]
 8016c44:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8016c46:	f7ee f871 	bl	8004d2c <osKernelSysTick>
 8016c4a:	4602      	mov	r2, r0
 8016c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c4e:	1ad3      	subs	r3, r2, r3
 8016c50:	e019      	b.n	8016c86 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016c52:	f04f 33ff 	mov.w	r3, #4294967295
 8016c56:	e016      	b.n	8016c86 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8016c58:	69fb      	ldr	r3, [r7, #28]
 8016c5a:	6819      	ldr	r1, [r3, #0]
 8016c5c:	463b      	mov	r3, r7
 8016c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8016c62:	4618      	mov	r0, r3
 8016c64:	f7ee faa0 	bl	80051a8 <osMessageGet>
 8016c68:	f107 0320 	add.w	r3, r7, #32
 8016c6c:	463a      	mov	r2, r7
 8016c6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8016c70:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8016c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c76:	461a      	mov	r2, r3
 8016c78:	69bb      	ldr	r3, [r7, #24]
 8016c7a:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8016c7c:	f7ee f856 	bl	8004d2c <osKernelSysTick>
 8016c80:	4602      	mov	r2, r0
 8016c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c84:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8016c86:	4618      	mov	r0, r3
 8016c88:	3730      	adds	r7, #48	; 0x30
 8016c8a:	46bd      	mov	sp, r7
 8016c8c:	bd80      	pop	{r7, pc}

08016c8e <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8016c8e:	b580      	push	{r7, lr}
 8016c90:	b086      	sub	sp, #24
 8016c92:	af00      	add	r7, sp, #0
 8016c94:	6078      	str	r0, [r7, #4]
 8016c96:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	6819      	ldr	r1, [r3, #0]
 8016c9c:	f107 030c 	add.w	r3, r7, #12
 8016ca0:	2200      	movs	r2, #0
 8016ca2:	4618      	mov	r0, r3
 8016ca4:	f7ee fa80 	bl	80051a8 <osMessageGet>

  if(event.status == osEventMessage)
 8016ca8:	68fb      	ldr	r3, [r7, #12]
 8016caa:	2b10      	cmp	r3, #16
 8016cac:	d105      	bne.n	8016cba <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8016cae:	693b      	ldr	r3, [r7, #16]
 8016cb0:	461a      	mov	r2, r3
 8016cb2:	683b      	ldr	r3, [r7, #0]
 8016cb4:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8016cb6:	2300      	movs	r3, #0
 8016cb8:	e001      	b.n	8016cbe <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8016cba:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8016cbe:	4618      	mov	r0, r3
 8016cc0:	3718      	adds	r7, #24
 8016cc2:	46bd      	mov	sp, r7
 8016cc4:	bd80      	pop	{r7, pc}

08016cc6 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8016cc6:	b480      	push	{r7}
 8016cc8:	b083      	sub	sp, #12
 8016cca:	af00      	add	r7, sp, #0
 8016ccc:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8016cce:	687b      	ldr	r3, [r7, #4]
 8016cd0:	681b      	ldr	r3, [r3, #0]
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d101      	bne.n	8016cda <sys_mbox_valid+0x14>
    return 0;
 8016cd6:	2300      	movs	r3, #0
 8016cd8:	e000      	b.n	8016cdc <sys_mbox_valid+0x16>
  else
    return 1;
 8016cda:	2301      	movs	r3, #1
}
 8016cdc:	4618      	mov	r0, r3
 8016cde:	370c      	adds	r7, #12
 8016ce0:	46bd      	mov	sp, r7
 8016ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ce6:	4770      	bx	lr

08016ce8 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8016ce8:	b480      	push	{r7}
 8016cea:	b083      	sub	sp, #12
 8016cec:	af00      	add	r7, sp, #0
 8016cee:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	2200      	movs	r2, #0
 8016cf4:	601a      	str	r2, [r3, #0]
}
 8016cf6:	bf00      	nop
 8016cf8:	370c      	adds	r7, #12
 8016cfa:	46bd      	mov	sp, r7
 8016cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d00:	4770      	bx	lr

08016d02 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8016d02:	b580      	push	{r7, lr}
 8016d04:	b084      	sub	sp, #16
 8016d06:	af00      	add	r7, sp, #0
 8016d08:	6078      	str	r0, [r7, #4]
 8016d0a:	460b      	mov	r3, r1
 8016d0c:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8016d0e:	2300      	movs	r3, #0
 8016d10:	60bb      	str	r3, [r7, #8]
 8016d12:	2300      	movs	r3, #0
 8016d14:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8016d16:	f107 0308 	add.w	r3, r7, #8
 8016d1a:	2101      	movs	r1, #1
 8016d1c:	4618      	mov	r0, r3
 8016d1e:	f7ee f911 	bl	8004f44 <osSemaphoreCreate>
 8016d22:	4602      	mov	r2, r0
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	681b      	ldr	r3, [r3, #0]
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	d102      	bne.n	8016d36 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016d30:	f04f 33ff 	mov.w	r3, #4294967295
 8016d34:	e009      	b.n	8016d4a <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8016d36:	78fb      	ldrb	r3, [r7, #3]
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d105      	bne.n	8016d48 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	681b      	ldr	r3, [r3, #0]
 8016d40:	2100      	movs	r1, #0
 8016d42:	4618      	mov	r0, r3
 8016d44:	f7ee f930 	bl	8004fa8 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8016d48:	2300      	movs	r3, #0
}
 8016d4a:	4618      	mov	r0, r3
 8016d4c:	3710      	adds	r7, #16
 8016d4e:	46bd      	mov	sp, r7
 8016d50:	bd80      	pop	{r7, pc}

08016d52 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8016d52:	b580      	push	{r7, lr}
 8016d54:	b084      	sub	sp, #16
 8016d56:	af00      	add	r7, sp, #0
 8016d58:	6078      	str	r0, [r7, #4]
 8016d5a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8016d5c:	f7ed ffe6 	bl	8004d2c <osKernelSysTick>
 8016d60:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8016d62:	683b      	ldr	r3, [r7, #0]
 8016d64:	2b00      	cmp	r3, #0
 8016d66:	d011      	beq.n	8016d8c <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	681b      	ldr	r3, [r3, #0]
 8016d6c:	6839      	ldr	r1, [r7, #0]
 8016d6e:	4618      	mov	r0, r3
 8016d70:	f7ee f91a 	bl	8004fa8 <osSemaphoreWait>
 8016d74:	4603      	mov	r3, r0
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	d105      	bne.n	8016d86 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8016d7a:	f7ed ffd7 	bl	8004d2c <osKernelSysTick>
 8016d7e:	4602      	mov	r2, r0
 8016d80:	68fb      	ldr	r3, [r7, #12]
 8016d82:	1ad3      	subs	r3, r2, r3
 8016d84:	e012      	b.n	8016dac <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016d86:	f04f 33ff 	mov.w	r3, #4294967295
 8016d8a:	e00f      	b.n	8016dac <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8016d8c:	bf00      	nop
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	681b      	ldr	r3, [r3, #0]
 8016d92:	f04f 31ff 	mov.w	r1, #4294967295
 8016d96:	4618      	mov	r0, r3
 8016d98:	f7ee f906 	bl	8004fa8 <osSemaphoreWait>
 8016d9c:	4603      	mov	r3, r0
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	d1f5      	bne.n	8016d8e <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8016da2:	f7ed ffc3 	bl	8004d2c <osKernelSysTick>
 8016da6:	4602      	mov	r2, r0
 8016da8:	68fb      	ldr	r3, [r7, #12]
 8016daa:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8016dac:	4618      	mov	r0, r3
 8016dae:	3710      	adds	r7, #16
 8016db0:	46bd      	mov	sp, r7
 8016db2:	bd80      	pop	{r7, pc}

08016db4 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8016db4:	b580      	push	{r7, lr}
 8016db6:	b082      	sub	sp, #8
 8016db8:	af00      	add	r7, sp, #0
 8016dba:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	681b      	ldr	r3, [r3, #0]
 8016dc0:	4618      	mov	r0, r3
 8016dc2:	f7ee f93f 	bl	8005044 <osSemaphoreRelease>
}
 8016dc6:	bf00      	nop
 8016dc8:	3708      	adds	r7, #8
 8016dca:	46bd      	mov	sp, r7
 8016dcc:	bd80      	pop	{r7, pc}

08016dce <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8016dce:	b580      	push	{r7, lr}
 8016dd0:	b082      	sub	sp, #8
 8016dd2:	af00      	add	r7, sp, #0
 8016dd4:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	681b      	ldr	r3, [r3, #0]
 8016dda:	4618      	mov	r0, r3
 8016ddc:	f7ee f968 	bl	80050b0 <osSemaphoreDelete>
}
 8016de0:	bf00      	nop
 8016de2:	3708      	adds	r7, #8
 8016de4:	46bd      	mov	sp, r7
 8016de6:	bd80      	pop	{r7, pc}

08016de8 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8016de8:	b480      	push	{r7}
 8016dea:	b083      	sub	sp, #12
 8016dec:	af00      	add	r7, sp, #0
 8016dee:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	681b      	ldr	r3, [r3, #0]
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d101      	bne.n	8016dfc <sys_sem_valid+0x14>
    return 0;
 8016df8:	2300      	movs	r3, #0
 8016dfa:	e000      	b.n	8016dfe <sys_sem_valid+0x16>
  else
    return 1;
 8016dfc:	2301      	movs	r3, #1
}
 8016dfe:	4618      	mov	r0, r3
 8016e00:	370c      	adds	r7, #12
 8016e02:	46bd      	mov	sp, r7
 8016e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e08:	4770      	bx	lr

08016e0a <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8016e0a:	b480      	push	{r7}
 8016e0c:	b083      	sub	sp, #12
 8016e0e:	af00      	add	r7, sp, #0
 8016e10:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	2200      	movs	r2, #0
 8016e16:	601a      	str	r2, [r3, #0]
}
 8016e18:	bf00      	nop
 8016e1a:	370c      	adds	r7, #12
 8016e1c:	46bd      	mov	sp, r7
 8016e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e22:	4770      	bx	lr

08016e24 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8016e24:	b580      	push	{r7, lr}
 8016e26:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8016e28:	4803      	ldr	r0, [pc, #12]	; (8016e38 <sys_init+0x14>)
 8016e2a:	f7ed ffef 	bl	8004e0c <osMutexCreate>
 8016e2e:	4603      	mov	r3, r0
 8016e30:	4a02      	ldr	r2, [pc, #8]	; (8016e3c <sys_init+0x18>)
 8016e32:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8016e34:	bf00      	nop
 8016e36:	bd80      	pop	{r7, pc}
 8016e38:	0801bfec 	.word	0x0801bfec
 8016e3c:	2000d2a4 	.word	0x2000d2a4

08016e40 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8016e40:	b580      	push	{r7, lr}
 8016e42:	b084      	sub	sp, #16
 8016e44:	af00      	add	r7, sp, #0
 8016e46:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8016e48:	2300      	movs	r3, #0
 8016e4a:	60bb      	str	r3, [r7, #8]
 8016e4c:	2300      	movs	r3, #0
 8016e4e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8016e50:	f107 0308 	add.w	r3, r7, #8
 8016e54:	4618      	mov	r0, r3
 8016e56:	f7ed ffd9 	bl	8004e0c <osMutexCreate>
 8016e5a:	4602      	mov	r2, r0
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	681b      	ldr	r3, [r3, #0]
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	d102      	bne.n	8016e6e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016e68:	f04f 33ff 	mov.w	r3, #4294967295
 8016e6c:	e000      	b.n	8016e70 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8016e6e:	2300      	movs	r3, #0
}
 8016e70:	4618      	mov	r0, r3
 8016e72:	3710      	adds	r7, #16
 8016e74:	46bd      	mov	sp, r7
 8016e76:	bd80      	pop	{r7, pc}

08016e78 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8016e78:	b580      	push	{r7, lr}
 8016e7a:	b082      	sub	sp, #8
 8016e7c:	af00      	add	r7, sp, #0
 8016e7e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	681b      	ldr	r3, [r3, #0]
 8016e84:	f04f 31ff 	mov.w	r1, #4294967295
 8016e88:	4618      	mov	r0, r3
 8016e8a:	f7ed ffd7 	bl	8004e3c <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8016e8e:	bf00      	nop
 8016e90:	3708      	adds	r7, #8
 8016e92:	46bd      	mov	sp, r7
 8016e94:	bd80      	pop	{r7, pc}

08016e96 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8016e96:	b580      	push	{r7, lr}
 8016e98:	b082      	sub	sp, #8
 8016e9a:	af00      	add	r7, sp, #0
 8016e9c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	681b      	ldr	r3, [r3, #0]
 8016ea2:	4618      	mov	r0, r3
 8016ea4:	f7ee f818 	bl	8004ed8 <osMutexRelease>
}
 8016ea8:	bf00      	nop
 8016eaa:	3708      	adds	r7, #8
 8016eac:	46bd      	mov	sp, r7
 8016eae:	bd80      	pop	{r7, pc}

08016eb0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8016eb0:	b580      	push	{r7, lr}
 8016eb2:	b08c      	sub	sp, #48	; 0x30
 8016eb4:	af00      	add	r7, sp, #0
 8016eb6:	60f8      	str	r0, [r7, #12]
 8016eb8:	60b9      	str	r1, [r7, #8]
 8016eba:	607a      	str	r2, [r7, #4]
 8016ebc:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8016ebe:	f107 0314 	add.w	r3, r7, #20
 8016ec2:	2200      	movs	r2, #0
 8016ec4:	601a      	str	r2, [r3, #0]
 8016ec6:	605a      	str	r2, [r3, #4]
 8016ec8:	609a      	str	r2, [r3, #8]
 8016eca:	60da      	str	r2, [r3, #12]
 8016ecc:	611a      	str	r2, [r3, #16]
 8016ece:	615a      	str	r2, [r3, #20]
 8016ed0:	619a      	str	r2, [r3, #24]
 8016ed2:	68fb      	ldr	r3, [r7, #12]
 8016ed4:	617b      	str	r3, [r7, #20]
 8016ed6:	68bb      	ldr	r3, [r7, #8]
 8016ed8:	61bb      	str	r3, [r7, #24]
 8016eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016edc:	b21b      	sxth	r3, r3
 8016ede:	83bb      	strh	r3, [r7, #28]
 8016ee0:	683b      	ldr	r3, [r7, #0]
 8016ee2:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8016ee4:	f107 0314 	add.w	r3, r7, #20
 8016ee8:	6879      	ldr	r1, [r7, #4]
 8016eea:	4618      	mov	r0, r3
 8016eec:	f7ed ff2e 	bl	8004d4c <osThreadCreate>
 8016ef0:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8016ef2:	4618      	mov	r0, r3
 8016ef4:	3730      	adds	r7, #48	; 0x30
 8016ef6:	46bd      	mov	sp, r7
 8016ef8:	bd80      	pop	{r7, pc}
	...

08016efc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8016efc:	b580      	push	{r7, lr}
 8016efe:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8016f00:	4b04      	ldr	r3, [pc, #16]	; (8016f14 <sys_arch_protect+0x18>)
 8016f02:	681b      	ldr	r3, [r3, #0]
 8016f04:	f04f 31ff 	mov.w	r1, #4294967295
 8016f08:	4618      	mov	r0, r3
 8016f0a:	f7ed ff97 	bl	8004e3c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8016f0e:	2301      	movs	r3, #1
}
 8016f10:	4618      	mov	r0, r3
 8016f12:	bd80      	pop	{r7, pc}
 8016f14:	2000d2a4 	.word	0x2000d2a4

08016f18 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8016f18:	b580      	push	{r7, lr}
 8016f1a:	b082      	sub	sp, #8
 8016f1c:	af00      	add	r7, sp, #0
 8016f1e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8016f20:	4b04      	ldr	r3, [pc, #16]	; (8016f34 <sys_arch_unprotect+0x1c>)
 8016f22:	681b      	ldr	r3, [r3, #0]
 8016f24:	4618      	mov	r0, r3
 8016f26:	f7ed ffd7 	bl	8004ed8 <osMutexRelease>
}
 8016f2a:	bf00      	nop
 8016f2c:	3708      	adds	r7, #8
 8016f2e:	46bd      	mov	sp, r7
 8016f30:	bd80      	pop	{r7, pc}
 8016f32:	bf00      	nop
 8016f34:	2000d2a4 	.word	0x2000d2a4

08016f38 <__libc_init_array>:
 8016f38:	b570      	push	{r4, r5, r6, lr}
 8016f3a:	4d0d      	ldr	r5, [pc, #52]	; (8016f70 <__libc_init_array+0x38>)
 8016f3c:	4c0d      	ldr	r4, [pc, #52]	; (8016f74 <__libc_init_array+0x3c>)
 8016f3e:	1b64      	subs	r4, r4, r5
 8016f40:	10a4      	asrs	r4, r4, #2
 8016f42:	2600      	movs	r6, #0
 8016f44:	42a6      	cmp	r6, r4
 8016f46:	d109      	bne.n	8016f5c <__libc_init_array+0x24>
 8016f48:	4d0b      	ldr	r5, [pc, #44]	; (8016f78 <__libc_init_array+0x40>)
 8016f4a:	4c0c      	ldr	r4, [pc, #48]	; (8016f7c <__libc_init_array+0x44>)
 8016f4c:	f001 fa5c 	bl	8018408 <_init>
 8016f50:	1b64      	subs	r4, r4, r5
 8016f52:	10a4      	asrs	r4, r4, #2
 8016f54:	2600      	movs	r6, #0
 8016f56:	42a6      	cmp	r6, r4
 8016f58:	d105      	bne.n	8016f66 <__libc_init_array+0x2e>
 8016f5a:	bd70      	pop	{r4, r5, r6, pc}
 8016f5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016f60:	4798      	blx	r3
 8016f62:	3601      	adds	r6, #1
 8016f64:	e7ee      	b.n	8016f44 <__libc_init_array+0xc>
 8016f66:	f855 3b04 	ldr.w	r3, [r5], #4
 8016f6a:	4798      	blx	r3
 8016f6c:	3601      	adds	r6, #1
 8016f6e:	e7f2      	b.n	8016f56 <__libc_init_array+0x1e>
 8016f70:	0801c248 	.word	0x0801c248
 8016f74:	0801c248 	.word	0x0801c248
 8016f78:	0801c248 	.word	0x0801c248
 8016f7c:	0801c24c 	.word	0x0801c24c

08016f80 <memcmp>:
 8016f80:	b510      	push	{r4, lr}
 8016f82:	3901      	subs	r1, #1
 8016f84:	4402      	add	r2, r0
 8016f86:	4290      	cmp	r0, r2
 8016f88:	d101      	bne.n	8016f8e <memcmp+0xe>
 8016f8a:	2000      	movs	r0, #0
 8016f8c:	e005      	b.n	8016f9a <memcmp+0x1a>
 8016f8e:	7803      	ldrb	r3, [r0, #0]
 8016f90:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016f94:	42a3      	cmp	r3, r4
 8016f96:	d001      	beq.n	8016f9c <memcmp+0x1c>
 8016f98:	1b18      	subs	r0, r3, r4
 8016f9a:	bd10      	pop	{r4, pc}
 8016f9c:	3001      	adds	r0, #1
 8016f9e:	e7f2      	b.n	8016f86 <memcmp+0x6>

08016fa0 <memcpy>:
 8016fa0:	440a      	add	r2, r1
 8016fa2:	4291      	cmp	r1, r2
 8016fa4:	f100 33ff 	add.w	r3, r0, #4294967295
 8016fa8:	d100      	bne.n	8016fac <memcpy+0xc>
 8016faa:	4770      	bx	lr
 8016fac:	b510      	push	{r4, lr}
 8016fae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016fb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016fb6:	4291      	cmp	r1, r2
 8016fb8:	d1f9      	bne.n	8016fae <memcpy+0xe>
 8016fba:	bd10      	pop	{r4, pc}

08016fbc <memmove>:
 8016fbc:	4288      	cmp	r0, r1
 8016fbe:	b510      	push	{r4, lr}
 8016fc0:	eb01 0402 	add.w	r4, r1, r2
 8016fc4:	d902      	bls.n	8016fcc <memmove+0x10>
 8016fc6:	4284      	cmp	r4, r0
 8016fc8:	4623      	mov	r3, r4
 8016fca:	d807      	bhi.n	8016fdc <memmove+0x20>
 8016fcc:	1e43      	subs	r3, r0, #1
 8016fce:	42a1      	cmp	r1, r4
 8016fd0:	d008      	beq.n	8016fe4 <memmove+0x28>
 8016fd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016fd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016fda:	e7f8      	b.n	8016fce <memmove+0x12>
 8016fdc:	4402      	add	r2, r0
 8016fde:	4601      	mov	r1, r0
 8016fe0:	428a      	cmp	r2, r1
 8016fe2:	d100      	bne.n	8016fe6 <memmove+0x2a>
 8016fe4:	bd10      	pop	{r4, pc}
 8016fe6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016fea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016fee:	e7f7      	b.n	8016fe0 <memmove+0x24>

08016ff0 <memset>:
 8016ff0:	4402      	add	r2, r0
 8016ff2:	4603      	mov	r3, r0
 8016ff4:	4293      	cmp	r3, r2
 8016ff6:	d100      	bne.n	8016ffa <memset+0xa>
 8016ff8:	4770      	bx	lr
 8016ffa:	f803 1b01 	strb.w	r1, [r3], #1
 8016ffe:	e7f9      	b.n	8016ff4 <memset+0x4>

08017000 <iprintf>:
 8017000:	b40f      	push	{r0, r1, r2, r3}
 8017002:	4b0a      	ldr	r3, [pc, #40]	; (801702c <iprintf+0x2c>)
 8017004:	b513      	push	{r0, r1, r4, lr}
 8017006:	681c      	ldr	r4, [r3, #0]
 8017008:	b124      	cbz	r4, 8017014 <iprintf+0x14>
 801700a:	69a3      	ldr	r3, [r4, #24]
 801700c:	b913      	cbnz	r3, 8017014 <iprintf+0x14>
 801700e:	4620      	mov	r0, r4
 8017010:	f000 f8e2 	bl	80171d8 <__sinit>
 8017014:	ab05      	add	r3, sp, #20
 8017016:	9a04      	ldr	r2, [sp, #16]
 8017018:	68a1      	ldr	r1, [r4, #8]
 801701a:	9301      	str	r3, [sp, #4]
 801701c:	4620      	mov	r0, r4
 801701e:	f000 fbfb 	bl	8017818 <_vfiprintf_r>
 8017022:	b002      	add	sp, #8
 8017024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017028:	b004      	add	sp, #16
 801702a:	4770      	bx	lr
 801702c:	2000001c 	.word	0x2000001c

08017030 <rand>:
 8017030:	4b16      	ldr	r3, [pc, #88]	; (801708c <rand+0x5c>)
 8017032:	b510      	push	{r4, lr}
 8017034:	681c      	ldr	r4, [r3, #0]
 8017036:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017038:	b9b3      	cbnz	r3, 8017068 <rand+0x38>
 801703a:	2018      	movs	r0, #24
 801703c:	f000 f97e 	bl	801733c <malloc>
 8017040:	63a0      	str	r0, [r4, #56]	; 0x38
 8017042:	b928      	cbnz	r0, 8017050 <rand+0x20>
 8017044:	4602      	mov	r2, r0
 8017046:	4b12      	ldr	r3, [pc, #72]	; (8017090 <rand+0x60>)
 8017048:	4812      	ldr	r0, [pc, #72]	; (8017094 <rand+0x64>)
 801704a:	214e      	movs	r1, #78	; 0x4e
 801704c:	f000 f84e 	bl	80170ec <__assert_func>
 8017050:	4a11      	ldr	r2, [pc, #68]	; (8017098 <rand+0x68>)
 8017052:	4b12      	ldr	r3, [pc, #72]	; (801709c <rand+0x6c>)
 8017054:	e9c0 2300 	strd	r2, r3, [r0]
 8017058:	4b11      	ldr	r3, [pc, #68]	; (80170a0 <rand+0x70>)
 801705a:	6083      	str	r3, [r0, #8]
 801705c:	230b      	movs	r3, #11
 801705e:	8183      	strh	r3, [r0, #12]
 8017060:	2201      	movs	r2, #1
 8017062:	2300      	movs	r3, #0
 8017064:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017068:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801706a:	4a0e      	ldr	r2, [pc, #56]	; (80170a4 <rand+0x74>)
 801706c:	6920      	ldr	r0, [r4, #16]
 801706e:	6963      	ldr	r3, [r4, #20]
 8017070:	490d      	ldr	r1, [pc, #52]	; (80170a8 <rand+0x78>)
 8017072:	4342      	muls	r2, r0
 8017074:	fb01 2203 	mla	r2, r1, r3, r2
 8017078:	fba0 0101 	umull	r0, r1, r0, r1
 801707c:	1c43      	adds	r3, r0, #1
 801707e:	eb42 0001 	adc.w	r0, r2, r1
 8017082:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8017086:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801708a:	bd10      	pop	{r4, pc}
 801708c:	2000001c 	.word	0x2000001c
 8017090:	0801c0fc 	.word	0x0801c0fc
 8017094:	0801c113 	.word	0x0801c113
 8017098:	abcd330e 	.word	0xabcd330e
 801709c:	e66d1234 	.word	0xe66d1234
 80170a0:	0005deec 	.word	0x0005deec
 80170a4:	5851f42d 	.word	0x5851f42d
 80170a8:	4c957f2d 	.word	0x4c957f2d

080170ac <siprintf>:
 80170ac:	b40e      	push	{r1, r2, r3}
 80170ae:	b500      	push	{lr}
 80170b0:	b09c      	sub	sp, #112	; 0x70
 80170b2:	ab1d      	add	r3, sp, #116	; 0x74
 80170b4:	9002      	str	r0, [sp, #8]
 80170b6:	9006      	str	r0, [sp, #24]
 80170b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80170bc:	4809      	ldr	r0, [pc, #36]	; (80170e4 <siprintf+0x38>)
 80170be:	9107      	str	r1, [sp, #28]
 80170c0:	9104      	str	r1, [sp, #16]
 80170c2:	4909      	ldr	r1, [pc, #36]	; (80170e8 <siprintf+0x3c>)
 80170c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80170c8:	9105      	str	r1, [sp, #20]
 80170ca:	6800      	ldr	r0, [r0, #0]
 80170cc:	9301      	str	r3, [sp, #4]
 80170ce:	a902      	add	r1, sp, #8
 80170d0:	f000 fa78 	bl	80175c4 <_svfiprintf_r>
 80170d4:	9b02      	ldr	r3, [sp, #8]
 80170d6:	2200      	movs	r2, #0
 80170d8:	701a      	strb	r2, [r3, #0]
 80170da:	b01c      	add	sp, #112	; 0x70
 80170dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80170e0:	b003      	add	sp, #12
 80170e2:	4770      	bx	lr
 80170e4:	2000001c 	.word	0x2000001c
 80170e8:	ffff0208 	.word	0xffff0208

080170ec <__assert_func>:
 80170ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80170ee:	4614      	mov	r4, r2
 80170f0:	461a      	mov	r2, r3
 80170f2:	4b09      	ldr	r3, [pc, #36]	; (8017118 <__assert_func+0x2c>)
 80170f4:	681b      	ldr	r3, [r3, #0]
 80170f6:	4605      	mov	r5, r0
 80170f8:	68d8      	ldr	r0, [r3, #12]
 80170fa:	b14c      	cbz	r4, 8017110 <__assert_func+0x24>
 80170fc:	4b07      	ldr	r3, [pc, #28]	; (801711c <__assert_func+0x30>)
 80170fe:	9100      	str	r1, [sp, #0]
 8017100:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017104:	4906      	ldr	r1, [pc, #24]	; (8017120 <__assert_func+0x34>)
 8017106:	462b      	mov	r3, r5
 8017108:	f000 f8e4 	bl	80172d4 <fiprintf>
 801710c:	f000 ff6e 	bl	8017fec <abort>
 8017110:	4b04      	ldr	r3, [pc, #16]	; (8017124 <__assert_func+0x38>)
 8017112:	461c      	mov	r4, r3
 8017114:	e7f3      	b.n	80170fe <__assert_func+0x12>
 8017116:	bf00      	nop
 8017118:	2000001c 	.word	0x2000001c
 801711c:	0801c16e 	.word	0x0801c16e
 8017120:	0801c17b 	.word	0x0801c17b
 8017124:	0801c1a9 	.word	0x0801c1a9

08017128 <std>:
 8017128:	2300      	movs	r3, #0
 801712a:	b510      	push	{r4, lr}
 801712c:	4604      	mov	r4, r0
 801712e:	e9c0 3300 	strd	r3, r3, [r0]
 8017132:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017136:	6083      	str	r3, [r0, #8]
 8017138:	8181      	strh	r1, [r0, #12]
 801713a:	6643      	str	r3, [r0, #100]	; 0x64
 801713c:	81c2      	strh	r2, [r0, #14]
 801713e:	6183      	str	r3, [r0, #24]
 8017140:	4619      	mov	r1, r3
 8017142:	2208      	movs	r2, #8
 8017144:	305c      	adds	r0, #92	; 0x5c
 8017146:	f7ff ff53 	bl	8016ff0 <memset>
 801714a:	4b05      	ldr	r3, [pc, #20]	; (8017160 <std+0x38>)
 801714c:	6263      	str	r3, [r4, #36]	; 0x24
 801714e:	4b05      	ldr	r3, [pc, #20]	; (8017164 <std+0x3c>)
 8017150:	62a3      	str	r3, [r4, #40]	; 0x28
 8017152:	4b05      	ldr	r3, [pc, #20]	; (8017168 <std+0x40>)
 8017154:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017156:	4b05      	ldr	r3, [pc, #20]	; (801716c <std+0x44>)
 8017158:	6224      	str	r4, [r4, #32]
 801715a:	6323      	str	r3, [r4, #48]	; 0x30
 801715c:	bd10      	pop	{r4, pc}
 801715e:	bf00      	nop
 8017160:	08017dc1 	.word	0x08017dc1
 8017164:	08017de3 	.word	0x08017de3
 8017168:	08017e1b 	.word	0x08017e1b
 801716c:	08017e3f 	.word	0x08017e3f

08017170 <_cleanup_r>:
 8017170:	4901      	ldr	r1, [pc, #4]	; (8017178 <_cleanup_r+0x8>)
 8017172:	f000 b8c1 	b.w	80172f8 <_fwalk_reent>
 8017176:	bf00      	nop
 8017178:	08018129 	.word	0x08018129

0801717c <__sfmoreglue>:
 801717c:	b570      	push	{r4, r5, r6, lr}
 801717e:	2268      	movs	r2, #104	; 0x68
 8017180:	1e4d      	subs	r5, r1, #1
 8017182:	4355      	muls	r5, r2
 8017184:	460e      	mov	r6, r1
 8017186:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801718a:	f000 f94b 	bl	8017424 <_malloc_r>
 801718e:	4604      	mov	r4, r0
 8017190:	b140      	cbz	r0, 80171a4 <__sfmoreglue+0x28>
 8017192:	2100      	movs	r1, #0
 8017194:	e9c0 1600 	strd	r1, r6, [r0]
 8017198:	300c      	adds	r0, #12
 801719a:	60a0      	str	r0, [r4, #8]
 801719c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80171a0:	f7ff ff26 	bl	8016ff0 <memset>
 80171a4:	4620      	mov	r0, r4
 80171a6:	bd70      	pop	{r4, r5, r6, pc}

080171a8 <__sfp_lock_acquire>:
 80171a8:	4801      	ldr	r0, [pc, #4]	; (80171b0 <__sfp_lock_acquire+0x8>)
 80171aa:	f000 b8c5 	b.w	8017338 <__retarget_lock_acquire_recursive>
 80171ae:	bf00      	nop
 80171b0:	2000d2a9 	.word	0x2000d2a9

080171b4 <__sfp_lock_release>:
 80171b4:	4801      	ldr	r0, [pc, #4]	; (80171bc <__sfp_lock_release+0x8>)
 80171b6:	f000 b8c0 	b.w	801733a <__retarget_lock_release_recursive>
 80171ba:	bf00      	nop
 80171bc:	2000d2a9 	.word	0x2000d2a9

080171c0 <__sinit_lock_acquire>:
 80171c0:	4801      	ldr	r0, [pc, #4]	; (80171c8 <__sinit_lock_acquire+0x8>)
 80171c2:	f000 b8b9 	b.w	8017338 <__retarget_lock_acquire_recursive>
 80171c6:	bf00      	nop
 80171c8:	2000d2aa 	.word	0x2000d2aa

080171cc <__sinit_lock_release>:
 80171cc:	4801      	ldr	r0, [pc, #4]	; (80171d4 <__sinit_lock_release+0x8>)
 80171ce:	f000 b8b4 	b.w	801733a <__retarget_lock_release_recursive>
 80171d2:	bf00      	nop
 80171d4:	2000d2aa 	.word	0x2000d2aa

080171d8 <__sinit>:
 80171d8:	b510      	push	{r4, lr}
 80171da:	4604      	mov	r4, r0
 80171dc:	f7ff fff0 	bl	80171c0 <__sinit_lock_acquire>
 80171e0:	69a3      	ldr	r3, [r4, #24]
 80171e2:	b11b      	cbz	r3, 80171ec <__sinit+0x14>
 80171e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80171e8:	f7ff bff0 	b.w	80171cc <__sinit_lock_release>
 80171ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80171f0:	6523      	str	r3, [r4, #80]	; 0x50
 80171f2:	4b13      	ldr	r3, [pc, #76]	; (8017240 <__sinit+0x68>)
 80171f4:	4a13      	ldr	r2, [pc, #76]	; (8017244 <__sinit+0x6c>)
 80171f6:	681b      	ldr	r3, [r3, #0]
 80171f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80171fa:	42a3      	cmp	r3, r4
 80171fc:	bf04      	itt	eq
 80171fe:	2301      	moveq	r3, #1
 8017200:	61a3      	streq	r3, [r4, #24]
 8017202:	4620      	mov	r0, r4
 8017204:	f000 f820 	bl	8017248 <__sfp>
 8017208:	6060      	str	r0, [r4, #4]
 801720a:	4620      	mov	r0, r4
 801720c:	f000 f81c 	bl	8017248 <__sfp>
 8017210:	60a0      	str	r0, [r4, #8]
 8017212:	4620      	mov	r0, r4
 8017214:	f000 f818 	bl	8017248 <__sfp>
 8017218:	2200      	movs	r2, #0
 801721a:	60e0      	str	r0, [r4, #12]
 801721c:	2104      	movs	r1, #4
 801721e:	6860      	ldr	r0, [r4, #4]
 8017220:	f7ff ff82 	bl	8017128 <std>
 8017224:	68a0      	ldr	r0, [r4, #8]
 8017226:	2201      	movs	r2, #1
 8017228:	2109      	movs	r1, #9
 801722a:	f7ff ff7d 	bl	8017128 <std>
 801722e:	68e0      	ldr	r0, [r4, #12]
 8017230:	2202      	movs	r2, #2
 8017232:	2112      	movs	r1, #18
 8017234:	f7ff ff78 	bl	8017128 <std>
 8017238:	2301      	movs	r3, #1
 801723a:	61a3      	str	r3, [r4, #24]
 801723c:	e7d2      	b.n	80171e4 <__sinit+0xc>
 801723e:	bf00      	nop
 8017240:	0801c0f8 	.word	0x0801c0f8
 8017244:	08017171 	.word	0x08017171

08017248 <__sfp>:
 8017248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801724a:	4607      	mov	r7, r0
 801724c:	f7ff ffac 	bl	80171a8 <__sfp_lock_acquire>
 8017250:	4b1e      	ldr	r3, [pc, #120]	; (80172cc <__sfp+0x84>)
 8017252:	681e      	ldr	r6, [r3, #0]
 8017254:	69b3      	ldr	r3, [r6, #24]
 8017256:	b913      	cbnz	r3, 801725e <__sfp+0x16>
 8017258:	4630      	mov	r0, r6
 801725a:	f7ff ffbd 	bl	80171d8 <__sinit>
 801725e:	3648      	adds	r6, #72	; 0x48
 8017260:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017264:	3b01      	subs	r3, #1
 8017266:	d503      	bpl.n	8017270 <__sfp+0x28>
 8017268:	6833      	ldr	r3, [r6, #0]
 801726a:	b30b      	cbz	r3, 80172b0 <__sfp+0x68>
 801726c:	6836      	ldr	r6, [r6, #0]
 801726e:	e7f7      	b.n	8017260 <__sfp+0x18>
 8017270:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017274:	b9d5      	cbnz	r5, 80172ac <__sfp+0x64>
 8017276:	4b16      	ldr	r3, [pc, #88]	; (80172d0 <__sfp+0x88>)
 8017278:	60e3      	str	r3, [r4, #12]
 801727a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801727e:	6665      	str	r5, [r4, #100]	; 0x64
 8017280:	f000 f859 	bl	8017336 <__retarget_lock_init_recursive>
 8017284:	f7ff ff96 	bl	80171b4 <__sfp_lock_release>
 8017288:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801728c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017290:	6025      	str	r5, [r4, #0]
 8017292:	61a5      	str	r5, [r4, #24]
 8017294:	2208      	movs	r2, #8
 8017296:	4629      	mov	r1, r5
 8017298:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801729c:	f7ff fea8 	bl	8016ff0 <memset>
 80172a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80172a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80172a8:	4620      	mov	r0, r4
 80172aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80172ac:	3468      	adds	r4, #104	; 0x68
 80172ae:	e7d9      	b.n	8017264 <__sfp+0x1c>
 80172b0:	2104      	movs	r1, #4
 80172b2:	4638      	mov	r0, r7
 80172b4:	f7ff ff62 	bl	801717c <__sfmoreglue>
 80172b8:	4604      	mov	r4, r0
 80172ba:	6030      	str	r0, [r6, #0]
 80172bc:	2800      	cmp	r0, #0
 80172be:	d1d5      	bne.n	801726c <__sfp+0x24>
 80172c0:	f7ff ff78 	bl	80171b4 <__sfp_lock_release>
 80172c4:	230c      	movs	r3, #12
 80172c6:	603b      	str	r3, [r7, #0]
 80172c8:	e7ee      	b.n	80172a8 <__sfp+0x60>
 80172ca:	bf00      	nop
 80172cc:	0801c0f8 	.word	0x0801c0f8
 80172d0:	ffff0001 	.word	0xffff0001

080172d4 <fiprintf>:
 80172d4:	b40e      	push	{r1, r2, r3}
 80172d6:	b503      	push	{r0, r1, lr}
 80172d8:	4601      	mov	r1, r0
 80172da:	ab03      	add	r3, sp, #12
 80172dc:	4805      	ldr	r0, [pc, #20]	; (80172f4 <fiprintf+0x20>)
 80172de:	f853 2b04 	ldr.w	r2, [r3], #4
 80172e2:	6800      	ldr	r0, [r0, #0]
 80172e4:	9301      	str	r3, [sp, #4]
 80172e6:	f000 fa97 	bl	8017818 <_vfiprintf_r>
 80172ea:	b002      	add	sp, #8
 80172ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80172f0:	b003      	add	sp, #12
 80172f2:	4770      	bx	lr
 80172f4:	2000001c 	.word	0x2000001c

080172f8 <_fwalk_reent>:
 80172f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80172fc:	4606      	mov	r6, r0
 80172fe:	4688      	mov	r8, r1
 8017300:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017304:	2700      	movs	r7, #0
 8017306:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801730a:	f1b9 0901 	subs.w	r9, r9, #1
 801730e:	d505      	bpl.n	801731c <_fwalk_reent+0x24>
 8017310:	6824      	ldr	r4, [r4, #0]
 8017312:	2c00      	cmp	r4, #0
 8017314:	d1f7      	bne.n	8017306 <_fwalk_reent+0xe>
 8017316:	4638      	mov	r0, r7
 8017318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801731c:	89ab      	ldrh	r3, [r5, #12]
 801731e:	2b01      	cmp	r3, #1
 8017320:	d907      	bls.n	8017332 <_fwalk_reent+0x3a>
 8017322:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017326:	3301      	adds	r3, #1
 8017328:	d003      	beq.n	8017332 <_fwalk_reent+0x3a>
 801732a:	4629      	mov	r1, r5
 801732c:	4630      	mov	r0, r6
 801732e:	47c0      	blx	r8
 8017330:	4307      	orrs	r7, r0
 8017332:	3568      	adds	r5, #104	; 0x68
 8017334:	e7e9      	b.n	801730a <_fwalk_reent+0x12>

08017336 <__retarget_lock_init_recursive>:
 8017336:	4770      	bx	lr

08017338 <__retarget_lock_acquire_recursive>:
 8017338:	4770      	bx	lr

0801733a <__retarget_lock_release_recursive>:
 801733a:	4770      	bx	lr

0801733c <malloc>:
 801733c:	4b02      	ldr	r3, [pc, #8]	; (8017348 <malloc+0xc>)
 801733e:	4601      	mov	r1, r0
 8017340:	6818      	ldr	r0, [r3, #0]
 8017342:	f000 b86f 	b.w	8017424 <_malloc_r>
 8017346:	bf00      	nop
 8017348:	2000001c 	.word	0x2000001c

0801734c <_free_r>:
 801734c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801734e:	2900      	cmp	r1, #0
 8017350:	d044      	beq.n	80173dc <_free_r+0x90>
 8017352:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017356:	9001      	str	r0, [sp, #4]
 8017358:	2b00      	cmp	r3, #0
 801735a:	f1a1 0404 	sub.w	r4, r1, #4
 801735e:	bfb8      	it	lt
 8017360:	18e4      	addlt	r4, r4, r3
 8017362:	f000 ff95 	bl	8018290 <__malloc_lock>
 8017366:	4a1e      	ldr	r2, [pc, #120]	; (80173e0 <_free_r+0x94>)
 8017368:	9801      	ldr	r0, [sp, #4]
 801736a:	6813      	ldr	r3, [r2, #0]
 801736c:	b933      	cbnz	r3, 801737c <_free_r+0x30>
 801736e:	6063      	str	r3, [r4, #4]
 8017370:	6014      	str	r4, [r2, #0]
 8017372:	b003      	add	sp, #12
 8017374:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017378:	f000 bf90 	b.w	801829c <__malloc_unlock>
 801737c:	42a3      	cmp	r3, r4
 801737e:	d908      	bls.n	8017392 <_free_r+0x46>
 8017380:	6825      	ldr	r5, [r4, #0]
 8017382:	1961      	adds	r1, r4, r5
 8017384:	428b      	cmp	r3, r1
 8017386:	bf01      	itttt	eq
 8017388:	6819      	ldreq	r1, [r3, #0]
 801738a:	685b      	ldreq	r3, [r3, #4]
 801738c:	1949      	addeq	r1, r1, r5
 801738e:	6021      	streq	r1, [r4, #0]
 8017390:	e7ed      	b.n	801736e <_free_r+0x22>
 8017392:	461a      	mov	r2, r3
 8017394:	685b      	ldr	r3, [r3, #4]
 8017396:	b10b      	cbz	r3, 801739c <_free_r+0x50>
 8017398:	42a3      	cmp	r3, r4
 801739a:	d9fa      	bls.n	8017392 <_free_r+0x46>
 801739c:	6811      	ldr	r1, [r2, #0]
 801739e:	1855      	adds	r5, r2, r1
 80173a0:	42a5      	cmp	r5, r4
 80173a2:	d10b      	bne.n	80173bc <_free_r+0x70>
 80173a4:	6824      	ldr	r4, [r4, #0]
 80173a6:	4421      	add	r1, r4
 80173a8:	1854      	adds	r4, r2, r1
 80173aa:	42a3      	cmp	r3, r4
 80173ac:	6011      	str	r1, [r2, #0]
 80173ae:	d1e0      	bne.n	8017372 <_free_r+0x26>
 80173b0:	681c      	ldr	r4, [r3, #0]
 80173b2:	685b      	ldr	r3, [r3, #4]
 80173b4:	6053      	str	r3, [r2, #4]
 80173b6:	4421      	add	r1, r4
 80173b8:	6011      	str	r1, [r2, #0]
 80173ba:	e7da      	b.n	8017372 <_free_r+0x26>
 80173bc:	d902      	bls.n	80173c4 <_free_r+0x78>
 80173be:	230c      	movs	r3, #12
 80173c0:	6003      	str	r3, [r0, #0]
 80173c2:	e7d6      	b.n	8017372 <_free_r+0x26>
 80173c4:	6825      	ldr	r5, [r4, #0]
 80173c6:	1961      	adds	r1, r4, r5
 80173c8:	428b      	cmp	r3, r1
 80173ca:	bf04      	itt	eq
 80173cc:	6819      	ldreq	r1, [r3, #0]
 80173ce:	685b      	ldreq	r3, [r3, #4]
 80173d0:	6063      	str	r3, [r4, #4]
 80173d2:	bf04      	itt	eq
 80173d4:	1949      	addeq	r1, r1, r5
 80173d6:	6021      	streq	r1, [r4, #0]
 80173d8:	6054      	str	r4, [r2, #4]
 80173da:	e7ca      	b.n	8017372 <_free_r+0x26>
 80173dc:	b003      	add	sp, #12
 80173de:	bd30      	pop	{r4, r5, pc}
 80173e0:	2000d2ac 	.word	0x2000d2ac

080173e4 <sbrk_aligned>:
 80173e4:	b570      	push	{r4, r5, r6, lr}
 80173e6:	4e0e      	ldr	r6, [pc, #56]	; (8017420 <sbrk_aligned+0x3c>)
 80173e8:	460c      	mov	r4, r1
 80173ea:	6831      	ldr	r1, [r6, #0]
 80173ec:	4605      	mov	r5, r0
 80173ee:	b911      	cbnz	r1, 80173f6 <sbrk_aligned+0x12>
 80173f0:	f000 fcd6 	bl	8017da0 <_sbrk_r>
 80173f4:	6030      	str	r0, [r6, #0]
 80173f6:	4621      	mov	r1, r4
 80173f8:	4628      	mov	r0, r5
 80173fa:	f000 fcd1 	bl	8017da0 <_sbrk_r>
 80173fe:	1c43      	adds	r3, r0, #1
 8017400:	d00a      	beq.n	8017418 <sbrk_aligned+0x34>
 8017402:	1cc4      	adds	r4, r0, #3
 8017404:	f024 0403 	bic.w	r4, r4, #3
 8017408:	42a0      	cmp	r0, r4
 801740a:	d007      	beq.n	801741c <sbrk_aligned+0x38>
 801740c:	1a21      	subs	r1, r4, r0
 801740e:	4628      	mov	r0, r5
 8017410:	f000 fcc6 	bl	8017da0 <_sbrk_r>
 8017414:	3001      	adds	r0, #1
 8017416:	d101      	bne.n	801741c <sbrk_aligned+0x38>
 8017418:	f04f 34ff 	mov.w	r4, #4294967295
 801741c:	4620      	mov	r0, r4
 801741e:	bd70      	pop	{r4, r5, r6, pc}
 8017420:	2000d2b0 	.word	0x2000d2b0

08017424 <_malloc_r>:
 8017424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017428:	1ccd      	adds	r5, r1, #3
 801742a:	f025 0503 	bic.w	r5, r5, #3
 801742e:	3508      	adds	r5, #8
 8017430:	2d0c      	cmp	r5, #12
 8017432:	bf38      	it	cc
 8017434:	250c      	movcc	r5, #12
 8017436:	2d00      	cmp	r5, #0
 8017438:	4607      	mov	r7, r0
 801743a:	db01      	blt.n	8017440 <_malloc_r+0x1c>
 801743c:	42a9      	cmp	r1, r5
 801743e:	d905      	bls.n	801744c <_malloc_r+0x28>
 8017440:	230c      	movs	r3, #12
 8017442:	603b      	str	r3, [r7, #0]
 8017444:	2600      	movs	r6, #0
 8017446:	4630      	mov	r0, r6
 8017448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801744c:	4e2e      	ldr	r6, [pc, #184]	; (8017508 <_malloc_r+0xe4>)
 801744e:	f000 ff1f 	bl	8018290 <__malloc_lock>
 8017452:	6833      	ldr	r3, [r6, #0]
 8017454:	461c      	mov	r4, r3
 8017456:	bb34      	cbnz	r4, 80174a6 <_malloc_r+0x82>
 8017458:	4629      	mov	r1, r5
 801745a:	4638      	mov	r0, r7
 801745c:	f7ff ffc2 	bl	80173e4 <sbrk_aligned>
 8017460:	1c43      	adds	r3, r0, #1
 8017462:	4604      	mov	r4, r0
 8017464:	d14d      	bne.n	8017502 <_malloc_r+0xde>
 8017466:	6834      	ldr	r4, [r6, #0]
 8017468:	4626      	mov	r6, r4
 801746a:	2e00      	cmp	r6, #0
 801746c:	d140      	bne.n	80174f0 <_malloc_r+0xcc>
 801746e:	6823      	ldr	r3, [r4, #0]
 8017470:	4631      	mov	r1, r6
 8017472:	4638      	mov	r0, r7
 8017474:	eb04 0803 	add.w	r8, r4, r3
 8017478:	f000 fc92 	bl	8017da0 <_sbrk_r>
 801747c:	4580      	cmp	r8, r0
 801747e:	d13a      	bne.n	80174f6 <_malloc_r+0xd2>
 8017480:	6821      	ldr	r1, [r4, #0]
 8017482:	3503      	adds	r5, #3
 8017484:	1a6d      	subs	r5, r5, r1
 8017486:	f025 0503 	bic.w	r5, r5, #3
 801748a:	3508      	adds	r5, #8
 801748c:	2d0c      	cmp	r5, #12
 801748e:	bf38      	it	cc
 8017490:	250c      	movcc	r5, #12
 8017492:	4629      	mov	r1, r5
 8017494:	4638      	mov	r0, r7
 8017496:	f7ff ffa5 	bl	80173e4 <sbrk_aligned>
 801749a:	3001      	adds	r0, #1
 801749c:	d02b      	beq.n	80174f6 <_malloc_r+0xd2>
 801749e:	6823      	ldr	r3, [r4, #0]
 80174a0:	442b      	add	r3, r5
 80174a2:	6023      	str	r3, [r4, #0]
 80174a4:	e00e      	b.n	80174c4 <_malloc_r+0xa0>
 80174a6:	6822      	ldr	r2, [r4, #0]
 80174a8:	1b52      	subs	r2, r2, r5
 80174aa:	d41e      	bmi.n	80174ea <_malloc_r+0xc6>
 80174ac:	2a0b      	cmp	r2, #11
 80174ae:	d916      	bls.n	80174de <_malloc_r+0xba>
 80174b0:	1961      	adds	r1, r4, r5
 80174b2:	42a3      	cmp	r3, r4
 80174b4:	6025      	str	r5, [r4, #0]
 80174b6:	bf18      	it	ne
 80174b8:	6059      	strne	r1, [r3, #4]
 80174ba:	6863      	ldr	r3, [r4, #4]
 80174bc:	bf08      	it	eq
 80174be:	6031      	streq	r1, [r6, #0]
 80174c0:	5162      	str	r2, [r4, r5]
 80174c2:	604b      	str	r3, [r1, #4]
 80174c4:	4638      	mov	r0, r7
 80174c6:	f104 060b 	add.w	r6, r4, #11
 80174ca:	f000 fee7 	bl	801829c <__malloc_unlock>
 80174ce:	f026 0607 	bic.w	r6, r6, #7
 80174d2:	1d23      	adds	r3, r4, #4
 80174d4:	1af2      	subs	r2, r6, r3
 80174d6:	d0b6      	beq.n	8017446 <_malloc_r+0x22>
 80174d8:	1b9b      	subs	r3, r3, r6
 80174da:	50a3      	str	r3, [r4, r2]
 80174dc:	e7b3      	b.n	8017446 <_malloc_r+0x22>
 80174de:	6862      	ldr	r2, [r4, #4]
 80174e0:	42a3      	cmp	r3, r4
 80174e2:	bf0c      	ite	eq
 80174e4:	6032      	streq	r2, [r6, #0]
 80174e6:	605a      	strne	r2, [r3, #4]
 80174e8:	e7ec      	b.n	80174c4 <_malloc_r+0xa0>
 80174ea:	4623      	mov	r3, r4
 80174ec:	6864      	ldr	r4, [r4, #4]
 80174ee:	e7b2      	b.n	8017456 <_malloc_r+0x32>
 80174f0:	4634      	mov	r4, r6
 80174f2:	6876      	ldr	r6, [r6, #4]
 80174f4:	e7b9      	b.n	801746a <_malloc_r+0x46>
 80174f6:	230c      	movs	r3, #12
 80174f8:	603b      	str	r3, [r7, #0]
 80174fa:	4638      	mov	r0, r7
 80174fc:	f000 fece 	bl	801829c <__malloc_unlock>
 8017500:	e7a1      	b.n	8017446 <_malloc_r+0x22>
 8017502:	6025      	str	r5, [r4, #0]
 8017504:	e7de      	b.n	80174c4 <_malloc_r+0xa0>
 8017506:	bf00      	nop
 8017508:	2000d2ac 	.word	0x2000d2ac

0801750c <__ssputs_r>:
 801750c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017510:	688e      	ldr	r6, [r1, #8]
 8017512:	429e      	cmp	r6, r3
 8017514:	4682      	mov	sl, r0
 8017516:	460c      	mov	r4, r1
 8017518:	4690      	mov	r8, r2
 801751a:	461f      	mov	r7, r3
 801751c:	d838      	bhi.n	8017590 <__ssputs_r+0x84>
 801751e:	898a      	ldrh	r2, [r1, #12]
 8017520:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017524:	d032      	beq.n	801758c <__ssputs_r+0x80>
 8017526:	6825      	ldr	r5, [r4, #0]
 8017528:	6909      	ldr	r1, [r1, #16]
 801752a:	eba5 0901 	sub.w	r9, r5, r1
 801752e:	6965      	ldr	r5, [r4, #20]
 8017530:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017534:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017538:	3301      	adds	r3, #1
 801753a:	444b      	add	r3, r9
 801753c:	106d      	asrs	r5, r5, #1
 801753e:	429d      	cmp	r5, r3
 8017540:	bf38      	it	cc
 8017542:	461d      	movcc	r5, r3
 8017544:	0553      	lsls	r3, r2, #21
 8017546:	d531      	bpl.n	80175ac <__ssputs_r+0xa0>
 8017548:	4629      	mov	r1, r5
 801754a:	f7ff ff6b 	bl	8017424 <_malloc_r>
 801754e:	4606      	mov	r6, r0
 8017550:	b950      	cbnz	r0, 8017568 <__ssputs_r+0x5c>
 8017552:	230c      	movs	r3, #12
 8017554:	f8ca 3000 	str.w	r3, [sl]
 8017558:	89a3      	ldrh	r3, [r4, #12]
 801755a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801755e:	81a3      	strh	r3, [r4, #12]
 8017560:	f04f 30ff 	mov.w	r0, #4294967295
 8017564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017568:	6921      	ldr	r1, [r4, #16]
 801756a:	464a      	mov	r2, r9
 801756c:	f7ff fd18 	bl	8016fa0 <memcpy>
 8017570:	89a3      	ldrh	r3, [r4, #12]
 8017572:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801757a:	81a3      	strh	r3, [r4, #12]
 801757c:	6126      	str	r6, [r4, #16]
 801757e:	6165      	str	r5, [r4, #20]
 8017580:	444e      	add	r6, r9
 8017582:	eba5 0509 	sub.w	r5, r5, r9
 8017586:	6026      	str	r6, [r4, #0]
 8017588:	60a5      	str	r5, [r4, #8]
 801758a:	463e      	mov	r6, r7
 801758c:	42be      	cmp	r6, r7
 801758e:	d900      	bls.n	8017592 <__ssputs_r+0x86>
 8017590:	463e      	mov	r6, r7
 8017592:	6820      	ldr	r0, [r4, #0]
 8017594:	4632      	mov	r2, r6
 8017596:	4641      	mov	r1, r8
 8017598:	f7ff fd10 	bl	8016fbc <memmove>
 801759c:	68a3      	ldr	r3, [r4, #8]
 801759e:	1b9b      	subs	r3, r3, r6
 80175a0:	60a3      	str	r3, [r4, #8]
 80175a2:	6823      	ldr	r3, [r4, #0]
 80175a4:	4433      	add	r3, r6
 80175a6:	6023      	str	r3, [r4, #0]
 80175a8:	2000      	movs	r0, #0
 80175aa:	e7db      	b.n	8017564 <__ssputs_r+0x58>
 80175ac:	462a      	mov	r2, r5
 80175ae:	f000 fe7b 	bl	80182a8 <_realloc_r>
 80175b2:	4606      	mov	r6, r0
 80175b4:	2800      	cmp	r0, #0
 80175b6:	d1e1      	bne.n	801757c <__ssputs_r+0x70>
 80175b8:	6921      	ldr	r1, [r4, #16]
 80175ba:	4650      	mov	r0, sl
 80175bc:	f7ff fec6 	bl	801734c <_free_r>
 80175c0:	e7c7      	b.n	8017552 <__ssputs_r+0x46>
	...

080175c4 <_svfiprintf_r>:
 80175c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175c8:	4698      	mov	r8, r3
 80175ca:	898b      	ldrh	r3, [r1, #12]
 80175cc:	061b      	lsls	r3, r3, #24
 80175ce:	b09d      	sub	sp, #116	; 0x74
 80175d0:	4607      	mov	r7, r0
 80175d2:	460d      	mov	r5, r1
 80175d4:	4614      	mov	r4, r2
 80175d6:	d50e      	bpl.n	80175f6 <_svfiprintf_r+0x32>
 80175d8:	690b      	ldr	r3, [r1, #16]
 80175da:	b963      	cbnz	r3, 80175f6 <_svfiprintf_r+0x32>
 80175dc:	2140      	movs	r1, #64	; 0x40
 80175de:	f7ff ff21 	bl	8017424 <_malloc_r>
 80175e2:	6028      	str	r0, [r5, #0]
 80175e4:	6128      	str	r0, [r5, #16]
 80175e6:	b920      	cbnz	r0, 80175f2 <_svfiprintf_r+0x2e>
 80175e8:	230c      	movs	r3, #12
 80175ea:	603b      	str	r3, [r7, #0]
 80175ec:	f04f 30ff 	mov.w	r0, #4294967295
 80175f0:	e0d1      	b.n	8017796 <_svfiprintf_r+0x1d2>
 80175f2:	2340      	movs	r3, #64	; 0x40
 80175f4:	616b      	str	r3, [r5, #20]
 80175f6:	2300      	movs	r3, #0
 80175f8:	9309      	str	r3, [sp, #36]	; 0x24
 80175fa:	2320      	movs	r3, #32
 80175fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017600:	f8cd 800c 	str.w	r8, [sp, #12]
 8017604:	2330      	movs	r3, #48	; 0x30
 8017606:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80177b0 <_svfiprintf_r+0x1ec>
 801760a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801760e:	f04f 0901 	mov.w	r9, #1
 8017612:	4623      	mov	r3, r4
 8017614:	469a      	mov	sl, r3
 8017616:	f813 2b01 	ldrb.w	r2, [r3], #1
 801761a:	b10a      	cbz	r2, 8017620 <_svfiprintf_r+0x5c>
 801761c:	2a25      	cmp	r2, #37	; 0x25
 801761e:	d1f9      	bne.n	8017614 <_svfiprintf_r+0x50>
 8017620:	ebba 0b04 	subs.w	fp, sl, r4
 8017624:	d00b      	beq.n	801763e <_svfiprintf_r+0x7a>
 8017626:	465b      	mov	r3, fp
 8017628:	4622      	mov	r2, r4
 801762a:	4629      	mov	r1, r5
 801762c:	4638      	mov	r0, r7
 801762e:	f7ff ff6d 	bl	801750c <__ssputs_r>
 8017632:	3001      	adds	r0, #1
 8017634:	f000 80aa 	beq.w	801778c <_svfiprintf_r+0x1c8>
 8017638:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801763a:	445a      	add	r2, fp
 801763c:	9209      	str	r2, [sp, #36]	; 0x24
 801763e:	f89a 3000 	ldrb.w	r3, [sl]
 8017642:	2b00      	cmp	r3, #0
 8017644:	f000 80a2 	beq.w	801778c <_svfiprintf_r+0x1c8>
 8017648:	2300      	movs	r3, #0
 801764a:	f04f 32ff 	mov.w	r2, #4294967295
 801764e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017652:	f10a 0a01 	add.w	sl, sl, #1
 8017656:	9304      	str	r3, [sp, #16]
 8017658:	9307      	str	r3, [sp, #28]
 801765a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801765e:	931a      	str	r3, [sp, #104]	; 0x68
 8017660:	4654      	mov	r4, sl
 8017662:	2205      	movs	r2, #5
 8017664:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017668:	4851      	ldr	r0, [pc, #324]	; (80177b0 <_svfiprintf_r+0x1ec>)
 801766a:	f7e8 fe01 	bl	8000270 <memchr>
 801766e:	9a04      	ldr	r2, [sp, #16]
 8017670:	b9d8      	cbnz	r0, 80176aa <_svfiprintf_r+0xe6>
 8017672:	06d0      	lsls	r0, r2, #27
 8017674:	bf44      	itt	mi
 8017676:	2320      	movmi	r3, #32
 8017678:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801767c:	0711      	lsls	r1, r2, #28
 801767e:	bf44      	itt	mi
 8017680:	232b      	movmi	r3, #43	; 0x2b
 8017682:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017686:	f89a 3000 	ldrb.w	r3, [sl]
 801768a:	2b2a      	cmp	r3, #42	; 0x2a
 801768c:	d015      	beq.n	80176ba <_svfiprintf_r+0xf6>
 801768e:	9a07      	ldr	r2, [sp, #28]
 8017690:	4654      	mov	r4, sl
 8017692:	2000      	movs	r0, #0
 8017694:	f04f 0c0a 	mov.w	ip, #10
 8017698:	4621      	mov	r1, r4
 801769a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801769e:	3b30      	subs	r3, #48	; 0x30
 80176a0:	2b09      	cmp	r3, #9
 80176a2:	d94e      	bls.n	8017742 <_svfiprintf_r+0x17e>
 80176a4:	b1b0      	cbz	r0, 80176d4 <_svfiprintf_r+0x110>
 80176a6:	9207      	str	r2, [sp, #28]
 80176a8:	e014      	b.n	80176d4 <_svfiprintf_r+0x110>
 80176aa:	eba0 0308 	sub.w	r3, r0, r8
 80176ae:	fa09 f303 	lsl.w	r3, r9, r3
 80176b2:	4313      	orrs	r3, r2
 80176b4:	9304      	str	r3, [sp, #16]
 80176b6:	46a2      	mov	sl, r4
 80176b8:	e7d2      	b.n	8017660 <_svfiprintf_r+0x9c>
 80176ba:	9b03      	ldr	r3, [sp, #12]
 80176bc:	1d19      	adds	r1, r3, #4
 80176be:	681b      	ldr	r3, [r3, #0]
 80176c0:	9103      	str	r1, [sp, #12]
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	bfbb      	ittet	lt
 80176c6:	425b      	neglt	r3, r3
 80176c8:	f042 0202 	orrlt.w	r2, r2, #2
 80176cc:	9307      	strge	r3, [sp, #28]
 80176ce:	9307      	strlt	r3, [sp, #28]
 80176d0:	bfb8      	it	lt
 80176d2:	9204      	strlt	r2, [sp, #16]
 80176d4:	7823      	ldrb	r3, [r4, #0]
 80176d6:	2b2e      	cmp	r3, #46	; 0x2e
 80176d8:	d10c      	bne.n	80176f4 <_svfiprintf_r+0x130>
 80176da:	7863      	ldrb	r3, [r4, #1]
 80176dc:	2b2a      	cmp	r3, #42	; 0x2a
 80176de:	d135      	bne.n	801774c <_svfiprintf_r+0x188>
 80176e0:	9b03      	ldr	r3, [sp, #12]
 80176e2:	1d1a      	adds	r2, r3, #4
 80176e4:	681b      	ldr	r3, [r3, #0]
 80176e6:	9203      	str	r2, [sp, #12]
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	bfb8      	it	lt
 80176ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80176f0:	3402      	adds	r4, #2
 80176f2:	9305      	str	r3, [sp, #20]
 80176f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80177c0 <_svfiprintf_r+0x1fc>
 80176f8:	7821      	ldrb	r1, [r4, #0]
 80176fa:	2203      	movs	r2, #3
 80176fc:	4650      	mov	r0, sl
 80176fe:	f7e8 fdb7 	bl	8000270 <memchr>
 8017702:	b140      	cbz	r0, 8017716 <_svfiprintf_r+0x152>
 8017704:	2340      	movs	r3, #64	; 0x40
 8017706:	eba0 000a 	sub.w	r0, r0, sl
 801770a:	fa03 f000 	lsl.w	r0, r3, r0
 801770e:	9b04      	ldr	r3, [sp, #16]
 8017710:	4303      	orrs	r3, r0
 8017712:	3401      	adds	r4, #1
 8017714:	9304      	str	r3, [sp, #16]
 8017716:	f814 1b01 	ldrb.w	r1, [r4], #1
 801771a:	4826      	ldr	r0, [pc, #152]	; (80177b4 <_svfiprintf_r+0x1f0>)
 801771c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017720:	2206      	movs	r2, #6
 8017722:	f7e8 fda5 	bl	8000270 <memchr>
 8017726:	2800      	cmp	r0, #0
 8017728:	d038      	beq.n	801779c <_svfiprintf_r+0x1d8>
 801772a:	4b23      	ldr	r3, [pc, #140]	; (80177b8 <_svfiprintf_r+0x1f4>)
 801772c:	bb1b      	cbnz	r3, 8017776 <_svfiprintf_r+0x1b2>
 801772e:	9b03      	ldr	r3, [sp, #12]
 8017730:	3307      	adds	r3, #7
 8017732:	f023 0307 	bic.w	r3, r3, #7
 8017736:	3308      	adds	r3, #8
 8017738:	9303      	str	r3, [sp, #12]
 801773a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801773c:	4433      	add	r3, r6
 801773e:	9309      	str	r3, [sp, #36]	; 0x24
 8017740:	e767      	b.n	8017612 <_svfiprintf_r+0x4e>
 8017742:	fb0c 3202 	mla	r2, ip, r2, r3
 8017746:	460c      	mov	r4, r1
 8017748:	2001      	movs	r0, #1
 801774a:	e7a5      	b.n	8017698 <_svfiprintf_r+0xd4>
 801774c:	2300      	movs	r3, #0
 801774e:	3401      	adds	r4, #1
 8017750:	9305      	str	r3, [sp, #20]
 8017752:	4619      	mov	r1, r3
 8017754:	f04f 0c0a 	mov.w	ip, #10
 8017758:	4620      	mov	r0, r4
 801775a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801775e:	3a30      	subs	r2, #48	; 0x30
 8017760:	2a09      	cmp	r2, #9
 8017762:	d903      	bls.n	801776c <_svfiprintf_r+0x1a8>
 8017764:	2b00      	cmp	r3, #0
 8017766:	d0c5      	beq.n	80176f4 <_svfiprintf_r+0x130>
 8017768:	9105      	str	r1, [sp, #20]
 801776a:	e7c3      	b.n	80176f4 <_svfiprintf_r+0x130>
 801776c:	fb0c 2101 	mla	r1, ip, r1, r2
 8017770:	4604      	mov	r4, r0
 8017772:	2301      	movs	r3, #1
 8017774:	e7f0      	b.n	8017758 <_svfiprintf_r+0x194>
 8017776:	ab03      	add	r3, sp, #12
 8017778:	9300      	str	r3, [sp, #0]
 801777a:	462a      	mov	r2, r5
 801777c:	4b0f      	ldr	r3, [pc, #60]	; (80177bc <_svfiprintf_r+0x1f8>)
 801777e:	a904      	add	r1, sp, #16
 8017780:	4638      	mov	r0, r7
 8017782:	f3af 8000 	nop.w
 8017786:	1c42      	adds	r2, r0, #1
 8017788:	4606      	mov	r6, r0
 801778a:	d1d6      	bne.n	801773a <_svfiprintf_r+0x176>
 801778c:	89ab      	ldrh	r3, [r5, #12]
 801778e:	065b      	lsls	r3, r3, #25
 8017790:	f53f af2c 	bmi.w	80175ec <_svfiprintf_r+0x28>
 8017794:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017796:	b01d      	add	sp, #116	; 0x74
 8017798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801779c:	ab03      	add	r3, sp, #12
 801779e:	9300      	str	r3, [sp, #0]
 80177a0:	462a      	mov	r2, r5
 80177a2:	4b06      	ldr	r3, [pc, #24]	; (80177bc <_svfiprintf_r+0x1f8>)
 80177a4:	a904      	add	r1, sp, #16
 80177a6:	4638      	mov	r0, r7
 80177a8:	f000 f9d4 	bl	8017b54 <_printf_i>
 80177ac:	e7eb      	b.n	8017786 <_svfiprintf_r+0x1c2>
 80177ae:	bf00      	nop
 80177b0:	0801c20c 	.word	0x0801c20c
 80177b4:	0801c216 	.word	0x0801c216
 80177b8:	00000000 	.word	0x00000000
 80177bc:	0801750d 	.word	0x0801750d
 80177c0:	0801c212 	.word	0x0801c212

080177c4 <__sfputc_r>:
 80177c4:	6893      	ldr	r3, [r2, #8]
 80177c6:	3b01      	subs	r3, #1
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	b410      	push	{r4}
 80177cc:	6093      	str	r3, [r2, #8]
 80177ce:	da08      	bge.n	80177e2 <__sfputc_r+0x1e>
 80177d0:	6994      	ldr	r4, [r2, #24]
 80177d2:	42a3      	cmp	r3, r4
 80177d4:	db01      	blt.n	80177da <__sfputc_r+0x16>
 80177d6:	290a      	cmp	r1, #10
 80177d8:	d103      	bne.n	80177e2 <__sfputc_r+0x1e>
 80177da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80177de:	f000 bb33 	b.w	8017e48 <__swbuf_r>
 80177e2:	6813      	ldr	r3, [r2, #0]
 80177e4:	1c58      	adds	r0, r3, #1
 80177e6:	6010      	str	r0, [r2, #0]
 80177e8:	7019      	strb	r1, [r3, #0]
 80177ea:	4608      	mov	r0, r1
 80177ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80177f0:	4770      	bx	lr

080177f2 <__sfputs_r>:
 80177f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177f4:	4606      	mov	r6, r0
 80177f6:	460f      	mov	r7, r1
 80177f8:	4614      	mov	r4, r2
 80177fa:	18d5      	adds	r5, r2, r3
 80177fc:	42ac      	cmp	r4, r5
 80177fe:	d101      	bne.n	8017804 <__sfputs_r+0x12>
 8017800:	2000      	movs	r0, #0
 8017802:	e007      	b.n	8017814 <__sfputs_r+0x22>
 8017804:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017808:	463a      	mov	r2, r7
 801780a:	4630      	mov	r0, r6
 801780c:	f7ff ffda 	bl	80177c4 <__sfputc_r>
 8017810:	1c43      	adds	r3, r0, #1
 8017812:	d1f3      	bne.n	80177fc <__sfputs_r+0xa>
 8017814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017818 <_vfiprintf_r>:
 8017818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801781c:	460d      	mov	r5, r1
 801781e:	b09d      	sub	sp, #116	; 0x74
 8017820:	4614      	mov	r4, r2
 8017822:	4698      	mov	r8, r3
 8017824:	4606      	mov	r6, r0
 8017826:	b118      	cbz	r0, 8017830 <_vfiprintf_r+0x18>
 8017828:	6983      	ldr	r3, [r0, #24]
 801782a:	b90b      	cbnz	r3, 8017830 <_vfiprintf_r+0x18>
 801782c:	f7ff fcd4 	bl	80171d8 <__sinit>
 8017830:	4b89      	ldr	r3, [pc, #548]	; (8017a58 <_vfiprintf_r+0x240>)
 8017832:	429d      	cmp	r5, r3
 8017834:	d11b      	bne.n	801786e <_vfiprintf_r+0x56>
 8017836:	6875      	ldr	r5, [r6, #4]
 8017838:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801783a:	07d9      	lsls	r1, r3, #31
 801783c:	d405      	bmi.n	801784a <_vfiprintf_r+0x32>
 801783e:	89ab      	ldrh	r3, [r5, #12]
 8017840:	059a      	lsls	r2, r3, #22
 8017842:	d402      	bmi.n	801784a <_vfiprintf_r+0x32>
 8017844:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017846:	f7ff fd77 	bl	8017338 <__retarget_lock_acquire_recursive>
 801784a:	89ab      	ldrh	r3, [r5, #12]
 801784c:	071b      	lsls	r3, r3, #28
 801784e:	d501      	bpl.n	8017854 <_vfiprintf_r+0x3c>
 8017850:	692b      	ldr	r3, [r5, #16]
 8017852:	b9eb      	cbnz	r3, 8017890 <_vfiprintf_r+0x78>
 8017854:	4629      	mov	r1, r5
 8017856:	4630      	mov	r0, r6
 8017858:	f000 fb5a 	bl	8017f10 <__swsetup_r>
 801785c:	b1c0      	cbz	r0, 8017890 <_vfiprintf_r+0x78>
 801785e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017860:	07dc      	lsls	r4, r3, #31
 8017862:	d50e      	bpl.n	8017882 <_vfiprintf_r+0x6a>
 8017864:	f04f 30ff 	mov.w	r0, #4294967295
 8017868:	b01d      	add	sp, #116	; 0x74
 801786a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801786e:	4b7b      	ldr	r3, [pc, #492]	; (8017a5c <_vfiprintf_r+0x244>)
 8017870:	429d      	cmp	r5, r3
 8017872:	d101      	bne.n	8017878 <_vfiprintf_r+0x60>
 8017874:	68b5      	ldr	r5, [r6, #8]
 8017876:	e7df      	b.n	8017838 <_vfiprintf_r+0x20>
 8017878:	4b79      	ldr	r3, [pc, #484]	; (8017a60 <_vfiprintf_r+0x248>)
 801787a:	429d      	cmp	r5, r3
 801787c:	bf08      	it	eq
 801787e:	68f5      	ldreq	r5, [r6, #12]
 8017880:	e7da      	b.n	8017838 <_vfiprintf_r+0x20>
 8017882:	89ab      	ldrh	r3, [r5, #12]
 8017884:	0598      	lsls	r0, r3, #22
 8017886:	d4ed      	bmi.n	8017864 <_vfiprintf_r+0x4c>
 8017888:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801788a:	f7ff fd56 	bl	801733a <__retarget_lock_release_recursive>
 801788e:	e7e9      	b.n	8017864 <_vfiprintf_r+0x4c>
 8017890:	2300      	movs	r3, #0
 8017892:	9309      	str	r3, [sp, #36]	; 0x24
 8017894:	2320      	movs	r3, #32
 8017896:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801789a:	f8cd 800c 	str.w	r8, [sp, #12]
 801789e:	2330      	movs	r3, #48	; 0x30
 80178a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017a64 <_vfiprintf_r+0x24c>
 80178a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80178a8:	f04f 0901 	mov.w	r9, #1
 80178ac:	4623      	mov	r3, r4
 80178ae:	469a      	mov	sl, r3
 80178b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80178b4:	b10a      	cbz	r2, 80178ba <_vfiprintf_r+0xa2>
 80178b6:	2a25      	cmp	r2, #37	; 0x25
 80178b8:	d1f9      	bne.n	80178ae <_vfiprintf_r+0x96>
 80178ba:	ebba 0b04 	subs.w	fp, sl, r4
 80178be:	d00b      	beq.n	80178d8 <_vfiprintf_r+0xc0>
 80178c0:	465b      	mov	r3, fp
 80178c2:	4622      	mov	r2, r4
 80178c4:	4629      	mov	r1, r5
 80178c6:	4630      	mov	r0, r6
 80178c8:	f7ff ff93 	bl	80177f2 <__sfputs_r>
 80178cc:	3001      	adds	r0, #1
 80178ce:	f000 80aa 	beq.w	8017a26 <_vfiprintf_r+0x20e>
 80178d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80178d4:	445a      	add	r2, fp
 80178d6:	9209      	str	r2, [sp, #36]	; 0x24
 80178d8:	f89a 3000 	ldrb.w	r3, [sl]
 80178dc:	2b00      	cmp	r3, #0
 80178de:	f000 80a2 	beq.w	8017a26 <_vfiprintf_r+0x20e>
 80178e2:	2300      	movs	r3, #0
 80178e4:	f04f 32ff 	mov.w	r2, #4294967295
 80178e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80178ec:	f10a 0a01 	add.w	sl, sl, #1
 80178f0:	9304      	str	r3, [sp, #16]
 80178f2:	9307      	str	r3, [sp, #28]
 80178f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80178f8:	931a      	str	r3, [sp, #104]	; 0x68
 80178fa:	4654      	mov	r4, sl
 80178fc:	2205      	movs	r2, #5
 80178fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017902:	4858      	ldr	r0, [pc, #352]	; (8017a64 <_vfiprintf_r+0x24c>)
 8017904:	f7e8 fcb4 	bl	8000270 <memchr>
 8017908:	9a04      	ldr	r2, [sp, #16]
 801790a:	b9d8      	cbnz	r0, 8017944 <_vfiprintf_r+0x12c>
 801790c:	06d1      	lsls	r1, r2, #27
 801790e:	bf44      	itt	mi
 8017910:	2320      	movmi	r3, #32
 8017912:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017916:	0713      	lsls	r3, r2, #28
 8017918:	bf44      	itt	mi
 801791a:	232b      	movmi	r3, #43	; 0x2b
 801791c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017920:	f89a 3000 	ldrb.w	r3, [sl]
 8017924:	2b2a      	cmp	r3, #42	; 0x2a
 8017926:	d015      	beq.n	8017954 <_vfiprintf_r+0x13c>
 8017928:	9a07      	ldr	r2, [sp, #28]
 801792a:	4654      	mov	r4, sl
 801792c:	2000      	movs	r0, #0
 801792e:	f04f 0c0a 	mov.w	ip, #10
 8017932:	4621      	mov	r1, r4
 8017934:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017938:	3b30      	subs	r3, #48	; 0x30
 801793a:	2b09      	cmp	r3, #9
 801793c:	d94e      	bls.n	80179dc <_vfiprintf_r+0x1c4>
 801793e:	b1b0      	cbz	r0, 801796e <_vfiprintf_r+0x156>
 8017940:	9207      	str	r2, [sp, #28]
 8017942:	e014      	b.n	801796e <_vfiprintf_r+0x156>
 8017944:	eba0 0308 	sub.w	r3, r0, r8
 8017948:	fa09 f303 	lsl.w	r3, r9, r3
 801794c:	4313      	orrs	r3, r2
 801794e:	9304      	str	r3, [sp, #16]
 8017950:	46a2      	mov	sl, r4
 8017952:	e7d2      	b.n	80178fa <_vfiprintf_r+0xe2>
 8017954:	9b03      	ldr	r3, [sp, #12]
 8017956:	1d19      	adds	r1, r3, #4
 8017958:	681b      	ldr	r3, [r3, #0]
 801795a:	9103      	str	r1, [sp, #12]
 801795c:	2b00      	cmp	r3, #0
 801795e:	bfbb      	ittet	lt
 8017960:	425b      	neglt	r3, r3
 8017962:	f042 0202 	orrlt.w	r2, r2, #2
 8017966:	9307      	strge	r3, [sp, #28]
 8017968:	9307      	strlt	r3, [sp, #28]
 801796a:	bfb8      	it	lt
 801796c:	9204      	strlt	r2, [sp, #16]
 801796e:	7823      	ldrb	r3, [r4, #0]
 8017970:	2b2e      	cmp	r3, #46	; 0x2e
 8017972:	d10c      	bne.n	801798e <_vfiprintf_r+0x176>
 8017974:	7863      	ldrb	r3, [r4, #1]
 8017976:	2b2a      	cmp	r3, #42	; 0x2a
 8017978:	d135      	bne.n	80179e6 <_vfiprintf_r+0x1ce>
 801797a:	9b03      	ldr	r3, [sp, #12]
 801797c:	1d1a      	adds	r2, r3, #4
 801797e:	681b      	ldr	r3, [r3, #0]
 8017980:	9203      	str	r2, [sp, #12]
 8017982:	2b00      	cmp	r3, #0
 8017984:	bfb8      	it	lt
 8017986:	f04f 33ff 	movlt.w	r3, #4294967295
 801798a:	3402      	adds	r4, #2
 801798c:	9305      	str	r3, [sp, #20]
 801798e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017a74 <_vfiprintf_r+0x25c>
 8017992:	7821      	ldrb	r1, [r4, #0]
 8017994:	2203      	movs	r2, #3
 8017996:	4650      	mov	r0, sl
 8017998:	f7e8 fc6a 	bl	8000270 <memchr>
 801799c:	b140      	cbz	r0, 80179b0 <_vfiprintf_r+0x198>
 801799e:	2340      	movs	r3, #64	; 0x40
 80179a0:	eba0 000a 	sub.w	r0, r0, sl
 80179a4:	fa03 f000 	lsl.w	r0, r3, r0
 80179a8:	9b04      	ldr	r3, [sp, #16]
 80179aa:	4303      	orrs	r3, r0
 80179ac:	3401      	adds	r4, #1
 80179ae:	9304      	str	r3, [sp, #16]
 80179b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80179b4:	482c      	ldr	r0, [pc, #176]	; (8017a68 <_vfiprintf_r+0x250>)
 80179b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80179ba:	2206      	movs	r2, #6
 80179bc:	f7e8 fc58 	bl	8000270 <memchr>
 80179c0:	2800      	cmp	r0, #0
 80179c2:	d03f      	beq.n	8017a44 <_vfiprintf_r+0x22c>
 80179c4:	4b29      	ldr	r3, [pc, #164]	; (8017a6c <_vfiprintf_r+0x254>)
 80179c6:	bb1b      	cbnz	r3, 8017a10 <_vfiprintf_r+0x1f8>
 80179c8:	9b03      	ldr	r3, [sp, #12]
 80179ca:	3307      	adds	r3, #7
 80179cc:	f023 0307 	bic.w	r3, r3, #7
 80179d0:	3308      	adds	r3, #8
 80179d2:	9303      	str	r3, [sp, #12]
 80179d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80179d6:	443b      	add	r3, r7
 80179d8:	9309      	str	r3, [sp, #36]	; 0x24
 80179da:	e767      	b.n	80178ac <_vfiprintf_r+0x94>
 80179dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80179e0:	460c      	mov	r4, r1
 80179e2:	2001      	movs	r0, #1
 80179e4:	e7a5      	b.n	8017932 <_vfiprintf_r+0x11a>
 80179e6:	2300      	movs	r3, #0
 80179e8:	3401      	adds	r4, #1
 80179ea:	9305      	str	r3, [sp, #20]
 80179ec:	4619      	mov	r1, r3
 80179ee:	f04f 0c0a 	mov.w	ip, #10
 80179f2:	4620      	mov	r0, r4
 80179f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80179f8:	3a30      	subs	r2, #48	; 0x30
 80179fa:	2a09      	cmp	r2, #9
 80179fc:	d903      	bls.n	8017a06 <_vfiprintf_r+0x1ee>
 80179fe:	2b00      	cmp	r3, #0
 8017a00:	d0c5      	beq.n	801798e <_vfiprintf_r+0x176>
 8017a02:	9105      	str	r1, [sp, #20]
 8017a04:	e7c3      	b.n	801798e <_vfiprintf_r+0x176>
 8017a06:	fb0c 2101 	mla	r1, ip, r1, r2
 8017a0a:	4604      	mov	r4, r0
 8017a0c:	2301      	movs	r3, #1
 8017a0e:	e7f0      	b.n	80179f2 <_vfiprintf_r+0x1da>
 8017a10:	ab03      	add	r3, sp, #12
 8017a12:	9300      	str	r3, [sp, #0]
 8017a14:	462a      	mov	r2, r5
 8017a16:	4b16      	ldr	r3, [pc, #88]	; (8017a70 <_vfiprintf_r+0x258>)
 8017a18:	a904      	add	r1, sp, #16
 8017a1a:	4630      	mov	r0, r6
 8017a1c:	f3af 8000 	nop.w
 8017a20:	4607      	mov	r7, r0
 8017a22:	1c78      	adds	r0, r7, #1
 8017a24:	d1d6      	bne.n	80179d4 <_vfiprintf_r+0x1bc>
 8017a26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017a28:	07d9      	lsls	r1, r3, #31
 8017a2a:	d405      	bmi.n	8017a38 <_vfiprintf_r+0x220>
 8017a2c:	89ab      	ldrh	r3, [r5, #12]
 8017a2e:	059a      	lsls	r2, r3, #22
 8017a30:	d402      	bmi.n	8017a38 <_vfiprintf_r+0x220>
 8017a32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017a34:	f7ff fc81 	bl	801733a <__retarget_lock_release_recursive>
 8017a38:	89ab      	ldrh	r3, [r5, #12]
 8017a3a:	065b      	lsls	r3, r3, #25
 8017a3c:	f53f af12 	bmi.w	8017864 <_vfiprintf_r+0x4c>
 8017a40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017a42:	e711      	b.n	8017868 <_vfiprintf_r+0x50>
 8017a44:	ab03      	add	r3, sp, #12
 8017a46:	9300      	str	r3, [sp, #0]
 8017a48:	462a      	mov	r2, r5
 8017a4a:	4b09      	ldr	r3, [pc, #36]	; (8017a70 <_vfiprintf_r+0x258>)
 8017a4c:	a904      	add	r1, sp, #16
 8017a4e:	4630      	mov	r0, r6
 8017a50:	f000 f880 	bl	8017b54 <_printf_i>
 8017a54:	e7e4      	b.n	8017a20 <_vfiprintf_r+0x208>
 8017a56:	bf00      	nop
 8017a58:	0801c1cc 	.word	0x0801c1cc
 8017a5c:	0801c1ec 	.word	0x0801c1ec
 8017a60:	0801c1ac 	.word	0x0801c1ac
 8017a64:	0801c20c 	.word	0x0801c20c
 8017a68:	0801c216 	.word	0x0801c216
 8017a6c:	00000000 	.word	0x00000000
 8017a70:	080177f3 	.word	0x080177f3
 8017a74:	0801c212 	.word	0x0801c212

08017a78 <_printf_common>:
 8017a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a7c:	4616      	mov	r6, r2
 8017a7e:	4699      	mov	r9, r3
 8017a80:	688a      	ldr	r2, [r1, #8]
 8017a82:	690b      	ldr	r3, [r1, #16]
 8017a84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017a88:	4293      	cmp	r3, r2
 8017a8a:	bfb8      	it	lt
 8017a8c:	4613      	movlt	r3, r2
 8017a8e:	6033      	str	r3, [r6, #0]
 8017a90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017a94:	4607      	mov	r7, r0
 8017a96:	460c      	mov	r4, r1
 8017a98:	b10a      	cbz	r2, 8017a9e <_printf_common+0x26>
 8017a9a:	3301      	adds	r3, #1
 8017a9c:	6033      	str	r3, [r6, #0]
 8017a9e:	6823      	ldr	r3, [r4, #0]
 8017aa0:	0699      	lsls	r1, r3, #26
 8017aa2:	bf42      	ittt	mi
 8017aa4:	6833      	ldrmi	r3, [r6, #0]
 8017aa6:	3302      	addmi	r3, #2
 8017aa8:	6033      	strmi	r3, [r6, #0]
 8017aaa:	6825      	ldr	r5, [r4, #0]
 8017aac:	f015 0506 	ands.w	r5, r5, #6
 8017ab0:	d106      	bne.n	8017ac0 <_printf_common+0x48>
 8017ab2:	f104 0a19 	add.w	sl, r4, #25
 8017ab6:	68e3      	ldr	r3, [r4, #12]
 8017ab8:	6832      	ldr	r2, [r6, #0]
 8017aba:	1a9b      	subs	r3, r3, r2
 8017abc:	42ab      	cmp	r3, r5
 8017abe:	dc26      	bgt.n	8017b0e <_printf_common+0x96>
 8017ac0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017ac4:	1e13      	subs	r3, r2, #0
 8017ac6:	6822      	ldr	r2, [r4, #0]
 8017ac8:	bf18      	it	ne
 8017aca:	2301      	movne	r3, #1
 8017acc:	0692      	lsls	r2, r2, #26
 8017ace:	d42b      	bmi.n	8017b28 <_printf_common+0xb0>
 8017ad0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017ad4:	4649      	mov	r1, r9
 8017ad6:	4638      	mov	r0, r7
 8017ad8:	47c0      	blx	r8
 8017ada:	3001      	adds	r0, #1
 8017adc:	d01e      	beq.n	8017b1c <_printf_common+0xa4>
 8017ade:	6823      	ldr	r3, [r4, #0]
 8017ae0:	68e5      	ldr	r5, [r4, #12]
 8017ae2:	6832      	ldr	r2, [r6, #0]
 8017ae4:	f003 0306 	and.w	r3, r3, #6
 8017ae8:	2b04      	cmp	r3, #4
 8017aea:	bf08      	it	eq
 8017aec:	1aad      	subeq	r5, r5, r2
 8017aee:	68a3      	ldr	r3, [r4, #8]
 8017af0:	6922      	ldr	r2, [r4, #16]
 8017af2:	bf0c      	ite	eq
 8017af4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017af8:	2500      	movne	r5, #0
 8017afa:	4293      	cmp	r3, r2
 8017afc:	bfc4      	itt	gt
 8017afe:	1a9b      	subgt	r3, r3, r2
 8017b00:	18ed      	addgt	r5, r5, r3
 8017b02:	2600      	movs	r6, #0
 8017b04:	341a      	adds	r4, #26
 8017b06:	42b5      	cmp	r5, r6
 8017b08:	d11a      	bne.n	8017b40 <_printf_common+0xc8>
 8017b0a:	2000      	movs	r0, #0
 8017b0c:	e008      	b.n	8017b20 <_printf_common+0xa8>
 8017b0e:	2301      	movs	r3, #1
 8017b10:	4652      	mov	r2, sl
 8017b12:	4649      	mov	r1, r9
 8017b14:	4638      	mov	r0, r7
 8017b16:	47c0      	blx	r8
 8017b18:	3001      	adds	r0, #1
 8017b1a:	d103      	bne.n	8017b24 <_printf_common+0xac>
 8017b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8017b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b24:	3501      	adds	r5, #1
 8017b26:	e7c6      	b.n	8017ab6 <_printf_common+0x3e>
 8017b28:	18e1      	adds	r1, r4, r3
 8017b2a:	1c5a      	adds	r2, r3, #1
 8017b2c:	2030      	movs	r0, #48	; 0x30
 8017b2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017b32:	4422      	add	r2, r4
 8017b34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017b38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017b3c:	3302      	adds	r3, #2
 8017b3e:	e7c7      	b.n	8017ad0 <_printf_common+0x58>
 8017b40:	2301      	movs	r3, #1
 8017b42:	4622      	mov	r2, r4
 8017b44:	4649      	mov	r1, r9
 8017b46:	4638      	mov	r0, r7
 8017b48:	47c0      	blx	r8
 8017b4a:	3001      	adds	r0, #1
 8017b4c:	d0e6      	beq.n	8017b1c <_printf_common+0xa4>
 8017b4e:	3601      	adds	r6, #1
 8017b50:	e7d9      	b.n	8017b06 <_printf_common+0x8e>
	...

08017b54 <_printf_i>:
 8017b54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017b58:	7e0f      	ldrb	r7, [r1, #24]
 8017b5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017b5c:	2f78      	cmp	r7, #120	; 0x78
 8017b5e:	4691      	mov	r9, r2
 8017b60:	4680      	mov	r8, r0
 8017b62:	460c      	mov	r4, r1
 8017b64:	469a      	mov	sl, r3
 8017b66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017b6a:	d807      	bhi.n	8017b7c <_printf_i+0x28>
 8017b6c:	2f62      	cmp	r7, #98	; 0x62
 8017b6e:	d80a      	bhi.n	8017b86 <_printf_i+0x32>
 8017b70:	2f00      	cmp	r7, #0
 8017b72:	f000 80d8 	beq.w	8017d26 <_printf_i+0x1d2>
 8017b76:	2f58      	cmp	r7, #88	; 0x58
 8017b78:	f000 80a3 	beq.w	8017cc2 <_printf_i+0x16e>
 8017b7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017b80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017b84:	e03a      	b.n	8017bfc <_printf_i+0xa8>
 8017b86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017b8a:	2b15      	cmp	r3, #21
 8017b8c:	d8f6      	bhi.n	8017b7c <_printf_i+0x28>
 8017b8e:	a101      	add	r1, pc, #4	; (adr r1, 8017b94 <_printf_i+0x40>)
 8017b90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017b94:	08017bed 	.word	0x08017bed
 8017b98:	08017c01 	.word	0x08017c01
 8017b9c:	08017b7d 	.word	0x08017b7d
 8017ba0:	08017b7d 	.word	0x08017b7d
 8017ba4:	08017b7d 	.word	0x08017b7d
 8017ba8:	08017b7d 	.word	0x08017b7d
 8017bac:	08017c01 	.word	0x08017c01
 8017bb0:	08017b7d 	.word	0x08017b7d
 8017bb4:	08017b7d 	.word	0x08017b7d
 8017bb8:	08017b7d 	.word	0x08017b7d
 8017bbc:	08017b7d 	.word	0x08017b7d
 8017bc0:	08017d0d 	.word	0x08017d0d
 8017bc4:	08017c31 	.word	0x08017c31
 8017bc8:	08017cef 	.word	0x08017cef
 8017bcc:	08017b7d 	.word	0x08017b7d
 8017bd0:	08017b7d 	.word	0x08017b7d
 8017bd4:	08017d2f 	.word	0x08017d2f
 8017bd8:	08017b7d 	.word	0x08017b7d
 8017bdc:	08017c31 	.word	0x08017c31
 8017be0:	08017b7d 	.word	0x08017b7d
 8017be4:	08017b7d 	.word	0x08017b7d
 8017be8:	08017cf7 	.word	0x08017cf7
 8017bec:	682b      	ldr	r3, [r5, #0]
 8017bee:	1d1a      	adds	r2, r3, #4
 8017bf0:	681b      	ldr	r3, [r3, #0]
 8017bf2:	602a      	str	r2, [r5, #0]
 8017bf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017bf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017bfc:	2301      	movs	r3, #1
 8017bfe:	e0a3      	b.n	8017d48 <_printf_i+0x1f4>
 8017c00:	6820      	ldr	r0, [r4, #0]
 8017c02:	6829      	ldr	r1, [r5, #0]
 8017c04:	0606      	lsls	r6, r0, #24
 8017c06:	f101 0304 	add.w	r3, r1, #4
 8017c0a:	d50a      	bpl.n	8017c22 <_printf_i+0xce>
 8017c0c:	680e      	ldr	r6, [r1, #0]
 8017c0e:	602b      	str	r3, [r5, #0]
 8017c10:	2e00      	cmp	r6, #0
 8017c12:	da03      	bge.n	8017c1c <_printf_i+0xc8>
 8017c14:	232d      	movs	r3, #45	; 0x2d
 8017c16:	4276      	negs	r6, r6
 8017c18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017c1c:	485e      	ldr	r0, [pc, #376]	; (8017d98 <_printf_i+0x244>)
 8017c1e:	230a      	movs	r3, #10
 8017c20:	e019      	b.n	8017c56 <_printf_i+0x102>
 8017c22:	680e      	ldr	r6, [r1, #0]
 8017c24:	602b      	str	r3, [r5, #0]
 8017c26:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017c2a:	bf18      	it	ne
 8017c2c:	b236      	sxthne	r6, r6
 8017c2e:	e7ef      	b.n	8017c10 <_printf_i+0xbc>
 8017c30:	682b      	ldr	r3, [r5, #0]
 8017c32:	6820      	ldr	r0, [r4, #0]
 8017c34:	1d19      	adds	r1, r3, #4
 8017c36:	6029      	str	r1, [r5, #0]
 8017c38:	0601      	lsls	r1, r0, #24
 8017c3a:	d501      	bpl.n	8017c40 <_printf_i+0xec>
 8017c3c:	681e      	ldr	r6, [r3, #0]
 8017c3e:	e002      	b.n	8017c46 <_printf_i+0xf2>
 8017c40:	0646      	lsls	r6, r0, #25
 8017c42:	d5fb      	bpl.n	8017c3c <_printf_i+0xe8>
 8017c44:	881e      	ldrh	r6, [r3, #0]
 8017c46:	4854      	ldr	r0, [pc, #336]	; (8017d98 <_printf_i+0x244>)
 8017c48:	2f6f      	cmp	r7, #111	; 0x6f
 8017c4a:	bf0c      	ite	eq
 8017c4c:	2308      	moveq	r3, #8
 8017c4e:	230a      	movne	r3, #10
 8017c50:	2100      	movs	r1, #0
 8017c52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017c56:	6865      	ldr	r5, [r4, #4]
 8017c58:	60a5      	str	r5, [r4, #8]
 8017c5a:	2d00      	cmp	r5, #0
 8017c5c:	bfa2      	ittt	ge
 8017c5e:	6821      	ldrge	r1, [r4, #0]
 8017c60:	f021 0104 	bicge.w	r1, r1, #4
 8017c64:	6021      	strge	r1, [r4, #0]
 8017c66:	b90e      	cbnz	r6, 8017c6c <_printf_i+0x118>
 8017c68:	2d00      	cmp	r5, #0
 8017c6a:	d04d      	beq.n	8017d08 <_printf_i+0x1b4>
 8017c6c:	4615      	mov	r5, r2
 8017c6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8017c72:	fb03 6711 	mls	r7, r3, r1, r6
 8017c76:	5dc7      	ldrb	r7, [r0, r7]
 8017c78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017c7c:	4637      	mov	r7, r6
 8017c7e:	42bb      	cmp	r3, r7
 8017c80:	460e      	mov	r6, r1
 8017c82:	d9f4      	bls.n	8017c6e <_printf_i+0x11a>
 8017c84:	2b08      	cmp	r3, #8
 8017c86:	d10b      	bne.n	8017ca0 <_printf_i+0x14c>
 8017c88:	6823      	ldr	r3, [r4, #0]
 8017c8a:	07de      	lsls	r6, r3, #31
 8017c8c:	d508      	bpl.n	8017ca0 <_printf_i+0x14c>
 8017c8e:	6923      	ldr	r3, [r4, #16]
 8017c90:	6861      	ldr	r1, [r4, #4]
 8017c92:	4299      	cmp	r1, r3
 8017c94:	bfde      	ittt	le
 8017c96:	2330      	movle	r3, #48	; 0x30
 8017c98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017c9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017ca0:	1b52      	subs	r2, r2, r5
 8017ca2:	6122      	str	r2, [r4, #16]
 8017ca4:	f8cd a000 	str.w	sl, [sp]
 8017ca8:	464b      	mov	r3, r9
 8017caa:	aa03      	add	r2, sp, #12
 8017cac:	4621      	mov	r1, r4
 8017cae:	4640      	mov	r0, r8
 8017cb0:	f7ff fee2 	bl	8017a78 <_printf_common>
 8017cb4:	3001      	adds	r0, #1
 8017cb6:	d14c      	bne.n	8017d52 <_printf_i+0x1fe>
 8017cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8017cbc:	b004      	add	sp, #16
 8017cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017cc2:	4835      	ldr	r0, [pc, #212]	; (8017d98 <_printf_i+0x244>)
 8017cc4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8017cc8:	6829      	ldr	r1, [r5, #0]
 8017cca:	6823      	ldr	r3, [r4, #0]
 8017ccc:	f851 6b04 	ldr.w	r6, [r1], #4
 8017cd0:	6029      	str	r1, [r5, #0]
 8017cd2:	061d      	lsls	r5, r3, #24
 8017cd4:	d514      	bpl.n	8017d00 <_printf_i+0x1ac>
 8017cd6:	07df      	lsls	r7, r3, #31
 8017cd8:	bf44      	itt	mi
 8017cda:	f043 0320 	orrmi.w	r3, r3, #32
 8017cde:	6023      	strmi	r3, [r4, #0]
 8017ce0:	b91e      	cbnz	r6, 8017cea <_printf_i+0x196>
 8017ce2:	6823      	ldr	r3, [r4, #0]
 8017ce4:	f023 0320 	bic.w	r3, r3, #32
 8017ce8:	6023      	str	r3, [r4, #0]
 8017cea:	2310      	movs	r3, #16
 8017cec:	e7b0      	b.n	8017c50 <_printf_i+0xfc>
 8017cee:	6823      	ldr	r3, [r4, #0]
 8017cf0:	f043 0320 	orr.w	r3, r3, #32
 8017cf4:	6023      	str	r3, [r4, #0]
 8017cf6:	2378      	movs	r3, #120	; 0x78
 8017cf8:	4828      	ldr	r0, [pc, #160]	; (8017d9c <_printf_i+0x248>)
 8017cfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017cfe:	e7e3      	b.n	8017cc8 <_printf_i+0x174>
 8017d00:	0659      	lsls	r1, r3, #25
 8017d02:	bf48      	it	mi
 8017d04:	b2b6      	uxthmi	r6, r6
 8017d06:	e7e6      	b.n	8017cd6 <_printf_i+0x182>
 8017d08:	4615      	mov	r5, r2
 8017d0a:	e7bb      	b.n	8017c84 <_printf_i+0x130>
 8017d0c:	682b      	ldr	r3, [r5, #0]
 8017d0e:	6826      	ldr	r6, [r4, #0]
 8017d10:	6961      	ldr	r1, [r4, #20]
 8017d12:	1d18      	adds	r0, r3, #4
 8017d14:	6028      	str	r0, [r5, #0]
 8017d16:	0635      	lsls	r5, r6, #24
 8017d18:	681b      	ldr	r3, [r3, #0]
 8017d1a:	d501      	bpl.n	8017d20 <_printf_i+0x1cc>
 8017d1c:	6019      	str	r1, [r3, #0]
 8017d1e:	e002      	b.n	8017d26 <_printf_i+0x1d2>
 8017d20:	0670      	lsls	r0, r6, #25
 8017d22:	d5fb      	bpl.n	8017d1c <_printf_i+0x1c8>
 8017d24:	8019      	strh	r1, [r3, #0]
 8017d26:	2300      	movs	r3, #0
 8017d28:	6123      	str	r3, [r4, #16]
 8017d2a:	4615      	mov	r5, r2
 8017d2c:	e7ba      	b.n	8017ca4 <_printf_i+0x150>
 8017d2e:	682b      	ldr	r3, [r5, #0]
 8017d30:	1d1a      	adds	r2, r3, #4
 8017d32:	602a      	str	r2, [r5, #0]
 8017d34:	681d      	ldr	r5, [r3, #0]
 8017d36:	6862      	ldr	r2, [r4, #4]
 8017d38:	2100      	movs	r1, #0
 8017d3a:	4628      	mov	r0, r5
 8017d3c:	f7e8 fa98 	bl	8000270 <memchr>
 8017d40:	b108      	cbz	r0, 8017d46 <_printf_i+0x1f2>
 8017d42:	1b40      	subs	r0, r0, r5
 8017d44:	6060      	str	r0, [r4, #4]
 8017d46:	6863      	ldr	r3, [r4, #4]
 8017d48:	6123      	str	r3, [r4, #16]
 8017d4a:	2300      	movs	r3, #0
 8017d4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017d50:	e7a8      	b.n	8017ca4 <_printf_i+0x150>
 8017d52:	6923      	ldr	r3, [r4, #16]
 8017d54:	462a      	mov	r2, r5
 8017d56:	4649      	mov	r1, r9
 8017d58:	4640      	mov	r0, r8
 8017d5a:	47d0      	blx	sl
 8017d5c:	3001      	adds	r0, #1
 8017d5e:	d0ab      	beq.n	8017cb8 <_printf_i+0x164>
 8017d60:	6823      	ldr	r3, [r4, #0]
 8017d62:	079b      	lsls	r3, r3, #30
 8017d64:	d413      	bmi.n	8017d8e <_printf_i+0x23a>
 8017d66:	68e0      	ldr	r0, [r4, #12]
 8017d68:	9b03      	ldr	r3, [sp, #12]
 8017d6a:	4298      	cmp	r0, r3
 8017d6c:	bfb8      	it	lt
 8017d6e:	4618      	movlt	r0, r3
 8017d70:	e7a4      	b.n	8017cbc <_printf_i+0x168>
 8017d72:	2301      	movs	r3, #1
 8017d74:	4632      	mov	r2, r6
 8017d76:	4649      	mov	r1, r9
 8017d78:	4640      	mov	r0, r8
 8017d7a:	47d0      	blx	sl
 8017d7c:	3001      	adds	r0, #1
 8017d7e:	d09b      	beq.n	8017cb8 <_printf_i+0x164>
 8017d80:	3501      	adds	r5, #1
 8017d82:	68e3      	ldr	r3, [r4, #12]
 8017d84:	9903      	ldr	r1, [sp, #12]
 8017d86:	1a5b      	subs	r3, r3, r1
 8017d88:	42ab      	cmp	r3, r5
 8017d8a:	dcf2      	bgt.n	8017d72 <_printf_i+0x21e>
 8017d8c:	e7eb      	b.n	8017d66 <_printf_i+0x212>
 8017d8e:	2500      	movs	r5, #0
 8017d90:	f104 0619 	add.w	r6, r4, #25
 8017d94:	e7f5      	b.n	8017d82 <_printf_i+0x22e>
 8017d96:	bf00      	nop
 8017d98:	0801c21d 	.word	0x0801c21d
 8017d9c:	0801c22e 	.word	0x0801c22e

08017da0 <_sbrk_r>:
 8017da0:	b538      	push	{r3, r4, r5, lr}
 8017da2:	4d06      	ldr	r5, [pc, #24]	; (8017dbc <_sbrk_r+0x1c>)
 8017da4:	2300      	movs	r3, #0
 8017da6:	4604      	mov	r4, r0
 8017da8:	4608      	mov	r0, r1
 8017daa:	602b      	str	r3, [r5, #0]
 8017dac:	f7e9 f8cc 	bl	8000f48 <_sbrk>
 8017db0:	1c43      	adds	r3, r0, #1
 8017db2:	d102      	bne.n	8017dba <_sbrk_r+0x1a>
 8017db4:	682b      	ldr	r3, [r5, #0]
 8017db6:	b103      	cbz	r3, 8017dba <_sbrk_r+0x1a>
 8017db8:	6023      	str	r3, [r4, #0]
 8017dba:	bd38      	pop	{r3, r4, r5, pc}
 8017dbc:	2000d2a0 	.word	0x2000d2a0

08017dc0 <__sread>:
 8017dc0:	b510      	push	{r4, lr}
 8017dc2:	460c      	mov	r4, r1
 8017dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017dc8:	f000 fa9e 	bl	8018308 <_read_r>
 8017dcc:	2800      	cmp	r0, #0
 8017dce:	bfab      	itete	ge
 8017dd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017dd2:	89a3      	ldrhlt	r3, [r4, #12]
 8017dd4:	181b      	addge	r3, r3, r0
 8017dd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017dda:	bfac      	ite	ge
 8017ddc:	6563      	strge	r3, [r4, #84]	; 0x54
 8017dde:	81a3      	strhlt	r3, [r4, #12]
 8017de0:	bd10      	pop	{r4, pc}

08017de2 <__swrite>:
 8017de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017de6:	461f      	mov	r7, r3
 8017de8:	898b      	ldrh	r3, [r1, #12]
 8017dea:	05db      	lsls	r3, r3, #23
 8017dec:	4605      	mov	r5, r0
 8017dee:	460c      	mov	r4, r1
 8017df0:	4616      	mov	r6, r2
 8017df2:	d505      	bpl.n	8017e00 <__swrite+0x1e>
 8017df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017df8:	2302      	movs	r3, #2
 8017dfa:	2200      	movs	r2, #0
 8017dfc:	f000 f9d0 	bl	80181a0 <_lseek_r>
 8017e00:	89a3      	ldrh	r3, [r4, #12]
 8017e02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017e06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017e0a:	81a3      	strh	r3, [r4, #12]
 8017e0c:	4632      	mov	r2, r6
 8017e0e:	463b      	mov	r3, r7
 8017e10:	4628      	mov	r0, r5
 8017e12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017e16:	f000 b869 	b.w	8017eec <_write_r>

08017e1a <__sseek>:
 8017e1a:	b510      	push	{r4, lr}
 8017e1c:	460c      	mov	r4, r1
 8017e1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017e22:	f000 f9bd 	bl	80181a0 <_lseek_r>
 8017e26:	1c43      	adds	r3, r0, #1
 8017e28:	89a3      	ldrh	r3, [r4, #12]
 8017e2a:	bf15      	itete	ne
 8017e2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8017e2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017e32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017e36:	81a3      	strheq	r3, [r4, #12]
 8017e38:	bf18      	it	ne
 8017e3a:	81a3      	strhne	r3, [r4, #12]
 8017e3c:	bd10      	pop	{r4, pc}

08017e3e <__sclose>:
 8017e3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017e42:	f000 b8db 	b.w	8017ffc <_close_r>
	...

08017e48 <__swbuf_r>:
 8017e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e4a:	460e      	mov	r6, r1
 8017e4c:	4614      	mov	r4, r2
 8017e4e:	4605      	mov	r5, r0
 8017e50:	b118      	cbz	r0, 8017e5a <__swbuf_r+0x12>
 8017e52:	6983      	ldr	r3, [r0, #24]
 8017e54:	b90b      	cbnz	r3, 8017e5a <__swbuf_r+0x12>
 8017e56:	f7ff f9bf 	bl	80171d8 <__sinit>
 8017e5a:	4b21      	ldr	r3, [pc, #132]	; (8017ee0 <__swbuf_r+0x98>)
 8017e5c:	429c      	cmp	r4, r3
 8017e5e:	d12b      	bne.n	8017eb8 <__swbuf_r+0x70>
 8017e60:	686c      	ldr	r4, [r5, #4]
 8017e62:	69a3      	ldr	r3, [r4, #24]
 8017e64:	60a3      	str	r3, [r4, #8]
 8017e66:	89a3      	ldrh	r3, [r4, #12]
 8017e68:	071a      	lsls	r2, r3, #28
 8017e6a:	d52f      	bpl.n	8017ecc <__swbuf_r+0x84>
 8017e6c:	6923      	ldr	r3, [r4, #16]
 8017e6e:	b36b      	cbz	r3, 8017ecc <__swbuf_r+0x84>
 8017e70:	6923      	ldr	r3, [r4, #16]
 8017e72:	6820      	ldr	r0, [r4, #0]
 8017e74:	1ac0      	subs	r0, r0, r3
 8017e76:	6963      	ldr	r3, [r4, #20]
 8017e78:	b2f6      	uxtb	r6, r6
 8017e7a:	4283      	cmp	r3, r0
 8017e7c:	4637      	mov	r7, r6
 8017e7e:	dc04      	bgt.n	8017e8a <__swbuf_r+0x42>
 8017e80:	4621      	mov	r1, r4
 8017e82:	4628      	mov	r0, r5
 8017e84:	f000 f950 	bl	8018128 <_fflush_r>
 8017e88:	bb30      	cbnz	r0, 8017ed8 <__swbuf_r+0x90>
 8017e8a:	68a3      	ldr	r3, [r4, #8]
 8017e8c:	3b01      	subs	r3, #1
 8017e8e:	60a3      	str	r3, [r4, #8]
 8017e90:	6823      	ldr	r3, [r4, #0]
 8017e92:	1c5a      	adds	r2, r3, #1
 8017e94:	6022      	str	r2, [r4, #0]
 8017e96:	701e      	strb	r6, [r3, #0]
 8017e98:	6963      	ldr	r3, [r4, #20]
 8017e9a:	3001      	adds	r0, #1
 8017e9c:	4283      	cmp	r3, r0
 8017e9e:	d004      	beq.n	8017eaa <__swbuf_r+0x62>
 8017ea0:	89a3      	ldrh	r3, [r4, #12]
 8017ea2:	07db      	lsls	r3, r3, #31
 8017ea4:	d506      	bpl.n	8017eb4 <__swbuf_r+0x6c>
 8017ea6:	2e0a      	cmp	r6, #10
 8017ea8:	d104      	bne.n	8017eb4 <__swbuf_r+0x6c>
 8017eaa:	4621      	mov	r1, r4
 8017eac:	4628      	mov	r0, r5
 8017eae:	f000 f93b 	bl	8018128 <_fflush_r>
 8017eb2:	b988      	cbnz	r0, 8017ed8 <__swbuf_r+0x90>
 8017eb4:	4638      	mov	r0, r7
 8017eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017eb8:	4b0a      	ldr	r3, [pc, #40]	; (8017ee4 <__swbuf_r+0x9c>)
 8017eba:	429c      	cmp	r4, r3
 8017ebc:	d101      	bne.n	8017ec2 <__swbuf_r+0x7a>
 8017ebe:	68ac      	ldr	r4, [r5, #8]
 8017ec0:	e7cf      	b.n	8017e62 <__swbuf_r+0x1a>
 8017ec2:	4b09      	ldr	r3, [pc, #36]	; (8017ee8 <__swbuf_r+0xa0>)
 8017ec4:	429c      	cmp	r4, r3
 8017ec6:	bf08      	it	eq
 8017ec8:	68ec      	ldreq	r4, [r5, #12]
 8017eca:	e7ca      	b.n	8017e62 <__swbuf_r+0x1a>
 8017ecc:	4621      	mov	r1, r4
 8017ece:	4628      	mov	r0, r5
 8017ed0:	f000 f81e 	bl	8017f10 <__swsetup_r>
 8017ed4:	2800      	cmp	r0, #0
 8017ed6:	d0cb      	beq.n	8017e70 <__swbuf_r+0x28>
 8017ed8:	f04f 37ff 	mov.w	r7, #4294967295
 8017edc:	e7ea      	b.n	8017eb4 <__swbuf_r+0x6c>
 8017ede:	bf00      	nop
 8017ee0:	0801c1cc 	.word	0x0801c1cc
 8017ee4:	0801c1ec 	.word	0x0801c1ec
 8017ee8:	0801c1ac 	.word	0x0801c1ac

08017eec <_write_r>:
 8017eec:	b538      	push	{r3, r4, r5, lr}
 8017eee:	4d07      	ldr	r5, [pc, #28]	; (8017f0c <_write_r+0x20>)
 8017ef0:	4604      	mov	r4, r0
 8017ef2:	4608      	mov	r0, r1
 8017ef4:	4611      	mov	r1, r2
 8017ef6:	2200      	movs	r2, #0
 8017ef8:	602a      	str	r2, [r5, #0]
 8017efa:	461a      	mov	r2, r3
 8017efc:	f7e8 ffd3 	bl	8000ea6 <_write>
 8017f00:	1c43      	adds	r3, r0, #1
 8017f02:	d102      	bne.n	8017f0a <_write_r+0x1e>
 8017f04:	682b      	ldr	r3, [r5, #0]
 8017f06:	b103      	cbz	r3, 8017f0a <_write_r+0x1e>
 8017f08:	6023      	str	r3, [r4, #0]
 8017f0a:	bd38      	pop	{r3, r4, r5, pc}
 8017f0c:	2000d2a0 	.word	0x2000d2a0

08017f10 <__swsetup_r>:
 8017f10:	4b32      	ldr	r3, [pc, #200]	; (8017fdc <__swsetup_r+0xcc>)
 8017f12:	b570      	push	{r4, r5, r6, lr}
 8017f14:	681d      	ldr	r5, [r3, #0]
 8017f16:	4606      	mov	r6, r0
 8017f18:	460c      	mov	r4, r1
 8017f1a:	b125      	cbz	r5, 8017f26 <__swsetup_r+0x16>
 8017f1c:	69ab      	ldr	r3, [r5, #24]
 8017f1e:	b913      	cbnz	r3, 8017f26 <__swsetup_r+0x16>
 8017f20:	4628      	mov	r0, r5
 8017f22:	f7ff f959 	bl	80171d8 <__sinit>
 8017f26:	4b2e      	ldr	r3, [pc, #184]	; (8017fe0 <__swsetup_r+0xd0>)
 8017f28:	429c      	cmp	r4, r3
 8017f2a:	d10f      	bne.n	8017f4c <__swsetup_r+0x3c>
 8017f2c:	686c      	ldr	r4, [r5, #4]
 8017f2e:	89a3      	ldrh	r3, [r4, #12]
 8017f30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017f34:	0719      	lsls	r1, r3, #28
 8017f36:	d42c      	bmi.n	8017f92 <__swsetup_r+0x82>
 8017f38:	06dd      	lsls	r5, r3, #27
 8017f3a:	d411      	bmi.n	8017f60 <__swsetup_r+0x50>
 8017f3c:	2309      	movs	r3, #9
 8017f3e:	6033      	str	r3, [r6, #0]
 8017f40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017f44:	81a3      	strh	r3, [r4, #12]
 8017f46:	f04f 30ff 	mov.w	r0, #4294967295
 8017f4a:	e03e      	b.n	8017fca <__swsetup_r+0xba>
 8017f4c:	4b25      	ldr	r3, [pc, #148]	; (8017fe4 <__swsetup_r+0xd4>)
 8017f4e:	429c      	cmp	r4, r3
 8017f50:	d101      	bne.n	8017f56 <__swsetup_r+0x46>
 8017f52:	68ac      	ldr	r4, [r5, #8]
 8017f54:	e7eb      	b.n	8017f2e <__swsetup_r+0x1e>
 8017f56:	4b24      	ldr	r3, [pc, #144]	; (8017fe8 <__swsetup_r+0xd8>)
 8017f58:	429c      	cmp	r4, r3
 8017f5a:	bf08      	it	eq
 8017f5c:	68ec      	ldreq	r4, [r5, #12]
 8017f5e:	e7e6      	b.n	8017f2e <__swsetup_r+0x1e>
 8017f60:	0758      	lsls	r0, r3, #29
 8017f62:	d512      	bpl.n	8017f8a <__swsetup_r+0x7a>
 8017f64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017f66:	b141      	cbz	r1, 8017f7a <__swsetup_r+0x6a>
 8017f68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017f6c:	4299      	cmp	r1, r3
 8017f6e:	d002      	beq.n	8017f76 <__swsetup_r+0x66>
 8017f70:	4630      	mov	r0, r6
 8017f72:	f7ff f9eb 	bl	801734c <_free_r>
 8017f76:	2300      	movs	r3, #0
 8017f78:	6363      	str	r3, [r4, #52]	; 0x34
 8017f7a:	89a3      	ldrh	r3, [r4, #12]
 8017f7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017f80:	81a3      	strh	r3, [r4, #12]
 8017f82:	2300      	movs	r3, #0
 8017f84:	6063      	str	r3, [r4, #4]
 8017f86:	6923      	ldr	r3, [r4, #16]
 8017f88:	6023      	str	r3, [r4, #0]
 8017f8a:	89a3      	ldrh	r3, [r4, #12]
 8017f8c:	f043 0308 	orr.w	r3, r3, #8
 8017f90:	81a3      	strh	r3, [r4, #12]
 8017f92:	6923      	ldr	r3, [r4, #16]
 8017f94:	b94b      	cbnz	r3, 8017faa <__swsetup_r+0x9a>
 8017f96:	89a3      	ldrh	r3, [r4, #12]
 8017f98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017f9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017fa0:	d003      	beq.n	8017faa <__swsetup_r+0x9a>
 8017fa2:	4621      	mov	r1, r4
 8017fa4:	4630      	mov	r0, r6
 8017fa6:	f000 f933 	bl	8018210 <__smakebuf_r>
 8017faa:	89a0      	ldrh	r0, [r4, #12]
 8017fac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017fb0:	f010 0301 	ands.w	r3, r0, #1
 8017fb4:	d00a      	beq.n	8017fcc <__swsetup_r+0xbc>
 8017fb6:	2300      	movs	r3, #0
 8017fb8:	60a3      	str	r3, [r4, #8]
 8017fba:	6963      	ldr	r3, [r4, #20]
 8017fbc:	425b      	negs	r3, r3
 8017fbe:	61a3      	str	r3, [r4, #24]
 8017fc0:	6923      	ldr	r3, [r4, #16]
 8017fc2:	b943      	cbnz	r3, 8017fd6 <__swsetup_r+0xc6>
 8017fc4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017fc8:	d1ba      	bne.n	8017f40 <__swsetup_r+0x30>
 8017fca:	bd70      	pop	{r4, r5, r6, pc}
 8017fcc:	0781      	lsls	r1, r0, #30
 8017fce:	bf58      	it	pl
 8017fd0:	6963      	ldrpl	r3, [r4, #20]
 8017fd2:	60a3      	str	r3, [r4, #8]
 8017fd4:	e7f4      	b.n	8017fc0 <__swsetup_r+0xb0>
 8017fd6:	2000      	movs	r0, #0
 8017fd8:	e7f7      	b.n	8017fca <__swsetup_r+0xba>
 8017fda:	bf00      	nop
 8017fdc:	2000001c 	.word	0x2000001c
 8017fe0:	0801c1cc 	.word	0x0801c1cc
 8017fe4:	0801c1ec 	.word	0x0801c1ec
 8017fe8:	0801c1ac 	.word	0x0801c1ac

08017fec <abort>:
 8017fec:	b508      	push	{r3, lr}
 8017fee:	2006      	movs	r0, #6
 8017ff0:	f000 f9c4 	bl	801837c <raise>
 8017ff4:	2001      	movs	r0, #1
 8017ff6:	f7e8 ff2f 	bl	8000e58 <_exit>
	...

08017ffc <_close_r>:
 8017ffc:	b538      	push	{r3, r4, r5, lr}
 8017ffe:	4d06      	ldr	r5, [pc, #24]	; (8018018 <_close_r+0x1c>)
 8018000:	2300      	movs	r3, #0
 8018002:	4604      	mov	r4, r0
 8018004:	4608      	mov	r0, r1
 8018006:	602b      	str	r3, [r5, #0]
 8018008:	f7e8 ff69 	bl	8000ede <_close>
 801800c:	1c43      	adds	r3, r0, #1
 801800e:	d102      	bne.n	8018016 <_close_r+0x1a>
 8018010:	682b      	ldr	r3, [r5, #0]
 8018012:	b103      	cbz	r3, 8018016 <_close_r+0x1a>
 8018014:	6023      	str	r3, [r4, #0]
 8018016:	bd38      	pop	{r3, r4, r5, pc}
 8018018:	2000d2a0 	.word	0x2000d2a0

0801801c <__sflush_r>:
 801801c:	898a      	ldrh	r2, [r1, #12]
 801801e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018022:	4605      	mov	r5, r0
 8018024:	0710      	lsls	r0, r2, #28
 8018026:	460c      	mov	r4, r1
 8018028:	d458      	bmi.n	80180dc <__sflush_r+0xc0>
 801802a:	684b      	ldr	r3, [r1, #4]
 801802c:	2b00      	cmp	r3, #0
 801802e:	dc05      	bgt.n	801803c <__sflush_r+0x20>
 8018030:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018032:	2b00      	cmp	r3, #0
 8018034:	dc02      	bgt.n	801803c <__sflush_r+0x20>
 8018036:	2000      	movs	r0, #0
 8018038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801803c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801803e:	2e00      	cmp	r6, #0
 8018040:	d0f9      	beq.n	8018036 <__sflush_r+0x1a>
 8018042:	2300      	movs	r3, #0
 8018044:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018048:	682f      	ldr	r7, [r5, #0]
 801804a:	602b      	str	r3, [r5, #0]
 801804c:	d032      	beq.n	80180b4 <__sflush_r+0x98>
 801804e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018050:	89a3      	ldrh	r3, [r4, #12]
 8018052:	075a      	lsls	r2, r3, #29
 8018054:	d505      	bpl.n	8018062 <__sflush_r+0x46>
 8018056:	6863      	ldr	r3, [r4, #4]
 8018058:	1ac0      	subs	r0, r0, r3
 801805a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801805c:	b10b      	cbz	r3, 8018062 <__sflush_r+0x46>
 801805e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018060:	1ac0      	subs	r0, r0, r3
 8018062:	2300      	movs	r3, #0
 8018064:	4602      	mov	r2, r0
 8018066:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018068:	6a21      	ldr	r1, [r4, #32]
 801806a:	4628      	mov	r0, r5
 801806c:	47b0      	blx	r6
 801806e:	1c43      	adds	r3, r0, #1
 8018070:	89a3      	ldrh	r3, [r4, #12]
 8018072:	d106      	bne.n	8018082 <__sflush_r+0x66>
 8018074:	6829      	ldr	r1, [r5, #0]
 8018076:	291d      	cmp	r1, #29
 8018078:	d82c      	bhi.n	80180d4 <__sflush_r+0xb8>
 801807a:	4a2a      	ldr	r2, [pc, #168]	; (8018124 <__sflush_r+0x108>)
 801807c:	40ca      	lsrs	r2, r1
 801807e:	07d6      	lsls	r6, r2, #31
 8018080:	d528      	bpl.n	80180d4 <__sflush_r+0xb8>
 8018082:	2200      	movs	r2, #0
 8018084:	6062      	str	r2, [r4, #4]
 8018086:	04d9      	lsls	r1, r3, #19
 8018088:	6922      	ldr	r2, [r4, #16]
 801808a:	6022      	str	r2, [r4, #0]
 801808c:	d504      	bpl.n	8018098 <__sflush_r+0x7c>
 801808e:	1c42      	adds	r2, r0, #1
 8018090:	d101      	bne.n	8018096 <__sflush_r+0x7a>
 8018092:	682b      	ldr	r3, [r5, #0]
 8018094:	b903      	cbnz	r3, 8018098 <__sflush_r+0x7c>
 8018096:	6560      	str	r0, [r4, #84]	; 0x54
 8018098:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801809a:	602f      	str	r7, [r5, #0]
 801809c:	2900      	cmp	r1, #0
 801809e:	d0ca      	beq.n	8018036 <__sflush_r+0x1a>
 80180a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80180a4:	4299      	cmp	r1, r3
 80180a6:	d002      	beq.n	80180ae <__sflush_r+0x92>
 80180a8:	4628      	mov	r0, r5
 80180aa:	f7ff f94f 	bl	801734c <_free_r>
 80180ae:	2000      	movs	r0, #0
 80180b0:	6360      	str	r0, [r4, #52]	; 0x34
 80180b2:	e7c1      	b.n	8018038 <__sflush_r+0x1c>
 80180b4:	6a21      	ldr	r1, [r4, #32]
 80180b6:	2301      	movs	r3, #1
 80180b8:	4628      	mov	r0, r5
 80180ba:	47b0      	blx	r6
 80180bc:	1c41      	adds	r1, r0, #1
 80180be:	d1c7      	bne.n	8018050 <__sflush_r+0x34>
 80180c0:	682b      	ldr	r3, [r5, #0]
 80180c2:	2b00      	cmp	r3, #0
 80180c4:	d0c4      	beq.n	8018050 <__sflush_r+0x34>
 80180c6:	2b1d      	cmp	r3, #29
 80180c8:	d001      	beq.n	80180ce <__sflush_r+0xb2>
 80180ca:	2b16      	cmp	r3, #22
 80180cc:	d101      	bne.n	80180d2 <__sflush_r+0xb6>
 80180ce:	602f      	str	r7, [r5, #0]
 80180d0:	e7b1      	b.n	8018036 <__sflush_r+0x1a>
 80180d2:	89a3      	ldrh	r3, [r4, #12]
 80180d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80180d8:	81a3      	strh	r3, [r4, #12]
 80180da:	e7ad      	b.n	8018038 <__sflush_r+0x1c>
 80180dc:	690f      	ldr	r7, [r1, #16]
 80180de:	2f00      	cmp	r7, #0
 80180e0:	d0a9      	beq.n	8018036 <__sflush_r+0x1a>
 80180e2:	0793      	lsls	r3, r2, #30
 80180e4:	680e      	ldr	r6, [r1, #0]
 80180e6:	bf08      	it	eq
 80180e8:	694b      	ldreq	r3, [r1, #20]
 80180ea:	600f      	str	r7, [r1, #0]
 80180ec:	bf18      	it	ne
 80180ee:	2300      	movne	r3, #0
 80180f0:	eba6 0807 	sub.w	r8, r6, r7
 80180f4:	608b      	str	r3, [r1, #8]
 80180f6:	f1b8 0f00 	cmp.w	r8, #0
 80180fa:	dd9c      	ble.n	8018036 <__sflush_r+0x1a>
 80180fc:	6a21      	ldr	r1, [r4, #32]
 80180fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018100:	4643      	mov	r3, r8
 8018102:	463a      	mov	r2, r7
 8018104:	4628      	mov	r0, r5
 8018106:	47b0      	blx	r6
 8018108:	2800      	cmp	r0, #0
 801810a:	dc06      	bgt.n	801811a <__sflush_r+0xfe>
 801810c:	89a3      	ldrh	r3, [r4, #12]
 801810e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018112:	81a3      	strh	r3, [r4, #12]
 8018114:	f04f 30ff 	mov.w	r0, #4294967295
 8018118:	e78e      	b.n	8018038 <__sflush_r+0x1c>
 801811a:	4407      	add	r7, r0
 801811c:	eba8 0800 	sub.w	r8, r8, r0
 8018120:	e7e9      	b.n	80180f6 <__sflush_r+0xda>
 8018122:	bf00      	nop
 8018124:	20400001 	.word	0x20400001

08018128 <_fflush_r>:
 8018128:	b538      	push	{r3, r4, r5, lr}
 801812a:	690b      	ldr	r3, [r1, #16]
 801812c:	4605      	mov	r5, r0
 801812e:	460c      	mov	r4, r1
 8018130:	b913      	cbnz	r3, 8018138 <_fflush_r+0x10>
 8018132:	2500      	movs	r5, #0
 8018134:	4628      	mov	r0, r5
 8018136:	bd38      	pop	{r3, r4, r5, pc}
 8018138:	b118      	cbz	r0, 8018142 <_fflush_r+0x1a>
 801813a:	6983      	ldr	r3, [r0, #24]
 801813c:	b90b      	cbnz	r3, 8018142 <_fflush_r+0x1a>
 801813e:	f7ff f84b 	bl	80171d8 <__sinit>
 8018142:	4b14      	ldr	r3, [pc, #80]	; (8018194 <_fflush_r+0x6c>)
 8018144:	429c      	cmp	r4, r3
 8018146:	d11b      	bne.n	8018180 <_fflush_r+0x58>
 8018148:	686c      	ldr	r4, [r5, #4]
 801814a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801814e:	2b00      	cmp	r3, #0
 8018150:	d0ef      	beq.n	8018132 <_fflush_r+0xa>
 8018152:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018154:	07d0      	lsls	r0, r2, #31
 8018156:	d404      	bmi.n	8018162 <_fflush_r+0x3a>
 8018158:	0599      	lsls	r1, r3, #22
 801815a:	d402      	bmi.n	8018162 <_fflush_r+0x3a>
 801815c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801815e:	f7ff f8eb 	bl	8017338 <__retarget_lock_acquire_recursive>
 8018162:	4628      	mov	r0, r5
 8018164:	4621      	mov	r1, r4
 8018166:	f7ff ff59 	bl	801801c <__sflush_r>
 801816a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801816c:	07da      	lsls	r2, r3, #31
 801816e:	4605      	mov	r5, r0
 8018170:	d4e0      	bmi.n	8018134 <_fflush_r+0xc>
 8018172:	89a3      	ldrh	r3, [r4, #12]
 8018174:	059b      	lsls	r3, r3, #22
 8018176:	d4dd      	bmi.n	8018134 <_fflush_r+0xc>
 8018178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801817a:	f7ff f8de 	bl	801733a <__retarget_lock_release_recursive>
 801817e:	e7d9      	b.n	8018134 <_fflush_r+0xc>
 8018180:	4b05      	ldr	r3, [pc, #20]	; (8018198 <_fflush_r+0x70>)
 8018182:	429c      	cmp	r4, r3
 8018184:	d101      	bne.n	801818a <_fflush_r+0x62>
 8018186:	68ac      	ldr	r4, [r5, #8]
 8018188:	e7df      	b.n	801814a <_fflush_r+0x22>
 801818a:	4b04      	ldr	r3, [pc, #16]	; (801819c <_fflush_r+0x74>)
 801818c:	429c      	cmp	r4, r3
 801818e:	bf08      	it	eq
 8018190:	68ec      	ldreq	r4, [r5, #12]
 8018192:	e7da      	b.n	801814a <_fflush_r+0x22>
 8018194:	0801c1cc 	.word	0x0801c1cc
 8018198:	0801c1ec 	.word	0x0801c1ec
 801819c:	0801c1ac 	.word	0x0801c1ac

080181a0 <_lseek_r>:
 80181a0:	b538      	push	{r3, r4, r5, lr}
 80181a2:	4d07      	ldr	r5, [pc, #28]	; (80181c0 <_lseek_r+0x20>)
 80181a4:	4604      	mov	r4, r0
 80181a6:	4608      	mov	r0, r1
 80181a8:	4611      	mov	r1, r2
 80181aa:	2200      	movs	r2, #0
 80181ac:	602a      	str	r2, [r5, #0]
 80181ae:	461a      	mov	r2, r3
 80181b0:	f7e8 febc 	bl	8000f2c <_lseek>
 80181b4:	1c43      	adds	r3, r0, #1
 80181b6:	d102      	bne.n	80181be <_lseek_r+0x1e>
 80181b8:	682b      	ldr	r3, [r5, #0]
 80181ba:	b103      	cbz	r3, 80181be <_lseek_r+0x1e>
 80181bc:	6023      	str	r3, [r4, #0]
 80181be:	bd38      	pop	{r3, r4, r5, pc}
 80181c0:	2000d2a0 	.word	0x2000d2a0

080181c4 <__swhatbuf_r>:
 80181c4:	b570      	push	{r4, r5, r6, lr}
 80181c6:	460e      	mov	r6, r1
 80181c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80181cc:	2900      	cmp	r1, #0
 80181ce:	b096      	sub	sp, #88	; 0x58
 80181d0:	4614      	mov	r4, r2
 80181d2:	461d      	mov	r5, r3
 80181d4:	da08      	bge.n	80181e8 <__swhatbuf_r+0x24>
 80181d6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80181da:	2200      	movs	r2, #0
 80181dc:	602a      	str	r2, [r5, #0]
 80181de:	061a      	lsls	r2, r3, #24
 80181e0:	d410      	bmi.n	8018204 <__swhatbuf_r+0x40>
 80181e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80181e6:	e00e      	b.n	8018206 <__swhatbuf_r+0x42>
 80181e8:	466a      	mov	r2, sp
 80181ea:	f000 f8e3 	bl	80183b4 <_fstat_r>
 80181ee:	2800      	cmp	r0, #0
 80181f0:	dbf1      	blt.n	80181d6 <__swhatbuf_r+0x12>
 80181f2:	9a01      	ldr	r2, [sp, #4]
 80181f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80181f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80181fc:	425a      	negs	r2, r3
 80181fe:	415a      	adcs	r2, r3
 8018200:	602a      	str	r2, [r5, #0]
 8018202:	e7ee      	b.n	80181e2 <__swhatbuf_r+0x1e>
 8018204:	2340      	movs	r3, #64	; 0x40
 8018206:	2000      	movs	r0, #0
 8018208:	6023      	str	r3, [r4, #0]
 801820a:	b016      	add	sp, #88	; 0x58
 801820c:	bd70      	pop	{r4, r5, r6, pc}
	...

08018210 <__smakebuf_r>:
 8018210:	898b      	ldrh	r3, [r1, #12]
 8018212:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018214:	079d      	lsls	r5, r3, #30
 8018216:	4606      	mov	r6, r0
 8018218:	460c      	mov	r4, r1
 801821a:	d507      	bpl.n	801822c <__smakebuf_r+0x1c>
 801821c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018220:	6023      	str	r3, [r4, #0]
 8018222:	6123      	str	r3, [r4, #16]
 8018224:	2301      	movs	r3, #1
 8018226:	6163      	str	r3, [r4, #20]
 8018228:	b002      	add	sp, #8
 801822a:	bd70      	pop	{r4, r5, r6, pc}
 801822c:	ab01      	add	r3, sp, #4
 801822e:	466a      	mov	r2, sp
 8018230:	f7ff ffc8 	bl	80181c4 <__swhatbuf_r>
 8018234:	9900      	ldr	r1, [sp, #0]
 8018236:	4605      	mov	r5, r0
 8018238:	4630      	mov	r0, r6
 801823a:	f7ff f8f3 	bl	8017424 <_malloc_r>
 801823e:	b948      	cbnz	r0, 8018254 <__smakebuf_r+0x44>
 8018240:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018244:	059a      	lsls	r2, r3, #22
 8018246:	d4ef      	bmi.n	8018228 <__smakebuf_r+0x18>
 8018248:	f023 0303 	bic.w	r3, r3, #3
 801824c:	f043 0302 	orr.w	r3, r3, #2
 8018250:	81a3      	strh	r3, [r4, #12]
 8018252:	e7e3      	b.n	801821c <__smakebuf_r+0xc>
 8018254:	4b0d      	ldr	r3, [pc, #52]	; (801828c <__smakebuf_r+0x7c>)
 8018256:	62b3      	str	r3, [r6, #40]	; 0x28
 8018258:	89a3      	ldrh	r3, [r4, #12]
 801825a:	6020      	str	r0, [r4, #0]
 801825c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018260:	81a3      	strh	r3, [r4, #12]
 8018262:	9b00      	ldr	r3, [sp, #0]
 8018264:	6163      	str	r3, [r4, #20]
 8018266:	9b01      	ldr	r3, [sp, #4]
 8018268:	6120      	str	r0, [r4, #16]
 801826a:	b15b      	cbz	r3, 8018284 <__smakebuf_r+0x74>
 801826c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018270:	4630      	mov	r0, r6
 8018272:	f000 f8b1 	bl	80183d8 <_isatty_r>
 8018276:	b128      	cbz	r0, 8018284 <__smakebuf_r+0x74>
 8018278:	89a3      	ldrh	r3, [r4, #12]
 801827a:	f023 0303 	bic.w	r3, r3, #3
 801827e:	f043 0301 	orr.w	r3, r3, #1
 8018282:	81a3      	strh	r3, [r4, #12]
 8018284:	89a0      	ldrh	r0, [r4, #12]
 8018286:	4305      	orrs	r5, r0
 8018288:	81a5      	strh	r5, [r4, #12]
 801828a:	e7cd      	b.n	8018228 <__smakebuf_r+0x18>
 801828c:	08017171 	.word	0x08017171

08018290 <__malloc_lock>:
 8018290:	4801      	ldr	r0, [pc, #4]	; (8018298 <__malloc_lock+0x8>)
 8018292:	f7ff b851 	b.w	8017338 <__retarget_lock_acquire_recursive>
 8018296:	bf00      	nop
 8018298:	2000d2a8 	.word	0x2000d2a8

0801829c <__malloc_unlock>:
 801829c:	4801      	ldr	r0, [pc, #4]	; (80182a4 <__malloc_unlock+0x8>)
 801829e:	f7ff b84c 	b.w	801733a <__retarget_lock_release_recursive>
 80182a2:	bf00      	nop
 80182a4:	2000d2a8 	.word	0x2000d2a8

080182a8 <_realloc_r>:
 80182a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80182ac:	4680      	mov	r8, r0
 80182ae:	4614      	mov	r4, r2
 80182b0:	460e      	mov	r6, r1
 80182b2:	b921      	cbnz	r1, 80182be <_realloc_r+0x16>
 80182b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80182b8:	4611      	mov	r1, r2
 80182ba:	f7ff b8b3 	b.w	8017424 <_malloc_r>
 80182be:	b92a      	cbnz	r2, 80182cc <_realloc_r+0x24>
 80182c0:	f7ff f844 	bl	801734c <_free_r>
 80182c4:	4625      	mov	r5, r4
 80182c6:	4628      	mov	r0, r5
 80182c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182cc:	f000 f894 	bl	80183f8 <_malloc_usable_size_r>
 80182d0:	4284      	cmp	r4, r0
 80182d2:	4607      	mov	r7, r0
 80182d4:	d802      	bhi.n	80182dc <_realloc_r+0x34>
 80182d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80182da:	d812      	bhi.n	8018302 <_realloc_r+0x5a>
 80182dc:	4621      	mov	r1, r4
 80182de:	4640      	mov	r0, r8
 80182e0:	f7ff f8a0 	bl	8017424 <_malloc_r>
 80182e4:	4605      	mov	r5, r0
 80182e6:	2800      	cmp	r0, #0
 80182e8:	d0ed      	beq.n	80182c6 <_realloc_r+0x1e>
 80182ea:	42bc      	cmp	r4, r7
 80182ec:	4622      	mov	r2, r4
 80182ee:	4631      	mov	r1, r6
 80182f0:	bf28      	it	cs
 80182f2:	463a      	movcs	r2, r7
 80182f4:	f7fe fe54 	bl	8016fa0 <memcpy>
 80182f8:	4631      	mov	r1, r6
 80182fa:	4640      	mov	r0, r8
 80182fc:	f7ff f826 	bl	801734c <_free_r>
 8018300:	e7e1      	b.n	80182c6 <_realloc_r+0x1e>
 8018302:	4635      	mov	r5, r6
 8018304:	e7df      	b.n	80182c6 <_realloc_r+0x1e>
	...

08018308 <_read_r>:
 8018308:	b538      	push	{r3, r4, r5, lr}
 801830a:	4d07      	ldr	r5, [pc, #28]	; (8018328 <_read_r+0x20>)
 801830c:	4604      	mov	r4, r0
 801830e:	4608      	mov	r0, r1
 8018310:	4611      	mov	r1, r2
 8018312:	2200      	movs	r2, #0
 8018314:	602a      	str	r2, [r5, #0]
 8018316:	461a      	mov	r2, r3
 8018318:	f7e8 fda8 	bl	8000e6c <_read>
 801831c:	1c43      	adds	r3, r0, #1
 801831e:	d102      	bne.n	8018326 <_read_r+0x1e>
 8018320:	682b      	ldr	r3, [r5, #0]
 8018322:	b103      	cbz	r3, 8018326 <_read_r+0x1e>
 8018324:	6023      	str	r3, [r4, #0]
 8018326:	bd38      	pop	{r3, r4, r5, pc}
 8018328:	2000d2a0 	.word	0x2000d2a0

0801832c <_raise_r>:
 801832c:	291f      	cmp	r1, #31
 801832e:	b538      	push	{r3, r4, r5, lr}
 8018330:	4604      	mov	r4, r0
 8018332:	460d      	mov	r5, r1
 8018334:	d904      	bls.n	8018340 <_raise_r+0x14>
 8018336:	2316      	movs	r3, #22
 8018338:	6003      	str	r3, [r0, #0]
 801833a:	f04f 30ff 	mov.w	r0, #4294967295
 801833e:	bd38      	pop	{r3, r4, r5, pc}
 8018340:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018342:	b112      	cbz	r2, 801834a <_raise_r+0x1e>
 8018344:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018348:	b94b      	cbnz	r3, 801835e <_raise_r+0x32>
 801834a:	4620      	mov	r0, r4
 801834c:	f000 f830 	bl	80183b0 <_getpid_r>
 8018350:	462a      	mov	r2, r5
 8018352:	4601      	mov	r1, r0
 8018354:	4620      	mov	r0, r4
 8018356:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801835a:	f000 b817 	b.w	801838c <_kill_r>
 801835e:	2b01      	cmp	r3, #1
 8018360:	d00a      	beq.n	8018378 <_raise_r+0x4c>
 8018362:	1c59      	adds	r1, r3, #1
 8018364:	d103      	bne.n	801836e <_raise_r+0x42>
 8018366:	2316      	movs	r3, #22
 8018368:	6003      	str	r3, [r0, #0]
 801836a:	2001      	movs	r0, #1
 801836c:	e7e7      	b.n	801833e <_raise_r+0x12>
 801836e:	2400      	movs	r4, #0
 8018370:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018374:	4628      	mov	r0, r5
 8018376:	4798      	blx	r3
 8018378:	2000      	movs	r0, #0
 801837a:	e7e0      	b.n	801833e <_raise_r+0x12>

0801837c <raise>:
 801837c:	4b02      	ldr	r3, [pc, #8]	; (8018388 <raise+0xc>)
 801837e:	4601      	mov	r1, r0
 8018380:	6818      	ldr	r0, [r3, #0]
 8018382:	f7ff bfd3 	b.w	801832c <_raise_r>
 8018386:	bf00      	nop
 8018388:	2000001c 	.word	0x2000001c

0801838c <_kill_r>:
 801838c:	b538      	push	{r3, r4, r5, lr}
 801838e:	4d07      	ldr	r5, [pc, #28]	; (80183ac <_kill_r+0x20>)
 8018390:	2300      	movs	r3, #0
 8018392:	4604      	mov	r4, r0
 8018394:	4608      	mov	r0, r1
 8018396:	4611      	mov	r1, r2
 8018398:	602b      	str	r3, [r5, #0]
 801839a:	f7e8 fd4b 	bl	8000e34 <_kill>
 801839e:	1c43      	adds	r3, r0, #1
 80183a0:	d102      	bne.n	80183a8 <_kill_r+0x1c>
 80183a2:	682b      	ldr	r3, [r5, #0]
 80183a4:	b103      	cbz	r3, 80183a8 <_kill_r+0x1c>
 80183a6:	6023      	str	r3, [r4, #0]
 80183a8:	bd38      	pop	{r3, r4, r5, pc}
 80183aa:	bf00      	nop
 80183ac:	2000d2a0 	.word	0x2000d2a0

080183b0 <_getpid_r>:
 80183b0:	f7e8 bd38 	b.w	8000e24 <_getpid>

080183b4 <_fstat_r>:
 80183b4:	b538      	push	{r3, r4, r5, lr}
 80183b6:	4d07      	ldr	r5, [pc, #28]	; (80183d4 <_fstat_r+0x20>)
 80183b8:	2300      	movs	r3, #0
 80183ba:	4604      	mov	r4, r0
 80183bc:	4608      	mov	r0, r1
 80183be:	4611      	mov	r1, r2
 80183c0:	602b      	str	r3, [r5, #0]
 80183c2:	f7e8 fd98 	bl	8000ef6 <_fstat>
 80183c6:	1c43      	adds	r3, r0, #1
 80183c8:	d102      	bne.n	80183d0 <_fstat_r+0x1c>
 80183ca:	682b      	ldr	r3, [r5, #0]
 80183cc:	b103      	cbz	r3, 80183d0 <_fstat_r+0x1c>
 80183ce:	6023      	str	r3, [r4, #0]
 80183d0:	bd38      	pop	{r3, r4, r5, pc}
 80183d2:	bf00      	nop
 80183d4:	2000d2a0 	.word	0x2000d2a0

080183d8 <_isatty_r>:
 80183d8:	b538      	push	{r3, r4, r5, lr}
 80183da:	4d06      	ldr	r5, [pc, #24]	; (80183f4 <_isatty_r+0x1c>)
 80183dc:	2300      	movs	r3, #0
 80183de:	4604      	mov	r4, r0
 80183e0:	4608      	mov	r0, r1
 80183e2:	602b      	str	r3, [r5, #0]
 80183e4:	f7e8 fd97 	bl	8000f16 <_isatty>
 80183e8:	1c43      	adds	r3, r0, #1
 80183ea:	d102      	bne.n	80183f2 <_isatty_r+0x1a>
 80183ec:	682b      	ldr	r3, [r5, #0]
 80183ee:	b103      	cbz	r3, 80183f2 <_isatty_r+0x1a>
 80183f0:	6023      	str	r3, [r4, #0]
 80183f2:	bd38      	pop	{r3, r4, r5, pc}
 80183f4:	2000d2a0 	.word	0x2000d2a0

080183f8 <_malloc_usable_size_r>:
 80183f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80183fc:	1f18      	subs	r0, r3, #4
 80183fe:	2b00      	cmp	r3, #0
 8018400:	bfbc      	itt	lt
 8018402:	580b      	ldrlt	r3, [r1, r0]
 8018404:	18c0      	addlt	r0, r0, r3
 8018406:	4770      	bx	lr

08018408 <_init>:
 8018408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801840a:	bf00      	nop
 801840c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801840e:	bc08      	pop	{r3}
 8018410:	469e      	mov	lr, r3
 8018412:	4770      	bx	lr

08018414 <_fini>:
 8018414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018416:	bf00      	nop
 8018418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801841a:	bc08      	pop	{r3}
 801841c:	469e      	mov	lr, r3
 801841e:	4770      	bx	lr
