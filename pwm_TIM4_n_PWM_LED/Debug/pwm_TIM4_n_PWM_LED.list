
pwm_TIM4_n_PWM_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026bc  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080028b4  080028b4  000128b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028c4  080028c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080028c4  080028c4  000128c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080028cc  080028cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028cc  080028cc  000128cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028d0  080028d0  000128d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080028d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  080028e0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  080028e0  00020078  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000096f3  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014e6  00000000  00000000  0002972d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000990  00000000  00000000  0002ac18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e8  00000000  00000000  0002b5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000260d3  00000000  00000000  0002be90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a5a2  00000000  00000000  00051f63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f18e5  00000000  00000000  0005c505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014ddea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002804  00000000  00000000  0014de40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	0800289c 	.word	0x0800289c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	0800289c 	.word	0x0800289c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000536:	f000 fa1a 	bl	800096e <HAL_Init>

  /* Variables */
  int x;

  /* Configure the system clock */
  SystemClock_Config();
 800053a:	f000 f82d 	bl	8000598 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053e:	f000 f90b 	bl	8000758 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000542:	f000 f891 	bl	8000668 <MX_TIM4_Init>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); // Starting TIM4-CH2 in PWM mode
 8000546:	2104      	movs	r1, #4
 8000548:	4812      	ldr	r0, [pc, #72]	; (8000594 <main+0x64>)
 800054a:	f001 fa57 	bl	80019fc <HAL_TIM_PWM_Start>

  /* Infinite loop */
  while (1)
  {
	  // Increasing LED brightness from counting 0 to 1000 every 1sec
	  for(x=0; x<1000; x++){
 800054e:	2300      	movs	r3, #0
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	e009      	b.n	8000568 <main+0x38>
	  	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, x);
 8000554:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <main+0x64>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	639a      	str	r2, [r3, #56]	; 0x38
	  	HAL_Delay(1);
 800055c:	2001      	movs	r0, #1
 800055e:	f000 fa63 	bl	8000a28 <HAL_Delay>
	  for(x=0; x<1000; x++){
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	3301      	adds	r3, #1
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800056e:	dbf1      	blt.n	8000554 <main+0x24>
	  }
	  // Decreasing LED brightness from counting 1000 to 0 every 1sec
	  for(x=1000; x>0; x=x-1){
 8000570:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	e009      	b.n	800058c <main+0x5c>
	  	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, x);
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <main+0x64>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	639a      	str	r2, [r3, #56]	; 0x38
	  	HAL_Delay(1);
 8000580:	2001      	movs	r0, #1
 8000582:	f000 fa51 	bl	8000a28 <HAL_Delay>
	  for(x=1000; x>0; x=x-1){
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	3b01      	subs	r3, #1
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2b00      	cmp	r3, #0
 8000590:	dcf2      	bgt.n	8000578 <main+0x48>
	  for(x=0; x<1000; x++){
 8000592:	e7dc      	b.n	800054e <main+0x1e>
 8000594:	20000028 	.word	0x20000028

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	; 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 031c 	add.w	r3, r7, #28
 80005a2:	2234      	movs	r2, #52	; 0x34
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f002 f970 	bl	800288c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 0308 	add.w	r3, r7, #8
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005bc:	4b28      	ldr	r3, [pc, #160]	; (8000660 <SystemClock_Config+0xc8>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	4a27      	ldr	r2, [pc, #156]	; (8000660 <SystemClock_Config+0xc8>)
 80005c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c6:	6413      	str	r3, [r2, #64]	; 0x40
 80005c8:	4b25      	ldr	r3, [pc, #148]	; (8000660 <SystemClock_Config+0xc8>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005d4:	4b23      	ldr	r3, [pc, #140]	; (8000664 <SystemClock_Config+0xcc>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005dc:	4a21      	ldr	r2, [pc, #132]	; (8000664 <SystemClock_Config+0xcc>)
 80005de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <SystemClock_Config+0xcc>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ec:	603b      	str	r3, [r7, #0]
 80005ee:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f0:	2301      	movs	r3, #1
 80005f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fa:	2302      	movs	r3, #2
 80005fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000602:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000604:	2304      	movs	r3, #4
 8000606:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000608:	2360      	movs	r3, #96	; 0x60
 800060a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060c:	2302      	movs	r3, #2
 800060e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000610:	2302      	movs	r3, #2
 8000612:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000614:	2302      	movs	r3, #2
 8000616:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000618:	f107 031c 	add.w	r3, r7, #28
 800061c:	4618      	mov	r0, r3
 800061e:	f000 fcb9 	bl	8000f94 <HAL_RCC_OscConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000628:	f000 f8ba 	bl	80007a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062c:	230f      	movs	r3, #15
 800062e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000630:	2302      	movs	r3, #2
 8000632:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000634:	2390      	movs	r3, #144	; 0x90
 8000636:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000640:	f107 0308 	add.w	r3, r7, #8
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f000 ff52 	bl	80014f0 <HAL_RCC_ClockConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000652:	f000 f8a5 	bl	80007a0 <Error_Handler>
  }
}
 8000656:	bf00      	nop
 8000658:	3750      	adds	r7, #80	; 0x50
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40023800 	.word	0x40023800
 8000664:	40007000 	.word	0x40007000

08000668 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08e      	sub	sp, #56	; 0x38
 800066c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800066e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000688:	463b      	mov	r3, r7
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
 8000694:	611a      	str	r2, [r3, #16]
 8000696:	615a      	str	r2, [r3, #20]
 8000698:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 800069a:	4b2d      	ldr	r3, [pc, #180]	; (8000750 <MX_TIM4_Init+0xe8>)
 800069c:	4a2d      	ldr	r2, [pc, #180]	; (8000754 <MX_TIM4_Init+0xec>)
 800069e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240 - 1;
 80006a0:	4b2b      	ldr	r3, [pc, #172]	; (8000750 <MX_TIM4_Init+0xe8>)
 80006a2:	22ef      	movs	r2, #239	; 0xef
 80006a4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a6:	4b2a      	ldr	r3, [pc, #168]	; (8000750 <MX_TIM4_Init+0xe8>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 80006ac:	4b28      	ldr	r3, [pc, #160]	; (8000750 <MX_TIM4_Init+0xe8>)
 80006ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006b2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b4:	4b26      	ldr	r3, [pc, #152]	; (8000750 <MX_TIM4_Init+0xe8>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ba:	4b25      	ldr	r3, [pc, #148]	; (8000750 <MX_TIM4_Init+0xe8>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80006c0:	4823      	ldr	r0, [pc, #140]	; (8000750 <MX_TIM4_Init+0xe8>)
 80006c2:	f001 f8e3 	bl	800188c <HAL_TIM_Base_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80006cc:	f000 f868 	bl	80007a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80006d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006da:	4619      	mov	r1, r3
 80006dc:	481c      	ldr	r0, [pc, #112]	; (8000750 <MX_TIM4_Init+0xe8>)
 80006de:	f001 fb9b 	bl	8001e18 <HAL_TIM_ConfigClockSource>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80006e8:	f000 f85a 	bl	80007a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80006ec:	4818      	ldr	r0, [pc, #96]	; (8000750 <MX_TIM4_Init+0xe8>)
 80006ee:	f001 f924 	bl	800193a <HAL_TIM_PWM_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80006f8:	f000 f852 	bl	80007a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000700:	2300      	movs	r3, #0
 8000702:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000704:	f107 031c 	add.w	r3, r7, #28
 8000708:	4619      	mov	r1, r3
 800070a:	4811      	ldr	r0, [pc, #68]	; (8000750 <MX_TIM4_Init+0xe8>)
 800070c:	f002 f80c 	bl	8002728 <HAL_TIMEx_MasterConfigSynchronization>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000716:	f000 f843 	bl	80007a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800071a:	2360      	movs	r3, #96	; 0x60
 800071c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000726:	2300      	movs	r3, #0
 8000728:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800072a:	463b      	mov	r3, r7
 800072c:	2204      	movs	r2, #4
 800072e:	4619      	mov	r1, r3
 8000730:	4807      	ldr	r0, [pc, #28]	; (8000750 <MX_TIM4_Init+0xe8>)
 8000732:	f001 fa5d 	bl	8001bf0 <HAL_TIM_PWM_ConfigChannel>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800073c:	f000 f830 	bl	80007a0 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim4);
 8000740:	4803      	ldr	r0, [pc, #12]	; (8000750 <MX_TIM4_Init+0xe8>)
 8000742:	f000 f877 	bl	8000834 <HAL_TIM_MspPostInit>
}
 8000746:	bf00      	nop
 8000748:	3738      	adds	r7, #56	; 0x38
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000028 	.word	0x20000028
 8000754:	40000800 	.word	0x40000800

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_GPIO_Init+0x44>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a0e      	ldr	r2, [pc, #56]	; (800079c <MX_GPIO_Init+0x44>)
 8000764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_GPIO_Init+0x44>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_GPIO_Init+0x44>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a08      	ldr	r2, [pc, #32]	; (800079c <MX_GPIO_Init+0x44>)
 800077c:	f043 0302 	orr.w	r3, r3, #2
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_GPIO_Init+0x44>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0302 	and.w	r3, r3, #2
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]

}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800

080007a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a4:	b672      	cpsid	i
}
 80007a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <Error_Handler+0x8>
	...

080007ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007b2:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <HAL_MspInit+0x44>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	4a0e      	ldr	r2, [pc, #56]	; (80007f0 <HAL_MspInit+0x44>)
 80007b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007bc:	6413      	str	r3, [r2, #64]	; 0x40
 80007be:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <HAL_MspInit+0x44>)
 80007c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <HAL_MspInit+0x44>)
 80007cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ce:	4a08      	ldr	r2, [pc, #32]	; (80007f0 <HAL_MspInit+0x44>)
 80007d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d4:	6453      	str	r3, [r2, #68]	; 0x44
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <HAL_MspInit+0x44>)
 80007d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	40023800 	.word	0x40023800

080007f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a0a      	ldr	r2, [pc, #40]	; (800082c <HAL_TIM_Base_MspInit+0x38>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d10b      	bne.n	800081e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000806:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <HAL_TIM_Base_MspInit+0x3c>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080a:	4a09      	ldr	r2, [pc, #36]	; (8000830 <HAL_TIM_Base_MspInit+0x3c>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	6413      	str	r3, [r2, #64]	; 0x40
 8000812:	4b07      	ldr	r3, [pc, #28]	; (8000830 <HAL_TIM_Base_MspInit+0x3c>)
 8000814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800081e:	bf00      	nop
 8000820:	3714      	adds	r7, #20
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	40000800 	.word	0x40000800
 8000830:	40023800 	.word	0x40023800

08000834 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b088      	sub	sp, #32
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a11      	ldr	r2, [pc, #68]	; (8000898 <HAL_TIM_MspPostInit+0x64>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d11b      	bne.n	800088e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <HAL_TIM_MspPostInit+0x68>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a10      	ldr	r2, [pc, #64]	; (800089c <HAL_TIM_MspPostInit+0x68>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <HAL_TIM_MspPostInit+0x68>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800086e:	2380      	movs	r3, #128	; 0x80
 8000870:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000872:	2302      	movs	r3, #2
 8000874:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800087e:	2302      	movs	r3, #2
 8000880:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	4619      	mov	r1, r3
 8000888:	4805      	ldr	r0, [pc, #20]	; (80008a0 <HAL_TIM_MspPostInit+0x6c>)
 800088a:	f000 f9d7 	bl	8000c3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800088e:	bf00      	nop
 8000890:	3720      	adds	r7, #32
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40000800 	.word	0x40000800
 800089c:	40023800 	.word	0x40023800
 80008a0:	40020400 	.word	0x40020400

080008a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <NMI_Handler+0x4>

080008aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <HardFault_Handler+0x4>

080008b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <MemManage_Handler+0x4>

080008b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ba:	e7fe      	b.n	80008ba <BusFault_Handler+0x4>

080008bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <UsageFault_Handler+0x4>

080008c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr

080008de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f0:	f000 f87a 	bl	80009e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <SystemInit+0x20>)
 80008fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000902:	4a05      	ldr	r2, [pc, #20]	; (8000918 <SystemInit+0x20>)
 8000904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800091c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000954 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000920:	480d      	ldr	r0, [pc, #52]	; (8000958 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000922:	490e      	ldr	r1, [pc, #56]	; (800095c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000924:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000928:	e002      	b.n	8000930 <LoopCopyDataInit>

0800092a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800092a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800092c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092e:	3304      	adds	r3, #4

08000930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000934:	d3f9      	bcc.n	800092a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000936:	4a0b      	ldr	r2, [pc, #44]	; (8000964 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000938:	4c0b      	ldr	r4, [pc, #44]	; (8000968 <LoopFillZerobss+0x26>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800093c:	e001      	b.n	8000942 <LoopFillZerobss>

0800093e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000940:	3204      	adds	r2, #4

08000942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000944:	d3fb      	bcc.n	800093e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000946:	f7ff ffd7 	bl	80008f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800094a:	f001 ff7b 	bl	8002844 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800094e:	f7ff fdef 	bl	8000530 <main>
  bx  lr    
 8000952:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000954:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800095c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000960:	080028d4 	.word	0x080028d4
  ldr r2, =_sbss
 8000964:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000968:	20000078 	.word	0x20000078

0800096c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800096c:	e7fe      	b.n	800096c <ADC_IRQHandler>

0800096e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000972:	2003      	movs	r0, #3
 8000974:	f000 f92e 	bl	8000bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000978:	200f      	movs	r0, #15
 800097a:	f000 f805 	bl	8000988 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800097e:	f7ff ff15 	bl	80007ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000982:	2300      	movs	r3, #0
}
 8000984:	4618      	mov	r0, r3
 8000986:	bd80      	pop	{r7, pc}

08000988 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000990:	4b12      	ldr	r3, [pc, #72]	; (80009dc <HAL_InitTick+0x54>)
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <HAL_InitTick+0x58>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	4619      	mov	r1, r3
 800099a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800099e:	fbb3 f3f1 	udiv	r3, r3, r1
 80009a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 f93b 	bl	8000c22 <HAL_SYSTICK_Config>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
 80009b4:	e00e      	b.n	80009d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2b0f      	cmp	r3, #15
 80009ba:	d80a      	bhi.n	80009d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009bc:	2200      	movs	r2, #0
 80009be:	6879      	ldr	r1, [r7, #4]
 80009c0:	f04f 30ff 	mov.w	r0, #4294967295
 80009c4:	f000 f911 	bl	8000bea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009c8:	4a06      	ldr	r2, [pc, #24]	; (80009e4 <HAL_InitTick+0x5c>)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ce:	2300      	movs	r3, #0
 80009d0:	e000      	b.n	80009d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000000 	.word	0x20000000
 80009e0:	20000008 	.word	0x20000008
 80009e4:	20000004 	.word	0x20000004

080009e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <HAL_IncTick+0x20>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	461a      	mov	r2, r3
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_IncTick+0x24>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4413      	add	r3, r2
 80009f8:	4a04      	ldr	r2, [pc, #16]	; (8000a0c <HAL_IncTick+0x24>)
 80009fa:	6013      	str	r3, [r2, #0]
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	20000008 	.word	0x20000008
 8000a0c:	20000074 	.word	0x20000074

08000a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return uwTick;
 8000a14:	4b03      	ldr	r3, [pc, #12]	; (8000a24 <HAL_GetTick+0x14>)
 8000a16:	681b      	ldr	r3, [r3, #0]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	20000074 	.word	0x20000074

08000a28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a30:	f7ff ffee 	bl	8000a10 <HAL_GetTick>
 8000a34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a40:	d005      	beq.n	8000a4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a42:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <HAL_Delay+0x44>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	461a      	mov	r2, r3
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a4e:	bf00      	nop
 8000a50:	f7ff ffde 	bl	8000a10 <HAL_GetTick>
 8000a54:	4602      	mov	r2, r0
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	68fa      	ldr	r2, [r7, #12]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d8f7      	bhi.n	8000a50 <HAL_Delay+0x28>
  {
  }
}
 8000a60:	bf00      	nop
 8000a62:	bf00      	nop
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000008 	.word	0x20000008

08000a70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f003 0307 	and.w	r3, r3, #7
 8000a7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a80:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <__NVIC_SetPriorityGrouping+0x40>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a86:	68ba      	ldr	r2, [r7, #8]
 8000a88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a9e:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <__NVIC_SetPriorityGrouping+0x40>)
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	60d3      	str	r3, [r2, #12]
}
 8000aa4:	bf00      	nop
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	e000ed00 	.word	0xe000ed00
 8000ab4:	05fa0000 	.word	0x05fa0000

08000ab8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000abc:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <__NVIC_GetPriorityGrouping+0x18>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	0a1b      	lsrs	r3, r3, #8
 8000ac2:	f003 0307 	and.w	r3, r3, #7
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	6039      	str	r1, [r7, #0]
 8000ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	db0a      	blt.n	8000afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	490c      	ldr	r1, [pc, #48]	; (8000b20 <__NVIC_SetPriority+0x4c>)
 8000aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af2:	0112      	lsls	r2, r2, #4
 8000af4:	b2d2      	uxtb	r2, r2
 8000af6:	440b      	add	r3, r1
 8000af8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000afc:	e00a      	b.n	8000b14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	b2da      	uxtb	r2, r3
 8000b02:	4908      	ldr	r1, [pc, #32]	; (8000b24 <__NVIC_SetPriority+0x50>)
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	f003 030f 	and.w	r3, r3, #15
 8000b0a:	3b04      	subs	r3, #4
 8000b0c:	0112      	lsls	r2, r2, #4
 8000b0e:	b2d2      	uxtb	r2, r2
 8000b10:	440b      	add	r3, r1
 8000b12:	761a      	strb	r2, [r3, #24]
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	e000e100 	.word	0xe000e100
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b089      	sub	sp, #36	; 0x24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	f003 0307 	and.w	r3, r3, #7
 8000b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b3c:	69fb      	ldr	r3, [r7, #28]
 8000b3e:	f1c3 0307 	rsb	r3, r3, #7
 8000b42:	2b04      	cmp	r3, #4
 8000b44:	bf28      	it	cs
 8000b46:	2304      	movcs	r3, #4
 8000b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	3304      	adds	r3, #4
 8000b4e:	2b06      	cmp	r3, #6
 8000b50:	d902      	bls.n	8000b58 <NVIC_EncodePriority+0x30>
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	3b03      	subs	r3, #3
 8000b56:	e000      	b.n	8000b5a <NVIC_EncodePriority+0x32>
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b60:	69bb      	ldr	r3, [r7, #24]
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	43da      	mvns	r2, r3
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	401a      	ands	r2, r3
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b70:	f04f 31ff 	mov.w	r1, #4294967295
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7a:	43d9      	mvns	r1, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b80:	4313      	orrs	r3, r2
         );
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3724      	adds	r7, #36	; 0x24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
	...

08000b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ba0:	d301      	bcc.n	8000ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e00f      	b.n	8000bc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <SysTick_Config+0x40>)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bae:	210f      	movs	r1, #15
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	f7ff ff8e 	bl	8000ad4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <SysTick_Config+0x40>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bbe:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <SysTick_Config+0x40>)
 8000bc0:	2207      	movs	r2, #7
 8000bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	e000e010 	.word	0xe000e010

08000bd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f7ff ff47 	bl	8000a70 <__NVIC_SetPriorityGrouping>
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b086      	sub	sp, #24
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	60b9      	str	r1, [r7, #8]
 8000bf4:	607a      	str	r2, [r7, #4]
 8000bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bfc:	f7ff ff5c 	bl	8000ab8 <__NVIC_GetPriorityGrouping>
 8000c00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	68b9      	ldr	r1, [r7, #8]
 8000c06:	6978      	ldr	r0, [r7, #20]
 8000c08:	f7ff ff8e 	bl	8000b28 <NVIC_EncodePriority>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c12:	4611      	mov	r1, r2
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff ff5d 	bl	8000ad4 <__NVIC_SetPriority>
}
 8000c1a:	bf00      	nop
 8000c1c:	3718      	adds	r7, #24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b082      	sub	sp, #8
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f7ff ffb0 	bl	8000b90 <SysTick_Config>
 8000c30:	4603      	mov	r3, r0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b089      	sub	sp, #36	; 0x24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
 8000c5a:	e175      	b.n	8000f48 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	697a      	ldr	r2, [r7, #20]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	f040 8164 	bne.w	8000f42 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f003 0303 	and.w	r3, r3, #3
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d005      	beq.n	8000c92 <HAL_GPIO_Init+0x56>
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f003 0303 	and.w	r3, r3, #3
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	d130      	bne.n	8000cf4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	2203      	movs	r2, #3
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	68da      	ldr	r2, [r3, #12]
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	69ba      	ldr	r2, [r7, #24]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cc8:	2201      	movs	r2, #1
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	69ba      	ldr	r2, [r7, #24]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	091b      	lsrs	r3, r3, #4
 8000cde:	f003 0201 	and.w	r2, r3, #1
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f003 0303 	and.w	r3, r3, #3
 8000cfc:	2b03      	cmp	r3, #3
 8000cfe:	d017      	beq.n	8000d30 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	2203      	movs	r2, #3
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	43db      	mvns	r3, r3
 8000d12:	69ba      	ldr	r2, [r7, #24]
 8000d14:	4013      	ands	r3, r2
 8000d16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	689a      	ldr	r2, [r3, #8]
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f003 0303 	and.w	r3, r3, #3
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d123      	bne.n	8000d84 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	08da      	lsrs	r2, r3, #3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3208      	adds	r2, #8
 8000d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	f003 0307 	and.w	r3, r3, #7
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	220f      	movs	r2, #15
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	691a      	ldr	r2, [r3, #16]
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	08da      	lsrs	r2, r3, #3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3208      	adds	r2, #8
 8000d7e:	69b9      	ldr	r1, [r7, #24]
 8000d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	2203      	movs	r2, #3
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 0203 	and.w	r2, r3, #3
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	f000 80be 	beq.w	8000f42 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc6:	4b66      	ldr	r3, [pc, #408]	; (8000f60 <HAL_GPIO_Init+0x324>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dca:	4a65      	ldr	r2, [pc, #404]	; (8000f60 <HAL_GPIO_Init+0x324>)
 8000dcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd2:	4b63      	ldr	r3, [pc, #396]	; (8000f60 <HAL_GPIO_Init+0x324>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000dde:	4a61      	ldr	r2, [pc, #388]	; (8000f64 <HAL_GPIO_Init+0x328>)
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	089b      	lsrs	r3, r3, #2
 8000de4:	3302      	adds	r3, #2
 8000de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	f003 0303 	and.w	r3, r3, #3
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	220f      	movs	r2, #15
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a58      	ldr	r2, [pc, #352]	; (8000f68 <HAL_GPIO_Init+0x32c>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d037      	beq.n	8000e7a <HAL_GPIO_Init+0x23e>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a57      	ldr	r2, [pc, #348]	; (8000f6c <HAL_GPIO_Init+0x330>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d031      	beq.n	8000e76 <HAL_GPIO_Init+0x23a>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a56      	ldr	r2, [pc, #344]	; (8000f70 <HAL_GPIO_Init+0x334>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d02b      	beq.n	8000e72 <HAL_GPIO_Init+0x236>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a55      	ldr	r2, [pc, #340]	; (8000f74 <HAL_GPIO_Init+0x338>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d025      	beq.n	8000e6e <HAL_GPIO_Init+0x232>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a54      	ldr	r2, [pc, #336]	; (8000f78 <HAL_GPIO_Init+0x33c>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d01f      	beq.n	8000e6a <HAL_GPIO_Init+0x22e>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a53      	ldr	r2, [pc, #332]	; (8000f7c <HAL_GPIO_Init+0x340>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d019      	beq.n	8000e66 <HAL_GPIO_Init+0x22a>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a52      	ldr	r2, [pc, #328]	; (8000f80 <HAL_GPIO_Init+0x344>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d013      	beq.n	8000e62 <HAL_GPIO_Init+0x226>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a51      	ldr	r2, [pc, #324]	; (8000f84 <HAL_GPIO_Init+0x348>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d00d      	beq.n	8000e5e <HAL_GPIO_Init+0x222>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a50      	ldr	r2, [pc, #320]	; (8000f88 <HAL_GPIO_Init+0x34c>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d007      	beq.n	8000e5a <HAL_GPIO_Init+0x21e>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a4f      	ldr	r2, [pc, #316]	; (8000f8c <HAL_GPIO_Init+0x350>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d101      	bne.n	8000e56 <HAL_GPIO_Init+0x21a>
 8000e52:	2309      	movs	r3, #9
 8000e54:	e012      	b.n	8000e7c <HAL_GPIO_Init+0x240>
 8000e56:	230a      	movs	r3, #10
 8000e58:	e010      	b.n	8000e7c <HAL_GPIO_Init+0x240>
 8000e5a:	2308      	movs	r3, #8
 8000e5c:	e00e      	b.n	8000e7c <HAL_GPIO_Init+0x240>
 8000e5e:	2307      	movs	r3, #7
 8000e60:	e00c      	b.n	8000e7c <HAL_GPIO_Init+0x240>
 8000e62:	2306      	movs	r3, #6
 8000e64:	e00a      	b.n	8000e7c <HAL_GPIO_Init+0x240>
 8000e66:	2305      	movs	r3, #5
 8000e68:	e008      	b.n	8000e7c <HAL_GPIO_Init+0x240>
 8000e6a:	2304      	movs	r3, #4
 8000e6c:	e006      	b.n	8000e7c <HAL_GPIO_Init+0x240>
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e004      	b.n	8000e7c <HAL_GPIO_Init+0x240>
 8000e72:	2302      	movs	r3, #2
 8000e74:	e002      	b.n	8000e7c <HAL_GPIO_Init+0x240>
 8000e76:	2301      	movs	r3, #1
 8000e78:	e000      	b.n	8000e7c <HAL_GPIO_Init+0x240>
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	69fa      	ldr	r2, [r7, #28]
 8000e7e:	f002 0203 	and.w	r2, r2, #3
 8000e82:	0092      	lsls	r2, r2, #2
 8000e84:	4093      	lsls	r3, r2
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000e8c:	4935      	ldr	r1, [pc, #212]	; (8000f64 <HAL_GPIO_Init+0x328>)
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	089b      	lsrs	r3, r3, #2
 8000e92:	3302      	adds	r3, #2
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e9a:	4b3d      	ldr	r3, [pc, #244]	; (8000f90 <HAL_GPIO_Init+0x354>)
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d003      	beq.n	8000ebe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ebe:	4a34      	ldr	r2, [pc, #208]	; (8000f90 <HAL_GPIO_Init+0x354>)
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ec4:	4b32      	ldr	r3, [pc, #200]	; (8000f90 <HAL_GPIO_Init+0x354>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d003      	beq.n	8000ee8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ee8:	4a29      	ldr	r2, [pc, #164]	; (8000f90 <HAL_GPIO_Init+0x354>)
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000eee:	4b28      	ldr	r3, [pc, #160]	; (8000f90 <HAL_GPIO_Init+0x354>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4013      	ands	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f12:	4a1f      	ldr	r2, [pc, #124]	; (8000f90 <HAL_GPIO_Init+0x354>)
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f18:	4b1d      	ldr	r3, [pc, #116]	; (8000f90 <HAL_GPIO_Init+0x354>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	43db      	mvns	r3, r3
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4013      	ands	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d003      	beq.n	8000f3c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f3c:	4a14      	ldr	r2, [pc, #80]	; (8000f90 <HAL_GPIO_Init+0x354>)
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3301      	adds	r3, #1
 8000f46:	61fb      	str	r3, [r7, #28]
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	2b0f      	cmp	r3, #15
 8000f4c:	f67f ae86 	bls.w	8000c5c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000f50:	bf00      	nop
 8000f52:	bf00      	nop
 8000f54:	3724      	adds	r7, #36	; 0x24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40013800 	.word	0x40013800
 8000f68:	40020000 	.word	0x40020000
 8000f6c:	40020400 	.word	0x40020400
 8000f70:	40020800 	.word	0x40020800
 8000f74:	40020c00 	.word	0x40020c00
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40021400 	.word	0x40021400
 8000f80:	40021800 	.word	0x40021800
 8000f84:	40021c00 	.word	0x40021c00
 8000f88:	40022000 	.word	0x40022000
 8000f8c:	40022400 	.word	0x40022400
 8000f90:	40013c00 	.word	0x40013c00

08000f94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d101      	bne.n	8000faa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e29b      	b.n	80014e2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f000 8087 	beq.w	80010c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fb8:	4b96      	ldr	r3, [pc, #600]	; (8001214 <HAL_RCC_OscConfig+0x280>)
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	f003 030c 	and.w	r3, r3, #12
 8000fc0:	2b04      	cmp	r3, #4
 8000fc2:	d00c      	beq.n	8000fde <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fc4:	4b93      	ldr	r3, [pc, #588]	; (8001214 <HAL_RCC_OscConfig+0x280>)
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	f003 030c 	and.w	r3, r3, #12
 8000fcc:	2b08      	cmp	r3, #8
 8000fce:	d112      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x62>
 8000fd0:	4b90      	ldr	r3, [pc, #576]	; (8001214 <HAL_RCC_OscConfig+0x280>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000fdc:	d10b      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fde:	4b8d      	ldr	r3, [pc, #564]	; (8001214 <HAL_RCC_OscConfig+0x280>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d06c      	beq.n	80010c4 <HAL_RCC_OscConfig+0x130>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d168      	bne.n	80010c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e275      	b.n	80014e2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ffe:	d106      	bne.n	800100e <HAL_RCC_OscConfig+0x7a>
 8001000:	4b84      	ldr	r3, [pc, #528]	; (8001214 <HAL_RCC_OscConfig+0x280>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a83      	ldr	r2, [pc, #524]	; (8001214 <HAL_RCC_OscConfig+0x280>)
 8001006:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800100a:	6013      	str	r3, [r2, #0]
 800100c:	e02e      	b.n	800106c <HAL_RCC_OscConfig+0xd8>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d10c      	bne.n	8001030 <HAL_RCC_OscConfig+0x9c>
 8001016:	4b7f      	ldr	r3, [pc, #508]	; (8001214 <HAL_RCC_OscConfig+0x280>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a7e      	ldr	r2, [pc, #504]	; (8001214 <HAL_RCC_OscConfig+0x280>)
 800101c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001020:	6013      	str	r3, [r2, #0]
 8001022:	4b7c      	ldr	r3, [pc, #496]	; (8001214 <HAL_RCC_OscConfig+0x280>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a7b      	ldr	r2, [pc, #492]	; (8001214 <HAL_RCC_OscConfig+0x280>)
 8001028:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800102c:	6013      	str	r3, [r2, #0]
 800102e:	e01d      	b.n	800106c <HAL_RCC_OscConfig+0xd8>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001038:	d10c      	bne.n	8001054 <HAL_RCC_OscConfig+0xc0>
 800103a:	4b76      	ldr	r3, [pc, #472]	; (8001214 <HAL_RCC_OscConfig+0x280>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a75      	ldr	r2, [pc, #468]	; (8001214 <HAL_RCC_OscConfig+0x280>)
 8001040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001044:	6013      	str	r3, [r2, #0]
 8001046:	4b73      	ldr	r3, [pc, #460]	; (8001214 <HAL_RCC_OscConfig+0x280>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a72      	ldr	r2, [pc, #456]	; (8001214 <HAL_RCC_OscConfig+0x280>)
 800104c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	e00b      	b.n	800106c <HAL_RCC_OscConfig+0xd8>
 8001054:	4b6f      	ldr	r3, [pc, #444]	; (8001214 <HAL_RCC_OscConfig+0x280>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a6e      	ldr	r2, [pc, #440]	; (8001214 <HAL_RCC_OscConfig+0x280>)
 800105a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800105e:	6013      	str	r3, [r2, #0]
 8001060:	4b6c      	ldr	r3, [pc, #432]	; (8001214 <HAL_RCC_OscConfig+0x280>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a6b      	ldr	r2, [pc, #428]	; (8001214 <HAL_RCC_OscConfig+0x280>)
 8001066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800106a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d013      	beq.n	800109c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001074:	f7ff fccc 	bl	8000a10 <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800107a:	e008      	b.n	800108e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800107c:	f7ff fcc8 	bl	8000a10 <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b64      	cmp	r3, #100	; 0x64
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e229      	b.n	80014e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800108e:	4b61      	ldr	r3, [pc, #388]	; (8001214 <HAL_RCC_OscConfig+0x280>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d0f0      	beq.n	800107c <HAL_RCC_OscConfig+0xe8>
 800109a:	e014      	b.n	80010c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800109c:	f7ff fcb8 	bl	8000a10 <HAL_GetTick>
 80010a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010a2:	e008      	b.n	80010b6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010a4:	f7ff fcb4 	bl	8000a10 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b64      	cmp	r3, #100	; 0x64
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e215      	b.n	80014e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010b6:	4b57      	ldr	r3, [pc, #348]	; (8001214 <HAL_RCC_OscConfig+0x280>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1f0      	bne.n	80010a4 <HAL_RCC_OscConfig+0x110>
 80010c2:	e000      	b.n	80010c6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d069      	beq.n	80011a6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010d2:	4b50      	ldr	r3, [pc, #320]	; (8001214 <HAL_RCC_OscConfig+0x280>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	f003 030c 	and.w	r3, r3, #12
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d00b      	beq.n	80010f6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010de:	4b4d      	ldr	r3, [pc, #308]	; (8001214 <HAL_RCC_OscConfig+0x280>)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	f003 030c 	and.w	r3, r3, #12
 80010e6:	2b08      	cmp	r3, #8
 80010e8:	d11c      	bne.n	8001124 <HAL_RCC_OscConfig+0x190>
 80010ea:	4b4a      	ldr	r3, [pc, #296]	; (8001214 <HAL_RCC_OscConfig+0x280>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d116      	bne.n	8001124 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010f6:	4b47      	ldr	r3, [pc, #284]	; (8001214 <HAL_RCC_OscConfig+0x280>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d005      	beq.n	800110e <HAL_RCC_OscConfig+0x17a>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d001      	beq.n	800110e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e1e9      	b.n	80014e2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800110e:	4b41      	ldr	r3, [pc, #260]	; (8001214 <HAL_RCC_OscConfig+0x280>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	691b      	ldr	r3, [r3, #16]
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	493d      	ldr	r1, [pc, #244]	; (8001214 <HAL_RCC_OscConfig+0x280>)
 800111e:	4313      	orrs	r3, r2
 8001120:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001122:	e040      	b.n	80011a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d023      	beq.n	8001174 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800112c:	4b39      	ldr	r3, [pc, #228]	; (8001214 <HAL_RCC_OscConfig+0x280>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a38      	ldr	r2, [pc, #224]	; (8001214 <HAL_RCC_OscConfig+0x280>)
 8001132:	f043 0301 	orr.w	r3, r3, #1
 8001136:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001138:	f7ff fc6a 	bl	8000a10 <HAL_GetTick>
 800113c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800113e:	e008      	b.n	8001152 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001140:	f7ff fc66 	bl	8000a10 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b02      	cmp	r3, #2
 800114c:	d901      	bls.n	8001152 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e1c7      	b.n	80014e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001152:	4b30      	ldr	r3, [pc, #192]	; (8001214 <HAL_RCC_OscConfig+0x280>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	2b00      	cmp	r3, #0
 800115c:	d0f0      	beq.n	8001140 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800115e:	4b2d      	ldr	r3, [pc, #180]	; (8001214 <HAL_RCC_OscConfig+0x280>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	691b      	ldr	r3, [r3, #16]
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	4929      	ldr	r1, [pc, #164]	; (8001214 <HAL_RCC_OscConfig+0x280>)
 800116e:	4313      	orrs	r3, r2
 8001170:	600b      	str	r3, [r1, #0]
 8001172:	e018      	b.n	80011a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001174:	4b27      	ldr	r3, [pc, #156]	; (8001214 <HAL_RCC_OscConfig+0x280>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a26      	ldr	r2, [pc, #152]	; (8001214 <HAL_RCC_OscConfig+0x280>)
 800117a:	f023 0301 	bic.w	r3, r3, #1
 800117e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001180:	f7ff fc46 	bl	8000a10 <HAL_GetTick>
 8001184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001186:	e008      	b.n	800119a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001188:	f7ff fc42 	bl	8000a10 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b02      	cmp	r3, #2
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e1a3      	b.n	80014e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800119a:	4b1e      	ldr	r3, [pc, #120]	; (8001214 <HAL_RCC_OscConfig+0x280>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1f0      	bne.n	8001188 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0308 	and.w	r3, r3, #8
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d038      	beq.n	8001224 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d019      	beq.n	80011ee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ba:	4b16      	ldr	r3, [pc, #88]	; (8001214 <HAL_RCC_OscConfig+0x280>)
 80011bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011be:	4a15      	ldr	r2, [pc, #84]	; (8001214 <HAL_RCC_OscConfig+0x280>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011c6:	f7ff fc23 	bl	8000a10 <HAL_GetTick>
 80011ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011cc:	e008      	b.n	80011e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011ce:	f7ff fc1f 	bl	8000a10 <HAL_GetTick>
 80011d2:	4602      	mov	r2, r0
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d901      	bls.n	80011e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	e180      	b.n	80014e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <HAL_RCC_OscConfig+0x280>)
 80011e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011e4:	f003 0302 	and.w	r3, r3, #2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d0f0      	beq.n	80011ce <HAL_RCC_OscConfig+0x23a>
 80011ec:	e01a      	b.n	8001224 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <HAL_RCC_OscConfig+0x280>)
 80011f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011f2:	4a08      	ldr	r2, [pc, #32]	; (8001214 <HAL_RCC_OscConfig+0x280>)
 80011f4:	f023 0301 	bic.w	r3, r3, #1
 80011f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011fa:	f7ff fc09 	bl	8000a10 <HAL_GetTick>
 80011fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001200:	e00a      	b.n	8001218 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001202:	f7ff fc05 	bl	8000a10 <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d903      	bls.n	8001218 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e166      	b.n	80014e2 <HAL_RCC_OscConfig+0x54e>
 8001214:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001218:	4b92      	ldr	r3, [pc, #584]	; (8001464 <HAL_RCC_OscConfig+0x4d0>)
 800121a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d1ee      	bne.n	8001202 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0304 	and.w	r3, r3, #4
 800122c:	2b00      	cmp	r3, #0
 800122e:	f000 80a4 	beq.w	800137a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001232:	4b8c      	ldr	r3, [pc, #560]	; (8001464 <HAL_RCC_OscConfig+0x4d0>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d10d      	bne.n	800125a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800123e:	4b89      	ldr	r3, [pc, #548]	; (8001464 <HAL_RCC_OscConfig+0x4d0>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	4a88      	ldr	r2, [pc, #544]	; (8001464 <HAL_RCC_OscConfig+0x4d0>)
 8001244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001248:	6413      	str	r3, [r2, #64]	; 0x40
 800124a:	4b86      	ldr	r3, [pc, #536]	; (8001464 <HAL_RCC_OscConfig+0x4d0>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001256:	2301      	movs	r3, #1
 8001258:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800125a:	4b83      	ldr	r3, [pc, #524]	; (8001468 <HAL_RCC_OscConfig+0x4d4>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001262:	2b00      	cmp	r3, #0
 8001264:	d118      	bne.n	8001298 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001266:	4b80      	ldr	r3, [pc, #512]	; (8001468 <HAL_RCC_OscConfig+0x4d4>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a7f      	ldr	r2, [pc, #508]	; (8001468 <HAL_RCC_OscConfig+0x4d4>)
 800126c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001270:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001272:	f7ff fbcd 	bl	8000a10 <HAL_GetTick>
 8001276:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800127a:	f7ff fbc9 	bl	8000a10 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b64      	cmp	r3, #100	; 0x64
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e12a      	b.n	80014e2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800128c:	4b76      	ldr	r3, [pc, #472]	; (8001468 <HAL_RCC_OscConfig+0x4d4>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0f0      	beq.n	800127a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d106      	bne.n	80012ae <HAL_RCC_OscConfig+0x31a>
 80012a0:	4b70      	ldr	r3, [pc, #448]	; (8001464 <HAL_RCC_OscConfig+0x4d0>)
 80012a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012a4:	4a6f      	ldr	r2, [pc, #444]	; (8001464 <HAL_RCC_OscConfig+0x4d0>)
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	6713      	str	r3, [r2, #112]	; 0x70
 80012ac:	e02d      	b.n	800130a <HAL_RCC_OscConfig+0x376>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10c      	bne.n	80012d0 <HAL_RCC_OscConfig+0x33c>
 80012b6:	4b6b      	ldr	r3, [pc, #428]	; (8001464 <HAL_RCC_OscConfig+0x4d0>)
 80012b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ba:	4a6a      	ldr	r2, [pc, #424]	; (8001464 <HAL_RCC_OscConfig+0x4d0>)
 80012bc:	f023 0301 	bic.w	r3, r3, #1
 80012c0:	6713      	str	r3, [r2, #112]	; 0x70
 80012c2:	4b68      	ldr	r3, [pc, #416]	; (8001464 <HAL_RCC_OscConfig+0x4d0>)
 80012c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012c6:	4a67      	ldr	r2, [pc, #412]	; (8001464 <HAL_RCC_OscConfig+0x4d0>)
 80012c8:	f023 0304 	bic.w	r3, r3, #4
 80012cc:	6713      	str	r3, [r2, #112]	; 0x70
 80012ce:	e01c      	b.n	800130a <HAL_RCC_OscConfig+0x376>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	2b05      	cmp	r3, #5
 80012d6:	d10c      	bne.n	80012f2 <HAL_RCC_OscConfig+0x35e>
 80012d8:	4b62      	ldr	r3, [pc, #392]	; (8001464 <HAL_RCC_OscConfig+0x4d0>)
 80012da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012dc:	4a61      	ldr	r2, [pc, #388]	; (8001464 <HAL_RCC_OscConfig+0x4d0>)
 80012de:	f043 0304 	orr.w	r3, r3, #4
 80012e2:	6713      	str	r3, [r2, #112]	; 0x70
 80012e4:	4b5f      	ldr	r3, [pc, #380]	; (8001464 <HAL_RCC_OscConfig+0x4d0>)
 80012e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012e8:	4a5e      	ldr	r2, [pc, #376]	; (8001464 <HAL_RCC_OscConfig+0x4d0>)
 80012ea:	f043 0301 	orr.w	r3, r3, #1
 80012ee:	6713      	str	r3, [r2, #112]	; 0x70
 80012f0:	e00b      	b.n	800130a <HAL_RCC_OscConfig+0x376>
 80012f2:	4b5c      	ldr	r3, [pc, #368]	; (8001464 <HAL_RCC_OscConfig+0x4d0>)
 80012f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012f6:	4a5b      	ldr	r2, [pc, #364]	; (8001464 <HAL_RCC_OscConfig+0x4d0>)
 80012f8:	f023 0301 	bic.w	r3, r3, #1
 80012fc:	6713      	str	r3, [r2, #112]	; 0x70
 80012fe:	4b59      	ldr	r3, [pc, #356]	; (8001464 <HAL_RCC_OscConfig+0x4d0>)
 8001300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001302:	4a58      	ldr	r2, [pc, #352]	; (8001464 <HAL_RCC_OscConfig+0x4d0>)
 8001304:	f023 0304 	bic.w	r3, r3, #4
 8001308:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d015      	beq.n	800133e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001312:	f7ff fb7d 	bl	8000a10 <HAL_GetTick>
 8001316:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001318:	e00a      	b.n	8001330 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800131a:	f7ff fb79 	bl	8000a10 <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	f241 3288 	movw	r2, #5000	; 0x1388
 8001328:	4293      	cmp	r3, r2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e0d8      	b.n	80014e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001330:	4b4c      	ldr	r3, [pc, #304]	; (8001464 <HAL_RCC_OscConfig+0x4d0>)
 8001332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d0ee      	beq.n	800131a <HAL_RCC_OscConfig+0x386>
 800133c:	e014      	b.n	8001368 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800133e:	f7ff fb67 	bl	8000a10 <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001344:	e00a      	b.n	800135c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001346:	f7ff fb63 	bl	8000a10 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	f241 3288 	movw	r2, #5000	; 0x1388
 8001354:	4293      	cmp	r3, r2
 8001356:	d901      	bls.n	800135c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e0c2      	b.n	80014e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800135c:	4b41      	ldr	r3, [pc, #260]	; (8001464 <HAL_RCC_OscConfig+0x4d0>)
 800135e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d1ee      	bne.n	8001346 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001368:	7dfb      	ldrb	r3, [r7, #23]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d105      	bne.n	800137a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800136e:	4b3d      	ldr	r3, [pc, #244]	; (8001464 <HAL_RCC_OscConfig+0x4d0>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	4a3c      	ldr	r2, [pc, #240]	; (8001464 <HAL_RCC_OscConfig+0x4d0>)
 8001374:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001378:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	2b00      	cmp	r3, #0
 8001380:	f000 80ae 	beq.w	80014e0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001384:	4b37      	ldr	r3, [pc, #220]	; (8001464 <HAL_RCC_OscConfig+0x4d0>)
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f003 030c 	and.w	r3, r3, #12
 800138c:	2b08      	cmp	r3, #8
 800138e:	d06d      	beq.n	800146c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	2b02      	cmp	r3, #2
 8001396:	d14b      	bne.n	8001430 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001398:	4b32      	ldr	r3, [pc, #200]	; (8001464 <HAL_RCC_OscConfig+0x4d0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a31      	ldr	r2, [pc, #196]	; (8001464 <HAL_RCC_OscConfig+0x4d0>)
 800139e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a4:	f7ff fb34 	bl	8000a10 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ac:	f7ff fb30 	bl	8000a10 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e091      	b.n	80014e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013be:	4b29      	ldr	r3, [pc, #164]	; (8001464 <HAL_RCC_OscConfig+0x4d0>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f0      	bne.n	80013ac <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	69da      	ldr	r2, [r3, #28]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a1b      	ldr	r3, [r3, #32]
 80013d2:	431a      	orrs	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d8:	019b      	lsls	r3, r3, #6
 80013da:	431a      	orrs	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e0:	085b      	lsrs	r3, r3, #1
 80013e2:	3b01      	subs	r3, #1
 80013e4:	041b      	lsls	r3, r3, #16
 80013e6:	431a      	orrs	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ec:	061b      	lsls	r3, r3, #24
 80013ee:	431a      	orrs	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f4:	071b      	lsls	r3, r3, #28
 80013f6:	491b      	ldr	r1, [pc, #108]	; (8001464 <HAL_RCC_OscConfig+0x4d0>)
 80013f8:	4313      	orrs	r3, r2
 80013fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013fc:	4b19      	ldr	r3, [pc, #100]	; (8001464 <HAL_RCC_OscConfig+0x4d0>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a18      	ldr	r2, [pc, #96]	; (8001464 <HAL_RCC_OscConfig+0x4d0>)
 8001402:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001406:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001408:	f7ff fb02 	bl	8000a10 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001410:	f7ff fafe 	bl	8000a10 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e05f      	b.n	80014e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001422:	4b10      	ldr	r3, [pc, #64]	; (8001464 <HAL_RCC_OscConfig+0x4d0>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d0f0      	beq.n	8001410 <HAL_RCC_OscConfig+0x47c>
 800142e:	e057      	b.n	80014e0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <HAL_RCC_OscConfig+0x4d0>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a0b      	ldr	r2, [pc, #44]	; (8001464 <HAL_RCC_OscConfig+0x4d0>)
 8001436:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800143a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143c:	f7ff fae8 	bl	8000a10 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001444:	f7ff fae4 	bl	8000a10 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e045      	b.n	80014e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001456:	4b03      	ldr	r3, [pc, #12]	; (8001464 <HAL_RCC_OscConfig+0x4d0>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f0      	bne.n	8001444 <HAL_RCC_OscConfig+0x4b0>
 8001462:	e03d      	b.n	80014e0 <HAL_RCC_OscConfig+0x54c>
 8001464:	40023800 	.word	0x40023800
 8001468:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800146c:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <HAL_RCC_OscConfig+0x558>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d030      	beq.n	80014dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001484:	429a      	cmp	r2, r3
 8001486:	d129      	bne.n	80014dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001492:	429a      	cmp	r2, r3
 8001494:	d122      	bne.n	80014dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800149c:	4013      	ands	r3, r2
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014a2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d119      	bne.n	80014dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b2:	085b      	lsrs	r3, r3, #1
 80014b4:	3b01      	subs	r3, #1
 80014b6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d10f      	bne.n	80014dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d107      	bne.n	80014dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014d8:	429a      	cmp	r2, r3
 80014da:	d001      	beq.n	80014e0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e000      	b.n	80014e2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40023800 	.word	0x40023800

080014f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d101      	bne.n	8001508 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e0d0      	b.n	80016aa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001508:	4b6a      	ldr	r3, [pc, #424]	; (80016b4 <HAL_RCC_ClockConfig+0x1c4>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 030f 	and.w	r3, r3, #15
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	429a      	cmp	r2, r3
 8001514:	d910      	bls.n	8001538 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001516:	4b67      	ldr	r3, [pc, #412]	; (80016b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f023 020f 	bic.w	r2, r3, #15
 800151e:	4965      	ldr	r1, [pc, #404]	; (80016b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	4313      	orrs	r3, r2
 8001524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001526:	4b63      	ldr	r3, [pc, #396]	; (80016b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 030f 	and.w	r3, r3, #15
 800152e:	683a      	ldr	r2, [r7, #0]
 8001530:	429a      	cmp	r2, r3
 8001532:	d001      	beq.n	8001538 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e0b8      	b.n	80016aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d020      	beq.n	8001586 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	2b00      	cmp	r3, #0
 800154e:	d005      	beq.n	800155c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001550:	4b59      	ldr	r3, [pc, #356]	; (80016b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	4a58      	ldr	r2, [pc, #352]	; (80016b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001556:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800155a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0308 	and.w	r3, r3, #8
 8001564:	2b00      	cmp	r3, #0
 8001566:	d005      	beq.n	8001574 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001568:	4b53      	ldr	r3, [pc, #332]	; (80016b8 <HAL_RCC_ClockConfig+0x1c8>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	4a52      	ldr	r2, [pc, #328]	; (80016b8 <HAL_RCC_ClockConfig+0x1c8>)
 800156e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001572:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001574:	4b50      	ldr	r3, [pc, #320]	; (80016b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	494d      	ldr	r1, [pc, #308]	; (80016b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001582:	4313      	orrs	r3, r2
 8001584:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	2b00      	cmp	r3, #0
 8001590:	d040      	beq.n	8001614 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d107      	bne.n	80015aa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159a:	4b47      	ldr	r3, [pc, #284]	; (80016b8 <HAL_RCC_ClockConfig+0x1c8>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d115      	bne.n	80015d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e07f      	b.n	80016aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d107      	bne.n	80015c2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b2:	4b41      	ldr	r3, [pc, #260]	; (80016b8 <HAL_RCC_ClockConfig+0x1c8>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d109      	bne.n	80015d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e073      	b.n	80016aa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c2:	4b3d      	ldr	r3, [pc, #244]	; (80016b8 <HAL_RCC_ClockConfig+0x1c8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e06b      	b.n	80016aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015d2:	4b39      	ldr	r3, [pc, #228]	; (80016b8 <HAL_RCC_ClockConfig+0x1c8>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f023 0203 	bic.w	r2, r3, #3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	4936      	ldr	r1, [pc, #216]	; (80016b8 <HAL_RCC_ClockConfig+0x1c8>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015e4:	f7ff fa14 	bl	8000a10 <HAL_GetTick>
 80015e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ea:	e00a      	b.n	8001602 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ec:	f7ff fa10 	bl	8000a10 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e053      	b.n	80016aa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001602:	4b2d      	ldr	r3, [pc, #180]	; (80016b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f003 020c 	and.w	r2, r3, #12
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	429a      	cmp	r2, r3
 8001612:	d1eb      	bne.n	80015ec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001614:	4b27      	ldr	r3, [pc, #156]	; (80016b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 030f 	and.w	r3, r3, #15
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	429a      	cmp	r2, r3
 8001620:	d210      	bcs.n	8001644 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001622:	4b24      	ldr	r3, [pc, #144]	; (80016b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f023 020f 	bic.w	r2, r3, #15
 800162a:	4922      	ldr	r1, [pc, #136]	; (80016b4 <HAL_RCC_ClockConfig+0x1c4>)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	4313      	orrs	r3, r2
 8001630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001632:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 030f 	and.w	r3, r3, #15
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	429a      	cmp	r2, r3
 800163e:	d001      	beq.n	8001644 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e032      	b.n	80016aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	2b00      	cmp	r3, #0
 800164e:	d008      	beq.n	8001662 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001650:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	4916      	ldr	r1, [pc, #88]	; (80016b8 <HAL_RCC_ClockConfig+0x1c8>)
 800165e:	4313      	orrs	r3, r2
 8001660:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0308 	and.w	r3, r3, #8
 800166a:	2b00      	cmp	r3, #0
 800166c:	d009      	beq.n	8001682 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800166e:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	490e      	ldr	r1, [pc, #56]	; (80016b8 <HAL_RCC_ClockConfig+0x1c8>)
 800167e:	4313      	orrs	r3, r2
 8001680:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001682:	f000 f821 	bl	80016c8 <HAL_RCC_GetSysClockFreq>
 8001686:	4602      	mov	r2, r0
 8001688:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <HAL_RCC_ClockConfig+0x1c8>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	091b      	lsrs	r3, r3, #4
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	490a      	ldr	r1, [pc, #40]	; (80016bc <HAL_RCC_ClockConfig+0x1cc>)
 8001694:	5ccb      	ldrb	r3, [r1, r3]
 8001696:	fa22 f303 	lsr.w	r3, r2, r3
 800169a:	4a09      	ldr	r2, [pc, #36]	; (80016c0 <HAL_RCC_ClockConfig+0x1d0>)
 800169c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <HAL_RCC_ClockConfig+0x1d4>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff f970 	bl	8000988 <HAL_InitTick>

  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40023c00 	.word	0x40023c00
 80016b8:	40023800 	.word	0x40023800
 80016bc:	080028b4 	.word	0x080028b4
 80016c0:	20000000 	.word	0x20000000
 80016c4:	20000004 	.word	0x20000004

080016c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016cc:	b084      	sub	sp, #16
 80016ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	2300      	movs	r3, #0
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	2300      	movs	r3, #0
 80016da:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016e0:	4b67      	ldr	r3, [pc, #412]	; (8001880 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f003 030c 	and.w	r3, r3, #12
 80016e8:	2b08      	cmp	r3, #8
 80016ea:	d00d      	beq.n	8001708 <HAL_RCC_GetSysClockFreq+0x40>
 80016ec:	2b08      	cmp	r3, #8
 80016ee:	f200 80bd 	bhi.w	800186c <HAL_RCC_GetSysClockFreq+0x1a4>
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d002      	beq.n	80016fc <HAL_RCC_GetSysClockFreq+0x34>
 80016f6:	2b04      	cmp	r3, #4
 80016f8:	d003      	beq.n	8001702 <HAL_RCC_GetSysClockFreq+0x3a>
 80016fa:	e0b7      	b.n	800186c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016fc:	4b61      	ldr	r3, [pc, #388]	; (8001884 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80016fe:	60bb      	str	r3, [r7, #8]
      break;
 8001700:	e0b7      	b.n	8001872 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001702:	4b61      	ldr	r3, [pc, #388]	; (8001888 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001704:	60bb      	str	r3, [r7, #8]
      break;
 8001706:	e0b4      	b.n	8001872 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001708:	4b5d      	ldr	r3, [pc, #372]	; (8001880 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001710:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001712:	4b5b      	ldr	r3, [pc, #364]	; (8001880 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d04d      	beq.n	80017ba <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800171e:	4b58      	ldr	r3, [pc, #352]	; (8001880 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	099b      	lsrs	r3, r3, #6
 8001724:	461a      	mov	r2, r3
 8001726:	f04f 0300 	mov.w	r3, #0
 800172a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800172e:	f04f 0100 	mov.w	r1, #0
 8001732:	ea02 0800 	and.w	r8, r2, r0
 8001736:	ea03 0901 	and.w	r9, r3, r1
 800173a:	4640      	mov	r0, r8
 800173c:	4649      	mov	r1, r9
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	f04f 0300 	mov.w	r3, #0
 8001746:	014b      	lsls	r3, r1, #5
 8001748:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800174c:	0142      	lsls	r2, r0, #5
 800174e:	4610      	mov	r0, r2
 8001750:	4619      	mov	r1, r3
 8001752:	ebb0 0008 	subs.w	r0, r0, r8
 8001756:	eb61 0109 	sbc.w	r1, r1, r9
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	f04f 0300 	mov.w	r3, #0
 8001762:	018b      	lsls	r3, r1, #6
 8001764:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001768:	0182      	lsls	r2, r0, #6
 800176a:	1a12      	subs	r2, r2, r0
 800176c:	eb63 0301 	sbc.w	r3, r3, r1
 8001770:	f04f 0000 	mov.w	r0, #0
 8001774:	f04f 0100 	mov.w	r1, #0
 8001778:	00d9      	lsls	r1, r3, #3
 800177a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800177e:	00d0      	lsls	r0, r2, #3
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	eb12 0208 	adds.w	r2, r2, r8
 8001788:	eb43 0309 	adc.w	r3, r3, r9
 800178c:	f04f 0000 	mov.w	r0, #0
 8001790:	f04f 0100 	mov.w	r1, #0
 8001794:	0259      	lsls	r1, r3, #9
 8001796:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800179a:	0250      	lsls	r0, r2, #9
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4610      	mov	r0, r2
 80017a2:	4619      	mov	r1, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	461a      	mov	r2, r3
 80017a8:	f04f 0300 	mov.w	r3, #0
 80017ac:	f7fe fd44 	bl	8000238 <__aeabi_uldivmod>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4613      	mov	r3, r2
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	e04a      	b.n	8001850 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017ba:	4b31      	ldr	r3, [pc, #196]	; (8001880 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	099b      	lsrs	r3, r3, #6
 80017c0:	461a      	mov	r2, r3
 80017c2:	f04f 0300 	mov.w	r3, #0
 80017c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80017ca:	f04f 0100 	mov.w	r1, #0
 80017ce:	ea02 0400 	and.w	r4, r2, r0
 80017d2:	ea03 0501 	and.w	r5, r3, r1
 80017d6:	4620      	mov	r0, r4
 80017d8:	4629      	mov	r1, r5
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	014b      	lsls	r3, r1, #5
 80017e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80017e8:	0142      	lsls	r2, r0, #5
 80017ea:	4610      	mov	r0, r2
 80017ec:	4619      	mov	r1, r3
 80017ee:	1b00      	subs	r0, r0, r4
 80017f0:	eb61 0105 	sbc.w	r1, r1, r5
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	f04f 0300 	mov.w	r3, #0
 80017fc:	018b      	lsls	r3, r1, #6
 80017fe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001802:	0182      	lsls	r2, r0, #6
 8001804:	1a12      	subs	r2, r2, r0
 8001806:	eb63 0301 	sbc.w	r3, r3, r1
 800180a:	f04f 0000 	mov.w	r0, #0
 800180e:	f04f 0100 	mov.w	r1, #0
 8001812:	00d9      	lsls	r1, r3, #3
 8001814:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001818:	00d0      	lsls	r0, r2, #3
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	1912      	adds	r2, r2, r4
 8001820:	eb45 0303 	adc.w	r3, r5, r3
 8001824:	f04f 0000 	mov.w	r0, #0
 8001828:	f04f 0100 	mov.w	r1, #0
 800182c:	0299      	lsls	r1, r3, #10
 800182e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001832:	0290      	lsls	r0, r2, #10
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4610      	mov	r0, r2
 800183a:	4619      	mov	r1, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	461a      	mov	r2, r3
 8001840:	f04f 0300 	mov.w	r3, #0
 8001844:	f7fe fcf8 	bl	8000238 <__aeabi_uldivmod>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4613      	mov	r3, r2
 800184e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001850:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	0c1b      	lsrs	r3, r3, #16
 8001856:	f003 0303 	and.w	r3, r3, #3
 800185a:	3301      	adds	r3, #1
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	fbb2 f3f3 	udiv	r3, r2, r3
 8001868:	60bb      	str	r3, [r7, #8]
      break;
 800186a:	e002      	b.n	8001872 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800186c:	4b05      	ldr	r3, [pc, #20]	; (8001884 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800186e:	60bb      	str	r3, [r7, #8]
      break;
 8001870:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001872:	68bb      	ldr	r3, [r7, #8]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800187e:	bf00      	nop
 8001880:	40023800 	.word	0x40023800
 8001884:	00f42400 	.word	0x00f42400
 8001888:	007a1200 	.word	0x007a1200

0800188c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e049      	b.n	8001932 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d106      	bne.n	80018b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7fe ff9e 	bl	80007f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2202      	movs	r2, #2
 80018bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3304      	adds	r3, #4
 80018c8:	4619      	mov	r1, r3
 80018ca:	4610      	mov	r0, r2
 80018cc:	f000 fb6e 	bl	8001fac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2201      	movs	r2, #1
 80018dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d101      	bne.n	800194c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e049      	b.n	80019e0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001952:	b2db      	uxtb	r3, r3
 8001954:	2b00      	cmp	r3, #0
 8001956:	d106      	bne.n	8001966 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f000 f841 	bl	80019e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2202      	movs	r2, #2
 800196a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3304      	adds	r3, #4
 8001976:	4619      	mov	r1, r3
 8001978:	4610      	mov	r0, r2
 800197a:	f000 fb17 	bl	8001fac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2201      	movs	r2, #1
 8001982:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2201      	movs	r2, #1
 800198a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2201      	movs	r2, #1
 8001992:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2201      	movs	r2, #1
 800199a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2201      	movs	r2, #1
 80019a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2201      	movs	r2, #1
 80019aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2201      	movs	r2, #1
 80019b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2201      	movs	r2, #1
 80019ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2201      	movs	r2, #1
 80019c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2201      	movs	r2, #1
 80019da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d109      	bne.n	8001a20 <HAL_TIM_PWM_Start+0x24>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	bf14      	ite	ne
 8001a18:	2301      	movne	r3, #1
 8001a1a:	2300      	moveq	r3, #0
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	e03c      	b.n	8001a9a <HAL_TIM_PWM_Start+0x9e>
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	d109      	bne.n	8001a3a <HAL_TIM_PWM_Start+0x3e>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	bf14      	ite	ne
 8001a32:	2301      	movne	r3, #1
 8001a34:	2300      	moveq	r3, #0
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	e02f      	b.n	8001a9a <HAL_TIM_PWM_Start+0x9e>
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	d109      	bne.n	8001a54 <HAL_TIM_PWM_Start+0x58>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	bf14      	ite	ne
 8001a4c:	2301      	movne	r3, #1
 8001a4e:	2300      	moveq	r3, #0
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	e022      	b.n	8001a9a <HAL_TIM_PWM_Start+0x9e>
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	2b0c      	cmp	r3, #12
 8001a58:	d109      	bne.n	8001a6e <HAL_TIM_PWM_Start+0x72>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	bf14      	ite	ne
 8001a66:	2301      	movne	r3, #1
 8001a68:	2300      	moveq	r3, #0
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	e015      	b.n	8001a9a <HAL_TIM_PWM_Start+0x9e>
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	2b10      	cmp	r3, #16
 8001a72:	d109      	bne.n	8001a88 <HAL_TIM_PWM_Start+0x8c>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	bf14      	ite	ne
 8001a80:	2301      	movne	r3, #1
 8001a82:	2300      	moveq	r3, #0
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	e008      	b.n	8001a9a <HAL_TIM_PWM_Start+0x9e>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	bf14      	ite	ne
 8001a94:	2301      	movne	r3, #1
 8001a96:	2300      	moveq	r3, #0
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e092      	b.n	8001bc8 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d104      	bne.n	8001ab2 <HAL_TIM_PWM_Start+0xb6>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2202      	movs	r2, #2
 8001aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ab0:	e023      	b.n	8001afa <HAL_TIM_PWM_Start+0xfe>
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	2b04      	cmp	r3, #4
 8001ab6:	d104      	bne.n	8001ac2 <HAL_TIM_PWM_Start+0xc6>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2202      	movs	r2, #2
 8001abc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ac0:	e01b      	b.n	8001afa <HAL_TIM_PWM_Start+0xfe>
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	2b08      	cmp	r3, #8
 8001ac6:	d104      	bne.n	8001ad2 <HAL_TIM_PWM_Start+0xd6>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2202      	movs	r2, #2
 8001acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ad0:	e013      	b.n	8001afa <HAL_TIM_PWM_Start+0xfe>
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	2b0c      	cmp	r3, #12
 8001ad6:	d104      	bne.n	8001ae2 <HAL_TIM_PWM_Start+0xe6>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2202      	movs	r2, #2
 8001adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001ae0:	e00b      	b.n	8001afa <HAL_TIM_PWM_Start+0xfe>
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	2b10      	cmp	r3, #16
 8001ae6:	d104      	bne.n	8001af2 <HAL_TIM_PWM_Start+0xf6>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2202      	movs	r2, #2
 8001aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001af0:	e003      	b.n	8001afa <HAL_TIM_PWM_Start+0xfe>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2202      	movs	r2, #2
 8001af6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2201      	movs	r2, #1
 8001b00:	6839      	ldr	r1, [r7, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 fdea 	bl	80026dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a30      	ldr	r2, [pc, #192]	; (8001bd0 <HAL_TIM_PWM_Start+0x1d4>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d004      	beq.n	8001b1c <HAL_TIM_PWM_Start+0x120>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a2f      	ldr	r2, [pc, #188]	; (8001bd4 <HAL_TIM_PWM_Start+0x1d8>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d101      	bne.n	8001b20 <HAL_TIM_PWM_Start+0x124>
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e000      	b.n	8001b22 <HAL_TIM_PWM_Start+0x126>
 8001b20:	2300      	movs	r3, #0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d007      	beq.n	8001b36 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a25      	ldr	r2, [pc, #148]	; (8001bd0 <HAL_TIM_PWM_Start+0x1d4>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d022      	beq.n	8001b86 <HAL_TIM_PWM_Start+0x18a>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b48:	d01d      	beq.n	8001b86 <HAL_TIM_PWM_Start+0x18a>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a22      	ldr	r2, [pc, #136]	; (8001bd8 <HAL_TIM_PWM_Start+0x1dc>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d018      	beq.n	8001b86 <HAL_TIM_PWM_Start+0x18a>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a20      	ldr	r2, [pc, #128]	; (8001bdc <HAL_TIM_PWM_Start+0x1e0>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d013      	beq.n	8001b86 <HAL_TIM_PWM_Start+0x18a>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a1f      	ldr	r2, [pc, #124]	; (8001be0 <HAL_TIM_PWM_Start+0x1e4>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d00e      	beq.n	8001b86 <HAL_TIM_PWM_Start+0x18a>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a19      	ldr	r2, [pc, #100]	; (8001bd4 <HAL_TIM_PWM_Start+0x1d8>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d009      	beq.n	8001b86 <HAL_TIM_PWM_Start+0x18a>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a1b      	ldr	r2, [pc, #108]	; (8001be4 <HAL_TIM_PWM_Start+0x1e8>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d004      	beq.n	8001b86 <HAL_TIM_PWM_Start+0x18a>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a19      	ldr	r2, [pc, #100]	; (8001be8 <HAL_TIM_PWM_Start+0x1ec>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d115      	bne.n	8001bb2 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	4b17      	ldr	r3, [pc, #92]	; (8001bec <HAL_TIM_PWM_Start+0x1f0>)
 8001b8e:	4013      	ands	r3, r2
 8001b90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2b06      	cmp	r3, #6
 8001b96:	d015      	beq.n	8001bc4 <HAL_TIM_PWM_Start+0x1c8>
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b9e:	d011      	beq.n	8001bc4 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f042 0201 	orr.w	r2, r2, #1
 8001bae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bb0:	e008      	b.n	8001bc4 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f042 0201 	orr.w	r2, r2, #1
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	e000      	b.n	8001bc6 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bc4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40010000 	.word	0x40010000
 8001bd4:	40010400 	.word	0x40010400
 8001bd8:	40000400 	.word	0x40000400
 8001bdc:	40000800 	.word	0x40000800
 8001be0:	40000c00 	.word	0x40000c00
 8001be4:	40014000 	.word	0x40014000
 8001be8:	40001800 	.word	0x40001800
 8001bec:	00010007 	.word	0x00010007

08001bf0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d101      	bne.n	8001c0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	e0ff      	b.n	8001e0e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b14      	cmp	r3, #20
 8001c1a:	f200 80f0 	bhi.w	8001dfe <HAL_TIM_PWM_ConfigChannel+0x20e>
 8001c1e:	a201      	add	r2, pc, #4	; (adr r2, 8001c24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c24:	08001c79 	.word	0x08001c79
 8001c28:	08001dff 	.word	0x08001dff
 8001c2c:	08001dff 	.word	0x08001dff
 8001c30:	08001dff 	.word	0x08001dff
 8001c34:	08001cb9 	.word	0x08001cb9
 8001c38:	08001dff 	.word	0x08001dff
 8001c3c:	08001dff 	.word	0x08001dff
 8001c40:	08001dff 	.word	0x08001dff
 8001c44:	08001cfb 	.word	0x08001cfb
 8001c48:	08001dff 	.word	0x08001dff
 8001c4c:	08001dff 	.word	0x08001dff
 8001c50:	08001dff 	.word	0x08001dff
 8001c54:	08001d3b 	.word	0x08001d3b
 8001c58:	08001dff 	.word	0x08001dff
 8001c5c:	08001dff 	.word	0x08001dff
 8001c60:	08001dff 	.word	0x08001dff
 8001c64:	08001d7d 	.word	0x08001d7d
 8001c68:	08001dff 	.word	0x08001dff
 8001c6c:	08001dff 	.word	0x08001dff
 8001c70:	08001dff 	.word	0x08001dff
 8001c74:	08001dbd 	.word	0x08001dbd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68b9      	ldr	r1, [r7, #8]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f000 fa34 	bl	80020ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	699a      	ldr	r2, [r3, #24]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f042 0208 	orr.w	r2, r2, #8
 8001c92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	699a      	ldr	r2, [r3, #24]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 0204 	bic.w	r2, r2, #4
 8001ca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6999      	ldr	r1, [r3, #24]
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	691a      	ldr	r2, [r3, #16]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	619a      	str	r2, [r3, #24]
      break;
 8001cb6:	e0a5      	b.n	8001e04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68b9      	ldr	r1, [r7, #8]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f000 fa86 	bl	80021d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	699a      	ldr	r2, [r3, #24]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	699a      	ldr	r2, [r3, #24]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ce2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6999      	ldr	r1, [r3, #24]
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	021a      	lsls	r2, r3, #8
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	619a      	str	r2, [r3, #24]
      break;
 8001cf8:	e084      	b.n	8001e04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68b9      	ldr	r1, [r7, #8]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f000 fadd 	bl	80022c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	69da      	ldr	r2, [r3, #28]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f042 0208 	orr.w	r2, r2, #8
 8001d14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	69da      	ldr	r2, [r3, #28]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 0204 	bic.w	r2, r2, #4
 8001d24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	69d9      	ldr	r1, [r3, #28]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	691a      	ldr	r2, [r3, #16]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	430a      	orrs	r2, r1
 8001d36:	61da      	str	r2, [r3, #28]
      break;
 8001d38:	e064      	b.n	8001e04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68b9      	ldr	r1, [r7, #8]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f000 fb33 	bl	80023ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	69da      	ldr	r2, [r3, #28]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	69da      	ldr	r2, [r3, #28]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	69d9      	ldr	r1, [r3, #28]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	021a      	lsls	r2, r3, #8
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	61da      	str	r2, [r3, #28]
      break;
 8001d7a:	e043      	b.n	8001e04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68b9      	ldr	r1, [r7, #8]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f000 fb6a 	bl	800245c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f042 0208 	orr.w	r2, r2, #8
 8001d96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 0204 	bic.w	r2, r2, #4
 8001da6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	691a      	ldr	r2, [r3, #16]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001dba:	e023      	b.n	8001e04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68b9      	ldr	r1, [r7, #8]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f000 fb9c 	bl	8002500 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dd6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001de6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	021a      	lsls	r2, r3, #8
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001dfc:	e002      	b.n	8001e04 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	75fb      	strb	r3, [r7, #23]
      break;
 8001e02:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001e0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3718      	adds	r7, #24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop

08001e18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e22:	2300      	movs	r3, #0
 8001e24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d101      	bne.n	8001e34 <HAL_TIM_ConfigClockSource+0x1c>
 8001e30:	2302      	movs	r3, #2
 8001e32:	e0b4      	b.n	8001f9e <HAL_TIM_ConfigClockSource+0x186>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2202      	movs	r2, #2
 8001e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e4c:	68ba      	ldr	r2, [r7, #8]
 8001e4e:	4b56      	ldr	r3, [pc, #344]	; (8001fa8 <HAL_TIM_ConfigClockSource+0x190>)
 8001e50:	4013      	ands	r3, r2
 8001e52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68ba      	ldr	r2, [r7, #8]
 8001e62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e6c:	d03e      	beq.n	8001eec <HAL_TIM_ConfigClockSource+0xd4>
 8001e6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e72:	f200 8087 	bhi.w	8001f84 <HAL_TIM_ConfigClockSource+0x16c>
 8001e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e7a:	f000 8086 	beq.w	8001f8a <HAL_TIM_ConfigClockSource+0x172>
 8001e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e82:	d87f      	bhi.n	8001f84 <HAL_TIM_ConfigClockSource+0x16c>
 8001e84:	2b70      	cmp	r3, #112	; 0x70
 8001e86:	d01a      	beq.n	8001ebe <HAL_TIM_ConfigClockSource+0xa6>
 8001e88:	2b70      	cmp	r3, #112	; 0x70
 8001e8a:	d87b      	bhi.n	8001f84 <HAL_TIM_ConfigClockSource+0x16c>
 8001e8c:	2b60      	cmp	r3, #96	; 0x60
 8001e8e:	d050      	beq.n	8001f32 <HAL_TIM_ConfigClockSource+0x11a>
 8001e90:	2b60      	cmp	r3, #96	; 0x60
 8001e92:	d877      	bhi.n	8001f84 <HAL_TIM_ConfigClockSource+0x16c>
 8001e94:	2b50      	cmp	r3, #80	; 0x50
 8001e96:	d03c      	beq.n	8001f12 <HAL_TIM_ConfigClockSource+0xfa>
 8001e98:	2b50      	cmp	r3, #80	; 0x50
 8001e9a:	d873      	bhi.n	8001f84 <HAL_TIM_ConfigClockSource+0x16c>
 8001e9c:	2b40      	cmp	r3, #64	; 0x40
 8001e9e:	d058      	beq.n	8001f52 <HAL_TIM_ConfigClockSource+0x13a>
 8001ea0:	2b40      	cmp	r3, #64	; 0x40
 8001ea2:	d86f      	bhi.n	8001f84 <HAL_TIM_ConfigClockSource+0x16c>
 8001ea4:	2b30      	cmp	r3, #48	; 0x30
 8001ea6:	d064      	beq.n	8001f72 <HAL_TIM_ConfigClockSource+0x15a>
 8001ea8:	2b30      	cmp	r3, #48	; 0x30
 8001eaa:	d86b      	bhi.n	8001f84 <HAL_TIM_ConfigClockSource+0x16c>
 8001eac:	2b20      	cmp	r3, #32
 8001eae:	d060      	beq.n	8001f72 <HAL_TIM_ConfigClockSource+0x15a>
 8001eb0:	2b20      	cmp	r3, #32
 8001eb2:	d867      	bhi.n	8001f84 <HAL_TIM_ConfigClockSource+0x16c>
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d05c      	beq.n	8001f72 <HAL_TIM_ConfigClockSource+0x15a>
 8001eb8:	2b10      	cmp	r3, #16
 8001eba:	d05a      	beq.n	8001f72 <HAL_TIM_ConfigClockSource+0x15a>
 8001ebc:	e062      	b.n	8001f84 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6818      	ldr	r0, [r3, #0]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	6899      	ldr	r1, [r3, #8]
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	f000 fbe5 	bl	800269c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001ee0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	609a      	str	r2, [r3, #8]
      break;
 8001eea:	e04f      	b.n	8001f8c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6818      	ldr	r0, [r3, #0]
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	6899      	ldr	r1, [r3, #8]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	f000 fbce 	bl	800269c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f0e:	609a      	str	r2, [r3, #8]
      break;
 8001f10:	e03c      	b.n	8001f8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6818      	ldr	r0, [r3, #0]
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	6859      	ldr	r1, [r3, #4]
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	f000 fb42 	bl	80025a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2150      	movs	r1, #80	; 0x50
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 fb9b 	bl	8002666 <TIM_ITRx_SetConfig>
      break;
 8001f30:	e02c      	b.n	8001f8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6818      	ldr	r0, [r3, #0]
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	6859      	ldr	r1, [r3, #4]
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	f000 fb61 	bl	8002606 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2160      	movs	r1, #96	; 0x60
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 fb8b 	bl	8002666 <TIM_ITRx_SetConfig>
      break;
 8001f50:	e01c      	b.n	8001f8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6818      	ldr	r0, [r3, #0]
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	6859      	ldr	r1, [r3, #4]
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	f000 fb22 	bl	80025a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2140      	movs	r1, #64	; 0x40
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 fb7b 	bl	8002666 <TIM_ITRx_SetConfig>
      break;
 8001f70:	e00c      	b.n	8001f8c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	f000 fb72 	bl	8002666 <TIM_ITRx_SetConfig>
      break;
 8001f82:	e003      	b.n	8001f8c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	73fb      	strb	r3, [r7, #15]
      break;
 8001f88:	e000      	b.n	8001f8c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001f8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	fffeff88 	.word	0xfffeff88

08001fac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a40      	ldr	r2, [pc, #256]	; (80020c0 <TIM_Base_SetConfig+0x114>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d013      	beq.n	8001fec <TIM_Base_SetConfig+0x40>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fca:	d00f      	beq.n	8001fec <TIM_Base_SetConfig+0x40>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a3d      	ldr	r2, [pc, #244]	; (80020c4 <TIM_Base_SetConfig+0x118>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d00b      	beq.n	8001fec <TIM_Base_SetConfig+0x40>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a3c      	ldr	r2, [pc, #240]	; (80020c8 <TIM_Base_SetConfig+0x11c>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d007      	beq.n	8001fec <TIM_Base_SetConfig+0x40>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a3b      	ldr	r2, [pc, #236]	; (80020cc <TIM_Base_SetConfig+0x120>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d003      	beq.n	8001fec <TIM_Base_SetConfig+0x40>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a3a      	ldr	r2, [pc, #232]	; (80020d0 <TIM_Base_SetConfig+0x124>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d108      	bne.n	8001ffe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ff2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a2f      	ldr	r2, [pc, #188]	; (80020c0 <TIM_Base_SetConfig+0x114>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d02b      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800200c:	d027      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a2c      	ldr	r2, [pc, #176]	; (80020c4 <TIM_Base_SetConfig+0x118>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d023      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a2b      	ldr	r2, [pc, #172]	; (80020c8 <TIM_Base_SetConfig+0x11c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d01f      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a2a      	ldr	r2, [pc, #168]	; (80020cc <TIM_Base_SetConfig+0x120>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d01b      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a29      	ldr	r2, [pc, #164]	; (80020d0 <TIM_Base_SetConfig+0x124>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d017      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a28      	ldr	r2, [pc, #160]	; (80020d4 <TIM_Base_SetConfig+0x128>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d013      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a27      	ldr	r2, [pc, #156]	; (80020d8 <TIM_Base_SetConfig+0x12c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d00f      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a26      	ldr	r2, [pc, #152]	; (80020dc <TIM_Base_SetConfig+0x130>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d00b      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a25      	ldr	r2, [pc, #148]	; (80020e0 <TIM_Base_SetConfig+0x134>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d007      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a24      	ldr	r2, [pc, #144]	; (80020e4 <TIM_Base_SetConfig+0x138>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d003      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a23      	ldr	r2, [pc, #140]	; (80020e8 <TIM_Base_SetConfig+0x13c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d108      	bne.n	8002070 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002064:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	4313      	orrs	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	4313      	orrs	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a0a      	ldr	r2, [pc, #40]	; (80020c0 <TIM_Base_SetConfig+0x114>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d003      	beq.n	80020a4 <TIM_Base_SetConfig+0xf8>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a0c      	ldr	r2, [pc, #48]	; (80020d0 <TIM_Base_SetConfig+0x124>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d103      	bne.n	80020ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	691a      	ldr	r2, [r3, #16]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	615a      	str	r2, [r3, #20]
}
 80020b2:	bf00      	nop
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	40010000 	.word	0x40010000
 80020c4:	40000400 	.word	0x40000400
 80020c8:	40000800 	.word	0x40000800
 80020cc:	40000c00 	.word	0x40000c00
 80020d0:	40010400 	.word	0x40010400
 80020d4:	40014000 	.word	0x40014000
 80020d8:	40014400 	.word	0x40014400
 80020dc:	40014800 	.word	0x40014800
 80020e0:	40001800 	.word	0x40001800
 80020e4:	40001c00 	.word	0x40001c00
 80020e8:	40002000 	.word	0x40002000

080020ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b087      	sub	sp, #28
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	f023 0201 	bic.w	r2, r3, #1
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	4b2b      	ldr	r3, [pc, #172]	; (80021c4 <TIM_OC1_SetConfig+0xd8>)
 8002118:	4013      	ands	r3, r2
 800211a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f023 0303 	bic.w	r3, r3, #3
 8002122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	4313      	orrs	r3, r2
 800212c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	f023 0302 	bic.w	r3, r3, #2
 8002134:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	4313      	orrs	r3, r2
 800213e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a21      	ldr	r2, [pc, #132]	; (80021c8 <TIM_OC1_SetConfig+0xdc>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d003      	beq.n	8002150 <TIM_OC1_SetConfig+0x64>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a20      	ldr	r2, [pc, #128]	; (80021cc <TIM_OC1_SetConfig+0xe0>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d10c      	bne.n	800216a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	f023 0308 	bic.w	r3, r3, #8
 8002156:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	4313      	orrs	r3, r2
 8002160:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f023 0304 	bic.w	r3, r3, #4
 8002168:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a16      	ldr	r2, [pc, #88]	; (80021c8 <TIM_OC1_SetConfig+0xdc>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d003      	beq.n	800217a <TIM_OC1_SetConfig+0x8e>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a15      	ldr	r2, [pc, #84]	; (80021cc <TIM_OC1_SetConfig+0xe0>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d111      	bne.n	800219e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002180:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002188:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	4313      	orrs	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	4313      	orrs	r3, r2
 800219c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	621a      	str	r2, [r3, #32]
}
 80021b8:	bf00      	nop
 80021ba:	371c      	adds	r7, #28
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	fffeff8f 	.word	0xfffeff8f
 80021c8:	40010000 	.word	0x40010000
 80021cc:	40010400 	.word	0x40010400

080021d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b087      	sub	sp, #28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	f023 0210 	bic.w	r2, r3, #16
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	4b2e      	ldr	r3, [pc, #184]	; (80022b4 <TIM_OC2_SetConfig+0xe4>)
 80021fc:	4013      	ands	r3, r2
 80021fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002206:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	021b      	lsls	r3, r3, #8
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	4313      	orrs	r3, r2
 8002212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	f023 0320 	bic.w	r3, r3, #32
 800221a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	011b      	lsls	r3, r3, #4
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	4313      	orrs	r3, r2
 8002226:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a23      	ldr	r2, [pc, #140]	; (80022b8 <TIM_OC2_SetConfig+0xe8>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d003      	beq.n	8002238 <TIM_OC2_SetConfig+0x68>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a22      	ldr	r2, [pc, #136]	; (80022bc <TIM_OC2_SetConfig+0xec>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d10d      	bne.n	8002254 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800223e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	011b      	lsls	r3, r3, #4
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	4313      	orrs	r3, r2
 800224a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002252:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a18      	ldr	r2, [pc, #96]	; (80022b8 <TIM_OC2_SetConfig+0xe8>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d003      	beq.n	8002264 <TIM_OC2_SetConfig+0x94>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a17      	ldr	r2, [pc, #92]	; (80022bc <TIM_OC2_SetConfig+0xec>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d113      	bne.n	800228c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800226a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002272:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	4313      	orrs	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	621a      	str	r2, [r3, #32]
}
 80022a6:	bf00      	nop
 80022a8:	371c      	adds	r7, #28
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	feff8fff 	.word	0xfeff8fff
 80022b8:	40010000 	.word	0x40010000
 80022bc:	40010400 	.word	0x40010400

080022c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b087      	sub	sp, #28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	4b2d      	ldr	r3, [pc, #180]	; (80023a0 <TIM_OC3_SetConfig+0xe0>)
 80022ec:	4013      	ands	r3, r2
 80022ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f023 0303 	bic.w	r3, r3, #3
 80022f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	4313      	orrs	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002308:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	021b      	lsls	r3, r3, #8
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	4313      	orrs	r3, r2
 8002314:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a22      	ldr	r2, [pc, #136]	; (80023a4 <TIM_OC3_SetConfig+0xe4>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d003      	beq.n	8002326 <TIM_OC3_SetConfig+0x66>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a21      	ldr	r2, [pc, #132]	; (80023a8 <TIM_OC3_SetConfig+0xe8>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d10d      	bne.n	8002342 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800232c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	021b      	lsls	r3, r3, #8
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	4313      	orrs	r3, r2
 8002338:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002340:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a17      	ldr	r2, [pc, #92]	; (80023a4 <TIM_OC3_SetConfig+0xe4>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d003      	beq.n	8002352 <TIM_OC3_SetConfig+0x92>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a16      	ldr	r2, [pc, #88]	; (80023a8 <TIM_OC3_SetConfig+0xe8>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d113      	bne.n	800237a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002358:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002360:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	011b      	lsls	r3, r3, #4
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	4313      	orrs	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	011b      	lsls	r3, r3, #4
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4313      	orrs	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	621a      	str	r2, [r3, #32]
}
 8002394:	bf00      	nop
 8002396:	371c      	adds	r7, #28
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	fffeff8f 	.word	0xfffeff8f
 80023a4:	40010000 	.word	0x40010000
 80023a8:	40010400 	.word	0x40010400

080023ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b087      	sub	sp, #28
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	4b1e      	ldr	r3, [pc, #120]	; (8002450 <TIM_OC4_SetConfig+0xa4>)
 80023d8:	4013      	ands	r3, r2
 80023da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	021b      	lsls	r3, r3, #8
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	031b      	lsls	r3, r3, #12
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a13      	ldr	r2, [pc, #76]	; (8002454 <TIM_OC4_SetConfig+0xa8>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d003      	beq.n	8002414 <TIM_OC4_SetConfig+0x68>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a12      	ldr	r2, [pc, #72]	; (8002458 <TIM_OC4_SetConfig+0xac>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d109      	bne.n	8002428 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800241a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	019b      	lsls	r3, r3, #6
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	4313      	orrs	r3, r2
 8002426:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	621a      	str	r2, [r3, #32]
}
 8002442:	bf00      	nop
 8002444:	371c      	adds	r7, #28
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	feff8fff 	.word	0xfeff8fff
 8002454:	40010000 	.word	0x40010000
 8002458:	40010400 	.word	0x40010400

0800245c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800245c:	b480      	push	{r7}
 800245e:	b087      	sub	sp, #28
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	4b1b      	ldr	r3, [pc, #108]	; (80024f4 <TIM_OC5_SetConfig+0x98>)
 8002488:	4013      	ands	r3, r2
 800248a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	4313      	orrs	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800249c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	041b      	lsls	r3, r3, #16
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a12      	ldr	r2, [pc, #72]	; (80024f8 <TIM_OC5_SetConfig+0x9c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d003      	beq.n	80024ba <TIM_OC5_SetConfig+0x5e>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a11      	ldr	r2, [pc, #68]	; (80024fc <TIM_OC5_SetConfig+0xa0>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d109      	bne.n	80024ce <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	021b      	lsls	r3, r3, #8
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	621a      	str	r2, [r3, #32]
}
 80024e8:	bf00      	nop
 80024ea:	371c      	adds	r7, #28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	fffeff8f 	.word	0xfffeff8f
 80024f8:	40010000 	.word	0x40010000
 80024fc:	40010400 	.word	0x40010400

08002500 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002500:	b480      	push	{r7}
 8002502:	b087      	sub	sp, #28
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	4b1c      	ldr	r3, [pc, #112]	; (800259c <TIM_OC6_SetConfig+0x9c>)
 800252c:	4013      	ands	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	021b      	lsls	r3, r3, #8
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	4313      	orrs	r3, r2
 800253a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002542:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	051b      	lsls	r3, r3, #20
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	4313      	orrs	r3, r2
 800254e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a13      	ldr	r2, [pc, #76]	; (80025a0 <TIM_OC6_SetConfig+0xa0>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d003      	beq.n	8002560 <TIM_OC6_SetConfig+0x60>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a12      	ldr	r2, [pc, #72]	; (80025a4 <TIM_OC6_SetConfig+0xa4>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d109      	bne.n	8002574 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002566:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	029b      	lsls	r3, r3, #10
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	4313      	orrs	r3, r2
 8002572:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	621a      	str	r2, [r3, #32]
}
 800258e:	bf00      	nop
 8002590:	371c      	adds	r7, #28
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	feff8fff 	.word	0xfeff8fff
 80025a0:	40010000 	.word	0x40010000
 80025a4:	40010400 	.word	0x40010400

080025a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b087      	sub	sp, #28
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	f023 0201 	bic.w	r2, r3, #1
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	011b      	lsls	r3, r3, #4
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	4313      	orrs	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	f023 030a 	bic.w	r3, r3, #10
 80025e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	621a      	str	r2, [r3, #32]
}
 80025fa:	bf00      	nop
 80025fc:	371c      	adds	r7, #28
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002606:	b480      	push	{r7}
 8002608:	b087      	sub	sp, #28
 800260a:	af00      	add	r7, sp, #0
 800260c:	60f8      	str	r0, [r7, #12]
 800260e:	60b9      	str	r1, [r7, #8]
 8002610:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	f023 0210 	bic.w	r2, r3, #16
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002630:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	031b      	lsls	r3, r3, #12
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	4313      	orrs	r3, r2
 800263a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002642:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	011b      	lsls	r3, r3, #4
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	4313      	orrs	r3, r2
 800264c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	621a      	str	r2, [r3, #32]
}
 800265a:	bf00      	nop
 800265c:	371c      	adds	r7, #28
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002666:	b480      	push	{r7}
 8002668:	b085      	sub	sp, #20
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
 800266e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800267c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4313      	orrs	r3, r2
 8002684:	f043 0307 	orr.w	r3, r3, #7
 8002688:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	609a      	str	r2, [r3, #8]
}
 8002690:	bf00      	nop
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800269c:	b480      	push	{r7}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
 80026a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	021a      	lsls	r2, r3, #8
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	431a      	orrs	r2, r3
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	609a      	str	r2, [r3, #8]
}
 80026d0:	bf00      	nop
 80026d2:	371c      	adds	r7, #28
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80026dc:	b480      	push	{r7}
 80026de:	b087      	sub	sp, #28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	f003 031f 	and.w	r3, r3, #31
 80026ee:	2201      	movs	r2, #1
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6a1a      	ldr	r2, [r3, #32]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	43db      	mvns	r3, r3
 80026fe:	401a      	ands	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6a1a      	ldr	r2, [r3, #32]
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	f003 031f 	and.w	r3, r3, #31
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	fa01 f303 	lsl.w	r3, r1, r3
 8002714:	431a      	orrs	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	621a      	str	r2, [r3, #32]
}
 800271a:	bf00      	nop
 800271c:	371c      	adds	r7, #28
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
	...

08002728 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002738:	2b01      	cmp	r3, #1
 800273a:	d101      	bne.n	8002740 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800273c:	2302      	movs	r3, #2
 800273e:	e06d      	b.n	800281c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2202      	movs	r2, #2
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a30      	ldr	r2, [pc, #192]	; (8002828 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d004      	beq.n	8002774 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a2f      	ldr	r2, [pc, #188]	; (800282c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d108      	bne.n	8002786 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800277a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	4313      	orrs	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800278c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	4313      	orrs	r3, r2
 8002796:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a20      	ldr	r2, [pc, #128]	; (8002828 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d022      	beq.n	80027f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027b2:	d01d      	beq.n	80027f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a1d      	ldr	r2, [pc, #116]	; (8002830 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d018      	beq.n	80027f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a1c      	ldr	r2, [pc, #112]	; (8002834 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d013      	beq.n	80027f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a1a      	ldr	r2, [pc, #104]	; (8002838 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d00e      	beq.n	80027f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a15      	ldr	r2, [pc, #84]	; (800282c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d009      	beq.n	80027f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a16      	ldr	r2, [pc, #88]	; (800283c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d004      	beq.n	80027f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a15      	ldr	r2, [pc, #84]	; (8002840 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d10c      	bne.n	800280a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	68ba      	ldr	r2, [r7, #8]
 80027fe:	4313      	orrs	r3, r2
 8002800:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	40010000 	.word	0x40010000
 800282c:	40010400 	.word	0x40010400
 8002830:	40000400 	.word	0x40000400
 8002834:	40000800 	.word	0x40000800
 8002838:	40000c00 	.word	0x40000c00
 800283c:	40014000 	.word	0x40014000
 8002840:	40001800 	.word	0x40001800

08002844 <__libc_init_array>:
 8002844:	b570      	push	{r4, r5, r6, lr}
 8002846:	4d0d      	ldr	r5, [pc, #52]	; (800287c <__libc_init_array+0x38>)
 8002848:	4c0d      	ldr	r4, [pc, #52]	; (8002880 <__libc_init_array+0x3c>)
 800284a:	1b64      	subs	r4, r4, r5
 800284c:	10a4      	asrs	r4, r4, #2
 800284e:	2600      	movs	r6, #0
 8002850:	42a6      	cmp	r6, r4
 8002852:	d109      	bne.n	8002868 <__libc_init_array+0x24>
 8002854:	4d0b      	ldr	r5, [pc, #44]	; (8002884 <__libc_init_array+0x40>)
 8002856:	4c0c      	ldr	r4, [pc, #48]	; (8002888 <__libc_init_array+0x44>)
 8002858:	f000 f820 	bl	800289c <_init>
 800285c:	1b64      	subs	r4, r4, r5
 800285e:	10a4      	asrs	r4, r4, #2
 8002860:	2600      	movs	r6, #0
 8002862:	42a6      	cmp	r6, r4
 8002864:	d105      	bne.n	8002872 <__libc_init_array+0x2e>
 8002866:	bd70      	pop	{r4, r5, r6, pc}
 8002868:	f855 3b04 	ldr.w	r3, [r5], #4
 800286c:	4798      	blx	r3
 800286e:	3601      	adds	r6, #1
 8002870:	e7ee      	b.n	8002850 <__libc_init_array+0xc>
 8002872:	f855 3b04 	ldr.w	r3, [r5], #4
 8002876:	4798      	blx	r3
 8002878:	3601      	adds	r6, #1
 800287a:	e7f2      	b.n	8002862 <__libc_init_array+0x1e>
 800287c:	080028cc 	.word	0x080028cc
 8002880:	080028cc 	.word	0x080028cc
 8002884:	080028cc 	.word	0x080028cc
 8002888:	080028d0 	.word	0x080028d0

0800288c <memset>:
 800288c:	4402      	add	r2, r0
 800288e:	4603      	mov	r3, r0
 8002890:	4293      	cmp	r3, r2
 8002892:	d100      	bne.n	8002896 <memset+0xa>
 8002894:	4770      	bx	lr
 8002896:	f803 1b01 	strb.w	r1, [r3], #1
 800289a:	e7f9      	b.n	8002890 <memset+0x4>

0800289c <_init>:
 800289c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800289e:	bf00      	nop
 80028a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028a2:	bc08      	pop	{r3}
 80028a4:	469e      	mov	lr, r3
 80028a6:	4770      	bx	lr

080028a8 <_fini>:
 80028a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028aa:	bf00      	nop
 80028ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ae:	bc08      	pop	{r3}
 80028b0:	469e      	mov	lr, r3
 80028b2:	4770      	bx	lr
