
MemoryOrg_Pointer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000346c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800366c  0800366c  0001366c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036f8  080036f8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080036f8  080036f8  000136f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003700  08003700  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003700  08003700  00013700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003704  08003704  00013704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000070  08003778  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08003778  00020120  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000088d8  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000161a  00000000  00000000  00028976  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000730  00000000  00000000  00029f90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000668  00000000  00000000  0002a6c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026b0f  00000000  00000000  0002ad28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006c30  00000000  00000000  00051837  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f08cd  00000000  00000000  00058467  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00148d34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f08  00000000  00000000  00148db0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08003654 	.word	0x08003654

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08003654 	.word	0x08003654

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b5b0      	push	{r4, r5, r7, lr}
 80005f2:	b0a0      	sub	sp, #128	; 0x80
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f000 faaa 	bl	8000b4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f88b 	bl	8000714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 f949 	bl	8000894 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000602:	f000 f917 	bl	8000834 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  char stri[] = "\n---------- Programm started!!! ----------\n\n\r";
 8000606:	4b3d      	ldr	r3, [pc, #244]	; (80006fc <main+0x10c>)
 8000608:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800060c:	461d      	mov	r5, r3
 800060e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000610:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000612:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000614:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000616:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800061a:	c407      	stmia	r4!, {r0, r1, r2}
 800061c:	8023      	strh	r3, [r4, #0]
  HAL_UART_Transmit(&huart3, (uint8_t*)stri, strlen(stri), HAL_MAX_DELAY);
 800061e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff fe0c 	bl	8000240 <strlen>
 8000628:	4603      	mov	r3, r0
 800062a:	b29a      	uxth	r2, r3
 800062c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000630:	f04f 33ff 	mov.w	r3, #4294967295
 8000634:	4832      	ldr	r0, [pc, #200]	; (8000700 <main+0x110>)
 8000636:	f001 ff37 	bl	80024a8 <HAL_UART_Transmit>

  unsigned int value = 0x11223344;
 800063a:	4b32      	ldr	r3, [pc, #200]	; (8000704 <main+0x114>)
 800063c:	63fb      	str	r3, [r7, #60]	; 0x3c
  char *r = (char *) &value;
 800063e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000642:	67bb      	str	r3, [r7, #120]	; 0x78
  int i;
  char buffer[50];

  // Saving value 5 kB above the base of SRAM1
  unsigned int valSave = 0xabcd;
 8000644:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8000648:	677b      	str	r3, [r7, #116]	; 0x74
  unsigned int addressValToAdd = 0x5000; // 5 kB
 800064a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800064e:	673b      	str	r3, [r7, #112]	; 0x70
  unsigned int addressValAdded = SRAM1_BASE_ADDR + addressValToAdd;
 8000650:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000652:	4b2d      	ldr	r3, [pc, #180]	; (8000708 <main+0x118>)
 8000654:	4413      	add	r3, r2
 8000656:	607b      	str	r3, [r7, #4]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  __WFI();
	  HAL_Delay(1000);
 8000658:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800065c:	f000 fad4 	bl	8000c08 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000660:	2101      	movs	r1, #1
 8000662:	482a      	ldr	r0, [pc, #168]	; (800070c <main+0x11c>)
 8000664:	f000 fd9b 	bl	800119e <HAL_GPIO_TogglePin>
	  for(i=0; i<4; i++)
 8000668:	2300      	movs	r3, #0
 800066a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800066c:	e022      	b.n	80006b4 <main+0xc4>
	  {
//		  printf("Address of 0x%x = %d \n", r[i], &r[i]);
		  sprintf(buffer, "0x%x = %d \n\r", r[i], &r[i]);
 800066e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000670:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000672:	4413      	add	r3, r2
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	4619      	mov	r1, r3
 8000678:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800067a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800067c:	4413      	add	r3, r2
 800067e:	f107 0008 	add.w	r0, r7, #8
 8000682:	460a      	mov	r2, r1
 8000684:	4922      	ldr	r1, [pc, #136]	; (8000710 <main+0x120>)
 8000686:	f002 fbdf 	bl	8002e48 <siprintf>
		  HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800068a:	f107 0308 	add.w	r3, r7, #8
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff fdd6 	bl	8000240 <strlen>
 8000694:	4603      	mov	r3, r0
 8000696:	b29a      	uxth	r2, r3
 8000698:	f107 0108 	add.w	r1, r7, #8
 800069c:	f04f 33ff 	mov.w	r3, #4294967295
 80006a0:	4817      	ldr	r0, [pc, #92]	; (8000700 <main+0x110>)
 80006a2:	f001 ff01 	bl	80024a8 <HAL_UART_Transmit>
		  HAL_Delay(500);
 80006a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006aa:	f000 faad 	bl	8000c08 <HAL_Delay>
	  for(i=0; i<4; i++)
 80006ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80006b0:	3301      	adds	r3, #1
 80006b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80006b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80006b6:	2b03      	cmp	r3, #3
 80006b8:	ddd9      	ble.n	800066e <main+0x7e>
	  }
	  memset(buffer, 0, sizeof(buffer));
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	2232      	movs	r2, #50	; 0x32
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f002 fbb8 	bl	8002e38 <memset>
	  sprintf(buffer, "0x%x = %d \n\r", addressValAdded, &addressValAdded);
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	f107 0008 	add.w	r0, r7, #8
 80006d0:	490f      	ldr	r1, [pc, #60]	; (8000710 <main+0x120>)
 80006d2:	f002 fbb9 	bl	8002e48 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80006d6:	f107 0308 	add.w	r3, r7, #8
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff fdb0 	bl	8000240 <strlen>
 80006e0:	4603      	mov	r3, r0
 80006e2:	b29a      	uxth	r2, r3
 80006e4:	f107 0108 	add.w	r1, r7, #8
 80006e8:	f04f 33ff 	mov.w	r3, #4294967295
 80006ec:	4804      	ldr	r0, [pc, #16]	; (8000700 <main+0x110>)
 80006ee:	f001 fedb 	bl	80024a8 <HAL_UART_Transmit>
	  HAL_Delay(500);
 80006f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006f6:	f000 fa87 	bl	8000c08 <HAL_Delay>
  {
 80006fa:	e7ad      	b.n	8000658 <main+0x68>
 80006fc:	0800367c 	.word	0x0800367c
 8000700:	20000098 	.word	0x20000098
 8000704:	11223344 	.word	0x11223344
 8000708:	20020000 	.word	0x20020000
 800070c:	40020400 	.word	0x40020400
 8000710:	0800366c 	.word	0x0800366c

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b0b8      	sub	sp, #224	; 0xe0
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800071e:	2234      	movs	r2, #52	; 0x34
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f002 fb88 	bl	8002e38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000738:	f107 0308 	add.w	r3, r7, #8
 800073c:	2290      	movs	r2, #144	; 0x90
 800073e:	2100      	movs	r1, #0
 8000740:	4618      	mov	r0, r3
 8000742:	f002 fb79 	bl	8002e38 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000746:	4b39      	ldr	r3, [pc, #228]	; (800082c <SystemClock_Config+0x118>)
 8000748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074a:	4a38      	ldr	r2, [pc, #224]	; (800082c <SystemClock_Config+0x118>)
 800074c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000750:	6413      	str	r3, [r2, #64]	; 0x40
 8000752:	4b36      	ldr	r3, [pc, #216]	; (800082c <SystemClock_Config+0x118>)
 8000754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800075e:	4b34      	ldr	r3, [pc, #208]	; (8000830 <SystemClock_Config+0x11c>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a33      	ldr	r2, [pc, #204]	; (8000830 <SystemClock_Config+0x11c>)
 8000764:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000768:	6013      	str	r3, [r2, #0]
 800076a:	4b31      	ldr	r3, [pc, #196]	; (8000830 <SystemClock_Config+0x11c>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000776:	2301      	movs	r3, #1
 8000778:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800077c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000780:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000784:	2302      	movs	r3, #2
 8000786:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800078a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800078e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000792:	2304      	movs	r3, #4
 8000794:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000798:	23d8      	movs	r3, #216	; 0xd8
 800079a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800079e:	2302      	movs	r3, #2
 80007a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007a4:	2302      	movs	r3, #2
 80007a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007aa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 fd60 	bl	8001274 <HAL_RCC_OscConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80007ba:	f000 f8b5 	bl	8000928 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007be:	f000 fd09 	bl	80011d4 <HAL_PWREx_EnableOverDrive>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80007c8:	f000 f8ae 	bl	8000928 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007cc:	230f      	movs	r3, #15
 80007ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d2:	2302      	movs	r3, #2
 80007d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007ee:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80007f2:	2107      	movs	r1, #7
 80007f4:	4618      	mov	r0, r3
 80007f6:	f000 ffeb 	bl	80017d0 <HAL_RCC_ClockConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000800:	f000 f892 	bl	8000928 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000804:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000808:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800080a:	2300      	movs	r3, #0
 800080c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800080e:	f107 0308 	add.w	r3, r7, #8
 8000812:	4618      	mov	r0, r3
 8000814:	f001 f9d4 	bl	8001bc0 <HAL_RCCEx_PeriphCLKConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0x10e>
  {
    Error_Handler();
 800081e:	f000 f883 	bl	8000928 <Error_Handler>
  }
}
 8000822:	bf00      	nop
 8000824:	37e0      	adds	r7, #224	; 0xe0
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800
 8000830:	40007000 	.word	0x40007000

08000834 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000838:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_USART3_UART_Init+0x58>)
 800083a:	4a15      	ldr	r2, [pc, #84]	; (8000890 <MX_USART3_UART_Init+0x5c>)
 800083c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800083e:	4b13      	ldr	r3, [pc, #76]	; (800088c <MX_USART3_UART_Init+0x58>)
 8000840:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000844:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_USART3_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_USART3_UART_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_USART3_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_USART3_UART_Init+0x58>)
 800085a:	220c      	movs	r2, #12
 800085c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <MX_USART3_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_USART3_UART_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <MX_USART3_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_USART3_UART_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_USART3_UART_Init+0x58>)
 8000878:	f001 fdc8 	bl	800240c <HAL_UART_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000882:	f000 f851 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000098 	.word	0x20000098
 8000890:	40004800 	.word	0x40004800

08000894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b088      	sub	sp, #32
 8000898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089a:	f107 030c 	add.w	r3, r7, #12
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008aa:	4b1d      	ldr	r3, [pc, #116]	; (8000920 <MX_GPIO_Init+0x8c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a1c      	ldr	r2, [pc, #112]	; (8000920 <MX_GPIO_Init+0x8c>)
 80008b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <MX_GPIO_Init+0x8c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	4b17      	ldr	r3, [pc, #92]	; (8000920 <MX_GPIO_Init+0x8c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a16      	ldr	r2, [pc, #88]	; (8000920 <MX_GPIO_Init+0x8c>)
 80008c8:	f043 0302 	orr.w	r3, r3, #2
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b14      	ldr	r3, [pc, #80]	; (8000920 <MX_GPIO_Init+0x8c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_GPIO_Init+0x8c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a10      	ldr	r2, [pc, #64]	; (8000920 <MX_GPIO_Init+0x8c>)
 80008e0:	f043 0308 	orr.w	r3, r3, #8
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_GPIO_Init+0x8c>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0308 	and.w	r3, r3, #8
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2101      	movs	r1, #1
 80008f6:	480b      	ldr	r0, [pc, #44]	; (8000924 <MX_GPIO_Init+0x90>)
 80008f8:	f000 fc38 	bl	800116c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008fc:	2301      	movs	r3, #1
 80008fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	2301      	movs	r3, #1
 8000902:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090c:	f107 030c 	add.w	r3, r7, #12
 8000910:	4619      	mov	r1, r3
 8000912:	4804      	ldr	r0, [pc, #16]	; (8000924 <MX_GPIO_Init+0x90>)
 8000914:	f000 fa80 	bl	8000e18 <HAL_GPIO_Init>

}
 8000918:	bf00      	nop
 800091a:	3720      	adds	r7, #32
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40023800 	.word	0x40023800
 8000924:	40020400 	.word	0x40020400

08000928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
	...

08000938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	4b0f      	ldr	r3, [pc, #60]	; (800097c <HAL_MspInit+0x44>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	4a0e      	ldr	r2, [pc, #56]	; (800097c <HAL_MspInit+0x44>)
 8000944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000948:	6413      	str	r3, [r2, #64]	; 0x40
 800094a:	4b0c      	ldr	r3, [pc, #48]	; (800097c <HAL_MspInit+0x44>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <HAL_MspInit+0x44>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	4a08      	ldr	r2, [pc, #32]	; (800097c <HAL_MspInit+0x44>)
 800095c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000960:	6453      	str	r3, [r2, #68]	; 0x44
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <HAL_MspInit+0x44>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800

08000980 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	; 0x28
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a17      	ldr	r2, [pc, #92]	; (80009fc <HAL_UART_MspInit+0x7c>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d128      	bne.n	80009f4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009a2:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <HAL_UART_MspInit+0x80>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	4a16      	ldr	r2, [pc, #88]	; (8000a00 <HAL_UART_MspInit+0x80>)
 80009a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009ac:	6413      	str	r3, [r2, #64]	; 0x40
 80009ae:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <HAL_UART_MspInit+0x80>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ba:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <HAL_UART_MspInit+0x80>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a10      	ldr	r2, [pc, #64]	; (8000a00 <HAL_UART_MspInit+0x80>)
 80009c0:	f043 0308 	orr.w	r3, r3, #8
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <HAL_UART_MspInit+0x80>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0308 	and.w	r3, r3, #8
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d8:	2302      	movs	r3, #2
 80009da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e0:	2303      	movs	r3, #3
 80009e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009e4:	2307      	movs	r3, #7
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	4619      	mov	r1, r3
 80009ee:	4805      	ldr	r0, [pc, #20]	; (8000a04 <HAL_UART_MspInit+0x84>)
 80009f0:	f000 fa12 	bl	8000e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009f4:	bf00      	nop
 80009f6:	3728      	adds	r7, #40	; 0x28
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40004800 	.word	0x40004800
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40020c00 	.word	0x40020c00

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1a:	e7fe      	b.n	8000a1a <HardFault_Handler+0x4>

08000a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <MemManage_Handler+0x4>

08000a22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <BusFault_Handler+0x4>

08000a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <UsageFault_Handler+0x4>

08000a2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a5c:	f000 f8b4 	bl	8000bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a6c:	4a14      	ldr	r2, [pc, #80]	; (8000ac0 <_sbrk+0x5c>)
 8000a6e:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <_sbrk+0x60>)
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a78:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <_sbrk+0x64>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d102      	bne.n	8000a86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a80:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <_sbrk+0x64>)
 8000a82:	4a12      	ldr	r2, [pc, #72]	; (8000acc <_sbrk+0x68>)
 8000a84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <_sbrk+0x64>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d207      	bcs.n	8000aa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a94:	f002 f9a6 	bl	8002de4 <__errno>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	230c      	movs	r3, #12
 8000a9c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa2:	e009      	b.n	8000ab8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aa4:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <_sbrk+0x64>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aaa:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <_sbrk+0x64>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	4a05      	ldr	r2, [pc, #20]	; (8000ac8 <_sbrk+0x64>)
 8000ab4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3718      	adds	r7, #24
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20080000 	.word	0x20080000
 8000ac4:	00000400 	.word	0x00000400
 8000ac8:	2000008c 	.word	0x2000008c
 8000acc:	20000120 	.word	0x20000120

08000ad0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad4:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <SystemInit+0x28>)
 8000ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ada:	4a07      	ldr	r2, [pc, #28]	; (8000af8 <SystemInit+0x28>)
 8000adc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ae0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <SystemInit+0x28>)
 8000ae6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aea:	609a      	str	r2, [r3, #8]
#endif
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000afc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b34 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b00:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b02:	e003      	b.n	8000b0c <LoopCopyDataInit>

08000b04 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b06:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b08:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b0a:	3104      	adds	r1, #4

08000b0c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b0c:	480b      	ldr	r0, [pc, #44]	; (8000b3c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b10:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b12:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b14:	d3f6      	bcc.n	8000b04 <CopyDataInit>
  ldr  r2, =_sbss
 8000b16:	4a0b      	ldr	r2, [pc, #44]	; (8000b44 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b18:	e002      	b.n	8000b20 <LoopFillZerobss>

08000b1a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b1a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b1c:	f842 3b04 	str.w	r3, [r2], #4

08000b20 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b20:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b22:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b24:	d3f9      	bcc.n	8000b1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b26:	f7ff ffd3 	bl	8000ad0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b2a:	f002 f961 	bl	8002df0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b2e:	f7ff fd5f 	bl	80005f0 <main>
  bx  lr    
 8000b32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b34:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000b38:	08003708 	.word	0x08003708
  ldr  r0, =_sdata
 8000b3c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b40:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000b44:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000b48:	20000120 	.word	0x20000120

08000b4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b4c:	e7fe      	b.n	8000b4c <ADC_IRQHandler>

08000b4e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b52:	2003      	movs	r0, #3
 8000b54:	f000 f92c 	bl	8000db0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f000 f805 	bl	8000b68 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000b5e:	f7ff feeb 	bl	8000938 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000b62:	2300      	movs	r3, #0
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b70:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <HAL_InitTick+0x54>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <HAL_InitTick+0x58>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 f939 	bl	8000dfe <HAL_SYSTICK_Config>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e00e      	b.n	8000bb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2b0f      	cmp	r3, #15
 8000b9a:	d80a      	bhi.n	8000bb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	f000 f90f 	bl	8000dc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ba8:	4a06      	ldr	r2, [pc, #24]	; (8000bc4 <HAL_InitTick+0x5c>)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	e000      	b.n	8000bb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000000 	.word	0x20000000
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	20000004 	.word	0x20000004

08000bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <HAL_IncTick+0x20>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_IncTick+0x24>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	4a04      	ldr	r2, [pc, #16]	; (8000bec <HAL_IncTick+0x24>)
 8000bda:	6013      	str	r3, [r2, #0]
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	20000008 	.word	0x20000008
 8000bec:	20000118 	.word	0x20000118

08000bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf4:	4b03      	ldr	r3, [pc, #12]	; (8000c04 <HAL_GetTick+0x14>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	20000118 	.word	0x20000118

08000c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c10:	f7ff ffee 	bl	8000bf0 <HAL_GetTick>
 8000c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c20:	d005      	beq.n	8000c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <HAL_Delay+0x40>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	461a      	mov	r2, r3
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c2e:	bf00      	nop
 8000c30:	f7ff ffde 	bl	8000bf0 <HAL_GetTick>
 8000c34:	4602      	mov	r2, r0
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d8f7      	bhi.n	8000c30 <HAL_Delay+0x28>
  {
  }
}
 8000c40:	bf00      	nop
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000008 	.word	0x20000008

08000c4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <__NVIC_SetPriorityGrouping+0x40>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c68:	4013      	ands	r3, r2
 8000c6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <__NVIC_SetPriorityGrouping+0x44>)
 8000c76:	4313      	orrs	r3, r2
 8000c78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c7a:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <__NVIC_SetPriorityGrouping+0x40>)
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	60d3      	str	r3, [r2, #12]
}
 8000c80:	bf00      	nop
 8000c82:	3714      	adds	r7, #20
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000ed00 	.word	0xe000ed00
 8000c90:	05fa0000 	.word	0x05fa0000

08000c94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <__NVIC_GetPriorityGrouping+0x18>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	0a1b      	lsrs	r3, r3, #8
 8000c9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	6039      	str	r1, [r7, #0]
 8000cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	db0a      	blt.n	8000cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	490c      	ldr	r1, [pc, #48]	; (8000cfc <__NVIC_SetPriority+0x4c>)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	0112      	lsls	r2, r2, #4
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	440b      	add	r3, r1
 8000cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd8:	e00a      	b.n	8000cf0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4908      	ldr	r1, [pc, #32]	; (8000d00 <__NVIC_SetPriority+0x50>)
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	f003 030f 	and.w	r3, r3, #15
 8000ce6:	3b04      	subs	r3, #4
 8000ce8:	0112      	lsls	r2, r2, #4
 8000cea:	b2d2      	uxtb	r2, r2
 8000cec:	440b      	add	r3, r1
 8000cee:	761a      	strb	r2, [r3, #24]
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000e100 	.word	0xe000e100
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b089      	sub	sp, #36	; 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	f1c3 0307 	rsb	r3, r3, #7
 8000d1e:	2b04      	cmp	r3, #4
 8000d20:	bf28      	it	cs
 8000d22:	2304      	movcs	r3, #4
 8000d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3304      	adds	r3, #4
 8000d2a:	2b06      	cmp	r3, #6
 8000d2c:	d902      	bls.n	8000d34 <NVIC_EncodePriority+0x30>
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3b03      	subs	r3, #3
 8000d32:	e000      	b.n	8000d36 <NVIC_EncodePriority+0x32>
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	f04f 32ff 	mov.w	r2, #4294967295
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43da      	mvns	r2, r3
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	401a      	ands	r2, r3
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	fa01 f303 	lsl.w	r3, r1, r3
 8000d56:	43d9      	mvns	r1, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	4313      	orrs	r3, r2
         );
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3724      	adds	r7, #36	; 0x24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
	...

08000d6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d7c:	d301      	bcc.n	8000d82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e00f      	b.n	8000da2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d82:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <SysTick_Config+0x40>)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d8a:	210f      	movs	r1, #15
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d90:	f7ff ff8e 	bl	8000cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <SysTick_Config+0x40>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d9a:	4b04      	ldr	r3, [pc, #16]	; (8000dac <SysTick_Config+0x40>)
 8000d9c:	2207      	movs	r2, #7
 8000d9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	e000e010 	.word	0xe000e010

08000db0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff ff47 	bl	8000c4c <__NVIC_SetPriorityGrouping>
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b086      	sub	sp, #24
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	4603      	mov	r3, r0
 8000dce:	60b9      	str	r1, [r7, #8]
 8000dd0:	607a      	str	r2, [r7, #4]
 8000dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd8:	f7ff ff5c 	bl	8000c94 <__NVIC_GetPriorityGrouping>
 8000ddc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	68b9      	ldr	r1, [r7, #8]
 8000de2:	6978      	ldr	r0, [r7, #20]
 8000de4:	f7ff ff8e 	bl	8000d04 <NVIC_EncodePriority>
 8000de8:	4602      	mov	r2, r0
 8000dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dee:	4611      	mov	r1, r2
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff5d 	bl	8000cb0 <__NVIC_SetPriority>
}
 8000df6:	bf00      	nop
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f7ff ffb0 	bl	8000d6c <SysTick_Config>
 8000e0c:	4603      	mov	r3, r0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b089      	sub	sp, #36	; 0x24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
 8000e36:	e175      	b.n	8001124 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000e38:	2201      	movs	r2, #1
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	697a      	ldr	r2, [r7, #20]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	f040 8164 	bne.w	800111e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d00b      	beq.n	8000e76 <HAL_GPIO_Init+0x5e>
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d007      	beq.n	8000e76 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e6a:	2b11      	cmp	r3, #17
 8000e6c:	d003      	beq.n	8000e76 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	2b12      	cmp	r3, #18
 8000e74:	d130      	bne.n	8000ed8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	2203      	movs	r2, #3
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43db      	mvns	r3, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	68da      	ldr	r2, [r3, #12]
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eac:	2201      	movs	r2, #1
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	091b      	lsrs	r3, r3, #4
 8000ec2:	f003 0201 	and.w	r2, r3, #1
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	2203      	movs	r2, #3
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4013      	ands	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	689a      	ldr	r2, [r3, #8]
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d003      	beq.n	8000f18 <HAL_GPIO_Init+0x100>
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	2b12      	cmp	r3, #18
 8000f16:	d123      	bne.n	8000f60 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	08da      	lsrs	r2, r3, #3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3208      	adds	r2, #8
 8000f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	f003 0307 	and.w	r3, r3, #7
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	220f      	movs	r2, #15
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	691a      	ldr	r2, [r3, #16]
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	08da      	lsrs	r2, r3, #3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	3208      	adds	r2, #8
 8000f5a:	69b9      	ldr	r1, [r7, #24]
 8000f5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 0203 	and.w	r2, r3, #3
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	f000 80be 	beq.w	800111e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa2:	4b65      	ldr	r3, [pc, #404]	; (8001138 <HAL_GPIO_Init+0x320>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa6:	4a64      	ldr	r2, [pc, #400]	; (8001138 <HAL_GPIO_Init+0x320>)
 8000fa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fac:	6453      	str	r3, [r2, #68]	; 0x44
 8000fae:	4b62      	ldr	r3, [pc, #392]	; (8001138 <HAL_GPIO_Init+0x320>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000fba:	4a60      	ldr	r2, [pc, #384]	; (800113c <HAL_GPIO_Init+0x324>)
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	089b      	lsrs	r3, r3, #2
 8000fc0:	3302      	adds	r3, #2
 8000fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f003 0303 	and.w	r3, r3, #3
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	220f      	movs	r2, #15
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a57      	ldr	r2, [pc, #348]	; (8001140 <HAL_GPIO_Init+0x328>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d037      	beq.n	8001056 <HAL_GPIO_Init+0x23e>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a56      	ldr	r2, [pc, #344]	; (8001144 <HAL_GPIO_Init+0x32c>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d031      	beq.n	8001052 <HAL_GPIO_Init+0x23a>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a55      	ldr	r2, [pc, #340]	; (8001148 <HAL_GPIO_Init+0x330>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d02b      	beq.n	800104e <HAL_GPIO_Init+0x236>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a54      	ldr	r2, [pc, #336]	; (800114c <HAL_GPIO_Init+0x334>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d025      	beq.n	800104a <HAL_GPIO_Init+0x232>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a53      	ldr	r2, [pc, #332]	; (8001150 <HAL_GPIO_Init+0x338>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d01f      	beq.n	8001046 <HAL_GPIO_Init+0x22e>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a52      	ldr	r2, [pc, #328]	; (8001154 <HAL_GPIO_Init+0x33c>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d019      	beq.n	8001042 <HAL_GPIO_Init+0x22a>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a51      	ldr	r2, [pc, #324]	; (8001158 <HAL_GPIO_Init+0x340>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d013      	beq.n	800103e <HAL_GPIO_Init+0x226>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a50      	ldr	r2, [pc, #320]	; (800115c <HAL_GPIO_Init+0x344>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d00d      	beq.n	800103a <HAL_GPIO_Init+0x222>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4f      	ldr	r2, [pc, #316]	; (8001160 <HAL_GPIO_Init+0x348>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d007      	beq.n	8001036 <HAL_GPIO_Init+0x21e>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a4e      	ldr	r2, [pc, #312]	; (8001164 <HAL_GPIO_Init+0x34c>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d101      	bne.n	8001032 <HAL_GPIO_Init+0x21a>
 800102e:	2309      	movs	r3, #9
 8001030:	e012      	b.n	8001058 <HAL_GPIO_Init+0x240>
 8001032:	230a      	movs	r3, #10
 8001034:	e010      	b.n	8001058 <HAL_GPIO_Init+0x240>
 8001036:	2308      	movs	r3, #8
 8001038:	e00e      	b.n	8001058 <HAL_GPIO_Init+0x240>
 800103a:	2307      	movs	r3, #7
 800103c:	e00c      	b.n	8001058 <HAL_GPIO_Init+0x240>
 800103e:	2306      	movs	r3, #6
 8001040:	e00a      	b.n	8001058 <HAL_GPIO_Init+0x240>
 8001042:	2305      	movs	r3, #5
 8001044:	e008      	b.n	8001058 <HAL_GPIO_Init+0x240>
 8001046:	2304      	movs	r3, #4
 8001048:	e006      	b.n	8001058 <HAL_GPIO_Init+0x240>
 800104a:	2303      	movs	r3, #3
 800104c:	e004      	b.n	8001058 <HAL_GPIO_Init+0x240>
 800104e:	2302      	movs	r3, #2
 8001050:	e002      	b.n	8001058 <HAL_GPIO_Init+0x240>
 8001052:	2301      	movs	r3, #1
 8001054:	e000      	b.n	8001058 <HAL_GPIO_Init+0x240>
 8001056:	2300      	movs	r3, #0
 8001058:	69fa      	ldr	r2, [r7, #28]
 800105a:	f002 0203 	and.w	r2, r2, #3
 800105e:	0092      	lsls	r2, r2, #2
 8001060:	4093      	lsls	r3, r2
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4313      	orrs	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001068:	4934      	ldr	r1, [pc, #208]	; (800113c <HAL_GPIO_Init+0x324>)
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	089b      	lsrs	r3, r3, #2
 800106e:	3302      	adds	r3, #2
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001076:	4b3c      	ldr	r3, [pc, #240]	; (8001168 <HAL_GPIO_Init+0x350>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	43db      	mvns	r3, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800109a:	4a33      	ldr	r2, [pc, #204]	; (8001168 <HAL_GPIO_Init+0x350>)
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010a0:	4b31      	ldr	r3, [pc, #196]	; (8001168 <HAL_GPIO_Init+0x350>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010c4:	4a28      	ldr	r2, [pc, #160]	; (8001168 <HAL_GPIO_Init+0x350>)
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ca:	4b27      	ldr	r3, [pc, #156]	; (8001168 <HAL_GPIO_Init+0x350>)
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	43db      	mvns	r3, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4013      	ands	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ee:	4a1e      	ldr	r2, [pc, #120]	; (8001168 <HAL_GPIO_Init+0x350>)
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010f4:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <HAL_GPIO_Init+0x350>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001118:	4a13      	ldr	r2, [pc, #76]	; (8001168 <HAL_GPIO_Init+0x350>)
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3301      	adds	r3, #1
 8001122:	61fb      	str	r3, [r7, #28]
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	2b0f      	cmp	r3, #15
 8001128:	f67f ae86 	bls.w	8000e38 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800112c:	bf00      	nop
 800112e:	3724      	adds	r7, #36	; 0x24
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	40023800 	.word	0x40023800
 800113c:	40013800 	.word	0x40013800
 8001140:	40020000 	.word	0x40020000
 8001144:	40020400 	.word	0x40020400
 8001148:	40020800 	.word	0x40020800
 800114c:	40020c00 	.word	0x40020c00
 8001150:	40021000 	.word	0x40021000
 8001154:	40021400 	.word	0x40021400
 8001158:	40021800 	.word	0x40021800
 800115c:	40021c00 	.word	0x40021c00
 8001160:	40022000 	.word	0x40022000
 8001164:	40022400 	.word	0x40022400
 8001168:	40013c00 	.word	0x40013c00

0800116c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	807b      	strh	r3, [r7, #2]
 8001178:	4613      	mov	r3, r2
 800117a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800117c:	787b      	ldrb	r3, [r7, #1]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001182:	887a      	ldrh	r2, [r7, #2]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001188:	e003      	b.n	8001192 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800118a:	887b      	ldrh	r3, [r7, #2]
 800118c:	041a      	lsls	r2, r3, #16
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	619a      	str	r2, [r3, #24]
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
 80011a6:	460b      	mov	r3, r1
 80011a8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	695a      	ldr	r2, [r3, #20]
 80011ae:	887b      	ldrh	r3, [r7, #2]
 80011b0:	4013      	ands	r3, r2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d004      	beq.n	80011c0 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80011b6:	887b      	ldrh	r3, [r7, #2]
 80011b8:	041a      	lsls	r2, r3, #16
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80011be:	e002      	b.n	80011c6 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011c0:	887a      	ldrh	r2, [r7, #2]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	619a      	str	r2, [r3, #24]
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80011de:	4b23      	ldr	r3, [pc, #140]	; (800126c <HAL_PWREx_EnableOverDrive+0x98>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	4a22      	ldr	r2, [pc, #136]	; (800126c <HAL_PWREx_EnableOverDrive+0x98>)
 80011e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ea:	4b20      	ldr	r3, [pc, #128]	; (800126c <HAL_PWREx_EnableOverDrive+0x98>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f2:	603b      	str	r3, [r7, #0]
 80011f4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80011f6:	4b1e      	ldr	r3, [pc, #120]	; (8001270 <HAL_PWREx_EnableOverDrive+0x9c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a1d      	ldr	r2, [pc, #116]	; (8001270 <HAL_PWREx_EnableOverDrive+0x9c>)
 80011fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001200:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001202:	f7ff fcf5 	bl	8000bf0 <HAL_GetTick>
 8001206:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001208:	e009      	b.n	800121e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800120a:	f7ff fcf1 	bl	8000bf0 <HAL_GetTick>
 800120e:	4602      	mov	r2, r0
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001218:	d901      	bls.n	800121e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e022      	b.n	8001264 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800121e:	4b14      	ldr	r3, [pc, #80]	; (8001270 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800122a:	d1ee      	bne.n	800120a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800122c:	4b10      	ldr	r3, [pc, #64]	; (8001270 <HAL_PWREx_EnableOverDrive+0x9c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0f      	ldr	r2, [pc, #60]	; (8001270 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001232:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001236:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001238:	f7ff fcda 	bl	8000bf0 <HAL_GetTick>
 800123c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800123e:	e009      	b.n	8001254 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001240:	f7ff fcd6 	bl	8000bf0 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800124e:	d901      	bls.n	8001254 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e007      	b.n	8001264 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001260:	d1ee      	bne.n	8001240 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001262:	2300      	movs	r3, #0
}
 8001264:	4618      	mov	r0, r3
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40023800 	.word	0x40023800
 8001270:	40007000 	.word	0x40007000

08001274 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800127c:	2300      	movs	r3, #0
 800127e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d101      	bne.n	800128a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e29b      	b.n	80017c2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	2b00      	cmp	r3, #0
 8001294:	f000 8087 	beq.w	80013a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001298:	4b96      	ldr	r3, [pc, #600]	; (80014f4 <HAL_RCC_OscConfig+0x280>)
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f003 030c 	and.w	r3, r3, #12
 80012a0:	2b04      	cmp	r3, #4
 80012a2:	d00c      	beq.n	80012be <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012a4:	4b93      	ldr	r3, [pc, #588]	; (80014f4 <HAL_RCC_OscConfig+0x280>)
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f003 030c 	and.w	r3, r3, #12
 80012ac:	2b08      	cmp	r3, #8
 80012ae:	d112      	bne.n	80012d6 <HAL_RCC_OscConfig+0x62>
 80012b0:	4b90      	ldr	r3, [pc, #576]	; (80014f4 <HAL_RCC_OscConfig+0x280>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012bc:	d10b      	bne.n	80012d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012be:	4b8d      	ldr	r3, [pc, #564]	; (80014f4 <HAL_RCC_OscConfig+0x280>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d06c      	beq.n	80013a4 <HAL_RCC_OscConfig+0x130>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d168      	bne.n	80013a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e275      	b.n	80017c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012de:	d106      	bne.n	80012ee <HAL_RCC_OscConfig+0x7a>
 80012e0:	4b84      	ldr	r3, [pc, #528]	; (80014f4 <HAL_RCC_OscConfig+0x280>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a83      	ldr	r2, [pc, #524]	; (80014f4 <HAL_RCC_OscConfig+0x280>)
 80012e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ea:	6013      	str	r3, [r2, #0]
 80012ec:	e02e      	b.n	800134c <HAL_RCC_OscConfig+0xd8>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d10c      	bne.n	8001310 <HAL_RCC_OscConfig+0x9c>
 80012f6:	4b7f      	ldr	r3, [pc, #508]	; (80014f4 <HAL_RCC_OscConfig+0x280>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a7e      	ldr	r2, [pc, #504]	; (80014f4 <HAL_RCC_OscConfig+0x280>)
 80012fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	4b7c      	ldr	r3, [pc, #496]	; (80014f4 <HAL_RCC_OscConfig+0x280>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a7b      	ldr	r2, [pc, #492]	; (80014f4 <HAL_RCC_OscConfig+0x280>)
 8001308:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	e01d      	b.n	800134c <HAL_RCC_OscConfig+0xd8>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001318:	d10c      	bne.n	8001334 <HAL_RCC_OscConfig+0xc0>
 800131a:	4b76      	ldr	r3, [pc, #472]	; (80014f4 <HAL_RCC_OscConfig+0x280>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a75      	ldr	r2, [pc, #468]	; (80014f4 <HAL_RCC_OscConfig+0x280>)
 8001320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	4b73      	ldr	r3, [pc, #460]	; (80014f4 <HAL_RCC_OscConfig+0x280>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a72      	ldr	r2, [pc, #456]	; (80014f4 <HAL_RCC_OscConfig+0x280>)
 800132c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	e00b      	b.n	800134c <HAL_RCC_OscConfig+0xd8>
 8001334:	4b6f      	ldr	r3, [pc, #444]	; (80014f4 <HAL_RCC_OscConfig+0x280>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a6e      	ldr	r2, [pc, #440]	; (80014f4 <HAL_RCC_OscConfig+0x280>)
 800133a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800133e:	6013      	str	r3, [r2, #0]
 8001340:	4b6c      	ldr	r3, [pc, #432]	; (80014f4 <HAL_RCC_OscConfig+0x280>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a6b      	ldr	r2, [pc, #428]	; (80014f4 <HAL_RCC_OscConfig+0x280>)
 8001346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800134a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d013      	beq.n	800137c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001354:	f7ff fc4c 	bl	8000bf0 <HAL_GetTick>
 8001358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800135c:	f7ff fc48 	bl	8000bf0 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b64      	cmp	r3, #100	; 0x64
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e229      	b.n	80017c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800136e:	4b61      	ldr	r3, [pc, #388]	; (80014f4 <HAL_RCC_OscConfig+0x280>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d0f0      	beq.n	800135c <HAL_RCC_OscConfig+0xe8>
 800137a:	e014      	b.n	80013a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137c:	f7ff fc38 	bl	8000bf0 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001384:	f7ff fc34 	bl	8000bf0 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b64      	cmp	r3, #100	; 0x64
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e215      	b.n	80017c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001396:	4b57      	ldr	r3, [pc, #348]	; (80014f4 <HAL_RCC_OscConfig+0x280>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d1f0      	bne.n	8001384 <HAL_RCC_OscConfig+0x110>
 80013a2:	e000      	b.n	80013a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d069      	beq.n	8001486 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013b2:	4b50      	ldr	r3, [pc, #320]	; (80014f4 <HAL_RCC_OscConfig+0x280>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f003 030c 	and.w	r3, r3, #12
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d00b      	beq.n	80013d6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013be:	4b4d      	ldr	r3, [pc, #308]	; (80014f4 <HAL_RCC_OscConfig+0x280>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 030c 	and.w	r3, r3, #12
 80013c6:	2b08      	cmp	r3, #8
 80013c8:	d11c      	bne.n	8001404 <HAL_RCC_OscConfig+0x190>
 80013ca:	4b4a      	ldr	r3, [pc, #296]	; (80014f4 <HAL_RCC_OscConfig+0x280>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d116      	bne.n	8001404 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013d6:	4b47      	ldr	r3, [pc, #284]	; (80014f4 <HAL_RCC_OscConfig+0x280>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d005      	beq.n	80013ee <HAL_RCC_OscConfig+0x17a>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d001      	beq.n	80013ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e1e9      	b.n	80017c2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ee:	4b41      	ldr	r3, [pc, #260]	; (80014f4 <HAL_RCC_OscConfig+0x280>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	691b      	ldr	r3, [r3, #16]
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	493d      	ldr	r1, [pc, #244]	; (80014f4 <HAL_RCC_OscConfig+0x280>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001402:	e040      	b.n	8001486 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d023      	beq.n	8001454 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800140c:	4b39      	ldr	r3, [pc, #228]	; (80014f4 <HAL_RCC_OscConfig+0x280>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a38      	ldr	r2, [pc, #224]	; (80014f4 <HAL_RCC_OscConfig+0x280>)
 8001412:	f043 0301 	orr.w	r3, r3, #1
 8001416:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001418:	f7ff fbea 	bl	8000bf0 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001420:	f7ff fbe6 	bl	8000bf0 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e1c7      	b.n	80017c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001432:	4b30      	ldr	r3, [pc, #192]	; (80014f4 <HAL_RCC_OscConfig+0x280>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d0f0      	beq.n	8001420 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800143e:	4b2d      	ldr	r3, [pc, #180]	; (80014f4 <HAL_RCC_OscConfig+0x280>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	4929      	ldr	r1, [pc, #164]	; (80014f4 <HAL_RCC_OscConfig+0x280>)
 800144e:	4313      	orrs	r3, r2
 8001450:	600b      	str	r3, [r1, #0]
 8001452:	e018      	b.n	8001486 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001454:	4b27      	ldr	r3, [pc, #156]	; (80014f4 <HAL_RCC_OscConfig+0x280>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a26      	ldr	r2, [pc, #152]	; (80014f4 <HAL_RCC_OscConfig+0x280>)
 800145a:	f023 0301 	bic.w	r3, r3, #1
 800145e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001460:	f7ff fbc6 	bl	8000bf0 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001468:	f7ff fbc2 	bl	8000bf0 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e1a3      	b.n	80017c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147a:	4b1e      	ldr	r3, [pc, #120]	; (80014f4 <HAL_RCC_OscConfig+0x280>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f0      	bne.n	8001468 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	2b00      	cmp	r3, #0
 8001490:	d038      	beq.n	8001504 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d019      	beq.n	80014ce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800149a:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <HAL_RCC_OscConfig+0x280>)
 800149c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800149e:	4a15      	ldr	r2, [pc, #84]	; (80014f4 <HAL_RCC_OscConfig+0x280>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a6:	f7ff fba3 	bl	8000bf0 <HAL_GetTick>
 80014aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ae:	f7ff fb9f 	bl	8000bf0 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e180      	b.n	80017c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <HAL_RCC_OscConfig+0x280>)
 80014c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0f0      	beq.n	80014ae <HAL_RCC_OscConfig+0x23a>
 80014cc:	e01a      	b.n	8001504 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <HAL_RCC_OscConfig+0x280>)
 80014d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014d2:	4a08      	ldr	r2, [pc, #32]	; (80014f4 <HAL_RCC_OscConfig+0x280>)
 80014d4:	f023 0301 	bic.w	r3, r3, #1
 80014d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014da:	f7ff fb89 	bl	8000bf0 <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e0:	e00a      	b.n	80014f8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014e2:	f7ff fb85 	bl	8000bf0 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d903      	bls.n	80014f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e166      	b.n	80017c2 <HAL_RCC_OscConfig+0x54e>
 80014f4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f8:	4b92      	ldr	r3, [pc, #584]	; (8001744 <HAL_RCC_OscConfig+0x4d0>)
 80014fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1ee      	bne.n	80014e2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 80a4 	beq.w	800165a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001512:	4b8c      	ldr	r3, [pc, #560]	; (8001744 <HAL_RCC_OscConfig+0x4d0>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d10d      	bne.n	800153a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800151e:	4b89      	ldr	r3, [pc, #548]	; (8001744 <HAL_RCC_OscConfig+0x4d0>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	4a88      	ldr	r2, [pc, #544]	; (8001744 <HAL_RCC_OscConfig+0x4d0>)
 8001524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001528:	6413      	str	r3, [r2, #64]	; 0x40
 800152a:	4b86      	ldr	r3, [pc, #536]	; (8001744 <HAL_RCC_OscConfig+0x4d0>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001536:	2301      	movs	r3, #1
 8001538:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800153a:	4b83      	ldr	r3, [pc, #524]	; (8001748 <HAL_RCC_OscConfig+0x4d4>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001542:	2b00      	cmp	r3, #0
 8001544:	d118      	bne.n	8001578 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001546:	4b80      	ldr	r3, [pc, #512]	; (8001748 <HAL_RCC_OscConfig+0x4d4>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a7f      	ldr	r2, [pc, #508]	; (8001748 <HAL_RCC_OscConfig+0x4d4>)
 800154c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001550:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001552:	f7ff fb4d 	bl	8000bf0 <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800155a:	f7ff fb49 	bl	8000bf0 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b64      	cmp	r3, #100	; 0x64
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e12a      	b.n	80017c2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800156c:	4b76      	ldr	r3, [pc, #472]	; (8001748 <HAL_RCC_OscConfig+0x4d4>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0f0      	beq.n	800155a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d106      	bne.n	800158e <HAL_RCC_OscConfig+0x31a>
 8001580:	4b70      	ldr	r3, [pc, #448]	; (8001744 <HAL_RCC_OscConfig+0x4d0>)
 8001582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001584:	4a6f      	ldr	r2, [pc, #444]	; (8001744 <HAL_RCC_OscConfig+0x4d0>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	6713      	str	r3, [r2, #112]	; 0x70
 800158c:	e02d      	b.n	80015ea <HAL_RCC_OscConfig+0x376>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d10c      	bne.n	80015b0 <HAL_RCC_OscConfig+0x33c>
 8001596:	4b6b      	ldr	r3, [pc, #428]	; (8001744 <HAL_RCC_OscConfig+0x4d0>)
 8001598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159a:	4a6a      	ldr	r2, [pc, #424]	; (8001744 <HAL_RCC_OscConfig+0x4d0>)
 800159c:	f023 0301 	bic.w	r3, r3, #1
 80015a0:	6713      	str	r3, [r2, #112]	; 0x70
 80015a2:	4b68      	ldr	r3, [pc, #416]	; (8001744 <HAL_RCC_OscConfig+0x4d0>)
 80015a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a6:	4a67      	ldr	r2, [pc, #412]	; (8001744 <HAL_RCC_OscConfig+0x4d0>)
 80015a8:	f023 0304 	bic.w	r3, r3, #4
 80015ac:	6713      	str	r3, [r2, #112]	; 0x70
 80015ae:	e01c      	b.n	80015ea <HAL_RCC_OscConfig+0x376>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	2b05      	cmp	r3, #5
 80015b6:	d10c      	bne.n	80015d2 <HAL_RCC_OscConfig+0x35e>
 80015b8:	4b62      	ldr	r3, [pc, #392]	; (8001744 <HAL_RCC_OscConfig+0x4d0>)
 80015ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015bc:	4a61      	ldr	r2, [pc, #388]	; (8001744 <HAL_RCC_OscConfig+0x4d0>)
 80015be:	f043 0304 	orr.w	r3, r3, #4
 80015c2:	6713      	str	r3, [r2, #112]	; 0x70
 80015c4:	4b5f      	ldr	r3, [pc, #380]	; (8001744 <HAL_RCC_OscConfig+0x4d0>)
 80015c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c8:	4a5e      	ldr	r2, [pc, #376]	; (8001744 <HAL_RCC_OscConfig+0x4d0>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	6713      	str	r3, [r2, #112]	; 0x70
 80015d0:	e00b      	b.n	80015ea <HAL_RCC_OscConfig+0x376>
 80015d2:	4b5c      	ldr	r3, [pc, #368]	; (8001744 <HAL_RCC_OscConfig+0x4d0>)
 80015d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d6:	4a5b      	ldr	r2, [pc, #364]	; (8001744 <HAL_RCC_OscConfig+0x4d0>)
 80015d8:	f023 0301 	bic.w	r3, r3, #1
 80015dc:	6713      	str	r3, [r2, #112]	; 0x70
 80015de:	4b59      	ldr	r3, [pc, #356]	; (8001744 <HAL_RCC_OscConfig+0x4d0>)
 80015e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e2:	4a58      	ldr	r2, [pc, #352]	; (8001744 <HAL_RCC_OscConfig+0x4d0>)
 80015e4:	f023 0304 	bic.w	r3, r3, #4
 80015e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d015      	beq.n	800161e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f2:	f7ff fafd 	bl	8000bf0 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f8:	e00a      	b.n	8001610 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015fa:	f7ff faf9 	bl	8000bf0 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	f241 3288 	movw	r2, #5000	; 0x1388
 8001608:	4293      	cmp	r3, r2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e0d8      	b.n	80017c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001610:	4b4c      	ldr	r3, [pc, #304]	; (8001744 <HAL_RCC_OscConfig+0x4d0>)
 8001612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0ee      	beq.n	80015fa <HAL_RCC_OscConfig+0x386>
 800161c:	e014      	b.n	8001648 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161e:	f7ff fae7 	bl	8000bf0 <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001624:	e00a      	b.n	800163c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001626:	f7ff fae3 	bl	8000bf0 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	f241 3288 	movw	r2, #5000	; 0x1388
 8001634:	4293      	cmp	r3, r2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e0c2      	b.n	80017c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800163c:	4b41      	ldr	r3, [pc, #260]	; (8001744 <HAL_RCC_OscConfig+0x4d0>)
 800163e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d1ee      	bne.n	8001626 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001648:	7dfb      	ldrb	r3, [r7, #23]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d105      	bne.n	800165a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800164e:	4b3d      	ldr	r3, [pc, #244]	; (8001744 <HAL_RCC_OscConfig+0x4d0>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	4a3c      	ldr	r2, [pc, #240]	; (8001744 <HAL_RCC_OscConfig+0x4d0>)
 8001654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001658:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	2b00      	cmp	r3, #0
 8001660:	f000 80ae 	beq.w	80017c0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001664:	4b37      	ldr	r3, [pc, #220]	; (8001744 <HAL_RCC_OscConfig+0x4d0>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f003 030c 	and.w	r3, r3, #12
 800166c:	2b08      	cmp	r3, #8
 800166e:	d06d      	beq.n	800174c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	2b02      	cmp	r3, #2
 8001676:	d14b      	bne.n	8001710 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001678:	4b32      	ldr	r3, [pc, #200]	; (8001744 <HAL_RCC_OscConfig+0x4d0>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a31      	ldr	r2, [pc, #196]	; (8001744 <HAL_RCC_OscConfig+0x4d0>)
 800167e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001684:	f7ff fab4 	bl	8000bf0 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800168c:	f7ff fab0 	bl	8000bf0 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e091      	b.n	80017c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800169e:	4b29      	ldr	r3, [pc, #164]	; (8001744 <HAL_RCC_OscConfig+0x4d0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1f0      	bne.n	800168c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69da      	ldr	r2, [r3, #28]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a1b      	ldr	r3, [r3, #32]
 80016b2:	431a      	orrs	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b8:	019b      	lsls	r3, r3, #6
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c0:	085b      	lsrs	r3, r3, #1
 80016c2:	3b01      	subs	r3, #1
 80016c4:	041b      	lsls	r3, r3, #16
 80016c6:	431a      	orrs	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016cc:	061b      	lsls	r3, r3, #24
 80016ce:	431a      	orrs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d4:	071b      	lsls	r3, r3, #28
 80016d6:	491b      	ldr	r1, [pc, #108]	; (8001744 <HAL_RCC_OscConfig+0x4d0>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016dc:	4b19      	ldr	r3, [pc, #100]	; (8001744 <HAL_RCC_OscConfig+0x4d0>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a18      	ldr	r2, [pc, #96]	; (8001744 <HAL_RCC_OscConfig+0x4d0>)
 80016e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e8:	f7ff fa82 	bl	8000bf0 <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f0:	f7ff fa7e 	bl	8000bf0 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e05f      	b.n	80017c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001702:	4b10      	ldr	r3, [pc, #64]	; (8001744 <HAL_RCC_OscConfig+0x4d0>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d0f0      	beq.n	80016f0 <HAL_RCC_OscConfig+0x47c>
 800170e:	e057      	b.n	80017c0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001710:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <HAL_RCC_OscConfig+0x4d0>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a0b      	ldr	r2, [pc, #44]	; (8001744 <HAL_RCC_OscConfig+0x4d0>)
 8001716:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800171a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171c:	f7ff fa68 	bl	8000bf0 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001724:	f7ff fa64 	bl	8000bf0 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e045      	b.n	80017c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001736:	4b03      	ldr	r3, [pc, #12]	; (8001744 <HAL_RCC_OscConfig+0x4d0>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1f0      	bne.n	8001724 <HAL_RCC_OscConfig+0x4b0>
 8001742:	e03d      	b.n	80017c0 <HAL_RCC_OscConfig+0x54c>
 8001744:	40023800 	.word	0x40023800
 8001748:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800174c:	4b1f      	ldr	r3, [pc, #124]	; (80017cc <HAL_RCC_OscConfig+0x558>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d030      	beq.n	80017bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001764:	429a      	cmp	r2, r3
 8001766:	d129      	bne.n	80017bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001772:	429a      	cmp	r2, r3
 8001774:	d122      	bne.n	80017bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800177c:	4013      	ands	r3, r2
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001782:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001784:	4293      	cmp	r3, r2
 8001786:	d119      	bne.n	80017bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001792:	085b      	lsrs	r3, r3, #1
 8001794:	3b01      	subs	r3, #1
 8001796:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001798:	429a      	cmp	r2, r3
 800179a:	d10f      	bne.n	80017bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d107      	bne.n	80017bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d001      	beq.n	80017c0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e000      	b.n	80017c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40023800 	.word	0x40023800

080017d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e0d0      	b.n	800198a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017e8:	4b6a      	ldr	r3, [pc, #424]	; (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 030f 	and.w	r3, r3, #15
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d910      	bls.n	8001818 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f6:	4b67      	ldr	r3, [pc, #412]	; (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f023 020f 	bic.w	r2, r3, #15
 80017fe:	4965      	ldr	r1, [pc, #404]	; (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	4313      	orrs	r3, r2
 8001804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001806:	4b63      	ldr	r3, [pc, #396]	; (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 030f 	and.w	r3, r3, #15
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	429a      	cmp	r2, r3
 8001812:	d001      	beq.n	8001818 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e0b8      	b.n	800198a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d020      	beq.n	8001866 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	2b00      	cmp	r3, #0
 800182e:	d005      	beq.n	800183c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001830:	4b59      	ldr	r3, [pc, #356]	; (8001998 <HAL_RCC_ClockConfig+0x1c8>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	4a58      	ldr	r2, [pc, #352]	; (8001998 <HAL_RCC_ClockConfig+0x1c8>)
 8001836:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800183a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0308 	and.w	r3, r3, #8
 8001844:	2b00      	cmp	r3, #0
 8001846:	d005      	beq.n	8001854 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001848:	4b53      	ldr	r3, [pc, #332]	; (8001998 <HAL_RCC_ClockConfig+0x1c8>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	4a52      	ldr	r2, [pc, #328]	; (8001998 <HAL_RCC_ClockConfig+0x1c8>)
 800184e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001852:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001854:	4b50      	ldr	r3, [pc, #320]	; (8001998 <HAL_RCC_ClockConfig+0x1c8>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	494d      	ldr	r1, [pc, #308]	; (8001998 <HAL_RCC_ClockConfig+0x1c8>)
 8001862:	4313      	orrs	r3, r2
 8001864:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b00      	cmp	r3, #0
 8001870:	d040      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d107      	bne.n	800188a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187a:	4b47      	ldr	r3, [pc, #284]	; (8001998 <HAL_RCC_ClockConfig+0x1c8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d115      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e07f      	b.n	800198a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2b02      	cmp	r3, #2
 8001890:	d107      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001892:	4b41      	ldr	r3, [pc, #260]	; (8001998 <HAL_RCC_ClockConfig+0x1c8>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d109      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e073      	b.n	800198a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a2:	4b3d      	ldr	r3, [pc, #244]	; (8001998 <HAL_RCC_ClockConfig+0x1c8>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e06b      	b.n	800198a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018b2:	4b39      	ldr	r3, [pc, #228]	; (8001998 <HAL_RCC_ClockConfig+0x1c8>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f023 0203 	bic.w	r2, r3, #3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	4936      	ldr	r1, [pc, #216]	; (8001998 <HAL_RCC_ClockConfig+0x1c8>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018c4:	f7ff f994 	bl	8000bf0 <HAL_GetTick>
 80018c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ca:	e00a      	b.n	80018e2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018cc:	f7ff f990 	bl	8000bf0 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018da:	4293      	cmp	r3, r2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e053      	b.n	800198a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e2:	4b2d      	ldr	r3, [pc, #180]	; (8001998 <HAL_RCC_ClockConfig+0x1c8>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f003 020c 	and.w	r2, r3, #12
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d1eb      	bne.n	80018cc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018f4:	4b27      	ldr	r3, [pc, #156]	; (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 030f 	and.w	r3, r3, #15
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d210      	bcs.n	8001924 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001902:	4b24      	ldr	r3, [pc, #144]	; (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f023 020f 	bic.w	r2, r3, #15
 800190a:	4922      	ldr	r1, [pc, #136]	; (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	4313      	orrs	r3, r2
 8001910:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001912:	4b20      	ldr	r3, [pc, #128]	; (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	429a      	cmp	r2, r3
 800191e:	d001      	beq.n	8001924 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e032      	b.n	800198a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b00      	cmp	r3, #0
 800192e:	d008      	beq.n	8001942 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001930:	4b19      	ldr	r3, [pc, #100]	; (8001998 <HAL_RCC_ClockConfig+0x1c8>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	4916      	ldr	r1, [pc, #88]	; (8001998 <HAL_RCC_ClockConfig+0x1c8>)
 800193e:	4313      	orrs	r3, r2
 8001940:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0308 	and.w	r3, r3, #8
 800194a:	2b00      	cmp	r3, #0
 800194c:	d009      	beq.n	8001962 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800194e:	4b12      	ldr	r3, [pc, #72]	; (8001998 <HAL_RCC_ClockConfig+0x1c8>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	490e      	ldr	r1, [pc, #56]	; (8001998 <HAL_RCC_ClockConfig+0x1c8>)
 800195e:	4313      	orrs	r3, r2
 8001960:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001962:	f000 f821 	bl	80019a8 <HAL_RCC_GetSysClockFreq>
 8001966:	4601      	mov	r1, r0
 8001968:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <HAL_RCC_ClockConfig+0x1c8>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	091b      	lsrs	r3, r3, #4
 800196e:	f003 030f 	and.w	r3, r3, #15
 8001972:	4a0a      	ldr	r2, [pc, #40]	; (800199c <HAL_RCC_ClockConfig+0x1cc>)
 8001974:	5cd3      	ldrb	r3, [r2, r3]
 8001976:	fa21 f303 	lsr.w	r3, r1, r3
 800197a:	4a09      	ldr	r2, [pc, #36]	; (80019a0 <HAL_RCC_ClockConfig+0x1d0>)
 800197c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <HAL_RCC_ClockConfig+0x1d4>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff f8f0 	bl	8000b68 <HAL_InitTick>

  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40023c00 	.word	0x40023c00
 8001998:	40023800 	.word	0x40023800
 800199c:	080036ac 	.word	0x080036ac
 80019a0:	20000000 	.word	0x20000000
 80019a4:	20000004 	.word	0x20000004

080019a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	607b      	str	r3, [r7, #4]
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	2300      	movs	r3, #0
 80019b8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019be:	4b63      	ldr	r3, [pc, #396]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 030c 	and.w	r3, r3, #12
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	d007      	beq.n	80019da <HAL_RCC_GetSysClockFreq+0x32>
 80019ca:	2b08      	cmp	r3, #8
 80019cc:	d008      	beq.n	80019e0 <HAL_RCC_GetSysClockFreq+0x38>
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f040 80b4 	bne.w	8001b3c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019d4:	4b5e      	ldr	r3, [pc, #376]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80019d6:	60bb      	str	r3, [r7, #8]
      break;
 80019d8:	e0b3      	b.n	8001b42 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019da:	4b5e      	ldr	r3, [pc, #376]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80019dc:	60bb      	str	r3, [r7, #8]
      break;
 80019de:	e0b0      	b.n	8001b42 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019e0:	4b5a      	ldr	r3, [pc, #360]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019e8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80019ea:	4b58      	ldr	r3, [pc, #352]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d04a      	beq.n	8001a8c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019f6:	4b55      	ldr	r3, [pc, #340]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	099b      	lsrs	r3, r3, #6
 80019fc:	f04f 0400 	mov.w	r4, #0
 8001a00:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a04:	f04f 0200 	mov.w	r2, #0
 8001a08:	ea03 0501 	and.w	r5, r3, r1
 8001a0c:	ea04 0602 	and.w	r6, r4, r2
 8001a10:	4629      	mov	r1, r5
 8001a12:	4632      	mov	r2, r6
 8001a14:	f04f 0300 	mov.w	r3, #0
 8001a18:	f04f 0400 	mov.w	r4, #0
 8001a1c:	0154      	lsls	r4, r2, #5
 8001a1e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a22:	014b      	lsls	r3, r1, #5
 8001a24:	4619      	mov	r1, r3
 8001a26:	4622      	mov	r2, r4
 8001a28:	1b49      	subs	r1, r1, r5
 8001a2a:	eb62 0206 	sbc.w	r2, r2, r6
 8001a2e:	f04f 0300 	mov.w	r3, #0
 8001a32:	f04f 0400 	mov.w	r4, #0
 8001a36:	0194      	lsls	r4, r2, #6
 8001a38:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a3c:	018b      	lsls	r3, r1, #6
 8001a3e:	1a5b      	subs	r3, r3, r1
 8001a40:	eb64 0402 	sbc.w	r4, r4, r2
 8001a44:	f04f 0100 	mov.w	r1, #0
 8001a48:	f04f 0200 	mov.w	r2, #0
 8001a4c:	00e2      	lsls	r2, r4, #3
 8001a4e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a52:	00d9      	lsls	r1, r3, #3
 8001a54:	460b      	mov	r3, r1
 8001a56:	4614      	mov	r4, r2
 8001a58:	195b      	adds	r3, r3, r5
 8001a5a:	eb44 0406 	adc.w	r4, r4, r6
 8001a5e:	f04f 0100 	mov.w	r1, #0
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	0262      	lsls	r2, r4, #9
 8001a68:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001a6c:	0259      	lsls	r1, r3, #9
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4614      	mov	r4, r2
 8001a72:	4618      	mov	r0, r3
 8001a74:	4621      	mov	r1, r4
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f04f 0400 	mov.w	r4, #0
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4623      	mov	r3, r4
 8001a80:	f7fe fc36 	bl	80002f0 <__aeabi_uldivmod>
 8001a84:	4603      	mov	r3, r0
 8001a86:	460c      	mov	r4, r1
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	e049      	b.n	8001b20 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a8c:	4b2f      	ldr	r3, [pc, #188]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	099b      	lsrs	r3, r3, #6
 8001a92:	f04f 0400 	mov.w	r4, #0
 8001a96:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	ea03 0501 	and.w	r5, r3, r1
 8001aa2:	ea04 0602 	and.w	r6, r4, r2
 8001aa6:	4629      	mov	r1, r5
 8001aa8:	4632      	mov	r2, r6
 8001aaa:	f04f 0300 	mov.w	r3, #0
 8001aae:	f04f 0400 	mov.w	r4, #0
 8001ab2:	0154      	lsls	r4, r2, #5
 8001ab4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ab8:	014b      	lsls	r3, r1, #5
 8001aba:	4619      	mov	r1, r3
 8001abc:	4622      	mov	r2, r4
 8001abe:	1b49      	subs	r1, r1, r5
 8001ac0:	eb62 0206 	sbc.w	r2, r2, r6
 8001ac4:	f04f 0300 	mov.w	r3, #0
 8001ac8:	f04f 0400 	mov.w	r4, #0
 8001acc:	0194      	lsls	r4, r2, #6
 8001ace:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001ad2:	018b      	lsls	r3, r1, #6
 8001ad4:	1a5b      	subs	r3, r3, r1
 8001ad6:	eb64 0402 	sbc.w	r4, r4, r2
 8001ada:	f04f 0100 	mov.w	r1, #0
 8001ade:	f04f 0200 	mov.w	r2, #0
 8001ae2:	00e2      	lsls	r2, r4, #3
 8001ae4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001ae8:	00d9      	lsls	r1, r3, #3
 8001aea:	460b      	mov	r3, r1
 8001aec:	4614      	mov	r4, r2
 8001aee:	195b      	adds	r3, r3, r5
 8001af0:	eb44 0406 	adc.w	r4, r4, r6
 8001af4:	f04f 0100 	mov.w	r1, #0
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	02a2      	lsls	r2, r4, #10
 8001afe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001b02:	0299      	lsls	r1, r3, #10
 8001b04:	460b      	mov	r3, r1
 8001b06:	4614      	mov	r4, r2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	4621      	mov	r1, r4
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f04f 0400 	mov.w	r4, #0
 8001b12:	461a      	mov	r2, r3
 8001b14:	4623      	mov	r3, r4
 8001b16:	f7fe fbeb 	bl	80002f0 <__aeabi_uldivmod>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	460c      	mov	r4, r1
 8001b1e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001b20:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	0c1b      	lsrs	r3, r3, #16
 8001b26:	f003 0303 	and.w	r3, r3, #3
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b38:	60bb      	str	r3, [r7, #8]
      break;
 8001b3a:	e002      	b.n	8001b42 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b3c:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001b3e:	60bb      	str	r3, [r7, #8]
      break;
 8001b40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b42:	68bb      	ldr	r3, [r7, #8]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	00f42400 	.word	0x00f42400
 8001b54:	007a1200 	.word	0x007a1200

08001b58 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b5c:	4b03      	ldr	r3, [pc, #12]	; (8001b6c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	20000000 	.word	0x20000000

08001b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b74:	f7ff fff0 	bl	8001b58 <HAL_RCC_GetHCLKFreq>
 8001b78:	4601      	mov	r1, r0
 8001b7a:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	0a9b      	lsrs	r3, r3, #10
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	4a03      	ldr	r2, [pc, #12]	; (8001b94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b86:	5cd3      	ldrb	r3, [r2, r3]
 8001b88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40023800 	.word	0x40023800
 8001b94:	080036bc 	.word	0x080036bc

08001b98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b9c:	f7ff ffdc 	bl	8001b58 <HAL_RCC_GetHCLKFreq>
 8001ba0:	4601      	mov	r1, r0
 8001ba2:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	0b5b      	lsrs	r3, r3, #13
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	4a03      	ldr	r2, [pc, #12]	; (8001bbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bae:	5cd3      	ldrb	r3, [r2, r3]
 8001bb0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	080036bc 	.word	0x080036bc

08001bc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b088      	sub	sp, #32
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d012      	beq.n	8001c0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001be8:	4b69      	ldr	r3, [pc, #420]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	4a68      	ldr	r2, [pc, #416]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001bf2:	6093      	str	r3, [r2, #8]
 8001bf4:	4b66      	ldr	r3, [pc, #408]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bfc:	4964      	ldr	r1, [pc, #400]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d017      	beq.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c1a:	4b5d      	ldr	r3, [pc, #372]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c28:	4959      	ldr	r1, [pc, #356]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c38:	d101      	bne.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001c46:	2301      	movs	r3, #1
 8001c48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d017      	beq.n	8001c86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001c56:	4b4e      	ldr	r3, [pc, #312]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c64:	494a      	ldr	r1, [pc, #296]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c74:	d101      	bne.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001c76:	2301      	movs	r3, #1
 8001c78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001c82:	2301      	movs	r3, #1
 8001c84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001c92:	2301      	movs	r3, #1
 8001c94:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0320 	and.w	r3, r3, #32
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 808b 	beq.w	8001dba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ca4:	4b3a      	ldr	r3, [pc, #232]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca8:	4a39      	ldr	r2, [pc, #228]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cae:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb0:	4b37      	ldr	r3, [pc, #220]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001cbc:	4b35      	ldr	r3, [pc, #212]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a34      	ldr	r2, [pc, #208]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cc8:	f7fe ff92 	bl	8000bf0 <HAL_GetTick>
 8001ccc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cd0:	f7fe ff8e 	bl	8000bf0 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b64      	cmp	r3, #100	; 0x64
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e38d      	b.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001ce2:	4b2c      	ldr	r3, [pc, #176]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d0f0      	beq.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001cee:	4b28      	ldr	r3, [pc, #160]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cf6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d035      	beq.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d02e      	beq.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d0c:	4b20      	ldr	r3, [pc, #128]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d14:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d16:	4b1e      	ldr	r3, [pc, #120]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1a:	4a1d      	ldr	r2, [pc, #116]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d20:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d22:	4b1b      	ldr	r3, [pc, #108]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d26:	4a1a      	ldr	r2, [pc, #104]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d2c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001d2e:	4a18      	ldr	r2, [pc, #96]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001d34:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d114      	bne.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d40:	f7fe ff56 	bl	8000bf0 <HAL_GetTick>
 8001d44:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d46:	e00a      	b.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d48:	f7fe ff52 	bl	8000bf0 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e34f      	b.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d5e:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0ee      	beq.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d76:	d111      	bne.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001d78:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d84:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001d86:	400b      	ands	r3, r1
 8001d88:	4901      	ldr	r1, [pc, #4]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	608b      	str	r3, [r1, #8]
 8001d8e:	e00b      	b.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40007000 	.word	0x40007000
 8001d98:	0ffffcff 	.word	0x0ffffcff
 8001d9c:	4bb3      	ldr	r3, [pc, #716]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	4ab2      	ldr	r2, [pc, #712]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001da2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001da6:	6093      	str	r3, [r2, #8]
 8001da8:	4bb0      	ldr	r3, [pc, #704]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001daa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001db4:	49ad      	ldr	r1, [pc, #692]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0310 	and.w	r3, r3, #16
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d010      	beq.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001dc6:	4ba9      	ldr	r3, [pc, #676]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dcc:	4aa7      	ldr	r2, [pc, #668]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dd2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001dd6:	4ba5      	ldr	r3, [pc, #660]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dd8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de0:	49a2      	ldr	r1, [pc, #648]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00a      	beq.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001df4:	4b9d      	ldr	r3, [pc, #628]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dfa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e02:	499a      	ldr	r1, [pc, #616]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00a      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e16:	4b95      	ldr	r3, [pc, #596]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e1c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e24:	4991      	ldr	r1, [pc, #580]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00a      	beq.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e38:	4b8c      	ldr	r3, [pc, #560]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e46:	4989      	ldr	r1, [pc, #548]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00a      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001e5a:	4b84      	ldr	r3, [pc, #528]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e68:	4980      	ldr	r1, [pc, #512]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00a      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e7c:	4b7b      	ldr	r3, [pc, #492]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e82:	f023 0203 	bic.w	r2, r3, #3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8a:	4978      	ldr	r1, [pc, #480]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00a      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e9e:	4b73      	ldr	r3, [pc, #460]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea4:	f023 020c 	bic.w	r2, r3, #12
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eac:	496f      	ldr	r1, [pc, #444]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00a      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001ec0:	4b6a      	ldr	r3, [pc, #424]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ece:	4967      	ldr	r1, [pc, #412]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00a      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001ee2:	4b62      	ldr	r3, [pc, #392]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ef0:	495e      	ldr	r1, [pc, #376]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00a      	beq.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f04:	4b59      	ldr	r3, [pc, #356]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f12:	4956      	ldr	r1, [pc, #344]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00a      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001f26:	4b51      	ldr	r3, [pc, #324]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f34:	494d      	ldr	r1, [pc, #308]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d00a      	beq.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001f48:	4b48      	ldr	r3, [pc, #288]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f4e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f56:	4945      	ldr	r1, [pc, #276]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00a      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001f6a:	4b40      	ldr	r3, [pc, #256]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f70:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f78:	493c      	ldr	r1, [pc, #240]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00a      	beq.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001f8c:	4b37      	ldr	r3, [pc, #220]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f92:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f9a:	4934      	ldr	r1, [pc, #208]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d011      	beq.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001fae:	4b2f      	ldr	r3, [pc, #188]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001fbc:	492b      	ldr	r1, [pc, #172]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001fc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fcc:	d101      	bne.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00a      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001fee:	4b1f      	ldr	r3, [pc, #124]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ffc:	491b      	ldr	r1, [pc, #108]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00b      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002010:	4b16      	ldr	r3, [pc, #88]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002016:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002020:	4912      	ldr	r1, [pc, #72]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002022:	4313      	orrs	r3, r2
 8002024:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00b      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002034:	4b0d      	ldr	r3, [pc, #52]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002044:	4909      	ldr	r1, [pc, #36]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002046:	4313      	orrs	r3, r2
 8002048:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00f      	beq.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002058:	4b04      	ldr	r3, [pc, #16]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800205a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800205e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002068:	e002      	b.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800206a:	bf00      	nop
 800206c:	40023800 	.word	0x40023800
 8002070:	4985      	ldr	r1, [pc, #532]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002072:	4313      	orrs	r3, r2
 8002074:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d00b      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002084:	4b80      	ldr	r3, [pc, #512]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002086:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800208a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002094:	497c      	ldr	r1, [pc, #496]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002096:	4313      	orrs	r3, r2
 8002098:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d005      	beq.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020aa:	f040 80d6 	bne.w	800225a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80020ae:	4b76      	ldr	r3, [pc, #472]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a75      	ldr	r2, [pc, #468]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80020b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80020b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020ba:	f7fe fd99 	bl	8000bf0 <HAL_GetTick>
 80020be:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80020c0:	e008      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80020c2:	f7fe fd95 	bl	8000bf0 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b64      	cmp	r3, #100	; 0x64
 80020ce:	d901      	bls.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e194      	b.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80020d4:	4b6c      	ldr	r3, [pc, #432]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1f0      	bne.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d021      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d11d      	bne.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80020f4:	4b64      	ldr	r3, [pc, #400]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80020f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020fa:	0c1b      	lsrs	r3, r3, #16
 80020fc:	f003 0303 	and.w	r3, r3, #3
 8002100:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002102:	4b61      	ldr	r3, [pc, #388]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002104:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002108:	0e1b      	lsrs	r3, r3, #24
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	019a      	lsls	r2, r3, #6
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	041b      	lsls	r3, r3, #16
 800211a:	431a      	orrs	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	061b      	lsls	r3, r3, #24
 8002120:	431a      	orrs	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	071b      	lsls	r3, r3, #28
 8002128:	4957      	ldr	r1, [pc, #348]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800212a:	4313      	orrs	r3, r2
 800212c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d004      	beq.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002140:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002144:	d00a      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800214e:	2b00      	cmp	r3, #0
 8002150:	d02e      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800215a:	d129      	bne.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800215c:	4b4a      	ldr	r3, [pc, #296]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800215e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002162:	0c1b      	lsrs	r3, r3, #16
 8002164:	f003 0303 	and.w	r3, r3, #3
 8002168:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800216a:	4b47      	ldr	r3, [pc, #284]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800216c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002170:	0f1b      	lsrs	r3, r3, #28
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	019a      	lsls	r2, r3, #6
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	041b      	lsls	r3, r3, #16
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	061b      	lsls	r3, r3, #24
 800218a:	431a      	orrs	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	071b      	lsls	r3, r3, #28
 8002190:	493d      	ldr	r1, [pc, #244]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002192:	4313      	orrs	r3, r2
 8002194:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002198:	4b3b      	ldr	r3, [pc, #236]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800219a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800219e:	f023 021f 	bic.w	r2, r3, #31
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a6:	3b01      	subs	r3, #1
 80021a8:	4937      	ldr	r1, [pc, #220]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d01d      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80021bc:	4b32      	ldr	r3, [pc, #200]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80021be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021c2:	0e1b      	lsrs	r3, r3, #24
 80021c4:	f003 030f 	and.w	r3, r3, #15
 80021c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80021ca:	4b2f      	ldr	r3, [pc, #188]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80021cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021d0:	0f1b      	lsrs	r3, r3, #28
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	019a      	lsls	r2, r3, #6
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	041b      	lsls	r3, r3, #16
 80021e4:	431a      	orrs	r2, r3
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	061b      	lsls	r3, r3, #24
 80021ea:	431a      	orrs	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	071b      	lsls	r3, r3, #28
 80021f0:	4925      	ldr	r1, [pc, #148]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d011      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	019a      	lsls	r2, r3, #6
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	041b      	lsls	r3, r3, #16
 8002210:	431a      	orrs	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	061b      	lsls	r3, r3, #24
 8002218:	431a      	orrs	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	071b      	lsls	r3, r3, #28
 8002220:	4919      	ldr	r1, [pc, #100]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002222:	4313      	orrs	r3, r2
 8002224:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002228:	4b17      	ldr	r3, [pc, #92]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a16      	ldr	r2, [pc, #88]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800222e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002232:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002234:	f7fe fcdc 	bl	8000bf0 <HAL_GetTick>
 8002238:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800223a:	e008      	b.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800223c:	f7fe fcd8 	bl	8000bf0 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b64      	cmp	r3, #100	; 0x64
 8002248:	d901      	bls.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e0d7      	b.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800224e:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0f0      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	2b01      	cmp	r3, #1
 800225e:	f040 80cd 	bne.w	80023fc <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002262:	4b09      	ldr	r3, [pc, #36]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a08      	ldr	r2, [pc, #32]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002268:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800226c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800226e:	f7fe fcbf 	bl	8000bf0 <HAL_GetTick>
 8002272:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002274:	e00a      	b.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002276:	f7fe fcbb 	bl	8000bf0 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b64      	cmp	r3, #100	; 0x64
 8002282:	d903      	bls.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e0ba      	b.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8002288:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800228c:	4b5e      	ldr	r3, [pc, #376]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002294:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002298:	d0ed      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d009      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d02e      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d12a      	bne.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80022c2:	4b51      	ldr	r3, [pc, #324]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80022c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c8:	0c1b      	lsrs	r3, r3, #16
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80022d0:	4b4d      	ldr	r3, [pc, #308]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80022d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d6:	0f1b      	lsrs	r3, r3, #28
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	019a      	lsls	r2, r3, #6
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	041b      	lsls	r3, r3, #16
 80022e8:	431a      	orrs	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	061b      	lsls	r3, r3, #24
 80022f0:	431a      	orrs	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	071b      	lsls	r3, r3, #28
 80022f6:	4944      	ldr	r1, [pc, #272]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80022fe:	4b42      	ldr	r3, [pc, #264]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002300:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002304:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230c:	3b01      	subs	r3, #1
 800230e:	021b      	lsls	r3, r3, #8
 8002310:	493d      	ldr	r1, [pc, #244]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002312:	4313      	orrs	r3, r2
 8002314:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d022      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002328:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800232c:	d11d      	bne.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800232e:	4b36      	ldr	r3, [pc, #216]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002334:	0e1b      	lsrs	r3, r3, #24
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800233c:	4b32      	ldr	r3, [pc, #200]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800233e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002342:	0f1b      	lsrs	r3, r3, #28
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	019a      	lsls	r2, r3, #6
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	041b      	lsls	r3, r3, #16
 8002356:	431a      	orrs	r2, r3
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	061b      	lsls	r3, r3, #24
 800235c:	431a      	orrs	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	071b      	lsls	r3, r3, #28
 8002362:	4929      	ldr	r1, [pc, #164]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002364:	4313      	orrs	r3, r2
 8002366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	2b00      	cmp	r3, #0
 8002374:	d028      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002376:	4b24      	ldr	r3, [pc, #144]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237c:	0e1b      	lsrs	r3, r3, #24
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002384:	4b20      	ldr	r3, [pc, #128]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238a:	0c1b      	lsrs	r3, r3, #16
 800238c:	f003 0303 	and.w	r3, r3, #3
 8002390:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	019a      	lsls	r2, r3, #6
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	041b      	lsls	r3, r3, #16
 800239c:	431a      	orrs	r2, r3
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	061b      	lsls	r3, r3, #24
 80023a2:	431a      	orrs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	071b      	lsls	r3, r3, #28
 80023aa:	4917      	ldr	r1, [pc, #92]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80023b2:	4b15      	ldr	r3, [pc, #84]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80023b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c0:	4911      	ldr	r1, [pc, #68]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80023c8:	4b0f      	ldr	r3, [pc, #60]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a0e      	ldr	r2, [pc, #56]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80023ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023d4:	f7fe fc0c 	bl	8000bf0 <HAL_GetTick>
 80023d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80023dc:	f7fe fc08 	bl	8000bf0 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b64      	cmp	r3, #100	; 0x64
 80023e8:	d901      	bls.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e007      	b.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80023ee:	4b06      	ldr	r3, [pc, #24]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023fa:	d1ef      	bne.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3720      	adds	r7, #32
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40023800 	.word	0x40023800

0800240c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e040      	b.n	80024a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002422:	2b00      	cmp	r3, #0
 8002424:	d106      	bne.n	8002434 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7fe faa6 	bl	8000980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2224      	movs	r2, #36	; 0x24
 8002438:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 0201 	bic.w	r2, r2, #1
 8002448:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f8be 	bl	80025cc <UART_SetConfig>
 8002450:	4603      	mov	r3, r0
 8002452:	2b01      	cmp	r3, #1
 8002454:	d101      	bne.n	800245a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e022      	b.n	80024a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	2b00      	cmp	r3, #0
 8002460:	d002      	beq.n	8002468 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 fb5c 	bl	8002b20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002476:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002486:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0201 	orr.w	r2, r2, #1
 8002496:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 fbe3 	bl	8002c64 <UART_CheckIdleState>
 800249e:	4603      	mov	r3, r0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08a      	sub	sp, #40	; 0x28
 80024ac:	af02      	add	r7, sp, #8
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	603b      	str	r3, [r7, #0]
 80024b4:	4613      	mov	r3, r2
 80024b6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024bc:	2b20      	cmp	r3, #32
 80024be:	d17f      	bne.n	80025c0 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d002      	beq.n	80024cc <HAL_UART_Transmit+0x24>
 80024c6:	88fb      	ldrh	r3, [r7, #6]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e078      	b.n	80025c2 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d101      	bne.n	80024de <HAL_UART_Transmit+0x36>
 80024da:	2302      	movs	r3, #2
 80024dc:	e071      	b.n	80025c2 <HAL_UART_Transmit+0x11a>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2221      	movs	r2, #33	; 0x21
 80024f0:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80024f2:	f7fe fb7d 	bl	8000bf0 <HAL_GetTick>
 80024f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	88fa      	ldrh	r2, [r7, #6]
 80024fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	88fa      	ldrh	r2, [r7, #6]
 8002504:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002510:	d108      	bne.n	8002524 <HAL_UART_Transmit+0x7c>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d104      	bne.n	8002524 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800251a:	2300      	movs	r3, #0
 800251c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	61bb      	str	r3, [r7, #24]
 8002522:	e003      	b.n	800252c <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002528:	2300      	movs	r3, #0
 800252a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8002534:	e02c      	b.n	8002590 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	2200      	movs	r2, #0
 800253e:	2180      	movs	r1, #128	; 0x80
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f000 fbd4 	bl	8002cee <UART_WaitOnFlagUntilTimeout>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e038      	b.n	80025c2 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10b      	bne.n	800256e <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	461a      	mov	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002564:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	3302      	adds	r3, #2
 800256a:	61bb      	str	r3, [r7, #24]
 800256c:	e007      	b.n	800257e <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	781a      	ldrb	r2, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	3301      	adds	r3, #1
 800257c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002584:	b29b      	uxth	r3, r3
 8002586:	3b01      	subs	r3, #1
 8002588:	b29a      	uxth	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002596:	b29b      	uxth	r3, r3
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1cc      	bne.n	8002536 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	2200      	movs	r2, #0
 80025a4:	2140      	movs	r1, #64	; 0x40
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 fba1 	bl	8002cee <UART_WaitOnFlagUntilTimeout>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e005      	b.n	80025c2 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2220      	movs	r2, #32
 80025ba:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80025bc:	2300      	movs	r3, #0
 80025be:	e000      	b.n	80025c2 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80025c0:	2302      	movs	r3, #2
  }
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3720      	adds	r7, #32
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
	...

080025cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80025d8:	2300      	movs	r3, #0
 80025da:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	431a      	orrs	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	4bb1      	ldr	r3, [pc, #708]	; (80028c0 <UART_SetConfig+0x2f4>)
 80025fc:	4013      	ands	r3, r2
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6812      	ldr	r2, [r2, #0]
 8002602:	6939      	ldr	r1, [r7, #16]
 8002604:	430b      	orrs	r3, r1
 8002606:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68da      	ldr	r2, [r3, #12]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	430a      	orrs	r2, r1
 800261c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	4313      	orrs	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	430a      	orrs	r2, r1
 8002640:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a9f      	ldr	r2, [pc, #636]	; (80028c4 <UART_SetConfig+0x2f8>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d121      	bne.n	8002690 <UART_SetConfig+0xc4>
 800264c:	4b9e      	ldr	r3, [pc, #632]	; (80028c8 <UART_SetConfig+0x2fc>)
 800264e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	2b03      	cmp	r3, #3
 8002658:	d816      	bhi.n	8002688 <UART_SetConfig+0xbc>
 800265a:	a201      	add	r2, pc, #4	; (adr r2, 8002660 <UART_SetConfig+0x94>)
 800265c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002660:	08002671 	.word	0x08002671
 8002664:	0800267d 	.word	0x0800267d
 8002668:	08002677 	.word	0x08002677
 800266c:	08002683 	.word	0x08002683
 8002670:	2301      	movs	r3, #1
 8002672:	77fb      	strb	r3, [r7, #31]
 8002674:	e151      	b.n	800291a <UART_SetConfig+0x34e>
 8002676:	2302      	movs	r3, #2
 8002678:	77fb      	strb	r3, [r7, #31]
 800267a:	e14e      	b.n	800291a <UART_SetConfig+0x34e>
 800267c:	2304      	movs	r3, #4
 800267e:	77fb      	strb	r3, [r7, #31]
 8002680:	e14b      	b.n	800291a <UART_SetConfig+0x34e>
 8002682:	2308      	movs	r3, #8
 8002684:	77fb      	strb	r3, [r7, #31]
 8002686:	e148      	b.n	800291a <UART_SetConfig+0x34e>
 8002688:	2310      	movs	r3, #16
 800268a:	77fb      	strb	r3, [r7, #31]
 800268c:	bf00      	nop
 800268e:	e144      	b.n	800291a <UART_SetConfig+0x34e>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a8d      	ldr	r2, [pc, #564]	; (80028cc <UART_SetConfig+0x300>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d134      	bne.n	8002704 <UART_SetConfig+0x138>
 800269a:	4b8b      	ldr	r3, [pc, #556]	; (80028c8 <UART_SetConfig+0x2fc>)
 800269c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a0:	f003 030c 	and.w	r3, r3, #12
 80026a4:	2b0c      	cmp	r3, #12
 80026a6:	d829      	bhi.n	80026fc <UART_SetConfig+0x130>
 80026a8:	a201      	add	r2, pc, #4	; (adr r2, 80026b0 <UART_SetConfig+0xe4>)
 80026aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ae:	bf00      	nop
 80026b0:	080026e5 	.word	0x080026e5
 80026b4:	080026fd 	.word	0x080026fd
 80026b8:	080026fd 	.word	0x080026fd
 80026bc:	080026fd 	.word	0x080026fd
 80026c0:	080026f1 	.word	0x080026f1
 80026c4:	080026fd 	.word	0x080026fd
 80026c8:	080026fd 	.word	0x080026fd
 80026cc:	080026fd 	.word	0x080026fd
 80026d0:	080026eb 	.word	0x080026eb
 80026d4:	080026fd 	.word	0x080026fd
 80026d8:	080026fd 	.word	0x080026fd
 80026dc:	080026fd 	.word	0x080026fd
 80026e0:	080026f7 	.word	0x080026f7
 80026e4:	2300      	movs	r3, #0
 80026e6:	77fb      	strb	r3, [r7, #31]
 80026e8:	e117      	b.n	800291a <UART_SetConfig+0x34e>
 80026ea:	2302      	movs	r3, #2
 80026ec:	77fb      	strb	r3, [r7, #31]
 80026ee:	e114      	b.n	800291a <UART_SetConfig+0x34e>
 80026f0:	2304      	movs	r3, #4
 80026f2:	77fb      	strb	r3, [r7, #31]
 80026f4:	e111      	b.n	800291a <UART_SetConfig+0x34e>
 80026f6:	2308      	movs	r3, #8
 80026f8:	77fb      	strb	r3, [r7, #31]
 80026fa:	e10e      	b.n	800291a <UART_SetConfig+0x34e>
 80026fc:	2310      	movs	r3, #16
 80026fe:	77fb      	strb	r3, [r7, #31]
 8002700:	bf00      	nop
 8002702:	e10a      	b.n	800291a <UART_SetConfig+0x34e>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a71      	ldr	r2, [pc, #452]	; (80028d0 <UART_SetConfig+0x304>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d120      	bne.n	8002750 <UART_SetConfig+0x184>
 800270e:	4b6e      	ldr	r3, [pc, #440]	; (80028c8 <UART_SetConfig+0x2fc>)
 8002710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002714:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002718:	2b10      	cmp	r3, #16
 800271a:	d00f      	beq.n	800273c <UART_SetConfig+0x170>
 800271c:	2b10      	cmp	r3, #16
 800271e:	d802      	bhi.n	8002726 <UART_SetConfig+0x15a>
 8002720:	2b00      	cmp	r3, #0
 8002722:	d005      	beq.n	8002730 <UART_SetConfig+0x164>
 8002724:	e010      	b.n	8002748 <UART_SetConfig+0x17c>
 8002726:	2b20      	cmp	r3, #32
 8002728:	d005      	beq.n	8002736 <UART_SetConfig+0x16a>
 800272a:	2b30      	cmp	r3, #48	; 0x30
 800272c:	d009      	beq.n	8002742 <UART_SetConfig+0x176>
 800272e:	e00b      	b.n	8002748 <UART_SetConfig+0x17c>
 8002730:	2300      	movs	r3, #0
 8002732:	77fb      	strb	r3, [r7, #31]
 8002734:	e0f1      	b.n	800291a <UART_SetConfig+0x34e>
 8002736:	2302      	movs	r3, #2
 8002738:	77fb      	strb	r3, [r7, #31]
 800273a:	e0ee      	b.n	800291a <UART_SetConfig+0x34e>
 800273c:	2304      	movs	r3, #4
 800273e:	77fb      	strb	r3, [r7, #31]
 8002740:	e0eb      	b.n	800291a <UART_SetConfig+0x34e>
 8002742:	2308      	movs	r3, #8
 8002744:	77fb      	strb	r3, [r7, #31]
 8002746:	e0e8      	b.n	800291a <UART_SetConfig+0x34e>
 8002748:	2310      	movs	r3, #16
 800274a:	77fb      	strb	r3, [r7, #31]
 800274c:	bf00      	nop
 800274e:	e0e4      	b.n	800291a <UART_SetConfig+0x34e>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a5f      	ldr	r2, [pc, #380]	; (80028d4 <UART_SetConfig+0x308>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d120      	bne.n	800279c <UART_SetConfig+0x1d0>
 800275a:	4b5b      	ldr	r3, [pc, #364]	; (80028c8 <UART_SetConfig+0x2fc>)
 800275c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002760:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002764:	2b40      	cmp	r3, #64	; 0x40
 8002766:	d00f      	beq.n	8002788 <UART_SetConfig+0x1bc>
 8002768:	2b40      	cmp	r3, #64	; 0x40
 800276a:	d802      	bhi.n	8002772 <UART_SetConfig+0x1a6>
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <UART_SetConfig+0x1b0>
 8002770:	e010      	b.n	8002794 <UART_SetConfig+0x1c8>
 8002772:	2b80      	cmp	r3, #128	; 0x80
 8002774:	d005      	beq.n	8002782 <UART_SetConfig+0x1b6>
 8002776:	2bc0      	cmp	r3, #192	; 0xc0
 8002778:	d009      	beq.n	800278e <UART_SetConfig+0x1c2>
 800277a:	e00b      	b.n	8002794 <UART_SetConfig+0x1c8>
 800277c:	2300      	movs	r3, #0
 800277e:	77fb      	strb	r3, [r7, #31]
 8002780:	e0cb      	b.n	800291a <UART_SetConfig+0x34e>
 8002782:	2302      	movs	r3, #2
 8002784:	77fb      	strb	r3, [r7, #31]
 8002786:	e0c8      	b.n	800291a <UART_SetConfig+0x34e>
 8002788:	2304      	movs	r3, #4
 800278a:	77fb      	strb	r3, [r7, #31]
 800278c:	e0c5      	b.n	800291a <UART_SetConfig+0x34e>
 800278e:	2308      	movs	r3, #8
 8002790:	77fb      	strb	r3, [r7, #31]
 8002792:	e0c2      	b.n	800291a <UART_SetConfig+0x34e>
 8002794:	2310      	movs	r3, #16
 8002796:	77fb      	strb	r3, [r7, #31]
 8002798:	bf00      	nop
 800279a:	e0be      	b.n	800291a <UART_SetConfig+0x34e>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a4d      	ldr	r2, [pc, #308]	; (80028d8 <UART_SetConfig+0x30c>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d124      	bne.n	80027f0 <UART_SetConfig+0x224>
 80027a6:	4b48      	ldr	r3, [pc, #288]	; (80028c8 <UART_SetConfig+0x2fc>)
 80027a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027b4:	d012      	beq.n	80027dc <UART_SetConfig+0x210>
 80027b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027ba:	d802      	bhi.n	80027c2 <UART_SetConfig+0x1f6>
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d007      	beq.n	80027d0 <UART_SetConfig+0x204>
 80027c0:	e012      	b.n	80027e8 <UART_SetConfig+0x21c>
 80027c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027c6:	d006      	beq.n	80027d6 <UART_SetConfig+0x20a>
 80027c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027cc:	d009      	beq.n	80027e2 <UART_SetConfig+0x216>
 80027ce:	e00b      	b.n	80027e8 <UART_SetConfig+0x21c>
 80027d0:	2300      	movs	r3, #0
 80027d2:	77fb      	strb	r3, [r7, #31]
 80027d4:	e0a1      	b.n	800291a <UART_SetConfig+0x34e>
 80027d6:	2302      	movs	r3, #2
 80027d8:	77fb      	strb	r3, [r7, #31]
 80027da:	e09e      	b.n	800291a <UART_SetConfig+0x34e>
 80027dc:	2304      	movs	r3, #4
 80027de:	77fb      	strb	r3, [r7, #31]
 80027e0:	e09b      	b.n	800291a <UART_SetConfig+0x34e>
 80027e2:	2308      	movs	r3, #8
 80027e4:	77fb      	strb	r3, [r7, #31]
 80027e6:	e098      	b.n	800291a <UART_SetConfig+0x34e>
 80027e8:	2310      	movs	r3, #16
 80027ea:	77fb      	strb	r3, [r7, #31]
 80027ec:	bf00      	nop
 80027ee:	e094      	b.n	800291a <UART_SetConfig+0x34e>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a39      	ldr	r2, [pc, #228]	; (80028dc <UART_SetConfig+0x310>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d124      	bne.n	8002844 <UART_SetConfig+0x278>
 80027fa:	4b33      	ldr	r3, [pc, #204]	; (80028c8 <UART_SetConfig+0x2fc>)
 80027fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002800:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002808:	d012      	beq.n	8002830 <UART_SetConfig+0x264>
 800280a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800280e:	d802      	bhi.n	8002816 <UART_SetConfig+0x24a>
 8002810:	2b00      	cmp	r3, #0
 8002812:	d007      	beq.n	8002824 <UART_SetConfig+0x258>
 8002814:	e012      	b.n	800283c <UART_SetConfig+0x270>
 8002816:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800281a:	d006      	beq.n	800282a <UART_SetConfig+0x25e>
 800281c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002820:	d009      	beq.n	8002836 <UART_SetConfig+0x26a>
 8002822:	e00b      	b.n	800283c <UART_SetConfig+0x270>
 8002824:	2301      	movs	r3, #1
 8002826:	77fb      	strb	r3, [r7, #31]
 8002828:	e077      	b.n	800291a <UART_SetConfig+0x34e>
 800282a:	2302      	movs	r3, #2
 800282c:	77fb      	strb	r3, [r7, #31]
 800282e:	e074      	b.n	800291a <UART_SetConfig+0x34e>
 8002830:	2304      	movs	r3, #4
 8002832:	77fb      	strb	r3, [r7, #31]
 8002834:	e071      	b.n	800291a <UART_SetConfig+0x34e>
 8002836:	2308      	movs	r3, #8
 8002838:	77fb      	strb	r3, [r7, #31]
 800283a:	e06e      	b.n	800291a <UART_SetConfig+0x34e>
 800283c:	2310      	movs	r3, #16
 800283e:	77fb      	strb	r3, [r7, #31]
 8002840:	bf00      	nop
 8002842:	e06a      	b.n	800291a <UART_SetConfig+0x34e>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a25      	ldr	r2, [pc, #148]	; (80028e0 <UART_SetConfig+0x314>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d124      	bne.n	8002898 <UART_SetConfig+0x2cc>
 800284e:	4b1e      	ldr	r3, [pc, #120]	; (80028c8 <UART_SetConfig+0x2fc>)
 8002850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002854:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002858:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800285c:	d012      	beq.n	8002884 <UART_SetConfig+0x2b8>
 800285e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002862:	d802      	bhi.n	800286a <UART_SetConfig+0x29e>
 8002864:	2b00      	cmp	r3, #0
 8002866:	d007      	beq.n	8002878 <UART_SetConfig+0x2ac>
 8002868:	e012      	b.n	8002890 <UART_SetConfig+0x2c4>
 800286a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800286e:	d006      	beq.n	800287e <UART_SetConfig+0x2b2>
 8002870:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002874:	d009      	beq.n	800288a <UART_SetConfig+0x2be>
 8002876:	e00b      	b.n	8002890 <UART_SetConfig+0x2c4>
 8002878:	2300      	movs	r3, #0
 800287a:	77fb      	strb	r3, [r7, #31]
 800287c:	e04d      	b.n	800291a <UART_SetConfig+0x34e>
 800287e:	2302      	movs	r3, #2
 8002880:	77fb      	strb	r3, [r7, #31]
 8002882:	e04a      	b.n	800291a <UART_SetConfig+0x34e>
 8002884:	2304      	movs	r3, #4
 8002886:	77fb      	strb	r3, [r7, #31]
 8002888:	e047      	b.n	800291a <UART_SetConfig+0x34e>
 800288a:	2308      	movs	r3, #8
 800288c:	77fb      	strb	r3, [r7, #31]
 800288e:	e044      	b.n	800291a <UART_SetConfig+0x34e>
 8002890:	2310      	movs	r3, #16
 8002892:	77fb      	strb	r3, [r7, #31]
 8002894:	bf00      	nop
 8002896:	e040      	b.n	800291a <UART_SetConfig+0x34e>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a11      	ldr	r2, [pc, #68]	; (80028e4 <UART_SetConfig+0x318>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d139      	bne.n	8002916 <UART_SetConfig+0x34a>
 80028a2:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <UART_SetConfig+0x2fc>)
 80028a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80028ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028b0:	d027      	beq.n	8002902 <UART_SetConfig+0x336>
 80028b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028b6:	d817      	bhi.n	80028e8 <UART_SetConfig+0x31c>
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d01c      	beq.n	80028f6 <UART_SetConfig+0x32a>
 80028bc:	e027      	b.n	800290e <UART_SetConfig+0x342>
 80028be:	bf00      	nop
 80028c0:	efff69f3 	.word	0xefff69f3
 80028c4:	40011000 	.word	0x40011000
 80028c8:	40023800 	.word	0x40023800
 80028cc:	40004400 	.word	0x40004400
 80028d0:	40004800 	.word	0x40004800
 80028d4:	40004c00 	.word	0x40004c00
 80028d8:	40005000 	.word	0x40005000
 80028dc:	40011400 	.word	0x40011400
 80028e0:	40007800 	.word	0x40007800
 80028e4:	40007c00 	.word	0x40007c00
 80028e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028ec:	d006      	beq.n	80028fc <UART_SetConfig+0x330>
 80028ee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80028f2:	d009      	beq.n	8002908 <UART_SetConfig+0x33c>
 80028f4:	e00b      	b.n	800290e <UART_SetConfig+0x342>
 80028f6:	2300      	movs	r3, #0
 80028f8:	77fb      	strb	r3, [r7, #31]
 80028fa:	e00e      	b.n	800291a <UART_SetConfig+0x34e>
 80028fc:	2302      	movs	r3, #2
 80028fe:	77fb      	strb	r3, [r7, #31]
 8002900:	e00b      	b.n	800291a <UART_SetConfig+0x34e>
 8002902:	2304      	movs	r3, #4
 8002904:	77fb      	strb	r3, [r7, #31]
 8002906:	e008      	b.n	800291a <UART_SetConfig+0x34e>
 8002908:	2308      	movs	r3, #8
 800290a:	77fb      	strb	r3, [r7, #31]
 800290c:	e005      	b.n	800291a <UART_SetConfig+0x34e>
 800290e:	2310      	movs	r3, #16
 8002910:	77fb      	strb	r3, [r7, #31]
 8002912:	bf00      	nop
 8002914:	e001      	b.n	800291a <UART_SetConfig+0x34e>
 8002916:	2310      	movs	r3, #16
 8002918:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002922:	d17f      	bne.n	8002a24 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8002924:	7ffb      	ldrb	r3, [r7, #31]
 8002926:	2b08      	cmp	r3, #8
 8002928:	d85c      	bhi.n	80029e4 <UART_SetConfig+0x418>
 800292a:	a201      	add	r2, pc, #4	; (adr r2, 8002930 <UART_SetConfig+0x364>)
 800292c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002930:	08002955 	.word	0x08002955
 8002934:	08002975 	.word	0x08002975
 8002938:	08002995 	.word	0x08002995
 800293c:	080029e5 	.word	0x080029e5
 8002940:	080029ad 	.word	0x080029ad
 8002944:	080029e5 	.word	0x080029e5
 8002948:	080029e5 	.word	0x080029e5
 800294c:	080029e5 	.word	0x080029e5
 8002950:	080029cd 	.word	0x080029cd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002954:	f7ff f90c 	bl	8001b70 <HAL_RCC_GetPCLK1Freq>
 8002958:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	005a      	lsls	r2, r3, #1
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	085b      	lsrs	r3, r3, #1
 8002964:	441a      	add	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	fbb2 f3f3 	udiv	r3, r2, r3
 800296e:	b29b      	uxth	r3, r3
 8002970:	61bb      	str	r3, [r7, #24]
        break;
 8002972:	e03a      	b.n	80029ea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002974:	f7ff f910 	bl	8001b98 <HAL_RCC_GetPCLK2Freq>
 8002978:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	005a      	lsls	r2, r3, #1
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	085b      	lsrs	r3, r3, #1
 8002984:	441a      	add	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	fbb2 f3f3 	udiv	r3, r2, r3
 800298e:	b29b      	uxth	r3, r3
 8002990:	61bb      	str	r3, [r7, #24]
        break;
 8002992:	e02a      	b.n	80029ea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	085a      	lsrs	r2, r3, #1
 800299a:	4b5f      	ldr	r3, [pc, #380]	; (8002b18 <UART_SetConfig+0x54c>)
 800299c:	4413      	add	r3, r2
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	6852      	ldr	r2, [r2, #4]
 80029a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	61bb      	str	r3, [r7, #24]
        break;
 80029aa:	e01e      	b.n	80029ea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029ac:	f7fe fffc 	bl	80019a8 <HAL_RCC_GetSysClockFreq>
 80029b0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	005a      	lsls	r2, r3, #1
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	085b      	lsrs	r3, r3, #1
 80029bc:	441a      	add	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	61bb      	str	r3, [r7, #24]
        break;
 80029ca:	e00e      	b.n	80029ea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	085b      	lsrs	r3, r3, #1
 80029d2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	fbb2 f3f3 	udiv	r3, r2, r3
 80029de:	b29b      	uxth	r3, r3
 80029e0:	61bb      	str	r3, [r7, #24]
        break;
 80029e2:	e002      	b.n	80029ea <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	75fb      	strb	r3, [r7, #23]
        break;
 80029e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	2b0f      	cmp	r3, #15
 80029ee:	d916      	bls.n	8002a1e <UART_SetConfig+0x452>
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f6:	d212      	bcs.n	8002a1e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	f023 030f 	bic.w	r3, r3, #15
 8002a00:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	085b      	lsrs	r3, r3, #1
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	897b      	ldrh	r3, [r7, #10]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	897a      	ldrh	r2, [r7, #10]
 8002a1a:	60da      	str	r2, [r3, #12]
 8002a1c:	e070      	b.n	8002b00 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	75fb      	strb	r3, [r7, #23]
 8002a22:	e06d      	b.n	8002b00 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8002a24:	7ffb      	ldrb	r3, [r7, #31]
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d859      	bhi.n	8002ade <UART_SetConfig+0x512>
 8002a2a:	a201      	add	r2, pc, #4	; (adr r2, 8002a30 <UART_SetConfig+0x464>)
 8002a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a30:	08002a55 	.word	0x08002a55
 8002a34:	08002a73 	.word	0x08002a73
 8002a38:	08002a91 	.word	0x08002a91
 8002a3c:	08002adf 	.word	0x08002adf
 8002a40:	08002aa9 	.word	0x08002aa9
 8002a44:	08002adf 	.word	0x08002adf
 8002a48:	08002adf 	.word	0x08002adf
 8002a4c:	08002adf 	.word	0x08002adf
 8002a50:	08002ac7 	.word	0x08002ac7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a54:	f7ff f88c 	bl	8001b70 <HAL_RCC_GetPCLK1Freq>
 8002a58:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	085a      	lsrs	r2, r3, #1
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	441a      	add	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	61bb      	str	r3, [r7, #24]
        break;
 8002a70:	e038      	b.n	8002ae4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a72:	f7ff f891 	bl	8001b98 <HAL_RCC_GetPCLK2Freq>
 8002a76:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	085a      	lsrs	r2, r3, #1
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	441a      	add	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	61bb      	str	r3, [r7, #24]
        break;
 8002a8e:	e029      	b.n	8002ae4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	085a      	lsrs	r2, r3, #1
 8002a96:	4b21      	ldr	r3, [pc, #132]	; (8002b1c <UART_SetConfig+0x550>)
 8002a98:	4413      	add	r3, r2
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6852      	ldr	r2, [r2, #4]
 8002a9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	61bb      	str	r3, [r7, #24]
        break;
 8002aa6:	e01d      	b.n	8002ae4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002aa8:	f7fe ff7e 	bl	80019a8 <HAL_RCC_GetSysClockFreq>
 8002aac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	085a      	lsrs	r2, r3, #1
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	441a      	add	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	61bb      	str	r3, [r7, #24]
        break;
 8002ac4:	e00e      	b.n	8002ae4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	085b      	lsrs	r3, r3, #1
 8002acc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	61bb      	str	r3, [r7, #24]
        break;
 8002adc:	e002      	b.n	8002ae4 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	75fb      	strb	r3, [r7, #23]
        break;
 8002ae2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	2b0f      	cmp	r3, #15
 8002ae8:	d908      	bls.n	8002afc <UART_SetConfig+0x530>
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af0:	d204      	bcs.n	8002afc <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	60da      	str	r2, [r3, #12]
 8002afa:	e001      	b.n	8002b00 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002b0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3720      	adds	r7, #32
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	01e84800 	.word	0x01e84800
 8002b1c:	00f42400 	.word	0x00f42400

08002b20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00a      	beq.n	8002b4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00a      	beq.n	8002b6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00a      	beq.n	8002b8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b92:	f003 0308 	and.w	r3, r3, #8
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00a      	beq.n	8002bb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	f003 0310 	and.w	r3, r3, #16
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00a      	beq.n	8002bd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd6:	f003 0320 	and.w	r3, r3, #32
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00a      	beq.n	8002bf4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d01a      	beq.n	8002c36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c1e:	d10a      	bne.n	8002c36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00a      	beq.n	8002c58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	605a      	str	r2, [r3, #4]
  }
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af02      	add	r7, sp, #8
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002c72:	f7fd ffbd 	bl	8000bf0 <HAL_GetTick>
 8002c76:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0308 	and.w	r3, r3, #8
 8002c82:	2b08      	cmp	r3, #8
 8002c84:	d10e      	bne.n	8002ca4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c86:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 f82a 	bl	8002cee <UART_WaitOnFlagUntilTimeout>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e020      	b.n	8002ce6 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0304 	and.w	r3, r3, #4
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d10e      	bne.n	8002cd0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cb2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 f814 	bl	8002cee <UART_WaitOnFlagUntilTimeout>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e00a      	b.n	8002ce6 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2220      	movs	r2, #32
 8002cda:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b084      	sub	sp, #16
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	60f8      	str	r0, [r7, #12]
 8002cf6:	60b9      	str	r1, [r7, #8]
 8002cf8:	603b      	str	r3, [r7, #0]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cfe:	e05d      	b.n	8002dbc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d06:	d059      	beq.n	8002dbc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d08:	f7fd ff72 	bl	8000bf0 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d302      	bcc.n	8002d1e <UART_WaitOnFlagUntilTimeout+0x30>
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d11b      	bne.n	8002d56 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d2c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0201 	bic.w	r2, r2, #1
 8002d3c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2220      	movs	r2, #32
 8002d42:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2220      	movs	r2, #32
 8002d48:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e042      	b.n	8002ddc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d02b      	beq.n	8002dbc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d72:	d123      	bne.n	8002dbc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d7c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d8c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 0201 	bic.w	r2, r2, #1
 8002d9c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2220      	movs	r2, #32
 8002da2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2220      	movs	r2, #32
 8002da8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2220      	movs	r2, #32
 8002dae:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e00f      	b.n	8002ddc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	69da      	ldr	r2, [r3, #28]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	bf0c      	ite	eq
 8002dcc:	2301      	moveq	r3, #1
 8002dce:	2300      	movne	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	79fb      	ldrb	r3, [r7, #7]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d092      	beq.n	8002d00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <__errno>:
 8002de4:	4b01      	ldr	r3, [pc, #4]	; (8002dec <__errno+0x8>)
 8002de6:	6818      	ldr	r0, [r3, #0]
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	2000000c 	.word	0x2000000c

08002df0 <__libc_init_array>:
 8002df0:	b570      	push	{r4, r5, r6, lr}
 8002df2:	4e0d      	ldr	r6, [pc, #52]	; (8002e28 <__libc_init_array+0x38>)
 8002df4:	4c0d      	ldr	r4, [pc, #52]	; (8002e2c <__libc_init_array+0x3c>)
 8002df6:	1ba4      	subs	r4, r4, r6
 8002df8:	10a4      	asrs	r4, r4, #2
 8002dfa:	2500      	movs	r5, #0
 8002dfc:	42a5      	cmp	r5, r4
 8002dfe:	d109      	bne.n	8002e14 <__libc_init_array+0x24>
 8002e00:	4e0b      	ldr	r6, [pc, #44]	; (8002e30 <__libc_init_array+0x40>)
 8002e02:	4c0c      	ldr	r4, [pc, #48]	; (8002e34 <__libc_init_array+0x44>)
 8002e04:	f000 fc26 	bl	8003654 <_init>
 8002e08:	1ba4      	subs	r4, r4, r6
 8002e0a:	10a4      	asrs	r4, r4, #2
 8002e0c:	2500      	movs	r5, #0
 8002e0e:	42a5      	cmp	r5, r4
 8002e10:	d105      	bne.n	8002e1e <__libc_init_array+0x2e>
 8002e12:	bd70      	pop	{r4, r5, r6, pc}
 8002e14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e18:	4798      	blx	r3
 8002e1a:	3501      	adds	r5, #1
 8002e1c:	e7ee      	b.n	8002dfc <__libc_init_array+0xc>
 8002e1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e22:	4798      	blx	r3
 8002e24:	3501      	adds	r5, #1
 8002e26:	e7f2      	b.n	8002e0e <__libc_init_array+0x1e>
 8002e28:	08003700 	.word	0x08003700
 8002e2c:	08003700 	.word	0x08003700
 8002e30:	08003700 	.word	0x08003700
 8002e34:	08003704 	.word	0x08003704

08002e38 <memset>:
 8002e38:	4402      	add	r2, r0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d100      	bne.n	8002e42 <memset+0xa>
 8002e40:	4770      	bx	lr
 8002e42:	f803 1b01 	strb.w	r1, [r3], #1
 8002e46:	e7f9      	b.n	8002e3c <memset+0x4>

08002e48 <siprintf>:
 8002e48:	b40e      	push	{r1, r2, r3}
 8002e4a:	b500      	push	{lr}
 8002e4c:	b09c      	sub	sp, #112	; 0x70
 8002e4e:	ab1d      	add	r3, sp, #116	; 0x74
 8002e50:	9002      	str	r0, [sp, #8]
 8002e52:	9006      	str	r0, [sp, #24]
 8002e54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002e58:	4809      	ldr	r0, [pc, #36]	; (8002e80 <siprintf+0x38>)
 8002e5a:	9107      	str	r1, [sp, #28]
 8002e5c:	9104      	str	r1, [sp, #16]
 8002e5e:	4909      	ldr	r1, [pc, #36]	; (8002e84 <siprintf+0x3c>)
 8002e60:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e64:	9105      	str	r1, [sp, #20]
 8002e66:	6800      	ldr	r0, [r0, #0]
 8002e68:	9301      	str	r3, [sp, #4]
 8002e6a:	a902      	add	r1, sp, #8
 8002e6c:	f000 f866 	bl	8002f3c <_svfiprintf_r>
 8002e70:	9b02      	ldr	r3, [sp, #8]
 8002e72:	2200      	movs	r2, #0
 8002e74:	701a      	strb	r2, [r3, #0]
 8002e76:	b01c      	add	sp, #112	; 0x70
 8002e78:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e7c:	b003      	add	sp, #12
 8002e7e:	4770      	bx	lr
 8002e80:	2000000c 	.word	0x2000000c
 8002e84:	ffff0208 	.word	0xffff0208

08002e88 <__ssputs_r>:
 8002e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e8c:	688e      	ldr	r6, [r1, #8]
 8002e8e:	429e      	cmp	r6, r3
 8002e90:	4682      	mov	sl, r0
 8002e92:	460c      	mov	r4, r1
 8002e94:	4690      	mov	r8, r2
 8002e96:	4699      	mov	r9, r3
 8002e98:	d837      	bhi.n	8002f0a <__ssputs_r+0x82>
 8002e9a:	898a      	ldrh	r2, [r1, #12]
 8002e9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002ea0:	d031      	beq.n	8002f06 <__ssputs_r+0x7e>
 8002ea2:	6825      	ldr	r5, [r4, #0]
 8002ea4:	6909      	ldr	r1, [r1, #16]
 8002ea6:	1a6f      	subs	r7, r5, r1
 8002ea8:	6965      	ldr	r5, [r4, #20]
 8002eaa:	2302      	movs	r3, #2
 8002eac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002eb0:	fb95 f5f3 	sdiv	r5, r5, r3
 8002eb4:	f109 0301 	add.w	r3, r9, #1
 8002eb8:	443b      	add	r3, r7
 8002eba:	429d      	cmp	r5, r3
 8002ebc:	bf38      	it	cc
 8002ebe:	461d      	movcc	r5, r3
 8002ec0:	0553      	lsls	r3, r2, #21
 8002ec2:	d530      	bpl.n	8002f26 <__ssputs_r+0x9e>
 8002ec4:	4629      	mov	r1, r5
 8002ec6:	f000 fb2b 	bl	8003520 <_malloc_r>
 8002eca:	4606      	mov	r6, r0
 8002ecc:	b950      	cbnz	r0, 8002ee4 <__ssputs_r+0x5c>
 8002ece:	230c      	movs	r3, #12
 8002ed0:	f8ca 3000 	str.w	r3, [sl]
 8002ed4:	89a3      	ldrh	r3, [r4, #12]
 8002ed6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002eda:	81a3      	strh	r3, [r4, #12]
 8002edc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ee4:	463a      	mov	r2, r7
 8002ee6:	6921      	ldr	r1, [r4, #16]
 8002ee8:	f000 faa8 	bl	800343c <memcpy>
 8002eec:	89a3      	ldrh	r3, [r4, #12]
 8002eee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002ef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ef6:	81a3      	strh	r3, [r4, #12]
 8002ef8:	6126      	str	r6, [r4, #16]
 8002efa:	6165      	str	r5, [r4, #20]
 8002efc:	443e      	add	r6, r7
 8002efe:	1bed      	subs	r5, r5, r7
 8002f00:	6026      	str	r6, [r4, #0]
 8002f02:	60a5      	str	r5, [r4, #8]
 8002f04:	464e      	mov	r6, r9
 8002f06:	454e      	cmp	r6, r9
 8002f08:	d900      	bls.n	8002f0c <__ssputs_r+0x84>
 8002f0a:	464e      	mov	r6, r9
 8002f0c:	4632      	mov	r2, r6
 8002f0e:	4641      	mov	r1, r8
 8002f10:	6820      	ldr	r0, [r4, #0]
 8002f12:	f000 fa9e 	bl	8003452 <memmove>
 8002f16:	68a3      	ldr	r3, [r4, #8]
 8002f18:	1b9b      	subs	r3, r3, r6
 8002f1a:	60a3      	str	r3, [r4, #8]
 8002f1c:	6823      	ldr	r3, [r4, #0]
 8002f1e:	441e      	add	r6, r3
 8002f20:	6026      	str	r6, [r4, #0]
 8002f22:	2000      	movs	r0, #0
 8002f24:	e7dc      	b.n	8002ee0 <__ssputs_r+0x58>
 8002f26:	462a      	mov	r2, r5
 8002f28:	f000 fb54 	bl	80035d4 <_realloc_r>
 8002f2c:	4606      	mov	r6, r0
 8002f2e:	2800      	cmp	r0, #0
 8002f30:	d1e2      	bne.n	8002ef8 <__ssputs_r+0x70>
 8002f32:	6921      	ldr	r1, [r4, #16]
 8002f34:	4650      	mov	r0, sl
 8002f36:	f000 faa5 	bl	8003484 <_free_r>
 8002f3a:	e7c8      	b.n	8002ece <__ssputs_r+0x46>

08002f3c <_svfiprintf_r>:
 8002f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f40:	461d      	mov	r5, r3
 8002f42:	898b      	ldrh	r3, [r1, #12]
 8002f44:	061f      	lsls	r7, r3, #24
 8002f46:	b09d      	sub	sp, #116	; 0x74
 8002f48:	4680      	mov	r8, r0
 8002f4a:	460c      	mov	r4, r1
 8002f4c:	4616      	mov	r6, r2
 8002f4e:	d50f      	bpl.n	8002f70 <_svfiprintf_r+0x34>
 8002f50:	690b      	ldr	r3, [r1, #16]
 8002f52:	b96b      	cbnz	r3, 8002f70 <_svfiprintf_r+0x34>
 8002f54:	2140      	movs	r1, #64	; 0x40
 8002f56:	f000 fae3 	bl	8003520 <_malloc_r>
 8002f5a:	6020      	str	r0, [r4, #0]
 8002f5c:	6120      	str	r0, [r4, #16]
 8002f5e:	b928      	cbnz	r0, 8002f6c <_svfiprintf_r+0x30>
 8002f60:	230c      	movs	r3, #12
 8002f62:	f8c8 3000 	str.w	r3, [r8]
 8002f66:	f04f 30ff 	mov.w	r0, #4294967295
 8002f6a:	e0c8      	b.n	80030fe <_svfiprintf_r+0x1c2>
 8002f6c:	2340      	movs	r3, #64	; 0x40
 8002f6e:	6163      	str	r3, [r4, #20]
 8002f70:	2300      	movs	r3, #0
 8002f72:	9309      	str	r3, [sp, #36]	; 0x24
 8002f74:	2320      	movs	r3, #32
 8002f76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f7a:	2330      	movs	r3, #48	; 0x30
 8002f7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f80:	9503      	str	r5, [sp, #12]
 8002f82:	f04f 0b01 	mov.w	fp, #1
 8002f86:	4637      	mov	r7, r6
 8002f88:	463d      	mov	r5, r7
 8002f8a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002f8e:	b10b      	cbz	r3, 8002f94 <_svfiprintf_r+0x58>
 8002f90:	2b25      	cmp	r3, #37	; 0x25
 8002f92:	d13e      	bne.n	8003012 <_svfiprintf_r+0xd6>
 8002f94:	ebb7 0a06 	subs.w	sl, r7, r6
 8002f98:	d00b      	beq.n	8002fb2 <_svfiprintf_r+0x76>
 8002f9a:	4653      	mov	r3, sl
 8002f9c:	4632      	mov	r2, r6
 8002f9e:	4621      	mov	r1, r4
 8002fa0:	4640      	mov	r0, r8
 8002fa2:	f7ff ff71 	bl	8002e88 <__ssputs_r>
 8002fa6:	3001      	adds	r0, #1
 8002fa8:	f000 80a4 	beq.w	80030f4 <_svfiprintf_r+0x1b8>
 8002fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fae:	4453      	add	r3, sl
 8002fb0:	9309      	str	r3, [sp, #36]	; 0x24
 8002fb2:	783b      	ldrb	r3, [r7, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 809d 	beq.w	80030f4 <_svfiprintf_r+0x1b8>
 8002fba:	2300      	movs	r3, #0
 8002fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002fc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002fc4:	9304      	str	r3, [sp, #16]
 8002fc6:	9307      	str	r3, [sp, #28]
 8002fc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002fcc:	931a      	str	r3, [sp, #104]	; 0x68
 8002fce:	462f      	mov	r7, r5
 8002fd0:	2205      	movs	r2, #5
 8002fd2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002fd6:	4850      	ldr	r0, [pc, #320]	; (8003118 <_svfiprintf_r+0x1dc>)
 8002fd8:	f7fd f93a 	bl	8000250 <memchr>
 8002fdc:	9b04      	ldr	r3, [sp, #16]
 8002fde:	b9d0      	cbnz	r0, 8003016 <_svfiprintf_r+0xda>
 8002fe0:	06d9      	lsls	r1, r3, #27
 8002fe2:	bf44      	itt	mi
 8002fe4:	2220      	movmi	r2, #32
 8002fe6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002fea:	071a      	lsls	r2, r3, #28
 8002fec:	bf44      	itt	mi
 8002fee:	222b      	movmi	r2, #43	; 0x2b
 8002ff0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002ff4:	782a      	ldrb	r2, [r5, #0]
 8002ff6:	2a2a      	cmp	r2, #42	; 0x2a
 8002ff8:	d015      	beq.n	8003026 <_svfiprintf_r+0xea>
 8002ffa:	9a07      	ldr	r2, [sp, #28]
 8002ffc:	462f      	mov	r7, r5
 8002ffe:	2000      	movs	r0, #0
 8003000:	250a      	movs	r5, #10
 8003002:	4639      	mov	r1, r7
 8003004:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003008:	3b30      	subs	r3, #48	; 0x30
 800300a:	2b09      	cmp	r3, #9
 800300c:	d94d      	bls.n	80030aa <_svfiprintf_r+0x16e>
 800300e:	b1b8      	cbz	r0, 8003040 <_svfiprintf_r+0x104>
 8003010:	e00f      	b.n	8003032 <_svfiprintf_r+0xf6>
 8003012:	462f      	mov	r7, r5
 8003014:	e7b8      	b.n	8002f88 <_svfiprintf_r+0x4c>
 8003016:	4a40      	ldr	r2, [pc, #256]	; (8003118 <_svfiprintf_r+0x1dc>)
 8003018:	1a80      	subs	r0, r0, r2
 800301a:	fa0b f000 	lsl.w	r0, fp, r0
 800301e:	4318      	orrs	r0, r3
 8003020:	9004      	str	r0, [sp, #16]
 8003022:	463d      	mov	r5, r7
 8003024:	e7d3      	b.n	8002fce <_svfiprintf_r+0x92>
 8003026:	9a03      	ldr	r2, [sp, #12]
 8003028:	1d11      	adds	r1, r2, #4
 800302a:	6812      	ldr	r2, [r2, #0]
 800302c:	9103      	str	r1, [sp, #12]
 800302e:	2a00      	cmp	r2, #0
 8003030:	db01      	blt.n	8003036 <_svfiprintf_r+0xfa>
 8003032:	9207      	str	r2, [sp, #28]
 8003034:	e004      	b.n	8003040 <_svfiprintf_r+0x104>
 8003036:	4252      	negs	r2, r2
 8003038:	f043 0302 	orr.w	r3, r3, #2
 800303c:	9207      	str	r2, [sp, #28]
 800303e:	9304      	str	r3, [sp, #16]
 8003040:	783b      	ldrb	r3, [r7, #0]
 8003042:	2b2e      	cmp	r3, #46	; 0x2e
 8003044:	d10c      	bne.n	8003060 <_svfiprintf_r+0x124>
 8003046:	787b      	ldrb	r3, [r7, #1]
 8003048:	2b2a      	cmp	r3, #42	; 0x2a
 800304a:	d133      	bne.n	80030b4 <_svfiprintf_r+0x178>
 800304c:	9b03      	ldr	r3, [sp, #12]
 800304e:	1d1a      	adds	r2, r3, #4
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	9203      	str	r2, [sp, #12]
 8003054:	2b00      	cmp	r3, #0
 8003056:	bfb8      	it	lt
 8003058:	f04f 33ff 	movlt.w	r3, #4294967295
 800305c:	3702      	adds	r7, #2
 800305e:	9305      	str	r3, [sp, #20]
 8003060:	4d2e      	ldr	r5, [pc, #184]	; (800311c <_svfiprintf_r+0x1e0>)
 8003062:	7839      	ldrb	r1, [r7, #0]
 8003064:	2203      	movs	r2, #3
 8003066:	4628      	mov	r0, r5
 8003068:	f7fd f8f2 	bl	8000250 <memchr>
 800306c:	b138      	cbz	r0, 800307e <_svfiprintf_r+0x142>
 800306e:	2340      	movs	r3, #64	; 0x40
 8003070:	1b40      	subs	r0, r0, r5
 8003072:	fa03 f000 	lsl.w	r0, r3, r0
 8003076:	9b04      	ldr	r3, [sp, #16]
 8003078:	4303      	orrs	r3, r0
 800307a:	3701      	adds	r7, #1
 800307c:	9304      	str	r3, [sp, #16]
 800307e:	7839      	ldrb	r1, [r7, #0]
 8003080:	4827      	ldr	r0, [pc, #156]	; (8003120 <_svfiprintf_r+0x1e4>)
 8003082:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003086:	2206      	movs	r2, #6
 8003088:	1c7e      	adds	r6, r7, #1
 800308a:	f7fd f8e1 	bl	8000250 <memchr>
 800308e:	2800      	cmp	r0, #0
 8003090:	d038      	beq.n	8003104 <_svfiprintf_r+0x1c8>
 8003092:	4b24      	ldr	r3, [pc, #144]	; (8003124 <_svfiprintf_r+0x1e8>)
 8003094:	bb13      	cbnz	r3, 80030dc <_svfiprintf_r+0x1a0>
 8003096:	9b03      	ldr	r3, [sp, #12]
 8003098:	3307      	adds	r3, #7
 800309a:	f023 0307 	bic.w	r3, r3, #7
 800309e:	3308      	adds	r3, #8
 80030a0:	9303      	str	r3, [sp, #12]
 80030a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030a4:	444b      	add	r3, r9
 80030a6:	9309      	str	r3, [sp, #36]	; 0x24
 80030a8:	e76d      	b.n	8002f86 <_svfiprintf_r+0x4a>
 80030aa:	fb05 3202 	mla	r2, r5, r2, r3
 80030ae:	2001      	movs	r0, #1
 80030b0:	460f      	mov	r7, r1
 80030b2:	e7a6      	b.n	8003002 <_svfiprintf_r+0xc6>
 80030b4:	2300      	movs	r3, #0
 80030b6:	3701      	adds	r7, #1
 80030b8:	9305      	str	r3, [sp, #20]
 80030ba:	4619      	mov	r1, r3
 80030bc:	250a      	movs	r5, #10
 80030be:	4638      	mov	r0, r7
 80030c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80030c4:	3a30      	subs	r2, #48	; 0x30
 80030c6:	2a09      	cmp	r2, #9
 80030c8:	d903      	bls.n	80030d2 <_svfiprintf_r+0x196>
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0c8      	beq.n	8003060 <_svfiprintf_r+0x124>
 80030ce:	9105      	str	r1, [sp, #20]
 80030d0:	e7c6      	b.n	8003060 <_svfiprintf_r+0x124>
 80030d2:	fb05 2101 	mla	r1, r5, r1, r2
 80030d6:	2301      	movs	r3, #1
 80030d8:	4607      	mov	r7, r0
 80030da:	e7f0      	b.n	80030be <_svfiprintf_r+0x182>
 80030dc:	ab03      	add	r3, sp, #12
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	4622      	mov	r2, r4
 80030e2:	4b11      	ldr	r3, [pc, #68]	; (8003128 <_svfiprintf_r+0x1ec>)
 80030e4:	a904      	add	r1, sp, #16
 80030e6:	4640      	mov	r0, r8
 80030e8:	f3af 8000 	nop.w
 80030ec:	f1b0 3fff 	cmp.w	r0, #4294967295
 80030f0:	4681      	mov	r9, r0
 80030f2:	d1d6      	bne.n	80030a2 <_svfiprintf_r+0x166>
 80030f4:	89a3      	ldrh	r3, [r4, #12]
 80030f6:	065b      	lsls	r3, r3, #25
 80030f8:	f53f af35 	bmi.w	8002f66 <_svfiprintf_r+0x2a>
 80030fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030fe:	b01d      	add	sp, #116	; 0x74
 8003100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003104:	ab03      	add	r3, sp, #12
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	4622      	mov	r2, r4
 800310a:	4b07      	ldr	r3, [pc, #28]	; (8003128 <_svfiprintf_r+0x1ec>)
 800310c:	a904      	add	r1, sp, #16
 800310e:	4640      	mov	r0, r8
 8003110:	f000 f882 	bl	8003218 <_printf_i>
 8003114:	e7ea      	b.n	80030ec <_svfiprintf_r+0x1b0>
 8003116:	bf00      	nop
 8003118:	080036c4 	.word	0x080036c4
 800311c:	080036ca 	.word	0x080036ca
 8003120:	080036ce 	.word	0x080036ce
 8003124:	00000000 	.word	0x00000000
 8003128:	08002e89 	.word	0x08002e89

0800312c <_printf_common>:
 800312c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003130:	4691      	mov	r9, r2
 8003132:	461f      	mov	r7, r3
 8003134:	688a      	ldr	r2, [r1, #8]
 8003136:	690b      	ldr	r3, [r1, #16]
 8003138:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800313c:	4293      	cmp	r3, r2
 800313e:	bfb8      	it	lt
 8003140:	4613      	movlt	r3, r2
 8003142:	f8c9 3000 	str.w	r3, [r9]
 8003146:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800314a:	4606      	mov	r6, r0
 800314c:	460c      	mov	r4, r1
 800314e:	b112      	cbz	r2, 8003156 <_printf_common+0x2a>
 8003150:	3301      	adds	r3, #1
 8003152:	f8c9 3000 	str.w	r3, [r9]
 8003156:	6823      	ldr	r3, [r4, #0]
 8003158:	0699      	lsls	r1, r3, #26
 800315a:	bf42      	ittt	mi
 800315c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003160:	3302      	addmi	r3, #2
 8003162:	f8c9 3000 	strmi.w	r3, [r9]
 8003166:	6825      	ldr	r5, [r4, #0]
 8003168:	f015 0506 	ands.w	r5, r5, #6
 800316c:	d107      	bne.n	800317e <_printf_common+0x52>
 800316e:	f104 0a19 	add.w	sl, r4, #25
 8003172:	68e3      	ldr	r3, [r4, #12]
 8003174:	f8d9 2000 	ldr.w	r2, [r9]
 8003178:	1a9b      	subs	r3, r3, r2
 800317a:	42ab      	cmp	r3, r5
 800317c:	dc28      	bgt.n	80031d0 <_printf_common+0xa4>
 800317e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003182:	6822      	ldr	r2, [r4, #0]
 8003184:	3300      	adds	r3, #0
 8003186:	bf18      	it	ne
 8003188:	2301      	movne	r3, #1
 800318a:	0692      	lsls	r2, r2, #26
 800318c:	d42d      	bmi.n	80031ea <_printf_common+0xbe>
 800318e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003192:	4639      	mov	r1, r7
 8003194:	4630      	mov	r0, r6
 8003196:	47c0      	blx	r8
 8003198:	3001      	adds	r0, #1
 800319a:	d020      	beq.n	80031de <_printf_common+0xb2>
 800319c:	6823      	ldr	r3, [r4, #0]
 800319e:	68e5      	ldr	r5, [r4, #12]
 80031a0:	f8d9 2000 	ldr.w	r2, [r9]
 80031a4:	f003 0306 	and.w	r3, r3, #6
 80031a8:	2b04      	cmp	r3, #4
 80031aa:	bf08      	it	eq
 80031ac:	1aad      	subeq	r5, r5, r2
 80031ae:	68a3      	ldr	r3, [r4, #8]
 80031b0:	6922      	ldr	r2, [r4, #16]
 80031b2:	bf0c      	ite	eq
 80031b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80031b8:	2500      	movne	r5, #0
 80031ba:	4293      	cmp	r3, r2
 80031bc:	bfc4      	itt	gt
 80031be:	1a9b      	subgt	r3, r3, r2
 80031c0:	18ed      	addgt	r5, r5, r3
 80031c2:	f04f 0900 	mov.w	r9, #0
 80031c6:	341a      	adds	r4, #26
 80031c8:	454d      	cmp	r5, r9
 80031ca:	d11a      	bne.n	8003202 <_printf_common+0xd6>
 80031cc:	2000      	movs	r0, #0
 80031ce:	e008      	b.n	80031e2 <_printf_common+0xb6>
 80031d0:	2301      	movs	r3, #1
 80031d2:	4652      	mov	r2, sl
 80031d4:	4639      	mov	r1, r7
 80031d6:	4630      	mov	r0, r6
 80031d8:	47c0      	blx	r8
 80031da:	3001      	adds	r0, #1
 80031dc:	d103      	bne.n	80031e6 <_printf_common+0xba>
 80031de:	f04f 30ff 	mov.w	r0, #4294967295
 80031e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031e6:	3501      	adds	r5, #1
 80031e8:	e7c3      	b.n	8003172 <_printf_common+0x46>
 80031ea:	18e1      	adds	r1, r4, r3
 80031ec:	1c5a      	adds	r2, r3, #1
 80031ee:	2030      	movs	r0, #48	; 0x30
 80031f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80031f4:	4422      	add	r2, r4
 80031f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80031fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031fe:	3302      	adds	r3, #2
 8003200:	e7c5      	b.n	800318e <_printf_common+0x62>
 8003202:	2301      	movs	r3, #1
 8003204:	4622      	mov	r2, r4
 8003206:	4639      	mov	r1, r7
 8003208:	4630      	mov	r0, r6
 800320a:	47c0      	blx	r8
 800320c:	3001      	adds	r0, #1
 800320e:	d0e6      	beq.n	80031de <_printf_common+0xb2>
 8003210:	f109 0901 	add.w	r9, r9, #1
 8003214:	e7d8      	b.n	80031c8 <_printf_common+0x9c>
	...

08003218 <_printf_i>:
 8003218:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800321c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003220:	460c      	mov	r4, r1
 8003222:	7e09      	ldrb	r1, [r1, #24]
 8003224:	b085      	sub	sp, #20
 8003226:	296e      	cmp	r1, #110	; 0x6e
 8003228:	4617      	mov	r7, r2
 800322a:	4606      	mov	r6, r0
 800322c:	4698      	mov	r8, r3
 800322e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003230:	f000 80b3 	beq.w	800339a <_printf_i+0x182>
 8003234:	d822      	bhi.n	800327c <_printf_i+0x64>
 8003236:	2963      	cmp	r1, #99	; 0x63
 8003238:	d036      	beq.n	80032a8 <_printf_i+0x90>
 800323a:	d80a      	bhi.n	8003252 <_printf_i+0x3a>
 800323c:	2900      	cmp	r1, #0
 800323e:	f000 80b9 	beq.w	80033b4 <_printf_i+0x19c>
 8003242:	2958      	cmp	r1, #88	; 0x58
 8003244:	f000 8083 	beq.w	800334e <_printf_i+0x136>
 8003248:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800324c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003250:	e032      	b.n	80032b8 <_printf_i+0xa0>
 8003252:	2964      	cmp	r1, #100	; 0x64
 8003254:	d001      	beq.n	800325a <_printf_i+0x42>
 8003256:	2969      	cmp	r1, #105	; 0x69
 8003258:	d1f6      	bne.n	8003248 <_printf_i+0x30>
 800325a:	6820      	ldr	r0, [r4, #0]
 800325c:	6813      	ldr	r3, [r2, #0]
 800325e:	0605      	lsls	r5, r0, #24
 8003260:	f103 0104 	add.w	r1, r3, #4
 8003264:	d52a      	bpl.n	80032bc <_printf_i+0xa4>
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6011      	str	r1, [r2, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	da03      	bge.n	8003276 <_printf_i+0x5e>
 800326e:	222d      	movs	r2, #45	; 0x2d
 8003270:	425b      	negs	r3, r3
 8003272:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003276:	486f      	ldr	r0, [pc, #444]	; (8003434 <_printf_i+0x21c>)
 8003278:	220a      	movs	r2, #10
 800327a:	e039      	b.n	80032f0 <_printf_i+0xd8>
 800327c:	2973      	cmp	r1, #115	; 0x73
 800327e:	f000 809d 	beq.w	80033bc <_printf_i+0x1a4>
 8003282:	d808      	bhi.n	8003296 <_printf_i+0x7e>
 8003284:	296f      	cmp	r1, #111	; 0x6f
 8003286:	d020      	beq.n	80032ca <_printf_i+0xb2>
 8003288:	2970      	cmp	r1, #112	; 0x70
 800328a:	d1dd      	bne.n	8003248 <_printf_i+0x30>
 800328c:	6823      	ldr	r3, [r4, #0]
 800328e:	f043 0320 	orr.w	r3, r3, #32
 8003292:	6023      	str	r3, [r4, #0]
 8003294:	e003      	b.n	800329e <_printf_i+0x86>
 8003296:	2975      	cmp	r1, #117	; 0x75
 8003298:	d017      	beq.n	80032ca <_printf_i+0xb2>
 800329a:	2978      	cmp	r1, #120	; 0x78
 800329c:	d1d4      	bne.n	8003248 <_printf_i+0x30>
 800329e:	2378      	movs	r3, #120	; 0x78
 80032a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80032a4:	4864      	ldr	r0, [pc, #400]	; (8003438 <_printf_i+0x220>)
 80032a6:	e055      	b.n	8003354 <_printf_i+0x13c>
 80032a8:	6813      	ldr	r3, [r2, #0]
 80032aa:	1d19      	adds	r1, r3, #4
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6011      	str	r1, [r2, #0]
 80032b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80032b8:	2301      	movs	r3, #1
 80032ba:	e08c      	b.n	80033d6 <_printf_i+0x1be>
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6011      	str	r1, [r2, #0]
 80032c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80032c4:	bf18      	it	ne
 80032c6:	b21b      	sxthne	r3, r3
 80032c8:	e7cf      	b.n	800326a <_printf_i+0x52>
 80032ca:	6813      	ldr	r3, [r2, #0]
 80032cc:	6825      	ldr	r5, [r4, #0]
 80032ce:	1d18      	adds	r0, r3, #4
 80032d0:	6010      	str	r0, [r2, #0]
 80032d2:	0628      	lsls	r0, r5, #24
 80032d4:	d501      	bpl.n	80032da <_printf_i+0xc2>
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	e002      	b.n	80032e0 <_printf_i+0xc8>
 80032da:	0668      	lsls	r0, r5, #25
 80032dc:	d5fb      	bpl.n	80032d6 <_printf_i+0xbe>
 80032de:	881b      	ldrh	r3, [r3, #0]
 80032e0:	4854      	ldr	r0, [pc, #336]	; (8003434 <_printf_i+0x21c>)
 80032e2:	296f      	cmp	r1, #111	; 0x6f
 80032e4:	bf14      	ite	ne
 80032e6:	220a      	movne	r2, #10
 80032e8:	2208      	moveq	r2, #8
 80032ea:	2100      	movs	r1, #0
 80032ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80032f0:	6865      	ldr	r5, [r4, #4]
 80032f2:	60a5      	str	r5, [r4, #8]
 80032f4:	2d00      	cmp	r5, #0
 80032f6:	f2c0 8095 	blt.w	8003424 <_printf_i+0x20c>
 80032fa:	6821      	ldr	r1, [r4, #0]
 80032fc:	f021 0104 	bic.w	r1, r1, #4
 8003300:	6021      	str	r1, [r4, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d13d      	bne.n	8003382 <_printf_i+0x16a>
 8003306:	2d00      	cmp	r5, #0
 8003308:	f040 808e 	bne.w	8003428 <_printf_i+0x210>
 800330c:	4665      	mov	r5, ip
 800330e:	2a08      	cmp	r2, #8
 8003310:	d10b      	bne.n	800332a <_printf_i+0x112>
 8003312:	6823      	ldr	r3, [r4, #0]
 8003314:	07db      	lsls	r3, r3, #31
 8003316:	d508      	bpl.n	800332a <_printf_i+0x112>
 8003318:	6923      	ldr	r3, [r4, #16]
 800331a:	6862      	ldr	r2, [r4, #4]
 800331c:	429a      	cmp	r2, r3
 800331e:	bfde      	ittt	le
 8003320:	2330      	movle	r3, #48	; 0x30
 8003322:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003326:	f105 35ff 	addle.w	r5, r5, #4294967295
 800332a:	ebac 0305 	sub.w	r3, ip, r5
 800332e:	6123      	str	r3, [r4, #16]
 8003330:	f8cd 8000 	str.w	r8, [sp]
 8003334:	463b      	mov	r3, r7
 8003336:	aa03      	add	r2, sp, #12
 8003338:	4621      	mov	r1, r4
 800333a:	4630      	mov	r0, r6
 800333c:	f7ff fef6 	bl	800312c <_printf_common>
 8003340:	3001      	adds	r0, #1
 8003342:	d14d      	bne.n	80033e0 <_printf_i+0x1c8>
 8003344:	f04f 30ff 	mov.w	r0, #4294967295
 8003348:	b005      	add	sp, #20
 800334a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800334e:	4839      	ldr	r0, [pc, #228]	; (8003434 <_printf_i+0x21c>)
 8003350:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003354:	6813      	ldr	r3, [r2, #0]
 8003356:	6821      	ldr	r1, [r4, #0]
 8003358:	1d1d      	adds	r5, r3, #4
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6015      	str	r5, [r2, #0]
 800335e:	060a      	lsls	r2, r1, #24
 8003360:	d50b      	bpl.n	800337a <_printf_i+0x162>
 8003362:	07ca      	lsls	r2, r1, #31
 8003364:	bf44      	itt	mi
 8003366:	f041 0120 	orrmi.w	r1, r1, #32
 800336a:	6021      	strmi	r1, [r4, #0]
 800336c:	b91b      	cbnz	r3, 8003376 <_printf_i+0x15e>
 800336e:	6822      	ldr	r2, [r4, #0]
 8003370:	f022 0220 	bic.w	r2, r2, #32
 8003374:	6022      	str	r2, [r4, #0]
 8003376:	2210      	movs	r2, #16
 8003378:	e7b7      	b.n	80032ea <_printf_i+0xd2>
 800337a:	064d      	lsls	r5, r1, #25
 800337c:	bf48      	it	mi
 800337e:	b29b      	uxthmi	r3, r3
 8003380:	e7ef      	b.n	8003362 <_printf_i+0x14a>
 8003382:	4665      	mov	r5, ip
 8003384:	fbb3 f1f2 	udiv	r1, r3, r2
 8003388:	fb02 3311 	mls	r3, r2, r1, r3
 800338c:	5cc3      	ldrb	r3, [r0, r3]
 800338e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003392:	460b      	mov	r3, r1
 8003394:	2900      	cmp	r1, #0
 8003396:	d1f5      	bne.n	8003384 <_printf_i+0x16c>
 8003398:	e7b9      	b.n	800330e <_printf_i+0xf6>
 800339a:	6813      	ldr	r3, [r2, #0]
 800339c:	6825      	ldr	r5, [r4, #0]
 800339e:	6961      	ldr	r1, [r4, #20]
 80033a0:	1d18      	adds	r0, r3, #4
 80033a2:	6010      	str	r0, [r2, #0]
 80033a4:	0628      	lsls	r0, r5, #24
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	d501      	bpl.n	80033ae <_printf_i+0x196>
 80033aa:	6019      	str	r1, [r3, #0]
 80033ac:	e002      	b.n	80033b4 <_printf_i+0x19c>
 80033ae:	066a      	lsls	r2, r5, #25
 80033b0:	d5fb      	bpl.n	80033aa <_printf_i+0x192>
 80033b2:	8019      	strh	r1, [r3, #0]
 80033b4:	2300      	movs	r3, #0
 80033b6:	6123      	str	r3, [r4, #16]
 80033b8:	4665      	mov	r5, ip
 80033ba:	e7b9      	b.n	8003330 <_printf_i+0x118>
 80033bc:	6813      	ldr	r3, [r2, #0]
 80033be:	1d19      	adds	r1, r3, #4
 80033c0:	6011      	str	r1, [r2, #0]
 80033c2:	681d      	ldr	r5, [r3, #0]
 80033c4:	6862      	ldr	r2, [r4, #4]
 80033c6:	2100      	movs	r1, #0
 80033c8:	4628      	mov	r0, r5
 80033ca:	f7fc ff41 	bl	8000250 <memchr>
 80033ce:	b108      	cbz	r0, 80033d4 <_printf_i+0x1bc>
 80033d0:	1b40      	subs	r0, r0, r5
 80033d2:	6060      	str	r0, [r4, #4]
 80033d4:	6863      	ldr	r3, [r4, #4]
 80033d6:	6123      	str	r3, [r4, #16]
 80033d8:	2300      	movs	r3, #0
 80033da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033de:	e7a7      	b.n	8003330 <_printf_i+0x118>
 80033e0:	6923      	ldr	r3, [r4, #16]
 80033e2:	462a      	mov	r2, r5
 80033e4:	4639      	mov	r1, r7
 80033e6:	4630      	mov	r0, r6
 80033e8:	47c0      	blx	r8
 80033ea:	3001      	adds	r0, #1
 80033ec:	d0aa      	beq.n	8003344 <_printf_i+0x12c>
 80033ee:	6823      	ldr	r3, [r4, #0]
 80033f0:	079b      	lsls	r3, r3, #30
 80033f2:	d413      	bmi.n	800341c <_printf_i+0x204>
 80033f4:	68e0      	ldr	r0, [r4, #12]
 80033f6:	9b03      	ldr	r3, [sp, #12]
 80033f8:	4298      	cmp	r0, r3
 80033fa:	bfb8      	it	lt
 80033fc:	4618      	movlt	r0, r3
 80033fe:	e7a3      	b.n	8003348 <_printf_i+0x130>
 8003400:	2301      	movs	r3, #1
 8003402:	464a      	mov	r2, r9
 8003404:	4639      	mov	r1, r7
 8003406:	4630      	mov	r0, r6
 8003408:	47c0      	blx	r8
 800340a:	3001      	adds	r0, #1
 800340c:	d09a      	beq.n	8003344 <_printf_i+0x12c>
 800340e:	3501      	adds	r5, #1
 8003410:	68e3      	ldr	r3, [r4, #12]
 8003412:	9a03      	ldr	r2, [sp, #12]
 8003414:	1a9b      	subs	r3, r3, r2
 8003416:	42ab      	cmp	r3, r5
 8003418:	dcf2      	bgt.n	8003400 <_printf_i+0x1e8>
 800341a:	e7eb      	b.n	80033f4 <_printf_i+0x1dc>
 800341c:	2500      	movs	r5, #0
 800341e:	f104 0919 	add.w	r9, r4, #25
 8003422:	e7f5      	b.n	8003410 <_printf_i+0x1f8>
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1ac      	bne.n	8003382 <_printf_i+0x16a>
 8003428:	7803      	ldrb	r3, [r0, #0]
 800342a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800342e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003432:	e76c      	b.n	800330e <_printf_i+0xf6>
 8003434:	080036d5 	.word	0x080036d5
 8003438:	080036e6 	.word	0x080036e6

0800343c <memcpy>:
 800343c:	b510      	push	{r4, lr}
 800343e:	1e43      	subs	r3, r0, #1
 8003440:	440a      	add	r2, r1
 8003442:	4291      	cmp	r1, r2
 8003444:	d100      	bne.n	8003448 <memcpy+0xc>
 8003446:	bd10      	pop	{r4, pc}
 8003448:	f811 4b01 	ldrb.w	r4, [r1], #1
 800344c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003450:	e7f7      	b.n	8003442 <memcpy+0x6>

08003452 <memmove>:
 8003452:	4288      	cmp	r0, r1
 8003454:	b510      	push	{r4, lr}
 8003456:	eb01 0302 	add.w	r3, r1, r2
 800345a:	d807      	bhi.n	800346c <memmove+0x1a>
 800345c:	1e42      	subs	r2, r0, #1
 800345e:	4299      	cmp	r1, r3
 8003460:	d00a      	beq.n	8003478 <memmove+0x26>
 8003462:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003466:	f802 4f01 	strb.w	r4, [r2, #1]!
 800346a:	e7f8      	b.n	800345e <memmove+0xc>
 800346c:	4283      	cmp	r3, r0
 800346e:	d9f5      	bls.n	800345c <memmove+0xa>
 8003470:	1881      	adds	r1, r0, r2
 8003472:	1ad2      	subs	r2, r2, r3
 8003474:	42d3      	cmn	r3, r2
 8003476:	d100      	bne.n	800347a <memmove+0x28>
 8003478:	bd10      	pop	{r4, pc}
 800347a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800347e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003482:	e7f7      	b.n	8003474 <memmove+0x22>

08003484 <_free_r>:
 8003484:	b538      	push	{r3, r4, r5, lr}
 8003486:	4605      	mov	r5, r0
 8003488:	2900      	cmp	r1, #0
 800348a:	d045      	beq.n	8003518 <_free_r+0x94>
 800348c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003490:	1f0c      	subs	r4, r1, #4
 8003492:	2b00      	cmp	r3, #0
 8003494:	bfb8      	it	lt
 8003496:	18e4      	addlt	r4, r4, r3
 8003498:	f000 f8d2 	bl	8003640 <__malloc_lock>
 800349c:	4a1f      	ldr	r2, [pc, #124]	; (800351c <_free_r+0x98>)
 800349e:	6813      	ldr	r3, [r2, #0]
 80034a0:	4610      	mov	r0, r2
 80034a2:	b933      	cbnz	r3, 80034b2 <_free_r+0x2e>
 80034a4:	6063      	str	r3, [r4, #4]
 80034a6:	6014      	str	r4, [r2, #0]
 80034a8:	4628      	mov	r0, r5
 80034aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80034ae:	f000 b8c8 	b.w	8003642 <__malloc_unlock>
 80034b2:	42a3      	cmp	r3, r4
 80034b4:	d90c      	bls.n	80034d0 <_free_r+0x4c>
 80034b6:	6821      	ldr	r1, [r4, #0]
 80034b8:	1862      	adds	r2, r4, r1
 80034ba:	4293      	cmp	r3, r2
 80034bc:	bf04      	itt	eq
 80034be:	681a      	ldreq	r2, [r3, #0]
 80034c0:	685b      	ldreq	r3, [r3, #4]
 80034c2:	6063      	str	r3, [r4, #4]
 80034c4:	bf04      	itt	eq
 80034c6:	1852      	addeq	r2, r2, r1
 80034c8:	6022      	streq	r2, [r4, #0]
 80034ca:	6004      	str	r4, [r0, #0]
 80034cc:	e7ec      	b.n	80034a8 <_free_r+0x24>
 80034ce:	4613      	mov	r3, r2
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	b10a      	cbz	r2, 80034d8 <_free_r+0x54>
 80034d4:	42a2      	cmp	r2, r4
 80034d6:	d9fa      	bls.n	80034ce <_free_r+0x4a>
 80034d8:	6819      	ldr	r1, [r3, #0]
 80034da:	1858      	adds	r0, r3, r1
 80034dc:	42a0      	cmp	r0, r4
 80034de:	d10b      	bne.n	80034f8 <_free_r+0x74>
 80034e0:	6820      	ldr	r0, [r4, #0]
 80034e2:	4401      	add	r1, r0
 80034e4:	1858      	adds	r0, r3, r1
 80034e6:	4282      	cmp	r2, r0
 80034e8:	6019      	str	r1, [r3, #0]
 80034ea:	d1dd      	bne.n	80034a8 <_free_r+0x24>
 80034ec:	6810      	ldr	r0, [r2, #0]
 80034ee:	6852      	ldr	r2, [r2, #4]
 80034f0:	605a      	str	r2, [r3, #4]
 80034f2:	4401      	add	r1, r0
 80034f4:	6019      	str	r1, [r3, #0]
 80034f6:	e7d7      	b.n	80034a8 <_free_r+0x24>
 80034f8:	d902      	bls.n	8003500 <_free_r+0x7c>
 80034fa:	230c      	movs	r3, #12
 80034fc:	602b      	str	r3, [r5, #0]
 80034fe:	e7d3      	b.n	80034a8 <_free_r+0x24>
 8003500:	6820      	ldr	r0, [r4, #0]
 8003502:	1821      	adds	r1, r4, r0
 8003504:	428a      	cmp	r2, r1
 8003506:	bf04      	itt	eq
 8003508:	6811      	ldreq	r1, [r2, #0]
 800350a:	6852      	ldreq	r2, [r2, #4]
 800350c:	6062      	str	r2, [r4, #4]
 800350e:	bf04      	itt	eq
 8003510:	1809      	addeq	r1, r1, r0
 8003512:	6021      	streq	r1, [r4, #0]
 8003514:	605c      	str	r4, [r3, #4]
 8003516:	e7c7      	b.n	80034a8 <_free_r+0x24>
 8003518:	bd38      	pop	{r3, r4, r5, pc}
 800351a:	bf00      	nop
 800351c:	20000090 	.word	0x20000090

08003520 <_malloc_r>:
 8003520:	b570      	push	{r4, r5, r6, lr}
 8003522:	1ccd      	adds	r5, r1, #3
 8003524:	f025 0503 	bic.w	r5, r5, #3
 8003528:	3508      	adds	r5, #8
 800352a:	2d0c      	cmp	r5, #12
 800352c:	bf38      	it	cc
 800352e:	250c      	movcc	r5, #12
 8003530:	2d00      	cmp	r5, #0
 8003532:	4606      	mov	r6, r0
 8003534:	db01      	blt.n	800353a <_malloc_r+0x1a>
 8003536:	42a9      	cmp	r1, r5
 8003538:	d903      	bls.n	8003542 <_malloc_r+0x22>
 800353a:	230c      	movs	r3, #12
 800353c:	6033      	str	r3, [r6, #0]
 800353e:	2000      	movs	r0, #0
 8003540:	bd70      	pop	{r4, r5, r6, pc}
 8003542:	f000 f87d 	bl	8003640 <__malloc_lock>
 8003546:	4a21      	ldr	r2, [pc, #132]	; (80035cc <_malloc_r+0xac>)
 8003548:	6814      	ldr	r4, [r2, #0]
 800354a:	4621      	mov	r1, r4
 800354c:	b991      	cbnz	r1, 8003574 <_malloc_r+0x54>
 800354e:	4c20      	ldr	r4, [pc, #128]	; (80035d0 <_malloc_r+0xb0>)
 8003550:	6823      	ldr	r3, [r4, #0]
 8003552:	b91b      	cbnz	r3, 800355c <_malloc_r+0x3c>
 8003554:	4630      	mov	r0, r6
 8003556:	f000 f863 	bl	8003620 <_sbrk_r>
 800355a:	6020      	str	r0, [r4, #0]
 800355c:	4629      	mov	r1, r5
 800355e:	4630      	mov	r0, r6
 8003560:	f000 f85e 	bl	8003620 <_sbrk_r>
 8003564:	1c43      	adds	r3, r0, #1
 8003566:	d124      	bne.n	80035b2 <_malloc_r+0x92>
 8003568:	230c      	movs	r3, #12
 800356a:	6033      	str	r3, [r6, #0]
 800356c:	4630      	mov	r0, r6
 800356e:	f000 f868 	bl	8003642 <__malloc_unlock>
 8003572:	e7e4      	b.n	800353e <_malloc_r+0x1e>
 8003574:	680b      	ldr	r3, [r1, #0]
 8003576:	1b5b      	subs	r3, r3, r5
 8003578:	d418      	bmi.n	80035ac <_malloc_r+0x8c>
 800357a:	2b0b      	cmp	r3, #11
 800357c:	d90f      	bls.n	800359e <_malloc_r+0x7e>
 800357e:	600b      	str	r3, [r1, #0]
 8003580:	50cd      	str	r5, [r1, r3]
 8003582:	18cc      	adds	r4, r1, r3
 8003584:	4630      	mov	r0, r6
 8003586:	f000 f85c 	bl	8003642 <__malloc_unlock>
 800358a:	f104 000b 	add.w	r0, r4, #11
 800358e:	1d23      	adds	r3, r4, #4
 8003590:	f020 0007 	bic.w	r0, r0, #7
 8003594:	1ac3      	subs	r3, r0, r3
 8003596:	d0d3      	beq.n	8003540 <_malloc_r+0x20>
 8003598:	425a      	negs	r2, r3
 800359a:	50e2      	str	r2, [r4, r3]
 800359c:	e7d0      	b.n	8003540 <_malloc_r+0x20>
 800359e:	428c      	cmp	r4, r1
 80035a0:	684b      	ldr	r3, [r1, #4]
 80035a2:	bf16      	itet	ne
 80035a4:	6063      	strne	r3, [r4, #4]
 80035a6:	6013      	streq	r3, [r2, #0]
 80035a8:	460c      	movne	r4, r1
 80035aa:	e7eb      	b.n	8003584 <_malloc_r+0x64>
 80035ac:	460c      	mov	r4, r1
 80035ae:	6849      	ldr	r1, [r1, #4]
 80035b0:	e7cc      	b.n	800354c <_malloc_r+0x2c>
 80035b2:	1cc4      	adds	r4, r0, #3
 80035b4:	f024 0403 	bic.w	r4, r4, #3
 80035b8:	42a0      	cmp	r0, r4
 80035ba:	d005      	beq.n	80035c8 <_malloc_r+0xa8>
 80035bc:	1a21      	subs	r1, r4, r0
 80035be:	4630      	mov	r0, r6
 80035c0:	f000 f82e 	bl	8003620 <_sbrk_r>
 80035c4:	3001      	adds	r0, #1
 80035c6:	d0cf      	beq.n	8003568 <_malloc_r+0x48>
 80035c8:	6025      	str	r5, [r4, #0]
 80035ca:	e7db      	b.n	8003584 <_malloc_r+0x64>
 80035cc:	20000090 	.word	0x20000090
 80035d0:	20000094 	.word	0x20000094

080035d4 <_realloc_r>:
 80035d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035d6:	4607      	mov	r7, r0
 80035d8:	4614      	mov	r4, r2
 80035da:	460e      	mov	r6, r1
 80035dc:	b921      	cbnz	r1, 80035e8 <_realloc_r+0x14>
 80035de:	4611      	mov	r1, r2
 80035e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80035e4:	f7ff bf9c 	b.w	8003520 <_malloc_r>
 80035e8:	b922      	cbnz	r2, 80035f4 <_realloc_r+0x20>
 80035ea:	f7ff ff4b 	bl	8003484 <_free_r>
 80035ee:	4625      	mov	r5, r4
 80035f0:	4628      	mov	r0, r5
 80035f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035f4:	f000 f826 	bl	8003644 <_malloc_usable_size_r>
 80035f8:	42a0      	cmp	r0, r4
 80035fa:	d20f      	bcs.n	800361c <_realloc_r+0x48>
 80035fc:	4621      	mov	r1, r4
 80035fe:	4638      	mov	r0, r7
 8003600:	f7ff ff8e 	bl	8003520 <_malloc_r>
 8003604:	4605      	mov	r5, r0
 8003606:	2800      	cmp	r0, #0
 8003608:	d0f2      	beq.n	80035f0 <_realloc_r+0x1c>
 800360a:	4631      	mov	r1, r6
 800360c:	4622      	mov	r2, r4
 800360e:	f7ff ff15 	bl	800343c <memcpy>
 8003612:	4631      	mov	r1, r6
 8003614:	4638      	mov	r0, r7
 8003616:	f7ff ff35 	bl	8003484 <_free_r>
 800361a:	e7e9      	b.n	80035f0 <_realloc_r+0x1c>
 800361c:	4635      	mov	r5, r6
 800361e:	e7e7      	b.n	80035f0 <_realloc_r+0x1c>

08003620 <_sbrk_r>:
 8003620:	b538      	push	{r3, r4, r5, lr}
 8003622:	4c06      	ldr	r4, [pc, #24]	; (800363c <_sbrk_r+0x1c>)
 8003624:	2300      	movs	r3, #0
 8003626:	4605      	mov	r5, r0
 8003628:	4608      	mov	r0, r1
 800362a:	6023      	str	r3, [r4, #0]
 800362c:	f7fd fa1a 	bl	8000a64 <_sbrk>
 8003630:	1c43      	adds	r3, r0, #1
 8003632:	d102      	bne.n	800363a <_sbrk_r+0x1a>
 8003634:	6823      	ldr	r3, [r4, #0]
 8003636:	b103      	cbz	r3, 800363a <_sbrk_r+0x1a>
 8003638:	602b      	str	r3, [r5, #0]
 800363a:	bd38      	pop	{r3, r4, r5, pc}
 800363c:	2000011c 	.word	0x2000011c

08003640 <__malloc_lock>:
 8003640:	4770      	bx	lr

08003642 <__malloc_unlock>:
 8003642:	4770      	bx	lr

08003644 <_malloc_usable_size_r>:
 8003644:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003648:	1f18      	subs	r0, r3, #4
 800364a:	2b00      	cmp	r3, #0
 800364c:	bfbc      	itt	lt
 800364e:	580b      	ldrlt	r3, [r1, r0]
 8003650:	18c0      	addlt	r0, r0, r3
 8003652:	4770      	bx	lr

08003654 <_init>:
 8003654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003656:	bf00      	nop
 8003658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800365a:	bc08      	pop	{r3}
 800365c:	469e      	mov	lr, r3
 800365e:	4770      	bx	lr

08003660 <_fini>:
 8003660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003662:	bf00      	nop
 8003664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003666:	bc08      	pop	{r3}
 8003668:	469e      	mov	lr, r3
 800366a:	4770      	bx	lr
