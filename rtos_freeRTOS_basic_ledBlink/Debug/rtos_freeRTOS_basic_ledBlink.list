
RTOS_freeRTOS_Basic_LEDBlink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a38  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004c38  08004c38  00014c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ccc  08004ccc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004ccc  08004ccc  00014ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cd4  08004cd4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cd4  08004cd4  00014cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cd8  08004cd8  00014cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004cdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049bc  20000010  08004cec  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200049cc  08004cec  000249cc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014011  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aa4  00000000  00000000  0003404f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  00036af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff0  00000000  00000000  00037c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000295a  00000000  00000000  00038c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a46  00000000  00000000  0003b55a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe9b5  00000000  00000000  0004dfa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014c955  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004794  00000000  00000000  0014c9a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000010 	.word	0x20000010
 800021c:	00000000 	.word	0x00000000
 8000220:	08004c20 	.word	0x08004c20

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000014 	.word	0x20000014
 800023c:	08004c20 	.word	0x08004c20

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000548:	f000 f9db 	bl	8000902 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800054c:	f000 f824 	bl	8000598 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000550:	f000 f87e 	bl	8000650 <MX_GPIO_Init>

  /* Init scheduler */
  osKernelInitialize();
 8000554:	f001 fc44 	bl	8001de0 <osKernelInitialize>

  /* Create the thread(s) ---------------*/
  /* creation of blinkLEDBlue */
  blinkLEDBlueHandle = osThreadNew(StartBlinkLEDBlue, NULL, &blinkLEDBlue_attributes);
 8000558:	4a09      	ldr	r2, [pc, #36]	; (8000580 <main+0x3c>)
 800055a:	2100      	movs	r1, #0
 800055c:	4809      	ldr	r0, [pc, #36]	; (8000584 <main+0x40>)
 800055e:	f001 fca9 	bl	8001eb4 <osThreadNew>
 8000562:	4603      	mov	r3, r0
 8000564:	4a08      	ldr	r2, [pc, #32]	; (8000588 <main+0x44>)
 8000566:	6013      	str	r3, [r2, #0]
  /* creation of blinkLEDRed */
  blinkLEDRedHandle = osThreadNew(StartBlinkLEDRed, NULL, &blinkLEDRed_attributes);
 8000568:	4a08      	ldr	r2, [pc, #32]	; (800058c <main+0x48>)
 800056a:	2100      	movs	r1, #0
 800056c:	4808      	ldr	r0, [pc, #32]	; (8000590 <main+0x4c>)
 800056e:	f001 fca1 	bl	8001eb4 <osThreadNew>
 8000572:	4603      	mov	r3, r0
 8000574:	4a07      	ldr	r2, [pc, #28]	; (8000594 <main+0x50>)
 8000576:	6013      	str	r3, [r2, #0]

  /* Start scheduler */
  osKernelStart();
 8000578:	f001 fc66 	bl	8001e48 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  while (1)
 800057c:	e7fe      	b.n	800057c <main+0x38>
 800057e:	bf00      	nop
 8000580:	08004c6c 	.word	0x08004c6c
 8000584:	080006b5 	.word	0x080006b5
 8000588:	2000002c 	.word	0x2000002c
 800058c:	08004c90 	.word	0x08004c90
 8000590:	080006ed 	.word	0x080006ed
 8000594:	20000030 	.word	0x20000030

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	; 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 031c 	add.w	r3, r7, #28
 80005a2:	2234      	movs	r2, #52	; 0x34
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f004 fb32 	bl	8004c10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 0308 	add.w	r3, r7, #8
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005bc:	4b22      	ldr	r3, [pc, #136]	; (8000648 <SystemClock_Config+0xb0>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	4a21      	ldr	r2, [pc, #132]	; (8000648 <SystemClock_Config+0xb0>)
 80005c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c6:	6413      	str	r3, [r2, #64]	; 0x40
 80005c8:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <SystemClock_Config+0xb0>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005d4:	4b1d      	ldr	r3, [pc, #116]	; (800064c <SystemClock_Config+0xb4>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005dc:	4a1b      	ldr	r2, [pc, #108]	; (800064c <SystemClock_Config+0xb4>)
 80005de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4b19      	ldr	r3, [pc, #100]	; (800064c <SystemClock_Config+0xb4>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ec:	603b      	str	r3, [r7, #0]
 80005ee:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f0:	2302      	movs	r3, #2
 80005f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f4:	2301      	movs	r3, #1
 80005f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f8:	2310      	movs	r3, #16
 80005fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005fc:	2300      	movs	r3, #0
 80005fe:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000600:	f107 031c 	add.w	r3, r7, #28
 8000604:	4618      	mov	r0, r3
 8000606:	f000 fc51 	bl	8000eac <HAL_RCC_OscConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000610:	f000 f899 	bl	8000746 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000614:	230f      	movs	r3, #15
 8000616:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000618:	2300      	movs	r3, #0
 800061a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000628:	f107 0308 	add.w	r3, r7, #8
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f000 feea 	bl	8001408 <HAL_RCC_ClockConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800063a:	f000 f884 	bl	8000746 <Error_Handler>
  }
}
 800063e:	bf00      	nop
 8000640:	3750      	adds	r7, #80	; 0x50
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800
 800064c:	40007000 	.word	0x40007000

08000650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000664:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_GPIO_Init+0x5c>)
 8000666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000668:	4a10      	ldr	r2, [pc, #64]	; (80006ac <MX_GPIO_Init+0x5c>)
 800066a:	f043 0302 	orr.w	r3, r3, #2
 800066e:	6313      	str	r3, [r2, #48]	; 0x30
 8000670:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <MX_GPIO_Init+0x5c>)
 8000672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000674:	f003 0302 	and.w	r3, r3, #2
 8000678:	603b      	str	r3, [r7, #0]
 800067a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 800067c:	2200      	movs	r2, #0
 800067e:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000682:	480b      	ldr	r0, [pc, #44]	; (80006b0 <MX_GPIO_Init+0x60>)
 8000684:	f000 fbf8 	bl	8000e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 8000688:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800068c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068e:	2301      	movs	r3, #1
 8000690:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000696:	2300      	movs	r3, #0
 8000698:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	4619      	mov	r1, r3
 800069e:	4804      	ldr	r0, [pc, #16]	; (80006b0 <MX_GPIO_Init+0x60>)
 80006a0:	f000 fa3e 	bl	8000b20 <HAL_GPIO_Init>

}
 80006a4:	bf00      	nop
 80006a6:	3718      	adds	r7, #24
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40020400 	.word	0x40020400

080006b4 <StartBlinkLEDBlue>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlinkLEDBlue */
void StartBlinkLEDBlue(void *argument)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	GPIOB->BSRR |= (1<<7); // set pin PB7 in register GPIOx_BSRR
 80006bc:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <StartBlinkLEDBlue+0x34>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	4a09      	ldr	r2, [pc, #36]	; (80006e8 <StartBlinkLEDBlue+0x34>)
 80006c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c6:	6193      	str	r3, [r2, #24]
    osDelay(500);
 80006c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006cc:	f001 fcd8 	bl	8002080 <osDelay>
    GPIOB->BSRR |= ((1<<7)<<16); // reset pin PB7 in register GPIOx_BSRR
 80006d0:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <StartBlinkLEDBlue+0x34>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a04      	ldr	r2, [pc, #16]	; (80006e8 <StartBlinkLEDBlue+0x34>)
 80006d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80006da:	6193      	str	r3, [r2, #24]
    osDelay(500);
 80006dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006e0:	f001 fcce 	bl	8002080 <osDelay>
	GPIOB->BSRR |= (1<<7); // set pin PB7 in register GPIOx_BSRR
 80006e4:	e7ea      	b.n	80006bc <StartBlinkLEDBlue+0x8>
 80006e6:	bf00      	nop
 80006e8:	40020400 	.word	0x40020400

080006ec <StartBlinkLEDRed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinkLEDRed */
void StartBlinkLEDRed(void *argument)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkLEDRed */
  /* Infinite loop */
  for(;;)
  {
	GPIOB->BSRR |= (1<<14); // set pin PB14 in register GPIOx_BSRR
 80006f4:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <StartBlinkLEDRed+0x38>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	4a0a      	ldr	r2, [pc, #40]	; (8000724 <StartBlinkLEDRed+0x38>)
 80006fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006fe:	6193      	str	r3, [r2, #24]
    osDelay(600);
 8000700:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000704:	f001 fcbc 	bl	8002080 <osDelay>
    GPIOB->BSRR |= ((1<<14)<<16); // reset pin PB14 in register GPIOx_BSRR
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <StartBlinkLEDRed+0x38>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	4a05      	ldr	r2, [pc, #20]	; (8000724 <StartBlinkLEDRed+0x38>)
 800070e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000712:	6193      	str	r3, [r2, #24]
    osDelay(600);
 8000714:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000718:	f001 fcb2 	bl	8002080 <osDelay>
    osThreadTerminate(NULL);
 800071c:	2000      	movs	r0, #0
 800071e:	f001 fc6f 	bl	8002000 <osThreadTerminate>
	GPIOB->BSRR |= (1<<14); // set pin PB14 in register GPIOx_BSRR
 8000722:	e7e7      	b.n	80006f4 <StartBlinkLEDRed+0x8>
 8000724:	40020400 	.word	0x40020400

08000728 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000738:	d101      	bne.n	800073e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800073a:	f000 f8ef 	bl	800091c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800074a:	b672      	cpsid	i
}
 800074c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800074e:	e7fe      	b.n	800074e <Error_Handler+0x8>

08000750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <HAL_MspInit+0x4c>)
 8000758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075a:	4a10      	ldr	r2, [pc, #64]	; (800079c <HAL_MspInit+0x4c>)
 800075c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000760:	6413      	str	r3, [r2, #64]	; 0x40
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <HAL_MspInit+0x4c>)
 8000764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <HAL_MspInit+0x4c>)
 8000770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000772:	4a0a      	ldr	r2, [pc, #40]	; (800079c <HAL_MspInit+0x4c>)
 8000774:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000778:	6453      	str	r3, [r2, #68]	; 0x44
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <HAL_MspInit+0x4c>)
 800077c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	210f      	movs	r1, #15
 800078a:	f06f 0001 	mvn.w	r0, #1
 800078e:	f000 f99d 	bl	8000acc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800

080007a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08c      	sub	sp, #48	; 0x30
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 80007b0:	2200      	movs	r2, #0
 80007b2:	6879      	ldr	r1, [r7, #4]
 80007b4:	201c      	movs	r0, #28
 80007b6:	f000 f989 	bl	8000acc <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007ba:	201c      	movs	r0, #28
 80007bc:	f000 f9a2 	bl	8000b04 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80007c0:	4b1f      	ldr	r3, [pc, #124]	; (8000840 <HAL_InitTick+0xa0>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c4:	4a1e      	ldr	r2, [pc, #120]	; (8000840 <HAL_InitTick+0xa0>)
 80007c6:	f043 0301 	orr.w	r3, r3, #1
 80007ca:	6413      	str	r3, [r2, #64]	; 0x40
 80007cc:	4b1c      	ldr	r3, [pc, #112]	; (8000840 <HAL_InitTick+0xa0>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d0:	f003 0301 	and.w	r3, r3, #1
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007d8:	f107 0210 	add.w	r2, r7, #16
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4611      	mov	r1, r2
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 ffe2 	bl	80017ac <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007e8:	f000 ffcc 	bl	8001784 <HAL_RCC_GetPCLK1Freq>
 80007ec:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007f0:	4a14      	ldr	r2, [pc, #80]	; (8000844 <HAL_InitTick+0xa4>)
 80007f2:	fba2 2303 	umull	r2, r3, r2, r3
 80007f6:	0c9b      	lsrs	r3, r3, #18
 80007f8:	3b01      	subs	r3, #1
 80007fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <HAL_InitTick+0xa8>)
 80007fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000802:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000804:	4b10      	ldr	r3, [pc, #64]	; (8000848 <HAL_InitTick+0xa8>)
 8000806:	f240 32e7 	movw	r2, #999	; 0x3e7
 800080a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800080c:	4a0e      	ldr	r2, [pc, #56]	; (8000848 <HAL_InitTick+0xa8>)
 800080e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000810:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000812:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <HAL_InitTick+0xa8>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000818:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <HAL_InitTick+0xa8>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800081e:	480a      	ldr	r0, [pc, #40]	; (8000848 <HAL_InitTick+0xa8>)
 8000820:	f000 fff6 	bl	8001810 <HAL_TIM_Base_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d104      	bne.n	8000834 <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800082a:	4807      	ldr	r0, [pc, #28]	; (8000848 <HAL_InitTick+0xa8>)
 800082c:	f001 f852 	bl	80018d4 <HAL_TIM_Base_Start_IT>
 8000830:	4603      	mov	r3, r0
 8000832:	e000      	b.n	8000836 <HAL_InitTick+0x96>
  }

  /* Return function status */
  return HAL_ERROR;
 8000834:	2301      	movs	r3, #1
}
 8000836:	4618      	mov	r0, r3
 8000838:	3730      	adds	r7, #48	; 0x30
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800
 8000844:	431bde83 	.word	0x431bde83
 8000848:	20000034 	.word	0x20000034

0800084c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <NMI_Handler+0x4>

08000852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000856:	e7fe      	b.n	8000856 <HardFault_Handler+0x4>

08000858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800085c:	e7fe      	b.n	800085c <MemManage_Handler+0x4>

0800085e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <BusFault_Handler+0x4>

08000864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <UsageFault_Handler+0x4>

0800086a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800087c:	4802      	ldr	r0, [pc, #8]	; (8000888 <TIM2_IRQHandler+0x10>)
 800087e:	f001 f8a1 	bl	80019c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000034 	.word	0x20000034

0800088c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <SystemInit+0x20>)
 8000892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000896:	4a05      	ldr	r2, [pc, #20]	; (80008ac <SystemInit+0x20>)
 8000898:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800089c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008b4:	480d      	ldr	r0, [pc, #52]	; (80008ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008b6:	490e      	ldr	r1, [pc, #56]	; (80008f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008b8:	4a0e      	ldr	r2, [pc, #56]	; (80008f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008bc:	e002      	b.n	80008c4 <LoopCopyDataInit>

080008be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c2:	3304      	adds	r3, #4

080008c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c8:	d3f9      	bcc.n	80008be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ca:	4a0b      	ldr	r2, [pc, #44]	; (80008f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008cc:	4c0b      	ldr	r4, [pc, #44]	; (80008fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80008ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d0:	e001      	b.n	80008d6 <LoopFillZerobss>

080008d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d4:	3204      	adds	r2, #4

080008d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d8:	d3fb      	bcc.n	80008d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008da:	f7ff ffd7 	bl	800088c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008de:	f004 f965 	bl	8004bac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008e2:	f7ff fe2f 	bl	8000544 <main>
  bx  lr    
 80008e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008e8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80008ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80008f4:	08004cdc 	.word	0x08004cdc
  ldr r2, =_sbss
 80008f8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80008fc:	200049cc 	.word	0x200049cc

08000900 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000900:	e7fe      	b.n	8000900 <ADC_IRQHandler>

08000902 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000906:	2003      	movs	r0, #3
 8000908:	f000 f8d5 	bl	8000ab6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800090c:	200f      	movs	r0, #15
 800090e:	f7ff ff47 	bl	80007a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000912:	f7ff ff1d 	bl	8000750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000916:	2300      	movs	r3, #0
}
 8000918:	4618      	mov	r0, r3
 800091a:	bd80      	pop	{r7, pc}

0800091c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <HAL_IncTick+0x20>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	461a      	mov	r2, r3
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_IncTick+0x24>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4413      	add	r3, r2
 800092c:	4a04      	ldr	r2, [pc, #16]	; (8000940 <HAL_IncTick+0x24>)
 800092e:	6013      	str	r3, [r2, #0]
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	20000008 	.word	0x20000008
 8000940:	20000080 	.word	0x20000080

08000944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  return uwTick;
 8000948:	4b03      	ldr	r3, [pc, #12]	; (8000958 <HAL_GetTick+0x14>)
 800094a:	681b      	ldr	r3, [r3, #0]
}
 800094c:	4618      	mov	r0, r3
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	20000080 	.word	0x20000080

0800095c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f003 0307 	and.w	r3, r3, #7
 800096a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800096c:	4b0b      	ldr	r3, [pc, #44]	; (800099c <__NVIC_SetPriorityGrouping+0x40>)
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000972:	68ba      	ldr	r2, [r7, #8]
 8000974:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000978:	4013      	ands	r3, r2
 800097a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <__NVIC_SetPriorityGrouping+0x44>)
 8000986:	4313      	orrs	r3, r2
 8000988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800098a:	4a04      	ldr	r2, [pc, #16]	; (800099c <__NVIC_SetPriorityGrouping+0x40>)
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	60d3      	str	r3, [r2, #12]
}
 8000990:	bf00      	nop
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	e000ed00 	.word	0xe000ed00
 80009a0:	05fa0000 	.word	0x05fa0000

080009a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009a8:	4b04      	ldr	r3, [pc, #16]	; (80009bc <__NVIC_GetPriorityGrouping+0x18>)
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	0a1b      	lsrs	r3, r3, #8
 80009ae:	f003 0307 	and.w	r3, r3, #7
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	db0b      	blt.n	80009ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	f003 021f 	and.w	r2, r3, #31
 80009d8:	4907      	ldr	r1, [pc, #28]	; (80009f8 <__NVIC_EnableIRQ+0x38>)
 80009da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009de:	095b      	lsrs	r3, r3, #5
 80009e0:	2001      	movs	r0, #1
 80009e2:	fa00 f202 	lsl.w	r2, r0, r2
 80009e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000e100 	.word	0xe000e100

080009fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	6039      	str	r1, [r7, #0]
 8000a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	db0a      	blt.n	8000a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	b2da      	uxtb	r2, r3
 8000a14:	490c      	ldr	r1, [pc, #48]	; (8000a48 <__NVIC_SetPriority+0x4c>)
 8000a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1a:	0112      	lsls	r2, r2, #4
 8000a1c:	b2d2      	uxtb	r2, r2
 8000a1e:	440b      	add	r3, r1
 8000a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a24:	e00a      	b.n	8000a3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	b2da      	uxtb	r2, r3
 8000a2a:	4908      	ldr	r1, [pc, #32]	; (8000a4c <__NVIC_SetPriority+0x50>)
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	f003 030f 	and.w	r3, r3, #15
 8000a32:	3b04      	subs	r3, #4
 8000a34:	0112      	lsls	r2, r2, #4
 8000a36:	b2d2      	uxtb	r2, r2
 8000a38:	440b      	add	r3, r1
 8000a3a:	761a      	strb	r2, [r3, #24]
}
 8000a3c:	bf00      	nop
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	e000e100 	.word	0xe000e100
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b089      	sub	sp, #36	; 0x24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	f003 0307 	and.w	r3, r3, #7
 8000a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a64:	69fb      	ldr	r3, [r7, #28]
 8000a66:	f1c3 0307 	rsb	r3, r3, #7
 8000a6a:	2b04      	cmp	r3, #4
 8000a6c:	bf28      	it	cs
 8000a6e:	2304      	movcs	r3, #4
 8000a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	3304      	adds	r3, #4
 8000a76:	2b06      	cmp	r3, #6
 8000a78:	d902      	bls.n	8000a80 <NVIC_EncodePriority+0x30>
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	3b03      	subs	r3, #3
 8000a7e:	e000      	b.n	8000a82 <NVIC_EncodePriority+0x32>
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a84:	f04f 32ff 	mov.w	r2, #4294967295
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8e:	43da      	mvns	r2, r3
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	401a      	ands	r2, r3
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a98:	f04f 31ff 	mov.w	r1, #4294967295
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa2:	43d9      	mvns	r1, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa8:	4313      	orrs	r3, r2
         );
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3724      	adds	r7, #36	; 0x24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b082      	sub	sp, #8
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f7ff ff4c 	bl	800095c <__NVIC_SetPriorityGrouping>
}
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
 8000ad8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ade:	f7ff ff61 	bl	80009a4 <__NVIC_GetPriorityGrouping>
 8000ae2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	68b9      	ldr	r1, [r7, #8]
 8000ae8:	6978      	ldr	r0, [r7, #20]
 8000aea:	f7ff ffb1 	bl	8000a50 <NVIC_EncodePriority>
 8000aee:	4602      	mov	r2, r0
 8000af0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000af4:	4611      	mov	r1, r2
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff ff80 	bl	80009fc <__NVIC_SetPriority>
}
 8000afc:	bf00      	nop
 8000afe:	3718      	adds	r7, #24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff ff54 	bl	80009c0 <__NVIC_EnableIRQ>
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b089      	sub	sp, #36	; 0x24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
 8000b3e:	e175      	b.n	8000e2c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000b40:	2201      	movs	r2, #1
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	697a      	ldr	r2, [r7, #20]
 8000b50:	4013      	ands	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	f040 8164 	bne.w	8000e26 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f003 0303 	and.w	r3, r3, #3
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d005      	beq.n	8000b76 <HAL_GPIO_Init+0x56>
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f003 0303 	and.w	r3, r3, #3
 8000b72:	2b02      	cmp	r3, #2
 8000b74:	d130      	bne.n	8000bd8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	2203      	movs	r2, #3
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	43db      	mvns	r3, r3
 8000b88:	69ba      	ldr	r2, [r7, #24]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	68da      	ldr	r2, [r3, #12]
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	69ba      	ldr	r2, [r7, #24]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	69ba      	ldr	r2, [r7, #24]
 8000ba4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bac:	2201      	movs	r2, #1
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	69ba      	ldr	r2, [r7, #24]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	091b      	lsrs	r3, r3, #4
 8000bc2:	f003 0201 	and.w	r2, r3, #1
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	69ba      	ldr	r2, [r7, #24]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	69ba      	ldr	r2, [r7, #24]
 8000bd6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f003 0303 	and.w	r3, r3, #3
 8000be0:	2b03      	cmp	r3, #3
 8000be2:	d017      	beq.n	8000c14 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	2203      	movs	r2, #3
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	69ba      	ldr	r2, [r7, #24]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	689a      	ldr	r2, [r3, #8]
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	69ba      	ldr	r2, [r7, #24]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f003 0303 	and.w	r3, r3, #3
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	d123      	bne.n	8000c68 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	08da      	lsrs	r2, r3, #3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3208      	adds	r2, #8
 8000c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	f003 0307 	and.w	r3, r3, #7
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	220f      	movs	r2, #15
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	4013      	ands	r3, r2
 8000c42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	691a      	ldr	r2, [r3, #16]
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	08da      	lsrs	r2, r3, #3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	3208      	adds	r2, #8
 8000c62:	69b9      	ldr	r1, [r7, #24]
 8000c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	2203      	movs	r2, #3
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f003 0203 	and.w	r2, r3, #3
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	f000 80be 	beq.w	8000e26 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000caa:	4b66      	ldr	r3, [pc, #408]	; (8000e44 <HAL_GPIO_Init+0x324>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cae:	4a65      	ldr	r2, [pc, #404]	; (8000e44 <HAL_GPIO_Init+0x324>)
 8000cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb6:	4b63      	ldr	r3, [pc, #396]	; (8000e44 <HAL_GPIO_Init+0x324>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000cc2:	4a61      	ldr	r2, [pc, #388]	; (8000e48 <HAL_GPIO_Init+0x328>)
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	089b      	lsrs	r3, r3, #2
 8000cc8:	3302      	adds	r3, #2
 8000cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	f003 0303 	and.w	r3, r3, #3
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	220f      	movs	r2, #15
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a58      	ldr	r2, [pc, #352]	; (8000e4c <HAL_GPIO_Init+0x32c>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d037      	beq.n	8000d5e <HAL_GPIO_Init+0x23e>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a57      	ldr	r2, [pc, #348]	; (8000e50 <HAL_GPIO_Init+0x330>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d031      	beq.n	8000d5a <HAL_GPIO_Init+0x23a>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a56      	ldr	r2, [pc, #344]	; (8000e54 <HAL_GPIO_Init+0x334>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d02b      	beq.n	8000d56 <HAL_GPIO_Init+0x236>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a55      	ldr	r2, [pc, #340]	; (8000e58 <HAL_GPIO_Init+0x338>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d025      	beq.n	8000d52 <HAL_GPIO_Init+0x232>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a54      	ldr	r2, [pc, #336]	; (8000e5c <HAL_GPIO_Init+0x33c>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d01f      	beq.n	8000d4e <HAL_GPIO_Init+0x22e>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a53      	ldr	r2, [pc, #332]	; (8000e60 <HAL_GPIO_Init+0x340>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d019      	beq.n	8000d4a <HAL_GPIO_Init+0x22a>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a52      	ldr	r2, [pc, #328]	; (8000e64 <HAL_GPIO_Init+0x344>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d013      	beq.n	8000d46 <HAL_GPIO_Init+0x226>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a51      	ldr	r2, [pc, #324]	; (8000e68 <HAL_GPIO_Init+0x348>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d00d      	beq.n	8000d42 <HAL_GPIO_Init+0x222>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a50      	ldr	r2, [pc, #320]	; (8000e6c <HAL_GPIO_Init+0x34c>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d007      	beq.n	8000d3e <HAL_GPIO_Init+0x21e>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a4f      	ldr	r2, [pc, #316]	; (8000e70 <HAL_GPIO_Init+0x350>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d101      	bne.n	8000d3a <HAL_GPIO_Init+0x21a>
 8000d36:	2309      	movs	r3, #9
 8000d38:	e012      	b.n	8000d60 <HAL_GPIO_Init+0x240>
 8000d3a:	230a      	movs	r3, #10
 8000d3c:	e010      	b.n	8000d60 <HAL_GPIO_Init+0x240>
 8000d3e:	2308      	movs	r3, #8
 8000d40:	e00e      	b.n	8000d60 <HAL_GPIO_Init+0x240>
 8000d42:	2307      	movs	r3, #7
 8000d44:	e00c      	b.n	8000d60 <HAL_GPIO_Init+0x240>
 8000d46:	2306      	movs	r3, #6
 8000d48:	e00a      	b.n	8000d60 <HAL_GPIO_Init+0x240>
 8000d4a:	2305      	movs	r3, #5
 8000d4c:	e008      	b.n	8000d60 <HAL_GPIO_Init+0x240>
 8000d4e:	2304      	movs	r3, #4
 8000d50:	e006      	b.n	8000d60 <HAL_GPIO_Init+0x240>
 8000d52:	2303      	movs	r3, #3
 8000d54:	e004      	b.n	8000d60 <HAL_GPIO_Init+0x240>
 8000d56:	2302      	movs	r3, #2
 8000d58:	e002      	b.n	8000d60 <HAL_GPIO_Init+0x240>
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e000      	b.n	8000d60 <HAL_GPIO_Init+0x240>
 8000d5e:	2300      	movs	r3, #0
 8000d60:	69fa      	ldr	r2, [r7, #28]
 8000d62:	f002 0203 	and.w	r2, r2, #3
 8000d66:	0092      	lsls	r2, r2, #2
 8000d68:	4093      	lsls	r3, r2
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000d70:	4935      	ldr	r1, [pc, #212]	; (8000e48 <HAL_GPIO_Init+0x328>)
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	089b      	lsrs	r3, r3, #2
 8000d76:	3302      	adds	r3, #2
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d7e:	4b3d      	ldr	r3, [pc, #244]	; (8000e74 <HAL_GPIO_Init+0x354>)
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	43db      	mvns	r3, r3
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d003      	beq.n	8000da2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000da2:	4a34      	ldr	r2, [pc, #208]	; (8000e74 <HAL_GPIO_Init+0x354>)
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000da8:	4b32      	ldr	r3, [pc, #200]	; (8000e74 <HAL_GPIO_Init+0x354>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	43db      	mvns	r3, r3
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	4013      	ands	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d003      	beq.n	8000dcc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000dcc:	4a29      	ldr	r2, [pc, #164]	; (8000e74 <HAL_GPIO_Init+0x354>)
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dd2:	4b28      	ldr	r3, [pc, #160]	; (8000e74 <HAL_GPIO_Init+0x354>)
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	4013      	ands	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d003      	beq.n	8000df6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000df6:	4a1f      	ldr	r2, [pc, #124]	; (8000e74 <HAL_GPIO_Init+0x354>)
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dfc:	4b1d      	ldr	r3, [pc, #116]	; (8000e74 <HAL_GPIO_Init+0x354>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	43db      	mvns	r3, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d003      	beq.n	8000e20 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e20:	4a14      	ldr	r2, [pc, #80]	; (8000e74 <HAL_GPIO_Init+0x354>)
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	61fb      	str	r3, [r7, #28]
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	2b0f      	cmp	r3, #15
 8000e30:	f67f ae86 	bls.w	8000b40 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000e34:	bf00      	nop
 8000e36:	bf00      	nop
 8000e38:	3724      	adds	r7, #36	; 0x24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40013800 	.word	0x40013800
 8000e4c:	40020000 	.word	0x40020000
 8000e50:	40020400 	.word	0x40020400
 8000e54:	40020800 	.word	0x40020800
 8000e58:	40020c00 	.word	0x40020c00
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	40021400 	.word	0x40021400
 8000e64:	40021800 	.word	0x40021800
 8000e68:	40021c00 	.word	0x40021c00
 8000e6c:	40022000 	.word	0x40022000
 8000e70:	40022400 	.word	0x40022400
 8000e74:	40013c00 	.word	0x40013c00

08000e78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	460b      	mov	r3, r1
 8000e82:	807b      	strh	r3, [r7, #2]
 8000e84:	4613      	mov	r3, r2
 8000e86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e88:	787b      	ldrb	r3, [r7, #1]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d003      	beq.n	8000e96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e8e:	887a      	ldrh	r2, [r7, #2]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000e94:	e003      	b.n	8000e9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000e96:	887b      	ldrh	r3, [r7, #2]
 8000e98:	041a      	lsls	r2, r3, #16
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	619a      	str	r2, [r3, #24]
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
	...

08000eac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d101      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e29b      	b.n	80013fa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	f000 8087 	beq.w	8000fde <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ed0:	4b96      	ldr	r3, [pc, #600]	; (800112c <HAL_RCC_OscConfig+0x280>)
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	f003 030c 	and.w	r3, r3, #12
 8000ed8:	2b04      	cmp	r3, #4
 8000eda:	d00c      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000edc:	4b93      	ldr	r3, [pc, #588]	; (800112c <HAL_RCC_OscConfig+0x280>)
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	f003 030c 	and.w	r3, r3, #12
 8000ee4:	2b08      	cmp	r3, #8
 8000ee6:	d112      	bne.n	8000f0e <HAL_RCC_OscConfig+0x62>
 8000ee8:	4b90      	ldr	r3, [pc, #576]	; (800112c <HAL_RCC_OscConfig+0x280>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ef0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ef4:	d10b      	bne.n	8000f0e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ef6:	4b8d      	ldr	r3, [pc, #564]	; (800112c <HAL_RCC_OscConfig+0x280>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d06c      	beq.n	8000fdc <HAL_RCC_OscConfig+0x130>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d168      	bne.n	8000fdc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e275      	b.n	80013fa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f16:	d106      	bne.n	8000f26 <HAL_RCC_OscConfig+0x7a>
 8000f18:	4b84      	ldr	r3, [pc, #528]	; (800112c <HAL_RCC_OscConfig+0x280>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a83      	ldr	r2, [pc, #524]	; (800112c <HAL_RCC_OscConfig+0x280>)
 8000f1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f22:	6013      	str	r3, [r2, #0]
 8000f24:	e02e      	b.n	8000f84 <HAL_RCC_OscConfig+0xd8>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d10c      	bne.n	8000f48 <HAL_RCC_OscConfig+0x9c>
 8000f2e:	4b7f      	ldr	r3, [pc, #508]	; (800112c <HAL_RCC_OscConfig+0x280>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a7e      	ldr	r2, [pc, #504]	; (800112c <HAL_RCC_OscConfig+0x280>)
 8000f34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f38:	6013      	str	r3, [r2, #0]
 8000f3a:	4b7c      	ldr	r3, [pc, #496]	; (800112c <HAL_RCC_OscConfig+0x280>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a7b      	ldr	r2, [pc, #492]	; (800112c <HAL_RCC_OscConfig+0x280>)
 8000f40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f44:	6013      	str	r3, [r2, #0]
 8000f46:	e01d      	b.n	8000f84 <HAL_RCC_OscConfig+0xd8>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f50:	d10c      	bne.n	8000f6c <HAL_RCC_OscConfig+0xc0>
 8000f52:	4b76      	ldr	r3, [pc, #472]	; (800112c <HAL_RCC_OscConfig+0x280>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a75      	ldr	r2, [pc, #468]	; (800112c <HAL_RCC_OscConfig+0x280>)
 8000f58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f5c:	6013      	str	r3, [r2, #0]
 8000f5e:	4b73      	ldr	r3, [pc, #460]	; (800112c <HAL_RCC_OscConfig+0x280>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a72      	ldr	r2, [pc, #456]	; (800112c <HAL_RCC_OscConfig+0x280>)
 8000f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f68:	6013      	str	r3, [r2, #0]
 8000f6a:	e00b      	b.n	8000f84 <HAL_RCC_OscConfig+0xd8>
 8000f6c:	4b6f      	ldr	r3, [pc, #444]	; (800112c <HAL_RCC_OscConfig+0x280>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a6e      	ldr	r2, [pc, #440]	; (800112c <HAL_RCC_OscConfig+0x280>)
 8000f72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f76:	6013      	str	r3, [r2, #0]
 8000f78:	4b6c      	ldr	r3, [pc, #432]	; (800112c <HAL_RCC_OscConfig+0x280>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a6b      	ldr	r2, [pc, #428]	; (800112c <HAL_RCC_OscConfig+0x280>)
 8000f7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d013      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f8c:	f7ff fcda 	bl	8000944 <HAL_GetTick>
 8000f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f92:	e008      	b.n	8000fa6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f94:	f7ff fcd6 	bl	8000944 <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	2b64      	cmp	r3, #100	; 0x64
 8000fa0:	d901      	bls.n	8000fa6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e229      	b.n	80013fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fa6:	4b61      	ldr	r3, [pc, #388]	; (800112c <HAL_RCC_OscConfig+0x280>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d0f0      	beq.n	8000f94 <HAL_RCC_OscConfig+0xe8>
 8000fb2:	e014      	b.n	8000fde <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fb4:	f7ff fcc6 	bl	8000944 <HAL_GetTick>
 8000fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fba:	e008      	b.n	8000fce <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fbc:	f7ff fcc2 	bl	8000944 <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	2b64      	cmp	r3, #100	; 0x64
 8000fc8:	d901      	bls.n	8000fce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e215      	b.n	80013fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fce:	4b57      	ldr	r3, [pc, #348]	; (800112c <HAL_RCC_OscConfig+0x280>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d1f0      	bne.n	8000fbc <HAL_RCC_OscConfig+0x110>
 8000fda:	e000      	b.n	8000fde <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d069      	beq.n	80010be <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fea:	4b50      	ldr	r3, [pc, #320]	; (800112c <HAL_RCC_OscConfig+0x280>)
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	f003 030c 	and.w	r3, r3, #12
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d00b      	beq.n	800100e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ff6:	4b4d      	ldr	r3, [pc, #308]	; (800112c <HAL_RCC_OscConfig+0x280>)
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	f003 030c 	and.w	r3, r3, #12
 8000ffe:	2b08      	cmp	r3, #8
 8001000:	d11c      	bne.n	800103c <HAL_RCC_OscConfig+0x190>
 8001002:	4b4a      	ldr	r3, [pc, #296]	; (800112c <HAL_RCC_OscConfig+0x280>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d116      	bne.n	800103c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800100e:	4b47      	ldr	r3, [pc, #284]	; (800112c <HAL_RCC_OscConfig+0x280>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	2b00      	cmp	r3, #0
 8001018:	d005      	beq.n	8001026 <HAL_RCC_OscConfig+0x17a>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d001      	beq.n	8001026 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e1e9      	b.n	80013fa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001026:	4b41      	ldr	r3, [pc, #260]	; (800112c <HAL_RCC_OscConfig+0x280>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	691b      	ldr	r3, [r3, #16]
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	493d      	ldr	r1, [pc, #244]	; (800112c <HAL_RCC_OscConfig+0x280>)
 8001036:	4313      	orrs	r3, r2
 8001038:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800103a:	e040      	b.n	80010be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d023      	beq.n	800108c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001044:	4b39      	ldr	r3, [pc, #228]	; (800112c <HAL_RCC_OscConfig+0x280>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a38      	ldr	r2, [pc, #224]	; (800112c <HAL_RCC_OscConfig+0x280>)
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001050:	f7ff fc78 	bl	8000944 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001058:	f7ff fc74 	bl	8000944 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b02      	cmp	r3, #2
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e1c7      	b.n	80013fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800106a:	4b30      	ldr	r3, [pc, #192]	; (800112c <HAL_RCC_OscConfig+0x280>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	2b00      	cmp	r3, #0
 8001074:	d0f0      	beq.n	8001058 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001076:	4b2d      	ldr	r3, [pc, #180]	; (800112c <HAL_RCC_OscConfig+0x280>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	691b      	ldr	r3, [r3, #16]
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	4929      	ldr	r1, [pc, #164]	; (800112c <HAL_RCC_OscConfig+0x280>)
 8001086:	4313      	orrs	r3, r2
 8001088:	600b      	str	r3, [r1, #0]
 800108a:	e018      	b.n	80010be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800108c:	4b27      	ldr	r3, [pc, #156]	; (800112c <HAL_RCC_OscConfig+0x280>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a26      	ldr	r2, [pc, #152]	; (800112c <HAL_RCC_OscConfig+0x280>)
 8001092:	f023 0301 	bic.w	r3, r3, #1
 8001096:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001098:	f7ff fc54 	bl	8000944 <HAL_GetTick>
 800109c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800109e:	e008      	b.n	80010b2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010a0:	f7ff fc50 	bl	8000944 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e1a3      	b.n	80013fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010b2:	4b1e      	ldr	r3, [pc, #120]	; (800112c <HAL_RCC_OscConfig+0x280>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1f0      	bne.n	80010a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0308 	and.w	r3, r3, #8
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d038      	beq.n	800113c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d019      	beq.n	8001106 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010d2:	4b16      	ldr	r3, [pc, #88]	; (800112c <HAL_RCC_OscConfig+0x280>)
 80010d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010d6:	4a15      	ldr	r2, [pc, #84]	; (800112c <HAL_RCC_OscConfig+0x280>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010de:	f7ff fc31 	bl	8000944 <HAL_GetTick>
 80010e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010e4:	e008      	b.n	80010f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010e6:	f7ff fc2d 	bl	8000944 <HAL_GetTick>
 80010ea:	4602      	mov	r2, r0
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d901      	bls.n	80010f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80010f4:	2303      	movs	r3, #3
 80010f6:	e180      	b.n	80013fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <HAL_RCC_OscConfig+0x280>)
 80010fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d0f0      	beq.n	80010e6 <HAL_RCC_OscConfig+0x23a>
 8001104:	e01a      	b.n	800113c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <HAL_RCC_OscConfig+0x280>)
 8001108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800110a:	4a08      	ldr	r2, [pc, #32]	; (800112c <HAL_RCC_OscConfig+0x280>)
 800110c:	f023 0301 	bic.w	r3, r3, #1
 8001110:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001112:	f7ff fc17 	bl	8000944 <HAL_GetTick>
 8001116:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001118:	e00a      	b.n	8001130 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800111a:	f7ff fc13 	bl	8000944 <HAL_GetTick>
 800111e:	4602      	mov	r2, r0
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	2b02      	cmp	r3, #2
 8001126:	d903      	bls.n	8001130 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e166      	b.n	80013fa <HAL_RCC_OscConfig+0x54e>
 800112c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001130:	4b92      	ldr	r3, [pc, #584]	; (800137c <HAL_RCC_OscConfig+0x4d0>)
 8001132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1ee      	bne.n	800111a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0304 	and.w	r3, r3, #4
 8001144:	2b00      	cmp	r3, #0
 8001146:	f000 80a4 	beq.w	8001292 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800114a:	4b8c      	ldr	r3, [pc, #560]	; (800137c <HAL_RCC_OscConfig+0x4d0>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10d      	bne.n	8001172 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001156:	4b89      	ldr	r3, [pc, #548]	; (800137c <HAL_RCC_OscConfig+0x4d0>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	4a88      	ldr	r2, [pc, #544]	; (800137c <HAL_RCC_OscConfig+0x4d0>)
 800115c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001160:	6413      	str	r3, [r2, #64]	; 0x40
 8001162:	4b86      	ldr	r3, [pc, #536]	; (800137c <HAL_RCC_OscConfig+0x4d0>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800116e:	2301      	movs	r3, #1
 8001170:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001172:	4b83      	ldr	r3, [pc, #524]	; (8001380 <HAL_RCC_OscConfig+0x4d4>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800117a:	2b00      	cmp	r3, #0
 800117c:	d118      	bne.n	80011b0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800117e:	4b80      	ldr	r3, [pc, #512]	; (8001380 <HAL_RCC_OscConfig+0x4d4>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a7f      	ldr	r2, [pc, #508]	; (8001380 <HAL_RCC_OscConfig+0x4d4>)
 8001184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001188:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800118a:	f7ff fbdb 	bl	8000944 <HAL_GetTick>
 800118e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001190:	e008      	b.n	80011a4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001192:	f7ff fbd7 	bl	8000944 <HAL_GetTick>
 8001196:	4602      	mov	r2, r0
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	2b64      	cmp	r3, #100	; 0x64
 800119e:	d901      	bls.n	80011a4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e12a      	b.n	80013fa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011a4:	4b76      	ldr	r3, [pc, #472]	; (8001380 <HAL_RCC_OscConfig+0x4d4>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d0f0      	beq.n	8001192 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d106      	bne.n	80011c6 <HAL_RCC_OscConfig+0x31a>
 80011b8:	4b70      	ldr	r3, [pc, #448]	; (800137c <HAL_RCC_OscConfig+0x4d0>)
 80011ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011bc:	4a6f      	ldr	r2, [pc, #444]	; (800137c <HAL_RCC_OscConfig+0x4d0>)
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	6713      	str	r3, [r2, #112]	; 0x70
 80011c4:	e02d      	b.n	8001222 <HAL_RCC_OscConfig+0x376>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d10c      	bne.n	80011e8 <HAL_RCC_OscConfig+0x33c>
 80011ce:	4b6b      	ldr	r3, [pc, #428]	; (800137c <HAL_RCC_OscConfig+0x4d0>)
 80011d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011d2:	4a6a      	ldr	r2, [pc, #424]	; (800137c <HAL_RCC_OscConfig+0x4d0>)
 80011d4:	f023 0301 	bic.w	r3, r3, #1
 80011d8:	6713      	str	r3, [r2, #112]	; 0x70
 80011da:	4b68      	ldr	r3, [pc, #416]	; (800137c <HAL_RCC_OscConfig+0x4d0>)
 80011dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011de:	4a67      	ldr	r2, [pc, #412]	; (800137c <HAL_RCC_OscConfig+0x4d0>)
 80011e0:	f023 0304 	bic.w	r3, r3, #4
 80011e4:	6713      	str	r3, [r2, #112]	; 0x70
 80011e6:	e01c      	b.n	8001222 <HAL_RCC_OscConfig+0x376>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	2b05      	cmp	r3, #5
 80011ee:	d10c      	bne.n	800120a <HAL_RCC_OscConfig+0x35e>
 80011f0:	4b62      	ldr	r3, [pc, #392]	; (800137c <HAL_RCC_OscConfig+0x4d0>)
 80011f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011f4:	4a61      	ldr	r2, [pc, #388]	; (800137c <HAL_RCC_OscConfig+0x4d0>)
 80011f6:	f043 0304 	orr.w	r3, r3, #4
 80011fa:	6713      	str	r3, [r2, #112]	; 0x70
 80011fc:	4b5f      	ldr	r3, [pc, #380]	; (800137c <HAL_RCC_OscConfig+0x4d0>)
 80011fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001200:	4a5e      	ldr	r2, [pc, #376]	; (800137c <HAL_RCC_OscConfig+0x4d0>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	6713      	str	r3, [r2, #112]	; 0x70
 8001208:	e00b      	b.n	8001222 <HAL_RCC_OscConfig+0x376>
 800120a:	4b5c      	ldr	r3, [pc, #368]	; (800137c <HAL_RCC_OscConfig+0x4d0>)
 800120c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800120e:	4a5b      	ldr	r2, [pc, #364]	; (800137c <HAL_RCC_OscConfig+0x4d0>)
 8001210:	f023 0301 	bic.w	r3, r3, #1
 8001214:	6713      	str	r3, [r2, #112]	; 0x70
 8001216:	4b59      	ldr	r3, [pc, #356]	; (800137c <HAL_RCC_OscConfig+0x4d0>)
 8001218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800121a:	4a58      	ldr	r2, [pc, #352]	; (800137c <HAL_RCC_OscConfig+0x4d0>)
 800121c:	f023 0304 	bic.w	r3, r3, #4
 8001220:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d015      	beq.n	8001256 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800122a:	f7ff fb8b 	bl	8000944 <HAL_GetTick>
 800122e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001230:	e00a      	b.n	8001248 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001232:	f7ff fb87 	bl	8000944 <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001240:	4293      	cmp	r3, r2
 8001242:	d901      	bls.n	8001248 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e0d8      	b.n	80013fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001248:	4b4c      	ldr	r3, [pc, #304]	; (800137c <HAL_RCC_OscConfig+0x4d0>)
 800124a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d0ee      	beq.n	8001232 <HAL_RCC_OscConfig+0x386>
 8001254:	e014      	b.n	8001280 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001256:	f7ff fb75 	bl	8000944 <HAL_GetTick>
 800125a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800125c:	e00a      	b.n	8001274 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800125e:	f7ff fb71 	bl	8000944 <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	f241 3288 	movw	r2, #5000	; 0x1388
 800126c:	4293      	cmp	r3, r2
 800126e:	d901      	bls.n	8001274 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e0c2      	b.n	80013fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001274:	4b41      	ldr	r3, [pc, #260]	; (800137c <HAL_RCC_OscConfig+0x4d0>)
 8001276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1ee      	bne.n	800125e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001280:	7dfb      	ldrb	r3, [r7, #23]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d105      	bne.n	8001292 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001286:	4b3d      	ldr	r3, [pc, #244]	; (800137c <HAL_RCC_OscConfig+0x4d0>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	4a3c      	ldr	r2, [pc, #240]	; (800137c <HAL_RCC_OscConfig+0x4d0>)
 800128c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001290:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	2b00      	cmp	r3, #0
 8001298:	f000 80ae 	beq.w	80013f8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800129c:	4b37      	ldr	r3, [pc, #220]	; (800137c <HAL_RCC_OscConfig+0x4d0>)
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f003 030c 	and.w	r3, r3, #12
 80012a4:	2b08      	cmp	r3, #8
 80012a6:	d06d      	beq.n	8001384 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d14b      	bne.n	8001348 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012b0:	4b32      	ldr	r3, [pc, #200]	; (800137c <HAL_RCC_OscConfig+0x4d0>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a31      	ldr	r2, [pc, #196]	; (800137c <HAL_RCC_OscConfig+0x4d0>)
 80012b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012bc:	f7ff fb42 	bl	8000944 <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012c4:	f7ff fb3e 	bl	8000944 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e091      	b.n	80013fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012d6:	4b29      	ldr	r3, [pc, #164]	; (800137c <HAL_RCC_OscConfig+0x4d0>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1f0      	bne.n	80012c4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69da      	ldr	r2, [r3, #28]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a1b      	ldr	r3, [r3, #32]
 80012ea:	431a      	orrs	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f0:	019b      	lsls	r3, r3, #6
 80012f2:	431a      	orrs	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f8:	085b      	lsrs	r3, r3, #1
 80012fa:	3b01      	subs	r3, #1
 80012fc:	041b      	lsls	r3, r3, #16
 80012fe:	431a      	orrs	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001304:	061b      	lsls	r3, r3, #24
 8001306:	431a      	orrs	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130c:	071b      	lsls	r3, r3, #28
 800130e:	491b      	ldr	r1, [pc, #108]	; (800137c <HAL_RCC_OscConfig+0x4d0>)
 8001310:	4313      	orrs	r3, r2
 8001312:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001314:	4b19      	ldr	r3, [pc, #100]	; (800137c <HAL_RCC_OscConfig+0x4d0>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a18      	ldr	r2, [pc, #96]	; (800137c <HAL_RCC_OscConfig+0x4d0>)
 800131a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800131e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001320:	f7ff fb10 	bl	8000944 <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001328:	f7ff fb0c 	bl	8000944 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e05f      	b.n	80013fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800133a:	4b10      	ldr	r3, [pc, #64]	; (800137c <HAL_RCC_OscConfig+0x4d0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d0f0      	beq.n	8001328 <HAL_RCC_OscConfig+0x47c>
 8001346:	e057      	b.n	80013f8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <HAL_RCC_OscConfig+0x4d0>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a0b      	ldr	r2, [pc, #44]	; (800137c <HAL_RCC_OscConfig+0x4d0>)
 800134e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001352:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001354:	f7ff faf6 	bl	8000944 <HAL_GetTick>
 8001358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800135c:	f7ff faf2 	bl	8000944 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e045      	b.n	80013fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800136e:	4b03      	ldr	r3, [pc, #12]	; (800137c <HAL_RCC_OscConfig+0x4d0>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1f0      	bne.n	800135c <HAL_RCC_OscConfig+0x4b0>
 800137a:	e03d      	b.n	80013f8 <HAL_RCC_OscConfig+0x54c>
 800137c:	40023800 	.word	0x40023800
 8001380:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001384:	4b1f      	ldr	r3, [pc, #124]	; (8001404 <HAL_RCC_OscConfig+0x558>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d030      	beq.n	80013f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800139c:	429a      	cmp	r2, r3
 800139e:	d129      	bne.n	80013f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d122      	bne.n	80013f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80013b4:	4013      	ands	r3, r2
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80013ba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013bc:	4293      	cmp	r3, r2
 80013be:	d119      	bne.n	80013f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ca:	085b      	lsrs	r3, r3, #1
 80013cc:	3b01      	subs	r3, #1
 80013ce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d10f      	bne.n	80013f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013de:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d107      	bne.n	80013f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d001      	beq.n	80013f8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e000      	b.n	80013fa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40023800 	.word	0x40023800

08001408 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d101      	bne.n	8001420 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e0d0      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001420:	4b6a      	ldr	r3, [pc, #424]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 030f 	and.w	r3, r3, #15
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	429a      	cmp	r2, r3
 800142c:	d910      	bls.n	8001450 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800142e:	4b67      	ldr	r3, [pc, #412]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f023 020f 	bic.w	r2, r3, #15
 8001436:	4965      	ldr	r1, [pc, #404]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	4313      	orrs	r3, r2
 800143c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800143e:	4b63      	ldr	r3, [pc, #396]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 030f 	and.w	r3, r3, #15
 8001446:	683a      	ldr	r2, [r7, #0]
 8001448:	429a      	cmp	r2, r3
 800144a:	d001      	beq.n	8001450 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e0b8      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d020      	beq.n	800149e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	2b00      	cmp	r3, #0
 8001466:	d005      	beq.n	8001474 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001468:	4b59      	ldr	r3, [pc, #356]	; (80015d0 <HAL_RCC_ClockConfig+0x1c8>)
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	4a58      	ldr	r2, [pc, #352]	; (80015d0 <HAL_RCC_ClockConfig+0x1c8>)
 800146e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001472:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0308 	and.w	r3, r3, #8
 800147c:	2b00      	cmp	r3, #0
 800147e:	d005      	beq.n	800148c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001480:	4b53      	ldr	r3, [pc, #332]	; (80015d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	4a52      	ldr	r2, [pc, #328]	; (80015d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001486:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800148a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800148c:	4b50      	ldr	r3, [pc, #320]	; (80015d0 <HAL_RCC_ClockConfig+0x1c8>)
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	494d      	ldr	r1, [pc, #308]	; (80015d0 <HAL_RCC_ClockConfig+0x1c8>)
 800149a:	4313      	orrs	r3, r2
 800149c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d040      	beq.n	800152c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d107      	bne.n	80014c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b2:	4b47      	ldr	r3, [pc, #284]	; (80015d0 <HAL_RCC_ClockConfig+0x1c8>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d115      	bne.n	80014ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e07f      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d107      	bne.n	80014da <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ca:	4b41      	ldr	r3, [pc, #260]	; (80015d0 <HAL_RCC_ClockConfig+0x1c8>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d109      	bne.n	80014ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e073      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014da:	4b3d      	ldr	r3, [pc, #244]	; (80015d0 <HAL_RCC_ClockConfig+0x1c8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e06b      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014ea:	4b39      	ldr	r3, [pc, #228]	; (80015d0 <HAL_RCC_ClockConfig+0x1c8>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f023 0203 	bic.w	r2, r3, #3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	4936      	ldr	r1, [pc, #216]	; (80015d0 <HAL_RCC_ClockConfig+0x1c8>)
 80014f8:	4313      	orrs	r3, r2
 80014fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014fc:	f7ff fa22 	bl	8000944 <HAL_GetTick>
 8001500:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001502:	e00a      	b.n	800151a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001504:	f7ff fa1e 	bl	8000944 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001512:	4293      	cmp	r3, r2
 8001514:	d901      	bls.n	800151a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e053      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800151a:	4b2d      	ldr	r3, [pc, #180]	; (80015d0 <HAL_RCC_ClockConfig+0x1c8>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f003 020c 	and.w	r2, r3, #12
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	429a      	cmp	r2, r3
 800152a:	d1eb      	bne.n	8001504 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800152c:	4b27      	ldr	r3, [pc, #156]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 030f 	and.w	r3, r3, #15
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	429a      	cmp	r2, r3
 8001538:	d210      	bcs.n	800155c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800153a:	4b24      	ldr	r3, [pc, #144]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f023 020f 	bic.w	r2, r3, #15
 8001542:	4922      	ldr	r1, [pc, #136]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	4313      	orrs	r3, r2
 8001548:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800154a:	4b20      	ldr	r3, [pc, #128]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 030f 	and.w	r3, r3, #15
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	429a      	cmp	r2, r3
 8001556:	d001      	beq.n	800155c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e032      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	2b00      	cmp	r3, #0
 8001566:	d008      	beq.n	800157a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001568:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <HAL_RCC_ClockConfig+0x1c8>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	4916      	ldr	r1, [pc, #88]	; (80015d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001576:	4313      	orrs	r3, r2
 8001578:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0308 	and.w	r3, r3, #8
 8001582:	2b00      	cmp	r3, #0
 8001584:	d009      	beq.n	800159a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001586:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	490e      	ldr	r1, [pc, #56]	; (80015d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001596:	4313      	orrs	r3, r2
 8001598:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800159a:	f000 f821 	bl	80015e0 <HAL_RCC_GetSysClockFreq>
 800159e:	4602      	mov	r2, r0
 80015a0:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <HAL_RCC_ClockConfig+0x1c8>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	091b      	lsrs	r3, r3, #4
 80015a6:	f003 030f 	and.w	r3, r3, #15
 80015aa:	490a      	ldr	r1, [pc, #40]	; (80015d4 <HAL_RCC_ClockConfig+0x1cc>)
 80015ac:	5ccb      	ldrb	r3, [r1, r3]
 80015ae:	fa22 f303 	lsr.w	r3, r2, r3
 80015b2:	4a09      	ldr	r2, [pc, #36]	; (80015d8 <HAL_RCC_ClockConfig+0x1d0>)
 80015b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <HAL_RCC_ClockConfig+0x1d4>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff f8f0 	bl	80007a0 <HAL_InitTick>

  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40023c00 	.word	0x40023c00
 80015d0:	40023800 	.word	0x40023800
 80015d4:	08004cb4 	.word	0x08004cb4
 80015d8:	20000000 	.word	0x20000000
 80015dc:	20000004 	.word	0x20000004

080015e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015e4:	b090      	sub	sp, #64	; 0x40
 80015e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	637b      	str	r3, [r7, #52]	; 0x34
 80015ec:	2300      	movs	r3, #0
 80015ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015f0:	2300      	movs	r3, #0
 80015f2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015f8:	4b59      	ldr	r3, [pc, #356]	; (8001760 <HAL_RCC_GetSysClockFreq+0x180>)
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f003 030c 	and.w	r3, r3, #12
 8001600:	2b08      	cmp	r3, #8
 8001602:	d00d      	beq.n	8001620 <HAL_RCC_GetSysClockFreq+0x40>
 8001604:	2b08      	cmp	r3, #8
 8001606:	f200 80a1 	bhi.w	800174c <HAL_RCC_GetSysClockFreq+0x16c>
 800160a:	2b00      	cmp	r3, #0
 800160c:	d002      	beq.n	8001614 <HAL_RCC_GetSysClockFreq+0x34>
 800160e:	2b04      	cmp	r3, #4
 8001610:	d003      	beq.n	800161a <HAL_RCC_GetSysClockFreq+0x3a>
 8001612:	e09b      	b.n	800174c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001614:	4b53      	ldr	r3, [pc, #332]	; (8001764 <HAL_RCC_GetSysClockFreq+0x184>)
 8001616:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001618:	e09b      	b.n	8001752 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800161a:	4b53      	ldr	r3, [pc, #332]	; (8001768 <HAL_RCC_GetSysClockFreq+0x188>)
 800161c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800161e:	e098      	b.n	8001752 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001620:	4b4f      	ldr	r3, [pc, #316]	; (8001760 <HAL_RCC_GetSysClockFreq+0x180>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001628:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800162a:	4b4d      	ldr	r3, [pc, #308]	; (8001760 <HAL_RCC_GetSysClockFreq+0x180>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d028      	beq.n	8001688 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001636:	4b4a      	ldr	r3, [pc, #296]	; (8001760 <HAL_RCC_GetSysClockFreq+0x180>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	099b      	lsrs	r3, r3, #6
 800163c:	2200      	movs	r2, #0
 800163e:	623b      	str	r3, [r7, #32]
 8001640:	627a      	str	r2, [r7, #36]	; 0x24
 8001642:	6a3b      	ldr	r3, [r7, #32]
 8001644:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001648:	2100      	movs	r1, #0
 800164a:	4b47      	ldr	r3, [pc, #284]	; (8001768 <HAL_RCC_GetSysClockFreq+0x188>)
 800164c:	fb03 f201 	mul.w	r2, r3, r1
 8001650:	2300      	movs	r3, #0
 8001652:	fb00 f303 	mul.w	r3, r0, r3
 8001656:	4413      	add	r3, r2
 8001658:	4a43      	ldr	r2, [pc, #268]	; (8001768 <HAL_RCC_GetSysClockFreq+0x188>)
 800165a:	fba0 1202 	umull	r1, r2, r0, r2
 800165e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001660:	460a      	mov	r2, r1
 8001662:	62ba      	str	r2, [r7, #40]	; 0x28
 8001664:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001666:	4413      	add	r3, r2
 8001668:	62fb      	str	r3, [r7, #44]	; 0x2c
 800166a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800166c:	2200      	movs	r2, #0
 800166e:	61bb      	str	r3, [r7, #24]
 8001670:	61fa      	str	r2, [r7, #28]
 8001672:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001676:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800167a:	f7fe fde1 	bl	8000240 <__aeabi_uldivmod>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4613      	mov	r3, r2
 8001684:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001686:	e053      	b.n	8001730 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001688:	4b35      	ldr	r3, [pc, #212]	; (8001760 <HAL_RCC_GetSysClockFreq+0x180>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	099b      	lsrs	r3, r3, #6
 800168e:	2200      	movs	r2, #0
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	617a      	str	r2, [r7, #20]
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800169a:	f04f 0b00 	mov.w	fp, #0
 800169e:	4652      	mov	r2, sl
 80016a0:	465b      	mov	r3, fp
 80016a2:	f04f 0000 	mov.w	r0, #0
 80016a6:	f04f 0100 	mov.w	r1, #0
 80016aa:	0159      	lsls	r1, r3, #5
 80016ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016b0:	0150      	lsls	r0, r2, #5
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	ebb2 080a 	subs.w	r8, r2, sl
 80016ba:	eb63 090b 	sbc.w	r9, r3, fp
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	f04f 0300 	mov.w	r3, #0
 80016c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80016ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80016ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80016d2:	ebb2 0408 	subs.w	r4, r2, r8
 80016d6:	eb63 0509 	sbc.w	r5, r3, r9
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	f04f 0300 	mov.w	r3, #0
 80016e2:	00eb      	lsls	r3, r5, #3
 80016e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016e8:	00e2      	lsls	r2, r4, #3
 80016ea:	4614      	mov	r4, r2
 80016ec:	461d      	mov	r5, r3
 80016ee:	eb14 030a 	adds.w	r3, r4, sl
 80016f2:	603b      	str	r3, [r7, #0]
 80016f4:	eb45 030b 	adc.w	r3, r5, fp
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001706:	4629      	mov	r1, r5
 8001708:	028b      	lsls	r3, r1, #10
 800170a:	4621      	mov	r1, r4
 800170c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001710:	4621      	mov	r1, r4
 8001712:	028a      	lsls	r2, r1, #10
 8001714:	4610      	mov	r0, r2
 8001716:	4619      	mov	r1, r3
 8001718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800171a:	2200      	movs	r2, #0
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	60fa      	str	r2, [r7, #12]
 8001720:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001724:	f7fe fd8c 	bl	8000240 <__aeabi_uldivmod>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	4613      	mov	r3, r2
 800172e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001730:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <HAL_RCC_GetSysClockFreq+0x180>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	0c1b      	lsrs	r3, r3, #16
 8001736:	f003 0303 	and.w	r3, r3, #3
 800173a:	3301      	adds	r3, #1
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001740:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001744:	fbb2 f3f3 	udiv	r3, r2, r3
 8001748:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800174a:	e002      	b.n	8001752 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800174c:	4b05      	ldr	r3, [pc, #20]	; (8001764 <HAL_RCC_GetSysClockFreq+0x184>)
 800174e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001750:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001754:	4618      	mov	r0, r3
 8001756:	3740      	adds	r7, #64	; 0x40
 8001758:	46bd      	mov	sp, r7
 800175a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800175e:	bf00      	nop
 8001760:	40023800 	.word	0x40023800
 8001764:	00f42400 	.word	0x00f42400
 8001768:	017d7840 	.word	0x017d7840

0800176c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001770:	4b03      	ldr	r3, [pc, #12]	; (8001780 <HAL_RCC_GetHCLKFreq+0x14>)
 8001772:	681b      	ldr	r3, [r3, #0]
}
 8001774:	4618      	mov	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	20000000 	.word	0x20000000

08001784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001788:	f7ff fff0 	bl	800176c <HAL_RCC_GetHCLKFreq>
 800178c:	4602      	mov	r2, r0
 800178e:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	0a9b      	lsrs	r3, r3, #10
 8001794:	f003 0307 	and.w	r3, r3, #7
 8001798:	4903      	ldr	r1, [pc, #12]	; (80017a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800179a:	5ccb      	ldrb	r3, [r1, r3]
 800179c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40023800 	.word	0x40023800
 80017a8:	08004cc4 	.word	0x08004cc4

080017ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	220f      	movs	r2, #15
 80017ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <HAL_RCC_GetClockConfig+0x5c>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f003 0203 	and.w	r2, r3, #3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80017c8:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <HAL_RCC_GetClockConfig+0x5c>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <HAL_RCC_GetClockConfig+0x5c>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80017e0:	4b09      	ldr	r3, [pc, #36]	; (8001808 <HAL_RCC_GetClockConfig+0x5c>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	08db      	lsrs	r3, r3, #3
 80017e6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80017ee:	4b07      	ldr	r3, [pc, #28]	; (800180c <HAL_RCC_GetClockConfig+0x60>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 020f 	and.w	r2, r3, #15
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	601a      	str	r2, [r3, #0]
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40023800 	.word	0x40023800
 800180c:	40023c00 	.word	0x40023c00

08001810 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e049      	b.n	80018b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d106      	bne.n	800183c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 f841 	bl	80018be <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2202      	movs	r2, #2
 8001840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3304      	adds	r3, #4
 800184c:	4619      	mov	r1, r3
 800184e:	4610      	mov	r0, r2
 8001850:	f000 fa00 	bl	8001c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2201      	movs	r2, #1
 8001880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2201      	movs	r2, #1
 80018b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
	...

080018d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d001      	beq.n	80018ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e054      	b.n	8001996 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2202      	movs	r2, #2
 80018f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	68da      	ldr	r2, [r3, #12]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f042 0201 	orr.w	r2, r2, #1
 8001902:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a26      	ldr	r2, [pc, #152]	; (80019a4 <HAL_TIM_Base_Start_IT+0xd0>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d022      	beq.n	8001954 <HAL_TIM_Base_Start_IT+0x80>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001916:	d01d      	beq.n	8001954 <HAL_TIM_Base_Start_IT+0x80>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a22      	ldr	r2, [pc, #136]	; (80019a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d018      	beq.n	8001954 <HAL_TIM_Base_Start_IT+0x80>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a21      	ldr	r2, [pc, #132]	; (80019ac <HAL_TIM_Base_Start_IT+0xd8>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d013      	beq.n	8001954 <HAL_TIM_Base_Start_IT+0x80>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a1f      	ldr	r2, [pc, #124]	; (80019b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d00e      	beq.n	8001954 <HAL_TIM_Base_Start_IT+0x80>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a1e      	ldr	r2, [pc, #120]	; (80019b4 <HAL_TIM_Base_Start_IT+0xe0>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d009      	beq.n	8001954 <HAL_TIM_Base_Start_IT+0x80>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a1c      	ldr	r2, [pc, #112]	; (80019b8 <HAL_TIM_Base_Start_IT+0xe4>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d004      	beq.n	8001954 <HAL_TIM_Base_Start_IT+0x80>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a1b      	ldr	r2, [pc, #108]	; (80019bc <HAL_TIM_Base_Start_IT+0xe8>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d115      	bne.n	8001980 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	689a      	ldr	r2, [r3, #8]
 800195a:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <HAL_TIM_Base_Start_IT+0xec>)
 800195c:	4013      	ands	r3, r2
 800195e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2b06      	cmp	r3, #6
 8001964:	d015      	beq.n	8001992 <HAL_TIM_Base_Start_IT+0xbe>
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800196c:	d011      	beq.n	8001992 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f042 0201 	orr.w	r2, r2, #1
 800197c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800197e:	e008      	b.n	8001992 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f042 0201 	orr.w	r2, r2, #1
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	e000      	b.n	8001994 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001992:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3714      	adds	r7, #20
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	40010000 	.word	0x40010000
 80019a8:	40000400 	.word	0x40000400
 80019ac:	40000800 	.word	0x40000800
 80019b0:	40000c00 	.word	0x40000c00
 80019b4:	40010400 	.word	0x40010400
 80019b8:	40014000 	.word	0x40014000
 80019bc:	40001800 	.word	0x40001800
 80019c0:	00010007 	.word	0x00010007

080019c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d122      	bne.n	8001a20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d11b      	bne.n	8001a20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f06f 0202 	mvn.w	r2, #2
 80019f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 f905 	bl	8001c16 <HAL_TIM_IC_CaptureCallback>
 8001a0c:	e005      	b.n	8001a1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 f8f7 	bl	8001c02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 f908 	bl	8001c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	f003 0304 	and.w	r3, r3, #4
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	d122      	bne.n	8001a74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b04      	cmp	r3, #4
 8001a3a:	d11b      	bne.n	8001a74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f06f 0204 	mvn.w	r2, #4
 8001a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2202      	movs	r2, #2
 8001a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 f8db 	bl	8001c16 <HAL_TIM_IC_CaptureCallback>
 8001a60:	e005      	b.n	8001a6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 f8cd 	bl	8001c02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f000 f8de 	bl	8001c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	2b08      	cmp	r3, #8
 8001a80:	d122      	bne.n	8001ac8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	f003 0308 	and.w	r3, r3, #8
 8001a8c:	2b08      	cmp	r3, #8
 8001a8e:	d11b      	bne.n	8001ac8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f06f 0208 	mvn.w	r2, #8
 8001a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2204      	movs	r2, #4
 8001a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 f8b1 	bl	8001c16 <HAL_TIM_IC_CaptureCallback>
 8001ab4:	e005      	b.n	8001ac2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 f8a3 	bl	8001c02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 f8b4 	bl	8001c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	f003 0310 	and.w	r3, r3, #16
 8001ad2:	2b10      	cmp	r3, #16
 8001ad4:	d122      	bne.n	8001b1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	f003 0310 	and.w	r3, r3, #16
 8001ae0:	2b10      	cmp	r3, #16
 8001ae2:	d11b      	bne.n	8001b1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f06f 0210 	mvn.w	r2, #16
 8001aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2208      	movs	r2, #8
 8001af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f887 	bl	8001c16 <HAL_TIM_IC_CaptureCallback>
 8001b08:	e005      	b.n	8001b16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 f879 	bl	8001c02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 f88a 	bl	8001c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d10e      	bne.n	8001b48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d107      	bne.n	8001b48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f06f 0201 	mvn.w	r2, #1
 8001b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7fe fdf0 	bl	8000728 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b52:	2b80      	cmp	r3, #128	; 0x80
 8001b54:	d10e      	bne.n	8001b74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b60:	2b80      	cmp	r3, #128	; 0x80
 8001b62:	d107      	bne.n	8001b74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f91a 	bl	8001da8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b82:	d10e      	bne.n	8001ba2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b8e:	2b80      	cmp	r3, #128	; 0x80
 8001b90:	d107      	bne.n	8001ba2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 f90d 	bl	8001dbc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bac:	2b40      	cmp	r3, #64	; 0x40
 8001bae:	d10e      	bne.n	8001bce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bba:	2b40      	cmp	r3, #64	; 0x40
 8001bbc:	d107      	bne.n	8001bce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 f838 	bl	8001c3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	f003 0320 	and.w	r3, r3, #32
 8001bd8:	2b20      	cmp	r3, #32
 8001bda:	d10e      	bne.n	8001bfa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	f003 0320 	and.w	r3, r3, #32
 8001be6:	2b20      	cmp	r3, #32
 8001be8:	d107      	bne.n	8001bfa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f06f 0220 	mvn.w	r2, #32
 8001bf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f8cd 	bl	8001d94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a40      	ldr	r2, [pc, #256]	; (8001d68 <TIM_Base_SetConfig+0x114>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d013      	beq.n	8001c94 <TIM_Base_SetConfig+0x40>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c72:	d00f      	beq.n	8001c94 <TIM_Base_SetConfig+0x40>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a3d      	ldr	r2, [pc, #244]	; (8001d6c <TIM_Base_SetConfig+0x118>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d00b      	beq.n	8001c94 <TIM_Base_SetConfig+0x40>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a3c      	ldr	r2, [pc, #240]	; (8001d70 <TIM_Base_SetConfig+0x11c>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d007      	beq.n	8001c94 <TIM_Base_SetConfig+0x40>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a3b      	ldr	r2, [pc, #236]	; (8001d74 <TIM_Base_SetConfig+0x120>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d003      	beq.n	8001c94 <TIM_Base_SetConfig+0x40>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a3a      	ldr	r2, [pc, #232]	; (8001d78 <TIM_Base_SetConfig+0x124>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d108      	bne.n	8001ca6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a2f      	ldr	r2, [pc, #188]	; (8001d68 <TIM_Base_SetConfig+0x114>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d02b      	beq.n	8001d06 <TIM_Base_SetConfig+0xb2>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cb4:	d027      	beq.n	8001d06 <TIM_Base_SetConfig+0xb2>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a2c      	ldr	r2, [pc, #176]	; (8001d6c <TIM_Base_SetConfig+0x118>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d023      	beq.n	8001d06 <TIM_Base_SetConfig+0xb2>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a2b      	ldr	r2, [pc, #172]	; (8001d70 <TIM_Base_SetConfig+0x11c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d01f      	beq.n	8001d06 <TIM_Base_SetConfig+0xb2>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a2a      	ldr	r2, [pc, #168]	; (8001d74 <TIM_Base_SetConfig+0x120>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d01b      	beq.n	8001d06 <TIM_Base_SetConfig+0xb2>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a29      	ldr	r2, [pc, #164]	; (8001d78 <TIM_Base_SetConfig+0x124>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d017      	beq.n	8001d06 <TIM_Base_SetConfig+0xb2>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a28      	ldr	r2, [pc, #160]	; (8001d7c <TIM_Base_SetConfig+0x128>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d013      	beq.n	8001d06 <TIM_Base_SetConfig+0xb2>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a27      	ldr	r2, [pc, #156]	; (8001d80 <TIM_Base_SetConfig+0x12c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d00f      	beq.n	8001d06 <TIM_Base_SetConfig+0xb2>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a26      	ldr	r2, [pc, #152]	; (8001d84 <TIM_Base_SetConfig+0x130>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d00b      	beq.n	8001d06 <TIM_Base_SetConfig+0xb2>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a25      	ldr	r2, [pc, #148]	; (8001d88 <TIM_Base_SetConfig+0x134>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d007      	beq.n	8001d06 <TIM_Base_SetConfig+0xb2>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a24      	ldr	r2, [pc, #144]	; (8001d8c <TIM_Base_SetConfig+0x138>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d003      	beq.n	8001d06 <TIM_Base_SetConfig+0xb2>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a23      	ldr	r2, [pc, #140]	; (8001d90 <TIM_Base_SetConfig+0x13c>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d108      	bne.n	8001d18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a0a      	ldr	r2, [pc, #40]	; (8001d68 <TIM_Base_SetConfig+0x114>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d003      	beq.n	8001d4c <TIM_Base_SetConfig+0xf8>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a0c      	ldr	r2, [pc, #48]	; (8001d78 <TIM_Base_SetConfig+0x124>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d103      	bne.n	8001d54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	691a      	ldr	r2, [r3, #16]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	615a      	str	r2, [r3, #20]
}
 8001d5a:	bf00      	nop
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40010000 	.word	0x40010000
 8001d6c:	40000400 	.word	0x40000400
 8001d70:	40000800 	.word	0x40000800
 8001d74:	40000c00 	.word	0x40000c00
 8001d78:	40010400 	.word	0x40010400
 8001d7c:	40014000 	.word	0x40014000
 8001d80:	40014400 	.word	0x40014400
 8001d84:	40014800 	.word	0x40014800
 8001d88:	40001800 	.word	0x40001800
 8001d8c:	40001c00 	.word	0x40001c00
 8001d90:	40002000 	.word	0x40002000

08001d94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
	...

08001de0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001de6:	f3ef 8305 	mrs	r3, IPSR
 8001dea:	60bb      	str	r3, [r7, #8]
  return(result);
 8001dec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10f      	bne.n	8001e12 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001df2:	f3ef 8310 	mrs	r3, PRIMASK
 8001df6:	607b      	str	r3, [r7, #4]
  return(result);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d105      	bne.n	8001e0a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001dfe:	f3ef 8311 	mrs	r3, BASEPRI
 8001e02:	603b      	str	r3, [r7, #0]
  return(result);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d007      	beq.n	8001e1a <osKernelInitialize+0x3a>
 8001e0a:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <osKernelInitialize+0x64>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d103      	bne.n	8001e1a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001e12:	f06f 0305 	mvn.w	r3, #5
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	e00c      	b.n	8001e34 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001e1a:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <osKernelInitialize+0x64>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d105      	bne.n	8001e2e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001e22:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <osKernelInitialize+0x64>)
 8001e24:	2201      	movs	r2, #1
 8001e26:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	e002      	b.n	8001e34 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e32:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001e34:	68fb      	ldr	r3, [r7, #12]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	20000084 	.word	0x20000084

08001e48 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e4e:	f3ef 8305 	mrs	r3, IPSR
 8001e52:	60bb      	str	r3, [r7, #8]
  return(result);
 8001e54:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10f      	bne.n	8001e7a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e5a:	f3ef 8310 	mrs	r3, PRIMASK
 8001e5e:	607b      	str	r3, [r7, #4]
  return(result);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d105      	bne.n	8001e72 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001e66:	f3ef 8311 	mrs	r3, BASEPRI
 8001e6a:	603b      	str	r3, [r7, #0]
  return(result);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d007      	beq.n	8001e82 <osKernelStart+0x3a>
 8001e72:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <osKernelStart+0x68>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d103      	bne.n	8001e82 <osKernelStart+0x3a>
    stat = osErrorISR;
 8001e7a:	f06f 0305 	mvn.w	r3, #5
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	e010      	b.n	8001ea4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001e82:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <osKernelStart+0x68>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d109      	bne.n	8001e9e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001e8a:	f7ff ffa1 	bl	8001dd0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001e8e:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <osKernelStart+0x68>)
 8001e90:	2202      	movs	r2, #2
 8001e92:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001e94:	f001 f9d0 	bl	8003238 <vTaskStartScheduler>
      stat = osOK;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	e002      	b.n	8001ea4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8001e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000084 	.word	0x20000084

08001eb4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b090      	sub	sp, #64	; 0x40
 8001eb8:	af04      	add	r7, sp, #16
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ec4:	f3ef 8305 	mrs	r3, IPSR
 8001ec8:	61fb      	str	r3, [r7, #28]
  return(result);
 8001eca:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f040 808f 	bne.w	8001ff0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ed2:	f3ef 8310 	mrs	r3, PRIMASK
 8001ed6:	61bb      	str	r3, [r7, #24]
  return(result);
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d105      	bne.n	8001eea <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001ede:	f3ef 8311 	mrs	r3, BASEPRI
 8001ee2:	617b      	str	r3, [r7, #20]
  return(result);
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <osThreadNew+0x3e>
 8001eea:	4b44      	ldr	r3, [pc, #272]	; (8001ffc <osThreadNew+0x148>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d07e      	beq.n	8001ff0 <osThreadNew+0x13c>
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d07b      	beq.n	8001ff0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8001ef8:	2380      	movs	r3, #128	; 0x80
 8001efa:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8001efc:	2318      	movs	r3, #24
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8001f04:	f04f 33ff 	mov.w	r3, #4294967295
 8001f08:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d045      	beq.n	8001f9c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d002      	beq.n	8001f1e <osThreadNew+0x6a>
        name = attr->name;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d002      	beq.n	8001f2c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d008      	beq.n	8001f44 <osThreadNew+0x90>
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	2b38      	cmp	r3, #56	; 0x38
 8001f36:	d805      	bhi.n	8001f44 <osThreadNew+0x90>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <osThreadNew+0x94>
        return (NULL);
 8001f44:	2300      	movs	r3, #0
 8001f46:	e054      	b.n	8001ff2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d003      	beq.n	8001f58 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	089b      	lsrs	r3, r3, #2
 8001f56:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00e      	beq.n	8001f7e <osThreadNew+0xca>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	2b5b      	cmp	r3, #91	; 0x5b
 8001f66:	d90a      	bls.n	8001f7e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d006      	beq.n	8001f7e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	695b      	ldr	r3, [r3, #20]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d002      	beq.n	8001f7e <osThreadNew+0xca>
        mem = 1;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	623b      	str	r3, [r7, #32]
 8001f7c:	e010      	b.n	8001fa0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10c      	bne.n	8001fa0 <osThreadNew+0xec>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d108      	bne.n	8001fa0 <osThreadNew+0xec>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d104      	bne.n	8001fa0 <osThreadNew+0xec>
          mem = 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	623b      	str	r3, [r7, #32]
 8001f9a:	e001      	b.n	8001fa0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8001fa0:	6a3b      	ldr	r3, [r7, #32]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d110      	bne.n	8001fc8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001fae:	9202      	str	r2, [sp, #8]
 8001fb0:	9301      	str	r3, [sp, #4]
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	9300      	str	r3, [sp, #0]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f000 fe7f 	bl	8002cc0 <xTaskCreateStatic>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	613b      	str	r3, [r7, #16]
 8001fc6:	e013      	b.n	8001ff0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8001fc8:	6a3b      	ldr	r3, [r7, #32]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d110      	bne.n	8001ff0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	f107 0310 	add.w	r3, r7, #16
 8001fd6:	9301      	str	r3, [sp, #4]
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	9300      	str	r3, [sp, #0]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f000 fed0 	bl	8002d86 <xTaskCreate>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d001      	beq.n	8001ff0 <osThreadNew+0x13c>
          hTask = NULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001ff0:	693b      	ldr	r3, [r7, #16]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3730      	adds	r7, #48	; 0x30
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20000084 	.word	0x20000084

08002000 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8002000:	b580      	push	{r7, lr}
 8002002:	b088      	sub	sp, #32
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800200c:	f3ef 8305 	mrs	r3, IPSR
 8002010:	613b      	str	r3, [r7, #16]
  return(result);
 8002012:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8002014:	2b00      	cmp	r3, #0
 8002016:	d10f      	bne.n	8002038 <osThreadTerminate+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002018:	f3ef 8310 	mrs	r3, PRIMASK
 800201c:	60fb      	str	r3, [r7, #12]
  return(result);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d105      	bne.n	8002030 <osThreadTerminate+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002024:	f3ef 8311 	mrs	r3, BASEPRI
 8002028:	60bb      	str	r3, [r7, #8]
  return(result);
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d007      	beq.n	8002040 <osThreadTerminate+0x40>
 8002030:	4b12      	ldr	r3, [pc, #72]	; (800207c <osThreadTerminate+0x7c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b02      	cmp	r3, #2
 8002036:	d103      	bne.n	8002040 <osThreadTerminate+0x40>
    stat = osErrorISR;
 8002038:	f06f 0305 	mvn.w	r3, #5
 800203c:	61fb      	str	r3, [r7, #28]
 800203e:	e017      	b.n	8002070 <osThreadTerminate+0x70>
  }
  else if (hTask == NULL) {
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d103      	bne.n	800204e <osThreadTerminate+0x4e>
    stat = osErrorParameter;
 8002046:	f06f 0303 	mvn.w	r3, #3
 800204a:	61fb      	str	r3, [r7, #28]
 800204c:	e010      	b.n	8002070 <osThreadTerminate+0x70>
  }
  else {
    tstate = eTaskGetState (hTask);
 800204e:	69b8      	ldr	r0, [r7, #24]
 8002050:	f001 f88a 	bl	8003168 <eTaskGetState>
 8002054:	4603      	mov	r3, r0
 8002056:	75fb      	strb	r3, [r7, #23]

    if (tstate != eDeleted) {
 8002058:	7dfb      	ldrb	r3, [r7, #23]
 800205a:	2b04      	cmp	r3, #4
 800205c:	d005      	beq.n	800206a <osThreadTerminate+0x6a>
      stat = osOK;
 800205e:	2300      	movs	r3, #0
 8002060:	61fb      	str	r3, [r7, #28]
      vTaskDelete (hTask);
 8002062:	69b8      	ldr	r0, [r7, #24]
 8002064:	f000 ffd6 	bl	8003014 <vTaskDelete>
 8002068:	e002      	b.n	8002070 <osThreadTerminate+0x70>
    } else {
      stat = osErrorResource;
 800206a:	f06f 0302 	mvn.w	r3, #2
 800206e:	61fb      	str	r3, [r7, #28]
  }
#else
  stat = osError;
#endif

  return (stat);
 8002070:	69fb      	ldr	r3, [r7, #28]
}
 8002072:	4618      	mov	r0, r3
 8002074:	3720      	adds	r7, #32
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000084 	.word	0x20000084

08002080 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002088:	f3ef 8305 	mrs	r3, IPSR
 800208c:	613b      	str	r3, [r7, #16]
  return(result);
 800208e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10f      	bne.n	80020b4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002094:	f3ef 8310 	mrs	r3, PRIMASK
 8002098:	60fb      	str	r3, [r7, #12]
  return(result);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d105      	bne.n	80020ac <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80020a0:	f3ef 8311 	mrs	r3, BASEPRI
 80020a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d007      	beq.n	80020bc <osDelay+0x3c>
 80020ac:	4b0a      	ldr	r3, [pc, #40]	; (80020d8 <osDelay+0x58>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d103      	bne.n	80020bc <osDelay+0x3c>
    stat = osErrorISR;
 80020b4:	f06f 0305 	mvn.w	r3, #5
 80020b8:	617b      	str	r3, [r7, #20]
 80020ba:	e007      	b.n	80020cc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d002      	beq.n	80020cc <osDelay+0x4c>
      vTaskDelay(ticks);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f001 f818 	bl	80030fc <vTaskDelay>
    }
  }

  return (stat);
 80020cc:	697b      	ldr	r3, [r7, #20]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3718      	adds	r7, #24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000084 	.word	0x20000084

080020dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4a07      	ldr	r2, [pc, #28]	; (8002108 <vApplicationGetIdleTaskMemory+0x2c>)
 80020ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	4a06      	ldr	r2, [pc, #24]	; (800210c <vApplicationGetIdleTaskMemory+0x30>)
 80020f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2280      	movs	r2, #128	; 0x80
 80020f8:	601a      	str	r2, [r3, #0]
}
 80020fa:	bf00      	nop
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	20000088 	.word	0x20000088
 800210c:	200000e4 	.word	0x200000e4

08002110 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4a07      	ldr	r2, [pc, #28]	; (800213c <vApplicationGetTimerTaskMemory+0x2c>)
 8002120:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	4a06      	ldr	r2, [pc, #24]	; (8002140 <vApplicationGetTimerTaskMemory+0x30>)
 8002126:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800212e:	601a      	str	r2, [r3, #0]
}
 8002130:	bf00      	nop
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	200002e4 	.word	0x200002e4
 8002140:	20000340 	.word	0x20000340

08002144 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f103 0208 	add.w	r2, r3, #8
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f04f 32ff 	mov.w	r2, #4294967295
 800215c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f103 0208 	add.w	r2, r3, #8
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f103 0208 	add.w	r2, r3, #8
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800219e:	b480      	push	{r7}
 80021a0:	b085      	sub	sp, #20
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
 80021a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	1c5a      	adds	r2, r3, #1
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	601a      	str	r2, [r3, #0]
}
 80021da:	bf00      	nop
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80021e6:	b480      	push	{r7}
 80021e8:	b085      	sub	sp, #20
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
 80021ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021fc:	d103      	bne.n	8002206 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	e00c      	b.n	8002220 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3308      	adds	r3, #8
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	e002      	b.n	8002214 <vListInsert+0x2e>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	429a      	cmp	r2, r3
 800221e:	d2f6      	bcs.n	800220e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	1c5a      	adds	r2, r3, #1
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	601a      	str	r2, [r3, #0]
}
 800224c:	bf00      	nop
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	6892      	ldr	r2, [r2, #8]
 800226e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	6852      	ldr	r2, [r2, #4]
 8002278:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	429a      	cmp	r2, r3
 8002282:	d103      	bne.n	800228c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	1e5a      	subs	r2, r3, #1
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d10c      	bne.n	80022da <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80022c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c4:	b672      	cpsid	i
 80022c6:	f383 8811 	msr	BASEPRI, r3
 80022ca:	f3bf 8f6f 	isb	sy
 80022ce:	f3bf 8f4f 	dsb	sy
 80022d2:	b662      	cpsie	i
 80022d4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80022d6:	bf00      	nop
 80022d8:	e7fe      	b.n	80022d8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80022da:	f002 f957 	bl	800458c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e6:	68f9      	ldr	r1, [r7, #12]
 80022e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022ea:	fb01 f303 	mul.w	r3, r1, r3
 80022ee:	441a      	add	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800230a:	3b01      	subs	r3, #1
 800230c:	68f9      	ldr	r1, [r7, #12]
 800230e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002310:	fb01 f303 	mul.w	r3, r1, r3
 8002314:	441a      	add	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	22ff      	movs	r2, #255	; 0xff
 800231e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	22ff      	movs	r2, #255	; 0xff
 8002326:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d114      	bne.n	800235a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d01a      	beq.n	800236e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	3310      	adds	r3, #16
 800233c:	4618      	mov	r0, r3
 800233e:	f001 fa13 	bl	8003768 <xTaskRemoveFromEventList>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d012      	beq.n	800236e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002348:	4b0c      	ldr	r3, [pc, #48]	; (800237c <xQueueGenericReset+0xd0>)
 800234a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	f3bf 8f4f 	dsb	sy
 8002354:	f3bf 8f6f 	isb	sy
 8002358:	e009      	b.n	800236e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	3310      	adds	r3, #16
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff fef0 	bl	8002144 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	3324      	adds	r3, #36	; 0x24
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff feeb 	bl	8002144 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800236e:	f002 f941 	bl	80045f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002372:	2301      	movs	r3, #1
}
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	e000ed04 	.word	0xe000ed04

08002380 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002380:	b580      	push	{r7, lr}
 8002382:	b08e      	sub	sp, #56	; 0x38
 8002384:	af02      	add	r7, sp, #8
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
 800238c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10c      	bne.n	80023ae <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8002394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002398:	b672      	cpsid	i
 800239a:	f383 8811 	msr	BASEPRI, r3
 800239e:	f3bf 8f6f 	isb	sy
 80023a2:	f3bf 8f4f 	dsb	sy
 80023a6:	b662      	cpsie	i
 80023a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80023aa:	bf00      	nop
 80023ac:	e7fe      	b.n	80023ac <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10c      	bne.n	80023ce <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80023b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023b8:	b672      	cpsid	i
 80023ba:	f383 8811 	msr	BASEPRI, r3
 80023be:	f3bf 8f6f 	isb	sy
 80023c2:	f3bf 8f4f 	dsb	sy
 80023c6:	b662      	cpsie	i
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80023ca:	bf00      	nop
 80023cc:	e7fe      	b.n	80023cc <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d002      	beq.n	80023da <xQueueGenericCreateStatic+0x5a>
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <xQueueGenericCreateStatic+0x5e>
 80023da:	2301      	movs	r3, #1
 80023dc:	e000      	b.n	80023e0 <xQueueGenericCreateStatic+0x60>
 80023de:	2300      	movs	r3, #0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d10c      	bne.n	80023fe <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80023e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e8:	b672      	cpsid	i
 80023ea:	f383 8811 	msr	BASEPRI, r3
 80023ee:	f3bf 8f6f 	isb	sy
 80023f2:	f3bf 8f4f 	dsb	sy
 80023f6:	b662      	cpsie	i
 80023f8:	623b      	str	r3, [r7, #32]
}
 80023fa:	bf00      	nop
 80023fc:	e7fe      	b.n	80023fc <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d102      	bne.n	800240a <xQueueGenericCreateStatic+0x8a>
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <xQueueGenericCreateStatic+0x8e>
 800240a:	2301      	movs	r3, #1
 800240c:	e000      	b.n	8002410 <xQueueGenericCreateStatic+0x90>
 800240e:	2300      	movs	r3, #0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10c      	bne.n	800242e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8002414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002418:	b672      	cpsid	i
 800241a:	f383 8811 	msr	BASEPRI, r3
 800241e:	f3bf 8f6f 	isb	sy
 8002422:	f3bf 8f4f 	dsb	sy
 8002426:	b662      	cpsie	i
 8002428:	61fb      	str	r3, [r7, #28]
}
 800242a:	bf00      	nop
 800242c:	e7fe      	b.n	800242c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800242e:	2350      	movs	r3, #80	; 0x50
 8002430:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	2b50      	cmp	r3, #80	; 0x50
 8002436:	d00c      	beq.n	8002452 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8002438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800243c:	b672      	cpsid	i
 800243e:	f383 8811 	msr	BASEPRI, r3
 8002442:	f3bf 8f6f 	isb	sy
 8002446:	f3bf 8f4f 	dsb	sy
 800244a:	b662      	cpsie	i
 800244c:	61bb      	str	r3, [r7, #24]
}
 800244e:	bf00      	nop
 8002450:	e7fe      	b.n	8002450 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002452:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00d      	beq.n	800247a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800245e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002466:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800246a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	4613      	mov	r3, r2
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	68b9      	ldr	r1, [r7, #8]
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 f805 	bl	8002484 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800247a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800247c:	4618      	mov	r0, r3
 800247e:	3730      	adds	r7, #48	; 0x30
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
 8002490:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d103      	bne.n	80024a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	e002      	b.n	80024a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80024b2:	2101      	movs	r1, #1
 80024b4:	69b8      	ldr	r0, [r7, #24]
 80024b6:	f7ff fef9 	bl	80022ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	78fa      	ldrb	r2, [r7, #3]
 80024be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80024c2:	bf00      	nop
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08e      	sub	sp, #56	; 0x38
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
 80024d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80024da:	2300      	movs	r3, #0
 80024dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80024e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10c      	bne.n	8002502 <xQueueGenericSend+0x36>
	__asm volatile
 80024e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ec:	b672      	cpsid	i
 80024ee:	f383 8811 	msr	BASEPRI, r3
 80024f2:	f3bf 8f6f 	isb	sy
 80024f6:	f3bf 8f4f 	dsb	sy
 80024fa:	b662      	cpsie	i
 80024fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80024fe:	bf00      	nop
 8002500:	e7fe      	b.n	8002500 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d103      	bne.n	8002510 <xQueueGenericSend+0x44>
 8002508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <xQueueGenericSend+0x48>
 8002510:	2301      	movs	r3, #1
 8002512:	e000      	b.n	8002516 <xQueueGenericSend+0x4a>
 8002514:	2300      	movs	r3, #0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10c      	bne.n	8002534 <xQueueGenericSend+0x68>
	__asm volatile
 800251a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800251e:	b672      	cpsid	i
 8002520:	f383 8811 	msr	BASEPRI, r3
 8002524:	f3bf 8f6f 	isb	sy
 8002528:	f3bf 8f4f 	dsb	sy
 800252c:	b662      	cpsie	i
 800252e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002530:	bf00      	nop
 8002532:	e7fe      	b.n	8002532 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	2b02      	cmp	r3, #2
 8002538:	d103      	bne.n	8002542 <xQueueGenericSend+0x76>
 800253a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800253e:	2b01      	cmp	r3, #1
 8002540:	d101      	bne.n	8002546 <xQueueGenericSend+0x7a>
 8002542:	2301      	movs	r3, #1
 8002544:	e000      	b.n	8002548 <xQueueGenericSend+0x7c>
 8002546:	2300      	movs	r3, #0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10c      	bne.n	8002566 <xQueueGenericSend+0x9a>
	__asm volatile
 800254c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002550:	b672      	cpsid	i
 8002552:	f383 8811 	msr	BASEPRI, r3
 8002556:	f3bf 8f6f 	isb	sy
 800255a:	f3bf 8f4f 	dsb	sy
 800255e:	b662      	cpsie	i
 8002560:	623b      	str	r3, [r7, #32]
}
 8002562:	bf00      	nop
 8002564:	e7fe      	b.n	8002564 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002566:	f001 fac5 	bl	8003af4 <xTaskGetSchedulerState>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d102      	bne.n	8002576 <xQueueGenericSend+0xaa>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <xQueueGenericSend+0xae>
 8002576:	2301      	movs	r3, #1
 8002578:	e000      	b.n	800257c <xQueueGenericSend+0xb0>
 800257a:	2300      	movs	r3, #0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d10c      	bne.n	800259a <xQueueGenericSend+0xce>
	__asm volatile
 8002580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002584:	b672      	cpsid	i
 8002586:	f383 8811 	msr	BASEPRI, r3
 800258a:	f3bf 8f6f 	isb	sy
 800258e:	f3bf 8f4f 	dsb	sy
 8002592:	b662      	cpsie	i
 8002594:	61fb      	str	r3, [r7, #28]
}
 8002596:	bf00      	nop
 8002598:	e7fe      	b.n	8002598 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800259a:	f001 fff7 	bl	800458c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800259e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d302      	bcc.n	80025b0 <xQueueGenericSend+0xe4>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d129      	bne.n	8002604 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	68b9      	ldr	r1, [r7, #8]
 80025b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025b6:	f000 fa15 	bl	80029e4 <prvCopyDataToQueue>
 80025ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d010      	beq.n	80025e6 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c6:	3324      	adds	r3, #36	; 0x24
 80025c8:	4618      	mov	r0, r3
 80025ca:	f001 f8cd 	bl	8003768 <xTaskRemoveFromEventList>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d013      	beq.n	80025fc <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80025d4:	4b3f      	ldr	r3, [pc, #252]	; (80026d4 <xQueueGenericSend+0x208>)
 80025d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	f3bf 8f4f 	dsb	sy
 80025e0:	f3bf 8f6f 	isb	sy
 80025e4:	e00a      	b.n	80025fc <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80025e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d007      	beq.n	80025fc <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80025ec:	4b39      	ldr	r3, [pc, #228]	; (80026d4 <xQueueGenericSend+0x208>)
 80025ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	f3bf 8f4f 	dsb	sy
 80025f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80025fc:	f001 fffa 	bl	80045f4 <vPortExitCritical>
				return pdPASS;
 8002600:	2301      	movs	r3, #1
 8002602:	e063      	b.n	80026cc <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d103      	bne.n	8002612 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800260a:	f001 fff3 	bl	80045f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800260e:	2300      	movs	r3, #0
 8002610:	e05c      	b.n	80026cc <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002614:	2b00      	cmp	r3, #0
 8002616:	d106      	bne.n	8002626 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002618:	f107 0314 	add.w	r3, r7, #20
 800261c:	4618      	mov	r0, r3
 800261e:	f001 f909 	bl	8003834 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002622:	2301      	movs	r3, #1
 8002624:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002626:	f001 ffe5 	bl	80045f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800262a:	f000 fe6f 	bl	800330c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800262e:	f001 ffad 	bl	800458c <vPortEnterCritical>
 8002632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002634:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002638:	b25b      	sxtb	r3, r3
 800263a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263e:	d103      	bne.n	8002648 <xQueueGenericSend+0x17c>
 8002640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800264e:	b25b      	sxtb	r3, r3
 8002650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002654:	d103      	bne.n	800265e <xQueueGenericSend+0x192>
 8002656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800265e:	f001 ffc9 	bl	80045f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002662:	1d3a      	adds	r2, r7, #4
 8002664:	f107 0314 	add.w	r3, r7, #20
 8002668:	4611      	mov	r1, r2
 800266a:	4618      	mov	r0, r3
 800266c:	f001 f8f8 	bl	8003860 <xTaskCheckForTimeOut>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d124      	bne.n	80026c0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002676:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002678:	f000 faac 	bl	8002bd4 <prvIsQueueFull>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d018      	beq.n	80026b4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002684:	3310      	adds	r3, #16
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	4611      	mov	r1, r2
 800268a:	4618      	mov	r0, r3
 800268c:	f001 f818 	bl	80036c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002690:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002692:	f000 fa37 	bl	8002b04 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002696:	f000 fe47 	bl	8003328 <xTaskResumeAll>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	f47f af7c 	bne.w	800259a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80026a2:	4b0c      	ldr	r3, [pc, #48]	; (80026d4 <xQueueGenericSend+0x208>)
 80026a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	f3bf 8f4f 	dsb	sy
 80026ae:	f3bf 8f6f 	isb	sy
 80026b2:	e772      	b.n	800259a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80026b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026b6:	f000 fa25 	bl	8002b04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80026ba:	f000 fe35 	bl	8003328 <xTaskResumeAll>
 80026be:	e76c      	b.n	800259a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80026c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026c2:	f000 fa1f 	bl	8002b04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80026c6:	f000 fe2f 	bl	8003328 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80026ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3738      	adds	r7, #56	; 0x38
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	e000ed04 	.word	0xe000ed04

080026d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08e      	sub	sp, #56	; 0x38
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
 80026e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80026ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10c      	bne.n	800270a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80026f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f4:	b672      	cpsid	i
 80026f6:	f383 8811 	msr	BASEPRI, r3
 80026fa:	f3bf 8f6f 	isb	sy
 80026fe:	f3bf 8f4f 	dsb	sy
 8002702:	b662      	cpsie	i
 8002704:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002706:	bf00      	nop
 8002708:	e7fe      	b.n	8002708 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d103      	bne.n	8002718 <xQueueGenericSendFromISR+0x40>
 8002710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <xQueueGenericSendFromISR+0x44>
 8002718:	2301      	movs	r3, #1
 800271a:	e000      	b.n	800271e <xQueueGenericSendFromISR+0x46>
 800271c:	2300      	movs	r3, #0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10c      	bne.n	800273c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8002722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002726:	b672      	cpsid	i
 8002728:	f383 8811 	msr	BASEPRI, r3
 800272c:	f3bf 8f6f 	isb	sy
 8002730:	f3bf 8f4f 	dsb	sy
 8002734:	b662      	cpsie	i
 8002736:	623b      	str	r3, [r7, #32]
}
 8002738:	bf00      	nop
 800273a:	e7fe      	b.n	800273a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	2b02      	cmp	r3, #2
 8002740:	d103      	bne.n	800274a <xQueueGenericSendFromISR+0x72>
 8002742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002746:	2b01      	cmp	r3, #1
 8002748:	d101      	bne.n	800274e <xQueueGenericSendFromISR+0x76>
 800274a:	2301      	movs	r3, #1
 800274c:	e000      	b.n	8002750 <xQueueGenericSendFromISR+0x78>
 800274e:	2300      	movs	r3, #0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10c      	bne.n	800276e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8002754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002758:	b672      	cpsid	i
 800275a:	f383 8811 	msr	BASEPRI, r3
 800275e:	f3bf 8f6f 	isb	sy
 8002762:	f3bf 8f4f 	dsb	sy
 8002766:	b662      	cpsie	i
 8002768:	61fb      	str	r3, [r7, #28]
}
 800276a:	bf00      	nop
 800276c:	e7fe      	b.n	800276c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800276e:	f001 fff5 	bl	800475c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002772:	f3ef 8211 	mrs	r2, BASEPRI
 8002776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800277a:	b672      	cpsid	i
 800277c:	f383 8811 	msr	BASEPRI, r3
 8002780:	f3bf 8f6f 	isb	sy
 8002784:	f3bf 8f4f 	dsb	sy
 8002788:	b662      	cpsie	i
 800278a:	61ba      	str	r2, [r7, #24]
 800278c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800278e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002790:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279a:	429a      	cmp	r2, r3
 800279c:	d302      	bcc.n	80027a4 <xQueueGenericSendFromISR+0xcc>
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d12c      	bne.n	80027fe <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80027a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	68b9      	ldr	r1, [r7, #8]
 80027b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027b4:	f000 f916 	bl	80029e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80027b8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80027bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c0:	d112      	bne.n	80027e8 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d016      	beq.n	80027f8 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027cc:	3324      	adds	r3, #36	; 0x24
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 ffca 	bl	8003768 <xTaskRemoveFromEventList>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00e      	beq.n	80027f8 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00b      	beq.n	80027f8 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	e007      	b.n	80027f8 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80027e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80027ec:	3301      	adds	r3, #1
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	b25a      	sxtb	r2, r3
 80027f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80027f8:	2301      	movs	r3, #1
 80027fa:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80027fc:	e001      	b.n	8002802 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	637b      	str	r3, [r7, #52]	; 0x34
 8002802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002804:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800280c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800280e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002810:	4618      	mov	r0, r3
 8002812:	3738      	adds	r7, #56	; 0x38
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08c      	sub	sp, #48	; 0x30
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002824:	2300      	movs	r3, #0
 8002826:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800282c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10c      	bne.n	800284c <xQueueReceive+0x34>
	__asm volatile
 8002832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002836:	b672      	cpsid	i
 8002838:	f383 8811 	msr	BASEPRI, r3
 800283c:	f3bf 8f6f 	isb	sy
 8002840:	f3bf 8f4f 	dsb	sy
 8002844:	b662      	cpsie	i
 8002846:	623b      	str	r3, [r7, #32]
}
 8002848:	bf00      	nop
 800284a:	e7fe      	b.n	800284a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d103      	bne.n	800285a <xQueueReceive+0x42>
 8002852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <xQueueReceive+0x46>
 800285a:	2301      	movs	r3, #1
 800285c:	e000      	b.n	8002860 <xQueueReceive+0x48>
 800285e:	2300      	movs	r3, #0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10c      	bne.n	800287e <xQueueReceive+0x66>
	__asm volatile
 8002864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002868:	b672      	cpsid	i
 800286a:	f383 8811 	msr	BASEPRI, r3
 800286e:	f3bf 8f6f 	isb	sy
 8002872:	f3bf 8f4f 	dsb	sy
 8002876:	b662      	cpsie	i
 8002878:	61fb      	str	r3, [r7, #28]
}
 800287a:	bf00      	nop
 800287c:	e7fe      	b.n	800287c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800287e:	f001 f939 	bl	8003af4 <xTaskGetSchedulerState>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d102      	bne.n	800288e <xQueueReceive+0x76>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <xQueueReceive+0x7a>
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <xQueueReceive+0x7c>
 8002892:	2300      	movs	r3, #0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10c      	bne.n	80028b2 <xQueueReceive+0x9a>
	__asm volatile
 8002898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800289c:	b672      	cpsid	i
 800289e:	f383 8811 	msr	BASEPRI, r3
 80028a2:	f3bf 8f6f 	isb	sy
 80028a6:	f3bf 8f4f 	dsb	sy
 80028aa:	b662      	cpsie	i
 80028ac:	61bb      	str	r3, [r7, #24]
}
 80028ae:	bf00      	nop
 80028b0:	e7fe      	b.n	80028b0 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80028b2:	f001 fe6b 	bl	800458c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d01f      	beq.n	8002902 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80028c2:	68b9      	ldr	r1, [r7, #8]
 80028c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028c6:	f000 f8f7 	bl	8002ab8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	1e5a      	subs	r2, r3, #1
 80028ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00f      	beq.n	80028fa <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028dc:	3310      	adds	r3, #16
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 ff42 	bl	8003768 <xTaskRemoveFromEventList>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d007      	beq.n	80028fa <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80028ea:	4b3d      	ldr	r3, [pc, #244]	; (80029e0 <xQueueReceive+0x1c8>)
 80028ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	f3bf 8f4f 	dsb	sy
 80028f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80028fa:	f001 fe7b 	bl	80045f4 <vPortExitCritical>
				return pdPASS;
 80028fe:	2301      	movs	r3, #1
 8002900:	e069      	b.n	80029d6 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d103      	bne.n	8002910 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002908:	f001 fe74 	bl	80045f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800290c:	2300      	movs	r3, #0
 800290e:	e062      	b.n	80029d6 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002912:	2b00      	cmp	r3, #0
 8002914:	d106      	bne.n	8002924 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002916:	f107 0310 	add.w	r3, r7, #16
 800291a:	4618      	mov	r0, r3
 800291c:	f000 ff8a 	bl	8003834 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002920:	2301      	movs	r3, #1
 8002922:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002924:	f001 fe66 	bl	80045f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002928:	f000 fcf0 	bl	800330c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800292c:	f001 fe2e 	bl	800458c <vPortEnterCritical>
 8002930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002932:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002936:	b25b      	sxtb	r3, r3
 8002938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800293c:	d103      	bne.n	8002946 <xQueueReceive+0x12e>
 800293e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002948:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800294c:	b25b      	sxtb	r3, r3
 800294e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002952:	d103      	bne.n	800295c <xQueueReceive+0x144>
 8002954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800295c:	f001 fe4a 	bl	80045f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002960:	1d3a      	adds	r2, r7, #4
 8002962:	f107 0310 	add.w	r3, r7, #16
 8002966:	4611      	mov	r1, r2
 8002968:	4618      	mov	r0, r3
 800296a:	f000 ff79 	bl	8003860 <xTaskCheckForTimeOut>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d123      	bne.n	80029bc <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002974:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002976:	f000 f917 	bl	8002ba8 <prvIsQueueEmpty>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d017      	beq.n	80029b0 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002982:	3324      	adds	r3, #36	; 0x24
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	4611      	mov	r1, r2
 8002988:	4618      	mov	r0, r3
 800298a:	f000 fe99 	bl	80036c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800298e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002990:	f000 f8b8 	bl	8002b04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002994:	f000 fcc8 	bl	8003328 <xTaskResumeAll>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d189      	bne.n	80028b2 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800299e:	4b10      	ldr	r3, [pc, #64]	; (80029e0 <xQueueReceive+0x1c8>)
 80029a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	f3bf 8f4f 	dsb	sy
 80029aa:	f3bf 8f6f 	isb	sy
 80029ae:	e780      	b.n	80028b2 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80029b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029b2:	f000 f8a7 	bl	8002b04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80029b6:	f000 fcb7 	bl	8003328 <xTaskResumeAll>
 80029ba:	e77a      	b.n	80028b2 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80029bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029be:	f000 f8a1 	bl	8002b04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80029c2:	f000 fcb1 	bl	8003328 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029c8:	f000 f8ee 	bl	8002ba8 <prvIsQueueEmpty>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f43f af6f 	beq.w	80028b2 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80029d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3730      	adds	r7, #48	; 0x30
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	e000ed04 	.word	0xe000ed04

080029e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10d      	bne.n	8002a1e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d14d      	bne.n	8002aa6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f001 f88e 	bl	8003b30 <xTaskPriorityDisinherit>
 8002a14:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	609a      	str	r2, [r3, #8]
 8002a1c:	e043      	b.n	8002aa6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d119      	bne.n	8002a58 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6858      	ldr	r0, [r3, #4]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	68b9      	ldr	r1, [r7, #8]
 8002a30:	f002 f8e0 	bl	8004bf4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	441a      	add	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d32b      	bcc.n	8002aa6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	605a      	str	r2, [r3, #4]
 8002a56:	e026      	b.n	8002aa6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	68d8      	ldr	r0, [r3, #12]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	461a      	mov	r2, r3
 8002a62:	68b9      	ldr	r1, [r7, #8]
 8002a64:	f002 f8c6 	bl	8004bf4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	68da      	ldr	r2, [r3, #12]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	425b      	negs	r3, r3
 8002a72:	441a      	add	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	68da      	ldr	r2, [r3, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d207      	bcs.n	8002a94 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8c:	425b      	negs	r3, r3
 8002a8e:	441a      	add	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d105      	bne.n	8002aa6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d002      	beq.n	8002aa6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002aae:	697b      	ldr	r3, [r7, #20]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3718      	adds	r7, #24
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d018      	beq.n	8002afc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	441a      	add	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68da      	ldr	r2, [r3, #12]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d303      	bcc.n	8002aec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68d9      	ldr	r1, [r3, #12]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af4:	461a      	mov	r2, r3
 8002af6:	6838      	ldr	r0, [r7, #0]
 8002af8:	f002 f87c 	bl	8004bf4 <memcpy>
	}
}
 8002afc:	bf00      	nop
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002b0c:	f001 fd3e 	bl	800458c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b16:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b18:	e011      	b.n	8002b3e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d012      	beq.n	8002b48 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	3324      	adds	r3, #36	; 0x24
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 fe1e 	bl	8003768 <xTaskRemoveFromEventList>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002b32:	f000 fefb 	bl	800392c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	dce9      	bgt.n	8002b1a <prvUnlockQueue+0x16>
 8002b46:	e000      	b.n	8002b4a <prvUnlockQueue+0x46>
					break;
 8002b48:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	22ff      	movs	r2, #255	; 0xff
 8002b4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002b52:	f001 fd4f 	bl	80045f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002b56:	f001 fd19 	bl	800458c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b60:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b62:	e011      	b.n	8002b88 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d012      	beq.n	8002b92 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	3310      	adds	r3, #16
 8002b70:	4618      	mov	r0, r3
 8002b72:	f000 fdf9 	bl	8003768 <xTaskRemoveFromEventList>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002b7c:	f000 fed6 	bl	800392c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002b80:	7bbb      	ldrb	r3, [r7, #14]
 8002b82:	3b01      	subs	r3, #1
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	dce9      	bgt.n	8002b64 <prvUnlockQueue+0x60>
 8002b90:	e000      	b.n	8002b94 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002b92:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	22ff      	movs	r2, #255	; 0xff
 8002b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002b9c:	f001 fd2a 	bl	80045f4 <vPortExitCritical>
}
 8002ba0:	bf00      	nop
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002bb0:	f001 fcec 	bl	800458c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d102      	bne.n	8002bc2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	e001      	b.n	8002bc6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002bc6:	f001 fd15 	bl	80045f4 <vPortExitCritical>

	return xReturn;
 8002bca:	68fb      	ldr	r3, [r7, #12]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002bdc:	f001 fcd6 	bl	800458c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d102      	bne.n	8002bf2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002bec:	2301      	movs	r3, #1
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	e001      	b.n	8002bf6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002bf6:	f001 fcfd 	bl	80045f4 <vPortExitCritical>

	return xReturn;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	e014      	b.n	8002c3e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002c14:	4a0f      	ldr	r2, [pc, #60]	; (8002c54 <vQueueAddToRegistry+0x50>)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d10b      	bne.n	8002c38 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002c20:	490c      	ldr	r1, [pc, #48]	; (8002c54 <vQueueAddToRegistry+0x50>)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002c2a:	4a0a      	ldr	r2, [pc, #40]	; (8002c54 <vQueueAddToRegistry+0x50>)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	4413      	add	r3, r2
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002c36:	e006      	b.n	8002c46 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	60fb      	str	r3, [r7, #12]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2b07      	cmp	r3, #7
 8002c42:	d9e7      	bls.n	8002c14 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002c44:	bf00      	nop
 8002c46:	bf00      	nop
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	20000740 	.word	0x20000740

08002c58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002c68:	f001 fc90 	bl	800458c <vPortEnterCritical>
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c72:	b25b      	sxtb	r3, r3
 8002c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c78:	d103      	bne.n	8002c82 <vQueueWaitForMessageRestricted+0x2a>
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c88:	b25b      	sxtb	r3, r3
 8002c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c8e:	d103      	bne.n	8002c98 <vQueueWaitForMessageRestricted+0x40>
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c98:	f001 fcac 	bl	80045f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d106      	bne.n	8002cb2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	3324      	adds	r3, #36	; 0x24
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	68b9      	ldr	r1, [r7, #8]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f000 fd2d 	bl	800370c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002cb2:	6978      	ldr	r0, [r7, #20]
 8002cb4:	f7ff ff26 	bl	8002b04 <prvUnlockQueue>
	}
 8002cb8:	bf00      	nop
 8002cba:	3718      	adds	r7, #24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b08e      	sub	sp, #56	; 0x38
 8002cc4:	af04      	add	r7, sp, #16
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
 8002ccc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10c      	bne.n	8002cee <xTaskCreateStatic+0x2e>
	__asm volatile
 8002cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd8:	b672      	cpsid	i
 8002cda:	f383 8811 	msr	BASEPRI, r3
 8002cde:	f3bf 8f6f 	isb	sy
 8002ce2:	f3bf 8f4f 	dsb	sy
 8002ce6:	b662      	cpsie	i
 8002ce8:	623b      	str	r3, [r7, #32]
}
 8002cea:	bf00      	nop
 8002cec:	e7fe      	b.n	8002cec <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8002cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10c      	bne.n	8002d0e <xTaskCreateStatic+0x4e>
	__asm volatile
 8002cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf8:	b672      	cpsid	i
 8002cfa:	f383 8811 	msr	BASEPRI, r3
 8002cfe:	f3bf 8f6f 	isb	sy
 8002d02:	f3bf 8f4f 	dsb	sy
 8002d06:	b662      	cpsie	i
 8002d08:	61fb      	str	r3, [r7, #28]
}
 8002d0a:	bf00      	nop
 8002d0c:	e7fe      	b.n	8002d0c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002d0e:	235c      	movs	r3, #92	; 0x5c
 8002d10:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	2b5c      	cmp	r3, #92	; 0x5c
 8002d16:	d00c      	beq.n	8002d32 <xTaskCreateStatic+0x72>
	__asm volatile
 8002d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d1c:	b672      	cpsid	i
 8002d1e:	f383 8811 	msr	BASEPRI, r3
 8002d22:	f3bf 8f6f 	isb	sy
 8002d26:	f3bf 8f4f 	dsb	sy
 8002d2a:	b662      	cpsie	i
 8002d2c:	61bb      	str	r3, [r7, #24]
}
 8002d2e:	bf00      	nop
 8002d30:	e7fe      	b.n	8002d30 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002d32:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d01e      	beq.n	8002d78 <xTaskCreateStatic+0xb8>
 8002d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d01b      	beq.n	8002d78 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d42:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d48:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002d52:	2300      	movs	r3, #0
 8002d54:	9303      	str	r3, [sp, #12]
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	9302      	str	r3, [sp, #8]
 8002d5a:	f107 0314 	add.w	r3, r7, #20
 8002d5e:	9301      	str	r3, [sp, #4]
 8002d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	68b9      	ldr	r1, [r7, #8]
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 f850 	bl	8002e10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d72:	f000 f8df 	bl	8002f34 <prvAddNewTaskToReadyList>
 8002d76:	e001      	b.n	8002d7c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002d7c:	697b      	ldr	r3, [r7, #20]
	}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3728      	adds	r7, #40	; 0x28
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b08c      	sub	sp, #48	; 0x30
 8002d8a:	af04      	add	r7, sp, #16
 8002d8c:	60f8      	str	r0, [r7, #12]
 8002d8e:	60b9      	str	r1, [r7, #8]
 8002d90:	603b      	str	r3, [r7, #0]
 8002d92:	4613      	mov	r3, r2
 8002d94:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002d96:	88fb      	ldrh	r3, [r7, #6]
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f001 fd22 	bl	80047e4 <pvPortMalloc>
 8002da0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00e      	beq.n	8002dc6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002da8:	205c      	movs	r0, #92	; 0x5c
 8002daa:	f001 fd1b 	bl	80047e4 <pvPortMalloc>
 8002dae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	631a      	str	r2, [r3, #48]	; 0x30
 8002dbc:	e005      	b.n	8002dca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002dbe:	6978      	ldr	r0, [r7, #20]
 8002dc0:	f001 fdda 	bl	8004978 <vPortFree>
 8002dc4:	e001      	b.n	8002dca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d017      	beq.n	8002e00 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002dd8:	88fa      	ldrh	r2, [r7, #6]
 8002dda:	2300      	movs	r3, #0
 8002ddc:	9303      	str	r3, [sp, #12]
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	9302      	str	r3, [sp, #8]
 8002de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de4:	9301      	str	r3, [sp, #4]
 8002de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	68b9      	ldr	r1, [r7, #8]
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 f80e 	bl	8002e10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002df4:	69f8      	ldr	r0, [r7, #28]
 8002df6:	f000 f89d 	bl	8002f34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	61bb      	str	r3, [r7, #24]
 8002dfe:	e002      	b.n	8002e06 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e00:	f04f 33ff 	mov.w	r3, #4294967295
 8002e04:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002e06:	69bb      	ldr	r3, [r7, #24]
	}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3720      	adds	r7, #32
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b088      	sub	sp, #32
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
 8002e1c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e20:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	461a      	mov	r2, r3
 8002e28:	21a5      	movs	r1, #165	; 0xa5
 8002e2a:	f001 fef1 	bl	8004c10 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8002e38:	440b      	add	r3, r1
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	f023 0307 	bic.w	r3, r3, #7
 8002e46:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00c      	beq.n	8002e6c <prvInitialiseNewTask+0x5c>
	__asm volatile
 8002e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e56:	b672      	cpsid	i
 8002e58:	f383 8811 	msr	BASEPRI, r3
 8002e5c:	f3bf 8f6f 	isb	sy
 8002e60:	f3bf 8f4f 	dsb	sy
 8002e64:	b662      	cpsie	i
 8002e66:	617b      	str	r3, [r7, #20]
}
 8002e68:	bf00      	nop
 8002e6a:	e7fe      	b.n	8002e6a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d01f      	beq.n	8002eb2 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e72:	2300      	movs	r3, #0
 8002e74:	61fb      	str	r3, [r7, #28]
 8002e76:	e012      	b.n	8002e9e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e78:	68ba      	ldr	r2, [r7, #8]
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	7819      	ldrb	r1, [r3, #0]
 8002e80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	4413      	add	r3, r2
 8002e86:	3334      	adds	r3, #52	; 0x34
 8002e88:	460a      	mov	r2, r1
 8002e8a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	4413      	add	r3, r2
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d006      	beq.n	8002ea6 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	61fb      	str	r3, [r7, #28]
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	2b0f      	cmp	r3, #15
 8002ea2:	d9e9      	bls.n	8002e78 <prvInitialiseNewTask+0x68>
 8002ea4:	e000      	b.n	8002ea8 <prvInitialiseNewTask+0x98>
			{
				break;
 8002ea6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002eb0:	e003      	b.n	8002eba <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ebc:	2b37      	cmp	r3, #55	; 0x37
 8002ebe:	d901      	bls.n	8002ec4 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ec0:	2337      	movs	r3, #55	; 0x37
 8002ec2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ec8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ecc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ece:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed8:	3304      	adds	r3, #4
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff f952 	bl	8002184 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee2:	3318      	adds	r3, #24
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff f94d 	bl	8002184 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002efe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f02:	2200      	movs	r2, #0
 8002f04:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	68f9      	ldr	r1, [r7, #12]
 8002f12:	69b8      	ldr	r0, [r7, #24]
 8002f14:	f001 fa2e 	bl	8004374 <pxPortInitialiseStack>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d002      	beq.n	8002f2a <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f2a:	bf00      	nop
 8002f2c:	3720      	adds	r7, #32
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
	...

08002f34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002f3c:	f001 fb26 	bl	800458c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002f40:	4b2d      	ldr	r3, [pc, #180]	; (8002ff8 <prvAddNewTaskToReadyList+0xc4>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	3301      	adds	r3, #1
 8002f46:	4a2c      	ldr	r2, [pc, #176]	; (8002ff8 <prvAddNewTaskToReadyList+0xc4>)
 8002f48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002f4a:	4b2c      	ldr	r3, [pc, #176]	; (8002ffc <prvAddNewTaskToReadyList+0xc8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d109      	bne.n	8002f66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002f52:	4a2a      	ldr	r2, [pc, #168]	; (8002ffc <prvAddNewTaskToReadyList+0xc8>)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f58:	4b27      	ldr	r3, [pc, #156]	; (8002ff8 <prvAddNewTaskToReadyList+0xc4>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d110      	bne.n	8002f82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002f60:	f000 fd08 	bl	8003974 <prvInitialiseTaskLists>
 8002f64:	e00d      	b.n	8002f82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002f66:	4b26      	ldr	r3, [pc, #152]	; (8003000 <prvAddNewTaskToReadyList+0xcc>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d109      	bne.n	8002f82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f6e:	4b23      	ldr	r3, [pc, #140]	; (8002ffc <prvAddNewTaskToReadyList+0xc8>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d802      	bhi.n	8002f82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002f7c:	4a1f      	ldr	r2, [pc, #124]	; (8002ffc <prvAddNewTaskToReadyList+0xc8>)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002f82:	4b20      	ldr	r3, [pc, #128]	; (8003004 <prvAddNewTaskToReadyList+0xd0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	3301      	adds	r3, #1
 8002f88:	4a1e      	ldr	r2, [pc, #120]	; (8003004 <prvAddNewTaskToReadyList+0xd0>)
 8002f8a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002f8c:	4b1d      	ldr	r3, [pc, #116]	; (8003004 <prvAddNewTaskToReadyList+0xd0>)
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f98:	4b1b      	ldr	r3, [pc, #108]	; (8003008 <prvAddNewTaskToReadyList+0xd4>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d903      	bls.n	8002fa8 <prvAddNewTaskToReadyList+0x74>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa4:	4a18      	ldr	r2, [pc, #96]	; (8003008 <prvAddNewTaskToReadyList+0xd4>)
 8002fa6:	6013      	str	r3, [r2, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fac:	4613      	mov	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4a15      	ldr	r2, [pc, #84]	; (800300c <prvAddNewTaskToReadyList+0xd8>)
 8002fb6:	441a      	add	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	3304      	adds	r3, #4
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	4610      	mov	r0, r2
 8002fc0:	f7ff f8ed 	bl	800219e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002fc4:	f001 fb16 	bl	80045f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002fc8:	4b0d      	ldr	r3, [pc, #52]	; (8003000 <prvAddNewTaskToReadyList+0xcc>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00e      	beq.n	8002fee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002fd0:	4b0a      	ldr	r3, [pc, #40]	; (8002ffc <prvAddNewTaskToReadyList+0xc8>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d207      	bcs.n	8002fee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002fde:	4b0c      	ldr	r3, [pc, #48]	; (8003010 <prvAddNewTaskToReadyList+0xdc>)
 8002fe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	f3bf 8f4f 	dsb	sy
 8002fea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002fee:	bf00      	nop
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	20000c54 	.word	0x20000c54
 8002ffc:	20000780 	.word	0x20000780
 8003000:	20000c60 	.word	0x20000c60
 8003004:	20000c70 	.word	0x20000c70
 8003008:	20000c5c 	.word	0x20000c5c
 800300c:	20000784 	.word	0x20000784
 8003010:	e000ed04 	.word	0xe000ed04

08003014 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800301c:	f001 fab6 	bl	800458c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d102      	bne.n	800302c <vTaskDelete+0x18>
 8003026:	4b2d      	ldr	r3, [pc, #180]	; (80030dc <vTaskDelete+0xc8>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	e000      	b.n	800302e <vTaskDelete+0x1a>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	3304      	adds	r3, #4
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff f90f 	bl	8002258 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303e:	2b00      	cmp	r3, #0
 8003040:	d004      	beq.n	800304c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	3318      	adds	r3, #24
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff f906 	bl	8002258 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800304c:	4b24      	ldr	r3, [pc, #144]	; (80030e0 <vTaskDelete+0xcc>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	3301      	adds	r3, #1
 8003052:	4a23      	ldr	r2, [pc, #140]	; (80030e0 <vTaskDelete+0xcc>)
 8003054:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8003056:	4b21      	ldr	r3, [pc, #132]	; (80030dc <vTaskDelete+0xc8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	429a      	cmp	r2, r3
 800305e:	d10b      	bne.n	8003078 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	3304      	adds	r3, #4
 8003064:	4619      	mov	r1, r3
 8003066:	481f      	ldr	r0, [pc, #124]	; (80030e4 <vTaskDelete+0xd0>)
 8003068:	f7ff f899 	bl	800219e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800306c:	4b1e      	ldr	r3, [pc, #120]	; (80030e8 <vTaskDelete+0xd4>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	3301      	adds	r3, #1
 8003072:	4a1d      	ldr	r2, [pc, #116]	; (80030e8 <vTaskDelete+0xd4>)
 8003074:	6013      	str	r3, [r2, #0]
 8003076:	e009      	b.n	800308c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8003078:	4b1c      	ldr	r3, [pc, #112]	; (80030ec <vTaskDelete+0xd8>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	3b01      	subs	r3, #1
 800307e:	4a1b      	ldr	r2, [pc, #108]	; (80030ec <vTaskDelete+0xd8>)
 8003080:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f000 fce4 	bl	8003a50 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8003088:	f000 fd14 	bl	8003ab4 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800308c:	f001 fab2 	bl	80045f4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8003090:	4b17      	ldr	r3, [pc, #92]	; (80030f0 <vTaskDelete+0xdc>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d01d      	beq.n	80030d4 <vTaskDelete+0xc0>
		{
			if( pxTCB == pxCurrentTCB )
 8003098:	4b10      	ldr	r3, [pc, #64]	; (80030dc <vTaskDelete+0xc8>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d118      	bne.n	80030d4 <vTaskDelete+0xc0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80030a2:	4b14      	ldr	r3, [pc, #80]	; (80030f4 <vTaskDelete+0xe0>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00c      	beq.n	80030c4 <vTaskDelete+0xb0>
	__asm volatile
 80030aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ae:	b672      	cpsid	i
 80030b0:	f383 8811 	msr	BASEPRI, r3
 80030b4:	f3bf 8f6f 	isb	sy
 80030b8:	f3bf 8f4f 	dsb	sy
 80030bc:	b662      	cpsie	i
 80030be:	60bb      	str	r3, [r7, #8]
}
 80030c0:	bf00      	nop
 80030c2:	e7fe      	b.n	80030c2 <vTaskDelete+0xae>
				portYIELD_WITHIN_API();
 80030c4:	4b0c      	ldr	r3, [pc, #48]	; (80030f8 <vTaskDelete+0xe4>)
 80030c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	f3bf 8f4f 	dsb	sy
 80030d0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80030d4:	bf00      	nop
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	20000780 	.word	0x20000780
 80030e0:	20000c70 	.word	0x20000c70
 80030e4:	20000c28 	.word	0x20000c28
 80030e8:	20000c3c 	.word	0x20000c3c
 80030ec:	20000c54 	.word	0x20000c54
 80030f0:	20000c60 	.word	0x20000c60
 80030f4:	20000c7c 	.word	0x20000c7c
 80030f8:	e000ed04 	.word	0xe000ed04

080030fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003104:	2300      	movs	r3, #0
 8003106:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d019      	beq.n	8003142 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800310e:	4b14      	ldr	r3, [pc, #80]	; (8003160 <vTaskDelay+0x64>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00c      	beq.n	8003130 <vTaskDelay+0x34>
	__asm volatile
 8003116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311a:	b672      	cpsid	i
 800311c:	f383 8811 	msr	BASEPRI, r3
 8003120:	f3bf 8f6f 	isb	sy
 8003124:	f3bf 8f4f 	dsb	sy
 8003128:	b662      	cpsie	i
 800312a:	60bb      	str	r3, [r7, #8]
}
 800312c:	bf00      	nop
 800312e:	e7fe      	b.n	800312e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8003130:	f000 f8ec 	bl	800330c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003134:	2100      	movs	r1, #0
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 fd6c 	bl	8003c14 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800313c:	f000 f8f4 	bl	8003328 <xTaskResumeAll>
 8003140:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d107      	bne.n	8003158 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8003148:	4b06      	ldr	r3, [pc, #24]	; (8003164 <vTaskDelay+0x68>)
 800314a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	f3bf 8f4f 	dsb	sy
 8003154:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003158:	bf00      	nop
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	20000c7c 	.word	0x20000c7c
 8003164:	e000ed04 	.word	0xe000ed04

08003168 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8003168:	b580      	push	{r7, lr}
 800316a:	b088      	sub	sp, #32
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10c      	bne.n	8003194 <eTaskGetState+0x2c>
	__asm volatile
 800317a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317e:	b672      	cpsid	i
 8003180:	f383 8811 	msr	BASEPRI, r3
 8003184:	f3bf 8f6f 	isb	sy
 8003188:	f3bf 8f4f 	dsb	sy
 800318c:	b662      	cpsie	i
 800318e:	60bb      	str	r3, [r7, #8]
}
 8003190:	bf00      	nop
 8003192:	e7fe      	b.n	8003192 <eTaskGetState+0x2a>

		if( pxTCB == pxCurrentTCB )
 8003194:	4b23      	ldr	r3, [pc, #140]	; (8003224 <eTaskGetState+0xbc>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	429a      	cmp	r2, r3
 800319c:	d102      	bne.n	80031a4 <eTaskGetState+0x3c>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800319e:	2300      	movs	r3, #0
 80031a0:	77fb      	strb	r3, [r7, #31]
 80031a2:	e03a      	b.n	800321a <eTaskGetState+0xb2>
		}
		else
		{
			taskENTER_CRITICAL();
 80031a4:	f001 f9f2 	bl	800458c <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80031ae:	4b1e      	ldr	r3, [pc, #120]	; (8003228 <eTaskGetState+0xc0>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80031b4:	4b1d      	ldr	r3, [pc, #116]	; (800322c <eTaskGetState+0xc4>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80031ba:	f001 fa1b 	bl	80045f4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d003      	beq.n	80031ce <eTaskGetState+0x66>
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d102      	bne.n	80031d4 <eTaskGetState+0x6c>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80031ce:	2302      	movs	r3, #2
 80031d0:	77fb      	strb	r3, [r7, #31]
 80031d2:	e022      	b.n	800321a <eTaskGetState+0xb2>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	4a16      	ldr	r2, [pc, #88]	; (8003230 <eTaskGetState+0xc8>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d112      	bne.n	8003202 <eTaskGetState+0x9a>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10b      	bne.n	80031fc <eTaskGetState+0x94>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d102      	bne.n	80031f6 <eTaskGetState+0x8e>
							{
								eReturn = eBlocked;
 80031f0:	2302      	movs	r3, #2
 80031f2:	77fb      	strb	r3, [r7, #31]
 80031f4:	e011      	b.n	800321a <eTaskGetState+0xb2>
							}
							else
							{
								eReturn = eSuspended;
 80031f6:	2303      	movs	r3, #3
 80031f8:	77fb      	strb	r3, [r7, #31]
 80031fa:	e00e      	b.n	800321a <eTaskGetState+0xb2>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 80031fc:	2302      	movs	r3, #2
 80031fe:	77fb      	strb	r3, [r7, #31]
 8003200:	e00b      	b.n	800321a <eTaskGetState+0xb2>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	4a0b      	ldr	r2, [pc, #44]	; (8003234 <eTaskGetState+0xcc>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d002      	beq.n	8003210 <eTaskGetState+0xa8>
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d102      	bne.n	8003216 <eTaskGetState+0xae>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8003210:	2304      	movs	r3, #4
 8003212:	77fb      	strb	r3, [r7, #31]
 8003214:	e001      	b.n	800321a <eTaskGetState+0xb2>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8003216:	2301      	movs	r3, #1
 8003218:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800321a:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800321c:	4618      	mov	r0, r3
 800321e:	3720      	adds	r7, #32
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	20000780 	.word	0x20000780
 8003228:	20000c0c 	.word	0x20000c0c
 800322c:	20000c10 	.word	0x20000c10
 8003230:	20000c40 	.word	0x20000c40
 8003234:	20000c28 	.word	0x20000c28

08003238 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b08a      	sub	sp, #40	; 0x28
 800323c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800323e:	2300      	movs	r3, #0
 8003240:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003242:	2300      	movs	r3, #0
 8003244:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003246:	463a      	mov	r2, r7
 8003248:	1d39      	adds	r1, r7, #4
 800324a:	f107 0308 	add.w	r3, r7, #8
 800324e:	4618      	mov	r0, r3
 8003250:	f7fe ff44 	bl	80020dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003254:	6839      	ldr	r1, [r7, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	9202      	str	r2, [sp, #8]
 800325c:	9301      	str	r3, [sp, #4]
 800325e:	2300      	movs	r3, #0
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	2300      	movs	r3, #0
 8003264:	460a      	mov	r2, r1
 8003266:	4923      	ldr	r1, [pc, #140]	; (80032f4 <vTaskStartScheduler+0xbc>)
 8003268:	4823      	ldr	r0, [pc, #140]	; (80032f8 <vTaskStartScheduler+0xc0>)
 800326a:	f7ff fd29 	bl	8002cc0 <xTaskCreateStatic>
 800326e:	4603      	mov	r3, r0
 8003270:	4a22      	ldr	r2, [pc, #136]	; (80032fc <vTaskStartScheduler+0xc4>)
 8003272:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003274:	4b21      	ldr	r3, [pc, #132]	; (80032fc <vTaskStartScheduler+0xc4>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d002      	beq.n	8003282 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800327c:	2301      	movs	r3, #1
 800327e:	617b      	str	r3, [r7, #20]
 8003280:	e001      	b.n	8003286 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d102      	bne.n	8003292 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800328c:	f000 fd16 	bl	8003cbc <xTimerCreateTimerTask>
 8003290:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d118      	bne.n	80032ca <vTaskStartScheduler+0x92>
	__asm volatile
 8003298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800329c:	b672      	cpsid	i
 800329e:	f383 8811 	msr	BASEPRI, r3
 80032a2:	f3bf 8f6f 	isb	sy
 80032a6:	f3bf 8f4f 	dsb	sy
 80032aa:	b662      	cpsie	i
 80032ac:	613b      	str	r3, [r7, #16]
}
 80032ae:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80032b0:	4b13      	ldr	r3, [pc, #76]	; (8003300 <vTaskStartScheduler+0xc8>)
 80032b2:	f04f 32ff 	mov.w	r2, #4294967295
 80032b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80032b8:	4b12      	ldr	r3, [pc, #72]	; (8003304 <vTaskStartScheduler+0xcc>)
 80032ba:	2201      	movs	r2, #1
 80032bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80032be:	4b12      	ldr	r3, [pc, #72]	; (8003308 <vTaskStartScheduler+0xd0>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80032c4:	f001 f8e4 	bl	8004490 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80032c8:	e010      	b.n	80032ec <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d0:	d10c      	bne.n	80032ec <vTaskStartScheduler+0xb4>
	__asm volatile
 80032d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d6:	b672      	cpsid	i
 80032d8:	f383 8811 	msr	BASEPRI, r3
 80032dc:	f3bf 8f6f 	isb	sy
 80032e0:	f3bf 8f4f 	dsb	sy
 80032e4:	b662      	cpsie	i
 80032e6:	60fb      	str	r3, [r7, #12]
}
 80032e8:	bf00      	nop
 80032ea:	e7fe      	b.n	80032ea <vTaskStartScheduler+0xb2>
}
 80032ec:	bf00      	nop
 80032ee:	3718      	adds	r7, #24
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	08004c54 	.word	0x08004c54
 80032f8:	08003945 	.word	0x08003945
 80032fc:	20000c78 	.word	0x20000c78
 8003300:	20000c74 	.word	0x20000c74
 8003304:	20000c60 	.word	0x20000c60
 8003308:	20000c58 	.word	0x20000c58

0800330c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003310:	4b04      	ldr	r3, [pc, #16]	; (8003324 <vTaskSuspendAll+0x18>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	3301      	adds	r3, #1
 8003316:	4a03      	ldr	r2, [pc, #12]	; (8003324 <vTaskSuspendAll+0x18>)
 8003318:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800331a:	bf00      	nop
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	20000c7c 	.word	0x20000c7c

08003328 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800332e:	2300      	movs	r3, #0
 8003330:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003332:	2300      	movs	r3, #0
 8003334:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003336:	4b43      	ldr	r3, [pc, #268]	; (8003444 <xTaskResumeAll+0x11c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10c      	bne.n	8003358 <xTaskResumeAll+0x30>
	__asm volatile
 800333e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003342:	b672      	cpsid	i
 8003344:	f383 8811 	msr	BASEPRI, r3
 8003348:	f3bf 8f6f 	isb	sy
 800334c:	f3bf 8f4f 	dsb	sy
 8003350:	b662      	cpsie	i
 8003352:	603b      	str	r3, [r7, #0]
}
 8003354:	bf00      	nop
 8003356:	e7fe      	b.n	8003356 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003358:	f001 f918 	bl	800458c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800335c:	4b39      	ldr	r3, [pc, #228]	; (8003444 <xTaskResumeAll+0x11c>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	3b01      	subs	r3, #1
 8003362:	4a38      	ldr	r2, [pc, #224]	; (8003444 <xTaskResumeAll+0x11c>)
 8003364:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003366:	4b37      	ldr	r3, [pc, #220]	; (8003444 <xTaskResumeAll+0x11c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d162      	bne.n	8003434 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800336e:	4b36      	ldr	r3, [pc, #216]	; (8003448 <xTaskResumeAll+0x120>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d05e      	beq.n	8003434 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003376:	e02f      	b.n	80033d8 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003378:	4b34      	ldr	r3, [pc, #208]	; (800344c <xTaskResumeAll+0x124>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	3318      	adds	r3, #24
 8003384:	4618      	mov	r0, r3
 8003386:	f7fe ff67 	bl	8002258 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	3304      	adds	r3, #4
 800338e:	4618      	mov	r0, r3
 8003390:	f7fe ff62 	bl	8002258 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003398:	4b2d      	ldr	r3, [pc, #180]	; (8003450 <xTaskResumeAll+0x128>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	429a      	cmp	r2, r3
 800339e:	d903      	bls.n	80033a8 <xTaskResumeAll+0x80>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a4:	4a2a      	ldr	r2, [pc, #168]	; (8003450 <xTaskResumeAll+0x128>)
 80033a6:	6013      	str	r3, [r2, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ac:	4613      	mov	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4a27      	ldr	r2, [pc, #156]	; (8003454 <xTaskResumeAll+0x12c>)
 80033b6:	441a      	add	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	3304      	adds	r3, #4
 80033bc:	4619      	mov	r1, r3
 80033be:	4610      	mov	r0, r2
 80033c0:	f7fe feed 	bl	800219e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c8:	4b23      	ldr	r3, [pc, #140]	; (8003458 <xTaskResumeAll+0x130>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d302      	bcc.n	80033d8 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80033d2:	4b22      	ldr	r3, [pc, #136]	; (800345c <xTaskResumeAll+0x134>)
 80033d4:	2201      	movs	r2, #1
 80033d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033d8:	4b1c      	ldr	r3, [pc, #112]	; (800344c <xTaskResumeAll+0x124>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1cb      	bne.n	8003378 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80033e6:	f000 fb65 	bl	8003ab4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80033ea:	4b1d      	ldr	r3, [pc, #116]	; (8003460 <xTaskResumeAll+0x138>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d010      	beq.n	8003418 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80033f6:	f000 f847 	bl	8003488 <xTaskIncrementTick>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d002      	beq.n	8003406 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8003400:	4b16      	ldr	r3, [pc, #88]	; (800345c <xTaskResumeAll+0x134>)
 8003402:	2201      	movs	r2, #1
 8003404:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	3b01      	subs	r3, #1
 800340a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f1      	bne.n	80033f6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8003412:	4b13      	ldr	r3, [pc, #76]	; (8003460 <xTaskResumeAll+0x138>)
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003418:	4b10      	ldr	r3, [pc, #64]	; (800345c <xTaskResumeAll+0x134>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d009      	beq.n	8003434 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003420:	2301      	movs	r3, #1
 8003422:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003424:	4b0f      	ldr	r3, [pc, #60]	; (8003464 <xTaskResumeAll+0x13c>)
 8003426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	f3bf 8f4f 	dsb	sy
 8003430:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003434:	f001 f8de 	bl	80045f4 <vPortExitCritical>

	return xAlreadyYielded;
 8003438:	68bb      	ldr	r3, [r7, #8]
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	20000c7c 	.word	0x20000c7c
 8003448:	20000c54 	.word	0x20000c54
 800344c:	20000c14 	.word	0x20000c14
 8003450:	20000c5c 	.word	0x20000c5c
 8003454:	20000784 	.word	0x20000784
 8003458:	20000780 	.word	0x20000780
 800345c:	20000c68 	.word	0x20000c68
 8003460:	20000c64 	.word	0x20000c64
 8003464:	e000ed04 	.word	0xe000ed04

08003468 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800346e:	4b05      	ldr	r3, [pc, #20]	; (8003484 <xTaskGetTickCount+0x1c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003474:	687b      	ldr	r3, [r7, #4]
}
 8003476:	4618      	mov	r0, r3
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	20000c58 	.word	0x20000c58

08003488 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800348e:	2300      	movs	r3, #0
 8003490:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003492:	4b50      	ldr	r3, [pc, #320]	; (80035d4 <xTaskIncrementTick+0x14c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	f040 808b 	bne.w	80035b2 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800349c:	4b4e      	ldr	r3, [pc, #312]	; (80035d8 <xTaskIncrementTick+0x150>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	3301      	adds	r3, #1
 80034a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80034a4:	4a4c      	ldr	r2, [pc, #304]	; (80035d8 <xTaskIncrementTick+0x150>)
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d122      	bne.n	80034f6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80034b0:	4b4a      	ldr	r3, [pc, #296]	; (80035dc <xTaskIncrementTick+0x154>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00c      	beq.n	80034d4 <xTaskIncrementTick+0x4c>
	__asm volatile
 80034ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034be:	b672      	cpsid	i
 80034c0:	f383 8811 	msr	BASEPRI, r3
 80034c4:	f3bf 8f6f 	isb	sy
 80034c8:	f3bf 8f4f 	dsb	sy
 80034cc:	b662      	cpsie	i
 80034ce:	603b      	str	r3, [r7, #0]
}
 80034d0:	bf00      	nop
 80034d2:	e7fe      	b.n	80034d2 <xTaskIncrementTick+0x4a>
 80034d4:	4b41      	ldr	r3, [pc, #260]	; (80035dc <xTaskIncrementTick+0x154>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	60fb      	str	r3, [r7, #12]
 80034da:	4b41      	ldr	r3, [pc, #260]	; (80035e0 <xTaskIncrementTick+0x158>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a3f      	ldr	r2, [pc, #252]	; (80035dc <xTaskIncrementTick+0x154>)
 80034e0:	6013      	str	r3, [r2, #0]
 80034e2:	4a3f      	ldr	r2, [pc, #252]	; (80035e0 <xTaskIncrementTick+0x158>)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6013      	str	r3, [r2, #0]
 80034e8:	4b3e      	ldr	r3, [pc, #248]	; (80035e4 <xTaskIncrementTick+0x15c>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	3301      	adds	r3, #1
 80034ee:	4a3d      	ldr	r2, [pc, #244]	; (80035e4 <xTaskIncrementTick+0x15c>)
 80034f0:	6013      	str	r3, [r2, #0]
 80034f2:	f000 fadf 	bl	8003ab4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80034f6:	4b3c      	ldr	r3, [pc, #240]	; (80035e8 <xTaskIncrementTick+0x160>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d349      	bcc.n	8003594 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003500:	4b36      	ldr	r3, [pc, #216]	; (80035dc <xTaskIncrementTick+0x154>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d104      	bne.n	8003514 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800350a:	4b37      	ldr	r3, [pc, #220]	; (80035e8 <xTaskIncrementTick+0x160>)
 800350c:	f04f 32ff 	mov.w	r2, #4294967295
 8003510:	601a      	str	r2, [r3, #0]
					break;
 8003512:	e03f      	b.n	8003594 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003514:	4b31      	ldr	r3, [pc, #196]	; (80035dc <xTaskIncrementTick+0x154>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	429a      	cmp	r2, r3
 800352a:	d203      	bcs.n	8003534 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800352c:	4a2e      	ldr	r2, [pc, #184]	; (80035e8 <xTaskIncrementTick+0x160>)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003532:	e02f      	b.n	8003594 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	3304      	adds	r3, #4
 8003538:	4618      	mov	r0, r3
 800353a:	f7fe fe8d 	bl	8002258 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003542:	2b00      	cmp	r3, #0
 8003544:	d004      	beq.n	8003550 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	3318      	adds	r3, #24
 800354a:	4618      	mov	r0, r3
 800354c:	f7fe fe84 	bl	8002258 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003554:	4b25      	ldr	r3, [pc, #148]	; (80035ec <xTaskIncrementTick+0x164>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	429a      	cmp	r2, r3
 800355a:	d903      	bls.n	8003564 <xTaskIncrementTick+0xdc>
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003560:	4a22      	ldr	r2, [pc, #136]	; (80035ec <xTaskIncrementTick+0x164>)
 8003562:	6013      	str	r3, [r2, #0]
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003568:	4613      	mov	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4413      	add	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4a1f      	ldr	r2, [pc, #124]	; (80035f0 <xTaskIncrementTick+0x168>)
 8003572:	441a      	add	r2, r3
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	3304      	adds	r3, #4
 8003578:	4619      	mov	r1, r3
 800357a:	4610      	mov	r0, r2
 800357c:	f7fe fe0f 	bl	800219e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003584:	4b1b      	ldr	r3, [pc, #108]	; (80035f4 <xTaskIncrementTick+0x16c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358a:	429a      	cmp	r2, r3
 800358c:	d3b8      	bcc.n	8003500 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800358e:	2301      	movs	r3, #1
 8003590:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003592:	e7b5      	b.n	8003500 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003594:	4b17      	ldr	r3, [pc, #92]	; (80035f4 <xTaskIncrementTick+0x16c>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800359a:	4915      	ldr	r1, [pc, #84]	; (80035f0 <xTaskIncrementTick+0x168>)
 800359c:	4613      	mov	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4413      	add	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	440b      	add	r3, r1
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d907      	bls.n	80035bc <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80035ac:	2301      	movs	r3, #1
 80035ae:	617b      	str	r3, [r7, #20]
 80035b0:	e004      	b.n	80035bc <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80035b2:	4b11      	ldr	r3, [pc, #68]	; (80035f8 <xTaskIncrementTick+0x170>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	3301      	adds	r3, #1
 80035b8:	4a0f      	ldr	r2, [pc, #60]	; (80035f8 <xTaskIncrementTick+0x170>)
 80035ba:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80035bc:	4b0f      	ldr	r3, [pc, #60]	; (80035fc <xTaskIncrementTick+0x174>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80035c4:	2301      	movs	r3, #1
 80035c6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80035c8:	697b      	ldr	r3, [r7, #20]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20000c7c 	.word	0x20000c7c
 80035d8:	20000c58 	.word	0x20000c58
 80035dc:	20000c0c 	.word	0x20000c0c
 80035e0:	20000c10 	.word	0x20000c10
 80035e4:	20000c6c 	.word	0x20000c6c
 80035e8:	20000c74 	.word	0x20000c74
 80035ec:	20000c5c 	.word	0x20000c5c
 80035f0:	20000784 	.word	0x20000784
 80035f4:	20000780 	.word	0x20000780
 80035f8:	20000c64 	.word	0x20000c64
 80035fc:	20000c68 	.word	0x20000c68

08003600 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003606:	4b29      	ldr	r3, [pc, #164]	; (80036ac <vTaskSwitchContext+0xac>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800360e:	4b28      	ldr	r3, [pc, #160]	; (80036b0 <vTaskSwitchContext+0xb0>)
 8003610:	2201      	movs	r2, #1
 8003612:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003614:	e043      	b.n	800369e <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8003616:	4b26      	ldr	r3, [pc, #152]	; (80036b0 <vTaskSwitchContext+0xb0>)
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800361c:	4b25      	ldr	r3, [pc, #148]	; (80036b4 <vTaskSwitchContext+0xb4>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	60fb      	str	r3, [r7, #12]
 8003622:	e012      	b.n	800364a <vTaskSwitchContext+0x4a>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10c      	bne.n	8003644 <vTaskSwitchContext+0x44>
	__asm volatile
 800362a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800362e:	b672      	cpsid	i
 8003630:	f383 8811 	msr	BASEPRI, r3
 8003634:	f3bf 8f6f 	isb	sy
 8003638:	f3bf 8f4f 	dsb	sy
 800363c:	b662      	cpsie	i
 800363e:	607b      	str	r3, [r7, #4]
}
 8003640:	bf00      	nop
 8003642:	e7fe      	b.n	8003642 <vTaskSwitchContext+0x42>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	3b01      	subs	r3, #1
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	491b      	ldr	r1, [pc, #108]	; (80036b8 <vTaskSwitchContext+0xb8>)
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	4613      	mov	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	440b      	add	r3, r1
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0e2      	beq.n	8003624 <vTaskSwitchContext+0x24>
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	4613      	mov	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4a13      	ldr	r2, [pc, #76]	; (80036b8 <vTaskSwitchContext+0xb8>)
 800366a:	4413      	add	r3, r2
 800366c:	60bb      	str	r3, [r7, #8]
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	605a      	str	r2, [r3, #4]
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	3308      	adds	r3, #8
 8003680:	429a      	cmp	r2, r3
 8003682:	d104      	bne.n	800368e <vTaskSwitchContext+0x8e>
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	605a      	str	r2, [r3, #4]
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	4a09      	ldr	r2, [pc, #36]	; (80036bc <vTaskSwitchContext+0xbc>)
 8003696:	6013      	str	r3, [r2, #0]
 8003698:	4a06      	ldr	r2, [pc, #24]	; (80036b4 <vTaskSwitchContext+0xb4>)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6013      	str	r3, [r2, #0]
}
 800369e:	bf00      	nop
 80036a0:	3714      	adds	r7, #20
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	20000c7c 	.word	0x20000c7c
 80036b0:	20000c68 	.word	0x20000c68
 80036b4:	20000c5c 	.word	0x20000c5c
 80036b8:	20000784 	.word	0x20000784
 80036bc:	20000780 	.word	0x20000780

080036c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10c      	bne.n	80036ea <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80036d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d4:	b672      	cpsid	i
 80036d6:	f383 8811 	msr	BASEPRI, r3
 80036da:	f3bf 8f6f 	isb	sy
 80036de:	f3bf 8f4f 	dsb	sy
 80036e2:	b662      	cpsie	i
 80036e4:	60fb      	str	r3, [r7, #12]
}
 80036e6:	bf00      	nop
 80036e8:	e7fe      	b.n	80036e8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80036ea:	4b07      	ldr	r3, [pc, #28]	; (8003708 <vTaskPlaceOnEventList+0x48>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	3318      	adds	r3, #24
 80036f0:	4619      	mov	r1, r3
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7fe fd77 	bl	80021e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80036f8:	2101      	movs	r1, #1
 80036fa:	6838      	ldr	r0, [r7, #0]
 80036fc:	f000 fa8a 	bl	8003c14 <prvAddCurrentTaskToDelayedList>
}
 8003700:	bf00      	nop
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	20000780 	.word	0x20000780

0800370c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10c      	bne.n	8003738 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800371e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003722:	b672      	cpsid	i
 8003724:	f383 8811 	msr	BASEPRI, r3
 8003728:	f3bf 8f6f 	isb	sy
 800372c:	f3bf 8f4f 	dsb	sy
 8003730:	b662      	cpsie	i
 8003732:	617b      	str	r3, [r7, #20]
}
 8003734:	bf00      	nop
 8003736:	e7fe      	b.n	8003736 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003738:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <vTaskPlaceOnEventListRestricted+0x58>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	3318      	adds	r3, #24
 800373e:	4619      	mov	r1, r3
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f7fe fd2c 	bl	800219e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800374c:	f04f 33ff 	mov.w	r3, #4294967295
 8003750:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	68b8      	ldr	r0, [r7, #8]
 8003756:	f000 fa5d 	bl	8003c14 <prvAddCurrentTaskToDelayedList>
	}
 800375a:	bf00      	nop
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	20000780 	.word	0x20000780

08003768 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10c      	bne.n	8003798 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800377e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003782:	b672      	cpsid	i
 8003784:	f383 8811 	msr	BASEPRI, r3
 8003788:	f3bf 8f6f 	isb	sy
 800378c:	f3bf 8f4f 	dsb	sy
 8003790:	b662      	cpsie	i
 8003792:	60fb      	str	r3, [r7, #12]
}
 8003794:	bf00      	nop
 8003796:	e7fe      	b.n	8003796 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	3318      	adds	r3, #24
 800379c:	4618      	mov	r0, r3
 800379e:	f7fe fd5b 	bl	8002258 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037a2:	4b1e      	ldr	r3, [pc, #120]	; (800381c <xTaskRemoveFromEventList+0xb4>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d11d      	bne.n	80037e6 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	3304      	adds	r3, #4
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fe fd52 	bl	8002258 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b8:	4b19      	ldr	r3, [pc, #100]	; (8003820 <xTaskRemoveFromEventList+0xb8>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d903      	bls.n	80037c8 <xTaskRemoveFromEventList+0x60>
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c4:	4a16      	ldr	r2, [pc, #88]	; (8003820 <xTaskRemoveFromEventList+0xb8>)
 80037c6:	6013      	str	r3, [r2, #0]
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037cc:	4613      	mov	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4a13      	ldr	r2, [pc, #76]	; (8003824 <xTaskRemoveFromEventList+0xbc>)
 80037d6:	441a      	add	r2, r3
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	3304      	adds	r3, #4
 80037dc:	4619      	mov	r1, r3
 80037de:	4610      	mov	r0, r2
 80037e0:	f7fe fcdd 	bl	800219e <vListInsertEnd>
 80037e4:	e005      	b.n	80037f2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	3318      	adds	r3, #24
 80037ea:	4619      	mov	r1, r3
 80037ec:	480e      	ldr	r0, [pc, #56]	; (8003828 <xTaskRemoveFromEventList+0xc0>)
 80037ee:	f7fe fcd6 	bl	800219e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f6:	4b0d      	ldr	r3, [pc, #52]	; (800382c <xTaskRemoveFromEventList+0xc4>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d905      	bls.n	800380c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003800:	2301      	movs	r3, #1
 8003802:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003804:	4b0a      	ldr	r3, [pc, #40]	; (8003830 <xTaskRemoveFromEventList+0xc8>)
 8003806:	2201      	movs	r2, #1
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	e001      	b.n	8003810 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800380c:	2300      	movs	r3, #0
 800380e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003810:	697b      	ldr	r3, [r7, #20]
}
 8003812:	4618      	mov	r0, r3
 8003814:	3718      	adds	r7, #24
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	20000c7c 	.word	0x20000c7c
 8003820:	20000c5c 	.word	0x20000c5c
 8003824:	20000784 	.word	0x20000784
 8003828:	20000c14 	.word	0x20000c14
 800382c:	20000780 	.word	0x20000780
 8003830:	20000c68 	.word	0x20000c68

08003834 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800383c:	4b06      	ldr	r3, [pc, #24]	; (8003858 <vTaskInternalSetTimeOutState+0x24>)
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003844:	4b05      	ldr	r3, [pc, #20]	; (800385c <vTaskInternalSetTimeOutState+0x28>)
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	605a      	str	r2, [r3, #4]
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	20000c6c 	.word	0x20000c6c
 800385c:	20000c58 	.word	0x20000c58

08003860 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b088      	sub	sp, #32
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10c      	bne.n	800388a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8003870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003874:	b672      	cpsid	i
 8003876:	f383 8811 	msr	BASEPRI, r3
 800387a:	f3bf 8f6f 	isb	sy
 800387e:	f3bf 8f4f 	dsb	sy
 8003882:	b662      	cpsie	i
 8003884:	613b      	str	r3, [r7, #16]
}
 8003886:	bf00      	nop
 8003888:	e7fe      	b.n	8003888 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10c      	bne.n	80038aa <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8003890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003894:	b672      	cpsid	i
 8003896:	f383 8811 	msr	BASEPRI, r3
 800389a:	f3bf 8f6f 	isb	sy
 800389e:	f3bf 8f4f 	dsb	sy
 80038a2:	b662      	cpsie	i
 80038a4:	60fb      	str	r3, [r7, #12]
}
 80038a6:	bf00      	nop
 80038a8:	e7fe      	b.n	80038a8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80038aa:	f000 fe6f 	bl	800458c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80038ae:	4b1d      	ldr	r3, [pc, #116]	; (8003924 <xTaskCheckForTimeOut+0xc4>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c6:	d102      	bne.n	80038ce <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80038c8:	2300      	movs	r3, #0
 80038ca:	61fb      	str	r3, [r7, #28]
 80038cc:	e023      	b.n	8003916 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	4b15      	ldr	r3, [pc, #84]	; (8003928 <xTaskCheckForTimeOut+0xc8>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d007      	beq.n	80038ea <xTaskCheckForTimeOut+0x8a>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d302      	bcc.n	80038ea <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80038e4:	2301      	movs	r3, #1
 80038e6:	61fb      	str	r3, [r7, #28]
 80038e8:	e015      	b.n	8003916 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d20b      	bcs.n	800390c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	1ad2      	subs	r2, r2, r3
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7ff ff97 	bl	8003834 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003906:	2300      	movs	r3, #0
 8003908:	61fb      	str	r3, [r7, #28]
 800390a:	e004      	b.n	8003916 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	2200      	movs	r2, #0
 8003910:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003912:	2301      	movs	r3, #1
 8003914:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003916:	f000 fe6d 	bl	80045f4 <vPortExitCritical>

	return xReturn;
 800391a:	69fb      	ldr	r3, [r7, #28]
}
 800391c:	4618      	mov	r0, r3
 800391e:	3720      	adds	r7, #32
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	20000c58 	.word	0x20000c58
 8003928:	20000c6c 	.word	0x20000c6c

0800392c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003930:	4b03      	ldr	r3, [pc, #12]	; (8003940 <vTaskMissedYield+0x14>)
 8003932:	2201      	movs	r2, #1
 8003934:	601a      	str	r2, [r3, #0]
}
 8003936:	bf00      	nop
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	20000c68 	.word	0x20000c68

08003944 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800394c:	f000 f852 	bl	80039f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003950:	4b06      	ldr	r3, [pc, #24]	; (800396c <prvIdleTask+0x28>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d9f9      	bls.n	800394c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003958:	4b05      	ldr	r3, [pc, #20]	; (8003970 <prvIdleTask+0x2c>)
 800395a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	f3bf 8f4f 	dsb	sy
 8003964:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003968:	e7f0      	b.n	800394c <prvIdleTask+0x8>
 800396a:	bf00      	nop
 800396c:	20000784 	.word	0x20000784
 8003970:	e000ed04 	.word	0xe000ed04

08003974 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800397a:	2300      	movs	r3, #0
 800397c:	607b      	str	r3, [r7, #4]
 800397e:	e00c      	b.n	800399a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	4613      	mov	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4413      	add	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4a12      	ldr	r2, [pc, #72]	; (80039d4 <prvInitialiseTaskLists+0x60>)
 800398c:	4413      	add	r3, r2
 800398e:	4618      	mov	r0, r3
 8003990:	f7fe fbd8 	bl	8002144 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3301      	adds	r3, #1
 8003998:	607b      	str	r3, [r7, #4]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b37      	cmp	r3, #55	; 0x37
 800399e:	d9ef      	bls.n	8003980 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80039a0:	480d      	ldr	r0, [pc, #52]	; (80039d8 <prvInitialiseTaskLists+0x64>)
 80039a2:	f7fe fbcf 	bl	8002144 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80039a6:	480d      	ldr	r0, [pc, #52]	; (80039dc <prvInitialiseTaskLists+0x68>)
 80039a8:	f7fe fbcc 	bl	8002144 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80039ac:	480c      	ldr	r0, [pc, #48]	; (80039e0 <prvInitialiseTaskLists+0x6c>)
 80039ae:	f7fe fbc9 	bl	8002144 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80039b2:	480c      	ldr	r0, [pc, #48]	; (80039e4 <prvInitialiseTaskLists+0x70>)
 80039b4:	f7fe fbc6 	bl	8002144 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80039b8:	480b      	ldr	r0, [pc, #44]	; (80039e8 <prvInitialiseTaskLists+0x74>)
 80039ba:	f7fe fbc3 	bl	8002144 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80039be:	4b0b      	ldr	r3, [pc, #44]	; (80039ec <prvInitialiseTaskLists+0x78>)
 80039c0:	4a05      	ldr	r2, [pc, #20]	; (80039d8 <prvInitialiseTaskLists+0x64>)
 80039c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80039c4:	4b0a      	ldr	r3, [pc, #40]	; (80039f0 <prvInitialiseTaskLists+0x7c>)
 80039c6:	4a05      	ldr	r2, [pc, #20]	; (80039dc <prvInitialiseTaskLists+0x68>)
 80039c8:	601a      	str	r2, [r3, #0]
}
 80039ca:	bf00      	nop
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	20000784 	.word	0x20000784
 80039d8:	20000be4 	.word	0x20000be4
 80039dc:	20000bf8 	.word	0x20000bf8
 80039e0:	20000c14 	.word	0x20000c14
 80039e4:	20000c28 	.word	0x20000c28
 80039e8:	20000c40 	.word	0x20000c40
 80039ec:	20000c0c 	.word	0x20000c0c
 80039f0:	20000c10 	.word	0x20000c10

080039f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039fa:	e019      	b.n	8003a30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80039fc:	f000 fdc6 	bl	800458c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a00:	4b10      	ldr	r3, [pc, #64]	; (8003a44 <prvCheckTasksWaitingTermination+0x50>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3304      	adds	r3, #4
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fe fc23 	bl	8002258 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003a12:	4b0d      	ldr	r3, [pc, #52]	; (8003a48 <prvCheckTasksWaitingTermination+0x54>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	4a0b      	ldr	r2, [pc, #44]	; (8003a48 <prvCheckTasksWaitingTermination+0x54>)
 8003a1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003a1c:	4b0b      	ldr	r3, [pc, #44]	; (8003a4c <prvCheckTasksWaitingTermination+0x58>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	3b01      	subs	r3, #1
 8003a22:	4a0a      	ldr	r2, [pc, #40]	; (8003a4c <prvCheckTasksWaitingTermination+0x58>)
 8003a24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003a26:	f000 fde5 	bl	80045f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f810 	bl	8003a50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a30:	4b06      	ldr	r3, [pc, #24]	; (8003a4c <prvCheckTasksWaitingTermination+0x58>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1e1      	bne.n	80039fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003a38:	bf00      	nop
 8003a3a:	bf00      	nop
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	20000c28 	.word	0x20000c28
 8003a48:	20000c54 	.word	0x20000c54
 8003a4c:	20000c3c 	.word	0x20000c3c

08003a50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d108      	bne.n	8003a74 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 ff86 	bl	8004978 <vPortFree>
				vPortFree( pxTCB );
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 ff83 	bl	8004978 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003a72:	e01a      	b.n	8003aaa <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d103      	bne.n	8003a86 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 ff7a 	bl	8004978 <vPortFree>
	}
 8003a84:	e011      	b.n	8003aaa <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d00c      	beq.n	8003aaa <prvDeleteTCB+0x5a>
	__asm volatile
 8003a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a94:	b672      	cpsid	i
 8003a96:	f383 8811 	msr	BASEPRI, r3
 8003a9a:	f3bf 8f6f 	isb	sy
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	b662      	cpsie	i
 8003aa4:	60fb      	str	r3, [r7, #12]
}
 8003aa6:	bf00      	nop
 8003aa8:	e7fe      	b.n	8003aa8 <prvDeleteTCB+0x58>
	}
 8003aaa:	bf00      	nop
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
	...

08003ab4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003aba:	4b0c      	ldr	r3, [pc, #48]	; (8003aec <prvResetNextTaskUnblockTime+0x38>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d104      	bne.n	8003ace <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ac4:	4b0a      	ldr	r3, [pc, #40]	; (8003af0 <prvResetNextTaskUnblockTime+0x3c>)
 8003ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8003aca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003acc:	e008      	b.n	8003ae0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ace:	4b07      	ldr	r3, [pc, #28]	; (8003aec <prvResetNextTaskUnblockTime+0x38>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	4a04      	ldr	r2, [pc, #16]	; (8003af0 <prvResetNextTaskUnblockTime+0x3c>)
 8003ade:	6013      	str	r3, [r2, #0]
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	20000c0c 	.word	0x20000c0c
 8003af0:	20000c74 	.word	0x20000c74

08003af4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003afa:	4b0b      	ldr	r3, [pc, #44]	; (8003b28 <xTaskGetSchedulerState+0x34>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d102      	bne.n	8003b08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003b02:	2301      	movs	r3, #1
 8003b04:	607b      	str	r3, [r7, #4]
 8003b06:	e008      	b.n	8003b1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b08:	4b08      	ldr	r3, [pc, #32]	; (8003b2c <xTaskGetSchedulerState+0x38>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d102      	bne.n	8003b16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003b10:	2302      	movs	r3, #2
 8003b12:	607b      	str	r3, [r7, #4]
 8003b14:	e001      	b.n	8003b1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003b16:	2300      	movs	r3, #0
 8003b18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003b1a:	687b      	ldr	r3, [r7, #4]
	}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	20000c60 	.word	0x20000c60
 8003b2c:	20000c7c 	.word	0x20000c7c

08003b30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d05a      	beq.n	8003bfc <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003b46:	4b30      	ldr	r3, [pc, #192]	; (8003c08 <xTaskPriorityDisinherit+0xd8>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d00c      	beq.n	8003b6a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8003b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b54:	b672      	cpsid	i
 8003b56:	f383 8811 	msr	BASEPRI, r3
 8003b5a:	f3bf 8f6f 	isb	sy
 8003b5e:	f3bf 8f4f 	dsb	sy
 8003b62:	b662      	cpsie	i
 8003b64:	60fb      	str	r3, [r7, #12]
}
 8003b66:	bf00      	nop
 8003b68:	e7fe      	b.n	8003b68 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10c      	bne.n	8003b8c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8003b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b76:	b672      	cpsid	i
 8003b78:	f383 8811 	msr	BASEPRI, r3
 8003b7c:	f3bf 8f6f 	isb	sy
 8003b80:	f3bf 8f4f 	dsb	sy
 8003b84:	b662      	cpsie	i
 8003b86:	60bb      	str	r3, [r7, #8]
}
 8003b88:	bf00      	nop
 8003b8a:	e7fe      	b.n	8003b8a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b90:	1e5a      	subs	r2, r3, #1
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d02c      	beq.n	8003bfc <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d128      	bne.n	8003bfc <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	3304      	adds	r3, #4
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fe fb52 	bl	8002258 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bcc:	4b0f      	ldr	r3, [pc, #60]	; (8003c0c <xTaskPriorityDisinherit+0xdc>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d903      	bls.n	8003bdc <xTaskPriorityDisinherit+0xac>
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd8:	4a0c      	ldr	r2, [pc, #48]	; (8003c0c <xTaskPriorityDisinherit+0xdc>)
 8003bda:	6013      	str	r3, [r2, #0]
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be0:	4613      	mov	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	4a09      	ldr	r2, [pc, #36]	; (8003c10 <xTaskPriorityDisinherit+0xe0>)
 8003bea:	441a      	add	r2, r3
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	3304      	adds	r3, #4
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	4610      	mov	r0, r2
 8003bf4:	f7fe fad3 	bl	800219e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003bfc:	697b      	ldr	r3, [r7, #20]
	}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3718      	adds	r7, #24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	20000780 	.word	0x20000780
 8003c0c:	20000c5c 	.word	0x20000c5c
 8003c10:	20000784 	.word	0x20000784

08003c14 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003c1e:	4b21      	ldr	r3, [pc, #132]	; (8003ca4 <prvAddCurrentTaskToDelayedList+0x90>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c24:	4b20      	ldr	r3, [pc, #128]	; (8003ca8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	3304      	adds	r3, #4
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7fe fb14 	bl	8002258 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c36:	d10a      	bne.n	8003c4e <prvAddCurrentTaskToDelayedList+0x3a>
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d007      	beq.n	8003c4e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c3e:	4b1a      	ldr	r3, [pc, #104]	; (8003ca8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	3304      	adds	r3, #4
 8003c44:	4619      	mov	r1, r3
 8003c46:	4819      	ldr	r0, [pc, #100]	; (8003cac <prvAddCurrentTaskToDelayedList+0x98>)
 8003c48:	f7fe faa9 	bl	800219e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003c4c:	e026      	b.n	8003c9c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4413      	add	r3, r2
 8003c54:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c56:	4b14      	ldr	r3, [pc, #80]	; (8003ca8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68ba      	ldr	r2, [r7, #8]
 8003c5c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d209      	bcs.n	8003c7a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c66:	4b12      	ldr	r3, [pc, #72]	; (8003cb0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	4b0f      	ldr	r3, [pc, #60]	; (8003ca8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	3304      	adds	r3, #4
 8003c70:	4619      	mov	r1, r3
 8003c72:	4610      	mov	r0, r2
 8003c74:	f7fe fab7 	bl	80021e6 <vListInsert>
}
 8003c78:	e010      	b.n	8003c9c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c7a:	4b0e      	ldr	r3, [pc, #56]	; (8003cb4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ca8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	3304      	adds	r3, #4
 8003c84:	4619      	mov	r1, r3
 8003c86:	4610      	mov	r0, r2
 8003c88:	f7fe faad 	bl	80021e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003c8c:	4b0a      	ldr	r3, [pc, #40]	; (8003cb8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d202      	bcs.n	8003c9c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003c96:	4a08      	ldr	r2, [pc, #32]	; (8003cb8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	6013      	str	r3, [r2, #0]
}
 8003c9c:	bf00      	nop
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	20000c58 	.word	0x20000c58
 8003ca8:	20000780 	.word	0x20000780
 8003cac:	20000c40 	.word	0x20000c40
 8003cb0:	20000c10 	.word	0x20000c10
 8003cb4:	20000c0c 	.word	0x20000c0c
 8003cb8:	20000c74 	.word	0x20000c74

08003cbc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b08a      	sub	sp, #40	; 0x28
 8003cc0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003cc6:	f000 fb15 	bl	80042f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003cca:	4b1d      	ldr	r3, [pc, #116]	; (8003d40 <xTimerCreateTimerTask+0x84>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d021      	beq.n	8003d16 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003cda:	1d3a      	adds	r2, r7, #4
 8003cdc:	f107 0108 	add.w	r1, r7, #8
 8003ce0:	f107 030c 	add.w	r3, r7, #12
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7fe fa13 	bl	8002110 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003cea:	6879      	ldr	r1, [r7, #4]
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	9202      	str	r2, [sp, #8]
 8003cf2:	9301      	str	r3, [sp, #4]
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	460a      	mov	r2, r1
 8003cfc:	4911      	ldr	r1, [pc, #68]	; (8003d44 <xTimerCreateTimerTask+0x88>)
 8003cfe:	4812      	ldr	r0, [pc, #72]	; (8003d48 <xTimerCreateTimerTask+0x8c>)
 8003d00:	f7fe ffde 	bl	8002cc0 <xTaskCreateStatic>
 8003d04:	4603      	mov	r3, r0
 8003d06:	4a11      	ldr	r2, [pc, #68]	; (8003d4c <xTimerCreateTimerTask+0x90>)
 8003d08:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003d0a:	4b10      	ldr	r3, [pc, #64]	; (8003d4c <xTimerCreateTimerTask+0x90>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003d12:	2301      	movs	r3, #1
 8003d14:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10c      	bne.n	8003d36 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8003d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d20:	b672      	cpsid	i
 8003d22:	f383 8811 	msr	BASEPRI, r3
 8003d26:	f3bf 8f6f 	isb	sy
 8003d2a:	f3bf 8f4f 	dsb	sy
 8003d2e:	b662      	cpsie	i
 8003d30:	613b      	str	r3, [r7, #16]
}
 8003d32:	bf00      	nop
 8003d34:	e7fe      	b.n	8003d34 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8003d36:	697b      	ldr	r3, [r7, #20]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3718      	adds	r7, #24
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	20000cb0 	.word	0x20000cb0
 8003d44:	08004c5c 	.word	0x08004c5c
 8003d48:	08003e8d 	.word	0x08003e8d
 8003d4c:	20000cb4 	.word	0x20000cb4

08003d50 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b08a      	sub	sp, #40	; 0x28
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
 8003d5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10c      	bne.n	8003d82 <xTimerGenericCommand+0x32>
	__asm volatile
 8003d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6c:	b672      	cpsid	i
 8003d6e:	f383 8811 	msr	BASEPRI, r3
 8003d72:	f3bf 8f6f 	isb	sy
 8003d76:	f3bf 8f4f 	dsb	sy
 8003d7a:	b662      	cpsie	i
 8003d7c:	623b      	str	r3, [r7, #32]
}
 8003d7e:	bf00      	nop
 8003d80:	e7fe      	b.n	8003d80 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003d82:	4b1a      	ldr	r3, [pc, #104]	; (8003dec <xTimerGenericCommand+0x9c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d02a      	beq.n	8003de0 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	2b05      	cmp	r3, #5
 8003d9a:	dc18      	bgt.n	8003dce <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003d9c:	f7ff feaa 	bl	8003af4 <xTaskGetSchedulerState>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d109      	bne.n	8003dba <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003da6:	4b11      	ldr	r3, [pc, #68]	; (8003dec <xTimerGenericCommand+0x9c>)
 8003da8:	6818      	ldr	r0, [r3, #0]
 8003daa:	f107 0110 	add.w	r1, r7, #16
 8003dae:	2300      	movs	r3, #0
 8003db0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003db2:	f7fe fb8b 	bl	80024cc <xQueueGenericSend>
 8003db6:	6278      	str	r0, [r7, #36]	; 0x24
 8003db8:	e012      	b.n	8003de0 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003dba:	4b0c      	ldr	r3, [pc, #48]	; (8003dec <xTimerGenericCommand+0x9c>)
 8003dbc:	6818      	ldr	r0, [r3, #0]
 8003dbe:	f107 0110 	add.w	r1, r7, #16
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f7fe fb81 	bl	80024cc <xQueueGenericSend>
 8003dca:	6278      	str	r0, [r7, #36]	; 0x24
 8003dcc:	e008      	b.n	8003de0 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003dce:	4b07      	ldr	r3, [pc, #28]	; (8003dec <xTimerGenericCommand+0x9c>)
 8003dd0:	6818      	ldr	r0, [r3, #0]
 8003dd2:	f107 0110 	add.w	r1, r7, #16
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	f7fe fc7d 	bl	80026d8 <xQueueGenericSendFromISR>
 8003dde:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3728      	adds	r7, #40	; 0x28
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	20000cb0 	.word	0x20000cb0

08003df0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b088      	sub	sp, #32
 8003df4:	af02      	add	r7, sp, #8
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dfa:	4b23      	ldr	r3, [pc, #140]	; (8003e88 <prvProcessExpiredTimer+0x98>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	3304      	adds	r3, #4
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7fe fa25 	bl	8002258 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e14:	f003 0304 	and.w	r3, r3, #4
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d024      	beq.n	8003e66 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	699a      	ldr	r2, [r3, #24]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	18d1      	adds	r1, r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	6978      	ldr	r0, [r7, #20]
 8003e2a:	f000 f8d3 	bl	8003fd4 <prvInsertTimerInActiveList>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d021      	beq.n	8003e78 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003e34:	2300      	movs	r3, #0
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	2300      	movs	r3, #0
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	6978      	ldr	r0, [r7, #20]
 8003e40:	f7ff ff86 	bl	8003d50 <xTimerGenericCommand>
 8003e44:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d115      	bne.n	8003e78 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8003e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e50:	b672      	cpsid	i
 8003e52:	f383 8811 	msr	BASEPRI, r3
 8003e56:	f3bf 8f6f 	isb	sy
 8003e5a:	f3bf 8f4f 	dsb	sy
 8003e5e:	b662      	cpsie	i
 8003e60:	60fb      	str	r3, [r7, #12]
}
 8003e62:	bf00      	nop
 8003e64:	e7fe      	b.n	8003e64 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e6c:	f023 0301 	bic.w	r3, r3, #1
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	6978      	ldr	r0, [r7, #20]
 8003e7e:	4798      	blx	r3
}
 8003e80:	bf00      	nop
 8003e82:	3718      	adds	r7, #24
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	20000ca8 	.word	0x20000ca8

08003e8c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e94:	f107 0308 	add.w	r3, r7, #8
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f000 f857 	bl	8003f4c <prvGetNextExpireTime>
 8003e9e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f000 f803 	bl	8003eb0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003eaa:	f000 f8d5 	bl	8004058 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003eae:	e7f1      	b.n	8003e94 <prvTimerTask+0x8>

08003eb0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003eba:	f7ff fa27 	bl	800330c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ebe:	f107 0308 	add.w	r3, r7, #8
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 f866 	bl	8003f94 <prvSampleTimeNow>
 8003ec8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d130      	bne.n	8003f32 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10a      	bne.n	8003eec <prvProcessTimerOrBlockTask+0x3c>
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d806      	bhi.n	8003eec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003ede:	f7ff fa23 	bl	8003328 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003ee2:	68f9      	ldr	r1, [r7, #12]
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f7ff ff83 	bl	8003df0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003eea:	e024      	b.n	8003f36 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d008      	beq.n	8003f04 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003ef2:	4b13      	ldr	r3, [pc, #76]	; (8003f40 <prvProcessTimerOrBlockTask+0x90>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d101      	bne.n	8003f00 <prvProcessTimerOrBlockTask+0x50>
 8003efc:	2301      	movs	r3, #1
 8003efe:	e000      	b.n	8003f02 <prvProcessTimerOrBlockTask+0x52>
 8003f00:	2300      	movs	r3, #0
 8003f02:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003f04:	4b0f      	ldr	r3, [pc, #60]	; (8003f44 <prvProcessTimerOrBlockTask+0x94>)
 8003f06:	6818      	ldr	r0, [r3, #0]
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	4619      	mov	r1, r3
 8003f12:	f7fe fea1 	bl	8002c58 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003f16:	f7ff fa07 	bl	8003328 <xTaskResumeAll>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10a      	bne.n	8003f36 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003f20:	4b09      	ldr	r3, [pc, #36]	; (8003f48 <prvProcessTimerOrBlockTask+0x98>)
 8003f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	f3bf 8f4f 	dsb	sy
 8003f2c:	f3bf 8f6f 	isb	sy
}
 8003f30:	e001      	b.n	8003f36 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003f32:	f7ff f9f9 	bl	8003328 <xTaskResumeAll>
}
 8003f36:	bf00      	nop
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	20000cac 	.word	0x20000cac
 8003f44:	20000cb0 	.word	0x20000cb0
 8003f48:	e000ed04 	.word	0xe000ed04

08003f4c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003f54:	4b0e      	ldr	r3, [pc, #56]	; (8003f90 <prvGetNextExpireTime+0x44>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <prvGetNextExpireTime+0x16>
 8003f5e:	2201      	movs	r2, #1
 8003f60:	e000      	b.n	8003f64 <prvGetNextExpireTime+0x18>
 8003f62:	2200      	movs	r2, #0
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d105      	bne.n	8003f7c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f70:	4b07      	ldr	r3, [pc, #28]	; (8003f90 <prvGetNextExpireTime+0x44>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	60fb      	str	r3, [r7, #12]
 8003f7a:	e001      	b.n	8003f80 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003f80:	68fb      	ldr	r3, [r7, #12]
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	20000ca8 	.word	0x20000ca8

08003f94 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003f9c:	f7ff fa64 	bl	8003468 <xTaskGetTickCount>
 8003fa0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003fa2:	4b0b      	ldr	r3, [pc, #44]	; (8003fd0 <prvSampleTimeNow+0x3c>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d205      	bcs.n	8003fb8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003fac:	f000 f93c 	bl	8004228 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	e002      	b.n	8003fbe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003fbe:	4a04      	ldr	r2, [pc, #16]	; (8003fd0 <prvSampleTimeNow+0x3c>)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	20000cb8 	.word	0x20000cb8

08003fd4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
 8003fe0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	68ba      	ldr	r2, [r7, #8]
 8003fea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d812      	bhi.n	8004020 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	1ad2      	subs	r2, r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	429a      	cmp	r2, r3
 8004006:	d302      	bcc.n	800400e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004008:	2301      	movs	r3, #1
 800400a:	617b      	str	r3, [r7, #20]
 800400c:	e01b      	b.n	8004046 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800400e:	4b10      	ldr	r3, [pc, #64]	; (8004050 <prvInsertTimerInActiveList+0x7c>)
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	3304      	adds	r3, #4
 8004016:	4619      	mov	r1, r3
 8004018:	4610      	mov	r0, r2
 800401a:	f7fe f8e4 	bl	80021e6 <vListInsert>
 800401e:	e012      	b.n	8004046 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	429a      	cmp	r2, r3
 8004026:	d206      	bcs.n	8004036 <prvInsertTimerInActiveList+0x62>
 8004028:	68ba      	ldr	r2, [r7, #8]
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	429a      	cmp	r2, r3
 800402e:	d302      	bcc.n	8004036 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004030:	2301      	movs	r3, #1
 8004032:	617b      	str	r3, [r7, #20]
 8004034:	e007      	b.n	8004046 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004036:	4b07      	ldr	r3, [pc, #28]	; (8004054 <prvInsertTimerInActiveList+0x80>)
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	3304      	adds	r3, #4
 800403e:	4619      	mov	r1, r3
 8004040:	4610      	mov	r0, r2
 8004042:	f7fe f8d0 	bl	80021e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004046:	697b      	ldr	r3, [r7, #20]
}
 8004048:	4618      	mov	r0, r3
 800404a:	3718      	adds	r7, #24
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	20000cac 	.word	0x20000cac
 8004054:	20000ca8 	.word	0x20000ca8

08004058 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b08e      	sub	sp, #56	; 0x38
 800405c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800405e:	e0d0      	b.n	8004202 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	da1a      	bge.n	800409c <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004066:	1d3b      	adds	r3, r7, #4
 8004068:	3304      	adds	r3, #4
 800406a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800406c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10c      	bne.n	800408c <prvProcessReceivedCommands+0x34>
	__asm volatile
 8004072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004076:	b672      	cpsid	i
 8004078:	f383 8811 	msr	BASEPRI, r3
 800407c:	f3bf 8f6f 	isb	sy
 8004080:	f3bf 8f4f 	dsb	sy
 8004084:	b662      	cpsie	i
 8004086:	61fb      	str	r3, [r7, #28]
}
 8004088:	bf00      	nop
 800408a:	e7fe      	b.n	800408a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800408c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004092:	6850      	ldr	r0, [r2, #4]
 8004094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004096:	6892      	ldr	r2, [r2, #8]
 8004098:	4611      	mov	r1, r2
 800409a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f2c0 80ae 	blt.w	8004200 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80040a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d004      	beq.n	80040ba <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b2:	3304      	adds	r3, #4
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7fe f8cf 	bl	8002258 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040ba:	463b      	mov	r3, r7
 80040bc:	4618      	mov	r0, r3
 80040be:	f7ff ff69 	bl	8003f94 <prvSampleTimeNow>
 80040c2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b09      	cmp	r3, #9
 80040c8:	f200 809b 	bhi.w	8004202 <prvProcessReceivedCommands+0x1aa>
 80040cc:	a201      	add	r2, pc, #4	; (adr r2, 80040d4 <prvProcessReceivedCommands+0x7c>)
 80040ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d2:	bf00      	nop
 80040d4:	080040fd 	.word	0x080040fd
 80040d8:	080040fd 	.word	0x080040fd
 80040dc:	080040fd 	.word	0x080040fd
 80040e0:	08004175 	.word	0x08004175
 80040e4:	08004189 	.word	0x08004189
 80040e8:	080041d7 	.word	0x080041d7
 80040ec:	080040fd 	.word	0x080040fd
 80040f0:	080040fd 	.word	0x080040fd
 80040f4:	08004175 	.word	0x08004175
 80040f8:	08004189 	.word	0x08004189
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80040fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004102:	f043 0301 	orr.w	r3, r3, #1
 8004106:	b2da      	uxtb	r2, r3
 8004108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800410e:	68ba      	ldr	r2, [r7, #8]
 8004110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	18d1      	adds	r1, r2, r3
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800411a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800411c:	f7ff ff5a 	bl	8003fd4 <prvInsertTimerInActiveList>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d06d      	beq.n	8004202 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800412c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800412e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004130:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b00      	cmp	r3, #0
 800413a:	d062      	beq.n	8004202 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	441a      	add	r2, r3
 8004144:	2300      	movs	r3, #0
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	2300      	movs	r3, #0
 800414a:	2100      	movs	r1, #0
 800414c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800414e:	f7ff fdff 	bl	8003d50 <xTimerGenericCommand>
 8004152:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004154:	6a3b      	ldr	r3, [r7, #32]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d153      	bne.n	8004202 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800415a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415e:	b672      	cpsid	i
 8004160:	f383 8811 	msr	BASEPRI, r3
 8004164:	f3bf 8f6f 	isb	sy
 8004168:	f3bf 8f4f 	dsb	sy
 800416c:	b662      	cpsie	i
 800416e:	61bb      	str	r3, [r7, #24]
}
 8004170:	bf00      	nop
 8004172:	e7fe      	b.n	8004172 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004176:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800417a:	f023 0301 	bic.w	r3, r3, #1
 800417e:	b2da      	uxtb	r2, r3
 8004180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004182:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004186:	e03c      	b.n	8004202 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800418e:	f043 0301 	orr.w	r3, r3, #1
 8004192:	b2da      	uxtb	r2, r3
 8004194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004196:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80041a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10c      	bne.n	80041c2 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80041a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ac:	b672      	cpsid	i
 80041ae:	f383 8811 	msr	BASEPRI, r3
 80041b2:	f3bf 8f6f 	isb	sy
 80041b6:	f3bf 8f4f 	dsb	sy
 80041ba:	b662      	cpsie	i
 80041bc:	617b      	str	r3, [r7, #20]
}
 80041be:	bf00      	nop
 80041c0:	e7fe      	b.n	80041c0 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80041c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c4:	699a      	ldr	r2, [r3, #24]
 80041c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c8:	18d1      	adds	r1, r2, r3
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041d0:	f7ff ff00 	bl	8003fd4 <prvInsertTimerInActiveList>
					break;
 80041d4:	e015      	b.n	8004202 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80041d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d103      	bne.n	80041ec <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80041e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041e6:	f000 fbc7 	bl	8004978 <vPortFree>
 80041ea:	e00a      	b.n	8004202 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80041ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041f2:	f023 0301 	bic.w	r3, r3, #1
 80041f6:	b2da      	uxtb	r2, r3
 80041f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80041fe:	e000      	b.n	8004202 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004200:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004202:	4b08      	ldr	r3, [pc, #32]	; (8004224 <prvProcessReceivedCommands+0x1cc>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	1d39      	adds	r1, r7, #4
 8004208:	2200      	movs	r2, #0
 800420a:	4618      	mov	r0, r3
 800420c:	f7fe fb04 	bl	8002818 <xQueueReceive>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	f47f af24 	bne.w	8004060 <prvProcessReceivedCommands+0x8>
	}
}
 8004218:	bf00      	nop
 800421a:	bf00      	nop
 800421c:	3730      	adds	r7, #48	; 0x30
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	20000cb0 	.word	0x20000cb0

08004228 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b088      	sub	sp, #32
 800422c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800422e:	e04a      	b.n	80042c6 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004230:	4b2e      	ldr	r3, [pc, #184]	; (80042ec <prvSwitchTimerLists+0xc4>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800423a:	4b2c      	ldr	r3, [pc, #176]	; (80042ec <prvSwitchTimerLists+0xc4>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	3304      	adds	r3, #4
 8004248:	4618      	mov	r0, r3
 800424a:	f7fe f805 	bl	8002258 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800425c:	f003 0304 	and.w	r3, r3, #4
 8004260:	2b00      	cmp	r3, #0
 8004262:	d030      	beq.n	80042c6 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	4413      	add	r3, r2
 800426c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	429a      	cmp	r2, r3
 8004274:	d90e      	bls.n	8004294 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004282:	4b1a      	ldr	r3, [pc, #104]	; (80042ec <prvSwitchTimerLists+0xc4>)
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	3304      	adds	r3, #4
 800428a:	4619      	mov	r1, r3
 800428c:	4610      	mov	r0, r2
 800428e:	f7fd ffaa 	bl	80021e6 <vListInsert>
 8004292:	e018      	b.n	80042c6 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004294:	2300      	movs	r3, #0
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	2300      	movs	r3, #0
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	2100      	movs	r1, #0
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f7ff fd56 	bl	8003d50 <xTimerGenericCommand>
 80042a4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10c      	bne.n	80042c6 <prvSwitchTimerLists+0x9e>
	__asm volatile
 80042ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b0:	b672      	cpsid	i
 80042b2:	f383 8811 	msr	BASEPRI, r3
 80042b6:	f3bf 8f6f 	isb	sy
 80042ba:	f3bf 8f4f 	dsb	sy
 80042be:	b662      	cpsie	i
 80042c0:	603b      	str	r3, [r7, #0]
}
 80042c2:	bf00      	nop
 80042c4:	e7fe      	b.n	80042c4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80042c6:	4b09      	ldr	r3, [pc, #36]	; (80042ec <prvSwitchTimerLists+0xc4>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1af      	bne.n	8004230 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80042d0:	4b06      	ldr	r3, [pc, #24]	; (80042ec <prvSwitchTimerLists+0xc4>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80042d6:	4b06      	ldr	r3, [pc, #24]	; (80042f0 <prvSwitchTimerLists+0xc8>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a04      	ldr	r2, [pc, #16]	; (80042ec <prvSwitchTimerLists+0xc4>)
 80042dc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80042de:	4a04      	ldr	r2, [pc, #16]	; (80042f0 <prvSwitchTimerLists+0xc8>)
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	6013      	str	r3, [r2, #0]
}
 80042e4:	bf00      	nop
 80042e6:	3718      	adds	r7, #24
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	20000ca8 	.word	0x20000ca8
 80042f0:	20000cac 	.word	0x20000cac

080042f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80042fa:	f000 f947 	bl	800458c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80042fe:	4b15      	ldr	r3, [pc, #84]	; (8004354 <prvCheckForValidListAndQueue+0x60>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d120      	bne.n	8004348 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004306:	4814      	ldr	r0, [pc, #80]	; (8004358 <prvCheckForValidListAndQueue+0x64>)
 8004308:	f7fd ff1c 	bl	8002144 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800430c:	4813      	ldr	r0, [pc, #76]	; (800435c <prvCheckForValidListAndQueue+0x68>)
 800430e:	f7fd ff19 	bl	8002144 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004312:	4b13      	ldr	r3, [pc, #76]	; (8004360 <prvCheckForValidListAndQueue+0x6c>)
 8004314:	4a10      	ldr	r2, [pc, #64]	; (8004358 <prvCheckForValidListAndQueue+0x64>)
 8004316:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004318:	4b12      	ldr	r3, [pc, #72]	; (8004364 <prvCheckForValidListAndQueue+0x70>)
 800431a:	4a10      	ldr	r2, [pc, #64]	; (800435c <prvCheckForValidListAndQueue+0x68>)
 800431c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800431e:	2300      	movs	r3, #0
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	4b11      	ldr	r3, [pc, #68]	; (8004368 <prvCheckForValidListAndQueue+0x74>)
 8004324:	4a11      	ldr	r2, [pc, #68]	; (800436c <prvCheckForValidListAndQueue+0x78>)
 8004326:	2110      	movs	r1, #16
 8004328:	200a      	movs	r0, #10
 800432a:	f7fe f829 	bl	8002380 <xQueueGenericCreateStatic>
 800432e:	4603      	mov	r3, r0
 8004330:	4a08      	ldr	r2, [pc, #32]	; (8004354 <prvCheckForValidListAndQueue+0x60>)
 8004332:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004334:	4b07      	ldr	r3, [pc, #28]	; (8004354 <prvCheckForValidListAndQueue+0x60>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d005      	beq.n	8004348 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800433c:	4b05      	ldr	r3, [pc, #20]	; (8004354 <prvCheckForValidListAndQueue+0x60>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	490b      	ldr	r1, [pc, #44]	; (8004370 <prvCheckForValidListAndQueue+0x7c>)
 8004342:	4618      	mov	r0, r3
 8004344:	f7fe fc5e 	bl	8002c04 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004348:	f000 f954 	bl	80045f4 <vPortExitCritical>
}
 800434c:	bf00      	nop
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	20000cb0 	.word	0x20000cb0
 8004358:	20000c80 	.word	0x20000c80
 800435c:	20000c94 	.word	0x20000c94
 8004360:	20000ca8 	.word	0x20000ca8
 8004364:	20000cac 	.word	0x20000cac
 8004368:	20000d5c 	.word	0x20000d5c
 800436c:	20000cbc 	.word	0x20000cbc
 8004370:	08004c64 	.word	0x08004c64

08004374 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	3b04      	subs	r3, #4
 8004384:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800438c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	3b04      	subs	r3, #4
 8004392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	f023 0201 	bic.w	r2, r3, #1
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	3b04      	subs	r3, #4
 80043a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80043a4:	4a0c      	ldr	r2, [pc, #48]	; (80043d8 <pxPortInitialiseStack+0x64>)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	3b14      	subs	r3, #20
 80043ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	3b04      	subs	r3, #4
 80043ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f06f 0202 	mvn.w	r2, #2
 80043c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	3b20      	subs	r3, #32
 80043c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80043ca:	68fb      	ldr	r3, [r7, #12]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	080043dd 	.word	0x080043dd

080043dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80043e2:	2300      	movs	r3, #0
 80043e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80043e6:	4b14      	ldr	r3, [pc, #80]	; (8004438 <prvTaskExitError+0x5c>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ee:	d00c      	beq.n	800440a <prvTaskExitError+0x2e>
	__asm volatile
 80043f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f4:	b672      	cpsid	i
 80043f6:	f383 8811 	msr	BASEPRI, r3
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	f3bf 8f4f 	dsb	sy
 8004402:	b662      	cpsie	i
 8004404:	60fb      	str	r3, [r7, #12]
}
 8004406:	bf00      	nop
 8004408:	e7fe      	b.n	8004408 <prvTaskExitError+0x2c>
	__asm volatile
 800440a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440e:	b672      	cpsid	i
 8004410:	f383 8811 	msr	BASEPRI, r3
 8004414:	f3bf 8f6f 	isb	sy
 8004418:	f3bf 8f4f 	dsb	sy
 800441c:	b662      	cpsie	i
 800441e:	60bb      	str	r3, [r7, #8]
}
 8004420:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004422:	bf00      	nop
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d0fc      	beq.n	8004424 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800442a:	bf00      	nop
 800442c:	bf00      	nop
 800442e:	3714      	adds	r7, #20
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	2000000c 	.word	0x2000000c
 800443c:	00000000 	.word	0x00000000

08004440 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004440:	4b07      	ldr	r3, [pc, #28]	; (8004460 <pxCurrentTCBConst2>)
 8004442:	6819      	ldr	r1, [r3, #0]
 8004444:	6808      	ldr	r0, [r1, #0]
 8004446:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800444a:	f380 8809 	msr	PSP, r0
 800444e:	f3bf 8f6f 	isb	sy
 8004452:	f04f 0000 	mov.w	r0, #0
 8004456:	f380 8811 	msr	BASEPRI, r0
 800445a:	4770      	bx	lr
 800445c:	f3af 8000 	nop.w

08004460 <pxCurrentTCBConst2>:
 8004460:	20000780 	.word	0x20000780
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004464:	bf00      	nop
 8004466:	bf00      	nop

08004468 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004468:	4808      	ldr	r0, [pc, #32]	; (800448c <prvPortStartFirstTask+0x24>)
 800446a:	6800      	ldr	r0, [r0, #0]
 800446c:	6800      	ldr	r0, [r0, #0]
 800446e:	f380 8808 	msr	MSP, r0
 8004472:	f04f 0000 	mov.w	r0, #0
 8004476:	f380 8814 	msr	CONTROL, r0
 800447a:	b662      	cpsie	i
 800447c:	b661      	cpsie	f
 800447e:	f3bf 8f4f 	dsb	sy
 8004482:	f3bf 8f6f 	isb	sy
 8004486:	df00      	svc	0
 8004488:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800448a:	bf00      	nop
 800448c:	e000ed08 	.word	0xe000ed08

08004490 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004496:	4b37      	ldr	r3, [pc, #220]	; (8004574 <xPortStartScheduler+0xe4>)
 8004498:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	22ff      	movs	r2, #255	; 0xff
 80044a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80044b0:	78fb      	ldrb	r3, [r7, #3]
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	4b2f      	ldr	r3, [pc, #188]	; (8004578 <xPortStartScheduler+0xe8>)
 80044bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80044be:	4b2f      	ldr	r3, [pc, #188]	; (800457c <xPortStartScheduler+0xec>)
 80044c0:	2207      	movs	r2, #7
 80044c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044c4:	e009      	b.n	80044da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80044c6:	4b2d      	ldr	r3, [pc, #180]	; (800457c <xPortStartScheduler+0xec>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	3b01      	subs	r3, #1
 80044cc:	4a2b      	ldr	r2, [pc, #172]	; (800457c <xPortStartScheduler+0xec>)
 80044ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80044d0:	78fb      	ldrb	r3, [r7, #3]
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044da:	78fb      	ldrb	r3, [r7, #3]
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e2:	2b80      	cmp	r3, #128	; 0x80
 80044e4:	d0ef      	beq.n	80044c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80044e6:	4b25      	ldr	r3, [pc, #148]	; (800457c <xPortStartScheduler+0xec>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f1c3 0307 	rsb	r3, r3, #7
 80044ee:	2b04      	cmp	r3, #4
 80044f0:	d00c      	beq.n	800450c <xPortStartScheduler+0x7c>
	__asm volatile
 80044f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f6:	b672      	cpsid	i
 80044f8:	f383 8811 	msr	BASEPRI, r3
 80044fc:	f3bf 8f6f 	isb	sy
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	b662      	cpsie	i
 8004506:	60bb      	str	r3, [r7, #8]
}
 8004508:	bf00      	nop
 800450a:	e7fe      	b.n	800450a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800450c:	4b1b      	ldr	r3, [pc, #108]	; (800457c <xPortStartScheduler+0xec>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	021b      	lsls	r3, r3, #8
 8004512:	4a1a      	ldr	r2, [pc, #104]	; (800457c <xPortStartScheduler+0xec>)
 8004514:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004516:	4b19      	ldr	r3, [pc, #100]	; (800457c <xPortStartScheduler+0xec>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800451e:	4a17      	ldr	r2, [pc, #92]	; (800457c <xPortStartScheduler+0xec>)
 8004520:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	b2da      	uxtb	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800452a:	4b15      	ldr	r3, [pc, #84]	; (8004580 <xPortStartScheduler+0xf0>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a14      	ldr	r2, [pc, #80]	; (8004580 <xPortStartScheduler+0xf0>)
 8004530:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004534:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004536:	4b12      	ldr	r3, [pc, #72]	; (8004580 <xPortStartScheduler+0xf0>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a11      	ldr	r2, [pc, #68]	; (8004580 <xPortStartScheduler+0xf0>)
 800453c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004540:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004542:	f000 f8dd 	bl	8004700 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004546:	4b0f      	ldr	r3, [pc, #60]	; (8004584 <xPortStartScheduler+0xf4>)
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800454c:	f000 f8fc 	bl	8004748 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004550:	4b0d      	ldr	r3, [pc, #52]	; (8004588 <xPortStartScheduler+0xf8>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a0c      	ldr	r2, [pc, #48]	; (8004588 <xPortStartScheduler+0xf8>)
 8004556:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800455a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800455c:	f7ff ff84 	bl	8004468 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004560:	f7ff f84e 	bl	8003600 <vTaskSwitchContext>
	prvTaskExitError();
 8004564:	f7ff ff3a 	bl	80043dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	e000e400 	.word	0xe000e400
 8004578:	20000dac 	.word	0x20000dac
 800457c:	20000db0 	.word	0x20000db0
 8004580:	e000ed20 	.word	0xe000ed20
 8004584:	2000000c 	.word	0x2000000c
 8004588:	e000ef34 	.word	0xe000ef34

0800458c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
	__asm volatile
 8004592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004596:	b672      	cpsid	i
 8004598:	f383 8811 	msr	BASEPRI, r3
 800459c:	f3bf 8f6f 	isb	sy
 80045a0:	f3bf 8f4f 	dsb	sy
 80045a4:	b662      	cpsie	i
 80045a6:	607b      	str	r3, [r7, #4]
}
 80045a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80045aa:	4b10      	ldr	r3, [pc, #64]	; (80045ec <vPortEnterCritical+0x60>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	3301      	adds	r3, #1
 80045b0:	4a0e      	ldr	r2, [pc, #56]	; (80045ec <vPortEnterCritical+0x60>)
 80045b2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80045b4:	4b0d      	ldr	r3, [pc, #52]	; (80045ec <vPortEnterCritical+0x60>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d111      	bne.n	80045e0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80045bc:	4b0c      	ldr	r3, [pc, #48]	; (80045f0 <vPortEnterCritical+0x64>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00c      	beq.n	80045e0 <vPortEnterCritical+0x54>
	__asm volatile
 80045c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ca:	b672      	cpsid	i
 80045cc:	f383 8811 	msr	BASEPRI, r3
 80045d0:	f3bf 8f6f 	isb	sy
 80045d4:	f3bf 8f4f 	dsb	sy
 80045d8:	b662      	cpsie	i
 80045da:	603b      	str	r3, [r7, #0]
}
 80045dc:	bf00      	nop
 80045de:	e7fe      	b.n	80045de <vPortEnterCritical+0x52>
	}
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr
 80045ec:	2000000c 	.word	0x2000000c
 80045f0:	e000ed04 	.word	0xe000ed04

080045f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80045fa:	4b13      	ldr	r3, [pc, #76]	; (8004648 <vPortExitCritical+0x54>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10c      	bne.n	800461c <vPortExitCritical+0x28>
	__asm volatile
 8004602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004606:	b672      	cpsid	i
 8004608:	f383 8811 	msr	BASEPRI, r3
 800460c:	f3bf 8f6f 	isb	sy
 8004610:	f3bf 8f4f 	dsb	sy
 8004614:	b662      	cpsie	i
 8004616:	607b      	str	r3, [r7, #4]
}
 8004618:	bf00      	nop
 800461a:	e7fe      	b.n	800461a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800461c:	4b0a      	ldr	r3, [pc, #40]	; (8004648 <vPortExitCritical+0x54>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	3b01      	subs	r3, #1
 8004622:	4a09      	ldr	r2, [pc, #36]	; (8004648 <vPortExitCritical+0x54>)
 8004624:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004626:	4b08      	ldr	r3, [pc, #32]	; (8004648 <vPortExitCritical+0x54>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d105      	bne.n	800463a <vPortExitCritical+0x46>
 800462e:	2300      	movs	r3, #0
 8004630:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	f383 8811 	msr	BASEPRI, r3
}
 8004638:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	2000000c 	.word	0x2000000c
 800464c:	00000000 	.word	0x00000000

08004650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004650:	f3ef 8009 	mrs	r0, PSP
 8004654:	f3bf 8f6f 	isb	sy
 8004658:	4b15      	ldr	r3, [pc, #84]	; (80046b0 <pxCurrentTCBConst>)
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	f01e 0f10 	tst.w	lr, #16
 8004660:	bf08      	it	eq
 8004662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800466a:	6010      	str	r0, [r2, #0]
 800466c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004670:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004674:	b672      	cpsid	i
 8004676:	f380 8811 	msr	BASEPRI, r0
 800467a:	f3bf 8f4f 	dsb	sy
 800467e:	f3bf 8f6f 	isb	sy
 8004682:	b662      	cpsie	i
 8004684:	f7fe ffbc 	bl	8003600 <vTaskSwitchContext>
 8004688:	f04f 0000 	mov.w	r0, #0
 800468c:	f380 8811 	msr	BASEPRI, r0
 8004690:	bc09      	pop	{r0, r3}
 8004692:	6819      	ldr	r1, [r3, #0]
 8004694:	6808      	ldr	r0, [r1, #0]
 8004696:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800469a:	f01e 0f10 	tst.w	lr, #16
 800469e:	bf08      	it	eq
 80046a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80046a4:	f380 8809 	msr	PSP, r0
 80046a8:	f3bf 8f6f 	isb	sy
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop

080046b0 <pxCurrentTCBConst>:
 80046b0:	20000780 	.word	0x20000780
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80046b4:	bf00      	nop
 80046b6:	bf00      	nop

080046b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
	__asm volatile
 80046be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c2:	b672      	cpsid	i
 80046c4:	f383 8811 	msr	BASEPRI, r3
 80046c8:	f3bf 8f6f 	isb	sy
 80046cc:	f3bf 8f4f 	dsb	sy
 80046d0:	b662      	cpsie	i
 80046d2:	607b      	str	r3, [r7, #4]
}
 80046d4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80046d6:	f7fe fed7 	bl	8003488 <xTaskIncrementTick>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d003      	beq.n	80046e8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80046e0:	4b06      	ldr	r3, [pc, #24]	; (80046fc <SysTick_Handler+0x44>)
 80046e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046e6:	601a      	str	r2, [r3, #0]
 80046e8:	2300      	movs	r3, #0
 80046ea:	603b      	str	r3, [r7, #0]
	__asm volatile
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	f383 8811 	msr	BASEPRI, r3
}
 80046f2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80046f4:	bf00      	nop
 80046f6:	3708      	adds	r7, #8
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	e000ed04 	.word	0xe000ed04

08004700 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004700:	b480      	push	{r7}
 8004702:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004704:	4b0b      	ldr	r3, [pc, #44]	; (8004734 <vPortSetupTimerInterrupt+0x34>)
 8004706:	2200      	movs	r2, #0
 8004708:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800470a:	4b0b      	ldr	r3, [pc, #44]	; (8004738 <vPortSetupTimerInterrupt+0x38>)
 800470c:	2200      	movs	r2, #0
 800470e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004710:	4b0a      	ldr	r3, [pc, #40]	; (800473c <vPortSetupTimerInterrupt+0x3c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a0a      	ldr	r2, [pc, #40]	; (8004740 <vPortSetupTimerInterrupt+0x40>)
 8004716:	fba2 2303 	umull	r2, r3, r2, r3
 800471a:	099b      	lsrs	r3, r3, #6
 800471c:	4a09      	ldr	r2, [pc, #36]	; (8004744 <vPortSetupTimerInterrupt+0x44>)
 800471e:	3b01      	subs	r3, #1
 8004720:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004722:	4b04      	ldr	r3, [pc, #16]	; (8004734 <vPortSetupTimerInterrupt+0x34>)
 8004724:	2207      	movs	r2, #7
 8004726:	601a      	str	r2, [r3, #0]
}
 8004728:	bf00      	nop
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	e000e010 	.word	0xe000e010
 8004738:	e000e018 	.word	0xe000e018
 800473c:	20000000 	.word	0x20000000
 8004740:	10624dd3 	.word	0x10624dd3
 8004744:	e000e014 	.word	0xe000e014

08004748 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004748:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004758 <vPortEnableVFP+0x10>
 800474c:	6801      	ldr	r1, [r0, #0]
 800474e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004752:	6001      	str	r1, [r0, #0]
 8004754:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004756:	bf00      	nop
 8004758:	e000ed88 	.word	0xe000ed88

0800475c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004762:	f3ef 8305 	mrs	r3, IPSR
 8004766:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2b0f      	cmp	r3, #15
 800476c:	d916      	bls.n	800479c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800476e:	4a19      	ldr	r2, [pc, #100]	; (80047d4 <vPortValidateInterruptPriority+0x78>)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4413      	add	r3, r2
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004778:	4b17      	ldr	r3, [pc, #92]	; (80047d8 <vPortValidateInterruptPriority+0x7c>)
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	7afa      	ldrb	r2, [r7, #11]
 800477e:	429a      	cmp	r2, r3
 8004780:	d20c      	bcs.n	800479c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8004782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004786:	b672      	cpsid	i
 8004788:	f383 8811 	msr	BASEPRI, r3
 800478c:	f3bf 8f6f 	isb	sy
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	b662      	cpsie	i
 8004796:	607b      	str	r3, [r7, #4]
}
 8004798:	bf00      	nop
 800479a:	e7fe      	b.n	800479a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800479c:	4b0f      	ldr	r3, [pc, #60]	; (80047dc <vPortValidateInterruptPriority+0x80>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80047a4:	4b0e      	ldr	r3, [pc, #56]	; (80047e0 <vPortValidateInterruptPriority+0x84>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d90c      	bls.n	80047c6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80047ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b0:	b672      	cpsid	i
 80047b2:	f383 8811 	msr	BASEPRI, r3
 80047b6:	f3bf 8f6f 	isb	sy
 80047ba:	f3bf 8f4f 	dsb	sy
 80047be:	b662      	cpsie	i
 80047c0:	603b      	str	r3, [r7, #0]
}
 80047c2:	bf00      	nop
 80047c4:	e7fe      	b.n	80047c4 <vPortValidateInterruptPriority+0x68>
	}
 80047c6:	bf00      	nop
 80047c8:	3714      	adds	r7, #20
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	e000e3f0 	.word	0xe000e3f0
 80047d8:	20000dac 	.word	0x20000dac
 80047dc:	e000ed0c 	.word	0xe000ed0c
 80047e0:	20000db0 	.word	0x20000db0

080047e4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b08a      	sub	sp, #40	; 0x28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80047ec:	2300      	movs	r3, #0
 80047ee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80047f0:	f7fe fd8c 	bl	800330c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80047f4:	4b5b      	ldr	r3, [pc, #364]	; (8004964 <pvPortMalloc+0x180>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d101      	bne.n	8004800 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80047fc:	f000 f91a 	bl	8004a34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004800:	4b59      	ldr	r3, [pc, #356]	; (8004968 <pvPortMalloc+0x184>)
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4013      	ands	r3, r2
 8004808:	2b00      	cmp	r3, #0
 800480a:	f040 8092 	bne.w	8004932 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d01f      	beq.n	8004854 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8004814:	2208      	movs	r2, #8
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4413      	add	r3, r2
 800481a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f003 0307 	and.w	r3, r3, #7
 8004822:	2b00      	cmp	r3, #0
 8004824:	d016      	beq.n	8004854 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f023 0307 	bic.w	r3, r3, #7
 800482c:	3308      	adds	r3, #8
 800482e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f003 0307 	and.w	r3, r3, #7
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00c      	beq.n	8004854 <pvPortMalloc+0x70>
	__asm volatile
 800483a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483e:	b672      	cpsid	i
 8004840:	f383 8811 	msr	BASEPRI, r3
 8004844:	f3bf 8f6f 	isb	sy
 8004848:	f3bf 8f4f 	dsb	sy
 800484c:	b662      	cpsie	i
 800484e:	617b      	str	r3, [r7, #20]
}
 8004850:	bf00      	nop
 8004852:	e7fe      	b.n	8004852 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d06b      	beq.n	8004932 <pvPortMalloc+0x14e>
 800485a:	4b44      	ldr	r3, [pc, #272]	; (800496c <pvPortMalloc+0x188>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	429a      	cmp	r2, r3
 8004862:	d866      	bhi.n	8004932 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004864:	4b42      	ldr	r3, [pc, #264]	; (8004970 <pvPortMalloc+0x18c>)
 8004866:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004868:	4b41      	ldr	r3, [pc, #260]	; (8004970 <pvPortMalloc+0x18c>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800486e:	e004      	b.n	800487a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	429a      	cmp	r2, r3
 8004882:	d903      	bls.n	800488c <pvPortMalloc+0xa8>
 8004884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1f1      	bne.n	8004870 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800488c:	4b35      	ldr	r3, [pc, #212]	; (8004964 <pvPortMalloc+0x180>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004892:	429a      	cmp	r2, r3
 8004894:	d04d      	beq.n	8004932 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004896:	6a3b      	ldr	r3, [r7, #32]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2208      	movs	r2, #8
 800489c:	4413      	add	r3, r2
 800489e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80048a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	6a3b      	ldr	r3, [r7, #32]
 80048a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80048a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	1ad2      	subs	r2, r2, r3
 80048b0:	2308      	movs	r3, #8
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d921      	bls.n	80048fc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80048b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4413      	add	r3, r2
 80048be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	f003 0307 	and.w	r3, r3, #7
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00c      	beq.n	80048e4 <pvPortMalloc+0x100>
	__asm volatile
 80048ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ce:	b672      	cpsid	i
 80048d0:	f383 8811 	msr	BASEPRI, r3
 80048d4:	f3bf 8f6f 	isb	sy
 80048d8:	f3bf 8f4f 	dsb	sy
 80048dc:	b662      	cpsie	i
 80048de:	613b      	str	r3, [r7, #16]
}
 80048e0:	bf00      	nop
 80048e2:	e7fe      	b.n	80048e2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80048e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	1ad2      	subs	r2, r2, r3
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80048f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80048f6:	69b8      	ldr	r0, [r7, #24]
 80048f8:	f000 f8fe 	bl	8004af8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80048fc:	4b1b      	ldr	r3, [pc, #108]	; (800496c <pvPortMalloc+0x188>)
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	4a19      	ldr	r2, [pc, #100]	; (800496c <pvPortMalloc+0x188>)
 8004908:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800490a:	4b18      	ldr	r3, [pc, #96]	; (800496c <pvPortMalloc+0x188>)
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	4b19      	ldr	r3, [pc, #100]	; (8004974 <pvPortMalloc+0x190>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	429a      	cmp	r2, r3
 8004914:	d203      	bcs.n	800491e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004916:	4b15      	ldr	r3, [pc, #84]	; (800496c <pvPortMalloc+0x188>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a16      	ldr	r2, [pc, #88]	; (8004974 <pvPortMalloc+0x190>)
 800491c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	4b11      	ldr	r3, [pc, #68]	; (8004968 <pvPortMalloc+0x184>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	431a      	orrs	r2, r3
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492e:	2200      	movs	r2, #0
 8004930:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004932:	f7fe fcf9 	bl	8003328 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	f003 0307 	and.w	r3, r3, #7
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00c      	beq.n	800495a <pvPortMalloc+0x176>
	__asm volatile
 8004940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004944:	b672      	cpsid	i
 8004946:	f383 8811 	msr	BASEPRI, r3
 800494a:	f3bf 8f6f 	isb	sy
 800494e:	f3bf 8f4f 	dsb	sy
 8004952:	b662      	cpsie	i
 8004954:	60fb      	str	r3, [r7, #12]
}
 8004956:	bf00      	nop
 8004958:	e7fe      	b.n	8004958 <pvPortMalloc+0x174>
	return pvReturn;
 800495a:	69fb      	ldr	r3, [r7, #28]
}
 800495c:	4618      	mov	r0, r3
 800495e:	3728      	adds	r7, #40	; 0x28
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	200049bc 	.word	0x200049bc
 8004968:	200049c8 	.word	0x200049c8
 800496c:	200049c0 	.word	0x200049c0
 8004970:	200049b4 	.word	0x200049b4
 8004974:	200049c4 	.word	0x200049c4

08004978 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d04c      	beq.n	8004a24 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800498a:	2308      	movs	r3, #8
 800498c:	425b      	negs	r3, r3
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	4413      	add	r3, r2
 8004992:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	4b23      	ldr	r3, [pc, #140]	; (8004a2c <vPortFree+0xb4>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4013      	ands	r3, r2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10c      	bne.n	80049c0 <vPortFree+0x48>
	__asm volatile
 80049a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049aa:	b672      	cpsid	i
 80049ac:	f383 8811 	msr	BASEPRI, r3
 80049b0:	f3bf 8f6f 	isb	sy
 80049b4:	f3bf 8f4f 	dsb	sy
 80049b8:	b662      	cpsie	i
 80049ba:	60fb      	str	r3, [r7, #12]
}
 80049bc:	bf00      	nop
 80049be:	e7fe      	b.n	80049be <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00c      	beq.n	80049e2 <vPortFree+0x6a>
	__asm volatile
 80049c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049cc:	b672      	cpsid	i
 80049ce:	f383 8811 	msr	BASEPRI, r3
 80049d2:	f3bf 8f6f 	isb	sy
 80049d6:	f3bf 8f4f 	dsb	sy
 80049da:	b662      	cpsie	i
 80049dc:	60bb      	str	r3, [r7, #8]
}
 80049de:	bf00      	nop
 80049e0:	e7fe      	b.n	80049e0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	4b11      	ldr	r3, [pc, #68]	; (8004a2c <vPortFree+0xb4>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4013      	ands	r3, r2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d019      	beq.n	8004a24 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d115      	bne.n	8004a24 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	4b0b      	ldr	r3, [pc, #44]	; (8004a2c <vPortFree+0xb4>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	43db      	mvns	r3, r3
 8004a02:	401a      	ands	r2, r3
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004a08:	f7fe fc80 	bl	800330c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	685a      	ldr	r2, [r3, #4]
 8004a10:	4b07      	ldr	r3, [pc, #28]	; (8004a30 <vPortFree+0xb8>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4413      	add	r3, r2
 8004a16:	4a06      	ldr	r2, [pc, #24]	; (8004a30 <vPortFree+0xb8>)
 8004a18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a1a:	6938      	ldr	r0, [r7, #16]
 8004a1c:	f000 f86c 	bl	8004af8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004a20:	f7fe fc82 	bl	8003328 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004a24:	bf00      	nop
 8004a26:	3718      	adds	r7, #24
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	200049c8 	.word	0x200049c8
 8004a30:	200049c0 	.word	0x200049c0

08004a34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004a3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004a40:	4b27      	ldr	r3, [pc, #156]	; (8004ae0 <prvHeapInit+0xac>)
 8004a42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f003 0307 	and.w	r3, r3, #7
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00c      	beq.n	8004a68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	3307      	adds	r3, #7
 8004a52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f023 0307 	bic.w	r3, r3, #7
 8004a5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	4a1f      	ldr	r2, [pc, #124]	; (8004ae0 <prvHeapInit+0xac>)
 8004a64:	4413      	add	r3, r2
 8004a66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a6c:	4a1d      	ldr	r2, [pc, #116]	; (8004ae4 <prvHeapInit+0xb0>)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004a72:	4b1c      	ldr	r3, [pc, #112]	; (8004ae4 <prvHeapInit+0xb0>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004a80:	2208      	movs	r2, #8
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	1a9b      	subs	r3, r3, r2
 8004a86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f023 0307 	bic.w	r3, r3, #7
 8004a8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4a15      	ldr	r2, [pc, #84]	; (8004ae8 <prvHeapInit+0xb4>)
 8004a94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004a96:	4b14      	ldr	r3, [pc, #80]	; (8004ae8 <prvHeapInit+0xb4>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004a9e:	4b12      	ldr	r3, [pc, #72]	; (8004ae8 <prvHeapInit+0xb4>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	1ad2      	subs	r2, r2, r3
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ab4:	4b0c      	ldr	r3, [pc, #48]	; (8004ae8 <prvHeapInit+0xb4>)
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	4a0a      	ldr	r2, [pc, #40]	; (8004aec <prvHeapInit+0xb8>)
 8004ac2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	4a09      	ldr	r2, [pc, #36]	; (8004af0 <prvHeapInit+0xbc>)
 8004aca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004acc:	4b09      	ldr	r3, [pc, #36]	; (8004af4 <prvHeapInit+0xc0>)
 8004ace:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004ad2:	601a      	str	r2, [r3, #0]
}
 8004ad4:	bf00      	nop
 8004ad6:	3714      	adds	r7, #20
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr
 8004ae0:	20000db4 	.word	0x20000db4
 8004ae4:	200049b4 	.word	0x200049b4
 8004ae8:	200049bc 	.word	0x200049bc
 8004aec:	200049c4 	.word	0x200049c4
 8004af0:	200049c0 	.word	0x200049c0
 8004af4:	200049c8 	.word	0x200049c8

08004af8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004b00:	4b28      	ldr	r3, [pc, #160]	; (8004ba4 <prvInsertBlockIntoFreeList+0xac>)
 8004b02:	60fb      	str	r3, [r7, #12]
 8004b04:	e002      	b.n	8004b0c <prvInsertBlockIntoFreeList+0x14>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d8f7      	bhi.n	8004b06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	68ba      	ldr	r2, [r7, #8]
 8004b20:	4413      	add	r3, r2
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d108      	bne.n	8004b3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	441a      	add	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	441a      	add	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d118      	bne.n	8004b80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	4b15      	ldr	r3, [pc, #84]	; (8004ba8 <prvInsertBlockIntoFreeList+0xb0>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d00d      	beq.n	8004b76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685a      	ldr	r2, [r3, #4]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	441a      	add	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	e008      	b.n	8004b88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b76:	4b0c      	ldr	r3, [pc, #48]	; (8004ba8 <prvInsertBlockIntoFreeList+0xb0>)
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	e003      	b.n	8004b88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d002      	beq.n	8004b96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b96:	bf00      	nop
 8004b98:	3714      	adds	r7, #20
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	200049b4 	.word	0x200049b4
 8004ba8:	200049bc 	.word	0x200049bc

08004bac <__libc_init_array>:
 8004bac:	b570      	push	{r4, r5, r6, lr}
 8004bae:	4d0d      	ldr	r5, [pc, #52]	; (8004be4 <__libc_init_array+0x38>)
 8004bb0:	4c0d      	ldr	r4, [pc, #52]	; (8004be8 <__libc_init_array+0x3c>)
 8004bb2:	1b64      	subs	r4, r4, r5
 8004bb4:	10a4      	asrs	r4, r4, #2
 8004bb6:	2600      	movs	r6, #0
 8004bb8:	42a6      	cmp	r6, r4
 8004bba:	d109      	bne.n	8004bd0 <__libc_init_array+0x24>
 8004bbc:	4d0b      	ldr	r5, [pc, #44]	; (8004bec <__libc_init_array+0x40>)
 8004bbe:	4c0c      	ldr	r4, [pc, #48]	; (8004bf0 <__libc_init_array+0x44>)
 8004bc0:	f000 f82e 	bl	8004c20 <_init>
 8004bc4:	1b64      	subs	r4, r4, r5
 8004bc6:	10a4      	asrs	r4, r4, #2
 8004bc8:	2600      	movs	r6, #0
 8004bca:	42a6      	cmp	r6, r4
 8004bcc:	d105      	bne.n	8004bda <__libc_init_array+0x2e>
 8004bce:	bd70      	pop	{r4, r5, r6, pc}
 8004bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bd4:	4798      	blx	r3
 8004bd6:	3601      	adds	r6, #1
 8004bd8:	e7ee      	b.n	8004bb8 <__libc_init_array+0xc>
 8004bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bde:	4798      	blx	r3
 8004be0:	3601      	adds	r6, #1
 8004be2:	e7f2      	b.n	8004bca <__libc_init_array+0x1e>
 8004be4:	08004cd4 	.word	0x08004cd4
 8004be8:	08004cd4 	.word	0x08004cd4
 8004bec:	08004cd4 	.word	0x08004cd4
 8004bf0:	08004cd8 	.word	0x08004cd8

08004bf4 <memcpy>:
 8004bf4:	440a      	add	r2, r1
 8004bf6:	4291      	cmp	r1, r2
 8004bf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004bfc:	d100      	bne.n	8004c00 <memcpy+0xc>
 8004bfe:	4770      	bx	lr
 8004c00:	b510      	push	{r4, lr}
 8004c02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c0a:	4291      	cmp	r1, r2
 8004c0c:	d1f9      	bne.n	8004c02 <memcpy+0xe>
 8004c0e:	bd10      	pop	{r4, pc}

08004c10 <memset>:
 8004c10:	4402      	add	r2, r0
 8004c12:	4603      	mov	r3, r0
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d100      	bne.n	8004c1a <memset+0xa>
 8004c18:	4770      	bx	lr
 8004c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c1e:	e7f9      	b.n	8004c14 <memset+0x4>

08004c20 <_init>:
 8004c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c22:	bf00      	nop
 8004c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c26:	bc08      	pop	{r3}
 8004c28:	469e      	mov	lr, r3
 8004c2a:	4770      	bx	lr

08004c2c <_fini>:
 8004c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c2e:	bf00      	nop
 8004c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c32:	bc08      	pop	{r3}
 8004c34:	469e      	mov	lr, r3
 8004c36:	4770      	bx	lr
