
rtos_freeRTOS_basic_ledBlink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a08  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004c08  08004c08  00014c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c9c  08004c9c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004c9c  08004c9c  00014c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ca4  08004ca4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ca4  08004ca4  00014ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ca8  08004ca8  00014ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004cac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049bc  20000010  08004cbc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200049cc  08004cbc  000249cc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ac4  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002be0  00000000  00000000  00036b02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  000396e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff0  00000000  00000000  0003a800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000295a  00000000  00000000  0003b7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012b58  00000000  00000000  0003e14a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fed03  00000000  00000000  00050ca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014f9a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000478c  00000000  00000000  0014f9f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000010 	.word	0x20000010
 800021c:	00000000 	.word	0x00000000
 8000220:	08004bf0 	.word	0x08004bf0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000014 	.word	0x20000014
 800023c:	08004bf0 	.word	0x08004bf0

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b96e 	b.w	8000534 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468c      	mov	ip, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	f040 8083 	bne.w	8000386 <__udivmoddi4+0x116>
 8000280:	428a      	cmp	r2, r1
 8000282:	4617      	mov	r7, r2
 8000284:	d947      	bls.n	8000316 <__udivmoddi4+0xa6>
 8000286:	fab2 f282 	clz	r2, r2
 800028a:	b142      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028c:	f1c2 0020 	rsb	r0, r2, #32
 8000290:	fa24 f000 	lsr.w	r0, r4, r0
 8000294:	4091      	lsls	r1, r2
 8000296:	4097      	lsls	r7, r2
 8000298:	ea40 0c01 	orr.w	ip, r0, r1
 800029c:	4094      	lsls	r4, r2
 800029e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	fbbc f6f8 	udiv	r6, ip, r8
 80002a8:	fa1f fe87 	uxth.w	lr, r7
 80002ac:	fb08 c116 	mls	r1, r8, r6, ip
 80002b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b4:	fb06 f10e 	mul.w	r1, r6, lr
 80002b8:	4299      	cmp	r1, r3
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x60>
 80002bc:	18fb      	adds	r3, r7, r3
 80002be:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c2:	f080 8119 	bcs.w	80004f8 <__udivmoddi4+0x288>
 80002c6:	4299      	cmp	r1, r3
 80002c8:	f240 8116 	bls.w	80004f8 <__udivmoddi4+0x288>
 80002cc:	3e02      	subs	r6, #2
 80002ce:	443b      	add	r3, r7
 80002d0:	1a5b      	subs	r3, r3, r1
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d8:	fb08 3310 	mls	r3, r8, r0, r3
 80002dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002e4:	45a6      	cmp	lr, r4
 80002e6:	d909      	bls.n	80002fc <__udivmoddi4+0x8c>
 80002e8:	193c      	adds	r4, r7, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ee:	f080 8105 	bcs.w	80004fc <__udivmoddi4+0x28c>
 80002f2:	45a6      	cmp	lr, r4
 80002f4:	f240 8102 	bls.w	80004fc <__udivmoddi4+0x28c>
 80002f8:	3802      	subs	r0, #2
 80002fa:	443c      	add	r4, r7
 80002fc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000300:	eba4 040e 	sub.w	r4, r4, lr
 8000304:	2600      	movs	r6, #0
 8000306:	b11d      	cbz	r5, 8000310 <__udivmoddi4+0xa0>
 8000308:	40d4      	lsrs	r4, r2
 800030a:	2300      	movs	r3, #0
 800030c:	e9c5 4300 	strd	r4, r3, [r5]
 8000310:	4631      	mov	r1, r6
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xaa>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	2a00      	cmp	r2, #0
 8000320:	d150      	bne.n	80003c4 <__udivmoddi4+0x154>
 8000322:	1bcb      	subs	r3, r1, r7
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	fa1f f887 	uxth.w	r8, r7
 800032c:	2601      	movs	r6, #1
 800032e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000332:	0c21      	lsrs	r1, r4, #16
 8000334:	fb0e 331c 	mls	r3, lr, ip, r3
 8000338:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800033c:	fb08 f30c 	mul.w	r3, r8, ip
 8000340:	428b      	cmp	r3, r1
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0xe4>
 8000344:	1879      	adds	r1, r7, r1
 8000346:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0xe2>
 800034c:	428b      	cmp	r3, r1
 800034e:	f200 80e9 	bhi.w	8000524 <__udivmoddi4+0x2b4>
 8000352:	4684      	mov	ip, r0
 8000354:	1ac9      	subs	r1, r1, r3
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb1 f0fe 	udiv	r0, r1, lr
 800035c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000360:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000364:	fb08 f800 	mul.w	r8, r8, r0
 8000368:	45a0      	cmp	r8, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x10c>
 800036c:	193c      	adds	r4, r7, r4
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x10a>
 8000374:	45a0      	cmp	r8, r4
 8000376:	f200 80d9 	bhi.w	800052c <__udivmoddi4+0x2bc>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 0408 	sub.w	r4, r4, r8
 8000380:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000384:	e7bf      	b.n	8000306 <__udivmoddi4+0x96>
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x12e>
 800038a:	2d00      	cmp	r5, #0
 800038c:	f000 80b1 	beq.w	80004f2 <__udivmoddi4+0x282>
 8000390:	2600      	movs	r6, #0
 8000392:	e9c5 0100 	strd	r0, r1, [r5]
 8000396:	4630      	mov	r0, r6
 8000398:	4631      	mov	r1, r6
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f683 	clz	r6, r3
 80003a2:	2e00      	cmp	r6, #0
 80003a4:	d14a      	bne.n	800043c <__udivmoddi4+0x1cc>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0x140>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80b8 	bhi.w	8000520 <__udivmoddi4+0x2b0>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0103 	sbc.w	r1, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	468c      	mov	ip, r1
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	d0a8      	beq.n	8000310 <__udivmoddi4+0xa0>
 80003be:	e9c5 4c00 	strd	r4, ip, [r5]
 80003c2:	e7a5      	b.n	8000310 <__udivmoddi4+0xa0>
 80003c4:	f1c2 0320 	rsb	r3, r2, #32
 80003c8:	fa20 f603 	lsr.w	r6, r0, r3
 80003cc:	4097      	lsls	r7, r2
 80003ce:	fa01 f002 	lsl.w	r0, r1, r2
 80003d2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d6:	40d9      	lsrs	r1, r3
 80003d8:	4330      	orrs	r0, r6
 80003da:	0c03      	lsrs	r3, r0, #16
 80003dc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e0:	fa1f f887 	uxth.w	r8, r7
 80003e4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb06 f108 	mul.w	r1, r6, r8
 80003f0:	4299      	cmp	r1, r3
 80003f2:	fa04 f402 	lsl.w	r4, r4, r2
 80003f6:	d909      	bls.n	800040c <__udivmoddi4+0x19c>
 80003f8:	18fb      	adds	r3, r7, r3
 80003fa:	f106 3cff 	add.w	ip, r6, #4294967295
 80003fe:	f080 808d 	bcs.w	800051c <__udivmoddi4+0x2ac>
 8000402:	4299      	cmp	r1, r3
 8000404:	f240 808a 	bls.w	800051c <__udivmoddi4+0x2ac>
 8000408:	3e02      	subs	r6, #2
 800040a:	443b      	add	r3, r7
 800040c:	1a5b      	subs	r3, r3, r1
 800040e:	b281      	uxth	r1, r0
 8000410:	fbb3 f0fe 	udiv	r0, r3, lr
 8000414:	fb0e 3310 	mls	r3, lr, r0, r3
 8000418:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800041c:	fb00 f308 	mul.w	r3, r0, r8
 8000420:	428b      	cmp	r3, r1
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x1c4>
 8000424:	1879      	adds	r1, r7, r1
 8000426:	f100 3cff 	add.w	ip, r0, #4294967295
 800042a:	d273      	bcs.n	8000514 <__udivmoddi4+0x2a4>
 800042c:	428b      	cmp	r3, r1
 800042e:	d971      	bls.n	8000514 <__udivmoddi4+0x2a4>
 8000430:	3802      	subs	r0, #2
 8000432:	4439      	add	r1, r7
 8000434:	1acb      	subs	r3, r1, r3
 8000436:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800043a:	e778      	b.n	800032e <__udivmoddi4+0xbe>
 800043c:	f1c6 0c20 	rsb	ip, r6, #32
 8000440:	fa03 f406 	lsl.w	r4, r3, r6
 8000444:	fa22 f30c 	lsr.w	r3, r2, ip
 8000448:	431c      	orrs	r4, r3
 800044a:	fa20 f70c 	lsr.w	r7, r0, ip
 800044e:	fa01 f306 	lsl.w	r3, r1, r6
 8000452:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000456:	fa21 f10c 	lsr.w	r1, r1, ip
 800045a:	431f      	orrs	r7, r3
 800045c:	0c3b      	lsrs	r3, r7, #16
 800045e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000462:	fa1f f884 	uxth.w	r8, r4
 8000466:	fb0e 1119 	mls	r1, lr, r9, r1
 800046a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800046e:	fb09 fa08 	mul.w	sl, r9, r8
 8000472:	458a      	cmp	sl, r1
 8000474:	fa02 f206 	lsl.w	r2, r2, r6
 8000478:	fa00 f306 	lsl.w	r3, r0, r6
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x220>
 800047e:	1861      	adds	r1, r4, r1
 8000480:	f109 30ff 	add.w	r0, r9, #4294967295
 8000484:	d248      	bcs.n	8000518 <__udivmoddi4+0x2a8>
 8000486:	458a      	cmp	sl, r1
 8000488:	d946      	bls.n	8000518 <__udivmoddi4+0x2a8>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4421      	add	r1, r4
 8000490:	eba1 010a 	sub.w	r1, r1, sl
 8000494:	b2bf      	uxth	r7, r7
 8000496:	fbb1 f0fe 	udiv	r0, r1, lr
 800049a:	fb0e 1110 	mls	r1, lr, r0, r1
 800049e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004a2:	fb00 f808 	mul.w	r8, r0, r8
 80004a6:	45b8      	cmp	r8, r7
 80004a8:	d907      	bls.n	80004ba <__udivmoddi4+0x24a>
 80004aa:	19e7      	adds	r7, r4, r7
 80004ac:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b0:	d22e      	bcs.n	8000510 <__udivmoddi4+0x2a0>
 80004b2:	45b8      	cmp	r8, r7
 80004b4:	d92c      	bls.n	8000510 <__udivmoddi4+0x2a0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4427      	add	r7, r4
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	eba7 0708 	sub.w	r7, r7, r8
 80004c2:	fba0 8902 	umull	r8, r9, r0, r2
 80004c6:	454f      	cmp	r7, r9
 80004c8:	46c6      	mov	lr, r8
 80004ca:	4649      	mov	r1, r9
 80004cc:	d31a      	bcc.n	8000504 <__udivmoddi4+0x294>
 80004ce:	d017      	beq.n	8000500 <__udivmoddi4+0x290>
 80004d0:	b15d      	cbz	r5, 80004ea <__udivmoddi4+0x27a>
 80004d2:	ebb3 020e 	subs.w	r2, r3, lr
 80004d6:	eb67 0701 	sbc.w	r7, r7, r1
 80004da:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004de:	40f2      	lsrs	r2, r6
 80004e0:	ea4c 0202 	orr.w	r2, ip, r2
 80004e4:	40f7      	lsrs	r7, r6
 80004e6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ea:	2600      	movs	r6, #0
 80004ec:	4631      	mov	r1, r6
 80004ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e70b      	b.n	8000310 <__udivmoddi4+0xa0>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e9      	b.n	80002d0 <__udivmoddi4+0x60>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6fd      	b.n	80002fc <__udivmoddi4+0x8c>
 8000500:	4543      	cmp	r3, r8
 8000502:	d2e5      	bcs.n	80004d0 <__udivmoddi4+0x260>
 8000504:	ebb8 0e02 	subs.w	lr, r8, r2
 8000508:	eb69 0104 	sbc.w	r1, r9, r4
 800050c:	3801      	subs	r0, #1
 800050e:	e7df      	b.n	80004d0 <__udivmoddi4+0x260>
 8000510:	4608      	mov	r0, r1
 8000512:	e7d2      	b.n	80004ba <__udivmoddi4+0x24a>
 8000514:	4660      	mov	r0, ip
 8000516:	e78d      	b.n	8000434 <__udivmoddi4+0x1c4>
 8000518:	4681      	mov	r9, r0
 800051a:	e7b9      	b.n	8000490 <__udivmoddi4+0x220>
 800051c:	4666      	mov	r6, ip
 800051e:	e775      	b.n	800040c <__udivmoddi4+0x19c>
 8000520:	4630      	mov	r0, r6
 8000522:	e74a      	b.n	80003ba <__udivmoddi4+0x14a>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	4439      	add	r1, r7
 800052a:	e713      	b.n	8000354 <__udivmoddi4+0xe4>
 800052c:	3802      	subs	r0, #2
 800052e:	443c      	add	r4, r7
 8000530:	e724      	b.n	800037c <__udivmoddi4+0x10c>
 8000532:	bf00      	nop

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053c:	f000 f9db 	bl	80008f6 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000540:	f000 f824 	bl	800058c <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000544:	f000 f87e 	bl	8000644 <MX_GPIO_Init>

  /* Init scheduler */
  osKernelInitialize();
 8000548:	f001 fc34 	bl	8001db4 <osKernelInitialize>

  /* Create the thread(s) ---------------*/
  /* creation of blinkLEDBlue */
  blinkLEDBlueHandle = osThreadNew(StartBlinkLEDBlue, NULL, &blinkLEDBlue_attributes);
 800054c:	4a09      	ldr	r2, [pc, #36]	; (8000574 <main+0x3c>)
 800054e:	2100      	movs	r1, #0
 8000550:	4809      	ldr	r0, [pc, #36]	; (8000578 <main+0x40>)
 8000552:	f001 fc99 	bl	8001e88 <osThreadNew>
 8000556:	4603      	mov	r3, r0
 8000558:	4a08      	ldr	r2, [pc, #32]	; (800057c <main+0x44>)
 800055a:	6013      	str	r3, [r2, #0]
  /* creation of blinkLEDRed */
  blinkLEDRedHandle = osThreadNew(StartBlinkLEDRed, NULL, &blinkLEDRed_attributes);
 800055c:	4a08      	ldr	r2, [pc, #32]	; (8000580 <main+0x48>)
 800055e:	2100      	movs	r1, #0
 8000560:	4808      	ldr	r0, [pc, #32]	; (8000584 <main+0x4c>)
 8000562:	f001 fc91 	bl	8001e88 <osThreadNew>
 8000566:	4603      	mov	r3, r0
 8000568:	4a07      	ldr	r2, [pc, #28]	; (8000588 <main+0x50>)
 800056a:	6013      	str	r3, [r2, #0]

  /* Start scheduler */
  osKernelStart();
 800056c:	f001 fc56 	bl	8001e1c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  while (1)
 8000570:	e7fe      	b.n	8000570 <main+0x38>
 8000572:	bf00      	nop
 8000574:	08004c3c 	.word	0x08004c3c
 8000578:	080006a9 	.word	0x080006a9
 800057c:	20004934 	.word	0x20004934
 8000580:	08004c60 	.word	0x08004c60
 8000584:	080006e1 	.word	0x080006e1
 8000588:	20004938 	.word	0x20004938

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b094      	sub	sp, #80	; 0x50
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 031c 	add.w	r3, r7, #28
 8000596:	2234      	movs	r2, #52	; 0x34
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f004 fb20 	bl	8004be0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	f107 0308 	add.w	r3, r7, #8
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b0:	4b22      	ldr	r3, [pc, #136]	; (800063c <SystemClock_Config+0xb0>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	4a21      	ldr	r2, [pc, #132]	; (800063c <SystemClock_Config+0xb0>)
 80005b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ba:	6413      	str	r3, [r2, #64]	; 0x40
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <SystemClock_Config+0xb0>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005c8:	4b1d      	ldr	r3, [pc, #116]	; (8000640 <SystemClock_Config+0xb4>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005d0:	4a1b      	ldr	r2, [pc, #108]	; (8000640 <SystemClock_Config+0xb4>)
 80005d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005d6:	6013      	str	r3, [r2, #0]
 80005d8:	4b19      	ldr	r3, [pc, #100]	; (8000640 <SystemClock_Config+0xb4>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e0:	603b      	str	r3, [r7, #0]
 80005e2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e4:	2302      	movs	r3, #2
 80005e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e8:	2301      	movs	r3, #1
 80005ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ec:	2310      	movs	r3, #16
 80005ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005f0:	2300      	movs	r3, #0
 80005f2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f4:	f107 031c 	add.w	r3, r7, #28
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 fc51 	bl	8000ea0 <HAL_RCC_OscConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000604:	f000 f899 	bl	800073a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000608:	230f      	movs	r3, #15
 800060a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800060c:	2300      	movs	r3, #0
 800060e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800061c:	f107 0308 	add.w	r3, r7, #8
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f000 feea 	bl	80013fc <HAL_RCC_ClockConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800062e:	f000 f884 	bl	800073a <Error_Handler>
  }
}
 8000632:	bf00      	nop
 8000634:	3750      	adds	r7, #80	; 0x50
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800
 8000640:	40007000 	.word	0x40007000

08000644 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b086      	sub	sp, #24
 8000648:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000658:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <MX_GPIO_Init+0x5c>)
 800065a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065c:	4a10      	ldr	r2, [pc, #64]	; (80006a0 <MX_GPIO_Init+0x5c>)
 800065e:	f043 0302 	orr.w	r3, r3, #2
 8000662:	6313      	str	r3, [r2, #48]	; 0x30
 8000664:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <MX_GPIO_Init+0x5c>)
 8000666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000668:	f003 0302 	and.w	r3, r3, #2
 800066c:	603b      	str	r3, [r7, #0]
 800066e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000670:	2200      	movs	r2, #0
 8000672:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000676:	480b      	ldr	r0, [pc, #44]	; (80006a4 <MX_GPIO_Init+0x60>)
 8000678:	f000 fbf8 	bl	8000e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 800067c:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000680:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000682:	2301      	movs	r3, #1
 8000684:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068a:	2300      	movs	r3, #0
 800068c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	4619      	mov	r1, r3
 8000692:	4804      	ldr	r0, [pc, #16]	; (80006a4 <MX_GPIO_Init+0x60>)
 8000694:	f000 fa3e 	bl	8000b14 <HAL_GPIO_Init>

}
 8000698:	bf00      	nop
 800069a:	3718      	adds	r7, #24
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40020400 	.word	0x40020400

080006a8 <StartBlinkLEDBlue>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlinkLEDBlue */
void StartBlinkLEDBlue(void *argument)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	GPIOB->BSRR |= (1<<7); // set pin PB7 in register GPIOx_BSRR
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <StartBlinkLEDBlue+0x34>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	4a09      	ldr	r2, [pc, #36]	; (80006dc <StartBlinkLEDBlue+0x34>)
 80006b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006ba:	6193      	str	r3, [r2, #24]
    osDelay(500);
 80006bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006c0:	f001 fcc8 	bl	8002054 <osDelay>
    GPIOB->BSRR |= ((1<<7)<<16); // reset pin PB7 in register GPIOx_BSRR
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <StartBlinkLEDBlue+0x34>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	4a04      	ldr	r2, [pc, #16]	; (80006dc <StartBlinkLEDBlue+0x34>)
 80006ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80006ce:	6193      	str	r3, [r2, #24]
    osDelay(500);
 80006d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006d4:	f001 fcbe 	bl	8002054 <osDelay>
	GPIOB->BSRR |= (1<<7); // set pin PB7 in register GPIOx_BSRR
 80006d8:	e7ea      	b.n	80006b0 <StartBlinkLEDBlue+0x8>
 80006da:	bf00      	nop
 80006dc:	40020400 	.word	0x40020400

080006e0 <StartBlinkLEDRed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinkLEDRed */
void StartBlinkLEDRed(void *argument)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkLEDRed */
  /* Infinite loop */
  for(;;)
  {
	GPIOB->BSRR |= (1<<14); // set pin PB14 in register GPIOx_BSRR
 80006e8:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <StartBlinkLEDRed+0x38>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	4a0a      	ldr	r2, [pc, #40]	; (8000718 <StartBlinkLEDRed+0x38>)
 80006ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f2:	6193      	str	r3, [r2, #24]
    osDelay(600);
 80006f4:	f44f 7016 	mov.w	r0, #600	; 0x258
 80006f8:	f001 fcac 	bl	8002054 <osDelay>
    GPIOB->BSRR |= ((1<<14)<<16); // reset pin PB14 in register GPIOx_BSRR
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <StartBlinkLEDRed+0x38>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	4a05      	ldr	r2, [pc, #20]	; (8000718 <StartBlinkLEDRed+0x38>)
 8000702:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000706:	6193      	str	r3, [r2, #24]
    osDelay(600);
 8000708:	f44f 7016 	mov.w	r0, #600	; 0x258
 800070c:	f001 fca2 	bl	8002054 <osDelay>
    osThreadTerminate(NULL);
 8000710:	2000      	movs	r0, #0
 8000712:	f001 fc5f 	bl	8001fd4 <osThreadTerminate>
	GPIOB->BSRR |= (1<<14); // set pin PB14 in register GPIOx_BSRR
 8000716:	e7e7      	b.n	80006e8 <StartBlinkLEDRed+0x8>
 8000718:	40020400 	.word	0x40020400

0800071c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800072c:	d101      	bne.n	8000732 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800072e:	f000 f8ef 	bl	8000910 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800073e:	b672      	cpsid	i
}
 8000740:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000742:	e7fe      	b.n	8000742 <Error_Handler+0x8>

08000744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <HAL_MspInit+0x4c>)
 800074c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074e:	4a10      	ldr	r2, [pc, #64]	; (8000790 <HAL_MspInit+0x4c>)
 8000750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000754:	6413      	str	r3, [r2, #64]	; 0x40
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <HAL_MspInit+0x4c>)
 8000758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <HAL_MspInit+0x4c>)
 8000764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000766:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <HAL_MspInit+0x4c>)
 8000768:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800076c:	6453      	str	r3, [r2, #68]	; 0x44
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <HAL_MspInit+0x4c>)
 8000770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	210f      	movs	r1, #15
 800077e:	f06f 0001 	mvn.w	r0, #1
 8000782:	f000 f99d 	bl	8000ac0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800

08000794 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08c      	sub	sp, #48	; 0x30
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 80007a4:	2200      	movs	r2, #0
 80007a6:	6879      	ldr	r1, [r7, #4]
 80007a8:	201c      	movs	r0, #28
 80007aa:	f000 f989 	bl	8000ac0 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007ae:	201c      	movs	r0, #28
 80007b0:	f000 f9a2 	bl	8000af8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80007b4:	4b1f      	ldr	r3, [pc, #124]	; (8000834 <HAL_InitTick+0xa0>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b8:	4a1e      	ldr	r2, [pc, #120]	; (8000834 <HAL_InitTick+0xa0>)
 80007ba:	f043 0301 	orr.w	r3, r3, #1
 80007be:	6413      	str	r3, [r2, #64]	; 0x40
 80007c0:	4b1c      	ldr	r3, [pc, #112]	; (8000834 <HAL_InitTick+0xa0>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c4:	f003 0301 	and.w	r3, r3, #1
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007cc:	f107 0210 	add.w	r2, r7, #16
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4611      	mov	r1, r2
 80007d6:	4618      	mov	r0, r3
 80007d8:	f000 ffd2 	bl	8001780 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007dc:	f000 ffbc 	bl	8001758 <HAL_RCC_GetPCLK1Freq>
 80007e0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007e4:	4a14      	ldr	r2, [pc, #80]	; (8000838 <HAL_InitTick+0xa4>)
 80007e6:	fba2 2303 	umull	r2, r3, r2, r3
 80007ea:	0c9b      	lsrs	r3, r3, #18
 80007ec:	3b01      	subs	r3, #1
 80007ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80007f0:	4b12      	ldr	r3, [pc, #72]	; (800083c <HAL_InitTick+0xa8>)
 80007f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007f6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80007f8:	4b10      	ldr	r3, [pc, #64]	; (800083c <HAL_InitTick+0xa8>)
 80007fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007fe:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000800:	4a0e      	ldr	r2, [pc, #56]	; (800083c <HAL_InitTick+0xa8>)
 8000802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000804:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000806:	4b0d      	ldr	r3, [pc, #52]	; (800083c <HAL_InitTick+0xa8>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080c:	4b0b      	ldr	r3, [pc, #44]	; (800083c <HAL_InitTick+0xa8>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000812:	480a      	ldr	r0, [pc, #40]	; (800083c <HAL_InitTick+0xa8>)
 8000814:	f000 ffe6 	bl	80017e4 <HAL_TIM_Base_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d104      	bne.n	8000828 <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800081e:	4807      	ldr	r0, [pc, #28]	; (800083c <HAL_InitTick+0xa8>)
 8000820:	f001 f842 	bl	80018a8 <HAL_TIM_Base_Start_IT>
 8000824:	4603      	mov	r3, r0
 8000826:	e000      	b.n	800082a <HAL_InitTick+0x96>
  }

  /* Return function status */
  return HAL_ERROR;
 8000828:	2301      	movs	r3, #1
}
 800082a:	4618      	mov	r0, r3
 800082c:	3730      	adds	r7, #48	; 0x30
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800
 8000838:	431bde83 	.word	0x431bde83
 800083c:	2000493c 	.word	0x2000493c

08000840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000844:	e7fe      	b.n	8000844 <NMI_Handler+0x4>

08000846 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084a:	e7fe      	b.n	800084a <HardFault_Handler+0x4>

0800084c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <MemManage_Handler+0x4>

08000852 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000856:	e7fe      	b.n	8000856 <BusFault_Handler+0x4>

08000858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800085c:	e7fe      	b.n	800085c <UsageFault_Handler+0x4>

0800085e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000870:	4802      	ldr	r0, [pc, #8]	; (800087c <TIM2_IRQHandler+0x10>)
 8000872:	f001 f891 	bl	8001998 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	2000493c 	.word	0x2000493c

08000880 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <SystemInit+0x20>)
 8000886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800088a:	4a05      	ldr	r2, [pc, #20]	; (80008a0 <SystemInit+0x20>)
 800088c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000890:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008a8:	480d      	ldr	r0, [pc, #52]	; (80008e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008aa:	490e      	ldr	r1, [pc, #56]	; (80008e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008ac:	4a0e      	ldr	r2, [pc, #56]	; (80008e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b0:	e002      	b.n	80008b8 <LoopCopyDataInit>

080008b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b6:	3304      	adds	r3, #4

080008b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008bc:	d3f9      	bcc.n	80008b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008be:	4a0b      	ldr	r2, [pc, #44]	; (80008ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008c0:	4c0b      	ldr	r4, [pc, #44]	; (80008f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c4:	e001      	b.n	80008ca <LoopFillZerobss>

080008c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c8:	3204      	adds	r2, #4

080008ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008cc:	d3fb      	bcc.n	80008c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008ce:	f7ff ffd7 	bl	8000880 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008d2:	f004 f953 	bl	8004b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008d6:	f7ff fe2f 	bl	8000538 <main>
  bx  lr    
 80008da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008dc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80008e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80008e8:	08004cac 	.word	0x08004cac
  ldr r2, =_sbss
 80008ec:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80008f0:	200049cc 	.word	0x200049cc

080008f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008f4:	e7fe      	b.n	80008f4 <ADC_IRQHandler>

080008f6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008fa:	2003      	movs	r0, #3
 80008fc:	f000 f8d5 	bl	8000aaa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000900:	200f      	movs	r0, #15
 8000902:	f7ff ff47 	bl	8000794 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000906:	f7ff ff1d 	bl	8000744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800090a:	2300      	movs	r3, #0
}
 800090c:	4618      	mov	r0, r3
 800090e:	bd80      	pop	{r7, pc}

08000910 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_IncTick+0x20>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	461a      	mov	r2, r3
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <HAL_IncTick+0x24>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4413      	add	r3, r2
 8000920:	4a04      	ldr	r2, [pc, #16]	; (8000934 <HAL_IncTick+0x24>)
 8000922:	6013      	str	r3, [r2, #0]
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	20000008 	.word	0x20000008
 8000934:	20004988 	.word	0x20004988

08000938 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  return uwTick;
 800093c:	4b03      	ldr	r3, [pc, #12]	; (800094c <HAL_GetTick+0x14>)
 800093e:	681b      	ldr	r3, [r3, #0]
}
 8000940:	4618      	mov	r0, r3
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	20004988 	.word	0x20004988

08000950 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	f003 0307 	and.w	r3, r3, #7
 800095e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000960:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <__NVIC_SetPriorityGrouping+0x40>)
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000966:	68ba      	ldr	r2, [r7, #8]
 8000968:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800096c:	4013      	ands	r3, r2
 800096e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <__NVIC_SetPriorityGrouping+0x44>)
 800097a:	4313      	orrs	r3, r2
 800097c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800097e:	4a04      	ldr	r2, [pc, #16]	; (8000990 <__NVIC_SetPriorityGrouping+0x40>)
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	60d3      	str	r3, [r2, #12]
}
 8000984:	bf00      	nop
 8000986:	3714      	adds	r7, #20
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr
 8000990:	e000ed00 	.word	0xe000ed00
 8000994:	05fa0000 	.word	0x05fa0000

08000998 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800099c:	4b04      	ldr	r3, [pc, #16]	; (80009b0 <__NVIC_GetPriorityGrouping+0x18>)
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	0a1b      	lsrs	r3, r3, #8
 80009a2:	f003 0307 	and.w	r3, r3, #7
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	db0b      	blt.n	80009de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	f003 021f 	and.w	r2, r3, #31
 80009cc:	4907      	ldr	r1, [pc, #28]	; (80009ec <__NVIC_EnableIRQ+0x38>)
 80009ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d2:	095b      	lsrs	r3, r3, #5
 80009d4:	2001      	movs	r0, #1
 80009d6:	fa00 f202 	lsl.w	r2, r0, r2
 80009da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	e000e100 	.word	0xe000e100

080009f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	6039      	str	r1, [r7, #0]
 80009fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	db0a      	blt.n	8000a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	490c      	ldr	r1, [pc, #48]	; (8000a3c <__NVIC_SetPriority+0x4c>)
 8000a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0e:	0112      	lsls	r2, r2, #4
 8000a10:	b2d2      	uxtb	r2, r2
 8000a12:	440b      	add	r3, r1
 8000a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a18:	e00a      	b.n	8000a30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	4908      	ldr	r1, [pc, #32]	; (8000a40 <__NVIC_SetPriority+0x50>)
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	f003 030f 	and.w	r3, r3, #15
 8000a26:	3b04      	subs	r3, #4
 8000a28:	0112      	lsls	r2, r2, #4
 8000a2a:	b2d2      	uxtb	r2, r2
 8000a2c:	440b      	add	r3, r1
 8000a2e:	761a      	strb	r2, [r3, #24]
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	e000e100 	.word	0xe000e100
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b089      	sub	sp, #36	; 0x24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	f003 0307 	and.w	r3, r3, #7
 8000a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a58:	69fb      	ldr	r3, [r7, #28]
 8000a5a:	f1c3 0307 	rsb	r3, r3, #7
 8000a5e:	2b04      	cmp	r3, #4
 8000a60:	bf28      	it	cs
 8000a62:	2304      	movcs	r3, #4
 8000a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3304      	adds	r3, #4
 8000a6a:	2b06      	cmp	r3, #6
 8000a6c:	d902      	bls.n	8000a74 <NVIC_EncodePriority+0x30>
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	3b03      	subs	r3, #3
 8000a72:	e000      	b.n	8000a76 <NVIC_EncodePriority+0x32>
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a78:	f04f 32ff 	mov.w	r2, #4294967295
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	43da      	mvns	r2, r3
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	401a      	ands	r2, r3
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	fa01 f303 	lsl.w	r3, r1, r3
 8000a96:	43d9      	mvns	r1, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a9c:	4313      	orrs	r3, r2
         );
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3724      	adds	r7, #36	; 0x24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b082      	sub	sp, #8
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f7ff ff4c 	bl	8000950 <__NVIC_SetPriorityGrouping>
}
 8000ab8:	bf00      	nop
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
 8000acc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ad2:	f7ff ff61 	bl	8000998 <__NVIC_GetPriorityGrouping>
 8000ad6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	68b9      	ldr	r1, [r7, #8]
 8000adc:	6978      	ldr	r0, [r7, #20]
 8000ade:	f7ff ffb1 	bl	8000a44 <NVIC_EncodePriority>
 8000ae2:	4602      	mov	r2, r0
 8000ae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ae8:	4611      	mov	r1, r2
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff ff80 	bl	80009f0 <__NVIC_SetPriority>
}
 8000af0:	bf00      	nop
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff ff54 	bl	80009b4 <__NVIC_EnableIRQ>
}
 8000b0c:	bf00      	nop
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b089      	sub	sp, #36	; 0x24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
 8000b32:	e175      	b.n	8000e20 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000b34:	2201      	movs	r2, #1
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	697a      	ldr	r2, [r7, #20]
 8000b44:	4013      	ands	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	f040 8164 	bne.w	8000e1a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f003 0303 	and.w	r3, r3, #3
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d005      	beq.n	8000b6a <HAL_GPIO_Init+0x56>
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f003 0303 	and.w	r3, r3, #3
 8000b66:	2b02      	cmp	r3, #2
 8000b68:	d130      	bne.n	8000bcc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b70:	69fb      	ldr	r3, [r7, #28]
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	2203      	movs	r2, #3
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	43db      	mvns	r3, r3
 8000b7c:	69ba      	ldr	r2, [r7, #24]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	68da      	ldr	r2, [r3, #12]
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	69ba      	ldr	r2, [r7, #24]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	69ba      	ldr	r2, [r7, #24]
 8000b98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	69ba      	ldr	r2, [r7, #24]
 8000bac:	4013      	ands	r3, r2
 8000bae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	091b      	lsrs	r3, r3, #4
 8000bb6:	f003 0201 	and.w	r2, r3, #1
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	69ba      	ldr	r2, [r7, #24]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	69ba      	ldr	r2, [r7, #24]
 8000bca:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f003 0303 	and.w	r3, r3, #3
 8000bd4:	2b03      	cmp	r3, #3
 8000bd6:	d017      	beq.n	8000c08 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	2203      	movs	r2, #3
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	69ba      	ldr	r2, [r7, #24]
 8000bec:	4013      	ands	r3, r2
 8000bee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	689a      	ldr	r2, [r3, #8]
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	69ba      	ldr	r2, [r7, #24]
 8000c06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f003 0303 	and.w	r3, r3, #3
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d123      	bne.n	8000c5c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	08da      	lsrs	r2, r3, #3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3208      	adds	r2, #8
 8000c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	f003 0307 	and.w	r3, r3, #7
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	220f      	movs	r2, #15
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	43db      	mvns	r3, r3
 8000c32:	69ba      	ldr	r2, [r7, #24]
 8000c34:	4013      	ands	r3, r2
 8000c36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	691a      	ldr	r2, [r3, #16]
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	08da      	lsrs	r2, r3, #3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	3208      	adds	r2, #8
 8000c56:	69b9      	ldr	r1, [r7, #24]
 8000c58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	2203      	movs	r2, #3
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	69ba      	ldr	r2, [r7, #24]
 8000c70:	4013      	ands	r3, r2
 8000c72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f003 0203 	and.w	r2, r3, #3
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	f000 80be 	beq.w	8000e1a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9e:	4b66      	ldr	r3, [pc, #408]	; (8000e38 <HAL_GPIO_Init+0x324>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	4a65      	ldr	r2, [pc, #404]	; (8000e38 <HAL_GPIO_Init+0x324>)
 8000ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8000caa:	4b63      	ldr	r3, [pc, #396]	; (8000e38 <HAL_GPIO_Init+0x324>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000cb6:	4a61      	ldr	r2, [pc, #388]	; (8000e3c <HAL_GPIO_Init+0x328>)
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	089b      	lsrs	r3, r3, #2
 8000cbc:	3302      	adds	r3, #2
 8000cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	f003 0303 	and.w	r3, r3, #3
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	220f      	movs	r2, #15
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a58      	ldr	r2, [pc, #352]	; (8000e40 <HAL_GPIO_Init+0x32c>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d037      	beq.n	8000d52 <HAL_GPIO_Init+0x23e>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a57      	ldr	r2, [pc, #348]	; (8000e44 <HAL_GPIO_Init+0x330>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d031      	beq.n	8000d4e <HAL_GPIO_Init+0x23a>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a56      	ldr	r2, [pc, #344]	; (8000e48 <HAL_GPIO_Init+0x334>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d02b      	beq.n	8000d4a <HAL_GPIO_Init+0x236>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a55      	ldr	r2, [pc, #340]	; (8000e4c <HAL_GPIO_Init+0x338>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d025      	beq.n	8000d46 <HAL_GPIO_Init+0x232>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a54      	ldr	r2, [pc, #336]	; (8000e50 <HAL_GPIO_Init+0x33c>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d01f      	beq.n	8000d42 <HAL_GPIO_Init+0x22e>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a53      	ldr	r2, [pc, #332]	; (8000e54 <HAL_GPIO_Init+0x340>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d019      	beq.n	8000d3e <HAL_GPIO_Init+0x22a>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a52      	ldr	r2, [pc, #328]	; (8000e58 <HAL_GPIO_Init+0x344>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d013      	beq.n	8000d3a <HAL_GPIO_Init+0x226>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a51      	ldr	r2, [pc, #324]	; (8000e5c <HAL_GPIO_Init+0x348>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d00d      	beq.n	8000d36 <HAL_GPIO_Init+0x222>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a50      	ldr	r2, [pc, #320]	; (8000e60 <HAL_GPIO_Init+0x34c>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d007      	beq.n	8000d32 <HAL_GPIO_Init+0x21e>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a4f      	ldr	r2, [pc, #316]	; (8000e64 <HAL_GPIO_Init+0x350>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d101      	bne.n	8000d2e <HAL_GPIO_Init+0x21a>
 8000d2a:	2309      	movs	r3, #9
 8000d2c:	e012      	b.n	8000d54 <HAL_GPIO_Init+0x240>
 8000d2e:	230a      	movs	r3, #10
 8000d30:	e010      	b.n	8000d54 <HAL_GPIO_Init+0x240>
 8000d32:	2308      	movs	r3, #8
 8000d34:	e00e      	b.n	8000d54 <HAL_GPIO_Init+0x240>
 8000d36:	2307      	movs	r3, #7
 8000d38:	e00c      	b.n	8000d54 <HAL_GPIO_Init+0x240>
 8000d3a:	2306      	movs	r3, #6
 8000d3c:	e00a      	b.n	8000d54 <HAL_GPIO_Init+0x240>
 8000d3e:	2305      	movs	r3, #5
 8000d40:	e008      	b.n	8000d54 <HAL_GPIO_Init+0x240>
 8000d42:	2304      	movs	r3, #4
 8000d44:	e006      	b.n	8000d54 <HAL_GPIO_Init+0x240>
 8000d46:	2303      	movs	r3, #3
 8000d48:	e004      	b.n	8000d54 <HAL_GPIO_Init+0x240>
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	e002      	b.n	8000d54 <HAL_GPIO_Init+0x240>
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e000      	b.n	8000d54 <HAL_GPIO_Init+0x240>
 8000d52:	2300      	movs	r3, #0
 8000d54:	69fa      	ldr	r2, [r7, #28]
 8000d56:	f002 0203 	and.w	r2, r2, #3
 8000d5a:	0092      	lsls	r2, r2, #2
 8000d5c:	4093      	lsls	r3, r2
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000d64:	4935      	ldr	r1, [pc, #212]	; (8000e3c <HAL_GPIO_Init+0x328>)
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	089b      	lsrs	r3, r3, #2
 8000d6a:	3302      	adds	r3, #2
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d72:	4b3d      	ldr	r3, [pc, #244]	; (8000e68 <HAL_GPIO_Init+0x354>)
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d003      	beq.n	8000d96 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d96:	4a34      	ldr	r2, [pc, #208]	; (8000e68 <HAL_GPIO_Init+0x354>)
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d9c:	4b32      	ldr	r3, [pc, #200]	; (8000e68 <HAL_GPIO_Init+0x354>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	43db      	mvns	r3, r3
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	4013      	ands	r3, r2
 8000daa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d003      	beq.n	8000dc0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000dc0:	4a29      	ldr	r2, [pc, #164]	; (8000e68 <HAL_GPIO_Init+0x354>)
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dc6:	4b28      	ldr	r3, [pc, #160]	; (8000e68 <HAL_GPIO_Init+0x354>)
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d003      	beq.n	8000dea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000dea:	4a1f      	ldr	r2, [pc, #124]	; (8000e68 <HAL_GPIO_Init+0x354>)
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000df0:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <HAL_GPIO_Init+0x354>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d003      	beq.n	8000e14 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e14:	4a14      	ldr	r2, [pc, #80]	; (8000e68 <HAL_GPIO_Init+0x354>)
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	61fb      	str	r3, [r7, #28]
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	2b0f      	cmp	r3, #15
 8000e24:	f67f ae86 	bls.w	8000b34 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000e28:	bf00      	nop
 8000e2a:	bf00      	nop
 8000e2c:	3724      	adds	r7, #36	; 0x24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40013800 	.word	0x40013800
 8000e40:	40020000 	.word	0x40020000
 8000e44:	40020400 	.word	0x40020400
 8000e48:	40020800 	.word	0x40020800
 8000e4c:	40020c00 	.word	0x40020c00
 8000e50:	40021000 	.word	0x40021000
 8000e54:	40021400 	.word	0x40021400
 8000e58:	40021800 	.word	0x40021800
 8000e5c:	40021c00 	.word	0x40021c00
 8000e60:	40022000 	.word	0x40022000
 8000e64:	40022400 	.word	0x40022400
 8000e68:	40013c00 	.word	0x40013c00

08000e6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	460b      	mov	r3, r1
 8000e76:	807b      	strh	r3, [r7, #2]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e7c:	787b      	ldrb	r3, [r7, #1]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d003      	beq.n	8000e8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e82:	887a      	ldrh	r2, [r7, #2]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000e88:	e003      	b.n	8000e92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000e8a:	887b      	ldrh	r3, [r7, #2]
 8000e8c:	041a      	lsls	r2, r3, #16
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	619a      	str	r2, [r3, #24]
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
	...

08000ea0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d101      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e29b      	b.n	80013ee <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f000 8087 	beq.w	8000fd2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ec4:	4b96      	ldr	r3, [pc, #600]	; (8001120 <HAL_RCC_OscConfig+0x280>)
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	f003 030c 	and.w	r3, r3, #12
 8000ecc:	2b04      	cmp	r3, #4
 8000ece:	d00c      	beq.n	8000eea <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ed0:	4b93      	ldr	r3, [pc, #588]	; (8001120 <HAL_RCC_OscConfig+0x280>)
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	f003 030c 	and.w	r3, r3, #12
 8000ed8:	2b08      	cmp	r3, #8
 8000eda:	d112      	bne.n	8000f02 <HAL_RCC_OscConfig+0x62>
 8000edc:	4b90      	ldr	r3, [pc, #576]	; (8001120 <HAL_RCC_OscConfig+0x280>)
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ee4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ee8:	d10b      	bne.n	8000f02 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eea:	4b8d      	ldr	r3, [pc, #564]	; (8001120 <HAL_RCC_OscConfig+0x280>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d06c      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x130>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d168      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e275      	b.n	80013ee <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f0a:	d106      	bne.n	8000f1a <HAL_RCC_OscConfig+0x7a>
 8000f0c:	4b84      	ldr	r3, [pc, #528]	; (8001120 <HAL_RCC_OscConfig+0x280>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a83      	ldr	r2, [pc, #524]	; (8001120 <HAL_RCC_OscConfig+0x280>)
 8000f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f16:	6013      	str	r3, [r2, #0]
 8000f18:	e02e      	b.n	8000f78 <HAL_RCC_OscConfig+0xd8>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d10c      	bne.n	8000f3c <HAL_RCC_OscConfig+0x9c>
 8000f22:	4b7f      	ldr	r3, [pc, #508]	; (8001120 <HAL_RCC_OscConfig+0x280>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a7e      	ldr	r2, [pc, #504]	; (8001120 <HAL_RCC_OscConfig+0x280>)
 8000f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f2c:	6013      	str	r3, [r2, #0]
 8000f2e:	4b7c      	ldr	r3, [pc, #496]	; (8001120 <HAL_RCC_OscConfig+0x280>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a7b      	ldr	r2, [pc, #492]	; (8001120 <HAL_RCC_OscConfig+0x280>)
 8000f34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f38:	6013      	str	r3, [r2, #0]
 8000f3a:	e01d      	b.n	8000f78 <HAL_RCC_OscConfig+0xd8>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f44:	d10c      	bne.n	8000f60 <HAL_RCC_OscConfig+0xc0>
 8000f46:	4b76      	ldr	r3, [pc, #472]	; (8001120 <HAL_RCC_OscConfig+0x280>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a75      	ldr	r2, [pc, #468]	; (8001120 <HAL_RCC_OscConfig+0x280>)
 8000f4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	4b73      	ldr	r3, [pc, #460]	; (8001120 <HAL_RCC_OscConfig+0x280>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a72      	ldr	r2, [pc, #456]	; (8001120 <HAL_RCC_OscConfig+0x280>)
 8000f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f5c:	6013      	str	r3, [r2, #0]
 8000f5e:	e00b      	b.n	8000f78 <HAL_RCC_OscConfig+0xd8>
 8000f60:	4b6f      	ldr	r3, [pc, #444]	; (8001120 <HAL_RCC_OscConfig+0x280>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a6e      	ldr	r2, [pc, #440]	; (8001120 <HAL_RCC_OscConfig+0x280>)
 8000f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f6a:	6013      	str	r3, [r2, #0]
 8000f6c:	4b6c      	ldr	r3, [pc, #432]	; (8001120 <HAL_RCC_OscConfig+0x280>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a6b      	ldr	r2, [pc, #428]	; (8001120 <HAL_RCC_OscConfig+0x280>)
 8000f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d013      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f80:	f7ff fcda 	bl	8000938 <HAL_GetTick>
 8000f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f86:	e008      	b.n	8000f9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f88:	f7ff fcd6 	bl	8000938 <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b64      	cmp	r3, #100	; 0x64
 8000f94:	d901      	bls.n	8000f9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e229      	b.n	80013ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f9a:	4b61      	ldr	r3, [pc, #388]	; (8001120 <HAL_RCC_OscConfig+0x280>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d0f0      	beq.n	8000f88 <HAL_RCC_OscConfig+0xe8>
 8000fa6:	e014      	b.n	8000fd2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fa8:	f7ff fcc6 	bl	8000938 <HAL_GetTick>
 8000fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fae:	e008      	b.n	8000fc2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fb0:	f7ff fcc2 	bl	8000938 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2b64      	cmp	r3, #100	; 0x64
 8000fbc:	d901      	bls.n	8000fc2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e215      	b.n	80013ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fc2:	4b57      	ldr	r3, [pc, #348]	; (8001120 <HAL_RCC_OscConfig+0x280>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d1f0      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x110>
 8000fce:	e000      	b.n	8000fd2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d069      	beq.n	80010b2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fde:	4b50      	ldr	r3, [pc, #320]	; (8001120 <HAL_RCC_OscConfig+0x280>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	f003 030c 	and.w	r3, r3, #12
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d00b      	beq.n	8001002 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fea:	4b4d      	ldr	r3, [pc, #308]	; (8001120 <HAL_RCC_OscConfig+0x280>)
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	f003 030c 	and.w	r3, r3, #12
 8000ff2:	2b08      	cmp	r3, #8
 8000ff4:	d11c      	bne.n	8001030 <HAL_RCC_OscConfig+0x190>
 8000ff6:	4b4a      	ldr	r3, [pc, #296]	; (8001120 <HAL_RCC_OscConfig+0x280>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d116      	bne.n	8001030 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001002:	4b47      	ldr	r3, [pc, #284]	; (8001120 <HAL_RCC_OscConfig+0x280>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	2b00      	cmp	r3, #0
 800100c:	d005      	beq.n	800101a <HAL_RCC_OscConfig+0x17a>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d001      	beq.n	800101a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e1e9      	b.n	80013ee <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800101a:	4b41      	ldr	r3, [pc, #260]	; (8001120 <HAL_RCC_OscConfig+0x280>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	691b      	ldr	r3, [r3, #16]
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	493d      	ldr	r1, [pc, #244]	; (8001120 <HAL_RCC_OscConfig+0x280>)
 800102a:	4313      	orrs	r3, r2
 800102c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800102e:	e040      	b.n	80010b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d023      	beq.n	8001080 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001038:	4b39      	ldr	r3, [pc, #228]	; (8001120 <HAL_RCC_OscConfig+0x280>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a38      	ldr	r2, [pc, #224]	; (8001120 <HAL_RCC_OscConfig+0x280>)
 800103e:	f043 0301 	orr.w	r3, r3, #1
 8001042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001044:	f7ff fc78 	bl	8000938 <HAL_GetTick>
 8001048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800104a:	e008      	b.n	800105e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800104c:	f7ff fc74 	bl	8000938 <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	2b02      	cmp	r3, #2
 8001058:	d901      	bls.n	800105e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800105a:	2303      	movs	r3, #3
 800105c:	e1c7      	b.n	80013ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800105e:	4b30      	ldr	r3, [pc, #192]	; (8001120 <HAL_RCC_OscConfig+0x280>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	2b00      	cmp	r3, #0
 8001068:	d0f0      	beq.n	800104c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800106a:	4b2d      	ldr	r3, [pc, #180]	; (8001120 <HAL_RCC_OscConfig+0x280>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	4929      	ldr	r1, [pc, #164]	; (8001120 <HAL_RCC_OscConfig+0x280>)
 800107a:	4313      	orrs	r3, r2
 800107c:	600b      	str	r3, [r1, #0]
 800107e:	e018      	b.n	80010b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001080:	4b27      	ldr	r3, [pc, #156]	; (8001120 <HAL_RCC_OscConfig+0x280>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a26      	ldr	r2, [pc, #152]	; (8001120 <HAL_RCC_OscConfig+0x280>)
 8001086:	f023 0301 	bic.w	r3, r3, #1
 800108a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800108c:	f7ff fc54 	bl	8000938 <HAL_GetTick>
 8001090:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001092:	e008      	b.n	80010a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001094:	f7ff fc50 	bl	8000938 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d901      	bls.n	80010a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e1a3      	b.n	80013ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010a6:	4b1e      	ldr	r3, [pc, #120]	; (8001120 <HAL_RCC_OscConfig+0x280>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1f0      	bne.n	8001094 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0308 	and.w	r3, r3, #8
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d038      	beq.n	8001130 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d019      	beq.n	80010fa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010c6:	4b16      	ldr	r3, [pc, #88]	; (8001120 <HAL_RCC_OscConfig+0x280>)
 80010c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010ca:	4a15      	ldr	r2, [pc, #84]	; (8001120 <HAL_RCC_OscConfig+0x280>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010d2:	f7ff fc31 	bl	8000938 <HAL_GetTick>
 80010d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010d8:	e008      	b.n	80010ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010da:	f7ff fc2d 	bl	8000938 <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d901      	bls.n	80010ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e180      	b.n	80013ee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ec:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <HAL_RCC_OscConfig+0x280>)
 80010ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d0f0      	beq.n	80010da <HAL_RCC_OscConfig+0x23a>
 80010f8:	e01a      	b.n	8001130 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <HAL_RCC_OscConfig+0x280>)
 80010fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010fe:	4a08      	ldr	r2, [pc, #32]	; (8001120 <HAL_RCC_OscConfig+0x280>)
 8001100:	f023 0301 	bic.w	r3, r3, #1
 8001104:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001106:	f7ff fc17 	bl	8000938 <HAL_GetTick>
 800110a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800110c:	e00a      	b.n	8001124 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800110e:	f7ff fc13 	bl	8000938 <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b02      	cmp	r3, #2
 800111a:	d903      	bls.n	8001124 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e166      	b.n	80013ee <HAL_RCC_OscConfig+0x54e>
 8001120:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001124:	4b92      	ldr	r3, [pc, #584]	; (8001370 <HAL_RCC_OscConfig+0x4d0>)
 8001126:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1ee      	bne.n	800110e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	2b00      	cmp	r3, #0
 800113a:	f000 80a4 	beq.w	8001286 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800113e:	4b8c      	ldr	r3, [pc, #560]	; (8001370 <HAL_RCC_OscConfig+0x4d0>)
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10d      	bne.n	8001166 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800114a:	4b89      	ldr	r3, [pc, #548]	; (8001370 <HAL_RCC_OscConfig+0x4d0>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	4a88      	ldr	r2, [pc, #544]	; (8001370 <HAL_RCC_OscConfig+0x4d0>)
 8001150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001154:	6413      	str	r3, [r2, #64]	; 0x40
 8001156:	4b86      	ldr	r3, [pc, #536]	; (8001370 <HAL_RCC_OscConfig+0x4d0>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001162:	2301      	movs	r3, #1
 8001164:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001166:	4b83      	ldr	r3, [pc, #524]	; (8001374 <HAL_RCC_OscConfig+0x4d4>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800116e:	2b00      	cmp	r3, #0
 8001170:	d118      	bne.n	80011a4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001172:	4b80      	ldr	r3, [pc, #512]	; (8001374 <HAL_RCC_OscConfig+0x4d4>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a7f      	ldr	r2, [pc, #508]	; (8001374 <HAL_RCC_OscConfig+0x4d4>)
 8001178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800117c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800117e:	f7ff fbdb 	bl	8000938 <HAL_GetTick>
 8001182:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001184:	e008      	b.n	8001198 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001186:	f7ff fbd7 	bl	8000938 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b64      	cmp	r3, #100	; 0x64
 8001192:	d901      	bls.n	8001198 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e12a      	b.n	80013ee <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001198:	4b76      	ldr	r3, [pc, #472]	; (8001374 <HAL_RCC_OscConfig+0x4d4>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d0f0      	beq.n	8001186 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d106      	bne.n	80011ba <HAL_RCC_OscConfig+0x31a>
 80011ac:	4b70      	ldr	r3, [pc, #448]	; (8001370 <HAL_RCC_OscConfig+0x4d0>)
 80011ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011b0:	4a6f      	ldr	r2, [pc, #444]	; (8001370 <HAL_RCC_OscConfig+0x4d0>)
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	6713      	str	r3, [r2, #112]	; 0x70
 80011b8:	e02d      	b.n	8001216 <HAL_RCC_OscConfig+0x376>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d10c      	bne.n	80011dc <HAL_RCC_OscConfig+0x33c>
 80011c2:	4b6b      	ldr	r3, [pc, #428]	; (8001370 <HAL_RCC_OscConfig+0x4d0>)
 80011c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011c6:	4a6a      	ldr	r2, [pc, #424]	; (8001370 <HAL_RCC_OscConfig+0x4d0>)
 80011c8:	f023 0301 	bic.w	r3, r3, #1
 80011cc:	6713      	str	r3, [r2, #112]	; 0x70
 80011ce:	4b68      	ldr	r3, [pc, #416]	; (8001370 <HAL_RCC_OscConfig+0x4d0>)
 80011d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011d2:	4a67      	ldr	r2, [pc, #412]	; (8001370 <HAL_RCC_OscConfig+0x4d0>)
 80011d4:	f023 0304 	bic.w	r3, r3, #4
 80011d8:	6713      	str	r3, [r2, #112]	; 0x70
 80011da:	e01c      	b.n	8001216 <HAL_RCC_OscConfig+0x376>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	2b05      	cmp	r3, #5
 80011e2:	d10c      	bne.n	80011fe <HAL_RCC_OscConfig+0x35e>
 80011e4:	4b62      	ldr	r3, [pc, #392]	; (8001370 <HAL_RCC_OscConfig+0x4d0>)
 80011e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011e8:	4a61      	ldr	r2, [pc, #388]	; (8001370 <HAL_RCC_OscConfig+0x4d0>)
 80011ea:	f043 0304 	orr.w	r3, r3, #4
 80011ee:	6713      	str	r3, [r2, #112]	; 0x70
 80011f0:	4b5f      	ldr	r3, [pc, #380]	; (8001370 <HAL_RCC_OscConfig+0x4d0>)
 80011f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011f4:	4a5e      	ldr	r2, [pc, #376]	; (8001370 <HAL_RCC_OscConfig+0x4d0>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	6713      	str	r3, [r2, #112]	; 0x70
 80011fc:	e00b      	b.n	8001216 <HAL_RCC_OscConfig+0x376>
 80011fe:	4b5c      	ldr	r3, [pc, #368]	; (8001370 <HAL_RCC_OscConfig+0x4d0>)
 8001200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001202:	4a5b      	ldr	r2, [pc, #364]	; (8001370 <HAL_RCC_OscConfig+0x4d0>)
 8001204:	f023 0301 	bic.w	r3, r3, #1
 8001208:	6713      	str	r3, [r2, #112]	; 0x70
 800120a:	4b59      	ldr	r3, [pc, #356]	; (8001370 <HAL_RCC_OscConfig+0x4d0>)
 800120c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800120e:	4a58      	ldr	r2, [pc, #352]	; (8001370 <HAL_RCC_OscConfig+0x4d0>)
 8001210:	f023 0304 	bic.w	r3, r3, #4
 8001214:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d015      	beq.n	800124a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800121e:	f7ff fb8b 	bl	8000938 <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001224:	e00a      	b.n	800123c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001226:	f7ff fb87 	bl	8000938 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	f241 3288 	movw	r2, #5000	; 0x1388
 8001234:	4293      	cmp	r3, r2
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e0d8      	b.n	80013ee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800123c:	4b4c      	ldr	r3, [pc, #304]	; (8001370 <HAL_RCC_OscConfig+0x4d0>)
 800123e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d0ee      	beq.n	8001226 <HAL_RCC_OscConfig+0x386>
 8001248:	e014      	b.n	8001274 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800124a:	f7ff fb75 	bl	8000938 <HAL_GetTick>
 800124e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001250:	e00a      	b.n	8001268 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001252:	f7ff fb71 	bl	8000938 <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001260:	4293      	cmp	r3, r2
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e0c2      	b.n	80013ee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001268:	4b41      	ldr	r3, [pc, #260]	; (8001370 <HAL_RCC_OscConfig+0x4d0>)
 800126a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800126c:	f003 0302 	and.w	r3, r3, #2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1ee      	bne.n	8001252 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001274:	7dfb      	ldrb	r3, [r7, #23]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d105      	bne.n	8001286 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800127a:	4b3d      	ldr	r3, [pc, #244]	; (8001370 <HAL_RCC_OscConfig+0x4d0>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	4a3c      	ldr	r2, [pc, #240]	; (8001370 <HAL_RCC_OscConfig+0x4d0>)
 8001280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001284:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	2b00      	cmp	r3, #0
 800128c:	f000 80ae 	beq.w	80013ec <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001290:	4b37      	ldr	r3, [pc, #220]	; (8001370 <HAL_RCC_OscConfig+0x4d0>)
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f003 030c 	and.w	r3, r3, #12
 8001298:	2b08      	cmp	r3, #8
 800129a:	d06d      	beq.n	8001378 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d14b      	bne.n	800133c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012a4:	4b32      	ldr	r3, [pc, #200]	; (8001370 <HAL_RCC_OscConfig+0x4d0>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a31      	ldr	r2, [pc, #196]	; (8001370 <HAL_RCC_OscConfig+0x4d0>)
 80012aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b0:	f7ff fb42 	bl	8000938 <HAL_GetTick>
 80012b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012b6:	e008      	b.n	80012ca <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012b8:	f7ff fb3e 	bl	8000938 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e091      	b.n	80013ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012ca:	4b29      	ldr	r3, [pc, #164]	; (8001370 <HAL_RCC_OscConfig+0x4d0>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1f0      	bne.n	80012b8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69da      	ldr	r2, [r3, #28]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a1b      	ldr	r3, [r3, #32]
 80012de:	431a      	orrs	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e4:	019b      	lsls	r3, r3, #6
 80012e6:	431a      	orrs	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ec:	085b      	lsrs	r3, r3, #1
 80012ee:	3b01      	subs	r3, #1
 80012f0:	041b      	lsls	r3, r3, #16
 80012f2:	431a      	orrs	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f8:	061b      	lsls	r3, r3, #24
 80012fa:	431a      	orrs	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001300:	071b      	lsls	r3, r3, #28
 8001302:	491b      	ldr	r1, [pc, #108]	; (8001370 <HAL_RCC_OscConfig+0x4d0>)
 8001304:	4313      	orrs	r3, r2
 8001306:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001308:	4b19      	ldr	r3, [pc, #100]	; (8001370 <HAL_RCC_OscConfig+0x4d0>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a18      	ldr	r2, [pc, #96]	; (8001370 <HAL_RCC_OscConfig+0x4d0>)
 800130e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001314:	f7ff fb10 	bl	8000938 <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800131c:	f7ff fb0c 	bl	8000938 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e05f      	b.n	80013ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800132e:	4b10      	ldr	r3, [pc, #64]	; (8001370 <HAL_RCC_OscConfig+0x4d0>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d0f0      	beq.n	800131c <HAL_RCC_OscConfig+0x47c>
 800133a:	e057      	b.n	80013ec <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <HAL_RCC_OscConfig+0x4d0>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a0b      	ldr	r2, [pc, #44]	; (8001370 <HAL_RCC_OscConfig+0x4d0>)
 8001342:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001348:	f7ff faf6 	bl	8000938 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001350:	f7ff faf2 	bl	8000938 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e045      	b.n	80013ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001362:	4b03      	ldr	r3, [pc, #12]	; (8001370 <HAL_RCC_OscConfig+0x4d0>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f0      	bne.n	8001350 <HAL_RCC_OscConfig+0x4b0>
 800136e:	e03d      	b.n	80013ec <HAL_RCC_OscConfig+0x54c>
 8001370:	40023800 	.word	0x40023800
 8001374:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001378:	4b1f      	ldr	r3, [pc, #124]	; (80013f8 <HAL_RCC_OscConfig+0x558>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d030      	beq.n	80013e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001390:	429a      	cmp	r2, r3
 8001392:	d129      	bne.n	80013e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800139e:	429a      	cmp	r2, r3
 80013a0:	d122      	bne.n	80013e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80013a8:	4013      	ands	r3, r2
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80013ae:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d119      	bne.n	80013e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013be:	085b      	lsrs	r3, r3, #1
 80013c0:	3b01      	subs	r3, #1
 80013c2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d10f      	bne.n	80013e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d107      	bne.n	80013e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d001      	beq.n	80013ec <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e000      	b.n	80013ee <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40023800 	.word	0x40023800

080013fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d101      	bne.n	8001414 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e0d0      	b.n	80015b6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001414:	4b6a      	ldr	r3, [pc, #424]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 030f 	and.w	r3, r3, #15
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	429a      	cmp	r2, r3
 8001420:	d910      	bls.n	8001444 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001422:	4b67      	ldr	r3, [pc, #412]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f023 020f 	bic.w	r2, r3, #15
 800142a:	4965      	ldr	r1, [pc, #404]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	4313      	orrs	r3, r2
 8001430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001432:	4b63      	ldr	r3, [pc, #396]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 030f 	and.w	r3, r3, #15
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	429a      	cmp	r2, r3
 800143e:	d001      	beq.n	8001444 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e0b8      	b.n	80015b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d020      	beq.n	8001492 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0304 	and.w	r3, r3, #4
 8001458:	2b00      	cmp	r3, #0
 800145a:	d005      	beq.n	8001468 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800145c:	4b59      	ldr	r3, [pc, #356]	; (80015c4 <HAL_RCC_ClockConfig+0x1c8>)
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	4a58      	ldr	r2, [pc, #352]	; (80015c4 <HAL_RCC_ClockConfig+0x1c8>)
 8001462:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001466:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0308 	and.w	r3, r3, #8
 8001470:	2b00      	cmp	r3, #0
 8001472:	d005      	beq.n	8001480 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001474:	4b53      	ldr	r3, [pc, #332]	; (80015c4 <HAL_RCC_ClockConfig+0x1c8>)
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	4a52      	ldr	r2, [pc, #328]	; (80015c4 <HAL_RCC_ClockConfig+0x1c8>)
 800147a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800147e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001480:	4b50      	ldr	r3, [pc, #320]	; (80015c4 <HAL_RCC_ClockConfig+0x1c8>)
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	494d      	ldr	r1, [pc, #308]	; (80015c4 <HAL_RCC_ClockConfig+0x1c8>)
 800148e:	4313      	orrs	r3, r2
 8001490:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	2b00      	cmp	r3, #0
 800149c:	d040      	beq.n	8001520 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d107      	bne.n	80014b6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a6:	4b47      	ldr	r3, [pc, #284]	; (80015c4 <HAL_RCC_ClockConfig+0x1c8>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d115      	bne.n	80014de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e07f      	b.n	80015b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d107      	bne.n	80014ce <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014be:	4b41      	ldr	r3, [pc, #260]	; (80015c4 <HAL_RCC_ClockConfig+0x1c8>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d109      	bne.n	80014de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e073      	b.n	80015b6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ce:	4b3d      	ldr	r3, [pc, #244]	; (80015c4 <HAL_RCC_ClockConfig+0x1c8>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e06b      	b.n	80015b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014de:	4b39      	ldr	r3, [pc, #228]	; (80015c4 <HAL_RCC_ClockConfig+0x1c8>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f023 0203 	bic.w	r2, r3, #3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	4936      	ldr	r1, [pc, #216]	; (80015c4 <HAL_RCC_ClockConfig+0x1c8>)
 80014ec:	4313      	orrs	r3, r2
 80014ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014f0:	f7ff fa22 	bl	8000938 <HAL_GetTick>
 80014f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014f6:	e00a      	b.n	800150e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014f8:	f7ff fa1e 	bl	8000938 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	f241 3288 	movw	r2, #5000	; 0x1388
 8001506:	4293      	cmp	r3, r2
 8001508:	d901      	bls.n	800150e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e053      	b.n	80015b6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800150e:	4b2d      	ldr	r3, [pc, #180]	; (80015c4 <HAL_RCC_ClockConfig+0x1c8>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f003 020c 	and.w	r2, r3, #12
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	429a      	cmp	r2, r3
 800151e:	d1eb      	bne.n	80014f8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001520:	4b27      	ldr	r3, [pc, #156]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 030f 	and.w	r3, r3, #15
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	429a      	cmp	r2, r3
 800152c:	d210      	bcs.n	8001550 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800152e:	4b24      	ldr	r3, [pc, #144]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f023 020f 	bic.w	r2, r3, #15
 8001536:	4922      	ldr	r1, [pc, #136]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	4313      	orrs	r3, r2
 800153c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800153e:	4b20      	ldr	r3, [pc, #128]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	429a      	cmp	r2, r3
 800154a:	d001      	beq.n	8001550 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e032      	b.n	80015b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0304 	and.w	r3, r3, #4
 8001558:	2b00      	cmp	r3, #0
 800155a:	d008      	beq.n	800156e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800155c:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <HAL_RCC_ClockConfig+0x1c8>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	4916      	ldr	r1, [pc, #88]	; (80015c4 <HAL_RCC_ClockConfig+0x1c8>)
 800156a:	4313      	orrs	r3, r2
 800156c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0308 	and.w	r3, r3, #8
 8001576:	2b00      	cmp	r3, #0
 8001578:	d009      	beq.n	800158e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800157a:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <HAL_RCC_ClockConfig+0x1c8>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	490e      	ldr	r1, [pc, #56]	; (80015c4 <HAL_RCC_ClockConfig+0x1c8>)
 800158a:	4313      	orrs	r3, r2
 800158c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800158e:	f000 f821 	bl	80015d4 <HAL_RCC_GetSysClockFreq>
 8001592:	4602      	mov	r2, r0
 8001594:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <HAL_RCC_ClockConfig+0x1c8>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	091b      	lsrs	r3, r3, #4
 800159a:	f003 030f 	and.w	r3, r3, #15
 800159e:	490a      	ldr	r1, [pc, #40]	; (80015c8 <HAL_RCC_ClockConfig+0x1cc>)
 80015a0:	5ccb      	ldrb	r3, [r1, r3]
 80015a2:	fa22 f303 	lsr.w	r3, r2, r3
 80015a6:	4a09      	ldr	r2, [pc, #36]	; (80015cc <HAL_RCC_ClockConfig+0x1d0>)
 80015a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015aa:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <HAL_RCC_ClockConfig+0x1d4>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff f8f0 	bl	8000794 <HAL_InitTick>

  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40023c00 	.word	0x40023c00
 80015c4:	40023800 	.word	0x40023800
 80015c8:	08004c84 	.word	0x08004c84
 80015cc:	20000000 	.word	0x20000000
 80015d0:	20000004 	.word	0x20000004

080015d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015d4:	b5b0      	push	{r4, r5, r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80015da:	2100      	movs	r1, #0
 80015dc:	6079      	str	r1, [r7, #4]
 80015de:	2100      	movs	r1, #0
 80015e0:	60f9      	str	r1, [r7, #12]
 80015e2:	2100      	movs	r1, #0
 80015e4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80015e6:	2100      	movs	r1, #0
 80015e8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015ea:	4952      	ldr	r1, [pc, #328]	; (8001734 <HAL_RCC_GetSysClockFreq+0x160>)
 80015ec:	6889      	ldr	r1, [r1, #8]
 80015ee:	f001 010c 	and.w	r1, r1, #12
 80015f2:	2908      	cmp	r1, #8
 80015f4:	d00d      	beq.n	8001612 <HAL_RCC_GetSysClockFreq+0x3e>
 80015f6:	2908      	cmp	r1, #8
 80015f8:	f200 8094 	bhi.w	8001724 <HAL_RCC_GetSysClockFreq+0x150>
 80015fc:	2900      	cmp	r1, #0
 80015fe:	d002      	beq.n	8001606 <HAL_RCC_GetSysClockFreq+0x32>
 8001600:	2904      	cmp	r1, #4
 8001602:	d003      	beq.n	800160c <HAL_RCC_GetSysClockFreq+0x38>
 8001604:	e08e      	b.n	8001724 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001606:	4b4c      	ldr	r3, [pc, #304]	; (8001738 <HAL_RCC_GetSysClockFreq+0x164>)
 8001608:	60bb      	str	r3, [r7, #8]
      break;
 800160a:	e08e      	b.n	800172a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800160c:	4b4b      	ldr	r3, [pc, #300]	; (800173c <HAL_RCC_GetSysClockFreq+0x168>)
 800160e:	60bb      	str	r3, [r7, #8]
      break;
 8001610:	e08b      	b.n	800172a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001612:	4948      	ldr	r1, [pc, #288]	; (8001734 <HAL_RCC_GetSysClockFreq+0x160>)
 8001614:	6849      	ldr	r1, [r1, #4]
 8001616:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800161a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800161c:	4945      	ldr	r1, [pc, #276]	; (8001734 <HAL_RCC_GetSysClockFreq+0x160>)
 800161e:	6849      	ldr	r1, [r1, #4]
 8001620:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001624:	2900      	cmp	r1, #0
 8001626:	d024      	beq.n	8001672 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001628:	4942      	ldr	r1, [pc, #264]	; (8001734 <HAL_RCC_GetSysClockFreq+0x160>)
 800162a:	6849      	ldr	r1, [r1, #4]
 800162c:	0989      	lsrs	r1, r1, #6
 800162e:	4608      	mov	r0, r1
 8001630:	f04f 0100 	mov.w	r1, #0
 8001634:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001638:	f04f 0500 	mov.w	r5, #0
 800163c:	ea00 0204 	and.w	r2, r0, r4
 8001640:	ea01 0305 	and.w	r3, r1, r5
 8001644:	493d      	ldr	r1, [pc, #244]	; (800173c <HAL_RCC_GetSysClockFreq+0x168>)
 8001646:	fb01 f003 	mul.w	r0, r1, r3
 800164a:	2100      	movs	r1, #0
 800164c:	fb01 f102 	mul.w	r1, r1, r2
 8001650:	1844      	adds	r4, r0, r1
 8001652:	493a      	ldr	r1, [pc, #232]	; (800173c <HAL_RCC_GetSysClockFreq+0x168>)
 8001654:	fba2 0101 	umull	r0, r1, r2, r1
 8001658:	1863      	adds	r3, r4, r1
 800165a:	4619      	mov	r1, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	461a      	mov	r2, r3
 8001660:	f04f 0300 	mov.w	r3, #0
 8001664:	f7fe fdec 	bl	8000240 <__aeabi_uldivmod>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4613      	mov	r3, r2
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	e04a      	b.n	8001708 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001672:	4b30      	ldr	r3, [pc, #192]	; (8001734 <HAL_RCC_GetSysClockFreq+0x160>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	099b      	lsrs	r3, r3, #6
 8001678:	461a      	mov	r2, r3
 800167a:	f04f 0300 	mov.w	r3, #0
 800167e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001682:	f04f 0100 	mov.w	r1, #0
 8001686:	ea02 0400 	and.w	r4, r2, r0
 800168a:	ea03 0501 	and.w	r5, r3, r1
 800168e:	4620      	mov	r0, r4
 8001690:	4629      	mov	r1, r5
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	f04f 0300 	mov.w	r3, #0
 800169a:	014b      	lsls	r3, r1, #5
 800169c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80016a0:	0142      	lsls	r2, r0, #5
 80016a2:	4610      	mov	r0, r2
 80016a4:	4619      	mov	r1, r3
 80016a6:	1b00      	subs	r0, r0, r4
 80016a8:	eb61 0105 	sbc.w	r1, r1, r5
 80016ac:	f04f 0200 	mov.w	r2, #0
 80016b0:	f04f 0300 	mov.w	r3, #0
 80016b4:	018b      	lsls	r3, r1, #6
 80016b6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80016ba:	0182      	lsls	r2, r0, #6
 80016bc:	1a12      	subs	r2, r2, r0
 80016be:	eb63 0301 	sbc.w	r3, r3, r1
 80016c2:	f04f 0000 	mov.w	r0, #0
 80016c6:	f04f 0100 	mov.w	r1, #0
 80016ca:	00d9      	lsls	r1, r3, #3
 80016cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80016d0:	00d0      	lsls	r0, r2, #3
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	1912      	adds	r2, r2, r4
 80016d8:	eb45 0303 	adc.w	r3, r5, r3
 80016dc:	f04f 0000 	mov.w	r0, #0
 80016e0:	f04f 0100 	mov.w	r1, #0
 80016e4:	0299      	lsls	r1, r3, #10
 80016e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80016ea:	0290      	lsls	r0, r2, #10
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4610      	mov	r0, r2
 80016f2:	4619      	mov	r1, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	461a      	mov	r2, r3
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	f7fe fda0 	bl	8000240 <__aeabi_uldivmod>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	4613      	mov	r3, r2
 8001706:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001708:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <HAL_RCC_GetSysClockFreq+0x160>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	0c1b      	lsrs	r3, r3, #16
 800170e:	f003 0303 	and.w	r3, r3, #3
 8001712:	3301      	adds	r3, #1
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001718:	68fa      	ldr	r2, [r7, #12]
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001720:	60bb      	str	r3, [r7, #8]
      break;
 8001722:	e002      	b.n	800172a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001724:	4b04      	ldr	r3, [pc, #16]	; (8001738 <HAL_RCC_GetSysClockFreq+0x164>)
 8001726:	60bb      	str	r3, [r7, #8]
      break;
 8001728:	bf00      	nop
    }
  }
  return sysclockfreq;
 800172a:	68bb      	ldr	r3, [r7, #8]
}
 800172c:	4618      	mov	r0, r3
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bdb0      	pop	{r4, r5, r7, pc}
 8001734:	40023800 	.word	0x40023800
 8001738:	00f42400 	.word	0x00f42400
 800173c:	017d7840 	.word	0x017d7840

08001740 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001744:	4b03      	ldr	r3, [pc, #12]	; (8001754 <HAL_RCC_GetHCLKFreq+0x14>)
 8001746:	681b      	ldr	r3, [r3, #0]
}
 8001748:	4618      	mov	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	20000000 	.word	0x20000000

08001758 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800175c:	f7ff fff0 	bl	8001740 <HAL_RCC_GetHCLKFreq>
 8001760:	4602      	mov	r2, r0
 8001762:	4b05      	ldr	r3, [pc, #20]	; (8001778 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	0a9b      	lsrs	r3, r3, #10
 8001768:	f003 0307 	and.w	r3, r3, #7
 800176c:	4903      	ldr	r1, [pc, #12]	; (800177c <HAL_RCC_GetPCLK1Freq+0x24>)
 800176e:	5ccb      	ldrb	r3, [r1, r3]
 8001770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001774:	4618      	mov	r0, r3
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40023800 	.word	0x40023800
 800177c:	08004c94 	.word	0x08004c94

08001780 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	220f      	movs	r2, #15
 800178e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001790:	4b12      	ldr	r3, [pc, #72]	; (80017dc <HAL_RCC_GetClockConfig+0x5c>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f003 0203 	and.w	r2, r3, #3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800179c:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <HAL_RCC_GetClockConfig+0x5c>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <HAL_RCC_GetClockConfig+0x5c>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80017b4:	4b09      	ldr	r3, [pc, #36]	; (80017dc <HAL_RCC_GetClockConfig+0x5c>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	08db      	lsrs	r3, r3, #3
 80017ba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80017c2:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <HAL_RCC_GetClockConfig+0x60>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 020f 	and.w	r2, r3, #15
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	601a      	str	r2, [r3, #0]
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40023c00 	.word	0x40023c00

080017e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e049      	b.n	800188a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d106      	bne.n	8001810 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 f841 	bl	8001892 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2202      	movs	r2, #2
 8001814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3304      	adds	r3, #4
 8001820:	4619      	mov	r1, r3
 8001822:	4610      	mov	r0, r2
 8001824:	f000 fa00 	bl	8001c28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2201      	movs	r2, #1
 800182c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
	...

080018a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d001      	beq.n	80018c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e054      	b.n	800196a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2202      	movs	r2, #2
 80018c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	68da      	ldr	r2, [r3, #12]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f042 0201 	orr.w	r2, r2, #1
 80018d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a26      	ldr	r2, [pc, #152]	; (8001978 <HAL_TIM_Base_Start_IT+0xd0>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d022      	beq.n	8001928 <HAL_TIM_Base_Start_IT+0x80>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018ea:	d01d      	beq.n	8001928 <HAL_TIM_Base_Start_IT+0x80>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a22      	ldr	r2, [pc, #136]	; (800197c <HAL_TIM_Base_Start_IT+0xd4>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d018      	beq.n	8001928 <HAL_TIM_Base_Start_IT+0x80>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a21      	ldr	r2, [pc, #132]	; (8001980 <HAL_TIM_Base_Start_IT+0xd8>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d013      	beq.n	8001928 <HAL_TIM_Base_Start_IT+0x80>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a1f      	ldr	r2, [pc, #124]	; (8001984 <HAL_TIM_Base_Start_IT+0xdc>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d00e      	beq.n	8001928 <HAL_TIM_Base_Start_IT+0x80>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a1e      	ldr	r2, [pc, #120]	; (8001988 <HAL_TIM_Base_Start_IT+0xe0>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d009      	beq.n	8001928 <HAL_TIM_Base_Start_IT+0x80>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a1c      	ldr	r2, [pc, #112]	; (800198c <HAL_TIM_Base_Start_IT+0xe4>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d004      	beq.n	8001928 <HAL_TIM_Base_Start_IT+0x80>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a1b      	ldr	r2, [pc, #108]	; (8001990 <HAL_TIM_Base_Start_IT+0xe8>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d115      	bne.n	8001954 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689a      	ldr	r2, [r3, #8]
 800192e:	4b19      	ldr	r3, [pc, #100]	; (8001994 <HAL_TIM_Base_Start_IT+0xec>)
 8001930:	4013      	ands	r3, r2
 8001932:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2b06      	cmp	r3, #6
 8001938:	d015      	beq.n	8001966 <HAL_TIM_Base_Start_IT+0xbe>
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001940:	d011      	beq.n	8001966 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f042 0201 	orr.w	r2, r2, #1
 8001950:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001952:	e008      	b.n	8001966 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f042 0201 	orr.w	r2, r2, #1
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	e000      	b.n	8001968 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001966:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	40010000 	.word	0x40010000
 800197c:	40000400 	.word	0x40000400
 8001980:	40000800 	.word	0x40000800
 8001984:	40000c00 	.word	0x40000c00
 8001988:	40010400 	.word	0x40010400
 800198c:	40014000 	.word	0x40014000
 8001990:	40001800 	.word	0x40001800
 8001994:	00010007 	.word	0x00010007

08001998 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d122      	bne.n	80019f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d11b      	bne.n	80019f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f06f 0202 	mvn.w	r2, #2
 80019c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 f905 	bl	8001bea <HAL_TIM_IC_CaptureCallback>
 80019e0:	e005      	b.n	80019ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f8f7 	bl	8001bd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 f908 	bl	8001bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	f003 0304 	and.w	r3, r3, #4
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	d122      	bne.n	8001a48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	2b04      	cmp	r3, #4
 8001a0e:	d11b      	bne.n	8001a48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f06f 0204 	mvn.w	r2, #4
 8001a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 f8db 	bl	8001bea <HAL_TIM_IC_CaptureCallback>
 8001a34:	e005      	b.n	8001a42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 f8cd 	bl	8001bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 f8de 	bl	8001bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	f003 0308 	and.w	r3, r3, #8
 8001a52:	2b08      	cmp	r3, #8
 8001a54:	d122      	bne.n	8001a9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	f003 0308 	and.w	r3, r3, #8
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d11b      	bne.n	8001a9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f06f 0208 	mvn.w	r2, #8
 8001a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2204      	movs	r2, #4
 8001a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 f8b1 	bl	8001bea <HAL_TIM_IC_CaptureCallback>
 8001a88:	e005      	b.n	8001a96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 f8a3 	bl	8001bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 f8b4 	bl	8001bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	f003 0310 	and.w	r3, r3, #16
 8001aa6:	2b10      	cmp	r3, #16
 8001aa8:	d122      	bne.n	8001af0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	f003 0310 	and.w	r3, r3, #16
 8001ab4:	2b10      	cmp	r3, #16
 8001ab6:	d11b      	bne.n	8001af0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f06f 0210 	mvn.w	r2, #16
 8001ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2208      	movs	r2, #8
 8001ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 f887 	bl	8001bea <HAL_TIM_IC_CaptureCallback>
 8001adc:	e005      	b.n	8001aea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 f879 	bl	8001bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 f88a 	bl	8001bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d10e      	bne.n	8001b1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d107      	bne.n	8001b1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f06f 0201 	mvn.w	r2, #1
 8001b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7fe fe00 	bl	800071c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b26:	2b80      	cmp	r3, #128	; 0x80
 8001b28:	d10e      	bne.n	8001b48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b34:	2b80      	cmp	r3, #128	; 0x80
 8001b36:	d107      	bne.n	8001b48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 f91a 	bl	8001d7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b56:	d10e      	bne.n	8001b76 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b62:	2b80      	cmp	r3, #128	; 0x80
 8001b64:	d107      	bne.n	8001b76 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001b6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f000 f90d 	bl	8001d90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b80:	2b40      	cmp	r3, #64	; 0x40
 8001b82:	d10e      	bne.n	8001ba2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b8e:	2b40      	cmp	r3, #64	; 0x40
 8001b90:	d107      	bne.n	8001ba2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 f838 	bl	8001c12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	f003 0320 	and.w	r3, r3, #32
 8001bac:	2b20      	cmp	r3, #32
 8001bae:	d10e      	bne.n	8001bce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	f003 0320 	and.w	r3, r3, #32
 8001bba:	2b20      	cmp	r3, #32
 8001bbc:	d107      	bne.n	8001bce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f06f 0220 	mvn.w	r2, #32
 8001bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 f8cd 	bl	8001d68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a40      	ldr	r2, [pc, #256]	; (8001d3c <TIM_Base_SetConfig+0x114>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d013      	beq.n	8001c68 <TIM_Base_SetConfig+0x40>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c46:	d00f      	beq.n	8001c68 <TIM_Base_SetConfig+0x40>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a3d      	ldr	r2, [pc, #244]	; (8001d40 <TIM_Base_SetConfig+0x118>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d00b      	beq.n	8001c68 <TIM_Base_SetConfig+0x40>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a3c      	ldr	r2, [pc, #240]	; (8001d44 <TIM_Base_SetConfig+0x11c>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d007      	beq.n	8001c68 <TIM_Base_SetConfig+0x40>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a3b      	ldr	r2, [pc, #236]	; (8001d48 <TIM_Base_SetConfig+0x120>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d003      	beq.n	8001c68 <TIM_Base_SetConfig+0x40>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a3a      	ldr	r2, [pc, #232]	; (8001d4c <TIM_Base_SetConfig+0x124>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d108      	bne.n	8001c7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a2f      	ldr	r2, [pc, #188]	; (8001d3c <TIM_Base_SetConfig+0x114>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d02b      	beq.n	8001cda <TIM_Base_SetConfig+0xb2>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c88:	d027      	beq.n	8001cda <TIM_Base_SetConfig+0xb2>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a2c      	ldr	r2, [pc, #176]	; (8001d40 <TIM_Base_SetConfig+0x118>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d023      	beq.n	8001cda <TIM_Base_SetConfig+0xb2>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a2b      	ldr	r2, [pc, #172]	; (8001d44 <TIM_Base_SetConfig+0x11c>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d01f      	beq.n	8001cda <TIM_Base_SetConfig+0xb2>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a2a      	ldr	r2, [pc, #168]	; (8001d48 <TIM_Base_SetConfig+0x120>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d01b      	beq.n	8001cda <TIM_Base_SetConfig+0xb2>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a29      	ldr	r2, [pc, #164]	; (8001d4c <TIM_Base_SetConfig+0x124>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d017      	beq.n	8001cda <TIM_Base_SetConfig+0xb2>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a28      	ldr	r2, [pc, #160]	; (8001d50 <TIM_Base_SetConfig+0x128>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d013      	beq.n	8001cda <TIM_Base_SetConfig+0xb2>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a27      	ldr	r2, [pc, #156]	; (8001d54 <TIM_Base_SetConfig+0x12c>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d00f      	beq.n	8001cda <TIM_Base_SetConfig+0xb2>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a26      	ldr	r2, [pc, #152]	; (8001d58 <TIM_Base_SetConfig+0x130>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d00b      	beq.n	8001cda <TIM_Base_SetConfig+0xb2>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a25      	ldr	r2, [pc, #148]	; (8001d5c <TIM_Base_SetConfig+0x134>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d007      	beq.n	8001cda <TIM_Base_SetConfig+0xb2>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a24      	ldr	r2, [pc, #144]	; (8001d60 <TIM_Base_SetConfig+0x138>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d003      	beq.n	8001cda <TIM_Base_SetConfig+0xb2>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a23      	ldr	r2, [pc, #140]	; (8001d64 <TIM_Base_SetConfig+0x13c>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d108      	bne.n	8001cec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ce0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a0a      	ldr	r2, [pc, #40]	; (8001d3c <TIM_Base_SetConfig+0x114>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d003      	beq.n	8001d20 <TIM_Base_SetConfig+0xf8>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a0c      	ldr	r2, [pc, #48]	; (8001d4c <TIM_Base_SetConfig+0x124>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d103      	bne.n	8001d28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	691a      	ldr	r2, [r3, #16]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	615a      	str	r2, [r3, #20]
}
 8001d2e:	bf00      	nop
 8001d30:	3714      	adds	r7, #20
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	40010000 	.word	0x40010000
 8001d40:	40000400 	.word	0x40000400
 8001d44:	40000800 	.word	0x40000800
 8001d48:	40000c00 	.word	0x40000c00
 8001d4c:	40010400 	.word	0x40010400
 8001d50:	40014000 	.word	0x40014000
 8001d54:	40014400 	.word	0x40014400
 8001d58:	40014800 	.word	0x40014800
 8001d5c:	40001800 	.word	0x40001800
 8001d60:	40001c00 	.word	0x40001c00
 8001d64:	40002000 	.word	0x40002000

08001d68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001dba:	f3ef 8305 	mrs	r3, IPSR
 8001dbe:	60bb      	str	r3, [r7, #8]
  return(result);
 8001dc0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10f      	bne.n	8001de6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001dc6:	f3ef 8310 	mrs	r3, PRIMASK
 8001dca:	607b      	str	r3, [r7, #4]
  return(result);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d105      	bne.n	8001dde <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001dd2:	f3ef 8311 	mrs	r3, BASEPRI
 8001dd6:	603b      	str	r3, [r7, #0]
  return(result);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d007      	beq.n	8001dee <osKernelInitialize+0x3a>
 8001dde:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <osKernelInitialize+0x64>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d103      	bne.n	8001dee <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001de6:	f06f 0305 	mvn.w	r3, #5
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	e00c      	b.n	8001e08 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001dee:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <osKernelInitialize+0x64>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d105      	bne.n	8001e02 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001df6:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <osKernelInitialize+0x64>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	e002      	b.n	8001e08 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001e02:	f04f 33ff 	mov.w	r3, #4294967295
 8001e06:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001e08:	68fb      	ldr	r3, [r7, #12]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	2000002c 	.word	0x2000002c

08001e1c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e22:	f3ef 8305 	mrs	r3, IPSR
 8001e26:	60bb      	str	r3, [r7, #8]
  return(result);
 8001e28:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10f      	bne.n	8001e4e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e2e:	f3ef 8310 	mrs	r3, PRIMASK
 8001e32:	607b      	str	r3, [r7, #4]
  return(result);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d105      	bne.n	8001e46 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001e3a:	f3ef 8311 	mrs	r3, BASEPRI
 8001e3e:	603b      	str	r3, [r7, #0]
  return(result);
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d007      	beq.n	8001e56 <osKernelStart+0x3a>
 8001e46:	4b0f      	ldr	r3, [pc, #60]	; (8001e84 <osKernelStart+0x68>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d103      	bne.n	8001e56 <osKernelStart+0x3a>
    stat = osErrorISR;
 8001e4e:	f06f 0305 	mvn.w	r3, #5
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	e010      	b.n	8001e78 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001e56:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <osKernelStart+0x68>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d109      	bne.n	8001e72 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001e5e:	f7ff ffa1 	bl	8001da4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001e62:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <osKernelStart+0x68>)
 8001e64:	2202      	movs	r2, #2
 8001e66:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001e68:	f001 f9d0 	bl	800320c <vTaskStartScheduler>
      stat = osOK;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	e002      	b.n	8001e78 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8001e72:	f04f 33ff 	mov.w	r3, #4294967295
 8001e76:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001e78:	68fb      	ldr	r3, [r7, #12]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	2000002c 	.word	0x2000002c

08001e88 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b090      	sub	sp, #64	; 0x40
 8001e8c:	af04      	add	r7, sp, #16
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e98:	f3ef 8305 	mrs	r3, IPSR
 8001e9c:	61fb      	str	r3, [r7, #28]
  return(result);
 8001e9e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f040 808f 	bne.w	8001fc4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ea6:	f3ef 8310 	mrs	r3, PRIMASK
 8001eaa:	61bb      	str	r3, [r7, #24]
  return(result);
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d105      	bne.n	8001ebe <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001eb2:	f3ef 8311 	mrs	r3, BASEPRI
 8001eb6:	617b      	str	r3, [r7, #20]
  return(result);
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <osThreadNew+0x3e>
 8001ebe:	4b44      	ldr	r3, [pc, #272]	; (8001fd0 <osThreadNew+0x148>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d07e      	beq.n	8001fc4 <osThreadNew+0x13c>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d07b      	beq.n	8001fc4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8001ecc:	2380      	movs	r3, #128	; 0x80
 8001ece:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8001ed0:	2318      	movs	r3, #24
 8001ed2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8001ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8001edc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d045      	beq.n	8001f70 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d002      	beq.n	8001ef2 <osThreadNew+0x6a>
        name = attr->name;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d002      	beq.n	8001f00 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d008      	beq.n	8001f18 <osThreadNew+0x90>
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	2b38      	cmp	r3, #56	; 0x38
 8001f0a:	d805      	bhi.n	8001f18 <osThreadNew+0x90>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <osThreadNew+0x94>
        return (NULL);
 8001f18:	2300      	movs	r3, #0
 8001f1a:	e054      	b.n	8001fc6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	695b      	ldr	r3, [r3, #20]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d003      	beq.n	8001f2c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	695b      	ldr	r3, [r3, #20]
 8001f28:	089b      	lsrs	r3, r3, #2
 8001f2a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00e      	beq.n	8001f52 <osThreadNew+0xca>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	2b5b      	cmp	r3, #91	; 0x5b
 8001f3a:	d90a      	bls.n	8001f52 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d006      	beq.n	8001f52 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d002      	beq.n	8001f52 <osThreadNew+0xca>
        mem = 1;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	623b      	str	r3, [r7, #32]
 8001f50:	e010      	b.n	8001f74 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10c      	bne.n	8001f74 <osThreadNew+0xec>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d108      	bne.n	8001f74 <osThreadNew+0xec>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d104      	bne.n	8001f74 <osThreadNew+0xec>
          mem = 0;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	623b      	str	r3, [r7, #32]
 8001f6e:	e001      	b.n	8001f74 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8001f70:	2300      	movs	r3, #0
 8001f72:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8001f74:	6a3b      	ldr	r3, [r7, #32]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d110      	bne.n	8001f9c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001f82:	9202      	str	r2, [sp, #8]
 8001f84:	9301      	str	r3, [sp, #4]
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f000 fe7f 	bl	8002c94 <xTaskCreateStatic>
 8001f96:	4603      	mov	r3, r0
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	e013      	b.n	8001fc4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8001f9c:	6a3b      	ldr	r3, [r7, #32]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d110      	bne.n	8001fc4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	f107 0310 	add.w	r3, r7, #16
 8001faa:	9301      	str	r3, [sp, #4]
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f000 fed0 	bl	8002d5a <xTaskCreate>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d001      	beq.n	8001fc4 <osThreadNew+0x13c>
          hTask = NULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001fc4:	693b      	ldr	r3, [r7, #16]
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3730      	adds	r7, #48	; 0x30
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	2000002c 	.word	0x2000002c

08001fd4 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fe0:	f3ef 8305 	mrs	r3, IPSR
 8001fe4:	613b      	str	r3, [r7, #16]
  return(result);
 8001fe6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10f      	bne.n	800200c <osThreadTerminate+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fec:	f3ef 8310 	mrs	r3, PRIMASK
 8001ff0:	60fb      	str	r3, [r7, #12]
  return(result);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d105      	bne.n	8002004 <osThreadTerminate+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001ff8:	f3ef 8311 	mrs	r3, BASEPRI
 8001ffc:	60bb      	str	r3, [r7, #8]
  return(result);
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d007      	beq.n	8002014 <osThreadTerminate+0x40>
 8002004:	4b12      	ldr	r3, [pc, #72]	; (8002050 <osThreadTerminate+0x7c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2b02      	cmp	r3, #2
 800200a:	d103      	bne.n	8002014 <osThreadTerminate+0x40>
    stat = osErrorISR;
 800200c:	f06f 0305 	mvn.w	r3, #5
 8002010:	61fb      	str	r3, [r7, #28]
 8002012:	e017      	b.n	8002044 <osThreadTerminate+0x70>
  }
  else if (hTask == NULL) {
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d103      	bne.n	8002022 <osThreadTerminate+0x4e>
    stat = osErrorParameter;
 800201a:	f06f 0303 	mvn.w	r3, #3
 800201e:	61fb      	str	r3, [r7, #28]
 8002020:	e010      	b.n	8002044 <osThreadTerminate+0x70>
  }
  else {
    tstate = eTaskGetState (hTask);
 8002022:	69b8      	ldr	r0, [r7, #24]
 8002024:	f001 f88a 	bl	800313c <eTaskGetState>
 8002028:	4603      	mov	r3, r0
 800202a:	75fb      	strb	r3, [r7, #23]

    if (tstate != eDeleted) {
 800202c:	7dfb      	ldrb	r3, [r7, #23]
 800202e:	2b04      	cmp	r3, #4
 8002030:	d005      	beq.n	800203e <osThreadTerminate+0x6a>
      stat = osOK;
 8002032:	2300      	movs	r3, #0
 8002034:	61fb      	str	r3, [r7, #28]
      vTaskDelete (hTask);
 8002036:	69b8      	ldr	r0, [r7, #24]
 8002038:	f000 ffd6 	bl	8002fe8 <vTaskDelete>
 800203c:	e002      	b.n	8002044 <osThreadTerminate+0x70>
    } else {
      stat = osErrorResource;
 800203e:	f06f 0302 	mvn.w	r3, #2
 8002042:	61fb      	str	r3, [r7, #28]
  }
#else
  stat = osError;
#endif

  return (stat);
 8002044:	69fb      	ldr	r3, [r7, #28]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3720      	adds	r7, #32
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	2000002c 	.word	0x2000002c

08002054 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800205c:	f3ef 8305 	mrs	r3, IPSR
 8002060:	613b      	str	r3, [r7, #16]
  return(result);
 8002062:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002064:	2b00      	cmp	r3, #0
 8002066:	d10f      	bne.n	8002088 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002068:	f3ef 8310 	mrs	r3, PRIMASK
 800206c:	60fb      	str	r3, [r7, #12]
  return(result);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d105      	bne.n	8002080 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002074:	f3ef 8311 	mrs	r3, BASEPRI
 8002078:	60bb      	str	r3, [r7, #8]
  return(result);
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d007      	beq.n	8002090 <osDelay+0x3c>
 8002080:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <osDelay+0x58>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b02      	cmp	r3, #2
 8002086:	d103      	bne.n	8002090 <osDelay+0x3c>
    stat = osErrorISR;
 8002088:	f06f 0305 	mvn.w	r3, #5
 800208c:	617b      	str	r3, [r7, #20]
 800208e:	e007      	b.n	80020a0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d002      	beq.n	80020a0 <osDelay+0x4c>
      vTaskDelay(ticks);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f001 f818 	bl	80030d0 <vTaskDelay>
    }
  }

  return (stat);
 80020a0:	697b      	ldr	r3, [r7, #20]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	2000002c 	.word	0x2000002c

080020b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4a07      	ldr	r2, [pc, #28]	; (80020dc <vApplicationGetIdleTaskMemory+0x2c>)
 80020c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	4a06      	ldr	r2, [pc, #24]	; (80020e0 <vApplicationGetIdleTaskMemory+0x30>)
 80020c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2280      	movs	r2, #128	; 0x80
 80020cc:	601a      	str	r2, [r3, #0]
}
 80020ce:	bf00      	nop
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	20000030 	.word	0x20000030
 80020e0:	2000008c 	.word	0x2000008c

080020e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4a07      	ldr	r2, [pc, #28]	; (8002110 <vApplicationGetTimerTaskMemory+0x2c>)
 80020f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	4a06      	ldr	r2, [pc, #24]	; (8002114 <vApplicationGetTimerTaskMemory+0x30>)
 80020fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002102:	601a      	str	r2, [r3, #0]
}
 8002104:	bf00      	nop
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	2000028c 	.word	0x2000028c
 8002114:	200002e8 	.word	0x200002e8

08002118 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f103 0208 	add.w	r2, r3, #8
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f04f 32ff 	mov.w	r2, #4294967295
 8002130:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f103 0208 	add.w	r2, r3, #8
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f103 0208 	add.w	r2, r3, #8
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002172:	b480      	push	{r7}
 8002174:	b085      	sub	sp, #20
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
 800217a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	1c5a      	adds	r2, r3, #1
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	601a      	str	r2, [r3, #0]
}
 80021ae:	bf00      	nop
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80021ba:	b480      	push	{r7}
 80021bc:	b085      	sub	sp, #20
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d0:	d103      	bne.n	80021da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	e00c      	b.n	80021f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	3308      	adds	r3, #8
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	e002      	b.n	80021e8 <vListInsert+0x2e>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d2f6      	bcs.n	80021e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	1c5a      	adds	r2, r3, #1
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	601a      	str	r2, [r3, #0]
}
 8002220:	bf00      	nop
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6892      	ldr	r2, [r2, #8]
 8002242:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6852      	ldr	r2, [r2, #4]
 800224c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	429a      	cmp	r2, r3
 8002256:	d103      	bne.n	8002260 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	1e5a      	subs	r2, r3, #1
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10c      	bne.n	80022ae <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002298:	b672      	cpsid	i
 800229a:	f383 8811 	msr	BASEPRI, r3
 800229e:	f3bf 8f6f 	isb	sy
 80022a2:	f3bf 8f4f 	dsb	sy
 80022a6:	b662      	cpsie	i
 80022a8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80022aa:	bf00      	nop
 80022ac:	e7fe      	b.n	80022ac <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80022ae:	f002 f955 	bl	800455c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ba:	68f9      	ldr	r1, [r7, #12]
 80022bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022be:	fb01 f303 	mul.w	r3, r1, r3
 80022c2:	441a      	add	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022de:	3b01      	subs	r3, #1
 80022e0:	68f9      	ldr	r1, [r7, #12]
 80022e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022e4:	fb01 f303 	mul.w	r3, r1, r3
 80022e8:	441a      	add	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	22ff      	movs	r2, #255	; 0xff
 80022f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	22ff      	movs	r2, #255	; 0xff
 80022fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d114      	bne.n	800232e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d01a      	beq.n	8002342 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	3310      	adds	r3, #16
 8002310:	4618      	mov	r0, r3
 8002312:	f001 fa13 	bl	800373c <xTaskRemoveFromEventList>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d012      	beq.n	8002342 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800231c:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <xQueueGenericReset+0xd0>)
 800231e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	f3bf 8f4f 	dsb	sy
 8002328:	f3bf 8f6f 	isb	sy
 800232c:	e009      	b.n	8002342 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	3310      	adds	r3, #16
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff fef0 	bl	8002118 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	3324      	adds	r3, #36	; 0x24
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff feeb 	bl	8002118 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002342:	f002 f93f 	bl	80045c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002346:	2301      	movs	r3, #1
}
 8002348:	4618      	mov	r0, r3
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	e000ed04 	.word	0xe000ed04

08002354 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002354:	b580      	push	{r7, lr}
 8002356:	b08e      	sub	sp, #56	; 0x38
 8002358:	af02      	add	r7, sp, #8
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
 8002360:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10c      	bne.n	8002382 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8002368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800236c:	b672      	cpsid	i
 800236e:	f383 8811 	msr	BASEPRI, r3
 8002372:	f3bf 8f6f 	isb	sy
 8002376:	f3bf 8f4f 	dsb	sy
 800237a:	b662      	cpsie	i
 800237c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800237e:	bf00      	nop
 8002380:	e7fe      	b.n	8002380 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d10c      	bne.n	80023a2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8002388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800238c:	b672      	cpsid	i
 800238e:	f383 8811 	msr	BASEPRI, r3
 8002392:	f3bf 8f6f 	isb	sy
 8002396:	f3bf 8f4f 	dsb	sy
 800239a:	b662      	cpsie	i
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800239e:	bf00      	nop
 80023a0:	e7fe      	b.n	80023a0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d002      	beq.n	80023ae <xQueueGenericCreateStatic+0x5a>
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <xQueueGenericCreateStatic+0x5e>
 80023ae:	2301      	movs	r3, #1
 80023b0:	e000      	b.n	80023b4 <xQueueGenericCreateStatic+0x60>
 80023b2:	2300      	movs	r3, #0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d10c      	bne.n	80023d2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80023b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023bc:	b672      	cpsid	i
 80023be:	f383 8811 	msr	BASEPRI, r3
 80023c2:	f3bf 8f6f 	isb	sy
 80023c6:	f3bf 8f4f 	dsb	sy
 80023ca:	b662      	cpsie	i
 80023cc:	623b      	str	r3, [r7, #32]
}
 80023ce:	bf00      	nop
 80023d0:	e7fe      	b.n	80023d0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d102      	bne.n	80023de <xQueueGenericCreateStatic+0x8a>
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <xQueueGenericCreateStatic+0x8e>
 80023de:	2301      	movs	r3, #1
 80023e0:	e000      	b.n	80023e4 <xQueueGenericCreateStatic+0x90>
 80023e2:	2300      	movs	r3, #0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10c      	bne.n	8002402 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80023e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ec:	b672      	cpsid	i
 80023ee:	f383 8811 	msr	BASEPRI, r3
 80023f2:	f3bf 8f6f 	isb	sy
 80023f6:	f3bf 8f4f 	dsb	sy
 80023fa:	b662      	cpsie	i
 80023fc:	61fb      	str	r3, [r7, #28]
}
 80023fe:	bf00      	nop
 8002400:	e7fe      	b.n	8002400 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002402:	2350      	movs	r3, #80	; 0x50
 8002404:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	2b50      	cmp	r3, #80	; 0x50
 800240a:	d00c      	beq.n	8002426 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800240c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002410:	b672      	cpsid	i
 8002412:	f383 8811 	msr	BASEPRI, r3
 8002416:	f3bf 8f6f 	isb	sy
 800241a:	f3bf 8f4f 	dsb	sy
 800241e:	b662      	cpsie	i
 8002420:	61bb      	str	r3, [r7, #24]
}
 8002422:	bf00      	nop
 8002424:	e7fe      	b.n	8002424 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002426:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800242c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00d      	beq.n	800244e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800243a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800243e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	4613      	mov	r3, r2
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	68b9      	ldr	r1, [r7, #8]
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f000 f805 	bl	8002458 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800244e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002450:	4618      	mov	r0, r3
 8002452:	3730      	adds	r7, #48	; 0x30
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
 8002464:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d103      	bne.n	8002474 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	e002      	b.n	800247a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002486:	2101      	movs	r1, #1
 8002488:	69b8      	ldr	r0, [r7, #24]
 800248a:	f7ff fef9 	bl	8002280 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	78fa      	ldrb	r2, [r7, #3]
 8002492:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002496:	bf00      	nop
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08e      	sub	sp, #56	; 0x38
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
 80024ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80024ae:	2300      	movs	r3, #0
 80024b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80024b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10c      	bne.n	80024d6 <xQueueGenericSend+0x36>
	__asm volatile
 80024bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c0:	b672      	cpsid	i
 80024c2:	f383 8811 	msr	BASEPRI, r3
 80024c6:	f3bf 8f6f 	isb	sy
 80024ca:	f3bf 8f4f 	dsb	sy
 80024ce:	b662      	cpsie	i
 80024d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80024d2:	bf00      	nop
 80024d4:	e7fe      	b.n	80024d4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d103      	bne.n	80024e4 <xQueueGenericSend+0x44>
 80024dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <xQueueGenericSend+0x48>
 80024e4:	2301      	movs	r3, #1
 80024e6:	e000      	b.n	80024ea <xQueueGenericSend+0x4a>
 80024e8:	2300      	movs	r3, #0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10c      	bne.n	8002508 <xQueueGenericSend+0x68>
	__asm volatile
 80024ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f2:	b672      	cpsid	i
 80024f4:	f383 8811 	msr	BASEPRI, r3
 80024f8:	f3bf 8f6f 	isb	sy
 80024fc:	f3bf 8f4f 	dsb	sy
 8002500:	b662      	cpsie	i
 8002502:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002504:	bf00      	nop
 8002506:	e7fe      	b.n	8002506 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	2b02      	cmp	r3, #2
 800250c:	d103      	bne.n	8002516 <xQueueGenericSend+0x76>
 800250e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002512:	2b01      	cmp	r3, #1
 8002514:	d101      	bne.n	800251a <xQueueGenericSend+0x7a>
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <xQueueGenericSend+0x7c>
 800251a:	2300      	movs	r3, #0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d10c      	bne.n	800253a <xQueueGenericSend+0x9a>
	__asm volatile
 8002520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002524:	b672      	cpsid	i
 8002526:	f383 8811 	msr	BASEPRI, r3
 800252a:	f3bf 8f6f 	isb	sy
 800252e:	f3bf 8f4f 	dsb	sy
 8002532:	b662      	cpsie	i
 8002534:	623b      	str	r3, [r7, #32]
}
 8002536:	bf00      	nop
 8002538:	e7fe      	b.n	8002538 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800253a:	f001 fac5 	bl	8003ac8 <xTaskGetSchedulerState>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d102      	bne.n	800254a <xQueueGenericSend+0xaa>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <xQueueGenericSend+0xae>
 800254a:	2301      	movs	r3, #1
 800254c:	e000      	b.n	8002550 <xQueueGenericSend+0xb0>
 800254e:	2300      	movs	r3, #0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10c      	bne.n	800256e <xQueueGenericSend+0xce>
	__asm volatile
 8002554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002558:	b672      	cpsid	i
 800255a:	f383 8811 	msr	BASEPRI, r3
 800255e:	f3bf 8f6f 	isb	sy
 8002562:	f3bf 8f4f 	dsb	sy
 8002566:	b662      	cpsie	i
 8002568:	61fb      	str	r3, [r7, #28]
}
 800256a:	bf00      	nop
 800256c:	e7fe      	b.n	800256c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800256e:	f001 fff5 	bl	800455c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002574:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257a:	429a      	cmp	r2, r3
 800257c:	d302      	bcc.n	8002584 <xQueueGenericSend+0xe4>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	2b02      	cmp	r3, #2
 8002582:	d129      	bne.n	80025d8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	68b9      	ldr	r1, [r7, #8]
 8002588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800258a:	f000 fa15 	bl	80029b8 <prvCopyDataToQueue>
 800258e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	2b00      	cmp	r3, #0
 8002596:	d010      	beq.n	80025ba <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259a:	3324      	adds	r3, #36	; 0x24
 800259c:	4618      	mov	r0, r3
 800259e:	f001 f8cd 	bl	800373c <xTaskRemoveFromEventList>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d013      	beq.n	80025d0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80025a8:	4b3f      	ldr	r3, [pc, #252]	; (80026a8 <xQueueGenericSend+0x208>)
 80025aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	f3bf 8f4f 	dsb	sy
 80025b4:	f3bf 8f6f 	isb	sy
 80025b8:	e00a      	b.n	80025d0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80025ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d007      	beq.n	80025d0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80025c0:	4b39      	ldr	r3, [pc, #228]	; (80026a8 <xQueueGenericSend+0x208>)
 80025c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	f3bf 8f4f 	dsb	sy
 80025cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80025d0:	f001 fff8 	bl	80045c4 <vPortExitCritical>
				return pdPASS;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e063      	b.n	80026a0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d103      	bne.n	80025e6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80025de:	f001 fff1 	bl	80045c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	e05c      	b.n	80026a0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80025e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d106      	bne.n	80025fa <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80025ec:	f107 0314 	add.w	r3, r7, #20
 80025f0:	4618      	mov	r0, r3
 80025f2:	f001 f909 	bl	8003808 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80025f6:	2301      	movs	r3, #1
 80025f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80025fa:	f001 ffe3 	bl	80045c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80025fe:	f000 fe6f 	bl	80032e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002602:	f001 ffab 	bl	800455c <vPortEnterCritical>
 8002606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002608:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800260c:	b25b      	sxtb	r3, r3
 800260e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002612:	d103      	bne.n	800261c <xQueueGenericSend+0x17c>
 8002614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800261c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002622:	b25b      	sxtb	r3, r3
 8002624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002628:	d103      	bne.n	8002632 <xQueueGenericSend+0x192>
 800262a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002632:	f001 ffc7 	bl	80045c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002636:	1d3a      	adds	r2, r7, #4
 8002638:	f107 0314 	add.w	r3, r7, #20
 800263c:	4611      	mov	r1, r2
 800263e:	4618      	mov	r0, r3
 8002640:	f001 f8f8 	bl	8003834 <xTaskCheckForTimeOut>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d124      	bne.n	8002694 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800264a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800264c:	f000 faac 	bl	8002ba8 <prvIsQueueFull>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d018      	beq.n	8002688 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002658:	3310      	adds	r3, #16
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	4611      	mov	r1, r2
 800265e:	4618      	mov	r0, r3
 8002660:	f001 f818 	bl	8003694 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002664:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002666:	f000 fa37 	bl	8002ad8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800266a:	f000 fe47 	bl	80032fc <xTaskResumeAll>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	f47f af7c 	bne.w	800256e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8002676:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <xQueueGenericSend+0x208>)
 8002678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	f3bf 8f4f 	dsb	sy
 8002682:	f3bf 8f6f 	isb	sy
 8002686:	e772      	b.n	800256e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002688:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800268a:	f000 fa25 	bl	8002ad8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800268e:	f000 fe35 	bl	80032fc <xTaskResumeAll>
 8002692:	e76c      	b.n	800256e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002694:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002696:	f000 fa1f 	bl	8002ad8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800269a:	f000 fe2f 	bl	80032fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800269e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3738      	adds	r7, #56	; 0x38
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	e000ed04 	.word	0xe000ed04

080026ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08e      	sub	sp, #56	; 0x38
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
 80026b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80026be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10c      	bne.n	80026de <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80026c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c8:	b672      	cpsid	i
 80026ca:	f383 8811 	msr	BASEPRI, r3
 80026ce:	f3bf 8f6f 	isb	sy
 80026d2:	f3bf 8f4f 	dsb	sy
 80026d6:	b662      	cpsie	i
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80026da:	bf00      	nop
 80026dc:	e7fe      	b.n	80026dc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d103      	bne.n	80026ec <xQueueGenericSendFromISR+0x40>
 80026e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <xQueueGenericSendFromISR+0x44>
 80026ec:	2301      	movs	r3, #1
 80026ee:	e000      	b.n	80026f2 <xQueueGenericSendFromISR+0x46>
 80026f0:	2300      	movs	r3, #0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10c      	bne.n	8002710 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80026f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026fa:	b672      	cpsid	i
 80026fc:	f383 8811 	msr	BASEPRI, r3
 8002700:	f3bf 8f6f 	isb	sy
 8002704:	f3bf 8f4f 	dsb	sy
 8002708:	b662      	cpsie	i
 800270a:	623b      	str	r3, [r7, #32]
}
 800270c:	bf00      	nop
 800270e:	e7fe      	b.n	800270e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	2b02      	cmp	r3, #2
 8002714:	d103      	bne.n	800271e <xQueueGenericSendFromISR+0x72>
 8002716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271a:	2b01      	cmp	r3, #1
 800271c:	d101      	bne.n	8002722 <xQueueGenericSendFromISR+0x76>
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <xQueueGenericSendFromISR+0x78>
 8002722:	2300      	movs	r3, #0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10c      	bne.n	8002742 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8002728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800272c:	b672      	cpsid	i
 800272e:	f383 8811 	msr	BASEPRI, r3
 8002732:	f3bf 8f6f 	isb	sy
 8002736:	f3bf 8f4f 	dsb	sy
 800273a:	b662      	cpsie	i
 800273c:	61fb      	str	r3, [r7, #28]
}
 800273e:	bf00      	nop
 8002740:	e7fe      	b.n	8002740 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002742:	f001 fff3 	bl	800472c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002746:	f3ef 8211 	mrs	r2, BASEPRI
 800274a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800274e:	b672      	cpsid	i
 8002750:	f383 8811 	msr	BASEPRI, r3
 8002754:	f3bf 8f6f 	isb	sy
 8002758:	f3bf 8f4f 	dsb	sy
 800275c:	b662      	cpsie	i
 800275e:	61ba      	str	r2, [r7, #24]
 8002760:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002762:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002764:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002768:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800276a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800276c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276e:	429a      	cmp	r2, r3
 8002770:	d302      	bcc.n	8002778 <xQueueGenericSendFromISR+0xcc>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	2b02      	cmp	r3, #2
 8002776:	d12c      	bne.n	80027d2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800277e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	68b9      	ldr	r1, [r7, #8]
 8002786:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002788:	f000 f916 	bl	80029b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800278c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002794:	d112      	bne.n	80027bc <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	2b00      	cmp	r3, #0
 800279c:	d016      	beq.n	80027cc <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800279e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a0:	3324      	adds	r3, #36	; 0x24
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 ffca 	bl	800373c <xTaskRemoveFromEventList>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00e      	beq.n	80027cc <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00b      	beq.n	80027cc <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	e007      	b.n	80027cc <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80027bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80027c0:	3301      	adds	r3, #1
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	b25a      	sxtb	r2, r3
 80027c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80027cc:	2301      	movs	r3, #1
 80027ce:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80027d0:	e001      	b.n	80027d6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	637b      	str	r3, [r7, #52]	; 0x34
 80027d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80027e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80027e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3738      	adds	r7, #56	; 0x38
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08c      	sub	sp, #48	; 0x30
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80027f8:	2300      	movs	r3, #0
 80027fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10c      	bne.n	8002820 <xQueueReceive+0x34>
	__asm volatile
 8002806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800280a:	b672      	cpsid	i
 800280c:	f383 8811 	msr	BASEPRI, r3
 8002810:	f3bf 8f6f 	isb	sy
 8002814:	f3bf 8f4f 	dsb	sy
 8002818:	b662      	cpsie	i
 800281a:	623b      	str	r3, [r7, #32]
}
 800281c:	bf00      	nop
 800281e:	e7fe      	b.n	800281e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d103      	bne.n	800282e <xQueueReceive+0x42>
 8002826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <xQueueReceive+0x46>
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <xQueueReceive+0x48>
 8002832:	2300      	movs	r3, #0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10c      	bne.n	8002852 <xQueueReceive+0x66>
	__asm volatile
 8002838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800283c:	b672      	cpsid	i
 800283e:	f383 8811 	msr	BASEPRI, r3
 8002842:	f3bf 8f6f 	isb	sy
 8002846:	f3bf 8f4f 	dsb	sy
 800284a:	b662      	cpsie	i
 800284c:	61fb      	str	r3, [r7, #28]
}
 800284e:	bf00      	nop
 8002850:	e7fe      	b.n	8002850 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002852:	f001 f939 	bl	8003ac8 <xTaskGetSchedulerState>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d102      	bne.n	8002862 <xQueueReceive+0x76>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <xQueueReceive+0x7a>
 8002862:	2301      	movs	r3, #1
 8002864:	e000      	b.n	8002868 <xQueueReceive+0x7c>
 8002866:	2300      	movs	r3, #0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10c      	bne.n	8002886 <xQueueReceive+0x9a>
	__asm volatile
 800286c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002870:	b672      	cpsid	i
 8002872:	f383 8811 	msr	BASEPRI, r3
 8002876:	f3bf 8f6f 	isb	sy
 800287a:	f3bf 8f4f 	dsb	sy
 800287e:	b662      	cpsie	i
 8002880:	61bb      	str	r3, [r7, #24]
}
 8002882:	bf00      	nop
 8002884:	e7fe      	b.n	8002884 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002886:	f001 fe69 	bl	800455c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800288a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	2b00      	cmp	r3, #0
 8002894:	d01f      	beq.n	80028d6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002896:	68b9      	ldr	r1, [r7, #8]
 8002898:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800289a:	f000 f8f7 	bl	8002a8c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	1e5a      	subs	r2, r3, #1
 80028a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00f      	beq.n	80028ce <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b0:	3310      	adds	r3, #16
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 ff42 	bl	800373c <xTaskRemoveFromEventList>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d007      	beq.n	80028ce <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80028be:	4b3d      	ldr	r3, [pc, #244]	; (80029b4 <xQueueReceive+0x1c8>)
 80028c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	f3bf 8f4f 	dsb	sy
 80028ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80028ce:	f001 fe79 	bl	80045c4 <vPortExitCritical>
				return pdPASS;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e069      	b.n	80029aa <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d103      	bne.n	80028e4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80028dc:	f001 fe72 	bl	80045c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80028e0:	2300      	movs	r3, #0
 80028e2:	e062      	b.n	80029aa <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80028e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d106      	bne.n	80028f8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80028ea:	f107 0310 	add.w	r3, r7, #16
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 ff8a 	bl	8003808 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80028f4:	2301      	movs	r3, #1
 80028f6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80028f8:	f001 fe64 	bl	80045c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80028fc:	f000 fcf0 	bl	80032e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002900:	f001 fe2c 	bl	800455c <vPortEnterCritical>
 8002904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002906:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800290a:	b25b      	sxtb	r3, r3
 800290c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002910:	d103      	bne.n	800291a <xQueueReceive+0x12e>
 8002912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800291a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002920:	b25b      	sxtb	r3, r3
 8002922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002926:	d103      	bne.n	8002930 <xQueueReceive+0x144>
 8002928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002930:	f001 fe48 	bl	80045c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002934:	1d3a      	adds	r2, r7, #4
 8002936:	f107 0310 	add.w	r3, r7, #16
 800293a:	4611      	mov	r1, r2
 800293c:	4618      	mov	r0, r3
 800293e:	f000 ff79 	bl	8003834 <xTaskCheckForTimeOut>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d123      	bne.n	8002990 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002948:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800294a:	f000 f917 	bl	8002b7c <prvIsQueueEmpty>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d017      	beq.n	8002984 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002956:	3324      	adds	r3, #36	; 0x24
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	4611      	mov	r1, r2
 800295c:	4618      	mov	r0, r3
 800295e:	f000 fe99 	bl	8003694 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002962:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002964:	f000 f8b8 	bl	8002ad8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002968:	f000 fcc8 	bl	80032fc <xTaskResumeAll>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d189      	bne.n	8002886 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8002972:	4b10      	ldr	r3, [pc, #64]	; (80029b4 <xQueueReceive+0x1c8>)
 8002974:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	f3bf 8f4f 	dsb	sy
 800297e:	f3bf 8f6f 	isb	sy
 8002982:	e780      	b.n	8002886 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002984:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002986:	f000 f8a7 	bl	8002ad8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800298a:	f000 fcb7 	bl	80032fc <xTaskResumeAll>
 800298e:	e77a      	b.n	8002886 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002990:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002992:	f000 f8a1 	bl	8002ad8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002996:	f000 fcb1 	bl	80032fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800299a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800299c:	f000 f8ee 	bl	8002b7c <prvIsQueueEmpty>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f43f af6f 	beq.w	8002886 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80029a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3730      	adds	r7, #48	; 0x30
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	e000ed04 	.word	0xe000ed04

080029b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10d      	bne.n	80029f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d14d      	bne.n	8002a7a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f001 f88e 	bl	8003b04 <xTaskPriorityDisinherit>
 80029e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	609a      	str	r2, [r3, #8]
 80029f0:	e043      	b.n	8002a7a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d119      	bne.n	8002a2c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6858      	ldr	r0, [r3, #4]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a00:	461a      	mov	r2, r3
 8002a02:	68b9      	ldr	r1, [r7, #8]
 8002a04:	f002 f8de 	bl	8004bc4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	441a      	add	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d32b      	bcc.n	8002a7a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	605a      	str	r2, [r3, #4]
 8002a2a:	e026      	b.n	8002a7a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	68d8      	ldr	r0, [r3, #12]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	461a      	mov	r2, r3
 8002a36:	68b9      	ldr	r1, [r7, #8]
 8002a38:	f002 f8c4 	bl	8004bc4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	425b      	negs	r3, r3
 8002a46:	441a      	add	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d207      	bcs.n	8002a68 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	425b      	negs	r3, r3
 8002a62:	441a      	add	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d105      	bne.n	8002a7a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d002      	beq.n	8002a7a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	3b01      	subs	r3, #1
 8002a78:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1c5a      	adds	r2, r3, #1
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002a82:	697b      	ldr	r3, [r7, #20]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d018      	beq.n	8002ad0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	441a      	add	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68da      	ldr	r2, [r3, #12]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d303      	bcc.n	8002ac0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68d9      	ldr	r1, [r3, #12]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac8:	461a      	mov	r2, r3
 8002aca:	6838      	ldr	r0, [r7, #0]
 8002acc:	f002 f87a 	bl	8004bc4 <memcpy>
	}
}
 8002ad0:	bf00      	nop
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002ae0:	f001 fd3c 	bl	800455c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002aea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002aec:	e011      	b.n	8002b12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d012      	beq.n	8002b1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	3324      	adds	r3, #36	; 0x24
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 fe1e 	bl	800373c <xTaskRemoveFromEventList>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002b06:	f000 fefb 	bl	8003900 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	dce9      	bgt.n	8002aee <prvUnlockQueue+0x16>
 8002b1a:	e000      	b.n	8002b1e <prvUnlockQueue+0x46>
					break;
 8002b1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	22ff      	movs	r2, #255	; 0xff
 8002b22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002b26:	f001 fd4d 	bl	80045c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002b2a:	f001 fd17 	bl	800455c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b36:	e011      	b.n	8002b5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d012      	beq.n	8002b66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3310      	adds	r3, #16
 8002b44:	4618      	mov	r0, r3
 8002b46:	f000 fdf9 	bl	800373c <xTaskRemoveFromEventList>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002b50:	f000 fed6 	bl	8003900 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002b54:	7bbb      	ldrb	r3, [r7, #14]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	dce9      	bgt.n	8002b38 <prvUnlockQueue+0x60>
 8002b64:	e000      	b.n	8002b68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002b66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	22ff      	movs	r2, #255	; 0xff
 8002b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002b70:	f001 fd28 	bl	80045c4 <vPortExitCritical>
}
 8002b74:	bf00      	nop
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b84:	f001 fcea 	bl	800455c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d102      	bne.n	8002b96 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002b90:	2301      	movs	r3, #1
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	e001      	b.n	8002b9a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002b96:	2300      	movs	r3, #0
 8002b98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b9a:	f001 fd13 	bl	80045c4 <vPortExitCritical>

	return xReturn;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002bb0:	f001 fcd4 	bl	800455c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d102      	bne.n	8002bc6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	e001      	b.n	8002bca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002bca:	f001 fcfb 	bl	80045c4 <vPortExitCritical>

	return xReturn;
 8002bce:	68fb      	ldr	r3, [r7, #12]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002be2:	2300      	movs	r3, #0
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	e014      	b.n	8002c12 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002be8:	4a0f      	ldr	r2, [pc, #60]	; (8002c28 <vQueueAddToRegistry+0x50>)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10b      	bne.n	8002c0c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002bf4:	490c      	ldr	r1, [pc, #48]	; (8002c28 <vQueueAddToRegistry+0x50>)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002bfe:	4a0a      	ldr	r2, [pc, #40]	; (8002c28 <vQueueAddToRegistry+0x50>)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	4413      	add	r3, r2
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002c0a:	e006      	b.n	8002c1a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2b07      	cmp	r3, #7
 8002c16:	d9e7      	bls.n	8002be8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002c18:	bf00      	nop
 8002c1a:	bf00      	nop
 8002c1c:	3714      	adds	r7, #20
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	2000498c 	.word	0x2000498c

08002c2c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002c3c:	f001 fc8e 	bl	800455c <vPortEnterCritical>
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c46:	b25b      	sxtb	r3, r3
 8002c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4c:	d103      	bne.n	8002c56 <vQueueWaitForMessageRestricted+0x2a>
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c5c:	b25b      	sxtb	r3, r3
 8002c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c62:	d103      	bne.n	8002c6c <vQueueWaitForMessageRestricted+0x40>
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c6c:	f001 fcaa 	bl	80045c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d106      	bne.n	8002c86 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	3324      	adds	r3, #36	; 0x24
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	68b9      	ldr	r1, [r7, #8]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 fd2d 	bl	80036e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002c86:	6978      	ldr	r0, [r7, #20]
 8002c88:	f7ff ff26 	bl	8002ad8 <prvUnlockQueue>
	}
 8002c8c:	bf00      	nop
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b08e      	sub	sp, #56	; 0x38
 8002c98:	af04      	add	r7, sp, #16
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
 8002ca0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10c      	bne.n	8002cc2 <xTaskCreateStatic+0x2e>
	__asm volatile
 8002ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cac:	b672      	cpsid	i
 8002cae:	f383 8811 	msr	BASEPRI, r3
 8002cb2:	f3bf 8f6f 	isb	sy
 8002cb6:	f3bf 8f4f 	dsb	sy
 8002cba:	b662      	cpsie	i
 8002cbc:	623b      	str	r3, [r7, #32]
}
 8002cbe:	bf00      	nop
 8002cc0:	e7fe      	b.n	8002cc0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8002cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d10c      	bne.n	8002ce2 <xTaskCreateStatic+0x4e>
	__asm volatile
 8002cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ccc:	b672      	cpsid	i
 8002cce:	f383 8811 	msr	BASEPRI, r3
 8002cd2:	f3bf 8f6f 	isb	sy
 8002cd6:	f3bf 8f4f 	dsb	sy
 8002cda:	b662      	cpsie	i
 8002cdc:	61fb      	str	r3, [r7, #28]
}
 8002cde:	bf00      	nop
 8002ce0:	e7fe      	b.n	8002ce0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002ce2:	235c      	movs	r3, #92	; 0x5c
 8002ce4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	2b5c      	cmp	r3, #92	; 0x5c
 8002cea:	d00c      	beq.n	8002d06 <xTaskCreateStatic+0x72>
	__asm volatile
 8002cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf0:	b672      	cpsid	i
 8002cf2:	f383 8811 	msr	BASEPRI, r3
 8002cf6:	f3bf 8f6f 	isb	sy
 8002cfa:	f3bf 8f4f 	dsb	sy
 8002cfe:	b662      	cpsie	i
 8002d00:	61bb      	str	r3, [r7, #24]
}
 8002d02:	bf00      	nop
 8002d04:	e7fe      	b.n	8002d04 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002d06:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d01e      	beq.n	8002d4c <xTaskCreateStatic+0xb8>
 8002d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d01b      	beq.n	8002d4c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d16:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d1c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	2202      	movs	r2, #2
 8002d22:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002d26:	2300      	movs	r3, #0
 8002d28:	9303      	str	r3, [sp, #12]
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	9302      	str	r3, [sp, #8]
 8002d2e:	f107 0314 	add.w	r3, r7, #20
 8002d32:	9301      	str	r3, [sp, #4]
 8002d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	68b9      	ldr	r1, [r7, #8]
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 f850 	bl	8002de4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d46:	f000 f8df 	bl	8002f08 <prvAddNewTaskToReadyList>
 8002d4a:	e001      	b.n	8002d50 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002d50:	697b      	ldr	r3, [r7, #20]
	}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3728      	adds	r7, #40	; 0x28
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b08c      	sub	sp, #48	; 0x30
 8002d5e:	af04      	add	r7, sp, #16
 8002d60:	60f8      	str	r0, [r7, #12]
 8002d62:	60b9      	str	r1, [r7, #8]
 8002d64:	603b      	str	r3, [r7, #0]
 8002d66:	4613      	mov	r3, r2
 8002d68:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002d6a:	88fb      	ldrh	r3, [r7, #6]
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f001 fd20 	bl	80047b4 <pvPortMalloc>
 8002d74:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00e      	beq.n	8002d9a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002d7c:	205c      	movs	r0, #92	; 0x5c
 8002d7e:	f001 fd19 	bl	80047b4 <pvPortMalloc>
 8002d82:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	631a      	str	r2, [r3, #48]	; 0x30
 8002d90:	e005      	b.n	8002d9e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002d92:	6978      	ldr	r0, [r7, #20]
 8002d94:	f001 fdd8 	bl	8004948 <vPortFree>
 8002d98:	e001      	b.n	8002d9e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d017      	beq.n	8002dd4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002dac:	88fa      	ldrh	r2, [r7, #6]
 8002dae:	2300      	movs	r3, #0
 8002db0:	9303      	str	r3, [sp, #12]
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	9302      	str	r3, [sp, #8]
 8002db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db8:	9301      	str	r3, [sp, #4]
 8002dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	68b9      	ldr	r1, [r7, #8]
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f000 f80e 	bl	8002de4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002dc8:	69f8      	ldr	r0, [r7, #28]
 8002dca:	f000 f89d 	bl	8002f08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	61bb      	str	r3, [r7, #24]
 8002dd2:	e002      	b.n	8002dda <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002dda:	69bb      	ldr	r3, [r7, #24]
	}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3720      	adds	r7, #32
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b088      	sub	sp, #32
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
 8002df0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	21a5      	movs	r1, #165	; 0xa5
 8002dfe:	f001 feef 	bl	8004be0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8002e0c:	440b      	add	r3, r1
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	f023 0307 	bic.w	r3, r3, #7
 8002e1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00c      	beq.n	8002e40 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8002e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2a:	b672      	cpsid	i
 8002e2c:	f383 8811 	msr	BASEPRI, r3
 8002e30:	f3bf 8f6f 	isb	sy
 8002e34:	f3bf 8f4f 	dsb	sy
 8002e38:	b662      	cpsie	i
 8002e3a:	617b      	str	r3, [r7, #20]
}
 8002e3c:	bf00      	nop
 8002e3e:	e7fe      	b.n	8002e3e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d01f      	beq.n	8002e86 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e46:	2300      	movs	r3, #0
 8002e48:	61fb      	str	r3, [r7, #28]
 8002e4a:	e012      	b.n	8002e72 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	4413      	add	r3, r2
 8002e52:	7819      	ldrb	r1, [r3, #0]
 8002e54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	4413      	add	r3, r2
 8002e5a:	3334      	adds	r3, #52	; 0x34
 8002e5c:	460a      	mov	r2, r1
 8002e5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	4413      	add	r3, r2
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d006      	beq.n	8002e7a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	61fb      	str	r3, [r7, #28]
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	2b0f      	cmp	r3, #15
 8002e76:	d9e9      	bls.n	8002e4c <prvInitialiseNewTask+0x68>
 8002e78:	e000      	b.n	8002e7c <prvInitialiseNewTask+0x98>
			{
				break;
 8002e7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e84:	e003      	b.n	8002e8e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e90:	2b37      	cmp	r3, #55	; 0x37
 8002e92:	d901      	bls.n	8002e98 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e94:	2337      	movs	r3, #55	; 0x37
 8002e96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ea2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eac:	3304      	adds	r3, #4
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff f952 	bl	8002158 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb6:	3318      	adds	r3, #24
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff f94d 	bl	8002158 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ec2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ecc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ed2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	68f9      	ldr	r1, [r7, #12]
 8002ee6:	69b8      	ldr	r0, [r7, #24]
 8002ee8:	f001 fa2e 	bl	8004348 <pxPortInitialiseStack>
 8002eec:	4602      	mov	r2, r0
 8002eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d002      	beq.n	8002efe <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002efc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002efe:	bf00      	nop
 8002f00:	3720      	adds	r7, #32
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
	...

08002f08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002f10:	f001 fb24 	bl	800455c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002f14:	4b2d      	ldr	r3, [pc, #180]	; (8002fcc <prvAddNewTaskToReadyList+0xc4>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	4a2c      	ldr	r2, [pc, #176]	; (8002fcc <prvAddNewTaskToReadyList+0xc4>)
 8002f1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002f1e:	4b2c      	ldr	r3, [pc, #176]	; (8002fd0 <prvAddNewTaskToReadyList+0xc8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d109      	bne.n	8002f3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002f26:	4a2a      	ldr	r2, [pc, #168]	; (8002fd0 <prvAddNewTaskToReadyList+0xc8>)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f2c:	4b27      	ldr	r3, [pc, #156]	; (8002fcc <prvAddNewTaskToReadyList+0xc4>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d110      	bne.n	8002f56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002f34:	f000 fd08 	bl	8003948 <prvInitialiseTaskLists>
 8002f38:	e00d      	b.n	8002f56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002f3a:	4b26      	ldr	r3, [pc, #152]	; (8002fd4 <prvAddNewTaskToReadyList+0xcc>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d109      	bne.n	8002f56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f42:	4b23      	ldr	r3, [pc, #140]	; (8002fd0 <prvAddNewTaskToReadyList+0xc8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d802      	bhi.n	8002f56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002f50:	4a1f      	ldr	r2, [pc, #124]	; (8002fd0 <prvAddNewTaskToReadyList+0xc8>)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002f56:	4b20      	ldr	r3, [pc, #128]	; (8002fd8 <prvAddNewTaskToReadyList+0xd0>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	4a1e      	ldr	r2, [pc, #120]	; (8002fd8 <prvAddNewTaskToReadyList+0xd0>)
 8002f5e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002f60:	4b1d      	ldr	r3, [pc, #116]	; (8002fd8 <prvAddNewTaskToReadyList+0xd0>)
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f6c:	4b1b      	ldr	r3, [pc, #108]	; (8002fdc <prvAddNewTaskToReadyList+0xd4>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d903      	bls.n	8002f7c <prvAddNewTaskToReadyList+0x74>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f78:	4a18      	ldr	r2, [pc, #96]	; (8002fdc <prvAddNewTaskToReadyList+0xd4>)
 8002f7a:	6013      	str	r3, [r2, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f80:	4613      	mov	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4a15      	ldr	r2, [pc, #84]	; (8002fe0 <prvAddNewTaskToReadyList+0xd8>)
 8002f8a:	441a      	add	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3304      	adds	r3, #4
 8002f90:	4619      	mov	r1, r3
 8002f92:	4610      	mov	r0, r2
 8002f94:	f7ff f8ed 	bl	8002172 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002f98:	f001 fb14 	bl	80045c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002f9c:	4b0d      	ldr	r3, [pc, #52]	; (8002fd4 <prvAddNewTaskToReadyList+0xcc>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00e      	beq.n	8002fc2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002fa4:	4b0a      	ldr	r3, [pc, #40]	; (8002fd0 <prvAddNewTaskToReadyList+0xc8>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d207      	bcs.n	8002fc2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002fb2:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <prvAddNewTaskToReadyList+0xdc>)
 8002fb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	f3bf 8f4f 	dsb	sy
 8002fbe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002fc2:	bf00      	nop
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	20000bbc 	.word	0x20000bbc
 8002fd0:	200006e8 	.word	0x200006e8
 8002fd4:	20000bc8 	.word	0x20000bc8
 8002fd8:	20000bd8 	.word	0x20000bd8
 8002fdc:	20000bc4 	.word	0x20000bc4
 8002fe0:	200006ec 	.word	0x200006ec
 8002fe4:	e000ed04 	.word	0xe000ed04

08002fe8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8002ff0:	f001 fab4 	bl	800455c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d102      	bne.n	8003000 <vTaskDelete+0x18>
 8002ffa:	4b2d      	ldr	r3, [pc, #180]	; (80030b0 <vTaskDelete+0xc8>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	e000      	b.n	8003002 <vTaskDelete+0x1a>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	3304      	adds	r3, #4
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff f90f 	bl	800222c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003012:	2b00      	cmp	r3, #0
 8003014:	d004      	beq.n	8003020 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	3318      	adds	r3, #24
 800301a:	4618      	mov	r0, r3
 800301c:	f7ff f906 	bl	800222c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8003020:	4b24      	ldr	r3, [pc, #144]	; (80030b4 <vTaskDelete+0xcc>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	3301      	adds	r3, #1
 8003026:	4a23      	ldr	r2, [pc, #140]	; (80030b4 <vTaskDelete+0xcc>)
 8003028:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800302a:	4b21      	ldr	r3, [pc, #132]	; (80030b0 <vTaskDelete+0xc8>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	429a      	cmp	r2, r3
 8003032:	d10b      	bne.n	800304c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	3304      	adds	r3, #4
 8003038:	4619      	mov	r1, r3
 800303a:	481f      	ldr	r0, [pc, #124]	; (80030b8 <vTaskDelete+0xd0>)
 800303c:	f7ff f899 	bl	8002172 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8003040:	4b1e      	ldr	r3, [pc, #120]	; (80030bc <vTaskDelete+0xd4>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	3301      	adds	r3, #1
 8003046:	4a1d      	ldr	r2, [pc, #116]	; (80030bc <vTaskDelete+0xd4>)
 8003048:	6013      	str	r3, [r2, #0]
 800304a:	e009      	b.n	8003060 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800304c:	4b1c      	ldr	r3, [pc, #112]	; (80030c0 <vTaskDelete+0xd8>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	3b01      	subs	r3, #1
 8003052:	4a1b      	ldr	r2, [pc, #108]	; (80030c0 <vTaskDelete+0xd8>)
 8003054:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 fce4 	bl	8003a24 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800305c:	f000 fd14 	bl	8003a88 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8003060:	f001 fab0 	bl	80045c4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8003064:	4b17      	ldr	r3, [pc, #92]	; (80030c4 <vTaskDelete+0xdc>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d01d      	beq.n	80030a8 <vTaskDelete+0xc0>
		{
			if( pxTCB == pxCurrentTCB )
 800306c:	4b10      	ldr	r3, [pc, #64]	; (80030b0 <vTaskDelete+0xc8>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	429a      	cmp	r2, r3
 8003074:	d118      	bne.n	80030a8 <vTaskDelete+0xc0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8003076:	4b14      	ldr	r3, [pc, #80]	; (80030c8 <vTaskDelete+0xe0>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00c      	beq.n	8003098 <vTaskDelete+0xb0>
	__asm volatile
 800307e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003082:	b672      	cpsid	i
 8003084:	f383 8811 	msr	BASEPRI, r3
 8003088:	f3bf 8f6f 	isb	sy
 800308c:	f3bf 8f4f 	dsb	sy
 8003090:	b662      	cpsie	i
 8003092:	60bb      	str	r3, [r7, #8]
}
 8003094:	bf00      	nop
 8003096:	e7fe      	b.n	8003096 <vTaskDelete+0xae>
				portYIELD_WITHIN_API();
 8003098:	4b0c      	ldr	r3, [pc, #48]	; (80030cc <vTaskDelete+0xe4>)
 800309a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	f3bf 8f4f 	dsb	sy
 80030a4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80030a8:	bf00      	nop
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	200006e8 	.word	0x200006e8
 80030b4:	20000bd8 	.word	0x20000bd8
 80030b8:	20000b90 	.word	0x20000b90
 80030bc:	20000ba4 	.word	0x20000ba4
 80030c0:	20000bbc 	.word	0x20000bbc
 80030c4:	20000bc8 	.word	0x20000bc8
 80030c8:	20000be4 	.word	0x20000be4
 80030cc:	e000ed04 	.word	0xe000ed04

080030d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80030d8:	2300      	movs	r3, #0
 80030da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d019      	beq.n	8003116 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80030e2:	4b14      	ldr	r3, [pc, #80]	; (8003134 <vTaskDelay+0x64>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00c      	beq.n	8003104 <vTaskDelay+0x34>
	__asm volatile
 80030ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ee:	b672      	cpsid	i
 80030f0:	f383 8811 	msr	BASEPRI, r3
 80030f4:	f3bf 8f6f 	isb	sy
 80030f8:	f3bf 8f4f 	dsb	sy
 80030fc:	b662      	cpsie	i
 80030fe:	60bb      	str	r3, [r7, #8]
}
 8003100:	bf00      	nop
 8003102:	e7fe      	b.n	8003102 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8003104:	f000 f8ec 	bl	80032e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003108:	2100      	movs	r1, #0
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 fd6c 	bl	8003be8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003110:	f000 f8f4 	bl	80032fc <xTaskResumeAll>
 8003114:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d107      	bne.n	800312c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800311c:	4b06      	ldr	r3, [pc, #24]	; (8003138 <vTaskDelay+0x68>)
 800311e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	f3bf 8f4f 	dsb	sy
 8003128:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800312c:	bf00      	nop
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	20000be4 	.word	0x20000be4
 8003138:	e000ed04 	.word	0xe000ed04

0800313c <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800313c:	b580      	push	{r7, lr}
 800313e:	b088      	sub	sp, #32
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10c      	bne.n	8003168 <eTaskGetState+0x2c>
	__asm volatile
 800314e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003152:	b672      	cpsid	i
 8003154:	f383 8811 	msr	BASEPRI, r3
 8003158:	f3bf 8f6f 	isb	sy
 800315c:	f3bf 8f4f 	dsb	sy
 8003160:	b662      	cpsie	i
 8003162:	60bb      	str	r3, [r7, #8]
}
 8003164:	bf00      	nop
 8003166:	e7fe      	b.n	8003166 <eTaskGetState+0x2a>

		if( pxTCB == pxCurrentTCB )
 8003168:	4b23      	ldr	r3, [pc, #140]	; (80031f8 <eTaskGetState+0xbc>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	429a      	cmp	r2, r3
 8003170:	d102      	bne.n	8003178 <eTaskGetState+0x3c>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8003172:	2300      	movs	r3, #0
 8003174:	77fb      	strb	r3, [r7, #31]
 8003176:	e03a      	b.n	80031ee <eTaskGetState+0xb2>
		}
		else
		{
			taskENTER_CRITICAL();
 8003178:	f001 f9f0 	bl	800455c <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8003182:	4b1e      	ldr	r3, [pc, #120]	; (80031fc <eTaskGetState+0xc0>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8003188:	4b1d      	ldr	r3, [pc, #116]	; (8003200 <eTaskGetState+0xc4>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800318e:	f001 fa19 	bl	80045c4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	429a      	cmp	r2, r3
 8003198:	d003      	beq.n	80031a2 <eTaskGetState+0x66>
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d102      	bne.n	80031a8 <eTaskGetState+0x6c>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80031a2:	2302      	movs	r3, #2
 80031a4:	77fb      	strb	r3, [r7, #31]
 80031a6:	e022      	b.n	80031ee <eTaskGetState+0xb2>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	4a16      	ldr	r2, [pc, #88]	; (8003204 <eTaskGetState+0xc8>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d112      	bne.n	80031d6 <eTaskGetState+0x9a>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10b      	bne.n	80031d0 <eTaskGetState+0x94>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d102      	bne.n	80031ca <eTaskGetState+0x8e>
							{
								eReturn = eBlocked;
 80031c4:	2302      	movs	r3, #2
 80031c6:	77fb      	strb	r3, [r7, #31]
 80031c8:	e011      	b.n	80031ee <eTaskGetState+0xb2>
							}
							else
							{
								eReturn = eSuspended;
 80031ca:	2303      	movs	r3, #3
 80031cc:	77fb      	strb	r3, [r7, #31]
 80031ce:	e00e      	b.n	80031ee <eTaskGetState+0xb2>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 80031d0:	2302      	movs	r3, #2
 80031d2:	77fb      	strb	r3, [r7, #31]
 80031d4:	e00b      	b.n	80031ee <eTaskGetState+0xb2>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	4a0b      	ldr	r2, [pc, #44]	; (8003208 <eTaskGetState+0xcc>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d002      	beq.n	80031e4 <eTaskGetState+0xa8>
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d102      	bne.n	80031ea <eTaskGetState+0xae>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 80031e4:	2304      	movs	r3, #4
 80031e6:	77fb      	strb	r3, [r7, #31]
 80031e8:	e001      	b.n	80031ee <eTaskGetState+0xb2>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 80031ea:	2301      	movs	r3, #1
 80031ec:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 80031ee:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80031f0:	4618      	mov	r0, r3
 80031f2:	3720      	adds	r7, #32
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	200006e8 	.word	0x200006e8
 80031fc:	20000b74 	.word	0x20000b74
 8003200:	20000b78 	.word	0x20000b78
 8003204:	20000ba8 	.word	0x20000ba8
 8003208:	20000b90 	.word	0x20000b90

0800320c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b08a      	sub	sp, #40	; 0x28
 8003210:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003212:	2300      	movs	r3, #0
 8003214:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003216:	2300      	movs	r3, #0
 8003218:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800321a:	463a      	mov	r2, r7
 800321c:	1d39      	adds	r1, r7, #4
 800321e:	f107 0308 	add.w	r3, r7, #8
 8003222:	4618      	mov	r0, r3
 8003224:	f7fe ff44 	bl	80020b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003228:	6839      	ldr	r1, [r7, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	9202      	str	r2, [sp, #8]
 8003230:	9301      	str	r3, [sp, #4]
 8003232:	2300      	movs	r3, #0
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	2300      	movs	r3, #0
 8003238:	460a      	mov	r2, r1
 800323a:	4923      	ldr	r1, [pc, #140]	; (80032c8 <vTaskStartScheduler+0xbc>)
 800323c:	4823      	ldr	r0, [pc, #140]	; (80032cc <vTaskStartScheduler+0xc0>)
 800323e:	f7ff fd29 	bl	8002c94 <xTaskCreateStatic>
 8003242:	4603      	mov	r3, r0
 8003244:	4a22      	ldr	r2, [pc, #136]	; (80032d0 <vTaskStartScheduler+0xc4>)
 8003246:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003248:	4b21      	ldr	r3, [pc, #132]	; (80032d0 <vTaskStartScheduler+0xc4>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d002      	beq.n	8003256 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003250:	2301      	movs	r3, #1
 8003252:	617b      	str	r3, [r7, #20]
 8003254:	e001      	b.n	800325a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003256:	2300      	movs	r3, #0
 8003258:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d102      	bne.n	8003266 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003260:	f000 fd16 	bl	8003c90 <xTimerCreateTimerTask>
 8003264:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d118      	bne.n	800329e <vTaskStartScheduler+0x92>
	__asm volatile
 800326c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003270:	b672      	cpsid	i
 8003272:	f383 8811 	msr	BASEPRI, r3
 8003276:	f3bf 8f6f 	isb	sy
 800327a:	f3bf 8f4f 	dsb	sy
 800327e:	b662      	cpsie	i
 8003280:	613b      	str	r3, [r7, #16]
}
 8003282:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003284:	4b13      	ldr	r3, [pc, #76]	; (80032d4 <vTaskStartScheduler+0xc8>)
 8003286:	f04f 32ff 	mov.w	r2, #4294967295
 800328a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800328c:	4b12      	ldr	r3, [pc, #72]	; (80032d8 <vTaskStartScheduler+0xcc>)
 800328e:	2201      	movs	r2, #1
 8003290:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003292:	4b12      	ldr	r3, [pc, #72]	; (80032dc <vTaskStartScheduler+0xd0>)
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003298:	f001 f8e2 	bl	8004460 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800329c:	e010      	b.n	80032c0 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a4:	d10c      	bne.n	80032c0 <vTaskStartScheduler+0xb4>
	__asm volatile
 80032a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032aa:	b672      	cpsid	i
 80032ac:	f383 8811 	msr	BASEPRI, r3
 80032b0:	f3bf 8f6f 	isb	sy
 80032b4:	f3bf 8f4f 	dsb	sy
 80032b8:	b662      	cpsie	i
 80032ba:	60fb      	str	r3, [r7, #12]
}
 80032bc:	bf00      	nop
 80032be:	e7fe      	b.n	80032be <vTaskStartScheduler+0xb2>
}
 80032c0:	bf00      	nop
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	08004c24 	.word	0x08004c24
 80032cc:	08003919 	.word	0x08003919
 80032d0:	20000be0 	.word	0x20000be0
 80032d4:	20000bdc 	.word	0x20000bdc
 80032d8:	20000bc8 	.word	0x20000bc8
 80032dc:	20000bc0 	.word	0x20000bc0

080032e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80032e4:	4b04      	ldr	r3, [pc, #16]	; (80032f8 <vTaskSuspendAll+0x18>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	3301      	adds	r3, #1
 80032ea:	4a03      	ldr	r2, [pc, #12]	; (80032f8 <vTaskSuspendAll+0x18>)
 80032ec:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80032ee:	bf00      	nop
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	20000be4 	.word	0x20000be4

080032fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003302:	2300      	movs	r3, #0
 8003304:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003306:	2300      	movs	r3, #0
 8003308:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800330a:	4b43      	ldr	r3, [pc, #268]	; (8003418 <xTaskResumeAll+0x11c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10c      	bne.n	800332c <xTaskResumeAll+0x30>
	__asm volatile
 8003312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003316:	b672      	cpsid	i
 8003318:	f383 8811 	msr	BASEPRI, r3
 800331c:	f3bf 8f6f 	isb	sy
 8003320:	f3bf 8f4f 	dsb	sy
 8003324:	b662      	cpsie	i
 8003326:	603b      	str	r3, [r7, #0]
}
 8003328:	bf00      	nop
 800332a:	e7fe      	b.n	800332a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800332c:	f001 f916 	bl	800455c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003330:	4b39      	ldr	r3, [pc, #228]	; (8003418 <xTaskResumeAll+0x11c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	3b01      	subs	r3, #1
 8003336:	4a38      	ldr	r2, [pc, #224]	; (8003418 <xTaskResumeAll+0x11c>)
 8003338:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800333a:	4b37      	ldr	r3, [pc, #220]	; (8003418 <xTaskResumeAll+0x11c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d162      	bne.n	8003408 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003342:	4b36      	ldr	r3, [pc, #216]	; (800341c <xTaskResumeAll+0x120>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d05e      	beq.n	8003408 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800334a:	e02f      	b.n	80033ac <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800334c:	4b34      	ldr	r3, [pc, #208]	; (8003420 <xTaskResumeAll+0x124>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	3318      	adds	r3, #24
 8003358:	4618      	mov	r0, r3
 800335a:	f7fe ff67 	bl	800222c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	3304      	adds	r3, #4
 8003362:	4618      	mov	r0, r3
 8003364:	f7fe ff62 	bl	800222c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800336c:	4b2d      	ldr	r3, [pc, #180]	; (8003424 <xTaskResumeAll+0x128>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	429a      	cmp	r2, r3
 8003372:	d903      	bls.n	800337c <xTaskResumeAll+0x80>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003378:	4a2a      	ldr	r2, [pc, #168]	; (8003424 <xTaskResumeAll+0x128>)
 800337a:	6013      	str	r3, [r2, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003380:	4613      	mov	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4a27      	ldr	r2, [pc, #156]	; (8003428 <xTaskResumeAll+0x12c>)
 800338a:	441a      	add	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	3304      	adds	r3, #4
 8003390:	4619      	mov	r1, r3
 8003392:	4610      	mov	r0, r2
 8003394:	f7fe feed 	bl	8002172 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800339c:	4b23      	ldr	r3, [pc, #140]	; (800342c <xTaskResumeAll+0x130>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d302      	bcc.n	80033ac <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80033a6:	4b22      	ldr	r3, [pc, #136]	; (8003430 <xTaskResumeAll+0x134>)
 80033a8:	2201      	movs	r2, #1
 80033aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033ac:	4b1c      	ldr	r3, [pc, #112]	; (8003420 <xTaskResumeAll+0x124>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1cb      	bne.n	800334c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80033ba:	f000 fb65 	bl	8003a88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80033be:	4b1d      	ldr	r3, [pc, #116]	; (8003434 <xTaskResumeAll+0x138>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d010      	beq.n	80033ec <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80033ca:	f000 f847 	bl	800345c <xTaskIncrementTick>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d002      	beq.n	80033da <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80033d4:	4b16      	ldr	r3, [pc, #88]	; (8003430 <xTaskResumeAll+0x134>)
 80033d6:	2201      	movs	r2, #1
 80033d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	3b01      	subs	r3, #1
 80033de:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1f1      	bne.n	80033ca <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80033e6:	4b13      	ldr	r3, [pc, #76]	; (8003434 <xTaskResumeAll+0x138>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80033ec:	4b10      	ldr	r3, [pc, #64]	; (8003430 <xTaskResumeAll+0x134>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d009      	beq.n	8003408 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80033f4:	2301      	movs	r3, #1
 80033f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80033f8:	4b0f      	ldr	r3, [pc, #60]	; (8003438 <xTaskResumeAll+0x13c>)
 80033fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	f3bf 8f4f 	dsb	sy
 8003404:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003408:	f001 f8dc 	bl	80045c4 <vPortExitCritical>

	return xAlreadyYielded;
 800340c:	68bb      	ldr	r3, [r7, #8]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	20000be4 	.word	0x20000be4
 800341c:	20000bbc 	.word	0x20000bbc
 8003420:	20000b7c 	.word	0x20000b7c
 8003424:	20000bc4 	.word	0x20000bc4
 8003428:	200006ec 	.word	0x200006ec
 800342c:	200006e8 	.word	0x200006e8
 8003430:	20000bd0 	.word	0x20000bd0
 8003434:	20000bcc 	.word	0x20000bcc
 8003438:	e000ed04 	.word	0xe000ed04

0800343c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003442:	4b05      	ldr	r3, [pc, #20]	; (8003458 <xTaskGetTickCount+0x1c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003448:	687b      	ldr	r3, [r7, #4]
}
 800344a:	4618      	mov	r0, r3
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	20000bc0 	.word	0x20000bc0

0800345c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003462:	2300      	movs	r3, #0
 8003464:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003466:	4b50      	ldr	r3, [pc, #320]	; (80035a8 <xTaskIncrementTick+0x14c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	f040 808b 	bne.w	8003586 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003470:	4b4e      	ldr	r3, [pc, #312]	; (80035ac <xTaskIncrementTick+0x150>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	3301      	adds	r3, #1
 8003476:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003478:	4a4c      	ldr	r2, [pc, #304]	; (80035ac <xTaskIncrementTick+0x150>)
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d122      	bne.n	80034ca <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8003484:	4b4a      	ldr	r3, [pc, #296]	; (80035b0 <xTaskIncrementTick+0x154>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00c      	beq.n	80034a8 <xTaskIncrementTick+0x4c>
	__asm volatile
 800348e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003492:	b672      	cpsid	i
 8003494:	f383 8811 	msr	BASEPRI, r3
 8003498:	f3bf 8f6f 	isb	sy
 800349c:	f3bf 8f4f 	dsb	sy
 80034a0:	b662      	cpsie	i
 80034a2:	603b      	str	r3, [r7, #0]
}
 80034a4:	bf00      	nop
 80034a6:	e7fe      	b.n	80034a6 <xTaskIncrementTick+0x4a>
 80034a8:	4b41      	ldr	r3, [pc, #260]	; (80035b0 <xTaskIncrementTick+0x154>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	4b41      	ldr	r3, [pc, #260]	; (80035b4 <xTaskIncrementTick+0x158>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a3f      	ldr	r2, [pc, #252]	; (80035b0 <xTaskIncrementTick+0x154>)
 80034b4:	6013      	str	r3, [r2, #0]
 80034b6:	4a3f      	ldr	r2, [pc, #252]	; (80035b4 <xTaskIncrementTick+0x158>)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6013      	str	r3, [r2, #0]
 80034bc:	4b3e      	ldr	r3, [pc, #248]	; (80035b8 <xTaskIncrementTick+0x15c>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	3301      	adds	r3, #1
 80034c2:	4a3d      	ldr	r2, [pc, #244]	; (80035b8 <xTaskIncrementTick+0x15c>)
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	f000 fadf 	bl	8003a88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80034ca:	4b3c      	ldr	r3, [pc, #240]	; (80035bc <xTaskIncrementTick+0x160>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d349      	bcc.n	8003568 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034d4:	4b36      	ldr	r3, [pc, #216]	; (80035b0 <xTaskIncrementTick+0x154>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d104      	bne.n	80034e8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034de:	4b37      	ldr	r3, [pc, #220]	; (80035bc <xTaskIncrementTick+0x160>)
 80034e0:	f04f 32ff 	mov.w	r2, #4294967295
 80034e4:	601a      	str	r2, [r3, #0]
					break;
 80034e6:	e03f      	b.n	8003568 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034e8:	4b31      	ldr	r3, [pc, #196]	; (80035b0 <xTaskIncrementTick+0x154>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d203      	bcs.n	8003508 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003500:	4a2e      	ldr	r2, [pc, #184]	; (80035bc <xTaskIncrementTick+0x160>)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003506:	e02f      	b.n	8003568 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	3304      	adds	r3, #4
 800350c:	4618      	mov	r0, r3
 800350e:	f7fe fe8d 	bl	800222c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003516:	2b00      	cmp	r3, #0
 8003518:	d004      	beq.n	8003524 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	3318      	adds	r3, #24
 800351e:	4618      	mov	r0, r3
 8003520:	f7fe fe84 	bl	800222c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003528:	4b25      	ldr	r3, [pc, #148]	; (80035c0 <xTaskIncrementTick+0x164>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	429a      	cmp	r2, r3
 800352e:	d903      	bls.n	8003538 <xTaskIncrementTick+0xdc>
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003534:	4a22      	ldr	r2, [pc, #136]	; (80035c0 <xTaskIncrementTick+0x164>)
 8003536:	6013      	str	r3, [r2, #0]
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800353c:	4613      	mov	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4a1f      	ldr	r2, [pc, #124]	; (80035c4 <xTaskIncrementTick+0x168>)
 8003546:	441a      	add	r2, r3
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	3304      	adds	r3, #4
 800354c:	4619      	mov	r1, r3
 800354e:	4610      	mov	r0, r2
 8003550:	f7fe fe0f 	bl	8002172 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003558:	4b1b      	ldr	r3, [pc, #108]	; (80035c8 <xTaskIncrementTick+0x16c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355e:	429a      	cmp	r2, r3
 8003560:	d3b8      	bcc.n	80034d4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8003562:	2301      	movs	r3, #1
 8003564:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003566:	e7b5      	b.n	80034d4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003568:	4b17      	ldr	r3, [pc, #92]	; (80035c8 <xTaskIncrementTick+0x16c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800356e:	4915      	ldr	r1, [pc, #84]	; (80035c4 <xTaskIncrementTick+0x168>)
 8003570:	4613      	mov	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d907      	bls.n	8003590 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8003580:	2301      	movs	r3, #1
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	e004      	b.n	8003590 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003586:	4b11      	ldr	r3, [pc, #68]	; (80035cc <xTaskIncrementTick+0x170>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	3301      	adds	r3, #1
 800358c:	4a0f      	ldr	r2, [pc, #60]	; (80035cc <xTaskIncrementTick+0x170>)
 800358e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003590:	4b0f      	ldr	r3, [pc, #60]	; (80035d0 <xTaskIncrementTick+0x174>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8003598:	2301      	movs	r3, #1
 800359a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800359c:	697b      	ldr	r3, [r7, #20]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3718      	adds	r7, #24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	20000be4 	.word	0x20000be4
 80035ac:	20000bc0 	.word	0x20000bc0
 80035b0:	20000b74 	.word	0x20000b74
 80035b4:	20000b78 	.word	0x20000b78
 80035b8:	20000bd4 	.word	0x20000bd4
 80035bc:	20000bdc 	.word	0x20000bdc
 80035c0:	20000bc4 	.word	0x20000bc4
 80035c4:	200006ec 	.word	0x200006ec
 80035c8:	200006e8 	.word	0x200006e8
 80035cc:	20000bcc 	.word	0x20000bcc
 80035d0:	20000bd0 	.word	0x20000bd0

080035d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80035da:	4b29      	ldr	r3, [pc, #164]	; (8003680 <vTaskSwitchContext+0xac>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80035e2:	4b28      	ldr	r3, [pc, #160]	; (8003684 <vTaskSwitchContext+0xb0>)
 80035e4:	2201      	movs	r2, #1
 80035e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80035e8:	e043      	b.n	8003672 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 80035ea:	4b26      	ldr	r3, [pc, #152]	; (8003684 <vTaskSwitchContext+0xb0>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035f0:	4b25      	ldr	r3, [pc, #148]	; (8003688 <vTaskSwitchContext+0xb4>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	e012      	b.n	800361e <vTaskSwitchContext+0x4a>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10c      	bne.n	8003618 <vTaskSwitchContext+0x44>
	__asm volatile
 80035fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003602:	b672      	cpsid	i
 8003604:	f383 8811 	msr	BASEPRI, r3
 8003608:	f3bf 8f6f 	isb	sy
 800360c:	f3bf 8f4f 	dsb	sy
 8003610:	b662      	cpsie	i
 8003612:	607b      	str	r3, [r7, #4]
}
 8003614:	bf00      	nop
 8003616:	e7fe      	b.n	8003616 <vTaskSwitchContext+0x42>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	3b01      	subs	r3, #1
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	491b      	ldr	r1, [pc, #108]	; (800368c <vTaskSwitchContext+0xb8>)
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	4613      	mov	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	440b      	add	r3, r1
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0e2      	beq.n	80035f8 <vTaskSwitchContext+0x24>
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	4613      	mov	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4a13      	ldr	r2, [pc, #76]	; (800368c <vTaskSwitchContext+0xb8>)
 800363e:	4413      	add	r3, r2
 8003640:	60bb      	str	r3, [r7, #8]
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	605a      	str	r2, [r3, #4]
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	3308      	adds	r3, #8
 8003654:	429a      	cmp	r2, r3
 8003656:	d104      	bne.n	8003662 <vTaskSwitchContext+0x8e>
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	605a      	str	r2, [r3, #4]
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	4a09      	ldr	r2, [pc, #36]	; (8003690 <vTaskSwitchContext+0xbc>)
 800366a:	6013      	str	r3, [r2, #0]
 800366c:	4a06      	ldr	r2, [pc, #24]	; (8003688 <vTaskSwitchContext+0xb4>)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6013      	str	r3, [r2, #0]
}
 8003672:	bf00      	nop
 8003674:	3714      	adds	r7, #20
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	20000be4 	.word	0x20000be4
 8003684:	20000bd0 	.word	0x20000bd0
 8003688:	20000bc4 	.word	0x20000bc4
 800368c:	200006ec 	.word	0x200006ec
 8003690:	200006e8 	.word	0x200006e8

08003694 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10c      	bne.n	80036be <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80036a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a8:	b672      	cpsid	i
 80036aa:	f383 8811 	msr	BASEPRI, r3
 80036ae:	f3bf 8f6f 	isb	sy
 80036b2:	f3bf 8f4f 	dsb	sy
 80036b6:	b662      	cpsie	i
 80036b8:	60fb      	str	r3, [r7, #12]
}
 80036ba:	bf00      	nop
 80036bc:	e7fe      	b.n	80036bc <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80036be:	4b07      	ldr	r3, [pc, #28]	; (80036dc <vTaskPlaceOnEventList+0x48>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	3318      	adds	r3, #24
 80036c4:	4619      	mov	r1, r3
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7fe fd77 	bl	80021ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80036cc:	2101      	movs	r1, #1
 80036ce:	6838      	ldr	r0, [r7, #0]
 80036d0:	f000 fa8a 	bl	8003be8 <prvAddCurrentTaskToDelayedList>
}
 80036d4:	bf00      	nop
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	200006e8 	.word	0x200006e8

080036e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10c      	bne.n	800370c <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80036f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f6:	b672      	cpsid	i
 80036f8:	f383 8811 	msr	BASEPRI, r3
 80036fc:	f3bf 8f6f 	isb	sy
 8003700:	f3bf 8f4f 	dsb	sy
 8003704:	b662      	cpsie	i
 8003706:	617b      	str	r3, [r7, #20]
}
 8003708:	bf00      	nop
 800370a:	e7fe      	b.n	800370a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800370c:	4b0a      	ldr	r3, [pc, #40]	; (8003738 <vTaskPlaceOnEventListRestricted+0x58>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	3318      	adds	r3, #24
 8003712:	4619      	mov	r1, r3
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f7fe fd2c 	bl	8002172 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d002      	beq.n	8003726 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8003720:	f04f 33ff 	mov.w	r3, #4294967295
 8003724:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003726:	6879      	ldr	r1, [r7, #4]
 8003728:	68b8      	ldr	r0, [r7, #8]
 800372a:	f000 fa5d 	bl	8003be8 <prvAddCurrentTaskToDelayedList>
	}
 800372e:	bf00      	nop
 8003730:	3718      	adds	r7, #24
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	200006e8 	.word	0x200006e8

0800373c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10c      	bne.n	800376c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8003752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003756:	b672      	cpsid	i
 8003758:	f383 8811 	msr	BASEPRI, r3
 800375c:	f3bf 8f6f 	isb	sy
 8003760:	f3bf 8f4f 	dsb	sy
 8003764:	b662      	cpsie	i
 8003766:	60fb      	str	r3, [r7, #12]
}
 8003768:	bf00      	nop
 800376a:	e7fe      	b.n	800376a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	3318      	adds	r3, #24
 8003770:	4618      	mov	r0, r3
 8003772:	f7fe fd5b 	bl	800222c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003776:	4b1e      	ldr	r3, [pc, #120]	; (80037f0 <xTaskRemoveFromEventList+0xb4>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d11d      	bne.n	80037ba <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	3304      	adds	r3, #4
 8003782:	4618      	mov	r0, r3
 8003784:	f7fe fd52 	bl	800222c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800378c:	4b19      	ldr	r3, [pc, #100]	; (80037f4 <xTaskRemoveFromEventList+0xb8>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	429a      	cmp	r2, r3
 8003792:	d903      	bls.n	800379c <xTaskRemoveFromEventList+0x60>
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003798:	4a16      	ldr	r2, [pc, #88]	; (80037f4 <xTaskRemoveFromEventList+0xb8>)
 800379a:	6013      	str	r3, [r2, #0]
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a0:	4613      	mov	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4413      	add	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	4a13      	ldr	r2, [pc, #76]	; (80037f8 <xTaskRemoveFromEventList+0xbc>)
 80037aa:	441a      	add	r2, r3
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	3304      	adds	r3, #4
 80037b0:	4619      	mov	r1, r3
 80037b2:	4610      	mov	r0, r2
 80037b4:	f7fe fcdd 	bl	8002172 <vListInsertEnd>
 80037b8:	e005      	b.n	80037c6 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	3318      	adds	r3, #24
 80037be:	4619      	mov	r1, r3
 80037c0:	480e      	ldr	r0, [pc, #56]	; (80037fc <xTaskRemoveFromEventList+0xc0>)
 80037c2:	f7fe fcd6 	bl	8002172 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ca:	4b0d      	ldr	r3, [pc, #52]	; (8003800 <xTaskRemoveFromEventList+0xc4>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d905      	bls.n	80037e0 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80037d4:	2301      	movs	r3, #1
 80037d6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80037d8:	4b0a      	ldr	r3, [pc, #40]	; (8003804 <xTaskRemoveFromEventList+0xc8>)
 80037da:	2201      	movs	r2, #1
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	e001      	b.n	80037e4 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80037e0:	2300      	movs	r3, #0
 80037e2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80037e4:	697b      	ldr	r3, [r7, #20]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3718      	adds	r7, #24
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	20000be4 	.word	0x20000be4
 80037f4:	20000bc4 	.word	0x20000bc4
 80037f8:	200006ec 	.word	0x200006ec
 80037fc:	20000b7c 	.word	0x20000b7c
 8003800:	200006e8 	.word	0x200006e8
 8003804:	20000bd0 	.word	0x20000bd0

08003808 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003810:	4b06      	ldr	r3, [pc, #24]	; (800382c <vTaskInternalSetTimeOutState+0x24>)
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003818:	4b05      	ldr	r3, [pc, #20]	; (8003830 <vTaskInternalSetTimeOutState+0x28>)
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	605a      	str	r2, [r3, #4]
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr
 800382c:	20000bd4 	.word	0x20000bd4
 8003830:	20000bc0 	.word	0x20000bc0

08003834 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b088      	sub	sp, #32
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10c      	bne.n	800385e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8003844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003848:	b672      	cpsid	i
 800384a:	f383 8811 	msr	BASEPRI, r3
 800384e:	f3bf 8f6f 	isb	sy
 8003852:	f3bf 8f4f 	dsb	sy
 8003856:	b662      	cpsie	i
 8003858:	613b      	str	r3, [r7, #16]
}
 800385a:	bf00      	nop
 800385c:	e7fe      	b.n	800385c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10c      	bne.n	800387e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8003864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003868:	b672      	cpsid	i
 800386a:	f383 8811 	msr	BASEPRI, r3
 800386e:	f3bf 8f6f 	isb	sy
 8003872:	f3bf 8f4f 	dsb	sy
 8003876:	b662      	cpsie	i
 8003878:	60fb      	str	r3, [r7, #12]
}
 800387a:	bf00      	nop
 800387c:	e7fe      	b.n	800387c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800387e:	f000 fe6d 	bl	800455c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003882:	4b1d      	ldr	r3, [pc, #116]	; (80038f8 <xTaskCheckForTimeOut+0xc4>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389a:	d102      	bne.n	80038a2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800389c:	2300      	movs	r3, #0
 800389e:	61fb      	str	r3, [r7, #28]
 80038a0:	e023      	b.n	80038ea <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	4b15      	ldr	r3, [pc, #84]	; (80038fc <xTaskCheckForTimeOut+0xc8>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d007      	beq.n	80038be <xTaskCheckForTimeOut+0x8a>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d302      	bcc.n	80038be <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80038b8:	2301      	movs	r3, #1
 80038ba:	61fb      	str	r3, [r7, #28]
 80038bc:	e015      	b.n	80038ea <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d20b      	bcs.n	80038e0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	1ad2      	subs	r2, r2, r3
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f7ff ff97 	bl	8003808 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80038da:	2300      	movs	r3, #0
 80038dc:	61fb      	str	r3, [r7, #28]
 80038de:	e004      	b.n	80038ea <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80038e6:	2301      	movs	r3, #1
 80038e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80038ea:	f000 fe6b 	bl	80045c4 <vPortExitCritical>

	return xReturn;
 80038ee:	69fb      	ldr	r3, [r7, #28]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3720      	adds	r7, #32
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	20000bc0 	.word	0x20000bc0
 80038fc:	20000bd4 	.word	0x20000bd4

08003900 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003904:	4b03      	ldr	r3, [pc, #12]	; (8003914 <vTaskMissedYield+0x14>)
 8003906:	2201      	movs	r2, #1
 8003908:	601a      	str	r2, [r3, #0]
}
 800390a:	bf00      	nop
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	20000bd0 	.word	0x20000bd0

08003918 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003920:	f000 f852 	bl	80039c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003924:	4b06      	ldr	r3, [pc, #24]	; (8003940 <prvIdleTask+0x28>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d9f9      	bls.n	8003920 <prvIdleTask+0x8>
			{
				taskYIELD();
 800392c:	4b05      	ldr	r3, [pc, #20]	; (8003944 <prvIdleTask+0x2c>)
 800392e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	f3bf 8f4f 	dsb	sy
 8003938:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800393c:	e7f0      	b.n	8003920 <prvIdleTask+0x8>
 800393e:	bf00      	nop
 8003940:	200006ec 	.word	0x200006ec
 8003944:	e000ed04 	.word	0xe000ed04

08003948 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800394e:	2300      	movs	r3, #0
 8003950:	607b      	str	r3, [r7, #4]
 8003952:	e00c      	b.n	800396e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	4613      	mov	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4413      	add	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4a12      	ldr	r2, [pc, #72]	; (80039a8 <prvInitialiseTaskLists+0x60>)
 8003960:	4413      	add	r3, r2
 8003962:	4618      	mov	r0, r3
 8003964:	f7fe fbd8 	bl	8002118 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3301      	adds	r3, #1
 800396c:	607b      	str	r3, [r7, #4]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b37      	cmp	r3, #55	; 0x37
 8003972:	d9ef      	bls.n	8003954 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003974:	480d      	ldr	r0, [pc, #52]	; (80039ac <prvInitialiseTaskLists+0x64>)
 8003976:	f7fe fbcf 	bl	8002118 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800397a:	480d      	ldr	r0, [pc, #52]	; (80039b0 <prvInitialiseTaskLists+0x68>)
 800397c:	f7fe fbcc 	bl	8002118 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003980:	480c      	ldr	r0, [pc, #48]	; (80039b4 <prvInitialiseTaskLists+0x6c>)
 8003982:	f7fe fbc9 	bl	8002118 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003986:	480c      	ldr	r0, [pc, #48]	; (80039b8 <prvInitialiseTaskLists+0x70>)
 8003988:	f7fe fbc6 	bl	8002118 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800398c:	480b      	ldr	r0, [pc, #44]	; (80039bc <prvInitialiseTaskLists+0x74>)
 800398e:	f7fe fbc3 	bl	8002118 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003992:	4b0b      	ldr	r3, [pc, #44]	; (80039c0 <prvInitialiseTaskLists+0x78>)
 8003994:	4a05      	ldr	r2, [pc, #20]	; (80039ac <prvInitialiseTaskLists+0x64>)
 8003996:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003998:	4b0a      	ldr	r3, [pc, #40]	; (80039c4 <prvInitialiseTaskLists+0x7c>)
 800399a:	4a05      	ldr	r2, [pc, #20]	; (80039b0 <prvInitialiseTaskLists+0x68>)
 800399c:	601a      	str	r2, [r3, #0]
}
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	200006ec 	.word	0x200006ec
 80039ac:	20000b4c 	.word	0x20000b4c
 80039b0:	20000b60 	.word	0x20000b60
 80039b4:	20000b7c 	.word	0x20000b7c
 80039b8:	20000b90 	.word	0x20000b90
 80039bc:	20000ba8 	.word	0x20000ba8
 80039c0:	20000b74 	.word	0x20000b74
 80039c4:	20000b78 	.word	0x20000b78

080039c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039ce:	e019      	b.n	8003a04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80039d0:	f000 fdc4 	bl	800455c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039d4:	4b10      	ldr	r3, [pc, #64]	; (8003a18 <prvCheckTasksWaitingTermination+0x50>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3304      	adds	r3, #4
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7fe fc23 	bl	800222c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80039e6:	4b0d      	ldr	r3, [pc, #52]	; (8003a1c <prvCheckTasksWaitingTermination+0x54>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	3b01      	subs	r3, #1
 80039ec:	4a0b      	ldr	r2, [pc, #44]	; (8003a1c <prvCheckTasksWaitingTermination+0x54>)
 80039ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80039f0:	4b0b      	ldr	r3, [pc, #44]	; (8003a20 <prvCheckTasksWaitingTermination+0x58>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	3b01      	subs	r3, #1
 80039f6:	4a0a      	ldr	r2, [pc, #40]	; (8003a20 <prvCheckTasksWaitingTermination+0x58>)
 80039f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80039fa:	f000 fde3 	bl	80045c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f810 	bl	8003a24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a04:	4b06      	ldr	r3, [pc, #24]	; (8003a20 <prvCheckTasksWaitingTermination+0x58>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1e1      	bne.n	80039d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003a0c:	bf00      	nop
 8003a0e:	bf00      	nop
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	20000b90 	.word	0x20000b90
 8003a1c:	20000bbc 	.word	0x20000bbc
 8003a20:	20000ba4 	.word	0x20000ba4

08003a24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d108      	bne.n	8003a48 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 ff84 	bl	8004948 <vPortFree>
				vPortFree( pxTCB );
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 ff81 	bl	8004948 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003a46:	e01a      	b.n	8003a7e <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d103      	bne.n	8003a5a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 ff78 	bl	8004948 <vPortFree>
	}
 8003a58:	e011      	b.n	8003a7e <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d00c      	beq.n	8003a7e <prvDeleteTCB+0x5a>
	__asm volatile
 8003a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a68:	b672      	cpsid	i
 8003a6a:	f383 8811 	msr	BASEPRI, r3
 8003a6e:	f3bf 8f6f 	isb	sy
 8003a72:	f3bf 8f4f 	dsb	sy
 8003a76:	b662      	cpsie	i
 8003a78:	60fb      	str	r3, [r7, #12]
}
 8003a7a:	bf00      	nop
 8003a7c:	e7fe      	b.n	8003a7c <prvDeleteTCB+0x58>
	}
 8003a7e:	bf00      	nop
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
	...

08003a88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a8e:	4b0c      	ldr	r3, [pc, #48]	; (8003ac0 <prvResetNextTaskUnblockTime+0x38>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d104      	bne.n	8003aa2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003a98:	4b0a      	ldr	r3, [pc, #40]	; (8003ac4 <prvResetNextTaskUnblockTime+0x3c>)
 8003a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003aa0:	e008      	b.n	8003ab4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003aa2:	4b07      	ldr	r3, [pc, #28]	; (8003ac0 <prvResetNextTaskUnblockTime+0x38>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	4a04      	ldr	r2, [pc, #16]	; (8003ac4 <prvResetNextTaskUnblockTime+0x3c>)
 8003ab2:	6013      	str	r3, [r2, #0]
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	20000b74 	.word	0x20000b74
 8003ac4:	20000bdc 	.word	0x20000bdc

08003ac8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003ace:	4b0b      	ldr	r3, [pc, #44]	; (8003afc <xTaskGetSchedulerState+0x34>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d102      	bne.n	8003adc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	607b      	str	r3, [r7, #4]
 8003ada:	e008      	b.n	8003aee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003adc:	4b08      	ldr	r3, [pc, #32]	; (8003b00 <xTaskGetSchedulerState+0x38>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d102      	bne.n	8003aea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	607b      	str	r3, [r7, #4]
 8003ae8:	e001      	b.n	8003aee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003aea:	2300      	movs	r3, #0
 8003aec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003aee:	687b      	ldr	r3, [r7, #4]
	}
 8003af0:	4618      	mov	r0, r3
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	20000bc8 	.word	0x20000bc8
 8003b00:	20000be4 	.word	0x20000be4

08003b04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003b10:	2300      	movs	r3, #0
 8003b12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d05a      	beq.n	8003bd0 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003b1a:	4b30      	ldr	r3, [pc, #192]	; (8003bdc <xTaskPriorityDisinherit+0xd8>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d00c      	beq.n	8003b3e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8003b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b28:	b672      	cpsid	i
 8003b2a:	f383 8811 	msr	BASEPRI, r3
 8003b2e:	f3bf 8f6f 	isb	sy
 8003b32:	f3bf 8f4f 	dsb	sy
 8003b36:	b662      	cpsie	i
 8003b38:	60fb      	str	r3, [r7, #12]
}
 8003b3a:	bf00      	nop
 8003b3c:	e7fe      	b.n	8003b3c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10c      	bne.n	8003b60 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8003b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4a:	b672      	cpsid	i
 8003b4c:	f383 8811 	msr	BASEPRI, r3
 8003b50:	f3bf 8f6f 	isb	sy
 8003b54:	f3bf 8f4f 	dsb	sy
 8003b58:	b662      	cpsie	i
 8003b5a:	60bb      	str	r3, [r7, #8]
}
 8003b5c:	bf00      	nop
 8003b5e:	e7fe      	b.n	8003b5e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b64:	1e5a      	subs	r2, r3, #1
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d02c      	beq.n	8003bd0 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d128      	bne.n	8003bd0 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	3304      	adds	r3, #4
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fe fb52 	bl	800222c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b94:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba0:	4b0f      	ldr	r3, [pc, #60]	; (8003be0 <xTaskPriorityDisinherit+0xdc>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d903      	bls.n	8003bb0 <xTaskPriorityDisinherit+0xac>
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bac:	4a0c      	ldr	r2, [pc, #48]	; (8003be0 <xTaskPriorityDisinherit+0xdc>)
 8003bae:	6013      	str	r3, [r2, #0]
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4413      	add	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4a09      	ldr	r2, [pc, #36]	; (8003be4 <xTaskPriorityDisinherit+0xe0>)
 8003bbe:	441a      	add	r2, r3
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4610      	mov	r0, r2
 8003bc8:	f7fe fad3 	bl	8002172 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003bd0:	697b      	ldr	r3, [r7, #20]
	}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3718      	adds	r7, #24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	200006e8 	.word	0x200006e8
 8003be0:	20000bc4 	.word	0x20000bc4
 8003be4:	200006ec 	.word	0x200006ec

08003be8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003bf2:	4b21      	ldr	r3, [pc, #132]	; (8003c78 <prvAddCurrentTaskToDelayedList+0x90>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bf8:	4b20      	ldr	r3, [pc, #128]	; (8003c7c <prvAddCurrentTaskToDelayedList+0x94>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fe fb14 	bl	800222c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c0a:	d10a      	bne.n	8003c22 <prvAddCurrentTaskToDelayedList+0x3a>
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d007      	beq.n	8003c22 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c12:	4b1a      	ldr	r3, [pc, #104]	; (8003c7c <prvAddCurrentTaskToDelayedList+0x94>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	3304      	adds	r3, #4
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4819      	ldr	r0, [pc, #100]	; (8003c80 <prvAddCurrentTaskToDelayedList+0x98>)
 8003c1c:	f7fe faa9 	bl	8002172 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003c20:	e026      	b.n	8003c70 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4413      	add	r3, r2
 8003c28:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c2a:	4b14      	ldr	r3, [pc, #80]	; (8003c7c <prvAddCurrentTaskToDelayedList+0x94>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d209      	bcs.n	8003c4e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c3a:	4b12      	ldr	r3, [pc, #72]	; (8003c84 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	4b0f      	ldr	r3, [pc, #60]	; (8003c7c <prvAddCurrentTaskToDelayedList+0x94>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	3304      	adds	r3, #4
 8003c44:	4619      	mov	r1, r3
 8003c46:	4610      	mov	r0, r2
 8003c48:	f7fe fab7 	bl	80021ba <vListInsert>
}
 8003c4c:	e010      	b.n	8003c70 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c4e:	4b0e      	ldr	r3, [pc, #56]	; (8003c88 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	4b0a      	ldr	r3, [pc, #40]	; (8003c7c <prvAddCurrentTaskToDelayedList+0x94>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	3304      	adds	r3, #4
 8003c58:	4619      	mov	r1, r3
 8003c5a:	4610      	mov	r0, r2
 8003c5c:	f7fe faad 	bl	80021ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003c60:	4b0a      	ldr	r3, [pc, #40]	; (8003c8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d202      	bcs.n	8003c70 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003c6a:	4a08      	ldr	r2, [pc, #32]	; (8003c8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	6013      	str	r3, [r2, #0]
}
 8003c70:	bf00      	nop
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	20000bc0 	.word	0x20000bc0
 8003c7c:	200006e8 	.word	0x200006e8
 8003c80:	20000ba8 	.word	0x20000ba8
 8003c84:	20000b78 	.word	0x20000b78
 8003c88:	20000b74 	.word	0x20000b74
 8003c8c:	20000bdc 	.word	0x20000bdc

08003c90 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b08a      	sub	sp, #40	; 0x28
 8003c94:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003c96:	2300      	movs	r3, #0
 8003c98:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003c9a:	f000 fb15 	bl	80042c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003c9e:	4b1d      	ldr	r3, [pc, #116]	; (8003d14 <xTimerCreateTimerTask+0x84>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d021      	beq.n	8003cea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003caa:	2300      	movs	r3, #0
 8003cac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003cae:	1d3a      	adds	r2, r7, #4
 8003cb0:	f107 0108 	add.w	r1, r7, #8
 8003cb4:	f107 030c 	add.w	r3, r7, #12
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7fe fa13 	bl	80020e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	9202      	str	r2, [sp, #8]
 8003cc6:	9301      	str	r3, [sp, #4]
 8003cc8:	2302      	movs	r3, #2
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	2300      	movs	r3, #0
 8003cce:	460a      	mov	r2, r1
 8003cd0:	4911      	ldr	r1, [pc, #68]	; (8003d18 <xTimerCreateTimerTask+0x88>)
 8003cd2:	4812      	ldr	r0, [pc, #72]	; (8003d1c <xTimerCreateTimerTask+0x8c>)
 8003cd4:	f7fe ffde 	bl	8002c94 <xTaskCreateStatic>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	4a11      	ldr	r2, [pc, #68]	; (8003d20 <xTimerCreateTimerTask+0x90>)
 8003cdc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003cde:	4b10      	ldr	r3, [pc, #64]	; (8003d20 <xTimerCreateTimerTask+0x90>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10c      	bne.n	8003d0a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8003cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf4:	b672      	cpsid	i
 8003cf6:	f383 8811 	msr	BASEPRI, r3
 8003cfa:	f3bf 8f6f 	isb	sy
 8003cfe:	f3bf 8f4f 	dsb	sy
 8003d02:	b662      	cpsie	i
 8003d04:	613b      	str	r3, [r7, #16]
}
 8003d06:	bf00      	nop
 8003d08:	e7fe      	b.n	8003d08 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8003d0a:	697b      	ldr	r3, [r7, #20]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3718      	adds	r7, #24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	20000c18 	.word	0x20000c18
 8003d18:	08004c2c 	.word	0x08004c2c
 8003d1c:	08003e61 	.word	0x08003e61
 8003d20:	20000c1c 	.word	0x20000c1c

08003d24 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b08a      	sub	sp, #40	; 0x28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
 8003d30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003d32:	2300      	movs	r3, #0
 8003d34:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10c      	bne.n	8003d56 <xTimerGenericCommand+0x32>
	__asm volatile
 8003d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d40:	b672      	cpsid	i
 8003d42:	f383 8811 	msr	BASEPRI, r3
 8003d46:	f3bf 8f6f 	isb	sy
 8003d4a:	f3bf 8f4f 	dsb	sy
 8003d4e:	b662      	cpsie	i
 8003d50:	623b      	str	r3, [r7, #32]
}
 8003d52:	bf00      	nop
 8003d54:	e7fe      	b.n	8003d54 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003d56:	4b1a      	ldr	r3, [pc, #104]	; (8003dc0 <xTimerGenericCommand+0x9c>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d02a      	beq.n	8003db4 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	2b05      	cmp	r3, #5
 8003d6e:	dc18      	bgt.n	8003da2 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003d70:	f7ff feaa 	bl	8003ac8 <xTaskGetSchedulerState>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d109      	bne.n	8003d8e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003d7a:	4b11      	ldr	r3, [pc, #68]	; (8003dc0 <xTimerGenericCommand+0x9c>)
 8003d7c:	6818      	ldr	r0, [r3, #0]
 8003d7e:	f107 0110 	add.w	r1, r7, #16
 8003d82:	2300      	movs	r3, #0
 8003d84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d86:	f7fe fb8b 	bl	80024a0 <xQueueGenericSend>
 8003d8a:	6278      	str	r0, [r7, #36]	; 0x24
 8003d8c:	e012      	b.n	8003db4 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003d8e:	4b0c      	ldr	r3, [pc, #48]	; (8003dc0 <xTimerGenericCommand+0x9c>)
 8003d90:	6818      	ldr	r0, [r3, #0]
 8003d92:	f107 0110 	add.w	r1, r7, #16
 8003d96:	2300      	movs	r3, #0
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f7fe fb81 	bl	80024a0 <xQueueGenericSend>
 8003d9e:	6278      	str	r0, [r7, #36]	; 0x24
 8003da0:	e008      	b.n	8003db4 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003da2:	4b07      	ldr	r3, [pc, #28]	; (8003dc0 <xTimerGenericCommand+0x9c>)
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	f107 0110 	add.w	r1, r7, #16
 8003daa:	2300      	movs	r3, #0
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	f7fe fc7d 	bl	80026ac <xQueueGenericSendFromISR>
 8003db2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3728      	adds	r7, #40	; 0x28
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	20000c18 	.word	0x20000c18

08003dc4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b088      	sub	sp, #32
 8003dc8:	af02      	add	r7, sp, #8
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dce:	4b23      	ldr	r3, [pc, #140]	; (8003e5c <prvProcessExpiredTimer+0x98>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	3304      	adds	r3, #4
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7fe fa25 	bl	800222c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d024      	beq.n	8003e3a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	699a      	ldr	r2, [r3, #24]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	18d1      	adds	r1, r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	6978      	ldr	r0, [r7, #20]
 8003dfe:	f000 f8d3 	bl	8003fa8 <prvInsertTimerInActiveList>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d021      	beq.n	8003e4c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003e08:	2300      	movs	r3, #0
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	2100      	movs	r1, #0
 8003e12:	6978      	ldr	r0, [r7, #20]
 8003e14:	f7ff ff86 	bl	8003d24 <xTimerGenericCommand>
 8003e18:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d115      	bne.n	8003e4c <prvProcessExpiredTimer+0x88>
	__asm volatile
 8003e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e24:	b672      	cpsid	i
 8003e26:	f383 8811 	msr	BASEPRI, r3
 8003e2a:	f3bf 8f6f 	isb	sy
 8003e2e:	f3bf 8f4f 	dsb	sy
 8003e32:	b662      	cpsie	i
 8003e34:	60fb      	str	r3, [r7, #12]
}
 8003e36:	bf00      	nop
 8003e38:	e7fe      	b.n	8003e38 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e40:	f023 0301 	bic.w	r3, r3, #1
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	6978      	ldr	r0, [r7, #20]
 8003e52:	4798      	blx	r3
}
 8003e54:	bf00      	nop
 8003e56:	3718      	adds	r7, #24
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	20000c10 	.word	0x20000c10

08003e60 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e68:	f107 0308 	add.w	r3, r7, #8
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 f857 	bl	8003f20 <prvGetNextExpireTime>
 8003e72:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	4619      	mov	r1, r3
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f000 f803 	bl	8003e84 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003e7e:	f000 f8d5 	bl	800402c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e82:	e7f1      	b.n	8003e68 <prvTimerTask+0x8>

08003e84 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003e8e:	f7ff fa27 	bl	80032e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e92:	f107 0308 	add.w	r3, r7, #8
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 f866 	bl	8003f68 <prvSampleTimeNow>
 8003e9c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d130      	bne.n	8003f06 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10a      	bne.n	8003ec0 <prvProcessTimerOrBlockTask+0x3c>
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d806      	bhi.n	8003ec0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003eb2:	f7ff fa23 	bl	80032fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003eb6:	68f9      	ldr	r1, [r7, #12]
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f7ff ff83 	bl	8003dc4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003ebe:	e024      	b.n	8003f0a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d008      	beq.n	8003ed8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003ec6:	4b13      	ldr	r3, [pc, #76]	; (8003f14 <prvProcessTimerOrBlockTask+0x90>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d101      	bne.n	8003ed4 <prvProcessTimerOrBlockTask+0x50>
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e000      	b.n	8003ed6 <prvProcessTimerOrBlockTask+0x52>
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003ed8:	4b0f      	ldr	r3, [pc, #60]	; (8003f18 <prvProcessTimerOrBlockTask+0x94>)
 8003eda:	6818      	ldr	r0, [r3, #0]
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	f7fe fea1 	bl	8002c2c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003eea:	f7ff fa07 	bl	80032fc <xTaskResumeAll>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d10a      	bne.n	8003f0a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003ef4:	4b09      	ldr	r3, [pc, #36]	; (8003f1c <prvProcessTimerOrBlockTask+0x98>)
 8003ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	f3bf 8f4f 	dsb	sy
 8003f00:	f3bf 8f6f 	isb	sy
}
 8003f04:	e001      	b.n	8003f0a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003f06:	f7ff f9f9 	bl	80032fc <xTaskResumeAll>
}
 8003f0a:	bf00      	nop
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	20000c14 	.word	0x20000c14
 8003f18:	20000c18 	.word	0x20000c18
 8003f1c:	e000ed04 	.word	0xe000ed04

08003f20 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003f28:	4b0e      	ldr	r3, [pc, #56]	; (8003f64 <prvGetNextExpireTime+0x44>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <prvGetNextExpireTime+0x16>
 8003f32:	2201      	movs	r2, #1
 8003f34:	e000      	b.n	8003f38 <prvGetNextExpireTime+0x18>
 8003f36:	2200      	movs	r2, #0
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d105      	bne.n	8003f50 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f44:	4b07      	ldr	r3, [pc, #28]	; (8003f64 <prvGetNextExpireTime+0x44>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	60fb      	str	r3, [r7, #12]
 8003f4e:	e001      	b.n	8003f54 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003f50:	2300      	movs	r3, #0
 8003f52:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003f54:	68fb      	ldr	r3, [r7, #12]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	20000c10 	.word	0x20000c10

08003f68 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003f70:	f7ff fa64 	bl	800343c <xTaskGetTickCount>
 8003f74:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003f76:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <prvSampleTimeNow+0x3c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d205      	bcs.n	8003f8c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003f80:	f000 f93c 	bl	80041fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	e002      	b.n	8003f92 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003f92:	4a04      	ldr	r2, [pc, #16]	; (8003fa4 <prvSampleTimeNow+0x3c>)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003f98:	68fb      	ldr	r3, [r7, #12]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	20000c20 	.word	0x20000c20

08003fa8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
 8003fb4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	68ba      	ldr	r2, [r7, #8]
 8003fbe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d812      	bhi.n	8003ff4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	1ad2      	subs	r2, r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d302      	bcc.n	8003fe2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	617b      	str	r3, [r7, #20]
 8003fe0:	e01b      	b.n	800401a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003fe2:	4b10      	ldr	r3, [pc, #64]	; (8004024 <prvInsertTimerInActiveList+0x7c>)
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	3304      	adds	r3, #4
 8003fea:	4619      	mov	r1, r3
 8003fec:	4610      	mov	r0, r2
 8003fee:	f7fe f8e4 	bl	80021ba <vListInsert>
 8003ff2:	e012      	b.n	800401a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d206      	bcs.n	800400a <prvInsertTimerInActiveList+0x62>
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	429a      	cmp	r2, r3
 8004002:	d302      	bcc.n	800400a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004004:	2301      	movs	r3, #1
 8004006:	617b      	str	r3, [r7, #20]
 8004008:	e007      	b.n	800401a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800400a:	4b07      	ldr	r3, [pc, #28]	; (8004028 <prvInsertTimerInActiveList+0x80>)
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	3304      	adds	r3, #4
 8004012:	4619      	mov	r1, r3
 8004014:	4610      	mov	r0, r2
 8004016:	f7fe f8d0 	bl	80021ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 800401a:	697b      	ldr	r3, [r7, #20]
}
 800401c:	4618      	mov	r0, r3
 800401e:	3718      	adds	r7, #24
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	20000c14 	.word	0x20000c14
 8004028:	20000c10 	.word	0x20000c10

0800402c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b08e      	sub	sp, #56	; 0x38
 8004030:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004032:	e0d0      	b.n	80041d6 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	da1a      	bge.n	8004070 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800403a:	1d3b      	adds	r3, r7, #4
 800403c:	3304      	adds	r3, #4
 800403e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10c      	bne.n	8004060 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8004046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404a:	b672      	cpsid	i
 800404c:	f383 8811 	msr	BASEPRI, r3
 8004050:	f3bf 8f6f 	isb	sy
 8004054:	f3bf 8f4f 	dsb	sy
 8004058:	b662      	cpsie	i
 800405a:	61fb      	str	r3, [r7, #28]
}
 800405c:	bf00      	nop
 800405e:	e7fe      	b.n	800405e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004066:	6850      	ldr	r0, [r2, #4]
 8004068:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800406a:	6892      	ldr	r2, [r2, #8]
 800406c:	4611      	mov	r1, r2
 800406e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	f2c0 80ae 	blt.w	80041d4 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800407c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d004      	beq.n	800408e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004086:	3304      	adds	r3, #4
 8004088:	4618      	mov	r0, r3
 800408a:	f7fe f8cf 	bl	800222c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800408e:	463b      	mov	r3, r7
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff ff69 	bl	8003f68 <prvSampleTimeNow>
 8004096:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b09      	cmp	r3, #9
 800409c:	f200 809b 	bhi.w	80041d6 <prvProcessReceivedCommands+0x1aa>
 80040a0:	a201      	add	r2, pc, #4	; (adr r2, 80040a8 <prvProcessReceivedCommands+0x7c>)
 80040a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a6:	bf00      	nop
 80040a8:	080040d1 	.word	0x080040d1
 80040ac:	080040d1 	.word	0x080040d1
 80040b0:	080040d1 	.word	0x080040d1
 80040b4:	08004149 	.word	0x08004149
 80040b8:	0800415d 	.word	0x0800415d
 80040bc:	080041ab 	.word	0x080041ab
 80040c0:	080040d1 	.word	0x080040d1
 80040c4:	080040d1 	.word	0x080040d1
 80040c8:	08004149 	.word	0x08004149
 80040cc:	0800415d 	.word	0x0800415d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80040d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040d6:	f043 0301 	orr.w	r3, r3, #1
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	18d1      	adds	r1, r2, r3
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040f0:	f7ff ff5a 	bl	8003fa8 <prvInsertTimerInActiveList>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d06d      	beq.n	80041d6 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004100:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004104:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004108:	f003 0304 	and.w	r3, r3, #4
 800410c:	2b00      	cmp	r3, #0
 800410e:	d062      	beq.n	80041d6 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	441a      	add	r2, r3
 8004118:	2300      	movs	r3, #0
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	2300      	movs	r3, #0
 800411e:	2100      	movs	r1, #0
 8004120:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004122:	f7ff fdff 	bl	8003d24 <xTimerGenericCommand>
 8004126:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004128:	6a3b      	ldr	r3, [r7, #32]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d153      	bne.n	80041d6 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800412e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004132:	b672      	cpsid	i
 8004134:	f383 8811 	msr	BASEPRI, r3
 8004138:	f3bf 8f6f 	isb	sy
 800413c:	f3bf 8f4f 	dsb	sy
 8004140:	b662      	cpsie	i
 8004142:	61bb      	str	r3, [r7, #24]
}
 8004144:	bf00      	nop
 8004146:	e7fe      	b.n	8004146 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800414e:	f023 0301 	bic.w	r3, r3, #1
 8004152:	b2da      	uxtb	r2, r3
 8004154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004156:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800415a:	e03c      	b.n	80041d6 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800415c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004162:	f043 0301 	orr.w	r3, r3, #1
 8004166:	b2da      	uxtb	r2, r3
 8004168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800416e:	68ba      	ldr	r2, [r7, #8]
 8004170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004172:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10c      	bne.n	8004196 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800417c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004180:	b672      	cpsid	i
 8004182:	f383 8811 	msr	BASEPRI, r3
 8004186:	f3bf 8f6f 	isb	sy
 800418a:	f3bf 8f4f 	dsb	sy
 800418e:	b662      	cpsie	i
 8004190:	617b      	str	r3, [r7, #20]
}
 8004192:	bf00      	nop
 8004194:	e7fe      	b.n	8004194 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004198:	699a      	ldr	r2, [r3, #24]
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	18d1      	adds	r1, r2, r3
 800419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041a4:	f7ff ff00 	bl	8003fa8 <prvInsertTimerInActiveList>
					break;
 80041a8:	e015      	b.n	80041d6 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80041aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d103      	bne.n	80041c0 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80041b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041ba:	f000 fbc5 	bl	8004948 <vPortFree>
 80041be:	e00a      	b.n	80041d6 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80041c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041c6:	f023 0301 	bic.w	r3, r3, #1
 80041ca:	b2da      	uxtb	r2, r3
 80041cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80041d2:	e000      	b.n	80041d6 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80041d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80041d6:	4b08      	ldr	r3, [pc, #32]	; (80041f8 <prvProcessReceivedCommands+0x1cc>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	1d39      	adds	r1, r7, #4
 80041dc:	2200      	movs	r2, #0
 80041de:	4618      	mov	r0, r3
 80041e0:	f7fe fb04 	bl	80027ec <xQueueReceive>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f47f af24 	bne.w	8004034 <prvProcessReceivedCommands+0x8>
	}
}
 80041ec:	bf00      	nop
 80041ee:	bf00      	nop
 80041f0:	3730      	adds	r7, #48	; 0x30
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	20000c18 	.word	0x20000c18

080041fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b088      	sub	sp, #32
 8004200:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004202:	e04a      	b.n	800429a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004204:	4b2e      	ldr	r3, [pc, #184]	; (80042c0 <prvSwitchTimerLists+0xc4>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800420e:	4b2c      	ldr	r3, [pc, #176]	; (80042c0 <prvSwitchTimerLists+0xc4>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	3304      	adds	r3, #4
 800421c:	4618      	mov	r0, r3
 800421e:	f7fe f805 	bl	800222c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b00      	cmp	r3, #0
 8004236:	d030      	beq.n	800429a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	4413      	add	r3, r2
 8004240:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	429a      	cmp	r2, r3
 8004248:	d90e      	bls.n	8004268 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	68ba      	ldr	r2, [r7, #8]
 800424e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004256:	4b1a      	ldr	r3, [pc, #104]	; (80042c0 <prvSwitchTimerLists+0xc4>)
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	3304      	adds	r3, #4
 800425e:	4619      	mov	r1, r3
 8004260:	4610      	mov	r0, r2
 8004262:	f7fd ffaa 	bl	80021ba <vListInsert>
 8004266:	e018      	b.n	800429a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004268:	2300      	movs	r3, #0
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	2300      	movs	r3, #0
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	2100      	movs	r1, #0
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f7ff fd56 	bl	8003d24 <xTimerGenericCommand>
 8004278:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10c      	bne.n	800429a <prvSwitchTimerLists+0x9e>
	__asm volatile
 8004280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004284:	b672      	cpsid	i
 8004286:	f383 8811 	msr	BASEPRI, r3
 800428a:	f3bf 8f6f 	isb	sy
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	b662      	cpsie	i
 8004294:	603b      	str	r3, [r7, #0]
}
 8004296:	bf00      	nop
 8004298:	e7fe      	b.n	8004298 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800429a:	4b09      	ldr	r3, [pc, #36]	; (80042c0 <prvSwitchTimerLists+0xc4>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1af      	bne.n	8004204 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80042a4:	4b06      	ldr	r3, [pc, #24]	; (80042c0 <prvSwitchTimerLists+0xc4>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80042aa:	4b06      	ldr	r3, [pc, #24]	; (80042c4 <prvSwitchTimerLists+0xc8>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a04      	ldr	r2, [pc, #16]	; (80042c0 <prvSwitchTimerLists+0xc4>)
 80042b0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80042b2:	4a04      	ldr	r2, [pc, #16]	; (80042c4 <prvSwitchTimerLists+0xc8>)
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	6013      	str	r3, [r2, #0]
}
 80042b8:	bf00      	nop
 80042ba:	3718      	adds	r7, #24
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	20000c10 	.word	0x20000c10
 80042c4:	20000c14 	.word	0x20000c14

080042c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80042ce:	f000 f945 	bl	800455c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80042d2:	4b15      	ldr	r3, [pc, #84]	; (8004328 <prvCheckForValidListAndQueue+0x60>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d120      	bne.n	800431c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80042da:	4814      	ldr	r0, [pc, #80]	; (800432c <prvCheckForValidListAndQueue+0x64>)
 80042dc:	f7fd ff1c 	bl	8002118 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80042e0:	4813      	ldr	r0, [pc, #76]	; (8004330 <prvCheckForValidListAndQueue+0x68>)
 80042e2:	f7fd ff19 	bl	8002118 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80042e6:	4b13      	ldr	r3, [pc, #76]	; (8004334 <prvCheckForValidListAndQueue+0x6c>)
 80042e8:	4a10      	ldr	r2, [pc, #64]	; (800432c <prvCheckForValidListAndQueue+0x64>)
 80042ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80042ec:	4b12      	ldr	r3, [pc, #72]	; (8004338 <prvCheckForValidListAndQueue+0x70>)
 80042ee:	4a10      	ldr	r2, [pc, #64]	; (8004330 <prvCheckForValidListAndQueue+0x68>)
 80042f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80042f2:	2300      	movs	r3, #0
 80042f4:	9300      	str	r3, [sp, #0]
 80042f6:	4b11      	ldr	r3, [pc, #68]	; (800433c <prvCheckForValidListAndQueue+0x74>)
 80042f8:	4a11      	ldr	r2, [pc, #68]	; (8004340 <prvCheckForValidListAndQueue+0x78>)
 80042fa:	2110      	movs	r1, #16
 80042fc:	200a      	movs	r0, #10
 80042fe:	f7fe f829 	bl	8002354 <xQueueGenericCreateStatic>
 8004302:	4603      	mov	r3, r0
 8004304:	4a08      	ldr	r2, [pc, #32]	; (8004328 <prvCheckForValidListAndQueue+0x60>)
 8004306:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004308:	4b07      	ldr	r3, [pc, #28]	; (8004328 <prvCheckForValidListAndQueue+0x60>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d005      	beq.n	800431c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004310:	4b05      	ldr	r3, [pc, #20]	; (8004328 <prvCheckForValidListAndQueue+0x60>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	490b      	ldr	r1, [pc, #44]	; (8004344 <prvCheckForValidListAndQueue+0x7c>)
 8004316:	4618      	mov	r0, r3
 8004318:	f7fe fc5e 	bl	8002bd8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800431c:	f000 f952 	bl	80045c4 <vPortExitCritical>
}
 8004320:	bf00      	nop
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	20000c18 	.word	0x20000c18
 800432c:	20000be8 	.word	0x20000be8
 8004330:	20000bfc 	.word	0x20000bfc
 8004334:	20000c10 	.word	0x20000c10
 8004338:	20000c14 	.word	0x20000c14
 800433c:	20000cc4 	.word	0x20000cc4
 8004340:	20000c24 	.word	0x20000c24
 8004344:	08004c34 	.word	0x08004c34

08004348 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	3b04      	subs	r3, #4
 8004358:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004360:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	3b04      	subs	r3, #4
 8004366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	f023 0201 	bic.w	r2, r3, #1
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	3b04      	subs	r3, #4
 8004376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004378:	4a0c      	ldr	r2, [pc, #48]	; (80043ac <pxPortInitialiseStack+0x64>)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	3b14      	subs	r3, #20
 8004382:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	3b04      	subs	r3, #4
 800438e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f06f 0202 	mvn.w	r2, #2
 8004396:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	3b20      	subs	r3, #32
 800439c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800439e:	68fb      	ldr	r3, [r7, #12]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3714      	adds	r7, #20
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr
 80043ac:	080043b1 	.word	0x080043b1

080043b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80043b6:	2300      	movs	r3, #0
 80043b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80043ba:	4b14      	ldr	r3, [pc, #80]	; (800440c <prvTaskExitError+0x5c>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c2:	d00c      	beq.n	80043de <prvTaskExitError+0x2e>
	__asm volatile
 80043c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c8:	b672      	cpsid	i
 80043ca:	f383 8811 	msr	BASEPRI, r3
 80043ce:	f3bf 8f6f 	isb	sy
 80043d2:	f3bf 8f4f 	dsb	sy
 80043d6:	b662      	cpsie	i
 80043d8:	60fb      	str	r3, [r7, #12]
}
 80043da:	bf00      	nop
 80043dc:	e7fe      	b.n	80043dc <prvTaskExitError+0x2c>
	__asm volatile
 80043de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e2:	b672      	cpsid	i
 80043e4:	f383 8811 	msr	BASEPRI, r3
 80043e8:	f3bf 8f6f 	isb	sy
 80043ec:	f3bf 8f4f 	dsb	sy
 80043f0:	b662      	cpsie	i
 80043f2:	60bb      	str	r3, [r7, #8]
}
 80043f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80043f6:	bf00      	nop
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0fc      	beq.n	80043f8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80043fe:	bf00      	nop
 8004400:	bf00      	nop
 8004402:	3714      	adds	r7, #20
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr
 800440c:	2000000c 	.word	0x2000000c

08004410 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004410:	4b07      	ldr	r3, [pc, #28]	; (8004430 <pxCurrentTCBConst2>)
 8004412:	6819      	ldr	r1, [r3, #0]
 8004414:	6808      	ldr	r0, [r1, #0]
 8004416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800441a:	f380 8809 	msr	PSP, r0
 800441e:	f3bf 8f6f 	isb	sy
 8004422:	f04f 0000 	mov.w	r0, #0
 8004426:	f380 8811 	msr	BASEPRI, r0
 800442a:	4770      	bx	lr
 800442c:	f3af 8000 	nop.w

08004430 <pxCurrentTCBConst2>:
 8004430:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004434:	bf00      	nop
 8004436:	bf00      	nop

08004438 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004438:	4808      	ldr	r0, [pc, #32]	; (800445c <prvPortStartFirstTask+0x24>)
 800443a:	6800      	ldr	r0, [r0, #0]
 800443c:	6800      	ldr	r0, [r0, #0]
 800443e:	f380 8808 	msr	MSP, r0
 8004442:	f04f 0000 	mov.w	r0, #0
 8004446:	f380 8814 	msr	CONTROL, r0
 800444a:	b662      	cpsie	i
 800444c:	b661      	cpsie	f
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	df00      	svc	0
 8004458:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800445a:	bf00      	nop
 800445c:	e000ed08 	.word	0xe000ed08

08004460 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004466:	4b37      	ldr	r3, [pc, #220]	; (8004544 <xPortStartScheduler+0xe4>)
 8004468:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	b2db      	uxtb	r3, r3
 8004470:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	22ff      	movs	r2, #255	; 0xff
 8004476:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	b2db      	uxtb	r3, r3
 800447e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004480:	78fb      	ldrb	r3, [r7, #3]
 8004482:	b2db      	uxtb	r3, r3
 8004484:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004488:	b2da      	uxtb	r2, r3
 800448a:	4b2f      	ldr	r3, [pc, #188]	; (8004548 <xPortStartScheduler+0xe8>)
 800448c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800448e:	4b2f      	ldr	r3, [pc, #188]	; (800454c <xPortStartScheduler+0xec>)
 8004490:	2207      	movs	r2, #7
 8004492:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004494:	e009      	b.n	80044aa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004496:	4b2d      	ldr	r3, [pc, #180]	; (800454c <xPortStartScheduler+0xec>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	3b01      	subs	r3, #1
 800449c:	4a2b      	ldr	r2, [pc, #172]	; (800454c <xPortStartScheduler+0xec>)
 800449e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80044a0:	78fb      	ldrb	r3, [r7, #3]
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044aa:	78fb      	ldrb	r3, [r7, #3]
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b2:	2b80      	cmp	r3, #128	; 0x80
 80044b4:	d0ef      	beq.n	8004496 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80044b6:	4b25      	ldr	r3, [pc, #148]	; (800454c <xPortStartScheduler+0xec>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f1c3 0307 	rsb	r3, r3, #7
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d00c      	beq.n	80044dc <xPortStartScheduler+0x7c>
	__asm volatile
 80044c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c6:	b672      	cpsid	i
 80044c8:	f383 8811 	msr	BASEPRI, r3
 80044cc:	f3bf 8f6f 	isb	sy
 80044d0:	f3bf 8f4f 	dsb	sy
 80044d4:	b662      	cpsie	i
 80044d6:	60bb      	str	r3, [r7, #8]
}
 80044d8:	bf00      	nop
 80044da:	e7fe      	b.n	80044da <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80044dc:	4b1b      	ldr	r3, [pc, #108]	; (800454c <xPortStartScheduler+0xec>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	021b      	lsls	r3, r3, #8
 80044e2:	4a1a      	ldr	r2, [pc, #104]	; (800454c <xPortStartScheduler+0xec>)
 80044e4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80044e6:	4b19      	ldr	r3, [pc, #100]	; (800454c <xPortStartScheduler+0xec>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044ee:	4a17      	ldr	r2, [pc, #92]	; (800454c <xPortStartScheduler+0xec>)
 80044f0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80044fa:	4b15      	ldr	r3, [pc, #84]	; (8004550 <xPortStartScheduler+0xf0>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a14      	ldr	r2, [pc, #80]	; (8004550 <xPortStartScheduler+0xf0>)
 8004500:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004504:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004506:	4b12      	ldr	r3, [pc, #72]	; (8004550 <xPortStartScheduler+0xf0>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a11      	ldr	r2, [pc, #68]	; (8004550 <xPortStartScheduler+0xf0>)
 800450c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004510:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004512:	f000 f8dd 	bl	80046d0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004516:	4b0f      	ldr	r3, [pc, #60]	; (8004554 <xPortStartScheduler+0xf4>)
 8004518:	2200      	movs	r2, #0
 800451a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800451c:	f000 f8fc 	bl	8004718 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004520:	4b0d      	ldr	r3, [pc, #52]	; (8004558 <xPortStartScheduler+0xf8>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a0c      	ldr	r2, [pc, #48]	; (8004558 <xPortStartScheduler+0xf8>)
 8004526:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800452a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800452c:	f7ff ff84 	bl	8004438 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004530:	f7ff f850 	bl	80035d4 <vTaskSwitchContext>
	prvTaskExitError();
 8004534:	f7ff ff3c 	bl	80043b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	e000e400 	.word	0xe000e400
 8004548:	20000d14 	.word	0x20000d14
 800454c:	20000d18 	.word	0x20000d18
 8004550:	e000ed20 	.word	0xe000ed20
 8004554:	2000000c 	.word	0x2000000c
 8004558:	e000ef34 	.word	0xe000ef34

0800455c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
	__asm volatile
 8004562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004566:	b672      	cpsid	i
 8004568:	f383 8811 	msr	BASEPRI, r3
 800456c:	f3bf 8f6f 	isb	sy
 8004570:	f3bf 8f4f 	dsb	sy
 8004574:	b662      	cpsie	i
 8004576:	607b      	str	r3, [r7, #4]
}
 8004578:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800457a:	4b10      	ldr	r3, [pc, #64]	; (80045bc <vPortEnterCritical+0x60>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	3301      	adds	r3, #1
 8004580:	4a0e      	ldr	r2, [pc, #56]	; (80045bc <vPortEnterCritical+0x60>)
 8004582:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004584:	4b0d      	ldr	r3, [pc, #52]	; (80045bc <vPortEnterCritical+0x60>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d111      	bne.n	80045b0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800458c:	4b0c      	ldr	r3, [pc, #48]	; (80045c0 <vPortEnterCritical+0x64>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00c      	beq.n	80045b0 <vPortEnterCritical+0x54>
	__asm volatile
 8004596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459a:	b672      	cpsid	i
 800459c:	f383 8811 	msr	BASEPRI, r3
 80045a0:	f3bf 8f6f 	isb	sy
 80045a4:	f3bf 8f4f 	dsb	sy
 80045a8:	b662      	cpsie	i
 80045aa:	603b      	str	r3, [r7, #0]
}
 80045ac:	bf00      	nop
 80045ae:	e7fe      	b.n	80045ae <vPortEnterCritical+0x52>
	}
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr
 80045bc:	2000000c 	.word	0x2000000c
 80045c0:	e000ed04 	.word	0xe000ed04

080045c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80045ca:	4b13      	ldr	r3, [pc, #76]	; (8004618 <vPortExitCritical+0x54>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10c      	bne.n	80045ec <vPortExitCritical+0x28>
	__asm volatile
 80045d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d6:	b672      	cpsid	i
 80045d8:	f383 8811 	msr	BASEPRI, r3
 80045dc:	f3bf 8f6f 	isb	sy
 80045e0:	f3bf 8f4f 	dsb	sy
 80045e4:	b662      	cpsie	i
 80045e6:	607b      	str	r3, [r7, #4]
}
 80045e8:	bf00      	nop
 80045ea:	e7fe      	b.n	80045ea <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80045ec:	4b0a      	ldr	r3, [pc, #40]	; (8004618 <vPortExitCritical+0x54>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	3b01      	subs	r3, #1
 80045f2:	4a09      	ldr	r2, [pc, #36]	; (8004618 <vPortExitCritical+0x54>)
 80045f4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80045f6:	4b08      	ldr	r3, [pc, #32]	; (8004618 <vPortExitCritical+0x54>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d105      	bne.n	800460a <vPortExitCritical+0x46>
 80045fe:	2300      	movs	r3, #0
 8004600:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	f383 8811 	msr	BASEPRI, r3
}
 8004608:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800460a:	bf00      	nop
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	2000000c 	.word	0x2000000c
 800461c:	00000000 	.word	0x00000000

08004620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004620:	f3ef 8009 	mrs	r0, PSP
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	4b15      	ldr	r3, [pc, #84]	; (8004680 <pxCurrentTCBConst>)
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	f01e 0f10 	tst.w	lr, #16
 8004630:	bf08      	it	eq
 8004632:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004636:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800463a:	6010      	str	r0, [r2, #0]
 800463c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004640:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004644:	b672      	cpsid	i
 8004646:	f380 8811 	msr	BASEPRI, r0
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	f3bf 8f6f 	isb	sy
 8004652:	b662      	cpsie	i
 8004654:	f7fe ffbe 	bl	80035d4 <vTaskSwitchContext>
 8004658:	f04f 0000 	mov.w	r0, #0
 800465c:	f380 8811 	msr	BASEPRI, r0
 8004660:	bc09      	pop	{r0, r3}
 8004662:	6819      	ldr	r1, [r3, #0]
 8004664:	6808      	ldr	r0, [r1, #0]
 8004666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800466a:	f01e 0f10 	tst.w	lr, #16
 800466e:	bf08      	it	eq
 8004670:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004674:	f380 8809 	msr	PSP, r0
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop

08004680 <pxCurrentTCBConst>:
 8004680:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004684:	bf00      	nop
 8004686:	bf00      	nop

08004688 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
	__asm volatile
 800468e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004692:	b672      	cpsid	i
 8004694:	f383 8811 	msr	BASEPRI, r3
 8004698:	f3bf 8f6f 	isb	sy
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	b662      	cpsie	i
 80046a2:	607b      	str	r3, [r7, #4]
}
 80046a4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80046a6:	f7fe fed9 	bl	800345c <xTaskIncrementTick>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d003      	beq.n	80046b8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80046b0:	4b06      	ldr	r3, [pc, #24]	; (80046cc <SysTick_Handler+0x44>)
 80046b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	2300      	movs	r3, #0
 80046ba:	603b      	str	r3, [r7, #0]
	__asm volatile
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	f383 8811 	msr	BASEPRI, r3
}
 80046c2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80046c4:	bf00      	nop
 80046c6:	3708      	adds	r7, #8
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	e000ed04 	.word	0xe000ed04

080046d0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80046d4:	4b0b      	ldr	r3, [pc, #44]	; (8004704 <vPortSetupTimerInterrupt+0x34>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80046da:	4b0b      	ldr	r3, [pc, #44]	; (8004708 <vPortSetupTimerInterrupt+0x38>)
 80046dc:	2200      	movs	r2, #0
 80046de:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80046e0:	4b0a      	ldr	r3, [pc, #40]	; (800470c <vPortSetupTimerInterrupt+0x3c>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a0a      	ldr	r2, [pc, #40]	; (8004710 <vPortSetupTimerInterrupt+0x40>)
 80046e6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ea:	099b      	lsrs	r3, r3, #6
 80046ec:	4a09      	ldr	r2, [pc, #36]	; (8004714 <vPortSetupTimerInterrupt+0x44>)
 80046ee:	3b01      	subs	r3, #1
 80046f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80046f2:	4b04      	ldr	r3, [pc, #16]	; (8004704 <vPortSetupTimerInterrupt+0x34>)
 80046f4:	2207      	movs	r2, #7
 80046f6:	601a      	str	r2, [r3, #0]
}
 80046f8:	bf00      	nop
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	e000e010 	.word	0xe000e010
 8004708:	e000e018 	.word	0xe000e018
 800470c:	20000000 	.word	0x20000000
 8004710:	10624dd3 	.word	0x10624dd3
 8004714:	e000e014 	.word	0xe000e014

08004718 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004718:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004728 <vPortEnableVFP+0x10>
 800471c:	6801      	ldr	r1, [r0, #0]
 800471e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004722:	6001      	str	r1, [r0, #0]
 8004724:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004726:	bf00      	nop
 8004728:	e000ed88 	.word	0xe000ed88

0800472c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004732:	f3ef 8305 	mrs	r3, IPSR
 8004736:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2b0f      	cmp	r3, #15
 800473c:	d916      	bls.n	800476c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800473e:	4a19      	ldr	r2, [pc, #100]	; (80047a4 <vPortValidateInterruptPriority+0x78>)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	4413      	add	r3, r2
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004748:	4b17      	ldr	r3, [pc, #92]	; (80047a8 <vPortValidateInterruptPriority+0x7c>)
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	7afa      	ldrb	r2, [r7, #11]
 800474e:	429a      	cmp	r2, r3
 8004750:	d20c      	bcs.n	800476c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8004752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004756:	b672      	cpsid	i
 8004758:	f383 8811 	msr	BASEPRI, r3
 800475c:	f3bf 8f6f 	isb	sy
 8004760:	f3bf 8f4f 	dsb	sy
 8004764:	b662      	cpsie	i
 8004766:	607b      	str	r3, [r7, #4]
}
 8004768:	bf00      	nop
 800476a:	e7fe      	b.n	800476a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800476c:	4b0f      	ldr	r3, [pc, #60]	; (80047ac <vPortValidateInterruptPriority+0x80>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004774:	4b0e      	ldr	r3, [pc, #56]	; (80047b0 <vPortValidateInterruptPriority+0x84>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	429a      	cmp	r2, r3
 800477a:	d90c      	bls.n	8004796 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800477c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004780:	b672      	cpsid	i
 8004782:	f383 8811 	msr	BASEPRI, r3
 8004786:	f3bf 8f6f 	isb	sy
 800478a:	f3bf 8f4f 	dsb	sy
 800478e:	b662      	cpsie	i
 8004790:	603b      	str	r3, [r7, #0]
}
 8004792:	bf00      	nop
 8004794:	e7fe      	b.n	8004794 <vPortValidateInterruptPriority+0x68>
	}
 8004796:	bf00      	nop
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	e000e3f0 	.word	0xe000e3f0
 80047a8:	20000d14 	.word	0x20000d14
 80047ac:	e000ed0c 	.word	0xe000ed0c
 80047b0:	20000d18 	.word	0x20000d18

080047b4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b08a      	sub	sp, #40	; 0x28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80047bc:	2300      	movs	r3, #0
 80047be:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80047c0:	f7fe fd8e 	bl	80032e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80047c4:	4b5b      	ldr	r3, [pc, #364]	; (8004934 <pvPortMalloc+0x180>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80047cc:	f000 f91a 	bl	8004a04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80047d0:	4b59      	ldr	r3, [pc, #356]	; (8004938 <pvPortMalloc+0x184>)
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4013      	ands	r3, r2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f040 8092 	bne.w	8004902 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d01f      	beq.n	8004824 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80047e4:	2208      	movs	r2, #8
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4413      	add	r3, r2
 80047ea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d016      	beq.n	8004824 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f023 0307 	bic.w	r3, r3, #7
 80047fc:	3308      	adds	r3, #8
 80047fe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f003 0307 	and.w	r3, r3, #7
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00c      	beq.n	8004824 <pvPortMalloc+0x70>
	__asm volatile
 800480a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480e:	b672      	cpsid	i
 8004810:	f383 8811 	msr	BASEPRI, r3
 8004814:	f3bf 8f6f 	isb	sy
 8004818:	f3bf 8f4f 	dsb	sy
 800481c:	b662      	cpsie	i
 800481e:	617b      	str	r3, [r7, #20]
}
 8004820:	bf00      	nop
 8004822:	e7fe      	b.n	8004822 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d06b      	beq.n	8004902 <pvPortMalloc+0x14e>
 800482a:	4b44      	ldr	r3, [pc, #272]	; (800493c <pvPortMalloc+0x188>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	429a      	cmp	r2, r3
 8004832:	d866      	bhi.n	8004902 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004834:	4b42      	ldr	r3, [pc, #264]	; (8004940 <pvPortMalloc+0x18c>)
 8004836:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004838:	4b41      	ldr	r3, [pc, #260]	; (8004940 <pvPortMalloc+0x18c>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800483e:	e004      	b.n	800484a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	429a      	cmp	r2, r3
 8004852:	d903      	bls.n	800485c <pvPortMalloc+0xa8>
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1f1      	bne.n	8004840 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800485c:	4b35      	ldr	r3, [pc, #212]	; (8004934 <pvPortMalloc+0x180>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004862:	429a      	cmp	r2, r3
 8004864:	d04d      	beq.n	8004902 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004866:	6a3b      	ldr	r3, [r7, #32]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2208      	movs	r2, #8
 800486c:	4413      	add	r3, r2
 800486e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	6a3b      	ldr	r3, [r7, #32]
 8004876:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	685a      	ldr	r2, [r3, #4]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	1ad2      	subs	r2, r2, r3
 8004880:	2308      	movs	r3, #8
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	429a      	cmp	r2, r3
 8004886:	d921      	bls.n	80048cc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4413      	add	r3, r2
 800488e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	f003 0307 	and.w	r3, r3, #7
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00c      	beq.n	80048b4 <pvPortMalloc+0x100>
	__asm volatile
 800489a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489e:	b672      	cpsid	i
 80048a0:	f383 8811 	msr	BASEPRI, r3
 80048a4:	f3bf 8f6f 	isb	sy
 80048a8:	f3bf 8f4f 	dsb	sy
 80048ac:	b662      	cpsie	i
 80048ae:	613b      	str	r3, [r7, #16]
}
 80048b0:	bf00      	nop
 80048b2:	e7fe      	b.n	80048b2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	1ad2      	subs	r2, r2, r3
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80048c6:	69b8      	ldr	r0, [r7, #24]
 80048c8:	f000 f8fe 	bl	8004ac8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80048cc:	4b1b      	ldr	r3, [pc, #108]	; (800493c <pvPortMalloc+0x188>)
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	4a19      	ldr	r2, [pc, #100]	; (800493c <pvPortMalloc+0x188>)
 80048d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80048da:	4b18      	ldr	r3, [pc, #96]	; (800493c <pvPortMalloc+0x188>)
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	4b19      	ldr	r3, [pc, #100]	; (8004944 <pvPortMalloc+0x190>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d203      	bcs.n	80048ee <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80048e6:	4b15      	ldr	r3, [pc, #84]	; (800493c <pvPortMalloc+0x188>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a16      	ldr	r2, [pc, #88]	; (8004944 <pvPortMalloc+0x190>)
 80048ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	685a      	ldr	r2, [r3, #4]
 80048f2:	4b11      	ldr	r3, [pc, #68]	; (8004938 <pvPortMalloc+0x184>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	431a      	orrs	r2, r3
 80048f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	2200      	movs	r2, #0
 8004900:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004902:	f7fe fcfb 	bl	80032fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	f003 0307 	and.w	r3, r3, #7
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00c      	beq.n	800492a <pvPortMalloc+0x176>
	__asm volatile
 8004910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004914:	b672      	cpsid	i
 8004916:	f383 8811 	msr	BASEPRI, r3
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	b662      	cpsie	i
 8004924:	60fb      	str	r3, [r7, #12]
}
 8004926:	bf00      	nop
 8004928:	e7fe      	b.n	8004928 <pvPortMalloc+0x174>
	return pvReturn;
 800492a:	69fb      	ldr	r3, [r7, #28]
}
 800492c:	4618      	mov	r0, r3
 800492e:	3728      	adds	r7, #40	; 0x28
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	20004924 	.word	0x20004924
 8004938:	20004930 	.word	0x20004930
 800493c:	20004928 	.word	0x20004928
 8004940:	2000491c 	.word	0x2000491c
 8004944:	2000492c 	.word	0x2000492c

08004948 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b086      	sub	sp, #24
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d04c      	beq.n	80049f4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800495a:	2308      	movs	r3, #8
 800495c:	425b      	negs	r3, r3
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	4413      	add	r3, r2
 8004962:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	4b23      	ldr	r3, [pc, #140]	; (80049fc <vPortFree+0xb4>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4013      	ands	r3, r2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10c      	bne.n	8004990 <vPortFree+0x48>
	__asm volatile
 8004976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497a:	b672      	cpsid	i
 800497c:	f383 8811 	msr	BASEPRI, r3
 8004980:	f3bf 8f6f 	isb	sy
 8004984:	f3bf 8f4f 	dsb	sy
 8004988:	b662      	cpsie	i
 800498a:	60fb      	str	r3, [r7, #12]
}
 800498c:	bf00      	nop
 800498e:	e7fe      	b.n	800498e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00c      	beq.n	80049b2 <vPortFree+0x6a>
	__asm volatile
 8004998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499c:	b672      	cpsid	i
 800499e:	f383 8811 	msr	BASEPRI, r3
 80049a2:	f3bf 8f6f 	isb	sy
 80049a6:	f3bf 8f4f 	dsb	sy
 80049aa:	b662      	cpsie	i
 80049ac:	60bb      	str	r3, [r7, #8]
}
 80049ae:	bf00      	nop
 80049b0:	e7fe      	b.n	80049b0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	685a      	ldr	r2, [r3, #4]
 80049b6:	4b11      	ldr	r3, [pc, #68]	; (80049fc <vPortFree+0xb4>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4013      	ands	r3, r2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d019      	beq.n	80049f4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d115      	bne.n	80049f4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	4b0b      	ldr	r3, [pc, #44]	; (80049fc <vPortFree+0xb4>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	43db      	mvns	r3, r3
 80049d2:	401a      	ands	r2, r3
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80049d8:	f7fe fc82 	bl	80032e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	4b07      	ldr	r3, [pc, #28]	; (8004a00 <vPortFree+0xb8>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4413      	add	r3, r2
 80049e6:	4a06      	ldr	r2, [pc, #24]	; (8004a00 <vPortFree+0xb8>)
 80049e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80049ea:	6938      	ldr	r0, [r7, #16]
 80049ec:	f000 f86c 	bl	8004ac8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80049f0:	f7fe fc84 	bl	80032fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80049f4:	bf00      	nop
 80049f6:	3718      	adds	r7, #24
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	20004930 	.word	0x20004930
 8004a00:	20004928 	.word	0x20004928

08004a04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004a0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004a10:	4b27      	ldr	r3, [pc, #156]	; (8004ab0 <prvHeapInit+0xac>)
 8004a12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f003 0307 	and.w	r3, r3, #7
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00c      	beq.n	8004a38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	3307      	adds	r3, #7
 8004a22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f023 0307 	bic.w	r3, r3, #7
 8004a2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	4a1f      	ldr	r2, [pc, #124]	; (8004ab0 <prvHeapInit+0xac>)
 8004a34:	4413      	add	r3, r2
 8004a36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a3c:	4a1d      	ldr	r2, [pc, #116]	; (8004ab4 <prvHeapInit+0xb0>)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004a42:	4b1c      	ldr	r3, [pc, #112]	; (8004ab4 <prvHeapInit+0xb0>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004a50:	2208      	movs	r2, #8
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	1a9b      	subs	r3, r3, r2
 8004a56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f023 0307 	bic.w	r3, r3, #7
 8004a5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4a15      	ldr	r2, [pc, #84]	; (8004ab8 <prvHeapInit+0xb4>)
 8004a64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004a66:	4b14      	ldr	r3, [pc, #80]	; (8004ab8 <prvHeapInit+0xb4>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004a6e:	4b12      	ldr	r3, [pc, #72]	; (8004ab8 <prvHeapInit+0xb4>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2200      	movs	r2, #0
 8004a74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	1ad2      	subs	r2, r2, r3
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a84:	4b0c      	ldr	r3, [pc, #48]	; (8004ab8 <prvHeapInit+0xb4>)
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	4a0a      	ldr	r2, [pc, #40]	; (8004abc <prvHeapInit+0xb8>)
 8004a92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	4a09      	ldr	r2, [pc, #36]	; (8004ac0 <prvHeapInit+0xbc>)
 8004a9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004a9c:	4b09      	ldr	r3, [pc, #36]	; (8004ac4 <prvHeapInit+0xc0>)
 8004a9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004aa2:	601a      	str	r2, [r3, #0]
}
 8004aa4:	bf00      	nop
 8004aa6:	3714      	adds	r7, #20
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	20000d1c 	.word	0x20000d1c
 8004ab4:	2000491c 	.word	0x2000491c
 8004ab8:	20004924 	.word	0x20004924
 8004abc:	2000492c 	.word	0x2000492c
 8004ac0:	20004928 	.word	0x20004928
 8004ac4:	20004930 	.word	0x20004930

08004ac8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ad0:	4b28      	ldr	r3, [pc, #160]	; (8004b74 <prvInsertBlockIntoFreeList+0xac>)
 8004ad2:	60fb      	str	r3, [r7, #12]
 8004ad4:	e002      	b.n	8004adc <prvInsertBlockIntoFreeList+0x14>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	60fb      	str	r3, [r7, #12]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d8f7      	bhi.n	8004ad6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	4413      	add	r3, r2
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d108      	bne.n	8004b0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	441a      	add	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	441a      	add	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d118      	bne.n	8004b50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	4b15      	ldr	r3, [pc, #84]	; (8004b78 <prvInsertBlockIntoFreeList+0xb0>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d00d      	beq.n	8004b46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	441a      	add	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	601a      	str	r2, [r3, #0]
 8004b44:	e008      	b.n	8004b58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b46:	4b0c      	ldr	r3, [pc, #48]	; (8004b78 <prvInsertBlockIntoFreeList+0xb0>)
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	601a      	str	r2, [r3, #0]
 8004b4e:	e003      	b.n	8004b58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d002      	beq.n	8004b66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b66:	bf00      	nop
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	2000491c 	.word	0x2000491c
 8004b78:	20004924 	.word	0x20004924

08004b7c <__libc_init_array>:
 8004b7c:	b570      	push	{r4, r5, r6, lr}
 8004b7e:	4d0d      	ldr	r5, [pc, #52]	; (8004bb4 <__libc_init_array+0x38>)
 8004b80:	4c0d      	ldr	r4, [pc, #52]	; (8004bb8 <__libc_init_array+0x3c>)
 8004b82:	1b64      	subs	r4, r4, r5
 8004b84:	10a4      	asrs	r4, r4, #2
 8004b86:	2600      	movs	r6, #0
 8004b88:	42a6      	cmp	r6, r4
 8004b8a:	d109      	bne.n	8004ba0 <__libc_init_array+0x24>
 8004b8c:	4d0b      	ldr	r5, [pc, #44]	; (8004bbc <__libc_init_array+0x40>)
 8004b8e:	4c0c      	ldr	r4, [pc, #48]	; (8004bc0 <__libc_init_array+0x44>)
 8004b90:	f000 f82e 	bl	8004bf0 <_init>
 8004b94:	1b64      	subs	r4, r4, r5
 8004b96:	10a4      	asrs	r4, r4, #2
 8004b98:	2600      	movs	r6, #0
 8004b9a:	42a6      	cmp	r6, r4
 8004b9c:	d105      	bne.n	8004baa <__libc_init_array+0x2e>
 8004b9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ba4:	4798      	blx	r3
 8004ba6:	3601      	adds	r6, #1
 8004ba8:	e7ee      	b.n	8004b88 <__libc_init_array+0xc>
 8004baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bae:	4798      	blx	r3
 8004bb0:	3601      	adds	r6, #1
 8004bb2:	e7f2      	b.n	8004b9a <__libc_init_array+0x1e>
 8004bb4:	08004ca4 	.word	0x08004ca4
 8004bb8:	08004ca4 	.word	0x08004ca4
 8004bbc:	08004ca4 	.word	0x08004ca4
 8004bc0:	08004ca8 	.word	0x08004ca8

08004bc4 <memcpy>:
 8004bc4:	440a      	add	r2, r1
 8004bc6:	4291      	cmp	r1, r2
 8004bc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004bcc:	d100      	bne.n	8004bd0 <memcpy+0xc>
 8004bce:	4770      	bx	lr
 8004bd0:	b510      	push	{r4, lr}
 8004bd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bda:	4291      	cmp	r1, r2
 8004bdc:	d1f9      	bne.n	8004bd2 <memcpy+0xe>
 8004bde:	bd10      	pop	{r4, pc}

08004be0 <memset>:
 8004be0:	4402      	add	r2, r0
 8004be2:	4603      	mov	r3, r0
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d100      	bne.n	8004bea <memset+0xa>
 8004be8:	4770      	bx	lr
 8004bea:	f803 1b01 	strb.w	r1, [r3], #1
 8004bee:	e7f9      	b.n	8004be4 <memset+0x4>

08004bf0 <_init>:
 8004bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf2:	bf00      	nop
 8004bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bf6:	bc08      	pop	{r3}
 8004bf8:	469e      	mov	lr, r3
 8004bfa:	4770      	bx	lr

08004bfc <_fini>:
 8004bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bfe:	bf00      	nop
 8004c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c02:	bc08      	pop	{r3}
 8004c04:	469e      	mov	lr, r3
 8004c06:	4770      	bx	lr
