
USART_VirtualComPort.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f90  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08003190  08003190  00013190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031ec  080031ec  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080031ec  080031ec  000131ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031f4  080031f4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031f4  080031f4  000131f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031f8  080031f8  000131f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080031fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000070  0800326c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  0800326c  00020108  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006dc1  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000147d  00000000  00000000  00026e5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000618  00000000  00000000  000282e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000560  00000000  00000000  000288f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026802  00000000  00000000  00028e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007c5a  00000000  00000000  0004f65a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee5ec  00000000  00000000  000572b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001458a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b2c  00000000  00000000  001458f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08003178 	.word	0x08003178

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08003178 	.word	0x08003178

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f000 fa44 	bl	8000a86 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f833 	bl	8000668 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f000 f8b9 	bl	8000778 <MX_GPIO_Init>
  MX_USART3_Init();
 8000606:	f000 f88b 	bl	8000720 <MX_USART3_Init>

  int cou = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  while (1)
  {
	  /* Sending message through USART every 1sec */
	  cou++; // increasing counter every 100oms
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	3301      	adds	r3, #1
 8000612:	607b      	str	r3, [r7, #4]
	  sprintf(couChar, "Counter: %d\n\r", cou);
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	4910      	ldr	r1, [pc, #64]	; (8000658 <main+0x64>)
 8000618:	4810      	ldr	r0, [pc, #64]	; (800065c <main+0x68>)
 800061a:	f002 f93f 	bl	800289c <siprintf>
	  HAL_USART_Transmit(&husart3, (uint8_t*)couChar, strlen(couChar), 0xFFFF);
 800061e:	480f      	ldr	r0, [pc, #60]	; (800065c <main+0x68>)
 8000620:	f7ff fe0e 	bl	8000240 <strlen>
 8000624:	4603      	mov	r3, r0
 8000626:	b29a      	uxth	r2, r3
 8000628:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800062c:	490b      	ldr	r1, [pc, #44]	; (800065c <main+0x68>)
 800062e:	480c      	ldr	r0, [pc, #48]	; (8000660 <main+0x6c>)
 8000630:	f001 fe5c 	bl	80022ec <HAL_USART_Transmit>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000634:	2201      	movs	r2, #1
 8000636:	2180      	movs	r1, #128	; 0x80
 8000638:	480a      	ldr	r0, [pc, #40]	; (8000664 <main+0x70>)
 800063a:	f000 fd37 	bl	80010ac <HAL_GPIO_WritePin>
	  HAL_Delay(200); // Delay of 200ms -> to turn On LED for 200 after msg through USART is sent
 800063e:	20c8      	movs	r0, #200	; 0xc8
 8000640:	f000 fa7e 	bl	8000b40 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	2180      	movs	r1, #128	; 0x80
 8000648:	4806      	ldr	r0, [pc, #24]	; (8000664 <main+0x70>)
 800064a:	f000 fd2f 	bl	80010ac <HAL_GPIO_WritePin>
	  HAL_Delay(800); // Delay of 800ms -> 200ms+1000ms=1sec waits till next msg through USART is sent
 800064e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000652:	f000 fa75 	bl	8000b40 <HAL_Delay>
	  cou++; // increasing counter every 100oms
 8000656:	e7da      	b.n	800060e <main+0x1a>
 8000658:	08003190 	.word	0x08003190
 800065c:	200000dc 	.word	0x200000dc
 8000660:	2000008c 	.word	0x2000008c
 8000664:	40020400 	.word	0x40020400

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b094      	sub	sp, #80	; 0x50
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 031c 	add.w	r3, r7, #28
 8000672:	2234      	movs	r2, #52	; 0x34
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f002 f908 	bl	800288c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	f107 0308 	add.w	r3, r7, #8
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800068c:	4b22      	ldr	r3, [pc, #136]	; (8000718 <SystemClock_Config+0xb0>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	4a21      	ldr	r2, [pc, #132]	; (8000718 <SystemClock_Config+0xb0>)
 8000692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000696:	6413      	str	r3, [r2, #64]	; 0x40
 8000698:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <SystemClock_Config+0xb0>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006a4:	4b1d      	ldr	r3, [pc, #116]	; (800071c <SystemClock_Config+0xb4>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006ac:	4a1b      	ldr	r2, [pc, #108]	; (800071c <SystemClock_Config+0xb4>)
 80006ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	4b19      	ldr	r3, [pc, #100]	; (800071c <SystemClock_Config+0xb4>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006bc:	603b      	str	r3, [r7, #0]
 80006be:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c0:	2302      	movs	r3, #2
 80006c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c4:	2301      	movs	r3, #1
 80006c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c8:	2310      	movs	r3, #16
 80006ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006cc:	2300      	movs	r3, #0
 80006ce:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 031c 	add.w	r3, r7, #28
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 fd03 	bl	80010e0 <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80006e0:	f000 f888 	bl	80007f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	230f      	movs	r3, #15
 80006e6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f8:	f107 0308 	add.w	r3, r7, #8
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 ff9c 	bl	800163c <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800070a:	f000 f873 	bl	80007f4 <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	3750      	adds	r7, #80	; 0x50
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800
 800071c:	40007000 	.word	0x40007000

08000720 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  husart3.Instance = USART3;
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <MX_USART3_Init+0x50>)
 8000726:	4a13      	ldr	r2, [pc, #76]	; (8000774 <MX_USART3_Init+0x54>)
 8000728:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 115200;
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_USART3_Init+0x50>)
 800072c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000730:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8000732:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_USART3_Init+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8000738:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <MX_USART3_Init+0x50>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_USART3_Init+0x50>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 8000744:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <MX_USART3_Init+0x50>)
 8000746:	220c      	movs	r2, #12
 8000748:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_USART3_Init+0x50>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <MX_USART3_Init+0x50>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_USART3_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart3) != HAL_OK)
 800075c:	4804      	ldr	r0, [pc, #16]	; (8000770 <MX_USART3_Init+0x50>)
 800075e:	f001 fd7b 	bl	8002258 <HAL_USART_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_USART3_Init+0x4c>
  {
    Error_Handler();
 8000768:	f000 f844 	bl	80007f4 <Error_Handler>
  }
}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	2000008c 	.word	0x2000008c
 8000774:	40004800 	.word	0x40004800

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b088      	sub	sp, #32
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 030c 	add.w	r3, r7, #12
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	4b17      	ldr	r3, [pc, #92]	; (80007ec <MX_GPIO_Init+0x74>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a16      	ldr	r2, [pc, #88]	; (80007ec <MX_GPIO_Init+0x74>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b14      	ldr	r3, [pc, #80]	; (80007ec <MX_GPIO_Init+0x74>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_GPIO_Init+0x74>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a10      	ldr	r2, [pc, #64]	; (80007ec <MX_GPIO_Init+0x74>)
 80007ac:	f043 0308 	orr.w	r3, r3, #8
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_GPIO_Init+0x74>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0308 	and.w	r3, r3, #8
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	2180      	movs	r1, #128	; 0x80
 80007c2:	480b      	ldr	r0, [pc, #44]	; (80007f0 <MX_GPIO_Init+0x78>)
 80007c4:	f000 fc72 	bl	80010ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007c8:	2380      	movs	r3, #128	; 0x80
 80007ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007cc:	2301      	movs	r3, #1
 80007ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	4619      	mov	r1, r3
 80007de:	4804      	ldr	r0, [pc, #16]	; (80007f0 <MX_GPIO_Init+0x78>)
 80007e0:	f000 fab8 	bl	8000d54 <HAL_GPIO_Init>

}
 80007e4:	bf00      	nop
 80007e6:	3720      	adds	r7, #32
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020400 	.word	0x40020400

080007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f8:	b672      	cpsid	i
}
 80007fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007fc:	e7fe      	b.n	80007fc <Error_Handler+0x8>
	...

08000800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000806:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <HAL_MspInit+0x44>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080a:	4a0e      	ldr	r2, [pc, #56]	; (8000844 <HAL_MspInit+0x44>)
 800080c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000810:	6413      	str	r3, [r2, #64]	; 0x40
 8000812:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <HAL_MspInit+0x44>)
 8000814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <HAL_MspInit+0x44>)
 8000820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000822:	4a08      	ldr	r2, [pc, #32]	; (8000844 <HAL_MspInit+0x44>)
 8000824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000828:	6453      	str	r3, [r2, #68]	; 0x44
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <HAL_MspInit+0x44>)
 800082c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800

08000848 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b0ae      	sub	sp, #184	; 0xb8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	2290      	movs	r2, #144	; 0x90
 8000866:	2100      	movs	r1, #0
 8000868:	4618      	mov	r0, r3
 800086a:	f002 f80f 	bl	800288c <memset>
  if(husart->Instance==USART3)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a33      	ldr	r2, [pc, #204]	; (8000940 <HAL_USART_MspInit+0xf8>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d15e      	bne.n	8000936 <HAL_USART_MspInit+0xee>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000878:	f44f 7380 	mov.w	r3, #256	; 0x100
 800087c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800087e:	2300      	movs	r3, #0
 8000880:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4618      	mov	r0, r3
 8000888:	f001 f8be 	bl	8001a08 <HAL_RCCEx_PeriphCLKConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <HAL_USART_MspInit+0x4e>
    {
      Error_Handler();
 8000892:	f7ff ffaf 	bl	80007f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000896:	4b2b      	ldr	r3, [pc, #172]	; (8000944 <HAL_USART_MspInit+0xfc>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	4a2a      	ldr	r2, [pc, #168]	; (8000944 <HAL_USART_MspInit+0xfc>)
 800089c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008a0:	6413      	str	r3, [r2, #64]	; 0x40
 80008a2:	4b28      	ldr	r3, [pc, #160]	; (8000944 <HAL_USART_MspInit+0xfc>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	4b25      	ldr	r3, [pc, #148]	; (8000944 <HAL_USART_MspInit+0xfc>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a24      	ldr	r2, [pc, #144]	; (8000944 <HAL_USART_MspInit+0xfc>)
 80008b4:	f043 0302 	orr.w	r3, r3, #2
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b22      	ldr	r3, [pc, #136]	; (8000944 <HAL_USART_MspInit+0xfc>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c6:	4b1f      	ldr	r3, [pc, #124]	; (8000944 <HAL_USART_MspInit+0xfc>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a1e      	ldr	r2, [pc, #120]	; (8000944 <HAL_USART_MspInit+0xfc>)
 80008cc:	f043 0308 	orr.w	r3, r3, #8
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <HAL_USART_MspInit+0xfc>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0308 	and.w	r3, r3, #8
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB12     ------> USART3_CK
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80008de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f2:	2303      	movs	r3, #3
 80008f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008f8:	2307      	movs	r3, #7
 80008fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000902:	4619      	mov	r1, r3
 8000904:	4810      	ldr	r0, [pc, #64]	; (8000948 <HAL_USART_MspInit+0x100>)
 8000906:	f000 fa25 	bl	8000d54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800090a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800090e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2302      	movs	r3, #2
 8000914:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091e:	2303      	movs	r3, #3
 8000920:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000924:	2307      	movs	r3, #7
 8000926:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800092a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800092e:	4619      	mov	r1, r3
 8000930:	4806      	ldr	r0, [pc, #24]	; (800094c <HAL_USART_MspInit+0x104>)
 8000932:	f000 fa0f 	bl	8000d54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000936:	bf00      	nop
 8000938:	37b8      	adds	r7, #184	; 0xb8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40004800 	.word	0x40004800
 8000944:	40023800 	.word	0x40023800
 8000948:	40020400 	.word	0x40020400
 800094c:	40020c00 	.word	0x40020c00

08000950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <NMI_Handler+0x4>

08000956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <HardFault_Handler+0x4>

0800095c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <MemManage_Handler+0x4>

08000962 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000966:	e7fe      	b.n	8000966 <BusFault_Handler+0x4>

08000968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800096c:	e7fe      	b.n	800096c <UsageFault_Handler+0x4>

0800096e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800099c:	f000 f8b0 	bl	8000b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009ac:	4a14      	ldr	r2, [pc, #80]	; (8000a00 <_sbrk+0x5c>)
 80009ae:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <_sbrk+0x60>)
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009b8:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <_sbrk+0x64>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d102      	bne.n	80009c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <_sbrk+0x64>)
 80009c2:	4a12      	ldr	r2, [pc, #72]	; (8000a0c <_sbrk+0x68>)
 80009c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <_sbrk+0x64>)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d207      	bcs.n	80009e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009d4:	f001 ff30 	bl	8002838 <__errno>
 80009d8:	4603      	mov	r3, r0
 80009da:	220c      	movs	r2, #12
 80009dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009de:	f04f 33ff 	mov.w	r3, #4294967295
 80009e2:	e009      	b.n	80009f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <_sbrk+0x64>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ea:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <_sbrk+0x64>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4413      	add	r3, r2
 80009f2:	4a05      	ldr	r2, [pc, #20]	; (8000a08 <_sbrk+0x64>)
 80009f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009f6:	68fb      	ldr	r3, [r7, #12]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3718      	adds	r7, #24
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20080000 	.word	0x20080000
 8000a04:	00000400 	.word	0x00000400
 8000a08:	200000f0 	.word	0x200000f0
 8000a0c:	20000108 	.word	0x20000108

08000a10 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <SystemInit+0x20>)
 8000a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a1a:	4a05      	ldr	r2, [pc, #20]	; (8000a30 <SystemInit+0x20>)
 8000a1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a38:	480d      	ldr	r0, [pc, #52]	; (8000a70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a3a:	490e      	ldr	r1, [pc, #56]	; (8000a74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a3c:	4a0e      	ldr	r2, [pc, #56]	; (8000a78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a40:	e002      	b.n	8000a48 <LoopCopyDataInit>

08000a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a46:	3304      	adds	r3, #4

08000a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a4c:	d3f9      	bcc.n	8000a42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4e:	4a0b      	ldr	r2, [pc, #44]	; (8000a7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a50:	4c0b      	ldr	r4, [pc, #44]	; (8000a80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a54:	e001      	b.n	8000a5a <LoopFillZerobss>

08000a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a58:	3204      	adds	r2, #4

08000a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a5c:	d3fb      	bcc.n	8000a56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a5e:	f7ff ffd7 	bl	8000a10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a62:	f001 feef 	bl	8002844 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a66:	f7ff fdc5 	bl	80005f4 <main>
  bx  lr    
 8000a6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a6c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000a70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a74:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a78:	080031fc 	.word	0x080031fc
  ldr r2, =_sbss
 8000a7c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a80:	20000108 	.word	0x20000108

08000a84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a84:	e7fe      	b.n	8000a84 <ADC_IRQHandler>

08000a86 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a8a:	2003      	movs	r0, #3
 8000a8c:	f000 f92e 	bl	8000cec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a90:	200f      	movs	r0, #15
 8000a92:	f000 f805 	bl	8000aa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a96:	f7ff feb3 	bl	8000800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a9a:	2300      	movs	r3, #0
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <HAL_InitTick+0x54>)
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <HAL_InitTick+0x58>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f000 f93b 	bl	8000d3a <HAL_SYSTICK_Config>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	e00e      	b.n	8000aec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2b0f      	cmp	r3, #15
 8000ad2:	d80a      	bhi.n	8000aea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	6879      	ldr	r1, [r7, #4]
 8000ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8000adc:	f000 f911 	bl	8000d02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae0:	4a06      	ldr	r2, [pc, #24]	; (8000afc <HAL_InitTick+0x5c>)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e000      	b.n	8000aec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000000 	.word	0x20000000
 8000af8:	20000008 	.word	0x20000008
 8000afc:	20000004 	.word	0x20000004

08000b00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_IncTick+0x20>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_IncTick+0x24>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4413      	add	r3, r2
 8000b10:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <HAL_IncTick+0x24>)
 8000b12:	6013      	str	r3, [r2, #0]
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	20000008 	.word	0x20000008
 8000b24:	200000f4 	.word	0x200000f4

08000b28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b2c:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <HAL_GetTick+0x14>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	200000f4 	.word	0x200000f4

08000b40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b48:	f7ff ffee 	bl	8000b28 <HAL_GetTick>
 8000b4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b58:	d005      	beq.n	8000b66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b5a:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <HAL_Delay+0x44>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	4413      	add	r3, r2
 8000b64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b66:	bf00      	nop
 8000b68:	f7ff ffde 	bl	8000b28 <HAL_GetTick>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	68fa      	ldr	r2, [r7, #12]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d8f7      	bhi.n	8000b68 <HAL_Delay+0x28>
  {
  }
}
 8000b78:	bf00      	nop
 8000b7a:	bf00      	nop
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000008 	.word	0x20000008

08000b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b98:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <__NVIC_SetPriorityGrouping+0x40>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b9e:	68ba      	ldr	r2, [r7, #8]
 8000ba0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <__NVIC_SetPriorityGrouping+0x44>)
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bb6:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <__NVIC_SetPriorityGrouping+0x40>)
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	60d3      	str	r3, [r2, #12]
}
 8000bbc:	bf00      	nop
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000ed00 	.word	0xe000ed00
 8000bcc:	05fa0000 	.word	0x05fa0000

08000bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd4:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	0a1b      	lsrs	r3, r3, #8
 8000bda:	f003 0307 	and.w	r3, r3, #7
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	6039      	str	r1, [r7, #0]
 8000bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	db0a      	blt.n	8000c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	490c      	ldr	r1, [pc, #48]	; (8000c38 <__NVIC_SetPriority+0x4c>)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	0112      	lsls	r2, r2, #4
 8000c0c:	b2d2      	uxtb	r2, r2
 8000c0e:	440b      	add	r3, r1
 8000c10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c14:	e00a      	b.n	8000c2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4908      	ldr	r1, [pc, #32]	; (8000c3c <__NVIC_SetPriority+0x50>)
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	f003 030f 	and.w	r3, r3, #15
 8000c22:	3b04      	subs	r3, #4
 8000c24:	0112      	lsls	r2, r2, #4
 8000c26:	b2d2      	uxtb	r2, r2
 8000c28:	440b      	add	r3, r1
 8000c2a:	761a      	strb	r2, [r3, #24]
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000e100 	.word	0xe000e100
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b089      	sub	sp, #36	; 0x24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	f1c3 0307 	rsb	r3, r3, #7
 8000c5a:	2b04      	cmp	r3, #4
 8000c5c:	bf28      	it	cs
 8000c5e:	2304      	movcs	r3, #4
 8000c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3304      	adds	r3, #4
 8000c66:	2b06      	cmp	r3, #6
 8000c68:	d902      	bls.n	8000c70 <NVIC_EncodePriority+0x30>
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3b03      	subs	r3, #3
 8000c6e:	e000      	b.n	8000c72 <NVIC_EncodePriority+0x32>
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c74:	f04f 32ff 	mov.w	r2, #4294967295
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	43da      	mvns	r2, r3
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	401a      	ands	r2, r3
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c88:	f04f 31ff 	mov.w	r1, #4294967295
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c92:	43d9      	mvns	r1, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	4313      	orrs	r3, r2
         );
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3724      	adds	r7, #36	; 0x24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
	...

08000ca8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cb8:	d301      	bcc.n	8000cbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e00f      	b.n	8000cde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	; (8000ce8 <SysTick_Config+0x40>)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cc6:	210f      	movs	r1, #15
 8000cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ccc:	f7ff ff8e 	bl	8000bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <SysTick_Config+0x40>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cd6:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <SysTick_Config+0x40>)
 8000cd8:	2207      	movs	r2, #7
 8000cda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	e000e010 	.word	0xe000e010

08000cec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f7ff ff47 	bl	8000b88 <__NVIC_SetPriorityGrouping>
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b086      	sub	sp, #24
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	4603      	mov	r3, r0
 8000d0a:	60b9      	str	r1, [r7, #8]
 8000d0c:	607a      	str	r2, [r7, #4]
 8000d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d14:	f7ff ff5c 	bl	8000bd0 <__NVIC_GetPriorityGrouping>
 8000d18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	68b9      	ldr	r1, [r7, #8]
 8000d1e:	6978      	ldr	r0, [r7, #20]
 8000d20:	f7ff ff8e 	bl	8000c40 <NVIC_EncodePriority>
 8000d24:	4602      	mov	r2, r0
 8000d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ff5d 	bl	8000bec <__NVIC_SetPriority>
}
 8000d32:	bf00      	nop
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f7ff ffb0 	bl	8000ca8 <SysTick_Config>
 8000d48:	4603      	mov	r3, r0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b089      	sub	sp, #36	; 0x24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61fb      	str	r3, [r7, #28]
 8000d72:	e175      	b.n	8001060 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000d74:	2201      	movs	r2, #1
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	697a      	ldr	r2, [r7, #20]
 8000d84:	4013      	ands	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f040 8164 	bne.w	800105a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f003 0303 	and.w	r3, r3, #3
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d005      	beq.n	8000daa <HAL_GPIO_Init+0x56>
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f003 0303 	and.w	r3, r3, #3
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d130      	bne.n	8000e0c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	2203      	movs	r2, #3
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	68da      	ldr	r2, [r3, #12]
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000de0:	2201      	movs	r2, #1
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4013      	ands	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	091b      	lsrs	r3, r3, #4
 8000df6:	f003 0201 	and.w	r2, r3, #1
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	2b03      	cmp	r3, #3
 8000e16:	d017      	beq.n	8000e48 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	2203      	movs	r2, #3
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	689a      	ldr	r2, [r3, #8]
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f003 0303 	and.w	r3, r3, #3
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d123      	bne.n	8000e9c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	08da      	lsrs	r2, r3, #3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3208      	adds	r2, #8
 8000e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	f003 0307 	and.w	r3, r3, #7
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	220f      	movs	r2, #15
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	691a      	ldr	r2, [r3, #16]
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	08da      	lsrs	r2, r3, #3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3208      	adds	r2, #8
 8000e96:	69b9      	ldr	r1, [r7, #24]
 8000e98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 0203 	and.w	r2, r3, #3
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	f000 80be 	beq.w	800105a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ede:	4b66      	ldr	r3, [pc, #408]	; (8001078 <HAL_GPIO_Init+0x324>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	4a65      	ldr	r2, [pc, #404]	; (8001078 <HAL_GPIO_Init+0x324>)
 8000ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eea:	4b63      	ldr	r3, [pc, #396]	; (8001078 <HAL_GPIO_Init+0x324>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000ef6:	4a61      	ldr	r2, [pc, #388]	; (800107c <HAL_GPIO_Init+0x328>)
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	089b      	lsrs	r3, r3, #2
 8000efc:	3302      	adds	r3, #2
 8000efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f003 0303 	and.w	r3, r3, #3
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	220f      	movs	r2, #15
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43db      	mvns	r3, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4013      	ands	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a58      	ldr	r2, [pc, #352]	; (8001080 <HAL_GPIO_Init+0x32c>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d037      	beq.n	8000f92 <HAL_GPIO_Init+0x23e>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a57      	ldr	r2, [pc, #348]	; (8001084 <HAL_GPIO_Init+0x330>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d031      	beq.n	8000f8e <HAL_GPIO_Init+0x23a>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a56      	ldr	r2, [pc, #344]	; (8001088 <HAL_GPIO_Init+0x334>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d02b      	beq.n	8000f8a <HAL_GPIO_Init+0x236>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a55      	ldr	r2, [pc, #340]	; (800108c <HAL_GPIO_Init+0x338>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d025      	beq.n	8000f86 <HAL_GPIO_Init+0x232>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a54      	ldr	r2, [pc, #336]	; (8001090 <HAL_GPIO_Init+0x33c>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d01f      	beq.n	8000f82 <HAL_GPIO_Init+0x22e>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a53      	ldr	r2, [pc, #332]	; (8001094 <HAL_GPIO_Init+0x340>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d019      	beq.n	8000f7e <HAL_GPIO_Init+0x22a>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a52      	ldr	r2, [pc, #328]	; (8001098 <HAL_GPIO_Init+0x344>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d013      	beq.n	8000f7a <HAL_GPIO_Init+0x226>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a51      	ldr	r2, [pc, #324]	; (800109c <HAL_GPIO_Init+0x348>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d00d      	beq.n	8000f76 <HAL_GPIO_Init+0x222>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a50      	ldr	r2, [pc, #320]	; (80010a0 <HAL_GPIO_Init+0x34c>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d007      	beq.n	8000f72 <HAL_GPIO_Init+0x21e>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a4f      	ldr	r2, [pc, #316]	; (80010a4 <HAL_GPIO_Init+0x350>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d101      	bne.n	8000f6e <HAL_GPIO_Init+0x21a>
 8000f6a:	2309      	movs	r3, #9
 8000f6c:	e012      	b.n	8000f94 <HAL_GPIO_Init+0x240>
 8000f6e:	230a      	movs	r3, #10
 8000f70:	e010      	b.n	8000f94 <HAL_GPIO_Init+0x240>
 8000f72:	2308      	movs	r3, #8
 8000f74:	e00e      	b.n	8000f94 <HAL_GPIO_Init+0x240>
 8000f76:	2307      	movs	r3, #7
 8000f78:	e00c      	b.n	8000f94 <HAL_GPIO_Init+0x240>
 8000f7a:	2306      	movs	r3, #6
 8000f7c:	e00a      	b.n	8000f94 <HAL_GPIO_Init+0x240>
 8000f7e:	2305      	movs	r3, #5
 8000f80:	e008      	b.n	8000f94 <HAL_GPIO_Init+0x240>
 8000f82:	2304      	movs	r3, #4
 8000f84:	e006      	b.n	8000f94 <HAL_GPIO_Init+0x240>
 8000f86:	2303      	movs	r3, #3
 8000f88:	e004      	b.n	8000f94 <HAL_GPIO_Init+0x240>
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	e002      	b.n	8000f94 <HAL_GPIO_Init+0x240>
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e000      	b.n	8000f94 <HAL_GPIO_Init+0x240>
 8000f92:	2300      	movs	r3, #0
 8000f94:	69fa      	ldr	r2, [r7, #28]
 8000f96:	f002 0203 	and.w	r2, r2, #3
 8000f9a:	0092      	lsls	r2, r2, #2
 8000f9c:	4093      	lsls	r3, r2
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000fa4:	4935      	ldr	r1, [pc, #212]	; (800107c <HAL_GPIO_Init+0x328>)
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	089b      	lsrs	r3, r3, #2
 8000faa:	3302      	adds	r3, #2
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fb2:	4b3d      	ldr	r3, [pc, #244]	; (80010a8 <HAL_GPIO_Init+0x354>)
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fd6:	4a34      	ldr	r2, [pc, #208]	; (80010a8 <HAL_GPIO_Init+0x354>)
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fdc:	4b32      	ldr	r3, [pc, #200]	; (80010a8 <HAL_GPIO_Init+0x354>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001000:	4a29      	ldr	r2, [pc, #164]	; (80010a8 <HAL_GPIO_Init+0x354>)
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001006:	4b28      	ldr	r3, [pc, #160]	; (80010a8 <HAL_GPIO_Init+0x354>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	43db      	mvns	r3, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4013      	ands	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	4313      	orrs	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800102a:	4a1f      	ldr	r2, [pc, #124]	; (80010a8 <HAL_GPIO_Init+0x354>)
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001030:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <HAL_GPIO_Init+0x354>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	43db      	mvns	r3, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4013      	ands	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	4313      	orrs	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001054:	4a14      	ldr	r2, [pc, #80]	; (80010a8 <HAL_GPIO_Init+0x354>)
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3301      	adds	r3, #1
 800105e:	61fb      	str	r3, [r7, #28]
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	2b0f      	cmp	r3, #15
 8001064:	f67f ae86 	bls.w	8000d74 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001068:	bf00      	nop
 800106a:	bf00      	nop
 800106c:	3724      	adds	r7, #36	; 0x24
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	40023800 	.word	0x40023800
 800107c:	40013800 	.word	0x40013800
 8001080:	40020000 	.word	0x40020000
 8001084:	40020400 	.word	0x40020400
 8001088:	40020800 	.word	0x40020800
 800108c:	40020c00 	.word	0x40020c00
 8001090:	40021000 	.word	0x40021000
 8001094:	40021400 	.word	0x40021400
 8001098:	40021800 	.word	0x40021800
 800109c:	40021c00 	.word	0x40021c00
 80010a0:	40022000 	.word	0x40022000
 80010a4:	40022400 	.word	0x40022400
 80010a8:	40013c00 	.word	0x40013c00

080010ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	460b      	mov	r3, r1
 80010b6:	807b      	strh	r3, [r7, #2]
 80010b8:	4613      	mov	r3, r2
 80010ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010bc:	787b      	ldrb	r3, [r7, #1]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010c2:	887a      	ldrh	r2, [r7, #2]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80010c8:	e003      	b.n	80010d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80010ca:	887b      	ldrh	r3, [r7, #2]
 80010cc:	041a      	lsls	r2, r3, #16
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	619a      	str	r2, [r3, #24]
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
	...

080010e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80010e8:	2300      	movs	r3, #0
 80010ea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d101      	bne.n	80010f6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e29b      	b.n	800162e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f000 8087 	beq.w	8001212 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001104:	4b96      	ldr	r3, [pc, #600]	; (8001360 <HAL_RCC_OscConfig+0x280>)
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f003 030c 	and.w	r3, r3, #12
 800110c:	2b04      	cmp	r3, #4
 800110e:	d00c      	beq.n	800112a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001110:	4b93      	ldr	r3, [pc, #588]	; (8001360 <HAL_RCC_OscConfig+0x280>)
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	f003 030c 	and.w	r3, r3, #12
 8001118:	2b08      	cmp	r3, #8
 800111a:	d112      	bne.n	8001142 <HAL_RCC_OscConfig+0x62>
 800111c:	4b90      	ldr	r3, [pc, #576]	; (8001360 <HAL_RCC_OscConfig+0x280>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001124:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001128:	d10b      	bne.n	8001142 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800112a:	4b8d      	ldr	r3, [pc, #564]	; (8001360 <HAL_RCC_OscConfig+0x280>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d06c      	beq.n	8001210 <HAL_RCC_OscConfig+0x130>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d168      	bne.n	8001210 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e275      	b.n	800162e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800114a:	d106      	bne.n	800115a <HAL_RCC_OscConfig+0x7a>
 800114c:	4b84      	ldr	r3, [pc, #528]	; (8001360 <HAL_RCC_OscConfig+0x280>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a83      	ldr	r2, [pc, #524]	; (8001360 <HAL_RCC_OscConfig+0x280>)
 8001152:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001156:	6013      	str	r3, [r2, #0]
 8001158:	e02e      	b.n	80011b8 <HAL_RCC_OscConfig+0xd8>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d10c      	bne.n	800117c <HAL_RCC_OscConfig+0x9c>
 8001162:	4b7f      	ldr	r3, [pc, #508]	; (8001360 <HAL_RCC_OscConfig+0x280>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a7e      	ldr	r2, [pc, #504]	; (8001360 <HAL_RCC_OscConfig+0x280>)
 8001168:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	4b7c      	ldr	r3, [pc, #496]	; (8001360 <HAL_RCC_OscConfig+0x280>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a7b      	ldr	r2, [pc, #492]	; (8001360 <HAL_RCC_OscConfig+0x280>)
 8001174:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001178:	6013      	str	r3, [r2, #0]
 800117a:	e01d      	b.n	80011b8 <HAL_RCC_OscConfig+0xd8>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001184:	d10c      	bne.n	80011a0 <HAL_RCC_OscConfig+0xc0>
 8001186:	4b76      	ldr	r3, [pc, #472]	; (8001360 <HAL_RCC_OscConfig+0x280>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a75      	ldr	r2, [pc, #468]	; (8001360 <HAL_RCC_OscConfig+0x280>)
 800118c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	4b73      	ldr	r3, [pc, #460]	; (8001360 <HAL_RCC_OscConfig+0x280>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a72      	ldr	r2, [pc, #456]	; (8001360 <HAL_RCC_OscConfig+0x280>)
 8001198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800119c:	6013      	str	r3, [r2, #0]
 800119e:	e00b      	b.n	80011b8 <HAL_RCC_OscConfig+0xd8>
 80011a0:	4b6f      	ldr	r3, [pc, #444]	; (8001360 <HAL_RCC_OscConfig+0x280>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a6e      	ldr	r2, [pc, #440]	; (8001360 <HAL_RCC_OscConfig+0x280>)
 80011a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011aa:	6013      	str	r3, [r2, #0]
 80011ac:	4b6c      	ldr	r3, [pc, #432]	; (8001360 <HAL_RCC_OscConfig+0x280>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a6b      	ldr	r2, [pc, #428]	; (8001360 <HAL_RCC_OscConfig+0x280>)
 80011b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d013      	beq.n	80011e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c0:	f7ff fcb2 	bl	8000b28 <HAL_GetTick>
 80011c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011c8:	f7ff fcae 	bl	8000b28 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b64      	cmp	r3, #100	; 0x64
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e229      	b.n	800162e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011da:	4b61      	ldr	r3, [pc, #388]	; (8001360 <HAL_RCC_OscConfig+0x280>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d0f0      	beq.n	80011c8 <HAL_RCC_OscConfig+0xe8>
 80011e6:	e014      	b.n	8001212 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e8:	f7ff fc9e 	bl	8000b28 <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011f0:	f7ff fc9a 	bl	8000b28 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b64      	cmp	r3, #100	; 0x64
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e215      	b.n	800162e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001202:	4b57      	ldr	r3, [pc, #348]	; (8001360 <HAL_RCC_OscConfig+0x280>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1f0      	bne.n	80011f0 <HAL_RCC_OscConfig+0x110>
 800120e:	e000      	b.n	8001212 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d069      	beq.n	80012f2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800121e:	4b50      	ldr	r3, [pc, #320]	; (8001360 <HAL_RCC_OscConfig+0x280>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f003 030c 	and.w	r3, r3, #12
 8001226:	2b00      	cmp	r3, #0
 8001228:	d00b      	beq.n	8001242 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800122a:	4b4d      	ldr	r3, [pc, #308]	; (8001360 <HAL_RCC_OscConfig+0x280>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f003 030c 	and.w	r3, r3, #12
 8001232:	2b08      	cmp	r3, #8
 8001234:	d11c      	bne.n	8001270 <HAL_RCC_OscConfig+0x190>
 8001236:	4b4a      	ldr	r3, [pc, #296]	; (8001360 <HAL_RCC_OscConfig+0x280>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d116      	bne.n	8001270 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001242:	4b47      	ldr	r3, [pc, #284]	; (8001360 <HAL_RCC_OscConfig+0x280>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d005      	beq.n	800125a <HAL_RCC_OscConfig+0x17a>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d001      	beq.n	800125a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e1e9      	b.n	800162e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800125a:	4b41      	ldr	r3, [pc, #260]	; (8001360 <HAL_RCC_OscConfig+0x280>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	493d      	ldr	r1, [pc, #244]	; (8001360 <HAL_RCC_OscConfig+0x280>)
 800126a:	4313      	orrs	r3, r2
 800126c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800126e:	e040      	b.n	80012f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d023      	beq.n	80012c0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001278:	4b39      	ldr	r3, [pc, #228]	; (8001360 <HAL_RCC_OscConfig+0x280>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a38      	ldr	r2, [pc, #224]	; (8001360 <HAL_RCC_OscConfig+0x280>)
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001284:	f7ff fc50 	bl	8000b28 <HAL_GetTick>
 8001288:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128a:	e008      	b.n	800129e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800128c:	f7ff fc4c 	bl	8000b28 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b02      	cmp	r3, #2
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e1c7      	b.n	800162e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800129e:	4b30      	ldr	r3, [pc, #192]	; (8001360 <HAL_RCC_OscConfig+0x280>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d0f0      	beq.n	800128c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012aa:	4b2d      	ldr	r3, [pc, #180]	; (8001360 <HAL_RCC_OscConfig+0x280>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	4929      	ldr	r1, [pc, #164]	; (8001360 <HAL_RCC_OscConfig+0x280>)
 80012ba:	4313      	orrs	r3, r2
 80012bc:	600b      	str	r3, [r1, #0]
 80012be:	e018      	b.n	80012f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012c0:	4b27      	ldr	r3, [pc, #156]	; (8001360 <HAL_RCC_OscConfig+0x280>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a26      	ldr	r2, [pc, #152]	; (8001360 <HAL_RCC_OscConfig+0x280>)
 80012c6:	f023 0301 	bic.w	r3, r3, #1
 80012ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012cc:	f7ff fc2c 	bl	8000b28 <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012d4:	f7ff fc28 	bl	8000b28 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e1a3      	b.n	800162e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e6:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <HAL_RCC_OscConfig+0x280>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1f0      	bne.n	80012d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0308 	and.w	r3, r3, #8
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d038      	beq.n	8001370 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d019      	beq.n	800133a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001306:	4b16      	ldr	r3, [pc, #88]	; (8001360 <HAL_RCC_OscConfig+0x280>)
 8001308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800130a:	4a15      	ldr	r2, [pc, #84]	; (8001360 <HAL_RCC_OscConfig+0x280>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001312:	f7ff fc09 	bl	8000b28 <HAL_GetTick>
 8001316:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001318:	e008      	b.n	800132c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800131a:	f7ff fc05 	bl	8000b28 <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e180      	b.n	800162e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <HAL_RCC_OscConfig+0x280>)
 800132e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0f0      	beq.n	800131a <HAL_RCC_OscConfig+0x23a>
 8001338:	e01a      	b.n	8001370 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <HAL_RCC_OscConfig+0x280>)
 800133c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800133e:	4a08      	ldr	r2, [pc, #32]	; (8001360 <HAL_RCC_OscConfig+0x280>)
 8001340:	f023 0301 	bic.w	r3, r3, #1
 8001344:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001346:	f7ff fbef 	bl	8000b28 <HAL_GetTick>
 800134a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800134c:	e00a      	b.n	8001364 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800134e:	f7ff fbeb 	bl	8000b28 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d903      	bls.n	8001364 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e166      	b.n	800162e <HAL_RCC_OscConfig+0x54e>
 8001360:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001364:	4b92      	ldr	r3, [pc, #584]	; (80015b0 <HAL_RCC_OscConfig+0x4d0>)
 8001366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1ee      	bne.n	800134e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0304 	and.w	r3, r3, #4
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 80a4 	beq.w	80014c6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800137e:	4b8c      	ldr	r3, [pc, #560]	; (80015b0 <HAL_RCC_OscConfig+0x4d0>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10d      	bne.n	80013a6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800138a:	4b89      	ldr	r3, [pc, #548]	; (80015b0 <HAL_RCC_OscConfig+0x4d0>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	4a88      	ldr	r2, [pc, #544]	; (80015b0 <HAL_RCC_OscConfig+0x4d0>)
 8001390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001394:	6413      	str	r3, [r2, #64]	; 0x40
 8001396:	4b86      	ldr	r3, [pc, #536]	; (80015b0 <HAL_RCC_OscConfig+0x4d0>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013a2:	2301      	movs	r3, #1
 80013a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013a6:	4b83      	ldr	r3, [pc, #524]	; (80015b4 <HAL_RCC_OscConfig+0x4d4>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d118      	bne.n	80013e4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80013b2:	4b80      	ldr	r3, [pc, #512]	; (80015b4 <HAL_RCC_OscConfig+0x4d4>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a7f      	ldr	r2, [pc, #508]	; (80015b4 <HAL_RCC_OscConfig+0x4d4>)
 80013b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013be:	f7ff fbb3 	bl	8000b28 <HAL_GetTick>
 80013c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013c4:	e008      	b.n	80013d8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013c6:	f7ff fbaf 	bl	8000b28 <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b64      	cmp	r3, #100	; 0x64
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e12a      	b.n	800162e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013d8:	4b76      	ldr	r3, [pc, #472]	; (80015b4 <HAL_RCC_OscConfig+0x4d4>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d0f0      	beq.n	80013c6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d106      	bne.n	80013fa <HAL_RCC_OscConfig+0x31a>
 80013ec:	4b70      	ldr	r3, [pc, #448]	; (80015b0 <HAL_RCC_OscConfig+0x4d0>)
 80013ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f0:	4a6f      	ldr	r2, [pc, #444]	; (80015b0 <HAL_RCC_OscConfig+0x4d0>)
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	6713      	str	r3, [r2, #112]	; 0x70
 80013f8:	e02d      	b.n	8001456 <HAL_RCC_OscConfig+0x376>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10c      	bne.n	800141c <HAL_RCC_OscConfig+0x33c>
 8001402:	4b6b      	ldr	r3, [pc, #428]	; (80015b0 <HAL_RCC_OscConfig+0x4d0>)
 8001404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001406:	4a6a      	ldr	r2, [pc, #424]	; (80015b0 <HAL_RCC_OscConfig+0x4d0>)
 8001408:	f023 0301 	bic.w	r3, r3, #1
 800140c:	6713      	str	r3, [r2, #112]	; 0x70
 800140e:	4b68      	ldr	r3, [pc, #416]	; (80015b0 <HAL_RCC_OscConfig+0x4d0>)
 8001410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001412:	4a67      	ldr	r2, [pc, #412]	; (80015b0 <HAL_RCC_OscConfig+0x4d0>)
 8001414:	f023 0304 	bic.w	r3, r3, #4
 8001418:	6713      	str	r3, [r2, #112]	; 0x70
 800141a:	e01c      	b.n	8001456 <HAL_RCC_OscConfig+0x376>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	2b05      	cmp	r3, #5
 8001422:	d10c      	bne.n	800143e <HAL_RCC_OscConfig+0x35e>
 8001424:	4b62      	ldr	r3, [pc, #392]	; (80015b0 <HAL_RCC_OscConfig+0x4d0>)
 8001426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001428:	4a61      	ldr	r2, [pc, #388]	; (80015b0 <HAL_RCC_OscConfig+0x4d0>)
 800142a:	f043 0304 	orr.w	r3, r3, #4
 800142e:	6713      	str	r3, [r2, #112]	; 0x70
 8001430:	4b5f      	ldr	r3, [pc, #380]	; (80015b0 <HAL_RCC_OscConfig+0x4d0>)
 8001432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001434:	4a5e      	ldr	r2, [pc, #376]	; (80015b0 <HAL_RCC_OscConfig+0x4d0>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	6713      	str	r3, [r2, #112]	; 0x70
 800143c:	e00b      	b.n	8001456 <HAL_RCC_OscConfig+0x376>
 800143e:	4b5c      	ldr	r3, [pc, #368]	; (80015b0 <HAL_RCC_OscConfig+0x4d0>)
 8001440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001442:	4a5b      	ldr	r2, [pc, #364]	; (80015b0 <HAL_RCC_OscConfig+0x4d0>)
 8001444:	f023 0301 	bic.w	r3, r3, #1
 8001448:	6713      	str	r3, [r2, #112]	; 0x70
 800144a:	4b59      	ldr	r3, [pc, #356]	; (80015b0 <HAL_RCC_OscConfig+0x4d0>)
 800144c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800144e:	4a58      	ldr	r2, [pc, #352]	; (80015b0 <HAL_RCC_OscConfig+0x4d0>)
 8001450:	f023 0304 	bic.w	r3, r3, #4
 8001454:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d015      	beq.n	800148a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800145e:	f7ff fb63 	bl	8000b28 <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001464:	e00a      	b.n	800147c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001466:	f7ff fb5f 	bl	8000b28 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	f241 3288 	movw	r2, #5000	; 0x1388
 8001474:	4293      	cmp	r3, r2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e0d8      	b.n	800162e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800147c:	4b4c      	ldr	r3, [pc, #304]	; (80015b0 <HAL_RCC_OscConfig+0x4d0>)
 800147e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d0ee      	beq.n	8001466 <HAL_RCC_OscConfig+0x386>
 8001488:	e014      	b.n	80014b4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800148a:	f7ff fb4d 	bl	8000b28 <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001490:	e00a      	b.n	80014a8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001492:	f7ff fb49 	bl	8000b28 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e0c2      	b.n	800162e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014a8:	4b41      	ldr	r3, [pc, #260]	; (80015b0 <HAL_RCC_OscConfig+0x4d0>)
 80014aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1ee      	bne.n	8001492 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80014b4:	7dfb      	ldrb	r3, [r7, #23]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d105      	bne.n	80014c6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014ba:	4b3d      	ldr	r3, [pc, #244]	; (80015b0 <HAL_RCC_OscConfig+0x4d0>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	4a3c      	ldr	r2, [pc, #240]	; (80015b0 <HAL_RCC_OscConfig+0x4d0>)
 80014c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 80ae 	beq.w	800162c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014d0:	4b37      	ldr	r3, [pc, #220]	; (80015b0 <HAL_RCC_OscConfig+0x4d0>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f003 030c 	and.w	r3, r3, #12
 80014d8:	2b08      	cmp	r3, #8
 80014da:	d06d      	beq.n	80015b8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d14b      	bne.n	800157c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e4:	4b32      	ldr	r3, [pc, #200]	; (80015b0 <HAL_RCC_OscConfig+0x4d0>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a31      	ldr	r2, [pc, #196]	; (80015b0 <HAL_RCC_OscConfig+0x4d0>)
 80014ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f0:	f7ff fb1a 	bl	8000b28 <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014f8:	f7ff fb16 	bl	8000b28 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e091      	b.n	800162e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800150a:	4b29      	ldr	r3, [pc, #164]	; (80015b0 <HAL_RCC_OscConfig+0x4d0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1f0      	bne.n	80014f8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	69da      	ldr	r2, [r3, #28]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a1b      	ldr	r3, [r3, #32]
 800151e:	431a      	orrs	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001524:	019b      	lsls	r3, r3, #6
 8001526:	431a      	orrs	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152c:	085b      	lsrs	r3, r3, #1
 800152e:	3b01      	subs	r3, #1
 8001530:	041b      	lsls	r3, r3, #16
 8001532:	431a      	orrs	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001538:	061b      	lsls	r3, r3, #24
 800153a:	431a      	orrs	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001540:	071b      	lsls	r3, r3, #28
 8001542:	491b      	ldr	r1, [pc, #108]	; (80015b0 <HAL_RCC_OscConfig+0x4d0>)
 8001544:	4313      	orrs	r3, r2
 8001546:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001548:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <HAL_RCC_OscConfig+0x4d0>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a18      	ldr	r2, [pc, #96]	; (80015b0 <HAL_RCC_OscConfig+0x4d0>)
 800154e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001552:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001554:	f7ff fae8 	bl	8000b28 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800155c:	f7ff fae4 	bl	8000b28 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e05f      	b.n	800162e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <HAL_RCC_OscConfig+0x4d0>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0f0      	beq.n	800155c <HAL_RCC_OscConfig+0x47c>
 800157a:	e057      	b.n	800162c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <HAL_RCC_OscConfig+0x4d0>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a0b      	ldr	r2, [pc, #44]	; (80015b0 <HAL_RCC_OscConfig+0x4d0>)
 8001582:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001586:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001588:	f7ff face 	bl	8000b28 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001590:	f7ff faca 	bl	8000b28 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e045      	b.n	800162e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a2:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <HAL_RCC_OscConfig+0x4d0>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1f0      	bne.n	8001590 <HAL_RCC_OscConfig+0x4b0>
 80015ae:	e03d      	b.n	800162c <HAL_RCC_OscConfig+0x54c>
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80015b8:	4b1f      	ldr	r3, [pc, #124]	; (8001638 <HAL_RCC_OscConfig+0x558>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d030      	beq.n	8001628 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d129      	bne.n	8001628 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015de:	429a      	cmp	r2, r3
 80015e0:	d122      	bne.n	8001628 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015e8:	4013      	ands	r3, r2
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015ee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d119      	bne.n	8001628 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fe:	085b      	lsrs	r3, r3, #1
 8001600:	3b01      	subs	r3, #1
 8001602:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001604:	429a      	cmp	r2, r3
 8001606:	d10f      	bne.n	8001628 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001612:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001614:	429a      	cmp	r2, r3
 8001616:	d107      	bne.n	8001628 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001624:	429a      	cmp	r2, r3
 8001626:	d001      	beq.n	800162c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e000      	b.n	800162e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40023800 	.word	0x40023800

0800163c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e0d0      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001654:	4b6a      	ldr	r3, [pc, #424]	; (8001800 <HAL_RCC_ClockConfig+0x1c4>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 030f 	and.w	r3, r3, #15
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	429a      	cmp	r2, r3
 8001660:	d910      	bls.n	8001684 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001662:	4b67      	ldr	r3, [pc, #412]	; (8001800 <HAL_RCC_ClockConfig+0x1c4>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f023 020f 	bic.w	r2, r3, #15
 800166a:	4965      	ldr	r1, [pc, #404]	; (8001800 <HAL_RCC_ClockConfig+0x1c4>)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	4313      	orrs	r3, r2
 8001670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001672:	4b63      	ldr	r3, [pc, #396]	; (8001800 <HAL_RCC_ClockConfig+0x1c4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	429a      	cmp	r2, r3
 800167e:	d001      	beq.n	8001684 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e0b8      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d020      	beq.n	80016d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	2b00      	cmp	r3, #0
 800169a:	d005      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800169c:	4b59      	ldr	r3, [pc, #356]	; (8001804 <HAL_RCC_ClockConfig+0x1c8>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	4a58      	ldr	r2, [pc, #352]	; (8001804 <HAL_RCC_ClockConfig+0x1c8>)
 80016a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0308 	and.w	r3, r3, #8
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016b4:	4b53      	ldr	r3, [pc, #332]	; (8001804 <HAL_RCC_ClockConfig+0x1c8>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	4a52      	ldr	r2, [pc, #328]	; (8001804 <HAL_RCC_ClockConfig+0x1c8>)
 80016ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016c0:	4b50      	ldr	r3, [pc, #320]	; (8001804 <HAL_RCC_ClockConfig+0x1c8>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	494d      	ldr	r1, [pc, #308]	; (8001804 <HAL_RCC_ClockConfig+0x1c8>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d040      	beq.n	8001760 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d107      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e6:	4b47      	ldr	r3, [pc, #284]	; (8001804 <HAL_RCC_ClockConfig+0x1c8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d115      	bne.n	800171e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e07f      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d107      	bne.n	800170e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016fe:	4b41      	ldr	r3, [pc, #260]	; (8001804 <HAL_RCC_ClockConfig+0x1c8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d109      	bne.n	800171e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e073      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800170e:	4b3d      	ldr	r3, [pc, #244]	; (8001804 <HAL_RCC_ClockConfig+0x1c8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e06b      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800171e:	4b39      	ldr	r3, [pc, #228]	; (8001804 <HAL_RCC_ClockConfig+0x1c8>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f023 0203 	bic.w	r2, r3, #3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	4936      	ldr	r1, [pc, #216]	; (8001804 <HAL_RCC_ClockConfig+0x1c8>)
 800172c:	4313      	orrs	r3, r2
 800172e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001730:	f7ff f9fa 	bl	8000b28 <HAL_GetTick>
 8001734:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001736:	e00a      	b.n	800174e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001738:	f7ff f9f6 	bl	8000b28 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	f241 3288 	movw	r2, #5000	; 0x1388
 8001746:	4293      	cmp	r3, r2
 8001748:	d901      	bls.n	800174e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e053      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800174e:	4b2d      	ldr	r3, [pc, #180]	; (8001804 <HAL_RCC_ClockConfig+0x1c8>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 020c 	and.w	r2, r3, #12
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	429a      	cmp	r2, r3
 800175e:	d1eb      	bne.n	8001738 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001760:	4b27      	ldr	r3, [pc, #156]	; (8001800 <HAL_RCC_ClockConfig+0x1c4>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 030f 	and.w	r3, r3, #15
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	429a      	cmp	r2, r3
 800176c:	d210      	bcs.n	8001790 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176e:	4b24      	ldr	r3, [pc, #144]	; (8001800 <HAL_RCC_ClockConfig+0x1c4>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f023 020f 	bic.w	r2, r3, #15
 8001776:	4922      	ldr	r1, [pc, #136]	; (8001800 <HAL_RCC_ClockConfig+0x1c4>)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	4313      	orrs	r3, r2
 800177c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800177e:	4b20      	ldr	r3, [pc, #128]	; (8001800 <HAL_RCC_ClockConfig+0x1c4>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 030f 	and.w	r3, r3, #15
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	429a      	cmp	r2, r3
 800178a:	d001      	beq.n	8001790 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e032      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	2b00      	cmp	r3, #0
 800179a:	d008      	beq.n	80017ae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800179c:	4b19      	ldr	r3, [pc, #100]	; (8001804 <HAL_RCC_ClockConfig+0x1c8>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	4916      	ldr	r1, [pc, #88]	; (8001804 <HAL_RCC_ClockConfig+0x1c8>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0308 	and.w	r3, r3, #8
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d009      	beq.n	80017ce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017ba:	4b12      	ldr	r3, [pc, #72]	; (8001804 <HAL_RCC_ClockConfig+0x1c8>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	490e      	ldr	r1, [pc, #56]	; (8001804 <HAL_RCC_ClockConfig+0x1c8>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017ce:	f000 f821 	bl	8001814 <HAL_RCC_GetSysClockFreq>
 80017d2:	4602      	mov	r2, r0
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <HAL_RCC_ClockConfig+0x1c8>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	091b      	lsrs	r3, r3, #4
 80017da:	f003 030f 	and.w	r3, r3, #15
 80017de:	490a      	ldr	r1, [pc, #40]	; (8001808 <HAL_RCC_ClockConfig+0x1cc>)
 80017e0:	5ccb      	ldrb	r3, [r1, r3]
 80017e2:	fa22 f303 	lsr.w	r3, r2, r3
 80017e6:	4a09      	ldr	r2, [pc, #36]	; (800180c <HAL_RCC_ClockConfig+0x1d0>)
 80017e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017ea:	4b09      	ldr	r3, [pc, #36]	; (8001810 <HAL_RCC_ClockConfig+0x1d4>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff f956 	bl	8000aa0 <HAL_InitTick>

  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40023c00 	.word	0x40023c00
 8001804:	40023800 	.word	0x40023800
 8001808:	080031a0 	.word	0x080031a0
 800180c:	20000000 	.word	0x20000000
 8001810:	20000004 	.word	0x20000004

08001814 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001814:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001818:	b090      	sub	sp, #64	; 0x40
 800181a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	637b      	str	r3, [r7, #52]	; 0x34
 8001820:	2300      	movs	r3, #0
 8001822:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001824:	2300      	movs	r3, #0
 8001826:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001828:	2300      	movs	r3, #0
 800182a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800182c:	4b59      	ldr	r3, [pc, #356]	; (8001994 <HAL_RCC_GetSysClockFreq+0x180>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 030c 	and.w	r3, r3, #12
 8001834:	2b08      	cmp	r3, #8
 8001836:	d00d      	beq.n	8001854 <HAL_RCC_GetSysClockFreq+0x40>
 8001838:	2b08      	cmp	r3, #8
 800183a:	f200 80a1 	bhi.w	8001980 <HAL_RCC_GetSysClockFreq+0x16c>
 800183e:	2b00      	cmp	r3, #0
 8001840:	d002      	beq.n	8001848 <HAL_RCC_GetSysClockFreq+0x34>
 8001842:	2b04      	cmp	r3, #4
 8001844:	d003      	beq.n	800184e <HAL_RCC_GetSysClockFreq+0x3a>
 8001846:	e09b      	b.n	8001980 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001848:	4b53      	ldr	r3, [pc, #332]	; (8001998 <HAL_RCC_GetSysClockFreq+0x184>)
 800184a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800184c:	e09b      	b.n	8001986 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800184e:	4b53      	ldr	r3, [pc, #332]	; (800199c <HAL_RCC_GetSysClockFreq+0x188>)
 8001850:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001852:	e098      	b.n	8001986 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001854:	4b4f      	ldr	r3, [pc, #316]	; (8001994 <HAL_RCC_GetSysClockFreq+0x180>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800185c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800185e:	4b4d      	ldr	r3, [pc, #308]	; (8001994 <HAL_RCC_GetSysClockFreq+0x180>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d028      	beq.n	80018bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800186a:	4b4a      	ldr	r3, [pc, #296]	; (8001994 <HAL_RCC_GetSysClockFreq+0x180>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	099b      	lsrs	r3, r3, #6
 8001870:	2200      	movs	r2, #0
 8001872:	623b      	str	r3, [r7, #32]
 8001874:	627a      	str	r2, [r7, #36]	; 0x24
 8001876:	6a3b      	ldr	r3, [r7, #32]
 8001878:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800187c:	2100      	movs	r1, #0
 800187e:	4b47      	ldr	r3, [pc, #284]	; (800199c <HAL_RCC_GetSysClockFreq+0x188>)
 8001880:	fb03 f201 	mul.w	r2, r3, r1
 8001884:	2300      	movs	r3, #0
 8001886:	fb00 f303 	mul.w	r3, r0, r3
 800188a:	4413      	add	r3, r2
 800188c:	4a43      	ldr	r2, [pc, #268]	; (800199c <HAL_RCC_GetSysClockFreq+0x188>)
 800188e:	fba0 1202 	umull	r1, r2, r0, r2
 8001892:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001894:	460a      	mov	r2, r1
 8001896:	62ba      	str	r2, [r7, #40]	; 0x28
 8001898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800189a:	4413      	add	r3, r2
 800189c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800189e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018a0:	2200      	movs	r2, #0
 80018a2:	61bb      	str	r3, [r7, #24]
 80018a4:	61fa      	str	r2, [r7, #28]
 80018a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80018ae:	f7fe fd1f 	bl	80002f0 <__aeabi_uldivmod>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4613      	mov	r3, r2
 80018b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018ba:	e053      	b.n	8001964 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018bc:	4b35      	ldr	r3, [pc, #212]	; (8001994 <HAL_RCC_GetSysClockFreq+0x180>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	099b      	lsrs	r3, r3, #6
 80018c2:	2200      	movs	r2, #0
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	617a      	str	r2, [r7, #20]
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80018ce:	f04f 0b00 	mov.w	fp, #0
 80018d2:	4652      	mov	r2, sl
 80018d4:	465b      	mov	r3, fp
 80018d6:	f04f 0000 	mov.w	r0, #0
 80018da:	f04f 0100 	mov.w	r1, #0
 80018de:	0159      	lsls	r1, r3, #5
 80018e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018e4:	0150      	lsls	r0, r2, #5
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	ebb2 080a 	subs.w	r8, r2, sl
 80018ee:	eb63 090b 	sbc.w	r9, r3, fp
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	f04f 0300 	mov.w	r3, #0
 80018fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80018fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001902:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001906:	ebb2 0408 	subs.w	r4, r2, r8
 800190a:	eb63 0509 	sbc.w	r5, r3, r9
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	f04f 0300 	mov.w	r3, #0
 8001916:	00eb      	lsls	r3, r5, #3
 8001918:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800191c:	00e2      	lsls	r2, r4, #3
 800191e:	4614      	mov	r4, r2
 8001920:	461d      	mov	r5, r3
 8001922:	eb14 030a 	adds.w	r3, r4, sl
 8001926:	603b      	str	r3, [r7, #0]
 8001928:	eb45 030b 	adc.w	r3, r5, fp
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	f04f 0300 	mov.w	r3, #0
 8001936:	e9d7 4500 	ldrd	r4, r5, [r7]
 800193a:	4629      	mov	r1, r5
 800193c:	028b      	lsls	r3, r1, #10
 800193e:	4621      	mov	r1, r4
 8001940:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001944:	4621      	mov	r1, r4
 8001946:	028a      	lsls	r2, r1, #10
 8001948:	4610      	mov	r0, r2
 800194a:	4619      	mov	r1, r3
 800194c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800194e:	2200      	movs	r2, #0
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	60fa      	str	r2, [r7, #12]
 8001954:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001958:	f7fe fcca 	bl	80002f0 <__aeabi_uldivmod>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4613      	mov	r3, r2
 8001962:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001964:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <HAL_RCC_GetSysClockFreq+0x180>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	0c1b      	lsrs	r3, r3, #16
 800196a:	f003 0303 	and.w	r3, r3, #3
 800196e:	3301      	adds	r3, #1
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001974:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001978:	fbb2 f3f3 	udiv	r3, r2, r3
 800197c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800197e:	e002      	b.n	8001986 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001980:	4b05      	ldr	r3, [pc, #20]	; (8001998 <HAL_RCC_GetSysClockFreq+0x184>)
 8001982:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001984:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001988:	4618      	mov	r0, r3
 800198a:	3740      	adds	r7, #64	; 0x40
 800198c:	46bd      	mov	sp, r7
 800198e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800
 8001998:	00f42400 	.word	0x00f42400
 800199c:	017d7840 	.word	0x017d7840

080019a0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019a4:	4b03      	ldr	r3, [pc, #12]	; (80019b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80019a6:	681b      	ldr	r3, [r3, #0]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	20000000 	.word	0x20000000

080019b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019bc:	f7ff fff0 	bl	80019a0 <HAL_RCC_GetHCLKFreq>
 80019c0:	4602      	mov	r2, r0
 80019c2:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	0a9b      	lsrs	r3, r3, #10
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	4903      	ldr	r1, [pc, #12]	; (80019dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80019ce:	5ccb      	ldrb	r3, [r1, r3]
 80019d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40023800 	.word	0x40023800
 80019dc:	080031b0 	.word	0x080031b0

080019e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019e4:	f7ff ffdc 	bl	80019a0 <HAL_RCC_GetHCLKFreq>
 80019e8:	4602      	mov	r2, r0
 80019ea:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	0b5b      	lsrs	r3, r3, #13
 80019f0:	f003 0307 	and.w	r3, r3, #7
 80019f4:	4903      	ldr	r1, [pc, #12]	; (8001a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019f6:	5ccb      	ldrb	r3, [r1, r3]
 80019f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40023800 	.word	0x40023800
 8001a04:	080031b0 	.word	0x080031b0

08001a08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b088      	sub	sp, #32
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d012      	beq.n	8001a56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001a30:	4b69      	ldr	r3, [pc, #420]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	4a68      	ldr	r2, [pc, #416]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a36:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a3a:	6093      	str	r3, [r2, #8]
 8001a3c:	4b66      	ldr	r3, [pc, #408]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a44:	4964      	ldr	r1, [pc, #400]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001a52:	2301      	movs	r3, #1
 8001a54:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d017      	beq.n	8001a92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001a62:	4b5d      	ldr	r3, [pc, #372]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a70:	4959      	ldr	r1, [pc, #356]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a80:	d101      	bne.n	8001a86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001a82:	2301      	movs	r3, #1
 8001a84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d017      	beq.n	8001ace <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001a9e:	4b4e      	ldr	r3, [pc, #312]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001aa4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aac:	494a      	ldr	r1, [pc, #296]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001abc:	d101      	bne.n	8001ac2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001aca:	2301      	movs	r3, #1
 8001acc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001ada:	2301      	movs	r3, #1
 8001adc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0320 	and.w	r3, r3, #32
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f000 808b 	beq.w	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001aec:	4b3a      	ldr	r3, [pc, #232]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af0:	4a39      	ldr	r2, [pc, #228]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af6:	6413      	str	r3, [r2, #64]	; 0x40
 8001af8:	4b37      	ldr	r3, [pc, #220]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001b04:	4b35      	ldr	r3, [pc, #212]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a34      	ldr	r2, [pc, #208]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b10:	f7ff f80a 	bl	8000b28 <HAL_GetTick>
 8001b14:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001b16:	e008      	b.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b18:	f7ff f806 	bl	8000b28 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b64      	cmp	r3, #100	; 0x64
 8001b24:	d901      	bls.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e38f      	b.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001b2a:	4b2c      	ldr	r3, [pc, #176]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d0f0      	beq.n	8001b18 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b36:	4b28      	ldr	r3, [pc, #160]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b3e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d035      	beq.n	8001bb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d02e      	beq.n	8001bb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b54:	4b20      	ldr	r3, [pc, #128]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b5c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b5e:	4b1e      	ldr	r3, [pc, #120]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b62:	4a1d      	ldr	r2, [pc, #116]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b68:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b6a:	4b1b      	ldr	r3, [pc, #108]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6e:	4a1a      	ldr	r2, [pc, #104]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b74:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001b76:	4a18      	ldr	r2, [pc, #96]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001b7c:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d114      	bne.n	8001bb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b88:	f7fe ffce 	bl	8000b28 <HAL_GetTick>
 8001b8c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b8e:	e00a      	b.n	8001ba6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b90:	f7fe ffca 	bl	8000b28 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e351      	b.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba6:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0ee      	beq.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001bbe:	d111      	bne.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bcc:	4b04      	ldr	r3, [pc, #16]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001bce:	400b      	ands	r3, r1
 8001bd0:	4901      	ldr	r1, [pc, #4]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	608b      	str	r3, [r1, #8]
 8001bd6:	e00b      	b.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40007000 	.word	0x40007000
 8001be0:	0ffffcff 	.word	0x0ffffcff
 8001be4:	4bac      	ldr	r3, [pc, #688]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	4aab      	ldr	r2, [pc, #684]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001bea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001bee:	6093      	str	r3, [r2, #8]
 8001bf0:	4ba9      	ldr	r3, [pc, #676]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001bf2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bfc:	49a6      	ldr	r1, [pc, #664]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0310 	and.w	r3, r3, #16
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d010      	beq.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001c0e:	4ba2      	ldr	r3, [pc, #648]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c14:	4aa0      	ldr	r2, [pc, #640]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001c1e:	4b9e      	ldr	r3, [pc, #632]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c20:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c28:	499b      	ldr	r1, [pc, #620]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d00a      	beq.n	8001c52 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c3c:	4b96      	ldr	r3, [pc, #600]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c4a:	4993      	ldr	r1, [pc, #588]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00a      	beq.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001c5e:	4b8e      	ldr	r3, [pc, #568]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c6c:	498a      	ldr	r1, [pc, #552]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00a      	beq.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001c80:	4b85      	ldr	r3, [pc, #532]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c8e:	4982      	ldr	r1, [pc, #520]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00a      	beq.n	8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001ca2:	4b7d      	ldr	r3, [pc, #500]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb0:	4979      	ldr	r1, [pc, #484]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d00a      	beq.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001cc4:	4b74      	ldr	r3, [pc, #464]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cca:	f023 0203 	bic.w	r2, r3, #3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd2:	4971      	ldr	r1, [pc, #452]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d00a      	beq.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ce6:	4b6c      	ldr	r3, [pc, #432]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cec:	f023 020c 	bic.w	r2, r3, #12
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cf4:	4968      	ldr	r1, [pc, #416]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d00a      	beq.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d08:	4b63      	ldr	r3, [pc, #396]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d0e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d16:	4960      	ldr	r1, [pc, #384]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00a      	beq.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001d2a:	4b5b      	ldr	r3, [pc, #364]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d30:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d38:	4957      	ldr	r1, [pc, #348]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d00a      	beq.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001d4c:	4b52      	ldr	r3, [pc, #328]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d5a:	494f      	ldr	r1, [pc, #316]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d00a      	beq.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001d6e:	4b4a      	ldr	r3, [pc, #296]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7c:	4946      	ldr	r1, [pc, #280]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d00a      	beq.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001d90:	4b41      	ldr	r3, [pc, #260]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9e:	493e      	ldr	r1, [pc, #248]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00a      	beq.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001db2:	4b39      	ldr	r3, [pc, #228]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dc0:	4935      	ldr	r1, [pc, #212]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d00a      	beq.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001dd4:	4b30      	ldr	r3, [pc, #192]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dda:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001de2:	492d      	ldr	r1, [pc, #180]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d011      	beq.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001df6:	4b28      	ldr	r3, [pc, #160]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dfc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e04:	4924      	ldr	r1, [pc, #144]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e14:	d101      	bne.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001e16:	2301      	movs	r3, #1
 8001e18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0308 	and.w	r3, r3, #8
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001e26:	2301      	movs	r3, #1
 8001e28:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00a      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e36:	4b18      	ldr	r3, [pc, #96]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e44:	4914      	ldr	r1, [pc, #80]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00b      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001e58:	4b0f      	ldr	r3, [pc, #60]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e68:	490b      	ldr	r1, [pc, #44]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00f      	beq.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001e7c:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e82:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e8c:	4902      	ldr	r1, [pc, #8]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001e94:	e002      	b.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8001e96:	bf00      	nop
 8001e98:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d00b      	beq.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001ea8:	4b8a      	ldr	r3, [pc, #552]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001eaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001eae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb8:	4986      	ldr	r1, [pc, #536]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00b      	beq.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001ecc:	4b81      	ldr	r3, [pc, #516]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001ece:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ed2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001edc:	497d      	ldr	r1, [pc, #500]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d006      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f000 80d6 	beq.w	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001ef8:	4b76      	ldr	r3, [pc, #472]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a75      	ldr	r2, [pc, #468]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001efe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001f02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f04:	f7fe fe10 	bl	8000b28 <HAL_GetTick>
 8001f08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001f0c:	f7fe fe0c 	bl	8000b28 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b64      	cmp	r3, #100	; 0x64
 8001f18:	d901      	bls.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e195      	b.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f1e:	4b6d      	ldr	r3, [pc, #436]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f0      	bne.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d021      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d11d      	bne.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001f3e:	4b65      	ldr	r3, [pc, #404]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f44:	0c1b      	lsrs	r3, r3, #16
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001f4c:	4b61      	ldr	r3, [pc, #388]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f52:	0e1b      	lsrs	r3, r3, #24
 8001f54:	f003 030f 	and.w	r3, r3, #15
 8001f58:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	019a      	lsls	r2, r3, #6
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	041b      	lsls	r3, r3, #16
 8001f64:	431a      	orrs	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	061b      	lsls	r3, r3, #24
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	071b      	lsls	r3, r3, #28
 8001f72:	4958      	ldr	r1, [pc, #352]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d004      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f8e:	d00a      	beq.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d02e      	beq.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fa4:	d129      	bne.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001fa6:	4b4b      	ldr	r3, [pc, #300]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fac:	0c1b      	lsrs	r3, r3, #16
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001fb4:	4b47      	ldr	r3, [pc, #284]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fba:	0f1b      	lsrs	r3, r3, #28
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	019a      	lsls	r2, r3, #6
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	041b      	lsls	r3, r3, #16
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	061b      	lsls	r3, r3, #24
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	071b      	lsls	r3, r3, #28
 8001fda:	493e      	ldr	r1, [pc, #248]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001fe2:	4b3c      	ldr	r3, [pc, #240]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fe8:	f023 021f 	bic.w	r2, r3, #31
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	4938      	ldr	r1, [pc, #224]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d01d      	beq.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002006:	4b33      	ldr	r3, [pc, #204]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002008:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800200c:	0e1b      	lsrs	r3, r3, #24
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002014:	4b2f      	ldr	r3, [pc, #188]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002016:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800201a:	0f1b      	lsrs	r3, r3, #28
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	019a      	lsls	r2, r3, #6
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	041b      	lsls	r3, r3, #16
 800202e:	431a      	orrs	r2, r3
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	061b      	lsls	r3, r3, #24
 8002034:	431a      	orrs	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	071b      	lsls	r3, r3, #28
 800203a:	4926      	ldr	r1, [pc, #152]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800203c:	4313      	orrs	r3, r2
 800203e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d011      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	019a      	lsls	r2, r3, #6
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	041b      	lsls	r3, r3, #16
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	061b      	lsls	r3, r3, #24
 8002062:	431a      	orrs	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	071b      	lsls	r3, r3, #28
 800206a:	491a      	ldr	r1, [pc, #104]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800206c:	4313      	orrs	r3, r2
 800206e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002072:	4b18      	ldr	r3, [pc, #96]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a17      	ldr	r2, [pc, #92]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002078:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800207c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800207e:	f7fe fd53 	bl	8000b28 <HAL_GetTick>
 8002082:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002084:	e008      	b.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002086:	f7fe fd4f 	bl	8000b28 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b64      	cmp	r3, #100	; 0x64
 8002092:	d901      	bls.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e0d8      	b.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002098:	4b0e      	ldr	r3, [pc, #56]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0f0      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	f040 80ce 	bne.w	8002248 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80020ac:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a08      	ldr	r2, [pc, #32]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020b8:	f7fe fd36 	bl	8000b28 <HAL_GetTick>
 80020bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80020be:	e00b      	b.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80020c0:	f7fe fd32 	bl	8000b28 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b64      	cmp	r3, #100	; 0x64
 80020cc:	d904      	bls.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e0bb      	b.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80020d2:	bf00      	nop
 80020d4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80020d8:	4b5e      	ldr	r3, [pc, #376]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020e4:	d0ec      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d009      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002102:	2b00      	cmp	r3, #0
 8002104:	d02e      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	2b00      	cmp	r3, #0
 800210c:	d12a      	bne.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800210e:	4b51      	ldr	r3, [pc, #324]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002114:	0c1b      	lsrs	r3, r3, #16
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800211c:	4b4d      	ldr	r3, [pc, #308]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800211e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002122:	0f1b      	lsrs	r3, r3, #28
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	019a      	lsls	r2, r3, #6
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	041b      	lsls	r3, r3, #16
 8002134:	431a      	orrs	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	061b      	lsls	r3, r3, #24
 800213c:	431a      	orrs	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	071b      	lsls	r3, r3, #28
 8002142:	4944      	ldr	r1, [pc, #272]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002144:	4313      	orrs	r3, r2
 8002146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800214a:	4b42      	ldr	r3, [pc, #264]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800214c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002150:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002158:	3b01      	subs	r3, #1
 800215a:	021b      	lsls	r3, r3, #8
 800215c:	493d      	ldr	r1, [pc, #244]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800215e:	4313      	orrs	r3, r2
 8002160:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d022      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002174:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002178:	d11d      	bne.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800217a:	4b36      	ldr	r3, [pc, #216]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800217c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002180:	0e1b      	lsrs	r3, r3, #24
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002188:	4b32      	ldr	r3, [pc, #200]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800218a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800218e:	0f1b      	lsrs	r3, r3, #28
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	019a      	lsls	r2, r3, #6
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	041b      	lsls	r3, r3, #16
 80021a2:	431a      	orrs	r2, r3
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	061b      	lsls	r3, r3, #24
 80021a8:	431a      	orrs	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	071b      	lsls	r3, r3, #28
 80021ae:	4929      	ldr	r1, [pc, #164]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0308 	and.w	r3, r3, #8
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d028      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80021c2:	4b24      	ldr	r3, [pc, #144]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c8:	0e1b      	lsrs	r3, r3, #24
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80021d0:	4b20      	ldr	r3, [pc, #128]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d6:	0c1b      	lsrs	r3, r3, #16
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	019a      	lsls	r2, r3, #6
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	041b      	lsls	r3, r3, #16
 80021e8:	431a      	orrs	r2, r3
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	061b      	lsls	r3, r3, #24
 80021ee:	431a      	orrs	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	071b      	lsls	r3, r3, #28
 80021f6:	4917      	ldr	r1, [pc, #92]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80021fe:	4b15      	ldr	r3, [pc, #84]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002204:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220c:	4911      	ldr	r1, [pc, #68]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800220e:	4313      	orrs	r3, r2
 8002210:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002214:	4b0f      	ldr	r3, [pc, #60]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a0e      	ldr	r2, [pc, #56]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800221a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800221e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002220:	f7fe fc82 	bl	8000b28 <HAL_GetTick>
 8002224:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002226:	e008      	b.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002228:	f7fe fc7e 	bl	8000b28 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b64      	cmp	r3, #100	; 0x64
 8002234:	d901      	bls.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e007      	b.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800223a:	4b06      	ldr	r3, [pc, #24]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002242:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002246:	d1ef      	bne.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3720      	adds	r7, #32
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40023800 	.word	0x40023800

08002258 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e03c      	b.n	80022e4 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d106      	bne.n	8002284 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7fe fae2 	bl	8000848 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2202      	movs	r2, #2
 8002288:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0201 	bic.w	r2, r2, #1
 800229a:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f905 	bl	80024ac <USART_SetConfig>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d101      	bne.n	80022ac <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e01b      	b.n	80022e4 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80022ba:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689a      	ldr	r2, [r3, #8]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022ca:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f042 0201 	orr.w	r2, r2, #1
 80022da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f000 fa67 	bl	80027b0 <USART_CheckIdleState>
 80022e2:	4603      	mov	r3, r0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08a      	sub	sp, #40	; 0x28
 80022f0:	af02      	add	r7, sp, #8
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	603b      	str	r3, [r7, #0]
 80022f8:	4613      	mov	r3, r2
 80022fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b01      	cmp	r3, #1
 8002306:	f040 8095 	bne.w	8002434 <HAL_USART_Transmit+0x148>
  {
    if ((pTxData == NULL) || (Size == 0U))
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d002      	beq.n	8002316 <HAL_USART_Transmit+0x2a>
 8002310:	88fb      	ldrh	r3, [r7, #6]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e08d      	b.n	8002436 <HAL_USART_Transmit+0x14a>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002320:	2b01      	cmp	r3, #1
 8002322:	d101      	bne.n	8002328 <HAL_USART_Transmit+0x3c>
 8002324:	2302      	movs	r3, #2
 8002326:	e086      	b.n	8002436 <HAL_USART_Transmit+0x14a>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2212      	movs	r2, #18
 800233a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800233e:	f7fe fbf3 	bl	8000b28 <HAL_GetTick>
 8002342:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	88fa      	ldrh	r2, [r7, #6]
 8002348:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	88fa      	ldrh	r2, [r7, #6]
 800234e:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002358:	d108      	bne.n	800236c <HAL_USART_Transmit+0x80>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d104      	bne.n	800236c <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	61bb      	str	r3, [r7, #24]
 800236a:	e003      	b.n	8002374 <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8002370:	2300      	movs	r3, #0
 8002372:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 8002374:	e02a      	b.n	80023cc <HAL_USART_Transmit+0xe0>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	2200      	movs	r2, #0
 800237e:	2180      	movs	r1, #128	; 0x80
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f000 f85c 	bl	800243e <USART_WaitOnFlagUntilTimeout>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e052      	b.n	8002436 <HAL_USART_Transmit+0x14a>
      }
      if (ptxdata8bits == NULL)
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10b      	bne.n	80023ae <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	461a      	mov	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023a4:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	3302      	adds	r3, #2
 80023aa:	61bb      	str	r3, [r7, #24]
 80023ac:	e007      	b.n	80023be <HAL_USART_Transmit+0xd2>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	781a      	ldrb	r2, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	3301      	adds	r3, #1
 80023bc:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1cf      	bne.n	8002376 <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	2200      	movs	r2, #0
 80023de:	2140      	movs	r1, #64	; 0x40
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f000 f82c 	bl	800243e <USART_WaitOnFlagUntilTimeout>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <HAL_USART_Transmit+0x104>
    {
      return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e022      	b.n	8002436 <HAL_USART_Transmit+0x14a>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2240      	movs	r2, #64	; 0x40
 80023f6:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2208      	movs	r2, #8
 80023fe:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	699a      	ldr	r2, [r3, #24]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f042 0208 	orr.w	r2, r2, #8
 800240e:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	699a      	ldr	r2, [r3, #24]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f042 0210 	orr.w	r2, r2, #16
 800241e:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_OK;
 8002430:	2300      	movs	r3, #0
 8002432:	e000      	b.n	8002436 <HAL_USART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002434:	2302      	movs	r3, #2
  }
}
 8002436:	4618      	mov	r0, r3
 8002438:	3720      	adds	r7, #32
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b084      	sub	sp, #16
 8002442:	af00      	add	r7, sp, #0
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	603b      	str	r3, [r7, #0]
 800244a:	4613      	mov	r3, r2
 800244c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800244e:	e018      	b.n	8002482 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002456:	d014      	beq.n	8002482 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002458:	f7fe fb66 	bl	8000b28 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	429a      	cmp	r2, r3
 8002466:	d302      	bcc.n	800246e <USART_WaitOnFlagUntilTimeout+0x30>
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d109      	bne.n	8002482 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2201      	movs	r2, #1
 8002472:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e00f      	b.n	80024a2 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	69da      	ldr	r2, [r3, #28]
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	4013      	ands	r3, r2
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	429a      	cmp	r2, r3
 8002490:	bf0c      	ite	eq
 8002492:	2301      	moveq	r3, #1
 8002494:	2300      	movne	r3, #0
 8002496:	b2db      	uxtb	r3, r3
 8002498:	461a      	mov	r2, r3
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	429a      	cmp	r2, r3
 800249e:	d0d7      	beq.n	8002450 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
	...

080024ac <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b088      	sub	sp, #32
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 80024b8:	2300      	movs	r3, #0
 80024ba:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	431a      	orrs	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4ba7      	ldr	r3, [pc, #668]	; (8002778 <USART_SetConfig+0x2cc>)
 80024da:	4013      	ands	r3, r2
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6812      	ldr	r2, [r2, #0]
 80024e0:	6979      	ldr	r1, [r7, #20]
 80024e2:	430b      	orrs	r3, r1
 80024e4:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL and STOP bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 80024e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024ea:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	699a      	ldr	r2, [r3, #24]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	4313      	orrs	r3, r2
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	4313      	orrs	r3, r2
 8002504:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	4313      	orrs	r3, r2
 800250e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	430a      	orrs	r2, r1
 8002522:	605a      	str	r2, [r3, #4]


  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a94      	ldr	r2, [pc, #592]	; (800277c <USART_SetConfig+0x2d0>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d121      	bne.n	8002572 <USART_SetConfig+0xc6>
 800252e:	4b94      	ldr	r3, [pc, #592]	; (8002780 <USART_SetConfig+0x2d4>)
 8002530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002534:	f003 0303 	and.w	r3, r3, #3
 8002538:	2b03      	cmp	r3, #3
 800253a:	d817      	bhi.n	800256c <USART_SetConfig+0xc0>
 800253c:	a201      	add	r2, pc, #4	; (adr r2, 8002544 <USART_SetConfig+0x98>)
 800253e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002542:	bf00      	nop
 8002544:	08002555 	.word	0x08002555
 8002548:	08002561 	.word	0x08002561
 800254c:	0800255b 	.word	0x0800255b
 8002550:	08002567 	.word	0x08002567
 8002554:	2301      	movs	r3, #1
 8002556:	77fb      	strb	r3, [r7, #31]
 8002558:	e096      	b.n	8002688 <USART_SetConfig+0x1dc>
 800255a:	2302      	movs	r3, #2
 800255c:	77fb      	strb	r3, [r7, #31]
 800255e:	e093      	b.n	8002688 <USART_SetConfig+0x1dc>
 8002560:	2304      	movs	r3, #4
 8002562:	77fb      	strb	r3, [r7, #31]
 8002564:	e090      	b.n	8002688 <USART_SetConfig+0x1dc>
 8002566:	2308      	movs	r3, #8
 8002568:	77fb      	strb	r3, [r7, #31]
 800256a:	e08d      	b.n	8002688 <USART_SetConfig+0x1dc>
 800256c:	2310      	movs	r3, #16
 800256e:	77fb      	strb	r3, [r7, #31]
 8002570:	e08a      	b.n	8002688 <USART_SetConfig+0x1dc>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a83      	ldr	r2, [pc, #524]	; (8002784 <USART_SetConfig+0x2d8>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d132      	bne.n	80025e2 <USART_SetConfig+0x136>
 800257c:	4b80      	ldr	r3, [pc, #512]	; (8002780 <USART_SetConfig+0x2d4>)
 800257e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002582:	f003 030c 	and.w	r3, r3, #12
 8002586:	2b0c      	cmp	r3, #12
 8002588:	d828      	bhi.n	80025dc <USART_SetConfig+0x130>
 800258a:	a201      	add	r2, pc, #4	; (adr r2, 8002590 <USART_SetConfig+0xe4>)
 800258c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002590:	080025c5 	.word	0x080025c5
 8002594:	080025dd 	.word	0x080025dd
 8002598:	080025dd 	.word	0x080025dd
 800259c:	080025dd 	.word	0x080025dd
 80025a0:	080025d1 	.word	0x080025d1
 80025a4:	080025dd 	.word	0x080025dd
 80025a8:	080025dd 	.word	0x080025dd
 80025ac:	080025dd 	.word	0x080025dd
 80025b0:	080025cb 	.word	0x080025cb
 80025b4:	080025dd 	.word	0x080025dd
 80025b8:	080025dd 	.word	0x080025dd
 80025bc:	080025dd 	.word	0x080025dd
 80025c0:	080025d7 	.word	0x080025d7
 80025c4:	2300      	movs	r3, #0
 80025c6:	77fb      	strb	r3, [r7, #31]
 80025c8:	e05e      	b.n	8002688 <USART_SetConfig+0x1dc>
 80025ca:	2302      	movs	r3, #2
 80025cc:	77fb      	strb	r3, [r7, #31]
 80025ce:	e05b      	b.n	8002688 <USART_SetConfig+0x1dc>
 80025d0:	2304      	movs	r3, #4
 80025d2:	77fb      	strb	r3, [r7, #31]
 80025d4:	e058      	b.n	8002688 <USART_SetConfig+0x1dc>
 80025d6:	2308      	movs	r3, #8
 80025d8:	77fb      	strb	r3, [r7, #31]
 80025da:	e055      	b.n	8002688 <USART_SetConfig+0x1dc>
 80025dc:	2310      	movs	r3, #16
 80025de:	77fb      	strb	r3, [r7, #31]
 80025e0:	e052      	b.n	8002688 <USART_SetConfig+0x1dc>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a68      	ldr	r2, [pc, #416]	; (8002788 <USART_SetConfig+0x2dc>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d120      	bne.n	800262e <USART_SetConfig+0x182>
 80025ec:	4b64      	ldr	r3, [pc, #400]	; (8002780 <USART_SetConfig+0x2d4>)
 80025ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80025f6:	2b30      	cmp	r3, #48	; 0x30
 80025f8:	d013      	beq.n	8002622 <USART_SetConfig+0x176>
 80025fa:	2b30      	cmp	r3, #48	; 0x30
 80025fc:	d814      	bhi.n	8002628 <USART_SetConfig+0x17c>
 80025fe:	2b20      	cmp	r3, #32
 8002600:	d009      	beq.n	8002616 <USART_SetConfig+0x16a>
 8002602:	2b20      	cmp	r3, #32
 8002604:	d810      	bhi.n	8002628 <USART_SetConfig+0x17c>
 8002606:	2b00      	cmp	r3, #0
 8002608:	d002      	beq.n	8002610 <USART_SetConfig+0x164>
 800260a:	2b10      	cmp	r3, #16
 800260c:	d006      	beq.n	800261c <USART_SetConfig+0x170>
 800260e:	e00b      	b.n	8002628 <USART_SetConfig+0x17c>
 8002610:	2300      	movs	r3, #0
 8002612:	77fb      	strb	r3, [r7, #31]
 8002614:	e038      	b.n	8002688 <USART_SetConfig+0x1dc>
 8002616:	2302      	movs	r3, #2
 8002618:	77fb      	strb	r3, [r7, #31]
 800261a:	e035      	b.n	8002688 <USART_SetConfig+0x1dc>
 800261c:	2304      	movs	r3, #4
 800261e:	77fb      	strb	r3, [r7, #31]
 8002620:	e032      	b.n	8002688 <USART_SetConfig+0x1dc>
 8002622:	2308      	movs	r3, #8
 8002624:	77fb      	strb	r3, [r7, #31]
 8002626:	e02f      	b.n	8002688 <USART_SetConfig+0x1dc>
 8002628:	2310      	movs	r3, #16
 800262a:	77fb      	strb	r3, [r7, #31]
 800262c:	e02c      	b.n	8002688 <USART_SetConfig+0x1dc>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a56      	ldr	r2, [pc, #344]	; (800278c <USART_SetConfig+0x2e0>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d125      	bne.n	8002684 <USART_SetConfig+0x1d8>
 8002638:	4b51      	ldr	r3, [pc, #324]	; (8002780 <USART_SetConfig+0x2d4>)
 800263a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002642:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002646:	d017      	beq.n	8002678 <USART_SetConfig+0x1cc>
 8002648:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800264c:	d817      	bhi.n	800267e <USART_SetConfig+0x1d2>
 800264e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002652:	d00b      	beq.n	800266c <USART_SetConfig+0x1c0>
 8002654:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002658:	d811      	bhi.n	800267e <USART_SetConfig+0x1d2>
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <USART_SetConfig+0x1ba>
 800265e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002662:	d006      	beq.n	8002672 <USART_SetConfig+0x1c6>
 8002664:	e00b      	b.n	800267e <USART_SetConfig+0x1d2>
 8002666:	2301      	movs	r3, #1
 8002668:	77fb      	strb	r3, [r7, #31]
 800266a:	e00d      	b.n	8002688 <USART_SetConfig+0x1dc>
 800266c:	2302      	movs	r3, #2
 800266e:	77fb      	strb	r3, [r7, #31]
 8002670:	e00a      	b.n	8002688 <USART_SetConfig+0x1dc>
 8002672:	2304      	movs	r3, #4
 8002674:	77fb      	strb	r3, [r7, #31]
 8002676:	e007      	b.n	8002688 <USART_SetConfig+0x1dc>
 8002678:	2308      	movs	r3, #8
 800267a:	77fb      	strb	r3, [r7, #31]
 800267c:	e004      	b.n	8002688 <USART_SetConfig+0x1dc>
 800267e:	2310      	movs	r3, #16
 8002680:	77fb      	strb	r3, [r7, #31]
 8002682:	e001      	b.n	8002688 <USART_SetConfig+0x1dc>
 8002684:	2310      	movs	r3, #16
 8002686:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 8002688:	7ffb      	ldrb	r3, [r7, #31]
 800268a:	2b08      	cmp	r3, #8
 800268c:	d857      	bhi.n	800273e <USART_SetConfig+0x292>
 800268e:	a201      	add	r2, pc, #4	; (adr r2, 8002694 <USART_SetConfig+0x1e8>)
 8002690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002694:	080026b9 	.word	0x080026b9
 8002698:	080026d7 	.word	0x080026d7
 800269c:	080026f5 	.word	0x080026f5
 80026a0:	0800273f 	.word	0x0800273f
 80026a4:	0800270b 	.word	0x0800270b
 80026a8:	0800273f 	.word	0x0800273f
 80026ac:	0800273f 	.word	0x0800273f
 80026b0:	0800273f 	.word	0x0800273f
 80026b4:	08002729 	.word	0x08002729
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 80026b8:	f7ff f97e 	bl	80019b8 <HAL_RCC_GetPCLK1Freq>
 80026bc:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	005a      	lsls	r2, r3, #1
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	085b      	lsrs	r3, r3, #1
 80026c8:	441a      	add	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d2:	61bb      	str	r3, [r7, #24]
      break;
 80026d4:	e036      	b.n	8002744 <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 80026d6:	f7ff f983 	bl	80019e0 <HAL_RCC_GetPCLK2Freq>
 80026da:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	005a      	lsls	r2, r3, #1
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	085b      	lsrs	r3, r3, #1
 80026e6:	441a      	add	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f0:	61bb      	str	r3, [r7, #24]
      break;
 80026f2:	e027      	b.n	8002744 <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	085a      	lsrs	r2, r3, #1
 80026fa:	4b25      	ldr	r3, [pc, #148]	; (8002790 <USART_SetConfig+0x2e4>)
 80026fc:	4413      	add	r3, r2
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	6852      	ldr	r2, [r2, #4]
 8002702:	fbb3 f3f2 	udiv	r3, r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
      break;
 8002708:	e01c      	b.n	8002744 <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 800270a:	f7ff f883 	bl	8001814 <HAL_RCC_GetSysClockFreq>
 800270e:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	005a      	lsls	r2, r3, #1
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	085b      	lsrs	r3, r3, #1
 800271a:	441a      	add	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	fbb2 f3f3 	udiv	r3, r2, r3
 8002724:	61bb      	str	r3, [r7, #24]
      break;
 8002726:	e00d      	b.n	8002744 <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	085b      	lsrs	r3, r3, #1
 800272e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	fbb2 f3f3 	udiv	r3, r2, r3
 800273a:	61bb      	str	r3, [r7, #24]
      break;
 800273c:	e002      	b.n	8002744 <USART_SetConfig+0x298>
    default:
      ret = HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	77bb      	strb	r3, [r7, #30]
      break;
 8002742:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	2b0f      	cmp	r3, #15
 8002748:	d924      	bls.n	8002794 <USART_SetConfig+0x2e8>
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002750:	d220      	bcs.n	8002794 <USART_SetConfig+0x2e8>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	b29b      	uxth	r3, r3
 8002756:	f023 030f 	bic.w	r3, r3, #15
 800275a:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	085b      	lsrs	r3, r3, #1
 8002760:	b29b      	uxth	r3, r3
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	b29a      	uxth	r2, r3
 8002768:	89fb      	ldrh	r3, [r7, #14]
 800276a:	4313      	orrs	r3, r2
 800276c:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	89fa      	ldrh	r2, [r7, #14]
 8002774:	60da      	str	r2, [r3, #12]
 8002776:	e00f      	b.n	8002798 <USART_SetConfig+0x2ec>
 8002778:	efff69f3 	.word	0xefff69f3
 800277c:	40011000 	.word	0x40011000
 8002780:	40023800 	.word	0x40023800
 8002784:	40004400 	.word	0x40004400
 8002788:	40004800 	.word	0x40004800
 800278c:	40011400 	.word	0x40011400
 8002790:	01e84800 	.word	0x01e84800
  }
  else
  {
    ret = HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	77bb      	strb	r3, [r7, #30]
  }


  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 80027a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3720      	adds	r7, #32
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop

080027b0 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af02      	add	r7, sp, #8
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80027be:	f7fe f9b3 	bl	8000b28 <HAL_GetTick>
 80027c2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	2b08      	cmp	r3, #8
 80027d0:	d10e      	bne.n	80027f0 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80027d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f7ff fe2c 	bl	800243e <USART_WaitOnFlagUntilTimeout>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e01e      	b.n	800282e <USART_CheckIdleState+0x7e>
    }
  }
#if defined(USART_ISR_REACK)
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0304 	and.w	r3, r3, #4
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d10e      	bne.n	800281c <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80027fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff fe16 	bl	800243e <USART_WaitOnFlagUntilTimeout>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e008      	b.n	800282e <USART_CheckIdleState+0x7e>
    }
  }
#endif

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <__errno>:
 8002838:	4b01      	ldr	r3, [pc, #4]	; (8002840 <__errno+0x8>)
 800283a:	6818      	ldr	r0, [r3, #0]
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	2000000c 	.word	0x2000000c

08002844 <__libc_init_array>:
 8002844:	b570      	push	{r4, r5, r6, lr}
 8002846:	4d0d      	ldr	r5, [pc, #52]	; (800287c <__libc_init_array+0x38>)
 8002848:	4c0d      	ldr	r4, [pc, #52]	; (8002880 <__libc_init_array+0x3c>)
 800284a:	1b64      	subs	r4, r4, r5
 800284c:	10a4      	asrs	r4, r4, #2
 800284e:	2600      	movs	r6, #0
 8002850:	42a6      	cmp	r6, r4
 8002852:	d109      	bne.n	8002868 <__libc_init_array+0x24>
 8002854:	4d0b      	ldr	r5, [pc, #44]	; (8002884 <__libc_init_array+0x40>)
 8002856:	4c0c      	ldr	r4, [pc, #48]	; (8002888 <__libc_init_array+0x44>)
 8002858:	f000 fc8e 	bl	8003178 <_init>
 800285c:	1b64      	subs	r4, r4, r5
 800285e:	10a4      	asrs	r4, r4, #2
 8002860:	2600      	movs	r6, #0
 8002862:	42a6      	cmp	r6, r4
 8002864:	d105      	bne.n	8002872 <__libc_init_array+0x2e>
 8002866:	bd70      	pop	{r4, r5, r6, pc}
 8002868:	f855 3b04 	ldr.w	r3, [r5], #4
 800286c:	4798      	blx	r3
 800286e:	3601      	adds	r6, #1
 8002870:	e7ee      	b.n	8002850 <__libc_init_array+0xc>
 8002872:	f855 3b04 	ldr.w	r3, [r5], #4
 8002876:	4798      	blx	r3
 8002878:	3601      	adds	r6, #1
 800287a:	e7f2      	b.n	8002862 <__libc_init_array+0x1e>
 800287c:	080031f4 	.word	0x080031f4
 8002880:	080031f4 	.word	0x080031f4
 8002884:	080031f4 	.word	0x080031f4
 8002888:	080031f8 	.word	0x080031f8

0800288c <memset>:
 800288c:	4402      	add	r2, r0
 800288e:	4603      	mov	r3, r0
 8002890:	4293      	cmp	r3, r2
 8002892:	d100      	bne.n	8002896 <memset+0xa>
 8002894:	4770      	bx	lr
 8002896:	f803 1b01 	strb.w	r1, [r3], #1
 800289a:	e7f9      	b.n	8002890 <memset+0x4>

0800289c <siprintf>:
 800289c:	b40e      	push	{r1, r2, r3}
 800289e:	b500      	push	{lr}
 80028a0:	b09c      	sub	sp, #112	; 0x70
 80028a2:	ab1d      	add	r3, sp, #116	; 0x74
 80028a4:	9002      	str	r0, [sp, #8]
 80028a6:	9006      	str	r0, [sp, #24]
 80028a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80028ac:	4809      	ldr	r0, [pc, #36]	; (80028d4 <siprintf+0x38>)
 80028ae:	9107      	str	r1, [sp, #28]
 80028b0:	9104      	str	r1, [sp, #16]
 80028b2:	4909      	ldr	r1, [pc, #36]	; (80028d8 <siprintf+0x3c>)
 80028b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80028b8:	9105      	str	r1, [sp, #20]
 80028ba:	6800      	ldr	r0, [r0, #0]
 80028bc:	9301      	str	r3, [sp, #4]
 80028be:	a902      	add	r1, sp, #8
 80028c0:	f000 f868 	bl	8002994 <_svfiprintf_r>
 80028c4:	9b02      	ldr	r3, [sp, #8]
 80028c6:	2200      	movs	r2, #0
 80028c8:	701a      	strb	r2, [r3, #0]
 80028ca:	b01c      	add	sp, #112	; 0x70
 80028cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80028d0:	b003      	add	sp, #12
 80028d2:	4770      	bx	lr
 80028d4:	2000000c 	.word	0x2000000c
 80028d8:	ffff0208 	.word	0xffff0208

080028dc <__ssputs_r>:
 80028dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028e0:	688e      	ldr	r6, [r1, #8]
 80028e2:	429e      	cmp	r6, r3
 80028e4:	4682      	mov	sl, r0
 80028e6:	460c      	mov	r4, r1
 80028e8:	4690      	mov	r8, r2
 80028ea:	461f      	mov	r7, r3
 80028ec:	d838      	bhi.n	8002960 <__ssputs_r+0x84>
 80028ee:	898a      	ldrh	r2, [r1, #12]
 80028f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80028f4:	d032      	beq.n	800295c <__ssputs_r+0x80>
 80028f6:	6825      	ldr	r5, [r4, #0]
 80028f8:	6909      	ldr	r1, [r1, #16]
 80028fa:	eba5 0901 	sub.w	r9, r5, r1
 80028fe:	6965      	ldr	r5, [r4, #20]
 8002900:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002904:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002908:	3301      	adds	r3, #1
 800290a:	444b      	add	r3, r9
 800290c:	106d      	asrs	r5, r5, #1
 800290e:	429d      	cmp	r5, r3
 8002910:	bf38      	it	cc
 8002912:	461d      	movcc	r5, r3
 8002914:	0553      	lsls	r3, r2, #21
 8002916:	d531      	bpl.n	800297c <__ssputs_r+0xa0>
 8002918:	4629      	mov	r1, r5
 800291a:	f000 fb63 	bl	8002fe4 <_malloc_r>
 800291e:	4606      	mov	r6, r0
 8002920:	b950      	cbnz	r0, 8002938 <__ssputs_r+0x5c>
 8002922:	230c      	movs	r3, #12
 8002924:	f8ca 3000 	str.w	r3, [sl]
 8002928:	89a3      	ldrh	r3, [r4, #12]
 800292a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800292e:	81a3      	strh	r3, [r4, #12]
 8002930:	f04f 30ff 	mov.w	r0, #4294967295
 8002934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002938:	6921      	ldr	r1, [r4, #16]
 800293a:	464a      	mov	r2, r9
 800293c:	f000 fabe 	bl	8002ebc <memcpy>
 8002940:	89a3      	ldrh	r3, [r4, #12]
 8002942:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800294a:	81a3      	strh	r3, [r4, #12]
 800294c:	6126      	str	r6, [r4, #16]
 800294e:	6165      	str	r5, [r4, #20]
 8002950:	444e      	add	r6, r9
 8002952:	eba5 0509 	sub.w	r5, r5, r9
 8002956:	6026      	str	r6, [r4, #0]
 8002958:	60a5      	str	r5, [r4, #8]
 800295a:	463e      	mov	r6, r7
 800295c:	42be      	cmp	r6, r7
 800295e:	d900      	bls.n	8002962 <__ssputs_r+0x86>
 8002960:	463e      	mov	r6, r7
 8002962:	6820      	ldr	r0, [r4, #0]
 8002964:	4632      	mov	r2, r6
 8002966:	4641      	mov	r1, r8
 8002968:	f000 fab6 	bl	8002ed8 <memmove>
 800296c:	68a3      	ldr	r3, [r4, #8]
 800296e:	1b9b      	subs	r3, r3, r6
 8002970:	60a3      	str	r3, [r4, #8]
 8002972:	6823      	ldr	r3, [r4, #0]
 8002974:	4433      	add	r3, r6
 8002976:	6023      	str	r3, [r4, #0]
 8002978:	2000      	movs	r0, #0
 800297a:	e7db      	b.n	8002934 <__ssputs_r+0x58>
 800297c:	462a      	mov	r2, r5
 800297e:	f000 fba5 	bl	80030cc <_realloc_r>
 8002982:	4606      	mov	r6, r0
 8002984:	2800      	cmp	r0, #0
 8002986:	d1e1      	bne.n	800294c <__ssputs_r+0x70>
 8002988:	6921      	ldr	r1, [r4, #16]
 800298a:	4650      	mov	r0, sl
 800298c:	f000 fabe 	bl	8002f0c <_free_r>
 8002990:	e7c7      	b.n	8002922 <__ssputs_r+0x46>
	...

08002994 <_svfiprintf_r>:
 8002994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002998:	4698      	mov	r8, r3
 800299a:	898b      	ldrh	r3, [r1, #12]
 800299c:	061b      	lsls	r3, r3, #24
 800299e:	b09d      	sub	sp, #116	; 0x74
 80029a0:	4607      	mov	r7, r0
 80029a2:	460d      	mov	r5, r1
 80029a4:	4614      	mov	r4, r2
 80029a6:	d50e      	bpl.n	80029c6 <_svfiprintf_r+0x32>
 80029a8:	690b      	ldr	r3, [r1, #16]
 80029aa:	b963      	cbnz	r3, 80029c6 <_svfiprintf_r+0x32>
 80029ac:	2140      	movs	r1, #64	; 0x40
 80029ae:	f000 fb19 	bl	8002fe4 <_malloc_r>
 80029b2:	6028      	str	r0, [r5, #0]
 80029b4:	6128      	str	r0, [r5, #16]
 80029b6:	b920      	cbnz	r0, 80029c2 <_svfiprintf_r+0x2e>
 80029b8:	230c      	movs	r3, #12
 80029ba:	603b      	str	r3, [r7, #0]
 80029bc:	f04f 30ff 	mov.w	r0, #4294967295
 80029c0:	e0d1      	b.n	8002b66 <_svfiprintf_r+0x1d2>
 80029c2:	2340      	movs	r3, #64	; 0x40
 80029c4:	616b      	str	r3, [r5, #20]
 80029c6:	2300      	movs	r3, #0
 80029c8:	9309      	str	r3, [sp, #36]	; 0x24
 80029ca:	2320      	movs	r3, #32
 80029cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80029d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80029d4:	2330      	movs	r3, #48	; 0x30
 80029d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002b80 <_svfiprintf_r+0x1ec>
 80029da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80029de:	f04f 0901 	mov.w	r9, #1
 80029e2:	4623      	mov	r3, r4
 80029e4:	469a      	mov	sl, r3
 80029e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80029ea:	b10a      	cbz	r2, 80029f0 <_svfiprintf_r+0x5c>
 80029ec:	2a25      	cmp	r2, #37	; 0x25
 80029ee:	d1f9      	bne.n	80029e4 <_svfiprintf_r+0x50>
 80029f0:	ebba 0b04 	subs.w	fp, sl, r4
 80029f4:	d00b      	beq.n	8002a0e <_svfiprintf_r+0x7a>
 80029f6:	465b      	mov	r3, fp
 80029f8:	4622      	mov	r2, r4
 80029fa:	4629      	mov	r1, r5
 80029fc:	4638      	mov	r0, r7
 80029fe:	f7ff ff6d 	bl	80028dc <__ssputs_r>
 8002a02:	3001      	adds	r0, #1
 8002a04:	f000 80aa 	beq.w	8002b5c <_svfiprintf_r+0x1c8>
 8002a08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002a0a:	445a      	add	r2, fp
 8002a0c:	9209      	str	r2, [sp, #36]	; 0x24
 8002a0e:	f89a 3000 	ldrb.w	r3, [sl]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 80a2 	beq.w	8002b5c <_svfiprintf_r+0x1c8>
 8002a18:	2300      	movs	r3, #0
 8002a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8002a1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a22:	f10a 0a01 	add.w	sl, sl, #1
 8002a26:	9304      	str	r3, [sp, #16]
 8002a28:	9307      	str	r3, [sp, #28]
 8002a2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a2e:	931a      	str	r3, [sp, #104]	; 0x68
 8002a30:	4654      	mov	r4, sl
 8002a32:	2205      	movs	r2, #5
 8002a34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a38:	4851      	ldr	r0, [pc, #324]	; (8002b80 <_svfiprintf_r+0x1ec>)
 8002a3a:	f7fd fc09 	bl	8000250 <memchr>
 8002a3e:	9a04      	ldr	r2, [sp, #16]
 8002a40:	b9d8      	cbnz	r0, 8002a7a <_svfiprintf_r+0xe6>
 8002a42:	06d0      	lsls	r0, r2, #27
 8002a44:	bf44      	itt	mi
 8002a46:	2320      	movmi	r3, #32
 8002a48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a4c:	0711      	lsls	r1, r2, #28
 8002a4e:	bf44      	itt	mi
 8002a50:	232b      	movmi	r3, #43	; 0x2b
 8002a52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a56:	f89a 3000 	ldrb.w	r3, [sl]
 8002a5a:	2b2a      	cmp	r3, #42	; 0x2a
 8002a5c:	d015      	beq.n	8002a8a <_svfiprintf_r+0xf6>
 8002a5e:	9a07      	ldr	r2, [sp, #28]
 8002a60:	4654      	mov	r4, sl
 8002a62:	2000      	movs	r0, #0
 8002a64:	f04f 0c0a 	mov.w	ip, #10
 8002a68:	4621      	mov	r1, r4
 8002a6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a6e:	3b30      	subs	r3, #48	; 0x30
 8002a70:	2b09      	cmp	r3, #9
 8002a72:	d94e      	bls.n	8002b12 <_svfiprintf_r+0x17e>
 8002a74:	b1b0      	cbz	r0, 8002aa4 <_svfiprintf_r+0x110>
 8002a76:	9207      	str	r2, [sp, #28]
 8002a78:	e014      	b.n	8002aa4 <_svfiprintf_r+0x110>
 8002a7a:	eba0 0308 	sub.w	r3, r0, r8
 8002a7e:	fa09 f303 	lsl.w	r3, r9, r3
 8002a82:	4313      	orrs	r3, r2
 8002a84:	9304      	str	r3, [sp, #16]
 8002a86:	46a2      	mov	sl, r4
 8002a88:	e7d2      	b.n	8002a30 <_svfiprintf_r+0x9c>
 8002a8a:	9b03      	ldr	r3, [sp, #12]
 8002a8c:	1d19      	adds	r1, r3, #4
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	9103      	str	r1, [sp, #12]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	bfbb      	ittet	lt
 8002a96:	425b      	neglt	r3, r3
 8002a98:	f042 0202 	orrlt.w	r2, r2, #2
 8002a9c:	9307      	strge	r3, [sp, #28]
 8002a9e:	9307      	strlt	r3, [sp, #28]
 8002aa0:	bfb8      	it	lt
 8002aa2:	9204      	strlt	r2, [sp, #16]
 8002aa4:	7823      	ldrb	r3, [r4, #0]
 8002aa6:	2b2e      	cmp	r3, #46	; 0x2e
 8002aa8:	d10c      	bne.n	8002ac4 <_svfiprintf_r+0x130>
 8002aaa:	7863      	ldrb	r3, [r4, #1]
 8002aac:	2b2a      	cmp	r3, #42	; 0x2a
 8002aae:	d135      	bne.n	8002b1c <_svfiprintf_r+0x188>
 8002ab0:	9b03      	ldr	r3, [sp, #12]
 8002ab2:	1d1a      	adds	r2, r3, #4
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	9203      	str	r2, [sp, #12]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	bfb8      	it	lt
 8002abc:	f04f 33ff 	movlt.w	r3, #4294967295
 8002ac0:	3402      	adds	r4, #2
 8002ac2:	9305      	str	r3, [sp, #20]
 8002ac4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002b90 <_svfiprintf_r+0x1fc>
 8002ac8:	7821      	ldrb	r1, [r4, #0]
 8002aca:	2203      	movs	r2, #3
 8002acc:	4650      	mov	r0, sl
 8002ace:	f7fd fbbf 	bl	8000250 <memchr>
 8002ad2:	b140      	cbz	r0, 8002ae6 <_svfiprintf_r+0x152>
 8002ad4:	2340      	movs	r3, #64	; 0x40
 8002ad6:	eba0 000a 	sub.w	r0, r0, sl
 8002ada:	fa03 f000 	lsl.w	r0, r3, r0
 8002ade:	9b04      	ldr	r3, [sp, #16]
 8002ae0:	4303      	orrs	r3, r0
 8002ae2:	3401      	adds	r4, #1
 8002ae4:	9304      	str	r3, [sp, #16]
 8002ae6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002aea:	4826      	ldr	r0, [pc, #152]	; (8002b84 <_svfiprintf_r+0x1f0>)
 8002aec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002af0:	2206      	movs	r2, #6
 8002af2:	f7fd fbad 	bl	8000250 <memchr>
 8002af6:	2800      	cmp	r0, #0
 8002af8:	d038      	beq.n	8002b6c <_svfiprintf_r+0x1d8>
 8002afa:	4b23      	ldr	r3, [pc, #140]	; (8002b88 <_svfiprintf_r+0x1f4>)
 8002afc:	bb1b      	cbnz	r3, 8002b46 <_svfiprintf_r+0x1b2>
 8002afe:	9b03      	ldr	r3, [sp, #12]
 8002b00:	3307      	adds	r3, #7
 8002b02:	f023 0307 	bic.w	r3, r3, #7
 8002b06:	3308      	adds	r3, #8
 8002b08:	9303      	str	r3, [sp, #12]
 8002b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b0c:	4433      	add	r3, r6
 8002b0e:	9309      	str	r3, [sp, #36]	; 0x24
 8002b10:	e767      	b.n	80029e2 <_svfiprintf_r+0x4e>
 8002b12:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b16:	460c      	mov	r4, r1
 8002b18:	2001      	movs	r0, #1
 8002b1a:	e7a5      	b.n	8002a68 <_svfiprintf_r+0xd4>
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	3401      	adds	r4, #1
 8002b20:	9305      	str	r3, [sp, #20]
 8002b22:	4619      	mov	r1, r3
 8002b24:	f04f 0c0a 	mov.w	ip, #10
 8002b28:	4620      	mov	r0, r4
 8002b2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b2e:	3a30      	subs	r2, #48	; 0x30
 8002b30:	2a09      	cmp	r2, #9
 8002b32:	d903      	bls.n	8002b3c <_svfiprintf_r+0x1a8>
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0c5      	beq.n	8002ac4 <_svfiprintf_r+0x130>
 8002b38:	9105      	str	r1, [sp, #20]
 8002b3a:	e7c3      	b.n	8002ac4 <_svfiprintf_r+0x130>
 8002b3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b40:	4604      	mov	r4, r0
 8002b42:	2301      	movs	r3, #1
 8002b44:	e7f0      	b.n	8002b28 <_svfiprintf_r+0x194>
 8002b46:	ab03      	add	r3, sp, #12
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	462a      	mov	r2, r5
 8002b4c:	4b0f      	ldr	r3, [pc, #60]	; (8002b8c <_svfiprintf_r+0x1f8>)
 8002b4e:	a904      	add	r1, sp, #16
 8002b50:	4638      	mov	r0, r7
 8002b52:	f3af 8000 	nop.w
 8002b56:	1c42      	adds	r2, r0, #1
 8002b58:	4606      	mov	r6, r0
 8002b5a:	d1d6      	bne.n	8002b0a <_svfiprintf_r+0x176>
 8002b5c:	89ab      	ldrh	r3, [r5, #12]
 8002b5e:	065b      	lsls	r3, r3, #25
 8002b60:	f53f af2c 	bmi.w	80029bc <_svfiprintf_r+0x28>
 8002b64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b66:	b01d      	add	sp, #116	; 0x74
 8002b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b6c:	ab03      	add	r3, sp, #12
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	462a      	mov	r2, r5
 8002b72:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <_svfiprintf_r+0x1f8>)
 8002b74:	a904      	add	r1, sp, #16
 8002b76:	4638      	mov	r0, r7
 8002b78:	f000 f87a 	bl	8002c70 <_printf_i>
 8002b7c:	e7eb      	b.n	8002b56 <_svfiprintf_r+0x1c2>
 8002b7e:	bf00      	nop
 8002b80:	080031b8 	.word	0x080031b8
 8002b84:	080031c2 	.word	0x080031c2
 8002b88:	00000000 	.word	0x00000000
 8002b8c:	080028dd 	.word	0x080028dd
 8002b90:	080031be 	.word	0x080031be

08002b94 <_printf_common>:
 8002b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b98:	4616      	mov	r6, r2
 8002b9a:	4699      	mov	r9, r3
 8002b9c:	688a      	ldr	r2, [r1, #8]
 8002b9e:	690b      	ldr	r3, [r1, #16]
 8002ba0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	bfb8      	it	lt
 8002ba8:	4613      	movlt	r3, r2
 8002baa:	6033      	str	r3, [r6, #0]
 8002bac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002bb0:	4607      	mov	r7, r0
 8002bb2:	460c      	mov	r4, r1
 8002bb4:	b10a      	cbz	r2, 8002bba <_printf_common+0x26>
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	6033      	str	r3, [r6, #0]
 8002bba:	6823      	ldr	r3, [r4, #0]
 8002bbc:	0699      	lsls	r1, r3, #26
 8002bbe:	bf42      	ittt	mi
 8002bc0:	6833      	ldrmi	r3, [r6, #0]
 8002bc2:	3302      	addmi	r3, #2
 8002bc4:	6033      	strmi	r3, [r6, #0]
 8002bc6:	6825      	ldr	r5, [r4, #0]
 8002bc8:	f015 0506 	ands.w	r5, r5, #6
 8002bcc:	d106      	bne.n	8002bdc <_printf_common+0x48>
 8002bce:	f104 0a19 	add.w	sl, r4, #25
 8002bd2:	68e3      	ldr	r3, [r4, #12]
 8002bd4:	6832      	ldr	r2, [r6, #0]
 8002bd6:	1a9b      	subs	r3, r3, r2
 8002bd8:	42ab      	cmp	r3, r5
 8002bda:	dc26      	bgt.n	8002c2a <_printf_common+0x96>
 8002bdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002be0:	1e13      	subs	r3, r2, #0
 8002be2:	6822      	ldr	r2, [r4, #0]
 8002be4:	bf18      	it	ne
 8002be6:	2301      	movne	r3, #1
 8002be8:	0692      	lsls	r2, r2, #26
 8002bea:	d42b      	bmi.n	8002c44 <_printf_common+0xb0>
 8002bec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002bf0:	4649      	mov	r1, r9
 8002bf2:	4638      	mov	r0, r7
 8002bf4:	47c0      	blx	r8
 8002bf6:	3001      	adds	r0, #1
 8002bf8:	d01e      	beq.n	8002c38 <_printf_common+0xa4>
 8002bfa:	6823      	ldr	r3, [r4, #0]
 8002bfc:	68e5      	ldr	r5, [r4, #12]
 8002bfe:	6832      	ldr	r2, [r6, #0]
 8002c00:	f003 0306 	and.w	r3, r3, #6
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	bf08      	it	eq
 8002c08:	1aad      	subeq	r5, r5, r2
 8002c0a:	68a3      	ldr	r3, [r4, #8]
 8002c0c:	6922      	ldr	r2, [r4, #16]
 8002c0e:	bf0c      	ite	eq
 8002c10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c14:	2500      	movne	r5, #0
 8002c16:	4293      	cmp	r3, r2
 8002c18:	bfc4      	itt	gt
 8002c1a:	1a9b      	subgt	r3, r3, r2
 8002c1c:	18ed      	addgt	r5, r5, r3
 8002c1e:	2600      	movs	r6, #0
 8002c20:	341a      	adds	r4, #26
 8002c22:	42b5      	cmp	r5, r6
 8002c24:	d11a      	bne.n	8002c5c <_printf_common+0xc8>
 8002c26:	2000      	movs	r0, #0
 8002c28:	e008      	b.n	8002c3c <_printf_common+0xa8>
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	4652      	mov	r2, sl
 8002c2e:	4649      	mov	r1, r9
 8002c30:	4638      	mov	r0, r7
 8002c32:	47c0      	blx	r8
 8002c34:	3001      	adds	r0, #1
 8002c36:	d103      	bne.n	8002c40 <_printf_common+0xac>
 8002c38:	f04f 30ff 	mov.w	r0, #4294967295
 8002c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c40:	3501      	adds	r5, #1
 8002c42:	e7c6      	b.n	8002bd2 <_printf_common+0x3e>
 8002c44:	18e1      	adds	r1, r4, r3
 8002c46:	1c5a      	adds	r2, r3, #1
 8002c48:	2030      	movs	r0, #48	; 0x30
 8002c4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002c4e:	4422      	add	r2, r4
 8002c50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002c54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002c58:	3302      	adds	r3, #2
 8002c5a:	e7c7      	b.n	8002bec <_printf_common+0x58>
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	4622      	mov	r2, r4
 8002c60:	4649      	mov	r1, r9
 8002c62:	4638      	mov	r0, r7
 8002c64:	47c0      	blx	r8
 8002c66:	3001      	adds	r0, #1
 8002c68:	d0e6      	beq.n	8002c38 <_printf_common+0xa4>
 8002c6a:	3601      	adds	r6, #1
 8002c6c:	e7d9      	b.n	8002c22 <_printf_common+0x8e>
	...

08002c70 <_printf_i>:
 8002c70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c74:	7e0f      	ldrb	r7, [r1, #24]
 8002c76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002c78:	2f78      	cmp	r7, #120	; 0x78
 8002c7a:	4691      	mov	r9, r2
 8002c7c:	4680      	mov	r8, r0
 8002c7e:	460c      	mov	r4, r1
 8002c80:	469a      	mov	sl, r3
 8002c82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002c86:	d807      	bhi.n	8002c98 <_printf_i+0x28>
 8002c88:	2f62      	cmp	r7, #98	; 0x62
 8002c8a:	d80a      	bhi.n	8002ca2 <_printf_i+0x32>
 8002c8c:	2f00      	cmp	r7, #0
 8002c8e:	f000 80d8 	beq.w	8002e42 <_printf_i+0x1d2>
 8002c92:	2f58      	cmp	r7, #88	; 0x58
 8002c94:	f000 80a3 	beq.w	8002dde <_printf_i+0x16e>
 8002c98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002ca0:	e03a      	b.n	8002d18 <_printf_i+0xa8>
 8002ca2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002ca6:	2b15      	cmp	r3, #21
 8002ca8:	d8f6      	bhi.n	8002c98 <_printf_i+0x28>
 8002caa:	a101      	add	r1, pc, #4	; (adr r1, 8002cb0 <_printf_i+0x40>)
 8002cac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002cb0:	08002d09 	.word	0x08002d09
 8002cb4:	08002d1d 	.word	0x08002d1d
 8002cb8:	08002c99 	.word	0x08002c99
 8002cbc:	08002c99 	.word	0x08002c99
 8002cc0:	08002c99 	.word	0x08002c99
 8002cc4:	08002c99 	.word	0x08002c99
 8002cc8:	08002d1d 	.word	0x08002d1d
 8002ccc:	08002c99 	.word	0x08002c99
 8002cd0:	08002c99 	.word	0x08002c99
 8002cd4:	08002c99 	.word	0x08002c99
 8002cd8:	08002c99 	.word	0x08002c99
 8002cdc:	08002e29 	.word	0x08002e29
 8002ce0:	08002d4d 	.word	0x08002d4d
 8002ce4:	08002e0b 	.word	0x08002e0b
 8002ce8:	08002c99 	.word	0x08002c99
 8002cec:	08002c99 	.word	0x08002c99
 8002cf0:	08002e4b 	.word	0x08002e4b
 8002cf4:	08002c99 	.word	0x08002c99
 8002cf8:	08002d4d 	.word	0x08002d4d
 8002cfc:	08002c99 	.word	0x08002c99
 8002d00:	08002c99 	.word	0x08002c99
 8002d04:	08002e13 	.word	0x08002e13
 8002d08:	682b      	ldr	r3, [r5, #0]
 8002d0a:	1d1a      	adds	r2, r3, #4
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	602a      	str	r2, [r5, #0]
 8002d10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e0a3      	b.n	8002e64 <_printf_i+0x1f4>
 8002d1c:	6820      	ldr	r0, [r4, #0]
 8002d1e:	6829      	ldr	r1, [r5, #0]
 8002d20:	0606      	lsls	r6, r0, #24
 8002d22:	f101 0304 	add.w	r3, r1, #4
 8002d26:	d50a      	bpl.n	8002d3e <_printf_i+0xce>
 8002d28:	680e      	ldr	r6, [r1, #0]
 8002d2a:	602b      	str	r3, [r5, #0]
 8002d2c:	2e00      	cmp	r6, #0
 8002d2e:	da03      	bge.n	8002d38 <_printf_i+0xc8>
 8002d30:	232d      	movs	r3, #45	; 0x2d
 8002d32:	4276      	negs	r6, r6
 8002d34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d38:	485e      	ldr	r0, [pc, #376]	; (8002eb4 <_printf_i+0x244>)
 8002d3a:	230a      	movs	r3, #10
 8002d3c:	e019      	b.n	8002d72 <_printf_i+0x102>
 8002d3e:	680e      	ldr	r6, [r1, #0]
 8002d40:	602b      	str	r3, [r5, #0]
 8002d42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002d46:	bf18      	it	ne
 8002d48:	b236      	sxthne	r6, r6
 8002d4a:	e7ef      	b.n	8002d2c <_printf_i+0xbc>
 8002d4c:	682b      	ldr	r3, [r5, #0]
 8002d4e:	6820      	ldr	r0, [r4, #0]
 8002d50:	1d19      	adds	r1, r3, #4
 8002d52:	6029      	str	r1, [r5, #0]
 8002d54:	0601      	lsls	r1, r0, #24
 8002d56:	d501      	bpl.n	8002d5c <_printf_i+0xec>
 8002d58:	681e      	ldr	r6, [r3, #0]
 8002d5a:	e002      	b.n	8002d62 <_printf_i+0xf2>
 8002d5c:	0646      	lsls	r6, r0, #25
 8002d5e:	d5fb      	bpl.n	8002d58 <_printf_i+0xe8>
 8002d60:	881e      	ldrh	r6, [r3, #0]
 8002d62:	4854      	ldr	r0, [pc, #336]	; (8002eb4 <_printf_i+0x244>)
 8002d64:	2f6f      	cmp	r7, #111	; 0x6f
 8002d66:	bf0c      	ite	eq
 8002d68:	2308      	moveq	r3, #8
 8002d6a:	230a      	movne	r3, #10
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002d72:	6865      	ldr	r5, [r4, #4]
 8002d74:	60a5      	str	r5, [r4, #8]
 8002d76:	2d00      	cmp	r5, #0
 8002d78:	bfa2      	ittt	ge
 8002d7a:	6821      	ldrge	r1, [r4, #0]
 8002d7c:	f021 0104 	bicge.w	r1, r1, #4
 8002d80:	6021      	strge	r1, [r4, #0]
 8002d82:	b90e      	cbnz	r6, 8002d88 <_printf_i+0x118>
 8002d84:	2d00      	cmp	r5, #0
 8002d86:	d04d      	beq.n	8002e24 <_printf_i+0x1b4>
 8002d88:	4615      	mov	r5, r2
 8002d8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8002d8e:	fb03 6711 	mls	r7, r3, r1, r6
 8002d92:	5dc7      	ldrb	r7, [r0, r7]
 8002d94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002d98:	4637      	mov	r7, r6
 8002d9a:	42bb      	cmp	r3, r7
 8002d9c:	460e      	mov	r6, r1
 8002d9e:	d9f4      	bls.n	8002d8a <_printf_i+0x11a>
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	d10b      	bne.n	8002dbc <_printf_i+0x14c>
 8002da4:	6823      	ldr	r3, [r4, #0]
 8002da6:	07de      	lsls	r6, r3, #31
 8002da8:	d508      	bpl.n	8002dbc <_printf_i+0x14c>
 8002daa:	6923      	ldr	r3, [r4, #16]
 8002dac:	6861      	ldr	r1, [r4, #4]
 8002dae:	4299      	cmp	r1, r3
 8002db0:	bfde      	ittt	le
 8002db2:	2330      	movle	r3, #48	; 0x30
 8002db4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002db8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002dbc:	1b52      	subs	r2, r2, r5
 8002dbe:	6122      	str	r2, [r4, #16]
 8002dc0:	f8cd a000 	str.w	sl, [sp]
 8002dc4:	464b      	mov	r3, r9
 8002dc6:	aa03      	add	r2, sp, #12
 8002dc8:	4621      	mov	r1, r4
 8002dca:	4640      	mov	r0, r8
 8002dcc:	f7ff fee2 	bl	8002b94 <_printf_common>
 8002dd0:	3001      	adds	r0, #1
 8002dd2:	d14c      	bne.n	8002e6e <_printf_i+0x1fe>
 8002dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd8:	b004      	add	sp, #16
 8002dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dde:	4835      	ldr	r0, [pc, #212]	; (8002eb4 <_printf_i+0x244>)
 8002de0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002de4:	6829      	ldr	r1, [r5, #0]
 8002de6:	6823      	ldr	r3, [r4, #0]
 8002de8:	f851 6b04 	ldr.w	r6, [r1], #4
 8002dec:	6029      	str	r1, [r5, #0]
 8002dee:	061d      	lsls	r5, r3, #24
 8002df0:	d514      	bpl.n	8002e1c <_printf_i+0x1ac>
 8002df2:	07df      	lsls	r7, r3, #31
 8002df4:	bf44      	itt	mi
 8002df6:	f043 0320 	orrmi.w	r3, r3, #32
 8002dfa:	6023      	strmi	r3, [r4, #0]
 8002dfc:	b91e      	cbnz	r6, 8002e06 <_printf_i+0x196>
 8002dfe:	6823      	ldr	r3, [r4, #0]
 8002e00:	f023 0320 	bic.w	r3, r3, #32
 8002e04:	6023      	str	r3, [r4, #0]
 8002e06:	2310      	movs	r3, #16
 8002e08:	e7b0      	b.n	8002d6c <_printf_i+0xfc>
 8002e0a:	6823      	ldr	r3, [r4, #0]
 8002e0c:	f043 0320 	orr.w	r3, r3, #32
 8002e10:	6023      	str	r3, [r4, #0]
 8002e12:	2378      	movs	r3, #120	; 0x78
 8002e14:	4828      	ldr	r0, [pc, #160]	; (8002eb8 <_printf_i+0x248>)
 8002e16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002e1a:	e7e3      	b.n	8002de4 <_printf_i+0x174>
 8002e1c:	0659      	lsls	r1, r3, #25
 8002e1e:	bf48      	it	mi
 8002e20:	b2b6      	uxthmi	r6, r6
 8002e22:	e7e6      	b.n	8002df2 <_printf_i+0x182>
 8002e24:	4615      	mov	r5, r2
 8002e26:	e7bb      	b.n	8002da0 <_printf_i+0x130>
 8002e28:	682b      	ldr	r3, [r5, #0]
 8002e2a:	6826      	ldr	r6, [r4, #0]
 8002e2c:	6961      	ldr	r1, [r4, #20]
 8002e2e:	1d18      	adds	r0, r3, #4
 8002e30:	6028      	str	r0, [r5, #0]
 8002e32:	0635      	lsls	r5, r6, #24
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	d501      	bpl.n	8002e3c <_printf_i+0x1cc>
 8002e38:	6019      	str	r1, [r3, #0]
 8002e3a:	e002      	b.n	8002e42 <_printf_i+0x1d2>
 8002e3c:	0670      	lsls	r0, r6, #25
 8002e3e:	d5fb      	bpl.n	8002e38 <_printf_i+0x1c8>
 8002e40:	8019      	strh	r1, [r3, #0]
 8002e42:	2300      	movs	r3, #0
 8002e44:	6123      	str	r3, [r4, #16]
 8002e46:	4615      	mov	r5, r2
 8002e48:	e7ba      	b.n	8002dc0 <_printf_i+0x150>
 8002e4a:	682b      	ldr	r3, [r5, #0]
 8002e4c:	1d1a      	adds	r2, r3, #4
 8002e4e:	602a      	str	r2, [r5, #0]
 8002e50:	681d      	ldr	r5, [r3, #0]
 8002e52:	6862      	ldr	r2, [r4, #4]
 8002e54:	2100      	movs	r1, #0
 8002e56:	4628      	mov	r0, r5
 8002e58:	f7fd f9fa 	bl	8000250 <memchr>
 8002e5c:	b108      	cbz	r0, 8002e62 <_printf_i+0x1f2>
 8002e5e:	1b40      	subs	r0, r0, r5
 8002e60:	6060      	str	r0, [r4, #4]
 8002e62:	6863      	ldr	r3, [r4, #4]
 8002e64:	6123      	str	r3, [r4, #16]
 8002e66:	2300      	movs	r3, #0
 8002e68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e6c:	e7a8      	b.n	8002dc0 <_printf_i+0x150>
 8002e6e:	6923      	ldr	r3, [r4, #16]
 8002e70:	462a      	mov	r2, r5
 8002e72:	4649      	mov	r1, r9
 8002e74:	4640      	mov	r0, r8
 8002e76:	47d0      	blx	sl
 8002e78:	3001      	adds	r0, #1
 8002e7a:	d0ab      	beq.n	8002dd4 <_printf_i+0x164>
 8002e7c:	6823      	ldr	r3, [r4, #0]
 8002e7e:	079b      	lsls	r3, r3, #30
 8002e80:	d413      	bmi.n	8002eaa <_printf_i+0x23a>
 8002e82:	68e0      	ldr	r0, [r4, #12]
 8002e84:	9b03      	ldr	r3, [sp, #12]
 8002e86:	4298      	cmp	r0, r3
 8002e88:	bfb8      	it	lt
 8002e8a:	4618      	movlt	r0, r3
 8002e8c:	e7a4      	b.n	8002dd8 <_printf_i+0x168>
 8002e8e:	2301      	movs	r3, #1
 8002e90:	4632      	mov	r2, r6
 8002e92:	4649      	mov	r1, r9
 8002e94:	4640      	mov	r0, r8
 8002e96:	47d0      	blx	sl
 8002e98:	3001      	adds	r0, #1
 8002e9a:	d09b      	beq.n	8002dd4 <_printf_i+0x164>
 8002e9c:	3501      	adds	r5, #1
 8002e9e:	68e3      	ldr	r3, [r4, #12]
 8002ea0:	9903      	ldr	r1, [sp, #12]
 8002ea2:	1a5b      	subs	r3, r3, r1
 8002ea4:	42ab      	cmp	r3, r5
 8002ea6:	dcf2      	bgt.n	8002e8e <_printf_i+0x21e>
 8002ea8:	e7eb      	b.n	8002e82 <_printf_i+0x212>
 8002eaa:	2500      	movs	r5, #0
 8002eac:	f104 0619 	add.w	r6, r4, #25
 8002eb0:	e7f5      	b.n	8002e9e <_printf_i+0x22e>
 8002eb2:	bf00      	nop
 8002eb4:	080031c9 	.word	0x080031c9
 8002eb8:	080031da 	.word	0x080031da

08002ebc <memcpy>:
 8002ebc:	440a      	add	r2, r1
 8002ebe:	4291      	cmp	r1, r2
 8002ec0:	f100 33ff 	add.w	r3, r0, #4294967295
 8002ec4:	d100      	bne.n	8002ec8 <memcpy+0xc>
 8002ec6:	4770      	bx	lr
 8002ec8:	b510      	push	{r4, lr}
 8002eca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ece:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002ed2:	4291      	cmp	r1, r2
 8002ed4:	d1f9      	bne.n	8002eca <memcpy+0xe>
 8002ed6:	bd10      	pop	{r4, pc}

08002ed8 <memmove>:
 8002ed8:	4288      	cmp	r0, r1
 8002eda:	b510      	push	{r4, lr}
 8002edc:	eb01 0402 	add.w	r4, r1, r2
 8002ee0:	d902      	bls.n	8002ee8 <memmove+0x10>
 8002ee2:	4284      	cmp	r4, r0
 8002ee4:	4623      	mov	r3, r4
 8002ee6:	d807      	bhi.n	8002ef8 <memmove+0x20>
 8002ee8:	1e43      	subs	r3, r0, #1
 8002eea:	42a1      	cmp	r1, r4
 8002eec:	d008      	beq.n	8002f00 <memmove+0x28>
 8002eee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002ef2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002ef6:	e7f8      	b.n	8002eea <memmove+0x12>
 8002ef8:	4402      	add	r2, r0
 8002efa:	4601      	mov	r1, r0
 8002efc:	428a      	cmp	r2, r1
 8002efe:	d100      	bne.n	8002f02 <memmove+0x2a>
 8002f00:	bd10      	pop	{r4, pc}
 8002f02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002f06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002f0a:	e7f7      	b.n	8002efc <memmove+0x24>

08002f0c <_free_r>:
 8002f0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002f0e:	2900      	cmp	r1, #0
 8002f10:	d044      	beq.n	8002f9c <_free_r+0x90>
 8002f12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f16:	9001      	str	r0, [sp, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f1a1 0404 	sub.w	r4, r1, #4
 8002f1e:	bfb8      	it	lt
 8002f20:	18e4      	addlt	r4, r4, r3
 8002f22:	f000 f913 	bl	800314c <__malloc_lock>
 8002f26:	4a1e      	ldr	r2, [pc, #120]	; (8002fa0 <_free_r+0x94>)
 8002f28:	9801      	ldr	r0, [sp, #4]
 8002f2a:	6813      	ldr	r3, [r2, #0]
 8002f2c:	b933      	cbnz	r3, 8002f3c <_free_r+0x30>
 8002f2e:	6063      	str	r3, [r4, #4]
 8002f30:	6014      	str	r4, [r2, #0]
 8002f32:	b003      	add	sp, #12
 8002f34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002f38:	f000 b90e 	b.w	8003158 <__malloc_unlock>
 8002f3c:	42a3      	cmp	r3, r4
 8002f3e:	d908      	bls.n	8002f52 <_free_r+0x46>
 8002f40:	6825      	ldr	r5, [r4, #0]
 8002f42:	1961      	adds	r1, r4, r5
 8002f44:	428b      	cmp	r3, r1
 8002f46:	bf01      	itttt	eq
 8002f48:	6819      	ldreq	r1, [r3, #0]
 8002f4a:	685b      	ldreq	r3, [r3, #4]
 8002f4c:	1949      	addeq	r1, r1, r5
 8002f4e:	6021      	streq	r1, [r4, #0]
 8002f50:	e7ed      	b.n	8002f2e <_free_r+0x22>
 8002f52:	461a      	mov	r2, r3
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	b10b      	cbz	r3, 8002f5c <_free_r+0x50>
 8002f58:	42a3      	cmp	r3, r4
 8002f5a:	d9fa      	bls.n	8002f52 <_free_r+0x46>
 8002f5c:	6811      	ldr	r1, [r2, #0]
 8002f5e:	1855      	adds	r5, r2, r1
 8002f60:	42a5      	cmp	r5, r4
 8002f62:	d10b      	bne.n	8002f7c <_free_r+0x70>
 8002f64:	6824      	ldr	r4, [r4, #0]
 8002f66:	4421      	add	r1, r4
 8002f68:	1854      	adds	r4, r2, r1
 8002f6a:	42a3      	cmp	r3, r4
 8002f6c:	6011      	str	r1, [r2, #0]
 8002f6e:	d1e0      	bne.n	8002f32 <_free_r+0x26>
 8002f70:	681c      	ldr	r4, [r3, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	6053      	str	r3, [r2, #4]
 8002f76:	4421      	add	r1, r4
 8002f78:	6011      	str	r1, [r2, #0]
 8002f7a:	e7da      	b.n	8002f32 <_free_r+0x26>
 8002f7c:	d902      	bls.n	8002f84 <_free_r+0x78>
 8002f7e:	230c      	movs	r3, #12
 8002f80:	6003      	str	r3, [r0, #0]
 8002f82:	e7d6      	b.n	8002f32 <_free_r+0x26>
 8002f84:	6825      	ldr	r5, [r4, #0]
 8002f86:	1961      	adds	r1, r4, r5
 8002f88:	428b      	cmp	r3, r1
 8002f8a:	bf04      	itt	eq
 8002f8c:	6819      	ldreq	r1, [r3, #0]
 8002f8e:	685b      	ldreq	r3, [r3, #4]
 8002f90:	6063      	str	r3, [r4, #4]
 8002f92:	bf04      	itt	eq
 8002f94:	1949      	addeq	r1, r1, r5
 8002f96:	6021      	streq	r1, [r4, #0]
 8002f98:	6054      	str	r4, [r2, #4]
 8002f9a:	e7ca      	b.n	8002f32 <_free_r+0x26>
 8002f9c:	b003      	add	sp, #12
 8002f9e:	bd30      	pop	{r4, r5, pc}
 8002fa0:	200000f8 	.word	0x200000f8

08002fa4 <sbrk_aligned>:
 8002fa4:	b570      	push	{r4, r5, r6, lr}
 8002fa6:	4e0e      	ldr	r6, [pc, #56]	; (8002fe0 <sbrk_aligned+0x3c>)
 8002fa8:	460c      	mov	r4, r1
 8002faa:	6831      	ldr	r1, [r6, #0]
 8002fac:	4605      	mov	r5, r0
 8002fae:	b911      	cbnz	r1, 8002fb6 <sbrk_aligned+0x12>
 8002fb0:	f000 f8bc 	bl	800312c <_sbrk_r>
 8002fb4:	6030      	str	r0, [r6, #0]
 8002fb6:	4621      	mov	r1, r4
 8002fb8:	4628      	mov	r0, r5
 8002fba:	f000 f8b7 	bl	800312c <_sbrk_r>
 8002fbe:	1c43      	adds	r3, r0, #1
 8002fc0:	d00a      	beq.n	8002fd8 <sbrk_aligned+0x34>
 8002fc2:	1cc4      	adds	r4, r0, #3
 8002fc4:	f024 0403 	bic.w	r4, r4, #3
 8002fc8:	42a0      	cmp	r0, r4
 8002fca:	d007      	beq.n	8002fdc <sbrk_aligned+0x38>
 8002fcc:	1a21      	subs	r1, r4, r0
 8002fce:	4628      	mov	r0, r5
 8002fd0:	f000 f8ac 	bl	800312c <_sbrk_r>
 8002fd4:	3001      	adds	r0, #1
 8002fd6:	d101      	bne.n	8002fdc <sbrk_aligned+0x38>
 8002fd8:	f04f 34ff 	mov.w	r4, #4294967295
 8002fdc:	4620      	mov	r0, r4
 8002fde:	bd70      	pop	{r4, r5, r6, pc}
 8002fe0:	200000fc 	.word	0x200000fc

08002fe4 <_malloc_r>:
 8002fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fe8:	1ccd      	adds	r5, r1, #3
 8002fea:	f025 0503 	bic.w	r5, r5, #3
 8002fee:	3508      	adds	r5, #8
 8002ff0:	2d0c      	cmp	r5, #12
 8002ff2:	bf38      	it	cc
 8002ff4:	250c      	movcc	r5, #12
 8002ff6:	2d00      	cmp	r5, #0
 8002ff8:	4607      	mov	r7, r0
 8002ffa:	db01      	blt.n	8003000 <_malloc_r+0x1c>
 8002ffc:	42a9      	cmp	r1, r5
 8002ffe:	d905      	bls.n	800300c <_malloc_r+0x28>
 8003000:	230c      	movs	r3, #12
 8003002:	603b      	str	r3, [r7, #0]
 8003004:	2600      	movs	r6, #0
 8003006:	4630      	mov	r0, r6
 8003008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800300c:	4e2e      	ldr	r6, [pc, #184]	; (80030c8 <_malloc_r+0xe4>)
 800300e:	f000 f89d 	bl	800314c <__malloc_lock>
 8003012:	6833      	ldr	r3, [r6, #0]
 8003014:	461c      	mov	r4, r3
 8003016:	bb34      	cbnz	r4, 8003066 <_malloc_r+0x82>
 8003018:	4629      	mov	r1, r5
 800301a:	4638      	mov	r0, r7
 800301c:	f7ff ffc2 	bl	8002fa4 <sbrk_aligned>
 8003020:	1c43      	adds	r3, r0, #1
 8003022:	4604      	mov	r4, r0
 8003024:	d14d      	bne.n	80030c2 <_malloc_r+0xde>
 8003026:	6834      	ldr	r4, [r6, #0]
 8003028:	4626      	mov	r6, r4
 800302a:	2e00      	cmp	r6, #0
 800302c:	d140      	bne.n	80030b0 <_malloc_r+0xcc>
 800302e:	6823      	ldr	r3, [r4, #0]
 8003030:	4631      	mov	r1, r6
 8003032:	4638      	mov	r0, r7
 8003034:	eb04 0803 	add.w	r8, r4, r3
 8003038:	f000 f878 	bl	800312c <_sbrk_r>
 800303c:	4580      	cmp	r8, r0
 800303e:	d13a      	bne.n	80030b6 <_malloc_r+0xd2>
 8003040:	6821      	ldr	r1, [r4, #0]
 8003042:	3503      	adds	r5, #3
 8003044:	1a6d      	subs	r5, r5, r1
 8003046:	f025 0503 	bic.w	r5, r5, #3
 800304a:	3508      	adds	r5, #8
 800304c:	2d0c      	cmp	r5, #12
 800304e:	bf38      	it	cc
 8003050:	250c      	movcc	r5, #12
 8003052:	4629      	mov	r1, r5
 8003054:	4638      	mov	r0, r7
 8003056:	f7ff ffa5 	bl	8002fa4 <sbrk_aligned>
 800305a:	3001      	adds	r0, #1
 800305c:	d02b      	beq.n	80030b6 <_malloc_r+0xd2>
 800305e:	6823      	ldr	r3, [r4, #0]
 8003060:	442b      	add	r3, r5
 8003062:	6023      	str	r3, [r4, #0]
 8003064:	e00e      	b.n	8003084 <_malloc_r+0xa0>
 8003066:	6822      	ldr	r2, [r4, #0]
 8003068:	1b52      	subs	r2, r2, r5
 800306a:	d41e      	bmi.n	80030aa <_malloc_r+0xc6>
 800306c:	2a0b      	cmp	r2, #11
 800306e:	d916      	bls.n	800309e <_malloc_r+0xba>
 8003070:	1961      	adds	r1, r4, r5
 8003072:	42a3      	cmp	r3, r4
 8003074:	6025      	str	r5, [r4, #0]
 8003076:	bf18      	it	ne
 8003078:	6059      	strne	r1, [r3, #4]
 800307a:	6863      	ldr	r3, [r4, #4]
 800307c:	bf08      	it	eq
 800307e:	6031      	streq	r1, [r6, #0]
 8003080:	5162      	str	r2, [r4, r5]
 8003082:	604b      	str	r3, [r1, #4]
 8003084:	4638      	mov	r0, r7
 8003086:	f104 060b 	add.w	r6, r4, #11
 800308a:	f000 f865 	bl	8003158 <__malloc_unlock>
 800308e:	f026 0607 	bic.w	r6, r6, #7
 8003092:	1d23      	adds	r3, r4, #4
 8003094:	1af2      	subs	r2, r6, r3
 8003096:	d0b6      	beq.n	8003006 <_malloc_r+0x22>
 8003098:	1b9b      	subs	r3, r3, r6
 800309a:	50a3      	str	r3, [r4, r2]
 800309c:	e7b3      	b.n	8003006 <_malloc_r+0x22>
 800309e:	6862      	ldr	r2, [r4, #4]
 80030a0:	42a3      	cmp	r3, r4
 80030a2:	bf0c      	ite	eq
 80030a4:	6032      	streq	r2, [r6, #0]
 80030a6:	605a      	strne	r2, [r3, #4]
 80030a8:	e7ec      	b.n	8003084 <_malloc_r+0xa0>
 80030aa:	4623      	mov	r3, r4
 80030ac:	6864      	ldr	r4, [r4, #4]
 80030ae:	e7b2      	b.n	8003016 <_malloc_r+0x32>
 80030b0:	4634      	mov	r4, r6
 80030b2:	6876      	ldr	r6, [r6, #4]
 80030b4:	e7b9      	b.n	800302a <_malloc_r+0x46>
 80030b6:	230c      	movs	r3, #12
 80030b8:	603b      	str	r3, [r7, #0]
 80030ba:	4638      	mov	r0, r7
 80030bc:	f000 f84c 	bl	8003158 <__malloc_unlock>
 80030c0:	e7a1      	b.n	8003006 <_malloc_r+0x22>
 80030c2:	6025      	str	r5, [r4, #0]
 80030c4:	e7de      	b.n	8003084 <_malloc_r+0xa0>
 80030c6:	bf00      	nop
 80030c8:	200000f8 	.word	0x200000f8

080030cc <_realloc_r>:
 80030cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030d0:	4680      	mov	r8, r0
 80030d2:	4614      	mov	r4, r2
 80030d4:	460e      	mov	r6, r1
 80030d6:	b921      	cbnz	r1, 80030e2 <_realloc_r+0x16>
 80030d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80030dc:	4611      	mov	r1, r2
 80030de:	f7ff bf81 	b.w	8002fe4 <_malloc_r>
 80030e2:	b92a      	cbnz	r2, 80030f0 <_realloc_r+0x24>
 80030e4:	f7ff ff12 	bl	8002f0c <_free_r>
 80030e8:	4625      	mov	r5, r4
 80030ea:	4628      	mov	r0, r5
 80030ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030f0:	f000 f838 	bl	8003164 <_malloc_usable_size_r>
 80030f4:	4284      	cmp	r4, r0
 80030f6:	4607      	mov	r7, r0
 80030f8:	d802      	bhi.n	8003100 <_realloc_r+0x34>
 80030fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80030fe:	d812      	bhi.n	8003126 <_realloc_r+0x5a>
 8003100:	4621      	mov	r1, r4
 8003102:	4640      	mov	r0, r8
 8003104:	f7ff ff6e 	bl	8002fe4 <_malloc_r>
 8003108:	4605      	mov	r5, r0
 800310a:	2800      	cmp	r0, #0
 800310c:	d0ed      	beq.n	80030ea <_realloc_r+0x1e>
 800310e:	42bc      	cmp	r4, r7
 8003110:	4622      	mov	r2, r4
 8003112:	4631      	mov	r1, r6
 8003114:	bf28      	it	cs
 8003116:	463a      	movcs	r2, r7
 8003118:	f7ff fed0 	bl	8002ebc <memcpy>
 800311c:	4631      	mov	r1, r6
 800311e:	4640      	mov	r0, r8
 8003120:	f7ff fef4 	bl	8002f0c <_free_r>
 8003124:	e7e1      	b.n	80030ea <_realloc_r+0x1e>
 8003126:	4635      	mov	r5, r6
 8003128:	e7df      	b.n	80030ea <_realloc_r+0x1e>
	...

0800312c <_sbrk_r>:
 800312c:	b538      	push	{r3, r4, r5, lr}
 800312e:	4d06      	ldr	r5, [pc, #24]	; (8003148 <_sbrk_r+0x1c>)
 8003130:	2300      	movs	r3, #0
 8003132:	4604      	mov	r4, r0
 8003134:	4608      	mov	r0, r1
 8003136:	602b      	str	r3, [r5, #0]
 8003138:	f7fd fc34 	bl	80009a4 <_sbrk>
 800313c:	1c43      	adds	r3, r0, #1
 800313e:	d102      	bne.n	8003146 <_sbrk_r+0x1a>
 8003140:	682b      	ldr	r3, [r5, #0]
 8003142:	b103      	cbz	r3, 8003146 <_sbrk_r+0x1a>
 8003144:	6023      	str	r3, [r4, #0]
 8003146:	bd38      	pop	{r3, r4, r5, pc}
 8003148:	20000100 	.word	0x20000100

0800314c <__malloc_lock>:
 800314c:	4801      	ldr	r0, [pc, #4]	; (8003154 <__malloc_lock+0x8>)
 800314e:	f000 b811 	b.w	8003174 <__retarget_lock_acquire_recursive>
 8003152:	bf00      	nop
 8003154:	20000104 	.word	0x20000104

08003158 <__malloc_unlock>:
 8003158:	4801      	ldr	r0, [pc, #4]	; (8003160 <__malloc_unlock+0x8>)
 800315a:	f000 b80c 	b.w	8003176 <__retarget_lock_release_recursive>
 800315e:	bf00      	nop
 8003160:	20000104 	.word	0x20000104

08003164 <_malloc_usable_size_r>:
 8003164:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003168:	1f18      	subs	r0, r3, #4
 800316a:	2b00      	cmp	r3, #0
 800316c:	bfbc      	itt	lt
 800316e:	580b      	ldrlt	r3, [r1, r0]
 8003170:	18c0      	addlt	r0, r0, r3
 8003172:	4770      	bx	lr

08003174 <__retarget_lock_acquire_recursive>:
 8003174:	4770      	bx	lr

08003176 <__retarget_lock_release_recursive>:
 8003176:	4770      	bx	lr

08003178 <_init>:
 8003178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800317a:	bf00      	nop
 800317c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800317e:	bc08      	pop	{r3}
 8003180:	469e      	mov	lr, r3
 8003182:	4770      	bx	lr

08003184 <_fini>:
 8003184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003186:	bf00      	nop
 8003188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800318a:	bc08      	pop	{r3}
 800318c:	469e      	mov	lr, r3
 800318e:	4770      	bx	lr
