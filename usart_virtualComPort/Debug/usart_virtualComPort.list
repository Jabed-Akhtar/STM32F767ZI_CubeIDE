
usart_virtualComPort.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ee4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080030e4  080030e4  000130e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003140  08003140  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003140  08003140  00013140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003148  08003148  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003148  08003148  00013148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800314c  0800314c  0001314c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003150  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000070  080031c0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  080031c0  00020110  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000836c  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001625  00000000  00000000  0002840a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000618  00000000  00000000  00029a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000560  00000000  00000000  0002a048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026812  00000000  00000000  0002a5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007d06  00000000  00000000  00050dba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee9cd  00000000  00000000  00058ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014748d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b08  00000000  00000000  001474e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	080030cc 	.word	0x080030cc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	080030cc 	.word	0x080030cc

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ee:	f000 fa44 	bl	8000a7a <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80005f2:	f000 f833 	bl	800065c <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 f8b9 	bl	800076c <MX_GPIO_Init>
  MX_USART3_Init();
 80005fa:	f000 f88b 	bl	8000714 <MX_USART3_Init>

  int cou = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  while (1)
  {
	  /* Sending message through USART every 1sec */
	  cou++; // increasing counter every 100oms
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	3301      	adds	r3, #1
 8000606:	607b      	str	r3, [r7, #4]
	  sprintf(couChar, "Counter: %d\n\r", cou);
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	4910      	ldr	r1, [pc, #64]	; (800064c <main+0x64>)
 800060c:	4810      	ldr	r0, [pc, #64]	; (8000650 <main+0x68>)
 800060e:	f002 f92f 	bl	8002870 <siprintf>
	  HAL_USART_Transmit(&husart3, (uint8_t*)couChar, strlen(couChar), 0xFFFF);
 8000612:	480f      	ldr	r0, [pc, #60]	; (8000650 <main+0x68>)
 8000614:	f7ff fe14 	bl	8000240 <strlen>
 8000618:	4603      	mov	r3, r0
 800061a:	b29a      	uxth	r2, r3
 800061c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000620:	490b      	ldr	r1, [pc, #44]	; (8000650 <main+0x68>)
 8000622:	480c      	ldr	r0, [pc, #48]	; (8000654 <main+0x6c>)
 8000624:	f001 fe4c 	bl	80022c0 <HAL_USART_Transmit>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000628:	2201      	movs	r2, #1
 800062a:	2180      	movs	r1, #128	; 0x80
 800062c:	480a      	ldr	r0, [pc, #40]	; (8000658 <main+0x70>)
 800062e:	f000 fd37 	bl	80010a0 <HAL_GPIO_WritePin>
	  HAL_Delay(200); // Delay of 200ms -> to turn On LED for 200 after msg through USART is sent
 8000632:	20c8      	movs	r0, #200	; 0xc8
 8000634:	f000 fa7e 	bl	8000b34 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	2180      	movs	r1, #128	; 0x80
 800063c:	4806      	ldr	r0, [pc, #24]	; (8000658 <main+0x70>)
 800063e:	f000 fd2f 	bl	80010a0 <HAL_GPIO_WritePin>
	  HAL_Delay(800); // Delay of 800ms -> 200ms+1000ms=1sec waits till next msg through USART is sent
 8000642:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000646:	f000 fa75 	bl	8000b34 <HAL_Delay>
	  cou++; // increasing counter every 100oms
 800064a:	e7da      	b.n	8000602 <main+0x1a>
 800064c:	080030e4 	.word	0x080030e4
 8000650:	20000098 	.word	0x20000098
 8000654:	200000ac 	.word	0x200000ac
 8000658:	40020400 	.word	0x40020400

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	; 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 031c 	add.w	r3, r7, #28
 8000666:	2234      	movs	r2, #52	; 0x34
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f002 f8f8 	bl	8002860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 0308 	add.w	r3, r7, #8
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	4b22      	ldr	r3, [pc, #136]	; (800070c <SystemClock_Config+0xb0>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	4a21      	ldr	r2, [pc, #132]	; (800070c <SystemClock_Config+0xb0>)
 8000686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068a:	6413      	str	r3, [r2, #64]	; 0x40
 800068c:	4b1f      	ldr	r3, [pc, #124]	; (800070c <SystemClock_Config+0xb0>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000698:	4b1d      	ldr	r3, [pc, #116]	; (8000710 <SystemClock_Config+0xb4>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006a0:	4a1b      	ldr	r2, [pc, #108]	; (8000710 <SystemClock_Config+0xb4>)
 80006a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b19      	ldr	r3, [pc, #100]	; (8000710 <SystemClock_Config+0xb4>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b0:	603b      	str	r3, [r7, #0]
 80006b2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b4:	2302      	movs	r3, #2
 80006b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006bc:	2310      	movs	r3, #16
 80006be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c0:	2300      	movs	r3, #0
 80006c2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 fd03 	bl	80010d4 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80006d4:	f000 f888 	bl	80007e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006dc:	2300      	movs	r3, #0
 80006de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ec:	f107 0308 	add.w	r3, r7, #8
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f000 ff9c 	bl	8001630 <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006fe:	f000 f873 	bl	80007e8 <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3750      	adds	r7, #80	; 0x50
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  husart3.Instance = USART3;
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <MX_USART3_Init+0x50>)
 800071a:	4a13      	ldr	r2, [pc, #76]	; (8000768 <MX_USART3_Init+0x54>)
 800071c:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 115200;
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_USART3_Init+0x50>)
 8000720:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000724:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_USART3_Init+0x50>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 800072c:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <MX_USART3_Init+0x50>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_USART3_Init+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 8000738:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <MX_USART3_Init+0x50>)
 800073a:	220c      	movs	r2, #12
 800073c:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_USART3_Init+0x50>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 8000744:	4b07      	ldr	r3, [pc, #28]	; (8000764 <MX_USART3_Init+0x50>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_USART3_Init+0x50>)
 800074c:	2200      	movs	r2, #0
 800074e:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8000750:	4804      	ldr	r0, [pc, #16]	; (8000764 <MX_USART3_Init+0x50>)
 8000752:	f001 fd6b 	bl	800222c <HAL_USART_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_USART3_Init+0x4c>
  {
    Error_Handler();
 800075c:	f000 f844 	bl	80007e8 <Error_Handler>
  }
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	200000ac 	.word	0x200000ac
 8000768:	40004800 	.word	0x40004800

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 030c 	add.w	r3, r7, #12
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <MX_GPIO_Init+0x74>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a16      	ldr	r2, [pc, #88]	; (80007e0 <MX_GPIO_Init+0x74>)
 8000788:	f043 0302 	orr.w	r3, r3, #2
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_GPIO_Init+0x74>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0302 	and.w	r3, r3, #2
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_GPIO_Init+0x74>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a10      	ldr	r2, [pc, #64]	; (80007e0 <MX_GPIO_Init+0x74>)
 80007a0:	f043 0308 	orr.w	r3, r3, #8
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_GPIO_Init+0x74>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0308 	and.w	r3, r3, #8
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2180      	movs	r1, #128	; 0x80
 80007b6:	480b      	ldr	r0, [pc, #44]	; (80007e4 <MX_GPIO_Init+0x78>)
 80007b8:	f000 fc72 	bl	80010a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007bc:	2380      	movs	r3, #128	; 0x80
 80007be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	4619      	mov	r1, r3
 80007d2:	4804      	ldr	r0, [pc, #16]	; (80007e4 <MX_GPIO_Init+0x78>)
 80007d4:	f000 fab8 	bl	8000d48 <HAL_GPIO_Init>

}
 80007d8:	bf00      	nop
 80007da:	3720      	adds	r7, #32
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40020400 	.word	0x40020400

080007e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ec:	b672      	cpsid	i
}
 80007ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <Error_Handler+0x8>
	...

080007f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007fa:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <HAL_MspInit+0x44>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fe:	4a0e      	ldr	r2, [pc, #56]	; (8000838 <HAL_MspInit+0x44>)
 8000800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000804:	6413      	str	r3, [r2, #64]	; 0x40
 8000806:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <HAL_MspInit+0x44>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <HAL_MspInit+0x44>)
 8000814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000816:	4a08      	ldr	r2, [pc, #32]	; (8000838 <HAL_MspInit+0x44>)
 8000818:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800081c:	6453      	str	r3, [r2, #68]	; 0x44
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <HAL_MspInit+0x44>)
 8000820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082a:	bf00      	nop
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800

0800083c <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b0ae      	sub	sp, #184	; 0xb8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000844:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	2290      	movs	r2, #144	; 0x90
 800085a:	2100      	movs	r1, #0
 800085c:	4618      	mov	r0, r3
 800085e:	f001 ffff 	bl	8002860 <memset>
  if(husart->Instance==USART3)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a33      	ldr	r2, [pc, #204]	; (8000934 <HAL_USART_MspInit+0xf8>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d15e      	bne.n	800092a <HAL_USART_MspInit+0xee>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800086c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000870:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000872:	2300      	movs	r3, #0
 8000874:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4618      	mov	r0, r3
 800087c:	f001 f8ae 	bl	80019dc <HAL_RCCEx_PeriphCLKConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <HAL_USART_MspInit+0x4e>
    {
      Error_Handler();
 8000886:	f7ff ffaf 	bl	80007e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <HAL_USART_MspInit+0xfc>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	4a2a      	ldr	r2, [pc, #168]	; (8000938 <HAL_USART_MspInit+0xfc>)
 8000890:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000894:	6413      	str	r3, [r2, #64]	; 0x40
 8000896:	4b28      	ldr	r3, [pc, #160]	; (8000938 <HAL_USART_MspInit+0xfc>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a2:	4b25      	ldr	r3, [pc, #148]	; (8000938 <HAL_USART_MspInit+0xfc>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a24      	ldr	r2, [pc, #144]	; (8000938 <HAL_USART_MspInit+0xfc>)
 80008a8:	f043 0302 	orr.w	r3, r3, #2
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b22      	ldr	r3, [pc, #136]	; (8000938 <HAL_USART_MspInit+0xfc>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0302 	and.w	r3, r3, #2
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ba:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <HAL_USART_MspInit+0xfc>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a1e      	ldr	r2, [pc, #120]	; (8000938 <HAL_USART_MspInit+0xfc>)
 80008c0:	f043 0308 	orr.w	r3, r3, #8
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b1c      	ldr	r3, [pc, #112]	; (8000938 <HAL_USART_MspInit+0xfc>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0308 	and.w	r3, r3, #8
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB12     ------> USART3_CK
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80008d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e6:	2303      	movs	r3, #3
 80008e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008ec:	2307      	movs	r3, #7
 80008ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80008f6:	4619      	mov	r1, r3
 80008f8:	4810      	ldr	r0, [pc, #64]	; (800093c <HAL_USART_MspInit+0x100>)
 80008fa:	f000 fa25 	bl	8000d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000902:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000912:	2303      	movs	r3, #3
 8000914:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000918:	2307      	movs	r3, #7
 800091a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800091e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000922:	4619      	mov	r1, r3
 8000924:	4806      	ldr	r0, [pc, #24]	; (8000940 <HAL_USART_MspInit+0x104>)
 8000926:	f000 fa0f 	bl	8000d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800092a:	bf00      	nop
 800092c:	37b8      	adds	r7, #184	; 0xb8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40004800 	.word	0x40004800
 8000938:	40023800 	.word	0x40023800
 800093c:	40020400 	.word	0x40020400
 8000940:	40020c00 	.word	0x40020c00

08000944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <NMI_Handler+0x4>

0800094a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <HardFault_Handler+0x4>

08000950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <MemManage_Handler+0x4>

08000956 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <BusFault_Handler+0x4>

0800095c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <UsageFault_Handler+0x4>

08000962 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000990:	f000 f8b0 	bl	8000af4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}

08000998 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009a0:	4a14      	ldr	r2, [pc, #80]	; (80009f4 <_sbrk+0x5c>)
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <_sbrk+0x60>)
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009ac:	4b13      	ldr	r3, [pc, #76]	; (80009fc <_sbrk+0x64>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d102      	bne.n	80009ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <_sbrk+0x64>)
 80009b6:	4a12      	ldr	r2, [pc, #72]	; (8000a00 <_sbrk+0x68>)
 80009b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <_sbrk+0x64>)
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4413      	add	r3, r2
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d207      	bcs.n	80009d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009c8:	f001 ff20 	bl	800280c <__errno>
 80009cc:	4603      	mov	r3, r0
 80009ce:	220c      	movs	r2, #12
 80009d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009d2:	f04f 33ff 	mov.w	r3, #4294967295
 80009d6:	e009      	b.n	80009ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009d8:	4b08      	ldr	r3, [pc, #32]	; (80009fc <_sbrk+0x64>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009de:	4b07      	ldr	r3, [pc, #28]	; (80009fc <_sbrk+0x64>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4413      	add	r3, r2
 80009e6:	4a05      	ldr	r2, [pc, #20]	; (80009fc <_sbrk+0x64>)
 80009e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ea:	68fb      	ldr	r3, [r7, #12]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3718      	adds	r7, #24
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20080000 	.word	0x20080000
 80009f8:	00000400 	.word	0x00000400
 80009fc:	2000008c 	.word	0x2000008c
 8000a00:	20000110 	.word	0x20000110

08000a04 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <SystemInit+0x20>)
 8000a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a0e:	4a05      	ldr	r2, [pc, #20]	; (8000a24 <SystemInit+0x20>)
 8000a10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a2c:	480d      	ldr	r0, [pc, #52]	; (8000a64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a2e:	490e      	ldr	r1, [pc, #56]	; (8000a68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a30:	4a0e      	ldr	r2, [pc, #56]	; (8000a6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a34:	e002      	b.n	8000a3c <LoopCopyDataInit>

08000a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3a:	3304      	adds	r3, #4

08000a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a40:	d3f9      	bcc.n	8000a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a42:	4a0b      	ldr	r2, [pc, #44]	; (8000a70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a44:	4c0b      	ldr	r4, [pc, #44]	; (8000a74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a48:	e001      	b.n	8000a4e <LoopFillZerobss>

08000a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a4c:	3204      	adds	r2, #4

08000a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a50:	d3fb      	bcc.n	8000a4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a52:	f7ff ffd7 	bl	8000a04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a56:	f001 fedf 	bl	8002818 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a5a:	f7ff fdc5 	bl	80005e8 <main>
  bx  lr    
 8000a5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a60:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a68:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a6c:	08003150 	.word	0x08003150
  ldr r2, =_sbss
 8000a70:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a74:	20000110 	.word	0x20000110

08000a78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a78:	e7fe      	b.n	8000a78 <ADC_IRQHandler>

08000a7a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a7e:	2003      	movs	r0, #3
 8000a80:	f000 f92e 	bl	8000ce0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a84:	200f      	movs	r0, #15
 8000a86:	f000 f805 	bl	8000a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a8a:	f7ff feb3 	bl	80007f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a8e:	2300      	movs	r3, #0
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <HAL_InitTick+0x54>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <HAL_InitTick+0x58>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 f93b 	bl	8000d2e <HAL_SYSTICK_Config>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e00e      	b.n	8000ae0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2b0f      	cmp	r3, #15
 8000ac6:	d80a      	bhi.n	8000ade <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	6879      	ldr	r1, [r7, #4]
 8000acc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad0:	f000 f911 	bl	8000cf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad4:	4a06      	ldr	r2, [pc, #24]	; (8000af0 <HAL_InitTick+0x5c>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ada:	2300      	movs	r3, #0
 8000adc:	e000      	b.n	8000ae0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000000 	.word	0x20000000
 8000aec:	20000008 	.word	0x20000008
 8000af0:	20000004 	.word	0x20000004

08000af4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_IncTick+0x20>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	461a      	mov	r2, r3
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_IncTick+0x24>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4413      	add	r3, r2
 8000b04:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <HAL_IncTick+0x24>)
 8000b06:	6013      	str	r3, [r2, #0]
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	20000008 	.word	0x20000008
 8000b18:	200000fc 	.word	0x200000fc

08000b1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b20:	4b03      	ldr	r3, [pc, #12]	; (8000b30 <HAL_GetTick+0x14>)
 8000b22:	681b      	ldr	r3, [r3, #0]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	200000fc 	.word	0x200000fc

08000b34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b3c:	f7ff ffee 	bl	8000b1c <HAL_GetTick>
 8000b40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b4c:	d005      	beq.n	8000b5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b4e:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <HAL_Delay+0x44>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	461a      	mov	r2, r3
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	4413      	add	r3, r2
 8000b58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b5a:	bf00      	nop
 8000b5c:	f7ff ffde 	bl	8000b1c <HAL_GetTick>
 8000b60:	4602      	mov	r2, r0
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	68fa      	ldr	r2, [r7, #12]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d8f7      	bhi.n	8000b5c <HAL_Delay+0x28>
  {
  }
}
 8000b6c:	bf00      	nop
 8000b6e:	bf00      	nop
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000008 	.word	0x20000008

08000b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b8c:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <__NVIC_SetPriorityGrouping+0x40>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000baa:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <__NVIC_SetPriorityGrouping+0x40>)
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	60d3      	str	r3, [r2, #12]
}
 8000bb0:	bf00      	nop
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00
 8000bc0:	05fa0000 	.word	0x05fa0000

08000bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc8:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <__NVIC_GetPriorityGrouping+0x18>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	0a1b      	lsrs	r3, r3, #8
 8000bce:	f003 0307 	and.w	r3, r3, #7
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	6039      	str	r1, [r7, #0]
 8000bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	db0a      	blt.n	8000c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	490c      	ldr	r1, [pc, #48]	; (8000c2c <__NVIC_SetPriority+0x4c>)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	0112      	lsls	r2, r2, #4
 8000c00:	b2d2      	uxtb	r2, r2
 8000c02:	440b      	add	r3, r1
 8000c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c08:	e00a      	b.n	8000c20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	4908      	ldr	r1, [pc, #32]	; (8000c30 <__NVIC_SetPriority+0x50>)
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	f003 030f 	and.w	r3, r3, #15
 8000c16:	3b04      	subs	r3, #4
 8000c18:	0112      	lsls	r2, r2, #4
 8000c1a:	b2d2      	uxtb	r2, r2
 8000c1c:	440b      	add	r3, r1
 8000c1e:	761a      	strb	r2, [r3, #24]
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000e100 	.word	0xe000e100
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b089      	sub	sp, #36	; 0x24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	f1c3 0307 	rsb	r3, r3, #7
 8000c4e:	2b04      	cmp	r3, #4
 8000c50:	bf28      	it	cs
 8000c52:	2304      	movcs	r3, #4
 8000c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	3304      	adds	r3, #4
 8000c5a:	2b06      	cmp	r3, #6
 8000c5c:	d902      	bls.n	8000c64 <NVIC_EncodePriority+0x30>
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3b03      	subs	r3, #3
 8000c62:	e000      	b.n	8000c66 <NVIC_EncodePriority+0x32>
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c68:	f04f 32ff 	mov.w	r2, #4294967295
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43da      	mvns	r2, r3
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	401a      	ands	r2, r3
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	fa01 f303 	lsl.w	r3, r1, r3
 8000c86:	43d9      	mvns	r1, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	4313      	orrs	r3, r2
         );
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3724      	adds	r7, #36	; 0x24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
	...

08000c9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cac:	d301      	bcc.n	8000cb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e00f      	b.n	8000cd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <SysTick_Config+0x40>)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cba:	210f      	movs	r1, #15
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc0:	f7ff ff8e 	bl	8000be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <SysTick_Config+0x40>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cca:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <SysTick_Config+0x40>)
 8000ccc:	2207      	movs	r2, #7
 8000cce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	e000e010 	.word	0xe000e010

08000ce0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f7ff ff47 	bl	8000b7c <__NVIC_SetPriorityGrouping>
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b086      	sub	sp, #24
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	60b9      	str	r1, [r7, #8]
 8000d00:	607a      	str	r2, [r7, #4]
 8000d02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d08:	f7ff ff5c 	bl	8000bc4 <__NVIC_GetPriorityGrouping>
 8000d0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	68b9      	ldr	r1, [r7, #8]
 8000d12:	6978      	ldr	r0, [r7, #20]
 8000d14:	f7ff ff8e 	bl	8000c34 <NVIC_EncodePriority>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d1e:	4611      	mov	r1, r2
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff ff5d 	bl	8000be0 <__NVIC_SetPriority>
}
 8000d26:	bf00      	nop
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f7ff ffb0 	bl	8000c9c <SysTick_Config>
 8000d3c:	4603      	mov	r3, r0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b089      	sub	sp, #36	; 0x24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d62:	2300      	movs	r3, #0
 8000d64:	61fb      	str	r3, [r7, #28]
 8000d66:	e175      	b.n	8001054 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000d68:	2201      	movs	r2, #1
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	697a      	ldr	r2, [r7, #20]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	f040 8164 	bne.w	800104e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f003 0303 	and.w	r3, r3, #3
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d005      	beq.n	8000d9e <HAL_GPIO_Init+0x56>
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f003 0303 	and.w	r3, r3, #3
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	d130      	bne.n	8000e00 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	2203      	movs	r2, #3
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	43db      	mvns	r3, r3
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	4013      	ands	r3, r2
 8000db4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	68da      	ldr	r2, [r3, #12]
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	4013      	ands	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	091b      	lsrs	r3, r3, #4
 8000dea:	f003 0201 	and.w	r2, r3, #1
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f003 0303 	and.w	r3, r3, #3
 8000e08:	2b03      	cmp	r3, #3
 8000e0a:	d017      	beq.n	8000e3c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	2203      	movs	r2, #3
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	4013      	ands	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	689a      	ldr	r2, [r3, #8]
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 0303 	and.w	r3, r3, #3
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d123      	bne.n	8000e90 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	08da      	lsrs	r2, r3, #3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3208      	adds	r2, #8
 8000e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	f003 0307 	and.w	r3, r3, #7
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	220f      	movs	r2, #15
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	691a      	ldr	r2, [r3, #16]
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	08da      	lsrs	r2, r3, #3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	3208      	adds	r2, #8
 8000e8a:	69b9      	ldr	r1, [r7, #24]
 8000e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	2203      	movs	r2, #3
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 0203 	and.w	r2, r3, #3
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	f000 80be 	beq.w	800104e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed2:	4b66      	ldr	r3, [pc, #408]	; (800106c <HAL_GPIO_Init+0x324>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed6:	4a65      	ldr	r2, [pc, #404]	; (800106c <HAL_GPIO_Init+0x324>)
 8000ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000edc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ede:	4b63      	ldr	r3, [pc, #396]	; (800106c <HAL_GPIO_Init+0x324>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000eea:	4a61      	ldr	r2, [pc, #388]	; (8001070 <HAL_GPIO_Init+0x328>)
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	089b      	lsrs	r3, r3, #2
 8000ef0:	3302      	adds	r3, #2
 8000ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f003 0303 	and.w	r3, r3, #3
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	220f      	movs	r2, #15
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43db      	mvns	r3, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a58      	ldr	r2, [pc, #352]	; (8001074 <HAL_GPIO_Init+0x32c>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d037      	beq.n	8000f86 <HAL_GPIO_Init+0x23e>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a57      	ldr	r2, [pc, #348]	; (8001078 <HAL_GPIO_Init+0x330>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d031      	beq.n	8000f82 <HAL_GPIO_Init+0x23a>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a56      	ldr	r2, [pc, #344]	; (800107c <HAL_GPIO_Init+0x334>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d02b      	beq.n	8000f7e <HAL_GPIO_Init+0x236>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a55      	ldr	r2, [pc, #340]	; (8001080 <HAL_GPIO_Init+0x338>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d025      	beq.n	8000f7a <HAL_GPIO_Init+0x232>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a54      	ldr	r2, [pc, #336]	; (8001084 <HAL_GPIO_Init+0x33c>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d01f      	beq.n	8000f76 <HAL_GPIO_Init+0x22e>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a53      	ldr	r2, [pc, #332]	; (8001088 <HAL_GPIO_Init+0x340>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d019      	beq.n	8000f72 <HAL_GPIO_Init+0x22a>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a52      	ldr	r2, [pc, #328]	; (800108c <HAL_GPIO_Init+0x344>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d013      	beq.n	8000f6e <HAL_GPIO_Init+0x226>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a51      	ldr	r2, [pc, #324]	; (8001090 <HAL_GPIO_Init+0x348>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d00d      	beq.n	8000f6a <HAL_GPIO_Init+0x222>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a50      	ldr	r2, [pc, #320]	; (8001094 <HAL_GPIO_Init+0x34c>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d007      	beq.n	8000f66 <HAL_GPIO_Init+0x21e>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a4f      	ldr	r2, [pc, #316]	; (8001098 <HAL_GPIO_Init+0x350>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d101      	bne.n	8000f62 <HAL_GPIO_Init+0x21a>
 8000f5e:	2309      	movs	r3, #9
 8000f60:	e012      	b.n	8000f88 <HAL_GPIO_Init+0x240>
 8000f62:	230a      	movs	r3, #10
 8000f64:	e010      	b.n	8000f88 <HAL_GPIO_Init+0x240>
 8000f66:	2308      	movs	r3, #8
 8000f68:	e00e      	b.n	8000f88 <HAL_GPIO_Init+0x240>
 8000f6a:	2307      	movs	r3, #7
 8000f6c:	e00c      	b.n	8000f88 <HAL_GPIO_Init+0x240>
 8000f6e:	2306      	movs	r3, #6
 8000f70:	e00a      	b.n	8000f88 <HAL_GPIO_Init+0x240>
 8000f72:	2305      	movs	r3, #5
 8000f74:	e008      	b.n	8000f88 <HAL_GPIO_Init+0x240>
 8000f76:	2304      	movs	r3, #4
 8000f78:	e006      	b.n	8000f88 <HAL_GPIO_Init+0x240>
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e004      	b.n	8000f88 <HAL_GPIO_Init+0x240>
 8000f7e:	2302      	movs	r3, #2
 8000f80:	e002      	b.n	8000f88 <HAL_GPIO_Init+0x240>
 8000f82:	2301      	movs	r3, #1
 8000f84:	e000      	b.n	8000f88 <HAL_GPIO_Init+0x240>
 8000f86:	2300      	movs	r3, #0
 8000f88:	69fa      	ldr	r2, [r7, #28]
 8000f8a:	f002 0203 	and.w	r2, r2, #3
 8000f8e:	0092      	lsls	r2, r2, #2
 8000f90:	4093      	lsls	r3, r2
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f98:	4935      	ldr	r1, [pc, #212]	; (8001070 <HAL_GPIO_Init+0x328>)
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	089b      	lsrs	r3, r3, #2
 8000f9e:	3302      	adds	r3, #2
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fa6:	4b3d      	ldr	r3, [pc, #244]	; (800109c <HAL_GPIO_Init+0x354>)
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fca:	4a34      	ldr	r2, [pc, #208]	; (800109c <HAL_GPIO_Init+0x354>)
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fd0:	4b32      	ldr	r3, [pc, #200]	; (800109c <HAL_GPIO_Init+0x354>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d003      	beq.n	8000ff4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ff4:	4a29      	ldr	r2, [pc, #164]	; (800109c <HAL_GPIO_Init+0x354>)
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ffa:	4b28      	ldr	r3, [pc, #160]	; (800109c <HAL_GPIO_Init+0x354>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	43db      	mvns	r3, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4013      	ands	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800101e:	4a1f      	ldr	r2, [pc, #124]	; (800109c <HAL_GPIO_Init+0x354>)
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001024:	4b1d      	ldr	r3, [pc, #116]	; (800109c <HAL_GPIO_Init+0x354>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d003      	beq.n	8001048 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001048:	4a14      	ldr	r2, [pc, #80]	; (800109c <HAL_GPIO_Init+0x354>)
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3301      	adds	r3, #1
 8001052:	61fb      	str	r3, [r7, #28]
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	2b0f      	cmp	r3, #15
 8001058:	f67f ae86 	bls.w	8000d68 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	3724      	adds	r7, #36	; 0x24
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	40023800 	.word	0x40023800
 8001070:	40013800 	.word	0x40013800
 8001074:	40020000 	.word	0x40020000
 8001078:	40020400 	.word	0x40020400
 800107c:	40020800 	.word	0x40020800
 8001080:	40020c00 	.word	0x40020c00
 8001084:	40021000 	.word	0x40021000
 8001088:	40021400 	.word	0x40021400
 800108c:	40021800 	.word	0x40021800
 8001090:	40021c00 	.word	0x40021c00
 8001094:	40022000 	.word	0x40022000
 8001098:	40022400 	.word	0x40022400
 800109c:	40013c00 	.word	0x40013c00

080010a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	807b      	strh	r3, [r7, #2]
 80010ac:	4613      	mov	r3, r2
 80010ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010b0:	787b      	ldrb	r3, [r7, #1]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010b6:	887a      	ldrh	r2, [r7, #2]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80010bc:	e003      	b.n	80010c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80010be:	887b      	ldrh	r3, [r7, #2]
 80010c0:	041a      	lsls	r2, r3, #16
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	619a      	str	r2, [r3, #24]
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
	...

080010d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80010dc:	2300      	movs	r3, #0
 80010de:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d101      	bne.n	80010ea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e29b      	b.n	8001622 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f000 8087 	beq.w	8001206 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010f8:	4b96      	ldr	r3, [pc, #600]	; (8001354 <HAL_RCC_OscConfig+0x280>)
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	f003 030c 	and.w	r3, r3, #12
 8001100:	2b04      	cmp	r3, #4
 8001102:	d00c      	beq.n	800111e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001104:	4b93      	ldr	r3, [pc, #588]	; (8001354 <HAL_RCC_OscConfig+0x280>)
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f003 030c 	and.w	r3, r3, #12
 800110c:	2b08      	cmp	r3, #8
 800110e:	d112      	bne.n	8001136 <HAL_RCC_OscConfig+0x62>
 8001110:	4b90      	ldr	r3, [pc, #576]	; (8001354 <HAL_RCC_OscConfig+0x280>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001118:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800111c:	d10b      	bne.n	8001136 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800111e:	4b8d      	ldr	r3, [pc, #564]	; (8001354 <HAL_RCC_OscConfig+0x280>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d06c      	beq.n	8001204 <HAL_RCC_OscConfig+0x130>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d168      	bne.n	8001204 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e275      	b.n	8001622 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800113e:	d106      	bne.n	800114e <HAL_RCC_OscConfig+0x7a>
 8001140:	4b84      	ldr	r3, [pc, #528]	; (8001354 <HAL_RCC_OscConfig+0x280>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a83      	ldr	r2, [pc, #524]	; (8001354 <HAL_RCC_OscConfig+0x280>)
 8001146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800114a:	6013      	str	r3, [r2, #0]
 800114c:	e02e      	b.n	80011ac <HAL_RCC_OscConfig+0xd8>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10c      	bne.n	8001170 <HAL_RCC_OscConfig+0x9c>
 8001156:	4b7f      	ldr	r3, [pc, #508]	; (8001354 <HAL_RCC_OscConfig+0x280>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a7e      	ldr	r2, [pc, #504]	; (8001354 <HAL_RCC_OscConfig+0x280>)
 800115c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	4b7c      	ldr	r3, [pc, #496]	; (8001354 <HAL_RCC_OscConfig+0x280>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a7b      	ldr	r2, [pc, #492]	; (8001354 <HAL_RCC_OscConfig+0x280>)
 8001168:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	e01d      	b.n	80011ac <HAL_RCC_OscConfig+0xd8>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001178:	d10c      	bne.n	8001194 <HAL_RCC_OscConfig+0xc0>
 800117a:	4b76      	ldr	r3, [pc, #472]	; (8001354 <HAL_RCC_OscConfig+0x280>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a75      	ldr	r2, [pc, #468]	; (8001354 <HAL_RCC_OscConfig+0x280>)
 8001180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	4b73      	ldr	r3, [pc, #460]	; (8001354 <HAL_RCC_OscConfig+0x280>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a72      	ldr	r2, [pc, #456]	; (8001354 <HAL_RCC_OscConfig+0x280>)
 800118c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	e00b      	b.n	80011ac <HAL_RCC_OscConfig+0xd8>
 8001194:	4b6f      	ldr	r3, [pc, #444]	; (8001354 <HAL_RCC_OscConfig+0x280>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a6e      	ldr	r2, [pc, #440]	; (8001354 <HAL_RCC_OscConfig+0x280>)
 800119a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800119e:	6013      	str	r3, [r2, #0]
 80011a0:	4b6c      	ldr	r3, [pc, #432]	; (8001354 <HAL_RCC_OscConfig+0x280>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a6b      	ldr	r2, [pc, #428]	; (8001354 <HAL_RCC_OscConfig+0x280>)
 80011a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d013      	beq.n	80011dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011b4:	f7ff fcb2 	bl	8000b1c <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011bc:	f7ff fcae 	bl	8000b1c <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b64      	cmp	r3, #100	; 0x64
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e229      	b.n	8001622 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ce:	4b61      	ldr	r3, [pc, #388]	; (8001354 <HAL_RCC_OscConfig+0x280>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d0f0      	beq.n	80011bc <HAL_RCC_OscConfig+0xe8>
 80011da:	e014      	b.n	8001206 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011dc:	f7ff fc9e 	bl	8000b1c <HAL_GetTick>
 80011e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011e4:	f7ff fc9a 	bl	8000b1c <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b64      	cmp	r3, #100	; 0x64
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e215      	b.n	8001622 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f6:	4b57      	ldr	r3, [pc, #348]	; (8001354 <HAL_RCC_OscConfig+0x280>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1f0      	bne.n	80011e4 <HAL_RCC_OscConfig+0x110>
 8001202:	e000      	b.n	8001206 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d069      	beq.n	80012e6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001212:	4b50      	ldr	r3, [pc, #320]	; (8001354 <HAL_RCC_OscConfig+0x280>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 030c 	and.w	r3, r3, #12
 800121a:	2b00      	cmp	r3, #0
 800121c:	d00b      	beq.n	8001236 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800121e:	4b4d      	ldr	r3, [pc, #308]	; (8001354 <HAL_RCC_OscConfig+0x280>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f003 030c 	and.w	r3, r3, #12
 8001226:	2b08      	cmp	r3, #8
 8001228:	d11c      	bne.n	8001264 <HAL_RCC_OscConfig+0x190>
 800122a:	4b4a      	ldr	r3, [pc, #296]	; (8001354 <HAL_RCC_OscConfig+0x280>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d116      	bne.n	8001264 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001236:	4b47      	ldr	r3, [pc, #284]	; (8001354 <HAL_RCC_OscConfig+0x280>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d005      	beq.n	800124e <HAL_RCC_OscConfig+0x17a>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d001      	beq.n	800124e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e1e9      	b.n	8001622 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800124e:	4b41      	ldr	r3, [pc, #260]	; (8001354 <HAL_RCC_OscConfig+0x280>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	691b      	ldr	r3, [r3, #16]
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	493d      	ldr	r1, [pc, #244]	; (8001354 <HAL_RCC_OscConfig+0x280>)
 800125e:	4313      	orrs	r3, r2
 8001260:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001262:	e040      	b.n	80012e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d023      	beq.n	80012b4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800126c:	4b39      	ldr	r3, [pc, #228]	; (8001354 <HAL_RCC_OscConfig+0x280>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a38      	ldr	r2, [pc, #224]	; (8001354 <HAL_RCC_OscConfig+0x280>)
 8001272:	f043 0301 	orr.w	r3, r3, #1
 8001276:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001278:	f7ff fc50 	bl	8000b1c <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001280:	f7ff fc4c 	bl	8000b1c <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e1c7      	b.n	8001622 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001292:	4b30      	ldr	r3, [pc, #192]	; (8001354 <HAL_RCC_OscConfig+0x280>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d0f0      	beq.n	8001280 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800129e:	4b2d      	ldr	r3, [pc, #180]	; (8001354 <HAL_RCC_OscConfig+0x280>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	4929      	ldr	r1, [pc, #164]	; (8001354 <HAL_RCC_OscConfig+0x280>)
 80012ae:	4313      	orrs	r3, r2
 80012b0:	600b      	str	r3, [r1, #0]
 80012b2:	e018      	b.n	80012e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012b4:	4b27      	ldr	r3, [pc, #156]	; (8001354 <HAL_RCC_OscConfig+0x280>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a26      	ldr	r2, [pc, #152]	; (8001354 <HAL_RCC_OscConfig+0x280>)
 80012ba:	f023 0301 	bic.w	r3, r3, #1
 80012be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c0:	f7ff fc2c 	bl	8000b1c <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012c8:	f7ff fc28 	bl	8000b1c <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e1a3      	b.n	8001622 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012da:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <HAL_RCC_OscConfig+0x280>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1f0      	bne.n	80012c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0308 	and.w	r3, r3, #8
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d038      	beq.n	8001364 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d019      	beq.n	800132e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012fa:	4b16      	ldr	r3, [pc, #88]	; (8001354 <HAL_RCC_OscConfig+0x280>)
 80012fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012fe:	4a15      	ldr	r2, [pc, #84]	; (8001354 <HAL_RCC_OscConfig+0x280>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001306:	f7ff fc09 	bl	8000b1c <HAL_GetTick>
 800130a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800130c:	e008      	b.n	8001320 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800130e:	f7ff fc05 	bl	8000b1c <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e180      	b.n	8001622 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <HAL_RCC_OscConfig+0x280>)
 8001322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d0f0      	beq.n	800130e <HAL_RCC_OscConfig+0x23a>
 800132c:	e01a      	b.n	8001364 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800132e:	4b09      	ldr	r3, [pc, #36]	; (8001354 <HAL_RCC_OscConfig+0x280>)
 8001330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001332:	4a08      	ldr	r2, [pc, #32]	; (8001354 <HAL_RCC_OscConfig+0x280>)
 8001334:	f023 0301 	bic.w	r3, r3, #1
 8001338:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800133a:	f7ff fbef 	bl	8000b1c <HAL_GetTick>
 800133e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001340:	e00a      	b.n	8001358 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001342:	f7ff fbeb 	bl	8000b1c <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d903      	bls.n	8001358 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e166      	b.n	8001622 <HAL_RCC_OscConfig+0x54e>
 8001354:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001358:	4b92      	ldr	r3, [pc, #584]	; (80015a4 <HAL_RCC_OscConfig+0x4d0>)
 800135a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1ee      	bne.n	8001342 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	2b00      	cmp	r3, #0
 800136e:	f000 80a4 	beq.w	80014ba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001372:	4b8c      	ldr	r3, [pc, #560]	; (80015a4 <HAL_RCC_OscConfig+0x4d0>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d10d      	bne.n	800139a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800137e:	4b89      	ldr	r3, [pc, #548]	; (80015a4 <HAL_RCC_OscConfig+0x4d0>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	4a88      	ldr	r2, [pc, #544]	; (80015a4 <HAL_RCC_OscConfig+0x4d0>)
 8001384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001388:	6413      	str	r3, [r2, #64]	; 0x40
 800138a:	4b86      	ldr	r3, [pc, #536]	; (80015a4 <HAL_RCC_OscConfig+0x4d0>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001396:	2301      	movs	r3, #1
 8001398:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800139a:	4b83      	ldr	r3, [pc, #524]	; (80015a8 <HAL_RCC_OscConfig+0x4d4>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d118      	bne.n	80013d8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80013a6:	4b80      	ldr	r3, [pc, #512]	; (80015a8 <HAL_RCC_OscConfig+0x4d4>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a7f      	ldr	r2, [pc, #508]	; (80015a8 <HAL_RCC_OscConfig+0x4d4>)
 80013ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013b2:	f7ff fbb3 	bl	8000b1c <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ba:	f7ff fbaf 	bl	8000b1c <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b64      	cmp	r3, #100	; 0x64
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e12a      	b.n	8001622 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013cc:	4b76      	ldr	r3, [pc, #472]	; (80015a8 <HAL_RCC_OscConfig+0x4d4>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0f0      	beq.n	80013ba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d106      	bne.n	80013ee <HAL_RCC_OscConfig+0x31a>
 80013e0:	4b70      	ldr	r3, [pc, #448]	; (80015a4 <HAL_RCC_OscConfig+0x4d0>)
 80013e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e4:	4a6f      	ldr	r2, [pc, #444]	; (80015a4 <HAL_RCC_OscConfig+0x4d0>)
 80013e6:	f043 0301 	orr.w	r3, r3, #1
 80013ea:	6713      	str	r3, [r2, #112]	; 0x70
 80013ec:	e02d      	b.n	800144a <HAL_RCC_OscConfig+0x376>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d10c      	bne.n	8001410 <HAL_RCC_OscConfig+0x33c>
 80013f6:	4b6b      	ldr	r3, [pc, #428]	; (80015a4 <HAL_RCC_OscConfig+0x4d0>)
 80013f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013fa:	4a6a      	ldr	r2, [pc, #424]	; (80015a4 <HAL_RCC_OscConfig+0x4d0>)
 80013fc:	f023 0301 	bic.w	r3, r3, #1
 8001400:	6713      	str	r3, [r2, #112]	; 0x70
 8001402:	4b68      	ldr	r3, [pc, #416]	; (80015a4 <HAL_RCC_OscConfig+0x4d0>)
 8001404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001406:	4a67      	ldr	r2, [pc, #412]	; (80015a4 <HAL_RCC_OscConfig+0x4d0>)
 8001408:	f023 0304 	bic.w	r3, r3, #4
 800140c:	6713      	str	r3, [r2, #112]	; 0x70
 800140e:	e01c      	b.n	800144a <HAL_RCC_OscConfig+0x376>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	2b05      	cmp	r3, #5
 8001416:	d10c      	bne.n	8001432 <HAL_RCC_OscConfig+0x35e>
 8001418:	4b62      	ldr	r3, [pc, #392]	; (80015a4 <HAL_RCC_OscConfig+0x4d0>)
 800141a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800141c:	4a61      	ldr	r2, [pc, #388]	; (80015a4 <HAL_RCC_OscConfig+0x4d0>)
 800141e:	f043 0304 	orr.w	r3, r3, #4
 8001422:	6713      	str	r3, [r2, #112]	; 0x70
 8001424:	4b5f      	ldr	r3, [pc, #380]	; (80015a4 <HAL_RCC_OscConfig+0x4d0>)
 8001426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001428:	4a5e      	ldr	r2, [pc, #376]	; (80015a4 <HAL_RCC_OscConfig+0x4d0>)
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	6713      	str	r3, [r2, #112]	; 0x70
 8001430:	e00b      	b.n	800144a <HAL_RCC_OscConfig+0x376>
 8001432:	4b5c      	ldr	r3, [pc, #368]	; (80015a4 <HAL_RCC_OscConfig+0x4d0>)
 8001434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001436:	4a5b      	ldr	r2, [pc, #364]	; (80015a4 <HAL_RCC_OscConfig+0x4d0>)
 8001438:	f023 0301 	bic.w	r3, r3, #1
 800143c:	6713      	str	r3, [r2, #112]	; 0x70
 800143e:	4b59      	ldr	r3, [pc, #356]	; (80015a4 <HAL_RCC_OscConfig+0x4d0>)
 8001440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001442:	4a58      	ldr	r2, [pc, #352]	; (80015a4 <HAL_RCC_OscConfig+0x4d0>)
 8001444:	f023 0304 	bic.w	r3, r3, #4
 8001448:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d015      	beq.n	800147e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001452:	f7ff fb63 	bl	8000b1c <HAL_GetTick>
 8001456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001458:	e00a      	b.n	8001470 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800145a:	f7ff fb5f 	bl	8000b1c <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	f241 3288 	movw	r2, #5000	; 0x1388
 8001468:	4293      	cmp	r3, r2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e0d8      	b.n	8001622 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001470:	4b4c      	ldr	r3, [pc, #304]	; (80015a4 <HAL_RCC_OscConfig+0x4d0>)
 8001472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0ee      	beq.n	800145a <HAL_RCC_OscConfig+0x386>
 800147c:	e014      	b.n	80014a8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800147e:	f7ff fb4d 	bl	8000b1c <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001484:	e00a      	b.n	800149c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001486:	f7ff fb49 	bl	8000b1c <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	f241 3288 	movw	r2, #5000	; 0x1388
 8001494:	4293      	cmp	r3, r2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e0c2      	b.n	8001622 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800149c:	4b41      	ldr	r3, [pc, #260]	; (80015a4 <HAL_RCC_OscConfig+0x4d0>)
 800149e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1ee      	bne.n	8001486 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80014a8:	7dfb      	ldrb	r3, [r7, #23]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d105      	bne.n	80014ba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014ae:	4b3d      	ldr	r3, [pc, #244]	; (80015a4 <HAL_RCC_OscConfig+0x4d0>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	4a3c      	ldr	r2, [pc, #240]	; (80015a4 <HAL_RCC_OscConfig+0x4d0>)
 80014b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f000 80ae 	beq.w	8001620 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014c4:	4b37      	ldr	r3, [pc, #220]	; (80015a4 <HAL_RCC_OscConfig+0x4d0>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f003 030c 	and.w	r3, r3, #12
 80014cc:	2b08      	cmp	r3, #8
 80014ce:	d06d      	beq.n	80015ac <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d14b      	bne.n	8001570 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d8:	4b32      	ldr	r3, [pc, #200]	; (80015a4 <HAL_RCC_OscConfig+0x4d0>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a31      	ldr	r2, [pc, #196]	; (80015a4 <HAL_RCC_OscConfig+0x4d0>)
 80014de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e4:	f7ff fb1a 	bl	8000b1c <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ec:	f7ff fb16 	bl	8000b1c <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e091      	b.n	8001622 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014fe:	4b29      	ldr	r3, [pc, #164]	; (80015a4 <HAL_RCC_OscConfig+0x4d0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1f0      	bne.n	80014ec <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	69da      	ldr	r2, [r3, #28]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a1b      	ldr	r3, [r3, #32]
 8001512:	431a      	orrs	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001518:	019b      	lsls	r3, r3, #6
 800151a:	431a      	orrs	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001520:	085b      	lsrs	r3, r3, #1
 8001522:	3b01      	subs	r3, #1
 8001524:	041b      	lsls	r3, r3, #16
 8001526:	431a      	orrs	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152c:	061b      	lsls	r3, r3, #24
 800152e:	431a      	orrs	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001534:	071b      	lsls	r3, r3, #28
 8001536:	491b      	ldr	r1, [pc, #108]	; (80015a4 <HAL_RCC_OscConfig+0x4d0>)
 8001538:	4313      	orrs	r3, r2
 800153a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800153c:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <HAL_RCC_OscConfig+0x4d0>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a18      	ldr	r2, [pc, #96]	; (80015a4 <HAL_RCC_OscConfig+0x4d0>)
 8001542:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001546:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001548:	f7ff fae8 	bl	8000b1c <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001550:	f7ff fae4 	bl	8000b1c <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e05f      	b.n	8001622 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <HAL_RCC_OscConfig+0x4d0>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0f0      	beq.n	8001550 <HAL_RCC_OscConfig+0x47c>
 800156e:	e057      	b.n	8001620 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <HAL_RCC_OscConfig+0x4d0>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a0b      	ldr	r2, [pc, #44]	; (80015a4 <HAL_RCC_OscConfig+0x4d0>)
 8001576:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800157a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157c:	f7ff face 	bl	8000b1c <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001584:	f7ff faca 	bl	8000b1c <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e045      	b.n	8001622 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001596:	4b03      	ldr	r3, [pc, #12]	; (80015a4 <HAL_RCC_OscConfig+0x4d0>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1f0      	bne.n	8001584 <HAL_RCC_OscConfig+0x4b0>
 80015a2:	e03d      	b.n	8001620 <HAL_RCC_OscConfig+0x54c>
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80015ac:	4b1f      	ldr	r3, [pc, #124]	; (800162c <HAL_RCC_OscConfig+0x558>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d030      	beq.n	800161c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d129      	bne.n	800161c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d122      	bne.n	800161c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015dc:	4013      	ands	r3, r2
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015e2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d119      	bne.n	800161c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f2:	085b      	lsrs	r3, r3, #1
 80015f4:	3b01      	subs	r3, #1
 80015f6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d10f      	bne.n	800161c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001606:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001608:	429a      	cmp	r2, r3
 800160a:	d107      	bne.n	800161c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001618:	429a      	cmp	r2, r3
 800161a:	d001      	beq.n	8001620 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e000      	b.n	8001622 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40023800 	.word	0x40023800

08001630 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e0d0      	b.n	80017ea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001648:	4b6a      	ldr	r3, [pc, #424]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 030f 	and.w	r3, r3, #15
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	429a      	cmp	r2, r3
 8001654:	d910      	bls.n	8001678 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001656:	4b67      	ldr	r3, [pc, #412]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f023 020f 	bic.w	r2, r3, #15
 800165e:	4965      	ldr	r1, [pc, #404]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	4313      	orrs	r3, r2
 8001664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001666:	4b63      	ldr	r3, [pc, #396]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 030f 	and.w	r3, r3, #15
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	429a      	cmp	r2, r3
 8001672:	d001      	beq.n	8001678 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e0b8      	b.n	80017ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d020      	beq.n	80016c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	2b00      	cmp	r3, #0
 800168e:	d005      	beq.n	800169c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001690:	4b59      	ldr	r3, [pc, #356]	; (80017f8 <HAL_RCC_ClockConfig+0x1c8>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	4a58      	ldr	r2, [pc, #352]	; (80017f8 <HAL_RCC_ClockConfig+0x1c8>)
 8001696:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800169a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0308 	and.w	r3, r3, #8
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d005      	beq.n	80016b4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016a8:	4b53      	ldr	r3, [pc, #332]	; (80017f8 <HAL_RCC_ClockConfig+0x1c8>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	4a52      	ldr	r2, [pc, #328]	; (80017f8 <HAL_RCC_ClockConfig+0x1c8>)
 80016ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016b4:	4b50      	ldr	r3, [pc, #320]	; (80017f8 <HAL_RCC_ClockConfig+0x1c8>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	494d      	ldr	r1, [pc, #308]	; (80017f8 <HAL_RCC_ClockConfig+0x1c8>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d040      	beq.n	8001754 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d107      	bne.n	80016ea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016da:	4b47      	ldr	r3, [pc, #284]	; (80017f8 <HAL_RCC_ClockConfig+0x1c8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d115      	bne.n	8001712 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e07f      	b.n	80017ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d107      	bne.n	8001702 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f2:	4b41      	ldr	r3, [pc, #260]	; (80017f8 <HAL_RCC_ClockConfig+0x1c8>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d109      	bne.n	8001712 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e073      	b.n	80017ea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001702:	4b3d      	ldr	r3, [pc, #244]	; (80017f8 <HAL_RCC_ClockConfig+0x1c8>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e06b      	b.n	80017ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001712:	4b39      	ldr	r3, [pc, #228]	; (80017f8 <HAL_RCC_ClockConfig+0x1c8>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f023 0203 	bic.w	r2, r3, #3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	4936      	ldr	r1, [pc, #216]	; (80017f8 <HAL_RCC_ClockConfig+0x1c8>)
 8001720:	4313      	orrs	r3, r2
 8001722:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001724:	f7ff f9fa 	bl	8000b1c <HAL_GetTick>
 8001728:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800172a:	e00a      	b.n	8001742 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800172c:	f7ff f9f6 	bl	8000b1c <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	f241 3288 	movw	r2, #5000	; 0x1388
 800173a:	4293      	cmp	r3, r2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e053      	b.n	80017ea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001742:	4b2d      	ldr	r3, [pc, #180]	; (80017f8 <HAL_RCC_ClockConfig+0x1c8>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 020c 	and.w	r2, r3, #12
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	429a      	cmp	r2, r3
 8001752:	d1eb      	bne.n	800172c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001754:	4b27      	ldr	r3, [pc, #156]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 030f 	and.w	r3, r3, #15
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	d210      	bcs.n	8001784 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001762:	4b24      	ldr	r3, [pc, #144]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f023 020f 	bic.w	r2, r3, #15
 800176a:	4922      	ldr	r1, [pc, #136]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	4313      	orrs	r3, r2
 8001770:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001772:	4b20      	ldr	r3, [pc, #128]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	429a      	cmp	r2, r3
 800177e:	d001      	beq.n	8001784 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e032      	b.n	80017ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	2b00      	cmp	r3, #0
 800178e:	d008      	beq.n	80017a2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001790:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <HAL_RCC_ClockConfig+0x1c8>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	4916      	ldr	r1, [pc, #88]	; (80017f8 <HAL_RCC_ClockConfig+0x1c8>)
 800179e:	4313      	orrs	r3, r2
 80017a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0308 	and.w	r3, r3, #8
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d009      	beq.n	80017c2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017ae:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <HAL_RCC_ClockConfig+0x1c8>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	490e      	ldr	r1, [pc, #56]	; (80017f8 <HAL_RCC_ClockConfig+0x1c8>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017c2:	f000 f821 	bl	8001808 <HAL_RCC_GetSysClockFreq>
 80017c6:	4602      	mov	r2, r0
 80017c8:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <HAL_RCC_ClockConfig+0x1c8>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	091b      	lsrs	r3, r3, #4
 80017ce:	f003 030f 	and.w	r3, r3, #15
 80017d2:	490a      	ldr	r1, [pc, #40]	; (80017fc <HAL_RCC_ClockConfig+0x1cc>)
 80017d4:	5ccb      	ldrb	r3, [r1, r3]
 80017d6:	fa22 f303 	lsr.w	r3, r2, r3
 80017da:	4a09      	ldr	r2, [pc, #36]	; (8001800 <HAL_RCC_ClockConfig+0x1d0>)
 80017dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017de:	4b09      	ldr	r3, [pc, #36]	; (8001804 <HAL_RCC_ClockConfig+0x1d4>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff f956 	bl	8000a94 <HAL_InitTick>

  return HAL_OK;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40023c00 	.word	0x40023c00
 80017f8:	40023800 	.word	0x40023800
 80017fc:	080030f4 	.word	0x080030f4
 8001800:	20000000 	.word	0x20000000
 8001804:	20000004 	.word	0x20000004

08001808 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001808:	b5b0      	push	{r4, r5, r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800180e:	2100      	movs	r1, #0
 8001810:	6079      	str	r1, [r7, #4]
 8001812:	2100      	movs	r1, #0
 8001814:	60f9      	str	r1, [r7, #12]
 8001816:	2100      	movs	r1, #0
 8001818:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800181a:	2100      	movs	r1, #0
 800181c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800181e:	4952      	ldr	r1, [pc, #328]	; (8001968 <HAL_RCC_GetSysClockFreq+0x160>)
 8001820:	6889      	ldr	r1, [r1, #8]
 8001822:	f001 010c 	and.w	r1, r1, #12
 8001826:	2908      	cmp	r1, #8
 8001828:	d00d      	beq.n	8001846 <HAL_RCC_GetSysClockFreq+0x3e>
 800182a:	2908      	cmp	r1, #8
 800182c:	f200 8094 	bhi.w	8001958 <HAL_RCC_GetSysClockFreq+0x150>
 8001830:	2900      	cmp	r1, #0
 8001832:	d002      	beq.n	800183a <HAL_RCC_GetSysClockFreq+0x32>
 8001834:	2904      	cmp	r1, #4
 8001836:	d003      	beq.n	8001840 <HAL_RCC_GetSysClockFreq+0x38>
 8001838:	e08e      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800183a:	4b4c      	ldr	r3, [pc, #304]	; (800196c <HAL_RCC_GetSysClockFreq+0x164>)
 800183c:	60bb      	str	r3, [r7, #8]
      break;
 800183e:	e08e      	b.n	800195e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001840:	4b4b      	ldr	r3, [pc, #300]	; (8001970 <HAL_RCC_GetSysClockFreq+0x168>)
 8001842:	60bb      	str	r3, [r7, #8]
      break;
 8001844:	e08b      	b.n	800195e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001846:	4948      	ldr	r1, [pc, #288]	; (8001968 <HAL_RCC_GetSysClockFreq+0x160>)
 8001848:	6849      	ldr	r1, [r1, #4]
 800184a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800184e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001850:	4945      	ldr	r1, [pc, #276]	; (8001968 <HAL_RCC_GetSysClockFreq+0x160>)
 8001852:	6849      	ldr	r1, [r1, #4]
 8001854:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001858:	2900      	cmp	r1, #0
 800185a:	d024      	beq.n	80018a6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800185c:	4942      	ldr	r1, [pc, #264]	; (8001968 <HAL_RCC_GetSysClockFreq+0x160>)
 800185e:	6849      	ldr	r1, [r1, #4]
 8001860:	0989      	lsrs	r1, r1, #6
 8001862:	4608      	mov	r0, r1
 8001864:	f04f 0100 	mov.w	r1, #0
 8001868:	f240 14ff 	movw	r4, #511	; 0x1ff
 800186c:	f04f 0500 	mov.w	r5, #0
 8001870:	ea00 0204 	and.w	r2, r0, r4
 8001874:	ea01 0305 	and.w	r3, r1, r5
 8001878:	493d      	ldr	r1, [pc, #244]	; (8001970 <HAL_RCC_GetSysClockFreq+0x168>)
 800187a:	fb01 f003 	mul.w	r0, r1, r3
 800187e:	2100      	movs	r1, #0
 8001880:	fb01 f102 	mul.w	r1, r1, r2
 8001884:	1844      	adds	r4, r0, r1
 8001886:	493a      	ldr	r1, [pc, #232]	; (8001970 <HAL_RCC_GetSysClockFreq+0x168>)
 8001888:	fba2 0101 	umull	r0, r1, r2, r1
 800188c:	1863      	adds	r3, r4, r1
 800188e:	4619      	mov	r1, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	461a      	mov	r2, r3
 8001894:	f04f 0300 	mov.w	r3, #0
 8001898:	f7fe fd2a 	bl	80002f0 <__aeabi_uldivmod>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4613      	mov	r3, r2
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	e04a      	b.n	800193c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018a6:	4b30      	ldr	r3, [pc, #192]	; (8001968 <HAL_RCC_GetSysClockFreq+0x160>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	099b      	lsrs	r3, r3, #6
 80018ac:	461a      	mov	r2, r3
 80018ae:	f04f 0300 	mov.w	r3, #0
 80018b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80018b6:	f04f 0100 	mov.w	r1, #0
 80018ba:	ea02 0400 	and.w	r4, r2, r0
 80018be:	ea03 0501 	and.w	r5, r3, r1
 80018c2:	4620      	mov	r0, r4
 80018c4:	4629      	mov	r1, r5
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	f04f 0300 	mov.w	r3, #0
 80018ce:	014b      	lsls	r3, r1, #5
 80018d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80018d4:	0142      	lsls	r2, r0, #5
 80018d6:	4610      	mov	r0, r2
 80018d8:	4619      	mov	r1, r3
 80018da:	1b00      	subs	r0, r0, r4
 80018dc:	eb61 0105 	sbc.w	r1, r1, r5
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	f04f 0300 	mov.w	r3, #0
 80018e8:	018b      	lsls	r3, r1, #6
 80018ea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80018ee:	0182      	lsls	r2, r0, #6
 80018f0:	1a12      	subs	r2, r2, r0
 80018f2:	eb63 0301 	sbc.w	r3, r3, r1
 80018f6:	f04f 0000 	mov.w	r0, #0
 80018fa:	f04f 0100 	mov.w	r1, #0
 80018fe:	00d9      	lsls	r1, r3, #3
 8001900:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001904:	00d0      	lsls	r0, r2, #3
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	1912      	adds	r2, r2, r4
 800190c:	eb45 0303 	adc.w	r3, r5, r3
 8001910:	f04f 0000 	mov.w	r0, #0
 8001914:	f04f 0100 	mov.w	r1, #0
 8001918:	0299      	lsls	r1, r3, #10
 800191a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800191e:	0290      	lsls	r0, r2, #10
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4610      	mov	r0, r2
 8001926:	4619      	mov	r1, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	461a      	mov	r2, r3
 800192c:	f04f 0300 	mov.w	r3, #0
 8001930:	f7fe fcde 	bl	80002f0 <__aeabi_uldivmod>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4613      	mov	r3, r2
 800193a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800193c:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <HAL_RCC_GetSysClockFreq+0x160>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	0c1b      	lsrs	r3, r3, #16
 8001942:	f003 0303 	and.w	r3, r3, #3
 8001946:	3301      	adds	r3, #1
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	fbb2 f3f3 	udiv	r3, r2, r3
 8001954:	60bb      	str	r3, [r7, #8]
      break;
 8001956:	e002      	b.n	800195e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001958:	4b04      	ldr	r3, [pc, #16]	; (800196c <HAL_RCC_GetSysClockFreq+0x164>)
 800195a:	60bb      	str	r3, [r7, #8]
      break;
 800195c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800195e:	68bb      	ldr	r3, [r7, #8]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bdb0      	pop	{r4, r5, r7, pc}
 8001968:	40023800 	.word	0x40023800
 800196c:	00f42400 	.word	0x00f42400
 8001970:	017d7840 	.word	0x017d7840

08001974 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001978:	4b03      	ldr	r3, [pc, #12]	; (8001988 <HAL_RCC_GetHCLKFreq+0x14>)
 800197a:	681b      	ldr	r3, [r3, #0]
}
 800197c:	4618      	mov	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000000 	.word	0x20000000

0800198c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001990:	f7ff fff0 	bl	8001974 <HAL_RCC_GetHCLKFreq>
 8001994:	4602      	mov	r2, r0
 8001996:	4b05      	ldr	r3, [pc, #20]	; (80019ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	0a9b      	lsrs	r3, r3, #10
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	4903      	ldr	r1, [pc, #12]	; (80019b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019a2:	5ccb      	ldrb	r3, [r1, r3]
 80019a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40023800 	.word	0x40023800
 80019b0:	08003104 	.word	0x08003104

080019b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019b8:	f7ff ffdc 	bl	8001974 <HAL_RCC_GetHCLKFreq>
 80019bc:	4602      	mov	r2, r0
 80019be:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	0b5b      	lsrs	r3, r3, #13
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	4903      	ldr	r1, [pc, #12]	; (80019d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019ca:	5ccb      	ldrb	r3, [r1, r3]
 80019cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40023800 	.word	0x40023800
 80019d8:	08003104 	.word	0x08003104

080019dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d012      	beq.n	8001a2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001a04:	4b69      	ldr	r3, [pc, #420]	; (8001bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	4a68      	ldr	r2, [pc, #416]	; (8001bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a0a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a0e:	6093      	str	r3, [r2, #8]
 8001a10:	4b66      	ldr	r3, [pc, #408]	; (8001bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a18:	4964      	ldr	r1, [pc, #400]	; (8001bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001a26:	2301      	movs	r3, #1
 8001a28:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d017      	beq.n	8001a66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001a36:	4b5d      	ldr	r3, [pc, #372]	; (8001bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a44:	4959      	ldr	r1, [pc, #356]	; (8001bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a54:	d101      	bne.n	8001a5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001a56:	2301      	movs	r3, #1
 8001a58:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001a62:	2301      	movs	r3, #1
 8001a64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d017      	beq.n	8001aa2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001a72:	4b4e      	ldr	r3, [pc, #312]	; (8001bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a78:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a80:	494a      	ldr	r1, [pc, #296]	; (8001bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a90:	d101      	bne.n	8001a96 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001a92:	2301      	movs	r3, #1
 8001a94:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0320 	and.w	r3, r3, #32
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f000 808b 	beq.w	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ac0:	4b3a      	ldr	r3, [pc, #232]	; (8001bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac4:	4a39      	ldr	r2, [pc, #228]	; (8001bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aca:	6413      	str	r3, [r2, #64]	; 0x40
 8001acc:	4b37      	ldr	r3, [pc, #220]	; (8001bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ad8:	4b35      	ldr	r3, [pc, #212]	; (8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a34      	ldr	r2, [pc, #208]	; (8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ae4:	f7ff f81a 	bl	8000b1c <HAL_GetTick>
 8001ae8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001aea:	e008      	b.n	8001afe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aec:	f7ff f816 	bl	8000b1c <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b64      	cmp	r3, #100	; 0x64
 8001af8:	d901      	bls.n	8001afe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e38f      	b.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001afe:	4b2c      	ldr	r3, [pc, #176]	; (8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0f0      	beq.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b0a:	4b28      	ldr	r3, [pc, #160]	; (8001bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b12:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d035      	beq.n	8001b86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d02e      	beq.n	8001b86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b28:	4b20      	ldr	r3, [pc, #128]	; (8001bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b30:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b32:	4b1e      	ldr	r3, [pc, #120]	; (8001bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b36:	4a1d      	ldr	r2, [pc, #116]	; (8001bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b3c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b3e:	4b1b      	ldr	r3, [pc, #108]	; (8001bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b42:	4a1a      	ldr	r2, [pc, #104]	; (8001bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b48:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001b4a:	4a18      	ldr	r2, [pc, #96]	; (8001bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001b50:	4b16      	ldr	r3, [pc, #88]	; (8001bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d114      	bne.n	8001b86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5c:	f7fe ffde 	bl	8000b1c <HAL_GetTick>
 8001b60:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b62:	e00a      	b.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b64:	f7fe ffda 	bl	8000b1c <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e351      	b.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b7a:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0ee      	beq.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001b92:	d111      	bne.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001b94:	4b05      	ldr	r3, [pc, #20]	; (8001bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ba0:	4b04      	ldr	r3, [pc, #16]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001ba2:	400b      	ands	r3, r1
 8001ba4:	4901      	ldr	r1, [pc, #4]	; (8001bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	608b      	str	r3, [r1, #8]
 8001baa:	e00b      	b.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40007000 	.word	0x40007000
 8001bb4:	0ffffcff 	.word	0x0ffffcff
 8001bb8:	4bb3      	ldr	r3, [pc, #716]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	4ab2      	ldr	r2, [pc, #712]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bbe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001bc2:	6093      	str	r3, [r2, #8]
 8001bc4:	4bb0      	ldr	r3, [pc, #704]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bc6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd0:	49ad      	ldr	r1, [pc, #692]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0310 	and.w	r3, r3, #16
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d010      	beq.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001be2:	4ba9      	ldr	r3, [pc, #676]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001be4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001be8:	4aa7      	ldr	r2, [pc, #668]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001bf2:	4ba5      	ldr	r3, [pc, #660]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bf4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bfc:	49a2      	ldr	r1, [pc, #648]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d00a      	beq.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c10:	4b9d      	ldr	r3, [pc, #628]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c16:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c1e:	499a      	ldr	r1, [pc, #616]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00a      	beq.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001c32:	4b95      	ldr	r3, [pc, #596]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c40:	4991      	ldr	r1, [pc, #580]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d00a      	beq.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001c54:	4b8c      	ldr	r3, [pc, #560]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c62:	4989      	ldr	r1, [pc, #548]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00a      	beq.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001c76:	4b84      	ldr	r3, [pc, #528]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c84:	4980      	ldr	r1, [pc, #512]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00a      	beq.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c98:	4b7b      	ldr	r3, [pc, #492]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c9e:	f023 0203 	bic.w	r2, r3, #3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	4978      	ldr	r1, [pc, #480]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00a      	beq.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001cba:	4b73      	ldr	r3, [pc, #460]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc0:	f023 020c 	bic.w	r2, r3, #12
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cc8:	496f      	ldr	r1, [pc, #444]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d00a      	beq.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001cdc:	4b6a      	ldr	r3, [pc, #424]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cea:	4967      	ldr	r1, [pc, #412]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d00a      	beq.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001cfe:	4b62      	ldr	r3, [pc, #392]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d04:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d0c:	495e      	ldr	r1, [pc, #376]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d00a      	beq.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001d20:	4b59      	ldr	r3, [pc, #356]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d2e:	4956      	ldr	r1, [pc, #344]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00a      	beq.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001d42:	4b51      	ldr	r3, [pc, #324]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d48:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d50:	494d      	ldr	r1, [pc, #308]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d00a      	beq.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001d64:	4b48      	ldr	r3, [pc, #288]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d6a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d72:	4945      	ldr	r1, [pc, #276]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00a      	beq.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001d86:	4b40      	ldr	r3, [pc, #256]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d8c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d94:	493c      	ldr	r1, [pc, #240]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d00a      	beq.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001da8:	4b37      	ldr	r3, [pc, #220]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001db6:	4934      	ldr	r1, [pc, #208]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d011      	beq.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001dca:	4b2f      	ldr	r3, [pc, #188]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001dd8:	492b      	ldr	r1, [pc, #172]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001de4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001de8:	d101      	bne.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001dea:	2301      	movs	r3, #1
 8001dec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0308 	and.w	r3, r3, #8
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00a      	beq.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e0a:	4b1f      	ldr	r3, [pc, #124]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e10:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e18:	491b      	ldr	r1, [pc, #108]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00b      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001e2c:	4b16      	ldr	r3, [pc, #88]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e32:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e3c:	4912      	ldr	r1, [pc, #72]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00b      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001e50:	4b0d      	ldr	r3, [pc, #52]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e56:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e60:	4909      	ldr	r1, [pc, #36]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d00f      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001e74:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e7a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e84:	e002      	b.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8001e86:	bf00      	nop
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	4986      	ldr	r1, [pc, #536]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d00b      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001ea0:	4b81      	ldr	r3, [pc, #516]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001ea2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ea6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001eb0:	497d      	ldr	r1, [pc, #500]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d006      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f000 80d6 	beq.w	8002078 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001ecc:	4b76      	ldr	r3, [pc, #472]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a75      	ldr	r2, [pc, #468]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001ed2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001ed6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ed8:	f7fe fe20 	bl	8000b1c <HAL_GetTick>
 8001edc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001ee0:	f7fe fe1c 	bl	8000b1c <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b64      	cmp	r3, #100	; 0x64
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e195      	b.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ef2:	4b6d      	ldr	r3, [pc, #436]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d021      	beq.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d11d      	bne.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001f12:	4b65      	ldr	r3, [pc, #404]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f18:	0c1b      	lsrs	r3, r3, #16
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001f20:	4b61      	ldr	r3, [pc, #388]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f26:	0e1b      	lsrs	r3, r3, #24
 8001f28:	f003 030f 	and.w	r3, r3, #15
 8001f2c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	019a      	lsls	r2, r3, #6
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	041b      	lsls	r3, r3, #16
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	061b      	lsls	r3, r3, #24
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	071b      	lsls	r3, r3, #28
 8001f46:	4958      	ldr	r1, [pc, #352]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d004      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f62:	d00a      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d02e      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f78:	d129      	bne.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001f7a:	4b4b      	ldr	r3, [pc, #300]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f80:	0c1b      	lsrs	r3, r3, #16
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001f88:	4b47      	ldr	r3, [pc, #284]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f8e:	0f1b      	lsrs	r3, r3, #28
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	019a      	lsls	r2, r3, #6
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	041b      	lsls	r3, r3, #16
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	061b      	lsls	r3, r3, #24
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	071b      	lsls	r3, r3, #28
 8001fae:	493e      	ldr	r1, [pc, #248]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001fb6:	4b3c      	ldr	r3, [pc, #240]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fbc:	f023 021f 	bic.w	r2, r3, #31
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	4938      	ldr	r1, [pc, #224]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d01d      	beq.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001fda:	4b33      	ldr	r3, [pc, #204]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fe0:	0e1b      	lsrs	r3, r3, #24
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001fe8:	4b2f      	ldr	r3, [pc, #188]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fee:	0f1b      	lsrs	r3, r3, #28
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	019a      	lsls	r2, r3, #6
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	041b      	lsls	r3, r3, #16
 8002002:	431a      	orrs	r2, r3
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	061b      	lsls	r3, r3, #24
 8002008:	431a      	orrs	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	071b      	lsls	r3, r3, #28
 800200e:	4926      	ldr	r1, [pc, #152]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002010:	4313      	orrs	r3, r2
 8002012:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d011      	beq.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	019a      	lsls	r2, r3, #6
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	041b      	lsls	r3, r3, #16
 800202e:	431a      	orrs	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	061b      	lsls	r3, r3, #24
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	071b      	lsls	r3, r3, #28
 800203e:	491a      	ldr	r1, [pc, #104]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002040:	4313      	orrs	r3, r2
 8002042:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002046:	4b18      	ldr	r3, [pc, #96]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a17      	ldr	r2, [pc, #92]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800204c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002050:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002052:	f7fe fd63 	bl	8000b1c <HAL_GetTick>
 8002056:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002058:	e008      	b.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800205a:	f7fe fd5f 	bl	8000b1c <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b64      	cmp	r3, #100	; 0x64
 8002066:	d901      	bls.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e0d8      	b.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800206c:	4b0e      	ldr	r3, [pc, #56]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0f0      	beq.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	2b01      	cmp	r3, #1
 800207c:	f040 80ce 	bne.w	800221c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002080:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a08      	ldr	r2, [pc, #32]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002086:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800208a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800208c:	f7fe fd46 	bl	8000b1c <HAL_GetTick>
 8002090:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002092:	e00b      	b.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002094:	f7fe fd42 	bl	8000b1c <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b64      	cmp	r3, #100	; 0x64
 80020a0:	d904      	bls.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e0bb      	b.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80020a6:	bf00      	nop
 80020a8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80020ac:	4b5e      	ldr	r3, [pc, #376]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020b8:	d0ec      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d009      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d02e      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d12a      	bne.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80020e2:	4b51      	ldr	r3, [pc, #324]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80020e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e8:	0c1b      	lsrs	r3, r3, #16
 80020ea:	f003 0303 	and.w	r3, r3, #3
 80020ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80020f0:	4b4d      	ldr	r3, [pc, #308]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80020f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f6:	0f1b      	lsrs	r3, r3, #28
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	019a      	lsls	r2, r3, #6
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	041b      	lsls	r3, r3, #16
 8002108:	431a      	orrs	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	061b      	lsls	r3, r3, #24
 8002110:	431a      	orrs	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	071b      	lsls	r3, r3, #28
 8002116:	4944      	ldr	r1, [pc, #272]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002118:	4313      	orrs	r3, r2
 800211a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800211e:	4b42      	ldr	r3, [pc, #264]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002120:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002124:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212c:	3b01      	subs	r3, #1
 800212e:	021b      	lsls	r3, r3, #8
 8002130:	493d      	ldr	r1, [pc, #244]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002132:	4313      	orrs	r3, r2
 8002134:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d022      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002148:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800214c:	d11d      	bne.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800214e:	4b36      	ldr	r3, [pc, #216]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002154:	0e1b      	lsrs	r3, r3, #24
 8002156:	f003 030f 	and.w	r3, r3, #15
 800215a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800215c:	4b32      	ldr	r3, [pc, #200]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800215e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002162:	0f1b      	lsrs	r3, r3, #28
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	019a      	lsls	r2, r3, #6
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	041b      	lsls	r3, r3, #16
 8002176:	431a      	orrs	r2, r3
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	061b      	lsls	r3, r3, #24
 800217c:	431a      	orrs	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	071b      	lsls	r3, r3, #28
 8002182:	4929      	ldr	r1, [pc, #164]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002184:	4313      	orrs	r3, r2
 8002186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0308 	and.w	r3, r3, #8
 8002192:	2b00      	cmp	r3, #0
 8002194:	d028      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002196:	4b24      	ldr	r3, [pc, #144]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219c:	0e1b      	lsrs	r3, r3, #24
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80021a4:	4b20      	ldr	r3, [pc, #128]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021aa:	0c1b      	lsrs	r3, r3, #16
 80021ac:	f003 0303 	and.w	r3, r3, #3
 80021b0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	019a      	lsls	r2, r3, #6
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	041b      	lsls	r3, r3, #16
 80021bc:	431a      	orrs	r2, r3
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	061b      	lsls	r3, r3, #24
 80021c2:	431a      	orrs	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	071b      	lsls	r3, r3, #28
 80021ca:	4917      	ldr	r1, [pc, #92]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80021d2:	4b15      	ldr	r3, [pc, #84]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e0:	4911      	ldr	r1, [pc, #68]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80021e8:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a0e      	ldr	r2, [pc, #56]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021f4:	f7fe fc92 	bl	8000b1c <HAL_GetTick>
 80021f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80021fc:	f7fe fc8e 	bl	8000b1c <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b64      	cmp	r3, #100	; 0x64
 8002208:	d901      	bls.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e007      	b.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002216:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800221a:	d1ef      	bne.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3720      	adds	r7, #32
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40023800 	.word	0x40023800

0800222c <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e03c      	b.n	80022b8 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d106      	bne.n	8002258 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7fe faf2 	bl	800083c <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2202      	movs	r2, #2
 800225c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0201 	bic.w	r2, r2, #1
 800226e:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f905 	bl	8002480 <USART_SetConfig>
 8002276:	4603      	mov	r3, r0
 8002278:	2b01      	cmp	r3, #1
 800227a:	d101      	bne.n	8002280 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e01b      	b.n	80022b8 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800228e:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800229e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 0201 	orr.w	r2, r2, #1
 80022ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 fa67 	bl	8002784 <USART_CheckIdleState>
 80022b6:	4603      	mov	r3, r0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08a      	sub	sp, #40	; 0x28
 80022c4:	af02      	add	r7, sp, #8
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	603b      	str	r3, [r7, #0]
 80022cc:	4613      	mov	r3, r2
 80022ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b01      	cmp	r3, #1
 80022da:	f040 8095 	bne.w	8002408 <HAL_USART_Transmit+0x148>
  {
    if ((pTxData == NULL) || (Size == 0U))
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d002      	beq.n	80022ea <HAL_USART_Transmit+0x2a>
 80022e4:	88fb      	ldrh	r3, [r7, #6]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e08d      	b.n	800240a <HAL_USART_Transmit+0x14a>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d101      	bne.n	80022fc <HAL_USART_Transmit+0x3c>
 80022f8:	2302      	movs	r3, #2
 80022fa:	e086      	b.n	800240a <HAL_USART_Transmit+0x14a>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_TX;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2212      	movs	r2, #18
 800230e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002312:	f7fe fc03 	bl	8000b1c <HAL_GetTick>
 8002316:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	88fa      	ldrh	r2, [r7, #6]
 800231c:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	88fa      	ldrh	r2, [r7, #6]
 8002322:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800232c:	d108      	bne.n	8002340 <HAL_USART_Transmit+0x80>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d104      	bne.n	8002340 <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	61bb      	str	r3, [r7, #24]
 800233e:	e003      	b.n	8002348 <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8002344:	2300      	movs	r3, #0
 8002346:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 8002348:	e02a      	b.n	80023a0 <HAL_USART_Transmit+0xe0>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	2200      	movs	r2, #0
 8002352:	2180      	movs	r1, #128	; 0x80
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f000 f85c 	bl	8002412 <USART_WaitOnFlagUntilTimeout>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e052      	b.n	800240a <HAL_USART_Transmit+0x14a>
      }
      if (ptxdata8bits == NULL)
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10b      	bne.n	8002382 <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002378:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	3302      	adds	r3, #2
 800237e:	61bb      	str	r3, [r7, #24]
 8002380:	e007      	b.n	8002392 <HAL_USART_Transmit+0xd2>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	781a      	ldrb	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	3301      	adds	r3, #1
 8002390:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002396:	b29b      	uxth	r3, r3
 8002398:	3b01      	subs	r3, #1
 800239a:	b29a      	uxth	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1cf      	bne.n	800234a <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	2200      	movs	r2, #0
 80023b2:	2140      	movs	r1, #64	; 0x40
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f000 f82c 	bl	8002412 <USART_WaitOnFlagUntilTimeout>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <HAL_USART_Transmit+0x104>
    {
      return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e022      	b.n	800240a <HAL_USART_Transmit+0x14a>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2240      	movs	r2, #64	; 0x40
 80023ca:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2208      	movs	r2, #8
 80023d2:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	699a      	ldr	r2, [r3, #24]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0208 	orr.w	r2, r2, #8
 80023e2:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	699a      	ldr	r2, [r3, #24]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 0210 	orr.w	r2, r2, #16
 80023f2:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_OK;
 8002404:	2300      	movs	r3, #0
 8002406:	e000      	b.n	800240a <HAL_USART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002408:	2302      	movs	r3, #2
  }
}
 800240a:	4618      	mov	r0, r3
 800240c:	3720      	adds	r7, #32
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b084      	sub	sp, #16
 8002416:	af00      	add	r7, sp, #0
 8002418:	60f8      	str	r0, [r7, #12]
 800241a:	60b9      	str	r1, [r7, #8]
 800241c:	603b      	str	r3, [r7, #0]
 800241e:	4613      	mov	r3, r2
 8002420:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8002422:	e018      	b.n	8002456 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800242a:	d014      	beq.n	8002456 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800242c:	f7fe fb76 	bl	8000b1c <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	429a      	cmp	r2, r3
 800243a:	d302      	bcc.n	8002442 <USART_WaitOnFlagUntilTimeout+0x30>
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d109      	bne.n	8002456 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e00f      	b.n	8002476 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	69da      	ldr	r2, [r3, #28]
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	4013      	ands	r3, r2
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	429a      	cmp	r2, r3
 8002464:	bf0c      	ite	eq
 8002466:	2301      	moveq	r3, #1
 8002468:	2300      	movne	r3, #0
 800246a:	b2db      	uxtb	r3, r3
 800246c:	461a      	mov	r2, r3
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	429a      	cmp	r2, r3
 8002472:	d0d7      	beq.n	8002424 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8002488:	2300      	movs	r3, #0
 800248a:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800248c:	2300      	movs	r3, #0
 800248e:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	431a      	orrs	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	4313      	orrs	r3, r2
 80024a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	4bae      	ldr	r3, [pc, #696]	; (8002768 <USART_SetConfig+0x2e8>)
 80024ae:	4013      	ands	r3, r2
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6812      	ldr	r2, [r2, #0]
 80024b4:	6979      	ldr	r1, [r7, #20]
 80024b6:	430b      	orrs	r3, r1
 80024b8:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL and STOP bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 80024ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024be:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	699a      	ldr	r2, [r3, #24]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	605a      	str	r2, [r3, #4]


  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a9b      	ldr	r2, [pc, #620]	; (800276c <USART_SetConfig+0x2ec>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d121      	bne.n	8002546 <USART_SetConfig+0xc6>
 8002502:	4b9b      	ldr	r3, [pc, #620]	; (8002770 <USART_SetConfig+0x2f0>)
 8002504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002508:	f003 0303 	and.w	r3, r3, #3
 800250c:	2b03      	cmp	r3, #3
 800250e:	d817      	bhi.n	8002540 <USART_SetConfig+0xc0>
 8002510:	a201      	add	r2, pc, #4	; (adr r2, 8002518 <USART_SetConfig+0x98>)
 8002512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002516:	bf00      	nop
 8002518:	08002529 	.word	0x08002529
 800251c:	08002535 	.word	0x08002535
 8002520:	0800252f 	.word	0x0800252f
 8002524:	0800253b 	.word	0x0800253b
 8002528:	2301      	movs	r3, #1
 800252a:	77fb      	strb	r3, [r7, #31]
 800252c:	e096      	b.n	800265c <USART_SetConfig+0x1dc>
 800252e:	2302      	movs	r3, #2
 8002530:	77fb      	strb	r3, [r7, #31]
 8002532:	e093      	b.n	800265c <USART_SetConfig+0x1dc>
 8002534:	2304      	movs	r3, #4
 8002536:	77fb      	strb	r3, [r7, #31]
 8002538:	e090      	b.n	800265c <USART_SetConfig+0x1dc>
 800253a:	2308      	movs	r3, #8
 800253c:	77fb      	strb	r3, [r7, #31]
 800253e:	e08d      	b.n	800265c <USART_SetConfig+0x1dc>
 8002540:	2310      	movs	r3, #16
 8002542:	77fb      	strb	r3, [r7, #31]
 8002544:	e08a      	b.n	800265c <USART_SetConfig+0x1dc>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a8a      	ldr	r2, [pc, #552]	; (8002774 <USART_SetConfig+0x2f4>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d132      	bne.n	80025b6 <USART_SetConfig+0x136>
 8002550:	4b87      	ldr	r3, [pc, #540]	; (8002770 <USART_SetConfig+0x2f0>)
 8002552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002556:	f003 030c 	and.w	r3, r3, #12
 800255a:	2b0c      	cmp	r3, #12
 800255c:	d828      	bhi.n	80025b0 <USART_SetConfig+0x130>
 800255e:	a201      	add	r2, pc, #4	; (adr r2, 8002564 <USART_SetConfig+0xe4>)
 8002560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002564:	08002599 	.word	0x08002599
 8002568:	080025b1 	.word	0x080025b1
 800256c:	080025b1 	.word	0x080025b1
 8002570:	080025b1 	.word	0x080025b1
 8002574:	080025a5 	.word	0x080025a5
 8002578:	080025b1 	.word	0x080025b1
 800257c:	080025b1 	.word	0x080025b1
 8002580:	080025b1 	.word	0x080025b1
 8002584:	0800259f 	.word	0x0800259f
 8002588:	080025b1 	.word	0x080025b1
 800258c:	080025b1 	.word	0x080025b1
 8002590:	080025b1 	.word	0x080025b1
 8002594:	080025ab 	.word	0x080025ab
 8002598:	2300      	movs	r3, #0
 800259a:	77fb      	strb	r3, [r7, #31]
 800259c:	e05e      	b.n	800265c <USART_SetConfig+0x1dc>
 800259e:	2302      	movs	r3, #2
 80025a0:	77fb      	strb	r3, [r7, #31]
 80025a2:	e05b      	b.n	800265c <USART_SetConfig+0x1dc>
 80025a4:	2304      	movs	r3, #4
 80025a6:	77fb      	strb	r3, [r7, #31]
 80025a8:	e058      	b.n	800265c <USART_SetConfig+0x1dc>
 80025aa:	2308      	movs	r3, #8
 80025ac:	77fb      	strb	r3, [r7, #31]
 80025ae:	e055      	b.n	800265c <USART_SetConfig+0x1dc>
 80025b0:	2310      	movs	r3, #16
 80025b2:	77fb      	strb	r3, [r7, #31]
 80025b4:	e052      	b.n	800265c <USART_SetConfig+0x1dc>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a6f      	ldr	r2, [pc, #444]	; (8002778 <USART_SetConfig+0x2f8>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d120      	bne.n	8002602 <USART_SetConfig+0x182>
 80025c0:	4b6b      	ldr	r3, [pc, #428]	; (8002770 <USART_SetConfig+0x2f0>)
 80025c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80025ca:	2b30      	cmp	r3, #48	; 0x30
 80025cc:	d013      	beq.n	80025f6 <USART_SetConfig+0x176>
 80025ce:	2b30      	cmp	r3, #48	; 0x30
 80025d0:	d814      	bhi.n	80025fc <USART_SetConfig+0x17c>
 80025d2:	2b20      	cmp	r3, #32
 80025d4:	d009      	beq.n	80025ea <USART_SetConfig+0x16a>
 80025d6:	2b20      	cmp	r3, #32
 80025d8:	d810      	bhi.n	80025fc <USART_SetConfig+0x17c>
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d002      	beq.n	80025e4 <USART_SetConfig+0x164>
 80025de:	2b10      	cmp	r3, #16
 80025e0:	d006      	beq.n	80025f0 <USART_SetConfig+0x170>
 80025e2:	e00b      	b.n	80025fc <USART_SetConfig+0x17c>
 80025e4:	2300      	movs	r3, #0
 80025e6:	77fb      	strb	r3, [r7, #31]
 80025e8:	e038      	b.n	800265c <USART_SetConfig+0x1dc>
 80025ea:	2302      	movs	r3, #2
 80025ec:	77fb      	strb	r3, [r7, #31]
 80025ee:	e035      	b.n	800265c <USART_SetConfig+0x1dc>
 80025f0:	2304      	movs	r3, #4
 80025f2:	77fb      	strb	r3, [r7, #31]
 80025f4:	e032      	b.n	800265c <USART_SetConfig+0x1dc>
 80025f6:	2308      	movs	r3, #8
 80025f8:	77fb      	strb	r3, [r7, #31]
 80025fa:	e02f      	b.n	800265c <USART_SetConfig+0x1dc>
 80025fc:	2310      	movs	r3, #16
 80025fe:	77fb      	strb	r3, [r7, #31]
 8002600:	e02c      	b.n	800265c <USART_SetConfig+0x1dc>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a5d      	ldr	r2, [pc, #372]	; (800277c <USART_SetConfig+0x2fc>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d125      	bne.n	8002658 <USART_SetConfig+0x1d8>
 800260c:	4b58      	ldr	r3, [pc, #352]	; (8002770 <USART_SetConfig+0x2f0>)
 800260e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002612:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002616:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800261a:	d017      	beq.n	800264c <USART_SetConfig+0x1cc>
 800261c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002620:	d817      	bhi.n	8002652 <USART_SetConfig+0x1d2>
 8002622:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002626:	d00b      	beq.n	8002640 <USART_SetConfig+0x1c0>
 8002628:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800262c:	d811      	bhi.n	8002652 <USART_SetConfig+0x1d2>
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <USART_SetConfig+0x1ba>
 8002632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002636:	d006      	beq.n	8002646 <USART_SetConfig+0x1c6>
 8002638:	e00b      	b.n	8002652 <USART_SetConfig+0x1d2>
 800263a:	2301      	movs	r3, #1
 800263c:	77fb      	strb	r3, [r7, #31]
 800263e:	e00d      	b.n	800265c <USART_SetConfig+0x1dc>
 8002640:	2302      	movs	r3, #2
 8002642:	77fb      	strb	r3, [r7, #31]
 8002644:	e00a      	b.n	800265c <USART_SetConfig+0x1dc>
 8002646:	2304      	movs	r3, #4
 8002648:	77fb      	strb	r3, [r7, #31]
 800264a:	e007      	b.n	800265c <USART_SetConfig+0x1dc>
 800264c:	2308      	movs	r3, #8
 800264e:	77fb      	strb	r3, [r7, #31]
 8002650:	e004      	b.n	800265c <USART_SetConfig+0x1dc>
 8002652:	2310      	movs	r3, #16
 8002654:	77fb      	strb	r3, [r7, #31]
 8002656:	e001      	b.n	800265c <USART_SetConfig+0x1dc>
 8002658:	2310      	movs	r3, #16
 800265a:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 800265c:	7ffb      	ldrb	r3, [r7, #31]
 800265e:	2b08      	cmp	r3, #8
 8002660:	d857      	bhi.n	8002712 <USART_SetConfig+0x292>
 8002662:	a201      	add	r2, pc, #4	; (adr r2, 8002668 <USART_SetConfig+0x1e8>)
 8002664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002668:	0800268d 	.word	0x0800268d
 800266c:	080026ab 	.word	0x080026ab
 8002670:	080026c9 	.word	0x080026c9
 8002674:	08002713 	.word	0x08002713
 8002678:	080026df 	.word	0x080026df
 800267c:	08002713 	.word	0x08002713
 8002680:	08002713 	.word	0x08002713
 8002684:	08002713 	.word	0x08002713
 8002688:	080026fd 	.word	0x080026fd
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800268c:	f7ff f97e 	bl	800198c <HAL_RCC_GetPCLK1Freq>
 8002690:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	005a      	lsls	r2, r3, #1
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	085b      	lsrs	r3, r3, #1
 800269c:	441a      	add	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a6:	61bb      	str	r3, [r7, #24]
      break;
 80026a8:	e036      	b.n	8002718 <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 80026aa:	f7ff f983 	bl	80019b4 <HAL_RCC_GetPCLK2Freq>
 80026ae:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	005a      	lsls	r2, r3, #1
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	085b      	lsrs	r3, r3, #1
 80026ba:	441a      	add	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c4:	61bb      	str	r3, [r7, #24]
      break;
 80026c6:	e027      	b.n	8002718 <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	085a      	lsrs	r2, r3, #1
 80026ce:	4b2c      	ldr	r3, [pc, #176]	; (8002780 <USART_SetConfig+0x300>)
 80026d0:	4413      	add	r3, r2
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6852      	ldr	r2, [r2, #4]
 80026d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
      break;
 80026dc:	e01c      	b.n	8002718 <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 80026de:	f7ff f893 	bl	8001808 <HAL_RCC_GetSysClockFreq>
 80026e2:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	005a      	lsls	r2, r3, #1
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	085b      	lsrs	r3, r3, #1
 80026ee:	441a      	add	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f8:	61bb      	str	r3, [r7, #24]
      break;
 80026fa:	e00d      	b.n	8002718 <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	085b      	lsrs	r3, r3, #1
 8002702:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	fbb2 f3f3 	udiv	r3, r2, r3
 800270e:	61bb      	str	r3, [r7, #24]
      break;
 8002710:	e002      	b.n	8002718 <USART_SetConfig+0x298>
    default:
      ret = HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	77bb      	strb	r3, [r7, #30]
      break;
 8002716:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	2b0f      	cmp	r3, #15
 800271c:	d916      	bls.n	800274c <USART_SetConfig+0x2cc>
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002724:	d212      	bcs.n	800274c <USART_SetConfig+0x2cc>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	b29b      	uxth	r3, r3
 800272a:	f023 030f 	bic.w	r3, r3, #15
 800272e:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	085b      	lsrs	r3, r3, #1
 8002734:	b29b      	uxth	r3, r3
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	b29a      	uxth	r2, r3
 800273c:	89fb      	ldrh	r3, [r7, #14]
 800273e:	4313      	orrs	r3, r2
 8002740:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	89fa      	ldrh	r2, [r7, #14]
 8002748:	60da      	str	r2, [r3, #12]
 800274a:	e001      	b.n	8002750 <USART_SetConfig+0x2d0>
  }
  else
  {
    ret = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	77bb      	strb	r3, [r7, #30]
  }


  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 800275c:	7fbb      	ldrb	r3, [r7, #30]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3720      	adds	r7, #32
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	efff69f3 	.word	0xefff69f3
 800276c:	40011000 	.word	0x40011000
 8002770:	40023800 	.word	0x40023800
 8002774:	40004400 	.word	0x40004400
 8002778:	40004800 	.word	0x40004800
 800277c:	40011400 	.word	0x40011400
 8002780:	01e84800 	.word	0x01e84800

08002784 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af02      	add	r7, sp, #8
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002792:	f7fe f9c3 	bl	8000b1c <HAL_GetTick>
 8002796:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	2b08      	cmp	r3, #8
 80027a4:	d10e      	bne.n	80027c4 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80027a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f7ff fe2c 	bl	8002412 <USART_WaitOnFlagUntilTimeout>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e01e      	b.n	8002802 <USART_CheckIdleState+0x7e>
    }
  }
#if defined(USART_ISR_REACK)
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0304 	and.w	r3, r3, #4
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d10e      	bne.n	80027f0 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80027d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f7ff fe16 	bl	8002412 <USART_WaitOnFlagUntilTimeout>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e008      	b.n	8002802 <USART_CheckIdleState+0x7e>
    }
  }
#endif

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
	...

0800280c <__errno>:
 800280c:	4b01      	ldr	r3, [pc, #4]	; (8002814 <__errno+0x8>)
 800280e:	6818      	ldr	r0, [r3, #0]
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	2000000c 	.word	0x2000000c

08002818 <__libc_init_array>:
 8002818:	b570      	push	{r4, r5, r6, lr}
 800281a:	4d0d      	ldr	r5, [pc, #52]	; (8002850 <__libc_init_array+0x38>)
 800281c:	4c0d      	ldr	r4, [pc, #52]	; (8002854 <__libc_init_array+0x3c>)
 800281e:	1b64      	subs	r4, r4, r5
 8002820:	10a4      	asrs	r4, r4, #2
 8002822:	2600      	movs	r6, #0
 8002824:	42a6      	cmp	r6, r4
 8002826:	d109      	bne.n	800283c <__libc_init_array+0x24>
 8002828:	4d0b      	ldr	r5, [pc, #44]	; (8002858 <__libc_init_array+0x40>)
 800282a:	4c0c      	ldr	r4, [pc, #48]	; (800285c <__libc_init_array+0x44>)
 800282c:	f000 fc4e 	bl	80030cc <_init>
 8002830:	1b64      	subs	r4, r4, r5
 8002832:	10a4      	asrs	r4, r4, #2
 8002834:	2600      	movs	r6, #0
 8002836:	42a6      	cmp	r6, r4
 8002838:	d105      	bne.n	8002846 <__libc_init_array+0x2e>
 800283a:	bd70      	pop	{r4, r5, r6, pc}
 800283c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002840:	4798      	blx	r3
 8002842:	3601      	adds	r6, #1
 8002844:	e7ee      	b.n	8002824 <__libc_init_array+0xc>
 8002846:	f855 3b04 	ldr.w	r3, [r5], #4
 800284a:	4798      	blx	r3
 800284c:	3601      	adds	r6, #1
 800284e:	e7f2      	b.n	8002836 <__libc_init_array+0x1e>
 8002850:	08003148 	.word	0x08003148
 8002854:	08003148 	.word	0x08003148
 8002858:	08003148 	.word	0x08003148
 800285c:	0800314c 	.word	0x0800314c

08002860 <memset>:
 8002860:	4402      	add	r2, r0
 8002862:	4603      	mov	r3, r0
 8002864:	4293      	cmp	r3, r2
 8002866:	d100      	bne.n	800286a <memset+0xa>
 8002868:	4770      	bx	lr
 800286a:	f803 1b01 	strb.w	r1, [r3], #1
 800286e:	e7f9      	b.n	8002864 <memset+0x4>

08002870 <siprintf>:
 8002870:	b40e      	push	{r1, r2, r3}
 8002872:	b500      	push	{lr}
 8002874:	b09c      	sub	sp, #112	; 0x70
 8002876:	ab1d      	add	r3, sp, #116	; 0x74
 8002878:	9002      	str	r0, [sp, #8]
 800287a:	9006      	str	r0, [sp, #24]
 800287c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002880:	4809      	ldr	r0, [pc, #36]	; (80028a8 <siprintf+0x38>)
 8002882:	9107      	str	r1, [sp, #28]
 8002884:	9104      	str	r1, [sp, #16]
 8002886:	4909      	ldr	r1, [pc, #36]	; (80028ac <siprintf+0x3c>)
 8002888:	f853 2b04 	ldr.w	r2, [r3], #4
 800288c:	9105      	str	r1, [sp, #20]
 800288e:	6800      	ldr	r0, [r0, #0]
 8002890:	9301      	str	r3, [sp, #4]
 8002892:	a902      	add	r1, sp, #8
 8002894:	f000 f868 	bl	8002968 <_svfiprintf_r>
 8002898:	9b02      	ldr	r3, [sp, #8]
 800289a:	2200      	movs	r2, #0
 800289c:	701a      	strb	r2, [r3, #0]
 800289e:	b01c      	add	sp, #112	; 0x70
 80028a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80028a4:	b003      	add	sp, #12
 80028a6:	4770      	bx	lr
 80028a8:	2000000c 	.word	0x2000000c
 80028ac:	ffff0208 	.word	0xffff0208

080028b0 <__ssputs_r>:
 80028b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028b4:	688e      	ldr	r6, [r1, #8]
 80028b6:	429e      	cmp	r6, r3
 80028b8:	4682      	mov	sl, r0
 80028ba:	460c      	mov	r4, r1
 80028bc:	4690      	mov	r8, r2
 80028be:	461f      	mov	r7, r3
 80028c0:	d838      	bhi.n	8002934 <__ssputs_r+0x84>
 80028c2:	898a      	ldrh	r2, [r1, #12]
 80028c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80028c8:	d032      	beq.n	8002930 <__ssputs_r+0x80>
 80028ca:	6825      	ldr	r5, [r4, #0]
 80028cc:	6909      	ldr	r1, [r1, #16]
 80028ce:	eba5 0901 	sub.w	r9, r5, r1
 80028d2:	6965      	ldr	r5, [r4, #20]
 80028d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80028d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80028dc:	3301      	adds	r3, #1
 80028de:	444b      	add	r3, r9
 80028e0:	106d      	asrs	r5, r5, #1
 80028e2:	429d      	cmp	r5, r3
 80028e4:	bf38      	it	cc
 80028e6:	461d      	movcc	r5, r3
 80028e8:	0553      	lsls	r3, r2, #21
 80028ea:	d531      	bpl.n	8002950 <__ssputs_r+0xa0>
 80028ec:	4629      	mov	r1, r5
 80028ee:	f000 fb47 	bl	8002f80 <_malloc_r>
 80028f2:	4606      	mov	r6, r0
 80028f4:	b950      	cbnz	r0, 800290c <__ssputs_r+0x5c>
 80028f6:	230c      	movs	r3, #12
 80028f8:	f8ca 3000 	str.w	r3, [sl]
 80028fc:	89a3      	ldrh	r3, [r4, #12]
 80028fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002902:	81a3      	strh	r3, [r4, #12]
 8002904:	f04f 30ff 	mov.w	r0, #4294967295
 8002908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800290c:	6921      	ldr	r1, [r4, #16]
 800290e:	464a      	mov	r2, r9
 8002910:	f000 fabe 	bl	8002e90 <memcpy>
 8002914:	89a3      	ldrh	r3, [r4, #12]
 8002916:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800291a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800291e:	81a3      	strh	r3, [r4, #12]
 8002920:	6126      	str	r6, [r4, #16]
 8002922:	6165      	str	r5, [r4, #20]
 8002924:	444e      	add	r6, r9
 8002926:	eba5 0509 	sub.w	r5, r5, r9
 800292a:	6026      	str	r6, [r4, #0]
 800292c:	60a5      	str	r5, [r4, #8]
 800292e:	463e      	mov	r6, r7
 8002930:	42be      	cmp	r6, r7
 8002932:	d900      	bls.n	8002936 <__ssputs_r+0x86>
 8002934:	463e      	mov	r6, r7
 8002936:	4632      	mov	r2, r6
 8002938:	6820      	ldr	r0, [r4, #0]
 800293a:	4641      	mov	r1, r8
 800293c:	f000 fab6 	bl	8002eac <memmove>
 8002940:	68a3      	ldr	r3, [r4, #8]
 8002942:	6822      	ldr	r2, [r4, #0]
 8002944:	1b9b      	subs	r3, r3, r6
 8002946:	4432      	add	r2, r6
 8002948:	60a3      	str	r3, [r4, #8]
 800294a:	6022      	str	r2, [r4, #0]
 800294c:	2000      	movs	r0, #0
 800294e:	e7db      	b.n	8002908 <__ssputs_r+0x58>
 8002950:	462a      	mov	r2, r5
 8002952:	f000 fb6f 	bl	8003034 <_realloc_r>
 8002956:	4606      	mov	r6, r0
 8002958:	2800      	cmp	r0, #0
 800295a:	d1e1      	bne.n	8002920 <__ssputs_r+0x70>
 800295c:	6921      	ldr	r1, [r4, #16]
 800295e:	4650      	mov	r0, sl
 8002960:	f000 fabe 	bl	8002ee0 <_free_r>
 8002964:	e7c7      	b.n	80028f6 <__ssputs_r+0x46>
	...

08002968 <_svfiprintf_r>:
 8002968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800296c:	4698      	mov	r8, r3
 800296e:	898b      	ldrh	r3, [r1, #12]
 8002970:	061b      	lsls	r3, r3, #24
 8002972:	b09d      	sub	sp, #116	; 0x74
 8002974:	4607      	mov	r7, r0
 8002976:	460d      	mov	r5, r1
 8002978:	4614      	mov	r4, r2
 800297a:	d50e      	bpl.n	800299a <_svfiprintf_r+0x32>
 800297c:	690b      	ldr	r3, [r1, #16]
 800297e:	b963      	cbnz	r3, 800299a <_svfiprintf_r+0x32>
 8002980:	2140      	movs	r1, #64	; 0x40
 8002982:	f000 fafd 	bl	8002f80 <_malloc_r>
 8002986:	6028      	str	r0, [r5, #0]
 8002988:	6128      	str	r0, [r5, #16]
 800298a:	b920      	cbnz	r0, 8002996 <_svfiprintf_r+0x2e>
 800298c:	230c      	movs	r3, #12
 800298e:	603b      	str	r3, [r7, #0]
 8002990:	f04f 30ff 	mov.w	r0, #4294967295
 8002994:	e0d1      	b.n	8002b3a <_svfiprintf_r+0x1d2>
 8002996:	2340      	movs	r3, #64	; 0x40
 8002998:	616b      	str	r3, [r5, #20]
 800299a:	2300      	movs	r3, #0
 800299c:	9309      	str	r3, [sp, #36]	; 0x24
 800299e:	2320      	movs	r3, #32
 80029a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80029a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80029a8:	2330      	movs	r3, #48	; 0x30
 80029aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002b54 <_svfiprintf_r+0x1ec>
 80029ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80029b2:	f04f 0901 	mov.w	r9, #1
 80029b6:	4623      	mov	r3, r4
 80029b8:	469a      	mov	sl, r3
 80029ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80029be:	b10a      	cbz	r2, 80029c4 <_svfiprintf_r+0x5c>
 80029c0:	2a25      	cmp	r2, #37	; 0x25
 80029c2:	d1f9      	bne.n	80029b8 <_svfiprintf_r+0x50>
 80029c4:	ebba 0b04 	subs.w	fp, sl, r4
 80029c8:	d00b      	beq.n	80029e2 <_svfiprintf_r+0x7a>
 80029ca:	465b      	mov	r3, fp
 80029cc:	4622      	mov	r2, r4
 80029ce:	4629      	mov	r1, r5
 80029d0:	4638      	mov	r0, r7
 80029d2:	f7ff ff6d 	bl	80028b0 <__ssputs_r>
 80029d6:	3001      	adds	r0, #1
 80029d8:	f000 80aa 	beq.w	8002b30 <_svfiprintf_r+0x1c8>
 80029dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80029de:	445a      	add	r2, fp
 80029e0:	9209      	str	r2, [sp, #36]	; 0x24
 80029e2:	f89a 3000 	ldrb.w	r3, [sl]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 80a2 	beq.w	8002b30 <_svfiprintf_r+0x1c8>
 80029ec:	2300      	movs	r3, #0
 80029ee:	f04f 32ff 	mov.w	r2, #4294967295
 80029f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80029f6:	f10a 0a01 	add.w	sl, sl, #1
 80029fa:	9304      	str	r3, [sp, #16]
 80029fc:	9307      	str	r3, [sp, #28]
 80029fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a02:	931a      	str	r3, [sp, #104]	; 0x68
 8002a04:	4654      	mov	r4, sl
 8002a06:	2205      	movs	r2, #5
 8002a08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a0c:	4851      	ldr	r0, [pc, #324]	; (8002b54 <_svfiprintf_r+0x1ec>)
 8002a0e:	f7fd fc1f 	bl	8000250 <memchr>
 8002a12:	9a04      	ldr	r2, [sp, #16]
 8002a14:	b9d8      	cbnz	r0, 8002a4e <_svfiprintf_r+0xe6>
 8002a16:	06d0      	lsls	r0, r2, #27
 8002a18:	bf44      	itt	mi
 8002a1a:	2320      	movmi	r3, #32
 8002a1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a20:	0711      	lsls	r1, r2, #28
 8002a22:	bf44      	itt	mi
 8002a24:	232b      	movmi	r3, #43	; 0x2b
 8002a26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a2a:	f89a 3000 	ldrb.w	r3, [sl]
 8002a2e:	2b2a      	cmp	r3, #42	; 0x2a
 8002a30:	d015      	beq.n	8002a5e <_svfiprintf_r+0xf6>
 8002a32:	9a07      	ldr	r2, [sp, #28]
 8002a34:	4654      	mov	r4, sl
 8002a36:	2000      	movs	r0, #0
 8002a38:	f04f 0c0a 	mov.w	ip, #10
 8002a3c:	4621      	mov	r1, r4
 8002a3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a42:	3b30      	subs	r3, #48	; 0x30
 8002a44:	2b09      	cmp	r3, #9
 8002a46:	d94e      	bls.n	8002ae6 <_svfiprintf_r+0x17e>
 8002a48:	b1b0      	cbz	r0, 8002a78 <_svfiprintf_r+0x110>
 8002a4a:	9207      	str	r2, [sp, #28]
 8002a4c:	e014      	b.n	8002a78 <_svfiprintf_r+0x110>
 8002a4e:	eba0 0308 	sub.w	r3, r0, r8
 8002a52:	fa09 f303 	lsl.w	r3, r9, r3
 8002a56:	4313      	orrs	r3, r2
 8002a58:	9304      	str	r3, [sp, #16]
 8002a5a:	46a2      	mov	sl, r4
 8002a5c:	e7d2      	b.n	8002a04 <_svfiprintf_r+0x9c>
 8002a5e:	9b03      	ldr	r3, [sp, #12]
 8002a60:	1d19      	adds	r1, r3, #4
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	9103      	str	r1, [sp, #12]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	bfbb      	ittet	lt
 8002a6a:	425b      	neglt	r3, r3
 8002a6c:	f042 0202 	orrlt.w	r2, r2, #2
 8002a70:	9307      	strge	r3, [sp, #28]
 8002a72:	9307      	strlt	r3, [sp, #28]
 8002a74:	bfb8      	it	lt
 8002a76:	9204      	strlt	r2, [sp, #16]
 8002a78:	7823      	ldrb	r3, [r4, #0]
 8002a7a:	2b2e      	cmp	r3, #46	; 0x2e
 8002a7c:	d10c      	bne.n	8002a98 <_svfiprintf_r+0x130>
 8002a7e:	7863      	ldrb	r3, [r4, #1]
 8002a80:	2b2a      	cmp	r3, #42	; 0x2a
 8002a82:	d135      	bne.n	8002af0 <_svfiprintf_r+0x188>
 8002a84:	9b03      	ldr	r3, [sp, #12]
 8002a86:	1d1a      	adds	r2, r3, #4
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	9203      	str	r2, [sp, #12]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	bfb8      	it	lt
 8002a90:	f04f 33ff 	movlt.w	r3, #4294967295
 8002a94:	3402      	adds	r4, #2
 8002a96:	9305      	str	r3, [sp, #20]
 8002a98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002b64 <_svfiprintf_r+0x1fc>
 8002a9c:	7821      	ldrb	r1, [r4, #0]
 8002a9e:	2203      	movs	r2, #3
 8002aa0:	4650      	mov	r0, sl
 8002aa2:	f7fd fbd5 	bl	8000250 <memchr>
 8002aa6:	b140      	cbz	r0, 8002aba <_svfiprintf_r+0x152>
 8002aa8:	2340      	movs	r3, #64	; 0x40
 8002aaa:	eba0 000a 	sub.w	r0, r0, sl
 8002aae:	fa03 f000 	lsl.w	r0, r3, r0
 8002ab2:	9b04      	ldr	r3, [sp, #16]
 8002ab4:	4303      	orrs	r3, r0
 8002ab6:	3401      	adds	r4, #1
 8002ab8:	9304      	str	r3, [sp, #16]
 8002aba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002abe:	4826      	ldr	r0, [pc, #152]	; (8002b58 <_svfiprintf_r+0x1f0>)
 8002ac0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002ac4:	2206      	movs	r2, #6
 8002ac6:	f7fd fbc3 	bl	8000250 <memchr>
 8002aca:	2800      	cmp	r0, #0
 8002acc:	d038      	beq.n	8002b40 <_svfiprintf_r+0x1d8>
 8002ace:	4b23      	ldr	r3, [pc, #140]	; (8002b5c <_svfiprintf_r+0x1f4>)
 8002ad0:	bb1b      	cbnz	r3, 8002b1a <_svfiprintf_r+0x1b2>
 8002ad2:	9b03      	ldr	r3, [sp, #12]
 8002ad4:	3307      	adds	r3, #7
 8002ad6:	f023 0307 	bic.w	r3, r3, #7
 8002ada:	3308      	adds	r3, #8
 8002adc:	9303      	str	r3, [sp, #12]
 8002ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ae0:	4433      	add	r3, r6
 8002ae2:	9309      	str	r3, [sp, #36]	; 0x24
 8002ae4:	e767      	b.n	80029b6 <_svfiprintf_r+0x4e>
 8002ae6:	fb0c 3202 	mla	r2, ip, r2, r3
 8002aea:	460c      	mov	r4, r1
 8002aec:	2001      	movs	r0, #1
 8002aee:	e7a5      	b.n	8002a3c <_svfiprintf_r+0xd4>
 8002af0:	2300      	movs	r3, #0
 8002af2:	3401      	adds	r4, #1
 8002af4:	9305      	str	r3, [sp, #20]
 8002af6:	4619      	mov	r1, r3
 8002af8:	f04f 0c0a 	mov.w	ip, #10
 8002afc:	4620      	mov	r0, r4
 8002afe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b02:	3a30      	subs	r2, #48	; 0x30
 8002b04:	2a09      	cmp	r2, #9
 8002b06:	d903      	bls.n	8002b10 <_svfiprintf_r+0x1a8>
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d0c5      	beq.n	8002a98 <_svfiprintf_r+0x130>
 8002b0c:	9105      	str	r1, [sp, #20]
 8002b0e:	e7c3      	b.n	8002a98 <_svfiprintf_r+0x130>
 8002b10:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b14:	4604      	mov	r4, r0
 8002b16:	2301      	movs	r3, #1
 8002b18:	e7f0      	b.n	8002afc <_svfiprintf_r+0x194>
 8002b1a:	ab03      	add	r3, sp, #12
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	462a      	mov	r2, r5
 8002b20:	4b0f      	ldr	r3, [pc, #60]	; (8002b60 <_svfiprintf_r+0x1f8>)
 8002b22:	a904      	add	r1, sp, #16
 8002b24:	4638      	mov	r0, r7
 8002b26:	f3af 8000 	nop.w
 8002b2a:	1c42      	adds	r2, r0, #1
 8002b2c:	4606      	mov	r6, r0
 8002b2e:	d1d6      	bne.n	8002ade <_svfiprintf_r+0x176>
 8002b30:	89ab      	ldrh	r3, [r5, #12]
 8002b32:	065b      	lsls	r3, r3, #25
 8002b34:	f53f af2c 	bmi.w	8002990 <_svfiprintf_r+0x28>
 8002b38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b3a:	b01d      	add	sp, #116	; 0x74
 8002b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b40:	ab03      	add	r3, sp, #12
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	462a      	mov	r2, r5
 8002b46:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <_svfiprintf_r+0x1f8>)
 8002b48:	a904      	add	r1, sp, #16
 8002b4a:	4638      	mov	r0, r7
 8002b4c:	f000 f87a 	bl	8002c44 <_printf_i>
 8002b50:	e7eb      	b.n	8002b2a <_svfiprintf_r+0x1c2>
 8002b52:	bf00      	nop
 8002b54:	0800310c 	.word	0x0800310c
 8002b58:	08003116 	.word	0x08003116
 8002b5c:	00000000 	.word	0x00000000
 8002b60:	080028b1 	.word	0x080028b1
 8002b64:	08003112 	.word	0x08003112

08002b68 <_printf_common>:
 8002b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b6c:	4616      	mov	r6, r2
 8002b6e:	4699      	mov	r9, r3
 8002b70:	688a      	ldr	r2, [r1, #8]
 8002b72:	690b      	ldr	r3, [r1, #16]
 8002b74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	bfb8      	it	lt
 8002b7c:	4613      	movlt	r3, r2
 8002b7e:	6033      	str	r3, [r6, #0]
 8002b80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002b84:	4607      	mov	r7, r0
 8002b86:	460c      	mov	r4, r1
 8002b88:	b10a      	cbz	r2, 8002b8e <_printf_common+0x26>
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	6033      	str	r3, [r6, #0]
 8002b8e:	6823      	ldr	r3, [r4, #0]
 8002b90:	0699      	lsls	r1, r3, #26
 8002b92:	bf42      	ittt	mi
 8002b94:	6833      	ldrmi	r3, [r6, #0]
 8002b96:	3302      	addmi	r3, #2
 8002b98:	6033      	strmi	r3, [r6, #0]
 8002b9a:	6825      	ldr	r5, [r4, #0]
 8002b9c:	f015 0506 	ands.w	r5, r5, #6
 8002ba0:	d106      	bne.n	8002bb0 <_printf_common+0x48>
 8002ba2:	f104 0a19 	add.w	sl, r4, #25
 8002ba6:	68e3      	ldr	r3, [r4, #12]
 8002ba8:	6832      	ldr	r2, [r6, #0]
 8002baa:	1a9b      	subs	r3, r3, r2
 8002bac:	42ab      	cmp	r3, r5
 8002bae:	dc26      	bgt.n	8002bfe <_printf_common+0x96>
 8002bb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002bb4:	1e13      	subs	r3, r2, #0
 8002bb6:	6822      	ldr	r2, [r4, #0]
 8002bb8:	bf18      	it	ne
 8002bba:	2301      	movne	r3, #1
 8002bbc:	0692      	lsls	r2, r2, #26
 8002bbe:	d42b      	bmi.n	8002c18 <_printf_common+0xb0>
 8002bc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002bc4:	4649      	mov	r1, r9
 8002bc6:	4638      	mov	r0, r7
 8002bc8:	47c0      	blx	r8
 8002bca:	3001      	adds	r0, #1
 8002bcc:	d01e      	beq.n	8002c0c <_printf_common+0xa4>
 8002bce:	6823      	ldr	r3, [r4, #0]
 8002bd0:	68e5      	ldr	r5, [r4, #12]
 8002bd2:	6832      	ldr	r2, [r6, #0]
 8002bd4:	f003 0306 	and.w	r3, r3, #6
 8002bd8:	2b04      	cmp	r3, #4
 8002bda:	bf08      	it	eq
 8002bdc:	1aad      	subeq	r5, r5, r2
 8002bde:	68a3      	ldr	r3, [r4, #8]
 8002be0:	6922      	ldr	r2, [r4, #16]
 8002be2:	bf0c      	ite	eq
 8002be4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002be8:	2500      	movne	r5, #0
 8002bea:	4293      	cmp	r3, r2
 8002bec:	bfc4      	itt	gt
 8002bee:	1a9b      	subgt	r3, r3, r2
 8002bf0:	18ed      	addgt	r5, r5, r3
 8002bf2:	2600      	movs	r6, #0
 8002bf4:	341a      	adds	r4, #26
 8002bf6:	42b5      	cmp	r5, r6
 8002bf8:	d11a      	bne.n	8002c30 <_printf_common+0xc8>
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	e008      	b.n	8002c10 <_printf_common+0xa8>
 8002bfe:	2301      	movs	r3, #1
 8002c00:	4652      	mov	r2, sl
 8002c02:	4649      	mov	r1, r9
 8002c04:	4638      	mov	r0, r7
 8002c06:	47c0      	blx	r8
 8002c08:	3001      	adds	r0, #1
 8002c0a:	d103      	bne.n	8002c14 <_printf_common+0xac>
 8002c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c14:	3501      	adds	r5, #1
 8002c16:	e7c6      	b.n	8002ba6 <_printf_common+0x3e>
 8002c18:	18e1      	adds	r1, r4, r3
 8002c1a:	1c5a      	adds	r2, r3, #1
 8002c1c:	2030      	movs	r0, #48	; 0x30
 8002c1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002c22:	4422      	add	r2, r4
 8002c24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002c28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002c2c:	3302      	adds	r3, #2
 8002c2e:	e7c7      	b.n	8002bc0 <_printf_common+0x58>
 8002c30:	2301      	movs	r3, #1
 8002c32:	4622      	mov	r2, r4
 8002c34:	4649      	mov	r1, r9
 8002c36:	4638      	mov	r0, r7
 8002c38:	47c0      	blx	r8
 8002c3a:	3001      	adds	r0, #1
 8002c3c:	d0e6      	beq.n	8002c0c <_printf_common+0xa4>
 8002c3e:	3601      	adds	r6, #1
 8002c40:	e7d9      	b.n	8002bf6 <_printf_common+0x8e>
	...

08002c44 <_printf_i>:
 8002c44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c48:	460c      	mov	r4, r1
 8002c4a:	4691      	mov	r9, r2
 8002c4c:	7e27      	ldrb	r7, [r4, #24]
 8002c4e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002c50:	2f78      	cmp	r7, #120	; 0x78
 8002c52:	4680      	mov	r8, r0
 8002c54:	469a      	mov	sl, r3
 8002c56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c5a:	d807      	bhi.n	8002c6c <_printf_i+0x28>
 8002c5c:	2f62      	cmp	r7, #98	; 0x62
 8002c5e:	d80a      	bhi.n	8002c76 <_printf_i+0x32>
 8002c60:	2f00      	cmp	r7, #0
 8002c62:	f000 80d8 	beq.w	8002e16 <_printf_i+0x1d2>
 8002c66:	2f58      	cmp	r7, #88	; 0x58
 8002c68:	f000 80a3 	beq.w	8002db2 <_printf_i+0x16e>
 8002c6c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002c70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002c74:	e03a      	b.n	8002cec <_printf_i+0xa8>
 8002c76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002c7a:	2b15      	cmp	r3, #21
 8002c7c:	d8f6      	bhi.n	8002c6c <_printf_i+0x28>
 8002c7e:	a001      	add	r0, pc, #4	; (adr r0, 8002c84 <_printf_i+0x40>)
 8002c80:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002c84:	08002cdd 	.word	0x08002cdd
 8002c88:	08002cf1 	.word	0x08002cf1
 8002c8c:	08002c6d 	.word	0x08002c6d
 8002c90:	08002c6d 	.word	0x08002c6d
 8002c94:	08002c6d 	.word	0x08002c6d
 8002c98:	08002c6d 	.word	0x08002c6d
 8002c9c:	08002cf1 	.word	0x08002cf1
 8002ca0:	08002c6d 	.word	0x08002c6d
 8002ca4:	08002c6d 	.word	0x08002c6d
 8002ca8:	08002c6d 	.word	0x08002c6d
 8002cac:	08002c6d 	.word	0x08002c6d
 8002cb0:	08002dfd 	.word	0x08002dfd
 8002cb4:	08002d21 	.word	0x08002d21
 8002cb8:	08002ddf 	.word	0x08002ddf
 8002cbc:	08002c6d 	.word	0x08002c6d
 8002cc0:	08002c6d 	.word	0x08002c6d
 8002cc4:	08002e1f 	.word	0x08002e1f
 8002cc8:	08002c6d 	.word	0x08002c6d
 8002ccc:	08002d21 	.word	0x08002d21
 8002cd0:	08002c6d 	.word	0x08002c6d
 8002cd4:	08002c6d 	.word	0x08002c6d
 8002cd8:	08002de7 	.word	0x08002de7
 8002cdc:	680b      	ldr	r3, [r1, #0]
 8002cde:	1d1a      	adds	r2, r3, #4
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	600a      	str	r2, [r1, #0]
 8002ce4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002ce8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0a3      	b.n	8002e38 <_printf_i+0x1f4>
 8002cf0:	6825      	ldr	r5, [r4, #0]
 8002cf2:	6808      	ldr	r0, [r1, #0]
 8002cf4:	062e      	lsls	r6, r5, #24
 8002cf6:	f100 0304 	add.w	r3, r0, #4
 8002cfa:	d50a      	bpl.n	8002d12 <_printf_i+0xce>
 8002cfc:	6805      	ldr	r5, [r0, #0]
 8002cfe:	600b      	str	r3, [r1, #0]
 8002d00:	2d00      	cmp	r5, #0
 8002d02:	da03      	bge.n	8002d0c <_printf_i+0xc8>
 8002d04:	232d      	movs	r3, #45	; 0x2d
 8002d06:	426d      	negs	r5, r5
 8002d08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d0c:	485e      	ldr	r0, [pc, #376]	; (8002e88 <_printf_i+0x244>)
 8002d0e:	230a      	movs	r3, #10
 8002d10:	e019      	b.n	8002d46 <_printf_i+0x102>
 8002d12:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002d16:	6805      	ldr	r5, [r0, #0]
 8002d18:	600b      	str	r3, [r1, #0]
 8002d1a:	bf18      	it	ne
 8002d1c:	b22d      	sxthne	r5, r5
 8002d1e:	e7ef      	b.n	8002d00 <_printf_i+0xbc>
 8002d20:	680b      	ldr	r3, [r1, #0]
 8002d22:	6825      	ldr	r5, [r4, #0]
 8002d24:	1d18      	adds	r0, r3, #4
 8002d26:	6008      	str	r0, [r1, #0]
 8002d28:	0628      	lsls	r0, r5, #24
 8002d2a:	d501      	bpl.n	8002d30 <_printf_i+0xec>
 8002d2c:	681d      	ldr	r5, [r3, #0]
 8002d2e:	e002      	b.n	8002d36 <_printf_i+0xf2>
 8002d30:	0669      	lsls	r1, r5, #25
 8002d32:	d5fb      	bpl.n	8002d2c <_printf_i+0xe8>
 8002d34:	881d      	ldrh	r5, [r3, #0]
 8002d36:	4854      	ldr	r0, [pc, #336]	; (8002e88 <_printf_i+0x244>)
 8002d38:	2f6f      	cmp	r7, #111	; 0x6f
 8002d3a:	bf0c      	ite	eq
 8002d3c:	2308      	moveq	r3, #8
 8002d3e:	230a      	movne	r3, #10
 8002d40:	2100      	movs	r1, #0
 8002d42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002d46:	6866      	ldr	r6, [r4, #4]
 8002d48:	60a6      	str	r6, [r4, #8]
 8002d4a:	2e00      	cmp	r6, #0
 8002d4c:	bfa2      	ittt	ge
 8002d4e:	6821      	ldrge	r1, [r4, #0]
 8002d50:	f021 0104 	bicge.w	r1, r1, #4
 8002d54:	6021      	strge	r1, [r4, #0]
 8002d56:	b90d      	cbnz	r5, 8002d5c <_printf_i+0x118>
 8002d58:	2e00      	cmp	r6, #0
 8002d5a:	d04d      	beq.n	8002df8 <_printf_i+0x1b4>
 8002d5c:	4616      	mov	r6, r2
 8002d5e:	fbb5 f1f3 	udiv	r1, r5, r3
 8002d62:	fb03 5711 	mls	r7, r3, r1, r5
 8002d66:	5dc7      	ldrb	r7, [r0, r7]
 8002d68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002d6c:	462f      	mov	r7, r5
 8002d6e:	42bb      	cmp	r3, r7
 8002d70:	460d      	mov	r5, r1
 8002d72:	d9f4      	bls.n	8002d5e <_printf_i+0x11a>
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d10b      	bne.n	8002d90 <_printf_i+0x14c>
 8002d78:	6823      	ldr	r3, [r4, #0]
 8002d7a:	07df      	lsls	r7, r3, #31
 8002d7c:	d508      	bpl.n	8002d90 <_printf_i+0x14c>
 8002d7e:	6923      	ldr	r3, [r4, #16]
 8002d80:	6861      	ldr	r1, [r4, #4]
 8002d82:	4299      	cmp	r1, r3
 8002d84:	bfde      	ittt	le
 8002d86:	2330      	movle	r3, #48	; 0x30
 8002d88:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002d8c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002d90:	1b92      	subs	r2, r2, r6
 8002d92:	6122      	str	r2, [r4, #16]
 8002d94:	f8cd a000 	str.w	sl, [sp]
 8002d98:	464b      	mov	r3, r9
 8002d9a:	aa03      	add	r2, sp, #12
 8002d9c:	4621      	mov	r1, r4
 8002d9e:	4640      	mov	r0, r8
 8002da0:	f7ff fee2 	bl	8002b68 <_printf_common>
 8002da4:	3001      	adds	r0, #1
 8002da6:	d14c      	bne.n	8002e42 <_printf_i+0x1fe>
 8002da8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dac:	b004      	add	sp, #16
 8002dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002db2:	4835      	ldr	r0, [pc, #212]	; (8002e88 <_printf_i+0x244>)
 8002db4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002db8:	6823      	ldr	r3, [r4, #0]
 8002dba:	680e      	ldr	r6, [r1, #0]
 8002dbc:	061f      	lsls	r7, r3, #24
 8002dbe:	f856 5b04 	ldr.w	r5, [r6], #4
 8002dc2:	600e      	str	r6, [r1, #0]
 8002dc4:	d514      	bpl.n	8002df0 <_printf_i+0x1ac>
 8002dc6:	07d9      	lsls	r1, r3, #31
 8002dc8:	bf44      	itt	mi
 8002dca:	f043 0320 	orrmi.w	r3, r3, #32
 8002dce:	6023      	strmi	r3, [r4, #0]
 8002dd0:	b91d      	cbnz	r5, 8002dda <_printf_i+0x196>
 8002dd2:	6823      	ldr	r3, [r4, #0]
 8002dd4:	f023 0320 	bic.w	r3, r3, #32
 8002dd8:	6023      	str	r3, [r4, #0]
 8002dda:	2310      	movs	r3, #16
 8002ddc:	e7b0      	b.n	8002d40 <_printf_i+0xfc>
 8002dde:	6823      	ldr	r3, [r4, #0]
 8002de0:	f043 0320 	orr.w	r3, r3, #32
 8002de4:	6023      	str	r3, [r4, #0]
 8002de6:	2378      	movs	r3, #120	; 0x78
 8002de8:	4828      	ldr	r0, [pc, #160]	; (8002e8c <_printf_i+0x248>)
 8002dea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002dee:	e7e3      	b.n	8002db8 <_printf_i+0x174>
 8002df0:	065e      	lsls	r6, r3, #25
 8002df2:	bf48      	it	mi
 8002df4:	b2ad      	uxthmi	r5, r5
 8002df6:	e7e6      	b.n	8002dc6 <_printf_i+0x182>
 8002df8:	4616      	mov	r6, r2
 8002dfa:	e7bb      	b.n	8002d74 <_printf_i+0x130>
 8002dfc:	680b      	ldr	r3, [r1, #0]
 8002dfe:	6826      	ldr	r6, [r4, #0]
 8002e00:	6960      	ldr	r0, [r4, #20]
 8002e02:	1d1d      	adds	r5, r3, #4
 8002e04:	600d      	str	r5, [r1, #0]
 8002e06:	0635      	lsls	r5, r6, #24
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	d501      	bpl.n	8002e10 <_printf_i+0x1cc>
 8002e0c:	6018      	str	r0, [r3, #0]
 8002e0e:	e002      	b.n	8002e16 <_printf_i+0x1d2>
 8002e10:	0671      	lsls	r1, r6, #25
 8002e12:	d5fb      	bpl.n	8002e0c <_printf_i+0x1c8>
 8002e14:	8018      	strh	r0, [r3, #0]
 8002e16:	2300      	movs	r3, #0
 8002e18:	6123      	str	r3, [r4, #16]
 8002e1a:	4616      	mov	r6, r2
 8002e1c:	e7ba      	b.n	8002d94 <_printf_i+0x150>
 8002e1e:	680b      	ldr	r3, [r1, #0]
 8002e20:	1d1a      	adds	r2, r3, #4
 8002e22:	600a      	str	r2, [r1, #0]
 8002e24:	681e      	ldr	r6, [r3, #0]
 8002e26:	6862      	ldr	r2, [r4, #4]
 8002e28:	2100      	movs	r1, #0
 8002e2a:	4630      	mov	r0, r6
 8002e2c:	f7fd fa10 	bl	8000250 <memchr>
 8002e30:	b108      	cbz	r0, 8002e36 <_printf_i+0x1f2>
 8002e32:	1b80      	subs	r0, r0, r6
 8002e34:	6060      	str	r0, [r4, #4]
 8002e36:	6863      	ldr	r3, [r4, #4]
 8002e38:	6123      	str	r3, [r4, #16]
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e40:	e7a8      	b.n	8002d94 <_printf_i+0x150>
 8002e42:	6923      	ldr	r3, [r4, #16]
 8002e44:	4632      	mov	r2, r6
 8002e46:	4649      	mov	r1, r9
 8002e48:	4640      	mov	r0, r8
 8002e4a:	47d0      	blx	sl
 8002e4c:	3001      	adds	r0, #1
 8002e4e:	d0ab      	beq.n	8002da8 <_printf_i+0x164>
 8002e50:	6823      	ldr	r3, [r4, #0]
 8002e52:	079b      	lsls	r3, r3, #30
 8002e54:	d413      	bmi.n	8002e7e <_printf_i+0x23a>
 8002e56:	68e0      	ldr	r0, [r4, #12]
 8002e58:	9b03      	ldr	r3, [sp, #12]
 8002e5a:	4298      	cmp	r0, r3
 8002e5c:	bfb8      	it	lt
 8002e5e:	4618      	movlt	r0, r3
 8002e60:	e7a4      	b.n	8002dac <_printf_i+0x168>
 8002e62:	2301      	movs	r3, #1
 8002e64:	4632      	mov	r2, r6
 8002e66:	4649      	mov	r1, r9
 8002e68:	4640      	mov	r0, r8
 8002e6a:	47d0      	blx	sl
 8002e6c:	3001      	adds	r0, #1
 8002e6e:	d09b      	beq.n	8002da8 <_printf_i+0x164>
 8002e70:	3501      	adds	r5, #1
 8002e72:	68e3      	ldr	r3, [r4, #12]
 8002e74:	9903      	ldr	r1, [sp, #12]
 8002e76:	1a5b      	subs	r3, r3, r1
 8002e78:	42ab      	cmp	r3, r5
 8002e7a:	dcf2      	bgt.n	8002e62 <_printf_i+0x21e>
 8002e7c:	e7eb      	b.n	8002e56 <_printf_i+0x212>
 8002e7e:	2500      	movs	r5, #0
 8002e80:	f104 0619 	add.w	r6, r4, #25
 8002e84:	e7f5      	b.n	8002e72 <_printf_i+0x22e>
 8002e86:	bf00      	nop
 8002e88:	0800311d 	.word	0x0800311d
 8002e8c:	0800312e 	.word	0x0800312e

08002e90 <memcpy>:
 8002e90:	440a      	add	r2, r1
 8002e92:	4291      	cmp	r1, r2
 8002e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8002e98:	d100      	bne.n	8002e9c <memcpy+0xc>
 8002e9a:	4770      	bx	lr
 8002e9c:	b510      	push	{r4, lr}
 8002e9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ea2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002ea6:	4291      	cmp	r1, r2
 8002ea8:	d1f9      	bne.n	8002e9e <memcpy+0xe>
 8002eaa:	bd10      	pop	{r4, pc}

08002eac <memmove>:
 8002eac:	4288      	cmp	r0, r1
 8002eae:	b510      	push	{r4, lr}
 8002eb0:	eb01 0402 	add.w	r4, r1, r2
 8002eb4:	d902      	bls.n	8002ebc <memmove+0x10>
 8002eb6:	4284      	cmp	r4, r0
 8002eb8:	4623      	mov	r3, r4
 8002eba:	d807      	bhi.n	8002ecc <memmove+0x20>
 8002ebc:	1e43      	subs	r3, r0, #1
 8002ebe:	42a1      	cmp	r1, r4
 8002ec0:	d008      	beq.n	8002ed4 <memmove+0x28>
 8002ec2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002ec6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002eca:	e7f8      	b.n	8002ebe <memmove+0x12>
 8002ecc:	4402      	add	r2, r0
 8002ece:	4601      	mov	r1, r0
 8002ed0:	428a      	cmp	r2, r1
 8002ed2:	d100      	bne.n	8002ed6 <memmove+0x2a>
 8002ed4:	bd10      	pop	{r4, pc}
 8002ed6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002eda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002ede:	e7f7      	b.n	8002ed0 <memmove+0x24>

08002ee0 <_free_r>:
 8002ee0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002ee2:	2900      	cmp	r1, #0
 8002ee4:	d048      	beq.n	8002f78 <_free_r+0x98>
 8002ee6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002eea:	9001      	str	r0, [sp, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f1a1 0404 	sub.w	r4, r1, #4
 8002ef2:	bfb8      	it	lt
 8002ef4:	18e4      	addlt	r4, r4, r3
 8002ef6:	f000 f8d3 	bl	80030a0 <__malloc_lock>
 8002efa:	4a20      	ldr	r2, [pc, #128]	; (8002f7c <_free_r+0x9c>)
 8002efc:	9801      	ldr	r0, [sp, #4]
 8002efe:	6813      	ldr	r3, [r2, #0]
 8002f00:	4615      	mov	r5, r2
 8002f02:	b933      	cbnz	r3, 8002f12 <_free_r+0x32>
 8002f04:	6063      	str	r3, [r4, #4]
 8002f06:	6014      	str	r4, [r2, #0]
 8002f08:	b003      	add	sp, #12
 8002f0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002f0e:	f000 b8cd 	b.w	80030ac <__malloc_unlock>
 8002f12:	42a3      	cmp	r3, r4
 8002f14:	d90b      	bls.n	8002f2e <_free_r+0x4e>
 8002f16:	6821      	ldr	r1, [r4, #0]
 8002f18:	1862      	adds	r2, r4, r1
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	bf04      	itt	eq
 8002f1e:	681a      	ldreq	r2, [r3, #0]
 8002f20:	685b      	ldreq	r3, [r3, #4]
 8002f22:	6063      	str	r3, [r4, #4]
 8002f24:	bf04      	itt	eq
 8002f26:	1852      	addeq	r2, r2, r1
 8002f28:	6022      	streq	r2, [r4, #0]
 8002f2a:	602c      	str	r4, [r5, #0]
 8002f2c:	e7ec      	b.n	8002f08 <_free_r+0x28>
 8002f2e:	461a      	mov	r2, r3
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	b10b      	cbz	r3, 8002f38 <_free_r+0x58>
 8002f34:	42a3      	cmp	r3, r4
 8002f36:	d9fa      	bls.n	8002f2e <_free_r+0x4e>
 8002f38:	6811      	ldr	r1, [r2, #0]
 8002f3a:	1855      	adds	r5, r2, r1
 8002f3c:	42a5      	cmp	r5, r4
 8002f3e:	d10b      	bne.n	8002f58 <_free_r+0x78>
 8002f40:	6824      	ldr	r4, [r4, #0]
 8002f42:	4421      	add	r1, r4
 8002f44:	1854      	adds	r4, r2, r1
 8002f46:	42a3      	cmp	r3, r4
 8002f48:	6011      	str	r1, [r2, #0]
 8002f4a:	d1dd      	bne.n	8002f08 <_free_r+0x28>
 8002f4c:	681c      	ldr	r4, [r3, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	6053      	str	r3, [r2, #4]
 8002f52:	4421      	add	r1, r4
 8002f54:	6011      	str	r1, [r2, #0]
 8002f56:	e7d7      	b.n	8002f08 <_free_r+0x28>
 8002f58:	d902      	bls.n	8002f60 <_free_r+0x80>
 8002f5a:	230c      	movs	r3, #12
 8002f5c:	6003      	str	r3, [r0, #0]
 8002f5e:	e7d3      	b.n	8002f08 <_free_r+0x28>
 8002f60:	6825      	ldr	r5, [r4, #0]
 8002f62:	1961      	adds	r1, r4, r5
 8002f64:	428b      	cmp	r3, r1
 8002f66:	bf04      	itt	eq
 8002f68:	6819      	ldreq	r1, [r3, #0]
 8002f6a:	685b      	ldreq	r3, [r3, #4]
 8002f6c:	6063      	str	r3, [r4, #4]
 8002f6e:	bf04      	itt	eq
 8002f70:	1949      	addeq	r1, r1, r5
 8002f72:	6021      	streq	r1, [r4, #0]
 8002f74:	6054      	str	r4, [r2, #4]
 8002f76:	e7c7      	b.n	8002f08 <_free_r+0x28>
 8002f78:	b003      	add	sp, #12
 8002f7a:	bd30      	pop	{r4, r5, pc}
 8002f7c:	20000090 	.word	0x20000090

08002f80 <_malloc_r>:
 8002f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f82:	1ccd      	adds	r5, r1, #3
 8002f84:	f025 0503 	bic.w	r5, r5, #3
 8002f88:	3508      	adds	r5, #8
 8002f8a:	2d0c      	cmp	r5, #12
 8002f8c:	bf38      	it	cc
 8002f8e:	250c      	movcc	r5, #12
 8002f90:	2d00      	cmp	r5, #0
 8002f92:	4606      	mov	r6, r0
 8002f94:	db01      	blt.n	8002f9a <_malloc_r+0x1a>
 8002f96:	42a9      	cmp	r1, r5
 8002f98:	d903      	bls.n	8002fa2 <_malloc_r+0x22>
 8002f9a:	230c      	movs	r3, #12
 8002f9c:	6033      	str	r3, [r6, #0]
 8002f9e:	2000      	movs	r0, #0
 8002fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fa2:	f000 f87d 	bl	80030a0 <__malloc_lock>
 8002fa6:	4921      	ldr	r1, [pc, #132]	; (800302c <_malloc_r+0xac>)
 8002fa8:	680a      	ldr	r2, [r1, #0]
 8002faa:	4614      	mov	r4, r2
 8002fac:	b99c      	cbnz	r4, 8002fd6 <_malloc_r+0x56>
 8002fae:	4f20      	ldr	r7, [pc, #128]	; (8003030 <_malloc_r+0xb0>)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	b923      	cbnz	r3, 8002fbe <_malloc_r+0x3e>
 8002fb4:	4621      	mov	r1, r4
 8002fb6:	4630      	mov	r0, r6
 8002fb8:	f000 f862 	bl	8003080 <_sbrk_r>
 8002fbc:	6038      	str	r0, [r7, #0]
 8002fbe:	4629      	mov	r1, r5
 8002fc0:	4630      	mov	r0, r6
 8002fc2:	f000 f85d 	bl	8003080 <_sbrk_r>
 8002fc6:	1c43      	adds	r3, r0, #1
 8002fc8:	d123      	bne.n	8003012 <_malloc_r+0x92>
 8002fca:	230c      	movs	r3, #12
 8002fcc:	6033      	str	r3, [r6, #0]
 8002fce:	4630      	mov	r0, r6
 8002fd0:	f000 f86c 	bl	80030ac <__malloc_unlock>
 8002fd4:	e7e3      	b.n	8002f9e <_malloc_r+0x1e>
 8002fd6:	6823      	ldr	r3, [r4, #0]
 8002fd8:	1b5b      	subs	r3, r3, r5
 8002fda:	d417      	bmi.n	800300c <_malloc_r+0x8c>
 8002fdc:	2b0b      	cmp	r3, #11
 8002fde:	d903      	bls.n	8002fe8 <_malloc_r+0x68>
 8002fe0:	6023      	str	r3, [r4, #0]
 8002fe2:	441c      	add	r4, r3
 8002fe4:	6025      	str	r5, [r4, #0]
 8002fe6:	e004      	b.n	8002ff2 <_malloc_r+0x72>
 8002fe8:	6863      	ldr	r3, [r4, #4]
 8002fea:	42a2      	cmp	r2, r4
 8002fec:	bf0c      	ite	eq
 8002fee:	600b      	streq	r3, [r1, #0]
 8002ff0:	6053      	strne	r3, [r2, #4]
 8002ff2:	4630      	mov	r0, r6
 8002ff4:	f000 f85a 	bl	80030ac <__malloc_unlock>
 8002ff8:	f104 000b 	add.w	r0, r4, #11
 8002ffc:	1d23      	adds	r3, r4, #4
 8002ffe:	f020 0007 	bic.w	r0, r0, #7
 8003002:	1ac2      	subs	r2, r0, r3
 8003004:	d0cc      	beq.n	8002fa0 <_malloc_r+0x20>
 8003006:	1a1b      	subs	r3, r3, r0
 8003008:	50a3      	str	r3, [r4, r2]
 800300a:	e7c9      	b.n	8002fa0 <_malloc_r+0x20>
 800300c:	4622      	mov	r2, r4
 800300e:	6864      	ldr	r4, [r4, #4]
 8003010:	e7cc      	b.n	8002fac <_malloc_r+0x2c>
 8003012:	1cc4      	adds	r4, r0, #3
 8003014:	f024 0403 	bic.w	r4, r4, #3
 8003018:	42a0      	cmp	r0, r4
 800301a:	d0e3      	beq.n	8002fe4 <_malloc_r+0x64>
 800301c:	1a21      	subs	r1, r4, r0
 800301e:	4630      	mov	r0, r6
 8003020:	f000 f82e 	bl	8003080 <_sbrk_r>
 8003024:	3001      	adds	r0, #1
 8003026:	d1dd      	bne.n	8002fe4 <_malloc_r+0x64>
 8003028:	e7cf      	b.n	8002fca <_malloc_r+0x4a>
 800302a:	bf00      	nop
 800302c:	20000090 	.word	0x20000090
 8003030:	20000094 	.word	0x20000094

08003034 <_realloc_r>:
 8003034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003036:	4607      	mov	r7, r0
 8003038:	4614      	mov	r4, r2
 800303a:	460e      	mov	r6, r1
 800303c:	b921      	cbnz	r1, 8003048 <_realloc_r+0x14>
 800303e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003042:	4611      	mov	r1, r2
 8003044:	f7ff bf9c 	b.w	8002f80 <_malloc_r>
 8003048:	b922      	cbnz	r2, 8003054 <_realloc_r+0x20>
 800304a:	f7ff ff49 	bl	8002ee0 <_free_r>
 800304e:	4625      	mov	r5, r4
 8003050:	4628      	mov	r0, r5
 8003052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003054:	f000 f830 	bl	80030b8 <_malloc_usable_size_r>
 8003058:	42a0      	cmp	r0, r4
 800305a:	d20f      	bcs.n	800307c <_realloc_r+0x48>
 800305c:	4621      	mov	r1, r4
 800305e:	4638      	mov	r0, r7
 8003060:	f7ff ff8e 	bl	8002f80 <_malloc_r>
 8003064:	4605      	mov	r5, r0
 8003066:	2800      	cmp	r0, #0
 8003068:	d0f2      	beq.n	8003050 <_realloc_r+0x1c>
 800306a:	4631      	mov	r1, r6
 800306c:	4622      	mov	r2, r4
 800306e:	f7ff ff0f 	bl	8002e90 <memcpy>
 8003072:	4631      	mov	r1, r6
 8003074:	4638      	mov	r0, r7
 8003076:	f7ff ff33 	bl	8002ee0 <_free_r>
 800307a:	e7e9      	b.n	8003050 <_realloc_r+0x1c>
 800307c:	4635      	mov	r5, r6
 800307e:	e7e7      	b.n	8003050 <_realloc_r+0x1c>

08003080 <_sbrk_r>:
 8003080:	b538      	push	{r3, r4, r5, lr}
 8003082:	4d06      	ldr	r5, [pc, #24]	; (800309c <_sbrk_r+0x1c>)
 8003084:	2300      	movs	r3, #0
 8003086:	4604      	mov	r4, r0
 8003088:	4608      	mov	r0, r1
 800308a:	602b      	str	r3, [r5, #0]
 800308c:	f7fd fc84 	bl	8000998 <_sbrk>
 8003090:	1c43      	adds	r3, r0, #1
 8003092:	d102      	bne.n	800309a <_sbrk_r+0x1a>
 8003094:	682b      	ldr	r3, [r5, #0]
 8003096:	b103      	cbz	r3, 800309a <_sbrk_r+0x1a>
 8003098:	6023      	str	r3, [r4, #0]
 800309a:	bd38      	pop	{r3, r4, r5, pc}
 800309c:	20000100 	.word	0x20000100

080030a0 <__malloc_lock>:
 80030a0:	4801      	ldr	r0, [pc, #4]	; (80030a8 <__malloc_lock+0x8>)
 80030a2:	f000 b811 	b.w	80030c8 <__retarget_lock_acquire_recursive>
 80030a6:	bf00      	nop
 80030a8:	20000108 	.word	0x20000108

080030ac <__malloc_unlock>:
 80030ac:	4801      	ldr	r0, [pc, #4]	; (80030b4 <__malloc_unlock+0x8>)
 80030ae:	f000 b80c 	b.w	80030ca <__retarget_lock_release_recursive>
 80030b2:	bf00      	nop
 80030b4:	20000108 	.word	0x20000108

080030b8 <_malloc_usable_size_r>:
 80030b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030bc:	1f18      	subs	r0, r3, #4
 80030be:	2b00      	cmp	r3, #0
 80030c0:	bfbc      	itt	lt
 80030c2:	580b      	ldrlt	r3, [r1, r0]
 80030c4:	18c0      	addlt	r0, r0, r3
 80030c6:	4770      	bx	lr

080030c8 <__retarget_lock_acquire_recursive>:
 80030c8:	4770      	bx	lr

080030ca <__retarget_lock_release_recursive>:
 80030ca:	4770      	bx	lr

080030cc <_init>:
 80030cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ce:	bf00      	nop
 80030d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030d2:	bc08      	pop	{r3}
 80030d4:	469e      	mov	lr, r3
 80030d6:	4770      	bx	lr

080030d8 <_fini>:
 80030d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030da:	bf00      	nop
 80030dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030de:	bc08      	pop	{r3}
 80030e0:	469e      	mov	lr, r3
 80030e2:	4770      	bx	lr
